<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/Accelerate.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/Foundation.framework'/>
<depends_on path='/System/Library/Frameworks/CoreGraphics.framework'/>
<depends_on path='/System/Library/Frameworks/ImageIO.framework'/>
<depends_on path='/System/Library/Frameworks/MobileCoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<struct name='ALMXGlyphEntry' type='{ALMXGlyphEntry=&quot;GlyphIndexOffset&quot;s&quot;HorizontalAdvance&quot;s&quot;XOffsetToHOrigin&quot;s&quot;VerticalAdvance&quot;s&quot;YOffsetToVOrigin&quot;s}'>
<field declared_type='SInt16' name='GlyphIndexOffset' type='s'/>
<field declared_type='SInt16' name='HorizontalAdvance' type='s'/>
<field declared_type='SInt16' name='XOffsetToHOrigin' type='s'/>
<field declared_type='SInt16' name='VerticalAdvance' type='s'/>
<field declared_type='SInt16' name='YOffsetToVOrigin' type='s'/>
</struct>
<struct name='ALMXHeader' type='{ALMXHeader=&quot;Version&quot;i&quot;Flags&quot;S&quot;NMasters&quot;S&quot;FirstGlyph&quot;S&quot;LastGlyph&quot;S&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}'>
<field declared_type='Fixed' name='Version' type='l' type64='i'/>
<field declared_type='UInt16' name='Flags' type='S'/>
<field declared_type='UInt16' name='NMasters' type='S'/>
<field declared_type='UInt16' name='FirstGlyph' type='S'/>
<field declared_type='UInt16' name='LastGlyph' type='S'/>
<field declared_type='SFNTLookupTable' name='lookup' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'/>
</struct>
<struct name='AnchorPoint' type='{AnchorPoint=&quot;x&quot;s&quot;y&quot;s}'>
<field declared_type='SInt16' name='x' type='s'/>
<field declared_type='SInt16' name='y' type='s'/>
</struct>
<struct name='AnchorPointTable' type='{AnchorPointTable=&quot;nPoints&quot;I&quot;points&quot;[1{AnchorPoint=&quot;x&quot;s&quot;y&quot;s}]}'>
<field declared_type='UInt32' name='nPoints' type='L' type64='I'/>
<field declared_type='AnchorPoint*' name='points' type='[1{AnchorPoint=&quot;x&quot;s&quot;y&quot;s}]'/>
</struct>
<struct name='AnkrTable' type='{AnkrTable=&quot;version&quot;S&quot;flags&quot;S&quot;lookupTableOffset&quot;I&quot;anchorPointTableOffset&quot;I}'>
<field declared_type='UInt16' name='version' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
<field declared_type='UInt32' name='lookupTableOffset' type='L' type64='I'/>
<field declared_type='UInt32' name='anchorPointTableOffset' type='L' type64='I'/>
</struct>
<struct name='BslnFormat0Part' type='{BslnFormat0Part=&quot;deltas&quot;[32s]}'>
<field declared_type='SInt16*' name='deltas' type='[32s]'/>
</struct>
<struct name='BslnFormat1Part' type='{BslnFormat1Part=&quot;deltas&quot;[32s]&quot;mappingData&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}'>
<field declared_type='SInt16*' name='deltas' type='[32s]'/>
<field declared_type='SFNTLookupTable' name='mappingData' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'/>
</struct>
<struct name='BslnFormat2Part' type='{BslnFormat2Part=&quot;stdGlyph&quot;S&quot;ctlPoints&quot;[32s]}'>
<field declared_type='UInt16' name='stdGlyph' type='S'/>
<field declared_type='SInt16*' name='ctlPoints' type='[32s]'/>
</struct>
<struct name='BslnFormat3Part' type='{BslnFormat3Part=&quot;stdGlyph&quot;S&quot;ctlPoints&quot;[32s]&quot;mappingData&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}'>
<field declared_type='UInt16' name='stdGlyph' type='S'/>
<field declared_type='SInt16*' name='ctlPoints' type='[32s]'/>
<field declared_type='SFNTLookupTable' name='mappingData' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'/>
</struct>
<struct name='BslnTable' type='{BslnTable=&quot;version&quot;i&quot;format&quot;S&quot;defaultBaseline&quot;S&quot;parts&quot;(BslnFormatUnion=&quot;fmt0Part&quot;{BslnFormat0Part=&quot;deltas&quot;[32s]}&quot;fmt1Part&quot;{BslnFormat1Part=&quot;deltas&quot;[32s]&quot;mappingData&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}&quot;fmt2Part&quot;{BslnFormat2Part=&quot;stdGlyph&quot;S&quot;ctlPoints&quot;[32s]}&quot;fmt3Part&quot;{BslnFormat3Part=&quot;stdGlyph&quot;S&quot;ctlPoints&quot;[32s]&quot;mappingData&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}})}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='BslnTableFormat' name='format' type='S'/>
<field declared_type='UInt16' name='defaultBaseline' type='S'/>
<field declared_type='BslnFormatUnion' name='parts' type='(BslnFormatUnion=&quot;fmt0Part&quot;{BslnFormat0Part=&quot;deltas&quot;[32s]}&quot;fmt1Part&quot;{BslnFormat1Part=&quot;deltas&quot;[32s]&quot;mappingData&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}&quot;fmt2Part&quot;{BslnFormat2Part=&quot;stdGlyph&quot;S&quot;ctlPoints&quot;[32s]}&quot;fmt3Part&quot;{BslnFormat3Part=&quot;stdGlyph&quot;S&quot;ctlPoints&quot;[32s]&quot;mappingData&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}})'/>
</struct>
<struct name='CTParagraphStyleSetting' type='{CTParagraphStyleSetting=&quot;spec&quot;I&quot;valueSize&quot;I&quot;value&quot;^v}' type64='{CTParagraphStyleSetting=&quot;spec&quot;I&quot;valueSize&quot;Q&quot;value&quot;^v}'>
<field declared_type='CTParagraphStyleSpecifier' name='spec' type='I'/>
<field declared_type='size_t' name='valueSize' type='L' type64='Q'/>
<field const='true' declared_type='void * _Nonnull' name='value' type='^v'/>
</struct>
<struct name='CTRunDelegateCallbacks' type='{_CTRunDelegateCallbacks=&quot;version&quot;i&quot;dealloc&quot;^?&quot;getAscent&quot;^?&quot;getDescent&quot;^?&quot;getWidth&quot;^?}' type64='{_CTRunDelegateCallbacks=&quot;version&quot;q&quot;dealloc&quot;^?&quot;getAscent&quot;^?&quot;getDescent&quot;^?&quot;getWidth&quot;^?}'>
<field declared_type='CFIndex' name='version' type='l' type64='q'/>
<field declared_type='CTRunDelegateDeallocateCallback _Nonnull' function_pointer='true' name='dealloc' type='^?'>
<arg declared_type='void * _Nonnull' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='CTRunDelegateGetAscentCallback _Nonnull' function_pointer='true' name='getAscent' type='^?'>
<arg declared_type='void * _Nonnull' type='^v'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</field>
<field declared_type='CTRunDelegateGetDescentCallback _Nonnull' function_pointer='true' name='getDescent' type='^?'>
<arg declared_type='void * _Nonnull' type='^v'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</field>
<field declared_type='CTRunDelegateGetWidthCallback _Nonnull' function_pointer='true' name='getWidth' type='^?'>
<arg declared_type='void * _Nonnull' type='^v'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</field>
</struct>
<struct name='FontVariation' type='{FontVariation=&quot;name&quot;I&quot;value&quot;i}'>
<field declared_type='FourCharCode' name='name' type='L' type64='I'/>
<field declared_type='Fixed' name='value' type='l' type64='i'/>
</struct>
<struct name='JustDirectionTable' type='{JustDirectionTable=&quot;justClass&quot;S&quot;widthDeltaClusters&quot;S&quot;postcomp&quot;S&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}'>
<field declared_type='UInt16' name='justClass' type='S'/>
<field declared_type='UInt16' name='widthDeltaClusters' type='S'/>
<field declared_type='UInt16' name='postcomp' type='S'/>
<field declared_type='SFNTLookupTable' name='lookup' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'/>
</struct>
<struct name='JustPCAction' type='{JustPCAction=&quot;actionCount&quot;I&quot;actions&quot;[1{JustPCActionSubrecord=&quot;theClass&quot;S&quot;theType&quot;S&quot;length&quot;I&quot;data&quot;I}]}'>
<field declared_type='UInt32' name='actionCount' type='L' type64='I'/>
<field declared_type='JustPCActionSubrecord*' name='actions' type='[1{JustPCActionSubrecord=&quot;theClass&quot;S&quot;theType&quot;S&quot;length&quot;I&quot;data&quot;I}]'/>
</struct>
<struct name='JustPCActionSubrecord' type='{JustPCActionSubrecord=&quot;theClass&quot;S&quot;theType&quot;S&quot;length&quot;I&quot;data&quot;I}'>
<field declared_type='UInt16' name='theClass' type='S'/>
<field declared_type='JustPCActionType' name='theType' type='S'/>
<field declared_type='UInt32' name='length' type='L' type64='I'/>
<field declared_type='UInt32' name='data' type='L' type64='I'/>
</struct>
<struct name='JustPCConditionalAddAction' type='{JustPCConditionalAddAction=&quot;substThreshold&quot;i&quot;addGlyph&quot;S&quot;substGlyph&quot;S}'>
<field declared_type='Fixed' name='substThreshold' type='l' type64='i'/>
<field declared_type='UInt16' name='addGlyph' type='S'/>
<field declared_type='UInt16' name='substGlyph' type='S'/>
</struct>
<struct name='JustPCDecompositionAction' type='{JustPCDecompositionAction=&quot;lowerLimit&quot;i&quot;upperLimit&quot;i&quot;order&quot;S&quot;count&quot;S&quot;glyphs&quot;[1S]}'>
<field declared_type='Fixed' name='lowerLimit' type='l' type64='i'/>
<field declared_type='Fixed' name='upperLimit' type='l' type64='i'/>
<field declared_type='UInt16' name='order' type='S'/>
<field declared_type='UInt16' name='count' type='S'/>
<field declared_type='UInt16*' name='glyphs' type='[1S]'/>
</struct>
<struct name='JustPCDuctilityAction' type='{JustPCDuctilityAction=&quot;ductilityAxis&quot;I&quot;minimumLimit&quot;i&quot;noStretchValue&quot;i&quot;maximumLimit&quot;i}'>
<field declared_type='UInt32' name='ductilityAxis' type='L' type64='I'/>
<field declared_type='Fixed' name='minimumLimit' type='l' type64='i'/>
<field declared_type='Fixed' name='noStretchValue' type='l' type64='i'/>
<field declared_type='Fixed' name='maximumLimit' type='l' type64='i'/>
</struct>
<struct name='JustPCGlyphRepeatAddAction' type='{JustPCGlyphRepeatAddAction=&quot;flags&quot;S&quot;glyph&quot;S}'>
<field declared_type='UInt16' name='flags' type='S'/>
<field declared_type='UInt16' name='glyph' type='S'/>
</struct>
<struct name='JustPostcompTable' type='{JustPostcompTable=&quot;lookupTable&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}'>
<field declared_type='SFNTLookupTable' name='lookupTable' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'/>
</struct>
<struct name='JustTable' type='{JustTable=&quot;version&quot;i&quot;format&quot;S&quot;horizHeaderOffset&quot;S&quot;vertHeaderOffset&quot;S}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='UInt16' name='format' type='S'/>
<field declared_type='UInt16' name='horizHeaderOffset' type='S'/>
<field declared_type='UInt16' name='vertHeaderOffset' type='S'/>
</struct>
<struct name='JustWidthDeltaEntry' type='{JustWidthDeltaEntry=&quot;justClass&quot;I&quot;beforeGrowLimit&quot;i&quot;beforeShrinkLimit&quot;i&quot;afterGrowLimit&quot;i&quot;afterShrinkLimit&quot;i&quot;growFlags&quot;S&quot;shrinkFlags&quot;S}'>
<field declared_type='UInt32' name='justClass' type='L' type64='I'/>
<field declared_type='Fixed' name='beforeGrowLimit' type='l' type64='i'/>
<field declared_type='Fixed' name='beforeShrinkLimit' type='l' type64='i'/>
<field declared_type='Fixed' name='afterGrowLimit' type='l' type64='i'/>
<field declared_type='Fixed' name='afterShrinkLimit' type='l' type64='i'/>
<field declared_type='JustificationFlags' name='growFlags' type='S'/>
<field declared_type='JustificationFlags' name='shrinkFlags' type='S'/>
</struct>
<struct name='JustWidthDeltaGroup' type='{JustWidthDeltaGroup=&quot;count&quot;I&quot;entries&quot;[1{JustWidthDeltaEntry=&quot;justClass&quot;I&quot;beforeGrowLimit&quot;i&quot;beforeShrinkLimit&quot;i&quot;afterGrowLimit&quot;i&quot;afterShrinkLimit&quot;i&quot;growFlags&quot;S&quot;shrinkFlags&quot;S}]}'>
<field declared_type='UInt32' name='count' type='L' type64='I'/>
<field declared_type='JustWidthDeltaEntry*' name='entries' type='[1{JustWidthDeltaEntry=&quot;justClass&quot;I&quot;beforeGrowLimit&quot;i&quot;beforeShrinkLimit&quot;i&quot;afterGrowLimit&quot;i&quot;afterShrinkLimit&quot;i&quot;growFlags&quot;S&quot;shrinkFlags&quot;S}]'/>
</struct>
<struct name='KernIndexArrayHeader' type='{KernIndexArrayHeader=&quot;glyphCount&quot;S&quot;kernValueCount&quot;C&quot;leftClassCount&quot;C&quot;rightClassCount&quot;C&quot;flags&quot;C&quot;kernValue&quot;[1s]&quot;leftClass&quot;[1C]&quot;rightClass&quot;[1C]&quot;kernIndex&quot;[1C]}'>
<field declared_type='UInt16' name='glyphCount' type='S'/>
<field declared_type='UInt8' name='kernValueCount' type='C'/>
<field declared_type='UInt8' name='leftClassCount' type='C'/>
<field declared_type='UInt8' name='rightClassCount' type='C'/>
<field declared_type='UInt8' name='flags' type='C'/>
<field declared_type='SInt16*' name='kernValue' type='[1s]'/>
<field declared_type='UInt8*' name='leftClass' type='[1C]'/>
<field declared_type='UInt8*' name='rightClass' type='[1C]'/>
<field declared_type='UInt8*' name='kernIndex' type='[1C]'/>
</struct>
<struct name='KernKerningPair' type='{KernKerningPair=&quot;left&quot;S&quot;right&quot;S}'>
<field declared_type='UInt16' name='left' type='S'/>
<field declared_type='UInt16' name='right' type='S'/>
</struct>
<struct name='KernOffsetTable' type='{KernOffsetTable=&quot;firstGlyph&quot;S&quot;nGlyphs&quot;S&quot;offsetTable&quot;[1S]}'>
<field declared_type='UInt16' name='firstGlyph' type='S'/>
<field declared_type='UInt16' name='nGlyphs' type='S'/>
<field declared_type='KernArrayOffset*' name='offsetTable' type='[1S]'/>
</struct>
<struct name='KernOrderedListEntry' type='{KernOrderedListEntry=&quot;pair&quot;{KernKerningPair=&quot;left&quot;S&quot;right&quot;S}&quot;value&quot;s}'>
<field declared_type='KernKerningPair' name='pair' type='{KernKerningPair=&quot;left&quot;S&quot;right&quot;S}'/>
<field declared_type='KernKerningValue' name='value' type='s'/>
</struct>
<struct name='KernOrderedListHeader' type='{KernOrderedListHeader=&quot;nPairs&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S&quot;table&quot;[1S]}'>
<field declared_type='UInt16' name='nPairs' type='S'/>
<field declared_type='UInt16' name='searchRange' type='S'/>
<field declared_type='UInt16' name='entrySelector' type='S'/>
<field declared_type='UInt16' name='rangeShift' type='S'/>
<field declared_type='UInt16*' name='table' type='[1S]'/>
</struct>
<struct name='KernSimpleArrayHeader' type='{KernSimpleArrayHeader=&quot;rowWidth&quot;S&quot;leftOffsetTable&quot;S&quot;rightOffsetTable&quot;S&quot;theArray&quot;S&quot;firstTable&quot;[1S]}'>
<field declared_type='UInt16' name='rowWidth' type='S'/>
<field declared_type='UInt16' name='leftOffsetTable' type='S'/>
<field declared_type='UInt16' name='rightOffsetTable' type='S'/>
<field declared_type='KernArrayOffset' name='theArray' type='S'/>
<field declared_type='UInt16*' name='firstTable' type='[1S]'/>
</struct>
<struct name='KernStateEntry' type='{KernStateEntry=&quot;newState&quot;S&quot;flags&quot;S}'>
<field declared_type='UInt16' name='newState' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
</struct>
<struct name='KernStateHeader' type='{KernStateHeader=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;valueTable&quot;S&quot;firstTable&quot;[1C]}'>
<field declared_type='STHeader' name='header' type='{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}'/>
<field declared_type='UInt16' name='valueTable' type='S'/>
<field declared_type='UInt8*' name='firstTable' type='[1C]'/>
</struct>
<struct name='KernSubtableHeader' type='{KernSubtableHeader=&quot;length&quot;i&quot;stInfo&quot;S&quot;tupleIndex&quot;s&quot;fsHeader&quot;(KernFormatSpecificHeader=&quot;orderedList&quot;{KernOrderedListHeader=&quot;nPairs&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S&quot;table&quot;[1S]}&quot;stateTable&quot;{KernStateHeader=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;valueTable&quot;S&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KernSimpleArrayHeader=&quot;rowWidth&quot;S&quot;leftOffsetTable&quot;S&quot;rightOffsetTable&quot;S&quot;theArray&quot;S&quot;firstTable&quot;[1S]}&quot;indexArray&quot;{KernIndexArrayHeader=&quot;glyphCount&quot;S&quot;kernValueCount&quot;C&quot;leftClassCount&quot;C&quot;rightClassCount&quot;C&quot;flags&quot;C&quot;kernValue&quot;[1s]&quot;leftClass&quot;[1C]&quot;rightClass&quot;[1C]&quot;kernIndex&quot;[1C]})}'>
<field declared_type='SInt32' name='length' type='l' type64='i'/>
<field declared_type='KernSubtableInfo' name='stInfo' type='S'/>
<field declared_type='SInt16' name='tupleIndex' type='s'/>
<field declared_type='KernFormatSpecificHeader' name='fsHeader' type='(KernFormatSpecificHeader=&quot;orderedList&quot;{KernOrderedListHeader=&quot;nPairs&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S&quot;table&quot;[1S]}&quot;stateTable&quot;{KernStateHeader=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;valueTable&quot;S&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KernSimpleArrayHeader=&quot;rowWidth&quot;S&quot;leftOffsetTable&quot;S&quot;rightOffsetTable&quot;S&quot;theArray&quot;S&quot;firstTable&quot;[1S]}&quot;indexArray&quot;{KernIndexArrayHeader=&quot;glyphCount&quot;S&quot;kernValueCount&quot;C&quot;leftClassCount&quot;C&quot;rightClassCount&quot;C&quot;flags&quot;C&quot;kernValue&quot;[1s]&quot;leftClass&quot;[1C]&quot;rightClass&quot;[1C]&quot;kernIndex&quot;[1C]})'/>
</struct>
<struct name='KernTableHeader' type='{KernTableHeader=&quot;version&quot;i&quot;nTables&quot;i&quot;firstSubtable&quot;[1S]}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='SInt32' name='nTables' type='l' type64='i'/>
<field declared_type='UInt16*' name='firstSubtable' type='[1S]'/>
</struct>
<struct name='KernVersion0Header' type='{KernVersion0Header=&quot;version&quot;S&quot;nTables&quot;S&quot;firstSubtable&quot;[1S]}'>
<field declared_type='UInt16' name='version' type='S'/>
<field declared_type='UInt16' name='nTables' type='S'/>
<field declared_type='UInt16*' name='firstSubtable' type='[1S]'/>
</struct>
<struct name='KernVersion0SubtableHeader' type='{KernVersion0SubtableHeader=&quot;version&quot;S&quot;length&quot;S&quot;stInfo&quot;S&quot;fsHeader&quot;(KernFormatSpecificHeader=&quot;orderedList&quot;{KernOrderedListHeader=&quot;nPairs&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S&quot;table&quot;[1S]}&quot;stateTable&quot;{KernStateHeader=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;valueTable&quot;S&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KernSimpleArrayHeader=&quot;rowWidth&quot;S&quot;leftOffsetTable&quot;S&quot;rightOffsetTable&quot;S&quot;theArray&quot;S&quot;firstTable&quot;[1S]}&quot;indexArray&quot;{KernIndexArrayHeader=&quot;glyphCount&quot;S&quot;kernValueCount&quot;C&quot;leftClassCount&quot;C&quot;rightClassCount&quot;C&quot;flags&quot;C&quot;kernValue&quot;[1s]&quot;leftClass&quot;[1C]&quot;rightClass&quot;[1C]&quot;kernIndex&quot;[1C]})}'>
<field declared_type='UInt16' name='version' type='S'/>
<field declared_type='UInt16' name='length' type='S'/>
<field declared_type='KernSubtableInfo' name='stInfo' type='S'/>
<field declared_type='KernFormatSpecificHeader' name='fsHeader' type='(KernFormatSpecificHeader=&quot;orderedList&quot;{KernOrderedListHeader=&quot;nPairs&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S&quot;table&quot;[1S]}&quot;stateTable&quot;{KernStateHeader=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;valueTable&quot;S&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KernSimpleArrayHeader=&quot;rowWidth&quot;S&quot;leftOffsetTable&quot;S&quot;rightOffsetTable&quot;S&quot;theArray&quot;S&quot;firstTable&quot;[1S]}&quot;indexArray&quot;{KernIndexArrayHeader=&quot;glyphCount&quot;S&quot;kernValueCount&quot;C&quot;leftClassCount&quot;C&quot;rightClassCount&quot;C&quot;flags&quot;C&quot;kernValue&quot;[1s]&quot;leftClass&quot;[1C]&quot;rightClass&quot;[1C]&quot;kernIndex&quot;[1C]})'/>
</struct>
<struct name='KerxAnchorPointAction' type='{KerxAnchorPointAction=&quot;markAnchorPoint&quot;S&quot;currAnchorPoint&quot;S}'>
<field declared_type='UInt16' name='markAnchorPoint' type='S'/>
<field declared_type='UInt16' name='currAnchorPoint' type='S'/>
</struct>
<struct name='KerxControlPointAction' type='{KerxControlPointAction=&quot;markControlPoint&quot;S&quot;currControlPoint&quot;S}'>
<field declared_type='UInt16' name='markControlPoint' type='S'/>
<field declared_type='UInt16' name='currControlPoint' type='S'/>
</struct>
<struct name='KerxControlPointEntry' type='{KerxControlPointEntry=&quot;newState&quot;S&quot;flags&quot;S&quot;actionIndex&quot;S}'>
<field declared_type='UInt16' name='newState' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
<field declared_type='UInt16' name='actionIndex' type='S'/>
</struct>
<struct name='KerxControlPointHeader' type='{KerxControlPointHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;flags&quot;I&quot;firstTable&quot;[1C]}'>
<field declared_type='STXHeader' name='header' type='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'/>
<field declared_type='UInt32' name='flags' type='L' type64='I'/>
<field declared_type='UInt8*' name='firstTable' type='[1C]'/>
</struct>
<struct name='KerxCoordinateAction' type='{KerxCoordinateAction=&quot;markX&quot;S&quot;markY&quot;S&quot;currX&quot;S&quot;currY&quot;S}'>
<field declared_type='UInt16' name='markX' type='S'/>
<field declared_type='UInt16' name='markY' type='S'/>
<field declared_type='UInt16' name='currX' type='S'/>
<field declared_type='UInt16' name='currY' type='S'/>
</struct>
<struct name='KerxIndexArrayHeader' type='{KerxIndexArrayHeader=&quot;flags&quot;I&quot;rowCount&quot;S&quot;columnCount&quot;S&quot;rowIndexTableOffset&quot;I&quot;columnIndexTableOffset&quot;I&quot;kerningArrayOffset&quot;I&quot;kerningVectorOffset&quot;I}'>
<field declared_type='UInt32' name='flags' type='L' type64='I'/>
<field declared_type='UInt16' name='rowCount' type='S'/>
<field declared_type='UInt16' name='columnCount' type='S'/>
<field declared_type='UInt32' name='rowIndexTableOffset' type='L' type64='I'/>
<field declared_type='UInt32' name='columnIndexTableOffset' type='L' type64='I'/>
<field declared_type='UInt32' name='kerningArrayOffset' type='L' type64='I'/>
<field declared_type='UInt32' name='kerningVectorOffset' type='L' type64='I'/>
</struct>
<struct name='KerxKerningPair' type='{KerxKerningPair=&quot;left&quot;S&quot;right&quot;S}'>
<field declared_type='UInt16' name='left' type='S'/>
<field declared_type='UInt16' name='right' type='S'/>
</struct>
<struct name='KerxOrderedListEntry' type='{KerxOrderedListEntry=&quot;pair&quot;{KerxKerningPair=&quot;left&quot;S&quot;right&quot;S}&quot;value&quot;s}'>
<field declared_type='KerxKerningPair' name='pair' type='{KerxKerningPair=&quot;left&quot;S&quot;right&quot;S}'/>
<field declared_type='KernKerningValue' name='value' type='s'/>
</struct>
<struct name='KerxOrderedListHeader' type='{KerxOrderedListHeader=&quot;nPairs&quot;I&quot;searchRange&quot;I&quot;entrySelector&quot;I&quot;rangeShift&quot;I&quot;table&quot;[1L]}' type64='{KerxOrderedListHeader=&quot;nPairs&quot;I&quot;searchRange&quot;I&quot;entrySelector&quot;I&quot;rangeShift&quot;I&quot;table&quot;[1I]}'>
<field declared_type='UInt32' name='nPairs' type='L' type64='I'/>
<field declared_type='UInt32' name='searchRange' type='L' type64='I'/>
<field declared_type='UInt32' name='entrySelector' type='L' type64='I'/>
<field declared_type='UInt32' name='rangeShift' type='L' type64='I'/>
<field declared_type='UInt32*' name='table' type='[1L]' type64='[1I]'/>
</struct>
<struct name='KerxSimpleArrayHeader' type='{KerxSimpleArrayHeader=&quot;rowWidth&quot;I&quot;leftOffsetTable&quot;I&quot;rightOffsetTable&quot;I&quot;theArray&quot;I&quot;firstTable&quot;[1L]}' type64='{KerxSimpleArrayHeader=&quot;rowWidth&quot;I&quot;leftOffsetTable&quot;I&quot;rightOffsetTable&quot;I&quot;theArray&quot;I&quot;firstTable&quot;[1I]}'>
<field declared_type='UInt32' name='rowWidth' type='L' type64='I'/>
<field declared_type='UInt32' name='leftOffsetTable' type='L' type64='I'/>
<field declared_type='UInt32' name='rightOffsetTable' type='L' type64='I'/>
<field declared_type='KerxArrayOffset' name='theArray' type='L' type64='I'/>
<field declared_type='UInt32*' name='firstTable' type='[1L]' type64='[1I]'/>
</struct>
<struct name='KerxStateEntry' type='{KerxStateEntry=&quot;newState&quot;S&quot;flags&quot;S&quot;valueIndex&quot;S}'>
<field declared_type='UInt16' name='newState' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
<field declared_type='UInt16' name='valueIndex' type='S'/>
</struct>
<struct name='KerxStateHeader' type='{KerxStateHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;valueTable&quot;I&quot;firstTable&quot;[1C]}'>
<field declared_type='STXHeader' name='header' type='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'/>
<field declared_type='UInt32' name='valueTable' type='L' type64='I'/>
<field declared_type='UInt8*' name='firstTable' type='[1C]'/>
</struct>
<struct name='KerxSubtableHeader' type='{KerxSubtableHeader=&quot;length&quot;I&quot;stInfo&quot;I&quot;tupleCount&quot;I&quot;fsHeader&quot;(KerxFormatSpecificHeader=&quot;orderedList&quot;{KerxOrderedListHeader=&quot;nPairs&quot;I&quot;searchRange&quot;I&quot;entrySelector&quot;I&quot;rangeShift&quot;I&quot;table&quot;[1L]}&quot;stateTable&quot;{KerxStateHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;valueTable&quot;I&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KerxSimpleArrayHeader=&quot;rowWidth&quot;I&quot;leftOffsetTable&quot;I&quot;rightOffsetTable&quot;I&quot;theArray&quot;I&quot;firstTable&quot;[1L]}&quot;indexArray&quot;{KerxIndexArrayHeader=&quot;flags&quot;I&quot;rowCount&quot;S&quot;columnCount&quot;S&quot;rowIndexTableOffset&quot;I&quot;columnIndexTableOffset&quot;I&quot;kerningArrayOffset&quot;I&quot;kerningVectorOffset&quot;I}&quot;controlPoint&quot;{KerxControlPointHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;flags&quot;I&quot;firstTable&quot;[1C]})}' type64='{KerxSubtableHeader=&quot;length&quot;I&quot;stInfo&quot;I&quot;tupleCount&quot;I&quot;fsHeader&quot;(KerxFormatSpecificHeader=&quot;orderedList&quot;{KerxOrderedListHeader=&quot;nPairs&quot;I&quot;searchRange&quot;I&quot;entrySelector&quot;I&quot;rangeShift&quot;I&quot;table&quot;[1I]}&quot;stateTable&quot;{KerxStateHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;valueTable&quot;I&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KerxSimpleArrayHeader=&quot;rowWidth&quot;I&quot;leftOffsetTable&quot;I&quot;rightOffsetTable&quot;I&quot;theArray&quot;I&quot;firstTable&quot;[1I]}&quot;indexArray&quot;{KerxIndexArrayHeader=&quot;flags&quot;I&quot;rowCount&quot;S&quot;columnCount&quot;S&quot;rowIndexTableOffset&quot;I&quot;columnIndexTableOffset&quot;I&quot;kerningArrayOffset&quot;I&quot;kerningVectorOffset&quot;I}&quot;controlPoint&quot;{KerxControlPointHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;flags&quot;I&quot;firstTable&quot;[1C]})}'>
<field declared_type='UInt32' name='length' type='L' type64='I'/>
<field declared_type='KerxSubtableCoverage' name='stInfo' type='L' type64='I'/>
<field declared_type='UInt32' name='tupleCount' type='L' type64='I'/>
<field declared_type='KerxFormatSpecificHeader' name='fsHeader' type='(KerxFormatSpecificHeader=&quot;orderedList&quot;{KerxOrderedListHeader=&quot;nPairs&quot;I&quot;searchRange&quot;I&quot;entrySelector&quot;I&quot;rangeShift&quot;I&quot;table&quot;[1L]}&quot;stateTable&quot;{KerxStateHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;valueTable&quot;I&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KerxSimpleArrayHeader=&quot;rowWidth&quot;I&quot;leftOffsetTable&quot;I&quot;rightOffsetTable&quot;I&quot;theArray&quot;I&quot;firstTable&quot;[1L]}&quot;indexArray&quot;{KerxIndexArrayHeader=&quot;flags&quot;I&quot;rowCount&quot;S&quot;columnCount&quot;S&quot;rowIndexTableOffset&quot;I&quot;columnIndexTableOffset&quot;I&quot;kerningArrayOffset&quot;I&quot;kerningVectorOffset&quot;I}&quot;controlPoint&quot;{KerxControlPointHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;flags&quot;I&quot;firstTable&quot;[1C]})' type64='(KerxFormatSpecificHeader=&quot;orderedList&quot;{KerxOrderedListHeader=&quot;nPairs&quot;I&quot;searchRange&quot;I&quot;entrySelector&quot;I&quot;rangeShift&quot;I&quot;table&quot;[1I]}&quot;stateTable&quot;{KerxStateHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;valueTable&quot;I&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KerxSimpleArrayHeader=&quot;rowWidth&quot;I&quot;leftOffsetTable&quot;I&quot;rightOffsetTable&quot;I&quot;theArray&quot;I&quot;firstTable&quot;[1I]}&quot;indexArray&quot;{KerxIndexArrayHeader=&quot;flags&quot;I&quot;rowCount&quot;S&quot;columnCount&quot;S&quot;rowIndexTableOffset&quot;I&quot;columnIndexTableOffset&quot;I&quot;kerningArrayOffset&quot;I&quot;kerningVectorOffset&quot;I}&quot;controlPoint&quot;{KerxControlPointHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;flags&quot;I&quot;firstTable&quot;[1C]})'/>
</struct>
<struct name='KerxTableHeader' type='{KerxTableHeader=&quot;version&quot;i&quot;nTables&quot;I&quot;firstSubtable&quot;[1L]}' type64='{KerxTableHeader=&quot;version&quot;i&quot;nTables&quot;I&quot;firstSubtable&quot;[1I]}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='UInt32' name='nTables' type='L' type64='I'/>
<field declared_type='UInt32*' name='firstSubtable' type='[1L]' type64='[1I]'/>
</struct>
<struct name='LcarCaretClassEntry' type='{LcarCaretClassEntry=&quot;count&quot;S&quot;partials&quot;[1S]}'>
<field declared_type='UInt16' name='count' type='S'/>
<field declared_type='UInt16*' name='partials' type='[1S]'/>
</struct>
<struct name='LcarCaretTable' type='{LcarCaretTable=&quot;version&quot;i&quot;format&quot;S&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='UInt16' name='format' type='S'/>
<field declared_type='SFNTLookupTable' name='lookup' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'/>
</struct>
<struct name='LtagStringRange' type='{LtagStringRange=&quot;offset&quot;S&quot;length&quot;S}'>
<field declared_type='UInt16' name='offset' type='S'/>
<field declared_type='UInt16' name='length' type='S'/>
</struct>
<struct name='LtagTable' type='{LtagTable=&quot;version&quot;I&quot;flags&quot;I&quot;numTags&quot;I&quot;tagRange&quot;[1{LtagStringRange=&quot;offset&quot;S&quot;length&quot;S}]}'>
<field declared_type='UInt32' name='version' type='L' type64='I'/>
<field declared_type='UInt32' name='flags' type='L' type64='I'/>
<field declared_type='UInt32' name='numTags' type='L' type64='I'/>
<field declared_type='LtagStringRange*' name='tagRange' type='[1{LtagStringRange=&quot;offset&quot;S&quot;length&quot;S}]'/>
</struct>
<struct name='MortChain' type='{MortChain=&quot;defaultFlags&quot;I&quot;length&quot;I&quot;nFeatures&quot;S&quot;nSubtables&quot;S&quot;featureEntries&quot;[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]}'>
<field declared_type='MortSubtableMaskFlags' name='defaultFlags' type='L' type64='I'/>
<field declared_type='UInt32' name='length' type='L' type64='I'/>
<field declared_type='UInt16' name='nFeatures' type='S'/>
<field declared_type='UInt16' name='nSubtables' type='S'/>
<field declared_type='MortFeatureEntry*' name='featureEntries' type='[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]'/>
</struct>
<struct name='MortContextualSubtable' type='{MortContextualSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;substitutionTableOffset&quot;S}'>
<field declared_type='STHeader' name='header' type='{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}'/>
<field declared_type='UInt16' name='substitutionTableOffset' type='S'/>
</struct>
<struct name='MortFeatureEntry' type='{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}'>
<field declared_type='UInt16' name='featureType' type='S'/>
<field declared_type='UInt16' name='featureSelector' type='S'/>
<field declared_type='MortSubtableMaskFlags' name='enableFlags' type='L' type64='I'/>
<field declared_type='MortSubtableMaskFlags' name='disableFlags' type='L' type64='I'/>
</struct>
<struct name='MortInsertionSubtable' type='{MortInsertionSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}}'>
<field declared_type='STHeader' name='header' type='{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}'/>
</struct>
<struct name='MortLigatureSubtable' type='{MortLigatureSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;ligatureActionTableOffset&quot;S&quot;componentTableOffset&quot;S&quot;ligatureTableOffset&quot;S}'>
<field declared_type='STHeader' name='header' type='{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}'/>
<field declared_type='UInt16' name='ligatureActionTableOffset' type='S'/>
<field declared_type='UInt16' name='componentTableOffset' type='S'/>
<field declared_type='UInt16' name='ligatureTableOffset' type='S'/>
</struct>
<struct name='MortRearrangementSubtable' type='{MortRearrangementSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}}'>
<field declared_type='STHeader' name='header' type='{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}'/>
</struct>
<struct name='MortSubtable' type='{MortSubtable=&quot;length&quot;S&quot;coverage&quot;S&quot;flags&quot;I&quot;u&quot;(MortSpecificSubtable=&quot;rearrangement&quot;{MortRearrangementSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}}&quot;contextual&quot;{MortContextualSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;substitutionTableOffset&quot;S}&quot;ligature&quot;{MortLigatureSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;ligatureActionTableOffset&quot;S&quot;componentTableOffset&quot;S&quot;ligatureTableOffset&quot;S}&quot;swash&quot;{MortSwashSubtable=&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}&quot;insertion&quot;{MortInsertionSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}})}'>
<field declared_type='UInt16' name='length' type='S'/>
<field declared_type='UInt16' name='coverage' type='S'/>
<field declared_type='MortSubtableMaskFlags' name='flags' type='L' type64='I'/>
<field declared_type='MortSpecificSubtable' name='u' type='(MortSpecificSubtable=&quot;rearrangement&quot;{MortRearrangementSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}}&quot;contextual&quot;{MortContextualSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;substitutionTableOffset&quot;S}&quot;ligature&quot;{MortLigatureSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;ligatureActionTableOffset&quot;S&quot;componentTableOffset&quot;S&quot;ligatureTableOffset&quot;S}&quot;swash&quot;{MortSwashSubtable=&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}&quot;insertion&quot;{MortInsertionSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}})'/>
</struct>
<struct name='MortSwashSubtable' type='{MortSwashSubtable=&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}'>
<field declared_type='SFNTLookupTable' name='lookup' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'/>
</struct>
<struct name='MortTable' type='{MortTable=&quot;version&quot;i&quot;nChains&quot;I&quot;chains&quot;[1{MortChain=&quot;defaultFlags&quot;I&quot;length&quot;I&quot;nFeatures&quot;S&quot;nSubtables&quot;S&quot;featureEntries&quot;[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]}]}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='UInt32' name='nChains' type='L' type64='I'/>
<field declared_type='MortChain*' name='chains' type='[1{MortChain=&quot;defaultFlags&quot;I&quot;length&quot;I&quot;nFeatures&quot;S&quot;nSubtables&quot;S&quot;featureEntries&quot;[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]}]'/>
</struct>
<struct name='MorxChain' type='{MorxChain=&quot;defaultFlags&quot;I&quot;length&quot;I&quot;nFeatures&quot;I&quot;nSubtables&quot;I&quot;featureEntries&quot;[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]}'>
<field declared_type='MortSubtableMaskFlags' name='defaultFlags' type='L' type64='I'/>
<field declared_type='UInt32' name='length' type='L' type64='I'/>
<field declared_type='UInt32' name='nFeatures' type='L' type64='I'/>
<field declared_type='UInt32' name='nSubtables' type='L' type64='I'/>
<field declared_type='MortFeatureEntry*' name='featureEntries' type='[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]'/>
</struct>
<struct name='MorxContextualSubtable' type='{MorxContextualSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;substitutionTableOffset&quot;I}'>
<field declared_type='STXHeader' name='header' type='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'/>
<field declared_type='UInt32' name='substitutionTableOffset' type='L' type64='I'/>
</struct>
<struct name='MorxInsertionSubtable' type='{MorxInsertionSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;insertionGlyphTableOffset&quot;I}'>
<field declared_type='STXHeader' name='header' type='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'/>
<field declared_type='UInt32' name='insertionGlyphTableOffset' type='L' type64='I'/>
</struct>
<struct name='MorxLigatureSubtable' type='{MorxLigatureSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;ligatureActionTableOffset&quot;I&quot;componentTableOffset&quot;I&quot;ligatureTableOffset&quot;I}'>
<field declared_type='STXHeader' name='header' type='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'/>
<field declared_type='UInt32' name='ligatureActionTableOffset' type='L' type64='I'/>
<field declared_type='UInt32' name='componentTableOffset' type='L' type64='I'/>
<field declared_type='UInt32' name='ligatureTableOffset' type='L' type64='I'/>
</struct>
<struct name='MorxRearrangementSubtable' type='{MorxRearrangementSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}}'>
<field declared_type='STXHeader' name='header' type='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'/>
</struct>
<struct name='MorxSubtable' type='{MorxSubtable=&quot;length&quot;I&quot;coverage&quot;I&quot;flags&quot;I&quot;u&quot;(MorxSpecificSubtable=&quot;rearrangement&quot;{MorxRearrangementSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}}&quot;contextual&quot;{MorxContextualSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;substitutionTableOffset&quot;I}&quot;ligature&quot;{MorxLigatureSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;ligatureActionTableOffset&quot;I&quot;componentTableOffset&quot;I&quot;ligatureTableOffset&quot;I}&quot;swash&quot;{MortSwashSubtable=&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}&quot;insertion&quot;{MorxInsertionSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;insertionGlyphTableOffset&quot;I})}'>
<field declared_type='UInt32' name='length' type='L' type64='I'/>
<field declared_type='UInt32' name='coverage' type='L' type64='I'/>
<field declared_type='MortSubtableMaskFlags' name='flags' type='L' type64='I'/>
<field declared_type='MorxSpecificSubtable' name='u' type='(MorxSpecificSubtable=&quot;rearrangement&quot;{MorxRearrangementSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}}&quot;contextual&quot;{MorxContextualSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;substitutionTableOffset&quot;I}&quot;ligature&quot;{MorxLigatureSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;ligatureActionTableOffset&quot;I&quot;componentTableOffset&quot;I&quot;ligatureTableOffset&quot;I}&quot;swash&quot;{MortSwashSubtable=&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}&quot;insertion&quot;{MorxInsertionSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;insertionGlyphTableOffset&quot;I})'/>
</struct>
<struct name='MorxTable' type='{MorxTable=&quot;version&quot;i&quot;nChains&quot;I&quot;chains&quot;[1{MorxChain=&quot;defaultFlags&quot;I&quot;length&quot;I&quot;nFeatures&quot;I&quot;nSubtables&quot;I&quot;featureEntries&quot;[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]}]}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='UInt32' name='nChains' type='L' type64='I'/>
<field declared_type='MorxChain*' name='chains' type='[1{MorxChain=&quot;defaultFlags&quot;I&quot;length&quot;I&quot;nFeatures&quot;I&quot;nSubtables&quot;I&quot;featureEntries&quot;[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]}]'/>
</struct>
<struct name='OpbdSideValues' type='{OpbdSideValues=&quot;leftSideShift&quot;s&quot;topSideShift&quot;s&quot;rightSideShift&quot;s&quot;bottomSideShift&quot;s}'>
<field declared_type='SInt16' name='leftSideShift' type='s'/>
<field declared_type='SInt16' name='topSideShift' type='s'/>
<field declared_type='SInt16' name='rightSideShift' type='s'/>
<field declared_type='SInt16' name='bottomSideShift' type='s'/>
</struct>
<struct name='OpbdTable' type='{OpbdTable=&quot;version&quot;i&quot;format&quot;S&quot;lookupTable&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='OpbdTableFormat' name='format' type='S'/>
<field declared_type='SFNTLookupTable' name='lookupTable' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'/>
</struct>
<struct name='PropLookupSegment' type='{PropLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;S}'>
<field declared_type='UInt16' name='lastGlyph' type='S'/>
<field declared_type='UInt16' name='firstGlyph' type='S'/>
<field declared_type='UInt16' name='value' type='S'/>
</struct>
<struct name='PropLookupSingle' type='{PropLookupSingle=&quot;glyph&quot;S&quot;props&quot;S}'>
<field declared_type='UInt16' name='glyph' type='S'/>
<field declared_type='PropCharProperties' name='props' type='S'/>
</struct>
<struct name='PropTable' type='{PropTable=&quot;version&quot;i&quot;format&quot;S&quot;defaultProps&quot;S&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='UInt16' name='format' type='S'/>
<field declared_type='PropCharProperties' name='defaultProps' type='S'/>
<field declared_type='SFNTLookupTable' name='lookup' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'/>
</struct>
<struct name='ROTAGlyphEntry' type='{ROTAGlyphEntry=&quot;GlyphIndexOffset&quot;s&quot;HBaselineOffset&quot;s&quot;VBaselineOffset&quot;s}'>
<field declared_type='SInt16' name='GlyphIndexOffset' type='s'/>
<field declared_type='SInt16' name='HBaselineOffset' type='s'/>
<field declared_type='SInt16' name='VBaselineOffset' type='s'/>
</struct>
<struct name='ROTAHeader' type='{ROTAHeader=&quot;Version&quot;i&quot;Flags&quot;S&quot;NMasters&quot;S&quot;FirstGlyph&quot;S&quot;LastGlyph&quot;S&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}'>
<field declared_type='Fixed' name='Version' type='l' type64='i'/>
<field declared_type='UInt16' name='Flags' type='S'/>
<field declared_type='UInt16' name='NMasters' type='S'/>
<field declared_type='UInt16' name='FirstGlyph' type='S'/>
<field declared_type='UInt16' name='LastGlyph' type='S'/>
<field declared_type='SFNTLookupTable' name='lookup' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'/>
</struct>
<struct name='SFNTLookupArrayHeader' type='{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}'>
<field declared_type='SFNTLookupValue*' name='lookupValues' type='[1S]'/>
</struct>
<struct name='SFNTLookupBinarySearchHeader' type='{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}'>
<field declared_type='UInt16' name='unitSize' type='S'/>
<field declared_type='UInt16' name='nUnits' type='S'/>
<field declared_type='UInt16' name='searchRange' type='S'/>
<field declared_type='UInt16' name='entrySelector' type='S'/>
<field declared_type='UInt16' name='rangeShift' type='S'/>
</struct>
<struct name='SFNTLookupSegment' type='{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}'>
<field declared_type='UInt16' name='lastGlyph' type='S'/>
<field declared_type='UInt16' name='firstGlyph' type='S'/>
<field declared_type='UInt16*' name='value' type='[1S]'/>
</struct>
<struct name='SFNTLookupSegmentHeader' type='{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}'>
<field declared_type='SFNTLookupBinarySearchHeader' name='binSearch' type='{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}'/>
<field declared_type='SFNTLookupSegment*' name='segments' type='[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]'/>
</struct>
<struct name='SFNTLookupSingle' type='{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}'>
<field declared_type='UInt16' name='glyph' type='S'/>
<field declared_type='UInt16*' name='value' type='[1S]'/>
</struct>
<struct name='SFNTLookupSingleHeader' type='{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}'>
<field declared_type='SFNTLookupBinarySearchHeader' name='binSearch' type='{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}'/>
<field declared_type='SFNTLookupSingle*' name='entries' type='[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]'/>
</struct>
<struct name='SFNTLookupTable' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'>
<field declared_type='SFNTLookupTableFormat' name='format' type='S'/>
<field declared_type='SFNTLookupFormatSpecificHeader' name='fsHeader' type='(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})'/>
</struct>
<struct name='SFNTLookupTrimmedArrayHeader' type='{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}'>
<field declared_type='UInt16' name='firstGlyph' type='S'/>
<field declared_type='UInt16' name='count' type='S'/>
<field declared_type='SFNTLookupValue*' name='valueArray' type='[1S]'/>
</struct>
<struct name='SFNTLookupVectorHeader' type='{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]}'>
<field declared_type='UInt16' name='valueSize' type='S'/>
<field declared_type='UInt16' name='firstGlyph' type='S'/>
<field declared_type='UInt16' name='count' type='S'/>
<field declared_type='UInt8*' name='values' type='[1C]'/>
</struct>
<struct name='STClassTable' type='{STClassTable=&quot;firstGlyph&quot;S&quot;nGlyphs&quot;S&quot;classes&quot;[1C]}'>
<field declared_type='UInt16' name='firstGlyph' type='S'/>
<field declared_type='UInt16' name='nGlyphs' type='S'/>
<field declared_type='STClass*' name='classes' type='[1C]'/>
</struct>
<struct name='STEntryOne' type='{STEntryOne=&quot;newState&quot;S&quot;flags&quot;S&quot;offset1&quot;S}'>
<field declared_type='UInt16' name='newState' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
<field declared_type='UInt16' name='offset1' type='S'/>
</struct>
<struct name='STEntryTwo' type='{STEntryTwo=&quot;newState&quot;S&quot;flags&quot;S&quot;offset1&quot;S&quot;offset2&quot;S}'>
<field declared_type='UInt16' name='newState' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
<field declared_type='UInt16' name='offset1' type='S'/>
<field declared_type='UInt16' name='offset2' type='S'/>
</struct>
<struct name='STEntryZero' type='{STEntryZero=&quot;newState&quot;S&quot;flags&quot;S}'>
<field declared_type='UInt16' name='newState' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
</struct>
<struct name='STHeader' type='{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}'>
<field declared_type='UInt8' name='filler' type='C'/>
<field declared_type='STClass' name='nClasses' type='C'/>
<field declared_type='UInt16' name='classTableOffset' type='S'/>
<field declared_type='UInt16' name='stateArrayOffset' type='S'/>
<field declared_type='UInt16' name='entryTableOffset' type='S'/>
</struct>
<struct name='STXClassTable' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'>
<field declared_type='SFNTLookupTableFormat' name='format' type='S'/>
<field declared_type='SFNTLookupFormatSpecificHeader' name='fsHeader' type='(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})'/>
</struct>
<struct name='STXEntryOne' type='{STXEntryOne=&quot;newState&quot;S&quot;flags&quot;S&quot;index1&quot;S}'>
<field declared_type='STXStateIndex' name='newState' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
<field declared_type='UInt16' name='index1' type='S'/>
</struct>
<struct name='STXEntryTwo' type='{STXEntryTwo=&quot;newState&quot;S&quot;flags&quot;S&quot;index1&quot;S&quot;index2&quot;S}'>
<field declared_type='STXStateIndex' name='newState' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
<field declared_type='UInt16' name='index1' type='S'/>
<field declared_type='UInt16' name='index2' type='S'/>
</struct>
<struct name='STXEntryZero' type='{STXEntryZero=&quot;newState&quot;S&quot;flags&quot;S}'>
<field declared_type='STXStateIndex' name='newState' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
</struct>
<struct name='STXHeader' type='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'>
<field declared_type='UInt32' name='nClasses' type='L' type64='I'/>
<field declared_type='UInt32' name='classTableOffset' type='L' type64='I'/>
<field declared_type='UInt32' name='stateArrayOffset' type='L' type64='I'/>
<field declared_type='UInt32' name='entryTableOffset' type='L' type64='I'/>
</struct>
<struct name='TrakTable' type='{TrakTable=&quot;version&quot;i&quot;format&quot;S&quot;horizOffset&quot;S&quot;vertOffset&quot;S}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='UInt16' name='format' type='S'/>
<field declared_type='UInt16' name='horizOffset' type='S'/>
<field declared_type='UInt16' name='vertOffset' type='S'/>
</struct>
<struct name='TrakTableData' type='{TrakTableData=&quot;nTracks&quot;S&quot;nSizes&quot;S&quot;sizeTableOffset&quot;I&quot;trakTable&quot;[1{TrakTableEntry=&quot;track&quot;i&quot;nameTableIndex&quot;S&quot;sizesOffset&quot;S}]}'>
<field declared_type='UInt16' name='nTracks' type='S'/>
<field declared_type='UInt16' name='nSizes' type='S'/>
<field declared_type='UInt32' name='sizeTableOffset' type='L' type64='I'/>
<field declared_type='TrakTableEntry*' name='trakTable' type='[1{TrakTableEntry=&quot;track&quot;i&quot;nameTableIndex&quot;S&quot;sizesOffset&quot;S}]'/>
</struct>
<struct name='TrakTableEntry' type='{TrakTableEntry=&quot;track&quot;i&quot;nameTableIndex&quot;S&quot;sizesOffset&quot;S}'>
<field declared_type='Fixed' name='track' type='l' type64='i'/>
<field declared_type='UInt16' name='nameTableIndex' type='S'/>
<field declared_type='UInt16' name='sizesOffset' type='S'/>
</struct>
<struct name='sfntCMapEncoding' type='{sfntCMapEncoding=&quot;platformID&quot;S&quot;scriptID&quot;S&quot;offset&quot;I}'>
<field declared_type='UInt16' name='platformID' type='S'/>
<field declared_type='UInt16' name='scriptID' type='S'/>
<field declared_type='UInt32' name='offset' type='L' type64='I'/>
</struct>
<struct name='sfntCMapExtendedSubHeader' type='{sfntCMapExtendedSubHeader=&quot;format&quot;S&quot;reserved&quot;S&quot;length&quot;I&quot;language&quot;I}'>
<field declared_type='UInt16' name='format' type='S'/>
<field declared_type='UInt16' name='reserved' type='S'/>
<field declared_type='UInt32' name='length' type='L' type64='I'/>
<field declared_type='UInt32' name='language' type='L' type64='I'/>
</struct>
<struct name='sfntCMapHeader' type='{sfntCMapHeader=&quot;version&quot;S&quot;numTables&quot;S&quot;encoding&quot;[1{sfntCMapEncoding=&quot;platformID&quot;S&quot;scriptID&quot;S&quot;offset&quot;I}]}'>
<field declared_type='UInt16' name='version' type='S'/>
<field declared_type='UInt16' name='numTables' type='S'/>
<field declared_type='sfntCMapEncoding*' name='encoding' type='[1{sfntCMapEncoding=&quot;platformID&quot;S&quot;scriptID&quot;S&quot;offset&quot;I}]'/>
</struct>
<struct name='sfntCMapSubHeader' type='{sfntCMapSubHeader=&quot;format&quot;S&quot;length&quot;S&quot;languageID&quot;S}'>
<field declared_type='UInt16' name='format' type='S'/>
<field declared_type='UInt16' name='length' type='S'/>
<field declared_type='UInt16' name='languageID' type='S'/>
</struct>
<struct name='sfntDescriptorHeader' type='{sfntDescriptorHeader=&quot;version&quot;i&quot;descriptorCount&quot;i&quot;descriptor&quot;[1{sfntFontDescriptor=&quot;name&quot;I&quot;value&quot;i}]}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='SInt32' name='descriptorCount' type='l' type64='i'/>
<field declared_type='sfntFontDescriptor*' name='descriptor' type='[1{sfntFontDescriptor=&quot;name&quot;I&quot;value&quot;i}]'/>
</struct>
<struct name='sfntDirectory' type='{sfntDirectory=&quot;format&quot;I&quot;numOffsets&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S&quot;table&quot;[1{sfntDirectoryEntry=&quot;tableTag&quot;I&quot;checkSum&quot;I&quot;offset&quot;I&quot;length&quot;I}]}'>
<field declared_type='FourCharCode' name='format' type='L' type64='I'/>
<field declared_type='UInt16' name='numOffsets' type='S'/>
<field declared_type='UInt16' name='searchRange' type='S'/>
<field declared_type='UInt16' name='entrySelector' type='S'/>
<field declared_type='UInt16' name='rangeShift' type='S'/>
<field declared_type='sfntDirectoryEntry*' name='table' type='[1{sfntDirectoryEntry=&quot;tableTag&quot;I&quot;checkSum&quot;I&quot;offset&quot;I&quot;length&quot;I}]'/>
</struct>
<struct name='sfntDirectoryEntry' type='{sfntDirectoryEntry=&quot;tableTag&quot;I&quot;checkSum&quot;I&quot;offset&quot;I&quot;length&quot;I}'>
<field declared_type='FourCharCode' name='tableTag' type='L' type64='I'/>
<field declared_type='UInt32' name='checkSum' type='L' type64='I'/>
<field declared_type='UInt32' name='offset' type='L' type64='I'/>
<field declared_type='UInt32' name='length' type='L' type64='I'/>
</struct>
<struct name='sfntFeatureHeader' type='{sfntFeatureHeader=&quot;version&quot;i&quot;featureNameCount&quot;S&quot;featureSetCount&quot;S&quot;reserved&quot;i&quot;names&quot;[1{sfntFeatureName=&quot;featureType&quot;S&quot;settingCount&quot;S&quot;offsetToSettings&quot;i&quot;featureFlags&quot;S&quot;nameID&quot;s}]&quot;settings&quot;[1{sfntFontFeatureSetting=&quot;setting&quot;S&quot;nameID&quot;s}]&quot;runs&quot;[1{sfntFontRunFeature=&quot;featureType&quot;S&quot;setting&quot;S}]}'>
<field declared_type='SInt32' name='version' type='l' type64='i'/>
<field declared_type='UInt16' name='featureNameCount' type='S'/>
<field declared_type='UInt16' name='featureSetCount' type='S'/>
<field declared_type='SInt32' name='reserved' type='l' type64='i'/>
<field declared_type='sfntFeatureName*' name='names' type='[1{sfntFeatureName=&quot;featureType&quot;S&quot;settingCount&quot;S&quot;offsetToSettings&quot;i&quot;featureFlags&quot;S&quot;nameID&quot;s}]'/>
<field declared_type='sfntFontFeatureSetting*' name='settings' type='[1{sfntFontFeatureSetting=&quot;setting&quot;S&quot;nameID&quot;s}]'/>
<field declared_type='sfntFontRunFeature*' name='runs' type='[1{sfntFontRunFeature=&quot;featureType&quot;S&quot;setting&quot;S}]'/>
</struct>
<struct name='sfntFeatureName' type='{sfntFeatureName=&quot;featureType&quot;S&quot;settingCount&quot;S&quot;offsetToSettings&quot;i&quot;featureFlags&quot;S&quot;nameID&quot;s}'>
<field declared_type='UInt16' name='featureType' type='S'/>
<field declared_type='UInt16' name='settingCount' type='S'/>
<field declared_type='SInt32' name='offsetToSettings' type='l' type64='i'/>
<field declared_type='UInt16' name='featureFlags' type='S'/>
<field declared_type='SInt16' name='nameID' type='s'/>
</struct>
<struct name='sfntFontDescriptor' type='{sfntFontDescriptor=&quot;name&quot;I&quot;value&quot;i}'>
<field declared_type='FourCharCode' name='name' type='L' type64='I'/>
<field declared_type='Fixed' name='value' type='l' type64='i'/>
</struct>
<struct name='sfntFontFeatureSetting' type='{sfntFontFeatureSetting=&quot;setting&quot;S&quot;nameID&quot;s}'>
<field declared_type='UInt16' name='setting' type='S'/>
<field declared_type='SInt16' name='nameID' type='s'/>
</struct>
<struct name='sfntFontRunFeature' type='{sfntFontRunFeature=&quot;featureType&quot;S&quot;setting&quot;S}'>
<field declared_type='UInt16' name='featureType' type='S'/>
<field declared_type='UInt16' name='setting' type='S'/>
</struct>
<struct name='sfntInstance' type='{sfntInstance=&quot;nameID&quot;s&quot;flags&quot;s&quot;coord&quot;[1l]}' type64='{sfntInstance=&quot;nameID&quot;s&quot;flags&quot;s&quot;coord&quot;[1i]}'>
<field declared_type='SInt16' name='nameID' type='s'/>
<field declared_type='SInt16' name='flags' type='s'/>
<field declared_type='Fixed*' name='coord' type='[1l]' type64='[1i]'/>
</struct>
<struct name='sfntNameHeader' type='{sfntNameHeader=&quot;format&quot;S&quot;count&quot;S&quot;stringOffset&quot;S&quot;rec&quot;[1{sfntNameRecord=&quot;platformID&quot;S&quot;scriptID&quot;S&quot;languageID&quot;S&quot;nameID&quot;S&quot;length&quot;S&quot;offset&quot;S}]}'>
<field declared_type='UInt16' name='format' type='S'/>
<field declared_type='UInt16' name='count' type='S'/>
<field declared_type='UInt16' name='stringOffset' type='S'/>
<field declared_type='sfntNameRecord*' name='rec' type='[1{sfntNameRecord=&quot;platformID&quot;S&quot;scriptID&quot;S&quot;languageID&quot;S&quot;nameID&quot;S&quot;length&quot;S&quot;offset&quot;S}]'/>
</struct>
<struct name='sfntNameRecord' type='{sfntNameRecord=&quot;platformID&quot;S&quot;scriptID&quot;S&quot;languageID&quot;S&quot;nameID&quot;S&quot;length&quot;S&quot;offset&quot;S}'>
<field declared_type='UInt16' name='platformID' type='S'/>
<field declared_type='UInt16' name='scriptID' type='S'/>
<field declared_type='UInt16' name='languageID' type='S'/>
<field declared_type='UInt16' name='nameID' type='S'/>
<field declared_type='UInt16' name='length' type='S'/>
<field declared_type='UInt16' name='offset' type='S'/>
</struct>
<struct name='sfntVariationAxis' type='{sfntVariationAxis=&quot;axisTag&quot;I&quot;minValue&quot;i&quot;defaultValue&quot;i&quot;maxValue&quot;i&quot;flags&quot;s&quot;nameID&quot;s}'>
<field declared_type='FourCharCode' name='axisTag' type='L' type64='I'/>
<field declared_type='Fixed' name='minValue' type='l' type64='i'/>
<field declared_type='Fixed' name='defaultValue' type='l' type64='i'/>
<field declared_type='Fixed' name='maxValue' type='l' type64='i'/>
<field declared_type='SInt16' name='flags' type='s'/>
<field declared_type='SInt16' name='nameID' type='s'/>
</struct>
<struct name='sfntVariationHeader' type='{sfntVariationHeader=&quot;version&quot;i&quot;offsetToData&quot;S&quot;countSizePairs&quot;S&quot;axisCount&quot;S&quot;axisSize&quot;S&quot;instanceCount&quot;S&quot;instanceSize&quot;S&quot;axis&quot;[1{sfntVariationAxis=&quot;axisTag&quot;I&quot;minValue&quot;i&quot;defaultValue&quot;i&quot;maxValue&quot;i&quot;flags&quot;s&quot;nameID&quot;s}]&quot;instance&quot;[1{sfntInstance=&quot;nameID&quot;s&quot;flags&quot;s&quot;coord&quot;[1l]}]}' type64='{sfntVariationHeader=&quot;version&quot;i&quot;offsetToData&quot;S&quot;countSizePairs&quot;S&quot;axisCount&quot;S&quot;axisSize&quot;S&quot;instanceCount&quot;S&quot;instanceSize&quot;S&quot;axis&quot;[1{sfntVariationAxis=&quot;axisTag&quot;I&quot;minValue&quot;i&quot;defaultValue&quot;i&quot;maxValue&quot;i&quot;flags&quot;s&quot;nameID&quot;s}]&quot;instance&quot;[1{sfntInstance=&quot;nameID&quot;s&quot;flags&quot;s&quot;coord&quot;[1i]}]}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='UInt16' name='offsetToData' type='S'/>
<field declared_type='UInt16' name='countSizePairs' type='S'/>
<field declared_type='UInt16' name='axisCount' type='S'/>
<field declared_type='UInt16' name='axisSize' type='S'/>
<field declared_type='UInt16' name='instanceCount' type='S'/>
<field declared_type='UInt16' name='instanceSize' type='S'/>
<field declared_type='sfntVariationAxis*' name='axis' type='[1{sfntVariationAxis=&quot;axisTag&quot;I&quot;minValue&quot;i&quot;defaultValue&quot;i&quot;maxValue&quot;i&quot;flags&quot;s&quot;nameID&quot;s}]'/>
<field declared_type='sfntInstance*' name='instance' type='[1{sfntInstance=&quot;nameID&quot;s&quot;flags&quot;s&quot;coord&quot;[1l]}]' type64='[1{sfntInstance=&quot;nameID&quot;s&quot;flags&quot;s&quot;coord&quot;[1i]}]'/>
</struct>
<cftype gettypeid_func='CTFontCollectionGetTypeID' name='CTFontCollectionRef' type='^{__CTFontCollection=}'/>
<cftype gettypeid_func='CTFontDescriptorGetTypeID' name='CTFontDescriptorRef' type='^{__CTFontDescriptor=}'/>
<cftype gettypeid_func='CTFontGetTypeID' name='CTFontRef' type='^{__CTFont=}'/>
<cftype gettypeid_func='CTFrameGetTypeID' name='CTFrameRef' type='^{__CTFrame=}'/>
<cftype gettypeid_func='CTFramesetterGetTypeID' name='CTFramesetterRef' type='^{__CTFramesetter=}'/>
<cftype gettypeid_func='CTGlyphInfoGetTypeID' name='CTGlyphInfoRef' type='^{__CTGlyphInfo=}'/>
<cftype gettypeid_func='CTLineGetTypeID' name='CTLineRef' type='^{__CTLine=}'/>
<cftype gettypeid_func='CTFontCollectionGetTypeID' name='CTMutableFontCollectionRef' type='^{__CTFontCollection=}'/>
<cftype gettypeid_func='CTParagraphStyleGetTypeID' name='CTParagraphStyleRef' type='^{__CTParagraphStyle=}'/>
<cftype gettypeid_func='CTRubyAnnotationGetTypeID' name='CTRubyAnnotationRef' type='^{__CTRubyAnnotation=}'/>
<cftype gettypeid_func='CTRunDelegateGetTypeID' name='CTRunDelegateRef' type='^{__CTRunDelegate=}'/>
<cftype gettypeid_func='CTRunGetTypeID' name='CTRunRef' type='^{__CTRun=}'/>
<cftype gettypeid_func='CTTextTabGetTypeID' name='CTTextTabRef' type='^{__CTTextTab=}'/>
<cftype gettypeid_func='CTTypesetterGetTypeID' name='CTTypesetterRef' type='^{__CTTypesetter=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTBackgroundColorAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTBaselineClassAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTBaselineClassHanging' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTBaselineClassIdeographicCentered' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTBaselineClassIdeographicHigh' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTBaselineClassIdeographicLow' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTBaselineClassMath' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTBaselineClassRoman' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTBaselineInfoAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTBaselineOffsetAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTBaselineOriginalFont' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTBaselineReferenceFont' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTBaselineReferenceInfoAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTCharacterShapeAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontBaselineAdjustAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontCascadeListAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontCharacterSetAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontCollectionRemoveDuplicatesOption' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontCopyrightNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontDescriptionNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontDescriptorMatchingCurrentAssetSize' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontDescriptorMatchingDescriptors' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontDescriptorMatchingError' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontDescriptorMatchingPercentage' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontDescriptorMatchingResult' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontDescriptorMatchingSourceDescriptor' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontDescriptorMatchingTotalAssetSize' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontDescriptorMatchingTotalDownloadedSize' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontDesignerNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontDesignerURLNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontDisplayNameAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontDownloadableAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontDownloadedAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontEnabledAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontFamilyNameAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontFamilyNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontFeatureSelectorDefaultKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontFeatureSelectorIdentifierKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontFeatureSelectorNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontFeatureSelectorSettingKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontFeatureSettingsAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontFeatureTypeExclusiveKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontFeatureTypeIdentifierKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontFeatureTypeNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontFeatureTypeSelectorsKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontFeaturesAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontFixedAdvanceAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontFormatAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontFullNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontLanguagesAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontLicenseNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontLicenseURLNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontMacintoshEncodingsAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontManagerErrorDomain' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontManagerErrorFontURLsKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontManagerRegisteredFontsChangedNotification' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontManufacturerNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontMatrixAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontNameAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontOpenTypeFeatureTag' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontOpenTypeFeatureValue' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontOrientationAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontPostScriptCIDNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontPostScriptNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontPriorityAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontRegistrationScopeAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontSampleTextNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontSizeAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontSlantTrait' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontStyleNameAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontStyleNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontSubFamilyNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontSymbolicTrait' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontTrademarkNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontTraitsAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontURLAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontUniqueNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontVariationAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontVariationAxisDefaultValueKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontVariationAxisHiddenKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontVariationAxisIdentifierKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontVariationAxisMaximumValueKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontVariationAxisMinimumValueKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontVariationAxisNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontVendorURLNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontVersionNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontWeightTrait' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFontWidthTrait' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTForegroundColorAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTForegroundColorFromContextAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFrameClippingPathsAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFramePathClippingPathAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFramePathFillRuleAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFramePathWidthAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTFrameProgressionAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTGlyphInfoAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTHorizontalInVerticalFormsAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTKernAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTLanguageAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTLigatureAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTParagraphStyleAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTRubyAnnotationAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTRubyAnnotationScaleToFitAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTRubyAnnotationSizeFactorAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTRunDelegateAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTStrokeColorAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTStrokeWidthAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTSuperscriptAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTTabColumnTerminatorsAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTTypesetterOptionAllowUnboundedLayout' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTTypesetterOptionDisableBidiProcessing' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTTypesetterOptionForcedEmbeddingLevel' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTUnderlineColorAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTUnderlineStyleAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTVerticalFormsAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef _Nonnull' name='kCTWritingDirectionAttributeName' type='^{__CFString=}'/>
<enum name='ATSFONTREF_DEFINED' value='1'/>
<enum name='cmapFontTableTag' value='1668112752'/>
<enum name='descriptorFontTableTag' value='1717859171'/>
<enum name='featureFontTableTag' value='1717920116'/>
<enum name='kANKRCurrentVersion' value='0'/>
<enum name='kAbbrevSquaredLigaturesOffSelector' value='15'/>
<enum name='kAbbrevSquaredLigaturesOnSelector' value='14'/>
<enum name='kAllCapsSelector' value='1'/>
<enum name='kAllLowerCaseSelector' value='2'/>
<enum name='kAllTypeFeaturesOffSelector' value='1'/>
<enum name='kAllTypeFeaturesOnSelector' value='0'/>
<enum name='kAllTypographicFeaturesType' value='0'/>
<enum name='kAltHalfWidthTextSelector' value='6'/>
<enum name='kAltProportionalTextSelector' value='5'/>
<enum name='kAlternateHorizKanaOffSelector' value='1'/>
<enum name='kAlternateHorizKanaOnSelector' value='0'/>
<enum name='kAlternateKanaType' value='34'/>
<enum name='kAlternateVertKanaOffSelector' value='3'/>
<enum name='kAlternateVertKanaOnSelector' value='2'/>
<enum name='kAnnotationType' value='24'/>
<enum name='kAsteriskToMultiplyOffSelector' value='3'/>
<enum name='kAsteriskToMultiplyOnSelector' value='2'/>
<enum name='kBSLNControlPointFormatNoMap' value='2'/>
<enum name='kBSLNControlPointFormatWithMap' value='3'/>
<enum name='kBSLNCurrentVersion' value='65536'/>
<enum name='kBSLNDistanceFormatNoMap' value='0'/>
<enum name='kBSLNDistanceFormatWithMap' value='1'/>
<enum name='kBSLNHangingBaseline' value='3'/>
<enum name='kBSLNIdeographicCenterBaseline' value='1'/>
<enum name='kBSLNIdeographicHighBaseline' value='5'/>
<enum name='kBSLNIdeographicLowBaseline' value='2'/>
<enum name='kBSLNLastBaseline' value='31'/>
<enum name='kBSLNMathBaseline' value='4'/>
<enum name='kBSLNNoBaseline' value='255'/>
<enum name='kBSLNNoBaselineOverride' value='255'/>
<enum name='kBSLNNumBaselineClasses' value='32'/>
<enum name='kBSLNRomanBaseline' value='0'/>
<enum name='kBSLNTag' value='1651731566'/>
<enum name='kBoxAnnotationSelector' value='1'/>
<enum name='kCJKItalicRomanOffSelector' value='3'/>
<enum name='kCJKItalicRomanOnSelector' value='2'/>
<enum name='kCJKItalicRomanSelector' value='1'/>
<enum name='kCJKRomanSpacingType' value='103'/>
<enum name='kCJKSymbolAltFiveSelector' value='5'/>
<enum name='kCJKSymbolAltFourSelector' value='4'/>
<enum name='kCJKSymbolAltOneSelector' value='1'/>
<enum name='kCJKSymbolAltThreeSelector' value='3'/>
<enum name='kCJKSymbolAltTwoSelector' value='2'/>
<enum name='kCJKSymbolAlternativesType' value='29'/>
<enum name='kCJKVerticalRomanCenteredSelector' value='0'/>
<enum name='kCJKVerticalRomanHBaselineSelector' value='1'/>
<enum name='kCJKVerticalRomanPlacementType' value='31'/>
<enum name='kCTAdobeCNS1CharacterCollection' value='1'/>
<enum name='kCTAdobeGB1CharacterCollection' value='2'/>
<enum name='kCTAdobeJapan1CharacterCollection' value='3'/>
<enum name='kCTAdobeJapan2CharacterCollection' value='4'/>
<enum name='kCTAdobeKorea1CharacterCollection' value='5'/>
<enum name='kCTCenterTextAlignment' value='2'/>
<enum name='kCTCharacterCollectionAdobeCNS1' value='1'/>
<enum name='kCTCharacterCollectionAdobeGB1' value='2'/>
<enum name='kCTCharacterCollectionAdobeJapan1' value='3'/>
<enum name='kCTCharacterCollectionAdobeJapan2' value='4'/>
<enum name='kCTCharacterCollectionAdobeKorea1' value='5'/>
<enum name='kCTCharacterCollectionIdentityMapping' value='0'/>
<enum name='kCTFontAlertHeaderFontType' value='18'/>
<enum name='kCTFontApplicationFontType' value='9'/>
<enum name='kCTFontBoldTrait' value='2'/>
<enum name='kCTFontClarendonSerifsClass' value='1073741824'/>
<enum name='kCTFontClassClarendonSerifs' value='1073741824'/>
<enum name='kCTFontClassFreeformSerifs' value='1879048192'/>
<enum name='kCTFontClassMaskShift' value='28'/>
<enum name='kCTFontClassMaskTrait' value='4026531840'/>
<enum name='kCTFontClassModernSerifs' value='805306368'/>
<enum name='kCTFontClassOldStyleSerifs' value='268435456'/>
<enum name='kCTFontClassOrnamentals' value='2415919104'/>
<enum name='kCTFontClassSansSerif' value='2147483648'/>
<enum name='kCTFontClassScripts' value='2684354560'/>
<enum name='kCTFontClassSlabSerifs' value='1342177280'/>
<enum name='kCTFontClassSymbolic' value='3221225472'/>
<enum name='kCTFontClassTransitionalSerifs' value='536870912'/>
<enum name='kCTFontClassUnknown' value='0'/>
<enum name='kCTFontCollectionCopyDefaultOptions' value='0'/>
<enum name='kCTFontCollectionCopyStandardSort' value='2'/>
<enum name='kCTFontCollectionCopyUnique' value='1'/>
<enum name='kCTFontColorGlyphsTrait' value='8192'/>
<enum name='kCTFontCompositeTrait' value='16384'/>
<enum name='kCTFontCondensedTrait' value='64'/>
<enum name='kCTFontControlContentFontType' value='26'/>
<enum name='kCTFontDefaultOrientation' value='0'/>
<enum name='kCTFontDescriptorMatchingDidBegin' value='0'/>
<enum name='kCTFontDescriptorMatchingDidFailWithError' value='8'/>
<enum name='kCTFontDescriptorMatchingDidFinish' value='1'/>
<enum name='kCTFontDescriptorMatchingDidFinishDownloading' value='6'/>
<enum name='kCTFontDescriptorMatchingDidMatch' value='7'/>
<enum name='kCTFontDescriptorMatchingDownloading' value='5'/>
<enum name='kCTFontDescriptorMatchingStalled' value='3'/>
<enum name='kCTFontDescriptorMatchingWillBeginDownloading' value='4'/>
<enum name='kCTFontDescriptorMatchingWillBeginQuerying' value='2'/>
<enum name='kCTFontEmphasizedSystemDetailFontType' value='20'/>
<enum name='kCTFontEmphasizedSystemFontType' value='3'/>
<enum name='kCTFontExpandedTrait' value='32'/>
<enum name='kCTFontFormatBitmap' value='5'/>
<enum name='kCTFontFormatOpenTypePostScript' value='1'/>
<enum name='kCTFontFormatOpenTypeTrueType' value='2'/>
<enum name='kCTFontFormatPostScript' value='4'/>
<enum name='kCTFontFormatTrueType' value='3'/>
<enum name='kCTFontFormatUnrecognized' value='0'/>
<enum name='kCTFontFreeformSerifsClass' value='1879048192'/>
<enum name='kCTFontHorizontalOrientation' value='1'/>
<enum name='kCTFontItalicTrait' value='1'/>
<enum name='kCTFontLabelFontType' value='10'/>
<enum name='kCTFontManagerAutoActivationDefault' value='0'/>
<enum name='kCTFontManagerAutoActivationDisabled' value='1'/>
<enum name='kCTFontManagerAutoActivationEnabled' value='2'/>
<enum name='kCTFontManagerAutoActivationPromptUser' value='3'/>
<enum name='kCTFontManagerErrorAlreadyRegistered' value='105'/>
<enum name='kCTFontManagerErrorFileNotFound' value='101'/>
<enum name='kCTFontManagerErrorInUse' value='202'/>
<enum name='kCTFontManagerErrorInsufficientPermissions' value='102'/>
<enum name='kCTFontManagerErrorInvalidFontData' value='104'/>
<enum name='kCTFontManagerErrorNotRegistered' value='201'/>
<enum name='kCTFontManagerErrorSystemRequired' value='203'/>
<enum name='kCTFontManagerErrorUnrecognizedFormat' value='103'/>
<enum name='kCTFontManagerScopeNone' value='0'/>
<enum name='kCTFontManagerScopeProcess' value='1'/>
<enum name='kCTFontManagerScopeSession' value='3'/>
<enum name='kCTFontManagerScopeUser' value='2'/>
<enum name='kCTFontMenuItemCmdKeyFontType' value='14'/>
<enum name='kCTFontMenuItemFontType' value='12'/>
<enum name='kCTFontMenuItemMarkFontType' value='13'/>
<enum name='kCTFontMenuTitleFontType' value='11'/>
<enum name='kCTFontMessageFontType' value='23'/>
<enum name='kCTFontMiniEmphasizedSystemFontType' value='7'/>
<enum name='kCTFontMiniSystemFontType' value='6'/>
<enum name='kCTFontModernSerifsClass' value='805306368'/>
<enum name='kCTFontMonoSpaceTrait' value='1024'/>
<enum name='kCTFontNoFontType' value='4294967295'/>
<enum name='kCTFontOldStyleSerifsClass' value='268435456'/>
<enum name='kCTFontOptionsDefault' value='0'/>
<enum name='kCTFontOptionsPreferSystemFont' value='4'/>
<enum name='kCTFontOptionsPreventAutoActivation' value='1'/>
<enum name='kCTFontOrientationDefault' value='0'/>
<enum name='kCTFontOrientationHorizontal' value='1'/>
<enum name='kCTFontOrientationVertical' value='2'/>
<enum name='kCTFontOrnamentalsClass' value='2415919104'/>
<enum name='kCTFontPaletteFontType' value='24'/>
<enum name='kCTFontPriorityComputer' value='30000'/>
<enum name='kCTFontPriorityDynamic' value='50000'/>
<enum name='kCTFontPriorityNetwork' value='20000'/>
<enum name='kCTFontPriorityProcess' value='60000'/>
<enum name='kCTFontPrioritySystem' value='10000'/>
<enum name='kCTFontPriorityUser' value='40000'/>
<enum name='kCTFontPushButtonFontType' value='16'/>
<enum name='kCTFontSansSerifClass' value='2147483648'/>
<enum name='kCTFontScriptsClass' value='2684354560'/>
<enum name='kCTFontSlabSerifsClass' value='1342177280'/>
<enum name='kCTFontSmallEmphasizedSystemFontType' value='5'/>
<enum name='kCTFontSmallSystemFontType' value='4'/>
<enum name='kCTFontSmallToolbarFontType' value='22'/>
<enum name='kCTFontSymbolicClass' value='3221225472'/>
<enum name='kCTFontSystemDetailFontType' value='19'/>
<enum name='kCTFontSystemFontType' value='2'/>
<enum name='kCTFontTableAcnt' value='1633906292'/>
<enum name='kCTFontTableAnkr' value='1634626418'/>
<enum name='kCTFontTableAvar' value='1635148146'/>
<enum name='kCTFontTableBASE' value='1111577413'/>
<enum name='kCTFontTableBdat' value='1650745716'/>
<enum name='kCTFontTableBhed' value='1651008868'/>
<enum name='kCTFontTableBloc' value='1651273571'/>
<enum name='kCTFontTableBsln' value='1651731566'/>
<enum name='kCTFontTableCBDT' value='1128416340'/>
<enum name='kCTFontTableCBLC' value='1128418371'/>
<enum name='kCTFontTableCFF' value='1128678944'/>
<enum name='kCTFontTableCFF2' value='1128678962'/>
<enum name='kCTFontTableCOLR' value='1129270354'/>
<enum name='kCTFontTableCPAL' value='1129333068'/>
<enum name='kCTFontTableCidg' value='1667851367'/>
<enum name='kCTFontTableCmap' value='1668112752'/>
<enum name='kCTFontTableCvar' value='1668702578'/>
<enum name='kCTFontTableCvt' value='1668707360'/>
<enum name='kCTFontTableDSIG' value='1146308935'/>
<enum name='kCTFontTableEBDT' value='1161970772'/>
<enum name='kCTFontTableEBLC' value='1161972803'/>
<enum name='kCTFontTableEBSC' value='1161974595'/>
<enum name='kCTFontTableFdsc' value='1717859171'/>
<enum name='kCTFontTableFeat' value='1717920116'/>
<enum name='kCTFontTableFmtx' value='1718449272'/>
<enum name='kCTFontTableFond' value='1718578788'/>
<enum name='kCTFontTableFpgm' value='1718642541'/>
<enum name='kCTFontTableFvar' value='1719034226'/>
<enum name='kCTFontTableGDEF' value='1195656518'/>
<enum name='kCTFontTableGPOS' value='1196445523'/>
<enum name='kCTFontTableGSUB' value='1196643650'/>
<enum name='kCTFontTableGasp' value='1734439792'/>
<enum name='kCTFontTableGlyf' value='1735162214'/>
<enum name='kCTFontTableGvar' value='1735811442'/>
<enum name='kCTFontTableHVAR' value='1213612370'/>
<enum name='kCTFontTableHdmx' value='1751412088'/>
<enum name='kCTFontTableHead' value='1751474532'/>
<enum name='kCTFontTableHhea' value='1751672161'/>
<enum name='kCTFontTableHmtx' value='1752003704'/>
<enum name='kCTFontTableHsty' value='1752396921'/>
<enum name='kCTFontTableJSTF' value='1246975046'/>
<enum name='kCTFontTableJust' value='1786082164'/>
<enum name='kCTFontTableKern' value='1801810542'/>
<enum name='kCTFontTableKerx' value='1801810552'/>
<enum name='kCTFontTableLTSH' value='1280594760'/>
<enum name='kCTFontTableLcar' value='1818452338'/>
<enum name='kCTFontTableLoca' value='1819239265'/>
<enum name='kCTFontTableLtag' value='1819566439'/>
<enum name='kCTFontTableMATH' value='1296127048'/>
<enum name='kCTFontTableMERG' value='1296388679'/>
<enum name='kCTFontTableMVAR' value='1297498450'/>
<enum name='kCTFontTableMaxp' value='1835104368'/>
<enum name='kCTFontTableMeta' value='1835365473'/>
<enum name='kCTFontTableMort' value='1836020340'/>
<enum name='kCTFontTableMorx' value='1836020344'/>
<enum name='kCTFontTableName' value='1851878757'/>
<enum name='kCTFontTableOS2' value='1330851634'/>
<enum name='kCTFontTableOpbd' value='1869636196'/>
<enum name='kCTFontTableOptionExcludeSynthetic' value='1'/>
<enum name='kCTFontTableOptionNoOptions' value='0'/>
<enum name='kCTFontTablePCLT' value='1346587732'/>
<enum name='kCTFontTablePost' value='1886352244'/>
<enum name='kCTFontTablePrep' value='1886545264'/>
<enum name='kCTFontTableProp' value='1886547824'/>
<enum name='kCTFontTableSTAT' value='1398030676'/>
<enum name='kCTFontTableSVG' value='1398163232'/>
<enum name='kCTFontTableSbit' value='1935829364'/>
<enum name='kCTFontTableSbix' value='1935829368'/>
<enum name='kCTFontTableTrak' value='1953653099'/>
<enum name='kCTFontTableVDMX' value='1447316824'/>
<enum name='kCTFontTableVORG' value='1448038983'/>
<enum name='kCTFontTableVVAR' value='1448493394'/>
<enum name='kCTFontTableVhea' value='1986553185'/>
<enum name='kCTFontTableVmtx' value='1986884728'/>
<enum name='kCTFontTableXref' value='2020762982'/>
<enum name='kCTFontTableZapf' value='1516335206'/>
<enum name='kCTFontToolTipFontType' value='25'/>
<enum name='kCTFontToolbarFontType' value='21'/>
<enum name='kCTFontTraitBold' value='2'/>
<enum name='kCTFontTraitClassMask' value='4026531840'/>
<enum name='kCTFontTraitColorGlyphs' value='8192'/>
<enum name='kCTFontTraitComposite' value='16384'/>
<enum name='kCTFontTraitCondensed' value='64'/>
<enum name='kCTFontTraitExpanded' value='32'/>
<enum name='kCTFontTraitItalic' value='1'/>
<enum name='kCTFontTraitMonoSpace' value='1024'/>
<enum name='kCTFontTraitUIOptimized' value='4096'/>
<enum name='kCTFontTraitVertical' value='2048'/>
<enum name='kCTFontTransitionalSerifsClass' value='536870912'/>
<enum name='kCTFontUIFontAlertHeader' value='18'/>
<enum name='kCTFontUIFontApplication' value='9'/>
<enum name='kCTFontUIFontControlContent' value='26'/>
<enum name='kCTFontUIFontEmphasizedSystem' value='3'/>
<enum name='kCTFontUIFontEmphasizedSystemDetail' value='20'/>
<enum name='kCTFontUIFontLabel' value='10'/>
<enum name='kCTFontUIFontMenuItem' value='12'/>
<enum name='kCTFontUIFontMenuItemCmdKey' value='14'/>
<enum name='kCTFontUIFontMenuItemMark' value='13'/>
<enum name='kCTFontUIFontMenuTitle' value='11'/>
<enum name='kCTFontUIFontMessage' value='23'/>
<enum name='kCTFontUIFontMiniEmphasizedSystem' value='7'/>
<enum name='kCTFontUIFontMiniSystem' value='6'/>
<enum name='kCTFontUIFontNone' value='4294967295'/>
<enum name='kCTFontUIFontPalette' value='24'/>
<enum name='kCTFontUIFontPushButton' value='16'/>
<enum name='kCTFontUIFontSmallEmphasizedSystem' value='5'/>
<enum name='kCTFontUIFontSmallSystem' value='4'/>
<enum name='kCTFontUIFontSmallToolbar' value='22'/>
<enum name='kCTFontUIFontSystem' value='2'/>
<enum name='kCTFontUIFontSystemDetail' value='19'/>
<enum name='kCTFontUIFontToolTip' value='25'/>
<enum name='kCTFontUIFontToolbar' value='21'/>
<enum name='kCTFontUIFontUser' value='0'/>
<enum name='kCTFontUIFontUserFixedPitch' value='1'/>
<enum name='kCTFontUIFontUtilityWindowTitle' value='17'/>
<enum name='kCTFontUIFontViews' value='8'/>
<enum name='kCTFontUIFontWindowTitle' value='15'/>
<enum name='kCTFontUIOptimizedTrait' value='4096'/>
<enum name='kCTFontUnknownClass' value='0'/>
<enum name='kCTFontUserFixedPitchFontType' value='1'/>
<enum name='kCTFontUserFontType' value='0'/>
<enum name='kCTFontUtilityWindowTitleFontType' value='17'/>
<enum name='kCTFontVerticalOrientation' value='2'/>
<enum name='kCTFontVerticalTrait' value='2048'/>
<enum name='kCTFontViewsFontType' value='8'/>
<enum name='kCTFontWindowTitleFontType' value='15'/>
<enum name='kCTFramePathFillEvenOdd' value='0'/>
<enum name='kCTFramePathFillWindingNumber' value='1'/>
<enum name='kCTFrameProgressionLeftToRight' value='2'/>
<enum name='kCTFrameProgressionRightToLeft' value='1'/>
<enum name='kCTFrameProgressionTopToBottom' value='0'/>
<enum name='kCTIdentityMappingCharacterCollection' value='0'/>
<enum name='kCTJustifiedTextAlignment' value='3'/>
<enum name='kCTLeftTextAlignment' value='0'/>
<enum name='kCTLineBoundsExcludeTypographicLeading' value='1'/>
<enum name='kCTLineBoundsExcludeTypographicShifts' value='2'/>
<enum name='kCTLineBoundsIncludeLanguageExtents' value='32'/>
<enum name='kCTLineBoundsUseGlyphPathBounds' value='8'/>
<enum name='kCTLineBoundsUseHangingPunctuation' value='4'/>
<enum name='kCTLineBoundsUseOpticalBounds' value='16'/>
<enum name='kCTLineBreakByCharWrapping' value='1'/>
<enum name='kCTLineBreakByClipping' value='2'/>
<enum name='kCTLineBreakByTruncatingHead' value='3'/>
<enum name='kCTLineBreakByTruncatingMiddle' value='5'/>
<enum name='kCTLineBreakByTruncatingTail' value='4'/>
<enum name='kCTLineBreakByWordWrapping' value='0'/>
<enum name='kCTLineTruncationEnd' value='1'/>
<enum name='kCTLineTruncationMiddle' value='2'/>
<enum name='kCTLineTruncationStart' value='0'/>
<enum name='kCTNaturalTextAlignment' value='4'/>
<enum name='kCTParagraphStyleSpecifierAlignment' value='0'/>
<enum name='kCTParagraphStyleSpecifierBaseWritingDirection' value='13'/>
<enum name='kCTParagraphStyleSpecifierCount' value='18'/>
<enum name='kCTParagraphStyleSpecifierDefaultTabInterval' value='5'/>
<enum name='kCTParagraphStyleSpecifierFirstLineHeadIndent' value='1'/>
<enum name='kCTParagraphStyleSpecifierHeadIndent' value='2'/>
<enum name='kCTParagraphStyleSpecifierLineBoundsOptions' value='17'/>
<enum name='kCTParagraphStyleSpecifierLineBreakMode' value='6'/>
<enum name='kCTParagraphStyleSpecifierLineHeightMultiple' value='7'/>
<enum name='kCTParagraphStyleSpecifierLineSpacing' value='10'/>
<enum name='kCTParagraphStyleSpecifierLineSpacingAdjustment' value='16'/>
<enum name='kCTParagraphStyleSpecifierMaximumLineHeight' value='8'/>
<enum name='kCTParagraphStyleSpecifierMaximumLineSpacing' value='14'/>
<enum name='kCTParagraphStyleSpecifierMinimumLineHeight' value='9'/>
<enum name='kCTParagraphStyleSpecifierMinimumLineSpacing' value='15'/>
<enum name='kCTParagraphStyleSpecifierParagraphSpacing' value='11'/>
<enum name='kCTParagraphStyleSpecifierParagraphSpacingBefore' value='12'/>
<enum name='kCTParagraphStyleSpecifierTabStops' value='4'/>
<enum name='kCTParagraphStyleSpecifierTailIndent' value='3'/>
<enum name='kCTRightTextAlignment' value='1'/>
<enum name='kCTRubyAlignmentAuto' value='0'/>
<enum name='kCTRubyAlignmentCenter' value='2'/>
<enum name='kCTRubyAlignmentDistributeLetter' value='4'/>
<enum name='kCTRubyAlignmentDistributeSpace' value='5'/>
<enum name='kCTRubyAlignmentEnd' value='3'/>
<enum name='kCTRubyAlignmentInvalid' value='255'/>
<enum name='kCTRubyAlignmentLineEdge' value='6'/>
<enum name='kCTRubyAlignmentStart' value='1'/>
<enum name='kCTRubyOverhangAuto' value='0'/>
<enum name='kCTRubyOverhangEnd' value='2'/>
<enum name='kCTRubyOverhangInvalid' value='255'/>
<enum name='kCTRubyOverhangNone' value='3'/>
<enum name='kCTRubyOverhangStart' value='1'/>
<enum name='kCTRubyPositionAfter' value='1'/>
<enum name='kCTRubyPositionBefore' value='0'/>
<enum name='kCTRubyPositionCount' value='4'/>
<enum name='kCTRubyPositionInline' value='3'/>
<enum name='kCTRubyPositionInterCharacter' value='2'/>
<enum name='kCTRunDelegateCurrentVersion' value='1'/>
<enum name='kCTRunDelegateVersion1' value='1'/>
<enum name='kCTRunStatusHasNonIdentityMatrix' value='4'/>
<enum name='kCTRunStatusNoStatus' value='0'/>
<enum name='kCTRunStatusNonMonotonic' value='2'/>
<enum name='kCTRunStatusRightToLeft' value='1'/>
<enum name='kCTTextAlignmentCenter' value='2'/>
<enum name='kCTTextAlignmentJustified' value='3'/>
<enum name='kCTTextAlignmentLeft' value='0'/>
<enum name='kCTTextAlignmentNatural' value='4'/>
<enum name='kCTTextAlignmentRight' value='1'/>
<enum name='kCTUnderlinePatternDash' value='512'/>
<enum name='kCTUnderlinePatternDashDot' value='768'/>
<enum name='kCTUnderlinePatternDashDotDot' value='1024'/>
<enum name='kCTUnderlinePatternDot' value='256'/>
<enum name='kCTUnderlinePatternSolid' value='0'/>
<enum name='kCTUnderlineStyleDouble' value='9'/>
<enum name='kCTUnderlineStyleNone' value='0'/>
<enum name='kCTUnderlineStyleSingle' value='1'/>
<enum name='kCTUnderlineStyleThick' value='2'/>
<enum name='kCTVersionNumber10_10' value='458752'/>
<enum name='kCTVersionNumber10_11' value='524288'/>
<enum name='kCTVersionNumber10_12' value='589824'/>
<enum name='kCTVersionNumber10_13' value='655360'/>
<enum name='kCTVersionNumber10_14' value='720896'/>
<enum name='kCTVersionNumber10_5' value='131072'/>
<enum name='kCTVersionNumber10_5_2' value='131073'/>
<enum name='kCTVersionNumber10_5_3' value='131074'/>
<enum name='kCTVersionNumber10_5_5' value='131075'/>
<enum name='kCTVersionNumber10_6' value='196608'/>
<enum name='kCTVersionNumber10_7' value='262144'/>
<enum name='kCTVersionNumber10_8' value='327680'/>
<enum name='kCTVersionNumber10_9' value='393216'/>
<enum name='kCTWritingDirectionEmbedding' value='0'/>
<enum name='kCTWritingDirectionLeftToRight' value='0'/>
<enum name='kCTWritingDirectionNatural' value='-1'/>
<enum name='kCTWritingDirectionOverride' value='2'/>
<enum name='kCTWritingDirectionRightToLeft' value='1'/>
<enum name='kCanonicalCompositionOffSelector' value='1'/>
<enum name='kCanonicalCompositionOnSelector' value='0'/>
<enum name='kCaseSensitiveLayoutOffSelector' value='1'/>
<enum name='kCaseSensitiveLayoutOnSelector' value='0'/>
<enum name='kCaseSensitiveLayoutType' value='33'/>
<enum name='kCaseSensitiveSpacingOffSelector' value='3'/>
<enum name='kCaseSensitiveSpacingOnSelector' value='2'/>
<enum name='kCharacterAlternativesType' value='17'/>
<enum name='kCharacterShapeType' value='20'/>
<enum name='kCircleAnnotationSelector' value='3'/>
<enum name='kCommonLigaturesOffSelector' value='3'/>
<enum name='kCommonLigaturesOnSelector' value='2'/>
<enum name='kCompatibilityCompositionOffSelector' value='3'/>
<enum name='kCompatibilityCompositionOnSelector' value='2'/>
<enum name='kContextualAlternatesOffSelector' value='1'/>
<enum name='kContextualAlternatesOnSelector' value='0'/>
<enum name='kContextualAlternatesType' value='36'/>
<enum name='kContextualLigaturesOffSelector' value='19'/>
<enum name='kContextualLigaturesOnSelector' value='18'/>
<enum name='kContextualSwashAlternatesOffSelector' value='5'/>
<enum name='kContextualSwashAlternatesOnSelector' value='4'/>
<enum name='kCursiveConnectionType' value='2'/>
<enum name='kCursiveSelector' value='2'/>
<enum name='kDecomposeDiacriticsSelector' value='2'/>
<enum name='kDecorativeBordersSelector' value='4'/>
<enum name='kDefaultCJKRomanSelector' value='2'/>
<enum name='kDefaultLowerCaseSelector' value='0'/>
<enum name='kDefaultUpperCaseSelector' value='0'/>
<enum name='kDesignComplexityType' value='18'/>
<enum name='kDesignLevel1Selector' value='0'/>
<enum name='kDesignLevel2Selector' value='1'/>
<enum name='kDesignLevel3Selector' value='2'/>
<enum name='kDesignLevel4Selector' value='3'/>
<enum name='kDesignLevel5Selector' value='4'/>
<enum name='kDiacriticsType' value='9'/>
<enum name='kDiagonalFractionsSelector' value='2'/>
<enum name='kDiamondAnnotationSelector' value='8'/>
<enum name='kDingbatsSelector' value='1'/>
<enum name='kDiphthongLigaturesOffSelector' value='11'/>
<enum name='kDiphthongLigaturesOnSelector' value='10'/>
<enum name='kDisplayTextSelector' value='1'/>
<enum name='kEngravedTextSelector' value='2'/>
<enum name='kExpertCharactersSelector' value='10'/>
<enum name='kExponentsOffSelector' value='9'/>
<enum name='kExponentsOnSelector' value='8'/>
<enum name='kFleuronsSelector' value='3'/>
<enum name='kFontAlbanianLanguage' value='36'/>
<enum name='kFontAmharicLanguage' value='85'/>
<enum name='kFontAmharicScript' value='28'/>
<enum name='kFontArabicLanguage' value='12'/>
<enum name='kFontArabicScript' value='4'/>
<enum name='kFontArmenianLanguage' value='51'/>
<enum name='kFontArmenianScript' value='24'/>
<enum name='kFontAssameseLanguage' value='68'/>
<enum name='kFontAymaraLanguage' value='134'/>
<enum name='kFontAzerbaijanArLanguage' value='50'/>
<enum name='kFontAzerbaijaniLanguage' value='49'/>
<enum name='kFontBasqueLanguage' value='129'/>
<enum name='kFontBengaliLanguage' value='67'/>
<enum name='kFontBengaliScript' value='13'/>
<enum name='kFontBulgarianLanguage' value='44'/>
<enum name='kFontBurmeseLanguage' value='77'/>
<enum name='kFontBurmeseScript' value='19'/>
<enum name='kFontByelorussianLanguage' value='46'/>
<enum name='kFontCatalanLanguage' value='130'/>
<enum name='kFontChewaLanguage' value='92'/>
<enum name='kFontChineseScript' value='2'/>
<enum name='kFontCopyrightName' value='0'/>
<enum name='kFontCroatianLanguage' value='18'/>
<enum name='kFontCustom16BitScript' value='2'/>
<enum name='kFontCustom816BitScript' value='1'/>
<enum name='kFontCustom8BitScript' value='0'/>
<enum name='kFontCustomPlatform' value='4'/>
<enum name='kFontCyrillicScript' value='7'/>
<enum name='kFontCzechLanguage' value='38'/>
<enum name='kFontDanishLanguage' value='7'/>
<enum name='kFontDescriptionName' value='10'/>
<enum name='kFontDesignerName' value='9'/>
<enum name='kFontDesignerURLName' value='12'/>
<enum name='kFontDevanagariScript' value='9'/>
<enum name='kFontDutchLanguage' value='4'/>
<enum name='kFontDzongkhaLanguage' value='137'/>
<enum name='kFontEastEuropeanRomanScript' value='29'/>
<enum name='kFontEnglishLanguage' value='0'/>
<enum name='kFontEsperantoLanguage' value='94'/>
<enum name='kFontEstonianLanguage' value='27'/>
<enum name='kFontEthiopicScript' value='28'/>
<enum name='kFontExtendedArabicScript' value='31'/>
<enum name='kFontFaeroeseLanguage' value='30'/>
<enum name='kFontFamilyName' value='1'/>
<enum name='kFontFarsiLanguage' value='31'/>
<enum name='kFontFinnishLanguage' value='13'/>
<enum name='kFontFlemishLanguage' value='34'/>
<enum name='kFontFrenchLanguage' value='1'/>
<enum name='kFontFullName' value='4'/>
<enum name='kFontGallaLanguage' value='87'/>
<enum name='kFontGeezScript' value='28'/>
<enum name='kFontGeorgianLanguage' value='52'/>
<enum name='kFontGeorgianScript' value='23'/>
<enum name='kFontGermanLanguage' value='2'/>
<enum name='kFontGreekLanguage' value='14'/>
<enum name='kFontGreekScript' value='6'/>
<enum name='kFontGuaraniLanguage' value='133'/>
<enum name='kFontGujaratiLanguage' value='69'/>
<enum name='kFontGujaratiScript' value='11'/>
<enum name='kFontGurmukhiScript' value='10'/>
<enum name='kFontHebrewLanguage' value='10'/>
<enum name='kFontHebrewScript' value='5'/>
<enum name='kFontHindiLanguage' value='21'/>
<enum name='kFontHungarianLanguage' value='26'/>
<enum name='kFontISO10646_1993Semantics' value='2'/>
<enum name='kFontIcelandicLanguage' value='15'/>
<enum name='kFontIndonesianLanguage' value='81'/>
<enum name='kFontIrishLanguage' value='35'/>
<enum name='kFontItalianLanguage' value='3'/>
<enum name='kFontJapaneseLanguage' value='11'/>
<enum name='kFontJapaneseScript' value='1'/>
<enum name='kFontJavaneseRomLanguage' value='138'/>
<enum name='kFontKannadaLanguage' value='73'/>
<enum name='kFontKannadaScript' value='16'/>
<enum name='kFontKashmiriLanguage' value='61'/>
<enum name='kFontKazakhLanguage' value='48'/>
<enum name='kFontKhmerLanguage' value='78'/>
<enum name='kFontKhmerScript' value='20'/>
<enum name='kFontKirghizLanguage' value='54'/>
<enum name='kFontKoreanLanguage' value='23'/>
<enum name='kFontKoreanScript' value='3'/>
<enum name='kFontKurdishLanguage' value='60'/>
<enum name='kFontLaoLanguage' value='79'/>
<enum name='kFontLaotianScript' value='22'/>
<enum name='kFontLappishLanguage' value='29'/>
<enum name='kFontLastReservedName' value='255'/>
<enum name='kFontLatinLanguage' value='131'/>
<enum name='kFontLatvianLanguage' value='28'/>
<enum name='kFontLettishLanguage' value='28'/>
<enum name='kFontLicenseDescriptionName' value='13'/>
<enum name='kFontLicenseInfoURLName' value='14'/>
<enum name='kFontLithuanianLanguage' value='24'/>
<enum name='kFontMacCompatibleFullName' value='18'/>
<enum name='kFontMacedonianLanguage' value='43'/>
<enum name='kFontMacintoshPlatform' value='1'/>
<enum name='kFontMalagasyLanguage' value='93'/>
<enum name='kFontMalayArabicLanguage' value='84'/>
<enum name='kFontMalayRomanLanguage' value='83'/>
<enum name='kFontMalayalamLanguage' value='72'/>
<enum name='kFontMalayalamScript' value='17'/>
<enum name='kFontMalteseLanguage' value='16'/>
<enum name='kFontManufacturerName' value='8'/>
<enum name='kFontMarathiLanguage' value='66'/>
<enum name='kFontMicrosoftPlatform' value='3'/>
<enum name='kFontMicrosoftStandardScript' value='1'/>
<enum name='kFontMicrosoftSymbolScript' value='0'/>
<enum name='kFontMicrosoftUCS4Script' value='10'/>
<enum name='kFontMoldavianLanguage' value='53'/>
<enum name='kFontMongolianCyrLanguage' value='58'/>
<enum name='kFontMongolianLanguage' value='57'/>
<enum name='kFontMongolianScript' value='27'/>
<enum name='kFontNepaliLanguage' value='64'/>
<enum name='kFontNoLanguageCode' value='4294967295'/>
<enum name='kFontNoNameCode' value='4294967295'/>
<enum name='kFontNoPlatformCode' value='4294967295'/>
<enum name='kFontNoScriptCode' value='4294967295'/>
<enum name='kFontNorwegianLanguage' value='9'/>
<enum name='kFontOriyaLanguage' value='71'/>
<enum name='kFontOriyaScript' value='12'/>
<enum name='kFontOromoLanguage' value='87'/>
<enum name='kFontPashtoLanguage' value='59'/>
<enum name='kFontPersianLanguage' value='31'/>
<enum name='kFontPolishLanguage' value='25'/>
<enum name='kFontPortugueseLanguage' value='8'/>
<enum name='kFontPostScriptCIDName' value='20'/>
<enum name='kFontPostscriptName' value='6'/>
<enum name='kFontPreferredFamilyName' value='16'/>
<enum name='kFontPreferredSubfamilyName' value='17'/>
<enum name='kFontPunjabiLanguage' value='70'/>
<enum name='kFontQuechuaLanguage' value='132'/>
<enum name='kFontRSymbolScript' value='8'/>
<enum name='kFontReservedPlatform' value='2'/>
<enum name='kFontRomanScript' value='0'/>
<enum name='kFontRomanianLanguage' value='37'/>
<enum name='kFontRuandaLanguage' value='90'/>
<enum name='kFontRundiLanguage' value='91'/>
<enum name='kFontRussian' value='7'/>
<enum name='kFontRussianLanguage' value='32'/>
<enum name='kFontSaamiskLanguage' value='29'/>
<enum name='kFontSampleTextName' value='19'/>
<enum name='kFontSanskritLanguage' value='65'/>
<enum name='kFontSerbianLanguage' value='42'/>
<enum name='kFontSimpChineseLanguage' value='33'/>
<enum name='kFontSimpleChineseScript' value='25'/>
<enum name='kFontSindhiLanguage' value='62'/>
<enum name='kFontSindhiScript' value='31'/>
<enum name='kFontSinhaleseLanguage' value='76'/>
<enum name='kFontSinhaleseScript' value='18'/>
<enum name='kFontSlavicScript' value='29'/>
<enum name='kFontSlovakLanguage' value='39'/>
<enum name='kFontSlovenianLanguage' value='40'/>
<enum name='kFontSomaliLanguage' value='88'/>
<enum name='kFontSpanishLanguage' value='6'/>
<enum name='kFontStyleName' value='2'/>
<enum name='kFontSundaneseRomLanguage' value='139'/>
<enum name='kFontSwahiliLanguage' value='89'/>
<enum name='kFontSwedishLanguage' value='5'/>
<enum name='kFontTagalogLanguage' value='82'/>
<enum name='kFontTajikiLanguage' value='55'/>
<enum name='kFontTamilLanguage' value='74'/>
<enum name='kFontTamilScript' value='14'/>
<enum name='kFontTatarLanguage' value='135'/>
<enum name='kFontTeluguLanguage' value='75'/>
<enum name='kFontTeluguScript' value='15'/>
<enum name='kFontThaiLanguage' value='22'/>
<enum name='kFontThaiScript' value='21'/>
<enum name='kFontTibetanLanguage' value='63'/>
<enum name='kFontTibetanScript' value='26'/>
<enum name='kFontTigrinyaLanguage' value='86'/>
<enum name='kFontTradChineseLanguage' value='19'/>
<enum name='kFontTrademarkName' value='7'/>
<enum name='kFontTraditionalChineseScript' value='2'/>
<enum name='kFontTurkishLanguage' value='17'/>
<enum name='kFontTurkmenLanguage' value='56'/>
<enum name='kFontUighurLanguage' value='136'/>
<enum name='kFontUkrainianLanguage' value='45'/>
<enum name='kFontUnicodeDefaultSemantics' value='0'/>
<enum name='kFontUnicodePlatform' value='0'/>
<enum name='kFontUnicodeV1_1Semantics' value='1'/>
<enum name='kFontUnicodeV2_0BMPOnlySemantics' value='3'/>
<enum name='kFontUnicodeV2_0FullCoverageSemantics' value='4'/>
<enum name='kFontUnicodeV4_0VariationSequenceSemantics' value='5'/>
<enum name='kFontUnicode_FullRepertoire' value='6'/>
<enum name='kFontUninterpretedScript' value='32'/>
<enum name='kFontUniqueName' value='3'/>
<enum name='kFontUrduLanguage' value='20'/>
<enum name='kFontUzbekLanguage' value='47'/>
<enum name='kFontVendorURLName' value='11'/>
<enum name='kFontVersionName' value='5'/>
<enum name='kFontVietnameseLanguage' value='80'/>
<enum name='kFontVietnameseScript' value='30'/>
<enum name='kFontWelshLanguage' value='128'/>
<enum name='kFontYiddishLanguage' value='41'/>
<enum name='kFormInterrobangOffSelector' value='7'/>
<enum name='kFormInterrobangOnSelector' value='6'/>
<enum name='kFractionsType' value='11'/>
<enum name='kFullWidthCJKRomanSelector' value='3'/>
<enum name='kFullWidthIdeographsSelector' value='0'/>
<enum name='kFullWidthKanaSelector' value='0'/>
<enum name='kHalfWidthCJKRomanSelector' value='0'/>
<enum name='kHalfWidthIdeographsSelector' value='2'/>
<enum name='kHalfWidthTextSelector' value='2'/>
<enum name='kHanjaToHangulAltOneSelector' value='7'/>
<enum name='kHanjaToHangulAltThreeSelector' value='9'/>
<enum name='kHanjaToHangulAltTwoSelector' value='8'/>
<enum name='kHanjaToHangulSelector' value='1'/>
<enum name='kHideDiacriticsSelector' value='1'/>
<enum name='kHiraganaToKatakanaSelector' value='2'/>
<enum name='kHistoricalLigaturesOffSelector' value='21'/>
<enum name='kHistoricalLigaturesOnSelector' value='20'/>
<enum name='kHojoCharactersSelector' value='12'/>
<enum name='kHyphenToEnDashOffSelector' value='3'/>
<enum name='kHyphenToEnDashOnSelector' value='2'/>
<enum name='kHyphenToMinusOffSelector' value='1'/>
<enum name='kHyphenToMinusOnSelector' value='0'/>
<enum name='kHyphensToEmDashOffSelector' value='1'/>
<enum name='kHyphensToEmDashOnSelector' value='0'/>
<enum name='kIdeographicAltFiveSelector' value='5'/>
<enum name='kIdeographicAltFourSelector' value='4'/>
<enum name='kIdeographicAltOneSelector' value='1'/>
<enum name='kIdeographicAltThreeSelector' value='3'/>
<enum name='kIdeographicAltTwoSelector' value='2'/>
<enum name='kIdeographicAlternativesType' value='30'/>
<enum name='kIdeographicSpacingType' value='26'/>
<enum name='kIlluminatedCapsSelector' value='3'/>
<enum name='kInequalityLigaturesOffSelector' value='7'/>
<enum name='kInequalityLigaturesOnSelector' value='6'/>
<enum name='kInferiorsSelector' value='2'/>
<enum name='kInitialCapsAndSmallCapsSelector' value='5'/>
<enum name='kInitialCapsSelector' value='4'/>
<enum name='kInternationalSymbolsSelector' value='5'/>
<enum name='kInvertedBoxAnnotationSelector' value='9'/>
<enum name='kInvertedCircleAnnotationSelector' value='4'/>
<enum name='kInvertedRoundedBoxAnnotationSelector' value='10'/>
<enum name='kItalicCJKRomanType' value='32'/>
<enum name='kJIS1978CharactersSelector' value='2'/>
<enum name='kJIS1983CharactersSelector' value='3'/>
<enum name='kJIS1990CharactersSelector' value='4'/>
<enum name='kJIS2004CharactersSelector' value='11'/>
<enum name='kJUSTCurrentVersion' value='65536'/>
<enum name='kJUSTKashidaPriority' value='0'/>
<enum name='kJUSTLetterPriority' value='2'/>
<enum name='kJUSTNullPriority' value='3'/>
<enum name='kJUSTOverrideLimits' value='16384'/>
<enum name='kJUSTOverridePriority' value='32768'/>
<enum name='kJUSTOverrideUnlimited' value='8192'/>
<enum name='kJUSTPriorityCount' value='4'/>
<enum name='kJUSTPriorityMask' value='3'/>
<enum name='kJUSTSpacePriority' value='1'/>
<enum name='kJUSTStandardFormat' value='0'/>
<enum name='kJUSTTag' value='1786082164'/>
<enum name='kJUSTUnlimited' value='4096'/>
<enum name='kJUSTnoGlyphcode' value='65535'/>
<enum name='kJUSTpcConditionalAddAction' value='2'/>
<enum name='kJUSTpcDecompositionAction' value='0'/>
<enum name='kJUSTpcDuctilityAction' value='4'/>
<enum name='kJUSTpcGlyphRepeatAddAction' value='5'/>
<enum name='kJUSTpcGlyphStretchAction' value='3'/>
<enum name='kJUSTpcUnconditionalAddAction' value='1'/>
<enum name='kKERNCrossStream' value='16384'/>
<enum name='kKERNCrossStreamResetNote' value='2'/>
<enum name='kKERNCurrentVersion' value='65536'/>
<enum name='kKERNFormatMask' value='255'/>
<enum name='kKERNIndexArray' value='3'/>
<enum name='kKERNLineEndKerning' value='2'/>
<enum name='kKERNLineStart' value='1'/>
<enum name='kKERNNoCrossKerning' value='4'/>
<enum name='kKERNNoStakeNote' value='1'/>
<enum name='kKERNNotApplied' value='1'/>
<enum name='kKERNNotesRequested' value='8'/>
<enum name='kKERNOrderedList' value='0'/>
<enum name='kKERNResetCrossStream' value='32768'/>
<enum name='kKERNSimpleArray' value='2'/>
<enum name='kKERNStateTable' value='1'/>
<enum name='kKERNTag' value='1801810542'/>
<enum name='kKERNUnusedBits' value='7936'/>
<enum name='kKERNVariation' value='8192'/>
<enum name='kKERNVertical' value='32768'/>
<enum name='kKERXActionOffsetMask' value='16777215'/>
<enum name='kKERXActionTypeAnchorPoints' value='1073741824'/>
<enum name='kKERXActionTypeControlPoints' value='0'/>
<enum name='kKERXActionTypeCoordinates' value='2147483648'/>
<enum name='kKERXActionTypeMask' value='3221225472'/>
<enum name='kKERXControlPoint' value='4'/>
<enum name='kKERXCrossStream' value='1073741824'/>
<enum name='kKERXCrossStreamResetNote' value='2'/>
<enum name='kKERXCurrentVersion' value='131072'/>
<enum name='kKERXDescending' value='268435456'/>
<enum name='kKERXFormatMask' value='255'/>
<enum name='kKERXIndexArray' value='6'/>
<enum name='kKERXLineEndKerning' value='2'/>
<enum name='kKERXLineStart' value='1'/>
<enum name='kKERXNoCrossKerning' value='4'/>
<enum name='kKERXNoStakeNote' value='1'/>
<enum name='kKERXNotApplied' value='1'/>
<enum name='kKERXNotesRequested' value='8'/>
<enum name='kKERXOrderedList' value='0'/>
<enum name='kKERXResetCrossStream' value='32768'/>
<enum name='kKERXSimpleArray' value='2'/>
<enum name='kKERXStateTable' value='1'/>
<enum name='kKERXTag' value='1801810552'/>
<enum name='kKERXUnusedBits' value='268435200'/>
<enum name='kKERXUnusedFlags' value='1056964608'/>
<enum name='kKERXValuesAreLong' value='1'/>
<enum name='kKERXVariation' value='536870912'/>
<enum name='kKERXVertical' value='-2147483648'/>
<enum name='kKanaSpacingType' value='25'/>
<enum name='kKanaToRomanizationSelector' value='4'/>
<enum name='kKatakanaToHiraganaSelector' value='3'/>
<enum name='kLCARCtlPointFormat' value='1'/>
<enum name='kLCARCurrentVersion' value='65536'/>
<enum name='kLCARLinearFormat' value='0'/>
<enum name='kLCARTag' value='1818452338'/>
<enum name='kLTAGCurrentVersion' value='1'/>
<enum name='kLanguageTagType' value='39'/>
<enum name='kLastFeatureType' value='-1'/>
<enum name='kLetterCaseType' value='3'/>
<enum name='kLigaturesType' value='1'/>
<enum name='kLineFinalSwashesOffSelector' value='7'/>
<enum name='kLineFinalSwashesOnSelector' value='6'/>
<enum name='kLineInitialSwashesOffSelector' value='5'/>
<enum name='kLineInitialSwashesOnSelector' value='4'/>
<enum name='kLinguisticRearrangementOffSelector' value='1'/>
<enum name='kLinguisticRearrangementOnSelector' value='0'/>
<enum name='kLinguisticRearrangementType' value='5'/>
<enum name='kLogosOffSelector' value='7'/>
<enum name='kLogosOnSelector' value='6'/>
<enum name='kLowerCaseNumbersSelector' value='0'/>
<enum name='kLowerCasePetiteCapsSelector' value='2'/>
<enum name='kLowerCaseSmallCapsSelector' value='1'/>
<enum name='kLowerCaseType' value='37'/>
<enum name='kMORTContextualType' value='1'/>
<enum name='kMORTCoverDescending' value='16384'/>
<enum name='kMORTCoverIgnoreVertical' value='8192'/>
<enum name='kMORTCoverTypeMask' value='15'/>
<enum name='kMORTCoverVertical' value='32768'/>
<enum name='kMORTCurrInsertBefore' value='2048'/>
<enum name='kMORTCurrInsertCountMask' value='992'/>
<enum name='kMORTCurrInsertCountShift' value='5'/>
<enum name='kMORTCurrInsertKashidaLike' value='8192'/>
<enum name='kMORTCurrJustTableCountMask' value='127'/>
<enum name='kMORTCurrJustTableCountShift' value='0'/>
<enum name='kMORTCurrentVersion' value='65536'/>
<enum name='kMORTDoInsertionsBefore' value='128'/>
<enum name='kMORTInsertionType' value='5'/>
<enum name='kMORTInsertionsCountMask' value='63'/>
<enum name='kMORTIsSplitVowelPiece' value='64'/>
<enum name='kMORTLigFormOffsetMask' value='1073741823'/>
<enum name='kMORTLigFormOffsetShift' value='2'/>
<enum name='kMORTLigLastAction' value='-2147483648'/>
<enum name='kMORTLigStoreLigature' value='1073741824'/>
<enum name='kMORTLigatureType' value='2'/>
<enum name='kMORTMarkInsertBefore' value='1024'/>
<enum name='kMORTMarkInsertCountMask' value='31'/>
<enum name='kMORTMarkInsertCountShift' value='0'/>
<enum name='kMORTMarkInsertKashidaLike' value='4096'/>
<enum name='kMORTMarkJustTableCountMask' value='16256'/>
<enum name='kMORTMarkJustTableCountShift' value='7'/>
<enum name='kMORTRearrangementType' value='0'/>
<enum name='kMORTSwashType' value='4'/>
<enum name='kMORTTag' value='1836020340'/>
<enum name='kMORTraCDx' value='6'/>
<enum name='kMORTraCDxA' value='8'/>
<enum name='kMORTraCDxAB' value='12'/>
<enum name='kMORTraCDxBA' value='13'/>
<enum name='kMORTraDCx' value='7'/>
<enum name='kMORTraDCxA' value='9'/>
<enum name='kMORTraDCxAB' value='14'/>
<enum name='kMORTraDCxBA' value='15'/>
<enum name='kMORTraDx' value='2'/>
<enum name='kMORTraDxA' value='3'/>
<enum name='kMORTraDxAB' value='10'/>
<enum name='kMORTraDxBA' value='11'/>
<enum name='kMORTraNoAction' value='0'/>
<enum name='kMORTraxA' value='1'/>
<enum name='kMORTraxAB' value='4'/>
<enum name='kMORTraxBA' value='5'/>
<enum name='kMORXCoverDescending' value='1073741824'/>
<enum name='kMORXCoverIgnoreVertical' value='536870912'/>
<enum name='kMORXCoverLogicalOrder' value='268435456'/>
<enum name='kMORXCoverTypeMask' value='255'/>
<enum name='kMORXCoverVertical' value='-2147483648'/>
<enum name='kMORXCurrentVersion' value='131072'/>
<enum name='kMORXTag' value='1836020344'/>
<enum name='kMathSymbolsSelector' value='6'/>
<enum name='kMathematicalExtrasType' value='15'/>
<enum name='kMathematicalGreekOffSelector' value='11'/>
<enum name='kMathematicalGreekOnSelector' value='10'/>
<enum name='kMonospacedNumbersSelector' value='0'/>
<enum name='kMonospacedTextSelector' value='1'/>
<enum name='kNLCCharactersSelector' value='13'/>
<enum name='kNoAlternatesSelector' value='0'/>
<enum name='kNoAnnotationSelector' value='0'/>
<enum name='kNoCJKItalicRomanSelector' value='0'/>
<enum name='kNoCJKSymbolAlternativesSelector' value='0'/>
<enum name='kNoFractionsSelector' value='0'/>
<enum name='kNoIdeographicAlternativesSelector' value='0'/>
<enum name='kNoOrnamentsSelector' value='0'/>
<enum name='kNoRubyKanaSelector' value='0'/>
<enum name='kNoStyleOptionsSelector' value='0'/>
<enum name='kNoStylisticAlternatesSelector' value='0'/>
<enum name='kNoTransliterationSelector' value='0'/>
<enum name='kNonFinalSwashesOffSelector' value='9'/>
<enum name='kNonFinalSwashesOnSelector' value='8'/>
<enum name='kNormalPositionSelector' value='0'/>
<enum name='kNumberCaseType' value='21'/>
<enum name='kNumberSpacingType' value='6'/>
<enum name='kOPBDControlPointFormat' value='1'/>
<enum name='kOPBDCurrentVersion' value='65536'/>
<enum name='kOPBDDistanceFormat' value='0'/>
<enum name='kOPBDTag' value='1869636196'/>
<enum name='kOrdinalsSelector' value='3'/>
<enum name='kOrnamentSetsType' value='16'/>
<enum name='kOverlappingCharactersType' value='13'/>
<enum name='kPROPALDirectionClass' value='2'/>
<enum name='kPROPANDirectionClass' value='6'/>
<enum name='kPROPBNDirectionClass' value='19'/>
<enum name='kPROPCSDirectionClass' value='7'/>
<enum name='kPROPCanHangLTMask' value='16384'/>
<enum name='kPROPCanHangRBMask' value='8192'/>
<enum name='kPROPCurrentVersion' value='196608'/>
<enum name='kPROPDirectionMask' value='31'/>
<enum name='kPROPENDirectionClass' value='3'/>
<enum name='kPROPESDirectionClass' value='4'/>
<enum name='kPROPETDirectionClass' value='5'/>
<enum name='kPROPIsFloaterMask' value='32768'/>
<enum name='kPROPLDirectionClass' value='0'/>
<enum name='kPROPLREDirectionClass' value='13'/>
<enum name='kPROPLRODirectionClass' value='14'/>
<enum name='kPROPNSMDirectionClass' value='18'/>
<enum name='kPROPNumDirectionClasses' value='20'/>
<enum name='kPROPONDirectionClass' value='11'/>
<enum name='kPROPPDFDirectionClass' value='17'/>
<enum name='kPROPPSDirectionClass' value='8'/>
<enum name='kPROPPairOffsetMask' value='3840'/>
<enum name='kPROPPairOffsetShift' value='8'/>
<enum name='kPROPPairOffsetSign' value='7'/>
<enum name='kPROPRDirectionClass' value='1'/>
<enum name='kPROPRLEDirectionClass' value='15'/>
<enum name='kPROPRLODirectionClass' value='16'/>
<enum name='kPROPRightConnectMask' value='128'/>
<enum name='kPROPSDirectionClass' value='9'/>
<enum name='kPROPSENDirectionClass' value='12'/>
<enum name='kPROPTag' value='1886547824'/>
<enum name='kPROPUseRLPairMask' value='4096'/>
<enum name='kPROPWSDirectionClass' value='10'/>
<enum name='kPROPZeroReserved' value='96'/>
<enum name='kParenthesisAnnotationSelector' value='5'/>
<enum name='kPartiallyConnectedSelector' value='1'/>
<enum name='kPeriodAnnotationSelector' value='6'/>
<enum name='kPeriodsToEllipsisOffSelector' value='11'/>
<enum name='kPeriodsToEllipsisOnSelector' value='10'/>
<enum name='kPiCharactersSelector' value='2'/>
<enum name='kPreventOverlapOffSelector' value='1'/>
<enum name='kPreventOverlapOnSelector' value='0'/>
<enum name='kProportionalCJKRomanSelector' value='1'/>
<enum name='kProportionalIdeographsSelector' value='1'/>
<enum name='kProportionalKanaSelector' value='1'/>
<enum name='kProportionalNumbersSelector' value='1'/>
<enum name='kProportionalTextSelector' value='0'/>
<enum name='kQuarterWidthNumbersSelector' value='3'/>
<enum name='kQuarterWidthTextSelector' value='4'/>
<enum name='kRareLigaturesOffSelector' value='5'/>
<enum name='kRareLigaturesOnSelector' value='4'/>
<enum name='kRebusPicturesOffSelector' value='9'/>
<enum name='kRebusPicturesOnSelector' value='8'/>
<enum name='kRequiredLigaturesOffSelector' value='1'/>
<enum name='kRequiredLigaturesOnSelector' value='0'/>
<enum name='kRomanNumeralAnnotationSelector' value='7'/>
<enum name='kRomanizationToHiraganaSelector' value='5'/>
<enum name='kRomanizationToKatakanaSelector' value='6'/>
<enum name='kRoundedBoxAnnotationSelector' value='2'/>
<enum name='kRubyKanaOffSelector' value='3'/>
<enum name='kRubyKanaOnSelector' value='2'/>
<enum name='kRubyKanaSelector' value='1'/>
<enum name='kRubyKanaType' value='28'/>
<enum name='kSFNTLookupSegmentArray' value='4'/>
<enum name='kSFNTLookupSegmentSingle' value='2'/>
<enum name='kSFNTLookupSimpleArray' value='0'/>
<enum name='kSFNTLookupSingleTable' value='6'/>
<enum name='kSFNTLookupTrimmedArray' value='8'/>
<enum name='kSFNTLookupVector' value='10'/>
<enum name='kSTClassDeletedGlyph' value='2'/>
<enum name='kSTClassEndOfLine' value='3'/>
<enum name='kSTClassEndOfText' value='0'/>
<enum name='kSTClassOutOfBounds' value='1'/>
<enum name='kSTKCrossStreamReset' value='8192'/>
<enum name='kSTLigActionMask' value='16383'/>
<enum name='kSTMarkEnd' value='8192'/>
<enum name='kSTNoAdvance' value='16384'/>
<enum name='kSTRearrVerbMask' value='15'/>
<enum name='kSTSetMark' value='32768'/>
<enum name='kSTXHasLigAction' value='8192'/>
<enum name='kScientificInferiorsSelector' value='4'/>
<enum name='kShowDiacriticsSelector' value='0'/>
<enum name='kSimplifiedCharactersSelector' value='1'/>
<enum name='kSlashToDivideOffSelector' value='5'/>
<enum name='kSlashToDivideOnSelector' value='4'/>
<enum name='kSlashedZeroOffSelector' value='5'/>
<enum name='kSlashedZeroOnSelector' value='4'/>
<enum name='kSmallCapsSelector' value='3'/>
<enum name='kSmartQuotesOffSelector' value='9'/>
<enum name='kSmartQuotesOnSelector' value='8'/>
<enum name='kSmartSwashType' value='8'/>
<enum name='kSquaredLigaturesOffSelector' value='13'/>
<enum name='kSquaredLigaturesOnSelector' value='12'/>
<enum name='kStyleOptionsType' value='19'/>
<enum name='kStylisticAltEightOffSelector' value='17'/>
<enum name='kStylisticAltEightOnSelector' value='16'/>
<enum name='kStylisticAltEighteenOffSelector' value='37'/>
<enum name='kStylisticAltEighteenOnSelector' value='36'/>
<enum name='kStylisticAltElevenOffSelector' value='23'/>
<enum name='kStylisticAltElevenOnSelector' value='22'/>
<enum name='kStylisticAltFifteenOffSelector' value='31'/>
<enum name='kStylisticAltFifteenOnSelector' value='30'/>
<enum name='kStylisticAltFiveOffSelector' value='11'/>
<enum name='kStylisticAltFiveOnSelector' value='10'/>
<enum name='kStylisticAltFourOffSelector' value='9'/>
<enum name='kStylisticAltFourOnSelector' value='8'/>
<enum name='kStylisticAltFourteenOffSelector' value='29'/>
<enum name='kStylisticAltFourteenOnSelector' value='28'/>
<enum name='kStylisticAltNineOffSelector' value='19'/>
<enum name='kStylisticAltNineOnSelector' value='18'/>
<enum name='kStylisticAltNineteenOffSelector' value='39'/>
<enum name='kStylisticAltNineteenOnSelector' value='38'/>
<enum name='kStylisticAltOneOffSelector' value='3'/>
<enum name='kStylisticAltOneOnSelector' value='2'/>
<enum name='kStylisticAltSevenOffSelector' value='15'/>
<enum name='kStylisticAltSevenOnSelector' value='14'/>
<enum name='kStylisticAltSeventeenOffSelector' value='35'/>
<enum name='kStylisticAltSeventeenOnSelector' value='34'/>
<enum name='kStylisticAltSixOffSelector' value='13'/>
<enum name='kStylisticAltSixOnSelector' value='12'/>
<enum name='kStylisticAltSixteenOffSelector' value='33'/>
<enum name='kStylisticAltSixteenOnSelector' value='32'/>
<enum name='kStylisticAltTenOffSelector' value='21'/>
<enum name='kStylisticAltTenOnSelector' value='20'/>
<enum name='kStylisticAltThirteenOffSelector' value='27'/>
<enum name='kStylisticAltThirteenOnSelector' value='26'/>
<enum name='kStylisticAltThreeOffSelector' value='7'/>
<enum name='kStylisticAltThreeOnSelector' value='6'/>
<enum name='kStylisticAltTwelveOffSelector' value='25'/>
<enum name='kStylisticAltTwelveOnSelector' value='24'/>
<enum name='kStylisticAltTwentyOffSelector' value='41'/>
<enum name='kStylisticAltTwentyOnSelector' value='40'/>
<enum name='kStylisticAltTwoOffSelector' value='5'/>
<enum name='kStylisticAltTwoOnSelector' value='4'/>
<enum name='kStylisticAlternativesType' value='35'/>
<enum name='kSubstituteVerticalFormsOffSelector' value='1'/>
<enum name='kSubstituteVerticalFormsOnSelector' value='0'/>
<enum name='kSuperiorsSelector' value='1'/>
<enum name='kSwashAlternatesOffSelector' value='3'/>
<enum name='kSwashAlternatesOnSelector' value='2'/>
<enum name='kSymbolLigaturesOffSelector' value='17'/>
<enum name='kSymbolLigaturesOnSelector' value='16'/>
<enum name='kTRAKCurrentVersion' value='65536'/>
<enum name='kTRAKTag' value='1953653099'/>
<enum name='kTRAKUniformFormat' value='0'/>
<enum name='kTallCapsSelector' value='5'/>
<enum name='kTextSpacingType' value='22'/>
<enum name='kThirdWidthNumbersSelector' value='2'/>
<enum name='kThirdWidthTextSelector' value='3'/>
<enum name='kTitlingCapsSelector' value='4'/>
<enum name='kTraditionalAltFiveSelector' value='9'/>
<enum name='kTraditionalAltFourSelector' value='8'/>
<enum name='kTraditionalAltOneSelector' value='5'/>
<enum name='kTraditionalAltThreeSelector' value='7'/>
<enum name='kTraditionalAltTwoSelector' value='6'/>
<enum name='kTraditionalCharactersSelector' value='0'/>
<enum name='kTraditionalNamesCharactersSelector' value='14'/>
<enum name='kTranscodingCompositionOffSelector' value='5'/>
<enum name='kTranscodingCompositionOnSelector' value='4'/>
<enum name='kTransliterationType' value='23'/>
<enum name='kTypographicExtrasType' value='14'/>
<enum name='kUnconnectedSelector' value='0'/>
<enum name='kUnicodeDecompositionType' value='27'/>
<enum name='kUpperAndLowerCaseSelector' value='0'/>
<enum name='kUpperCaseNumbersSelector' value='1'/>
<enum name='kUpperCasePetiteCapsSelector' value='2'/>
<enum name='kUpperCaseSmallCapsSelector' value='1'/>
<enum name='kUpperCaseType' value='38'/>
<enum name='kVerticalFractionsSelector' value='1'/>
<enum name='kVerticalPositionType' value='10'/>
<enum name='kVerticalSubstitutionType' value='4'/>
<enum name='kWordFinalSwashesOffSelector' value='3'/>
<enum name='kWordFinalSwashesOnSelector' value='2'/>
<enum name='kWordInitialSwashesOffSelector' value='1'/>
<enum name='kWordInitialSwashesOnSelector' value='0'/>
<enum name='nameFontTableTag' value='1851878757'/>
<enum name='nonGlyphID' value='65535'/>
<enum name='os2FontTableTag' value='1330851634'/>
<enum name='sizeof_sfntCMapEncoding' value='8'/>
<enum name='sizeof_sfntCMapExtendedSubHeader' value='12'/>
<enum name='sizeof_sfntCMapHeader' value='4'/>
<enum name='sizeof_sfntCMapSubHeader' value='6'/>
<enum name='sizeof_sfntDescriptorHeader' value='8'/>
<enum name='sizeof_sfntDirectory' value='12'/>
<enum name='sizeof_sfntInstance' value='4'/>
<enum name='sizeof_sfntNameHeader' value='6'/>
<enum name='sizeof_sfntNameRecord' value='12'/>
<enum name='sizeof_sfntVariationAxis' value='20'/>
<enum name='sizeof_sfntVariationHeader' value='16'/>
<enum name='variationFontTableTag' value='1719034226'/>
<function name='CTFontCollectionCreateCopyWithFontDescriptors'>
<arg declared_type='CTFontCollectionRef _Nonnull' name='original' type='^{__CTFontCollection=}'/>
<arg declared_type='CFArrayRef _Nullable' name='queryDescriptors' type='^{__CFArray=}'/>
<arg declared_type='CFDictionaryRef _Nullable' name='options' type='^{__CFDictionary=}'/>
<retval declared_type='CTFontCollectionRef _Nonnull' type='^{__CTFontCollection=}'/>
</function>
<function name='CTFontCollectionCreateFromAvailableFonts'>
<arg declared_type='CFDictionaryRef _Nullable' name='options' type='^{__CFDictionary=}'/>
<retval declared_type='CTFontCollectionRef _Nonnull' type='^{__CTFontCollection=}'/>
</function>
<function name='CTFontCollectionCreateMatchingFontDescriptors'>
<arg declared_type='CTFontCollectionRef _Nonnull' name='collection' type='^{__CTFontCollection=}'/>
<retval declared_type='CFArrayRef _Nullable' type='^{__CFArray=}'/>
</function>
<function name='CTFontCollectionCreateMatchingFontDescriptorsSortedWithCallback'>
<arg declared_type='CTFontCollectionRef _Nonnull' name='collection' type='^{__CTFontCollection=}'/>
<arg declared_type='CTFontCollectionSortDescriptorsCallback _Nullable' function_pointer='true' name='sortCallback' type='^?'>
<arg declared_type='CTFontDescriptorRef _Nonnull' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CTFontDescriptorRef _Nonnull' type='^{__CTFontDescriptor=}'/>
<arg declared_type='void * _Nonnull' type='^v'/>
<retval declared_type='CFComparisonResult' type='l' type64='q'/>
</arg>
<arg declared_type='void * _Nullable' name='refCon' type='^v'/>
<retval declared_type='CFArrayRef _Nullable' type='^{__CFArray=}'/>
</function>
<function name='CTFontCollectionCreateMatchingFontDescriptorsWithOptions'>
<arg declared_type='CTFontCollectionRef _Nonnull' name='collection' type='^{__CTFontCollection=}'/>
<arg declared_type='CFDictionaryRef _Nullable' name='options' type='^{__CFDictionary=}'/>
<retval declared_type='CFArrayRef _Nullable' type='^{__CFArray=}'/>
</function>
<function name='CTFontCollectionCreateWithFontDescriptors'>
<arg declared_type='CFArrayRef _Nullable' name='queryDescriptors' type='^{__CFArray=}'/>
<arg declared_type='CFDictionaryRef _Nullable' name='options' type='^{__CFDictionary=}'/>
<retval declared_type='CTFontCollectionRef _Nonnull' type='^{__CTFontCollection=}'/>
</function>
<function name='CTFontCollectionGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTFontCopyAttribute'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg declared_type='CFStringRef _Nonnull' name='attribute' type='^{__CFString=}'/>
<retval declared_type='CFTypeRef _Nullable' type='@'/>
</function>
<function name='CTFontCopyAvailableTables'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg declared_type='CTFontTableOptions' name='options' type='I'/>
<retval declared_type='CFArrayRef _Nullable' type='^{__CFArray=}'/>
</function>
<function name='CTFontCopyCharacterSet'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CFCharacterSetRef _Nonnull' type='^{__CFCharacterSet=}'/>
</function>
<function name='CTFontCopyDefaultCascadeListForLanguages'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg declared_type='CFArrayRef _Nullable' name='languagePrefList' type='^{__CFArray=}'/>
<retval declared_type='CFArrayRef _Nullable' type='^{__CFArray=}'/>
</function>
<function name='CTFontCopyDisplayName'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CFStringRef _Nonnull' type='^{__CFString=}'/>
</function>
<function name='CTFontCopyFamilyName'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CFStringRef _Nonnull' type='^{__CFString=}'/>
</function>
<function name='CTFontCopyFeatureSettings'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CFArrayRef _Nullable' type='^{__CFArray=}'/>
</function>
<function name='CTFontCopyFeatures'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CFArrayRef _Nullable' type='^{__CFArray=}'/>
</function>
<function name='CTFontCopyFontDescriptor'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CTFontDescriptorRef _Nonnull' type='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontCopyFullName'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CFStringRef _Nonnull' type='^{__CFString=}'/>
</function>
<function name='CTFontCopyGraphicsFont'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg declared_type='CTFontDescriptorRef _Nullable * _Nullable' name='attributes' type='^^{__CTFontDescriptor}'/>
<retval declared_type='CGFontRef _Nonnull' type='^{CGFont=}'/>
</function>
<function name='CTFontCopyLocalizedName'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg declared_type='CFStringRef _Nonnull' name='nameKey' type='^{__CFString=}'/>
<arg declared_type='CFStringRef _Nullable * _Nullable' name='actualLanguage' type='^^{__CFString}'/>
<retval declared_type='CFStringRef _Nullable' type='^{__CFString=}'/>
</function>
<function name='CTFontCopyName'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg declared_type='CFStringRef _Nonnull' name='nameKey' type='^{__CFString=}'/>
<retval declared_type='CFStringRef _Nullable' type='^{__CFString=}'/>
</function>
<function name='CTFontCopyPostScriptName'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CFStringRef _Nonnull' type='^{__CFString=}'/>
</function>
<function name='CTFontCopySupportedLanguages'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CFArrayRef _Nonnull' type='^{__CFArray=}'/>
</function>
<function name='CTFontCopyTable'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg declared_type='CTFontTableTag' name='table' type='L' type64='I'/>
<arg declared_type='CTFontTableOptions' name='options' type='I'/>
<retval declared_type='CFDataRef _Nullable' type='^{__CFData=}'/>
</function>
<function name='CTFontCopyTraits'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CFDictionaryRef _Nonnull' type='^{__CFDictionary=}'/>
</function>
<function name='CTFontCopyVariation'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CFDictionaryRef _Nullable' type='^{__CFDictionary=}'/>
</function>
<function name='CTFontCopyVariationAxes'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CFArrayRef _Nullable' type='^{__CFArray=}'/>
</function>
<function name='CTFontCreateCopyWithAttributes'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<arg const='true' declared_type='CGAffineTransform * _Nullable' name='matrix' type='^{CGAffineTransform=ffffff}' type64='^{CGAffineTransform=dddddd}'/>
<arg declared_type='CTFontDescriptorRef _Nullable' name='attributes' type='^{__CTFontDescriptor=}'/>
<retval declared_type='CTFontRef _Nonnull' type='^{__CTFont=}'/>
</function>
<function name='CTFontCreateCopyWithFamily'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<arg const='true' declared_type='CGAffineTransform * _Nullable' name='matrix' type='^{CGAffineTransform=ffffff}' type64='^{CGAffineTransform=dddddd}'/>
<arg declared_type='CFStringRef _Nonnull' name='family' type='^{__CFString=}'/>
<retval declared_type='CTFontRef _Nullable' type='^{__CTFont=}'/>
</function>
<function name='CTFontCreateCopyWithSymbolicTraits'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<arg const='true' declared_type='CGAffineTransform * _Nullable' name='matrix' type='^{CGAffineTransform=ffffff}' type64='^{CGAffineTransform=dddddd}'/>
<arg declared_type='CTFontSymbolicTraits' name='symTraitValue' type='I'/>
<arg declared_type='CTFontSymbolicTraits' name='symTraitMask' type='I'/>
<retval declared_type='CTFontRef _Nullable' type='^{__CTFont=}'/>
</function>
<function name='CTFontCreateForString'>
<arg declared_type='CTFontRef _Nonnull' name='currentFont' type='^{__CTFont=}'/>
<arg declared_type='CFStringRef _Nonnull' name='string' type='^{__CFString=}'/>
<arg declared_type='CFRange' name='range' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<retval declared_type='CTFontRef _Nonnull' type='^{__CTFont=}'/>
</function>
<function name='CTFontCreatePathForGlyph'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg declared_type='CGGlyph' name='glyph' type='S'/>
<arg const='true' declared_type='CGAffineTransform * _Nullable' name='matrix' type='^{CGAffineTransform=ffffff}' type64='^{CGAffineTransform=dddddd}'/>
<retval declared_type='CGPathRef _Nullable' type='^{CGPath=}'/>
</function>
<function name='CTFontCreateUIFontForLanguage'>
<arg declared_type='CTFontUIFontType' name='uiType' type='I'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<arg declared_type='CFStringRef _Nullable' name='language' type='^{__CFString=}'/>
<retval declared_type='CTFontRef _Nullable' type='^{__CTFont=}'/>
</function>
<function name='CTFontCreateWithFontDescriptor'>
<arg declared_type='CTFontDescriptorRef _Nonnull' name='descriptor' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<arg const='true' declared_type='CGAffineTransform * _Nullable' name='matrix' type='^{CGAffineTransform=ffffff}' type64='^{CGAffineTransform=dddddd}'/>
<retval declared_type='CTFontRef _Nonnull' type='^{__CTFont=}'/>
</function>
<function name='CTFontCreateWithFontDescriptorAndOptions'>
<arg declared_type='CTFontDescriptorRef _Nonnull' name='descriptor' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<arg const='true' declared_type='CGAffineTransform * _Nullable' name='matrix' type='^{CGAffineTransform=ffffff}' type64='^{CGAffineTransform=dddddd}'/>
<arg declared_type='CTFontOptions' name='options' type='L' type64='Q'/>
<retval declared_type='CTFontRef _Nonnull' type='^{__CTFont=}'/>
</function>
<function name='CTFontCreateWithGraphicsFont'>
<arg declared_type='CGFontRef _Nonnull' name='graphicsFont' type='^{CGFont=}'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<arg const='true' declared_type='CGAffineTransform * _Nullable' name='matrix' type='^{CGAffineTransform=ffffff}' type64='^{CGAffineTransform=dddddd}'/>
<arg declared_type='CTFontDescriptorRef _Nullable' name='attributes' type='^{__CTFontDescriptor=}'/>
<retval declared_type='CTFontRef _Nonnull' type='^{__CTFont=}'/>
</function>
<function name='CTFontCreateWithName'>
<arg declared_type='CFStringRef _Nonnull' name='name' type='^{__CFString=}'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<arg const='true' declared_type='CGAffineTransform * _Nullable' name='matrix' type='^{CGAffineTransform=ffffff}' type64='^{CGAffineTransform=dddddd}'/>
<retval declared_type='CTFontRef _Nonnull' type='^{__CTFont=}'/>
</function>
<function name='CTFontCreateWithNameAndOptions'>
<arg declared_type='CFStringRef _Nonnull' name='name' type='^{__CFString=}'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<arg const='true' declared_type='CGAffineTransform * _Nullable' name='matrix' type='^{CGAffineTransform=ffffff}' type64='^{CGAffineTransform=dddddd}'/>
<arg declared_type='CTFontOptions' name='options' type='L' type64='Q'/>
<retval declared_type='CTFontRef _Nonnull' type='^{__CTFont=}'/>
</function>
<function name='CTFontDescriptorCopyAttribute'>
<arg declared_type='CTFontDescriptorRef _Nonnull' name='descriptor' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CFStringRef _Nonnull' name='attribute' type='^{__CFString=}'/>
<retval declared_type='CFTypeRef _Nullable' type='@'/>
</function>
<function name='CTFontDescriptorCopyAttributes'>
<arg declared_type='CTFontDescriptorRef _Nonnull' name='descriptor' type='^{__CTFontDescriptor=}'/>
<retval declared_type='CFDictionaryRef _Nonnull' type='^{__CFDictionary=}'/>
</function>
<function name='CTFontDescriptorCopyLocalizedAttribute'>
<arg declared_type='CTFontDescriptorRef _Nonnull' name='descriptor' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CFStringRef _Nonnull' name='attribute' type='^{__CFString=}'/>
<arg declared_type='CFStringRef _Nullable * _Nullable' name='language' type='^^{__CFString}'/>
<retval declared_type='CFTypeRef _Nullable' type='@'/>
</function>
<function name='CTFontDescriptorCreateCopyWithAttributes'>
<arg declared_type='CTFontDescriptorRef _Nonnull' name='original' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CFDictionaryRef _Nonnull' name='attributes' type='^{__CFDictionary=}'/>
<retval declared_type='CTFontDescriptorRef _Nonnull' type='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateCopyWithFamily'>
<arg declared_type='CTFontDescriptorRef _Nonnull' name='original' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CFStringRef _Nonnull' name='family' type='^{__CFString=}'/>
<retval declared_type='CTFontDescriptorRef _Nullable' type='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateCopyWithFeature'>
<arg declared_type='CTFontDescriptorRef _Nonnull' name='original' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CFNumberRef _Nonnull' name='featureTypeIdentifier' type='^{__CFNumber=}'/>
<arg declared_type='CFNumberRef _Nonnull' name='featureSelectorIdentifier' type='^{__CFNumber=}'/>
<retval declared_type='CTFontDescriptorRef _Nonnull' type='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateCopyWithSymbolicTraits'>
<arg declared_type='CTFontDescriptorRef _Nonnull' name='original' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CTFontSymbolicTraits' name='symTraitValue' type='I'/>
<arg declared_type='CTFontSymbolicTraits' name='symTraitMask' type='I'/>
<retval declared_type='CTFontDescriptorRef _Nullable' type='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateCopyWithVariation'>
<arg declared_type='CTFontDescriptorRef _Nonnull' name='original' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CFNumberRef _Nonnull' name='variationIdentifier' type='^{__CFNumber=}'/>
<arg declared_type='CGFloat' name='variationValue' type='f' type64='d'/>
<retval declared_type='CTFontDescriptorRef _Nonnull' type='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateMatchingFontDescriptor'>
<arg declared_type='CTFontDescriptorRef _Nonnull' name='descriptor' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CFSetRef _Nullable' name='mandatoryAttributes' type='^{__CFSet=}'/>
<retval declared_type='CTFontDescriptorRef _Nullable' type='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateMatchingFontDescriptors'>
<arg declared_type='CTFontDescriptorRef _Nonnull' name='descriptor' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CFSetRef _Nullable' name='mandatoryAttributes' type='^{__CFSet=}'/>
<retval declared_type='CFArrayRef _Nullable' type='^{__CFArray=}'/>
</function>
<function name='CTFontDescriptorCreateWithAttributes'>
<arg declared_type='CFDictionaryRef _Nonnull' name='attributes' type='^{__CFDictionary=}'/>
<retval declared_type='CTFontDescriptorRef _Nonnull' type='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateWithNameAndSize'>
<arg declared_type='CFStringRef _Nonnull' name='name' type='^{__CFString=}'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<retval declared_type='CTFontDescriptorRef _Nonnull' type='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTFontDescriptorMatchFontDescriptorsWithProgressHandler'>
<arg declared_type='CFArrayRef _Nonnull' name='descriptors' type='^{__CFArray=}'/>
<arg declared_type='CFSetRef _Nullable' name='mandatoryAttributes' type='^{__CFSet=}'/>
<arg declared_type='CTFontDescriptorProgressHandler _Nonnull' function_pointer='true' name='progressBlock' type='@?'>
<arg declared_type='CTFontDescriptorMatchingState' type='I'/>
<arg declared_type='CFDictionaryRef _Nonnull' type='^{__CFDictionary=}'/>
<retval declared_type='_Bool' type='B'/>
</arg>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CTFontDrawGlyphs'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg const='true' declared_type='CGGlyph*' name='glyphs' type='^S'/>
<arg const='true' declared_type='CGPoint*' name='positions' type='^{CGPoint=ff}' type64='^{CGPoint=dd}'/>
<arg declared_type='size_t' name='count' type='L' type64='Q'/>
<arg declared_type='CGContextRef _Nonnull' name='context' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTFontGetAdvancesForGlyphs'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg declared_type='CTFontOrientation' name='orientation' type='I'/>
<arg const='true' declared_type='CGGlyph*' name='glyphs' type='^S'/>
<arg declared_type='CGSize * _Nullable' name='advances' type='^{CGSize=ff}' type64='^{CGSize=dd}'/>
<arg declared_type='CFIndex' name='count' type='l' type64='q'/>
<retval declared_type='double' type='d'/>
</function>
<function name='CTFontGetAscent'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTFontGetBoundingBox'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='CTFontGetBoundingRectsForGlyphs'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg declared_type='CTFontOrientation' name='orientation' type='I'/>
<arg const='true' declared_type='CGGlyph*' name='glyphs' type='^S'/>
<arg declared_type='CGRect * _Nullable' name='boundingRects' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type='CFIndex' name='count' type='l' type64='q'/>
<retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='CTFontGetCapHeight'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTFontGetDescent'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTFontGetGlyphCount'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<function name='CTFontGetGlyphWithName'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg declared_type='CFStringRef _Nonnull' name='glyphName' type='^{__CFString=}'/>
<retval declared_type='CGGlyph' type='S'/>
</function>
<function name='CTFontGetGlyphsForCharacters'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg const='true' declared_type='UniChar*' name='characters' type='^S'/>
<arg declared_type='CGGlyph*' name='glyphs' type='^S'/>
<arg declared_type='CFIndex' name='count' type='l' type64='q'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CTFontGetLeading'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTFontGetLigatureCaretPositions'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg declared_type='CGGlyph' name='glyph' type='S'/>
<arg declared_type='CGFloat * _Nullable' name='positions' type='^f' type64='^d'/>
<arg declared_type='CFIndex' name='maxPositions' type='l' type64='q'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<function name='CTFontGetMatrix'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}' type64='{CGAffineTransform=dddddd}'/>
</function>
<function name='CTFontGetOpticalBoundsForGlyphs'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg const='true' declared_type='CGGlyph*' name='glyphs' type='^S'/>
<arg declared_type='CGRect * _Nullable' name='boundingRects' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type='CFIndex' name='count' type='l' type64='q'/>
<arg declared_type='CFOptionFlags' name='options' type='L' type64='Q'/>
<retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='CTFontGetSize'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTFontGetSlantAngle'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTFontGetStringEncoding'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CFStringEncoding' type='L' type64='I'/>
</function>
<function name='CTFontGetSymbolicTraits'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CTFontSymbolicTraits' type='I'/>
</function>
<function name='CTFontGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTFontGetUnderlinePosition'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTFontGetUnderlineThickness'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTFontGetUnitsPerEm'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='unsigned int' type='I'/>
</function>
<function name='CTFontGetVerticalTranslationsForGlyphs'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg const='true' declared_type='CGGlyph*' name='glyphs' type='^S'/>
<arg declared_type='CGSize*' name='translations' type='^{CGSize=ff}' type64='^{CGSize=dd}'/>
<arg declared_type='CFIndex' name='count' type='l' type64='q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTFontGetXHeight'>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTFontManagerCopyAvailableFontFamilyNames'>
<retval declared_type='CFArrayRef _Nonnull' type='^{__CFArray=}'/>
</function>
<function name='CTFontManagerCopyAvailablePostScriptNames'>
<retval declared_type='CFArrayRef _Nonnull' type='^{__CFArray=}'/>
</function>
<function name='CTFontManagerCreateFontDescriptorFromData'>
<arg declared_type='CFDataRef _Nonnull' name='data' type='^{__CFData=}'/>
<retval declared_type='CTFontDescriptorRef _Nullable' type='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontManagerCreateFontDescriptorsFromURL'>
<arg declared_type='CFURLRef _Nonnull' name='fileURL' type='^{__CFURL=}'/>
<retval declared_type='CFArrayRef _Nullable' type='^{__CFArray=}'/>
</function>
<function name='CTFontManagerRegisterFontsForURL'>
<arg declared_type='CFURLRef _Nonnull' name='fontURL' type='^{__CFURL=}'/>
<arg declared_type='CTFontManagerScope' name='scope' type='I'/>
<arg declared_type='CFErrorRef _Nullable * _Nullable' name='error' type='^^{__CFError}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CTFontManagerRegisterFontsForURLs'>
<arg declared_type='CFArrayRef _Nonnull' name='fontURLs' type='^{__CFArray=}'/>
<arg declared_type='CTFontManagerScope' name='scope' type='I'/>
<arg declared_type='CFArrayRef _Nullable * _Nullable' name='errors' type='^^{__CFArray}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CTFontManagerRegisterGraphicsFont'>
<arg declared_type='CGFontRef _Nonnull' name='font' type='^{CGFont=}'/>
<arg declared_type='CFErrorRef _Nullable * _Nullable' name='error' type='^^{__CFError}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CTFontManagerUnregisterFontsForURL'>
<arg declared_type='CFURLRef _Nonnull' name='fontURL' type='^{__CFURL=}'/>
<arg declared_type='CTFontManagerScope' name='scope' type='I'/>
<arg declared_type='CFErrorRef _Nullable * _Nullable' name='error' type='^^{__CFError}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CTFontManagerUnregisterFontsForURLs'>
<arg declared_type='CFArrayRef _Nonnull' name='fontURLs' type='^{__CFArray=}'/>
<arg declared_type='CTFontManagerScope' name='scope' type='I'/>
<arg declared_type='CFArrayRef _Nullable * _Nullable' name='errors' type='^^{__CFArray}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CTFontManagerUnregisterGraphicsFont'>
<arg declared_type='CGFontRef _Nonnull' name='font' type='^{CGFont=}'/>
<arg declared_type='CFErrorRef _Nullable * _Nullable' name='error' type='^^{__CFError}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CTFrameDraw'>
<arg declared_type='CTFrameRef _Nonnull' name='frame' type='^{__CTFrame=}'/>
<arg declared_type='CGContextRef _Nonnull' name='context' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTFrameGetFrameAttributes'>
<arg declared_type='CTFrameRef _Nonnull' name='frame' type='^{__CTFrame=}'/>
<retval declared_type='CFDictionaryRef _Nullable' type='^{__CFDictionary=}'/>
</function>
<function name='CTFrameGetLineOrigins'>
<arg declared_type='CTFrameRef _Nonnull' name='frame' type='^{__CTFrame=}'/>
<arg declared_type='CFRange' name='range' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<arg declared_type='CGPoint*' name='origins' type='^{CGPoint=ff}' type64='^{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTFrameGetLines'>
<arg declared_type='CTFrameRef _Nonnull' name='frame' type='^{__CTFrame=}'/>
<retval declared_type='CFArrayRef _Nonnull' type='^{__CFArray=}'/>
</function>
<function name='CTFrameGetPath'>
<arg declared_type='CTFrameRef _Nonnull' name='frame' type='^{__CTFrame=}'/>
<retval declared_type='CGPathRef _Nonnull' type='^{CGPath=}'/>
</function>
<function name='CTFrameGetStringRange'>
<arg declared_type='CTFrameRef _Nonnull' name='frame' type='^{__CTFrame=}'/>
<retval declared_type='CFRange' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
</function>
<function name='CTFrameGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTFrameGetVisibleStringRange'>
<arg declared_type='CTFrameRef _Nonnull' name='frame' type='^{__CTFrame=}'/>
<retval declared_type='CFRange' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
</function>
<function name='CTFramesetterCreateFrame'>
<arg declared_type='CTFramesetterRef _Nonnull' name='framesetter' type='^{__CTFramesetter=}'/>
<arg declared_type='CFRange' name='stringRange' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<arg declared_type='CGPathRef _Nonnull' name='path' type='^{CGPath=}'/>
<arg declared_type='CFDictionaryRef _Nullable' name='frameAttributes' type='^{__CFDictionary=}'/>
<retval declared_type='CTFrameRef _Nonnull' type='^{__CTFrame=}'/>
</function>
<function name='CTFramesetterCreateWithAttributedString'>
<arg declared_type='CFAttributedStringRef _Nonnull' name='string' type='^{__CFAttributedString=}'/>
<retval declared_type='CTFramesetterRef _Nonnull' type='^{__CTFramesetter=}'/>
</function>
<function name='CTFramesetterCreateWithTypesetter'>
<arg declared_type='CTTypesetterRef _Nonnull' name='typesetter' type='^{__CTTypesetter=}'/>
<retval declared_type='CTFramesetterRef _Nonnull' type='^{__CTFramesetter=}'/>
</function>
<function name='CTFramesetterGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTFramesetterGetTypesetter'>
<arg declared_type='CTFramesetterRef _Nonnull' name='framesetter' type='^{__CTFramesetter=}'/>
<retval declared_type='CTTypesetterRef _Nonnull' type='^{__CTTypesetter=}'/>
</function>
<function name='CTFramesetterSuggestFrameSizeWithConstraints'>
<arg declared_type='CTFramesetterRef _Nonnull' name='framesetter' type='^{__CTFramesetter=}'/>
<arg declared_type='CFRange' name='stringRange' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<arg declared_type='CFDictionaryRef _Nullable' name='frameAttributes' type='^{__CFDictionary=}'/>
<arg declared_type='CGSize' name='constraints' type='{CGSize=ff}' type64='{CGSize=dd}'/>
<arg declared_type='CFRange * _Nullable' name='fitRange' type='^{_CFRange=ii}' type64='^{_CFRange=qq}'/>
<retval declared_type='CGSize' type='{CGSize=ff}' type64='{CGSize=dd}'/>
</function>
<function name='CTGetCoreTextVersion'>
<retval declared_type='uint32_t' type='I'/>
</function>
<function name='CTGlyphInfoCreateWithCharacterIdentifier'>
<arg declared_type='CGFontIndex' name='cid' type='S'/>
<arg declared_type='CTCharacterCollection' name='collection' type='S'/>
<arg declared_type='CFStringRef _Nonnull' name='baseString' type='^{__CFString=}'/>
<retval declared_type='CTGlyphInfoRef _Nonnull' type='^{__CTGlyphInfo=}'/>
</function>
<function name='CTGlyphInfoCreateWithGlyph'>
<arg declared_type='CGGlyph' name='glyph' type='S'/>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg declared_type='CFStringRef _Nonnull' name='baseString' type='^{__CFString=}'/>
<retval declared_type='CTGlyphInfoRef _Nonnull' type='^{__CTGlyphInfo=}'/>
</function>
<function name='CTGlyphInfoCreateWithGlyphName'>
<arg declared_type='CFStringRef _Nonnull' name='glyphName' type='^{__CFString=}'/>
<arg declared_type='CTFontRef _Nonnull' name='font' type='^{__CTFont=}'/>
<arg declared_type='CFStringRef _Nonnull' name='baseString' type='^{__CFString=}'/>
<retval declared_type='CTGlyphInfoRef _Nonnull' type='^{__CTGlyphInfo=}'/>
</function>
<function name='CTGlyphInfoGetCharacterCollection'>
<arg declared_type='CTGlyphInfoRef _Nonnull' name='glyphInfo' type='^{__CTGlyphInfo=}'/>
<retval declared_type='CTCharacterCollection' type='S'/>
</function>
<function name='CTGlyphInfoGetCharacterIdentifier'>
<arg declared_type='CTGlyphInfoRef _Nonnull' name='glyphInfo' type='^{__CTGlyphInfo=}'/>
<retval declared_type='CGFontIndex' type='S'/>
</function>
<function name='CTGlyphInfoGetGlyphName'>
<arg declared_type='CTGlyphInfoRef _Nonnull' name='glyphInfo' type='^{__CTGlyphInfo=}'/>
<retval declared_type='CFStringRef _Nullable' type='^{__CFString=}'/>
</function>
<function name='CTGlyphInfoGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTLineCreateJustifiedLine'>
<arg declared_type='CTLineRef _Nonnull' name='line' type='^{__CTLine=}'/>
<arg declared_type='CGFloat' name='justificationFactor' type='f' type64='d'/>
<arg declared_type='double' name='justificationWidth' type='d'/>
<retval declared_type='CTLineRef _Nullable' type='^{__CTLine=}'/>
</function>
<function name='CTLineCreateTruncatedLine'>
<arg declared_type='CTLineRef _Nonnull' name='line' type='^{__CTLine=}'/>
<arg declared_type='double' name='width' type='d'/>
<arg declared_type='CTLineTruncationType' name='truncationType' type='I'/>
<arg declared_type='CTLineRef _Nullable' name='truncationToken' type='^{__CTLine=}'/>
<retval declared_type='CTLineRef _Nullable' type='^{__CTLine=}'/>
</function>
<function name='CTLineCreateWithAttributedString'>
<arg declared_type='CFAttributedStringRef _Nonnull' name='attrString' type='^{__CFAttributedString=}'/>
<retval declared_type='CTLineRef _Nonnull' type='^{__CTLine=}'/>
</function>
<function name='CTLineDraw'>
<arg declared_type='CTLineRef _Nonnull' name='line' type='^{__CTLine=}'/>
<arg declared_type='CGContextRef _Nonnull' name='context' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTLineEnumerateCaretOffsets'>
<arg declared_type='CTLineRef _Nonnull' name='line' type='^{__CTLine=}'/>
<arg declared_type='void (^ _Nonnull)(double, CFIndex, _Bool, _Bool * _Nonnull)' function_pointer='true' name='block' type='@?'>
<arg declared_type='double' type='d'/>
<arg declared_type='CFIndex' type='l' type64='q'/>
<arg declared_type='_Bool' type='B'/>
<arg declared_type='_Bool * _Nonnull' type='^B'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='CTLineGetBoundsWithOptions'>
<arg declared_type='CTLineRef _Nonnull' name='line' type='^{__CTLine=}'/>
<arg declared_type='CTLineBoundsOptions' name='options' type='L' type64='Q'/>
<retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='CTLineGetGlyphCount'>
<arg declared_type='CTLineRef _Nonnull' name='line' type='^{__CTLine=}'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<function name='CTLineGetGlyphRuns'>
<arg declared_type='CTLineRef _Nonnull' name='line' type='^{__CTLine=}'/>
<retval declared_type='CFArrayRef _Nonnull' type='^{__CFArray=}'/>
</function>
<function name='CTLineGetImageBounds'>
<arg declared_type='CTLineRef _Nonnull' name='line' type='^{__CTLine=}'/>
<arg declared_type='CGContextRef _Nullable' name='context' type='^{CGContext=}'/>
<retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='CTLineGetOffsetForStringIndex'>
<arg declared_type='CTLineRef _Nonnull' name='line' type='^{__CTLine=}'/>
<arg declared_type='CFIndex' name='charIndex' type='l' type64='q'/>
<arg declared_type='CGFloat * _Nullable' name='secondaryOffset' type='^f' type64='^d'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTLineGetPenOffsetForFlush'>
<arg declared_type='CTLineRef _Nonnull' name='line' type='^{__CTLine=}'/>
<arg declared_type='CGFloat' name='flushFactor' type='f' type64='d'/>
<arg declared_type='double' name='flushWidth' type='d'/>
<retval declared_type='double' type='d'/>
</function>
<function name='CTLineGetStringIndexForPosition'>
<arg declared_type='CTLineRef _Nonnull' name='line' type='^{__CTLine=}'/>
<arg declared_type='CGPoint' name='position' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<function name='CTLineGetStringRange'>
<arg declared_type='CTLineRef _Nonnull' name='line' type='^{__CTLine=}'/>
<retval declared_type='CFRange' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
</function>
<function name='CTLineGetTrailingWhitespaceWidth'>
<arg declared_type='CTLineRef _Nonnull' name='line' type='^{__CTLine=}'/>
<retval declared_type='double' type='d'/>
</function>
<function name='CTLineGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTLineGetTypographicBounds'>
<arg declared_type='CTLineRef _Nonnull' name='line' type='^{__CTLine=}'/>
<arg declared_type='CGFloat * _Nullable' name='ascent' type='^f' type64='^d'/>
<arg declared_type='CGFloat * _Nullable' name='descent' type='^f' type64='^d'/>
<arg declared_type='CGFloat * _Nullable' name='leading' type='^f' type64='^d'/>
<retval declared_type='double' type='d'/>
</function>
<function name='CTParagraphStyleCreate'>
<arg const='true' declared_type='CTParagraphStyleSetting * _Nullable' name='settings' type='^{CTParagraphStyleSetting=II^v}' type64='^{CTParagraphStyleSetting=IQ^v}'/>
<arg declared_type='size_t' name='settingCount' type='L' type64='Q'/>
<retval declared_type='CTParagraphStyleRef _Nonnull' type='^{__CTParagraphStyle=}'/>
</function>
<function name='CTParagraphStyleCreateCopy'>
<arg declared_type='CTParagraphStyleRef _Nonnull' name='paragraphStyle' type='^{__CTParagraphStyle=}'/>
<retval declared_type='CTParagraphStyleRef _Nonnull' type='^{__CTParagraphStyle=}'/>
</function>
<function name='CTParagraphStyleGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTParagraphStyleGetValueForSpecifier'>
<arg declared_type='CTParagraphStyleRef _Nonnull' name='paragraphStyle' type='^{__CTParagraphStyle=}'/>
<arg declared_type='CTParagraphStyleSpecifier' name='spec' type='I'/>
<arg declared_type='size_t' name='valueBufferSize' type='L' type64='Q'/>
<arg declared_type='void * _Nonnull' name='valueBuffer' type='^v'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CTRubyAnnotationCreate'>
<arg declared_type='CTRubyAlignment' name='alignment' type='C'/>
<arg declared_type='CTRubyOverhang' name='overhang' type='C'/>
<arg declared_type='CGFloat' name='sizeFactor' type='f' type64='d'/>
<arg declared_type='CFStringRef _Nullable*' name='text' type='^^{__CFString}'/>
<retval declared_type='CTRubyAnnotationRef _Nonnull' type='^{__CTRubyAnnotation=}'/>
</function>
<function name='CTRubyAnnotationCreateCopy'>
<arg declared_type='CTRubyAnnotationRef _Nonnull' name='rubyAnnotation' type='^{__CTRubyAnnotation=}'/>
<retval declared_type='CTRubyAnnotationRef _Nonnull' type='^{__CTRubyAnnotation=}'/>
</function>
<function name='CTRubyAnnotationCreateWithAttributes'>
<arg declared_type='CTRubyAlignment' name='alignment' type='C'/>
<arg declared_type='CTRubyOverhang' name='overhang' type='C'/>
<arg declared_type='CTRubyPosition' name='position' type='C'/>
<arg declared_type='CFStringRef _Nonnull' name='string' type='^{__CFString=}'/>
<arg declared_type='CFDictionaryRef _Nonnull' name='attributes' type='^{__CFDictionary=}'/>
<retval declared_type='CTRubyAnnotationRef _Nonnull' type='^{__CTRubyAnnotation=}'/>
</function>
<function name='CTRubyAnnotationGetAlignment'>
<arg declared_type='CTRubyAnnotationRef _Nonnull' name='rubyAnnotation' type='^{__CTRubyAnnotation=}'/>
<retval declared_type='CTRubyAlignment' type='C'/>
</function>
<function name='CTRubyAnnotationGetOverhang'>
<arg declared_type='CTRubyAnnotationRef _Nonnull' name='rubyAnnotation' type='^{__CTRubyAnnotation=}'/>
<retval declared_type='CTRubyOverhang' type='C'/>
</function>
<function name='CTRubyAnnotationGetSizeFactor'>
<arg declared_type='CTRubyAnnotationRef _Nonnull' name='rubyAnnotation' type='^{__CTRubyAnnotation=}'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTRubyAnnotationGetTextForPosition'>
<arg declared_type='CTRubyAnnotationRef _Nonnull' name='rubyAnnotation' type='^{__CTRubyAnnotation=}'/>
<arg declared_type='CTRubyPosition' name='position' type='C'/>
<retval declared_type='CFStringRef _Nullable' type='^{__CFString=}'/>
</function>
<function name='CTRubyAnnotationGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTRunDelegateCreate'>
<arg const='true' declared_type='CTRunDelegateCallbacks * _Nonnull' name='callbacks' type='^{_CTRunDelegateCallbacks=i^?^?^?^?}' type64='^{_CTRunDelegateCallbacks=q^?^?^?^?}'/>
<arg declared_type='void * _Nullable' name='refCon' type='^v'/>
<retval declared_type='CTRunDelegateRef _Nullable' type='^{__CTRunDelegate=}'/>
</function>
<function name='CTRunDelegateGetRefCon'>
<arg declared_type='CTRunDelegateRef _Nonnull' name='runDelegate' type='^{__CTRunDelegate=}'/>
<retval declared_type='void * _Nonnull' type='^v'/>
</function>
<function name='CTRunDelegateGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTRunDraw'>
<arg declared_type='CTRunRef _Nonnull' name='run' type='^{__CTRun=}'/>
<arg declared_type='CGContextRef _Nonnull' name='context' type='^{CGContext=}'/>
<arg declared_type='CFRange' name='range' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTRunGetAdvances'>
<arg declared_type='CTRunRef _Nonnull' name='run' type='^{__CTRun=}'/>
<arg declared_type='CFRange' name='range' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<arg declared_type='CGSize*' name='buffer' type='^{CGSize=ff}' type64='^{CGSize=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTRunGetAdvancesPtr'>
<arg declared_type='CTRunRef _Nonnull' name='run' type='^{__CTRun=}'/>
<retval const='true' declared_type='CGSize * _Nullable' type='^{CGSize=ff}' type64='^{CGSize=dd}'/>
</function>
<function name='CTRunGetAttributes'>
<arg declared_type='CTRunRef _Nonnull' name='run' type='^{__CTRun=}'/>
<retval declared_type='CFDictionaryRef _Nonnull' type='^{__CFDictionary=}'/>
</function>
<function name='CTRunGetGlyphCount'>
<arg declared_type='CTRunRef _Nonnull' name='run' type='^{__CTRun=}'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<function name='CTRunGetGlyphs'>
<arg declared_type='CTRunRef _Nonnull' name='run' type='^{__CTRun=}'/>
<arg declared_type='CFRange' name='range' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<arg declared_type='CGGlyph*' name='buffer' type='^S'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTRunGetGlyphsPtr'>
<arg declared_type='CTRunRef _Nonnull' name='run' type='^{__CTRun=}'/>
<retval const='true' declared_type='CGGlyph * _Nullable' type='^S'/>
</function>
<function name='CTRunGetImageBounds'>
<arg declared_type='CTRunRef _Nonnull' name='run' type='^{__CTRun=}'/>
<arg declared_type='CGContextRef _Nullable' name='context' type='^{CGContext=}'/>
<arg declared_type='CFRange' name='range' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='CTRunGetPositions'>
<arg declared_type='CTRunRef _Nonnull' name='run' type='^{__CTRun=}'/>
<arg declared_type='CFRange' name='range' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<arg declared_type='CGPoint*' name='buffer' type='^{CGPoint=ff}' type64='^{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTRunGetPositionsPtr'>
<arg declared_type='CTRunRef _Nonnull' name='run' type='^{__CTRun=}'/>
<retval const='true' declared_type='CGPoint * _Nullable' type='^{CGPoint=ff}' type64='^{CGPoint=dd}'/>
</function>
<function name='CTRunGetStatus'>
<arg declared_type='CTRunRef _Nonnull' name='run' type='^{__CTRun=}'/>
<retval declared_type='CTRunStatus' type='I'/>
</function>
<function name='CTRunGetStringIndices'>
<arg declared_type='CTRunRef _Nonnull' name='run' type='^{__CTRun=}'/>
<arg declared_type='CFRange' name='range' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<arg declared_type='CFIndex*' name='buffer' type='^i' type64='^q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTRunGetStringIndicesPtr'>
<arg declared_type='CTRunRef _Nonnull' name='run' type='^{__CTRun=}'/>
<retval const='true' declared_type='CFIndex * _Nullable' type='^i' type64='^q'/>
</function>
<function name='CTRunGetStringRange'>
<arg declared_type='CTRunRef _Nonnull' name='run' type='^{__CTRun=}'/>
<retval declared_type='CFRange' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
</function>
<function name='CTRunGetTextMatrix'>
<arg declared_type='CTRunRef _Nonnull' name='run' type='^{__CTRun=}'/>
<retval declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}' type64='{CGAffineTransform=dddddd}'/>
</function>
<function name='CTRunGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTRunGetTypographicBounds'>
<arg declared_type='CTRunRef _Nonnull' name='run' type='^{__CTRun=}'/>
<arg declared_type='CFRange' name='range' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<arg declared_type='CGFloat * _Nullable' name='ascent' type='^f' type64='^d'/>
<arg declared_type='CGFloat * _Nullable' name='descent' type='^f' type64='^d'/>
<arg declared_type='CGFloat * _Nullable' name='leading' type='^f' type64='^d'/>
<retval declared_type='double' type='d'/>
</function>
<function name='CTTextTabCreate'>
<arg declared_type='CTTextAlignment' name='alignment' type='C'/>
<arg declared_type='double' name='location' type='d'/>
<arg declared_type='CFDictionaryRef _Nullable' name='options' type='^{__CFDictionary=}'/>
<retval declared_type='CTTextTabRef _Nonnull' type='^{__CTTextTab=}'/>
</function>
<function name='CTTextTabGetAlignment'>
<arg declared_type='CTTextTabRef _Nonnull' name='tab' type='^{__CTTextTab=}'/>
<retval declared_type='CTTextAlignment' type='C'/>
</function>
<function name='CTTextTabGetLocation'>
<arg declared_type='CTTextTabRef _Nonnull' name='tab' type='^{__CTTextTab=}'/>
<retval declared_type='double' type='d'/>
</function>
<function name='CTTextTabGetOptions'>
<arg declared_type='CTTextTabRef _Nonnull' name='tab' type='^{__CTTextTab=}'/>
<retval declared_type='CFDictionaryRef _Nullable' type='^{__CFDictionary=}'/>
</function>
<function name='CTTextTabGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTTypesetterCreateLine'>
<arg declared_type='CTTypesetterRef _Nonnull' name='typesetter' type='^{__CTTypesetter=}'/>
<arg declared_type='CFRange' name='stringRange' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<retval declared_type='CTLineRef _Nonnull' type='^{__CTLine=}'/>
</function>
<function name='CTTypesetterCreateLineWithOffset'>
<arg declared_type='CTTypesetterRef _Nonnull' name='typesetter' type='^{__CTTypesetter=}'/>
<arg declared_type='CFRange' name='stringRange' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<arg declared_type='double' name='offset' type='d'/>
<retval declared_type='CTLineRef _Nonnull' type='^{__CTLine=}'/>
</function>
<function name='CTTypesetterCreateWithAttributedString'>
<arg declared_type='CFAttributedStringRef _Nonnull' name='string' type='^{__CFAttributedString=}'/>
<retval declared_type='CTTypesetterRef _Nonnull' type='^{__CTTypesetter=}'/>
</function>
<function name='CTTypesetterCreateWithAttributedStringAndOptions'>
<arg declared_type='CFAttributedStringRef _Nonnull' name='string' type='^{__CFAttributedString=}'/>
<arg declared_type='CFDictionaryRef _Nullable' name='options' type='^{__CFDictionary=}'/>
<retval declared_type='CTTypesetterRef _Nullable' type='^{__CTTypesetter=}'/>
</function>
<function name='CTTypesetterGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTTypesetterSuggestClusterBreak'>
<arg declared_type='CTTypesetterRef _Nonnull' name='typesetter' type='^{__CTTypesetter=}'/>
<arg declared_type='CFIndex' name='startIndex' type='l' type64='q'/>
<arg declared_type='double' name='width' type='d'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<function name='CTTypesetterSuggestClusterBreakWithOffset'>
<arg declared_type='CTTypesetterRef _Nonnull' name='typesetter' type='^{__CTTypesetter=}'/>
<arg declared_type='CFIndex' name='startIndex' type='l' type64='q'/>
<arg declared_type='double' name='width' type='d'/>
<arg declared_type='double' name='offset' type='d'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<function name='CTTypesetterSuggestLineBreak'>
<arg declared_type='CTTypesetterRef _Nonnull' name='typesetter' type='^{__CTTypesetter=}'/>
<arg declared_type='CFIndex' name='startIndex' type='l' type64='q'/>
<arg declared_type='double' name='width' type='d'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<function name='CTTypesetterSuggestLineBreakWithOffset'>
<arg declared_type='CTTypesetterRef _Nonnull' name='typesetter' type='^{__CTTypesetter=}'/>
<arg declared_type='CFIndex' name='startIndex' type='l' type64='q'/>
<arg declared_type='double' name='width' type='d'/>
<arg declared_type='double' name='offset' type='d'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
</signatures>
