<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='MKCoordinateRegion' type='{_MKCoordinateRegion=&quot;center&quot;{CLLocationCoordinate2D=&quot;latitude&quot;d&quot;longitude&quot;d}&quot;span&quot;{_MKCoordinateSpan=&quot;latitudeDelta&quot;d&quot;longitudeDelta&quot;d}}'>
<field declared_type='CLLocationCoordinate2D' name='center' type='{CLLocationCoordinate2D=&quot;latitude&quot;d&quot;longitude&quot;d}'/>
<field declared_type='MKCoordinateSpan' name='span' type='{_MKCoordinateSpan=&quot;latitudeDelta&quot;d&quot;longitudeDelta&quot;d}'/>
</struct>
<struct name='MKCoordinateSpan' type='{_MKCoordinateSpan=&quot;latitudeDelta&quot;d&quot;longitudeDelta&quot;d}'>
<field declared_type='CLLocationDegrees' name='latitudeDelta' type='d'/>
<field declared_type='CLLocationDegrees' name='longitudeDelta' type='d'/>
</struct>
<struct name='MKMapPoint' type='{_MKMapPoint=&quot;x&quot;d&quot;y&quot;d}'>
<field declared_type='double' name='x' type='d'/>
<field declared_type='double' name='y' type='d'/>
</struct>
<struct name='MKMapRect' type='{_MKMapRect=&quot;origin&quot;{_MKMapPoint=&quot;x&quot;d&quot;y&quot;d}&quot;size&quot;{_MKMapSize=&quot;width&quot;d&quot;height&quot;d}}'>
<field declared_type='MKMapPoint' name='origin' type='{_MKMapPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='MKMapSize' name='size' type='{_MKMapSize=&quot;width&quot;d&quot;height&quot;d}'/>
</struct>
<struct name='MKMapSize' type='{_MKMapSize=&quot;width&quot;d&quot;height&quot;d}'>
<field declared_type='double' name='width' type='d'/>
<field declared_type='double' name='height' type='d'/>
</struct>
<struct name='MKTileOverlayPath' type='{_MKTileOverlayPath=&quot;x&quot;i&quot;y&quot;i&quot;z&quot;i&quot;contentScaleFactor&quot;f}' type64='{_MKTileOverlayPath=&quot;x&quot;q&quot;y&quot;q&quot;z&quot;q&quot;contentScaleFactor&quot;d}'>
<field declared_type='NSInteger' name='x' type='i' type64='q'/>
<field declared_type='NSInteger' name='y' type='i' type64='q'/>
<field declared_type='NSInteger' name='z' type='i' type64='q'/>
<field declared_type='CGFloat' name='contentScaleFactor' type='f' type64='d'/>
</struct>
<constant const='true' declared_type='NSString * _Nonnull' name='MKAnnotationCalloutInfoDidChangeNotification' type='@'/>
<constant declared_type='NSString * _Nonnull' name='MKErrorDomain' type='@'/>
<constant const='true' declared_type='MKFeatureDisplayPriority' name='MKFeatureDisplayPriorityDefaultHigh' type='f'/>
<constant const='true' declared_type='MKFeatureDisplayPriority' name='MKFeatureDisplayPriorityDefaultLow' type='f'/>
<constant const='true' declared_type='MKFeatureDisplayPriority' name='MKFeatureDisplayPriorityRequired' type='f'/>
<constant const='true' declared_type='NSString * _Nonnull' name='MKLaunchOptionsCameraKey' type='@'/>
<constant const='true' declared_type='NSString * _Nonnull' name='MKLaunchOptionsDirectionsModeDefault' type='@'/>
<constant const='true' declared_type='NSString * _Nonnull' name='MKLaunchOptionsDirectionsModeDriving' type='@'/>
<constant const='true' declared_type='NSString * _Nonnull' name='MKLaunchOptionsDirectionsModeKey' type='@'/>
<constant const='true' declared_type='NSString * _Nonnull' name='MKLaunchOptionsDirectionsModeTransit' type='@'/>
<constant const='true' declared_type='NSString * _Nonnull' name='MKLaunchOptionsDirectionsModeWalking' type='@'/>
<constant const='true' declared_type='NSString * _Nonnull' name='MKLaunchOptionsMapCenterKey' type='@'/>
<constant const='true' declared_type='NSString * _Nonnull' name='MKLaunchOptionsMapSpanKey' type='@'/>
<constant const='true' declared_type='NSString * _Nonnull' name='MKLaunchOptionsMapTypeKey' type='@'/>
<constant const='true' declared_type='NSString * _Nonnull' name='MKLaunchOptionsShowsTrafficKey' type='@'/>
<constant const='true' declared_type='NSString * _Nonnull' name='MKMapItemTypeIdentifier' type='@'/>
<constant const='true' declared_type='MKMapRect' name='MKMapRectNull' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<constant const='true' declared_type='MKMapRect' name='MKMapRectWorld' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<constant const='true' declared_type='MKMapSize' name='MKMapSizeWorld' type='{_MKMapSize=dd}'/>
<constant const='true' declared_type='NSString * _Nonnull' name='MKMapViewDefaultAnnotationViewReuseIdentifier' type='@'/>
<constant const='true' declared_type='NSString * _Nonnull' name='MKMapViewDefaultClusterAnnotationViewReuseIdentifier' type='@'/>
<enum name='MKAnnotationViewCollisionModeCircle' value='1'/>
<enum name='MKAnnotationViewCollisionModeRectangle' value='0'/>
<enum name='MKAnnotationViewDragStateCanceling' value='3'/>
<enum name='MKAnnotationViewDragStateDragging' value='2'/>
<enum name='MKAnnotationViewDragStateEnding' value='4'/>
<enum name='MKAnnotationViewDragStateNone' value='0'/>
<enum name='MKAnnotationViewDragStateStarting' value='1'/>
<enum name='MKDirectionsTransportTypeAny' value='268435455'/>
<enum name='MKDirectionsTransportTypeAutomobile' value='1'/>
<enum name='MKDirectionsTransportTypeTransit' value='4'/>
<enum name='MKDirectionsTransportTypeWalking' value='2'/>
<enum name='MKDistanceFormatterUnitStyleAbbreviated' value='1'/>
<enum name='MKDistanceFormatterUnitStyleDefault' value='0'/>
<enum name='MKDistanceFormatterUnitStyleFull' value='2'/>
<enum name='MKDistanceFormatterUnitsDefault' value='0'/>
<enum name='MKDistanceFormatterUnitsImperial' value='2'/>
<enum name='MKDistanceFormatterUnitsImperialWithYards' value='3'/>
<enum name='MKDistanceFormatterUnitsMetric' value='1'/>
<enum name='MKErrorDirectionsNotFound' value='5'/>
<enum name='MKErrorLoadingThrottled' value='3'/>
<enum name='MKErrorPlacemarkNotFound' value='4'/>
<enum name='MKErrorServerFailure' value='2'/>
<enum name='MKErrorUnknown' value='1'/>
<enum name='MKFeatureVisibilityAdaptive' value='0'/>
<enum name='MKFeatureVisibilityHidden' value='1'/>
<enum name='MKFeatureVisibilityVisible' value='2'/>
<enum name='MKMapTypeHybrid' value='2'/>
<enum name='MKMapTypeHybridFlyover' value='4'/>
<enum name='MKMapTypeMutedStandard' value='5'/>
<enum name='MKMapTypeSatellite' value='1'/>
<enum name='MKMapTypeSatelliteFlyover' value='3'/>
<enum name='MKMapTypeStandard' value='0'/>
<enum name='MKOverlayLevelAboveLabels' value='1'/>
<enum name='MKOverlayLevelAboveRoads' value='0'/>
<enum name='MKPinAnnotationColorGreen' value='1'/>
<enum name='MKPinAnnotationColorPurple' value='2'/>
<enum name='MKPinAnnotationColorRed' value='0'/>
<enum name='MKScaleViewAlignmentLeading' value='0'/>
<enum name='MKScaleViewAlignmentTrailing' value='1'/>
<enum name='MKSearchCompletionFilterTypeLocationsAndQueries' value='0'/>
<enum name='MKSearchCompletionFilterTypeLocationsOnly' value='1'/>
<enum name='MKUserTrackingModeFollow' value='1'/>
<enum name='MKUserTrackingModeFollowWithHeading' value='2'/>
<enum name='MKUserTrackingModeNone' value='0'/>
<function name='MKCoordinateForMapPoint'>
<arg declared_type='MKMapPoint' name='mapPoint' type='{_MKMapPoint=dd}'/>
<retval declared_type='CLLocationCoordinate2D' type='{CLLocationCoordinate2D=dd}'/>
</function>
<function name='MKCoordinateRegionForMapRect'>
<arg declared_type='MKMapRect' name='rect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='MKCoordinateRegion' type='{_MKCoordinateRegion={CLLocationCoordinate2D=dd}{_MKCoordinateSpan=dd}}'/>
</function>
<function inline='true' name='MKCoordinateRegionMake'>
<arg declared_type='CLLocationCoordinate2D' name='centerCoordinate' type='{CLLocationCoordinate2D=dd}'/>
<arg declared_type='MKCoordinateSpan' name='span' type='{_MKCoordinateSpan=dd}'/>
<retval declared_type='MKCoordinateRegion' type='{_MKCoordinateRegion={CLLocationCoordinate2D=dd}{_MKCoordinateSpan=dd}}'/>
</function>
<function name='MKCoordinateRegionMakeWithDistance'>
<arg declared_type='CLLocationCoordinate2D' name='centerCoordinate' type='{CLLocationCoordinate2D=dd}'/>
<arg declared_type='CLLocationDistance' name='latitudinalMeters' type='d'/>
<arg declared_type='CLLocationDistance' name='longitudinalMeters' type='d'/>
<retval declared_type='MKCoordinateRegion' type='{_MKCoordinateRegion={CLLocationCoordinate2D=dd}{_MKCoordinateSpan=dd}}'/>
</function>
<function inline='true' name='MKCoordinateSpanMake'>
<arg declared_type='CLLocationDegrees' name='latitudeDelta' type='d'/>
<arg declared_type='CLLocationDegrees' name='longitudeDelta' type='d'/>
<retval declared_type='MKCoordinateSpan' type='{_MKCoordinateSpan=dd}'/>
</function>
<function inline='true' name='MKMapPointEqualToPoint'>
<arg declared_type='MKMapPoint' name='point1' type='{_MKMapPoint=dd}'/>
<arg declared_type='MKMapPoint' name='point2' type='{_MKMapPoint=dd}'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function name='MKMapPointForCoordinate'>
<arg declared_type='CLLocationCoordinate2D' name='coordinate' type='{CLLocationCoordinate2D=dd}'/>
<retval declared_type='MKMapPoint' type='{_MKMapPoint=dd}'/>
</function>
<function inline='true' name='MKMapPointMake'>
<arg declared_type='double' name='x' type='d'/>
<arg declared_type='double' name='y' type='d'/>
<retval declared_type='MKMapPoint' type='{_MKMapPoint=dd}'/>
</function>
<function name='MKMapPointsPerMeterAtLatitude'>
<arg declared_type='CLLocationDegrees' name='latitude' type='d'/>
<retval declared_type='double' type='d'/>
</function>
<function name='MKMapRectContainsPoint'>
<arg declared_type='MKMapRect' name='rect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<arg declared_type='MKMapPoint' name='point' type='{_MKMapPoint=dd}'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function name='MKMapRectContainsRect'>
<arg declared_type='MKMapRect' name='rect1' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<arg declared_type='MKMapRect' name='rect2' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function name='MKMapRectDivide'>
<arg declared_type='MKMapRect' name='rect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<arg declared_type='MKMapRect * _Nonnull' name='slice' type='^{_MKMapRect={?=dd}{?=dd}}'/>
<arg declared_type='MKMapRect * _Nonnull' name='remainder' type='^{_MKMapRect={?=dd}{?=dd}}'/>
<arg declared_type='double' name='amount' type='d'/>
<arg declared_type='CGRectEdge' name='edge' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='MKMapRectEqualToRect'>
<arg declared_type='MKMapRect' name='rect1' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<arg declared_type='MKMapRect' name='rect2' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function inline='true' name='MKMapRectGetHeight'>
<arg declared_type='MKMapRect' name='rect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='double' type='d'/>
</function>
<function inline='true' name='MKMapRectGetMaxX'>
<arg declared_type='MKMapRect' name='rect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='double' type='d'/>
</function>
<function inline='true' name='MKMapRectGetMaxY'>
<arg declared_type='MKMapRect' name='rect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='double' type='d'/>
</function>
<function inline='true' name='MKMapRectGetMidX'>
<arg declared_type='MKMapRect' name='rect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='double' type='d'/>
</function>
<function inline='true' name='MKMapRectGetMidY'>
<arg declared_type='MKMapRect' name='rect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='double' type='d'/>
</function>
<function inline='true' name='MKMapRectGetMinX'>
<arg declared_type='MKMapRect' name='rect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='double' type='d'/>
</function>
<function inline='true' name='MKMapRectGetMinY'>
<arg declared_type='MKMapRect' name='rect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='double' type='d'/>
</function>
<function inline='true' name='MKMapRectGetWidth'>
<arg declared_type='MKMapRect' name='rect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='double' type='d'/>
</function>
<function name='MKMapRectInset'>
<arg declared_type='MKMapRect' name='rect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<arg declared_type='double' name='dx' type='d'/>
<arg declared_type='double' name='dy' type='d'/>
<retval declared_type='MKMapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
</function>
<function name='MKMapRectIntersection'>
<arg declared_type='MKMapRect' name='rect1' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<arg declared_type='MKMapRect' name='rect2' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='MKMapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
</function>
<function name='MKMapRectIntersectsRect'>
<arg declared_type='MKMapRect' name='rect1' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<arg declared_type='MKMapRect' name='rect2' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function inline='true' name='MKMapRectIsEmpty'>
<arg declared_type='MKMapRect' name='rect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function inline='true' name='MKMapRectIsNull'>
<arg declared_type='MKMapRect' name='rect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function inline='true' name='MKMapRectMake'>
<arg declared_type='double' name='x' type='d'/>
<arg declared_type='double' name='y' type='d'/>
<arg declared_type='double' name='width' type='d'/>
<arg declared_type='double' name='height' type='d'/>
<retval declared_type='MKMapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
</function>
<function name='MKMapRectOffset'>
<arg declared_type='MKMapRect' name='rect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<arg declared_type='double' name='dx' type='d'/>
<arg declared_type='double' name='dy' type='d'/>
<retval declared_type='MKMapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
</function>
<function name='MKMapRectRemainder'>
<arg declared_type='MKMapRect' name='rect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='MKMapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
</function>
<function name='MKMapRectSpans180thMeridian'>
<arg declared_type='MKMapRect' name='rect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function name='MKMapRectUnion'>
<arg declared_type='MKMapRect' name='rect1' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<arg declared_type='MKMapRect' name='rect2' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='MKMapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
</function>
<function inline='true' name='MKMapSizeEqualToSize'>
<arg declared_type='MKMapSize' name='size1' type='{_MKMapSize=dd}'/>
<arg declared_type='MKMapSize' name='size2' type='{_MKMapSize=dd}'/>
<retval declared_type='BOOL' type='B'/>
</function>
<function inline='true' name='MKMapSizeMake'>
<arg declared_type='double' name='width' type='d'/>
<arg declared_type='double' name='height' type='d'/>
<retval declared_type='MKMapSize' type='{_MKMapSize=dd}'/>
</function>
<function name='MKMetersBetweenMapPoints'>
<arg declared_type='MKMapPoint' name='a' type='{_MKMapPoint=dd}'/>
<arg declared_type='MKMapPoint' name='b' type='{_MKMapPoint=dd}'/>
<retval declared_type='CLLocationDistance' type='d'/>
</function>
<function name='MKMetersPerMapPointAtLatitude'>
<arg declared_type='CLLocationDegrees' name='latitude' type='d'/>
<retval declared_type='CLLocationDistance' type='d'/>
</function>
<function name='MKRoadWidthAtZoomScale'>
<arg declared_type='MKZoomScale' name='zoomScale' type='f' type64='d'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function inline='true' name='MKStringFromMapPoint'>
<arg declared_type='MKMapPoint' name='point' type='{_MKMapPoint=dd}'/>
<retval declared_type='NSString * _Nonnull' type='@'/>
</function>
<function inline='true' name='MKStringFromMapRect'>
<arg declared_type='MKMapRect' name='rect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='NSString * _Nonnull' type='@'/>
</function>
<function inline='true' name='MKStringFromMapSize'>
<arg declared_type='MKMapSize' name='size' type='{_MKMapSize=dd}'/>
<retval declared_type='NSString * _Nonnull' type='@'/>
</function>
<class name='MKAnnotationView'>
<method selector='annotation'>
<retval declared_type='id _Nullable' type='@'/>
</method>
<method selector='calloutOffset'>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='canShowCallout'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='centerOffset'>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='clusterAnnotationView'>
<retval declared_type='MKAnnotationView * _Nullable' type='@'/>
</method>
<method selector='clusteringIdentifier'>
<retval declared_type='NSString * _Nullable' type='@'/>
</method>
<method selector='collisionMode'>
<retval declared_type='MKAnnotationViewCollisionMode' type='i' type64='q'/>
</method>
<method selector='detailCalloutAccessoryView'>
<retval declared_type='UIView * _Nullable' type='@'/>
</method>
<method selector='displayPriority'>
<retval declared_type='MKFeatureDisplayPriority' type='f'/>
</method>
<method selector='dragState'>
<retval declared_type='MKAnnotationViewDragState' type='I' type64='Q'/>
</method>
<method selector='image'>
<retval declared_type='UIImage * _Nullable' type='@'/>
</method>
<method selector='initWithAnnotation:reuseIdentifier:'>
<arg declared_type='id _Nullable' index='0' name='annotation' type='@'/>
<arg declared_type='NSString * _Nullable' index='1' name='reuseIdentifier' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method selector='initWithCoder:'>
<arg declared_type='NSCoder * _Nonnull' index='0' name='aDecoder' type='@'/>
<retval declared_type='instancetype _Nullable' type='@'/>
</method>
<method selector='isDraggable'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isHighlighted'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isSelected'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='leftCalloutAccessoryView'>
<retval declared_type='UIView * _Nullable' type='@'/>
</method>
<method selector='prepareForDisplay'>
<retval declared_type='void' type='v'/>
</method>
<method selector='prepareForReuse'>
<retval declared_type='void' type='v'/>
</method>
<method selector='reuseIdentifier'>
<retval declared_type='NSString * _Nullable' type='@'/>
</method>
<method selector='rightCalloutAccessoryView'>
<retval declared_type='UIView * _Nullable' type='@'/>
</method>
<method selector='setAnnotation:'>
<arg declared_type='id _Nullable' index='0' name='annotation' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCalloutOffset:'>
<arg declared_type='CGPoint' index='0' name='calloutOffset' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCanShowCallout:'>
<arg declared_type='BOOL' index='0' name='canShowCallout' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCenterOffset:'>
<arg declared_type='CGPoint' index='0' name='centerOffset' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setClusteringIdentifier:'>
<arg declared_type='NSString * _Nullable' index='0' name='clusteringIdentifier' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCollisionMode:'>
<arg declared_type='MKAnnotationViewCollisionMode' index='0' name='collisionMode' type='i' type64='q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDetailCalloutAccessoryView:'>
<arg declared_type='UIView * _Nullable' index='0' name='detailCalloutAccessoryView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDisplayPriority:'>
<arg declared_type='MKFeatureDisplayPriority' index='0' name='displayPriority' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDragState:'>
<arg declared_type='MKAnnotationViewDragState' index='0' name='dragState' type='I' type64='Q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDragState:animated:'>
<arg declared_type='MKAnnotationViewDragState' index='0' name='newDragState' type='I' type64='Q'/>
<arg declared_type='BOOL' index='1' name='animated' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDraggable:'>
<arg declared_type='BOOL' index='0' name='draggable' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEnabled:'>
<arg declared_type='BOOL' index='0' name='enabled' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHighlighted:'>
<arg declared_type='BOOL' index='0' name='highlighted' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setImage:'>
<arg declared_type='UIImage * _Nullable' index='0' name='image' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLeftCalloutAccessoryView:'>
<arg declared_type='UIView * _Nullable' index='0' name='leftCalloutAccessoryView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRightCalloutAccessoryView:'>
<arg declared_type='UIView * _Nullable' index='0' name='rightCalloutAccessoryView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelected:'>
<arg declared_type='BOOL' index='0' name='selected' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelected:animated:'>
<arg declared_type='BOOL' index='0' name='selected' type='B'/>
<arg declared_type='BOOL' index='1' name='animated' type='B'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='MKCircle'>
<method selector='boundingMapRect'>
<retval declared_type='MKMapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
</method>
<method class_method='true' selector='circleWithCenterCoordinate:radius:'>
<arg declared_type='CLLocationCoordinate2D' index='0' name='coord' type='{CLLocationCoordinate2D=dd}'/>
<arg declared_type='CLLocationDistance' index='1' name='radius' type='d'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method class_method='true' selector='circleWithMapRect:'>
<arg declared_type='MKMapRect' index='0' name='mapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method selector='coordinate'>
<retval declared_type='CLLocationCoordinate2D' type='{CLLocationCoordinate2D=dd}'/>
</method>
<method selector='radius'>
<retval declared_type='CLLocationDistance' type='d'/>
</method>
</class>
<class name='MKCircleRenderer'>
<method selector='circle'>
<retval declared_type='MKCircle * _Nonnull' type='@'/>
</method>
<method selector='initWithCircle:'>
<arg declared_type='MKCircle * _Nonnull' index='0' name='circle' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
</class>
<class name='MKCircleView'>
<method selector='circle'>
<retval declared_type='MKCircle*' type='@'/>
</method>
<method selector='initWithCircle:'>
<arg declared_type='MKCircle*' index='0' name='circle' type='@'/>
<retval declared_type='instancetype' type='@'/>
</method>
</class>
<class name='MKClusterAnnotation'>
<method selector='initWithMemberAnnotations:'>
<arg declared_type='NSArray&gt; * _Nonnull' index='0' name='memberAnnotations' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method selector='memberAnnotations'>
<retval declared_type='NSArray&gt; * _Nonnull' type='@'/>
</method>
<method selector='setSubtitle:'>
<arg declared_type='NSString * _Nullable' index='0' name='subtitle' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg declared_type='NSString * _Nullable' index='0' name='title' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='subtitle'>
<retval declared_type='NSString * _Nullable' type='@'/>
</method>
<method selector='title'>
<retval declared_type='NSString * _Nullable' type='@'/>
</method>
</class>
<class name='MKCompassButton'>
<method class_method='true' selector='compassButtonWithMapView:'>
<arg declared_type='MKMapView * _Nullable' index='0' name='mapView' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method selector='compassVisibility'>
<retval declared_type='MKFeatureVisibility' type='i' type64='q'/>
</method>
<method selector='mapView'>
<retval declared_type='MKMapView * _Nullable' type='@'/>
</method>
<method selector='setCompassVisibility:'>
<arg declared_type='MKFeatureVisibility' index='0' name='compassVisibility' type='i' type64='q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMapView:'>
<arg declared_type='MKMapView * _Nullable' index='0' name='mapView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='MKDirections'>
<method selector='calculateDirectionsWithCompletionHandler:'>
<arg declared_type='MKDirectionsHandler _Nonnull' function_pointer='true' index='0' name='completionHandler' type='@?'>
<arg declared_type='MKDirectionsResponse * _Nullable' type='@'/>
<arg declared_type='NSError * _Nullable' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='calculateETAWithCompletionHandler:'>
<arg declared_type='MKETAHandler _Nonnull' function_pointer='true' index='0' name='completionHandler' type='@?'>
<arg declared_type='MKETAResponse * _Nullable' type='@'/>
<arg declared_type='NSError * _Nullable' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='cancel'>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithRequest:'>
<arg declared_type='MKDirectionsRequest * _Nonnull' index='0' name='request' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method selector='isCalculating'>
<retval declared_type='BOOL' type='B'/>
</method>
</class>
<class name='MKDirectionsRequest'>
<method selector='arrivalDate'>
<retval declared_type='NSDate * _Nullable' type='@'/>
</method>
<method selector='departureDate'>
<retval declared_type='NSDate * _Nullable' type='@'/>
</method>
<method selector='destination'>
<retval declared_type='MKMapItem * _Nullable' type='@'/>
</method>
<method selector='initWithContentsOfURL:'>
<arg declared_type='NSURL * _Nonnull' index='0' name='url' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method class_method='true' selector='isDirectionsRequestURL:'>
<arg declared_type='NSURL * _Nonnull' index='0' name='url' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='requestsAlternateRoutes'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setArrivalDate:'>
<arg declared_type='NSDate * _Nullable' index='0' name='arrivalDate' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDepartureDate:'>
<arg declared_type='NSDate * _Nullable' index='0' name='departureDate' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDestination:'>
<arg declared_type='MKMapItem * _Nullable' index='0' name='destination' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRequestsAlternateRoutes:'>
<arg declared_type='BOOL' index='0' name='requestsAlternateRoutes' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSource:'>
<arg declared_type='MKMapItem * _Nullable' index='0' name='source' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTransportType:'>
<arg declared_type='MKDirectionsTransportType' index='0' name='transportType' type='I' type64='Q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='source'>
<retval declared_type='MKMapItem * _Nullable' type='@'/>
</method>
<method selector='transportType'>
<retval declared_type='MKDirectionsTransportType' type='I' type64='Q'/>
</method>
</class>
<class name='MKDirectionsResponse'>
<method selector='destination'>
<retval declared_type='MKMapItem * _Nonnull' type='@'/>
</method>
<method selector='routes'>
<retval declared_type='NSArray * _Nonnull' type='@'/>
</method>
<method selector='source'>
<retval declared_type='MKMapItem * _Nonnull' type='@'/>
</method>
</class>
<class name='MKDistanceFormatter'>
<method selector='distanceFromString:'>
<arg declared_type='NSString * _Nonnull' index='0' name='distance' type='@'/>
<retval declared_type='CLLocationDistance' type='d'/>
</method>
<method selector='locale'>
<retval declared_type='NSLocale * _Nonnull' type='@'/>
</method>
<method selector='setLocale:'>
<arg declared_type='NSLocale * _Nullable' index='0' name='locale' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUnitStyle:'>
<arg declared_type='MKDistanceFormatterUnitStyle' index='0' name='unitStyle' type='I' type64='Q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUnits:'>
<arg declared_type='MKDistanceFormatterUnits' index='0' name='units' type='I' type64='Q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='stringFromDistance:'>
<arg declared_type='CLLocationDistance' index='0' name='distance' type='d'/>
<retval declared_type='NSString * _Nonnull' type='@'/>
</method>
<method selector='unitStyle'>
<retval declared_type='MKDistanceFormatterUnitStyle' type='I' type64='Q'/>
</method>
<method selector='units'>
<retval declared_type='MKDistanceFormatterUnits' type='I' type64='Q'/>
</method>
</class>
<class name='MKETAResponse'>
<method selector='destination'>
<retval declared_type='MKMapItem * _Nonnull' type='@'/>
</method>
<method selector='distance'>
<retval declared_type='CLLocationDistance' type='d'/>
</method>
<method selector='expectedArrivalDate'>
<retval declared_type='NSDate * _Nonnull' type='@'/>
</method>
<method selector='expectedDepartureDate'>
<retval declared_type='NSDate * _Nonnull' type='@'/>
</method>
<method selector='expectedTravelTime'>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='source'>
<retval declared_type='MKMapItem * _Nonnull' type='@'/>
</method>
<method selector='transportType'>
<retval declared_type='MKDirectionsTransportType' type='I' type64='Q'/>
</method>
</class>
<class name='MKGeodesicPolyline'>
<method class_method='true' selector='polylineWithCoordinates:count:'>
<arg const='true' declared_type='CLLocationCoordinate2D * _Nonnull' index='0' name='coords' type='^{CLLocationCoordinate2D=dd}'/>
<arg declared_type='NSUInteger' index='1' name='count' type='I' type64='Q'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method class_method='true' selector='polylineWithPoints:count:'>
<arg const='true' declared_type='MKMapPoint * _Nonnull' index='0' name='points' type='^{_MKMapPoint=dd}'/>
<arg declared_type='NSUInteger' index='1' name='count' type='I' type64='Q'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
</class>
<class name='MKLocalSearch'>
<method selector='cancel'>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithRequest:'>
<arg declared_type='MKLocalSearchRequest * _Nonnull' index='0' name='request' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method selector='isSearching'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='startWithCompletionHandler:'>
<arg declared_type='MKLocalSearchCompletionHandler _Nonnull' function_pointer='true' index='0' name='completionHandler' type='@?'>
<arg declared_type='MKLocalSearchResponse * _Nullable' type='@'/>
<arg declared_type='NSError * _Nullable' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='MKLocalSearchCompleter'>
<method selector='cancel'>
<retval declared_type='void' type='v'/>
</method>
<method selector='delegate'>
<retval declared_type='id _Nullable' type='@'/>
</method>
<method selector='filterType'>
<retval declared_type='MKSearchCompletionFilterType' type='i' type64='q'/>
</method>
<method selector='isSearching'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='queryFragment'>
<retval declared_type='NSString * _Nonnull' type='@'/>
</method>
<method selector='region'>
<retval declared_type='MKCoordinateRegion' type='{_MKCoordinateRegion={CLLocationCoordinate2D=dd}{_MKCoordinateSpan=dd}}'/>
</method>
<method selector='results'>
<retval declared_type='NSArray * _Nonnull' type='@'/>
</method>
<method selector='setDelegate:'>
<arg declared_type='id _Nullable' index='0' name='delegate' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setFilterType:'>
<arg declared_type='MKSearchCompletionFilterType' index='0' name='filterType' type='i' type64='q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setQueryFragment:'>
<arg declared_type='NSString * _Nonnull' index='0' name='queryFragment' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRegion:'>
<arg declared_type='MKCoordinateRegion' index='0' name='region' type='{_MKCoordinateRegion={CLLocationCoordinate2D=dd}{_MKCoordinateSpan=dd}}'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='MKLocalSearchCompletion'>
<method selector='subtitle'>
<retval declared_type='NSString * _Nonnull' type='@'/>
</method>
<method selector='subtitleHighlightRanges'>
<retval declared_type='NSArray * _Nonnull' type='@'/>
</method>
<method selector='title'>
<retval declared_type='NSString * _Nonnull' type='@'/>
</method>
<method selector='titleHighlightRanges'>
<retval declared_type='NSArray * _Nonnull' type='@'/>
</method>
</class>
<class name='MKLocalSearchRequest'>
<method selector='initWithCompletion:'>
<arg declared_type='MKLocalSearchCompletion * _Nonnull' index='0' name='completion' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method selector='naturalLanguageQuery'>
<retval declared_type='NSString * _Nullable' type='@'/>
</method>
<method selector='region'>
<retval declared_type='MKCoordinateRegion' type='{_MKCoordinateRegion={CLLocationCoordinate2D=dd}{_MKCoordinateSpan=dd}}'/>
</method>
<method selector='setNaturalLanguageQuery:'>
<arg declared_type='NSString * _Nullable' index='0' name='naturalLanguageQuery' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRegion:'>
<arg declared_type='MKCoordinateRegion' index='0' name='region' type='{_MKCoordinateRegion={CLLocationCoordinate2D=dd}{_MKCoordinateSpan=dd}}'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='MKLocalSearchResponse'>
<method selector='boundingRegion'>
<retval declared_type='MKCoordinateRegion' type='{_MKCoordinateRegion={CLLocationCoordinate2D=dd}{_MKCoordinateSpan=dd}}'/>
</method>
<method selector='mapItems'>
<retval declared_type='NSArray * _Nonnull' type='@'/>
</method>
</class>
<class name='MKMapCamera'>
<method selector='altitude'>
<retval declared_type='CLLocationDistance' type='d'/>
</method>
<method class_method='true' selector='camera'>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method class_method='true' selector='cameraLookingAtCenterCoordinate:fromDistance:pitch:heading:'>
<arg declared_type='CLLocationCoordinate2D' index='0' name='centerCoordinate' type='{CLLocationCoordinate2D=dd}'/>
<arg declared_type='CLLocationDistance' index='1' name='distance' type='d'/>
<arg declared_type='CGFloat' index='2' name='pitch' type='f' type64='d'/>
<arg declared_type='CLLocationDirection' index='3' name='heading' type='d'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method class_method='true' selector='cameraLookingAtCenterCoordinate:fromEyeCoordinate:eyeAltitude:'>
<arg declared_type='CLLocationCoordinate2D' index='0' name='centerCoordinate' type='{CLLocationCoordinate2D=dd}'/>
<arg declared_type='CLLocationCoordinate2D' index='1' name='eyeCoordinate' type='{CLLocationCoordinate2D=dd}'/>
<arg declared_type='CLLocationDistance' index='2' name='eyeAltitude' type='d'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method selector='centerCoordinate'>
<retval declared_type='CLLocationCoordinate2D' type='{CLLocationCoordinate2D=dd}'/>
</method>
<method selector='heading'>
<retval declared_type='CLLocationDirection' type='d'/>
</method>
<method selector='pitch'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='setAltitude:'>
<arg declared_type='CLLocationDistance' index='0' name='altitude' type='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCenterCoordinate:'>
<arg declared_type='CLLocationCoordinate2D' index='0' name='centerCoordinate' type='{CLLocationCoordinate2D=dd}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setHeading:'>
<arg declared_type='CLLocationDirection' index='0' name='heading' type='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPitch:'>
<arg declared_type='CGFloat' index='0' name='pitch' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='MKMapItem'>
<method selector='initWithPlacemark:'>
<arg declared_type='MKPlacemark * _Nonnull' index='0' name='placemark' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method selector='isCurrentLocation'>
<retval declared_type='BOOL' type='B'/>
</method>
<method class_method='true' selector='mapItemForCurrentLocation'>
<retval declared_type='MKMapItem * _Nonnull' type='@'/>
</method>
<method selector='name'>
<retval declared_type='NSString * _Nullable' type='@'/>
</method>
<method selector='openInMapsWithLaunchOptions:'>
<arg declared_type='NSDictionary * _Nullable' index='0' name='launchOptions' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method class_method='true' selector='openMapsWithItems:launchOptions:'>
<arg declared_type='NSArray * _Nonnull' index='0' name='mapItems' type='@'/>
<arg declared_type='NSDictionary * _Nullable' index='1' name='launchOptions' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='phoneNumber'>
<retval declared_type='NSString * _Nullable' type='@'/>
</method>
<method selector='placemark'>
<retval declared_type='MKPlacemark * _Nonnull' type='@'/>
</method>
<method selector='setName:'>
<arg declared_type='NSString * _Nullable' index='0' name='name' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPhoneNumber:'>
<arg declared_type='NSString * _Nullable' index='0' name='phoneNumber' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTimeZone:'>
<arg declared_type='NSTimeZone * _Nullable' index='0' name='timeZone' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUrl:'>
<arg declared_type='NSURL * _Nullable' index='0' name='url' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='timeZone'>
<retval declared_type='NSTimeZone * _Nullable' type='@'/>
</method>
<method selector='url'>
<retval declared_type='NSURL * _Nullable' type='@'/>
</method>
</class>
<class name='MKMapSnapshot'>
<method selector='image'>
<retval declared_type='UIImage * _Nonnull' type='@'/>
</method>
<method selector='pointForCoordinate:'>
<arg declared_type='CLLocationCoordinate2D' index='0' name='coordinate' type='{CLLocationCoordinate2D=dd}'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
</class>
<class name='MKMapSnapshotOptions'>
<method selector='camera'>
<retval declared_type='MKMapCamera * _Nonnull' type='@'/>
</method>
<method selector='mapRect'>
<retval declared_type='MKMapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
</method>
<method selector='mapType'>
<retval declared_type='MKMapType' type='I' type64='Q'/>
</method>
<method selector='region'>
<retval declared_type='MKCoordinateRegion' type='{_MKCoordinateRegion={CLLocationCoordinate2D=dd}{_MKCoordinateSpan=dd}}'/>
</method>
<method selector='scale'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='setCamera:'>
<arg declared_type='MKMapCamera * _Nonnull' index='0' name='camera' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMapRect:'>
<arg declared_type='MKMapRect' index='0' name='mapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMapType:'>
<arg declared_type='MKMapType' index='0' name='mapType' type='I' type64='Q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRegion:'>
<arg declared_type='MKCoordinateRegion' index='0' name='region' type='{_MKCoordinateRegion={CLLocationCoordinate2D=dd}{_MKCoordinateSpan=dd}}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScale:'>
<arg declared_type='CGFloat' index='0' name='scale' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsBuildings:'>
<arg declared_type='BOOL' index='0' name='showsBuildings' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsPointsOfInterest:'>
<arg declared_type='BOOL' index='0' name='showsPointsOfInterest' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSize:'>
<arg declared_type='CGSize' index='0' name='size' type='{CGSize=ff}' type64='{CGSize=dd}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='showsBuildings'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showsPointsOfInterest'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='size'>
<retval declared_type='CGSize' type='{CGSize=ff}' type64='{CGSize=dd}'/>
</method>
</class>
<class name='MKMapSnapshotter'>
<method selector='cancel'>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithOptions:'>
<arg declared_type='MKMapSnapshotOptions * _Nonnull' index='0' name='options' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method selector='isLoading'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='startWithCompletionHandler:'>
<arg declared_type='MKMapSnapshotCompletionHandler _Nonnull' function_pointer='true' index='0' name='completionHandler' type='@?'>
<arg declared_type='MKMapSnapshot * _Nullable' type='@'/>
<arg declared_type='NSError * _Nullable' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='startWithQueue:completionHandler:'>
<arg declared_type='dispatch_queue_t _Nonnull' index='0' name='queue' type='@'/>
<arg declared_type='MKMapSnapshotCompletionHandler _Nonnull' function_pointer='true' index='1' name='completionHandler' type='@?'>
<arg declared_type='MKMapSnapshot * _Nullable' type='@'/>
<arg declared_type='NSError * _Nullable' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='MKMapView'>
<method selector='addAnnotation:'>
<arg declared_type='id _Nonnull' index='0' name='annotation' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addAnnotations:'>
<arg declared_type='NSArray&gt; * _Nonnull' index='0' name='annotations' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addOverlay:'>
<arg declared_type='id _Nonnull' index='0' name='overlay' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addOverlay:level:'>
<arg declared_type='id _Nonnull' index='0' name='overlay' type='@'/>
<arg declared_type='MKOverlayLevel' index='1' name='level' type='i' type64='q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addOverlays:'>
<arg declared_type='NSArray&gt; * _Nonnull' index='0' name='overlays' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addOverlays:level:'>
<arg declared_type='NSArray&gt; * _Nonnull' index='0' name='overlays' type='@'/>
<arg declared_type='MKOverlayLevel' index='1' name='level' type='i' type64='q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='annotationVisibleRect'>
<retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</method>
<method selector='annotations'>
<retval declared_type='NSArray&gt; * _Nonnull' type='@'/>
</method>
<method selector='annotationsInMapRect:'>
<arg declared_type='MKMapRect' index='0' name='mapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='NSSet&gt; * _Nonnull' type='@'/>
</method>
<method selector='camera'>
<retval declared_type='MKMapCamera * _Nonnull' type='@'/>
</method>
<method selector='centerCoordinate'>
<retval declared_type='CLLocationCoordinate2D' type='{CLLocationCoordinate2D=dd}'/>
</method>
<method selector='convertCoordinate:toPointToView:'>
<arg declared_type='CLLocationCoordinate2D' index='0' name='coordinate' type='{CLLocationCoordinate2D=dd}'/>
<arg declared_type='UIView * _Nullable' index='1' name='view' type='@'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='convertPoint:toCoordinateFromView:'>
<arg declared_type='CGPoint' index='0' name='point' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<arg declared_type='UIView * _Nullable' index='1' name='view' type='@'/>
<retval declared_type='CLLocationCoordinate2D' type='{CLLocationCoordinate2D=dd}'/>
</method>
<method selector='convertRect:toRegionFromView:'>
<arg declared_type='CGRect' index='0' name='rect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type='UIView * _Nullable' index='1' name='view' type='@'/>
<retval declared_type='MKCoordinateRegion' type='{_MKCoordinateRegion={CLLocationCoordinate2D=dd}{_MKCoordinateSpan=dd}}'/>
</method>
<method selector='convertRegion:toRectToView:'>
<arg declared_type='MKCoordinateRegion' index='0' name='region' type='{_MKCoordinateRegion={CLLocationCoordinate2D=dd}{_MKCoordinateSpan=dd}}'/>
<arg declared_type='UIView * _Nullable' index='1' name='view' type='@'/>
<retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</method>
<method selector='delegate'>
<retval declared_type='id _Nullable' type='@'/>
</method>
<method selector='dequeueReusableAnnotationViewWithIdentifier:'>
<arg declared_type='NSString * _Nonnull' index='0' name='identifier' type='@'/>
<retval declared_type='MKAnnotationView * _Nullable' type='@'/>
</method>
<method selector='dequeueReusableAnnotationViewWithIdentifier:forAnnotation:'>
<arg declared_type='NSString * _Nonnull' index='0' name='identifier' type='@'/>
<arg declared_type='id _Nonnull' index='1' name='annotation' type='@'/>
<retval declared_type='MKAnnotationView * _Nonnull' type='@'/>
</method>
<method selector='deselectAnnotation:animated:'>
<arg declared_type='id _Nullable' index='0' name='annotation' type='@'/>
<arg declared_type='BOOL' index='1' name='animated' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='exchangeOverlay:withOverlay:'>
<arg declared_type='id _Nonnull' index='0' name='overlay1' type='@'/>
<arg declared_type='id _Nonnull' index='1' name='overlay2' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='exchangeOverlayAtIndex:withOverlayAtIndex:'>
<arg declared_type='NSUInteger' index='0' name='index1' type='I' type64='Q'/>
<arg declared_type='NSUInteger' index='1' name='index2' type='I' type64='Q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertOverlay:aboveOverlay:'>
<arg declared_type='id _Nonnull' index='0' name='overlay' type='@'/>
<arg declared_type='id _Nonnull' index='1' name='sibling' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertOverlay:atIndex:'>
<arg declared_type='id _Nonnull' index='0' name='overlay' type='@'/>
<arg declared_type='NSUInteger' index='1' name='index' type='I' type64='Q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertOverlay:atIndex:level:'>
<arg declared_type='id _Nonnull' index='0' name='overlay' type='@'/>
<arg declared_type='NSUInteger' index='1' name='index' type='I' type64='Q'/>
<arg declared_type='MKOverlayLevel' index='2' name='level' type='i' type64='q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='insertOverlay:belowOverlay:'>
<arg declared_type='id _Nonnull' index='0' name='overlay' type='@'/>
<arg declared_type='id _Nonnull' index='1' name='sibling' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='isPitchEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isRotateEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isScrollEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isUserLocationVisible'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isZoomEnabled'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='mapRectThatFits:'>
<arg declared_type='MKMapRect' index='0' name='mapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='MKMapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
</method>
<method selector='mapRectThatFits:edgePadding:'>
<arg declared_type='MKMapRect' index='0' name='mapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<arg declared_type='UIEdgeInsets' index='1' name='insets' type='{UIEdgeInsets=ffff}' type64='{UIEdgeInsets=dddd}'/>
<retval declared_type='MKMapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
</method>
<method selector='mapType'>
<retval declared_type='MKMapType' type='I' type64='Q'/>
</method>
<method selector='overlays'>
<retval declared_type='NSArray&gt; * _Nonnull' type='@'/>
</method>
<method selector='overlaysInLevel:'>
<arg declared_type='MKOverlayLevel' index='0' name='level' type='i' type64='q'/>
<retval declared_type='NSArray&gt; * _Nonnull' type='@'/>
</method>
<method selector='region'>
<retval declared_type='MKCoordinateRegion' type='{_MKCoordinateRegion={CLLocationCoordinate2D=dd}{_MKCoordinateSpan=dd}}'/>
</method>
<method selector='regionThatFits:'>
<arg declared_type='MKCoordinateRegion' index='0' name='region' type='{_MKCoordinateRegion={CLLocationCoordinate2D=dd}{_MKCoordinateSpan=dd}}'/>
<retval declared_type='MKCoordinateRegion' type='{_MKCoordinateRegion={CLLocationCoordinate2D=dd}{_MKCoordinateSpan=dd}}'/>
</method>
<method selector='registerClass:forAnnotationViewWithReuseIdentifier:'>
<arg declared_type='Class _Nullable' index='0' name='viewClass' type='#'/>
<arg declared_type='NSString * _Nonnull' index='1' name='identifier' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeAnnotation:'>
<arg declared_type='id _Nonnull' index='0' name='annotation' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeAnnotations:'>
<arg declared_type='NSArray&gt; * _Nonnull' index='0' name='annotations' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeOverlay:'>
<arg declared_type='id _Nonnull' index='0' name='overlay' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeOverlays:'>
<arg declared_type='NSArray&gt; * _Nonnull' index='0' name='overlays' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='rendererForOverlay:'>
<arg declared_type='id _Nonnull' index='0' name='overlay' type='@'/>
<retval declared_type='MKOverlayRenderer * _Nullable' type='@'/>
</method>
<method selector='selectAnnotation:animated:'>
<arg declared_type='id _Nonnull' index='0' name='annotation' type='@'/>
<arg declared_type='BOOL' index='1' name='animated' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectedAnnotations'>
<retval declared_type='NSArray&gt; * _Nonnull' type='@'/>
</method>
<method selector='setCamera:'>
<arg declared_type='MKMapCamera * _Nonnull' index='0' name='camera' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCamera:animated:'>
<arg declared_type='MKMapCamera * _Nonnull' index='0' name='camera' type='@'/>
<arg declared_type='BOOL' index='1' name='animated' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCenterCoordinate:'>
<arg declared_type='CLLocationCoordinate2D' index='0' name='centerCoordinate' type='{CLLocationCoordinate2D=dd}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCenterCoordinate:animated:'>
<arg declared_type='CLLocationCoordinate2D' index='0' name='coordinate' type='{CLLocationCoordinate2D=dd}'/>
<arg declared_type='BOOL' index='1' name='animated' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg declared_type='id _Nullable' index='0' name='delegate' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMapType:'>
<arg declared_type='MKMapType' index='0' name='mapType' type='I' type64='Q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPitchEnabled:'>
<arg declared_type='BOOL' index='0' name='pitchEnabled' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRegion:'>
<arg declared_type='MKCoordinateRegion' index='0' name='region' type='{_MKCoordinateRegion={CLLocationCoordinate2D=dd}{_MKCoordinateSpan=dd}}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRegion:animated:'>
<arg declared_type='MKCoordinateRegion' index='0' name='region' type='{_MKCoordinateRegion={CLLocationCoordinate2D=dd}{_MKCoordinateSpan=dd}}'/>
<arg declared_type='BOOL' index='1' name='animated' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setRotateEnabled:'>
<arg declared_type='BOOL' index='0' name='rotateEnabled' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScrollEnabled:'>
<arg declared_type='BOOL' index='0' name='scrollEnabled' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectedAnnotations:'>
<arg declared_type='NSArray&gt; * _Nonnull' index='0' name='selectedAnnotations' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsBuildings:'>
<arg declared_type='BOOL' index='0' name='showsBuildings' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsCompass:'>
<arg declared_type='BOOL' index='0' name='showsCompass' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsPointsOfInterest:'>
<arg declared_type='BOOL' index='0' name='showsPointsOfInterest' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsScale:'>
<arg declared_type='BOOL' index='0' name='showsScale' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsTraffic:'>
<arg declared_type='BOOL' index='0' name='showsTraffic' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsUserLocation:'>
<arg declared_type='BOOL' index='0' name='showsUserLocation' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUserTrackingMode:'>
<arg declared_type='MKUserTrackingMode' index='0' name='userTrackingMode' type='i' type64='q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setUserTrackingMode:animated:'>
<arg declared_type='MKUserTrackingMode' index='0' name='mode' type='i' type64='q'/>
<arg declared_type='BOOL' index='1' name='animated' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVisibleMapRect:'>
<arg declared_type='MKMapRect' index='0' name='visibleMapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVisibleMapRect:animated:'>
<arg declared_type='MKMapRect' index='0' name='mapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<arg declared_type='BOOL' index='1' name='animate' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setVisibleMapRect:edgePadding:animated:'>
<arg declared_type='MKMapRect' index='0' name='mapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<arg declared_type='UIEdgeInsets' index='1' name='insets' type='{UIEdgeInsets=ffff}' type64='{UIEdgeInsets=dddd}'/>
<arg declared_type='BOOL' index='2' name='animate' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setZoomEnabled:'>
<arg declared_type='BOOL' index='0' name='zoomEnabled' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='showAnnotations:animated:'>
<arg declared_type='NSArray&gt; * _Nonnull' index='0' name='annotations' type='@'/>
<arg declared_type='BOOL' index='1' name='animated' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='showsBuildings'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showsCompass'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showsPointsOfInterest'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showsScale'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showsTraffic'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='showsUserLocation'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='userLocation'>
<retval declared_type='MKUserLocation * _Nonnull' type='@'/>
</method>
<method selector='userTrackingMode'>
<retval declared_type='MKUserTrackingMode' type='i' type64='q'/>
</method>
<method selector='viewForAnnotation:'>
<arg declared_type='id _Nonnull' index='0' name='annotation' type='@'/>
<retval declared_type='MKAnnotationView * _Nullable' type='@'/>
</method>
<method selector='viewForOverlay:'>
<arg declared_type='id _Nonnull' index='0' name='overlay' type='@'/>
<retval declared_type='MKOverlayView * _Nonnull' type='@'/>
</method>
<method selector='visibleMapRect'>
<retval declared_type='MKMapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
</method>
</class>
<class name='MKMarkerAnnotationView'>
<method selector='animatesWhenAdded'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='glyphImage'>
<retval declared_type='UIImage * _Nullable' type='@'/>
</method>
<method selector='glyphText'>
<retval declared_type='NSString * _Nullable' type='@'/>
</method>
<method selector='glyphTintColor'>
<retval declared_type='UIColor * _Nullable' type='@'/>
</method>
<method selector='markerTintColor'>
<retval declared_type='UIColor * _Nullable' type='@'/>
</method>
<method selector='selectedGlyphImage'>
<retval declared_type='UIImage * _Nullable' type='@'/>
</method>
<method selector='setAnimatesWhenAdded:'>
<arg declared_type='BOOL' index='0' name='animatesWhenAdded' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGlyphImage:'>
<arg declared_type='UIImage * _Nullable' index='0' name='glyphImage' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGlyphText:'>
<arg declared_type='NSString * _Nullable' index='0' name='glyphText' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGlyphTintColor:'>
<arg declared_type='UIColor * _Nullable' index='0' name='glyphTintColor' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMarkerTintColor:'>
<arg declared_type='UIColor * _Nullable' index='0' name='markerTintColor' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectedGlyphImage:'>
<arg declared_type='UIImage * _Nullable' index='0' name='selectedGlyphImage' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSubtitleVisibility:'>
<arg declared_type='MKFeatureVisibility' index='0' name='subtitleVisibility' type='i' type64='q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitleVisibility:'>
<arg declared_type='MKFeatureVisibility' index='0' name='titleVisibility' type='i' type64='q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='subtitleVisibility'>
<retval declared_type='MKFeatureVisibility' type='i' type64='q'/>
</method>
<method selector='titleVisibility'>
<retval declared_type='MKFeatureVisibility' type='i' type64='q'/>
</method>
</class>
<class name='MKMultiPoint'>
<method selector='getCoordinates:range:'>
<arg declared_type='CLLocationCoordinate2D * _Nonnull' index='0' name='coords' type='^{CLLocationCoordinate2D=dd}'/>
<arg declared_type='NSRange' index='1' name='range' type='{_NSRange=II}' type64='{_NSRange=QQ}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='pointCount'>
<retval declared_type='NSUInteger' type='I' type64='Q'/>
</method>
<method selector='points'>
<retval declared_type='MKMapPoint * _Nonnull' type='^{_MKMapPoint=dd}'/>
</method>
</class>
<class name='MKOverlayPathRenderer'>
<method selector='applyFillPropertiesToContext:atZoomScale:'>
<arg declared_type='CGContextRef _Nonnull' index='0' name='context' type='^{CGContext=}'/>
<arg declared_type='MKZoomScale' index='1' name='zoomScale' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applyStrokePropertiesToContext:atZoomScale:'>
<arg declared_type='CGContextRef _Nonnull' index='0' name='context' type='^{CGContext=}'/>
<arg declared_type='MKZoomScale' index='1' name='zoomScale' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='createPath'>
<retval declared_type='void' type='v'/>
</method>
<method selector='fillColor'>
<retval declared_type='UIColor * _Nullable' type='@'/>
</method>
<method selector='fillPath:inContext:'>
<arg declared_type='CGPathRef _Nonnull' index='0' name='path' type='^{CGPath=}'/>
<arg declared_type='CGContextRef _Nonnull' index='1' name='context' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='invalidatePath'>
<retval declared_type='void' type='v'/>
</method>
<method selector='lineCap'>
<retval declared_type='CGLineCap' type='i'/>
</method>
<method selector='lineDashPattern'>
<retval declared_type='NSArray * _Nullable' type='@'/>
</method>
<method selector='lineDashPhase'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='lineJoin'>
<retval declared_type='CGLineJoin' type='i'/>
</method>
<method selector='lineWidth'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='miterLimit'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='path'>
<retval declared_type='CGPathRef _Nonnull' type='^{CGPath=}'/>
</method>
<method selector='setFillColor:'>
<arg declared_type='UIColor * _Nullable' index='0' name='fillColor' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineCap:'>
<arg declared_type='CGLineCap' index='0' name='lineCap' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineDashPattern:'>
<arg declared_type='NSArray * _Nullable' index='0' name='lineDashPattern' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineDashPhase:'>
<arg declared_type='CGFloat' index='0' name='lineDashPhase' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineJoin:'>
<arg declared_type='CGLineJoin' index='0' name='lineJoin' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineWidth:'>
<arg declared_type='CGFloat' index='0' name='lineWidth' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMiterLimit:'>
<arg declared_type='CGFloat' index='0' name='miterLimit' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPath:'>
<arg declared_type='CGPathRef _Nullable' index='0' name='path' type='^{CGPath=}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStrokeColor:'>
<arg declared_type='UIColor * _Nullable' index='0' name='strokeColor' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='strokeColor'>
<retval declared_type='UIColor * _Nullable' type='@'/>
</method>
<method selector='strokePath:inContext:'>
<arg declared_type='CGPathRef _Nonnull' index='0' name='path' type='^{CGPath=}'/>
<arg declared_type='CGContextRef _Nonnull' index='1' name='context' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='MKOverlayPathView'>
<method selector='applyFillPropertiesToContext:atZoomScale:'>
<arg declared_type='CGContextRef' index='0' name='context' type='^{CGContext=}'/>
<arg declared_type='MKZoomScale' index='1' name='zoomScale' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='applyStrokePropertiesToContext:atZoomScale:'>
<arg declared_type='CGContextRef' index='0' name='context' type='^{CGContext=}'/>
<arg declared_type='MKZoomScale' index='1' name='zoomScale' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='createPath'>
<retval declared_type='void' type='v'/>
</method>
<method selector='fillColor'>
<retval declared_type='UIColor*' type='@'/>
</method>
<method selector='fillPath:inContext:'>
<arg declared_type='CGPathRef' index='0' name='path' type='^{CGPath=}'/>
<arg declared_type='CGContextRef' index='1' name='context' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='invalidatePath'>
<retval declared_type='void' type='v'/>
</method>
<method selector='lineCap'>
<retval declared_type='CGLineCap' type='i'/>
</method>
<method selector='lineDashPattern'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='lineDashPhase'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='lineJoin'>
<retval declared_type='CGLineJoin' type='i'/>
</method>
<method selector='lineWidth'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='miterLimit'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='path'>
<retval declared_type='CGPathRef' type='^{CGPath=}'/>
</method>
<method selector='setFillColor:'>
<arg declared_type='UIColor*' index='0' name='fillColor' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineCap:'>
<arg declared_type='CGLineCap' index='0' name='lineCap' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineDashPattern:'>
<arg declared_type='NSArray*' index='0' name='lineDashPattern' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineDashPhase:'>
<arg declared_type='CGFloat' index='0' name='lineDashPhase' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineJoin:'>
<arg declared_type='CGLineJoin' index='0' name='lineJoin' type='i'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setLineWidth:'>
<arg declared_type='CGFloat' index='0' name='lineWidth' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMiterLimit:'>
<arg declared_type='CGFloat' index='0' name='miterLimit' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPath:'>
<arg declared_type='CGPathRef' index='0' name='path' type='^{CGPath=}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setStrokeColor:'>
<arg declared_type='UIColor*' index='0' name='strokeColor' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='strokeColor'>
<retval declared_type='UIColor*' type='@'/>
</method>
<method selector='strokePath:inContext:'>
<arg declared_type='CGPathRef' index='0' name='path' type='^{CGPath=}'/>
<arg declared_type='CGContextRef' index='1' name='context' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='MKOverlayRenderer'>
<method selector='alpha'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='canDrawMapRect:zoomScale:'>
<arg declared_type='MKMapRect' index='0' name='mapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<arg declared_type='MKZoomScale' index='1' name='zoomScale' type='f' type64='d'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='contentScaleFactor'>
<retval declared_type='CGFloat' type='f' type64='d'/>
</method>
<method selector='drawMapRect:zoomScale:inContext:'>
<arg declared_type='MKMapRect' index='0' name='mapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<arg declared_type='MKZoomScale' index='1' name='zoomScale' type='f' type64='d'/>
<arg declared_type='CGContextRef _Nonnull' index='2' name='context' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithOverlay:'>
<arg declared_type='id _Nonnull' index='0' name='overlay' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method selector='mapPointForPoint:'>
<arg declared_type='CGPoint' index='0' name='point' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='MKMapPoint' type='{_MKMapPoint=dd}'/>
</method>
<method selector='mapRectForRect:'>
<arg declared_type='CGRect' index='0' name='rect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type='MKMapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
</method>
<method selector='overlay'>
<retval declared_type='id _Nonnull' type='@'/>
</method>
<method selector='pointForMapPoint:'>
<arg declared_type='MKMapPoint' index='0' name='mapPoint' type='{_MKMapPoint=dd}'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='rectForMapRect:'>
<arg declared_type='MKMapRect' index='0' name='mapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</method>
<method selector='setAlpha:'>
<arg declared_type='CGFloat' index='0' name='alpha' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNeedsDisplay'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNeedsDisplayInMapRect:'>
<arg declared_type='MKMapRect' index='0' name='mapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNeedsDisplayInMapRect:zoomScale:'>
<arg declared_type='MKMapRect' index='0' name='mapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<arg declared_type='MKZoomScale' index='1' name='zoomScale' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='MKOverlayView'>
<method selector='canDrawMapRect:zoomScale:'>
<arg declared_type='MKMapRect' index='0' name='mapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<arg declared_type='MKZoomScale' index='1' name='zoomScale' type='f' type64='d'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='drawMapRect:zoomScale:inContext:'>
<arg declared_type='MKMapRect' index='0' name='mapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<arg declared_type='MKZoomScale' index='1' name='zoomScale' type='f' type64='d'/>
<arg declared_type='CGContextRef' index='2' name='context' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithOverlay:'>
<arg declared_type='id' index='0' name='overlay' type='@'/>
<retval declared_type='instancetype' type='@'/>
</method>
<method selector='mapPointForPoint:'>
<arg declared_type='CGPoint' index='0' name='point' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='MKMapPoint' type='{_MKMapPoint=dd}'/>
</method>
<method selector='mapRectForRect:'>
<arg declared_type='CGRect' index='0' name='rect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type='MKMapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
</method>
<method selector='overlay'>
<retval declared_type='id' type='@'/>
</method>
<method selector='pointForMapPoint:'>
<arg declared_type='MKMapPoint' index='0' name='mapPoint' type='{_MKMapPoint=dd}'/>
<retval declared_type='CGPoint' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
</method>
<method selector='rectForMapRect:'>
<arg declared_type='MKMapRect' index='0' name='mapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</method>
<method selector='setNeedsDisplayInMapRect:'>
<arg declared_type='MKMapRect' index='0' name='mapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNeedsDisplayInMapRect:zoomScale:'>
<arg declared_type='MKMapRect' index='0' name='mapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<arg declared_type='MKZoomScale' index='1' name='zoomScale' type='f' type64='d'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='MKPinAnnotationView'>
<method selector='animatesDrop'>
<retval declared_type='BOOL' type='B'/>
</method>
<method class_method='true' selector='greenPinColor'>
<retval declared_type='UIColor * _Nonnull' type='@'/>
</method>
<method selector='pinColor'>
<retval declared_type='MKPinAnnotationColor' type='I' type64='Q'/>
</method>
<method selector='pinTintColor'>
<retval declared_type='UIColor * _Nonnull' type='@'/>
</method>
<method class_method='true' selector='purplePinColor'>
<retval declared_type='UIColor * _Nonnull' type='@'/>
</method>
<method class_method='true' selector='redPinColor'>
<retval declared_type='UIColor * _Nonnull' type='@'/>
</method>
<method selector='setAnimatesDrop:'>
<arg declared_type='BOOL' index='0' name='animatesDrop' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPinColor:'>
<arg declared_type='MKPinAnnotationColor' index='0' name='pinColor' type='I' type64='Q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setPinTintColor:'>
<arg declared_type='UIColor * _Nullable' index='0' name='pinTintColor' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='MKPlacemark'>
<method selector='countryCode'>
<retval declared_type='NSString * _Nullable' type='@'/>
</method>
<method selector='initWithCoordinate:'>
<arg declared_type='CLLocationCoordinate2D' index='0' name='coordinate' type='{CLLocationCoordinate2D=dd}'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method selector='initWithCoordinate:addressDictionary:'>
<arg declared_type='CLLocationCoordinate2D' index='0' name='coordinate' type='{CLLocationCoordinate2D=dd}'/>
<arg declared_type='NSDictionary * _Nullable' index='1' name='addressDictionary' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method selector='initWithCoordinate:postalAddress:'>
<arg declared_type='CLLocationCoordinate2D' index='0' name='coordinate' type='{CLLocationCoordinate2D=dd}'/>
<arg declared_type='CNPostalAddress * _Nonnull' index='1' name='postalAddress' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
</class>
<class name='MKPointAnnotation'>
<method selector='coordinate'>
<retval declared_type='CLLocationCoordinate2D' type='{CLLocationCoordinate2D=dd}'/>
</method>
<method selector='setCoordinate:'>
<arg declared_type='CLLocationCoordinate2D' index='0' name='coordinate' type='{CLLocationCoordinate2D=dd}'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='MKPolygon'>
<method selector='interiorPolygons'>
<retval declared_type='NSArray * _Nullable' type='@'/>
</method>
<method class_method='true' selector='polygonWithCoordinates:count:'>
<arg const='true' declared_type='CLLocationCoordinate2D * _Nonnull' index='0' name='coords' type='^{CLLocationCoordinate2D=dd}'/>
<arg declared_type='NSUInteger' index='1' name='count' type='I' type64='Q'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method class_method='true' selector='polygonWithCoordinates:count:interiorPolygons:'>
<arg const='true' declared_type='CLLocationCoordinate2D * _Nonnull' index='0' name='coords' type='^{CLLocationCoordinate2D=dd}'/>
<arg declared_type='NSUInteger' index='1' name='count' type='I' type64='Q'/>
<arg declared_type='NSArray * _Nullable' index='2' name='interiorPolygons' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method class_method='true' selector='polygonWithPoints:count:'>
<arg const='true' declared_type='MKMapPoint * _Nonnull' index='0' name='points' type='^{_MKMapPoint=dd}'/>
<arg declared_type='NSUInteger' index='1' name='count' type='I' type64='Q'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method class_method='true' selector='polygonWithPoints:count:interiorPolygons:'>
<arg const='true' declared_type='MKMapPoint * _Nonnull' index='0' name='points' type='^{_MKMapPoint=dd}'/>
<arg declared_type='NSUInteger' index='1' name='count' type='I' type64='Q'/>
<arg declared_type='NSArray * _Nullable' index='2' name='interiorPolygons' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
</class>
<class name='MKPolygonRenderer'>
<method selector='initWithPolygon:'>
<arg declared_type='MKPolygon * _Nonnull' index='0' name='polygon' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method selector='polygon'>
<retval declared_type='MKPolygon * _Nonnull' type='@'/>
</method>
</class>
<class name='MKPolygonView'>
<method selector='initWithPolygon:'>
<arg declared_type='MKPolygon*' index='0' name='polygon' type='@'/>
<retval declared_type='instancetype' type='@'/>
</method>
<method selector='polygon'>
<retval declared_type='MKPolygon*' type='@'/>
</method>
</class>
<class name='MKPolyline'>
<method class_method='true' selector='polylineWithCoordinates:count:'>
<arg const='true' declared_type='CLLocationCoordinate2D * _Nonnull' index='0' name='coords' type='^{CLLocationCoordinate2D=dd}'/>
<arg declared_type='NSUInteger' index='1' name='count' type='I' type64='Q'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method class_method='true' selector='polylineWithPoints:count:'>
<arg const='true' declared_type='MKMapPoint * _Nonnull' index='0' name='points' type='^{_MKMapPoint=dd}'/>
<arg declared_type='NSUInteger' index='1' name='count' type='I' type64='Q'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
</class>
<class name='MKPolylineRenderer'>
<method selector='initWithPolyline:'>
<arg declared_type='MKPolyline * _Nonnull' index='0' name='polyline' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method selector='polyline'>
<retval declared_type='MKPolyline * _Nonnull' type='@'/>
</method>
</class>
<class name='MKPolylineView'>
<method selector='initWithPolyline:'>
<arg declared_type='MKPolyline*' index='0' name='polyline' type='@'/>
<retval declared_type='instancetype' type='@'/>
</method>
<method selector='polyline'>
<retval declared_type='MKPolyline*' type='@'/>
</method>
</class>
<class name='MKReverseGeocoder'>
<method selector='cancel'>
<retval declared_type='void' type='v'/>
</method>
<method selector='coordinate'>
<retval declared_type='CLLocationCoordinate2D' type='{CLLocationCoordinate2D=dd}'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithCoordinate:'>
<arg declared_type='CLLocationCoordinate2D' index='0' name='coordinate' type='{CLLocationCoordinate2D=dd}'/>
<retval declared_type='instancetype' type='@'/>
</method>
<method selector='isQuerying'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='placemark'>
<retval declared_type='MKPlacemark*' type='@'/>
</method>
<method selector='setDelegate:'>
<arg declared_type='id' index='0' name='delegate' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='start'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='MKRoute'>
<method selector='advisoryNotices'>
<retval declared_type='NSArray * _Nonnull' type='@'/>
</method>
<method selector='distance'>
<retval declared_type='CLLocationDistance' type='d'/>
</method>
<method selector='expectedTravelTime'>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='name'>
<retval declared_type='NSString * _Nonnull' type='@'/>
</method>
<method selector='polyline'>
<retval declared_type='MKPolyline * _Nonnull' type='@'/>
</method>
<method selector='steps'>
<retval declared_type='NSArray * _Nonnull' type='@'/>
</method>
<method selector='transportType'>
<retval declared_type='MKDirectionsTransportType' type='I' type64='Q'/>
</method>
</class>
<class name='MKRouteStep'>
<method selector='distance'>
<retval declared_type='CLLocationDistance' type='d'/>
</method>
<method selector='instructions'>
<retval declared_type='NSString * _Nonnull' type='@'/>
</method>
<method selector='notice'>
<retval declared_type='NSString * _Nullable' type='@'/>
</method>
<method selector='polyline'>
<retval declared_type='MKPolyline * _Nonnull' type='@'/>
</method>
<method selector='transportType'>
<retval declared_type='MKDirectionsTransportType' type='I' type64='Q'/>
</method>
</class>
<class name='MKScaleView'>
<method selector='legendAlignment'>
<retval declared_type='MKScaleViewAlignment' type='i' type64='q'/>
</method>
<method selector='mapView'>
<retval declared_type='MKMapView * _Nullable' type='@'/>
</method>
<method class_method='true' selector='scaleViewWithMapView:'>
<arg declared_type='MKMapView * _Nullable' index='0' name='mapView' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method selector='scaleVisibility'>
<retval declared_type='MKFeatureVisibility' type='i' type64='q'/>
</method>
<method selector='setLegendAlignment:'>
<arg declared_type='MKScaleViewAlignment' index='0' name='legendAlignment' type='i' type64='q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMapView:'>
<arg declared_type='MKMapView * _Nullable' index='0' name='mapView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setScaleVisibility:'>
<arg declared_type='MKFeatureVisibility' index='0' name='scaleVisibility' type='i' type64='q'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='MKShape'>
<method selector='setSubtitle:'>
<arg declared_type='NSString * _Nullable' index='0' name='subtitle' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg declared_type='NSString * _Nullable' index='0' name='title' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='subtitle'>
<retval declared_type='NSString * _Nullable' type='@'/>
</method>
<method selector='title'>
<retval declared_type='NSString * _Nullable' type='@'/>
</method>
</class>
<class name='MKTileOverlay'>
<method selector='URLForTilePath:'>
<arg declared_type='MKTileOverlayPath' index='0' name='path' type='{_MKTileOverlayPath=iiif}' type64='{_MKTileOverlayPath=qqqd}'/>
<retval declared_type='NSURL * _Nonnull' type='@'/>
</method>
<method selector='URLTemplate'>
<retval declared_type='NSString * _Nullable' type='@'/>
</method>
<method selector='canReplaceMapContent'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='initWithURLTemplate:'>
<arg declared_type='NSString * _Nullable' index='0' name='URLTemplate' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method selector='isGeometryFlipped'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='loadTileAtPath:result:'>
<arg declared_type='MKTileOverlayPath' index='0' name='path' type='{_MKTileOverlayPath=iiif}' type64='{_MKTileOverlayPath=qqqd}'/>
<arg declared_type='void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable)' function_pointer='true' index='1' name='result' type='@?'>
<arg declared_type='NSData * _Nullable' type='@'/>
<arg declared_type='NSError * _Nullable' type='@'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</method>
<method selector='maximumZ'>
<retval declared_type='NSInteger' type='i' type64='q'/>
</method>
<method selector='minimumZ'>
<retval declared_type='NSInteger' type='i' type64='q'/>
</method>
<method selector='setCanReplaceMapContent:'>
<arg declared_type='BOOL' index='0' name='canReplaceMapContent' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setGeometryFlipped:'>
<arg declared_type='BOOL' index='0' name='geometryFlipped' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaximumZ:'>
<arg declared_type='NSInteger' index='0' name='maximumZ' type='i' type64='q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMinimumZ:'>
<arg declared_type='NSInteger' index='0' name='minimumZ' type='i' type64='q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTileSize:'>
<arg declared_type='CGSize' index='0' name='tileSize' type='{CGSize=ff}' type64='{CGSize=dd}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='tileSize'>
<retval declared_type='CGSize' type='{CGSize=ff}' type64='{CGSize=dd}'/>
</method>
</class>
<class name='MKTileOverlayRenderer'>
<method selector='initWithTileOverlay:'>
<arg declared_type='MKTileOverlay * _Nonnull' index='0' name='overlay' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method selector='reloadData'>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='MKUserLocation'>
<method selector='heading'>
<retval declared_type='CLHeading * _Nullable' type='@'/>
</method>
<method selector='isUpdating'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='location'>
<retval declared_type='CLLocation * _Nullable' type='@'/>
</method>
<method selector='setSubtitle:'>
<arg declared_type='NSString * _Nullable' index='0' name='subtitle' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setTitle:'>
<arg declared_type='NSString * _Nullable' index='0' name='title' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='subtitle'>
<retval declared_type='NSString * _Nullable' type='@'/>
</method>
<method selector='title'>
<retval declared_type='NSString * _Nullable' type='@'/>
</method>
</class>
<class name='MKUserTrackingBarButtonItem'>
<method selector='initWithMapView:'>
<arg declared_type='MKMapView * _Nullable' index='0' name='mapView' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
<method selector='mapView'>
<retval declared_type='MKMapView * _Nullable' type='@'/>
</method>
<method selector='setMapView:'>
<arg declared_type='MKMapView * _Nullable' index='0' name='mapView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='MKUserTrackingButton'>
<method selector='mapView'>
<retval declared_type='MKMapView * _Nullable' type='@'/>
</method>
<method selector='setMapView:'>
<arg declared_type='MKMapView * _Nullable' index='0' name='mapView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='userTrackingButtonWithMapView:'>
<arg declared_type='MKMapView * _Nullable' index='0' name='mapView' type='@'/>
<retval declared_type='instancetype _Nonnull' type='@'/>
</method>
</class>
<class name='NSObject'>
<method selector='boundingMapRect'>
<retval declared_type='MKMapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
</method>
<method selector='canReplaceMapContent'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='completer:didFailWithError:'>
<arg declared_type='MKLocalSearchCompleter * _Nonnull' index='0' name='completer' type='@'/>
<arg declared_type='NSError * _Nonnull' index='1' name='error' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='completerDidUpdateResults:'>
<arg declared_type='MKLocalSearchCompleter * _Nonnull' index='0' name='completer' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='coordinate'>
<retval declared_type='CLLocationCoordinate2D' type='{CLLocationCoordinate2D=dd}'/>
</method>
<method selector='intersectsMapRect:'>
<arg declared_type='MKMapRect' index='0' name='mapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='mapView:annotationView:calloutAccessoryControlTapped:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='MKAnnotationView * _Nonnull' index='1' name='view' type='@'/>
<arg declared_type='UIControl * _Nonnull' index='2' name='control' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:annotationView:didChangeDragState:fromOldState:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='MKAnnotationView * _Nonnull' index='1' name='view' type='@'/>
<arg declared_type='MKAnnotationViewDragState' index='2' name='newState' type='I' type64='Q'/>
<arg declared_type='MKAnnotationViewDragState' index='3' name='oldState' type='I' type64='Q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:clusterAnnotationForMemberAnnotations:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='NSArray&gt; * _Nonnull' index='1' name='memberAnnotations' type='@'/>
<retval declared_type='MKClusterAnnotation * _Nonnull' type='@'/>
</method>
<method selector='mapView:didAddAnnotationViews:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='NSArray * _Nonnull' index='1' name='views' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:didAddOverlayRenderers:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='NSArray * _Nonnull' index='1' name='renderers' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:didAddOverlayViews:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='NSArray * _Nonnull' index='1' name='overlayViews' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:didChangeUserTrackingMode:animated:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='MKUserTrackingMode' index='1' name='mode' type='i' type64='q'/>
<arg declared_type='BOOL' index='2' name='animated' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:didDeselectAnnotationView:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='MKAnnotationView * _Nonnull' index='1' name='view' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:didFailToLocateUserWithError:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='NSError * _Nonnull' index='1' name='error' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:didSelectAnnotationView:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='MKAnnotationView * _Nonnull' index='1' name='view' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:didUpdateUserLocation:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='MKUserLocation * _Nonnull' index='1' name='userLocation' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:regionDidChangeAnimated:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='BOOL' index='1' name='animated' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:regionWillChangeAnimated:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='BOOL' index='1' name='animated' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:rendererForOverlay:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='id _Nonnull' index='1' name='overlay' type='@'/>
<retval declared_type='MKOverlayRenderer * _Nonnull' type='@'/>
</method>
<method selector='mapView:viewForAnnotation:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='id _Nonnull' index='1' name='annotation' type='@'/>
<retval declared_type='MKAnnotationView * _Nullable' type='@'/>
</method>
<method selector='mapView:viewForOverlay:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='id _Nonnull' index='1' name='overlay' type='@'/>
<retval declared_type='MKOverlayView * _Nonnull' type='@'/>
</method>
<method selector='mapViewDidChangeVisibleRegion:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapViewDidFailLoadingMap:withError:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='NSError * _Nonnull' index='1' name='error' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapViewDidFinishLoadingMap:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapViewDidFinishRenderingMap:fullyRendered:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='BOOL' index='1' name='fullyRendered' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapViewDidStopLocatingUser:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapViewWillStartLoadingMap:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapViewWillStartLocatingUser:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapViewWillStartRenderingMap:'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='reverseGeocoder:didFailWithError:'>
<arg declared_type='MKReverseGeocoder*' index='0' name='geocoder' type='@'/>
<arg declared_type='NSError*' index='1' name='error' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='reverseGeocoder:didFindPlacemark:'>
<arg declared_type='MKReverseGeocoder*' index='0' name='geocoder' type='@'/>
<arg declared_type='MKPlacemark*' index='1' name='placemark' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCoordinate:'>
<arg declared_type='CLLocationCoordinate2D' index='0' name='newCoordinate' type='{CLLocationCoordinate2D=dd}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='subtitle'>
<retval declared_type='NSString * _Nullable' type='@'/>
</method>
<method selector='title'>
<retval declared_type='NSString * _Nullable' type='@'/>
</method>
</class>
<class name='NSUserActivity'>
<method selector='mapItem'>
<retval declared_type='MKMapItem*' type='@'/>
</method>
<method selector='setMapItem:'>
<arg declared_type='MKMapItem*' index='0' name='mapItem' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='NSValue'>
<method selector='MKCoordinateSpanValue'>
<retval declared_type='MKCoordinateSpan' type='{_MKCoordinateSpan=dd}'/>
</method>
<method selector='MKCoordinateValue'>
<retval declared_type='CLLocationCoordinate2D' type='{CLLocationCoordinate2D=dd}'/>
</method>
<method class_method='true' selector='valueWithMKCoordinate:'>
<arg declared_type='CLLocationCoordinate2D' index='0' name='coordinate' type='{CLLocationCoordinate2D=dd}'/>
<retval declared_type='NSValue * _Nonnull' type='@'/>
</method>
<method class_method='true' selector='valueWithMKCoordinateSpan:'>
<arg declared_type='MKCoordinateSpan' index='0' name='span' type='{_MKCoordinateSpan=dd}'/>
<retval declared_type='NSValue * _Nonnull' type='@'/>
</method>
</class>
<informal_protocol name='MKAnnotation'>
<method selector='coordinate' type='{CLLocationCoordinate2D=dd}8@0:4' type64='{CLLocationCoordinate2D=dd}16@0:8'>
<retval declared_type='CLLocationCoordinate2D' type='{CLLocationCoordinate2D=dd}'/>
</method>
<method selector='setCoordinate:' type='v24@0:4{CLLocationCoordinate2D=dd}8' type64='v32@0:8{CLLocationCoordinate2D=dd}16'>
<arg declared_type='CLLocationCoordinate2D' index='0' name='newCoordinate' type='{CLLocationCoordinate2D=dd}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='subtitle' type='@8@0:4' type64='@16@0:8'>
<retval declared_type='NSString * _Nullable' type='@'/>
</method>
<method selector='title' type='@8@0:4' type64='@16@0:8'>
<retval declared_type='NSString * _Nullable' type='@'/>
</method>
</informal_protocol>
<informal_protocol name='MKLocalSearchCompleterDelegate'>
<method selector='completer:didFailWithError:' type='v16@0:4@8@12' type64='v32@0:8@16@24'>
<arg declared_type='MKLocalSearchCompleter * _Nonnull' index='0' name='completer' type='@'/>
<arg declared_type='NSError * _Nonnull' index='1' name='error' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='completerDidUpdateResults:' type='v12@0:4@8' type64='v24@0:8@16'>
<arg declared_type='MKLocalSearchCompleter * _Nonnull' index='0' name='completer' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='MKMapViewDelegate'>
<method selector='mapView:annotationView:calloutAccessoryControlTapped:' type='v20@0:4@8@12@16' type64='v40@0:8@16@24@32'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='MKAnnotationView * _Nonnull' index='1' name='view' type='@'/>
<arg declared_type='UIControl * _Nonnull' index='2' name='control' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:annotationView:didChangeDragState:fromOldState:' type='v24@0:4@8@12I16I20' type64='v48@0:8@16@24Q32Q40'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='MKAnnotationView * _Nonnull' index='1' name='view' type='@'/>
<arg declared_type='MKAnnotationViewDragState' index='2' name='newState' type='I' type64='Q'/>
<arg declared_type='MKAnnotationViewDragState' index='3' name='oldState' type='I' type64='Q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:clusterAnnotationForMemberAnnotations:' type='@16@0:4@8@12' type64='@32@0:8@16@24'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='NSArray&gt; * _Nonnull' index='1' name='memberAnnotations' type='@'/>
<retval declared_type='MKClusterAnnotation * _Nonnull' type='@'/>
</method>
<method selector='mapView:didAddAnnotationViews:' type='v16@0:4@8@12' type64='v32@0:8@16@24'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='NSArray * _Nonnull' index='1' name='views' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:didAddOverlayRenderers:' type='v16@0:4@8@12' type64='v32@0:8@16@24'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='NSArray * _Nonnull' index='1' name='renderers' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:didAddOverlayViews:' type='v16@0:4@8@12' type64='v32@0:8@16@24'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='NSArray * _Nonnull' index='1' name='overlayViews' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:didChangeUserTrackingMode:animated:' type='v20@0:4@8i12B16' type64='v36@0:8@16q24B32'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='MKUserTrackingMode' index='1' name='mode' type='i' type64='q'/>
<arg declared_type='BOOL' index='2' name='animated' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:didDeselectAnnotationView:' type='v16@0:4@8@12' type64='v32@0:8@16@24'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='MKAnnotationView * _Nonnull' index='1' name='view' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:didFailToLocateUserWithError:' type='v16@0:4@8@12' type64='v32@0:8@16@24'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='NSError * _Nonnull' index='1' name='error' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:didSelectAnnotationView:' type='v16@0:4@8@12' type64='v32@0:8@16@24'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='MKAnnotationView * _Nonnull' index='1' name='view' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:didUpdateUserLocation:' type='v16@0:4@8@12' type64='v32@0:8@16@24'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='MKUserLocation * _Nonnull' index='1' name='userLocation' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:regionDidChangeAnimated:' type='v16@0:4@8B12' type64='v28@0:8@16B24'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='BOOL' index='1' name='animated' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:regionWillChangeAnimated:' type='v16@0:4@8B12' type64='v28@0:8@16B24'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='BOOL' index='1' name='animated' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapView:rendererForOverlay:' type='@16@0:4@8@12' type64='@32@0:8@16@24'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='id _Nonnull' index='1' name='overlay' type='@'/>
<retval declared_type='MKOverlayRenderer * _Nonnull' type='@'/>
</method>
<method selector='mapView:viewForAnnotation:' type='@16@0:4@8@12' type64='@32@0:8@16@24'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='id _Nonnull' index='1' name='annotation' type='@'/>
<retval declared_type='MKAnnotationView * _Nullable' type='@'/>
</method>
<method selector='mapView:viewForOverlay:' type='@16@0:4@8@12' type64='@32@0:8@16@24'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='id _Nonnull' index='1' name='overlay' type='@'/>
<retval declared_type='MKOverlayView * _Nonnull' type='@'/>
</method>
<method selector='mapViewDidChangeVisibleRegion:' type='v12@0:4@8' type64='v24@0:8@16'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapViewDidFailLoadingMap:withError:' type='v16@0:4@8@12' type64='v32@0:8@16@24'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='NSError * _Nonnull' index='1' name='error' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapViewDidFinishLoadingMap:' type='v12@0:4@8' type64='v24@0:8@16'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapViewDidFinishRenderingMap:fullyRendered:' type='v16@0:4@8B12' type64='v28@0:8@16B24'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<arg declared_type='BOOL' index='1' name='fullyRendered' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapViewDidStopLocatingUser:' type='v12@0:4@8' type64='v24@0:8@16'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapViewWillStartLoadingMap:' type='v12@0:4@8' type64='v24@0:8@16'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapViewWillStartLocatingUser:' type='v12@0:4@8' type64='v24@0:8@16'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='mapViewWillStartRenderingMap:' type='v12@0:4@8' type64='v24@0:8@16'>
<arg declared_type='MKMapView * _Nonnull' index='0' name='mapView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='MKOverlay'>
<method selector='boundingMapRect' type='{?={?=dd}{?=dd}}8@0:4' type64='{?={?=dd}{?=dd}}16@0:8'>
<retval declared_type='MKMapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
</method>
<method selector='canReplaceMapContent' type='B8@0:4' type64='B16@0:8'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='coordinate' type='{CLLocationCoordinate2D=dd}8@0:4' type64='{CLLocationCoordinate2D=dd}16@0:8'>
<retval declared_type='CLLocationCoordinate2D' type='{CLLocationCoordinate2D=dd}'/>
</method>
<method selector='intersectsMapRect:' type='B40@0:4{?={?=dd}{?=dd}}8' type64='B48@0:8{?={?=dd}{?=dd}}16'>
<arg declared_type='MKMapRect' index='0' name='mapRect' type='{_MKMapRect={_MKMapPoint=dd}{_MKMapSize=dd}}'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='MKReverseGeocoderDelegate'>
<method selector='reverseGeocoder:didFailWithError:' type='v16@0:4@8@12' type64='v32@0:8@16@24'>
<arg declared_type='MKReverseGeocoder*' index='0' name='geocoder' type='@'/>
<arg declared_type='NSError*' index='1' name='error' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='reverseGeocoder:didFindPlacemark:' type='v16@0:4@8@12' type64='v32@0:8@16@24'>
<arg declared_type='MKReverseGeocoder*' index='0' name='geocoder' type='@'/>
<arg declared_type='MKPlacemark*' index='1' name='placemark' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
</signatures>
