<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='ALMXGlyphEntry' type64='{ALMXGlyphEntry=&quot;GlyphIndexOffset&quot;s&quot;HorizontalAdvance&quot;s&quot;XOffsetToHOrigin&quot;s&quot;VerticalAdvance&quot;s&quot;YOffsetToVOrigin&quot;s}'>
<field declared_type64='SInt16' name='GlyphIndexOffset' type64='s'/>
<field declared_type64='SInt16' name='HorizontalAdvance' type64='s'/>
<field declared_type64='SInt16' name='XOffsetToHOrigin' type64='s'/>
<field declared_type64='SInt16' name='VerticalAdvance' type64='s'/>
<field declared_type64='SInt16' name='YOffsetToVOrigin' type64='s'/>
</struct>
<struct name='ALMXHeader' type64='{ALMXHeader=&quot;Version&quot;i&quot;Flags&quot;S&quot;NMasters&quot;S&quot;FirstGlyph&quot;S&quot;LastGlyph&quot;S&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}'>
<field declared_type64='Fixed' name='Version' type64='i'/>
<field declared_type64='UInt16' name='Flags' type64='S'/>
<field declared_type64='UInt16' name='NMasters' type64='S'/>
<field declared_type64='UInt16' name='FirstGlyph' type64='S'/>
<field declared_type64='UInt16' name='LastGlyph' type64='S'/>
<field declared_type64='SFNTLookupTable' name='lookup' type64='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'/>
</struct>
<struct name='AnchorPoint' type64='{AnchorPoint=&quot;x&quot;s&quot;y&quot;s}'>
<field declared_type64='SInt16' name='x' type64='s'/>
<field declared_type64='SInt16' name='y' type64='s'/>
</struct>
<struct name='AnchorPointTable' type64='{AnchorPointTable=&quot;nPoints&quot;I&quot;points&quot;[1{AnchorPoint=&quot;x&quot;s&quot;y&quot;s}]}'>
<field declared_type64='UInt32' name='nPoints' type64='I'/>
<field declared_type64='AnchorPoint*' name='points' type64='[1{AnchorPoint=&quot;x&quot;s&quot;y&quot;s}]'/>
</struct>
<struct name='AnkrTable' type64='{AnkrTable=&quot;version&quot;S&quot;flags&quot;S&quot;lookupTableOffset&quot;I&quot;anchorPointTableOffset&quot;I}'>
<field declared_type64='UInt16' name='version' type64='S'/>
<field declared_type64='UInt16' name='flags' type64='S'/>
<field declared_type64='UInt32' name='lookupTableOffset' type64='I'/>
<field declared_type64='UInt32' name='anchorPointTableOffset' type64='I'/>
</struct>
<struct name='BslnFormat0Part' type64='{BslnFormat0Part=&quot;deltas&quot;[32s]}'>
<field declared_type64='SInt16*' name='deltas' type64='[32s]'/>
</struct>
<struct name='BslnFormat1Part' type64='{BslnFormat1Part=&quot;deltas&quot;[32s]&quot;mappingData&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}'>
<field declared_type64='SInt16*' name='deltas' type64='[32s]'/>
<field declared_type64='SFNTLookupTable' name='mappingData' type64='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'/>
</struct>
<struct name='BslnFormat2Part' type64='{BslnFormat2Part=&quot;stdGlyph&quot;S&quot;ctlPoints&quot;[32s]}'>
<field declared_type64='UInt16' name='stdGlyph' type64='S'/>
<field declared_type64='SInt16*' name='ctlPoints' type64='[32s]'/>
</struct>
<struct name='BslnFormat3Part' type64='{BslnFormat3Part=&quot;stdGlyph&quot;S&quot;ctlPoints&quot;[32s]&quot;mappingData&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}'>
<field declared_type64='UInt16' name='stdGlyph' type64='S'/>
<field declared_type64='SInt16*' name='ctlPoints' type64='[32s]'/>
<field declared_type64='SFNTLookupTable' name='mappingData' type64='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'/>
</struct>
<struct name='BslnTable' type64='{BslnTable=&quot;version&quot;i&quot;format&quot;S&quot;defaultBaseline&quot;S&quot;parts&quot;(BslnFormatUnion=&quot;fmt0Part&quot;{BslnFormat0Part=&quot;deltas&quot;[32s]}&quot;fmt1Part&quot;{BslnFormat1Part=&quot;deltas&quot;[32s]&quot;mappingData&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}&quot;fmt2Part&quot;{BslnFormat2Part=&quot;stdGlyph&quot;S&quot;ctlPoints&quot;[32s]}&quot;fmt3Part&quot;{BslnFormat3Part=&quot;stdGlyph&quot;S&quot;ctlPoints&quot;[32s]&quot;mappingData&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}})}'>
<field declared_type64='Fixed' name='version' type64='i'/>
<field declared_type64='BslnTableFormat' name='format' type64='S'/>
<field declared_type64='UInt16' name='defaultBaseline' type64='S'/>
<field declared_type64='BslnFormatUnion' name='parts' type64='(BslnFormatUnion=&quot;fmt0Part&quot;{BslnFormat0Part=&quot;deltas&quot;[32s]}&quot;fmt1Part&quot;{BslnFormat1Part=&quot;deltas&quot;[32s]&quot;mappingData&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}&quot;fmt2Part&quot;{BslnFormat2Part=&quot;stdGlyph&quot;S&quot;ctlPoints&quot;[32s]}&quot;fmt3Part&quot;{BslnFormat3Part=&quot;stdGlyph&quot;S&quot;ctlPoints&quot;[32s]&quot;mappingData&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}})'/>
</struct>
<struct name='CTParagraphStyleSetting' type64='{CTParagraphStyleSetting=&quot;spec&quot;I&quot;valueSize&quot;Q&quot;value&quot;^v}'>
<field declared_type64='CTParagraphStyleSpecifier' name='spec' type64='I'/>
<field declared_type64='size_t' name='valueSize' type64='Q'/>
<field const='true' declared_type64='void * _Nonnull' name='value' type64='^v'/>
</struct>
<struct name='CTRunDelegateCallbacks' type64='{_CTRunDelegateCallbacks=&quot;version&quot;q&quot;dealloc&quot;^?&quot;getAscent&quot;^?&quot;getDescent&quot;^?&quot;getWidth&quot;^?}'>
<field declared_type64='CFIndex' name='version' type64='q'/>
<field declared_type64='CTRunDelegateDeallocateCallback _Nonnull' function_pointer='true' name='dealloc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CTRunDelegateGetAscentCallback _Nonnull' function_pointer='true' name='getAscent' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='CGFloat' type64='d'/>
</field>
<field declared_type64='CTRunDelegateGetDescentCallback _Nonnull' function_pointer='true' name='getDescent' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='CGFloat' type64='d'/>
</field>
<field declared_type64='CTRunDelegateGetWidthCallback _Nonnull' function_pointer='true' name='getWidth' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='CGFloat' type64='d'/>
</field>
</struct>
<struct name='FontVariation' type64='{FontVariation=&quot;name&quot;I&quot;value&quot;i}'>
<field declared_type64='FourCharCode' name='name' type64='I'/>
<field declared_type64='Fixed' name='value' type64='i'/>
</struct>
<struct name='JustDirectionTable' type64='{JustDirectionTable=&quot;justClass&quot;S&quot;widthDeltaClusters&quot;S&quot;postcomp&quot;S&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}'>
<field declared_type64='UInt16' name='justClass' type64='S'/>
<field declared_type64='UInt16' name='widthDeltaClusters' type64='S'/>
<field declared_type64='UInt16' name='postcomp' type64='S'/>
<field declared_type64='SFNTLookupTable' name='lookup' type64='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'/>
</struct>
<struct name='JustPCAction' type64='{JustPCAction=&quot;actionCount&quot;I&quot;actions&quot;[1{JustPCActionSubrecord=&quot;theClass&quot;S&quot;theType&quot;S&quot;length&quot;I&quot;data&quot;I}]}'>
<field declared_type64='UInt32' name='actionCount' type64='I'/>
<field declared_type64='JustPCActionSubrecord*' name='actions' type64='[1{JustPCActionSubrecord=&quot;theClass&quot;S&quot;theType&quot;S&quot;length&quot;I&quot;data&quot;I}]'/>
</struct>
<struct name='JustPCActionSubrecord' type64='{JustPCActionSubrecord=&quot;theClass&quot;S&quot;theType&quot;S&quot;length&quot;I&quot;data&quot;I}'>
<field declared_type64='UInt16' name='theClass' type64='S'/>
<field declared_type64='JustPCActionType' name='theType' type64='S'/>
<field declared_type64='UInt32' name='length' type64='I'/>
<field declared_type64='UInt32' name='data' type64='I'/>
</struct>
<struct name='JustPCConditionalAddAction' type64='{JustPCConditionalAddAction=&quot;substThreshold&quot;i&quot;addGlyph&quot;S&quot;substGlyph&quot;S}'>
<field declared_type64='Fixed' name='substThreshold' type64='i'/>
<field declared_type64='UInt16' name='addGlyph' type64='S'/>
<field declared_type64='UInt16' name='substGlyph' type64='S'/>
</struct>
<struct name='JustPCDecompositionAction' type64='{JustPCDecompositionAction=&quot;lowerLimit&quot;i&quot;upperLimit&quot;i&quot;order&quot;S&quot;count&quot;S&quot;glyphs&quot;[1S]}'>
<field declared_type64='Fixed' name='lowerLimit' type64='i'/>
<field declared_type64='Fixed' name='upperLimit' type64='i'/>
<field declared_type64='UInt16' name='order' type64='S'/>
<field declared_type64='UInt16' name='count' type64='S'/>
<field declared_type64='UInt16*' name='glyphs' type64='[1S]'/>
</struct>
<struct name='JustPCDuctilityAction' type64='{JustPCDuctilityAction=&quot;ductilityAxis&quot;I&quot;minimumLimit&quot;i&quot;noStretchValue&quot;i&quot;maximumLimit&quot;i}'>
<field declared_type64='UInt32' name='ductilityAxis' type64='I'/>
<field declared_type64='Fixed' name='minimumLimit' type64='i'/>
<field declared_type64='Fixed' name='noStretchValue' type64='i'/>
<field declared_type64='Fixed' name='maximumLimit' type64='i'/>
</struct>
<struct name='JustPCGlyphRepeatAddAction' type64='{JustPCGlyphRepeatAddAction=&quot;flags&quot;S&quot;glyph&quot;S}'>
<field declared_type64='UInt16' name='flags' type64='S'/>
<field declared_type64='UInt16' name='glyph' type64='S'/>
</struct>
<struct name='JustPostcompTable' type64='{JustPostcompTable=&quot;lookupTable&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}'>
<field declared_type64='SFNTLookupTable' name='lookupTable' type64='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'/>
</struct>
<struct name='JustTable' type64='{JustTable=&quot;version&quot;i&quot;format&quot;S&quot;horizHeaderOffset&quot;S&quot;vertHeaderOffset&quot;S}'>
<field declared_type64='Fixed' name='version' type64='i'/>
<field declared_type64='UInt16' name='format' type64='S'/>
<field declared_type64='UInt16' name='horizHeaderOffset' type64='S'/>
<field declared_type64='UInt16' name='vertHeaderOffset' type64='S'/>
</struct>
<struct name='JustWidthDeltaEntry' type64='{JustWidthDeltaEntry=&quot;justClass&quot;I&quot;beforeGrowLimit&quot;i&quot;beforeShrinkLimit&quot;i&quot;afterGrowLimit&quot;i&quot;afterShrinkLimit&quot;i&quot;growFlags&quot;S&quot;shrinkFlags&quot;S}'>
<field declared_type64='UInt32' name='justClass' type64='I'/>
<field declared_type64='Fixed' name='beforeGrowLimit' type64='i'/>
<field declared_type64='Fixed' name='beforeShrinkLimit' type64='i'/>
<field declared_type64='Fixed' name='afterGrowLimit' type64='i'/>
<field declared_type64='Fixed' name='afterShrinkLimit' type64='i'/>
<field declared_type64='JustificationFlags' name='growFlags' type64='S'/>
<field declared_type64='JustificationFlags' name='shrinkFlags' type64='S'/>
</struct>
<struct name='JustWidthDeltaGroup' type64='{JustWidthDeltaGroup=&quot;count&quot;I&quot;entries&quot;[1{JustWidthDeltaEntry=&quot;justClass&quot;I&quot;beforeGrowLimit&quot;i&quot;beforeShrinkLimit&quot;i&quot;afterGrowLimit&quot;i&quot;afterShrinkLimit&quot;i&quot;growFlags&quot;S&quot;shrinkFlags&quot;S}]}'>
<field declared_type64='UInt32' name='count' type64='I'/>
<field declared_type64='JustWidthDeltaEntry*' name='entries' type64='[1{JustWidthDeltaEntry=&quot;justClass&quot;I&quot;beforeGrowLimit&quot;i&quot;beforeShrinkLimit&quot;i&quot;afterGrowLimit&quot;i&quot;afterShrinkLimit&quot;i&quot;growFlags&quot;S&quot;shrinkFlags&quot;S}]'/>
</struct>
<struct name='KernIndexArrayHeader' type64='{KernIndexArrayHeader=&quot;glyphCount&quot;S&quot;kernValueCount&quot;C&quot;leftClassCount&quot;C&quot;rightClassCount&quot;C&quot;flags&quot;C&quot;kernValue&quot;[1s]&quot;leftClass&quot;[1C]&quot;rightClass&quot;[1C]&quot;kernIndex&quot;[1C]}'>
<field declared_type64='UInt16' name='glyphCount' type64='S'/>
<field declared_type64='UInt8' name='kernValueCount' type64='C'/>
<field declared_type64='UInt8' name='leftClassCount' type64='C'/>
<field declared_type64='UInt8' name='rightClassCount' type64='C'/>
<field declared_type64='UInt8' name='flags' type64='C'/>
<field declared_type64='SInt16*' name='kernValue' type64='[1s]'/>
<field declared_type64='UInt8*' name='leftClass' type64='[1C]'/>
<field declared_type64='UInt8*' name='rightClass' type64='[1C]'/>
<field declared_type64='UInt8*' name='kernIndex' type64='[1C]'/>
</struct>
<struct name='KernKerningPair' type64='{KernKerningPair=&quot;left&quot;S&quot;right&quot;S}'>
<field declared_type64='UInt16' name='left' type64='S'/>
<field declared_type64='UInt16' name='right' type64='S'/>
</struct>
<struct name='KernOffsetTable' type64='{KernOffsetTable=&quot;firstGlyph&quot;S&quot;nGlyphs&quot;S&quot;offsetTable&quot;[1S]}'>
<field declared_type64='UInt16' name='firstGlyph' type64='S'/>
<field declared_type64='UInt16' name='nGlyphs' type64='S'/>
<field declared_type64='KernArrayOffset*' name='offsetTable' type64='[1S]'/>
</struct>
<struct name='KernOrderedListEntry' type64='{KernOrderedListEntry=&quot;pair&quot;{KernKerningPair=&quot;left&quot;S&quot;right&quot;S}&quot;value&quot;s}'>
<field declared_type64='KernKerningPair' name='pair' type64='{KernKerningPair=&quot;left&quot;S&quot;right&quot;S}'/>
<field declared_type64='KernKerningValue' name='value' type64='s'/>
</struct>
<struct name='KernOrderedListHeader' type64='{KernOrderedListHeader=&quot;nPairs&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S&quot;table&quot;[1S]}'>
<field declared_type64='UInt16' name='nPairs' type64='S'/>
<field declared_type64='UInt16' name='searchRange' type64='S'/>
<field declared_type64='UInt16' name='entrySelector' type64='S'/>
<field declared_type64='UInt16' name='rangeShift' type64='S'/>
<field declared_type64='UInt16*' name='table' type64='[1S]'/>
</struct>
<struct name='KernSimpleArrayHeader' type64='{KernSimpleArrayHeader=&quot;rowWidth&quot;S&quot;leftOffsetTable&quot;S&quot;rightOffsetTable&quot;S&quot;theArray&quot;S&quot;firstTable&quot;[1S]}'>
<field declared_type64='UInt16' name='rowWidth' type64='S'/>
<field declared_type64='UInt16' name='leftOffsetTable' type64='S'/>
<field declared_type64='UInt16' name='rightOffsetTable' type64='S'/>
<field declared_type64='KernArrayOffset' name='theArray' type64='S'/>
<field declared_type64='UInt16*' name='firstTable' type64='[1S]'/>
</struct>
<struct name='KernStateEntry' type64='{KernStateEntry=&quot;newState&quot;S&quot;flags&quot;S}'>
<field declared_type64='UInt16' name='newState' type64='S'/>
<field declared_type64='UInt16' name='flags' type64='S'/>
</struct>
<struct name='KernStateHeader' type64='{KernStateHeader=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;valueTable&quot;S&quot;firstTable&quot;[1C]}'>
<field declared_type64='STHeader' name='header' type64='{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}'/>
<field declared_type64='UInt16' name='valueTable' type64='S'/>
<field declared_type64='UInt8*' name='firstTable' type64='[1C]'/>
</struct>
<struct name='KernSubtableHeader' type64='{KernSubtableHeader=&quot;length&quot;i&quot;stInfo&quot;S&quot;tupleIndex&quot;s&quot;fsHeader&quot;(KernFormatSpecificHeader=&quot;orderedList&quot;{KernOrderedListHeader=&quot;nPairs&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S&quot;table&quot;[1S]}&quot;stateTable&quot;{KernStateHeader=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;valueTable&quot;S&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KernSimpleArrayHeader=&quot;rowWidth&quot;S&quot;leftOffsetTable&quot;S&quot;rightOffsetTable&quot;S&quot;theArray&quot;S&quot;firstTable&quot;[1S]}&quot;indexArray&quot;{KernIndexArrayHeader=&quot;glyphCount&quot;S&quot;kernValueCount&quot;C&quot;leftClassCount&quot;C&quot;rightClassCount&quot;C&quot;flags&quot;C&quot;kernValue&quot;[1s]&quot;leftClass&quot;[1C]&quot;rightClass&quot;[1C]&quot;kernIndex&quot;[1C]})}'>
<field declared_type64='SInt32' name='length' type64='i'/>
<field declared_type64='KernSubtableInfo' name='stInfo' type64='S'/>
<field declared_type64='SInt16' name='tupleIndex' type64='s'/>
<field declared_type64='KernFormatSpecificHeader' name='fsHeader' type64='(KernFormatSpecificHeader=&quot;orderedList&quot;{KernOrderedListHeader=&quot;nPairs&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S&quot;table&quot;[1S]}&quot;stateTable&quot;{KernStateHeader=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;valueTable&quot;S&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KernSimpleArrayHeader=&quot;rowWidth&quot;S&quot;leftOffsetTable&quot;S&quot;rightOffsetTable&quot;S&quot;theArray&quot;S&quot;firstTable&quot;[1S]}&quot;indexArray&quot;{KernIndexArrayHeader=&quot;glyphCount&quot;S&quot;kernValueCount&quot;C&quot;leftClassCount&quot;C&quot;rightClassCount&quot;C&quot;flags&quot;C&quot;kernValue&quot;[1s]&quot;leftClass&quot;[1C]&quot;rightClass&quot;[1C]&quot;kernIndex&quot;[1C]})'/>
</struct>
<struct name='KernTableHeader' type64='{KernTableHeader=&quot;version&quot;i&quot;nTables&quot;i&quot;firstSubtable&quot;[1S]}'>
<field declared_type64='Fixed' name='version' type64='i'/>
<field declared_type64='SInt32' name='nTables' type64='i'/>
<field declared_type64='UInt16*' name='firstSubtable' type64='[1S]'/>
</struct>
<struct name='KernVersion0Header' type64='{KernVersion0Header=&quot;version&quot;S&quot;nTables&quot;S&quot;firstSubtable&quot;[1S]}'>
<field declared_type64='UInt16' name='version' type64='S'/>
<field declared_type64='UInt16' name='nTables' type64='S'/>
<field declared_type64='UInt16*' name='firstSubtable' type64='[1S]'/>
</struct>
<struct name='KernVersion0SubtableHeader' type64='{KernVersion0SubtableHeader=&quot;version&quot;S&quot;length&quot;S&quot;stInfo&quot;S&quot;fsHeader&quot;(KernFormatSpecificHeader=&quot;orderedList&quot;{KernOrderedListHeader=&quot;nPairs&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S&quot;table&quot;[1S]}&quot;stateTable&quot;{KernStateHeader=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;valueTable&quot;S&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KernSimpleArrayHeader=&quot;rowWidth&quot;S&quot;leftOffsetTable&quot;S&quot;rightOffsetTable&quot;S&quot;theArray&quot;S&quot;firstTable&quot;[1S]}&quot;indexArray&quot;{KernIndexArrayHeader=&quot;glyphCount&quot;S&quot;kernValueCount&quot;C&quot;leftClassCount&quot;C&quot;rightClassCount&quot;C&quot;flags&quot;C&quot;kernValue&quot;[1s]&quot;leftClass&quot;[1C]&quot;rightClass&quot;[1C]&quot;kernIndex&quot;[1C]})}'>
<field declared_type64='UInt16' name='version' type64='S'/>
<field declared_type64='UInt16' name='length' type64='S'/>
<field declared_type64='KernSubtableInfo' name='stInfo' type64='S'/>
<field declared_type64='KernFormatSpecificHeader' name='fsHeader' type64='(KernFormatSpecificHeader=&quot;orderedList&quot;{KernOrderedListHeader=&quot;nPairs&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S&quot;table&quot;[1S]}&quot;stateTable&quot;{KernStateHeader=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;valueTable&quot;S&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KernSimpleArrayHeader=&quot;rowWidth&quot;S&quot;leftOffsetTable&quot;S&quot;rightOffsetTable&quot;S&quot;theArray&quot;S&quot;firstTable&quot;[1S]}&quot;indexArray&quot;{KernIndexArrayHeader=&quot;glyphCount&quot;S&quot;kernValueCount&quot;C&quot;leftClassCount&quot;C&quot;rightClassCount&quot;C&quot;flags&quot;C&quot;kernValue&quot;[1s]&quot;leftClass&quot;[1C]&quot;rightClass&quot;[1C]&quot;kernIndex&quot;[1C]})'/>
</struct>
<struct name='KerxAnchorPointAction' type64='{KerxAnchorPointAction=&quot;markAnchorPoint&quot;S&quot;currAnchorPoint&quot;S}'>
<field declared_type64='UInt16' name='markAnchorPoint' type64='S'/>
<field declared_type64='UInt16' name='currAnchorPoint' type64='S'/>
</struct>
<struct name='KerxControlPointAction' type64='{KerxControlPointAction=&quot;markControlPoint&quot;S&quot;currControlPoint&quot;S}'>
<field declared_type64='UInt16' name='markControlPoint' type64='S'/>
<field declared_type64='UInt16' name='currControlPoint' type64='S'/>
</struct>
<struct name='KerxControlPointEntry' type64='{KerxControlPointEntry=&quot;newState&quot;S&quot;flags&quot;S&quot;actionIndex&quot;S}'>
<field declared_type64='UInt16' name='newState' type64='S'/>
<field declared_type64='UInt16' name='flags' type64='S'/>
<field declared_type64='UInt16' name='actionIndex' type64='S'/>
</struct>
<struct name='KerxControlPointHeader' type64='{KerxControlPointHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;flags&quot;I&quot;firstTable&quot;[1C]}'>
<field declared_type64='STXHeader' name='header' type64='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'/>
<field declared_type64='UInt32' name='flags' type64='I'/>
<field declared_type64='UInt8*' name='firstTable' type64='[1C]'/>
</struct>
<struct name='KerxCoordinateAction' type64='{KerxCoordinateAction=&quot;markX&quot;S&quot;markY&quot;S&quot;currX&quot;S&quot;currY&quot;S}'>
<field declared_type64='UInt16' name='markX' type64='S'/>
<field declared_type64='UInt16' name='markY' type64='S'/>
<field declared_type64='UInt16' name='currX' type64='S'/>
<field declared_type64='UInt16' name='currY' type64='S'/>
</struct>
<struct name='KerxIndexArrayHeader' type64='{KerxIndexArrayHeader=&quot;flags&quot;I&quot;rowCount&quot;S&quot;columnCount&quot;S&quot;rowIndexTableOffset&quot;I&quot;columnIndexTableOffset&quot;I&quot;kerningArrayOffset&quot;I&quot;kerningVectorOffset&quot;I}'>
<field declared_type64='UInt32' name='flags' type64='I'/>
<field declared_type64='UInt16' name='rowCount' type64='S'/>
<field declared_type64='UInt16' name='columnCount' type64='S'/>
<field declared_type64='UInt32' name='rowIndexTableOffset' type64='I'/>
<field declared_type64='UInt32' name='columnIndexTableOffset' type64='I'/>
<field declared_type64='UInt32' name='kerningArrayOffset' type64='I'/>
<field declared_type64='UInt32' name='kerningVectorOffset' type64='I'/>
</struct>
<struct name='KerxKerningPair' type64='{KerxKerningPair=&quot;left&quot;S&quot;right&quot;S}'>
<field declared_type64='UInt16' name='left' type64='S'/>
<field declared_type64='UInt16' name='right' type64='S'/>
</struct>
<struct name='KerxOrderedListEntry' type64='{KerxOrderedListEntry=&quot;pair&quot;{KerxKerningPair=&quot;left&quot;S&quot;right&quot;S}&quot;value&quot;s}'>
<field declared_type64='KerxKerningPair' name='pair' type64='{KerxKerningPair=&quot;left&quot;S&quot;right&quot;S}'/>
<field declared_type64='KernKerningValue' name='value' type64='s'/>
</struct>
<struct name='KerxOrderedListHeader' type64='{KerxOrderedListHeader=&quot;nPairs&quot;I&quot;searchRange&quot;I&quot;entrySelector&quot;I&quot;rangeShift&quot;I&quot;table&quot;[1I]}'>
<field declared_type64='UInt32' name='nPairs' type64='I'/>
<field declared_type64='UInt32' name='searchRange' type64='I'/>
<field declared_type64='UInt32' name='entrySelector' type64='I'/>
<field declared_type64='UInt32' name='rangeShift' type64='I'/>
<field declared_type64='UInt32*' name='table' type64='[1I]'/>
</struct>
<struct name='KerxSimpleArrayHeader' type64='{KerxSimpleArrayHeader=&quot;rowWidth&quot;I&quot;leftOffsetTable&quot;I&quot;rightOffsetTable&quot;I&quot;theArray&quot;I&quot;firstTable&quot;[1I]}'>
<field declared_type64='UInt32' name='rowWidth' type64='I'/>
<field declared_type64='UInt32' name='leftOffsetTable' type64='I'/>
<field declared_type64='UInt32' name='rightOffsetTable' type64='I'/>
<field declared_type64='KerxArrayOffset' name='theArray' type64='I'/>
<field declared_type64='UInt32*' name='firstTable' type64='[1I]'/>
</struct>
<struct name='KerxStateEntry' type64='{KerxStateEntry=&quot;newState&quot;S&quot;flags&quot;S&quot;valueIndex&quot;S}'>
<field declared_type64='UInt16' name='newState' type64='S'/>
<field declared_type64='UInt16' name='flags' type64='S'/>
<field declared_type64='UInt16' name='valueIndex' type64='S'/>
</struct>
<struct name='KerxStateHeader' type64='{KerxStateHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;valueTable&quot;I&quot;firstTable&quot;[1C]}'>
<field declared_type64='STXHeader' name='header' type64='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'/>
<field declared_type64='UInt32' name='valueTable' type64='I'/>
<field declared_type64='UInt8*' name='firstTable' type64='[1C]'/>
</struct>
<struct name='KerxSubtableHeader' type64='{KerxSubtableHeader=&quot;length&quot;I&quot;stInfo&quot;I&quot;tupleCount&quot;I&quot;fsHeader&quot;(KerxFormatSpecificHeader=&quot;orderedList&quot;{KerxOrderedListHeader=&quot;nPairs&quot;I&quot;searchRange&quot;I&quot;entrySelector&quot;I&quot;rangeShift&quot;I&quot;table&quot;[1I]}&quot;stateTable&quot;{KerxStateHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;valueTable&quot;I&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KerxSimpleArrayHeader=&quot;rowWidth&quot;I&quot;leftOffsetTable&quot;I&quot;rightOffsetTable&quot;I&quot;theArray&quot;I&quot;firstTable&quot;[1I]}&quot;indexArray&quot;{KerxIndexArrayHeader=&quot;flags&quot;I&quot;rowCount&quot;S&quot;columnCount&quot;S&quot;rowIndexTableOffset&quot;I&quot;columnIndexTableOffset&quot;I&quot;kerningArrayOffset&quot;I&quot;kerningVectorOffset&quot;I}&quot;controlPoint&quot;{KerxControlPointHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;flags&quot;I&quot;firstTable&quot;[1C]})}'>
<field declared_type64='UInt32' name='length' type64='I'/>
<field declared_type64='KerxSubtableCoverage' name='stInfo' type64='I'/>
<field declared_type64='UInt32' name='tupleCount' type64='I'/>
<field declared_type64='KerxFormatSpecificHeader' name='fsHeader' type64='(KerxFormatSpecificHeader=&quot;orderedList&quot;{KerxOrderedListHeader=&quot;nPairs&quot;I&quot;searchRange&quot;I&quot;entrySelector&quot;I&quot;rangeShift&quot;I&quot;table&quot;[1I]}&quot;stateTable&quot;{KerxStateHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;valueTable&quot;I&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KerxSimpleArrayHeader=&quot;rowWidth&quot;I&quot;leftOffsetTable&quot;I&quot;rightOffsetTable&quot;I&quot;theArray&quot;I&quot;firstTable&quot;[1I]}&quot;indexArray&quot;{KerxIndexArrayHeader=&quot;flags&quot;I&quot;rowCount&quot;S&quot;columnCount&quot;S&quot;rowIndexTableOffset&quot;I&quot;columnIndexTableOffset&quot;I&quot;kerningArrayOffset&quot;I&quot;kerningVectorOffset&quot;I}&quot;controlPoint&quot;{KerxControlPointHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;flags&quot;I&quot;firstTable&quot;[1C]})'/>
</struct>
<struct name='KerxTableHeader' type64='{KerxTableHeader=&quot;version&quot;i&quot;nTables&quot;I&quot;firstSubtable&quot;[1I]}'>
<field declared_type64='Fixed' name='version' type64='i'/>
<field declared_type64='UInt32' name='nTables' type64='I'/>
<field declared_type64='UInt32*' name='firstSubtable' type64='[1I]'/>
</struct>
<struct name='LcarCaretClassEntry' type64='{LcarCaretClassEntry=&quot;count&quot;S&quot;partials&quot;[1S]}'>
<field declared_type64='UInt16' name='count' type64='S'/>
<field declared_type64='UInt16*' name='partials' type64='[1S]'/>
</struct>
<struct name='LcarCaretTable' type64='{LcarCaretTable=&quot;version&quot;i&quot;format&quot;S&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}'>
<field declared_type64='Fixed' name='version' type64='i'/>
<field declared_type64='UInt16' name='format' type64='S'/>
<field declared_type64='SFNTLookupTable' name='lookup' type64='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'/>
</struct>
<struct name='LtagStringRange' type64='{LtagStringRange=&quot;offset&quot;S&quot;length&quot;S}'>
<field declared_type64='UInt16' name='offset' type64='S'/>
<field declared_type64='UInt16' name='length' type64='S'/>
</struct>
<struct name='LtagTable' type64='{LtagTable=&quot;version&quot;I&quot;flags&quot;I&quot;numTags&quot;I&quot;tagRange&quot;[1{LtagStringRange=&quot;offset&quot;S&quot;length&quot;S}]}'>
<field declared_type64='UInt32' name='version' type64='I'/>
<field declared_type64='UInt32' name='flags' type64='I'/>
<field declared_type64='UInt32' name='numTags' type64='I'/>
<field declared_type64='LtagStringRange*' name='tagRange' type64='[1{LtagStringRange=&quot;offset&quot;S&quot;length&quot;S}]'/>
</struct>
<struct name='MortChain' type64='{MortChain=&quot;defaultFlags&quot;I&quot;length&quot;I&quot;nFeatures&quot;S&quot;nSubtables&quot;S&quot;featureEntries&quot;[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]}'>
<field declared_type64='MortSubtableMaskFlags' name='defaultFlags' type64='I'/>
<field declared_type64='UInt32' name='length' type64='I'/>
<field declared_type64='UInt16' name='nFeatures' type64='S'/>
<field declared_type64='UInt16' name='nSubtables' type64='S'/>
<field declared_type64='MortFeatureEntry*' name='featureEntries' type64='[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]'/>
</struct>
<struct name='MortContextualSubtable' type64='{MortContextualSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;substitutionTableOffset&quot;S}'>
<field declared_type64='STHeader' name='header' type64='{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}'/>
<field declared_type64='UInt16' name='substitutionTableOffset' type64='S'/>
</struct>
<struct name='MortFeatureEntry' type64='{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}'>
<field declared_type64='UInt16' name='featureType' type64='S'/>
<field declared_type64='UInt16' name='featureSelector' type64='S'/>
<field declared_type64='MortSubtableMaskFlags' name='enableFlags' type64='I'/>
<field declared_type64='MortSubtableMaskFlags' name='disableFlags' type64='I'/>
</struct>
<struct name='MortInsertionSubtable' type64='{MortInsertionSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}}'>
<field declared_type64='STHeader' name='header' type64='{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}'/>
</struct>
<struct name='MortLigatureSubtable' type64='{MortLigatureSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;ligatureActionTableOffset&quot;S&quot;componentTableOffset&quot;S&quot;ligatureTableOffset&quot;S}'>
<field declared_type64='STHeader' name='header' type64='{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}'/>
<field declared_type64='UInt16' name='ligatureActionTableOffset' type64='S'/>
<field declared_type64='UInt16' name='componentTableOffset' type64='S'/>
<field declared_type64='UInt16' name='ligatureTableOffset' type64='S'/>
</struct>
<struct name='MortRearrangementSubtable' type64='{MortRearrangementSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}}'>
<field declared_type64='STHeader' name='header' type64='{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}'/>
</struct>
<struct name='MortSubtable' type64='{MortSubtable=&quot;length&quot;S&quot;coverage&quot;S&quot;flags&quot;I&quot;u&quot;(MortSpecificSubtable=&quot;rearrangement&quot;{MortRearrangementSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}}&quot;contextual&quot;{MortContextualSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;substitutionTableOffset&quot;S}&quot;ligature&quot;{MortLigatureSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;ligatureActionTableOffset&quot;S&quot;componentTableOffset&quot;S&quot;ligatureTableOffset&quot;S}&quot;swash&quot;{MortSwashSubtable=&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}&quot;insertion&quot;{MortInsertionSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}})}'>
<field declared_type64='UInt16' name='length' type64='S'/>
<field declared_type64='UInt16' name='coverage' type64='S'/>
<field declared_type64='MortSubtableMaskFlags' name='flags' type64='I'/>
<field declared_type64='MortSpecificSubtable' name='u' type64='(MortSpecificSubtable=&quot;rearrangement&quot;{MortRearrangementSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}}&quot;contextual&quot;{MortContextualSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;substitutionTableOffset&quot;S}&quot;ligature&quot;{MortLigatureSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;ligatureActionTableOffset&quot;S&quot;componentTableOffset&quot;S&quot;ligatureTableOffset&quot;S}&quot;swash&quot;{MortSwashSubtable=&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}&quot;insertion&quot;{MortInsertionSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}})'/>
</struct>
<struct name='MortSwashSubtable' type64='{MortSwashSubtable=&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}'>
<field declared_type64='SFNTLookupTable' name='lookup' type64='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'/>
</struct>
<struct name='MortTable' type64='{MortTable=&quot;version&quot;i&quot;nChains&quot;I&quot;chains&quot;[1{MortChain=&quot;defaultFlags&quot;I&quot;length&quot;I&quot;nFeatures&quot;S&quot;nSubtables&quot;S&quot;featureEntries&quot;[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]}]}'>
<field declared_type64='Fixed' name='version' type64='i'/>
<field declared_type64='UInt32' name='nChains' type64='I'/>
<field declared_type64='MortChain*' name='chains' type64='[1{MortChain=&quot;defaultFlags&quot;I&quot;length&quot;I&quot;nFeatures&quot;S&quot;nSubtables&quot;S&quot;featureEntries&quot;[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]}]'/>
</struct>
<struct name='MorxChain' type64='{MorxChain=&quot;defaultFlags&quot;I&quot;length&quot;I&quot;nFeatures&quot;I&quot;nSubtables&quot;I&quot;featureEntries&quot;[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]}'>
<field declared_type64='MortSubtableMaskFlags' name='defaultFlags' type64='I'/>
<field declared_type64='UInt32' name='length' type64='I'/>
<field declared_type64='UInt32' name='nFeatures' type64='I'/>
<field declared_type64='UInt32' name='nSubtables' type64='I'/>
<field declared_type64='MortFeatureEntry*' name='featureEntries' type64='[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]'/>
</struct>
<struct name='MorxContextualSubtable' type64='{MorxContextualSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;substitutionTableOffset&quot;I}'>
<field declared_type64='STXHeader' name='header' type64='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'/>
<field declared_type64='UInt32' name='substitutionTableOffset' type64='I'/>
</struct>
<struct name='MorxInsertionSubtable' type64='{MorxInsertionSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;insertionGlyphTableOffset&quot;I}'>
<field declared_type64='STXHeader' name='header' type64='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'/>
<field declared_type64='UInt32' name='insertionGlyphTableOffset' type64='I'/>
</struct>
<struct name='MorxLigatureSubtable' type64='{MorxLigatureSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;ligatureActionTableOffset&quot;I&quot;componentTableOffset&quot;I&quot;ligatureTableOffset&quot;I}'>
<field declared_type64='STXHeader' name='header' type64='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'/>
<field declared_type64='UInt32' name='ligatureActionTableOffset' type64='I'/>
<field declared_type64='UInt32' name='componentTableOffset' type64='I'/>
<field declared_type64='UInt32' name='ligatureTableOffset' type64='I'/>
</struct>
<struct name='MorxRearrangementSubtable' type64='{MorxRearrangementSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}}'>
<field declared_type64='STXHeader' name='header' type64='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'/>
</struct>
<struct name='MorxSubtable' type64='{MorxSubtable=&quot;length&quot;I&quot;coverage&quot;I&quot;flags&quot;I&quot;u&quot;(MorxSpecificSubtable=&quot;rearrangement&quot;{MorxRearrangementSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}}&quot;contextual&quot;{MorxContextualSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;substitutionTableOffset&quot;I}&quot;ligature&quot;{MorxLigatureSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;ligatureActionTableOffset&quot;I&quot;componentTableOffset&quot;I&quot;ligatureTableOffset&quot;I}&quot;swash&quot;{MortSwashSubtable=&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}&quot;insertion&quot;{MorxInsertionSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;insertionGlyphTableOffset&quot;I})}'>
<field declared_type64='UInt32' name='length' type64='I'/>
<field declared_type64='UInt32' name='coverage' type64='I'/>
<field declared_type64='MortSubtableMaskFlags' name='flags' type64='I'/>
<field declared_type64='MorxSpecificSubtable' name='u' type64='(MorxSpecificSubtable=&quot;rearrangement&quot;{MorxRearrangementSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}}&quot;contextual&quot;{MorxContextualSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;substitutionTableOffset&quot;I}&quot;ligature&quot;{MorxLigatureSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;ligatureActionTableOffset&quot;I&quot;componentTableOffset&quot;I&quot;ligatureTableOffset&quot;I}&quot;swash&quot;{MortSwashSubtable=&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}&quot;insertion&quot;{MorxInsertionSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;insertionGlyphTableOffset&quot;I})'/>
</struct>
<struct name='MorxTable' type64='{MorxTable=&quot;version&quot;i&quot;nChains&quot;I&quot;chains&quot;[1{MorxChain=&quot;defaultFlags&quot;I&quot;length&quot;I&quot;nFeatures&quot;I&quot;nSubtables&quot;I&quot;featureEntries&quot;[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]}]}'>
<field declared_type64='Fixed' name='version' type64='i'/>
<field declared_type64='UInt32' name='nChains' type64='I'/>
<field declared_type64='MorxChain*' name='chains' type64='[1{MorxChain=&quot;defaultFlags&quot;I&quot;length&quot;I&quot;nFeatures&quot;I&quot;nSubtables&quot;I&quot;featureEntries&quot;[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]}]'/>
</struct>
<struct name='OpbdSideValues' type64='{OpbdSideValues=&quot;leftSideShift&quot;s&quot;topSideShift&quot;s&quot;rightSideShift&quot;s&quot;bottomSideShift&quot;s}'>
<field declared_type64='SInt16' name='leftSideShift' type64='s'/>
<field declared_type64='SInt16' name='topSideShift' type64='s'/>
<field declared_type64='SInt16' name='rightSideShift' type64='s'/>
<field declared_type64='SInt16' name='bottomSideShift' type64='s'/>
</struct>
<struct name='OpbdTable' type64='{OpbdTable=&quot;version&quot;i&quot;format&quot;S&quot;lookupTable&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}'>
<field declared_type64='Fixed' name='version' type64='i'/>
<field declared_type64='OpbdTableFormat' name='format' type64='S'/>
<field declared_type64='SFNTLookupTable' name='lookupTable' type64='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'/>
</struct>
<struct name='PropLookupSegment' type64='{PropLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;S}'>
<field declared_type64='UInt16' name='lastGlyph' type64='S'/>
<field declared_type64='UInt16' name='firstGlyph' type64='S'/>
<field declared_type64='UInt16' name='value' type64='S'/>
</struct>
<struct name='PropLookupSingle' type64='{PropLookupSingle=&quot;glyph&quot;S&quot;props&quot;S}'>
<field declared_type64='UInt16' name='glyph' type64='S'/>
<field declared_type64='PropCharProperties' name='props' type64='S'/>
</struct>
<struct name='PropTable' type64='{PropTable=&quot;version&quot;i&quot;format&quot;S&quot;defaultProps&quot;S&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}'>
<field declared_type64='Fixed' name='version' type64='i'/>
<field declared_type64='UInt16' name='format' type64='S'/>
<field declared_type64='PropCharProperties' name='defaultProps' type64='S'/>
<field declared_type64='SFNTLookupTable' name='lookup' type64='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'/>
</struct>
<struct name='ROTAGlyphEntry' type64='{ROTAGlyphEntry=&quot;GlyphIndexOffset&quot;s&quot;HBaselineOffset&quot;s&quot;VBaselineOffset&quot;s}'>
<field declared_type64='SInt16' name='GlyphIndexOffset' type64='s'/>
<field declared_type64='SInt16' name='HBaselineOffset' type64='s'/>
<field declared_type64='SInt16' name='VBaselineOffset' type64='s'/>
</struct>
<struct name='ROTAHeader' type64='{ROTAHeader=&quot;Version&quot;i&quot;Flags&quot;S&quot;NMasters&quot;S&quot;FirstGlyph&quot;S&quot;LastGlyph&quot;S&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}}'>
<field declared_type64='Fixed' name='Version' type64='i'/>
<field declared_type64='UInt16' name='Flags' type64='S'/>
<field declared_type64='UInt16' name='NMasters' type64='S'/>
<field declared_type64='UInt16' name='FirstGlyph' type64='S'/>
<field declared_type64='UInt16' name='LastGlyph' type64='S'/>
<field declared_type64='SFNTLookupTable' name='lookup' type64='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'/>
</struct>
<struct name='SFNTLookupArrayHeader' type64='{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}'>
<field declared_type64='SFNTLookupValue*' name='lookupValues' type64='[1S]'/>
</struct>
<struct name='SFNTLookupBinarySearchHeader' type64='{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}'>
<field declared_type64='UInt16' name='unitSize' type64='S'/>
<field declared_type64='UInt16' name='nUnits' type64='S'/>
<field declared_type64='UInt16' name='searchRange' type64='S'/>
<field declared_type64='UInt16' name='entrySelector' type64='S'/>
<field declared_type64='UInt16' name='rangeShift' type64='S'/>
</struct>
<struct name='SFNTLookupSegment' type64='{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}'>
<field declared_type64='UInt16' name='lastGlyph' type64='S'/>
<field declared_type64='UInt16' name='firstGlyph' type64='S'/>
<field declared_type64='UInt16*' name='value' type64='[1S]'/>
</struct>
<struct name='SFNTLookupSegmentHeader' type64='{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}'>
<field declared_type64='SFNTLookupBinarySearchHeader' name='binSearch' type64='{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}'/>
<field declared_type64='SFNTLookupSegment*' name='segments' type64='[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]'/>
</struct>
<struct name='SFNTLookupSingle' type64='{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}'>
<field declared_type64='UInt16' name='glyph' type64='S'/>
<field declared_type64='UInt16*' name='value' type64='[1S]'/>
</struct>
<struct name='SFNTLookupSingleHeader' type64='{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}'>
<field declared_type64='SFNTLookupBinarySearchHeader' name='binSearch' type64='{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}'/>
<field declared_type64='SFNTLookupSingle*' name='entries' type64='[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]'/>
</struct>
<struct name='SFNTLookupTable' type64='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'>
<field declared_type64='SFNTLookupTableFormat' name='format' type64='S'/>
<field declared_type64='SFNTLookupFormatSpecificHeader' name='fsHeader' type64='(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})'/>
</struct>
<struct name='SFNTLookupTrimmedArrayHeader' type64='{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}'>
<field declared_type64='UInt16' name='firstGlyph' type64='S'/>
<field declared_type64='UInt16' name='count' type64='S'/>
<field declared_type64='SFNTLookupValue*' name='valueArray' type64='[1S]'/>
</struct>
<struct name='SFNTLookupVectorHeader' type64='{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]}'>
<field declared_type64='UInt16' name='valueSize' type64='S'/>
<field declared_type64='UInt16' name='firstGlyph' type64='S'/>
<field declared_type64='UInt16' name='count' type64='S'/>
<field declared_type64='UInt8*' name='values' type64='[1C]'/>
</struct>
<struct name='STClassTable' type64='{STClassTable=&quot;firstGlyph&quot;S&quot;nGlyphs&quot;S&quot;classes&quot;[1C]}'>
<field declared_type64='UInt16' name='firstGlyph' type64='S'/>
<field declared_type64='UInt16' name='nGlyphs' type64='S'/>
<field declared_type64='STClass*' name='classes' type64='[1C]'/>
</struct>
<struct name='STEntryOne' type64='{STEntryOne=&quot;newState&quot;S&quot;flags&quot;S&quot;offset1&quot;S}'>
<field declared_type64='UInt16' name='newState' type64='S'/>
<field declared_type64='UInt16' name='flags' type64='S'/>
<field declared_type64='UInt16' name='offset1' type64='S'/>
</struct>
<struct name='STEntryTwo' type64='{STEntryTwo=&quot;newState&quot;S&quot;flags&quot;S&quot;offset1&quot;S&quot;offset2&quot;S}'>
<field declared_type64='UInt16' name='newState' type64='S'/>
<field declared_type64='UInt16' name='flags' type64='S'/>
<field declared_type64='UInt16' name='offset1' type64='S'/>
<field declared_type64='UInt16' name='offset2' type64='S'/>
</struct>
<struct name='STEntryZero' type64='{STEntryZero=&quot;newState&quot;S&quot;flags&quot;S}'>
<field declared_type64='UInt16' name='newState' type64='S'/>
<field declared_type64='UInt16' name='flags' type64='S'/>
</struct>
<struct name='STHeader' type64='{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}'>
<field declared_type64='UInt8' name='filler' type64='C'/>
<field declared_type64='STClass' name='nClasses' type64='C'/>
<field declared_type64='UInt16' name='classTableOffset' type64='S'/>
<field declared_type64='UInt16' name='stateArrayOffset' type64='S'/>
<field declared_type64='UInt16' name='entryTableOffset' type64='S'/>
</struct>
<struct name='STXClassTable' type64='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})}'>
<field declared_type64='SFNTLookupTableFormat' name='format' type64='S'/>
<field declared_type64='SFNTLookupFormatSpecificHeader' name='fsHeader' type64='(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}&quot;vector&quot;{SFNTLookupVectorHeader=&quot;valueSize&quot;S&quot;firstGlyph&quot;S&quot;count&quot;S&quot;values&quot;[1C]})'/>
</struct>
<struct name='STXEntryOne' type64='{STXEntryOne=&quot;newState&quot;S&quot;flags&quot;S&quot;index1&quot;S}'>
<field declared_type64='STXStateIndex' name='newState' type64='S'/>
<field declared_type64='UInt16' name='flags' type64='S'/>
<field declared_type64='UInt16' name='index1' type64='S'/>
</struct>
<struct name='STXEntryTwo' type64='{STXEntryTwo=&quot;newState&quot;S&quot;flags&quot;S&quot;index1&quot;S&quot;index2&quot;S}'>
<field declared_type64='STXStateIndex' name='newState' type64='S'/>
<field declared_type64='UInt16' name='flags' type64='S'/>
<field declared_type64='UInt16' name='index1' type64='S'/>
<field declared_type64='UInt16' name='index2' type64='S'/>
</struct>
<struct name='STXEntryZero' type64='{STXEntryZero=&quot;newState&quot;S&quot;flags&quot;S}'>
<field declared_type64='STXStateIndex' name='newState' type64='S'/>
<field declared_type64='UInt16' name='flags' type64='S'/>
</struct>
<struct name='STXHeader' type64='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'>
<field declared_type64='UInt32' name='nClasses' type64='I'/>
<field declared_type64='UInt32' name='classTableOffset' type64='I'/>
<field declared_type64='UInt32' name='stateArrayOffset' type64='I'/>
<field declared_type64='UInt32' name='entryTableOffset' type64='I'/>
</struct>
<struct name='TrakTable' type64='{TrakTable=&quot;version&quot;i&quot;format&quot;S&quot;horizOffset&quot;S&quot;vertOffset&quot;S}'>
<field declared_type64='Fixed' name='version' type64='i'/>
<field declared_type64='UInt16' name='format' type64='S'/>
<field declared_type64='UInt16' name='horizOffset' type64='S'/>
<field declared_type64='UInt16' name='vertOffset' type64='S'/>
</struct>
<struct name='TrakTableData' type64='{TrakTableData=&quot;nTracks&quot;S&quot;nSizes&quot;S&quot;sizeTableOffset&quot;I&quot;trakTable&quot;[1{TrakTableEntry=&quot;track&quot;i&quot;nameTableIndex&quot;S&quot;sizesOffset&quot;S}]}'>
<field declared_type64='UInt16' name='nTracks' type64='S'/>
<field declared_type64='UInt16' name='nSizes' type64='S'/>
<field declared_type64='UInt32' name='sizeTableOffset' type64='I'/>
<field declared_type64='TrakTableEntry*' name='trakTable' type64='[1{TrakTableEntry=&quot;track&quot;i&quot;nameTableIndex&quot;S&quot;sizesOffset&quot;S}]'/>
</struct>
<struct name='TrakTableEntry' type64='{TrakTableEntry=&quot;track&quot;i&quot;nameTableIndex&quot;S&quot;sizesOffset&quot;S}'>
<field declared_type64='Fixed' name='track' type64='i'/>
<field declared_type64='UInt16' name='nameTableIndex' type64='S'/>
<field declared_type64='UInt16' name='sizesOffset' type64='S'/>
</struct>
<struct name='sfntCMapEncoding' type64='{sfntCMapEncoding=&quot;platformID&quot;S&quot;scriptID&quot;S&quot;offset&quot;I}'>
<field declared_type64='UInt16' name='platformID' type64='S'/>
<field declared_type64='UInt16' name='scriptID' type64='S'/>
<field declared_type64='UInt32' name='offset' type64='I'/>
</struct>
<struct name='sfntCMapExtendedSubHeader' type64='{sfntCMapExtendedSubHeader=&quot;format&quot;S&quot;reserved&quot;S&quot;length&quot;I&quot;language&quot;I}'>
<field declared_type64='UInt16' name='format' type64='S'/>
<field declared_type64='UInt16' name='reserved' type64='S'/>
<field declared_type64='UInt32' name='length' type64='I'/>
<field declared_type64='UInt32' name='language' type64='I'/>
</struct>
<struct name='sfntCMapHeader' type64='{sfntCMapHeader=&quot;version&quot;S&quot;numTables&quot;S&quot;encoding&quot;[1{sfntCMapEncoding=&quot;platformID&quot;S&quot;scriptID&quot;S&quot;offset&quot;I}]}'>
<field declared_type64='UInt16' name='version' type64='S'/>
<field declared_type64='UInt16' name='numTables' type64='S'/>
<field declared_type64='sfntCMapEncoding*' name='encoding' type64='[1{sfntCMapEncoding=&quot;platformID&quot;S&quot;scriptID&quot;S&quot;offset&quot;I}]'/>
</struct>
<struct name='sfntCMapSubHeader' type64='{sfntCMapSubHeader=&quot;format&quot;S&quot;length&quot;S&quot;languageID&quot;S}'>
<field declared_type64='UInt16' name='format' type64='S'/>
<field declared_type64='UInt16' name='length' type64='S'/>
<field declared_type64='UInt16' name='languageID' type64='S'/>
</struct>
<struct name='sfntDescriptorHeader' type64='{sfntDescriptorHeader=&quot;version&quot;i&quot;descriptorCount&quot;i&quot;descriptor&quot;[1{sfntFontDescriptor=&quot;name&quot;I&quot;value&quot;i}]}'>
<field declared_type64='Fixed' name='version' type64='i'/>
<field declared_type64='SInt32' name='descriptorCount' type64='i'/>
<field declared_type64='sfntFontDescriptor*' name='descriptor' type64='[1{sfntFontDescriptor=&quot;name&quot;I&quot;value&quot;i}]'/>
</struct>
<struct name='sfntDirectory' type64='{sfntDirectory=&quot;format&quot;I&quot;numOffsets&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S&quot;table&quot;[1{sfntDirectoryEntry=&quot;tableTag&quot;I&quot;checkSum&quot;I&quot;offset&quot;I&quot;length&quot;I}]}'>
<field declared_type64='FourCharCode' name='format' type64='I'/>
<field declared_type64='UInt16' name='numOffsets' type64='S'/>
<field declared_type64='UInt16' name='searchRange' type64='S'/>
<field declared_type64='UInt16' name='entrySelector' type64='S'/>
<field declared_type64='UInt16' name='rangeShift' type64='S'/>
<field declared_type64='sfntDirectoryEntry*' name='table' type64='[1{sfntDirectoryEntry=&quot;tableTag&quot;I&quot;checkSum&quot;I&quot;offset&quot;I&quot;length&quot;I}]'/>
</struct>
<struct name='sfntDirectoryEntry' type64='{sfntDirectoryEntry=&quot;tableTag&quot;I&quot;checkSum&quot;I&quot;offset&quot;I&quot;length&quot;I}'>
<field declared_type64='FourCharCode' name='tableTag' type64='I'/>
<field declared_type64='UInt32' name='checkSum' type64='I'/>
<field declared_type64='UInt32' name='offset' type64='I'/>
<field declared_type64='UInt32' name='length' type64='I'/>
</struct>
<struct name='sfntFeatureHeader' type64='{sfntFeatureHeader=&quot;version&quot;i&quot;featureNameCount&quot;S&quot;featureSetCount&quot;S&quot;reserved&quot;i&quot;names&quot;[1{sfntFeatureName=&quot;featureType&quot;S&quot;settingCount&quot;S&quot;offsetToSettings&quot;i&quot;featureFlags&quot;S&quot;nameID&quot;s}]&quot;settings&quot;[1{sfntFontFeatureSetting=&quot;setting&quot;S&quot;nameID&quot;s}]&quot;runs&quot;[1{sfntFontRunFeature=&quot;featureType&quot;S&quot;setting&quot;S}]}'>
<field declared_type64='SInt32' name='version' type64='i'/>
<field declared_type64='UInt16' name='featureNameCount' type64='S'/>
<field declared_type64='UInt16' name='featureSetCount' type64='S'/>
<field declared_type64='SInt32' name='reserved' type64='i'/>
<field declared_type64='sfntFeatureName*' name='names' type64='[1{sfntFeatureName=&quot;featureType&quot;S&quot;settingCount&quot;S&quot;offsetToSettings&quot;i&quot;featureFlags&quot;S&quot;nameID&quot;s}]'/>
<field declared_type64='sfntFontFeatureSetting*' name='settings' type64='[1{sfntFontFeatureSetting=&quot;setting&quot;S&quot;nameID&quot;s}]'/>
<field declared_type64='sfntFontRunFeature*' name='runs' type64='[1{sfntFontRunFeature=&quot;featureType&quot;S&quot;setting&quot;S}]'/>
</struct>
<struct name='sfntFeatureName' type64='{sfntFeatureName=&quot;featureType&quot;S&quot;settingCount&quot;S&quot;offsetToSettings&quot;i&quot;featureFlags&quot;S&quot;nameID&quot;s}'>
<field declared_type64='UInt16' name='featureType' type64='S'/>
<field declared_type64='UInt16' name='settingCount' type64='S'/>
<field declared_type64='SInt32' name='offsetToSettings' type64='i'/>
<field declared_type64='UInt16' name='featureFlags' type64='S'/>
<field declared_type64='SInt16' name='nameID' type64='s'/>
</struct>
<struct name='sfntFontDescriptor' type64='{sfntFontDescriptor=&quot;name&quot;I&quot;value&quot;i}'>
<field declared_type64='FourCharCode' name='name' type64='I'/>
<field declared_type64='Fixed' name='value' type64='i'/>
</struct>
<struct name='sfntFontFeatureSetting' type64='{sfntFontFeatureSetting=&quot;setting&quot;S&quot;nameID&quot;s}'>
<field declared_type64='UInt16' name='setting' type64='S'/>
<field declared_type64='SInt16' name='nameID' type64='s'/>
</struct>
<struct name='sfntFontRunFeature' type64='{sfntFontRunFeature=&quot;featureType&quot;S&quot;setting&quot;S}'>
<field declared_type64='UInt16' name='featureType' type64='S'/>
<field declared_type64='UInt16' name='setting' type64='S'/>
</struct>
<struct name='sfntInstance' type64='{sfntInstance=&quot;nameID&quot;s&quot;flags&quot;s&quot;coord&quot;[1i]}'>
<field declared_type64='SInt16' name='nameID' type64='s'/>
<field declared_type64='SInt16' name='flags' type64='s'/>
<field declared_type64='Fixed*' name='coord' type64='[1i]'/>
</struct>
<struct name='sfntNameHeader' type64='{sfntNameHeader=&quot;format&quot;S&quot;count&quot;S&quot;stringOffset&quot;S&quot;rec&quot;[1{sfntNameRecord=&quot;platformID&quot;S&quot;scriptID&quot;S&quot;languageID&quot;S&quot;nameID&quot;S&quot;length&quot;S&quot;offset&quot;S}]}'>
<field declared_type64='UInt16' name='format' type64='S'/>
<field declared_type64='UInt16' name='count' type64='S'/>
<field declared_type64='UInt16' name='stringOffset' type64='S'/>
<field declared_type64='sfntNameRecord*' name='rec' type64='[1{sfntNameRecord=&quot;platformID&quot;S&quot;scriptID&quot;S&quot;languageID&quot;S&quot;nameID&quot;S&quot;length&quot;S&quot;offset&quot;S}]'/>
</struct>
<struct name='sfntNameRecord' type64='{sfntNameRecord=&quot;platformID&quot;S&quot;scriptID&quot;S&quot;languageID&quot;S&quot;nameID&quot;S&quot;length&quot;S&quot;offset&quot;S}'>
<field declared_type64='UInt16' name='platformID' type64='S'/>
<field declared_type64='UInt16' name='scriptID' type64='S'/>
<field declared_type64='UInt16' name='languageID' type64='S'/>
<field declared_type64='UInt16' name='nameID' type64='S'/>
<field declared_type64='UInt16' name='length' type64='S'/>
<field declared_type64='UInt16' name='offset' type64='S'/>
</struct>
<struct name='sfntVariationAxis' type64='{sfntVariationAxis=&quot;axisTag&quot;I&quot;minValue&quot;i&quot;defaultValue&quot;i&quot;maxValue&quot;i&quot;flags&quot;s&quot;nameID&quot;s}'>
<field declared_type64='FourCharCode' name='axisTag' type64='I'/>
<field declared_type64='Fixed' name='minValue' type64='i'/>
<field declared_type64='Fixed' name='defaultValue' type64='i'/>
<field declared_type64='Fixed' name='maxValue' type64='i'/>
<field declared_type64='SInt16' name='flags' type64='s'/>
<field declared_type64='SInt16' name='nameID' type64='s'/>
</struct>
<struct name='sfntVariationHeader' type64='{sfntVariationHeader=&quot;version&quot;i&quot;offsetToData&quot;S&quot;countSizePairs&quot;S&quot;axisCount&quot;S&quot;axisSize&quot;S&quot;instanceCount&quot;S&quot;instanceSize&quot;S&quot;axis&quot;[1{sfntVariationAxis=&quot;axisTag&quot;I&quot;minValue&quot;i&quot;defaultValue&quot;i&quot;maxValue&quot;i&quot;flags&quot;s&quot;nameID&quot;s}]&quot;instance&quot;[1{sfntInstance=&quot;nameID&quot;s&quot;flags&quot;s&quot;coord&quot;[1i]}]}'>
<field declared_type64='Fixed' name='version' type64='i'/>
<field declared_type64='UInt16' name='offsetToData' type64='S'/>
<field declared_type64='UInt16' name='countSizePairs' type64='S'/>
<field declared_type64='UInt16' name='axisCount' type64='S'/>
<field declared_type64='UInt16' name='axisSize' type64='S'/>
<field declared_type64='UInt16' name='instanceCount' type64='S'/>
<field declared_type64='UInt16' name='instanceSize' type64='S'/>
<field declared_type64='sfntVariationAxis*' name='axis' type64='[1{sfntVariationAxis=&quot;axisTag&quot;I&quot;minValue&quot;i&quot;defaultValue&quot;i&quot;maxValue&quot;i&quot;flags&quot;s&quot;nameID&quot;s}]'/>
<field declared_type64='sfntInstance*' name='instance' type64='[1{sfntInstance=&quot;nameID&quot;s&quot;flags&quot;s&quot;coord&quot;[1i]}]'/>
</struct>
<cftype gettypeid_func='CTFontCollectionGetTypeID' name='CTFontCollectionRef' type64='^{__CTFontCollection=}'/>
<cftype gettypeid_func='CTFontDescriptorGetTypeID' name='CTFontDescriptorRef' type64='^{__CTFontDescriptor=}'/>
<cftype gettypeid_func='CTFontGetTypeID' name='CTFontRef' type64='^{__CTFont=}'/>
<cftype gettypeid_func='CTFrameGetTypeID' name='CTFrameRef' type64='^{__CTFrame=}'/>
<cftype gettypeid_func='CTFramesetterGetTypeID' name='CTFramesetterRef' type64='^{__CTFramesetter=}'/>
<cftype gettypeid_func='CTGlyphInfoGetTypeID' name='CTGlyphInfoRef' type64='^{__CTGlyphInfo=}'/>
<cftype gettypeid_func='CTLineGetTypeID' name='CTLineRef' type64='^{__CTLine=}'/>
<cftype gettypeid_func='CTFontCollectionGetTypeID' name='CTMutableFontCollectionRef' type64='^{__CTFontCollection=}'/>
<cftype gettypeid_func='CTParagraphStyleGetTypeID' name='CTParagraphStyleRef' type64='^{__CTParagraphStyle=}'/>
<cftype gettypeid_func='CTRubyAnnotationGetTypeID' name='CTRubyAnnotationRef' type64='^{__CTRubyAnnotation=}'/>
<cftype gettypeid_func='CTRunDelegateGetTypeID' name='CTRunDelegateRef' type64='^{__CTRunDelegate=}'/>
<cftype gettypeid_func='CTRunGetTypeID' name='CTRunRef' type64='^{__CTRun=}'/>
<cftype gettypeid_func='CTTextTabGetTypeID' name='CTTextTabRef' type64='^{__CTTextTab=}'/>
<cftype gettypeid_func='CTTypesetterGetTypeID' name='CTTypesetterRef' type64='^{__CTTypesetter=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTBackgroundColorAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTBaselineClassAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTBaselineClassHanging' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTBaselineClassIdeographicCentered' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTBaselineClassIdeographicHigh' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTBaselineClassIdeographicLow' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTBaselineClassMath' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTBaselineClassRoman' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTBaselineInfoAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTBaselineOffsetAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTBaselineOriginalFont' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTBaselineReferenceFont' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTBaselineReferenceInfoAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTCharacterShapeAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontBaselineAdjustAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontCascadeListAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontCharacterSetAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontCollectionRemoveDuplicatesOption' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontCopyrightNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontDescriptionNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontDescriptorMatchingCurrentAssetSize' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontDescriptorMatchingDescriptors' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontDescriptorMatchingError' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontDescriptorMatchingPercentage' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontDescriptorMatchingResult' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontDescriptorMatchingSourceDescriptor' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontDescriptorMatchingTotalAssetSize' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontDescriptorMatchingTotalDownloadedSize' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontDesignerNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontDesignerURLNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontDisplayNameAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontDownloadableAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontDownloadedAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontEnabledAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontFamilyNameAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontFamilyNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontFeatureSelectorDefaultKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontFeatureSelectorIdentifierKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontFeatureSelectorNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontFeatureSelectorSettingKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontFeatureSettingsAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontFeatureTypeExclusiveKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontFeatureTypeIdentifierKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontFeatureTypeNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontFeatureTypeSelectorsKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontFeaturesAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontFixedAdvanceAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontFormatAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontFullNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontLanguagesAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontLicenseNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontLicenseURLNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontMacintoshEncodingsAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontManagerErrorDomain' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontManagerErrorFontURLsKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontManagerRegisteredFontsChangedNotification' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontManufacturerNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontMatrixAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontNameAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontOpenTypeFeatureTag' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontOpenTypeFeatureValue' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontOrientationAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontPostScriptCIDNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontPostScriptNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontPriorityAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontRegistrationScopeAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontSampleTextNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontSizeAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontSlantTrait' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontStyleNameAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontStyleNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontSubFamilyNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontSymbolicTrait' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontTrademarkNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontTraitsAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontURLAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontUniqueNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontVariationAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontVariationAxisDefaultValueKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontVariationAxisHiddenKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontVariationAxisIdentifierKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontVariationAxisMaximumValueKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontVariationAxisMinimumValueKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontVariationAxisNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontVendorURLNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontVersionNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontWeightTrait' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFontWidthTrait' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTForegroundColorAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTForegroundColorFromContextAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFrameClippingPathsAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFramePathClippingPathAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFramePathFillRuleAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFramePathWidthAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTFrameProgressionAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTGlyphInfoAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTHorizontalInVerticalFormsAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTKernAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTLanguageAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTLigatureAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTParagraphStyleAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTRubyAnnotationAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTRubyAnnotationScaleToFitAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTRubyAnnotationSizeFactorAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTRunDelegateAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTStrokeColorAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTStrokeWidthAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTSuperscriptAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTTabColumnTerminatorsAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTTypesetterOptionAllowUnboundedLayout' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTTypesetterOptionDisableBidiProcessing' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTTypesetterOptionForcedEmbeddingLevel' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTUnderlineColorAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTUnderlineStyleAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTVerticalFormsAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCTWritingDirectionAttributeName' type64='^{__CFString=}'/>
<enum name='ATSFONTREF_DEFINED' value64='1'/>
<enum name='cmapFontTableTag' value64='1668112752'/>
<enum name='descriptorFontTableTag' value64='1717859171'/>
<enum name='featureFontTableTag' value64='1717920116'/>
<enum name='kANKRCurrentVersion' value64='0'/>
<enum name='kAbbrevSquaredLigaturesOffSelector' value64='15'/>
<enum name='kAbbrevSquaredLigaturesOnSelector' value64='14'/>
<enum name='kAllCapsSelector' value64='1'/>
<enum name='kAllLowerCaseSelector' value64='2'/>
<enum name='kAllTypeFeaturesOffSelector' value64='1'/>
<enum name='kAllTypeFeaturesOnSelector' value64='0'/>
<enum name='kAllTypographicFeaturesType' value64='0'/>
<enum name='kAltHalfWidthTextSelector' value64='6'/>
<enum name='kAltProportionalTextSelector' value64='5'/>
<enum name='kAlternateHorizKanaOffSelector' value64='1'/>
<enum name='kAlternateHorizKanaOnSelector' value64='0'/>
<enum name='kAlternateKanaType' value64='34'/>
<enum name='kAlternateVertKanaOffSelector' value64='3'/>
<enum name='kAlternateVertKanaOnSelector' value64='2'/>
<enum name='kAnnotationType' value64='24'/>
<enum name='kAsteriskToMultiplyOffSelector' value64='3'/>
<enum name='kAsteriskToMultiplyOnSelector' value64='2'/>
<enum name='kBSLNControlPointFormatNoMap' value64='2'/>
<enum name='kBSLNControlPointFormatWithMap' value64='3'/>
<enum name='kBSLNCurrentVersion' value64='65536'/>
<enum name='kBSLNDistanceFormatNoMap' value64='0'/>
<enum name='kBSLNDistanceFormatWithMap' value64='1'/>
<enum name='kBSLNHangingBaseline' value64='3'/>
<enum name='kBSLNIdeographicCenterBaseline' value64='1'/>
<enum name='kBSLNIdeographicHighBaseline' value64='5'/>
<enum name='kBSLNIdeographicLowBaseline' value64='2'/>
<enum name='kBSLNLastBaseline' value64='31'/>
<enum name='kBSLNMathBaseline' value64='4'/>
<enum name='kBSLNNoBaseline' value64='255'/>
<enum name='kBSLNNoBaselineOverride' value64='255'/>
<enum name='kBSLNNumBaselineClasses' value64='32'/>
<enum name='kBSLNRomanBaseline' value64='0'/>
<enum name='kBSLNTag' value64='1651731566'/>
<enum name='kBoxAnnotationSelector' value64='1'/>
<enum name='kCJKItalicRomanOffSelector' value64='3'/>
<enum name='kCJKItalicRomanOnSelector' value64='2'/>
<enum name='kCJKItalicRomanSelector' value64='1'/>
<enum name='kCJKRomanSpacingType' value64='103'/>
<enum name='kCJKSymbolAltFiveSelector' value64='5'/>
<enum name='kCJKSymbolAltFourSelector' value64='4'/>
<enum name='kCJKSymbolAltOneSelector' value64='1'/>
<enum name='kCJKSymbolAltThreeSelector' value64='3'/>
<enum name='kCJKSymbolAltTwoSelector' value64='2'/>
<enum name='kCJKSymbolAlternativesType' value64='29'/>
<enum name='kCJKVerticalRomanCenteredSelector' value64='0'/>
<enum name='kCJKVerticalRomanHBaselineSelector' value64='1'/>
<enum name='kCJKVerticalRomanPlacementType' value64='31'/>
<enum name='kCTAdobeCNS1CharacterCollection' value64='1'/>
<enum name='kCTAdobeGB1CharacterCollection' value64='2'/>
<enum name='kCTAdobeJapan1CharacterCollection' value64='3'/>
<enum name='kCTAdobeJapan2CharacterCollection' value64='4'/>
<enum name='kCTAdobeKorea1CharacterCollection' value64='5'/>
<enum name='kCTCenterTextAlignment' value64='2'/>
<enum name='kCTCharacterCollectionAdobeCNS1' value64='1'/>
<enum name='kCTCharacterCollectionAdobeGB1' value64='2'/>
<enum name='kCTCharacterCollectionAdobeJapan1' value64='3'/>
<enum name='kCTCharacterCollectionAdobeJapan2' value64='4'/>
<enum name='kCTCharacterCollectionAdobeKorea1' value64='5'/>
<enum name='kCTCharacterCollectionIdentityMapping' value64='0'/>
<enum name='kCTFontAlertHeaderFontType' value64='18'/>
<enum name='kCTFontApplicationFontType' value64='9'/>
<enum name='kCTFontBoldTrait' value64='2'/>
<enum name='kCTFontClarendonSerifsClass' value64='1073741824'/>
<enum name='kCTFontClassClarendonSerifs' value64='1073741824'/>
<enum name='kCTFontClassFreeformSerifs' value64='1879048192'/>
<enum name='kCTFontClassMaskShift' value64='28'/>
<enum name='kCTFontClassMaskTrait' value64='4026531840'/>
<enum name='kCTFontClassModernSerifs' value64='805306368'/>
<enum name='kCTFontClassOldStyleSerifs' value64='268435456'/>
<enum name='kCTFontClassOrnamentals' value64='2415919104'/>
<enum name='kCTFontClassSansSerif' value64='2147483648'/>
<enum name='kCTFontClassScripts' value64='2684354560'/>
<enum name='kCTFontClassSlabSerifs' value64='1342177280'/>
<enum name='kCTFontClassSymbolic' value64='3221225472'/>
<enum name='kCTFontClassTransitionalSerifs' value64='536870912'/>
<enum name='kCTFontClassUnknown' value64='0'/>
<enum name='kCTFontCollectionCopyDefaultOptions' value64='0'/>
<enum name='kCTFontCollectionCopyStandardSort' value64='2'/>
<enum name='kCTFontCollectionCopyUnique' value64='1'/>
<enum name='kCTFontColorGlyphsTrait' value64='8192'/>
<enum name='kCTFontCompositeTrait' value64='16384'/>
<enum name='kCTFontCondensedTrait' value64='64'/>
<enum name='kCTFontControlContentFontType' value64='26'/>
<enum name='kCTFontDefaultOrientation' value64='0'/>
<enum name='kCTFontDescriptorMatchingDidBegin' value64='0'/>
<enum name='kCTFontDescriptorMatchingDidFailWithError' value64='8'/>
<enum name='kCTFontDescriptorMatchingDidFinish' value64='1'/>
<enum name='kCTFontDescriptorMatchingDidFinishDownloading' value64='6'/>
<enum name='kCTFontDescriptorMatchingDidMatch' value64='7'/>
<enum name='kCTFontDescriptorMatchingDownloading' value64='5'/>
<enum name='kCTFontDescriptorMatchingStalled' value64='3'/>
<enum name='kCTFontDescriptorMatchingWillBeginDownloading' value64='4'/>
<enum name='kCTFontDescriptorMatchingWillBeginQuerying' value64='2'/>
<enum name='kCTFontEmphasizedSystemDetailFontType' value64='20'/>
<enum name='kCTFontEmphasizedSystemFontType' value64='3'/>
<enum name='kCTFontExpandedTrait' value64='32'/>
<enum name='kCTFontFormatBitmap' value64='5'/>
<enum name='kCTFontFormatOpenTypePostScript' value64='1'/>
<enum name='kCTFontFormatOpenTypeTrueType' value64='2'/>
<enum name='kCTFontFormatPostScript' value64='4'/>
<enum name='kCTFontFormatTrueType' value64='3'/>
<enum name='kCTFontFormatUnrecognized' value64='0'/>
<enum name='kCTFontFreeformSerifsClass' value64='1879048192'/>
<enum name='kCTFontHorizontalOrientation' value64='1'/>
<enum name='kCTFontItalicTrait' value64='1'/>
<enum name='kCTFontLabelFontType' value64='10'/>
<enum name='kCTFontManagerAutoActivationDefault' value64='0'/>
<enum name='kCTFontManagerAutoActivationDisabled' value64='1'/>
<enum name='kCTFontManagerAutoActivationEnabled' value64='2'/>
<enum name='kCTFontManagerAutoActivationPromptUser' value64='3'/>
<enum name='kCTFontManagerErrorAlreadyRegistered' value64='105'/>
<enum name='kCTFontManagerErrorFileNotFound' value64='101'/>
<enum name='kCTFontManagerErrorInUse' value64='202'/>
<enum name='kCTFontManagerErrorInsufficientPermissions' value64='102'/>
<enum name='kCTFontManagerErrorInvalidFontData' value64='104'/>
<enum name='kCTFontManagerErrorNotRegistered' value64='201'/>
<enum name='kCTFontManagerErrorSystemRequired' value64='203'/>
<enum name='kCTFontManagerErrorUnrecognizedFormat' value64='103'/>
<enum name='kCTFontManagerScopeNone' value64='0'/>
<enum name='kCTFontManagerScopeProcess' value64='1'/>
<enum name='kCTFontManagerScopeSession' value64='3'/>
<enum name='kCTFontManagerScopeUser' value64='2'/>
<enum name='kCTFontMenuItemCmdKeyFontType' value64='14'/>
<enum name='kCTFontMenuItemFontType' value64='12'/>
<enum name='kCTFontMenuItemMarkFontType' value64='13'/>
<enum name='kCTFontMenuTitleFontType' value64='11'/>
<enum name='kCTFontMessageFontType' value64='23'/>
<enum name='kCTFontMiniEmphasizedSystemFontType' value64='7'/>
<enum name='kCTFontMiniSystemFontType' value64='6'/>
<enum name='kCTFontModernSerifsClass' value64='805306368'/>
<enum name='kCTFontMonoSpaceTrait' value64='1024'/>
<enum name='kCTFontNoFontType' value64='4294967295'/>
<enum name='kCTFontOldStyleSerifsClass' value64='268435456'/>
<enum name='kCTFontOptionsDefault' value64='0'/>
<enum name='kCTFontOptionsPreferSystemFont' value64='4'/>
<enum name='kCTFontOptionsPreventAutoActivation' value64='1'/>
<enum name='kCTFontOrientationDefault' value64='0'/>
<enum name='kCTFontOrientationHorizontal' value64='1'/>
<enum name='kCTFontOrientationVertical' value64='2'/>
<enum name='kCTFontOrnamentalsClass' value64='2415919104'/>
<enum name='kCTFontPaletteFontType' value64='24'/>
<enum name='kCTFontPriorityComputer' value64='30000'/>
<enum name='kCTFontPriorityDynamic' value64='50000'/>
<enum name='kCTFontPriorityNetwork' value64='20000'/>
<enum name='kCTFontPriorityProcess' value64='60000'/>
<enum name='kCTFontPrioritySystem' value64='10000'/>
<enum name='kCTFontPriorityUser' value64='40000'/>
<enum name='kCTFontPushButtonFontType' value64='16'/>
<enum name='kCTFontSansSerifClass' value64='2147483648'/>
<enum name='kCTFontScriptsClass' value64='2684354560'/>
<enum name='kCTFontSlabSerifsClass' value64='1342177280'/>
<enum name='kCTFontSmallEmphasizedSystemFontType' value64='5'/>
<enum name='kCTFontSmallSystemFontType' value64='4'/>
<enum name='kCTFontSmallToolbarFontType' value64='22'/>
<enum name='kCTFontSymbolicClass' value64='3221225472'/>
<enum name='kCTFontSystemDetailFontType' value64='19'/>
<enum name='kCTFontSystemFontType' value64='2'/>
<enum name='kCTFontTableAcnt' value64='1633906292'/>
<enum name='kCTFontTableAnkr' value64='1634626418'/>
<enum name='kCTFontTableAvar' value64='1635148146'/>
<enum name='kCTFontTableBASE' value64='1111577413'/>
<enum name='kCTFontTableBdat' value64='1650745716'/>
<enum name='kCTFontTableBhed' value64='1651008868'/>
<enum name='kCTFontTableBloc' value64='1651273571'/>
<enum name='kCTFontTableBsln' value64='1651731566'/>
<enum name='kCTFontTableCBDT' value64='1128416340'/>
<enum name='kCTFontTableCBLC' value64='1128418371'/>
<enum name='kCTFontTableCFF' value64='1128678944'/>
<enum name='kCTFontTableCFF2' value64='1128678962'/>
<enum name='kCTFontTableCOLR' value64='1129270354'/>
<enum name='kCTFontTableCPAL' value64='1129333068'/>
<enum name='kCTFontTableCidg' value64='1667851367'/>
<enum name='kCTFontTableCmap' value64='1668112752'/>
<enum name='kCTFontTableCvar' value64='1668702578'/>
<enum name='kCTFontTableCvt' value64='1668707360'/>
<enum name='kCTFontTableDSIG' value64='1146308935'/>
<enum name='kCTFontTableEBDT' value64='1161970772'/>
<enum name='kCTFontTableEBLC' value64='1161972803'/>
<enum name='kCTFontTableEBSC' value64='1161974595'/>
<enum name='kCTFontTableFdsc' value64='1717859171'/>
<enum name='kCTFontTableFeat' value64='1717920116'/>
<enum name='kCTFontTableFmtx' value64='1718449272'/>
<enum name='kCTFontTableFond' value64='1718578788'/>
<enum name='kCTFontTableFpgm' value64='1718642541'/>
<enum name='kCTFontTableFvar' value64='1719034226'/>
<enum name='kCTFontTableGDEF' value64='1195656518'/>
<enum name='kCTFontTableGPOS' value64='1196445523'/>
<enum name='kCTFontTableGSUB' value64='1196643650'/>
<enum name='kCTFontTableGasp' value64='1734439792'/>
<enum name='kCTFontTableGlyf' value64='1735162214'/>
<enum name='kCTFontTableGvar' value64='1735811442'/>
<enum name='kCTFontTableHVAR' value64='1213612370'/>
<enum name='kCTFontTableHdmx' value64='1751412088'/>
<enum name='kCTFontTableHead' value64='1751474532'/>
<enum name='kCTFontTableHhea' value64='1751672161'/>
<enum name='kCTFontTableHmtx' value64='1752003704'/>
<enum name='kCTFontTableHsty' value64='1752396921'/>
<enum name='kCTFontTableJSTF' value64='1246975046'/>
<enum name='kCTFontTableJust' value64='1786082164'/>
<enum name='kCTFontTableKern' value64='1801810542'/>
<enum name='kCTFontTableKerx' value64='1801810552'/>
<enum name='kCTFontTableLTSH' value64='1280594760'/>
<enum name='kCTFontTableLcar' value64='1818452338'/>
<enum name='kCTFontTableLoca' value64='1819239265'/>
<enum name='kCTFontTableLtag' value64='1819566439'/>
<enum name='kCTFontTableMATH' value64='1296127048'/>
<enum name='kCTFontTableMERG' value64='1296388679'/>
<enum name='kCTFontTableMVAR' value64='1297498450'/>
<enum name='kCTFontTableMaxp' value64='1835104368'/>
<enum name='kCTFontTableMeta' value64='1835365473'/>
<enum name='kCTFontTableMort' value64='1836020340'/>
<enum name='kCTFontTableMorx' value64='1836020344'/>
<enum name='kCTFontTableName' value64='1851878757'/>
<enum name='kCTFontTableOS2' value64='1330851634'/>
<enum name='kCTFontTableOpbd' value64='1869636196'/>
<enum name='kCTFontTableOptionExcludeSynthetic' value64='1'/>
<enum name='kCTFontTableOptionNoOptions' value64='0'/>
<enum name='kCTFontTablePCLT' value64='1346587732'/>
<enum name='kCTFontTablePost' value64='1886352244'/>
<enum name='kCTFontTablePrep' value64='1886545264'/>
<enum name='kCTFontTableProp' value64='1886547824'/>
<enum name='kCTFontTableSTAT' value64='1398030676'/>
<enum name='kCTFontTableSVG' value64='1398163232'/>
<enum name='kCTFontTableSbit' value64='1935829364'/>
<enum name='kCTFontTableSbix' value64='1935829368'/>
<enum name='kCTFontTableTrak' value64='1953653099'/>
<enum name='kCTFontTableVDMX' value64='1447316824'/>
<enum name='kCTFontTableVORG' value64='1448038983'/>
<enum name='kCTFontTableVVAR' value64='1448493394'/>
<enum name='kCTFontTableVhea' value64='1986553185'/>
<enum name='kCTFontTableVmtx' value64='1986884728'/>
<enum name='kCTFontTableXref' value64='2020762982'/>
<enum name='kCTFontTableZapf' value64='1516335206'/>
<enum name='kCTFontToolTipFontType' value64='25'/>
<enum name='kCTFontToolbarFontType' value64='21'/>
<enum name='kCTFontTraitBold' value64='2'/>
<enum name='kCTFontTraitClassMask' value64='4026531840'/>
<enum name='kCTFontTraitColorGlyphs' value64='8192'/>
<enum name='kCTFontTraitComposite' value64='16384'/>
<enum name='kCTFontTraitCondensed' value64='64'/>
<enum name='kCTFontTraitExpanded' value64='32'/>
<enum name='kCTFontTraitItalic' value64='1'/>
<enum name='kCTFontTraitMonoSpace' value64='1024'/>
<enum name='kCTFontTraitUIOptimized' value64='4096'/>
<enum name='kCTFontTraitVertical' value64='2048'/>
<enum name='kCTFontTransitionalSerifsClass' value64='536870912'/>
<enum name='kCTFontUIFontAlertHeader' value64='18'/>
<enum name='kCTFontUIFontApplication' value64='9'/>
<enum name='kCTFontUIFontControlContent' value64='26'/>
<enum name='kCTFontUIFontEmphasizedSystem' value64='3'/>
<enum name='kCTFontUIFontEmphasizedSystemDetail' value64='20'/>
<enum name='kCTFontUIFontLabel' value64='10'/>
<enum name='kCTFontUIFontMenuItem' value64='12'/>
<enum name='kCTFontUIFontMenuItemCmdKey' value64='14'/>
<enum name='kCTFontUIFontMenuItemMark' value64='13'/>
<enum name='kCTFontUIFontMenuTitle' value64='11'/>
<enum name='kCTFontUIFontMessage' value64='23'/>
<enum name='kCTFontUIFontMiniEmphasizedSystem' value64='7'/>
<enum name='kCTFontUIFontMiniSystem' value64='6'/>
<enum name='kCTFontUIFontNone' value64='4294967295'/>
<enum name='kCTFontUIFontPalette' value64='24'/>
<enum name='kCTFontUIFontPushButton' value64='16'/>
<enum name='kCTFontUIFontSmallEmphasizedSystem' value64='5'/>
<enum name='kCTFontUIFontSmallSystem' value64='4'/>
<enum name='kCTFontUIFontSmallToolbar' value64='22'/>
<enum name='kCTFontUIFontSystem' value64='2'/>
<enum name='kCTFontUIFontSystemDetail' value64='19'/>
<enum name='kCTFontUIFontToolTip' value64='25'/>
<enum name='kCTFontUIFontToolbar' value64='21'/>
<enum name='kCTFontUIFontUser' value64='0'/>
<enum name='kCTFontUIFontUserFixedPitch' value64='1'/>
<enum name='kCTFontUIFontUtilityWindowTitle' value64='17'/>
<enum name='kCTFontUIFontViews' value64='8'/>
<enum name='kCTFontUIFontWindowTitle' value64='15'/>
<enum name='kCTFontUIOptimizedTrait' value64='4096'/>
<enum name='kCTFontUnknownClass' value64='0'/>
<enum name='kCTFontUserFixedPitchFontType' value64='1'/>
<enum name='kCTFontUserFontType' value64='0'/>
<enum name='kCTFontUtilityWindowTitleFontType' value64='17'/>
<enum name='kCTFontVerticalOrientation' value64='2'/>
<enum name='kCTFontVerticalTrait' value64='2048'/>
<enum name='kCTFontViewsFontType' value64='8'/>
<enum name='kCTFontWindowTitleFontType' value64='15'/>
<enum name='kCTFramePathFillEvenOdd' value64='0'/>
<enum name='kCTFramePathFillWindingNumber' value64='1'/>
<enum name='kCTFrameProgressionLeftToRight' value64='2'/>
<enum name='kCTFrameProgressionRightToLeft' value64='1'/>
<enum name='kCTFrameProgressionTopToBottom' value64='0'/>
<enum name='kCTIdentityMappingCharacterCollection' value64='0'/>
<enum name='kCTJustifiedTextAlignment' value64='3'/>
<enum name='kCTLeftTextAlignment' value64='0'/>
<enum name='kCTLineBoundsExcludeTypographicLeading' value64='1'/>
<enum name='kCTLineBoundsExcludeTypographicShifts' value64='2'/>
<enum name='kCTLineBoundsIncludeLanguageExtents' value64='32'/>
<enum name='kCTLineBoundsUseGlyphPathBounds' value64='8'/>
<enum name='kCTLineBoundsUseHangingPunctuation' value64='4'/>
<enum name='kCTLineBoundsUseOpticalBounds' value64='16'/>
<enum name='kCTLineBreakByCharWrapping' value64='1'/>
<enum name='kCTLineBreakByClipping' value64='2'/>
<enum name='kCTLineBreakByTruncatingHead' value64='3'/>
<enum name='kCTLineBreakByTruncatingMiddle' value64='5'/>
<enum name='kCTLineBreakByTruncatingTail' value64='4'/>
<enum name='kCTLineBreakByWordWrapping' value64='0'/>
<enum name='kCTLineTruncationEnd' value64='1'/>
<enum name='kCTLineTruncationMiddle' value64='2'/>
<enum name='kCTLineTruncationStart' value64='0'/>
<enum name='kCTNaturalTextAlignment' value64='4'/>
<enum name='kCTParagraphStyleSpecifierAlignment' value64='0'/>
<enum name='kCTParagraphStyleSpecifierBaseWritingDirection' value64='13'/>
<enum name='kCTParagraphStyleSpecifierCount' value64='18'/>
<enum name='kCTParagraphStyleSpecifierDefaultTabInterval' value64='5'/>
<enum name='kCTParagraphStyleSpecifierFirstLineHeadIndent' value64='1'/>
<enum name='kCTParagraphStyleSpecifierHeadIndent' value64='2'/>
<enum name='kCTParagraphStyleSpecifierLineBoundsOptions' value64='17'/>
<enum name='kCTParagraphStyleSpecifierLineBreakMode' value64='6'/>
<enum name='kCTParagraphStyleSpecifierLineHeightMultiple' value64='7'/>
<enum name='kCTParagraphStyleSpecifierLineSpacing' value64='10'/>
<enum name='kCTParagraphStyleSpecifierLineSpacingAdjustment' value64='16'/>
<enum name='kCTParagraphStyleSpecifierMaximumLineHeight' value64='8'/>
<enum name='kCTParagraphStyleSpecifierMaximumLineSpacing' value64='14'/>
<enum name='kCTParagraphStyleSpecifierMinimumLineHeight' value64='9'/>
<enum name='kCTParagraphStyleSpecifierMinimumLineSpacing' value64='15'/>
<enum name='kCTParagraphStyleSpecifierParagraphSpacing' value64='11'/>
<enum name='kCTParagraphStyleSpecifierParagraphSpacingBefore' value64='12'/>
<enum name='kCTParagraphStyleSpecifierTabStops' value64='4'/>
<enum name='kCTParagraphStyleSpecifierTailIndent' value64='3'/>
<enum name='kCTRightTextAlignment' value64='1'/>
<enum name='kCTRubyAlignmentAuto' value64='0'/>
<enum name='kCTRubyAlignmentCenter' value64='2'/>
<enum name='kCTRubyAlignmentDistributeLetter' value64='4'/>
<enum name='kCTRubyAlignmentDistributeSpace' value64='5'/>
<enum name='kCTRubyAlignmentEnd' value64='3'/>
<enum name='kCTRubyAlignmentInvalid' value64='255'/>
<enum name='kCTRubyAlignmentLineEdge' value64='6'/>
<enum name='kCTRubyAlignmentStart' value64='1'/>
<enum name='kCTRubyOverhangAuto' value64='0'/>
<enum name='kCTRubyOverhangEnd' value64='2'/>
<enum name='kCTRubyOverhangInvalid' value64='255'/>
<enum name='kCTRubyOverhangNone' value64='3'/>
<enum name='kCTRubyOverhangStart' value64='1'/>
<enum name='kCTRubyPositionAfter' value64='1'/>
<enum name='kCTRubyPositionBefore' value64='0'/>
<enum name='kCTRubyPositionCount' value64='4'/>
<enum name='kCTRubyPositionInline' value64='3'/>
<enum name='kCTRubyPositionInterCharacter' value64='2'/>
<enum name='kCTRunDelegateCurrentVersion' value64='1'/>
<enum name='kCTRunDelegateVersion1' value64='1'/>
<enum name='kCTRunStatusHasNonIdentityMatrix' value64='4'/>
<enum name='kCTRunStatusNoStatus' value64='0'/>
<enum name='kCTRunStatusNonMonotonic' value64='2'/>
<enum name='kCTRunStatusRightToLeft' value64='1'/>
<enum name='kCTTextAlignmentCenter' value64='2'/>
<enum name='kCTTextAlignmentJustified' value64='3'/>
<enum name='kCTTextAlignmentLeft' value64='0'/>
<enum name='kCTTextAlignmentNatural' value64='4'/>
<enum name='kCTTextAlignmentRight' value64='1'/>
<enum name='kCTUnderlinePatternDash' value64='512'/>
<enum name='kCTUnderlinePatternDashDot' value64='768'/>
<enum name='kCTUnderlinePatternDashDotDot' value64='1024'/>
<enum name='kCTUnderlinePatternDot' value64='256'/>
<enum name='kCTUnderlinePatternSolid' value64='0'/>
<enum name='kCTUnderlineStyleDouble' value64='9'/>
<enum name='kCTUnderlineStyleNone' value64='0'/>
<enum name='kCTUnderlineStyleSingle' value64='1'/>
<enum name='kCTUnderlineStyleThick' value64='2'/>
<enum name='kCTVersionNumber10_10' value64='458752'/>
<enum name='kCTVersionNumber10_11' value64='524288'/>
<enum name='kCTVersionNumber10_12' value64='589824'/>
<enum name='kCTVersionNumber10_13' value64='655360'/>
<enum name='kCTVersionNumber10_14' value64='720896'/>
<enum name='kCTVersionNumber10_5' value64='131072'/>
<enum name='kCTVersionNumber10_5_2' value64='131073'/>
<enum name='kCTVersionNumber10_5_3' value64='131074'/>
<enum name='kCTVersionNumber10_5_5' value64='131075'/>
<enum name='kCTVersionNumber10_6' value64='196608'/>
<enum name='kCTVersionNumber10_7' value64='262144'/>
<enum name='kCTVersionNumber10_8' value64='327680'/>
<enum name='kCTVersionNumber10_9' value64='393216'/>
<enum name='kCTWritingDirectionEmbedding' value64='0'/>
<enum name='kCTWritingDirectionLeftToRight' value64='0'/>
<enum name='kCTWritingDirectionNatural' value64='-1'/>
<enum name='kCTWritingDirectionOverride' value64='2'/>
<enum name='kCTWritingDirectionRightToLeft' value64='1'/>
<enum name='kCanonicalCompositionOffSelector' value64='1'/>
<enum name='kCanonicalCompositionOnSelector' value64='0'/>
<enum name='kCaseSensitiveLayoutOffSelector' value64='1'/>
<enum name='kCaseSensitiveLayoutOnSelector' value64='0'/>
<enum name='kCaseSensitiveLayoutType' value64='33'/>
<enum name='kCaseSensitiveSpacingOffSelector' value64='3'/>
<enum name='kCaseSensitiveSpacingOnSelector' value64='2'/>
<enum name='kCharacterAlternativesType' value64='17'/>
<enum name='kCharacterShapeType' value64='20'/>
<enum name='kCircleAnnotationSelector' value64='3'/>
<enum name='kCommonLigaturesOffSelector' value64='3'/>
<enum name='kCommonLigaturesOnSelector' value64='2'/>
<enum name='kCompatibilityCompositionOffSelector' value64='3'/>
<enum name='kCompatibilityCompositionOnSelector' value64='2'/>
<enum name='kContextualAlternatesOffSelector' value64='1'/>
<enum name='kContextualAlternatesOnSelector' value64='0'/>
<enum name='kContextualAlternatesType' value64='36'/>
<enum name='kContextualLigaturesOffSelector' value64='19'/>
<enum name='kContextualLigaturesOnSelector' value64='18'/>
<enum name='kContextualSwashAlternatesOffSelector' value64='5'/>
<enum name='kContextualSwashAlternatesOnSelector' value64='4'/>
<enum name='kCursiveConnectionType' value64='2'/>
<enum name='kCursiveSelector' value64='2'/>
<enum name='kDecomposeDiacriticsSelector' value64='2'/>
<enum name='kDecorativeBordersSelector' value64='4'/>
<enum name='kDefaultCJKRomanSelector' value64='2'/>
<enum name='kDefaultLowerCaseSelector' value64='0'/>
<enum name='kDefaultUpperCaseSelector' value64='0'/>
<enum name='kDesignComplexityType' value64='18'/>
<enum name='kDesignLevel1Selector' value64='0'/>
<enum name='kDesignLevel2Selector' value64='1'/>
<enum name='kDesignLevel3Selector' value64='2'/>
<enum name='kDesignLevel4Selector' value64='3'/>
<enum name='kDesignLevel5Selector' value64='4'/>
<enum name='kDiacriticsType' value64='9'/>
<enum name='kDiagonalFractionsSelector' value64='2'/>
<enum name='kDiamondAnnotationSelector' value64='8'/>
<enum name='kDingbatsSelector' value64='1'/>
<enum name='kDiphthongLigaturesOffSelector' value64='11'/>
<enum name='kDiphthongLigaturesOnSelector' value64='10'/>
<enum name='kDisplayTextSelector' value64='1'/>
<enum name='kEngravedTextSelector' value64='2'/>
<enum name='kExpertCharactersSelector' value64='10'/>
<enum name='kExponentsOffSelector' value64='9'/>
<enum name='kExponentsOnSelector' value64='8'/>
<enum name='kFleuronsSelector' value64='3'/>
<enum name='kFontAlbanianLanguage' value64='36'/>
<enum name='kFontAmharicLanguage' value64='85'/>
<enum name='kFontAmharicScript' value64='28'/>
<enum name='kFontArabicLanguage' value64='12'/>
<enum name='kFontArabicScript' value64='4'/>
<enum name='kFontArmenianLanguage' value64='51'/>
<enum name='kFontArmenianScript' value64='24'/>
<enum name='kFontAssameseLanguage' value64='68'/>
<enum name='kFontAymaraLanguage' value64='134'/>
<enum name='kFontAzerbaijanArLanguage' value64='50'/>
<enum name='kFontAzerbaijaniLanguage' value64='49'/>
<enum name='kFontBasqueLanguage' value64='129'/>
<enum name='kFontBengaliLanguage' value64='67'/>
<enum name='kFontBengaliScript' value64='13'/>
<enum name='kFontBulgarianLanguage' value64='44'/>
<enum name='kFontBurmeseLanguage' value64='77'/>
<enum name='kFontBurmeseScript' value64='19'/>
<enum name='kFontByelorussianLanguage' value64='46'/>
<enum name='kFontCatalanLanguage' value64='130'/>
<enum name='kFontChewaLanguage' value64='92'/>
<enum name='kFontChineseScript' value64='2'/>
<enum name='kFontCopyrightName' value64='0'/>
<enum name='kFontCroatianLanguage' value64='18'/>
<enum name='kFontCustom16BitScript' value64='2'/>
<enum name='kFontCustom816BitScript' value64='1'/>
<enum name='kFontCustom8BitScript' value64='0'/>
<enum name='kFontCustomPlatform' value64='4'/>
<enum name='kFontCyrillicScript' value64='7'/>
<enum name='kFontCzechLanguage' value64='38'/>
<enum name='kFontDanishLanguage' value64='7'/>
<enum name='kFontDescriptionName' value64='10'/>
<enum name='kFontDesignerName' value64='9'/>
<enum name='kFontDesignerURLName' value64='12'/>
<enum name='kFontDevanagariScript' value64='9'/>
<enum name='kFontDutchLanguage' value64='4'/>
<enum name='kFontDzongkhaLanguage' value64='137'/>
<enum name='kFontEastEuropeanRomanScript' value64='29'/>
<enum name='kFontEnglishLanguage' value64='0'/>
<enum name='kFontEsperantoLanguage' value64='94'/>
<enum name='kFontEstonianLanguage' value64='27'/>
<enum name='kFontEthiopicScript' value64='28'/>
<enum name='kFontExtendedArabicScript' value64='31'/>
<enum name='kFontFaeroeseLanguage' value64='30'/>
<enum name='kFontFamilyName' value64='1'/>
<enum name='kFontFarsiLanguage' value64='31'/>
<enum name='kFontFinnishLanguage' value64='13'/>
<enum name='kFontFlemishLanguage' value64='34'/>
<enum name='kFontFrenchLanguage' value64='1'/>
<enum name='kFontFullName' value64='4'/>
<enum name='kFontGallaLanguage' value64='87'/>
<enum name='kFontGeezScript' value64='28'/>
<enum name='kFontGeorgianLanguage' value64='52'/>
<enum name='kFontGeorgianScript' value64='23'/>
<enum name='kFontGermanLanguage' value64='2'/>
<enum name='kFontGreekLanguage' value64='14'/>
<enum name='kFontGreekScript' value64='6'/>
<enum name='kFontGuaraniLanguage' value64='133'/>
<enum name='kFontGujaratiLanguage' value64='69'/>
<enum name='kFontGujaratiScript' value64='11'/>
<enum name='kFontGurmukhiScript' value64='10'/>
<enum name='kFontHebrewLanguage' value64='10'/>
<enum name='kFontHebrewScript' value64='5'/>
<enum name='kFontHindiLanguage' value64='21'/>
<enum name='kFontHungarianLanguage' value64='26'/>
<enum name='kFontISO10646_1993Semantics' value64='2'/>
<enum name='kFontIcelandicLanguage' value64='15'/>
<enum name='kFontIndonesianLanguage' value64='81'/>
<enum name='kFontIrishLanguage' value64='35'/>
<enum name='kFontItalianLanguage' value64='3'/>
<enum name='kFontJapaneseLanguage' value64='11'/>
<enum name='kFontJapaneseScript' value64='1'/>
<enum name='kFontJavaneseRomLanguage' value64='138'/>
<enum name='kFontKannadaLanguage' value64='73'/>
<enum name='kFontKannadaScript' value64='16'/>
<enum name='kFontKashmiriLanguage' value64='61'/>
<enum name='kFontKazakhLanguage' value64='48'/>
<enum name='kFontKhmerLanguage' value64='78'/>
<enum name='kFontKhmerScript' value64='20'/>
<enum name='kFontKirghizLanguage' value64='54'/>
<enum name='kFontKoreanLanguage' value64='23'/>
<enum name='kFontKoreanScript' value64='3'/>
<enum name='kFontKurdishLanguage' value64='60'/>
<enum name='kFontLaoLanguage' value64='79'/>
<enum name='kFontLaotianScript' value64='22'/>
<enum name='kFontLappishLanguage' value64='29'/>
<enum name='kFontLastReservedName' value64='255'/>
<enum name='kFontLatinLanguage' value64='131'/>
<enum name='kFontLatvianLanguage' value64='28'/>
<enum name='kFontLettishLanguage' value64='28'/>
<enum name='kFontLicenseDescriptionName' value64='13'/>
<enum name='kFontLicenseInfoURLName' value64='14'/>
<enum name='kFontLithuanianLanguage' value64='24'/>
<enum name='kFontMacCompatibleFullName' value64='18'/>
<enum name='kFontMacedonianLanguage' value64='43'/>
<enum name='kFontMacintoshPlatform' value64='1'/>
<enum name='kFontMalagasyLanguage' value64='93'/>
<enum name='kFontMalayArabicLanguage' value64='84'/>
<enum name='kFontMalayRomanLanguage' value64='83'/>
<enum name='kFontMalayalamLanguage' value64='72'/>
<enum name='kFontMalayalamScript' value64='17'/>
<enum name='kFontMalteseLanguage' value64='16'/>
<enum name='kFontManufacturerName' value64='8'/>
<enum name='kFontMarathiLanguage' value64='66'/>
<enum name='kFontMicrosoftPlatform' value64='3'/>
<enum name='kFontMicrosoftStandardScript' value64='1'/>
<enum name='kFontMicrosoftSymbolScript' value64='0'/>
<enum name='kFontMicrosoftUCS4Script' value64='10'/>
<enum name='kFontMoldavianLanguage' value64='53'/>
<enum name='kFontMongolianCyrLanguage' value64='58'/>
<enum name='kFontMongolianLanguage' value64='57'/>
<enum name='kFontMongolianScript' value64='27'/>
<enum name='kFontNepaliLanguage' value64='64'/>
<enum name='kFontNoLanguageCode' value64='4294967295'/>
<enum name='kFontNoNameCode' value64='4294967295'/>
<enum name='kFontNoPlatformCode' value64='4294967295'/>
<enum name='kFontNoScriptCode' value64='4294967295'/>
<enum name='kFontNorwegianLanguage' value64='9'/>
<enum name='kFontOriyaLanguage' value64='71'/>
<enum name='kFontOriyaScript' value64='12'/>
<enum name='kFontOromoLanguage' value64='87'/>
<enum name='kFontPashtoLanguage' value64='59'/>
<enum name='kFontPersianLanguage' value64='31'/>
<enum name='kFontPolishLanguage' value64='25'/>
<enum name='kFontPortugueseLanguage' value64='8'/>
<enum name='kFontPostScriptCIDName' value64='20'/>
<enum name='kFontPostscriptName' value64='6'/>
<enum name='kFontPreferredFamilyName' value64='16'/>
<enum name='kFontPreferredSubfamilyName' value64='17'/>
<enum name='kFontPunjabiLanguage' value64='70'/>
<enum name='kFontQuechuaLanguage' value64='132'/>
<enum name='kFontRSymbolScript' value64='8'/>
<enum name='kFontReservedPlatform' value64='2'/>
<enum name='kFontRomanScript' value64='0'/>
<enum name='kFontRomanianLanguage' value64='37'/>
<enum name='kFontRuandaLanguage' value64='90'/>
<enum name='kFontRundiLanguage' value64='91'/>
<enum name='kFontRussian' value64='7'/>
<enum name='kFontRussianLanguage' value64='32'/>
<enum name='kFontSaamiskLanguage' value64='29'/>
<enum name='kFontSampleTextName' value64='19'/>
<enum name='kFontSanskritLanguage' value64='65'/>
<enum name='kFontSerbianLanguage' value64='42'/>
<enum name='kFontSimpChineseLanguage' value64='33'/>
<enum name='kFontSimpleChineseScript' value64='25'/>
<enum name='kFontSindhiLanguage' value64='62'/>
<enum name='kFontSindhiScript' value64='31'/>
<enum name='kFontSinhaleseLanguage' value64='76'/>
<enum name='kFontSinhaleseScript' value64='18'/>
<enum name='kFontSlavicScript' value64='29'/>
<enum name='kFontSlovakLanguage' value64='39'/>
<enum name='kFontSlovenianLanguage' value64='40'/>
<enum name='kFontSomaliLanguage' value64='88'/>
<enum name='kFontSpanishLanguage' value64='6'/>
<enum name='kFontStyleName' value64='2'/>
<enum name='kFontSundaneseRomLanguage' value64='139'/>
<enum name='kFontSwahiliLanguage' value64='89'/>
<enum name='kFontSwedishLanguage' value64='5'/>
<enum name='kFontTagalogLanguage' value64='82'/>
<enum name='kFontTajikiLanguage' value64='55'/>
<enum name='kFontTamilLanguage' value64='74'/>
<enum name='kFontTamilScript' value64='14'/>
<enum name='kFontTatarLanguage' value64='135'/>
<enum name='kFontTeluguLanguage' value64='75'/>
<enum name='kFontTeluguScript' value64='15'/>
<enum name='kFontThaiLanguage' value64='22'/>
<enum name='kFontThaiScript' value64='21'/>
<enum name='kFontTibetanLanguage' value64='63'/>
<enum name='kFontTibetanScript' value64='26'/>
<enum name='kFontTigrinyaLanguage' value64='86'/>
<enum name='kFontTradChineseLanguage' value64='19'/>
<enum name='kFontTrademarkName' value64='7'/>
<enum name='kFontTraditionalChineseScript' value64='2'/>
<enum name='kFontTurkishLanguage' value64='17'/>
<enum name='kFontTurkmenLanguage' value64='56'/>
<enum name='kFontUighurLanguage' value64='136'/>
<enum name='kFontUkrainianLanguage' value64='45'/>
<enum name='kFontUnicodeDefaultSemantics' value64='0'/>
<enum name='kFontUnicodePlatform' value64='0'/>
<enum name='kFontUnicodeV1_1Semantics' value64='1'/>
<enum name='kFontUnicodeV2_0BMPOnlySemantics' value64='3'/>
<enum name='kFontUnicodeV2_0FullCoverageSemantics' value64='4'/>
<enum name='kFontUnicodeV4_0VariationSequenceSemantics' value64='5'/>
<enum name='kFontUnicode_FullRepertoire' value64='6'/>
<enum name='kFontUninterpretedScript' value64='32'/>
<enum name='kFontUniqueName' value64='3'/>
<enum name='kFontUrduLanguage' value64='20'/>
<enum name='kFontUzbekLanguage' value64='47'/>
<enum name='kFontVendorURLName' value64='11'/>
<enum name='kFontVersionName' value64='5'/>
<enum name='kFontVietnameseLanguage' value64='80'/>
<enum name='kFontVietnameseScript' value64='30'/>
<enum name='kFontWelshLanguage' value64='128'/>
<enum name='kFontYiddishLanguage' value64='41'/>
<enum name='kFormInterrobangOffSelector' value64='7'/>
<enum name='kFormInterrobangOnSelector' value64='6'/>
<enum name='kFractionsType' value64='11'/>
<enum name='kFullWidthCJKRomanSelector' value64='3'/>
<enum name='kFullWidthIdeographsSelector' value64='0'/>
<enum name='kFullWidthKanaSelector' value64='0'/>
<enum name='kHalfWidthCJKRomanSelector' value64='0'/>
<enum name='kHalfWidthIdeographsSelector' value64='2'/>
<enum name='kHalfWidthTextSelector' value64='2'/>
<enum name='kHanjaToHangulAltOneSelector' value64='7'/>
<enum name='kHanjaToHangulAltThreeSelector' value64='9'/>
<enum name='kHanjaToHangulAltTwoSelector' value64='8'/>
<enum name='kHanjaToHangulSelector' value64='1'/>
<enum name='kHideDiacriticsSelector' value64='1'/>
<enum name='kHiraganaToKatakanaSelector' value64='2'/>
<enum name='kHistoricalLigaturesOffSelector' value64='21'/>
<enum name='kHistoricalLigaturesOnSelector' value64='20'/>
<enum name='kHojoCharactersSelector' value64='12'/>
<enum name='kHyphenToEnDashOffSelector' value64='3'/>
<enum name='kHyphenToEnDashOnSelector' value64='2'/>
<enum name='kHyphenToMinusOffSelector' value64='1'/>
<enum name='kHyphenToMinusOnSelector' value64='0'/>
<enum name='kHyphensToEmDashOffSelector' value64='1'/>
<enum name='kHyphensToEmDashOnSelector' value64='0'/>
<enum name='kIdeographicAltFiveSelector' value64='5'/>
<enum name='kIdeographicAltFourSelector' value64='4'/>
<enum name='kIdeographicAltOneSelector' value64='1'/>
<enum name='kIdeographicAltThreeSelector' value64='3'/>
<enum name='kIdeographicAltTwoSelector' value64='2'/>
<enum name='kIdeographicAlternativesType' value64='30'/>
<enum name='kIdeographicSpacingType' value64='26'/>
<enum name='kIlluminatedCapsSelector' value64='3'/>
<enum name='kInequalityLigaturesOffSelector' value64='7'/>
<enum name='kInequalityLigaturesOnSelector' value64='6'/>
<enum name='kInferiorsSelector' value64='2'/>
<enum name='kInitialCapsAndSmallCapsSelector' value64='5'/>
<enum name='kInitialCapsSelector' value64='4'/>
<enum name='kInternationalSymbolsSelector' value64='5'/>
<enum name='kInvertedBoxAnnotationSelector' value64='9'/>
<enum name='kInvertedCircleAnnotationSelector' value64='4'/>
<enum name='kInvertedRoundedBoxAnnotationSelector' value64='10'/>
<enum name='kItalicCJKRomanType' value64='32'/>
<enum name='kJIS1978CharactersSelector' value64='2'/>
<enum name='kJIS1983CharactersSelector' value64='3'/>
<enum name='kJIS1990CharactersSelector' value64='4'/>
<enum name='kJIS2004CharactersSelector' value64='11'/>
<enum name='kJUSTCurrentVersion' value64='65536'/>
<enum name='kJUSTKashidaPriority' value64='0'/>
<enum name='kJUSTLetterPriority' value64='2'/>
<enum name='kJUSTNullPriority' value64='3'/>
<enum name='kJUSTOverrideLimits' value64='16384'/>
<enum name='kJUSTOverridePriority' value64='32768'/>
<enum name='kJUSTOverrideUnlimited' value64='8192'/>
<enum name='kJUSTPriorityCount' value64='4'/>
<enum name='kJUSTPriorityMask' value64='3'/>
<enum name='kJUSTSpacePriority' value64='1'/>
<enum name='kJUSTStandardFormat' value64='0'/>
<enum name='kJUSTTag' value64='1786082164'/>
<enum name='kJUSTUnlimited' value64='4096'/>
<enum name='kJUSTnoGlyphcode' value64='65535'/>
<enum name='kJUSTpcConditionalAddAction' value64='2'/>
<enum name='kJUSTpcDecompositionAction' value64='0'/>
<enum name='kJUSTpcDuctilityAction' value64='4'/>
<enum name='kJUSTpcGlyphRepeatAddAction' value64='5'/>
<enum name='kJUSTpcGlyphStretchAction' value64='3'/>
<enum name='kJUSTpcUnconditionalAddAction' value64='1'/>
<enum name='kKERNCrossStream' value64='16384'/>
<enum name='kKERNCrossStreamResetNote' value64='2'/>
<enum name='kKERNCurrentVersion' value64='65536'/>
<enum name='kKERNFormatMask' value64='255'/>
<enum name='kKERNIndexArray' value64='3'/>
<enum name='kKERNLineEndKerning' value64='2'/>
<enum name='kKERNLineStart' value64='1'/>
<enum name='kKERNNoCrossKerning' value64='4'/>
<enum name='kKERNNoStakeNote' value64='1'/>
<enum name='kKERNNotApplied' value64='1'/>
<enum name='kKERNNotesRequested' value64='8'/>
<enum name='kKERNOrderedList' value64='0'/>
<enum name='kKERNResetCrossStream' value64='32768'/>
<enum name='kKERNSimpleArray' value64='2'/>
<enum name='kKERNStateTable' value64='1'/>
<enum name='kKERNTag' value64='1801810542'/>
<enum name='kKERNUnusedBits' value64='7936'/>
<enum name='kKERNVariation' value64='8192'/>
<enum name='kKERNVertical' value64='32768'/>
<enum name='kKERXActionOffsetMask' value64='16777215'/>
<enum name='kKERXActionTypeAnchorPoints' value64='1073741824'/>
<enum name='kKERXActionTypeControlPoints' value64='0'/>
<enum name='kKERXActionTypeCoordinates' value64='2147483648'/>
<enum name='kKERXActionTypeMask' value64='3221225472'/>
<enum name='kKERXControlPoint' value64='4'/>
<enum name='kKERXCrossStream' value64='1073741824'/>
<enum name='kKERXCrossStreamResetNote' value64='2'/>
<enum name='kKERXCurrentVersion' value64='131072'/>
<enum name='kKERXDescending' value64='268435456'/>
<enum name='kKERXFormatMask' value64='255'/>
<enum name='kKERXIndexArray' value64='6'/>
<enum name='kKERXLineEndKerning' value64='2'/>
<enum name='kKERXLineStart' value64='1'/>
<enum name='kKERXNoCrossKerning' value64='4'/>
<enum name='kKERXNoStakeNote' value64='1'/>
<enum name='kKERXNotApplied' value64='1'/>
<enum name='kKERXNotesRequested' value64='8'/>
<enum name='kKERXOrderedList' value64='0'/>
<enum name='kKERXResetCrossStream' value64='32768'/>
<enum name='kKERXSimpleArray' value64='2'/>
<enum name='kKERXStateTable' value64='1'/>
<enum name='kKERXTag' value64='1801810552'/>
<enum name='kKERXUnusedBits' value64='268435200'/>
<enum name='kKERXUnusedFlags' value64='1056964608'/>
<enum name='kKERXValuesAreLong' value64='1'/>
<enum name='kKERXVariation' value64='536870912'/>
<enum name='kKERXVertical' value64='-2147483648'/>
<enum name='kKanaSpacingType' value64='25'/>
<enum name='kKanaToRomanizationSelector' value64='4'/>
<enum name='kKatakanaToHiraganaSelector' value64='3'/>
<enum name='kLCARCtlPointFormat' value64='1'/>
<enum name='kLCARCurrentVersion' value64='65536'/>
<enum name='kLCARLinearFormat' value64='0'/>
<enum name='kLCARTag' value64='1818452338'/>
<enum name='kLTAGCurrentVersion' value64='1'/>
<enum name='kLanguageTagType' value64='39'/>
<enum name='kLastFeatureType' value64='-1'/>
<enum name='kLetterCaseType' value64='3'/>
<enum name='kLigaturesType' value64='1'/>
<enum name='kLineFinalSwashesOffSelector' value64='7'/>
<enum name='kLineFinalSwashesOnSelector' value64='6'/>
<enum name='kLineInitialSwashesOffSelector' value64='5'/>
<enum name='kLineInitialSwashesOnSelector' value64='4'/>
<enum name='kLinguisticRearrangementOffSelector' value64='1'/>
<enum name='kLinguisticRearrangementOnSelector' value64='0'/>
<enum name='kLinguisticRearrangementType' value64='5'/>
<enum name='kLogosOffSelector' value64='7'/>
<enum name='kLogosOnSelector' value64='6'/>
<enum name='kLowerCaseNumbersSelector' value64='0'/>
<enum name='kLowerCasePetiteCapsSelector' value64='2'/>
<enum name='kLowerCaseSmallCapsSelector' value64='1'/>
<enum name='kLowerCaseType' value64='37'/>
<enum name='kMORTContextualType' value64='1'/>
<enum name='kMORTCoverDescending' value64='16384'/>
<enum name='kMORTCoverIgnoreVertical' value64='8192'/>
<enum name='kMORTCoverTypeMask' value64='15'/>
<enum name='kMORTCoverVertical' value64='32768'/>
<enum name='kMORTCurrInsertBefore' value64='2048'/>
<enum name='kMORTCurrInsertCountMask' value64='992'/>
<enum name='kMORTCurrInsertCountShift' value64='5'/>
<enum name='kMORTCurrInsertKashidaLike' value64='8192'/>
<enum name='kMORTCurrJustTableCountMask' value64='127'/>
<enum name='kMORTCurrJustTableCountShift' value64='0'/>
<enum name='kMORTCurrentVersion' value64='65536'/>
<enum name='kMORTDoInsertionsBefore' value64='128'/>
<enum name='kMORTInsertionType' value64='5'/>
<enum name='kMORTInsertionsCountMask' value64='63'/>
<enum name='kMORTIsSplitVowelPiece' value64='64'/>
<enum name='kMORTLigFormOffsetMask' value64='1073741823'/>
<enum name='kMORTLigFormOffsetShift' value64='2'/>
<enum name='kMORTLigLastAction' value64='-2147483648'/>
<enum name='kMORTLigStoreLigature' value64='1073741824'/>
<enum name='kMORTLigatureType' value64='2'/>
<enum name='kMORTMarkInsertBefore' value64='1024'/>
<enum name='kMORTMarkInsertCountMask' value64='31'/>
<enum name='kMORTMarkInsertCountShift' value64='0'/>
<enum name='kMORTMarkInsertKashidaLike' value64='4096'/>
<enum name='kMORTMarkJustTableCountMask' value64='16256'/>
<enum name='kMORTMarkJustTableCountShift' value64='7'/>
<enum name='kMORTRearrangementType' value64='0'/>
<enum name='kMORTSwashType' value64='4'/>
<enum name='kMORTTag' value64='1836020340'/>
<enum name='kMORTraCDx' value64='6'/>
<enum name='kMORTraCDxA' value64='8'/>
<enum name='kMORTraCDxAB' value64='12'/>
<enum name='kMORTraCDxBA' value64='13'/>
<enum name='kMORTraDCx' value64='7'/>
<enum name='kMORTraDCxA' value64='9'/>
<enum name='kMORTraDCxAB' value64='14'/>
<enum name='kMORTraDCxBA' value64='15'/>
<enum name='kMORTraDx' value64='2'/>
<enum name='kMORTraDxA' value64='3'/>
<enum name='kMORTraDxAB' value64='10'/>
<enum name='kMORTraDxBA' value64='11'/>
<enum name='kMORTraNoAction' value64='0'/>
<enum name='kMORTraxA' value64='1'/>
<enum name='kMORTraxAB' value64='4'/>
<enum name='kMORTraxBA' value64='5'/>
<enum name='kMORXCoverDescending' value64='1073741824'/>
<enum name='kMORXCoverIgnoreVertical' value64='536870912'/>
<enum name='kMORXCoverLogicalOrder' value64='268435456'/>
<enum name='kMORXCoverTypeMask' value64='255'/>
<enum name='kMORXCoverVertical' value64='-2147483648'/>
<enum name='kMORXCurrentVersion' value64='131072'/>
<enum name='kMORXTag' value64='1836020344'/>
<enum name='kMathSymbolsSelector' value64='6'/>
<enum name='kMathematicalExtrasType' value64='15'/>
<enum name='kMathematicalGreekOffSelector' value64='11'/>
<enum name='kMathematicalGreekOnSelector' value64='10'/>
<enum name='kMonospacedNumbersSelector' value64='0'/>
<enum name='kMonospacedTextSelector' value64='1'/>
<enum name='kNLCCharactersSelector' value64='13'/>
<enum name='kNoAlternatesSelector' value64='0'/>
<enum name='kNoAnnotationSelector' value64='0'/>
<enum name='kNoCJKItalicRomanSelector' value64='0'/>
<enum name='kNoCJKSymbolAlternativesSelector' value64='0'/>
<enum name='kNoFractionsSelector' value64='0'/>
<enum name='kNoIdeographicAlternativesSelector' value64='0'/>
<enum name='kNoOrnamentsSelector' value64='0'/>
<enum name='kNoRubyKanaSelector' value64='0'/>
<enum name='kNoStyleOptionsSelector' value64='0'/>
<enum name='kNoStylisticAlternatesSelector' value64='0'/>
<enum name='kNoTransliterationSelector' value64='0'/>
<enum name='kNonFinalSwashesOffSelector' value64='9'/>
<enum name='kNonFinalSwashesOnSelector' value64='8'/>
<enum name='kNormalPositionSelector' value64='0'/>
<enum name='kNumberCaseType' value64='21'/>
<enum name='kNumberSpacingType' value64='6'/>
<enum name='kOPBDControlPointFormat' value64='1'/>
<enum name='kOPBDCurrentVersion' value64='65536'/>
<enum name='kOPBDDistanceFormat' value64='0'/>
<enum name='kOPBDTag' value64='1869636196'/>
<enum name='kOrdinalsSelector' value64='3'/>
<enum name='kOrnamentSetsType' value64='16'/>
<enum name='kOverlappingCharactersType' value64='13'/>
<enum name='kPROPALDirectionClass' value64='2'/>
<enum name='kPROPANDirectionClass' value64='6'/>
<enum name='kPROPBNDirectionClass' value64='19'/>
<enum name='kPROPCSDirectionClass' value64='7'/>
<enum name='kPROPCanHangLTMask' value64='16384'/>
<enum name='kPROPCanHangRBMask' value64='8192'/>
<enum name='kPROPCurrentVersion' value64='196608'/>
<enum name='kPROPDirectionMask' value64='31'/>
<enum name='kPROPENDirectionClass' value64='3'/>
<enum name='kPROPESDirectionClass' value64='4'/>
<enum name='kPROPETDirectionClass' value64='5'/>
<enum name='kPROPIsFloaterMask' value64='32768'/>
<enum name='kPROPLDirectionClass' value64='0'/>
<enum name='kPROPLREDirectionClass' value64='13'/>
<enum name='kPROPLRODirectionClass' value64='14'/>
<enum name='kPROPNSMDirectionClass' value64='18'/>
<enum name='kPROPNumDirectionClasses' value64='20'/>
<enum name='kPROPONDirectionClass' value64='11'/>
<enum name='kPROPPDFDirectionClass' value64='17'/>
<enum name='kPROPPSDirectionClass' value64='8'/>
<enum name='kPROPPairOffsetMask' value64='3840'/>
<enum name='kPROPPairOffsetShift' value64='8'/>
<enum name='kPROPPairOffsetSign' value64='7'/>
<enum name='kPROPRDirectionClass' value64='1'/>
<enum name='kPROPRLEDirectionClass' value64='15'/>
<enum name='kPROPRLODirectionClass' value64='16'/>
<enum name='kPROPRightConnectMask' value64='128'/>
<enum name='kPROPSDirectionClass' value64='9'/>
<enum name='kPROPSENDirectionClass' value64='12'/>
<enum name='kPROPTag' value64='1886547824'/>
<enum name='kPROPUseRLPairMask' value64='4096'/>
<enum name='kPROPWSDirectionClass' value64='10'/>
<enum name='kPROPZeroReserved' value64='96'/>
<enum name='kParenthesisAnnotationSelector' value64='5'/>
<enum name='kPartiallyConnectedSelector' value64='1'/>
<enum name='kPeriodAnnotationSelector' value64='6'/>
<enum name='kPeriodsToEllipsisOffSelector' value64='11'/>
<enum name='kPeriodsToEllipsisOnSelector' value64='10'/>
<enum name='kPiCharactersSelector' value64='2'/>
<enum name='kPreventOverlapOffSelector' value64='1'/>
<enum name='kPreventOverlapOnSelector' value64='0'/>
<enum name='kProportionalCJKRomanSelector' value64='1'/>
<enum name='kProportionalIdeographsSelector' value64='1'/>
<enum name='kProportionalKanaSelector' value64='1'/>
<enum name='kProportionalNumbersSelector' value64='1'/>
<enum name='kProportionalTextSelector' value64='0'/>
<enum name='kQuarterWidthNumbersSelector' value64='3'/>
<enum name='kQuarterWidthTextSelector' value64='4'/>
<enum name='kRareLigaturesOffSelector' value64='5'/>
<enum name='kRareLigaturesOnSelector' value64='4'/>
<enum name='kRebusPicturesOffSelector' value64='9'/>
<enum name='kRebusPicturesOnSelector' value64='8'/>
<enum name='kRequiredLigaturesOffSelector' value64='1'/>
<enum name='kRequiredLigaturesOnSelector' value64='0'/>
<enum name='kRomanNumeralAnnotationSelector' value64='7'/>
<enum name='kRomanizationToHiraganaSelector' value64='5'/>
<enum name='kRomanizationToKatakanaSelector' value64='6'/>
<enum name='kRoundedBoxAnnotationSelector' value64='2'/>
<enum name='kRubyKanaOffSelector' value64='3'/>
<enum name='kRubyKanaOnSelector' value64='2'/>
<enum name='kRubyKanaSelector' value64='1'/>
<enum name='kRubyKanaType' value64='28'/>
<enum name='kSFNTLookupSegmentArray' value64='4'/>
<enum name='kSFNTLookupSegmentSingle' value64='2'/>
<enum name='kSFNTLookupSimpleArray' value64='0'/>
<enum name='kSFNTLookupSingleTable' value64='6'/>
<enum name='kSFNTLookupTrimmedArray' value64='8'/>
<enum name='kSFNTLookupVector' value64='10'/>
<enum name='kSTClassDeletedGlyph' value64='2'/>
<enum name='kSTClassEndOfLine' value64='3'/>
<enum name='kSTClassEndOfText' value64='0'/>
<enum name='kSTClassOutOfBounds' value64='1'/>
<enum name='kSTKCrossStreamReset' value64='8192'/>
<enum name='kSTLigActionMask' value64='16383'/>
<enum name='kSTMarkEnd' value64='8192'/>
<enum name='kSTNoAdvance' value64='16384'/>
<enum name='kSTRearrVerbMask' value64='15'/>
<enum name='kSTSetMark' value64='32768'/>
<enum name='kSTXHasLigAction' value64='8192'/>
<enum name='kScientificInferiorsSelector' value64='4'/>
<enum name='kShowDiacriticsSelector' value64='0'/>
<enum name='kSimplifiedCharactersSelector' value64='1'/>
<enum name='kSlashToDivideOffSelector' value64='5'/>
<enum name='kSlashToDivideOnSelector' value64='4'/>
<enum name='kSlashedZeroOffSelector' value64='5'/>
<enum name='kSlashedZeroOnSelector' value64='4'/>
<enum name='kSmallCapsSelector' value64='3'/>
<enum name='kSmartQuotesOffSelector' value64='9'/>
<enum name='kSmartQuotesOnSelector' value64='8'/>
<enum name='kSmartSwashType' value64='8'/>
<enum name='kSquaredLigaturesOffSelector' value64='13'/>
<enum name='kSquaredLigaturesOnSelector' value64='12'/>
<enum name='kStyleOptionsType' value64='19'/>
<enum name='kStylisticAltEightOffSelector' value64='17'/>
<enum name='kStylisticAltEightOnSelector' value64='16'/>
<enum name='kStylisticAltEighteenOffSelector' value64='37'/>
<enum name='kStylisticAltEighteenOnSelector' value64='36'/>
<enum name='kStylisticAltElevenOffSelector' value64='23'/>
<enum name='kStylisticAltElevenOnSelector' value64='22'/>
<enum name='kStylisticAltFifteenOffSelector' value64='31'/>
<enum name='kStylisticAltFifteenOnSelector' value64='30'/>
<enum name='kStylisticAltFiveOffSelector' value64='11'/>
<enum name='kStylisticAltFiveOnSelector' value64='10'/>
<enum name='kStylisticAltFourOffSelector' value64='9'/>
<enum name='kStylisticAltFourOnSelector' value64='8'/>
<enum name='kStylisticAltFourteenOffSelector' value64='29'/>
<enum name='kStylisticAltFourteenOnSelector' value64='28'/>
<enum name='kStylisticAltNineOffSelector' value64='19'/>
<enum name='kStylisticAltNineOnSelector' value64='18'/>
<enum name='kStylisticAltNineteenOffSelector' value64='39'/>
<enum name='kStylisticAltNineteenOnSelector' value64='38'/>
<enum name='kStylisticAltOneOffSelector' value64='3'/>
<enum name='kStylisticAltOneOnSelector' value64='2'/>
<enum name='kStylisticAltSevenOffSelector' value64='15'/>
<enum name='kStylisticAltSevenOnSelector' value64='14'/>
<enum name='kStylisticAltSeventeenOffSelector' value64='35'/>
<enum name='kStylisticAltSeventeenOnSelector' value64='34'/>
<enum name='kStylisticAltSixOffSelector' value64='13'/>
<enum name='kStylisticAltSixOnSelector' value64='12'/>
<enum name='kStylisticAltSixteenOffSelector' value64='33'/>
<enum name='kStylisticAltSixteenOnSelector' value64='32'/>
<enum name='kStylisticAltTenOffSelector' value64='21'/>
<enum name='kStylisticAltTenOnSelector' value64='20'/>
<enum name='kStylisticAltThirteenOffSelector' value64='27'/>
<enum name='kStylisticAltThirteenOnSelector' value64='26'/>
<enum name='kStylisticAltThreeOffSelector' value64='7'/>
<enum name='kStylisticAltThreeOnSelector' value64='6'/>
<enum name='kStylisticAltTwelveOffSelector' value64='25'/>
<enum name='kStylisticAltTwelveOnSelector' value64='24'/>
<enum name='kStylisticAltTwentyOffSelector' value64='41'/>
<enum name='kStylisticAltTwentyOnSelector' value64='40'/>
<enum name='kStylisticAltTwoOffSelector' value64='5'/>
<enum name='kStylisticAltTwoOnSelector' value64='4'/>
<enum name='kStylisticAlternativesType' value64='35'/>
<enum name='kSubstituteVerticalFormsOffSelector' value64='1'/>
<enum name='kSubstituteVerticalFormsOnSelector' value64='0'/>
<enum name='kSuperiorsSelector' value64='1'/>
<enum name='kSwashAlternatesOffSelector' value64='3'/>
<enum name='kSwashAlternatesOnSelector' value64='2'/>
<enum name='kSymbolLigaturesOffSelector' value64='17'/>
<enum name='kSymbolLigaturesOnSelector' value64='16'/>
<enum name='kTRAKCurrentVersion' value64='65536'/>
<enum name='kTRAKTag' value64='1953653099'/>
<enum name='kTRAKUniformFormat' value64='0'/>
<enum name='kTallCapsSelector' value64='5'/>
<enum name='kTextSpacingType' value64='22'/>
<enum name='kThirdWidthNumbersSelector' value64='2'/>
<enum name='kThirdWidthTextSelector' value64='3'/>
<enum name='kTitlingCapsSelector' value64='4'/>
<enum name='kTraditionalAltFiveSelector' value64='9'/>
<enum name='kTraditionalAltFourSelector' value64='8'/>
<enum name='kTraditionalAltOneSelector' value64='5'/>
<enum name='kTraditionalAltThreeSelector' value64='7'/>
<enum name='kTraditionalAltTwoSelector' value64='6'/>
<enum name='kTraditionalCharactersSelector' value64='0'/>
<enum name='kTraditionalNamesCharactersSelector' value64='14'/>
<enum name='kTranscodingCompositionOffSelector' value64='5'/>
<enum name='kTranscodingCompositionOnSelector' value64='4'/>
<enum name='kTransliterationType' value64='23'/>
<enum name='kTypographicExtrasType' value64='14'/>
<enum name='kUnconnectedSelector' value64='0'/>
<enum name='kUnicodeDecompositionType' value64='27'/>
<enum name='kUpperAndLowerCaseSelector' value64='0'/>
<enum name='kUpperCaseNumbersSelector' value64='1'/>
<enum name='kUpperCasePetiteCapsSelector' value64='2'/>
<enum name='kUpperCaseSmallCapsSelector' value64='1'/>
<enum name='kUpperCaseType' value64='38'/>
<enum name='kVerticalFractionsSelector' value64='1'/>
<enum name='kVerticalPositionType' value64='10'/>
<enum name='kVerticalSubstitutionType' value64='4'/>
<enum name='kWordFinalSwashesOffSelector' value64='3'/>
<enum name='kWordFinalSwashesOnSelector' value64='2'/>
<enum name='kWordInitialSwashesOffSelector' value64='1'/>
<enum name='kWordInitialSwashesOnSelector' value64='0'/>
<enum name='nameFontTableTag' value64='1851878757'/>
<enum name='nonGlyphID' value64='65535'/>
<enum name='os2FontTableTag' value64='1330851634'/>
<enum name='sizeof_sfntCMapEncoding' value64='8'/>
<enum name='sizeof_sfntCMapExtendedSubHeader' value64='12'/>
<enum name='sizeof_sfntCMapHeader' value64='4'/>
<enum name='sizeof_sfntCMapSubHeader' value64='6'/>
<enum name='sizeof_sfntDescriptorHeader' value64='8'/>
<enum name='sizeof_sfntDirectory' value64='12'/>
<enum name='sizeof_sfntInstance' value64='4'/>
<enum name='sizeof_sfntNameHeader' value64='6'/>
<enum name='sizeof_sfntNameRecord' value64='12'/>
<enum name='sizeof_sfntVariationAxis' value64='20'/>
<enum name='sizeof_sfntVariationHeader' value64='16'/>
<enum name='variationFontTableTag' value64='1719034226'/>
<function name='CTFontCollectionCreateCopyWithFontDescriptors'>
<arg declared_type64='CTFontCollectionRef _Nonnull' name='original' type64='^{__CTFontCollection=}'/>
<arg declared_type64='CFArrayRef _Nullable' name='queryDescriptors' type64='^{__CFArray=}'/>
<arg declared_type64='CFDictionaryRef _Nullable' name='options' type64='^{__CFDictionary=}'/>
<retval declared_type64='CTFontCollectionRef _Nonnull' type64='^{__CTFontCollection=}'/>
</function>
<function name='CTFontCollectionCreateFromAvailableFonts'>
<arg declared_type64='CFDictionaryRef _Nullable' name='options' type64='^{__CFDictionary=}'/>
<retval declared_type64='CTFontCollectionRef _Nonnull' type64='^{__CTFontCollection=}'/>
</function>
<function name='CTFontCollectionCreateMatchingFontDescriptors'>
<arg declared_type64='CTFontCollectionRef _Nonnull' name='collection' type64='^{__CTFontCollection=}'/>
<retval declared_type64='CFArrayRef _Nullable' type64='^{__CFArray=}'/>
</function>
<function name='CTFontCollectionCreateMatchingFontDescriptorsSortedWithCallback'>
<arg declared_type64='CTFontCollectionRef _Nonnull' name='collection' type64='^{__CTFontCollection=}'/>
<arg declared_type64='CTFontCollectionSortDescriptorsCallback _Nullable' function_pointer='true' name='sortCallback' type64='^?'>
<arg declared_type64='CTFontDescriptorRef _Nonnull' type64='^{__CTFontDescriptor=}'/>
<arg declared_type64='CTFontDescriptorRef _Nonnull' type64='^{__CTFontDescriptor=}'/>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='CFComparisonResult' type64='q'/>
</arg>
<arg declared_type64='void * _Nullable' name='refCon' type64='^v'/>
<retval declared_type64='CFArrayRef _Nullable' type64='^{__CFArray=}'/>
</function>
<function name='CTFontCollectionCreateMatchingFontDescriptorsWithOptions'>
<arg declared_type64='CTFontCollectionRef _Nonnull' name='collection' type64='^{__CTFontCollection=}'/>
<arg declared_type64='CFDictionaryRef _Nullable' name='options' type64='^{__CFDictionary=}'/>
<retval declared_type64='CFArrayRef _Nullable' type64='^{__CFArray=}'/>
</function>
<function name='CTFontCollectionCreateWithFontDescriptors'>
<arg declared_type64='CFArrayRef _Nullable' name='queryDescriptors' type64='^{__CFArray=}'/>
<arg declared_type64='CFDictionaryRef _Nullable' name='options' type64='^{__CFDictionary=}'/>
<retval declared_type64='CTFontCollectionRef _Nonnull' type64='^{__CTFontCollection=}'/>
</function>
<function name='CTFontCollectionGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CTFontCopyAttribute'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='attribute' type64='^{__CFString=}'/>
<retval declared_type64='CFTypeRef _Nullable' type64='@'/>
</function>
<function name='CTFontCopyAvailableTables'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg declared_type64='CTFontTableOptions' name='options' type64='I'/>
<retval declared_type64='CFArrayRef _Nullable' type64='^{__CFArray=}'/>
</function>
<function name='CTFontCopyCharacterSet'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CFCharacterSetRef _Nonnull' type64='^{__CFCharacterSet=}'/>
</function>
<function name='CTFontCopyDefaultCascadeListForLanguages'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg declared_type64='CFArrayRef _Nullable' name='languagePrefList' type64='^{__CFArray=}'/>
<retval declared_type64='CFArrayRef _Nullable' type64='^{__CFArray=}'/>
</function>
<function name='CTFontCopyDisplayName'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CFStringRef _Nonnull' type64='^{__CFString=}'/>
</function>
<function name='CTFontCopyFamilyName'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CFStringRef _Nonnull' type64='^{__CFString=}'/>
</function>
<function name='CTFontCopyFeatureSettings'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CFArrayRef _Nullable' type64='^{__CFArray=}'/>
</function>
<function name='CTFontCopyFeatures'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CFArrayRef _Nullable' type64='^{__CFArray=}'/>
</function>
<function name='CTFontCopyFontDescriptor'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CTFontDescriptorRef _Nonnull' type64='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontCopyFullName'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CFStringRef _Nonnull' type64='^{__CFString=}'/>
</function>
<function name='CTFontCopyGraphicsFont'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg declared_type64='CTFontDescriptorRef _Nullable * _Nullable' name='attributes' type64='^^{__CTFontDescriptor}'/>
<retval declared_type64='CGFontRef _Nonnull' type64='^{CGFont=}'/>
</function>
<function name='CTFontCopyLocalizedName'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='nameKey' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef _Nullable * _Nullable' name='actualLanguage' type64='^^{__CFString}'/>
<retval declared_type64='CFStringRef _Nullable' type64='^{__CFString=}'/>
</function>
<function name='CTFontCopyName'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='nameKey' type64='^{__CFString=}'/>
<retval declared_type64='CFStringRef _Nullable' type64='^{__CFString=}'/>
</function>
<function name='CTFontCopyPostScriptName'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CFStringRef _Nonnull' type64='^{__CFString=}'/>
</function>
<function name='CTFontCopySupportedLanguages'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CFArrayRef _Nonnull' type64='^{__CFArray=}'/>
</function>
<function name='CTFontCopyTable'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg declared_type64='CTFontTableTag' name='table' type64='I'/>
<arg declared_type64='CTFontTableOptions' name='options' type64='I'/>
<retval declared_type64='CFDataRef _Nullable' type64='^{__CFData=}'/>
</function>
<function name='CTFontCopyTraits'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CFDictionaryRef _Nonnull' type64='^{__CFDictionary=}'/>
</function>
<function name='CTFontCopyVariation'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CFDictionaryRef _Nullable' type64='^{__CFDictionary=}'/>
</function>
<function name='CTFontCopyVariationAxes'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CFArrayRef _Nullable' type64='^{__CFArray=}'/>
</function>
<function name='CTFontCreateCopyWithAttributes'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg declared_type64='CGFloat' name='size' type64='d'/>
<arg const='true' declared_type64='CGAffineTransform * _Nullable' name='matrix' type64='^{CGAffineTransform=dddddd}'/>
<arg declared_type64='CTFontDescriptorRef _Nullable' name='attributes' type64='^{__CTFontDescriptor=}'/>
<retval declared_type64='CTFontRef _Nonnull' type64='^{__CTFont=}'/>
</function>
<function name='CTFontCreateCopyWithFamily'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg declared_type64='CGFloat' name='size' type64='d'/>
<arg const='true' declared_type64='CGAffineTransform * _Nullable' name='matrix' type64='^{CGAffineTransform=dddddd}'/>
<arg declared_type64='CFStringRef _Nonnull' name='family' type64='^{__CFString=}'/>
<retval declared_type64='CTFontRef _Nullable' type64='^{__CTFont=}'/>
</function>
<function name='CTFontCreateCopyWithSymbolicTraits'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg declared_type64='CGFloat' name='size' type64='d'/>
<arg const='true' declared_type64='CGAffineTransform * _Nullable' name='matrix' type64='^{CGAffineTransform=dddddd}'/>
<arg declared_type64='CTFontSymbolicTraits' name='symTraitValue' type64='I'/>
<arg declared_type64='CTFontSymbolicTraits' name='symTraitMask' type64='I'/>
<retval declared_type64='CTFontRef _Nullable' type64='^{__CTFont=}'/>
</function>
<function name='CTFontCreateForString'>
<arg declared_type64='CTFontRef _Nonnull' name='currentFont' type64='^{__CTFont=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='string' type64='^{__CFString=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<retval declared_type64='CTFontRef _Nonnull' type64='^{__CTFont=}'/>
</function>
<function name='CTFontCreatePathForGlyph'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg declared_type64='CGGlyph' name='glyph' type64='S'/>
<arg const='true' declared_type64='CGAffineTransform * _Nullable' name='matrix' type64='^{CGAffineTransform=dddddd}'/>
<retval declared_type64='CGPathRef _Nullable' type64='^{CGPath=}'/>
</function>
<function name='CTFontCreateUIFontForLanguage'>
<arg declared_type64='CTFontUIFontType' name='uiType' type64='I'/>
<arg declared_type64='CGFloat' name='size' type64='d'/>
<arg declared_type64='CFStringRef _Nullable' name='language' type64='^{__CFString=}'/>
<retval declared_type64='CTFontRef _Nullable' type64='^{__CTFont=}'/>
</function>
<function name='CTFontCreateWithFontDescriptor'>
<arg declared_type64='CTFontDescriptorRef _Nonnull' name='descriptor' type64='^{__CTFontDescriptor=}'/>
<arg declared_type64='CGFloat' name='size' type64='d'/>
<arg const='true' declared_type64='CGAffineTransform * _Nullable' name='matrix' type64='^{CGAffineTransform=dddddd}'/>
<retval declared_type64='CTFontRef _Nonnull' type64='^{__CTFont=}'/>
</function>
<function name='CTFontCreateWithFontDescriptorAndOptions'>
<arg declared_type64='CTFontDescriptorRef _Nonnull' name='descriptor' type64='^{__CTFontDescriptor=}'/>
<arg declared_type64='CGFloat' name='size' type64='d'/>
<arg const='true' declared_type64='CGAffineTransform * _Nullable' name='matrix' type64='^{CGAffineTransform=dddddd}'/>
<arg declared_type64='CTFontOptions' name='options' type64='Q'/>
<retval declared_type64='CTFontRef _Nonnull' type64='^{__CTFont=}'/>
</function>
<function name='CTFontCreateWithGraphicsFont'>
<arg declared_type64='CGFontRef _Nonnull' name='graphicsFont' type64='^{CGFont=}'/>
<arg declared_type64='CGFloat' name='size' type64='d'/>
<arg const='true' declared_type64='CGAffineTransform * _Nullable' name='matrix' type64='^{CGAffineTransform=dddddd}'/>
<arg declared_type64='CTFontDescriptorRef _Nullable' name='attributes' type64='^{__CTFontDescriptor=}'/>
<retval declared_type64='CTFontRef _Nonnull' type64='^{__CTFont=}'/>
</function>
<function name='CTFontCreateWithName'>
<arg declared_type64='CFStringRef _Nonnull' name='name' type64='^{__CFString=}'/>
<arg declared_type64='CGFloat' name='size' type64='d'/>
<arg const='true' declared_type64='CGAffineTransform * _Nullable' name='matrix' type64='^{CGAffineTransform=dddddd}'/>
<retval declared_type64='CTFontRef _Nonnull' type64='^{__CTFont=}'/>
</function>
<function name='CTFontCreateWithNameAndOptions'>
<arg declared_type64='CFStringRef _Nonnull' name='name' type64='^{__CFString=}'/>
<arg declared_type64='CGFloat' name='size' type64='d'/>
<arg const='true' declared_type64='CGAffineTransform * _Nullable' name='matrix' type64='^{CGAffineTransform=dddddd}'/>
<arg declared_type64='CTFontOptions' name='options' type64='Q'/>
<retval declared_type64='CTFontRef _Nonnull' type64='^{__CTFont=}'/>
</function>
<function name='CTFontDescriptorCopyAttribute'>
<arg declared_type64='CTFontDescriptorRef _Nonnull' name='descriptor' type64='^{__CTFontDescriptor=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='attribute' type64='^{__CFString=}'/>
<retval declared_type64='CFTypeRef _Nullable' type64='@'/>
</function>
<function name='CTFontDescriptorCopyAttributes'>
<arg declared_type64='CTFontDescriptorRef _Nonnull' name='descriptor' type64='^{__CTFontDescriptor=}'/>
<retval declared_type64='CFDictionaryRef _Nonnull' type64='^{__CFDictionary=}'/>
</function>
<function name='CTFontDescriptorCopyLocalizedAttribute'>
<arg declared_type64='CTFontDescriptorRef _Nonnull' name='descriptor' type64='^{__CTFontDescriptor=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='attribute' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef _Nullable * _Nullable' name='language' type64='^^{__CFString}'/>
<retval declared_type64='CFTypeRef _Nullable' type64='@'/>
</function>
<function name='CTFontDescriptorCreateCopyWithAttributes'>
<arg declared_type64='CTFontDescriptorRef _Nonnull' name='original' type64='^{__CTFontDescriptor=}'/>
<arg declared_type64='CFDictionaryRef _Nonnull' name='attributes' type64='^{__CFDictionary=}'/>
<retval declared_type64='CTFontDescriptorRef _Nonnull' type64='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateCopyWithFamily'>
<arg declared_type64='CTFontDescriptorRef _Nonnull' name='original' type64='^{__CTFontDescriptor=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='family' type64='^{__CFString=}'/>
<retval declared_type64='CTFontDescriptorRef _Nullable' type64='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateCopyWithFeature'>
<arg declared_type64='CTFontDescriptorRef _Nonnull' name='original' type64='^{__CTFontDescriptor=}'/>
<arg declared_type64='CFNumberRef _Nonnull' name='featureTypeIdentifier' type64='^{__CFNumber=}'/>
<arg declared_type64='CFNumberRef _Nonnull' name='featureSelectorIdentifier' type64='^{__CFNumber=}'/>
<retval declared_type64='CTFontDescriptorRef _Nonnull' type64='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateCopyWithSymbolicTraits'>
<arg declared_type64='CTFontDescriptorRef _Nonnull' name='original' type64='^{__CTFontDescriptor=}'/>
<arg declared_type64='CTFontSymbolicTraits' name='symTraitValue' type64='I'/>
<arg declared_type64='CTFontSymbolicTraits' name='symTraitMask' type64='I'/>
<retval declared_type64='CTFontDescriptorRef _Nullable' type64='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateCopyWithVariation'>
<arg declared_type64='CTFontDescriptorRef _Nonnull' name='original' type64='^{__CTFontDescriptor=}'/>
<arg declared_type64='CFNumberRef _Nonnull' name='variationIdentifier' type64='^{__CFNumber=}'/>
<arg declared_type64='CGFloat' name='variationValue' type64='d'/>
<retval declared_type64='CTFontDescriptorRef _Nonnull' type64='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateMatchingFontDescriptor'>
<arg declared_type64='CTFontDescriptorRef _Nonnull' name='descriptor' type64='^{__CTFontDescriptor=}'/>
<arg declared_type64='CFSetRef _Nullable' name='mandatoryAttributes' type64='^{__CFSet=}'/>
<retval declared_type64='CTFontDescriptorRef _Nullable' type64='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateMatchingFontDescriptors'>
<arg declared_type64='CTFontDescriptorRef _Nonnull' name='descriptor' type64='^{__CTFontDescriptor=}'/>
<arg declared_type64='CFSetRef _Nullable' name='mandatoryAttributes' type64='^{__CFSet=}'/>
<retval declared_type64='CFArrayRef _Nullable' type64='^{__CFArray=}'/>
</function>
<function name='CTFontDescriptorCreateWithAttributes'>
<arg declared_type64='CFDictionaryRef _Nonnull' name='attributes' type64='^{__CFDictionary=}'/>
<retval declared_type64='CTFontDescriptorRef _Nonnull' type64='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateWithNameAndSize'>
<arg declared_type64='CFStringRef _Nonnull' name='name' type64='^{__CFString=}'/>
<arg declared_type64='CGFloat' name='size' type64='d'/>
<retval declared_type64='CTFontDescriptorRef _Nonnull' type64='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CTFontDescriptorMatchFontDescriptorsWithProgressHandler'>
<arg declared_type64='CFArrayRef _Nonnull' name='descriptors' type64='^{__CFArray=}'/>
<arg declared_type64='CFSetRef _Nullable' name='mandatoryAttributes' type64='^{__CFSet=}'/>
<arg declared_type64='CTFontDescriptorProgressHandler _Nonnull' function_pointer='true' name='progressBlock' type64='@?'>
<arg declared_type64='CTFontDescriptorMatchingState' type64='I'/>
<arg declared_type64='CFDictionaryRef _Nonnull' type64='^{__CFDictionary=}'/>
<retval declared_type64='_Bool' type64='B'/>
</arg>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='CTFontDrawGlyphs'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg const='true' declared_type64='CGGlyph*' name='glyphs' type64='^S'/>
<arg const='true' declared_type64='CGPoint*' name='positions' type64='^{CGPoint=dd}'/>
<arg declared_type64='size_t' name='count' type64='Q'/>
<arg declared_type64='CGContextRef _Nonnull' name='context' type64='^{CGContext=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CTFontGetAdvancesForGlyphs'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg declared_type64='CTFontOrientation' name='orientation' type64='I'/>
<arg const='true' declared_type64='CGGlyph*' name='glyphs' type64='^S'/>
<arg declared_type64='CGSize * _Nullable' name='advances' type64='^{CGSize=dd}'/>
<arg declared_type64='CFIndex' name='count' type64='q'/>
<retval declared_type64='double' type64='d'/>
</function>
<function name='CTFontGetAscent'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CGFloat' type64='d'/>
</function>
<function name='CTFontGetBoundingBox'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='CTFontGetBoundingRectsForGlyphs'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg declared_type64='CTFontOrientation' name='orientation' type64='I'/>
<arg const='true' declared_type64='CGGlyph*' name='glyphs' type64='^S'/>
<arg declared_type64='CGRect * _Nullable' name='boundingRects' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type64='CFIndex' name='count' type64='q'/>
<retval declared_type64='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='CTFontGetCapHeight'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CGFloat' type64='d'/>
</function>
<function name='CTFontGetDescent'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CGFloat' type64='d'/>
</function>
<function name='CTFontGetGlyphCount'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CTFontGetGlyphWithName'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='glyphName' type64='^{__CFString=}'/>
<retval declared_type64='CGGlyph' type64='S'/>
</function>
<function name='CTFontGetGlyphsForCharacters'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg const='true' declared_type64='UniChar*' name='characters' type64='^S'/>
<arg declared_type64='CGGlyph*' name='glyphs' type64='^S'/>
<arg declared_type64='CFIndex' name='count' type64='q'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='CTFontGetLeading'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CGFloat' type64='d'/>
</function>
<function name='CTFontGetLigatureCaretPositions'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg declared_type64='CGGlyph' name='glyph' type64='S'/>
<arg declared_type64='CGFloat * _Nullable' name='positions' type64='^d'/>
<arg declared_type64='CFIndex' name='maxPositions' type64='q'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CTFontGetMatrix'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CGAffineTransform' type64='{CGAffineTransform=dddddd}'/>
</function>
<function name='CTFontGetOpticalBoundsForGlyphs'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg const='true' declared_type64='CGGlyph*' name='glyphs' type64='^S'/>
<arg declared_type64='CGRect * _Nullable' name='boundingRects' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type64='CFIndex' name='count' type64='q'/>
<arg declared_type64='CFOptionFlags' name='options' type64='Q'/>
<retval declared_type64='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='CTFontGetSize'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CGFloat' type64='d'/>
</function>
<function name='CTFontGetSlantAngle'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CGFloat' type64='d'/>
</function>
<function name='CTFontGetStringEncoding'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CFStringEncoding' type64='I'/>
</function>
<function name='CTFontGetSymbolicTraits'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CTFontSymbolicTraits' type64='I'/>
</function>
<function name='CTFontGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CTFontGetUnderlinePosition'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CGFloat' type64='d'/>
</function>
<function name='CTFontGetUnderlineThickness'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CGFloat' type64='d'/>
</function>
<function name='CTFontGetUnitsPerEm'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='unsigned int' type64='I'/>
</function>
<function name='CTFontGetVerticalTranslationsForGlyphs'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg const='true' declared_type64='CGGlyph*' name='glyphs' type64='^S'/>
<arg declared_type64='CGSize*' name='translations' type64='^{CGSize=dd}'/>
<arg declared_type64='CFIndex' name='count' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CTFontGetXHeight'>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<retval declared_type64='CGFloat' type64='d'/>
</function>
<function name='CTFontManagerCopyAvailableFontFamilyNames'>
<retval declared_type64='CFArrayRef _Nonnull' type64='^{__CFArray=}'/>
</function>
<function name='CTFontManagerCopyAvailablePostScriptNames'>
<retval declared_type64='CFArrayRef _Nonnull' type64='^{__CFArray=}'/>
</function>
<function name='CTFontManagerCreateFontDescriptorFromData'>
<arg declared_type64='CFDataRef _Nonnull' name='data' type64='^{__CFData=}'/>
<retval declared_type64='CTFontDescriptorRef _Nullable' type64='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontManagerCreateFontDescriptorsFromURL'>
<arg declared_type64='CFURLRef _Nonnull' name='fileURL' type64='^{__CFURL=}'/>
<retval declared_type64='CFArrayRef _Nullable' type64='^{__CFArray=}'/>
</function>
<function name='CTFontManagerRegisterFontsForURL'>
<arg declared_type64='CFURLRef _Nonnull' name='fontURL' type64='^{__CFURL=}'/>
<arg declared_type64='CTFontManagerScope' name='scope' type64='I'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='CTFontManagerRegisterFontsForURLs'>
<arg declared_type64='CFArrayRef _Nonnull' name='fontURLs' type64='^{__CFArray=}'/>
<arg declared_type64='CTFontManagerScope' name='scope' type64='I'/>
<arg declared_type64='CFArrayRef _Nullable * _Nullable' name='errors' type64='^^{__CFArray}'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='CTFontManagerRegisterGraphicsFont'>
<arg declared_type64='CGFontRef _Nonnull' name='font' type64='^{CGFont=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='CTFontManagerUnregisterFontsForURL'>
<arg declared_type64='CFURLRef _Nonnull' name='fontURL' type64='^{__CFURL=}'/>
<arg declared_type64='CTFontManagerScope' name='scope' type64='I'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='CTFontManagerUnregisterFontsForURLs'>
<arg declared_type64='CFArrayRef _Nonnull' name='fontURLs' type64='^{__CFArray=}'/>
<arg declared_type64='CTFontManagerScope' name='scope' type64='I'/>
<arg declared_type64='CFArrayRef _Nullable * _Nullable' name='errors' type64='^^{__CFArray}'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='CTFontManagerUnregisterGraphicsFont'>
<arg declared_type64='CGFontRef _Nonnull' name='font' type64='^{CGFont=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='CTFrameDraw'>
<arg declared_type64='CTFrameRef _Nonnull' name='frame' type64='^{__CTFrame=}'/>
<arg declared_type64='CGContextRef _Nonnull' name='context' type64='^{CGContext=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CTFrameGetFrameAttributes'>
<arg declared_type64='CTFrameRef _Nonnull' name='frame' type64='^{__CTFrame=}'/>
<retval declared_type64='CFDictionaryRef _Nullable' type64='^{__CFDictionary=}'/>
</function>
<function name='CTFrameGetLineOrigins'>
<arg declared_type64='CTFrameRef _Nonnull' name='frame' type64='^{__CTFrame=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CGPoint*' name='origins' type64='^{CGPoint=dd}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CTFrameGetLines'>
<arg declared_type64='CTFrameRef _Nonnull' name='frame' type64='^{__CTFrame=}'/>
<retval declared_type64='CFArrayRef _Nonnull' type64='^{__CFArray=}'/>
</function>
<function name='CTFrameGetPath'>
<arg declared_type64='CTFrameRef _Nonnull' name='frame' type64='^{__CTFrame=}'/>
<retval declared_type64='CGPathRef _Nonnull' type64='^{CGPath=}'/>
</function>
<function name='CTFrameGetStringRange'>
<arg declared_type64='CTFrameRef _Nonnull' name='frame' type64='^{__CTFrame=}'/>
<retval declared_type64='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CTFrameGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CTFrameGetVisibleStringRange'>
<arg declared_type64='CTFrameRef _Nonnull' name='frame' type64='^{__CTFrame=}'/>
<retval declared_type64='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CTFramesetterCreateFrame'>
<arg declared_type64='CTFramesetterRef _Nonnull' name='framesetter' type64='^{__CTFramesetter=}'/>
<arg declared_type64='CFRange' name='stringRange' type64='{_CFRange=qq}'/>
<arg declared_type64='CGPathRef _Nonnull' name='path' type64='^{CGPath=}'/>
<arg declared_type64='CFDictionaryRef _Nullable' name='frameAttributes' type64='^{__CFDictionary=}'/>
<retval declared_type64='CTFrameRef _Nonnull' type64='^{__CTFrame=}'/>
</function>
<function name='CTFramesetterCreateWithAttributedString'>
<arg declared_type64='CFAttributedStringRef _Nonnull' name='string' type64='^{__CFAttributedString=}'/>
<retval declared_type64='CTFramesetterRef _Nonnull' type64='^{__CTFramesetter=}'/>
</function>
<function name='CTFramesetterCreateWithTypesetter'>
<arg declared_type64='CTTypesetterRef _Nonnull' name='typesetter' type64='^{__CTTypesetter=}'/>
<retval declared_type64='CTFramesetterRef _Nonnull' type64='^{__CTFramesetter=}'/>
</function>
<function name='CTFramesetterGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CTFramesetterGetTypesetter'>
<arg declared_type64='CTFramesetterRef _Nonnull' name='framesetter' type64='^{__CTFramesetter=}'/>
<retval declared_type64='CTTypesetterRef _Nonnull' type64='^{__CTTypesetter=}'/>
</function>
<function name='CTFramesetterSuggestFrameSizeWithConstraints'>
<arg declared_type64='CTFramesetterRef _Nonnull' name='framesetter' type64='^{__CTFramesetter=}'/>
<arg declared_type64='CFRange' name='stringRange' type64='{_CFRange=qq}'/>
<arg declared_type64='CFDictionaryRef _Nullable' name='frameAttributes' type64='^{__CFDictionary=}'/>
<arg declared_type64='CGSize' name='constraints' type64='{CGSize=dd}'/>
<arg declared_type64='CFRange * _Nullable' name='fitRange' type64='^{_CFRange=qq}'/>
<retval declared_type64='CGSize' type64='{CGSize=dd}'/>
</function>
<function name='CTGetCoreTextVersion'>
<retval declared_type64='uint32_t' type64='I'/>
</function>
<function name='CTGlyphInfoCreateWithCharacterIdentifier'>
<arg declared_type64='CGFontIndex' name='cid' type64='S'/>
<arg declared_type64='CTCharacterCollection' name='collection' type64='S'/>
<arg declared_type64='CFStringRef _Nonnull' name='baseString' type64='^{__CFString=}'/>
<retval declared_type64='CTGlyphInfoRef _Nonnull' type64='^{__CTGlyphInfo=}'/>
</function>
<function name='CTGlyphInfoCreateWithGlyph'>
<arg declared_type64='CGGlyph' name='glyph' type64='S'/>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='baseString' type64='^{__CFString=}'/>
<retval declared_type64='CTGlyphInfoRef _Nonnull' type64='^{__CTGlyphInfo=}'/>
</function>
<function name='CTGlyphInfoCreateWithGlyphName'>
<arg declared_type64='CFStringRef _Nonnull' name='glyphName' type64='^{__CFString=}'/>
<arg declared_type64='CTFontRef _Nonnull' name='font' type64='^{__CTFont=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='baseString' type64='^{__CFString=}'/>
<retval declared_type64='CTGlyphInfoRef _Nonnull' type64='^{__CTGlyphInfo=}'/>
</function>
<function name='CTGlyphInfoGetCharacterCollection'>
<arg declared_type64='CTGlyphInfoRef _Nonnull' name='glyphInfo' type64='^{__CTGlyphInfo=}'/>
<retval declared_type64='CTCharacterCollection' type64='S'/>
</function>
<function name='CTGlyphInfoGetCharacterIdentifier'>
<arg declared_type64='CTGlyphInfoRef _Nonnull' name='glyphInfo' type64='^{__CTGlyphInfo=}'/>
<retval declared_type64='CGFontIndex' type64='S'/>
</function>
<function name='CTGlyphInfoGetGlyphName'>
<arg declared_type64='CTGlyphInfoRef _Nonnull' name='glyphInfo' type64='^{__CTGlyphInfo=}'/>
<retval declared_type64='CFStringRef _Nullable' type64='^{__CFString=}'/>
</function>
<function name='CTGlyphInfoGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CTLineCreateJustifiedLine'>
<arg declared_type64='CTLineRef _Nonnull' name='line' type64='^{__CTLine=}'/>
<arg declared_type64='CGFloat' name='justificationFactor' type64='d'/>
<arg declared_type64='double' name='justificationWidth' type64='d'/>
<retval declared_type64='CTLineRef _Nullable' type64='^{__CTLine=}'/>
</function>
<function name='CTLineCreateTruncatedLine'>
<arg declared_type64='CTLineRef _Nonnull' name='line' type64='^{__CTLine=}'/>
<arg declared_type64='double' name='width' type64='d'/>
<arg declared_type64='CTLineTruncationType' name='truncationType' type64='I'/>
<arg declared_type64='CTLineRef _Nullable' name='truncationToken' type64='^{__CTLine=}'/>
<retval declared_type64='CTLineRef _Nullable' type64='^{__CTLine=}'/>
</function>
<function name='CTLineCreateWithAttributedString'>
<arg declared_type64='CFAttributedStringRef _Nonnull' name='attrString' type64='^{__CFAttributedString=}'/>
<retval declared_type64='CTLineRef _Nonnull' type64='^{__CTLine=}'/>
</function>
<function name='CTLineDraw'>
<arg declared_type64='CTLineRef _Nonnull' name='line' type64='^{__CTLine=}'/>
<arg declared_type64='CGContextRef _Nonnull' name='context' type64='^{CGContext=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CTLineEnumerateCaretOffsets'>
<arg declared_type64='CTLineRef _Nonnull' name='line' type64='^{__CTLine=}'/>
<arg declared_type64='void (^ _Nonnull)(double, CFIndex, _Bool, _Bool * _Nonnull)' function_pointer='true' name='block' type64='@?'>
<arg declared_type64='double' type64='d'/>
<arg declared_type64='CFIndex' type64='q'/>
<arg declared_type64='_Bool' type64='B'/>
<arg declared_type64='_Bool * _Nonnull' type64='^B'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CTLineGetBoundsWithOptions'>
<arg declared_type64='CTLineRef _Nonnull' name='line' type64='^{__CTLine=}'/>
<arg declared_type64='CTLineBoundsOptions' name='options' type64='Q'/>
<retval declared_type64='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='CTLineGetGlyphCount'>
<arg declared_type64='CTLineRef _Nonnull' name='line' type64='^{__CTLine=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CTLineGetGlyphRuns'>
<arg declared_type64='CTLineRef _Nonnull' name='line' type64='^{__CTLine=}'/>
<retval declared_type64='CFArrayRef _Nonnull' type64='^{__CFArray=}'/>
</function>
<function name='CTLineGetImageBounds'>
<arg declared_type64='CTLineRef _Nonnull' name='line' type64='^{__CTLine=}'/>
<arg declared_type64='CGContextRef _Nullable' name='context' type64='^{CGContext=}'/>
<retval declared_type64='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='CTLineGetOffsetForStringIndex'>
<arg declared_type64='CTLineRef _Nonnull' name='line' type64='^{__CTLine=}'/>
<arg declared_type64='CFIndex' name='charIndex' type64='q'/>
<arg declared_type64='CGFloat * _Nullable' name='secondaryOffset' type64='^d'/>
<retval declared_type64='CGFloat' type64='d'/>
</function>
<function name='CTLineGetPenOffsetForFlush'>
<arg declared_type64='CTLineRef _Nonnull' name='line' type64='^{__CTLine=}'/>
<arg declared_type64='CGFloat' name='flushFactor' type64='d'/>
<arg declared_type64='double' name='flushWidth' type64='d'/>
<retval declared_type64='double' type64='d'/>
</function>
<function name='CTLineGetStringIndexForPosition'>
<arg declared_type64='CTLineRef _Nonnull' name='line' type64='^{__CTLine=}'/>
<arg declared_type64='CGPoint' name='position' type64='{CGPoint=dd}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CTLineGetStringRange'>
<arg declared_type64='CTLineRef _Nonnull' name='line' type64='^{__CTLine=}'/>
<retval declared_type64='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CTLineGetTrailingWhitespaceWidth'>
<arg declared_type64='CTLineRef _Nonnull' name='line' type64='^{__CTLine=}'/>
<retval declared_type64='double' type64='d'/>
</function>
<function name='CTLineGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CTLineGetTypographicBounds'>
<arg declared_type64='CTLineRef _Nonnull' name='line' type64='^{__CTLine=}'/>
<arg declared_type64='CGFloat * _Nullable' name='ascent' type64='^d'/>
<arg declared_type64='CGFloat * _Nullable' name='descent' type64='^d'/>
<arg declared_type64='CGFloat * _Nullable' name='leading' type64='^d'/>
<retval declared_type64='double' type64='d'/>
</function>
<function name='CTParagraphStyleCreate'>
<arg const='true' declared_type64='CTParagraphStyleSetting * _Nullable' name='settings' type64='^{CTParagraphStyleSetting=IQ^v}'/>
<arg declared_type64='size_t' name='settingCount' type64='Q'/>
<retval declared_type64='CTParagraphStyleRef _Nonnull' type64='^{__CTParagraphStyle=}'/>
</function>
<function name='CTParagraphStyleCreateCopy'>
<arg declared_type64='CTParagraphStyleRef _Nonnull' name='paragraphStyle' type64='^{__CTParagraphStyle=}'/>
<retval declared_type64='CTParagraphStyleRef _Nonnull' type64='^{__CTParagraphStyle=}'/>
</function>
<function name='CTParagraphStyleGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CTParagraphStyleGetValueForSpecifier'>
<arg declared_type64='CTParagraphStyleRef _Nonnull' name='paragraphStyle' type64='^{__CTParagraphStyle=}'/>
<arg declared_type64='CTParagraphStyleSpecifier' name='spec' type64='I'/>
<arg declared_type64='size_t' name='valueBufferSize' type64='Q'/>
<arg declared_type64='void * _Nonnull' name='valueBuffer' type64='^v'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='CTRubyAnnotationCreate'>
<arg declared_type64='CTRubyAlignment' name='alignment' type64='C'/>
<arg declared_type64='CTRubyOverhang' name='overhang' type64='C'/>
<arg declared_type64='CGFloat' name='sizeFactor' type64='d'/>
<arg declared_type64='CFStringRef _Nullable*' name='text' type64='^^{__CFString}'/>
<retval declared_type64='CTRubyAnnotationRef _Nonnull' type64='^{__CTRubyAnnotation=}'/>
</function>
<function name='CTRubyAnnotationCreateCopy'>
<arg declared_type64='CTRubyAnnotationRef _Nonnull' name='rubyAnnotation' type64='^{__CTRubyAnnotation=}'/>
<retval declared_type64='CTRubyAnnotationRef _Nonnull' type64='^{__CTRubyAnnotation=}'/>
</function>
<function name='CTRubyAnnotationCreateWithAttributes'>
<arg declared_type64='CTRubyAlignment' name='alignment' type64='C'/>
<arg declared_type64='CTRubyOverhang' name='overhang' type64='C'/>
<arg declared_type64='CTRubyPosition' name='position' type64='C'/>
<arg declared_type64='CFStringRef _Nonnull' name='string' type64='^{__CFString=}'/>
<arg declared_type64='CFDictionaryRef _Nonnull' name='attributes' type64='^{__CFDictionary=}'/>
<retval declared_type64='CTRubyAnnotationRef _Nonnull' type64='^{__CTRubyAnnotation=}'/>
</function>
<function name='CTRubyAnnotationGetAlignment'>
<arg declared_type64='CTRubyAnnotationRef _Nonnull' name='rubyAnnotation' type64='^{__CTRubyAnnotation=}'/>
<retval declared_type64='CTRubyAlignment' type64='C'/>
</function>
<function name='CTRubyAnnotationGetOverhang'>
<arg declared_type64='CTRubyAnnotationRef _Nonnull' name='rubyAnnotation' type64='^{__CTRubyAnnotation=}'/>
<retval declared_type64='CTRubyOverhang' type64='C'/>
</function>
<function name='CTRubyAnnotationGetSizeFactor'>
<arg declared_type64='CTRubyAnnotationRef _Nonnull' name='rubyAnnotation' type64='^{__CTRubyAnnotation=}'/>
<retval declared_type64='CGFloat' type64='d'/>
</function>
<function name='CTRubyAnnotationGetTextForPosition'>
<arg declared_type64='CTRubyAnnotationRef _Nonnull' name='rubyAnnotation' type64='^{__CTRubyAnnotation=}'/>
<arg declared_type64='CTRubyPosition' name='position' type64='C'/>
<retval declared_type64='CFStringRef _Nullable' type64='^{__CFString=}'/>
</function>
<function name='CTRubyAnnotationGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CTRunDelegateCreate'>
<arg const='true' declared_type64='CTRunDelegateCallbacks * _Nonnull' name='callbacks' type64='^{_CTRunDelegateCallbacks=q^?^?^?^?}'/>
<arg declared_type64='void * _Nullable' name='refCon' type64='^v'/>
<retval declared_type64='CTRunDelegateRef _Nullable' type64='^{__CTRunDelegate=}'/>
</function>
<function name='CTRunDelegateGetRefCon'>
<arg declared_type64='CTRunDelegateRef _Nonnull' name='runDelegate' type64='^{__CTRunDelegate=}'/>
<retval declared_type64='void * _Nonnull' type64='^v'/>
</function>
<function name='CTRunDelegateGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CTRunDraw'>
<arg declared_type64='CTRunRef _Nonnull' name='run' type64='^{__CTRun=}'/>
<arg declared_type64='CGContextRef _Nonnull' name='context' type64='^{CGContext=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CTRunGetAdvances'>
<arg declared_type64='CTRunRef _Nonnull' name='run' type64='^{__CTRun=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CGSize*' name='buffer' type64='^{CGSize=dd}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CTRunGetAdvancesPtr'>
<arg declared_type64='CTRunRef _Nonnull' name='run' type64='^{__CTRun=}'/>
<retval const='true' declared_type64='CGSize * _Nullable' type64='^{CGSize=dd}'/>
</function>
<function name='CTRunGetAttributes'>
<arg declared_type64='CTRunRef _Nonnull' name='run' type64='^{__CTRun=}'/>
<retval declared_type64='CFDictionaryRef _Nonnull' type64='^{__CFDictionary=}'/>
</function>
<function name='CTRunGetGlyphCount'>
<arg declared_type64='CTRunRef _Nonnull' name='run' type64='^{__CTRun=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CTRunGetGlyphs'>
<arg declared_type64='CTRunRef _Nonnull' name='run' type64='^{__CTRun=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CGGlyph*' name='buffer' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CTRunGetGlyphsPtr'>
<arg declared_type64='CTRunRef _Nonnull' name='run' type64='^{__CTRun=}'/>
<retval const='true' declared_type64='CGGlyph * _Nullable' type64='^S'/>
</function>
<function name='CTRunGetImageBounds'>
<arg declared_type64='CTRunRef _Nonnull' name='run' type64='^{__CTRun=}'/>
<arg declared_type64='CGContextRef _Nullable' name='context' type64='^{CGContext=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<retval declared_type64='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='CTRunGetPositions'>
<arg declared_type64='CTRunRef _Nonnull' name='run' type64='^{__CTRun=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CGPoint*' name='buffer' type64='^{CGPoint=dd}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CTRunGetPositionsPtr'>
<arg declared_type64='CTRunRef _Nonnull' name='run' type64='^{__CTRun=}'/>
<retval const='true' declared_type64='CGPoint * _Nullable' type64='^{CGPoint=dd}'/>
</function>
<function name='CTRunGetStatus'>
<arg declared_type64='CTRunRef _Nonnull' name='run' type64='^{__CTRun=}'/>
<retval declared_type64='CTRunStatus' type64='I'/>
</function>
<function name='CTRunGetStringIndices'>
<arg declared_type64='CTRunRef _Nonnull' name='run' type64='^{__CTRun=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CFIndex*' name='buffer' type64='^q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CTRunGetStringIndicesPtr'>
<arg declared_type64='CTRunRef _Nonnull' name='run' type64='^{__CTRun=}'/>
<retval const='true' declared_type64='CFIndex * _Nullable' type64='^q'/>
</function>
<function name='CTRunGetStringRange'>
<arg declared_type64='CTRunRef _Nonnull' name='run' type64='^{__CTRun=}'/>
<retval declared_type64='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CTRunGetTextMatrix'>
<arg declared_type64='CTRunRef _Nonnull' name='run' type64='^{__CTRun=}'/>
<retval declared_type64='CGAffineTransform' type64='{CGAffineTransform=dddddd}'/>
</function>
<function name='CTRunGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CTRunGetTypographicBounds'>
<arg declared_type64='CTRunRef _Nonnull' name='run' type64='^{__CTRun=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CGFloat * _Nullable' name='ascent' type64='^d'/>
<arg declared_type64='CGFloat * _Nullable' name='descent' type64='^d'/>
<arg declared_type64='CGFloat * _Nullable' name='leading' type64='^d'/>
<retval declared_type64='double' type64='d'/>
</function>
<function name='CTTextTabCreate'>
<arg declared_type64='CTTextAlignment' name='alignment' type64='C'/>
<arg declared_type64='double' name='location' type64='d'/>
<arg declared_type64='CFDictionaryRef _Nullable' name='options' type64='^{__CFDictionary=}'/>
<retval declared_type64='CTTextTabRef _Nonnull' type64='^{__CTTextTab=}'/>
</function>
<function name='CTTextTabGetAlignment'>
<arg declared_type64='CTTextTabRef _Nonnull' name='tab' type64='^{__CTTextTab=}'/>
<retval declared_type64='CTTextAlignment' type64='C'/>
</function>
<function name='CTTextTabGetLocation'>
<arg declared_type64='CTTextTabRef _Nonnull' name='tab' type64='^{__CTTextTab=}'/>
<retval declared_type64='double' type64='d'/>
</function>
<function name='CTTextTabGetOptions'>
<arg declared_type64='CTTextTabRef _Nonnull' name='tab' type64='^{__CTTextTab=}'/>
<retval declared_type64='CFDictionaryRef _Nullable' type64='^{__CFDictionary=}'/>
</function>
<function name='CTTextTabGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CTTypesetterCreateLine'>
<arg declared_type64='CTTypesetterRef _Nonnull' name='typesetter' type64='^{__CTTypesetter=}'/>
<arg declared_type64='CFRange' name='stringRange' type64='{_CFRange=qq}'/>
<retval declared_type64='CTLineRef _Nonnull' type64='^{__CTLine=}'/>
</function>
<function name='CTTypesetterCreateLineWithOffset'>
<arg declared_type64='CTTypesetterRef _Nonnull' name='typesetter' type64='^{__CTTypesetter=}'/>
<arg declared_type64='CFRange' name='stringRange' type64='{_CFRange=qq}'/>
<arg declared_type64='double' name='offset' type64='d'/>
<retval declared_type64='CTLineRef _Nonnull' type64='^{__CTLine=}'/>
</function>
<function name='CTTypesetterCreateWithAttributedString'>
<arg declared_type64='CFAttributedStringRef _Nonnull' name='string' type64='^{__CFAttributedString=}'/>
<retval declared_type64='CTTypesetterRef _Nonnull' type64='^{__CTTypesetter=}'/>
</function>
<function name='CTTypesetterCreateWithAttributedStringAndOptions'>
<arg declared_type64='CFAttributedStringRef _Nonnull' name='string' type64='^{__CFAttributedString=}'/>
<arg declared_type64='CFDictionaryRef _Nullable' name='options' type64='^{__CFDictionary=}'/>
<retval declared_type64='CTTypesetterRef _Nullable' type64='^{__CTTypesetter=}'/>
</function>
<function name='CTTypesetterGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CTTypesetterSuggestClusterBreak'>
<arg declared_type64='CTTypesetterRef _Nonnull' name='typesetter' type64='^{__CTTypesetter=}'/>
<arg declared_type64='CFIndex' name='startIndex' type64='q'/>
<arg declared_type64='double' name='width' type64='d'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CTTypesetterSuggestClusterBreakWithOffset'>
<arg declared_type64='CTTypesetterRef _Nonnull' name='typesetter' type64='^{__CTTypesetter=}'/>
<arg declared_type64='CFIndex' name='startIndex' type64='q'/>
<arg declared_type64='double' name='width' type64='d'/>
<arg declared_type64='double' name='offset' type64='d'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CTTypesetterSuggestLineBreak'>
<arg declared_type64='CTTypesetterRef _Nonnull' name='typesetter' type64='^{__CTTypesetter=}'/>
<arg declared_type64='CFIndex' name='startIndex' type64='q'/>
<arg declared_type64='double' name='width' type64='d'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CTTypesetterSuggestLineBreakWithOffset'>
<arg declared_type64='CTTypesetterRef _Nonnull' name='typesetter' type64='^{__CTTypesetter=}'/>
<arg declared_type64='CFIndex' name='startIndex' type64='q'/>
<arg declared_type64='double' name='width' type64='d'/>
<arg declared_type64='double' name='offset' type64='d'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
</signatures>
