<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSCore.framework'/>
<depends_on path='/System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSImage.framework'/>
<depends_on path='/System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSNeuralNetwork.framework'/>
<depends_on path='/System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSMatrix.framework'/>
<depends_on path='/System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSRayIntersector.framework'/>
<depends_on path='/System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSNDArray.framework'/>
<depends_on path='/System/Library/Frameworks/Metal.framework'/>
<depends_on path='/System/Library/Frameworks/Foundation.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<enum name='MPSDeviceOptionsDefault' value64='0'/>
<enum name='MPSDeviceOptionsLowPower' value64='1'/>
<enum name='MPSDeviceOptionsSkipRemovable' value64='2'/>
<enum name='MetalPerformanceShaders_h' value64='1'/>
<function name='MPSGetPreferredDevice'>
<arg declared_type64='MPSDeviceOptions' name='options' type64='Q'/>
<retval declared_type64='id _Nullable' type64='@'/>
</function>
<function name='MPSHintTemporaryMemoryHighWaterMark'>
<arg declared_type64='id _Nonnull' name='cmdBuf' type64='@'/>
<arg declared_type64='NSUInteger' name='bytes' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='MPSSetHeapCacheDuration'>
<arg declared_type64='id _Nonnull' name='cmdBuf' type64='@'/>
<arg declared_type64='double' name='seconds' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='MPSSupportsMTLDevice'>
<arg declared_type64='id _Nullable' name='device' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</function>
<struct name='MPSCustomKernelArgumentCount' type64='{MPSCustomKernelArgumentCount=&quot;destinationTextureCount&quot;Q&quot;sourceTextureCount&quot;Q&quot;broadcastTextureCount&quot;Q}'>
<field declared_type64='unsigned long' name='destinationTextureCount' type64='Q'/>
<field declared_type64='unsigned long' name='sourceTextureCount' type64='Q'/>
<field declared_type64='unsigned long' name='broadcastTextureCount' type64='Q'/>
</struct>
<struct name='MPSCustomKernelInfo' type64='{_MPSCustomKernelInfo=&quot;clipOrigin&quot;&quot;clipSize&quot;&quot;destinationFeatureChannels&quot;S&quot;destImageArraySize&quot;S&quot;sourceImageCount&quot;S&quot;threadgroupSize&quot;S&quot;subbatchIndex&quot;S&quot;subbatchStride&quot;S&quot;idiv&quot;{_MPSIntegerDivisionParams=&quot;divisor&quot;S&quot;recip&quot;S&quot;addend&quot;S&quot;shift&quot;S}}'>
<field declared_type64='vector_ushort4' name='clipOrigin' type64=''/>
<field declared_type64='vector_ushort4' name='clipSize' type64=''/>
<field declared_type64='uint16_t' name='destinationFeatureChannels' type64='S'/>
<field declared_type64='uint16_t' name='destImageArraySize' type64='S'/>
<field declared_type64='uint16_t' name='sourceImageCount' type64='S'/>
<field declared_type64='uint16_t' name='threadgroupSize' type64='S'/>
<field declared_type64='uint16_t' name='subbatchIndex' type64='S'/>
<field declared_type64='uint16_t' name='subbatchStride' type64='S'/>
<field declared_type64='MPSIntegerDivisionParams' name='idiv' type64='{_MPSIntegerDivisionParams=&quot;divisor&quot;S&quot;recip&quot;S&quot;addend&quot;S&quot;shift&quot;S}'/>
</struct>
<struct name='MPSCustomKernelSourceInfo' type64='{_MPSCustomKernelSourceInfo=&quot;kernelOrigin&quot;&quot;kernelPhase&quot;&quot;kernelSize&quot;&quot;offset&quot;&quot;stride&quot;&quot;dilationRate&quot;&quot;featureChannelOffset&quot;S&quot;featureChannels&quot;S&quot;imageArrayOffset&quot;S&quot;imageArraySize&quot;S}'>
<field declared_type64='vector_short2' name='kernelOrigin' type64=''/>
<field declared_type64='vector_ushort2' name='kernelPhase' type64=''/>
<field declared_type64='vector_ushort2' name='kernelSize' type64=''/>
<field declared_type64='vector_short2' name='offset' type64=''/>
<field declared_type64='vector_ushort2' name='stride' type64=''/>
<field declared_type64='vector_ushort2' name='dilationRate' type64=''/>
<field declared_type64='uint16_t' name='featureChannelOffset' type64='S'/>
<field declared_type64='uint16_t' name='featureChannels' type64='S'/>
<field declared_type64='uint16_t' name='imageArrayOffset' type64='S'/>
<field declared_type64='uint16_t' name='imageArraySize' type64='S'/>
</struct>
<struct name='MPSDimensionSlice' type64='{MPSDimensionSlice=&quot;start&quot;Q&quot;length&quot;Q}'>
<field declared_type64='NSUInteger' name='start' type64='Q'/>
<field declared_type64='NSUInteger' name='length' type64='Q'/>
</struct>
<struct name='MPSImageCoordinate' type64='{MPSImageCoordinate=&quot;x&quot;Q&quot;y&quot;Q&quot;channel&quot;Q}'>
<field declared_type64='NSUInteger' name='x' type64='Q'/>
<field declared_type64='NSUInteger' name='y' type64='Q'/>
<field declared_type64='NSUInteger' name='channel' type64='Q'/>
</struct>
<struct name='MPSImageReadWriteParams' type64='{_MPSImageReadWriteParams=&quot;featureChannelOffset&quot;Q&quot;numberOfFeatureChannelsToReadWrite&quot;Q}'>
<field declared_type64='NSUInteger' name='featureChannelOffset' type64='Q'/>
<field declared_type64='NSUInteger' name='numberOfFeatureChannelsToReadWrite' type64='Q'/>
</struct>
<struct name='MPSImageRegion' type64='{MPSImageRegion=&quot;offset&quot;{MPSImageCoordinate=&quot;x&quot;Q&quot;y&quot;Q&quot;channel&quot;Q}&quot;size&quot;{MPSImageCoordinate=&quot;x&quot;Q&quot;y&quot;Q&quot;channel&quot;Q}}'>
<field declared_type64='MPSImageCoordinate' name='offset' type64='{MPSImageCoordinate=&quot;x&quot;Q&quot;y&quot;Q&quot;channel&quot;Q}'/>
<field declared_type64='MPSImageCoordinate' name='size' type64='{MPSImageCoordinate=&quot;x&quot;Q&quot;y&quot;Q&quot;channel&quot;Q}'/>
</struct>
<struct name='MPSIntegerDivisionParams' type64='{_MPSIntegerDivisionParams=&quot;divisor&quot;S&quot;recip&quot;S&quot;addend&quot;S&quot;shift&quot;S}'>
<field declared_type64='uint16_t' name='divisor' type64='S'/>
<field declared_type64='uint16_t' name='recip' type64='S'/>
<field declared_type64='uint16_t' name='addend' type64='S'/>
<field declared_type64='uint16_t' name='shift' type64='S'/>
</struct>
<struct name='MPSMatrixOffset' type64='{_MPSMatrixOffset=&quot;rowOffset&quot;I&quot;columnOffset&quot;I}'>
<field declared_type64='uint32_t' name='rowOffset' type64='I'/>
<field declared_type64='uint32_t' name='columnOffset' type64='I'/>
</struct>
<struct name='MPSOffset' type64='{_MPSOffset=&quot;x&quot;q&quot;y&quot;q&quot;z&quot;q}'>
<field declared_type64='NSInteger' name='x' type64='q'/>
<field declared_type64='NSInteger' name='y' type64='q'/>
<field declared_type64='NSInteger' name='z' type64='q'/>
</struct>
<struct name='MPSOrigin' type64='{MPSOrigin=&quot;x&quot;d&quot;y&quot;d&quot;z&quot;d}'>
<field declared_type64='double' name='x' type64='d'/>
<field declared_type64='double' name='y' type64='d'/>
<field declared_type64='double' name='z' type64='d'/>
</struct>
<struct name='MPSRegion' type64='{MPSRegion=&quot;origin&quot;{MPSOrigin=&quot;x&quot;d&quot;y&quot;d&quot;z&quot;d}&quot;size&quot;{MPSSize=&quot;width&quot;d&quot;height&quot;d&quot;depth&quot;d}}'>
<field declared_type64='MPSOrigin' name='origin' type64='{MPSOrigin=&quot;x&quot;d&quot;y&quot;d&quot;z&quot;d}'/>
<field declared_type64='MPSSize' name='size' type64='{MPSSize=&quot;width&quot;d&quot;height&quot;d&quot;depth&quot;d}'/>
</struct>
<struct name='MPSScaleTransform' type64='{MPSScaleTransform=&quot;scaleX&quot;d&quot;scaleY&quot;d&quot;translateX&quot;d&quot;translateY&quot;d}'>
<field declared_type64='double' name='scaleX' type64='d'/>
<field declared_type64='double' name='scaleY' type64='d'/>
<field declared_type64='double' name='translateX' type64='d'/>
<field declared_type64='double' name='translateY' type64='d'/>
</struct>
<struct name='MPSSize' type64='{MPSSize=&quot;width&quot;d&quot;height&quot;d&quot;depth&quot;d}'>
<field declared_type64='double' name='width' type64='d'/>
<field declared_type64='double' name='height' type64='d'/>
<field declared_type64='double' name='depth' type64='d'/>
</struct>
<struct name='MPSStateTextureInfo' type64='{MPSStateTextureInfo=&quot;width&quot;Q&quot;height&quot;Q&quot;depth&quot;Q&quot;arrayLength&quot;Q&quot;pixelFormat&quot;Q&quot;textureType&quot;Q&quot;usage&quot;Q&quot;_reserved&quot;[4Q]}'>
<field declared_type64='NSUInteger' name='width' type64='Q'/>
<field declared_type64='NSUInteger' name='height' type64='Q'/>
<field declared_type64='NSUInteger' name='depth' type64='Q'/>
<field declared_type64='NSUInteger' name='arrayLength' type64='Q'/>
<field declared_type64='MTLPixelFormat' name='pixelFormat' type64='Q'/>
<field declared_type64='MTLTextureType' name='textureType' type64='Q'/>
<field declared_type64='MTLTextureUsage' name='usage' type64='Q'/>
<field declared_type64='NSUInteger*' name='_reserved' type64='[4Q]'/>
</struct>
<constant const='true' declared_type64='MPSFunctionConstant' name='MPSFunctionConstantNone' type64='q'/>
<constant const='true' declared_type64='MTLRegion' name='MPSRectNoClip' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<enum name='MPSAliasingStrategyAliasingReserved' value64='3'/>
<enum name='MPSAliasingStrategyDefault' value64='0'/>
<enum name='MPSAliasingStrategyDontCare' value64='0'/>
<enum name='MPSAliasingStrategyPreferNonTemporaryMemory' value64='8'/>
<enum name='MPSAliasingStrategyPreferTemporaryMemory' value64='4'/>
<enum name='MPSAliasingStrategyShallAlias' value64='1'/>
<enum name='MPSAliasingStrategyShallNotAlias' value64='2'/>
<enum name='MPSBatchSizeIndex' value64='125'/>
<enum name='MPSCustomKernelIndexDestIndex' value64='0'/>
<enum name='MPSCustomKernelIndexSrc0Index' value64='0'/>
<enum name='MPSCustomKernelIndexSrc1Index' value64='1'/>
<enum name='MPSCustomKernelIndexSrc2Index' value64='2'/>
<enum name='MPSCustomKernelIndexSrc3Index' value64='3'/>
<enum name='MPSCustomKernelIndexSrc4Index' value64='4'/>
<enum name='MPSCustomKernelIndexUserDataIndex' value64='30'/>
<enum name='MPSDataLayoutFeatureChannelsxHeightxWidth' value64='1'/>
<enum name='MPSDataLayoutHeightxWidthxFeatureChannels' value64='0'/>
<enum name='MPSDataTypeFloat16' value64='268435472'/>
<enum name='MPSDataTypeFloat32' value64='268435488'/>
<enum name='MPSDataTypeFloatBit' value64='268435456'/>
<enum name='MPSDataTypeInt16' value64='536870928'/>
<enum name='MPSDataTypeInt32' value64='536870944'/>
<enum name='MPSDataTypeInt8' value64='536870920'/>
<enum name='MPSDataTypeIntBit' value64='536870912'/>
<enum name='MPSDataTypeInvalid' value64='0'/>
<enum name='MPSDataTypeNormalizedBit' value64='1073741824'/>
<enum name='MPSDataTypeSignedBit' value64='536870912'/>
<enum name='MPSDataTypeUInt16' value64='16'/>
<enum name='MPSDataTypeUInt32' value64='32'/>
<enum name='MPSDataTypeUInt8' value64='8'/>
<enum name='MPSDataTypeUnorm1' value64='1073741825'/>
<enum name='MPSDataTypeUnorm8' value64='1073741832'/>
<enum name='MPSDeviceCapsIndex' value64='127'/>
<enum name='MPSDeviceCapsNull' value64='0'/>
<enum name='MPSDeviceIsAppleDevice' value64='1024'/>
<enum name='MPSDeviceSupportsFloat16BicubicFiltering' value64='512'/>
<enum name='MPSDeviceSupportsFloat32Filtering' value64='128'/>
<enum name='MPSDeviceSupportsNorm16BicubicFiltering' value64='256'/>
<enum name='MPSDeviceSupportsQuadShuffle' value64='16'/>
<enum name='MPSDeviceSupportsReadWriteTextures' value64='4'/>
<enum name='MPSDeviceSupportsReadableArrayOfTextures' value64='1'/>
<enum name='MPSDeviceSupportsSimdReduction' value64='64'/>
<enum name='MPSDeviceSupportsSimdShuffle' value64='32'/>
<enum name='MPSDeviceSupportsSimdgroupBarrier' value64='8'/>
<enum name='MPSDeviceSupportsWritableArrayOfTextures' value64='2'/>
<enum name='MPSFunctionConstantIndex' value64='126'/>
<enum name='MPSFunctionConstantIndexReserved' value64='122'/>
<enum name='MPSImageEdgeModeClamp' value64='1'/>
<enum name='MPSImageEdgeModeConstant' value64='4'/>
<enum name='MPSImageEdgeModeMirror' value64='2'/>
<enum name='MPSImageEdgeModeMirrorWithEdge' value64='3'/>
<enum name='MPSImageEdgeModeZero' value64='0'/>
<enum name='MPSImageFeatureChannelFormatCount' value64='6'/>
<enum name='MPSImageFeatureChannelFormatFloat16' value64='3'/>
<enum name='MPSImageFeatureChannelFormatFloat32' value64='4'/>
<enum name='MPSImageFeatureChannelFormatNone' value64='0'/>
<enum name='MPSImageFeatureChannelFormatUnorm16' value64='2'/>
<enum name='MPSImageFeatureChannelFormatUnorm8' value64='1'/>
<enum name='MPSImageFeatureChannelFormat_reserved0' value64='5'/>
<enum name='MPSImageType2d' value64='0'/>
<enum name='MPSImageType2d_array' value64='1'/>
<enum name='MPSImageType2d_array_noAlpha' value64='5'/>
<enum name='MPSImageType2d_noAlpha' value64='4'/>
<enum name='MPSImageTypeArray2d' value64='2'/>
<enum name='MPSImageTypeArray2d_array' value64='3'/>
<enum name='MPSImageTypeArray2d_array_noAlpha' value64='7'/>
<enum name='MPSImageTypeArray2d_noAlpha' value64='6'/>
<enum name='MPSImageType_ArrayMask' value64='1'/>
<enum name='MPSImageType_BatchMask' value64='2'/>
<enum name='MPSImageType_bitCount' value64='6'/>
<enum name='MPSImageType_mask' value64='63'/>
<enum name='MPSImageType_noAlpha' value64='4'/>
<enum name='MPSImageType_texelFormatBFloat16' value64='24'/>
<enum name='MPSImageType_texelFormatFloat16' value64='16'/>
<enum name='MPSImageType_texelFormatMask' value64='56'/>
<enum name='MPSImageType_texelFormatShift' value64='3'/>
<enum name='MPSImageType_texelFormatStandard' value64='0'/>
<enum name='MPSImageType_texelFormatUnorm8' value64='8'/>
<enum name='MPSImageType_typeMask' value64='3'/>
<enum name='MPSKernelOptionsAllowReducedPrecision' value64='2'/>
<enum name='MPSKernelOptionsDisableInternalTiling' value64='4'/>
<enum name='MPSKernelOptionsInsertDebugGroups' value64='8'/>
<enum name='MPSKernelOptionsNone' value64='0'/>
<enum name='MPSKernelOptionsSkipAPIValidation' value64='1'/>
<enum name='MPSKernelOptionsVerbose' value64='16'/>
<enum name='MPSKernelTypes_h' value64='1'/>
<enum name='MPSNDArrayConstantIndex' value64='123'/>
<enum name='MPSPurgeableStateAllocationDeferred' value64='0'/>
<enum name='MPSPurgeableStateEmpty' value64='4'/>
<enum name='MPSPurgeableStateKeepCurrent' value64='1'/>
<enum name='MPSPurgeableStateNonVolatile' value64='2'/>
<enum name='MPSPurgeableStateVolatile' value64='3'/>
<enum name='MPSStateResourceTypeBuffer' value64='1'/>
<enum name='MPSStateResourceTypeNone' value64='0'/>
<enum name='MPSStateResourceTypeTexture' value64='2'/>
<enum name='MPSUserAvailableFunctionConstantStartIndex' value64='119'/>
<enum name='MPSUserConstantIndex' value64='124'/>
<function inline='true' name='MPSFindIntegerDivisionParams'>
<arg declared_type64='uint16_t' name='divisor' type64='S'/>
<retval declared_type64='MPSIntegerDivisionParams' type64='{_MPSIntegerDivisionParams=SSSS}'/>
</function>
<function inline='true' name='MPSGetCustomKernelBatchedDestinationIndex'>
<arg declared_type64='MPSCustomKernelArgumentCount' name='c' type64='{MPSCustomKernelArgumentCount=QQQ}'/>
<retval declared_type64='unsigned long' type64='Q'/>
</function>
<function inline='true' name='MPSGetCustomKernelBatchedSourceIndex'>
<arg declared_type64='MPSCustomKernelArgumentCount' name='c' type64='{MPSCustomKernelArgumentCount=QQQ}'/>
<arg declared_type64='unsigned long' name='sourceIndex' type64='Q'/>
<arg declared_type64='unsigned long' name='MPSMaxTextures' type64='Q'/>
<retval declared_type64='unsigned long' type64='Q'/>
</function>
<function inline='true' name='MPSGetCustomKernelBroadcastSourceIndex'>
<arg declared_type64='MPSCustomKernelArgumentCount' name='c' type64='{MPSCustomKernelArgumentCount=QQQ}'/>
<arg declared_type64='unsigned long' name='sourceIndex' type64='Q'/>
<arg declared_type64='unsigned long' name='MPSMaxTextures' type64='Q'/>
<retval declared_type64='unsigned long' type64='Q'/>
</function>
<function inline='true' name='MPSGetCustomKernelMaxBatchSize'>
<arg declared_type64='MPSCustomKernelArgumentCount' name='c' type64='{MPSCustomKernelArgumentCount=QQQ}'/>
<arg declared_type64='unsigned long' name='MPSMaxTextures' type64='Q'/>
<retval declared_type64='unsigned long' type64='Q'/>
</function>
<function name='MPSGetImageType'>
<arg declared_type64='MPSImage * _Nonnull' name='image' type64='@'/>
<retval declared_type64='MPSImageType' type64='I'/>
</function>
<function name='MPSImageBatchIncrementReadCount'>
<arg declared_type64='MPSImageBatch * _Nonnull' name='batch' type64='@'/>
<arg declared_type64='NSInteger' name='amount' type64='q'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</function>
<function name='MPSImageBatchIterate'>
<arg declared_type64='MPSImageBatch * _Nonnull' name='batch' type64='@'/>
<arg declared_type64='NSInteger (^ _Nonnull)(MPSImage * _Nonnull, NSUInteger)' function_pointer='true' name='iteratorBlock' type64='@?'>
<arg declared_type64='MPSImage * _Nonnull' type64='@'/>
<arg declared_type64='NSUInteger' type64='Q'/>
<retval declared_type64='NSInteger' type64='q'/>
</arg>
<retval declared_type64='NSInteger' type64='q'/>
</function>
<function name='MPSImageBatchResourceSize'>
<arg declared_type64='MPSImageBatch * _Nonnull' name='batch' type64='@'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</function>
<function name='MPSImageBatchSynchronize'>
<arg declared_type64='MPSImageBatch * _Nonnull' name='batch' type64='@'/>
<arg declared_type64='id _Nonnull' name='cmdBuf' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='MPSStateBatchIncrementReadCount'>
<arg declared_type64='MPSStateBatch * _Nullable' name='batch' type64='@'/>
<arg declared_type64='NSInteger' name='amount' type64='q'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</function>
<function name='MPSStateBatchResourceSize'>
<arg declared_type64='MPSStateBatch * _Nullable' name='batch' type64='@'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</function>
<function name='MPSStateBatchSynchronize'>
<arg declared_type64='MPSStateBatch * _Nonnull' name='batch' type64='@'/>
<arg declared_type64='id _Nonnull' name='cmdBuf' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<class name='MPSCommandBuffer'>
<method selector='commandBuffer'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='commandBufferFromCommandQueue:'>
<arg declared_type64='id _Nonnull' index='0' name='commandQueue' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='commandBufferWithCommandBuffer:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='commitAndContinue'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='heapProvider'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='initWithCommandBuffer:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='predicate'>
<retval declared_type64='MPSPredicate * _Nullable' type64='@'/>
</method>
<method selector='prefetchHeapForWorkloadSize:'>
<arg declared_type64='size_t' index='0' name='size' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='rootCommandBuffer'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='setHeapProvider:'>
<arg declared_type64='id _Nullable' index='0' name='heapProvider' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPredicate:'>
<arg declared_type64='MPSPredicate * _Nullable' index='0' name='predicate' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImage'>
<method selector='batchRepresentation'>
<retval declared_type64='MPSImageBatch * _Nonnull' type64='@'/>
</method>
<method selector='batchRepresentationWithSubRange:'>
<arg declared_type64='NSRange' index='0' name='subRange' type64='{_NSRange=QQ}'/>
<retval declared_type64='MPSImageBatch * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='defaultAllocator'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='device'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='featureChannelFormat'>
<retval declared_type64='MPSImageFeatureChannelFormat' type64='Q'/>
</method>
<method selector='featureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='height'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='initWithDevice:imageDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSImageDescriptor * _Nonnull' index='1' name='imageDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithParentImage:sliceRange:featureChannels:'>
<arg declared_type64='MPSImage * _Nonnull' index='0' name='parent' type64='@'/>
<arg declared_type64='NSRange' index='1' name='sliceRange' type64='{_NSRange=QQ}'/>
<arg declared_type64='NSUInteger' index='2' name='featureChannels' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithTexture:featureChannels:'>
<arg declared_type64='id _Nonnull' index='0' name='texture' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='featureChannels' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='label'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='numberOfImages'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='parent'>
<retval declared_type64='MPSImage * _Nullable' type64='@'/>
</method>
<method selector='pixelFormat'>
<retval declared_type64='MTLPixelFormat' type64='Q'/>
</method>
<method selector='pixelSize'>
<retval declared_type64='size_t' type64='Q'/>
</method>
<method selector='precision'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='readBytes:dataLayout:bytesPerRow:bytesPerImage:region:featureChannelInfo:imageIndex:'>
<arg declared_type64='void * _Nonnull' index='0' name='dataBytes' type64='^v'/>
<arg declared_type64='MPSDataLayout' index='1' name='dataLayout' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='bytesPerRow' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='bytesPerImage' type64='Q'/>
<arg declared_type64='MTLRegion' index='4' name='region' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<arg declared_type64='MPSImageReadWriteParams' index='5' name='featureChannelInfo' type64='{_MPSImageReadWriteParams=QQ}'/>
<arg declared_type64='NSUInteger' index='6' name='imageIndex' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='readBytes:dataLayout:bytesPerRow:region:featureChannelInfo:imageIndex:'>
<arg declared_type64='void * _Nonnull' index='0' name='dataBytes' type64='^v'/>
<arg declared_type64='MPSDataLayout' index='1' name='dataLayout' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='bytesPerRow' type64='Q'/>
<arg declared_type64='MTLRegion' index='3' name='region' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<arg declared_type64='MPSImageReadWriteParams' index='4' name='featureChannelInfo' type64='{_MPSImageReadWriteParams=QQ}'/>
<arg declared_type64='NSUInteger' index='5' name='imageIndex' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='readBytes:dataLayout:imageIndex:'>
<arg declared_type64='void * _Nonnull' index='0' name='dataBytes' type64='^v'/>
<arg declared_type64='MPSDataLayout' index='1' name='dataLayout' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='imageIndex' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='resourceSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setLabel:'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPurgeableState:'>
<arg declared_type64='MPSPurgeableState' index='0' name='state' type64='Q'/>
<retval declared_type64='MPSPurgeableState' type64='Q'/>
</method>
<method selector='subImageWithFeatureChannelRange:'>
<arg declared_type64='NSRange' index='0' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='synchronizeOnCommandBuffer:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='texture'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='textureType'>
<retval declared_type64='MTLTextureType' type64='Q'/>
</method>
<method selector='usage'>
<retval declared_type64='MTLTextureUsage' type64='Q'/>
</method>
<method selector='width'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='writeBytes:dataLayout:bytesPerColumn:bytesPerRow:bytesPerImage:region:featureChannelInfo:imageIndex:'>
<arg const='true' declared_type64='void * _Nonnull' index='0' name='dataBytes' type64='^v'/>
<arg declared_type64='MPSDataLayout' index='1' name='dataLayout' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='bytesPerColumn' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='bytesPerRow' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='bytesPerImage' type64='Q'/>
<arg declared_type64='MTLRegion' index='5' name='region' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<arg declared_type64='MPSImageReadWriteParams' index='6' name='featureChannelInfo' type64='{_MPSImageReadWriteParams=QQ}'/>
<arg declared_type64='NSUInteger' index='7' name='imageIndex' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='writeBytes:dataLayout:bytesPerRow:bytesPerImage:region:featureChannelInfo:imageIndex:'>
<arg const='true' declared_type64='void * _Nonnull' index='0' name='dataBytes' type64='^v'/>
<arg declared_type64='MPSDataLayout' index='1' name='dataLayout' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='bytesPerRow' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='bytesPerImage' type64='Q'/>
<arg declared_type64='MTLRegion' index='4' name='region' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<arg declared_type64='MPSImageReadWriteParams' index='5' name='featureChannelInfo' type64='{_MPSImageReadWriteParams=QQ}'/>
<arg declared_type64='NSUInteger' index='6' name='imageIndex' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='writeBytes:dataLayout:bytesPerRow:region:featureChannelInfo:imageIndex:'>
<arg const='true' declared_type64='void * _Nonnull' index='0' name='dataBytes' type64='^v'/>
<arg declared_type64='MPSDataLayout' index='1' name='dataLayout' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='bytesPerRow' type64='Q'/>
<arg declared_type64='MTLRegion' index='3' name='region' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<arg declared_type64='MPSImageReadWriteParams' index='4' name='featureChannelInfo' type64='{_MPSImageReadWriteParams=QQ}'/>
<arg declared_type64='NSUInteger' index='5' name='imageIndex' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='writeBytes:dataLayout:imageIndex:'>
<arg const='true' declared_type64='void * _Nonnull' index='0' name='dataBytes' type64='^v'/>
<arg declared_type64='MPSDataLayout' index='1' name='dataLayout' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='imageIndex' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageDescriptor'>
<method selector='channelFormat'>
<retval declared_type64='MPSImageFeatureChannelFormat' type64='Q'/>
</method>
<method selector='copyWithZone:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='cpuCacheMode'>
<retval declared_type64='MTLCPUCacheMode' type64='Q'/>
</method>
<method selector='featureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='height'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='imageDescriptorWithChannelFormat:width:height:featureChannels:'>
<arg declared_type64='MPSImageFeatureChannelFormat' index='0' name='channelFormat' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='width' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='height' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='featureChannels' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='imageDescriptorWithChannelFormat:width:height:featureChannels:numberOfImages:usage:'>
<arg declared_type64='MPSImageFeatureChannelFormat' index='0' name='channelFormat' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='width' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='height' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='featureChannels' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='numberOfImages' type64='Q'/>
<arg declared_type64='MTLTextureUsage' index='5' name='usage' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='numberOfImages'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='pixelFormat'>
<retval declared_type64='MTLPixelFormat' type64='Q'/>
</method>
<method selector='setChannelFormat:'>
<arg declared_type64='MPSImageFeatureChannelFormat' index='0' name='channelFormat' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCpuCacheMode:'>
<arg declared_type64='MTLCPUCacheMode' index='0' name='cpuCacheMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='featureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setHeight:'>
<arg declared_type64='NSUInteger' index='0' name='height' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNumberOfImages:'>
<arg declared_type64='NSUInteger' index='0' name='numberOfImages' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStorageMode:'>
<arg declared_type64='MTLStorageMode' index='0' name='storageMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUsage:'>
<arg declared_type64='MTLTextureUsage' index='0' name='usage' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setWidth:'>
<arg declared_type64='NSUInteger' index='0' name='width' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='storageMode'>
<retval declared_type64='MTLStorageMode' type64='Q'/>
</method>
<method selector='usage'>
<retval declared_type64='MTLTextureUsage' type64='Q'/>
</method>
<method selector='width'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSKernel'>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='device'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='initWithCoder:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='label'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='options'>
<retval declared_type64='MPSKernelOptions' type64='Q'/>
</method>
<method selector='setLabel:'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOptions:'>
<arg declared_type64='MPSKernelOptions' index='0' name='options' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSKeyedUnarchiver'>
<method selector='initForReadingFromData:device:error:'>
<arg declared_type64='NSData * _Nonnull' index='0' name='data' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='2' name='error' type64='^@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initForReadingWithData:device:'>
<arg declared_type64='NSData * _Nonnull' index='0' name='data' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='mpsMTLDevice'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='unarchiveObjectWithData:device:'>
<arg declared_type64='NSData * _Nonnull' index='0' name='data' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method class_method='true' selector='unarchiveObjectWithFile:device:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='path' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method class_method='true' selector='unarchiveTopLevelObjectWithData:device:error:'>
<arg declared_type64='NSData * _Nonnull' index='0' name='data' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='2' name='error' type64='^@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method class_method='true' selector='unarchivedObjectOfClass:fromData:device:error:'>
<arg declared_type64='Class _Nonnull' index='0' name='cls' type64='#'/>
<arg declared_type64='NSData * _Nonnull' index='1' name='data' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='device' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='3' name='error' type64='^@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method class_method='true' selector='unarchivedObjectOfClasses:fromData:device:error:'>
<arg declared_type64='NSSet * _Nonnull' index='0' name='classes' type64='@'/>
<arg declared_type64='NSData * _Nonnull' index='1' name='data' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='device' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='3' name='error' type64='^@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
</class>
<class name='MPSMatrix'>
<method selector='columns'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='data'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='dataType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='device'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='initWithBuffer:descriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='buffer' type64='@'/>
<arg declared_type64='MPSMatrixDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithBuffer:offset:descriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='buffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='offset' type64='Q'/>
<arg declared_type64='MPSMatrixDescriptor * _Nonnull' index='2' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:descriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSMatrixDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='matrices'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='matrixBytes'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='offset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='resourceSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='rowBytes'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='rows'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='synchronizeOnCommandBuffer:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSMatrixDescriptor'>
<method selector='columns'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='dataType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='matrices'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='matrixBytes'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='matrixDescriptorWithDimensions:columns:rowBytes:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='rows' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='columns' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='rowBytes' type64='Q'/>
<arg declared_type64='MPSDataType' index='3' name='dataType' type64='I'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='matrixDescriptorWithRows:columns:matrices:rowBytes:matrixBytes:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='rows' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='columns' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='matrices' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='rowBytes' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='matrixBytes' type64='Q'/>
<arg declared_type64='MPSDataType' index='5' name='dataType' type64='I'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='matrixDescriptorWithRows:columns:rowBytes:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='rows' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='columns' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='rowBytes' type64='Q'/>
<arg declared_type64='MPSDataType' index='3' name='dataType' type64='I'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='rowBytes'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='rowBytesForColumns:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='columns' type64='Q'/>
<arg declared_type64='MPSDataType' index='1' name='dataType' type64='I'/>
<retval declared_type64='size_t' type64='Q'/>
</method>
<method class_method='true' selector='rowBytesFromColumns:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='columns' type64='Q'/>
<arg declared_type64='MPSDataType' index='1' name='dataType' type64='I'/>
<retval declared_type64='size_t' type64='Q'/>
</method>
<method selector='rows'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setColumns:'>
<arg declared_type64='NSUInteger' index='0' name='columns' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDataType:'>
<arg declared_type64='MPSDataType' index='0' name='dataType' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRowBytes:'>
<arg declared_type64='NSUInteger' index='0' name='rowBytes' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRows:'>
<arg declared_type64='NSUInteger' index='0' name='rows' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSNDArray'>
<method selector='arrayViewWithCommandBuffer:descriptor:aliasing:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSNDArrayDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<arg declared_type64='MPSAliasingStrategy' index='2' name='aliasing' type64='Q'/>
<retval declared_type64='MPSNDArray * _Nullable' type64='@'/>
</method>
<method selector='dataType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='dataTypeSize'>
<retval declared_type64='size_t' type64='Q'/>
</method>
<method class_method='true' selector='defaultAllocator'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='descriptor'>
<retval declared_type64='MPSNDArrayDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='device'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='exportDataWithCommandBuffer:toBuffer:destinationDataType:offset:rowStrides:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='buffer' type64='@'/>
<arg declared_type64='MPSDataType' index='2' name='destinationDataType' type64='I'/>
<arg declared_type64='NSUInteger' index='3' name='offset' type64='Q'/>
<arg declared_type64='NSInteger * _Nullable' index='4' name='rowStrides' type64='^q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='exportDataWithCommandBuffer:toImages:offset:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='images' type64='@'/>
<arg declared_type64='MPSImageCoordinate' index='2' name='offset' type64='{MPSImageCoordinate=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='importDataWithCommandBuffer:fromBuffer:sourceDataType:offset:rowStrides:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='buffer' type64='@'/>
<arg declared_type64='MPSDataType' index='2' name='sourceDataType' type64='I'/>
<arg declared_type64='NSUInteger' index='3' name='offset' type64='Q'/>
<arg declared_type64='NSInteger * _Nullable' index='4' name='rowStrides' type64='^q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='importDataWithCommandBuffer:fromImages:offset:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='images' type64='@'/>
<arg declared_type64='MPSImageCoordinate' index='2' name='offset' type64='{MPSImageCoordinate=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:descriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSNDArrayDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:scalar:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='double' index='1' name='value' type64='d'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='label'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='lengthOfDimension:'>
<arg declared_type64='NSUInteger' index='0' name='dimensionIndex' type64='Q'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='numberOfDimensions'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='parent'>
<retval declared_type64='MPSNDArray * _Nullable' type64='@'/>
</method>
<method selector='readBytes:strideBytes:'>
<arg declared_type64='void * _Nonnull' index='0' name='buffer' type64='^v'/>
<arg declared_type64='NSInteger * _Nullable' index='1' name='strideBytesPerDimension' type64='^q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='resourceSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setLabel:'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='synchronizeOnCommandBuffer:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='writeBytes:strideBytes:'>
<arg declared_type64='void * _Nonnull' index='0' name='buffer' type64='^v'/>
<arg declared_type64='NSInteger * _Nullable' index='1' name='strideBytesPerDimension' type64='^q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSNDArrayDescriptor'>
<method selector='dataType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method class_method='true' selector='descriptorWithDataType:dimensionCount:dimensionSizes:'>
<arg declared_type64='MPSDataType' index='0' name='dataType' type64='I'/>
<arg declared_type64='NSUInteger' index='1' name='numberOfDimensions' type64='Q'/>
<arg declared_type64='NSUInteger * _Nonnull' index='2' name='dimensionSizes' type64='^Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='descriptorWithDataType:dimensionSizes:' variadic='true'>
<arg declared_type64='MPSDataType' index='0' name='dataType' type64='I'/>
<arg declared_type64='NSUInteger' index='1' name='dimension0' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='descriptorWithDataType:shape:'>
<arg declared_type64='MPSDataType' index='0' name='dataType' type64='I'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='shape' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='dimensionOrder'>
<retval declared_type64='vector_uchar16' type64=''/>
</method>
<method selector='lengthOfDimension:'>
<arg declared_type64='NSUInteger' index='0' name='dimensionIndex' type64='Q'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='numberOfDimensions'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='reshapeWithDimensionCount:dimensionSizes:'>
<arg declared_type64='NSUInteger' index='0' name='numberOfDimensions' type64='Q'/>
<arg declared_type64='NSUInteger * _Nonnull' index='1' name='dimensionSizes' type64='^Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='reshapeWithShape:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='shape' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDataType:'>
<arg declared_type64='MPSDataType' index='0' name='dataType' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNumberOfDimensions:'>
<arg declared_type64='NSUInteger' index='0' name='numberOfDimensions' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sliceDimension:withSubrange:'>
<arg declared_type64='NSUInteger' index='0' name='dimensionIndex' type64='Q'/>
<arg declared_type64='MPSDimensionSlice' index='1' name='subRange' type64='{MPSDimensionSlice=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sliceRangeForDimension:'>
<arg declared_type64='NSUInteger' index='0' name='dimensionIndex' type64='Q'/>
<retval declared_type64='MPSDimensionSlice' type64='{MPSDimensionSlice=QQ}'/>
</method>
<method selector='transposeDimension:withDimension:'>
<arg declared_type64='NSUInteger' index='0' name='dimensionIndex' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='dimensionIndex2' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSPredicate'>
<method selector='initWithBuffer:offset:'>
<arg declared_type64='id _Nonnull' index='0' name='buffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='offset' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='predicateBuffer'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='predicateOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='predicateWithBuffer:offset:'>
<arg declared_type64='id _Nonnull' index='0' name='buffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='offset' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSState'>
<method selector='bufferSizeAtIndex:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='destinationImageDescriptorForSourceImages:sourceStates:forKernel:suggestedDescriptor:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceImages' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSKernel * _Nonnull' index='2' name='kernel' type64='@'/>
<arg declared_type64='MPSImageDescriptor * _Nonnull' index='3' name='inDescriptor' type64='@'/>
<retval declared_type64='MPSImageDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:bufferSize:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='size_t' index='1' name='bufferSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:resourceList:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSStateResourceList * _Nonnull' index='1' name='resourceList' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:textureDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MTLTextureDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithResource:'>
<arg declared_type64='id _Nullable' index='0' name='resource' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithResources:'>
<arg declared_type64='NSArray&gt; * _Nullable' index='0' name='resources' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='isTemporary'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='label'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='readCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='resource'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='resourceAtIndex:allocateMemory:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<arg declared_type64='BOOL' index='1' name='allocateMemory' type64='B'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='resourceCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='resourceSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='resourceTypeAtIndex:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<retval declared_type64='MPSStateResourceType' type64='Q'/>
</method>
<method selector='setLabel:'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setReadCount:'>
<arg declared_type64='NSUInteger' index='0' name='readCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='synchronizeOnCommandBuffer:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='temporaryStateWithCommandBuffer:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='temporaryStateWithCommandBuffer:bufferSize:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='size_t' index='1' name='bufferSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='temporaryStateWithCommandBuffer:resourceList:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSStateResourceList * _Nonnull' index='1' name='resourceList' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='temporaryStateWithCommandBuffer:textureDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MTLTextureDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='textureInfoAtIndex:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<retval declared_type64='MPSStateTextureInfo' type64='{MPSStateTextureInfo=QQQQQQQ[4Q]}'/>
</method>
</class>
<class name='MPSStateResourceList'>
<method selector='appendBuffer:'>
<arg declared_type64='NSUInteger' index='0' name='size' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='appendTexture:'>
<arg declared_type64='MTLTextureDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='init'>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='resourceList'>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='resourceListWithBufferSizes:' sentinel='0' variadic='true'>
<arg declared_type64='NSUInteger' index='0' name='firstSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='resourceListWithTextureDescriptors:' sentinel='0' variadic='true'>
<arg declared_type64='MTLTextureDescriptor * _Nonnull' index='0' name='d' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSTemporaryImage'>
<method class_method='true' selector='defaultAllocator'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='prefetchStorageWithCommandBuffer:imageDescriptorList:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='descriptorList' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='readCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setReadCount:'>
<arg declared_type64='NSUInteger' index='0' name='readCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='temporaryImageWithCommandBuffer:imageDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg const='true' declared_type64='MPSImageDescriptor * _Nonnull' index='1' name='imageDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='temporaryImageWithCommandBuffer:textureDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg const='true' declared_type64='MTLTextureDescriptor * _Nonnull' index='1' name='textureDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='temporaryImageWithCommandBuffer:textureDescriptor:featureChannels:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg const='true' declared_type64='MTLTextureDescriptor * _Nonnull' index='1' name='textureDescriptor' type64='@'/>
<arg declared_type64='NSUInteger' index='2' name='featureChannels' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSTemporaryMatrix'>
<method class_method='true' selector='prefetchStorageWithCommandBuffer:matrixDescriptorList:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='descriptorList' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='readCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setReadCount:'>
<arg declared_type64='NSUInteger' index='0' name='readCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='temporaryMatrixWithCommandBuffer:matrixDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrixDescriptor * _Nonnull' index='1' name='matrixDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSTemporaryNDArray'>
<method class_method='true' selector='defaultAllocator'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='readCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setReadCount:'>
<arg declared_type64='NSUInteger' index='0' name='readCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='temporaryNDArrayWithCommandBuffer:descriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSNDArrayDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSTemporaryVector'>
<method class_method='true' selector='prefetchStorageWithCommandBuffer:descriptorList:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='descriptorList' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='readCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setReadCount:'>
<arg declared_type64='NSUInteger' index='0' name='readCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='temporaryVectorWithCommandBuffer:descriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSVectorDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSVector'>
<method selector='data'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='dataType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='device'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='initWithBuffer:descriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='buffer' type64='@'/>
<arg declared_type64='MPSVectorDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithBuffer:offset:descriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='buffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='offset' type64='Q'/>
<arg declared_type64='MPSVectorDescriptor * _Nonnull' index='2' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:descriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSVectorDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='length'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='offset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='resourceSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='synchronizeOnCommandBuffer:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='vectorBytes'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='vectors'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSVectorDescriptor'>
<method selector='dataType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='length'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setDataType:'>
<arg declared_type64='MPSDataType' index='0' name='dataType' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLength:'>
<arg declared_type64='NSUInteger' index='0' name='length' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='vectorBytes'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='vectorBytesForLength:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='length' type64='Q'/>
<arg declared_type64='MPSDataType' index='1' name='dataType' type64='I'/>
<retval declared_type64='size_t' type64='Q'/>
</method>
<method class_method='true' selector='vectorDescriptorWithLength:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='length' type64='Q'/>
<arg declared_type64='MPSDataType' index='1' name='dataType' type64='I'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='vectorDescriptorWithLength:vectors:vectorBytes:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='length' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='vectors' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='vectorBytes' type64='Q'/>
<arg declared_type64='MPSDataType' index='3' name='dataType' type64='I'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='vectors'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='NSObject'>
<method selector='arrayForCommandBuffer:arrayDescriptor:kernel:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSNDArrayDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<arg declared_type64='MPSKernel * _Nonnull' index='2' name='kernel' type64='@'/>
<retval declared_type64='MPSNDArray * _Nonnull' type64='@'/>
</method>
<method selector='imageBatchForCommandBuffer:imageDescriptor:kernel:count:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSImageDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<arg declared_type64='MPSKernel * _Nonnull' index='2' name='kernel' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='count' type64='Q'/>
<retval declared_type64='MPSImageBatch * _Nonnull' type64='@'/>
</method>
<method selector='imageForCommandBuffer:imageDescriptor:kernel:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSImageDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<arg declared_type64='MPSKernel * _Nonnull' index='2' name='kernel' type64='@'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='mpsMTLDevice'>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='newHeapWithDescriptor:'>
<arg declared_type64='MTLHeapDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='retireHeap:cacheDelay:'>
<arg declared_type64='id _Nonnull' index='0' name='heap' type64='@'/>
<arg declared_type64='double' index='1' name='seconds' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<informal_protocol name='MPSDeviceProvider'>
<method selector='mpsMTLDevice' type64='@16@0:8'>
<retval declared_type64='id' type64='@'/>
</method>
</informal_protocol>
<informal_protocol name='MPSHeapProvider'>
<method selector='newHeapWithDescriptor:' type64='@24@0:8@16'>
<arg declared_type64='MTLHeapDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='retireHeap:cacheDelay:' type64='v32@0:8@16d24'>
<arg declared_type64='id _Nonnull' index='0' name='heap' type64='@'/>
<arg declared_type64='double' index='1' name='seconds' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
</informal_protocol>
<informal_protocol name='MPSImageAllocator'>
<method selector='imageBatchForCommandBuffer:imageDescriptor:kernel:count:' type64='^{NSArray=#}48@0:8@16@24@32Q40'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSImageDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<arg declared_type64='MPSKernel * _Nonnull' index='2' name='kernel' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='count' type64='Q'/>
<retval declared_type64='MPSImageBatch * _Nonnull' type64='@'/>
</method>
<method selector='imageForCommandBuffer:imageDescriptor:kernel:' type64='@40@0:8@16@24@32'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSImageDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<arg declared_type64='MPSKernel * _Nonnull' index='2' name='kernel' type64='@'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
</informal_protocol>
<informal_protocol name='MPSNDArrayAllocator'>
<method selector='arrayForCommandBuffer:arrayDescriptor:kernel:' type64='@40@0:8@16@24@32'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSNDArrayDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<arg declared_type64='MPSKernel * _Nonnull' index='2' name='kernel' type64='@'/>
<retval declared_type64='MPSNDArray * _Nonnull' type64='@'/>
</method>
</informal_protocol>
<struct name='MPSImageHistogramInfo' type64='{_MPSImageHistogramInfo=&quot;numberOfHistogramEntries&quot;Q&quot;histogramForAlpha&quot;B&quot;minPixelValue&quot;&quot;maxPixelValue&quot;}'>
<field declared_type64='NSUInteger' name='numberOfHistogramEntries' type64='Q'/>
<field declared_type64='BOOL' name='histogramForAlpha' type64='B'/>
<field declared_type64='vector_float4' name='minPixelValue' type64=''/>
<field declared_type64='vector_float4' name='maxPixelValue' type64=''/>
</struct>
<struct name='MPSImageKeypointData' type64='{_MPSImageKeypointData=&quot;keypointCoordinate&quot;&quot;keypointColorValue&quot;f}'>
<field declared_type64='vector_ushort2' name='keypointCoordinate' type64=''/>
<field declared_type64='float' name='keypointColorValue' type64='f'/>
</struct>
<struct name='MPSImageKeypointRangeInfo' type64='{_MPSImageKeypointRangeInfo=&quot;maximumKeypoints&quot;Q&quot;minimumThresholdValue&quot;f}'>
<field declared_type64='NSUInteger' name='maximumKeypoints' type64='Q'/>
<field declared_type64='float' name='minimumThresholdValue' type64='f'/>
</struct>
<enum name='MPSAlphaTypeAlphaIsOne' value64='1'/>
<enum name='MPSAlphaTypeNonPremultiplied' value64='0'/>
<enum name='MPSAlphaTypePremultiplied' value64='2'/>
<class name='MPSBinaryImageKernel'>
<method selector='clipRect'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='encodeToCommandBuffer:inPlacePrimaryTexture:secondaryTexture:fallbackCopyAllocator:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull * _Nonnull' index='1' name='inPlacePrimaryTexture' type64='^@'/>
<arg declared_type64='id _Nonnull' index='2' name='secondaryTexture' type64='@'/>
<arg declared_type64='MPSCopyAllocator _Nullable' function_pointer='true' index='3' name='copyAllocator' type64='@?'>
<arg declared_type64='MPSKernel * _Nonnull' type64='@'/>
<arg declared_type64='id _Nonnull' type64='@'/>
<arg declared_type64='id _Nonnull' type64='@'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</arg>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='encodeToCommandBuffer:primaryImage:secondaryImage:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='primaryImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='secondaryImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:primaryTexture:inPlaceSecondaryTexture:fallbackCopyAllocator:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='primaryTexture' type64='@'/>
<arg declared_type64='id _Nonnull * _Nonnull' index='2' name='inPlaceSecondaryTexture' type64='^@'/>
<arg declared_type64='MPSCopyAllocator _Nullable' function_pointer='true' index='3' name='copyAllocator' type64='@?'>
<arg declared_type64='MPSKernel * _Nonnull' type64='@'/>
<arg declared_type64='id _Nonnull' type64='@'/>
<arg declared_type64='id _Nonnull' type64='@'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</arg>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='encodeToCommandBuffer:primaryTexture:secondaryTexture:destinationTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='primaryTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='secondaryTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='3' name='destinationTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='primaryEdgeMode'>
<retval declared_type64='MPSImageEdgeMode' type64='Q'/>
</method>
<method selector='primaryOffset'>
<retval declared_type64='MPSOffset' type64='{_MPSOffset=qqq}'/>
</method>
<method selector='primarySourceRegionForDestinationSize:'>
<arg declared_type64='MTLSize' index='0' name='destinationSize' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='MPSRegion' type64='{MPSRegion={MPSOrigin=ddd}{MPSSize=ddd}}'/>
</method>
<method selector='secondaryEdgeMode'>
<retval declared_type64='MPSImageEdgeMode' type64='Q'/>
</method>
<method selector='secondaryOffset'>
<retval declared_type64='MPSOffset' type64='{_MPSOffset=qqq}'/>
</method>
<method selector='secondarySourceRegionForDestinationSize:'>
<arg declared_type64='MTLSize' index='0' name='destinationSize' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='MPSRegion' type64='{MPSRegion={MPSOrigin=ddd}{MPSSize=ddd}}'/>
</method>
<method selector='setClipRect:'>
<arg declared_type64='MTLRegion' index='0' name='clipRect' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryEdgeMode:'>
<arg declared_type64='MPSImageEdgeMode' index='0' name='primaryEdgeMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryOffset:'>
<arg declared_type64='MPSOffset' index='0' name='primaryOffset' type64='{_MPSOffset=qqq}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryEdgeMode:'>
<arg declared_type64='MPSImageEdgeMode' index='0' name='secondaryEdgeMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryOffset:'>
<arg declared_type64='MPSOffset' index='0' name='secondaryOffset' type64='{_MPSOffset=qqq}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageAdd'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageAreaMax'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSImageArithmetic'>
<method selector='bias'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='maximumValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='minimumValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='primaryScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='primaryStrideInPixels'>
<retval declared_type64='MTLSize' type64='{_MTLSize=QQQ}'/>
</method>
<method selector='secondaryScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='secondaryStrideInPixels'>
<retval declared_type64='MTLSize' type64='{_MTLSize=QQQ}'/>
</method>
<method selector='setBias:'>
<arg declared_type64='float' index='0' name='bias' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaximumValue:'>
<arg declared_type64='float' index='0' name='maximumValue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMinimumValue:'>
<arg declared_type64='float' index='0' name='minimumValue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryScale:'>
<arg declared_type64='float' index='0' name='primaryScale' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryStrideInPixels:'>
<arg declared_type64='MTLSize' index='0' name='primaryStrideInPixels' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryScale:'>
<arg declared_type64='float' index='0' name='secondaryScale' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryStrideInPixels:'>
<arg declared_type64='MTLSize' index='0' name='secondaryStrideInPixels' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageBilinearScale'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageBox'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSImageCanny'>
<method selector='colorTransform'>
<retval const='true' declared_type64='float * _Nonnull' type64='^f'/>
</method>
<method selector='highThreshold'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:linearToGrayScaleTransform:sigma:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='float * _Nonnull' index='1' name='transform' type64='^f'/>
<arg const='true' declared_type64='float' index='2' name='sigma' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='lowThreshold'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='setHighThreshold:'>
<arg declared_type64='float' index='0' name='highThreshold' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLowThreshold:'>
<arg declared_type64='float' index='0' name='lowThreshold' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUseFastMode:'>
<arg declared_type64='BOOL' index='0' name='useFastMode' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sigma'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='useFastMode'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSImageConversion'>
<method selector='destinationAlpha'>
<retval declared_type64='MPSAlphaType' type64='Q'/>
</method>
<method selector='initWithDevice:srcAlpha:destAlpha:backgroundColor:conversionInfo:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSAlphaType' index='1' name='srcAlpha' type64='Q'/>
<arg declared_type64='MPSAlphaType' index='2' name='destAlpha' type64='Q'/>
<arg declared_type64='CGFloat * _Nullable' index='3' name='backgroundColor' type64='^d'/>
<arg declared_type64='CGColorConversionInfoRef _Nullable' index='4' name='conversionInfo' type64='^{CGColorConversionInfo=}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='sourceAlpha'>
<retval declared_type64='MPSAlphaType' type64='Q'/>
</method>
</class>
<class name='MPSImageConvolution'>
<method selector='bias'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:weights:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg const='true' declared_type64='float * _Nonnull' index='3' name='kernelWeights' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setBias:'>
<arg declared_type64='float' index='0' name='bias' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageCopyToMatrix'>
<method selector='dataLayout'>
<retval declared_type64='MPSDataLayout' type64='Q'/>
</method>
<method selector='destinationMatrixBatchIndex'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='destinationMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:destinationMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImages' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='destinationMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:destinationMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='destinationMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:dataLayout:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSDataLayout' index='1' name='dataLayout' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setDestinationMatrixBatchIndex:'>
<arg declared_type64='NSUInteger' index='0' name='destinationMatrixBatchIndex' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDestinationMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='destinationMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageDilate'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:values:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg const='true' declared_type64='float * _Nonnull' index='3' name='values' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSImageDivide'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageEDLines'>
<method selector='clipRectSource'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='detailRatio'>
<retval declared_type64='unsigned short' type64='S'/>
</method>
<method selector='encodeToCommandBuffer:sourceTexture:destinationTexture:endpointBuffer:endpointOffset:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='source' type64='@'/>
<arg declared_type64='id _Nullable' index='2' name='dest' type64='@'/>
<arg declared_type64='id _Nonnull' index='3' name='endpointBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='4' name='endpointOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='gaussianSigma'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='gradientThreshold'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:gaussianSigma:minLineLength:maxLines:detailRatio:gradientThreshold:lineErrorThreshold:mergeLocalityThreshold:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='float' index='1' name='gaussianSigma' type64='f'/>
<arg const='true' declared_type64='unsigned short' index='2' name='minLineLength' type64='S'/>
<arg const='true' declared_type64='NSUInteger' index='3' name='maxLines' type64='Q'/>
<arg const='true' declared_type64='unsigned short' index='4' name='detailRatio' type64='S'/>
<arg const='true' declared_type64='float' index='5' name='gradientThreshold' type64='f'/>
<arg const='true' declared_type64='float' index='6' name='lineErrorThreshold' type64='f'/>
<arg const='true' declared_type64='float' index='7' name='mergeLocalityThreshold' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='lineErrorThreshold'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='maxLines'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='mergeLocalityThreshold'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='minLineLength'>
<retval declared_type64='unsigned short' type64='S'/>
</method>
<method selector='setClipRectSource:'>
<arg declared_type64='MTLRegion' index='0' name='clipRectSource' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDetailRatio:'>
<arg declared_type64='unsigned short' index='0' name='detailRatio' type64='S'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setGradientThreshold:'>
<arg declared_type64='float' index='0' name='gradientThreshold' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLineErrorThreshold:'>
<arg declared_type64='float' index='0' name='lineErrorThreshold' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaxLines:'>
<arg declared_type64='NSUInteger' index='0' name='maxLines' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMergeLocalityThreshold:'>
<arg declared_type64='float' index='0' name='mergeLocalityThreshold' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMinLineLength:'>
<arg declared_type64='unsigned short' index='0' name='minLineLength' type64='S'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageEuclideanDistanceTransform'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='searchLimitRadius'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='setSearchLimitRadius:'>
<arg declared_type64='float' index='0' name='searchLimitRadius' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageFindKeypoints'>
<method selector='encodeToCommandBuffer:sourceTexture:regions:numberOfRegions:keypointCountBuffer:keypointCountBufferOffset:keypointDataBuffer:keypointDataBufferOffset:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='source' type64='@'/>
<arg const='true' declared_type64='MTLRegion * _Nonnull' index='2' name='regions' type64='^{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<arg declared_type64='NSUInteger' index='3' name='numberOfRegions' type64='Q'/>
<arg declared_type64='id _Nonnull' index='4' name='keypointCountBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='5' name='keypointCountBufferOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='6' name='keypointDataBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='7' name='keypointDataBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:info:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSImageKeypointRangeInfo * _Nonnull' index='1' name='info' type64='^{_MPSImageKeypointRangeInfo=Qf}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='keypointRangeInfo'>
<retval declared_type64='MPSImageKeypointRangeInfo' type64='{_MPSImageKeypointRangeInfo=Qf}'/>
</method>
</class>
<class name='MPSImageGaussianBlur'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:sigma:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='sigma' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='sigma'>
<retval declared_type64='float' type64='f'/>
</method>
</class>
<class name='MPSImageGuidedFilter'>
<method selector='encodeReconstructionToCommandBuffer:guidanceTexture:coefficientsTexture:destinationTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='guidanceTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='coefficientsTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='3' name='destinationTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeReconstructionToCommandBuffer:guidanceTexture:coefficientsTextureA:coefficientsTextureB:destinationTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='guidanceTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='coefficientsTextureA' type64='@'/>
<arg declared_type64='id _Nonnull' index='3' name='coefficientsTextureB' type64='@'/>
<arg declared_type64='id _Nonnull' index='4' name='destinationTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeRegressionToCommandBuffer:sourceTexture:guidanceTexture:weightsTexture:destinationCoefficientsTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='sourceTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='guidanceTexture' type64='@'/>
<arg declared_type64='id _Nullable' index='3' name='weightsTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='4' name='destinationCoefficientsTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeRegressionToCommandBuffer:sourceTexture:guidanceTexture:weightsTexture:destinationCoefficientsTextureA:destinationCoefficientsTextureB:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='sourceTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='guidanceTexture' type64='@'/>
<arg declared_type64='id _Nullable' index='3' name='weightsTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='4' name='destinationCoefficientsTextureA' type64='@'/>
<arg declared_type64='id _Nonnull' index='5' name='destinationCoefficientsTextureB' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='epsilon'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelDiameter:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelDiameter' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelDiameter'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='reconstructOffset'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='reconstructScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='setEpsilon:'>
<arg declared_type64='float' index='0' name='epsilon' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setReconstructOffset:'>
<arg declared_type64='float' index='0' name='reconstructOffset' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setReconstructScale:'>
<arg declared_type64='float' index='0' name='reconstructScale' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageHistogram'>
<method selector='clipRectSource'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='encodeToCommandBuffer:sourceTexture:histogram:histogramOffset:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='source' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='histogram' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='histogramOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='histogramInfo'>
<retval declared_type64='MPSImageHistogramInfo' type64='{_MPSImageHistogramInfo=QB}'/>
</method>
<method selector='histogramSizeForSourceFormat:'>
<arg declared_type64='MTLPixelFormat' index='0' name='sourceFormat' type64='Q'/>
<retval declared_type64='size_t' type64='Q'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:histogramInfo:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSImageHistogramInfo * _Nonnull' index='1' name='histogramInfo' type64='^{_MPSImageHistogramInfo=QB}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='minPixelThresholdValue'>
<retval declared_type64='vector_float4' type64=''/>
</method>
<method selector='setClipRectSource:'>
<arg declared_type64='MTLRegion' index='0' name='clipRectSource' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMinPixelThresholdValue:'>
<arg declared_type64='vector_float4' index='0' name='minPixelThresholdValue' type64=''/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setZeroHistogram:'>
<arg declared_type64='BOOL' index='0' name='zeroHistogram' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='zeroHistogram'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSImageHistogramEqualization'>
<method selector='encodeTransformToCommandBuffer:sourceTexture:histogram:histogramOffset:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='source' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='histogram' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='histogramOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='histogramInfo'>
<retval declared_type64='MPSImageHistogramInfo' type64='{_MPSImageHistogramInfo=QB}'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:histogramInfo:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSImageHistogramInfo * _Nonnull' index='1' name='histogramInfo' type64='^{_MPSImageHistogramInfo=QB}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageHistogramSpecification'>
<method selector='encodeTransformToCommandBuffer:sourceTexture:sourceHistogram:sourceHistogramOffset:desiredHistogram:desiredHistogramOffset:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='source' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='sourceHistogram' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='sourceHistogramOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='4' name='desiredHistogram' type64='@'/>
<arg declared_type64='NSUInteger' index='5' name='desiredHistogramOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='histogramInfo'>
<retval declared_type64='MPSImageHistogramInfo' type64='{_MPSImageHistogramInfo=QB}'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:histogramInfo:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSImageHistogramInfo * _Nonnull' index='1' name='histogramInfo' type64='^{_MPSImageHistogramInfo=QB}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageLanczosScale'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageLaplacian'>
<method selector='bias'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='setBias:'>
<arg declared_type64='float' index='0' name='bias' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageLaplacianPyramid'>
<method selector='getLaplacianBias'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='getLaplacianScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='setLaplacianBias:'>
<arg declared_type64='float' index='0' name='laplacianBias' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLaplacianScale:'>
<arg declared_type64='float' index='0' name='laplacianScale' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageMedian'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelDiameter:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelDiameter' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelDiameter'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='maxKernelDiameter'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='minKernelDiameter'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSImageMultiply'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageNormalizedHistogram'>
<method selector='clipRectSource'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='encodeToCommandBuffer:sourceTexture:minmaxTexture:histogram:histogramOffset:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='source' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='minmaxTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='3' name='histogram' type64='@'/>
<arg declared_type64='NSUInteger' index='4' name='histogramOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='histogramInfo'>
<retval declared_type64='MPSImageHistogramInfo' type64='{_MPSImageHistogramInfo=QB}'/>
</method>
<method selector='histogramSizeForSourceFormat:'>
<arg declared_type64='MTLPixelFormat' index='0' name='sourceFormat' type64='Q'/>
<retval declared_type64='size_t' type64='Q'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:histogramInfo:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSImageHistogramInfo * _Nonnull' index='1' name='histogramInfo' type64='^{_MPSImageHistogramInfo=QB}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setClipRectSource:'>
<arg declared_type64='MTLRegion' index='0' name='clipRectSource' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setZeroHistogram:'>
<arg declared_type64='BOOL' index='0' name='zeroHistogram' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='zeroHistogram'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSImagePyramid'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:centerWeight:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='centerWeight' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:weights:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg const='true' declared_type64='float * _Nonnull' index='3' name='kernelWeights' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSImageReduceColumnMax'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageReduceColumnMean'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageReduceColumnMin'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageReduceColumnSum'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageReduceRowMax'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageReduceRowMean'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageReduceRowMin'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageReduceRowSum'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageReduceUnary'>
<method selector='clipRectSource'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='setClipRectSource:'>
<arg declared_type64='MTLRegion' index='0' name='clipRectSource' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageScale'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='scaleTransform'>
<retval const='true' declared_type64='MPSScaleTransform * _Nullable' type64='^{MPSScaleTransform=dddd}'/>
</method>
<method selector='setScaleTransform:'>
<arg const='true' declared_type64='MPSScaleTransform * _Nullable' index='0' name='scaleTransform' type64='^{MPSScaleTransform=dddd}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageSobel'>
<method selector='colorTransform'>
<retval const='true' declared_type64='float * _Nonnull' type64='^f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:linearGrayColorTransform:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='float * _Nonnull' index='1' name='transform' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageStatisticsMean'>
<method selector='clipRectSource'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setClipRectSource:'>
<arg declared_type64='MTLRegion' index='0' name='clipRectSource' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageStatisticsMeanAndVariance'>
<method selector='clipRectSource'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setClipRectSource:'>
<arg declared_type64='MTLRegion' index='0' name='clipRectSource' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageStatisticsMinAndMax'>
<method selector='clipRectSource'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setClipRectSource:'>
<arg declared_type64='MTLRegion' index='0' name='clipRectSource' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageSubtract'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageThresholdBinary'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:thresholdValue:maximumValue:linearGrayColorTransform:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='thresholdValue' type64='f'/>
<arg declared_type64='float' index='2' name='maximumValue' type64='f'/>
<arg const='true' declared_type64='float * _Nullable' index='3' name='transform' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='maximumValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='thresholdValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='transform'>
<retval const='true' declared_type64='float * _Nonnull' type64='^f'/>
</method>
</class>
<class name='MPSImageThresholdBinaryInverse'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:thresholdValue:maximumValue:linearGrayColorTransform:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='thresholdValue' type64='f'/>
<arg declared_type64='float' index='2' name='maximumValue' type64='f'/>
<arg const='true' declared_type64='float * _Nullable' index='3' name='transform' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='maximumValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='thresholdValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='transform'>
<retval const='true' declared_type64='float * _Nonnull' type64='^f'/>
</method>
</class>
<class name='MPSImageThresholdToZero'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:thresholdValue:linearGrayColorTransform:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='thresholdValue' type64='f'/>
<arg const='true' declared_type64='float * _Nullable' index='2' name='transform' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='thresholdValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='transform'>
<retval const='true' declared_type64='float * _Nonnull' type64='^f'/>
</method>
</class>
<class name='MPSImageThresholdToZeroInverse'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:thresholdValue:linearGrayColorTransform:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='thresholdValue' type64='f'/>
<arg const='true' declared_type64='float * _Nullable' index='2' name='transform' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='thresholdValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='transform'>
<retval const='true' declared_type64='float * _Nonnull' type64='^f'/>
</method>
</class>
<class name='MPSImageThresholdTruncate'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:thresholdValue:linearGrayColorTransform:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='thresholdValue' type64='f'/>
<arg const='true' declared_type64='float * _Nullable' index='2' name='transform' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='thresholdValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='transform'>
<retval const='true' declared_type64='float * _Nonnull' type64='^f'/>
</method>
</class>
<class name='MPSMatrixCopyToImage'>
<method selector='dataLayout'>
<retval declared_type64='MPSDataLayout' type64='Q'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceMatrix:destinationImages:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='destinationImages' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:sourceMatrix:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:dataLayout:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSDataLayout' index='1' name='dataLayout' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setSourceMatrixBatchIndex:'>
<arg declared_type64='NSUInteger' index='0' name='sourceMatrixBatchIndex' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='sourceMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceMatrixBatchIndex'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
</class>
<class name='MPSUnaryImageKernel'>
<method selector='clipRect'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='edgeMode'>
<retval declared_type64='MPSImageEdgeMode' type64='Q'/>
</method>
<method selector='encodeToCommandBuffer:inPlaceTexture:fallbackCopyAllocator:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull * _Nonnull' index='1' name='texture' type64='^@'/>
<arg declared_type64='MPSCopyAllocator _Nullable' function_pointer='true' index='2' name='copyAllocator' type64='@?'>
<arg declared_type64='MPSKernel * _Nonnull' type64='@'/>
<arg declared_type64='id _Nonnull' type64='@'/>
<arg declared_type64='id _Nonnull' type64='@'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</arg>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:sourceTexture:destinationTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='sourceTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='destinationTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='offset'>
<retval declared_type64='MPSOffset' type64='{_MPSOffset=qqq}'/>
</method>
<method selector='setClipRect:'>
<arg declared_type64='MTLRegion' index='0' name='clipRect' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEdgeMode:'>
<arg declared_type64='MPSImageEdgeMode' index='0' name='edgeMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOffset:'>
<arg declared_type64='MPSOffset' index='0' name='offset' type64='{_MPSOffset=qqq}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceRegionForDestinationSize:'>
<arg declared_type64='MTLSize' index='0' name='destinationSize' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='MPSRegion' type64='{MPSRegion={MPSOrigin=ddd}{MPSSize=ddd}}'/>
</method>
</class>
<struct name='MPSMatrixCopyOffsets' type64='{_MPSMatrixCopyOffsets=&quot;sourceRowOffset&quot;I&quot;sourceColumnOffset&quot;I&quot;destinationRowOffset&quot;I&quot;destinationColumnOffset&quot;I}'>
<field declared_type64='uint32_t' name='sourceRowOffset' type64='I'/>
<field declared_type64='uint32_t' name='sourceColumnOffset' type64='I'/>
<field declared_type64='uint32_t' name='destinationRowOffset' type64='I'/>
<field declared_type64='uint32_t' name='destinationColumnOffset' type64='I'/>
</struct>
<enum name='MPSMatrixDecompositionStatusFailure' value64='-1'/>
<enum name='MPSMatrixDecompositionStatusNonPositiveDefinite' value64='-3'/>
<enum name='MPSMatrixDecompositionStatusSingular' value64='-2'/>
<enum name='MPSMatrixDecompositionStatusSuccess' value64='0'/>
<enum name='MPSMatrixRandomDistributionDefault' value64='1'/>
<enum name='MPSMatrixRandomDistributionNormal' value64='3'/>
<enum name='MPSMatrixRandomDistributionUniform' value64='2'/>
<class name='MPSMatrixBinaryKernel'>
<method selector='batchSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='batchStart'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='primarySourceMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='resultMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='secondarySourceMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='setBatchSize:'>
<arg declared_type64='NSUInteger' index='0' name='batchSize' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBatchStart:'>
<arg declared_type64='NSUInteger' index='0' name='batchStart' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimarySourceMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='primarySourceMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setResultMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='resultMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondarySourceMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='secondarySourceMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSMatrixCopy'>
<method selector='copyColumns'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='copyRows'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='destinationsAreTransposed'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='encodeToCommandBuffer:copyDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrixCopyDescriptor * _Nonnull' index='1' name='copyDescriptor' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:copyDescriptor:rowPermuteIndices:rowPermuteOffset:columnPermuteIndices:columnPermuteOffset:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrixCopyDescriptor * _Nonnull' index='1' name='copyDescriptor' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='2' name='rowPermuteIndices' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='rowPermuteOffset' type64='Q'/>
<arg declared_type64='MPSVector * _Nullable' index='4' name='columnPermuteIndices' type64='@'/>
<arg declared_type64='NSUInteger' index='5' name='columnPermuteOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:copyRows:copyColumns:sourcesAreTransposed:destinationsAreTransposed:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='copyRows' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='copyColumns' type64='Q'/>
<arg declared_type64='BOOL' index='3' name='sourcesAreTransposed' type64='B'/>
<arg declared_type64='BOOL' index='4' name='destinationsAreTransposed' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='sourcesAreTransposed'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSMatrixCopyDescriptor'>
<method class_method='true' selector='descriptorWithSourceMatrix:destinationMatrix:offsets:'>
<arg declared_type64='MPSMatrix * _Nonnull' index='0' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='destinationMatrix' type64='@'/>
<arg declared_type64='MPSMatrixCopyOffsets' index='2' name='offsets' type64='{_MPSMatrixCopyOffsets=IIII}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:count:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='count' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSourceMatrices:destinationMatrices:offsetVector:offset:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceMatrices' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='destinationMatrices' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='2' name='offsets' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='byteOffset' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setCopyOperationAtIndex:sourceMatrix:destinationMatrix:offsets:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='destinationMatrix' type64='@'/>
<arg declared_type64='MPSMatrixCopyOffsets' index='3' name='offsets' type64='{_MPSMatrixCopyOffsets=IIII}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSMatrixDecompositionCholesky'>
<method selector='encodeToCommandBuffer:sourceMatrix:resultMatrix:status:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='resultMatrix' type64='@'/>
<arg declared_type64='id _Nullable' index='3' name='status' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:lower:order:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='lower' type64='B'/>
<arg declared_type64='NSUInteger' index='2' name='order' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSMatrixDecompositionLU'>
<method selector='encodeToCommandBuffer:sourceMatrix:resultMatrix:pivotIndices:status:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='resultMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='pivotIndices' type64='@'/>
<arg declared_type64='id _Nullable' index='4' name='status' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:rows:columns:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='rows' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='columns' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSMatrixFindTopK'>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:inputMatrix:resultIndexMatrix:resultValueMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='inputMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='resultIndexMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='resultValueMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='indexOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:numberOfTopKValues:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='numberOfTopKValues' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='numberOfTopKValues'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setIndexOffset:'>
<arg declared_type64='NSUInteger' index='0' name='indexOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNumberOfTopKValues:'>
<arg declared_type64='NSUInteger' index='0' name='numberOfTopKValues' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceColumns:'>
<arg declared_type64='NSUInteger' index='0' name='sourceColumns' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceRows:'>
<arg declared_type64='NSUInteger' index='0' name='sourceRows' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceColumns'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceRows'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSMatrixMultiplication'>
<method selector='batchSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='batchStart'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='encodeToCommandBuffer:leftMatrix:rightMatrix:resultMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='leftMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='rightMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='resultMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:resultRows:resultColumns:interiorColumns:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='resultRows' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='resultColumns' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='interiorColumns' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:transposeLeft:transposeRight:resultRows:resultColumns:interiorColumns:alpha:beta:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='transposeLeft' type64='B'/>
<arg declared_type64='BOOL' index='2' name='transposeRight' type64='B'/>
<arg declared_type64='NSUInteger' index='3' name='resultRows' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='resultColumns' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='interiorColumns' type64='Q'/>
<arg declared_type64='double' index='6' name='alpha' type64='d'/>
<arg declared_type64='double' index='7' name='beta' type64='d'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='leftMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='resultMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='rightMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='setBatchSize:'>
<arg declared_type64='NSUInteger' index='0' name='batchSize' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBatchStart:'>
<arg declared_type64='NSUInteger' index='0' name='batchStart' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLeftMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='leftMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setResultMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='resultMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRightMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='rightMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSMatrixRandom'>
<method selector='batchSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='batchStart'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='destinationDataType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='distributionType'>
<retval declared_type64='MPSMatrixRandomDistribution' type64='Q'/>
</method>
<method selector='encodeToCommandBuffer:destinationMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='destinationMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:destinationVector:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='1' name='destinationVector' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBatchSize:'>
<arg declared_type64='NSUInteger' index='0' name='batchSize' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBatchStart:'>
<arg declared_type64='NSUInteger' index='0' name='batchStart' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSMatrixRandomDistributionDescriptor'>
<method class_method='true' selector='defaultDistributionDescriptor'>
<retval declared_type64='MPSMatrixRandomDistributionDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='distributionType'>
<retval declared_type64='MPSMatrixRandomDistribution' type64='Q'/>
</method>
<method selector='maximum'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='mean'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='minimum'>
<retval declared_type64='float' type64='f'/>
</method>
<method class_method='true' selector='normalDistributionDescriptorWithMean:standardDeviation:'>
<arg declared_type64='float' index='0' name='mean' type64='f'/>
<arg declared_type64='float' index='1' name='standardDeviation' type64='f'/>
<retval declared_type64='MPSMatrixRandomDistributionDescriptor * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='normalDistributionDescriptorWithMean:standardDeviation:minimum:maximum:'>
<arg declared_type64='float' index='0' name='mean' type64='f'/>
<arg declared_type64='float' index='1' name='standardDeviation' type64='f'/>
<arg declared_type64='float' index='2' name='minimum' type64='f'/>
<arg declared_type64='float' index='3' name='maximum' type64='f'/>
<retval declared_type64='MPSMatrixRandomDistributionDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='setDistributionType:'>
<arg declared_type64='MPSMatrixRandomDistribution' index='0' name='distributionType' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaximum:'>
<arg declared_type64='float' index='0' name='maximum' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMean:'>
<arg declared_type64='float' index='0' name='mean' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMinimum:'>
<arg declared_type64='float' index='0' name='minimum' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStandardDeviation:'>
<arg declared_type64='float' index='0' name='standardDeviation' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='standardDeviation'>
<retval declared_type64='float' type64='f'/>
</method>
<method class_method='true' selector='uniformDistributionDescriptorWithMinimum:maximum:'>
<arg declared_type64='float' index='0' name='minimum' type64='f'/>
<arg declared_type64='float' index='1' name='maximum' type64='f'/>
<retval declared_type64='MPSMatrixRandomDistributionDescriptor * _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSMatrixRandomMTGP32'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:destinationDataType:seed:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSDataType' index='1' name='destinationDataType' type64='I'/>
<arg declared_type64='NSUInteger' index='2' name='seed' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:destinationDataType:seed:distributionDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSDataType' index='1' name='destinationDataType' type64='I'/>
<arg declared_type64='NSUInteger' index='2' name='seed' type64='Q'/>
<arg declared_type64='MPSMatrixRandomDistributionDescriptor * _Nonnull' index='3' name='distributionDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='synchronizeStateOnCommandBuffer:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSMatrixRandomPhilox'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:destinationDataType:seed:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSDataType' index='1' name='destinationDataType' type64='I'/>
<arg declared_type64='NSUInteger' index='2' name='seed' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:destinationDataType:seed:distributionDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSDataType' index='1' name='destinationDataType' type64='I'/>
<arg declared_type64='NSUInteger' index='2' name='seed' type64='Q'/>
<arg declared_type64='MPSMatrixRandomDistributionDescriptor * _Nonnull' index='3' name='distributionDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSMatrixSoftMax'>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:inputMatrix:resultMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='inputMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='resultMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setSourceColumns:'>
<arg declared_type64='NSUInteger' index='0' name='sourceColumns' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceRows:'>
<arg declared_type64='NSUInteger' index='0' name='sourceRows' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceColumns'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceRows'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSMatrixSoftMaxGradient'>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:gradientMatrix:forwardOutputMatrix:resultMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='gradientMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='forwardOutputMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='resultMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setSourceColumns:'>
<arg declared_type64='NSUInteger' index='0' name='sourceColumns' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceRows:'>
<arg declared_type64='NSUInteger' index='0' name='sourceRows' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceColumns'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceRows'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSMatrixSolveCholesky'>
<method selector='encodeToCommandBuffer:sourceMatrix:rightHandSideMatrix:solutionMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='rightHandSideMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='solutionMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:upper:order:numberOfRightHandSides:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='upper' type64='B'/>
<arg declared_type64='NSUInteger' index='2' name='order' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='numberOfRightHandSides' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSMatrixSolveLU'>
<method selector='encodeToCommandBuffer:sourceMatrix:rightHandSideMatrix:pivotIndices:solutionMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='rightHandSideMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='pivotIndices' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='4' name='solutionMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:transpose:order:numberOfRightHandSides:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='transpose' type64='B'/>
<arg declared_type64='NSUInteger' index='2' name='order' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='numberOfRightHandSides' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSMatrixSolveTriangular'>
<method selector='encodeToCommandBuffer:sourceMatrix:rightHandSideMatrix:solutionMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='rightHandSideMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='solutionMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:right:upper:transpose:unit:order:numberOfRightHandSides:alpha:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='right' type64='B'/>
<arg declared_type64='BOOL' index='2' name='upper' type64='B'/>
<arg declared_type64='BOOL' index='3' name='transpose' type64='B'/>
<arg declared_type64='BOOL' index='4' name='unit' type64='B'/>
<arg declared_type64='NSUInteger' index='5' name='order' type64='Q'/>
<arg declared_type64='NSUInteger' index='6' name='numberOfRightHandSides' type64='Q'/>
<arg declared_type64='double' index='7' name='alpha' type64='d'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSMatrixUnaryKernel'>
<method selector='batchSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='batchStart'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='resultMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='setBatchSize:'>
<arg declared_type64='NSUInteger' index='0' name='batchSize' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBatchStart:'>
<arg declared_type64='NSUInteger' index='0' name='batchStart' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setResultMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='resultMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='sourceMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
</class>
<class name='MPSMatrixVectorMultiplication'>
<method selector='encodeToCommandBuffer:inputMatrix:inputVector:resultVector:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='inputMatrix' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='2' name='inputVector' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='3' name='resultVector' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:rows:columns:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='rows' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='columns' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:transpose:rows:columns:alpha:beta:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='transpose' type64='B'/>
<arg declared_type64='NSUInteger' index='2' name='rows' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='columns' type64='Q'/>
<arg declared_type64='double' index='4' name='alpha' type64='d'/>
<arg declared_type64='double' index='5' name='beta' type64='d'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<struct name='MPSNDArrayOffsets' type64='{_MPSNDArrayOffsets=&quot;dimensions&quot;[16q]}'>
<field declared_type64='NSInteger*' name='dimensions' type64='[16q]'/>
</struct>
<struct name='MPSNDArraySizes' type64='{_MPSNDArraySizes=&quot;dimensions&quot;[16Q]}'>
<field declared_type64='NSUInteger*' name='dimensions' type64='[16Q]'/>
</struct>
<class name='MPSNDArrayBinaryKernel'>
<method selector='encodeToCommandBuffer:primarySourceArray:secondarySourceArray:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='1' name='primarySourceArray' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='2' name='secondarySourceArray' type64='@'/>
<retval declared_type64='MPSNDArray * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:primarySourceArray:secondarySourceArray:destinationArray:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='1' name='primarySourceArray' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='2' name='secondarySourceArray' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='3' name='destination' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:primarySourceArray:secondarySourceArray:resultState:destinationArray:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='1' name='primarySourceArray' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='2' name='secondarySourceArray' type64='@'/>
<arg declared_type64='MPSState * _Nullable' index='3' name='outGradientState' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='4' name='destination' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:primarySourceArray:secondarySourceArray:resultState:outputStateIsTemporary:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='1' name='primarySourceArray' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='2' name='secondarySourceArray' type64='@'/>
<arg declared_type64='MPSState * _Nullable * _Nullable' index='3' name='outGradientState' type64='^@'/>
<arg declared_type64='BOOL' index='4' name='outputStateIsTemporary' type64='B'/>
<retval declared_type64='MPSNDArray * _Nonnull' type64='@'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='coder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='primaryDilationRates'>
<retval declared_type64='MPSNDArraySizes' type64='{_MPSNDArraySizes=[16Q]}'/>
</method>
<method selector='primaryEdgeMode'>
<retval declared_type64='MPSImageEdgeMode' type64='Q'/>
</method>
<method selector='primaryKernelSizes'>
<retval declared_type64='MPSNDArraySizes' type64='{_MPSNDArraySizes=[16Q]}'/>
</method>
<method selector='primaryOffsets'>
<retval declared_type64='MPSNDArrayOffsets' type64='{_MPSNDArrayOffsets=[16q]}'/>
</method>
<method selector='primaryStrides'>
<retval declared_type64='MPSNDArrayOffsets' type64='{_MPSNDArrayOffsets=[16q]}'/>
</method>
<method selector='secondaryDilationRates'>
<retval declared_type64='MPSNDArraySizes' type64='{_MPSNDArraySizes=[16Q]}'/>
</method>
<method selector='secondaryEdgeMode'>
<retval declared_type64='MPSImageEdgeMode' type64='Q'/>
</method>
<method selector='secondaryKernelSizes'>
<retval declared_type64='MPSNDArraySizes' type64='{_MPSNDArraySizes=[16Q]}'/>
</method>
<method selector='secondaryOffsets'>
<retval declared_type64='MPSNDArrayOffsets' type64='{_MPSNDArrayOffsets=[16q]}'/>
</method>
<method selector='secondaryStrides'>
<retval declared_type64='MPSNDArrayOffsets' type64='{_MPSNDArrayOffsets=[16q]}'/>
</method>
</class>
<class name='MPSNDArrayBinaryPrimaryGradientKernel'>
<method selector='encodeToCommandBuffer:primarySourceArray:secondarySourceArray:sourceGradient:gradientState:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='1' name='primarySourceArray' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='2' name='secondarySourceArray' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='3' name='gradient' type64='@'/>
<arg declared_type64='MPSState * _Nonnull' index='4' name='state' type64='@'/>
<retval declared_type64='MPSNDArray * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:primarySourceArray:secondarySourceArray:sourceGradient:gradientState:destinationArray:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='1' name='primarySourceArray' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='2' name='secondarySourceArray' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='3' name='gradient' type64='@'/>
<arg declared_type64='MPSState * _Nonnull' index='4' name='state' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='5' name='destination' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='coder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNDArrayBinarySecondaryGradientKernel'>
<method selector='encodeToCommandBuffer:primarySourceArray:secondarySourceArray:sourceGradient:gradientState:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='1' name='primarySourceArray' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='2' name='secondarySourceArray' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='3' name='gradient' type64='@'/>
<arg declared_type64='MPSState * _Nonnull' index='4' name='state' type64='@'/>
<retval declared_type64='MPSNDArray * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:primarySourceArray:secondarySourceArray:sourceGradient:gradientState:destinationArray:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='1' name='primarySourceArray' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='2' name='secondarySourceArray' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='3' name='gradient' type64='@'/>
<arg declared_type64='MPSState * _Nonnull' index='4' name='state' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='5' name='destination' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='coder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNDArrayGather'>
<method selector='axis'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setAxis:'>
<arg declared_type64='NSUInteger' index='0' name='axis' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSNDArrayMatrixMultiplication'>
<method selector='alpha'>
<retval declared_type64='double' type64='d'/>
</method>
<method selector='beta'>
<retval declared_type64='double' type64='d'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='double' index='0' name='alpha' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBeta:'>
<arg declared_type64='double' index='0' name='beta' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSNDArrayMultiaryBase'>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='destinationArrayAllocator'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='destinationArrayDescriptorForSourceArrays:sourceState:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sources' type64='@'/>
<arg declared_type64='MPSState * _Nullable' index='1' name='state' type64='@'/>
<retval declared_type64='MPSNDArrayDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='dilationRatesForSourceIndex:'>
<arg declared_type64='NSUInteger' index='0' name='sourceIndex' type64='Q'/>
<retval declared_type64='MPSNDArraySizes' type64='{_MPSNDArraySizes=[16Q]}'/>
</method>
<method selector='edgeModeAtSourceIndex:'>
<arg declared_type64='NSUInteger' index='0' name='sourceIndex' type64='Q'/>
<retval declared_type64='MPSImageEdgeMode' type64='Q'/>
</method>
<method selector='encodeWithCoder:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='coder' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='coder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:sourceCount:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='count' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelSizesForSourceIndex:'>
<arg declared_type64='NSUInteger' index='0' name='sourceIndex' type64='Q'/>
<retval declared_type64='MPSNDArraySizes' type64='{_MPSNDArraySizes=[16Q]}'/>
</method>
<method selector='offsetsAtSourceIndex:'>
<arg declared_type64='NSUInteger' index='0' name='sourceIndex' type64='Q'/>
<retval declared_type64='MPSNDArrayOffsets' type64='{_MPSNDArrayOffsets=[16q]}'/>
</method>
<method selector='resultStateForSourceArrays:sourceStates:destinationArray:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceArrays' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='2' name='destinationArray' type64='@'/>
<retval declared_type64='MPSState * _Nullable' type64='@'/>
</method>
<method selector='setDestinationArrayAllocator:'>
<arg declared_type64='id _Nonnull' index='0' name='destinationArrayAllocator' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='stridesForSourceIndex:'>
<arg declared_type64='NSUInteger' index='0' name='sourceIndex' type64='Q'/>
<retval declared_type64='MPSNDArrayOffsets' type64='{_MPSNDArrayOffsets=[16q]}'/>
</method>
</class>
<class name='MPSNDArrayMultiaryGradientKernel'>
<method selector='encodeToCommandBuffer:sourceArrays:sourceGradient:gradientState:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sources' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='2' name='gradient' type64='@'/>
<arg declared_type64='MPSState * _Nonnull' index='3' name='state' type64='@'/>
<retval declared_type64='MPSNDArray * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceArrays:sourceGradient:gradientState:destinationArray:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sources' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='2' name='gradient' type64='@'/>
<arg declared_type64='MPSState * _Nonnull' index='3' name='state' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='4' name='destination' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='coder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:sourceCount:sourceGradientIndex:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='count' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='sourceGradientIndex' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNDArrayMultiaryKernel'>
<method selector='encodeToCommandBuffer:sourceArrays:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceArrays' type64='@'/>
<retval declared_type64='MPSNDArray * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceArrays:destinationArray:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceArrays' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='2' name='destination' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:sourceArrays:resultState:destinationArray:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceArrays' type64='@'/>
<arg declared_type64='MPSState * _Nullable' index='2' name='outGradientState' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='3' name='destination' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:sourceArrays:resultState:outputStateIsTemporary:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceArrays' type64='@'/>
<arg declared_type64='MPSState * _Nullable * _Nullable' index='2' name='outGradientState' type64='^@'/>
<arg declared_type64='BOOL' index='3' name='outputStateIsTemporary' type64='B'/>
<retval declared_type64='MPSNDArray * _Nonnull' type64='@'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='coder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:sourceCount:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='count' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNDArrayStridedSlice'>
<method selector='setStrides:'>
<arg declared_type64='MPSNDArrayOffsets' index='0' name='strides' type64='{_MPSNDArrayOffsets=[16q]}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='strides'>
<retval declared_type64='MPSNDArrayOffsets' type64='{_MPSNDArrayOffsets=[16q]}'/>
</method>
</class>
<class name='MPSNDArrayUnaryGradientKernel'>
<method selector='encodeToCommandBuffer:sourceArray:sourceGradient:gradientState:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='1' name='sourceArray' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='2' name='gradient' type64='@'/>
<arg declared_type64='MPSState * _Nonnull' index='3' name='state' type64='@'/>
<retval declared_type64='MPSNDArray * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceArray:sourceGradient:gradientState:destinationArray:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='1' name='sourceArray' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='2' name='gradient' type64='@'/>
<arg declared_type64='MPSState * _Nonnull' index='3' name='state' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='4' name='destination' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='coder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNDArrayUnaryKernel'>
<method selector='dilationRates'>
<retval declared_type64='MPSNDArraySizes' type64='{_MPSNDArraySizes=[16Q]}'/>
</method>
<method selector='edgeMode'>
<retval declared_type64='MPSImageEdgeMode' type64='Q'/>
</method>
<method selector='encodeToCommandBuffer:sourceArray:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='1' name='sourceArray' type64='@'/>
<retval declared_type64='MPSNDArray * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceArray:destinationArray:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='1' name='sourceArray' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='2' name='destination' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:sourceArray:resultState:destinationArray:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='1' name='sourceArray' type64='@'/>
<arg declared_type64='MPSState * _Nullable' index='2' name='outGradientState' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='3' name='destination' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:sourceArray:resultState:outputStateIsTemporary:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSNDArray * _Nonnull' index='1' name='sourceArray' type64='@'/>
<arg declared_type64='MPSState * _Nullable * _Nullable' index='2' name='outGradientState' type64='^@'/>
<arg declared_type64='BOOL' index='3' name='outputStateIsTemporary' type64='B'/>
<retval declared_type64='MPSNDArray * _Nonnull' type64='@'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='coder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelSizes'>
<retval declared_type64='MPSNDArraySizes' type64='{_MPSNDArraySizes=[16Q]}'/>
</method>
<method selector='offsets'>
<retval declared_type64='MPSNDArrayOffsets' type64='{_MPSNDArrayOffsets=[16q]}'/>
</method>
<method selector='strides'>
<retval declared_type64='MPSNDArrayOffsets' type64='{_MPSNDArrayOffsets=[16q]}'/>
</method>
</class>
<enum name='MPSCNNBatchNormalizationFlagsCalculateStatisticsAlways' value64='1'/>
<enum name='MPSCNNBatchNormalizationFlagsCalculateStatisticsAutomatic' value64='0'/>
<enum name='MPSCNNBatchNormalizationFlagsCalculateStatisticsMask' value64='3'/>
<enum name='MPSCNNBatchNormalizationFlagsCalculateStatisticsNever' value64='2'/>
<enum name='MPSCNNBatchNormalizationFlagsDefault' value64='0'/>
<enum name='MPSCNNBinaryConvolutionFlagsNone' value64='0'/>
<enum name='MPSCNNBinaryConvolutionFlagsUseBetaScaling' value64='1'/>
<enum name='MPSCNNBinaryConvolutionTypeAND' value64='2'/>
<enum name='MPSCNNBinaryConvolutionTypeBinaryWeights' value64='0'/>
<enum name='MPSCNNBinaryConvolutionTypeXNOR' value64='1'/>
<enum name='MPSCNNConvolutionFlagsNone' value64='0'/>
<enum name='MPSCNNConvolutionGradientOptionAll' value64='3'/>
<enum name='MPSCNNConvolutionGradientOptionGradientWithData' value64='1'/>
<enum name='MPSCNNConvolutionGradientOptionGradientWithWeightsAndBias' value64='2'/>
<enum name='MPSCNNConvolutionWeightsLayoutOHWI' value64='0'/>
<enum name='MPSCNNLossTypeCategoricalCrossEntropy' value64='4'/>
<enum name='MPSCNNLossTypeCosineDistance' value64='7'/>
<enum name='MPSCNNLossTypeCount' value64='10'/>
<enum name='MPSCNNLossTypeHinge' value64='5'/>
<enum name='MPSCNNLossTypeHuber' value64='6'/>
<enum name='MPSCNNLossTypeKullbackLeiblerDivergence' value64='9'/>
<enum name='MPSCNNLossTypeLog' value64='8'/>
<enum name='MPSCNNLossTypeMeanAbsoluteError' value64='0'/>
<enum name='MPSCNNLossTypeMeanSquaredError' value64='1'/>
<enum name='MPSCNNLossTypeSigmoidCrossEntropy' value64='3'/>
<enum name='MPSCNNLossTypeSoftMaxCrossEntropy' value64='2'/>
<enum name='MPSCNNNeuronTypeAbsolute' value64='6'/>
<enum name='MPSCNNNeuronTypeCount' value64='16'/>
<enum name='MPSCNNNeuronTypeELU' value64='9'/>
<enum name='MPSCNNNeuronTypeExponential' value64='13'/>
<enum name='MPSCNNNeuronTypeGeLU' value64='15'/>
<enum name='MPSCNNNeuronTypeHardSigmoid' value64='4'/>
<enum name='MPSCNNNeuronTypeLinear' value64='2'/>
<enum name='MPSCNNNeuronTypeLogarithm' value64='14'/>
<enum name='MPSCNNNeuronTypeNone' value64='0'/>
<enum name='MPSCNNNeuronTypePReLU' value64='10'/>
<enum name='MPSCNNNeuronTypePower' value64='12'/>
<enum name='MPSCNNNeuronTypeReLU' value64='1'/>
<enum name='MPSCNNNeuronTypeReLUN' value64='11'/>
<enum name='MPSCNNNeuronTypeSigmoid' value64='3'/>
<enum name='MPSCNNNeuronTypeSoftPlus' value64='7'/>
<enum name='MPSCNNNeuronTypeSoftSign' value64='8'/>
<enum name='MPSCNNNeuronTypeTanH' value64='5'/>
<enum name='MPSCNNReductionTypeCount' value64='4'/>
<enum name='MPSCNNReductionTypeMean' value64='2'/>
<enum name='MPSCNNReductionTypeNone' value64='0'/>
<enum name='MPSCNNReductionTypeSum' value64='1'/>
<enum name='MPSCNNReductionTypeSumByNonZeroWeights' value64='3'/>
<enum name='MPSCNNWeightsQuantizationTypeLinear' value64='1'/>
<enum name='MPSCNNWeightsQuantizationTypeLookupTable' value64='2'/>
<enum name='MPSCNNWeightsQuantizationTypeNone' value64='0'/>
<enum name='MPSNNComparisonTypeEqual' value64='0'/>
<enum name='MPSNNComparisonTypeGreater' value64='4'/>
<enum name='MPSNNComparisonTypeGreaterOrEqual' value64='5'/>
<enum name='MPSNNComparisonTypeLess' value64='2'/>
<enum name='MPSNNComparisonTypeLessOrEqual' value64='3'/>
<enum name='MPSNNComparisonTypeNotEqual' value64='1'/>
<enum name='MPSNNConvolutionAccumulatorPrecisionOptionFloat' value64='1'/>
<enum name='MPSNNConvolutionAccumulatorPrecisionOptionHalf' value64='0'/>
<enum name='MPSNNPaddingMethodAddRemainderToBottomLeft' value64='8'/>
<enum name='MPSNNPaddingMethodAddRemainderToBottomRight' value64='12'/>
<enum name='MPSNNPaddingMethodAddRemainderToMask' value64='12'/>
<enum name='MPSNNPaddingMethodAddRemainderToTopLeft' value64='0'/>
<enum name='MPSNNPaddingMethodAddRemainderToTopRight' value64='4'/>
<enum name='MPSNNPaddingMethodAlignBottomRight' value64='2'/>
<enum name='MPSNNPaddingMethodAlignCentered' value64='0'/>
<enum name='MPSNNPaddingMethodAlignMask' value64='3'/>
<enum name='MPSNNPaddingMethodAlignTopLeft' value64='1'/>
<enum name='MPSNNPaddingMethodAlign_reserved' value64='3'/>
<enum name='MPSNNPaddingMethodCustom' value64='16384'/>
<enum name='MPSNNPaddingMethodCustomWhitelistForNodeFusion' value64='8192'/>
<enum name='MPSNNPaddingMethodExcludeEdges' value64='32768'/>
<enum name='MPSNNPaddingMethodSizeFull' value64='32'/>
<enum name='MPSNNPaddingMethodSizeMask' value64='2032'/>
<enum name='MPSNNPaddingMethodSizeSame' value64='16'/>
<enum name='MPSNNPaddingMethodSizeValidOnly' value64='0'/>
<enum name='MPSNNPaddingMethodSize_reserved' value64='48'/>
<enum name='MPSNNRegularizationTypeL1' value64='1'/>
<enum name='MPSNNRegularizationTypeL2' value64='2'/>
<enum name='MPSNNRegularizationTypeNone' value64='0'/>
<enum name='MPSNNTrainingStyleUpdateDeviceCPU' value64='1'/>
<enum name='MPSNNTrainingStyleUpdateDeviceGPU' value64='2'/>
<enum name='MPSNNTrainingStyleUpdateDeviceNone' value64='0'/>
<enum name='MPSRNNBidirectionalCombineModeAdd' value64='1'/>
<enum name='MPSRNNBidirectionalCombineModeConcatenate' value64='2'/>
<enum name='MPSRNNBidirectionalCombineModeNone' value64='0'/>
<enum name='MPSRNNMatrixIdGRUInputGateBiasTerms' value64='21'/>
<enum name='MPSRNNMatrixIdGRUInputGateInputWeights' value64='19'/>
<enum name='MPSRNNMatrixIdGRUInputGateRecurrentWeights' value64='20'/>
<enum name='MPSRNNMatrixIdGRUOutputGateBiasTerms' value64='28'/>
<enum name='MPSRNNMatrixIdGRUOutputGateInputGateWeights' value64='27'/>
<enum name='MPSRNNMatrixIdGRUOutputGateInputWeights' value64='25'/>
<enum name='MPSRNNMatrixIdGRUOutputGateRecurrentWeights' value64='26'/>
<enum name='MPSRNNMatrixIdGRURecurrentGateBiasTerms' value64='24'/>
<enum name='MPSRNNMatrixIdGRURecurrentGateInputWeights' value64='22'/>
<enum name='MPSRNNMatrixIdGRURecurrentGateRecurrentWeights' value64='23'/>
<enum name='MPSRNNMatrixIdLSTMForgetGateBiasTerms' value64='10'/>
<enum name='MPSRNNMatrixIdLSTMForgetGateInputWeights' value64='7'/>
<enum name='MPSRNNMatrixIdLSTMForgetGateMemoryWeights' value64='9'/>
<enum name='MPSRNNMatrixIdLSTMForgetGateRecurrentWeights' value64='8'/>
<enum name='MPSRNNMatrixIdLSTMInputGateBiasTerms' value64='6'/>
<enum name='MPSRNNMatrixIdLSTMInputGateInputWeights' value64='3'/>
<enum name='MPSRNNMatrixIdLSTMInputGateMemoryWeights' value64='5'/>
<enum name='MPSRNNMatrixIdLSTMInputGateRecurrentWeights' value64='4'/>
<enum name='MPSRNNMatrixIdLSTMMemoryGateBiasTerms' value64='14'/>
<enum name='MPSRNNMatrixIdLSTMMemoryGateInputWeights' value64='11'/>
<enum name='MPSRNNMatrixIdLSTMMemoryGateMemoryWeights' value64='13'/>
<enum name='MPSRNNMatrixIdLSTMMemoryGateRecurrentWeights' value64='12'/>
<enum name='MPSRNNMatrixIdLSTMOutputGateBiasTerms' value64='18'/>
<enum name='MPSRNNMatrixIdLSTMOutputGateInputWeights' value64='15'/>
<enum name='MPSRNNMatrixIdLSTMOutputGateMemoryWeights' value64='17'/>
<enum name='MPSRNNMatrixIdLSTMOutputGateRecurrentWeights' value64='16'/>
<enum name='MPSRNNMatrixIdSingleGateBiasTerms' value64='2'/>
<enum name='MPSRNNMatrixIdSingleGateInputWeights' value64='0'/>
<enum name='MPSRNNMatrixIdSingleGateRecurrentWeights' value64='1'/>
<enum name='MPSRNNMatrixId_count' value64='29'/>
<enum name='MPSRNNSequenceDirectionBackward' value64='1'/>
<enum name='MPSRNNSequenceDirectionForward' value64='0'/>
<class name='MPSCNNAdd'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNAddGradient'>
<method selector='initWithDevice:isSecondarySourceFilter:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='isSecondarySourceFilter' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNArithmetic'>
<method selector='bias'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='encodeBatchToCommandBuffer:primaryImages:secondaryImages:destinationStates:destinationImages:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='primaryImages' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='secondaryImages' type64='@'/>
<arg declared_type64='MPSCNNArithmeticGradientStateBatch * _Nonnull' index='3' name='destinationStates' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='4' name='destinationImages' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:primaryImage:secondaryImage:destinationState:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='primaryImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='secondaryImage' type64='@'/>
<arg declared_type64='MPSCNNArithmeticGradientState * _Nonnull' index='3' name='destinationState' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='4' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='maximumValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='minimumValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='primaryScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='primaryStrideInFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='secondaryScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='secondaryStrideInFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setBias:'>
<arg declared_type64='float' index='0' name='bias' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaximumValue:'>
<arg declared_type64='float' index='0' name='maximumValue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMinimumValue:'>
<arg declared_type64='float' index='0' name='minimumValue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryScale:'>
<arg declared_type64='float' index='0' name='primaryScale' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryStrideInFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='primaryStrideInFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryScale:'>
<arg declared_type64='float' index='0' name='secondaryScale' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryStrideInFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='secondaryStrideInFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNArithmeticGradient'>
<method selector='bias'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='isSecondarySourceFilter'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='maximumValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='minimumValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='primaryScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='secondaryScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='secondaryStrideInFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setBias:'>
<arg declared_type64='float' index='0' name='bias' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaximumValue:'>
<arg declared_type64='float' index='0' name='maximumValue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMinimumValue:'>
<arg declared_type64='float' index='0' name='minimumValue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryScale:'>
<arg declared_type64='float' index='0' name='primaryScale' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryScale:'>
<arg declared_type64='float' index='0' name='secondaryScale' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryStrideInFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='secondaryStrideInFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNBatchNormalization'>
<method selector='dataSource'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:batchNormalizationState:destinationImages:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImages' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='2' name='batchNormalizationState' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='3' name='destinationImages' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:batchNormalizationState:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='2' name='batchNormalizationState' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='epsilon'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:dataSource:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='dataSource' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:dataSource:fusedNeuronDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='dataSource' type64='@'/>
<arg declared_type64='MPSNNNeuronDescriptor * _Nullable' index='2' name='fusedNeuronDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='numberOfFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='reloadDataSource:'>
<arg declared_type64='id _Nonnull' index='0' name='dataSource' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='reloadGammaAndBetaFromDataSource'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='reloadGammaAndBetaWithCommandBuffer:gammaAndBetaState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNNormalizationGammaAndBetaState * _Nonnull' index='1' name='gammaAndBetaState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='reloadMeanAndVarianceFromDataSource'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='reloadMeanAndVarianceWithCommandBuffer:meanAndVarianceState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNNormalizationMeanAndVarianceState * _Nonnull' index='1' name='meanAndVarianceState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='resultStateForSourceImage:sourceStates:destinationImage:'>
<arg declared_type64='MPSImage * _Nonnull' index='0' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='MPSCNNBatchNormalizationState * _Nullable' type64='@'/>
</method>
<method selector='setEpsilon:'>
<arg declared_type64='float' index='0' name='epsilon' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='temporaryResultStateForCommandBuffer:sourceImage:sourceStates:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='MPSCNNBatchNormalizationState * _Nullable' type64='@'/>
</method>
</class>
<class name='MPSCNNBatchNormalizationGradient'>
<method selector='encodeBatchToCommandBuffer:sourceGradients:sourceImages:batchNormalizationState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceGradients' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='sourceImages' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='3' name='batchNormalizationState' type64='@'/>
<retval declared_type64='MPSImageBatch * _Nonnull' type64='@'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceGradients:sourceImages:batchNormalizationState:destinationGradients:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceGradients' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='sourceImages' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='3' name='batchNormalizationState' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='4' name='destinationGradients' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:sourceGradient:sourceImage:batchNormalizationState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='3' name='batchNormalizationState' type64='@'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceGradient:sourceImage:batchNormalizationState:destinationGradient:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='3' name='batchNormalizationState' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='4' name='destinationGradient' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:fusedNeuronDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSNNNeuronDescriptor * _Nullable' index='1' name='fusedNeuronDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNBatchNormalizationGradientNode'>
<method selector='initWithSourceGradient:sourceImage:gradientState:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNBatchNormalizationNode'>
<method selector='flags'>
<retval declared_type64='MPSCNNBatchNormalizationFlags' type64='Q'/>
</method>
<method selector='initWithSource:dataSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='dataSource' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:dataSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='dataSource' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setFlags:'>
<arg declared_type64='MPSCNNBatchNormalizationFlags' index='0' name='flags' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTrainingStyle:'>
<arg declared_type64='MPSNNTrainingStyle' index='0' name='trainingStyle' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='trainingStyle'>
<retval declared_type64='MPSNNTrainingStyle' type64='Q'/>
</method>
</class>
<class name='MPSCNNBatchNormalizationState'>
<method selector='batchNormalization'>
<retval declared_type64='MPSCNNBatchNormalization * _Nonnull' type64='@'/>
</method>
<method selector='beta'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='gamma'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='gradientForBeta'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='gradientForGamma'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='mean'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='reset'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='variance'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
</class>
<class name='MPSCNNBatchNormalizationStatistics'>
<method selector='encodeBatchToCommandBuffer:sourceImages:batchNormalizationState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImages' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='2' name='batchNormalizationState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNBatchNormalizationStatisticsGradient'>
<method selector='encodeBatchToCommandBuffer:sourceGradients:sourceImages:batchNormalizationState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceGradients' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='sourceImages' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='3' name='batchNormalizationState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:fusedNeuronDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSNNNeuronDescriptor * _Nullable' index='1' name='fusedNeuronDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNBinaryConvolution'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:convolutionData:outputBiasTerms:outputScaleTerms:inputBiasTerms:inputScaleTerms:type:flags:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='convolutionData' type64='@'/>
<arg const='true' declared_type64='float * _Nullable' index='2' name='outputBiasTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='3' name='outputScaleTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='4' name='inputBiasTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='5' name='inputScaleTerms' type64='^f'/>
<arg declared_type64='MPSCNNBinaryConvolutionType' index='6' name='type' type64='Q'/>
<arg declared_type64='MPSCNNBinaryConvolutionFlags' index='7' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:convolutionData:scaleValue:type:flags:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='convolutionData' type64='@'/>
<arg declared_type64='float' index='2' name='scaleValue' type64='f'/>
<arg declared_type64='MPSCNNBinaryConvolutionType' index='3' name='type' type64='Q'/>
<arg declared_type64='MPSCNNBinaryConvolutionFlags' index='4' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='inputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='outputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSCNNBinaryConvolutionNode'>
<method selector='initWithSource:weights:outputBiasTerms:outputScaleTerms:inputBiasTerms:inputScaleTerms:type:flags:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<arg const='true' declared_type64='float * _Nullable' index='2' name='outputBiasTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='3' name='outputScaleTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='4' name='inputBiasTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='5' name='inputScaleTerms' type64='^f'/>
<arg declared_type64='MPSCNNBinaryConvolutionType' index='6' name='type' type64='Q'/>
<arg declared_type64='MPSCNNBinaryConvolutionFlags' index='7' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:weights:scaleValue:type:flags:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<arg declared_type64='float' index='2' name='scaleValue' type64='f'/>
<arg declared_type64='MPSCNNBinaryConvolutionType' index='3' name='type' type64='Q'/>
<arg declared_type64='MPSCNNBinaryConvolutionFlags' index='4' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:weights:outputBiasTerms:outputScaleTerms:inputBiasTerms:inputScaleTerms:type:flags:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<arg const='true' declared_type64='float * _Nullable' index='2' name='outputBiasTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='3' name='outputScaleTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='4' name='inputBiasTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='5' name='inputScaleTerms' type64='^f'/>
<arg declared_type64='MPSCNNBinaryConvolutionType' index='6' name='type' type64='Q'/>
<arg declared_type64='MPSCNNBinaryConvolutionFlags' index='7' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:weights:scaleValue:type:flags:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<arg declared_type64='float' index='2' name='scaleValue' type64='f'/>
<arg declared_type64='MPSCNNBinaryConvolutionType' index='3' name='type' type64='Q'/>
<arg declared_type64='MPSCNNBinaryConvolutionFlags' index='4' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNBinaryFullyConnected'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:convolutionData:outputBiasTerms:outputScaleTerms:inputBiasTerms:inputScaleTerms:type:flags:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='convolutionData' type64='@'/>
<arg const='true' declared_type64='float * _Nullable' index='2' name='outputBiasTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='3' name='outputScaleTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='4' name='inputBiasTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='5' name='inputScaleTerms' type64='^f'/>
<arg declared_type64='MPSCNNBinaryConvolutionType' index='6' name='type' type64='Q'/>
<arg declared_type64='MPSCNNBinaryConvolutionFlags' index='7' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:convolutionData:scaleValue:type:flags:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='convolutionData' type64='@'/>
<arg declared_type64='float' index='2' name='scaleValue' type64='f'/>
<arg declared_type64='MPSCNNBinaryConvolutionType' index='3' name='type' type64='Q'/>
<arg declared_type64='MPSCNNBinaryConvolutionFlags' index='4' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNBinaryFullyConnectedNode'>
<method selector='initWithSource:weights:outputBiasTerms:outputScaleTerms:inputBiasTerms:inputScaleTerms:type:flags:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<arg const='true' declared_type64='float * _Nullable' index='2' name='outputBiasTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='3' name='outputScaleTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='4' name='inputBiasTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='5' name='inputScaleTerms' type64='^f'/>
<arg declared_type64='MPSCNNBinaryConvolutionType' index='6' name='type' type64='Q'/>
<arg declared_type64='MPSCNNBinaryConvolutionFlags' index='7' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:weights:scaleValue:type:flags:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<arg declared_type64='float' index='2' name='scaleValue' type64='f'/>
<arg declared_type64='MPSCNNBinaryConvolutionType' index='3' name='type' type64='Q'/>
<arg declared_type64='MPSCNNBinaryConvolutionFlags' index='4' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:weights:outputBiasTerms:outputScaleTerms:inputBiasTerms:inputScaleTerms:type:flags:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<arg const='true' declared_type64='float * _Nullable' index='2' name='outputBiasTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='3' name='outputScaleTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='4' name='inputBiasTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='5' name='inputScaleTerms' type64='^f'/>
<arg declared_type64='MPSCNNBinaryConvolutionType' index='6' name='type' type64='Q'/>
<arg declared_type64='MPSCNNBinaryConvolutionFlags' index='7' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:weights:scaleValue:type:flags:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<arg declared_type64='float' index='2' name='scaleValue' type64='f'/>
<arg declared_type64='MPSCNNBinaryConvolutionType' index='3' name='type' type64='Q'/>
<arg declared_type64='MPSCNNBinaryConvolutionFlags' index='4' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNBinaryKernel'>
<method selector='appendBatchBarrier'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='batchEncodingStorageSizeForPrimaryImage:secondaryImage:sourceStates:destinationImage:'>
<arg declared_type64='MPSImageBatch * _Nonnull' index='0' name='primaryImage' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='secondaryImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nullable' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='clipRect'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='destinationFeatureChannelOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='destinationImageAllocator'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='destinationImageDescriptorForSourceImages:sourceStates:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceImages' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<retval declared_type64='MPSImageDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='encodeBatchToCommandBuffer:primaryImages:secondaryImages:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='primaryImage' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='secondaryImage' type64='@'/>
<retval declared_type64='MPSImageBatch * _Nonnull' type64='@'/>
</method>
<method selector='encodeBatchToCommandBuffer:primaryImages:secondaryImages:destinationImages:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='primaryImages' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='secondaryImages' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='3' name='destinationImages' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeBatchToCommandBuffer:primaryImages:secondaryImages:destinationStates:destinationStateIsTemporary:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='primaryImages' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='secondaryImages' type64='@'/>
<arg declared_type64='MPSStateBatch * _Nullable * _Nonnull' index='3' name='outState' type64='@'/>
<arg declared_type64='BOOL' index='4' name='isTemporary' type64='B'/>
<retval declared_type64='MPSImageBatch * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:primaryImage:secondaryImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='primaryImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='secondaryImage' type64='@'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:primaryImage:secondaryImage:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='primaryImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='secondaryImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:primaryImage:secondaryImage:destinationState:destinationStateIsTemporary:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='primaryImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='secondaryImage' type64='@'/>
<arg declared_type64='MPSState * _Nullable * _Nonnull' index='3' name='outState' type64='^@'/>
<arg declared_type64='BOOL' index='4' name='isTemporary' type64='B'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='encodingStorageSizeForPrimaryImage:secondaryImage:sourceStates:destinationImage:'>
<arg declared_type64='MPSImage * _Nonnull' index='0' name='primaryImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='secondaryImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImage * _Nullable' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='isBackwards'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isResultStateReusedAcrossBatch'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isStateModified'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='padding'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='primaryDilationRateX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='primaryDilationRateY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='primaryEdgeMode'>
<retval declared_type64='MPSImageEdgeMode' type64='Q'/>
</method>
<method selector='primaryKernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='primaryKernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='primaryOffset'>
<retval declared_type64='MPSOffset' type64='{_MPSOffset=qqq}'/>
</method>
<method selector='primarySourceFeatureChannelMaxCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='primarySourceFeatureChannelOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='primaryStrideInPixelsX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='primaryStrideInPixelsY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='resultStateBatchForPrimaryImage:secondaryImage:sourceStates:destinationImage:'>
<arg declared_type64='MPSImageBatch * _Nonnull' index='0' name='primaryImage' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='secondaryImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='MPSStateBatch * _Nullable' type64='@'/>
</method>
<method selector='resultStateForPrimaryImage:secondaryImage:sourceStates:destinationImage:'>
<arg declared_type64='MPSImage * _Nonnull' index='0' name='primaryImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='secondaryImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='MPSState * _Nullable' type64='@'/>
</method>
<method selector='secondaryDilationRateX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='secondaryDilationRateY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='secondaryEdgeMode'>
<retval declared_type64='MPSImageEdgeMode' type64='Q'/>
</method>
<method selector='secondaryKernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='secondaryKernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='secondaryOffset'>
<retval declared_type64='MPSOffset' type64='{_MPSOffset=qqq}'/>
</method>
<method selector='secondarySourceFeatureChannelMaxCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='secondarySourceFeatureChannelOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='secondaryStrideInPixelsX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='secondaryStrideInPixelsY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setClipRect:'>
<arg declared_type64='MTLRegion' index='0' name='clipRect' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDestinationFeatureChannelOffset:'>
<arg declared_type64='NSUInteger' index='0' name='destinationFeatureChannelOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDestinationImageAllocator:'>
<arg declared_type64='id _Nonnull' index='0' name='destinationImageAllocator' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPadding:'>
<arg declared_type64='id _Nonnull' index='0' name='padding' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryEdgeMode:'>
<arg declared_type64='MPSImageEdgeMode' index='0' name='primaryEdgeMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryOffset:'>
<arg declared_type64='MPSOffset' index='0' name='primaryOffset' type64='{_MPSOffset=qqq}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimarySourceFeatureChannelMaxCount:'>
<arg declared_type64='NSUInteger' index='0' name='primarySourceFeatureChannelMaxCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimarySourceFeatureChannelOffset:'>
<arg declared_type64='NSUInteger' index='0' name='primarySourceFeatureChannelOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryStrideInPixelsX:'>
<arg declared_type64='NSUInteger' index='0' name='primaryStrideInPixelsX' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryStrideInPixelsY:'>
<arg declared_type64='NSUInteger' index='0' name='primaryStrideInPixelsY' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryEdgeMode:'>
<arg declared_type64='MPSImageEdgeMode' index='0' name='secondaryEdgeMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryOffset:'>
<arg declared_type64='MPSOffset' index='0' name='secondaryOffset' type64='{_MPSOffset=qqq}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondarySourceFeatureChannelMaxCount:'>
<arg declared_type64='NSUInteger' index='0' name='secondarySourceFeatureChannelMaxCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondarySourceFeatureChannelOffset:'>
<arg declared_type64='NSUInteger' index='0' name='secondarySourceFeatureChannelOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryStrideInPixelsX:'>
<arg declared_type64='NSUInteger' index='0' name='secondaryStrideInPixelsX' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryStrideInPixelsY:'>
<arg declared_type64='NSUInteger' index='0' name='secondaryStrideInPixelsY' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='temporaryResultStateBatchForCommandBuffer:primaryImage:secondaryImage:sourceStates:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='primaryImage' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='secondaryImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='3' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='4' name='destinationImage' type64='@'/>
<retval declared_type64='MPSStateBatch * _Nullable' type64='@'/>
</method>
<method selector='temporaryResultStateForCommandBuffer:primaryImage:secondaryImage:sourceStates:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='primaryImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='secondaryImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='3' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='4' name='destinationImage' type64='@'/>
<retval declared_type64='MPSState * _Nullable' type64='@'/>
</method>
</class>
<class name='MPSCNNConvolution'>
<method selector='accumulatorPrecisionOption'>
<retval declared_type64='MPSNNConvolutionAccumulatorPrecisionOption' type64='Q'/>
</method>
<method selector='channelMultiplier'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='dataSource'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='exportWeightsAndBiasesWithCommandBuffer:resultStateCanBeTemporary:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='BOOL' index='1' name='resultStateCanBeTemporary' type64='B'/>
<retval declared_type64='MPSCNNConvolutionWeightsAndBiasesState * _Nonnull' type64='@'/>
</method>
<method selector='fusedNeuronDescriptor'>
<retval declared_type64='MPSNNNeuronDescriptor * _Nullable' type64='@'/>
</method>
<method selector='groups'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:convolutionDescriptor:kernelWeights:biasTerms:flags:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSCNNConvolutionDescriptor * _Nonnull' index='1' name='convolutionDescriptor' type64='@'/>
<arg const='true' declared_type64='float * _Nonnull' index='2' name='kernelWeights' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='3' name='biasTerms' type64='^f'/>
<arg declared_type64='MPSCNNConvolutionFlags' index='4' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:weights:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='inputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='neuron'>
<retval const='true' declared_type64='MPSCNNNeuron * _Nullable' type64='@'/>
</method>
<method selector='neuronParameterA'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronParameterB'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronParameterC'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronType'>
<retval declared_type64='MPSCNNNeuronType' type64='i'/>
</method>
<method selector='outputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='reloadWeightsAndBiasesFromDataSource'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='reloadWeightsAndBiasesWithCommandBuffer:state:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNConvolutionWeightsAndBiasesState * _Nonnull' index='1' name='state' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='reloadWeightsAndBiasesWithDataSource:'>
<arg declared_type64='id _Nonnull' index='0' name='dataSource' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='resultStateBatchForSourceImage:sourceStates:destinationImage:'>
<arg declared_type64='MPSImageBatch * _Nonnull' index='0' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='MPSCNNConvolutionGradientStateBatch * _Nullable' type64='@'/>
</method>
<method selector='resultStateForSourceImage:sourceStates:destinationImage:'>
<arg declared_type64='MPSImage * _Nonnull' index='0' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='MPSCNNConvolutionGradientState * _Nullable' type64='@'/>
</method>
<method selector='setAccumulatorPrecisionOption:'>
<arg declared_type64='MPSNNConvolutionAccumulatorPrecisionOption' index='0' name='accumulatorPrecisionOption' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='subPixelScaleFactor'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='temporaryResultStateBatchForCommandBuffer:sourceImage:sourceStates:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='MPSCNNConvolutionGradientStateBatch * _Nullable' type64='@'/>
</method>
<method selector='temporaryResultStateForCommandBuffer:sourceImage:sourceStates:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='MPSCNNConvolutionGradientState * _Nullable' type64='@'/>
</method>
</class>
<class name='MPSCNNConvolutionDescriptor'>
<method class_method='true' selector='cnnConvolutionDescriptorWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='inputFeatureChannels' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='outputFeatureChannels' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='cnnConvolutionDescriptorWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:neuronFilter:'>
<arg declared_type64='NSUInteger' index='0' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='inputFeatureChannels' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='outputFeatureChannels' type64='Q'/>
<arg const='true' declared_type64='MPSCNNNeuron * _Nullable' index='4' name='neuronFilter' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='dilationRateX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='dilationRateY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='encodeWithCoder:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aCoder' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='fusedNeuronDescriptor'>
<retval declared_type64='MPSNNNeuronDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='groups'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='initWithCoder:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='inputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='neuron'>
<retval const='true' declared_type64='MPSCNNNeuron * _Nullable' type64='@'/>
</method>
<method selector='neuronParameterA'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronParameterB'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronType'>
<retval declared_type64='MPSCNNNeuronType' type64='i'/>
</method>
<method selector='outputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setBatchNormalizationParametersForInferenceWithMean:variance:gamma:beta:epsilon:'>
<arg const='true' declared_type64='float * _Nullable' index='0' name='mean' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='1' name='variance' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='2' name='gamma' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='3' name='beta' type64='^f'/>
<arg const='true' declared_type64='float' index='4' name='epsilon' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDilationRateX:'>
<arg declared_type64='NSUInteger' index='0' name='dilationRateX' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDilationRateY:'>
<arg declared_type64='NSUInteger' index='0' name='dilationRateY' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFusedNeuronDescriptor:'>
<arg declared_type64='MPSNNNeuronDescriptor * _Nonnull' index='0' name='fusedNeuronDescriptor' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setGroups:'>
<arg declared_type64='NSUInteger' index='0' name='groups' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setInputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='inputFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setKernelHeight:'>
<arg declared_type64='NSUInteger' index='0' name='kernelHeight' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setKernelWidth:'>
<arg declared_type64='NSUInteger' index='0' name='kernelWidth' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNeuron:'>
<arg const='true' declared_type64='MPSCNNNeuron * _Nullable' index='0' name='neuron' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNeuronToPReLUWithParametersA:'>
<arg declared_type64='NSData * _Nonnull' index='0' name='A' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNeuronType:parameterA:parameterB:'>
<arg declared_type64='MPSCNNNeuronType' index='0' name='neuronType' type64='i'/>
<arg declared_type64='float' index='1' name='parameterA' type64='f'/>
<arg declared_type64='float' index='2' name='parameterB' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOutputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='outputFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStrideInPixelsX:'>
<arg declared_type64='NSUInteger' index='0' name='strideInPixelsX' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStrideInPixelsY:'>
<arg declared_type64='NSUInteger' index='0' name='strideInPixelsY' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='strideInPixelsX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='strideInPixelsY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='supportsSecureCoding'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSCNNConvolutionGradient'>
<method selector='channelMultiplier'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='dataSource'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='gradientOption'>
<retval declared_type64='MPSCNNConvolutionGradientOption' type64='Q'/>
</method>
<method selector='groups'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:weights:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='reloadWeightsAndBiasesFromDataSource'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='reloadWeightsAndBiasesWithCommandBuffer:state:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNConvolutionWeightsAndBiasesState * _Nonnull' index='1' name='state' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='serializeWeightsAndBiases'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='setGradientOption:'>
<arg declared_type64='MPSCNNConvolutionGradientOption' index='0' name='gradientOption' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSerializeWeightsAndBiases:'>
<arg declared_type64='BOOL' index='0' name='serializeWeightsAndBiases' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceGradientFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceImageFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSCNNConvolutionGradientNode'>
<method selector='initWithSourceGradient:sourceImage:convolutionGradientState:weights:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNConvolutionGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='id _Nullable' index='3' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:convolutionGradientState:weights:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNConvolutionGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='id _Nullable' index='3' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNConvolutionGradientState'>
<method selector='convolution'>
<retval declared_type64='MPSCNNConvolution * _Nonnull' type64='@'/>
</method>
<method selector='gradientForBiases'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='gradientForWeights'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='gradientForWeightsLayout'>
<retval declared_type64='MPSCNNConvolutionWeightsLayout' type64='I'/>
</method>
</class>
<class name='MPSCNNConvolutionNode'>
<method selector='accumulatorPrecision'>
<retval declared_type64='MPSNNConvolutionAccumulatorPrecisionOption' type64='Q'/>
</method>
<method selector='convolutionGradientState'>
<retval declared_type64='MPSCNNConvolutionGradientStateNode * _Nullable' type64='@'/>
</method>
<method selector='initWithSource:weights:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:weights:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setAccumulatorPrecision:'>
<arg declared_type64='MPSNNConvolutionAccumulatorPrecisionOption' index='0' name='accumulatorPrecision' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTrainingStyle:'>
<arg declared_type64='MPSNNTrainingStyle' index='0' name='trainingStyle' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='trainingStyle'>
<retval declared_type64='MPSNNTrainingStyle' type64='Q'/>
</method>
</class>
<class name='MPSCNNConvolutionTranspose'>
<method selector='accumulatorPrecisionOption'>
<retval declared_type64='MPSNNConvolutionAccumulatorPrecisionOption' type64='Q'/>
</method>
<method selector='dataSource'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:convolutionGradientStates:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNConvolutionGradientStateBatch * _Nullable' index='2' name='convolutionGradientState' type64='@'/>
<retval declared_type64='MPSImageBatch * _Nonnull' type64='@'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:convolutionGradientStates:destinationImages:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNConvolutionGradientStateBatch * _Nullable' index='2' name='convolutionGradientState' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:convolutionGradientStates:destinationStates:destinationStateIsTemporary:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImages' type64='@'/>
<arg declared_type64='MPSCNNConvolutionGradientStateBatch * _Nullable' index='2' name='convolutionGradientStates' type64='@'/>
<arg declared_type64='MPSCNNConvolutionTransposeGradientStateBatch * _Nullable * _Nonnull' index='3' name='outStates' type64='@'/>
<arg declared_type64='BOOL' index='4' name='isTemporary' type64='B'/>
<retval declared_type64='MPSImageBatch * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:convolutionGradientState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNConvolutionGradientState * _Nullable' index='2' name='convolutionGradientState' type64='@'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:convolutionGradientState:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNConvolutionGradientState * _Nullable' index='2' name='convolutionGradientState' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:convolutionGradientState:destinationState:destinationStateIsTemporary:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNConvolutionGradientState * _Nullable' index='2' name='convolutionGradientState' type64='@'/>
<arg declared_type64='MPSCNNConvolutionTransposeGradientState * _Nullable * _Nonnull' index='3' name='outState' type64='^@'/>
<arg declared_type64='BOOL' index='4' name='isTemporary' type64='B'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='exportWeightsAndBiasesWithCommandBuffer:resultStateCanBeTemporary:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='BOOL' index='1' name='resultStateCanBeTemporary' type64='B'/>
<retval declared_type64='MPSCNNConvolutionWeightsAndBiasesState * _Nonnull' type64='@'/>
</method>
<method selector='groups'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:weights:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='inputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelOffsetX'>
<retval declared_type64='NSInteger' type64='q'/>
</method>
<method selector='kernelOffsetY'>
<retval declared_type64='NSInteger' type64='q'/>
</method>
<method selector='outputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='reloadWeightsAndBiasesFromDataSource'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='reloadWeightsAndBiasesWithCommandBuffer:state:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNConvolutionWeightsAndBiasesState * _Nonnull' index='1' name='state' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='resultStateBatchForSourceImage:sourceStates:destinationImage:'>
<arg declared_type64='MPSImageBatch * _Nonnull' index='0' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='MPSCNNConvolutionTransposeGradientStateBatch * _Nullable' type64='@'/>
</method>
<method selector='resultStateForSourceImage:sourceStates:destinationImage:'>
<arg declared_type64='MPSImage * _Nonnull' index='0' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='MPSCNNConvolutionTransposeGradientState * _Nullable' type64='@'/>
</method>
<method selector='setAccumulatorPrecisionOption:'>
<arg declared_type64='MPSNNConvolutionAccumulatorPrecisionOption' index='0' name='accumulatorPrecisionOption' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setKernelOffsetX:'>
<arg declared_type64='NSInteger' index='0' name='kernelOffsetX' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setKernelOffsetY:'>
<arg declared_type64='NSInteger' index='0' name='kernelOffsetY' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='temporaryResultStateBatchForCommandBuffer:sourceImage:sourceStates:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='MPSCNNConvolutionTransposeGradientStateBatch * _Nullable' type64='@'/>
</method>
<method selector='temporaryResultStateForCommandBuffer:sourceImage:sourceStates:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='MPSCNNConvolutionTransposeGradientState * _Nullable' type64='@'/>
</method>
</class>
<class name='MPSCNNConvolutionTransposeGradient'>
<method selector='dataSource'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='gradientOption'>
<retval declared_type64='MPSCNNConvolutionGradientOption' type64='Q'/>
</method>
<method selector='groups'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:weights:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='reloadWeightsAndBiasesFromDataSource'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='reloadWeightsAndBiasesWithCommandBuffer:state:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNConvolutionWeightsAndBiasesState * _Nonnull' index='1' name='state' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setGradientOption:'>
<arg declared_type64='MPSCNNConvolutionGradientOption' index='0' name='gradientOption' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceGradientFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceImageFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSCNNConvolutionTransposeGradientNode'>
<method selector='initWithSourceGradient:sourceImage:convolutionTransposeGradientState:weights:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNConvolutionTransposeGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='id _Nullable' index='3' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:convolutionTransposeGradientState:weights:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNConvolutionTransposeGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='id _Nullable' index='3' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNConvolutionTransposeGradientState'>
<method selector='convolutionTranspose'>
<retval declared_type64='MPSCNNConvolutionTranspose * _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNConvolutionTransposeNode'>
<method selector='initWithSource:convolutionGradientState:weights:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='MPSCNNConvolutionGradientStateNode * _Nullable' index='1' name='convolutionGradientState' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:convolutionGradientState:weights:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='MPSCNNConvolutionGradientStateNode * _Nullable' index='1' name='convolutionGradientState' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNConvolutionWeightsAndBiasesState'>
<method selector='biases'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='biasesOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='initWithDevice:cnnConvolutionDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSCNNConvolutionDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithWeights:biases:'>
<arg declared_type64='id _Nonnull' index='0' name='weights' type64='@'/>
<arg declared_type64='id _Nullable' index='1' name='biases' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithWeights:weightsOffset:biases:biasesOffset:cnnConvolutionDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='weights' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='weightsOffset' type64='Q'/>
<arg declared_type64='id _Nullable' index='2' name='biases' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='biasesOffset' type64='Q'/>
<arg declared_type64='MPSCNNConvolutionDescriptor * _Nonnull' index='4' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='temporaryCNNConvolutionWeightsAndBiasesStateWithCommandBuffer:cnnConvolutionDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNConvolutionDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='weights'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='weightsOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSCNNCrossChannelNormalization'>
<method selector='alpha'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='beta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='delta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelSize:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='float' index='0' name='alpha' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBeta:'>
<arg declared_type64='float' index='0' name='beta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDelta:'>
<arg declared_type64='float' index='0' name='delta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNCrossChannelNormalizationGradient'>
<method selector='alpha'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='beta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='delta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelSize:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='float' index='0' name='alpha' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBeta:'>
<arg declared_type64='float' index='0' name='beta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDelta:'>
<arg declared_type64='float' index='0' name='delta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNCrossChannelNormalizationGradientNode'>
<method selector='initWithSourceGradient:sourceImage:gradientState:kernelSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='kernelSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:kernelSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='kernelSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNCrossChannelNormalizationNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:kernelSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelSizeInFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='nodeWithSource:kernelSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setKernelSizeInFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='kernelSizeInFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNDepthWiseConvolutionDescriptor'>
<method selector='channelMultiplier'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSCNNDilatedPoolingMax'>
<method selector='dilationRateX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='dilationRateY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:dilationRateX:dilationRateY:strideInPixelsX:strideInPixelsY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='dilationRateX' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='dilationRateY' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='6' name='strideInPixelsY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNDilatedPoolingMaxGradient'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:dilationRateX:dilationRateY:strideInPixelsX:strideInPixelsY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='dilationRateX' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='dilationRateY' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='6' name='strideInPixelsY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNDilatedPoolingMaxGradientNode'>
<method selector='dilationRateX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='dilationRateY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='initWithSourceGradient:sourceImage:gradientState:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:dilationRateX:dilationRateY:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='6' name='strideInPixelsY' type64='Q'/>
<arg declared_type64='NSUInteger' index='7' name='dilationRateX' type64='Q'/>
<arg declared_type64='NSUInteger' index='8' name='dilationRateY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:dilationRateX:dilationRateY:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='6' name='strideInPixelsY' type64='Q'/>
<arg declared_type64='NSUInteger' index='7' name='dilationRateX' type64='Q'/>
<arg declared_type64='NSUInteger' index='8' name='dilationRateY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNDilatedPoolingMaxNode'>
<method selector='dilationRateX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='dilationRateY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='initWithSource:filterSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='size' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:filterSize:stride:dilationRate:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='size' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='stride' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='dilationRate' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:dilationRateX:dilationRateY:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='strideInPixelsY' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='dilationRateX' type64='Q'/>
<arg declared_type64='NSUInteger' index='6' name='dilationRateY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:filterSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='size' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:filterSize:stride:dilationRate:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='size' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='stride' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='dilationRate' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNDivide'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNDropout'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:keepProbability:seed:maskStrideInPixels:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='keepProbability' type64='f'/>
<arg declared_type64='NSUInteger' index='2' name='seed' type64='Q'/>
<arg declared_type64='MTLSize' index='3' name='maskStrideInPixels' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='keepProbability'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='maskStrideInPixels'>
<retval declared_type64='MTLSize' type64='{_MTLSize=QQQ}'/>
</method>
<method selector='resultStateBatchForSourceImage:sourceStates:destinationImage:'>
<arg declared_type64='MPSImageBatch * _Nonnull' index='0' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='MPSCNNDropoutGradientState * _Nullable' type64='@'/>
</method>
<method selector='resultStateForSourceImage:sourceStates:destinationImage:'>
<arg declared_type64='MPSImage * _Nonnull' index='0' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='MPSCNNDropoutGradientState * _Nullable' type64='@'/>
</method>
<method selector='seed'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='temporaryResultStateBatchForCommandBuffer:sourceImage:sourceStates:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='MPSCNNDropoutGradientStateBatch * _Nullable' type64='@'/>
</method>
<method selector='temporaryResultStateForCommandBuffer:sourceImage:sourceStates:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='MPSCNNDropoutGradientState * _Nullable' type64='@'/>
</method>
</class>
<class name='MPSCNNDropoutGradient'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:keepProbability:seed:maskStrideInPixels:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='keepProbability' type64='f'/>
<arg declared_type64='NSUInteger' index='2' name='seed' type64='Q'/>
<arg declared_type64='MTLSize' index='3' name='maskStrideInPixels' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='keepProbability'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='maskStrideInPixels'>
<retval declared_type64='MTLSize' type64='{_MTLSize=QQQ}'/>
</method>
<method selector='seed'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSCNNDropoutGradientNode'>
<method selector='initWithSourceGradient:sourceImage:gradientState:keepProbability:seed:maskStrideInPixels:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='float' index='3' name='keepProbability' type64='f'/>
<arg declared_type64='NSUInteger' index='4' name='seed' type64='Q'/>
<arg declared_type64='MTLSize' index='5' name='maskStrideInPixels' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='keepProbability'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='maskStrideInPixels'>
<retval declared_type64='MTLSize' type64='{_MTLSize=QQQ}'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:keepProbability:seed:maskStrideInPixels:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='float' index='3' name='keepProbability' type64='f'/>
<arg declared_type64='NSUInteger' index='4' name='seed' type64='Q'/>
<arg declared_type64='MTLSize' index='5' name='maskStrideInPixels' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='seed'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSCNNDropoutGradientState'>
<method selector='maskData'>
<retval declared_type64='NSData * _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNDropoutNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:keepProbability:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='float' index='1' name='keepProbability' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:keepProbability:seed:maskStrideInPixels:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='float' index='1' name='keepProbability' type64='f'/>
<arg declared_type64='NSUInteger' index='2' name='seed' type64='Q'/>
<arg declared_type64='MTLSize' index='3' name='maskStrideInPixels' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='keepProbability'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='maskStrideInPixels'>
<retval declared_type64='MTLSize' type64='{_MTLSize=QQQ}'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:keepProbability:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='float' index='1' name='keepProbability' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:keepProbability:seed:maskStrideInPixels:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='float' index='1' name='keepProbability' type64='f'/>
<arg declared_type64='NSUInteger' index='2' name='seed' type64='Q'/>
<arg declared_type64='MTLSize' index='3' name='maskStrideInPixels' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='seed'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSCNNFullyConnected'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:convolutionDescriptor:kernelWeights:biasTerms:flags:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSCNNConvolutionDescriptor * _Nonnull' index='1' name='convolutionDescriptor' type64='@'/>
<arg const='true' declared_type64='float * _Nonnull' index='2' name='kernelWeights' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='3' name='biasTerms' type64='^f'/>
<arg declared_type64='MPSCNNConvolutionFlags' index='4' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:weights:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNFullyConnectedGradient'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:weights:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNFullyConnectedGradientNode'>
<method selector='initWithSourceGradient:sourceImage:convolutionGradientState:weights:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNConvolutionGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='id _Nullable' index='3' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:convolutionGradientState:weights:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNConvolutionGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='id _Nullable' index='3' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNFullyConnectedNode'>
<method selector='initWithSource:weights:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:weights:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNGradientKernel'>
<method selector='encodeBatchToCommandBuffer:sourceGradients:sourceImages:gradientStates:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceGradients' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='sourceImages' type64='@'/>
<arg declared_type64='MPSStateBatch * _Nonnull' index='3' name='gradientStates' type64='@'/>
<retval declared_type64='MPSImageBatch * _Nonnull' type64='@'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceGradients:sourceImages:gradientStates:destinationGradients:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceGradients' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='sourceImages' type64='@'/>
<arg declared_type64='MPSStateBatch * _Nonnull' index='3' name='gradientStates' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='4' name='destinationGradients' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:sourceGradient:sourceImage:gradientState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='sourceImage' type64='@'/>
<arg declared_type64='MPSState * _Nonnull' index='3' name='gradientState' type64='@'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceGradient:sourceImage:gradientState:destinationGradient:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='sourceImage' type64='@'/>
<arg declared_type64='MPSState * _Nonnull' index='3' name='gradientState' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='4' name='destinationGradient' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelOffsetX'>
<retval declared_type64='NSInteger' type64='q'/>
</method>
<method selector='kernelOffsetY'>
<retval declared_type64='NSInteger' type64='q'/>
</method>
<method selector='setKernelOffsetX:'>
<arg declared_type64='NSInteger' index='0' name='kernelOffsetX' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setKernelOffsetY:'>
<arg declared_type64='NSInteger' index='0' name='kernelOffsetY' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNGroupNormalization'>
<method selector='dataSource'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='epsilon'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:dataSource:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='dataSource' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='reloadGammaAndBetaFromDataSource'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='reloadGammaAndBetaWithCommandBuffer:gammaAndBetaState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNNormalizationGammaAndBetaState * _Nonnull' index='1' name='gammaAndBetaState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='resultStateForSourceImage:sourceStates:destinationImage:'>
<arg declared_type64='MPSImage * _Nonnull' index='0' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='MPSCNNGroupNormalizationGradientState * _Nullable' type64='@'/>
</method>
<method selector='setEpsilon:'>
<arg declared_type64='float' index='0' name='epsilon' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='temporaryResultStateForCommandBuffer:sourceImage:sourceStates:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='MPSCNNGroupNormalizationGradientState * _Nullable' type64='@'/>
</method>
</class>
<class name='MPSCNNGroupNormalizationGradientNode'>
<method selector='initWithSourceGradient:sourceImage:gradientState:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNGroupNormalizationGradientState'>
<method selector='beta'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='gamma'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='gradientForBeta'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='gradientForGamma'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='groupNormalization'>
<retval declared_type64='MPSCNNGroupNormalization * _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNGroupNormalizationNode'>
<method selector='initWithSource:dataSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='dataSource' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:dataSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='dataSource' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setTrainingStyle:'>
<arg declared_type64='MPSNNTrainingStyle' index='0' name='trainingStyle' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='trainingStyle'>
<retval declared_type64='MPSNNTrainingStyle' type64='Q'/>
</method>
</class>
<class name='MPSCNNInstanceNormalization'>
<method selector='dataSource'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='epsilon'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:dataSource:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='dataSource' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='reloadDataSource:'>
<arg declared_type64='id _Nonnull' index='0' name='dataSource' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='reloadGammaAndBetaFromDataSource'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='reloadGammaAndBetaWithCommandBuffer:gammaAndBetaState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNNormalizationGammaAndBetaState * _Nonnull' index='1' name='gammaAndBetaState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='resultStateForSourceImage:sourceStates:destinationImage:'>
<arg declared_type64='MPSImage * _Nonnull' index='0' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='MPSCNNInstanceNormalizationGradientState * _Nullable' type64='@'/>
</method>
<method selector='setEpsilon:'>
<arg declared_type64='float' index='0' name='epsilon' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='temporaryResultStateForCommandBuffer:sourceImage:sourceStates:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='MPSCNNInstanceNormalizationGradientState * _Nullable' type64='@'/>
</method>
</class>
<class name='MPSCNNInstanceNormalizationGradientNode'>
<method selector='initWithSourceGradient:sourceImage:gradientState:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNInstanceNormalizationGradientState'>
<method selector='beta'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='gamma'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='gradientForBeta'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='gradientForGamma'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='instanceNormalization'>
<retval declared_type64='MPSCNNInstanceNormalization * _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNInstanceNormalizationNode'>
<method selector='initWithSource:dataSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='dataSource' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:dataSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='dataSource' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setTrainingStyle:'>
<arg declared_type64='MPSNNTrainingStyle' index='0' name='trainingStyle' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='trainingStyle'>
<retval declared_type64='MPSNNTrainingStyle' type64='Q'/>
</method>
</class>
<class name='MPSCNNKernel'>
<method selector='appendBatchBarrier'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='batchEncodingStorageSizeForSourceImage:sourceStates:destinationImage:'>
<arg declared_type64='MPSImageBatch * _Nonnull' index='0' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nullable' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='clipRect'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='destinationFeatureChannelOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='destinationImageAllocator'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='destinationImageDescriptorForSourceImages:sourceStates:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceImages' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<retval declared_type64='MPSImageDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='dilationRateX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='dilationRateY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='edgeMode'>
<retval declared_type64='MPSImageEdgeMode' type64='Q'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImages' type64='@'/>
<retval declared_type64='MPSImageBatch * _Nonnull' type64='@'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:destinationImages:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImages' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='destinationImages' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:destinationStates:destinationImages:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImages' type64='@'/>
<arg declared_type64='MPSStateBatch * _Nullable' index='2' name='destinationStates' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='3' name='destinationImages' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:destinationStates:destinationStateIsTemporary:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImages' type64='@'/>
<arg declared_type64='MPSStateBatch * _Nullable * _Nonnull' index='2' name='outStates' type64='@'/>
<arg declared_type64='BOOL' index='3' name='isTemporary' type64='B'/>
<retval declared_type64='MPSImageBatch * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:destinationState:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSState * _Nonnull' index='2' name='destinationState' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:destinationState:destinationStateIsTemporary:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSState * _Nullable * _Nonnull' index='2' name='outState' type64='^@'/>
<arg declared_type64='BOOL' index='3' name='isTemporary' type64='B'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='encodingStorageSizeForSourceImage:sourceStates:destinationImage:'>
<arg declared_type64='MPSImage * _Nonnull' index='0' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImage * _Nullable' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='isBackwards'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isResultStateReusedAcrossBatch'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isStateModified'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='offset'>
<retval declared_type64='MPSOffset' type64='{_MPSOffset=qqq}'/>
</method>
<method selector='padding'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='resultStateBatchForSourceImage:sourceStates:destinationImage:'>
<arg declared_type64='MPSImageBatch * _Nonnull' index='0' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='MPSStateBatch * _Nullable' type64='@'/>
</method>
<method selector='resultStateForSourceImage:sourceStates:destinationImage:'>
<arg declared_type64='MPSImage * _Nonnull' index='0' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='MPSState * _Nullable' type64='@'/>
</method>
<method selector='setClipRect:'>
<arg declared_type64='MTLRegion' index='0' name='clipRect' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDestinationFeatureChannelOffset:'>
<arg declared_type64='NSUInteger' index='0' name='destinationFeatureChannelOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDestinationImageAllocator:'>
<arg declared_type64='id _Nonnull' index='0' name='destinationImageAllocator' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEdgeMode:'>
<arg declared_type64='MPSImageEdgeMode' index='0' name='edgeMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOffset:'>
<arg declared_type64='MPSOffset' index='0' name='offset' type64='{_MPSOffset=qqq}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPadding:'>
<arg declared_type64='id _Nonnull' index='0' name='padding' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceFeatureChannelMaxCount:'>
<arg declared_type64='NSUInteger' index='0' name='sourceFeatureChannelMaxCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceFeatureChannelOffset:'>
<arg declared_type64='NSUInteger' index='0' name='sourceFeatureChannelOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceFeatureChannelMaxCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceFeatureChannelOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='strideInPixelsX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='strideInPixelsY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='temporaryResultStateBatchForCommandBuffer:sourceImage:sourceStates:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='MPSStateBatch * _Nullable' type64='@'/>
</method>
<method selector='temporaryResultStateForCommandBuffer:sourceImage:sourceStates:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='MPSState * _Nullable' type64='@'/>
</method>
</class>
<class name='MPSCNNLocalContrastNormalization'>
<method selector='alpha'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='beta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='delta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='p0'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='pm'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='ps'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='float' index='0' name='alpha' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBeta:'>
<arg declared_type64='float' index='0' name='beta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDelta:'>
<arg declared_type64='float' index='0' name='delta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setP0:'>
<arg declared_type64='float' index='0' name='p0' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPm:'>
<arg declared_type64='float' index='0' name='pm' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPs:'>
<arg declared_type64='float' index='0' name='ps' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNLocalContrastNormalizationGradient'>
<method selector='alpha'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='beta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='delta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='p0'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='pm'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='ps'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='float' index='0' name='alpha' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBeta:'>
<arg declared_type64='float' index='0' name='beta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDelta:'>
<arg declared_type64='float' index='0' name='delta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setP0:'>
<arg declared_type64='float' index='0' name='p0' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPm:'>
<arg declared_type64='float' index='0' name='pm' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPs:'>
<arg declared_type64='float' index='0' name='ps' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNLocalContrastNormalizationGradientNode'>
<method selector='alpha'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='beta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='delta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithSourceGradient:sourceImage:gradientState:kernelWidth:kernelHeight:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='kernelHeight' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:kernelWidth:kernelHeight:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='kernelHeight' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='p0'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='pm'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='ps'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='float' index='0' name='alpha' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBeta:'>
<arg declared_type64='float' index='0' name='beta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDelta:'>
<arg declared_type64='float' index='0' name='delta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setP0:'>
<arg declared_type64='float' index='0' name='p0' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPm:'>
<arg declared_type64='float' index='0' name='pm' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPs:'>
<arg declared_type64='float' index='0' name='ps' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNLocalContrastNormalizationNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:kernelSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='nodeWithSource:kernelSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='p0'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='pm'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='ps'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='setKernelHeight:'>
<arg declared_type64='NSUInteger' index='0' name='kernelHeight' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setKernelWidth:'>
<arg declared_type64='NSUInteger' index='0' name='kernelWidth' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setP0:'>
<arg declared_type64='float' index='0' name='p0' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPm:'>
<arg declared_type64='float' index='0' name='pm' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPs:'>
<arg declared_type64='float' index='0' name='ps' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNLogSoftMaxGradient'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNLogSoftMaxGradientNode'>
<method selector='initWithSourceGradient:sourceImage:gradientState:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNLogSoftMaxNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNLoss'>
<method selector='delta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:labels:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNLossLabelsBatch * _Nonnull' index='2' name='labels' type64='@'/>
<retval declared_type64='MPSImageBatch * _Nonnull' type64='@'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:labels:destinationImages:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNLossLabelsBatch * _Nonnull' index='2' name='labels' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:labels:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNLossLabels * _Nonnull' index='2' name='labels' type64='@'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:labels:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNLossLabels * _Nonnull' index='2' name='labels' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='epsilon'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:lossDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='1' name='lossDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='labelSmoothing'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='lossType'>
<retval declared_type64='MPSCNNLossType' type64='I'/>
</method>
<method selector='numberOfClasses'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='reduceAcrossBatch'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='reductionType'>
<retval declared_type64='MPSCNNReductionType' type64='i'/>
</method>
<method selector='weight'>
<retval declared_type64='float' type64='f'/>
</method>
</class>
<class name='MPSCNNLossDataDescriptor'>
<method selector='bytesPerImage'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='bytesPerRow'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='cnnLossDataDescriptorWithData:layout:size:'>
<arg declared_type64='NSData * _Nonnull' index='0' name='data' type64='@'/>
<arg declared_type64='MPSDataLayout' index='1' name='layout' type64='Q'/>
<arg declared_type64='MTLSize' index='2' name='size' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='MPSCNNLossDataDescriptor * _Nullable' type64='@'/>
</method>
<method selector='layout'>
<retval declared_type64='MPSDataLayout' type64='Q'/>
</method>
<method selector='setBytesPerImage:'>
<arg declared_type64='NSUInteger' index='0' name='bytesPerImage' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBytesPerRow:'>
<arg declared_type64='NSUInteger' index='0' name='bytesPerRow' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='size'>
<retval declared_type64='MTLSize' type64='{_MTLSize=QQQ}'/>
</method>
</class>
<class name='MPSCNNLossDescriptor'>
<method class_method='true' selector='cnnLossDescriptorWithType:reductionType:'>
<arg declared_type64='MPSCNNLossType' index='0' name='lossType' type64='I'/>
<arg declared_type64='MPSCNNReductionType' index='1' name='reductionType' type64='i'/>
<retval declared_type64='MPSCNNLossDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='delta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='epsilon'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='labelSmoothing'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='lossType'>
<retval declared_type64='MPSCNNLossType' type64='I'/>
</method>
<method selector='numberOfClasses'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='reduceAcrossBatch'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='reductionType'>
<retval declared_type64='MPSCNNReductionType' type64='i'/>
</method>
<method selector='setDelta:'>
<arg declared_type64='float' index='0' name='delta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEpsilon:'>
<arg declared_type64='float' index='0' name='epsilon' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLabelSmoothing:'>
<arg declared_type64='float' index='0' name='labelSmoothing' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLossType:'>
<arg declared_type64='MPSCNNLossType' index='0' name='lossType' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNumberOfClasses:'>
<arg declared_type64='NSUInteger' index='0' name='numberOfClasses' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setReduceAcrossBatch:'>
<arg declared_type64='BOOL' index='0' name='reduceAcrossBatch' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setReductionType:'>
<arg declared_type64='MPSCNNReductionType' index='0' name='reductionType' type64='i'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setWeight:'>
<arg declared_type64='float' index='0' name='weight' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='weight'>
<retval declared_type64='float' type64='f'/>
</method>
</class>
<class name='MPSCNNLossLabels'>
<method selector='initWithDevice:labelsDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSCNNLossDataDescriptor * _Nonnull' index='1' name='labelsDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:lossImageSize:labelsDescriptor:weightsDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MTLSize' index='1' name='lossImageSize' type64='{_MTLSize=QQQ}'/>
<arg declared_type64='MPSCNNLossDataDescriptor * _Nonnull' index='2' name='labelsDescriptor' type64='@'/>
<arg declared_type64='MPSCNNLossDataDescriptor * _Nullable' index='3' name='weightsDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:lossImageSize:labelsImage:weightsImage:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MTLSize' index='1' name='lossImageSize' type64='{_MTLSize=QQQ}'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='labelsImage' type64='@'/>
<arg declared_type64='MPSImage * _Nullable' index='3' name='weightsImage' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='labelsImage'>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='lossImage'>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='weightsImage'>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNLossNode'>
<method selector='initWithSource:lossDescriptor:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='inputLabels'>
<retval declared_type64='MPSNNLabelsNode * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:lossDescriptor:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNMultiaryKernel'>
<method selector='appendBatchBarrier'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='clipRect'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='destinationFeatureChannelOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='destinationImageAllocator'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='destinationImageDescriptorForSourceImages:sourceStates:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceImages' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<retval declared_type64='MPSImageDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='dilationRateXatIndex:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='dilationRateYatIndex:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='edgeModeAtIndex:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<retval declared_type64='MPSImageEdgeMode' type64='Q'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceImageBatches' type64='@'/>
<retval declared_type64='MPSImageBatch * _Nonnull' type64='@'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:destinationImages:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceImages' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='destinationImages' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:destinationStates:destinationStateIsTemporary:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceImageBatches' type64='@'/>
<arg declared_type64='MPSStateBatch * _Nullable * _Nonnull' index='2' name='outState' type64='@'/>
<arg declared_type64='BOOL' index='3' name='isTemporary' type64='B'/>
<retval declared_type64='MPSImageBatch * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceImages:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceImages' type64='@'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceImages:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceImages' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:sourceImages:destinationState:destinationStateIsTemporary:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceImages' type64='@'/>
<arg declared_type64='MPSState * _Nullable * _Nonnull' index='2' name='outState' type64='^@'/>
<arg declared_type64='BOOL' index='3' name='isTemporary' type64='B'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:sourceCount:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='sourceCount' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='isBackwards'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isResultStateReusedAcrossBatch'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isStateModified'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='kernelHeightAtIndex:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidthAtIndex:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='offsetAtIndex:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<retval declared_type64='MPSOffset' type64='{_MPSOffset=qqq}'/>
</method>
<method selector='padding'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='resultStateBatchForSourceImages:sourceStates:destinationImage:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceImages' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='MPSStateBatch * _Nullable' type64='@'/>
</method>
<method selector='resultStateForSourceImages:sourceStates:destinationImage:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceImages' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='MPSState * _Nullable' type64='@'/>
</method>
<method selector='setClipRect:'>
<arg declared_type64='MTLRegion' index='0' name='clipRect' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDestinationFeatureChannelOffset:'>
<arg declared_type64='NSUInteger' index='0' name='destinationFeatureChannelOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDestinationImageAllocator:'>
<arg declared_type64='id _Nonnull' index='0' name='destinationImageAllocator' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDilationRateX:atIndex:'>
<arg declared_type64='NSUInteger' index='0' name='dilationRate' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDilationRateY:atIndex:'>
<arg declared_type64='NSUInteger' index='0' name='dilationRate' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEdgeMode:atIndex:'>
<arg declared_type64='MPSImageEdgeMode' index='0' name='edgeMode' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setKernelHeight:atIndex:'>
<arg declared_type64='NSUInteger' index='0' name='height' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setKernelWidth:atIndex:'>
<arg declared_type64='NSUInteger' index='0' name='width' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOffset:atIndex:'>
<arg declared_type64='MPSOffset' index='0' name='offset' type64='{_MPSOffset=qqq}'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPadding:'>
<arg declared_type64='id _Nonnull' index='0' name='padding' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceFeatureChannelMaxCount:atIndex:'>
<arg declared_type64='NSUInteger' index='0' name='count' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceFeatureChannelOffset:atIndex:'>
<arg declared_type64='NSUInteger' index='0' name='offset' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStrideInPixelsX:atIndex:'>
<arg declared_type64='NSUInteger' index='0' name='stride' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStrideInPixelsY:atIndex:'>
<arg declared_type64='NSUInteger' index='0' name='stride' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceFeatureChannelMaxCountAtIndex:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceFeatureChannelOffsetAtIndex:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='strideInPixelsXatIndex:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='strideInPixelsYatIndex:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='temporaryResultStateBatchForCommandBuffer:sourceImages:sourceStates:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='MPSStateBatch * _Nullable' type64='@'/>
</method>
<method selector='temporaryResultStateForCommandBuffer:sourceImages:sourceStates:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='MPSState * _Nullable' type64='@'/>
</method>
</class>
<class name='MPSCNNMultiply'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNMultiplyGradient'>
<method selector='initWithDevice:isSecondarySourceFilter:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='isSecondarySourceFilter' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuron'>
<method selector='a'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='b'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='c'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='data'>
<retval declared_type64='NSData * _Nullable' type64='@'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:neuronDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSNNNeuronDescriptor * _Nonnull' index='1' name='neuronDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='neuronType'>
<retval declared_type64='MPSCNNNeuronType' type64='i'/>
</method>
</class>
<class name='MPSCNNNeuronAbsolute'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronAbsoluteNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronELU'>
<method selector='initWithDevice:a:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronELUNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:a:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:a:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronExponential'>
<method selector='initWithDevice:a:b:c:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<arg declared_type64='float' index='3' name='c' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronExponentialNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:a:b:c:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<arg declared_type64='float' index='3' name='c' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:a:b:c:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<arg declared_type64='float' index='3' name='c' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronGeLUNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronGradient'>
<method selector='a'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='b'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='c'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='data'>
<retval declared_type64='NSData * _Nullable' type64='@'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:neuronDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSNNNeuronDescriptor * _Nonnull' index='1' name='neuronDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='neuronType'>
<retval declared_type64='MPSCNNNeuronType' type64='i'/>
</method>
</class>
<class name='MPSCNNNeuronGradientNode'>
<method selector='descriptor'>
<retval declared_type64='MPSNNNeuronDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='initWithSourceGradient:sourceImage:gradientState:descriptor:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='MPSNNNeuronDescriptor * _Nonnull' index='3' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:descriptor:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='MPSNNNeuronDescriptor * _Nonnull' index='3' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronHardSigmoid'>
<method selector='initWithDevice:a:b:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronHardSigmoidNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:a:b:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:a:b:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronLinear'>
<method selector='initWithDevice:a:b:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronLinearNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:a:b:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:a:b:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronLogarithm'>
<method selector='initWithDevice:a:b:c:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<arg declared_type64='float' index='3' name='c' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronLogarithmNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:a:b:c:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<arg declared_type64='float' index='3' name='c' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:a:b:c:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<arg declared_type64='float' index='3' name='c' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronNode'>
<method selector='a'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='b'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='c'>
<retval declared_type64='float' type64='f'/>
</method>
<method class_method='true' selector='nodeWithSource:descriptor:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='MPSNNNeuronDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronPReLU'>
<method selector='initWithDevice:a:count:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='float * _Nonnull' index='1' name='a' type64='^f'/>
<arg declared_type64='NSUInteger' index='2' name='count' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronPReLUNode'>
<method selector='initWithSource:aData:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSData * _Nonnull' index='1' name='aData' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:aData:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSData * _Nonnull' index='1' name='aData' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronPower'>
<method selector='initWithDevice:a:b:c:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<arg declared_type64='float' index='3' name='c' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronPowerNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:a:b:c:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<arg declared_type64='float' index='3' name='c' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:a:b:c:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<arg declared_type64='float' index='3' name='c' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronReLU'>
<method selector='initWithDevice:a:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronReLUN'>
<method selector='initWithDevice:a:b:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronReLUNNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:a:b:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:a:b:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronReLUNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:a:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:a:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronSigmoid'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronSigmoidNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronSoftPlus'>
<method selector='initWithDevice:a:b:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronSoftPlusNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:a:b:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:a:b:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronSoftSign'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronSoftSignNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronTanH'>
<method selector='initWithDevice:a:b:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronTanHNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:a:b:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:a:b:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNormalizationGammaAndBetaState'>
<method selector='beta'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='gamma'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='initWithGamma:beta:'>
<arg declared_type64='id _Nonnull' index='0' name='gamma' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='beta' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='temporaryStateWithCommandBuffer:numberOfFeatureChannels:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='numberOfFeatureChannels' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNormalizationMeanAndVarianceState'>
<method selector='initWithMean:variance:'>
<arg declared_type64='id _Nonnull' index='0' name='mean' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='variance' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='mean'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='temporaryStateWithCommandBuffer:numberOfFeatureChannels:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='numberOfFeatureChannels' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='variance'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNormalizationNode'>
<method selector='alpha'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='beta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='delta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='float' index='0' name='alpha' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBeta:'>
<arg declared_type64='float' index='0' name='beta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDelta:'>
<arg declared_type64='float' index='0' name='delta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNPooling'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='strideInPixelsY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNPoolingAverage'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='strideInPixelsY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setZeroPadSizeX:'>
<arg declared_type64='NSUInteger' index='0' name='zeroPadSizeX' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setZeroPadSizeY:'>
<arg declared_type64='NSUInteger' index='0' name='zeroPadSizeY' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='zeroPadSizeX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='zeroPadSizeY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSCNNPoolingAverageGradient'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='strideInPixelsY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setZeroPadSizeX:'>
<arg declared_type64='NSUInteger' index='0' name='zeroPadSizeX' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setZeroPadSizeY:'>
<arg declared_type64='NSUInteger' index='0' name='zeroPadSizeY' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='zeroPadSizeX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='zeroPadSizeY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSCNNPoolingGradient'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='strideInPixelsY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setSourceSize:'>
<arg declared_type64='MTLSize' index='0' name='sourceSize' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceSize'>
<retval declared_type64='MTLSize' type64='{_MTLSize=QQQ}'/>
</method>
</class>
<class name='MPSCNNPoolingGradientNode'>
<method selector='initWithSourceGradient:sourceImage:gradientState:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:paddingPolicy:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='6' name='strideInPixelsY' type64='Q'/>
<arg declared_type64='id _Nullable' index='7' name='paddingPolicy' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:paddingPolicy:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='6' name='strideInPixelsY' type64='Q'/>
<arg declared_type64='id _Nullable' index='7' name='paddingPolicy' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='strideInPixelsX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='strideInPixelsY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSCNNPoolingL2Norm'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='strideInPixelsY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNPoolingL2NormGradient'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='strideInPixelsY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNPoolingMax'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='strideInPixelsY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNPoolingMaxGradient'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='strideInPixelsY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNPoolingNode'>
<method selector='initWithSource:filterSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='size' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:filterSize:stride:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='size' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='stride' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='strideInPixelsY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='nodeWithSource:filterSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='size' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:filterSize:stride:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='size' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='stride' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='strideInPixelsX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='strideInPixelsY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSCNNSoftMaxGradient'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNSoftMaxGradientNode'>
<method selector='initWithSourceGradient:sourceImage:gradientState:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNSoftMaxNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNSpatialNormalization'>
<method selector='alpha'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='beta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='delta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='float' index='0' name='alpha' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBeta:'>
<arg declared_type64='float' index='0' name='beta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDelta:'>
<arg declared_type64='float' index='0' name='delta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNSpatialNormalizationGradient'>
<method selector='alpha'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='beta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='delta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='float' index='0' name='alpha' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBeta:'>
<arg declared_type64='float' index='0' name='beta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDelta:'>
<arg declared_type64='float' index='0' name='delta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNSpatialNormalizationGradientNode'>
<method selector='alpha'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='beta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='delta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithSourceGradient:sourceImage:gradientState:kernelSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='kernelSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:kernelSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='kernelSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='float' index='0' name='alpha' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBeta:'>
<arg declared_type64='float' index='0' name='beta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDelta:'>
<arg declared_type64='float' index='0' name='delta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setKernelHeight:'>
<arg declared_type64='NSUInteger' index='0' name='kernelHeight' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setKernelWidth:'>
<arg declared_type64='NSUInteger' index='0' name='kernelWidth' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNSpatialNormalizationNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:kernelSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='nodeWithSource:kernelSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setKernelHeight:'>
<arg declared_type64='NSUInteger' index='0' name='kernelHeight' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setKernelWidth:'>
<arg declared_type64='NSUInteger' index='0' name='kernelWidth' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNSubPixelConvolutionDescriptor'>
<method selector='setSubPixelScaleFactor:'>
<arg declared_type64='NSUInteger' index='0' name='subPixelScaleFactor' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='subPixelScaleFactor'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSCNNSubtract'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNSubtractGradient'>
<method selector='initWithDevice:isSecondarySourceFilter:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='isSecondarySourceFilter' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNUpsampling'>
<method selector='alignCorners'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='scaleFactorX'>
<retval declared_type64='double' type64='d'/>
</method>
<method selector='scaleFactorY'>
<retval declared_type64='double' type64='d'/>
</method>
</class>
<class name='MPSCNNUpsamplingBilinear'>
<method selector='initWithDevice:integerScaleFactorX:integerScaleFactorY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='integerScaleFactorX' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='integerScaleFactorY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:integerScaleFactorX:integerScaleFactorY:alignCorners:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='integerScaleFactorX' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='integerScaleFactorY' type64='Q'/>
<arg declared_type64='BOOL' index='3' name='alignCorners' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNUpsamplingBilinearGradient'>
<method selector='initWithDevice:integerScaleFactorX:integerScaleFactorY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='integerScaleFactorX' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='integerScaleFactorY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNUpsamplingBilinearGradientNode'>
<method selector='initWithSourceGradient:sourceImage:gradientState:scaleFactorX:scaleFactorY:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='double' index='3' name='scaleFactorX' type64='d'/>
<arg declared_type64='double' index='4' name='scaleFactorY' type64='d'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:scaleFactorX:scaleFactorY:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='double' index='3' name='scaleFactorX' type64='d'/>
<arg declared_type64='double' index='4' name='scaleFactorY' type64='d'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='scaleFactorX'>
<retval declared_type64='double' type64='d'/>
</method>
<method selector='scaleFactorY'>
<retval declared_type64='double' type64='d'/>
</method>
</class>
<class name='MPSCNNUpsamplingBilinearNode'>
<method selector='alignCorners'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='initWithSource:integerScaleFactorX:integerScaleFactorY:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='integerScaleFactorX' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='integerScaleFactorY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:integerScaleFactorX:integerScaleFactorY:alignCorners:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='integerScaleFactorX' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='integerScaleFactorY' type64='Q'/>
<arg declared_type64='BOOL' index='3' name='alignCorners' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:integerScaleFactorX:integerScaleFactorY:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='integerScaleFactorX' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='integerScaleFactorY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:integerScaleFactorX:integerScaleFactorY:alignCorners:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='integerScaleFactorX' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='integerScaleFactorY' type64='Q'/>
<arg declared_type64='BOOL' index='3' name='alignCorners' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='scaleFactorX'>
<retval declared_type64='double' type64='d'/>
</method>
<method selector='scaleFactorY'>
<retval declared_type64='double' type64='d'/>
</method>
</class>
<class name='MPSCNNUpsamplingGradient'>
<method selector='scaleFactorX'>
<retval declared_type64='double' type64='d'/>
</method>
<method selector='scaleFactorY'>
<retval declared_type64='double' type64='d'/>
</method>
</class>
<class name='MPSCNNUpsamplingNearest'>
<method selector='initWithDevice:integerScaleFactorX:integerScaleFactorY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='integerScaleFactorX' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='integerScaleFactorY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNUpsamplingNearestGradient'>
<method selector='initWithDevice:integerScaleFactorX:integerScaleFactorY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='integerScaleFactorX' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='integerScaleFactorY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNUpsamplingNearestGradientNode'>
<method selector='initWithSourceGradient:sourceImage:gradientState:scaleFactorX:scaleFactorY:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='double' index='3' name='scaleFactorX' type64='d'/>
<arg declared_type64='double' index='4' name='scaleFactorY' type64='d'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:scaleFactorX:scaleFactorY:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='double' index='3' name='scaleFactorX' type64='d'/>
<arg declared_type64='double' index='4' name='scaleFactorY' type64='d'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='scaleFactorX'>
<retval declared_type64='double' type64='d'/>
</method>
<method selector='scaleFactorY'>
<retval declared_type64='double' type64='d'/>
</method>
</class>
<class name='MPSCNNUpsamplingNearestNode'>
<method selector='initWithSource:integerScaleFactorX:integerScaleFactorY:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='integerScaleFactorX' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='integerScaleFactorY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:integerScaleFactorX:integerScaleFactorY:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='integerScaleFactorX' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='integerScaleFactorY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='scaleFactorX'>
<retval declared_type64='double' type64='d'/>
</method>
<method selector='scaleFactorY'>
<retval declared_type64='double' type64='d'/>
</method>
</class>
<class name='MPSCNNYOLOLoss'>
<method selector='anchorBoxes'>
<retval declared_type64='NSData * _Nonnull' type64='@'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:labels:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNLossLabelsBatch * _Nonnull' index='2' name='labels' type64='@'/>
<retval declared_type64='MPSImageBatch * _Nonnull' type64='@'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:labels:destinationImages:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNLossLabelsBatch * _Nonnull' index='2' name='labels' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:labels:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNLossLabels * _Nonnull' index='2' name='labels' type64='@'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:labels:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNLossLabels * _Nonnull' index='2' name='labels' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:lossDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSCNNYOLOLossDescriptor * _Nonnull' index='1' name='lossDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='lossClasses'>
<retval declared_type64='MPSCNNLoss * _Nonnull' type64='@'/>
</method>
<method selector='lossConfidence'>
<retval declared_type64='MPSCNNLoss * _Nonnull' type64='@'/>
</method>
<method selector='lossWH'>
<retval declared_type64='MPSCNNLoss * _Nonnull' type64='@'/>
</method>
<method selector='lossXY'>
<retval declared_type64='MPSCNNLoss * _Nonnull' type64='@'/>
</method>
<method selector='maxIOUForObjectAbsence'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='minIOUForObjectPresence'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='numberOfAnchorBoxes'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='reduceAcrossBatch'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='reductionType'>
<retval declared_type64='MPSCNNReductionType' type64='i'/>
</method>
<method selector='scaleClass'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='scaleNoObject'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='scaleObject'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='scaleWH'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='scaleXY'>
<retval declared_type64='float' type64='f'/>
</method>
</class>
<class name='MPSCNNYOLOLossDescriptor'>
<method selector='WHLossDescriptor'>
<retval declared_type64='MPSCNNLossDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='XYLossDescriptor'>
<retval declared_type64='MPSCNNLossDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='anchorBoxes'>
<retval declared_type64='NSData * _Nonnull' type64='@'/>
</method>
<method selector='classesLossDescriptor'>
<retval declared_type64='MPSCNNLossDescriptor * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='cnnLossDescriptorWithXYLossType:WHLossType:confidenceLossType:classesLossType:reductionType:anchorBoxes:numberOfAnchorBoxes:'>
<arg declared_type64='MPSCNNLossType' index='0' name='XYLossType' type64='I'/>
<arg declared_type64='MPSCNNLossType' index='1' name='WHLossType' type64='I'/>
<arg declared_type64='MPSCNNLossType' index='2' name='confidenceLossType' type64='I'/>
<arg declared_type64='MPSCNNLossType' index='3' name='classesLossType' type64='I'/>
<arg declared_type64='MPSCNNReductionType' index='4' name='reductionType' type64='i'/>
<arg declared_type64='NSData * _Nonnull' index='5' name='anchorBoxes' type64='@'/>
<arg declared_type64='NSUInteger' index='6' name='numberOfAnchorBoxes' type64='Q'/>
<retval declared_type64='MPSCNNYOLOLossDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='confidenceLossDescriptor'>
<retval declared_type64='MPSCNNLossDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='maxIOUForObjectAbsence'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='minIOUForObjectPresence'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='numberOfAnchorBoxes'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='reduceAcrossBatch'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='reductionType'>
<retval declared_type64='MPSCNNReductionType' type64='i'/>
</method>
<method selector='rescore'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='scaleClass'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='scaleNoObject'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='scaleObject'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='scaleWH'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='scaleXY'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='setAnchorBoxes:'>
<arg declared_type64='NSData * _Nonnull' index='0' name='anchorBoxes' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setClassesLossDescriptor:'>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='0' name='classesLossDescriptor' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setConfidenceLossDescriptor:'>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='0' name='confidenceLossDescriptor' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaxIOUForObjectAbsence:'>
<arg declared_type64='float' index='0' name='maxIOUForObjectAbsence' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMinIOUForObjectPresence:'>
<arg declared_type64='float' index='0' name='minIOUForObjectPresence' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNumberOfAnchorBoxes:'>
<arg declared_type64='NSUInteger' index='0' name='numberOfAnchorBoxes' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setReduceAcrossBatch:'>
<arg declared_type64='BOOL' index='0' name='reduceAcrossBatch' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setReductionType:'>
<arg declared_type64='MPSCNNReductionType' index='0' name='reductionType' type64='i'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRescore:'>
<arg declared_type64='BOOL' index='0' name='rescore' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setScaleClass:'>
<arg declared_type64='float' index='0' name='scaleClass' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setScaleNoObject:'>
<arg declared_type64='float' index='0' name='scaleNoObject' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setScaleObject:'>
<arg declared_type64='float' index='0' name='scaleObject' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setScaleWH:'>
<arg declared_type64='float' index='0' name='scaleWH' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setScaleXY:'>
<arg declared_type64='float' index='0' name='scaleXY' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setWHLossDescriptor:'>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='0' name='WHLossDescriptor' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setXYLossDescriptor:'>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='0' name='XYLossDescriptor' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNYOLOLossNode'>
<method selector='initWithSource:lossDescriptor:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='MPSCNNYOLOLossDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='inputLabels'>
<retval declared_type64='MPSNNLabelsNode * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:lossDescriptor:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='MPSCNNYOLOLossDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSGRUDescriptor'>
<method class_method='true' selector='createGRUDescriptorWithInputFeatureChannels:outputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='inputFeatureChannels' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='outputFeatureChannels' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='flipOutputGates'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='gatePnormValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='inputGateInputWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='inputGateRecurrentWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='outputGateInputGateWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='outputGateInputWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='outputGateRecurrentWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='recurrentGateInputWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='recurrentGateRecurrentWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='setFlipOutputGates:'>
<arg declared_type64='BOOL' index='0' name='flipOutputGates' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setGatePnormValue:'>
<arg declared_type64='float' index='0' name='gatePnormValue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setInputGateInputWeights:'>
<arg declared_type64='id _Nullable' index='0' name='inputGateInputWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setInputGateRecurrentWeights:'>
<arg declared_type64='id _Nullable' index='0' name='inputGateRecurrentWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOutputGateInputGateWeights:'>
<arg declared_type64='id _Nullable' index='0' name='outputGateInputGateWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOutputGateInputWeights:'>
<arg declared_type64='id _Nullable' index='0' name='outputGateInputWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOutputGateRecurrentWeights:'>
<arg declared_type64='id _Nullable' index='0' name='outputGateRecurrentWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRecurrentGateInputWeights:'>
<arg declared_type64='id _Nullable' index='0' name='recurrentGateInputWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRecurrentGateRecurrentWeights:'>
<arg declared_type64='id _Nullable' index='0' name='recurrentGateRecurrentWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSLSTMDescriptor'>
<method selector='cellGateInputWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='cellGateMemoryWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='cellGateRecurrentWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='cellToOutputNeuronParamA'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='cellToOutputNeuronParamB'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='cellToOutputNeuronParamC'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='cellToOutputNeuronType'>
<retval declared_type64='MPSCNNNeuronType' type64='i'/>
</method>
<method class_method='true' selector='createLSTMDescriptorWithInputFeatureChannels:outputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='inputFeatureChannels' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='outputFeatureChannels' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='forgetGateInputWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='forgetGateMemoryWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='forgetGateRecurrentWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='inputGateInputWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='inputGateMemoryWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='inputGateRecurrentWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='memoryWeightsAreDiagonal'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='outputGateInputWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='outputGateMemoryWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='outputGateRecurrentWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='setCellGateInputWeights:'>
<arg declared_type64='id _Nullable' index='0' name='cellGateInputWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCellGateMemoryWeights:'>
<arg declared_type64='id _Nullable' index='0' name='cellGateMemoryWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCellGateRecurrentWeights:'>
<arg declared_type64='id _Nullable' index='0' name='cellGateRecurrentWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCellToOutputNeuronParamA:'>
<arg declared_type64='float' index='0' name='cellToOutputNeuronParamA' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCellToOutputNeuronParamB:'>
<arg declared_type64='float' index='0' name='cellToOutputNeuronParamB' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCellToOutputNeuronParamC:'>
<arg declared_type64='float' index='0' name='cellToOutputNeuronParamC' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCellToOutputNeuronType:'>
<arg declared_type64='MPSCNNNeuronType' index='0' name='cellToOutputNeuronType' type64='i'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setForgetGateInputWeights:'>
<arg declared_type64='id _Nullable' index='0' name='forgetGateInputWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setForgetGateMemoryWeights:'>
<arg declared_type64='id _Nullable' index='0' name='forgetGateMemoryWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setForgetGateRecurrentWeights:'>
<arg declared_type64='id _Nullable' index='0' name='forgetGateRecurrentWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setInputGateInputWeights:'>
<arg declared_type64='id _Nullable' index='0' name='inputGateInputWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setInputGateMemoryWeights:'>
<arg declared_type64='id _Nullable' index='0' name='inputGateMemoryWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setInputGateRecurrentWeights:'>
<arg declared_type64='id _Nullable' index='0' name='inputGateRecurrentWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMemoryWeightsAreDiagonal:'>
<arg declared_type64='BOOL' index='0' name='memoryWeightsAreDiagonal' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOutputGateInputWeights:'>
<arg declared_type64='id _Nullable' index='0' name='outputGateInputWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOutputGateMemoryWeights:'>
<arg declared_type64='id _Nullable' index='0' name='outputGateMemoryWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOutputGateRecurrentWeights:'>
<arg declared_type64='id _Nullable' index='0' name='outputGateRecurrentWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSMatrixBatchNormalization'>
<method selector='computeStatistics'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:inputMatrix:meanVector:varianceVector:gammaVector:betaVector:resultMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='inputMatrix' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='2' name='meanVector' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='3' name='varianceVector' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='4' name='gammaVector' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='5' name='betaVector' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='6' name='resultMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='epsilon'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='neuronParameterA'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronParameterB'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronParameterC'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronType'>
<retval declared_type64='MPSCNNNeuronType' type64='i'/>
</method>
<method selector='setComputeStatistics:'>
<arg declared_type64='BOOL' index='0' name='computeStatistics' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEpsilon:'>
<arg declared_type64='float' index='0' name='epsilon' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNeuronType:parameterA:parameterB:parameterC:'>
<arg declared_type64='MPSCNNNeuronType' index='0' name='neuronType' type64='i'/>
<arg declared_type64='float' index='1' name='parameterA' type64='f'/>
<arg declared_type64='float' index='2' name='parameterB' type64='f'/>
<arg declared_type64='float' index='3' name='parameterC' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceInputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='sourceInputFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceNumberOfFeatureVectors:'>
<arg declared_type64='NSUInteger' index='0' name='sourceNumberOfFeatureVectors' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceInputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceNumberOfFeatureVectors'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSMatrixBatchNormalizationGradient'>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:gradientMatrix:inputMatrix:meanVector:varianceVector:gammaVector:betaVector:resultGradientForDataMatrix:resultGradientForGammaVector:resultGradientForBetaVector:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='gradientMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='inputMatrix' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='3' name='meanVector' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='4' name='varianceVector' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='5' name='gammaVector' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='6' name='betaVector' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='7' name='resultGradientForDataMatrix' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='8' name='resultGradientForGammaVector' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='9' name='resultGradientForBetaVector' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='epsilon'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='neuronParameterA'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronParameterB'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronParameterC'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronType'>
<retval declared_type64='MPSCNNNeuronType' type64='i'/>
</method>
<method selector='setEpsilon:'>
<arg declared_type64='float' index='0' name='epsilon' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNeuronType:parameterA:parameterB:parameterC:'>
<arg declared_type64='MPSCNNNeuronType' index='0' name='neuronType' type64='i'/>
<arg declared_type64='float' index='1' name='parameterA' type64='f'/>
<arg declared_type64='float' index='2' name='parameterB' type64='f'/>
<arg declared_type64='float' index='3' name='parameterC' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceInputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='sourceInputFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceNumberOfFeatureVectors:'>
<arg declared_type64='NSUInteger' index='0' name='sourceNumberOfFeatureVectors' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceInputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceNumberOfFeatureVectors'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSMatrixFullyConnected'>
<method selector='alpha'>
<retval declared_type64='double' type64='d'/>
</method>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:inputMatrix:weightMatrix:biasVector:resultMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='inputMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='weightMatrix' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='3' name='biasVector' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='4' name='resultMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='neuronParameterA'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronParameterB'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronParameterC'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronType'>
<retval declared_type64='MPSCNNNeuronType' type64='i'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='double' index='0' name='alpha' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNeuronType:parameterA:parameterB:parameterC:'>
<arg declared_type64='MPSCNNNeuronType' index='0' name='neuronType' type64='i'/>
<arg declared_type64='float' index='1' name='parameterA' type64='f'/>
<arg declared_type64='float' index='2' name='parameterB' type64='f'/>
<arg declared_type64='float' index='3' name='parameterC' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceInputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='sourceInputFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceNumberOfFeatureVectors:'>
<arg declared_type64='NSUInteger' index='0' name='sourceNumberOfFeatureVectors' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceOutputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='sourceOutputFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceInputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceNumberOfFeatureVectors'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceOutputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSMatrixFullyConnectedGradient'>
<method selector='alpha'>
<retval declared_type64='double' type64='d'/>
</method>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeGradientForDataToCommandBuffer:gradientMatrix:weightMatrix:resultGradientForDataMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg const='true' declared_type64='MPSMatrix * _Nonnull' index='1' name='gradientMatrix' type64='@'/>
<arg const='true' declared_type64='MPSMatrix * _Nonnull' index='2' name='weightMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='resultGradientForDataMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeGradientForWeightsAndBiasToCommandBuffer:gradientMatrix:inputMatrix:resultGradientForWeightMatrix:resultGradientForBiasVector:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg const='true' declared_type64='MPSMatrix * _Nonnull' index='1' name='gradientMatrix' type64='@'/>
<arg const='true' declared_type64='MPSMatrix * _Nonnull' index='2' name='inputMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='resultGradientForWeightMatrix' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='4' name='resultGradientForBiasVector' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='double' index='0' name='alpha' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceInputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='sourceInputFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceNumberOfFeatureVectors:'>
<arg declared_type64='NSUInteger' index='0' name='sourceNumberOfFeatureVectors' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceOutputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='sourceOutputFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceInputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceNumberOfFeatureVectors'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceOutputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSMatrixNeuron'>
<method selector='alpha'>
<retval declared_type64='double' type64='d'/>
</method>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:inputMatrix:biasVector:resultMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='inputMatrix' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='2' name='biasVector' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='resultMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='neuronParameterA'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronParameterB'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronParameterC'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronType'>
<retval declared_type64='MPSCNNNeuronType' type64='i'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='double' index='0' name='alpha' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNeuronToPReLUWithParametersA:'>
<arg declared_type64='NSData * _Nonnull' index='0' name='A' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNeuronType:parameterA:parameterB:parameterC:'>
<arg declared_type64='MPSCNNNeuronType' index='0' name='neuronType' type64='i'/>
<arg declared_type64='float' index='1' name='parameterA' type64='f'/>
<arg declared_type64='float' index='2' name='parameterB' type64='f'/>
<arg declared_type64='float' index='3' name='parameterC' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceInputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='sourceInputFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceNumberOfFeatureVectors:'>
<arg declared_type64='NSUInteger' index='0' name='sourceNumberOfFeatureVectors' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceInputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceNumberOfFeatureVectors'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSMatrixNeuronGradient'>
<method selector='alpha'>
<retval declared_type64='double' type64='d'/>
</method>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:gradientMatrix:inputMatrix:biasVector:resultGradientForDataMatrix:resultGradientForBiasVector:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='gradientMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='inputMatrix' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='3' name='biasVector' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='4' name='resultGradientForDataMatrix' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='5' name='resultGradientForBiasVector' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='neuronParameterA'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronParameterB'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronParameterC'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronType'>
<retval declared_type64='MPSCNNNeuronType' type64='i'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='double' index='0' name='alpha' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNeuronToPReLUWithParametersA:'>
<arg declared_type64='NSData * _Nonnull' index='0' name='A' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNeuronType:parameterA:parameterB:parameterC:'>
<arg declared_type64='MPSCNNNeuronType' index='0' name='neuronType' type64='i'/>
<arg declared_type64='float' index='1' name='parameterA' type64='f'/>
<arg declared_type64='float' index='2' name='parameterB' type64='f'/>
<arg declared_type64='float' index='3' name='parameterC' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceInputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='sourceInputFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceNumberOfFeatureVectors:'>
<arg declared_type64='NSUInteger' index='0' name='sourceNumberOfFeatureVectors' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceInputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceNumberOfFeatureVectors'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSMatrixSum'>
<method selector='columns'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='count'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='encodeToCommandBuffer:sourceMatrices:resultMatrix:scaleVector:offsetVector:biasVector:startIndex:'>
<arg declared_type64='id _Nonnull' index='0' name='buffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceMatrices' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='resultMatrix' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='3' name='scaleVector' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='4' name='offsetVector' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='5' name='biasVector' type64='@'/>
<arg declared_type64='NSUInteger' index='6' name='startIndex' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:count:rows:columns:transpose:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='count' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='rows' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='columns' type64='Q'/>
<arg declared_type64='BOOL' index='4' name='transpose' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='neuronParameterA'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronParameterB'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronParameterC'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronType'>
<retval declared_type64='MPSCNNNeuronType' type64='i'/>
</method>
<method selector='resultMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='rows'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setNeuronType:parameterA:parameterB:parameterC:'>
<arg declared_type64='MPSCNNNeuronType' index='0' name='neuronType' type64='i'/>
<arg declared_type64='float' index='1' name='parameterA' type64='f'/>
<arg declared_type64='float' index='2' name='parameterB' type64='f'/>
<arg declared_type64='float' index='3' name='parameterC' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setResultMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='resultMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='transpose'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSNNArithmeticGradientNode'>
<method selector='bias'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithGradientImages:forwardFilter:isSecondarySourceFilter:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='gradientImages' type64='@'/>
<arg declared_type64='MPSNNFilterNode * _Nonnull' index='1' name='filter' type64='@'/>
<arg declared_type64='BOOL' index='2' name='isSecondarySourceFilter' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSourceGradient:sourceImage:gradientState:isSecondarySourceFilter:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNBinaryGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='BOOL' index='3' name='isSecondarySourceFilter' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='isSecondarySourceFilter'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='maximumValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='minimumValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:isSecondarySourceFilter:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNBinaryGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='BOOL' index='3' name='isSecondarySourceFilter' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='primaryScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='secondaryScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='secondaryStrideInFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='secondaryStrideInPixelsX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='secondaryStrideInPixelsY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setBias:'>
<arg declared_type64='float' index='0' name='bias' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaximumValue:'>
<arg declared_type64='float' index='0' name='maximumValue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMinimumValue:'>
<arg declared_type64='float' index='0' name='minimumValue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryScale:'>
<arg declared_type64='float' index='0' name='primaryScale' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryScale:'>
<arg declared_type64='float' index='0' name='secondaryScale' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryStrideInFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='secondaryStrideInFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryStrideInPixelsX:'>
<arg declared_type64='NSUInteger' index='0' name='secondaryStrideInPixelsX' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryStrideInPixelsY:'>
<arg declared_type64='NSUInteger' index='0' name='secondaryStrideInPixelsY' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSNNBinaryArithmeticNode'>
<method selector='bias'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='gradientClass'>
<retval declared_type64='Class _Nonnull' type64='#'/>
</method>
<method selector='gradientFiltersWithSources:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='gradientImages' type64='@'/>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='initWithLeftSource:rightSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='left' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='right' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSources:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceNodes' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='maximumValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='minimumValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method class_method='true' selector='nodeWithLeftSource:rightSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='left' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='right' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSources:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceNodes' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='primaryScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='primaryStrideInFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='primaryStrideInPixelsX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='primaryStrideInPixelsY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='secondaryScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='secondaryStrideInFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='secondaryStrideInPixelsX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='secondaryStrideInPixelsY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setBias:'>
<arg declared_type64='float' index='0' name='bias' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaximumValue:'>
<arg declared_type64='float' index='0' name='maximumValue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMinimumValue:'>
<arg declared_type64='float' index='0' name='minimumValue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryScale:'>
<arg declared_type64='float' index='0' name='primaryScale' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryStrideInFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='primaryStrideInFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryStrideInPixelsX:'>
<arg declared_type64='NSUInteger' index='0' name='primaryStrideInPixelsX' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryStrideInPixelsY:'>
<arg declared_type64='NSUInteger' index='0' name='primaryStrideInPixelsY' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryScale:'>
<arg declared_type64='float' index='0' name='secondaryScale' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryStrideInFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='secondaryStrideInFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryStrideInPixelsX:'>
<arg declared_type64='NSUInteger' index='0' name='secondaryStrideInPixelsX' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryStrideInPixelsY:'>
<arg declared_type64='NSUInteger' index='0' name='secondaryStrideInPixelsY' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSNNCompare'>
<method selector='comparisonType'>
<retval declared_type64='MPSNNComparisonType' type64='Q'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setComparisonType:'>
<arg declared_type64='MPSNNComparisonType' index='0' name='comparisonType' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setThreshold:'>
<arg declared_type64='float' index='0' name='threshold' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='threshold'>
<retval declared_type64='float' type64='f'/>
</method>
</class>
<class name='MPSNNComparisonNode'>
<method selector='comparisonType'>
<retval declared_type64='MPSNNComparisonType' type64='Q'/>
</method>
<method selector='setComparisonType:'>
<arg declared_type64='MPSNNComparisonType' index='0' name='comparisonType' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSNNConcatenationGradientNode'>
<method selector='initWithSourceGradient:sourceImage:gradientState:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='gradientSourceNode' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='gradientSourceNode' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNConcatenationNode'>
<method selector='initWithSources:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceNodes' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSources:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceNodes' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNCropAndResizeBilinear'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:resizeWidth:resizeHeight:numberOfRegions:regions:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='resizeWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='resizeHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='numberOfRegions' type64='Q'/>
<arg const='true' declared_type64='MPSRegion * _Nonnull' index='4' name='regions' type64='^{MPSRegion={MPSOrigin=ddd}{MPSSize=ddd}}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='numberOfRegions'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='regions'>
<retval const='true' declared_type64='MPSRegion * _Nonnull' type64='^{MPSRegion={MPSOrigin=ddd}{MPSSize=ddd}}'/>
</method>
<method selector='resizeHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='resizeWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSNNDefaultPadding'>
<method selector='label'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='paddingForTensorflowAveragePooling'>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='paddingForTensorflowAveragePoolingValidOnly'>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='paddingWithMethod:'>
<arg declared_type64='MPSNNPaddingMethod' index='0' name='method' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNFilterNode'>
<method selector='gradientFilterWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='gradientImage' type64='@'/>
<retval declared_type64='MPSNNGradientFilterNode * _Nonnull' type64='@'/>
</method>
<method selector='gradientFilterWithSources:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='gradientImages' type64='@'/>
<retval declared_type64='MPSNNGradientFilterNode * _Nonnull' type64='@'/>
</method>
<method selector='gradientFiltersWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='gradientImage' type64='@'/>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='gradientFiltersWithSources:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='gradientImages' type64='@'/>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='label'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='paddingPolicy'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='resultImage'>
<retval declared_type64='MPSNNImageNode * _Nonnull' type64='@'/>
</method>
<method selector='resultState'>
<retval declared_type64='MPSNNStateNode * _Nullable' type64='@'/>
</method>
<method selector='resultStates'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='setLabel:'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPaddingPolicy:'>
<arg declared_type64='id _Nonnull' index='0' name='paddingPolicy' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='trainingGraphWithSourceGradient:nodeHandler:'>
<arg declared_type64='MPSNNImageNode * _Nullable' index='0' name='gradientImage' type64='@'/>
<arg declared_type64='MPSGradientNodeBlock _Nullable' function_pointer='true' index='1' name='nodeHandler' type64='@?'>
<arg declared_type64='MPSNNFilterNode * _Nonnull' type64='@'/>
<arg declared_type64='MPSNNFilterNode * _Nonnull' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
</class>
<class name='MPSNNForwardLoss'>
<method selector='delta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:labels:weights:destinationStates:destinationImages:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImages' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='labels' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nullable' index='3' name='weights' type64='@'/>
<arg declared_type64='MPSStateBatch * _Nullable' index='4' name='destinationStates' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='5' name='destinationImages' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:labels:weights:destinationStates:destinationStateIsTemporary:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImages' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='labels' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nullable' index='3' name='weights' type64='@'/>
<arg declared_type64='MPSStateBatch * _Nullable * _Nullable' index='4' name='outStates' type64='@'/>
<arg declared_type64='BOOL' index='5' name='isTemporary' type64='B'/>
<retval declared_type64='MPSImageBatch * _Nonnull' type64='@'/>
</method>
<method selector='epsilon'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:lossDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='1' name='lossDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='labelSmoothing'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='lossType'>
<retval declared_type64='MPSCNNLossType' type64='I'/>
</method>
<method selector='numberOfClasses'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='reduceAcrossBatch'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='reductionType'>
<retval declared_type64='MPSCNNReductionType' type64='i'/>
</method>
<method selector='setDelta:'>
<arg declared_type64='float' index='0' name='delta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEpsilon:'>
<arg declared_type64='float' index='0' name='epsilon' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLabelSmoothing:'>
<arg declared_type64='float' index='0' name='labelSmoothing' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setWeight:'>
<arg declared_type64='float' index='0' name='weight' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='weight'>
<retval declared_type64='float' type64='f'/>
</method>
</class>
<class name='MPSNNForwardLossNode'>
<method selector='delta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='epsilon'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='gradientFilterWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<retval declared_type64='MPSNNLossGradientNode * _Nonnull' type64='@'/>
</method>
<method selector='gradientFilterWithSources:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<retval declared_type64='MPSNNLossGradientNode * _Nonnull' type64='@'/>
</method>
<method selector='gradientFiltersWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='gradientFiltersWithSources:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:labels:lossDescriptor:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='labels' type64='@'/>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='2' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:labels:weights:lossDescriptor:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='labels' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nullable' index='2' name='weights' type64='@'/>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='3' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSources:lossDescriptor:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceNodes' type64='@'/>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='labelSmoothing'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='lossType'>
<retval declared_type64='MPSCNNLossType' type64='I'/>
</method>
<method class_method='true' selector='nodeWithSource:labels:lossDescriptor:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='labels' type64='@'/>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='2' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:labels:weights:lossDescriptor:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='labels' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='2' name='weights' type64='@'/>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='3' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSources:lossDescriptor:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceNodes' type64='@'/>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='numberOfClasses'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='propertyCallBack'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='reduceAcrossBatch'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='reductionType'>
<retval declared_type64='MPSCNNReductionType' type64='i'/>
</method>
<method selector='setPropertyCallBack:'>
<arg declared_type64='id _Nullable' index='0' name='propertyCallBack' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='weight'>
<retval declared_type64='float' type64='f'/>
</method>
</class>
<class name='MPSNNGramMatrixCalculation'>
<method selector='alpha'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:alpha:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='alpha' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='float' index='0' name='alpha' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSNNGramMatrixCalculationGradient'>
<method selector='alpha'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:alpha:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='alpha' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='float' index='0' name='alpha' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSNNGramMatrixCalculationGradientNode'>
<method selector='alpha'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithSourceGradient:sourceImage:gradientState:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSourceGradient:sourceImage:gradientState:alpha:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='float' index='3' name='alpha' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:alpha:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<arg declared_type64='float' index='3' name='alpha' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNGramMatrixCalculationNode'>
<method selector='alpha'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:alpha:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='alpha' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:alpha:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='alpha' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='propertyCallBack'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='setPropertyCallBack:'>
<arg declared_type64='id _Nullable' index='0' name='propertyCallBack' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSNNGraph'>
<method selector='destinationImageAllocator'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:sourceStates:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceImages' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<retval declared_type64='MPSImageBatch * _Nullable' type64='@'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:sourceStates:intermediateImages:destinationStates:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceImages' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<arg declared_type64='NSMutableArray * _Nullable' index='3' name='intermediateImages' type64='@'/>
<arg declared_type64='NSMutableArray * _Nullable' index='4' name='destinationStates' type64='@'/>
<retval declared_type64='MPSImageBatch * _Nullable' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceImages:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceImages' type64='@'/>
<retval declared_type64='MPSImage * _Nullable' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceImages:sourceStates:intermediateImages:destinationStates:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceImages' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<arg declared_type64='NSMutableArray * _Nullable' index='3' name='intermediateImages' type64='@'/>
<arg declared_type64='NSMutableArray * _Nullable' index='4' name='destinationStates' type64='@'/>
<retval declared_type64='MPSImage * _Nullable' type64='@'/>
</method>
<method selector='executeAsyncWithSourceImages:completionHandler:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceImages' type64='@'/>
<arg declared_type64='MPSNNGraphCompletionHandler _Nonnull' function_pointer='true' index='1' name='handler' type64='@?'>
<arg declared_type64='MPSImage * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='format'>
<retval declared_type64='MPSImageFeatureChannelFormat' type64='Q'/>
</method>
<method class_method='true' selector='graphWithDevice:resultImage:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='resultImage' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method class_method='true' selector='graphWithDevice:resultImage:resultImageIsNeeded:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='resultImage' type64='@'/>
<arg declared_type64='BOOL' index='2' name='resultIsNeeded' type64='B'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method class_method='true' selector='graphWithDevice:resultImages:resultsAreNeeded:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='resultImages' type64='@'/>
<arg declared_type64='BOOL * _Nullable' index='2' name='areResultsNeeded' type64='^B'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:resultImage:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='resultImage' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:resultImage:resultImageIsNeeded:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='resultImage' type64='@'/>
<arg declared_type64='BOOL' index='2' name='resultIsNeeded' type64='B'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:resultImages:resultsAreNeeded:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='resultImages' type64='@'/>
<arg declared_type64='BOOL * _Nullable' index='2' name='areResultsNeeded' type64='^B'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='intermediateImageHandles'>
<retval declared_type64='NSArray&gt; * _Nullable' type64='@'/>
</method>
<method selector='outputStateIsTemporary'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='readCountForSourceImageAtIndex:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='readCountForSourceStateAtIndex:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='reloadFromDataSources'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='resultHandle'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='resultImageIsNeeded'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='resultStateHandles'>
<retval declared_type64='NSArray&gt; * _Nullable' type64='@'/>
</method>
<method selector='setDestinationImageAllocator:'>
<arg declared_type64='id _Nonnull' index='0' name='destinationImageAllocator' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFormat:'>
<arg declared_type64='MPSImageFeatureChannelFormat' index='0' name='format' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOutputStateIsTemporary:'>
<arg declared_type64='BOOL' index='0' name='outputStateIsTemporary' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceImageHandles'>
<retval declared_type64='NSArray&gt; * _Nonnull' type64='@'/>
</method>
<method selector='sourceStateHandles'>
<retval declared_type64='NSArray&gt; * _Nullable' type64='@'/>
</method>
</class>
<class name='MPSNNGridSample'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setUseGridValueAsInputCoordinate:'>
<arg declared_type64='BOOL' index='0' name='useGridValueAsInputCoordinate' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='useGridValueAsInputCoordinate'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSNNImageNode'>
<method selector='exportFromGraph'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method class_method='true' selector='exportedNodeWithHandle:'>
<arg declared_type64='NSObject * _Nullable' index='0' name='handle' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='format'>
<retval declared_type64='MPSImageFeatureChannelFormat' type64='Q'/>
</method>
<method selector='handle'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='imageAllocator'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='initWithHandle:'>
<arg declared_type64='NSObject * _Nullable' index='0' name='handle' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithHandle:'>
<arg declared_type64='NSObject * _Nullable' index='0' name='handle' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setExportFromGraph:'>
<arg declared_type64='BOOL' index='0' name='exportFromGraph' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFormat:'>
<arg declared_type64='MPSImageFeatureChannelFormat' index='0' name='format' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setHandle:'>
<arg declared_type64='id _Nullable' index='0' name='handle' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setImageAllocator:'>
<arg declared_type64='id _Nonnull' index='0' name='imageAllocator' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStopGradient:'>
<arg declared_type64='BOOL' index='0' name='stopGradient' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSynchronizeResource:'>
<arg declared_type64='BOOL' index='0' name='synchronizeResource' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='stopGradient'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='synchronizeResource'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSNNInitialGradient'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNInitialGradientNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNLocalCorrelation'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:windowInX:windowInY:strideInX:strideInY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='windowInX' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='windowInY' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='strideInX' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='strideInY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setStrideInX:'>
<arg declared_type64='NSUInteger' index='0' name='strideInX' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStrideInY:'>
<arg declared_type64='NSUInteger' index='0' name='strideInY' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setWindowInX:'>
<arg declared_type64='NSUInteger' index='0' name='windowInX' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setWindowInY:'>
<arg declared_type64='NSUInteger' index='0' name='windowInY' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='strideInX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='strideInY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='windowInX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='windowInY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSNNLossGradient'>
<method selector='computeLabelGradients'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='delta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceGradients:sourceImages:labels:weights:sourceStates:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceGradients' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='sourceImages' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='3' name='labels' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nullable' index='4' name='weights' type64='@'/>
<arg declared_type64='MPSStateBatch * _Nullable' index='5' name='sourceStates' type64='@'/>
<retval declared_type64='MPSImageBatch * _Nonnull' type64='@'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceGradients:sourceImages:labels:weights:sourceStates:destinationGradients:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceGradients' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='2' name='sourceImages' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='3' name='labels' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nullable' index='4' name='weights' type64='@'/>
<arg declared_type64='MPSStateBatch * _Nullable' index='5' name='sourceStates' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='6' name='destinationGradients' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='epsilon'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:lossDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='1' name='lossDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='labelSmoothing'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='lossType'>
<retval declared_type64='MPSCNNLossType' type64='I'/>
</method>
<method selector='numberOfClasses'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='reduceAcrossBatch'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='reductionType'>
<retval declared_type64='MPSCNNReductionType' type64='i'/>
</method>
<method selector='setComputeLabelGradients:'>
<arg declared_type64='BOOL' index='0' name='computeLabelGradients' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDelta:'>
<arg declared_type64='float' index='0' name='delta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEpsilon:'>
<arg declared_type64='float' index='0' name='epsilon' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLabelSmoothing:'>
<arg declared_type64='float' index='0' name='labelSmoothing' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setWeight:'>
<arg declared_type64='float' index='0' name='weight' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='weight'>
<retval declared_type64='float' type64='f'/>
</method>
</class>
<class name='MPSNNLossGradientNode'>
<method selector='delta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='epsilon'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithSourceGradient:sourceImage:labels:gradientState:lossDescriptor:isLabelsGradientFilter:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='2' name='labels' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nullable' index='3' name='gradientState' type64='@'/>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='4' name='descriptor' type64='@'/>
<arg declared_type64='BOOL' index='5' name='isLabelsGradientFilter' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSourceGradient:sourceImage:labels:weights:gradientState:lossDescriptor:isLabelsGradientFilter:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='2' name='labels' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nullable' index='3' name='weights' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nullable' index='4' name='gradientState' type64='@'/>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='5' name='descriptor' type64='@'/>
<arg declared_type64='BOOL' index='6' name='isLabelsGradientFilter' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSources:gradientState:lossDescriptor:isLabelsGradientFilter:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceNodes' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nullable' index='1' name='gradientState' type64='@'/>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='2' name='descriptor' type64='@'/>
<arg declared_type64='BOOL' index='3' name='isLabelsGradientFilter' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='isLabelsGradientFilter'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='labelSmoothing'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='lossType'>
<retval declared_type64='MPSCNNLossType' type64='I'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:labels:gradientState:lossDescriptor:isLabelsGradientFilter:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='2' name='labels' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nullable' index='3' name='gradientState' type64='@'/>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='4' name='descriptor' type64='@'/>
<arg declared_type64='BOOL' index='5' name='isLabelsGradientFilter' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:labels:weights:gradientState:lossDescriptor:isLabelsGradientFilter:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='2' name='labels' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='3' name='weights' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nullable' index='4' name='gradientState' type64='@'/>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='5' name='descriptor' type64='@'/>
<arg declared_type64='BOOL' index='6' name='isLabelsGradientFilter' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSources:gradientState:lossDescriptor:isLabelsGradientFilter:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceNodes' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nullable' index='1' name='gradientState' type64='@'/>
<arg declared_type64='MPSCNNLossDescriptor * _Nonnull' index='2' name='descriptor' type64='@'/>
<arg declared_type64='BOOL' index='3' name='isLabelsGradientFilter' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='numberOfClasses'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='propertyCallBack'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='reduceAcrossBatch'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='reductionType'>
<retval declared_type64='MPSCNNReductionType' type64='i'/>
</method>
<method selector='setPropertyCallBack:'>
<arg declared_type64='id _Nullable' index='0' name='propertyCallBack' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='weight'>
<retval declared_type64='float' type64='f'/>
</method>
</class>
<class name='MPSNNNeuronDescriptor'>
<method selector='a'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='b'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='c'>
<retval declared_type64='float' type64='f'/>
</method>
<method class_method='true' selector='cnnNeuronDescriptorWithType:'>
<arg declared_type64='MPSCNNNeuronType' index='0' name='neuronType' type64='i'/>
<retval declared_type64='MPSNNNeuronDescriptor * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='cnnNeuronDescriptorWithType:a:'>
<arg declared_type64='MPSCNNNeuronType' index='0' name='neuronType' type64='i'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<retval declared_type64='MPSNNNeuronDescriptor * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='cnnNeuronDescriptorWithType:a:b:'>
<arg declared_type64='MPSCNNNeuronType' index='0' name='neuronType' type64='i'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='MPSNNNeuronDescriptor * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='cnnNeuronDescriptorWithType:a:b:c:'>
<arg declared_type64='MPSCNNNeuronType' index='0' name='neuronType' type64='i'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<arg declared_type64='float' index='3' name='c' type64='f'/>
<retval declared_type64='MPSNNNeuronDescriptor * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='cnnNeuronPReLUDescriptorWithData:noCopy:'>
<arg declared_type64='NSData * _Nonnull' index='0' name='data' type64='@'/>
<arg declared_type64='_Bool' index='1' name='noCopy' type64='B'/>
<retval declared_type64='MPSNNNeuronDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='data'>
<retval declared_type64='NSData * _Nullable' type64='@'/>
</method>
<method selector='neuronType'>
<retval declared_type64='MPSCNNNeuronType' type64='i'/>
</method>
<method selector='setA:'>
<arg declared_type64='float' index='0' name='a' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setB:'>
<arg declared_type64='float' index='0' name='b' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setC:'>
<arg declared_type64='float' index='0' name='c' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setData:'>
<arg declared_type64='NSData * _Nullable' index='0' name='data' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNeuronType:'>
<arg declared_type64='MPSCNNNeuronType' index='0' name='neuronType' type64='i'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSNNOptimizer'>
<method selector='applyGradientClipping'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='gradientClipMax'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='gradientClipMin'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='gradientRescale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='learningRate'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='regularizationScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='regularizationType'>
<retval declared_type64='MPSNNRegularizationType' type64='Q'/>
</method>
<method selector='setApplyGradientClipping:'>
<arg declared_type64='BOOL' index='0' name='applyGradientClipping' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLearningRate:'>
<arg declared_type64='float' index='0' name='newLearningRate' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSNNOptimizerAdam'>
<method selector='beta1'>
<retval declared_type64='double' type64='d'/>
</method>
<method selector='beta2'>
<retval declared_type64='double' type64='d'/>
</method>
<method selector='encodeToCommandBuffer:batchNormalizationGradientState:batchNormalizationSourceState:inputMomentumVectors:inputVelocityVectors:maximumVelocityVectors:resultState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='1' name='batchNormalizationGradientState' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='2' name='batchNormalizationSourceState' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='3' name='inputMomentumVectors' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='4' name='inputVelocityVectors' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='5' name='maximumVelocityVectors' type64='@'/>
<arg declared_type64='MPSCNNNormalizationGammaAndBetaState * _Nonnull' index='6' name='resultState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:batchNormalizationGradientState:batchNormalizationSourceState:inputMomentumVectors:inputVelocityVectors:resultState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='1' name='batchNormalizationGradientState' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='2' name='batchNormalizationSourceState' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='3' name='inputMomentumVectors' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='4' name='inputVelocityVectors' type64='@'/>
<arg declared_type64='MPSCNNNormalizationGammaAndBetaState * _Nonnull' index='5' name='resultState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:batchNormalizationState:inputMomentumVectors:inputVelocityVectors:maximumVelocityVectors:resultState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='1' name='batchNormalizationState' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='2' name='inputMomentumVectors' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='3' name='inputVelocityVectors' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='4' name='maximumVelocityVectors' type64='@'/>
<arg declared_type64='MPSCNNNormalizationGammaAndBetaState * _Nonnull' index='5' name='resultState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:batchNormalizationState:inputMomentumVectors:inputVelocityVectors:resultState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='1' name='batchNormalizationState' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='inputMomentumVectors' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='3' name='inputVelocityVectors' type64='@'/>
<arg declared_type64='MPSCNNNormalizationGammaAndBetaState * _Nonnull' index='4' name='resultState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:convolutionGradientState:convolutionSourceState:inputMomentumVectors:inputVelocityVectors:maximumVelocityVectors:resultState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNConvolutionGradientState * _Nonnull' index='1' name='convolutionGradientState' type64='@'/>
<arg declared_type64='MPSCNNConvolutionWeightsAndBiasesState * _Nonnull' index='2' name='convolutionSourceState' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='3' name='inputMomentumVectors' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='4' name='inputVelocityVectors' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='5' name='maximumVelocityVectors' type64='@'/>
<arg declared_type64='MPSCNNConvolutionWeightsAndBiasesState * _Nonnull' index='6' name='resultState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:convolutionGradientState:convolutionSourceState:inputMomentumVectors:inputVelocityVectors:resultState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNConvolutionGradientState * _Nonnull' index='1' name='convolutionGradientState' type64='@'/>
<arg declared_type64='MPSCNNConvolutionWeightsAndBiasesState * _Nonnull' index='2' name='convolutionSourceState' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='3' name='inputMomentumVectors' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='4' name='inputVelocityVectors' type64='@'/>
<arg declared_type64='MPSCNNConvolutionWeightsAndBiasesState * _Nonnull' index='5' name='resultState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:inputGradientMatrix:inputValuesMatrix:inputMomentumMatrix:inputVelocityMatrix:maximumVelocityMatrix:resultValuesMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='inputGradientMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='inputValuesMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='inputMomentumMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='4' name='inputVelocityMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nullable' index='5' name='maximumVelocityMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='6' name='resultValuesMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:inputGradientMatrix:inputValuesMatrix:inputMomentumMatrix:inputVelocityMatrix:resultValuesMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='inputGradientMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='inputValuesMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='inputMomentumMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='4' name='inputVelocityMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='5' name='resultValuesMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:inputGradientVector:inputValuesVector:inputMomentumVector:inputVelocityVector:maximumVelocityVector:resultValuesVector:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='1' name='inputGradientVector' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='2' name='inputValuesVector' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='3' name='inputMomentumVector' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='4' name='inputVelocityVector' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='5' name='maximumVelocityVector' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='6' name='resultValuesVector' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:inputGradientVector:inputValuesVector:inputMomentumVector:inputVelocityVector:resultValuesVector:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='1' name='inputGradientVector' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='2' name='inputValuesVector' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='3' name='inputMomentumVector' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='4' name='inputVelocityVector' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='5' name='resultValuesVector' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='epsilon'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithDevice:beta1:beta2:epsilon:timeStep:optimizerDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='double' index='1' name='beta1' type64='d'/>
<arg declared_type64='double' index='2' name='beta2' type64='d'/>
<arg declared_type64='float' index='3' name='epsilon' type64='f'/>
<arg declared_type64='NSUInteger' index='4' name='timeStep' type64='Q'/>
<arg declared_type64='MPSNNOptimizerDescriptor * _Nonnull' index='5' name='optimizerDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:learningRate:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='learningRate' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setTimeStep:'>
<arg declared_type64='NSUInteger' index='0' name='timeStep' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='timeStep'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSNNOptimizerDescriptor'>
<method selector='applyGradientClipping'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='gradientClipMax'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='gradientClipMin'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='gradientRescale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithLearningRate:gradientRescale:applyGradientClipping:gradientClipMax:gradientClipMin:regularizationType:regularizationScale:'>
<arg declared_type64='float' index='0' name='learningRate' type64='f'/>
<arg declared_type64='float' index='1' name='gradientRescale' type64='f'/>
<arg declared_type64='BOOL' index='2' name='applyGradientClipping' type64='B'/>
<arg declared_type64='float' index='3' name='gradientClipMax' type64='f'/>
<arg declared_type64='float' index='4' name='gradientClipMin' type64='f'/>
<arg declared_type64='MPSNNRegularizationType' index='5' name='regularizationType' type64='Q'/>
<arg declared_type64='float' index='6' name='regularizationScale' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithLearningRate:gradientRescale:regularizationType:regularizationScale:'>
<arg declared_type64='float' index='0' name='learningRate' type64='f'/>
<arg declared_type64='float' index='1' name='gradientRescale' type64='f'/>
<arg declared_type64='MPSNNRegularizationType' index='2' name='regularizationType' type64='Q'/>
<arg declared_type64='float' index='3' name='regularizationScale' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='learningRate'>
<retval declared_type64='float' type64='f'/>
</method>
<method class_method='true' selector='optimizerDescriptorWithLearningRate:gradientRescale:applyGradientClipping:gradientClipMax:gradientClipMin:regularizationType:regularizationScale:'>
<arg declared_type64='float' index='0' name='learningRate' type64='f'/>
<arg declared_type64='float' index='1' name='gradientRescale' type64='f'/>
<arg declared_type64='BOOL' index='2' name='applyGradientClipping' type64='B'/>
<arg declared_type64='float' index='3' name='gradientClipMax' type64='f'/>
<arg declared_type64='float' index='4' name='gradientClipMin' type64='f'/>
<arg declared_type64='MPSNNRegularizationType' index='5' name='regularizationType' type64='Q'/>
<arg declared_type64='float' index='6' name='regularizationScale' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='optimizerDescriptorWithLearningRate:gradientRescale:regularizationType:regularizationScale:'>
<arg declared_type64='float' index='0' name='learningRate' type64='f'/>
<arg declared_type64='float' index='1' name='gradientRescale' type64='f'/>
<arg declared_type64='MPSNNRegularizationType' index='2' name='regularizationType' type64='Q'/>
<arg declared_type64='float' index='3' name='regularizationScale' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='regularizationScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='regularizationType'>
<retval declared_type64='MPSNNRegularizationType' type64='Q'/>
</method>
<method selector='setApplyGradientClipping:'>
<arg declared_type64='BOOL' index='0' name='applyGradientClipping' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setGradientClipMax:'>
<arg declared_type64='float' index='0' name='gradientClipMax' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setGradientClipMin:'>
<arg declared_type64='float' index='0' name='gradientClipMin' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setGradientRescale:'>
<arg declared_type64='float' index='0' name='gradientRescale' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLearningRate:'>
<arg declared_type64='float' index='0' name='learningRate' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRegularizationScale:'>
<arg declared_type64='float' index='0' name='regularizationScale' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRegularizationType:'>
<arg declared_type64='MPSNNRegularizationType' index='0' name='regularizationType' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSNNOptimizerRMSProp'>
<method selector='decay'>
<retval declared_type64='double' type64='d'/>
</method>
<method selector='encodeToCommandBuffer:batchNormalizationGradientState:batchNormalizationSourceState:inputSumOfSquaresVectors:resultState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='1' name='batchNormalizationGradientState' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='2' name='batchNormalizationSourceState' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='3' name='inputSumOfSquaresVectors' type64='@'/>
<arg declared_type64='MPSCNNNormalizationGammaAndBetaState * _Nonnull' index='4' name='resultState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:batchNormalizationState:inputSumOfSquaresVectors:resultState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='1' name='batchNormalizationState' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='inputSumOfSquaresVectors' type64='@'/>
<arg declared_type64='MPSCNNNormalizationGammaAndBetaState * _Nonnull' index='3' name='resultState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:convolutionGradientState:convolutionSourceState:inputSumOfSquaresVectors:resultState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNConvolutionGradientState * _Nonnull' index='1' name='convolutionGradientState' type64='@'/>
<arg declared_type64='MPSCNNConvolutionWeightsAndBiasesState * _Nonnull' index='2' name='convolutionSourceState' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='3' name='inputSumOfSquaresVectors' type64='@'/>
<arg declared_type64='MPSCNNConvolutionWeightsAndBiasesState * _Nonnull' index='4' name='resultState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:inputGradientMatrix:inputValuesMatrix:inputSumOfSquaresMatrix:resultValuesMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='inputGradientMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='inputValuesMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='inputSumOfSquaresMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='4' name='resultValuesMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:inputGradientVector:inputValuesVector:inputSumOfSquaresVector:resultValuesVector:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='1' name='inputGradientVector' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='2' name='inputValuesVector' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='3' name='inputSumOfSquaresVector' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='4' name='resultValuesVector' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='epsilon'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithDevice:decay:epsilon:optimizerDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='double' index='1' name='decay' type64='d'/>
<arg declared_type64='float' index='2' name='epsilon' type64='f'/>
<arg declared_type64='MPSNNOptimizerDescriptor * _Nonnull' index='3' name='optimizerDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:learningRate:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='learningRate' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNOptimizerStochasticGradientDescent'>
<method selector='encodeToCommandBuffer:batchNormalizationGradientState:batchNormalizationSourceState:inputMomentumVectors:resultState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='1' name='batchNormalizationGradientState' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='2' name='batchNormalizationSourceState' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='3' name='inputMomentumVectors' type64='@'/>
<arg declared_type64='MPSCNNNormalizationGammaAndBetaState * _Nonnull' index='4' name='resultState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:batchNormalizationState:inputMomentumVectors:resultState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='1' name='batchNormalizationState' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='inputMomentumVectors' type64='@'/>
<arg declared_type64='MPSCNNNormalizationGammaAndBetaState * _Nonnull' index='3' name='resultState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:convolutionGradientState:convolutionSourceState:inputMomentumVectors:resultState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNConvolutionGradientState * _Nonnull' index='1' name='convolutionGradientState' type64='@'/>
<arg declared_type64='MPSCNNConvolutionWeightsAndBiasesState * _Nonnull' index='2' name='convolutionSourceState' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='3' name='inputMomentumVectors' type64='@'/>
<arg declared_type64='MPSCNNConvolutionWeightsAndBiasesState * _Nonnull' index='4' name='resultState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:inputGradientMatrix:inputValuesMatrix:inputMomentumMatrix:resultValuesMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='inputGradientMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='inputValuesMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nullable' index='3' name='inputMomentumMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='4' name='resultValuesMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:inputGradientVector:inputValuesVector:inputMomentumVector:resultValuesVector:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='1' name='inputGradientVector' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='2' name='inputValuesVector' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='3' name='inputMomentumVector' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='4' name='resultValuesVector' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:learningRate:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='learningRate' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:momentumScale:useNesterovMomentum:optimizerDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='momentumScale' type64='f'/>
<arg declared_type64='BOOL' index='2' name='useNesterovMomentum' type64='B'/>
<arg declared_type64='MPSNNOptimizerDescriptor * _Nonnull' index='3' name='optimizerDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:momentumScale:useNestrovMomentum:optimizerDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='momentumScale' type64='f'/>
<arg declared_type64='BOOL' index='2' name='useNestrovMomentum' type64='B'/>
<arg declared_type64='MPSNNOptimizerDescriptor * _Nonnull' index='3' name='optimizerDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='momentumScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='useNesterovMomentum'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='useNestrovMomentum'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSNNPad'>
<method selector='fillValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:paddingSizeBefore:paddingSizeAfter:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSImageCoordinate' index='1' name='paddingSizeBefore' type64='{MPSImageCoordinate=QQQ}'/>
<arg declared_type64='MPSImageCoordinate' index='2' name='paddingSizeAfter' type64='{MPSImageCoordinate=QQQ}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:paddingSizeBefore:paddingSizeAfter:fillValueArray:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSImageCoordinate' index='1' name='paddingSizeBefore' type64='{MPSImageCoordinate=QQQ}'/>
<arg declared_type64='MPSImageCoordinate' index='2' name='paddingSizeAfter' type64='{MPSImageCoordinate=QQQ}'/>
<arg declared_type64='NSData * _Nullable' index='3' name='fillValueArray' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='paddingSizeAfter'>
<retval declared_type64='MPSImageCoordinate' type64='{MPSImageCoordinate=QQQ}'/>
</method>
<method selector='paddingSizeBefore'>
<retval declared_type64='MPSImageCoordinate' type64='{MPSImageCoordinate=QQQ}'/>
</method>
<method selector='setFillValue:'>
<arg declared_type64='float' index='0' name='fillValue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPaddingSizeAfter:'>
<arg declared_type64='MPSImageCoordinate' index='0' name='paddingSizeAfter' type64='{MPSImageCoordinate=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPaddingSizeBefore:'>
<arg declared_type64='MPSImageCoordinate' index='0' name='paddingSizeBefore' type64='{MPSImageCoordinate=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSNNPadGradient'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNPadGradientNode'>
<method selector='initWithSourceGradient:sourceImage:gradientState:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNPadNode'>
<method selector='fillValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithSource:paddingSizeBefore:paddingSizeAfter:edgeMode:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='MPSImageCoordinate' index='1' name='paddingSizeBefore' type64='{MPSImageCoordinate=QQQ}'/>
<arg declared_type64='MPSImageCoordinate' index='2' name='paddingSizeAfter' type64='{MPSImageCoordinate=QQQ}'/>
<arg declared_type64='MPSImageEdgeMode' index='3' name='edgeMode' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:paddingSizeBefore:paddingSizeAfter:edgeMode:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='MPSImageCoordinate' index='1' name='paddingSizeBefore' type64='{MPSImageCoordinate=QQQ}'/>
<arg declared_type64='MPSImageCoordinate' index='2' name='paddingSizeAfter' type64='{MPSImageCoordinate=QQQ}'/>
<arg declared_type64='MPSImageEdgeMode' index='3' name='edgeMode' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setFillValue:'>
<arg declared_type64='float' index='0' name='fillValue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSNNReduceBinary'>
<method selector='primarySourceClipRect'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='secondarySourceClipRect'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='setPrimarySourceClipRect:'>
<arg declared_type64='MTLRegion' index='0' name='primarySourceClipRect' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondarySourceClipRect:'>
<arg declared_type64='MTLRegion' index='0' name='secondarySourceClipRect' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSNNReduceColumnMax'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNReduceColumnMean'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNReduceColumnMin'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNReduceColumnSum'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNReduceFeatureChannelsAndWeightsMean'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNReduceFeatureChannelsAndWeightsSum'>
<method selector='doWeightedSumByNonZeroWeights'>
<retval declared_type64='_Bool' type64='B'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:doWeightedSumByNonZeroWeights:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='_Bool' index='1' name='doWeightedSumByNonZeroWeights' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNReduceFeatureChannelsArgumentMax'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNReduceFeatureChannelsArgumentMin'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNReduceFeatureChannelsMax'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNReduceFeatureChannelsMean'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNReduceFeatureChannelsMin'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNReduceFeatureChannelsSum'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setWeight:'>
<arg declared_type64='float' index='0' name='weight' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='weight'>
<retval declared_type64='float' type64='f'/>
</method>
</class>
<class name='MPSNNReduceRowMax'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNReduceRowMean'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNReduceRowMin'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNReduceRowSum'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNReduceUnary'>
<method selector='clipRectSource'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='setClipRectSource:'>
<arg declared_type64='MTLRegion' index='0' name='clipRectSource' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSNNReductionFeatureChannelsSumNode'>
<method selector='setWeight:'>
<arg declared_type64='float' index='0' name='weight' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='weight'>
<retval declared_type64='float' type64='f'/>
</method>
</class>
<class name='MPSNNReductionSpatialMeanGradientNode'>
<method selector='initWithSourceGradient:sourceImage:gradientState:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNReshape'>
<method selector='encodeBatchToCommandBuffer:sourceImages:destinationStates:destinationStateIsTemporary:reshapedWidth:reshapedHeight:reshapedFeatureChannels:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImages' type64='@'/>
<arg declared_type64='MPSStateBatch * _Nullable * _Nonnull' index='2' name='outStates' type64='@'/>
<arg declared_type64='BOOL' index='3' name='isTemporary' type64='B'/>
<arg declared_type64='NSUInteger' index='4' name='reshapedWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='reshapedHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='6' name='reshapedFeatureChannels' type64='Q'/>
<retval declared_type64='MPSImageBatch * _Nonnull' type64='@'/>
</method>
<method selector='encodeBatchToCommandBuffer:sourceImages:reshapedWidth:reshapedHeight:reshapedFeatureChannels:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImageBatch * _Nonnull' index='1' name='sourceImages' type64='@'/>
<arg declared_type64='NSUInteger' index='2' name='reshapedWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='reshapedHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='reshapedFeatureChannels' type64='Q'/>
<retval declared_type64='MPSImageBatch * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:destinationState:destinationStateIsTemporary:reshapedWidth:reshapedHeight:reshapedFeatureChannels:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSState * _Nullable * _Nonnull' index='2' name='outState' type64='^@'/>
<arg declared_type64='BOOL' index='3' name='isTemporary' type64='B'/>
<arg declared_type64='NSUInteger' index='4' name='reshapedWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='reshapedHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='6' name='reshapedFeatureChannels' type64='Q'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:reshapedWidth:reshapedHeight:reshapedFeatureChannels:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='NSUInteger' index='2' name='reshapedWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='reshapedHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='reshapedFeatureChannels' type64='Q'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNReshapeGradient'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNReshapeGradientNode'>
<method selector='initWithSourceGradient:sourceImage:gradientState:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSourceGradient:sourceImage:gradientState:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceGradient' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSNNGradientStateNode * _Nonnull' index='2' name='gradientState' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNReshapeNode'>
<method selector='initWithSource:resultWidth:resultHeight:resultFeatureChannels:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='resultWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='resultHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='resultFeatureChannels' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:resultWidth:resultHeight:resultFeatureChannels:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='resultWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='resultHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='resultFeatureChannels' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNResizeBilinear'>
<method selector='alignCorners'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:resizeWidth:resizeHeight:alignCorners:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='resizeWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='resizeHeight' type64='Q'/>
<arg declared_type64='BOOL' index='3' name='alignCorners' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='resizeHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='resizeWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSNNScaleNode'>
<method selector='initWithSource:outputSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='MTLSize' index='1' name='size' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:transformProvider:outputSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nullable' index='1' name='transformProvider' type64='@'/>
<arg declared_type64='MTLSize' index='2' name='size' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:outputSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='MTLSize' index='1' name='size' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:transformProvider:outputSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nullable' index='1' name='transformProvider' type64='@'/>
<arg declared_type64='MTLSize' index='2' name='size' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNSlice'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNStateNode'>
<method selector='exportFromGraph'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='handle'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='setExportFromGraph:'>
<arg declared_type64='BOOL' index='0' name='exportFromGraph' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setHandle:'>
<arg declared_type64='id _Nullable' index='0' name='handle' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSynchronizeResource:'>
<arg declared_type64='BOOL' index='0' name='synchronizeResource' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='synchronizeResource'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSNNUnaryReductionNode'>
<method selector='clipRectSource'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setClipRectSource:'>
<arg declared_type64='MTLRegion' index='0' name='clipRectSource' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSRNNDescriptor'>
<method selector='inputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='layerSequenceDirection'>
<retval declared_type64='MPSRNNSequenceDirection' type64='Q'/>
</method>
<method selector='outputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setInputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='inputFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLayerSequenceDirection:'>
<arg declared_type64='MPSRNNSequenceDirection' index='0' name='layerSequenceDirection' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOutputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='outputFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUseFloat32Weights:'>
<arg declared_type64='BOOL' index='0' name='useFloat32Weights' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUseLayerInputUnitTransformMode:'>
<arg declared_type64='BOOL' index='0' name='useLayerInputUnitTransformMode' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='useFloat32Weights'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='useLayerInputUnitTransformMode'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSRNNImageInferenceLayer'>
<method selector='bidirectionalCombineMode'>
<retval declared_type64='MPSRNNBidirectionalCombineMode' type64='Q'/>
</method>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeBidirectionalSequenceToCommandBuffer:sourceSequence:destinationForwardImages:destinationBackwardImages:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceSequence' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='2' name='destinationForwardImages' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='3' name='destinationBackwardImages' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeSequenceToCommandBuffer:sourceImages:destinationImages:recurrentInputState:recurrentOutputStates:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceImages' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='2' name='destinationImages' type64='@'/>
<arg declared_type64='MPSRNNRecurrentImageState * _Nullable' index='3' name='recurrentInputState' type64='@'/>
<arg declared_type64='NSMutableArray * _Nullable' index='4' name='recurrentOutputStates' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:rnnDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSRNNDescriptor * _Nonnull' index='1' name='rnnDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:rnnDescriptors:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='NSArray * _Nonnull' index='1' name='rnnDescriptors' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='inputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='numberOfLayers'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='outputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='recurrentOutputIsTemporary'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='setBidirectionalCombineMode:'>
<arg declared_type64='MPSRNNBidirectionalCombineMode' index='0' name='bidirectionalCombineMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRecurrentOutputIsTemporary:'>
<arg declared_type64='BOOL' index='0' name='recurrentOutputIsTemporary' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStoreAllIntermediateStates:'>
<arg declared_type64='BOOL' index='0' name='storeAllIntermediateStates' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='storeAllIntermediateStates'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSRNNMatrixInferenceLayer'>
<method selector='bidirectionalCombineMode'>
<retval declared_type64='MPSRNNBidirectionalCombineMode' type64='Q'/>
</method>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeBidirectionalSequenceToCommandBuffer:sourceSequence:destinationForwardMatrices:destinationBackwardMatrices:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceSequence' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='2' name='destinationForwardMatrices' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='3' name='destinationBackwardMatrices' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeSequenceToCommandBuffer:sourceMatrices:destinationMatrices:recurrentInputState:recurrentOutputStates:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceMatrices' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='2' name='destinationMatrices' type64='@'/>
<arg declared_type64='MPSRNNRecurrentMatrixState * _Nullable' index='3' name='recurrentInputState' type64='@'/>
<arg declared_type64='NSMutableArray * _Nullable' index='4' name='recurrentOutputStates' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeSequenceToCommandBuffer:sourceMatrices:sourceOffsets:destinationMatrices:destinationOffsets:recurrentInputState:recurrentOutputStates:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceMatrices' type64='@'/>
<arg declared_type64='NSUInteger * _Nullable' index='2' name='sourceOffsets' type64='^Q'/>
<arg declared_type64='NSArray * _Nonnull' index='3' name='destinationMatrices' type64='@'/>
<arg declared_type64='NSUInteger * _Nullable' index='4' name='destinationOffsets' type64='^Q'/>
<arg declared_type64='MPSRNNRecurrentMatrixState * _Nullable' index='5' name='recurrentInputState' type64='@'/>
<arg declared_type64='NSMutableArray * _Nullable' index='6' name='recurrentOutputStates' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:rnnDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSRNNDescriptor * _Nonnull' index='1' name='rnnDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:rnnDescriptors:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='NSArray * _Nonnull' index='1' name='rnnDescriptors' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='inputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='numberOfLayers'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='outputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='recurrentOutputIsTemporary'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='setBidirectionalCombineMode:'>
<arg declared_type64='MPSRNNBidirectionalCombineMode' index='0' name='bidirectionalCombineMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRecurrentOutputIsTemporary:'>
<arg declared_type64='BOOL' index='0' name='recurrentOutputIsTemporary' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStoreAllIntermediateStates:'>
<arg declared_type64='BOOL' index='0' name='storeAllIntermediateStates' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='storeAllIntermediateStates'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSRNNMatrixTrainingLayer'>
<method selector='accumulateWeightGradients'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='createTemporaryWeightGradientMatrices:dataType:commandBuffer:'>
<arg declared_type64='NSMutableArray * _Nonnull' index='0' name='matricesOut' type64='@'/>
<arg declared_type64='MPSDataType' index='1' name='dataType' type64='I'/>
<arg declared_type64='id _Nonnull' index='2' name='commandBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='createWeightGradientMatrices:dataType:'>
<arg declared_type64='NSMutableArray * _Nonnull' index='0' name='matricesOut' type64='@'/>
<arg declared_type64='MPSDataType' index='1' name='dataType' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='createWeightMatrices:'>
<arg declared_type64='NSMutableArray * _Nonnull' index='0' name='matricesOut' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeCopyWeightsToCommandBuffer:weights:matrixId:matrix:copyFromWeightsToMatrix:matrixOffset:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='weights' type64='@'/>
<arg declared_type64='MPSRNNMatrixId' index='2' name='matrixId' type64='Q'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='matrix' type64='@'/>
<arg declared_type64='BOOL' index='4' name='copyFromWeightsToMatrix' type64='B'/>
<arg declared_type64='MTLOrigin' index='5' name='matrixOffset' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeForwardSequenceToCommandBuffer:sourceMatrices:destinationMatrices:trainingStates:weights:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceMatrices' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='2' name='destinationMatrices' type64='@'/>
<arg declared_type64='NSMutableArray * _Nonnull' index='3' name='trainingStates' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='4' name='weights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeForwardSequenceToCommandBuffer:sourceMatrices:sourceOffsets:destinationMatrices:destinationOffsets:trainingStates:recurrentInputState:recurrentOutputStates:weights:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceMatrices' type64='@'/>
<arg declared_type64='NSUInteger * _Nullable' index='2' name='sourceOffsets' type64='^Q'/>
<arg declared_type64='NSArray * _Nonnull' index='3' name='destinationMatrices' type64='@'/>
<arg declared_type64='NSUInteger * _Nullable' index='4' name='destinationOffsets' type64='^Q'/>
<arg declared_type64='NSMutableArray * _Nonnull' index='5' name='trainingStates' type64='@'/>
<arg declared_type64='MPSRNNRecurrentMatrixState * _Nullable' index='6' name='recurrentInputState' type64='@'/>
<arg declared_type64='NSMutableArray * _Nullable' index='7' name='recurrentOutputStates' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='8' name='weights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeGradientSequenceToCommandBuffer:forwardSources:forwardSourceOffsets:sourceGradients:sourceGradientOffsets:destinationGradients:destinationOffsets:weightGradients:trainingStates:recurrentInputState:recurrentOutputStates:weights:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='forwardSources' type64='@'/>
<arg declared_type64='NSUInteger * _Nullable' index='2' name='forwardSourceOffsets' type64='^Q'/>
<arg declared_type64='NSArray * _Nonnull' index='3' name='sourceGradients' type64='@'/>
<arg declared_type64='NSUInteger * _Nullable' index='4' name='sourceGradientOffsets' type64='^Q'/>
<arg declared_type64='NSArray * _Nullable' index='5' name='destinationGradients' type64='@'/>
<arg declared_type64='NSUInteger * _Nullable' index='6' name='destinationOffsets' type64='^Q'/>
<arg declared_type64='NSArray * _Nullable' index='7' name='weightGradients' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='8' name='trainingStates' type64='@'/>
<arg declared_type64='MPSRNNRecurrentMatrixState * _Nullable' index='9' name='recurrentInputState' type64='@'/>
<arg declared_type64='NSMutableArray * _Nullable' index='10' name='recurrentOutputStates' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='11' name='weights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeGradientSequenceToCommandBuffer:forwardSources:sourceGradients:destinationGradients:weightGradients:trainingStates:weights:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='forwardSources' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='2' name='sourceGradients' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='3' name='destinationGradients' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='4' name='weightGradients' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='5' name='trainingStates' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='6' name='weights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:rnnDescriptor:trainableWeights:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSRNNDescriptor * _Nonnull' index='1' name='rnnDescriptor' type64='@'/>
<arg declared_type64='NSMutableArray * _Nonnull' index='2' name='trainableWeights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='inputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='outputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='recurrentOutputIsTemporary'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='setAccumulateWeightGradients:'>
<arg declared_type64='BOOL' index='0' name='accumulateWeightGradients' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRecurrentOutputIsTemporary:'>
<arg declared_type64='BOOL' index='0' name='recurrentOutputIsTemporary' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStoreAllIntermediateStates:'>
<arg declared_type64='BOOL' index='0' name='storeAllIntermediateStates' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTrainingStateIsTemporary:'>
<arg declared_type64='BOOL' index='0' name='trainingStateIsTemporary' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='storeAllIntermediateStates'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='trainingStateIsTemporary'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSRNNRecurrentImageState'>
<method selector='getMemoryCellImageForLayerIndex:'>
<arg declared_type64='NSUInteger' index='0' name='layerIndex' type64='Q'/>
<retval declared_type64='MPSImage * _Nullable' type64='@'/>
</method>
<method selector='getRecurrentOutputImageForLayerIndex:'>
<arg declared_type64='NSUInteger' index='0' name='layerIndex' type64='Q'/>
<retval declared_type64='MPSImage * _Nullable' type64='@'/>
</method>
</class>
<class name='MPSRNNRecurrentMatrixState'>
<method selector='getMemoryCellMatrixForLayerIndex:'>
<arg declared_type64='NSUInteger' index='0' name='layerIndex' type64='Q'/>
<retval declared_type64='MPSMatrix * _Nullable' type64='@'/>
</method>
<method selector='getRecurrentOutputMatrixForLayerIndex:'>
<arg declared_type64='NSUInteger' index='0' name='layerIndex' type64='Q'/>
<retval declared_type64='MPSMatrix * _Nullable' type64='@'/>
</method>
</class>
<class name='MPSRNNSingleGateDescriptor'>
<method class_method='true' selector='createRNNSingleGateDescriptorWithInputFeatureChannels:outputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='inputFeatureChannels' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='outputFeatureChannels' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='inputWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='recurrentWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='setInputWeights:'>
<arg declared_type64='id _Nullable' index='0' name='inputWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRecurrentWeights:'>
<arg declared_type64='id _Nullable' index='0' name='recurrentWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NSObject'>
<method selector='alphaForSourceImage:destinationImage:'>
<arg declared_type64='MPSImage * _Nonnull' index='0' name='sourceImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='destinationImage' type64='@'/>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='beta'>
<retval declared_type64='float * _Nullable' type64='^f'/>
</method>
<method selector='biasTerms'>
<retval declared_type64='float * _Nullable' type64='^f'/>
</method>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='dataType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='descriptor'>
<retval declared_type64='MPSCNNConvolutionDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='destinationImageDescriptorForSourceImages:sourceStates:forKernel:suggestedDescriptor:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceImages' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSKernel * _Nonnull' index='2' name='kernel' type64='@'/>
<arg declared_type64='MPSImageDescriptor * _Nonnull' index='3' name='inDescriptor' type64='@'/>
<retval declared_type64='MPSImageDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='encodeWithCoder:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aCoder' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='epsilon'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='gamma'>
<retval declared_type64='float * _Nullable' type64='^f'/>
</method>
<method selector='initWithCoder:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='inverse'>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='kernelWeightsDataType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='label'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='load'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='lookupTableForUInt8Kernel'>
<retval declared_type64='float * _Nonnull' type64='^f'/>
</method>
<method selector='mean'>
<retval declared_type64='float * _Nullable' type64='^f'/>
</method>
<method selector='numberOfFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='numberOfGroups'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='paddingMethod'>
<retval declared_type64='MPSNNPaddingMethod' type64='Q'/>
</method>
<method selector='purge'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='rangesForUInt8Kernel'>
<retval declared_type64='vector_float2 * _Nonnull' type64='^'/>
</method>
<method selector='scalarWeightForSourceImage:destinationImage:'>
<arg declared_type64='MPSImage * _Nonnull' index='0' name='sourceImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='destinationImage' type64='@'/>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='setNumberOfGroups:'>
<arg declared_type64='NSUInteger' index='0' name='numberOfGroups' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTrainingStyle:'>
<arg declared_type64='MPSNNTrainingStyle' index='0' name='trainingStyle' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='supportsSecureCoding'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='trainingStyle'>
<retval declared_type64='MPSNNTrainingStyle' type64='Q'/>
</method>
<method selector='transformForSourceImage:handle:'>
<arg declared_type64='MPSImage * _Nonnull' index='0' name='image' type64='@'/>
<arg declared_type64='id _Nullable' index='1' name='handle' type64='@'/>
<retval declared_type64='MPSScaleTransform' type64='{MPSScaleTransform=dddd}'/>
</method>
<method selector='updateGammaAndBetaWithBatchNormalizationState:'>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='0' name='batchNormalizationState' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='updateGammaAndBetaWithCommandBuffer:batchNormalizationState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='1' name='batchNormalizationState' type64='@'/>
<retval declared_type64='MPSCNNNormalizationGammaAndBetaState * _Nullable' type64='@'/>
</method>
<method selector='updateGammaAndBetaWithCommandBuffer:groupNormalizationStateBatch:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNGroupNormalizationGradientStateBatch * _Nonnull' index='1' name='groupNormalizationStateBatch' type64='@'/>
<retval declared_type64='MPSCNNNormalizationGammaAndBetaState * _Nullable' type64='@'/>
</method>
<method selector='updateGammaAndBetaWithCommandBuffer:instanceNormalizationStateBatch:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNInstanceNormalizationGradientStateBatch * _Nonnull' index='1' name='instanceNormalizationStateBatch' type64='@'/>
<retval declared_type64='MPSCNNNormalizationGammaAndBetaState * _Nullable' type64='@'/>
</method>
<method selector='updateGammaAndBetaWithGroupNormalizationStateBatch:'>
<arg declared_type64='MPSCNNGroupNormalizationGradientStateBatch * _Nonnull' index='0' name='groupNormalizationStateBatch' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='updateGammaAndBetaWithInstanceNormalizationStateBatch:'>
<arg declared_type64='MPSCNNInstanceNormalizationGradientStateBatch * _Nonnull' index='0' name='instanceNormalizationStateBatch' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='updateMeanAndVarianceWithBatchNormalizationState:'>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='0' name='batchNormalizationState' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='updateMeanAndVarianceWithCommandBuffer:batchNormalizationState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='1' name='batchNormalizationState' type64='@'/>
<retval declared_type64='MPSCNNNormalizationMeanAndVarianceState * _Nullable' type64='@'/>
</method>
<method selector='updateWithCommandBuffer:gradientState:sourceState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNConvolutionGradientState * _Nonnull' index='1' name='gradientState' type64='@'/>
<arg declared_type64='MPSCNNConvolutionWeightsAndBiasesState * _Nonnull' index='2' name='sourceState' type64='@'/>
<retval declared_type64='MPSCNNConvolutionWeightsAndBiasesState * _Nullable' type64='@'/>
</method>
<method selector='updateWithGradientState:sourceState:'>
<arg declared_type64='MPSCNNConvolutionGradientState * _Nonnull' index='0' name='gradientState' type64='@'/>
<arg declared_type64='MPSCNNConvolutionWeightsAndBiasesState * _Nonnull' index='1' name='sourceState' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='variance'>
<retval declared_type64='float * _Nullable' type64='^f'/>
</method>
<method selector='weights'>
<retval declared_type64='void * _Nonnull' type64='^v'/>
</method>
<method selector='weightsLayout'>
<retval declared_type64='MPSCNNConvolutionWeightsLayout' type64='I'/>
</method>
<method selector='weightsQuantizationType'>
<retval declared_type64='MPSCNNWeightsQuantizationType' type64='I'/>
</method>
</class>
<informal_protocol name='MPSCNNBatchNormalizationDataSource'>
<method selector='beta' type64='^f16@0:8'>
<retval declared_type64='float * _Nullable' type64='^f'/>
</method>
<method selector='copyWithZone:device:' type64='@32@0:8^{_NSZone=}16@24'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeWithCoder:' type64='v24@0:8@16'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aCoder' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='epsilon' type64='f16@0:8'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='gamma' type64='^f16@0:8'>
<retval declared_type64='float * _Nullable' type64='^f'/>
</method>
<method selector='initWithCoder:' type64='@24@0:8@16'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='label' type64='@16@0:8'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='load' type64='B16@0:8'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='mean' type64='^f16@0:8'>
<retval declared_type64='float * _Nullable' type64='^f'/>
</method>
<method selector='numberOfFeatureChannels' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='purge' type64='v16@0:8'>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='supportsSecureCoding' type64='B16@0:8'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='updateGammaAndBetaWithBatchNormalizationState:' type64='B24@0:8@16'>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='0' name='batchNormalizationState' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='updateGammaAndBetaWithCommandBuffer:batchNormalizationState:' type64='@32@0:8@16@24'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='1' name='batchNormalizationState' type64='@'/>
<retval declared_type64='MPSCNNNormalizationGammaAndBetaState * _Nullable' type64='@'/>
</method>
<method selector='updateMeanAndVarianceWithBatchNormalizationState:' type64='B24@0:8@16'>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='0' name='batchNormalizationState' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='updateMeanAndVarianceWithCommandBuffer:batchNormalizationState:' type64='@32@0:8@16@24'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNBatchNormalizationState * _Nonnull' index='1' name='batchNormalizationState' type64='@'/>
<retval declared_type64='MPSCNNNormalizationMeanAndVarianceState * _Nullable' type64='@'/>
</method>
<method selector='variance' type64='^f16@0:8'>
<retval declared_type64='float * _Nullable' type64='^f'/>
</method>
</informal_protocol>
<informal_protocol name='MPSCNNConvolutionDataSource'>
<method selector='biasTerms' type64='^f16@0:8'>
<retval declared_type64='float * _Nullable' type64='^f'/>
</method>
<method selector='copyWithZone:device:' type64='@32@0:8^{_NSZone=}16@24'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='dataType' type64='I16@0:8'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='descriptor' type64='@16@0:8'>
<retval declared_type64='MPSCNNConvolutionDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='kernelWeightsDataType' type64='I16@0:8'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='label' type64='@16@0:8'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='load' type64='B16@0:8'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='lookupTableForUInt8Kernel' type64='^f16@0:8'>
<retval declared_type64='float * _Nonnull' type64='^f'/>
</method>
<method selector='purge' type64='v16@0:8'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='rangesForUInt8Kernel' type64='^16@0:8'>
<retval declared_type64='vector_float2 * _Nonnull' type64='^'/>
</method>
<method selector='updateWithCommandBuffer:gradientState:sourceState:' type64='@40@0:8@16@24@32'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNConvolutionGradientState * _Nonnull' index='1' name='gradientState' type64='@'/>
<arg declared_type64='MPSCNNConvolutionWeightsAndBiasesState * _Nonnull' index='2' name='sourceState' type64='@'/>
<retval declared_type64='MPSCNNConvolutionWeightsAndBiasesState * _Nullable' type64='@'/>
</method>
<method selector='updateWithGradientState:sourceState:' type64='B32@0:8@16@24'>
<arg declared_type64='MPSCNNConvolutionGradientState * _Nonnull' index='0' name='gradientState' type64='@'/>
<arg declared_type64='MPSCNNConvolutionWeightsAndBiasesState * _Nonnull' index='1' name='sourceState' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='weights' type64='^v16@0:8'>
<retval declared_type64='void * _Nonnull' type64='^v'/>
</method>
<method selector='weightsLayout' type64='I16@0:8'>
<retval declared_type64='MPSCNNConvolutionWeightsLayout' type64='I'/>
</method>
<method selector='weightsQuantizationType' type64='I16@0:8'>
<retval declared_type64='MPSCNNWeightsQuantizationType' type64='I'/>
</method>
</informal_protocol>
<informal_protocol name='MPSCNNGroupNormalizationDataSource'>
<method selector='beta' type64='^f16@0:8'>
<retval declared_type64='float * _Nullable' type64='^f'/>
</method>
<method selector='copyWithZone:device:' type64='@32@0:8^{_NSZone=}16@24'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeWithCoder:' type64='v24@0:8@16'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aCoder' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='epsilon' type64='f16@0:8'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='gamma' type64='^f16@0:8'>
<retval declared_type64='float * _Nullable' type64='^f'/>
</method>
<method selector='initWithCoder:' type64='@24@0:8@16'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='label' type64='@16@0:8'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='numberOfFeatureChannels' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='numberOfGroups' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setNumberOfGroups:' type64='v24@0:8Q16'>
<arg declared_type64='NSUInteger' index='0' name='numberOfGroups' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='supportsSecureCoding' type64='B16@0:8'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='updateGammaAndBetaWithCommandBuffer:groupNormalizationStateBatch:' type64='@32@0:8@16^{NSArray=#}24'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNGroupNormalizationGradientStateBatch * _Nonnull' index='1' name='groupNormalizationStateBatch' type64='@'/>
<retval declared_type64='MPSCNNNormalizationGammaAndBetaState * _Nullable' type64='@'/>
</method>
<method selector='updateGammaAndBetaWithGroupNormalizationStateBatch:' type64='B24@0:8^{NSArray=#}16'>
<arg declared_type64='MPSCNNGroupNormalizationGradientStateBatch * _Nonnull' index='0' name='groupNormalizationStateBatch' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
</informal_protocol>
<informal_protocol name='MPSCNNInstanceNormalizationDataSource'>
<method selector='beta' type64='^f16@0:8'>
<retval declared_type64='float * _Nullable' type64='^f'/>
</method>
<method selector='copyWithZone:device:' type64='@32@0:8^{_NSZone=}16@24'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeWithCoder:' type64='v24@0:8@16'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aCoder' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='epsilon' type64='f16@0:8'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='gamma' type64='^f16@0:8'>
<retval declared_type64='float * _Nullable' type64='^f'/>
</method>
<method selector='initWithCoder:' type64='@24@0:8@16'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='label' type64='@16@0:8'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='load' type64='B16@0:8'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='numberOfFeatureChannels' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='purge' type64='v16@0:8'>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='supportsSecureCoding' type64='B16@0:8'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='updateGammaAndBetaWithCommandBuffer:instanceNormalizationStateBatch:' type64='@32@0:8@16^{NSArray=#}24'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSCNNInstanceNormalizationGradientStateBatch * _Nonnull' index='1' name='instanceNormalizationStateBatch' type64='@'/>
<retval declared_type64='MPSCNNNormalizationGammaAndBetaState * _Nullable' type64='@'/>
</method>
<method selector='updateGammaAndBetaWithInstanceNormalizationStateBatch:' type64='B24@0:8^{NSArray=#}16'>
<arg declared_type64='MPSCNNInstanceNormalizationGradientStateBatch * _Nonnull' index='0' name='instanceNormalizationStateBatch' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
</informal_protocol>
<informal_protocol name='MPSHandle'>
<method selector='label' type64='@16@0:8'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
</informal_protocol>
<informal_protocol name='MPSImageSizeEncodingState'>
<method selector='sourceHeight' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceWidth' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</informal_protocol>
<informal_protocol name='MPSImageTransformProvider'>
<method selector='transformForSourceImage:handle:' type64='{MPSScaleTransform=dddd}32@0:8@16@24'>
<arg declared_type64='MPSImage * _Nonnull' index='0' name='image' type64='@'/>
<arg declared_type64='id _Nullable' index='1' name='handle' type64='@'/>
<retval declared_type64='MPSScaleTransform' type64='{MPSScaleTransform=dddd}'/>
</method>
</informal_protocol>
<informal_protocol name='MPSNNGramMatrixCallback'>
<method selector='alphaForSourceImage:destinationImage:' type64='f32@0:8@16@24'>
<arg declared_type64='MPSImage * _Nonnull' index='0' name='sourceImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='destinationImage' type64='@'/>
<retval declared_type64='float' type64='f'/>
</method>
</informal_protocol>
<informal_protocol name='MPSNNLossCallback'>
<method selector='scalarWeightForSourceImage:destinationImage:' type64='f32@0:8@16@24'>
<arg declared_type64='MPSImage * _Nonnull' index='0' name='sourceImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='destinationImage' type64='@'/>
<retval declared_type64='float' type64='f'/>
</method>
</informal_protocol>
<informal_protocol name='MPSNNPadding'>
<method selector='destinationImageDescriptorForSourceImages:sourceStates:forKernel:suggestedDescriptor:' type64='@48@0:8@16@24@32@40'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceImages' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSKernel * _Nonnull' index='2' name='kernel' type64='@'/>
<arg declared_type64='MPSImageDescriptor * _Nonnull' index='3' name='inDescriptor' type64='@'/>
<retval declared_type64='MPSImageDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='inverse' type64='@16@0:8'>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='label' type64='@16@0:8'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='paddingMethod' type64='Q16@0:8'>
<retval declared_type64='MPSNNPaddingMethod' type64='Q'/>
</method>
</informal_protocol>
<informal_protocol name='MPSNNTrainableNode'>
<method selector='setTrainingStyle:' type64='v24@0:8Q16'>
<arg declared_type64='MPSNNTrainingStyle' index='0' name='trainingStyle' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='trainingStyle' type64='Q16@0:8'>
<retval declared_type64='MPSNNTrainingStyle' type64='Q'/>
</method>
</informal_protocol>
<struct name='MPSAxisAlignedBoundingBox' type64='{_MPSAxisAlignedBoundingBox=&quot;min&quot;&quot;max&quot;}'>
<field declared_type64='vector_float3' name='min' type64=''/>
<field declared_type64='vector_float3' name='max' type64=''/>
</struct>
<struct name='MPSIntersectionDistance' type64='{_MPSIntersectionDistance=&quot;distance&quot;f}'>
<field declared_type64='float' name='distance' type64='f'/>
</struct>
<struct name='MPSIntersectionDistancePrimitiveIndex' type64='{_MPSIntersectionDistancePrimitiveIndex=&quot;distance&quot;f&quot;primitiveIndex&quot;I}'>
<field declared_type64='float' name='distance' type64='f'/>
<field declared_type64='unsigned int' name='primitiveIndex' type64='I'/>
</struct>
<struct name='MPSIntersectionDistancePrimitiveIndexCoordinates' type64='{_MPSIntersectionDistancePrimitiveIndexCoordinates=&quot;distance&quot;f&quot;primitiveIndex&quot;I&quot;coordinates&quot;}'>
<field declared_type64='float' name='distance' type64='f'/>
<field declared_type64='unsigned int' name='primitiveIndex' type64='I'/>
<field declared_type64='vector_float2' name='coordinates' type64=''/>
</struct>
<struct name='MPSIntersectionDistancePrimitiveIndexInstanceIndex' type64='{_MPSIntersectionDistancePrimitiveIndexInstanceIndex=&quot;distance&quot;f&quot;primitiveIndex&quot;I&quot;instanceIndex&quot;I}'>
<field declared_type64='float' name='distance' type64='f'/>
<field declared_type64='unsigned int' name='primitiveIndex' type64='I'/>
<field declared_type64='unsigned int' name='instanceIndex' type64='I'/>
</struct>
<struct name='MPSIntersectionDistancePrimitiveIndexInstanceIndexCoordinates' type64='{_MPSIntersectionDistancePrimitiveIndexInstanceIndexCoordinates=&quot;distance&quot;f&quot;primitiveIndex&quot;I&quot;instanceIndex&quot;I&quot;coordinates&quot;}'>
<field declared_type64='float' name='distance' type64='f'/>
<field declared_type64='unsigned int' name='primitiveIndex' type64='I'/>
<field declared_type64='unsigned int' name='instanceIndex' type64='I'/>
<field declared_type64='vector_float2' name='coordinates' type64=''/>
</struct>
<struct name='MPSPackedFloat3' type64='{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}'>
<field declared_type64='union _MPSPackedFloat3::(anonymous at /Applications/Xcode.app/Contents/Developer/Platforms/iPhoneSimulator.platform/Developer/SDKs/iPhoneSimulator14.0.sdk/System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSRayIntersector.framework/Headers/MPSRayIntersectorTypes.h:27:5)' type64='(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])'/>
</struct>
<struct name='MPSRayOriginDirection' type64='{_MPSRayOriginDirection=&quot;origin&quot;&quot;direction&quot;}'>
<field declared_type64='vector_float3' name='origin' type64=''/>
<field declared_type64='vector_float3' name='direction' type64=''/>
</struct>
<struct name='MPSRayOriginMaskDirectionMaxDistance' type64='{_MPSRayOriginMaskDirectionMaxDistance=&quot;origin&quot;{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}&quot;mask&quot;I&quot;direction&quot;{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}&quot;maxDistance&quot;f}'>
<field declared_type64='MPSPackedFloat3' name='origin' type64='{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}'/>
<field declared_type64='unsigned int' name='mask' type64='I'/>
<field declared_type64='MPSPackedFloat3' name='direction' type64='{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}'/>
<field declared_type64='float' name='maxDistance' type64='f'/>
</struct>
<struct name='MPSRayOriginMinDistanceDirectionMaxDistance' type64='{_MPSRayOriginMinDistanceDirectionMaxDistance=&quot;origin&quot;{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}&quot;minDistance&quot;f&quot;direction&quot;{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}&quot;maxDistance&quot;f}'>
<field declared_type64='MPSPackedFloat3' name='origin' type64='{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}'/>
<field declared_type64='float' name='minDistance' type64='f'/>
<field declared_type64='MPSPackedFloat3' name='direction' type64='{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}'/>
<field declared_type64='float' name='maxDistance' type64='f'/>
</struct>
<struct name='MPSRayPackedOriginDirection' type64='{_MPSRayPackedOriginDirection=&quot;origin&quot;{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}&quot;direction&quot;{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}}'>
<field declared_type64='MPSPackedFloat3' name='origin' type64='{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}'/>
<field declared_type64='MPSPackedFloat3' name='direction' type64='{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}'/>
</struct>
<enum name='MPSAccelerationStructureStatusBuilt' value64='1'/>
<enum name='MPSAccelerationStructureStatusUnbuilt' value64='0'/>
<enum name='MPSAccelerationStructureUsageFrequentRebuild' value64='2'/>
<enum name='MPSAccelerationStructureUsageNone' value64='0'/>
<enum name='MPSAccelerationStructureUsagePreferCPUBuild' value64='8'/>
<enum name='MPSAccelerationStructureUsagePreferGPUBuild' value64='4'/>
<enum name='MPSAccelerationStructureUsageRefit' value64='1'/>
<enum name='MPSBoundingBoxIntersectionTestTypeAxisAligned' value64='1'/>
<enum name='MPSBoundingBoxIntersectionTestTypeDefault' value64='0'/>
<enum name='MPSBoundingBoxIntersectionTestTypeFast' value64='2'/>
<enum name='MPSIntersectionDataTypeDistance' value64='0'/>
<enum name='MPSIntersectionDataTypeDistancePrimitiveIndex' value64='1'/>
<enum name='MPSIntersectionDataTypeDistancePrimitiveIndexCoordinates' value64='2'/>
<enum name='MPSIntersectionDataTypeDistancePrimitiveIndexInstanceIndex' value64='3'/>
<enum name='MPSIntersectionDataTypeDistancePrimitiveIndexInstanceIndexCoordinates' value64='4'/>
<enum name='MPSIntersectionTypeAny' value64='1'/>
<enum name='MPSIntersectionTypeNearest' value64='0'/>
<enum name='MPSPolygonTypeQuadrilateral' value64='1'/>
<enum name='MPSPolygonTypeTriangle' value64='0'/>
<enum name='MPSRayDataTypeOriginDirection' value64='0'/>
<enum name='MPSRayDataTypeOriginMaskDirectionMaxDistance' value64='2'/>
<enum name='MPSRayDataTypeOriginMinDistanceDirectionMaxDistance' value64='1'/>
<enum name='MPSRayDataTypePackedOriginDirection' value64='3'/>
<enum name='MPSRayMaskOperatorAnd' value64='0'/>
<enum name='MPSRayMaskOperatorEqual' value64='10'/>
<enum name='MPSRayMaskOperatorGreaterThan' value64='8'/>
<enum name='MPSRayMaskOperatorGreaterThanOrEqualTo' value64='9'/>
<enum name='MPSRayMaskOperatorLessThan' value64='6'/>
<enum name='MPSRayMaskOperatorLessThanOrEqualTo' value64='7'/>
<enum name='MPSRayMaskOperatorNotAnd' value64='1'/>
<enum name='MPSRayMaskOperatorNotEqual' value64='11'/>
<enum name='MPSRayMaskOperatorNotOr' value64='3'/>
<enum name='MPSRayMaskOperatorNotXor' value64='5'/>
<enum name='MPSRayMaskOperatorOr' value64='2'/>
<enum name='MPSRayMaskOperatorXor' value64='4'/>
<enum name='MPSRayMaskOptionInstance' value64='2'/>
<enum name='MPSRayMaskOptionNone' value64='0'/>
<enum name='MPSRayMaskOptionPrimitive' value64='1'/>
<enum name='MPSTemporalWeightingAverage' value64='0'/>
<enum name='MPSTemporalWeightingExponentialMovingAverage' value64='1'/>
<enum name='MPSTransformTypeFloat4x4' value64='0'/>
<enum name='MPSTransformTypeIdentity' value64='1'/>
<enum name='MPSTriangleIntersectionTestTypeDefault' value64='0'/>
<enum name='MPSTriangleIntersectionTestTypeWatertight' value64='1'/>
<class name='MPSAccelerationStructure'>
<method selector='boundingBox'>
<retval declared_type64='MPSAxisAlignedBoundingBox' type64='{_MPSAxisAlignedBoundingBox=}'/>
</method>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='copyWithZone:group:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='MPSAccelerationStructureGroup * _Nonnull' index='1' name='group' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeRefitToCommandBuffer:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeWithCoder:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='coder' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='group'>
<retval declared_type64='MPSAccelerationStructureGroup * _Nonnull' type64='@'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithCoder:group:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='MPSAccelerationStructureGroup * _Nonnull' index='1' name='group' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithGroup:'>
<arg declared_type64='MPSAccelerationStructureGroup * _Nonnull' index='0' name='group' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='rebuild'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='rebuildWithCompletionHandler:'>
<arg declared_type64='MPSAccelerationStructureCompletionHandler _Nonnull' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='MPSAccelerationStructure * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUsage:'>
<arg declared_type64='MPSAccelerationStructureUsage' index='0' name='usage' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='status'>
<retval declared_type64='MPSAccelerationStructureStatus' type64='Q'/>
</method>
<method selector='usage'>
<retval declared_type64='MPSAccelerationStructureUsage' type64='Q'/>
</method>
</class>
<class name='MPSAccelerationStructureGroup'>
<method selector='device'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSInstanceAccelerationStructure'>
<method selector='accelerationStructures'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='instanceBuffer'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='instanceBufferOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='instanceCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='maskBuffer'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='maskBufferOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setAccelerationStructures:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='accelerationStructures' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setInstanceBuffer:'>
<arg declared_type64='id _Nullable' index='0' name='instanceBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setInstanceBufferOffset:'>
<arg declared_type64='NSUInteger' index='0' name='instanceBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setInstanceCount:'>
<arg declared_type64='NSUInteger' index='0' name='instanceCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaskBuffer:'>
<arg declared_type64='id _Nullable' index='0' name='maskBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaskBufferOffset:'>
<arg declared_type64='NSUInteger' index='0' name='maskBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTransformBuffer:'>
<arg declared_type64='id _Nullable' index='0' name='transformBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTransformBufferOffset:'>
<arg declared_type64='NSUInteger' index='0' name='transformBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTransformType:'>
<arg declared_type64='MPSTransformType' index='0' name='transformType' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='transformBuffer'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='transformBufferOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='transformType'>
<retval declared_type64='MPSTransformType' type64='Q'/>
</method>
</class>
<class name='MPSPolygonAccelerationStructure'>
<method selector='indexBuffer'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='indexBufferOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='indexType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='maskBuffer'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='maskBufferOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='polygonBuffers'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='polygonCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='polygonType'>
<retval declared_type64='MPSPolygonType' type64='Q'/>
</method>
<method selector='setIndexBuffer:'>
<arg declared_type64='id _Nullable' index='0' name='indexBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIndexBufferOffset:'>
<arg declared_type64='NSUInteger' index='0' name='indexBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIndexType:'>
<arg declared_type64='MPSDataType' index='0' name='indexType' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaskBuffer:'>
<arg declared_type64='id _Nullable' index='0' name='maskBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaskBufferOffset:'>
<arg declared_type64='NSUInteger' index='0' name='maskBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPolygonBuffers:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='polygonBuffers' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPolygonCount:'>
<arg declared_type64='NSUInteger' index='0' name='polygonCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPolygonType:'>
<arg declared_type64='MPSPolygonType' index='0' name='polygonType' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexBuffer:'>
<arg declared_type64='id _Nullable' index='0' name='vertexBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexBufferOffset:'>
<arg declared_type64='NSUInteger' index='0' name='vertexBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexStride:'>
<arg declared_type64='NSUInteger' index='0' name='vertexStride' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='vertexBuffer'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='vertexBufferOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='vertexStride'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSPolygonBuffer'>
<method selector='copyWithZone:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='indexBuffer'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='indexBufferOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='init'>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithCoder:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='maskBuffer'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='maskBufferOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='polygonBuffer'>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='polygonCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setIndexBuffer:'>
<arg declared_type64='id _Nullable' index='0' name='indexBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIndexBufferOffset:'>
<arg declared_type64='NSUInteger' index='0' name='indexBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaskBuffer:'>
<arg declared_type64='id _Nullable' index='0' name='maskBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaskBufferOffset:'>
<arg declared_type64='NSUInteger' index='0' name='maskBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPolygonCount:'>
<arg declared_type64='NSUInteger' index='0' name='polygonCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexBuffer:'>
<arg declared_type64='id _Nullable' index='0' name='vertexBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexBufferOffset:'>
<arg declared_type64='NSUInteger' index='0' name='vertexBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='vertexBuffer'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='vertexBufferOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSQuadrilateralAccelerationStructure'>
<method selector='quadrilateralCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setQuadrilateralCount:'>
<arg declared_type64='NSUInteger' index='0' name='quadrilateralCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSRayIntersector'>
<method selector='boundingBoxIntersectionTestType'>
<retval declared_type64='MPSBoundingBoxIntersectionTestType' type64='Q'/>
</method>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='cullMode'>
<retval declared_type64='MTLCullMode' type64='Q'/>
</method>
<method selector='encodeIntersectionToCommandBuffer:intersectionType:rayBuffer:rayBufferOffset:intersectionBuffer:intersectionBufferOffset:rayCount:accelerationStructure:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSIntersectionType' index='1' name='intersectionType' type64='Q'/>
<arg declared_type64='id _Nonnull' index='2' name='rayBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='rayBufferOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='4' name='intersectionBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='5' name='intersectionBufferOffset' type64='Q'/>
<arg declared_type64='NSUInteger' index='6' name='rayCount' type64='Q'/>
<arg declared_type64='MPSAccelerationStructure * _Nonnull' index='7' name='accelerationStructure' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeIntersectionToCommandBuffer:intersectionType:rayBuffer:rayBufferOffset:intersectionBuffer:intersectionBufferOffset:rayCountBuffer:rayCountBufferOffset:accelerationStructure:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSIntersectionType' index='1' name='intersectionType' type64='Q'/>
<arg declared_type64='id _Nonnull' index='2' name='rayBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='rayBufferOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='4' name='intersectionBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='5' name='intersectionBufferOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='6' name='rayCountBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='7' name='rayCountBufferOffset' type64='Q'/>
<arg declared_type64='MPSAccelerationStructure * _Nonnull' index='8' name='accelerationStructure' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeIntersectionToCommandBuffer:intersectionType:rayBuffer:rayBufferOffset:rayIndexBuffer:rayIndexBufferOffset:intersectionBuffer:intersectionBufferOffset:rayIndexCount:accelerationStructure:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSIntersectionType' index='1' name='intersectionType' type64='Q'/>
<arg declared_type64='id _Nonnull' index='2' name='rayBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='rayBufferOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='4' name='rayIndexBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='5' name='rayIndexBufferOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='6' name='intersectionBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='7' name='intersectionBufferOffset' type64='Q'/>
<arg declared_type64='NSUInteger' index='8' name='rayIndexCount' type64='Q'/>
<arg declared_type64='MPSAccelerationStructure * _Nonnull' index='9' name='accelerationStructure' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeIntersectionToCommandBuffer:intersectionType:rayBuffer:rayBufferOffset:rayIndexBuffer:rayIndexBufferOffset:intersectionBuffer:intersectionBufferOffset:rayIndexCountBuffer:rayIndexCountBufferOffset:accelerationStructure:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSIntersectionType' index='1' name='intersectionType' type64='Q'/>
<arg declared_type64='id _Nonnull' index='2' name='rayBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='rayBufferOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='4' name='rayIndexBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='5' name='rayIndexBufferOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='6' name='intersectionBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='7' name='intersectionBufferOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='8' name='rayIndexCountBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='9' name='rayIndexCountBufferOffset' type64='Q'/>
<arg declared_type64='MPSAccelerationStructure * _Nonnull' index='10' name='accelerationStructure' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeIntersectionToCommandBuffer:intersectionType:rayTexture:intersectionTexture:accelerationStructure:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSIntersectionType' index='1' name='intersectionType' type64='Q'/>
<arg declared_type64='id _Nonnull' index='2' name='rayTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='3' name='intersectionTexture' type64='@'/>
<arg declared_type64='MPSAccelerationStructure * _Nonnull' index='4' name='accelerationStructure' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeWithCoder:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='coder' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='frontFacingWinding'>
<retval declared_type64='MTLWinding' type64='Q'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='intersectionDataType'>
<retval declared_type64='MPSIntersectionDataType' type64='Q'/>
</method>
<method selector='intersectionStride'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='rayDataType'>
<retval declared_type64='MPSRayDataType' type64='Q'/>
</method>
<method selector='rayIndexDataType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='rayMask'>
<retval declared_type64='unsigned int' type64='I'/>
</method>
<method selector='rayMaskOperator'>
<retval declared_type64='MPSRayMaskOperator' type64='Q'/>
</method>
<method selector='rayMaskOptions'>
<retval declared_type64='MPSRayMaskOptions' type64='Q'/>
</method>
<method selector='rayStride'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='recommendedMinimumRayBatchSizeForRayCount:'>
<arg declared_type64='NSUInteger' index='0' name='rayCount' type64='Q'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setBoundingBoxIntersectionTestType:'>
<arg declared_type64='MPSBoundingBoxIntersectionTestType' index='0' name='boundingBoxIntersectionTestType' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCullMode:'>
<arg declared_type64='MTLCullMode' index='0' name='cullMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFrontFacingWinding:'>
<arg declared_type64='MTLWinding' index='0' name='frontFacingWinding' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIntersectionDataType:'>
<arg declared_type64='MPSIntersectionDataType' index='0' name='intersectionDataType' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIntersectionStride:'>
<arg declared_type64='NSUInteger' index='0' name='intersectionStride' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRayDataType:'>
<arg declared_type64='MPSRayDataType' index='0' name='rayDataType' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRayIndexDataType:'>
<arg declared_type64='MPSDataType' index='0' name='rayIndexDataType' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRayMask:'>
<arg declared_type64='unsigned int' index='0' name='rayMask' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRayMaskOperator:'>
<arg declared_type64='MPSRayMaskOperator' index='0' name='rayMaskOperator' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRayMaskOptions:'>
<arg declared_type64='MPSRayMaskOptions' index='0' name='rayMaskOptions' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRayStride:'>
<arg declared_type64='NSUInteger' index='0' name='rayStride' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTriangleIntersectionTestType:'>
<arg declared_type64='MPSTriangleIntersectionTestType' index='0' name='triangleIntersectionTestType' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='triangleIntersectionTestType'>
<retval declared_type64='MPSTriangleIntersectionTestType' type64='Q'/>
</method>
</class>
<class name='MPSSVGF'>
<method selector='bilateralFilterRadius'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='bilateralFilterSigma'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='channelCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='channelCount2'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='depthWeight'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='encodeBilateralFilterToCommandBuffer:stepDistance:sourceTexture:destinationTexture:depthNormalTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='stepDistance' type64='Q'/>
<arg declared_type64='id _Nonnull' index='2' name='sourceTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='3' name='destinationTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='4' name='depthNormalTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeBilateralFilterToCommandBuffer:stepDistance:sourceTexture:destinationTexture:sourceTexture2:destinationTexture2:depthNormalTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='stepDistance' type64='Q'/>
<arg declared_type64='id _Nonnull' index='2' name='sourceTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='3' name='destinationTexture' type64='@'/>
<arg declared_type64='id _Nullable' index='4' name='sourceTexture2' type64='@'/>
<arg declared_type64='id _Nullable' index='5' name='destinationTexture2' type64='@'/>
<arg declared_type64='id _Nonnull' index='6' name='depthNormalTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeReprojectionToCommandBuffer:sourceTexture:previousTexture:destinationTexture:previousLuminanceMomentsTexture:destinationLuminanceMomentsTexture:previousFrameCountTexture:destinationFrameCountTexture:motionVectorTexture:depthNormalTexture:previousDepthNormalTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='sourceTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='previousTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='3' name='destinationTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='4' name='previousLuminanceMomentsTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='5' name='destinationLuminanceMomentsTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='6' name='previousFrameCountTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='7' name='destinationFrameCountTexture' type64='@'/>
<arg declared_type64='id _Nullable' index='8' name='motionVectorTexture' type64='@'/>
<arg declared_type64='id _Nullable' index='9' name='depthNormalTexture' type64='@'/>
<arg declared_type64='id _Nullable' index='10' name='previousDepthNormalTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeReprojectionToCommandBuffer:sourceTexture:previousTexture:destinationTexture:previousLuminanceMomentsTexture:destinationLuminanceMomentsTexture:sourceTexture2:previousTexture2:destinationTexture2:previousLuminanceMomentsTexture2:destinationLuminanceMomentsTexture2:previousFrameCountTexture:destinationFrameCountTexture:motionVectorTexture:depthNormalTexture:previousDepthNormalTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='sourceTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='previousTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='3' name='destinationTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='4' name='previousLuminanceMomentsTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='5' name='destinationLuminanceMomentsTexture' type64='@'/>
<arg declared_type64='id _Nullable' index='6' name='sourceTexture2' type64='@'/>
<arg declared_type64='id _Nullable' index='7' name='previousTexture2' type64='@'/>
<arg declared_type64='id _Nullable' index='8' name='destinationTexture2' type64='@'/>
<arg declared_type64='id _Nullable' index='9' name='previousLuminanceMomentsTexture2' type64='@'/>
<arg declared_type64='id _Nullable' index='10' name='destinationLuminanceMomentsTexture2' type64='@'/>
<arg declared_type64='id _Nonnull' index='11' name='previousFrameCountTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='12' name='destinationFrameCountTexture' type64='@'/>
<arg declared_type64='id _Nullable' index='13' name='motionVectorTexture' type64='@'/>
<arg declared_type64='id _Nullable' index='14' name='depthNormalTexture' type64='@'/>
<arg declared_type64='id _Nullable' index='15' name='previousDepthNormalTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeVarianceEstimationToCommandBuffer:sourceTexture:luminanceMomentsTexture:destinationTexture:frameCountTexture:depthNormalTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='sourceTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='luminanceMomentsTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='3' name='destinationTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='4' name='frameCountTexture' type64='@'/>
<arg declared_type64='id _Nullable' index='5' name='depthNormalTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeVarianceEstimationToCommandBuffer:sourceTexture:luminanceMomentsTexture:destinationTexture:sourceTexture2:luminanceMomentsTexture2:destinationTexture2:frameCountTexture:depthNormalTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='sourceTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='luminanceMomentsTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='3' name='destinationTexture' type64='@'/>
<arg declared_type64='id _Nullable' index='4' name='sourceTexture2' type64='@'/>
<arg declared_type64='id _Nullable' index='5' name='luminanceMomentsTexture2' type64='@'/>
<arg declared_type64='id _Nullable' index='6' name='destinationTexture2' type64='@'/>
<arg declared_type64='id _Nonnull' index='7' name='frameCountTexture' type64='@'/>
<arg declared_type64='id _Nullable' index='8' name='depthNormalTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeWithCoder:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='coder' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='luminanceWeight'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='minimumFramesForVarianceEstimation'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='normalWeight'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='reprojectionThreshold'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='setBilateralFilterRadius:'>
<arg declared_type64='NSUInteger' index='0' name='bilateralFilterRadius' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBilateralFilterSigma:'>
<arg declared_type64='float' index='0' name='bilateralFilterSigma' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setChannelCount2:'>
<arg declared_type64='NSUInteger' index='0' name='channelCount2' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setChannelCount:'>
<arg declared_type64='NSUInteger' index='0' name='channelCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDepthWeight:'>
<arg declared_type64='float' index='0' name='depthWeight' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLuminanceWeight:'>
<arg declared_type64='float' index='0' name='luminanceWeight' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMinimumFramesForVarianceEstimation:'>
<arg declared_type64='NSUInteger' index='0' name='minimumFramesForVarianceEstimation' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNormalWeight:'>
<arg declared_type64='float' index='0' name='normalWeight' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setReprojectionThreshold:'>
<arg declared_type64='float' index='0' name='reprojectionThreshold' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTemporalReprojectionBlendFactor:'>
<arg declared_type64='float' index='0' name='temporalReprojectionBlendFactor' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTemporalWeighting:'>
<arg declared_type64='MPSTemporalWeighting' index='0' name='temporalWeighting' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVarianceEstimationRadius:'>
<arg declared_type64='NSUInteger' index='0' name='varianceEstimationRadius' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVarianceEstimationSigma:'>
<arg declared_type64='float' index='0' name='varianceEstimationSigma' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVariancePrefilterRadius:'>
<arg declared_type64='NSUInteger' index='0' name='variancePrefilterRadius' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVariancePrefilterSigma:'>
<arg declared_type64='float' index='0' name='variancePrefilterSigma' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='temporalReprojectionBlendFactor'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='temporalWeighting'>
<retval declared_type64='MPSTemporalWeighting' type64='Q'/>
</method>
<method selector='varianceEstimationRadius'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='varianceEstimationSigma'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='variancePrefilterRadius'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='variancePrefilterSigma'>
<retval declared_type64='float' type64='f'/>
</method>
</class>
<class name='MPSSVGFDefaultTextureAllocator'>
<method selector='allocatedTextureCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='device'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='reset'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='returnTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='texture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='textureWithPixelFormat:width:height:'>
<arg declared_type64='MTLPixelFormat' index='0' name='pixelFormat' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='width' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='height' type64='Q'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
</class>
<class name='MPSSVGFDenoiser'>
<method selector='bilateralFilterIterations'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='clearTemporalHistory'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:sourceTexture:destinationTexture:sourceTexture2:destinationTexture2:motionVectorTexture:depthNormalTexture:previousDepthNormalTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='sourceTexture' type64='@'/>
<arg declared_type64='id _Nonnull * _Nonnull' index='2' name='destinationTexture' type64='^@'/>
<arg declared_type64='id _Nullable' index='3' name='sourceTexture2' type64='@'/>
<arg declared_type64='id _Nonnull * _Nullable' index='4' name='destinationTexture2' type64='^@'/>
<arg declared_type64='id _Nullable' index='5' name='motionVectorTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='6' name='depthNormalTexture' type64='@'/>
<arg declared_type64='id _Nullable' index='7' name='previousDepthNormalTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:sourceTexture:motionVectorTexture:depthNormalTexture:previousDepthNormalTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='sourceTexture' type64='@'/>
<arg declared_type64='id _Nullable' index='2' name='motionVectorTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='3' name='depthNormalTexture' type64='@'/>
<arg declared_type64='id _Nullable' index='4' name='previousDepthNormalTexture' type64='@'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSVGF:textureAllocator:'>
<arg declared_type64='MPSSVGF * _Nonnull' index='0' name='svgf' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='textureAllocator' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='releaseTemporaryTextures'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBilateralFilterIterations:'>
<arg declared_type64='NSUInteger' index='0' name='bilateralFilterIterations' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='svgf'>
<retval declared_type64='MPSSVGF * _Nonnull' type64='@'/>
</method>
<method selector='textureAllocator'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSTemporalAA'>
<method selector='blendFactor'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceTexture:previousTexture:destinationTexture:motionVectorTexture:depthTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='sourceTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='previousTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='3' name='destinationTexture' type64='@'/>
<arg declared_type64='id _Nullable' index='4' name='motionVectorTexture' type64='@'/>
<arg declared_type64='id _Nullable' index='5' name='depthTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeWithCoder:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='coder' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setBlendFactor:'>
<arg declared_type64='float' index='0' name='blendFactor' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSTriangleAccelerationStructure'>
<method selector='setTriangleCount:'>
<arg declared_type64='NSUInteger' index='0' name='triangleCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='triangleCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='NSObject'>
<method selector='returnTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='texture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='textureWithPixelFormat:width:height:'>
<arg declared_type64='MTLPixelFormat' index='0' name='pixelFormat' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='width' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='height' type64='Q'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
</class>
<informal_protocol name='MPSSVGFTextureAllocator'>
<method selector='returnTexture:' type64='v24@0:8@16'>
<arg declared_type64='id _Nonnull' index='0' name='texture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='textureWithPixelFormat:width:height:' type64='@40@0:8Q16Q24Q32'>
<arg declared_type64='MTLPixelFormat' index='0' name='pixelFormat' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='width' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='height' type64='Q'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
</informal_protocol>
</signatures>
