<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='CFAllocatorContext' type64='{_CFAllocatorContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;allocate&quot;^?&quot;reallocate&quot;^?&quot;deallocate&quot;^?&quot;preferredSize&quot;^?}'>
<field declared_type64='CFIndex' name='version' type64='q'/>
<field declared_type64='void*' name='info' type64='^v'/>
<field declared_type64='CFAllocatorRetainCallBack' function_pointer='true' name='retain' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CFAllocatorReleaseCallBack' function_pointer='true' name='release' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CFAllocatorCopyDescriptionCallBack' function_pointer='true' name='copyDescription' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</field>
<field declared_type64='CFAllocatorAllocateCallBack' function_pointer='true' name='allocate' type64='^?'>
<arg declared_type64='CFIndex' type64='q'/>
<arg declared_type64='CFOptionFlags' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CFAllocatorReallocateCallBack' function_pointer='true' name='reallocate' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='CFIndex' type64='q'/>
<arg declared_type64='CFOptionFlags' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CFAllocatorDeallocateCallBack' function_pointer='true' name='deallocate' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CFAllocatorPreferredSizeCallBack' function_pointer='true' name='preferredSize' type64='^?'>
<arg declared_type64='CFIndex' type64='q'/>
<arg declared_type64='CFOptionFlags' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='CFIndex' type64='q'/>
</field>
</struct>
<struct name='CFArrayCallBacks' type64='{_CFArrayCallBacks=&quot;version&quot;q&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?}'>
<field declared_type64='CFIndex' name='version' type64='q'/>
<field declared_type64='CFArrayRetainCallBack' function_pointer='true' name='retain' type64='^?'>
<arg declared_type64='CFAllocatorRef' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CFArrayReleaseCallBack' function_pointer='true' name='release' type64='^?'>
<arg declared_type64='CFAllocatorRef' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CFArrayCopyDescriptionCallBack' function_pointer='true' name='copyDescription' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</field>
<field declared_type64='CFArrayEqualCallBack' function_pointer='true' name='equal' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='Boolean' type64='B'/>
</field>
</struct>
<struct name='CFBagCallBacks' type64='{_CFBagCallBacks=&quot;version&quot;q&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?}'>
<field declared_type64='CFIndex' name='version' type64='q'/>
<field declared_type64='CFBagRetainCallBack' function_pointer='true' name='retain' type64='^?'>
<arg declared_type64='CFAllocatorRef' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CFBagReleaseCallBack' function_pointer='true' name='release' type64='^?'>
<arg declared_type64='CFAllocatorRef' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CFBagCopyDescriptionCallBack' function_pointer='true' name='copyDescription' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</field>
<field declared_type64='CFBagEqualCallBack' function_pointer='true' name='equal' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='Boolean' type64='B'/>
</field>
<field declared_type64='CFBagHashCallBack' function_pointer='true' name='hash' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFHashCode' type64='Q'/>
</field>
</struct>
<struct name='CFBinaryHeapCallBacks' type64='{_CFBinaryHeapCallBacks=&quot;version&quot;q&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;compare&quot;^?}'>
<field declared_type64='CFIndex' name='version' type64='q'/>
<field const='true' declared_type64='void *(*)(CFAllocatorRef, void *)' function_pointer='true' name='retain' type64='^?'>
<arg declared_type64='CFAllocatorRef' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void (*)(CFAllocatorRef, void *)' function_pointer='true' name='release' type64='^?'>
<arg declared_type64='CFAllocatorRef' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CFStringRef (*)( void *)' function_pointer='true' name='copyDescription' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</field>
<field declared_type64='CFComparisonResult (*)( void *, void *, void *)' function_pointer='true' name='compare' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='CFComparisonResult' type64='q'/>
</field>
</struct>
<struct name='CFBinaryHeapCompareContext' type64='{_CFBinaryHeapCompareContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field declared_type64='CFIndex' name='version' type64='q'/>
<field declared_type64='void*' name='info' type64='^v'/>
<field const='true' declared_type64='void *(*)( void *)' function_pointer='true' name='retain' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void (*)( void *)' function_pointer='true' name='release' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CFStringRef (*)( void *)' function_pointer='true' name='copyDescription' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</field>
</struct>
<struct name='CFDictionaryKeyCallBacks' type64='{_CFDictionaryKeyCallBacks=&quot;version&quot;q&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?}'>
<field declared_type64='CFIndex' name='version' type64='q'/>
<field declared_type64='CFDictionaryRetainCallBack' function_pointer='true' name='retain' type64='^?'>
<arg declared_type64='CFAllocatorRef' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CFDictionaryReleaseCallBack' function_pointer='true' name='release' type64='^?'>
<arg declared_type64='CFAllocatorRef' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CFDictionaryCopyDescriptionCallBack' function_pointer='true' name='copyDescription' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</field>
<field declared_type64='CFDictionaryEqualCallBack' function_pointer='true' name='equal' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='Boolean' type64='B'/>
</field>
<field declared_type64='CFDictionaryHashCallBack' function_pointer='true' name='hash' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFHashCode' type64='Q'/>
</field>
</struct>
<struct name='CFDictionaryValueCallBacks' type64='{_CFDictionaryValueCallBacks=&quot;version&quot;q&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?}'>
<field declared_type64='CFIndex' name='version' type64='q'/>
<field declared_type64='CFDictionaryRetainCallBack' function_pointer='true' name='retain' type64='^?'>
<arg declared_type64='CFAllocatorRef' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CFDictionaryReleaseCallBack' function_pointer='true' name='release' type64='^?'>
<arg declared_type64='CFAllocatorRef' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CFDictionaryCopyDescriptionCallBack' function_pointer='true' name='copyDescription' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</field>
<field declared_type64='CFDictionaryEqualCallBack' function_pointer='true' name='equal' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='Boolean' type64='B'/>
</field>
</struct>
<struct name='CFFileDescriptorContext' type64='{_CFFileDescriptorContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field declared_type64='CFIndex' name='version' type64='q'/>
<field declared_type64='void*' name='info' type64='^v'/>
<field declared_type64='void *(*)(void *)' function_pointer='true' name='retain' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void (*)(void *)' function_pointer='true' name='release' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CFStringRef (*)(void *)' function_pointer='true' name='copyDescription' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</field>
</struct>
<struct name='CFGregorianDate' type64='{_CFGregorianDate=&quot;year&quot;i&quot;month&quot;c&quot;day&quot;c&quot;hour&quot;c&quot;minute&quot;c&quot;second&quot;d}'>
<field declared_type64='SInt32' name='year' type64='i'/>
<field declared_type64='SInt8' name='month' type64='c'/>
<field declared_type64='SInt8' name='day' type64='c'/>
<field declared_type64='SInt8' name='hour' type64='c'/>
<field declared_type64='SInt8' name='minute' type64='c'/>
<field declared_type64='double' name='second' type64='d'/>
</struct>
<struct name='CFGregorianUnits' type64='{_CFGregorianUnits=&quot;years&quot;i&quot;months&quot;i&quot;days&quot;i&quot;hours&quot;i&quot;minutes&quot;i&quot;seconds&quot;d}'>
<field declared_type64='SInt32' name='years' type64='i'/>
<field declared_type64='SInt32' name='months' type64='i'/>
<field declared_type64='SInt32' name='days' type64='i'/>
<field declared_type64='SInt32' name='hours' type64='i'/>
<field declared_type64='SInt32' name='minutes' type64='i'/>
<field declared_type64='double' name='seconds' type64='d'/>
</struct>
<struct name='CFMachPortContext' type64='{_CFMachPortContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field declared_type64='CFIndex' name='version' type64='q'/>
<field declared_type64='void*' name='info' type64='^v'/>
<field const='true' declared_type64='void *(*)( void *)' function_pointer='true' name='retain' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void (*)( void *)' function_pointer='true' name='release' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CFStringRef (*)( void *)' function_pointer='true' name='copyDescription' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</field>
</struct>
<struct name='CFMessagePortContext' type64='{_CFMessagePortContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field declared_type64='CFIndex' name='version' type64='q'/>
<field declared_type64='void*' name='info' type64='^v'/>
<field const='true' declared_type64='void *(*)( void *)' function_pointer='true' name='retain' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void (*)( void *)' function_pointer='true' name='release' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CFStringRef (*)( void *)' function_pointer='true' name='copyDescription' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</field>
</struct>
<struct name='CFRange' type64='{_CFRange=&quot;location&quot;q&quot;length&quot;q}'>
<field declared_type64='CFIndex' name='location' type64='q'/>
<field declared_type64='CFIndex' name='length' type64='q'/>
</struct>
<struct name='CFRunLoopObserverContext' type64='{_CFRunLoopObserverContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field declared_type64='CFIndex' name='version' type64='q'/>
<field declared_type64='void*' name='info' type64='^v'/>
<field const='true' declared_type64='void *(*)( void *)' function_pointer='true' name='retain' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void (*)( void *)' function_pointer='true' name='release' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CFStringRef (*)( void *)' function_pointer='true' name='copyDescription' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</field>
</struct>
<struct name='CFRunLoopSourceContext' type64='{_CFRunLoopSourceContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?&quot;schedule&quot;^?&quot;cancel&quot;^?&quot;perform&quot;^?}'>
<field declared_type64='CFIndex' name='version' type64='q'/>
<field declared_type64='void*' name='info' type64='^v'/>
<field const='true' declared_type64='void *(*)( void *)' function_pointer='true' name='retain' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void (*)( void *)' function_pointer='true' name='release' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CFStringRef (*)( void *)' function_pointer='true' name='copyDescription' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</field>
<field declared_type64='Boolean (*)( void *, void *)' function_pointer='true' name='equal' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='Boolean' type64='B'/>
</field>
<field declared_type64='CFHashCode (*)( void *)' function_pointer='true' name='hash' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFHashCode' type64='Q'/>
</field>
<field declared_type64='void (*)(void *, CFRunLoopRef, CFStringRef)' function_pointer='true' name='schedule' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='CFRunLoopRef' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFStringRef' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(void *, CFRunLoopRef, CFStringRef)' function_pointer='true' name='cancel' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='CFRunLoopRef' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFStringRef' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(void *)' function_pointer='true' name='perform' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
</struct>
<struct name='CFRunLoopSourceContext1' type64='{_CFRunLoopSourceContext1=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?&quot;getPort&quot;^?&quot;perform&quot;^?}'>
<field declared_type64='CFIndex' name='version' type64='q'/>
<field declared_type64='void*' name='info' type64='^v'/>
<field const='true' declared_type64='void *(*)( void *)' function_pointer='true' name='retain' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void (*)( void *)' function_pointer='true' name='release' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CFStringRef (*)( void *)' function_pointer='true' name='copyDescription' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</field>
<field declared_type64='Boolean (*)( void *, void *)' function_pointer='true' name='equal' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='Boolean' type64='B'/>
</field>
<field declared_type64='CFHashCode (*)( void *)' function_pointer='true' name='hash' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFHashCode' type64='Q'/>
</field>
<field declared_type64='mach_port_t (*)(void *)' function_pointer='true' name='getPort' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='mach_port_t' type64='I'/>
</field>
<field declared_type64='void *(*)(void *, CFIndex, CFAllocatorRef, void *)' function_pointer='true' name='perform' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='CFIndex' type64='q'/>
<arg declared_type64='CFAllocatorRef' type64='^{__CFAllocator=}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void*' type64='^v'/>
</field>
</struct>
<struct name='CFRunLoopTimerContext' type64='{_CFRunLoopTimerContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field declared_type64='CFIndex' name='version' type64='q'/>
<field declared_type64='void*' name='info' type64='^v'/>
<field const='true' declared_type64='void *(*)( void *)' function_pointer='true' name='retain' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void (*)( void *)' function_pointer='true' name='release' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CFStringRef (*)( void *)' function_pointer='true' name='copyDescription' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</field>
</struct>
<struct name='CFSetCallBacks' type64='{_CFSetCallBacks=&quot;version&quot;q&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?&quot;equal&quot;^?&quot;hash&quot;^?}'>
<field declared_type64='CFIndex' name='version' type64='q'/>
<field declared_type64='CFSetRetainCallBack' function_pointer='true' name='retain' type64='^?'>
<arg declared_type64='CFAllocatorRef' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CFSetReleaseCallBack' function_pointer='true' name='release' type64='^?'>
<arg declared_type64='CFAllocatorRef' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CFSetCopyDescriptionCallBack' function_pointer='true' name='copyDescription' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</field>
<field declared_type64='CFSetEqualCallBack' function_pointer='true' name='equal' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='Boolean' type64='B'/>
</field>
<field declared_type64='CFSetHashCallBack' function_pointer='true' name='hash' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFHashCode' type64='Q'/>
</field>
</struct>
<struct name='CFSocketContext' type64='{_CFSocketContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field declared_type64='CFIndex' name='version' type64='q'/>
<field declared_type64='void*' name='info' type64='^v'/>
<field const='true' declared_type64='void *(*)( void *)' function_pointer='true' name='retain' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void (*)( void *)' function_pointer='true' name='release' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CFStringRef (*)( void *)' function_pointer='true' name='copyDescription' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</field>
</struct>
<struct name='CFSocketSignature' type64='{_CFSocketSignature=&quot;protocolFamily&quot;i&quot;socketType&quot;i&quot;protocol&quot;i&quot;address&quot;^{__CFData}}'>
<field declared_type64='SInt32' name='protocolFamily' type64='i'/>
<field declared_type64='SInt32' name='socketType' type64='i'/>
<field declared_type64='SInt32' name='protocol' type64='i'/>
<field declared_type64='CFDataRef' name='address' type64='^{__CFData=}'/>
</struct>
<struct name='CFStreamClientContext' type64='{_CFStreamClientContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field declared_type64='CFIndex' name='version' type64='q'/>
<field declared_type64='void*' name='info' type64='^v'/>
<field declared_type64='void *(*)(void *)' function_pointer='true' name='retain' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void (*)(void *)' function_pointer='true' name='release' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CFStringRef (*)(void *)' function_pointer='true' name='copyDescription' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</field>
</struct>
<struct name='CFStreamError' type64='{_CFStreamError=&quot;domain&quot;q&quot;error&quot;i}'>
<field declared_type64='CFIndex' name='domain' type64='q'/>
<field declared_type64='SInt32' name='error' type64='i'/>
</struct>
<struct name='CFStringInlineBuffer' type64='{_CFStringInlineBuffer=&quot;buffer&quot;[64S]&quot;theString&quot;^{__CFString}&quot;directUniCharBuffer&quot;^S&quot;directCStringBuffer&quot;*&quot;rangeToBuffer&quot;{_CFRange=&quot;location&quot;q&quot;length&quot;q}&quot;bufferedRangeStart&quot;q&quot;bufferedRangeEnd&quot;q}'>
<field declared_type64='UniChar*' name='buffer' type64='[64S]'/>
<field declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<field const='true' declared_type64='UniChar*' name='directUniCharBuffer' type64='^S'/>
<field const='true' declared_type64='char*' name='directCStringBuffer' type64='*'/>
<field declared_type64='CFRange' name='rangeToBuffer' type64='{_CFRange=&quot;location&quot;q&quot;length&quot;q}'/>
<field declared_type64='CFIndex' name='bufferedRangeStart' type64='q'/>
<field declared_type64='CFIndex' name='bufferedRangeEnd' type64='q'/>
</struct>
<struct name='CFSwappedFloat32' type64='{_CFSwappedFloat32=&quot;v&quot;I}'>
<field declared_type64='uint32_t' name='v' type64='I'/>
</struct>
<struct name='CFSwappedFloat64' type64='{_CFSwappedFloat64=&quot;v&quot;Q}'>
<field declared_type64='uint64_t' name='v' type64='Q'/>
</struct>
<struct name='CFTreeContext' type64='{_CFTreeContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field declared_type64='CFIndex' name='version' type64='q'/>
<field declared_type64='void*' name='info' type64='^v'/>
<field declared_type64='CFTreeRetainCallBack' function_pointer='true' name='retain' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CFTreeReleaseCallBack' function_pointer='true' name='release' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CFTreeCopyDescriptionCallBack' function_pointer='true' name='copyDescription' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</field>
</struct>
<struct name='CFUUIDBytes' type64='{_CFUUIDBytes=&quot;byte0&quot;C&quot;byte1&quot;C&quot;byte2&quot;C&quot;byte3&quot;C&quot;byte4&quot;C&quot;byte5&quot;C&quot;byte6&quot;C&quot;byte7&quot;C&quot;byte8&quot;C&quot;byte9&quot;C&quot;byte10&quot;C&quot;byte11&quot;C&quot;byte12&quot;C&quot;byte13&quot;C&quot;byte14&quot;C&quot;byte15&quot;C}'>
<field declared_type64='UInt8' name='byte0' type64='C'/>
<field declared_type64='UInt8' name='byte1' type64='C'/>
<field declared_type64='UInt8' name='byte2' type64='C'/>
<field declared_type64='UInt8' name='byte3' type64='C'/>
<field declared_type64='UInt8' name='byte4' type64='C'/>
<field declared_type64='UInt8' name='byte5' type64='C'/>
<field declared_type64='UInt8' name='byte6' type64='C'/>
<field declared_type64='UInt8' name='byte7' type64='C'/>
<field declared_type64='UInt8' name='byte8' type64='C'/>
<field declared_type64='UInt8' name='byte9' type64='C'/>
<field declared_type64='UInt8' name='byte10' type64='C'/>
<field declared_type64='UInt8' name='byte11' type64='C'/>
<field declared_type64='UInt8' name='byte12' type64='C'/>
<field declared_type64='UInt8' name='byte13' type64='C'/>
<field declared_type64='UInt8' name='byte14' type64='C'/>
<field declared_type64='UInt8' name='byte15' type64='C'/>
</struct>
<struct name='IUnknownVTbl' type64='{IUnknownVTbl=&quot;_reserved&quot;^v&quot;QueryInterface&quot;^?&quot;AddRef&quot;^?&quot;Release&quot;^?}'>
<field declared_type64='void*' name='_reserved' type64='^v'/>
<field declared_type64='HRESULT (*)(void *, REFIID, LPVOID *)' function_pointer='true' name='QueryInterface' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='REFIID' type64='{_REFIID=CCCCCCCCCCCCCCCC}'/>
<arg declared_type64='LPVOID*' type64='^^v'/>
<retval declared_type64='HRESULT' type64='i'/>
</field>
<field declared_type64='ULONG (*)(void *)' function_pointer='true' name='AddRef' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='ULONG' type64='I'/>
</field>
<field declared_type64='ULONG (*)(void *)' function_pointer='true' name='Release' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='ULONG' type64='I'/>
</field>
</struct>
<struct name='REFIID' type64='{_REFIID=&quot;byte0&quot;C&quot;byte1&quot;C&quot;byte2&quot;C&quot;byte3&quot;C&quot;byte4&quot;C&quot;byte5&quot;C&quot;byte6&quot;C&quot;byte7&quot;C&quot;byte8&quot;C&quot;byte9&quot;C&quot;byte10&quot;C&quot;byte11&quot;C&quot;byte12&quot;C&quot;byte13&quot;C&quot;byte14&quot;C&quot;byte15&quot;C}'>
<field declared_type64='UInt8' name='byte0' type64='C'/>
<field declared_type64='UInt8' name='byte1' type64='C'/>
<field declared_type64='UInt8' name='byte2' type64='C'/>
<field declared_type64='UInt8' name='byte3' type64='C'/>
<field declared_type64='UInt8' name='byte4' type64='C'/>
<field declared_type64='UInt8' name='byte5' type64='C'/>
<field declared_type64='UInt8' name='byte6' type64='C'/>
<field declared_type64='UInt8' name='byte7' type64='C'/>
<field declared_type64='UInt8' name='byte8' type64='C'/>
<field declared_type64='UInt8' name='byte9' type64='C'/>
<field declared_type64='UInt8' name='byte10' type64='C'/>
<field declared_type64='UInt8' name='byte11' type64='C'/>
<field declared_type64='UInt8' name='byte12' type64='C'/>
<field declared_type64='UInt8' name='byte13' type64='C'/>
<field declared_type64='UInt8' name='byte14' type64='C'/>
<field declared_type64='UInt8' name='byte15' type64='C'/>
</struct>
<cftype gettypeid_func='CFAllocatorGetTypeID' name='CFAllocatorRef' tollfree='__NSCFType' type64='^{__CFAllocator=}'/>
<cftype gettypeid_func='CFArrayGetTypeID' name='CFArrayRef' tollfree='__NSCFArray' type64='^{__CFArray=}'/>
<cftype gettypeid_func='CFAttributedStringGetTypeID' name='CFAttributedStringRef' tollfree='__NSCFAttributedString' type64='^{__CFAttributedString=}'/>
<cftype gettypeid_func='CFBagGetTypeID' name='CFBagRef' tollfree='__NSCFType' type64='^{__CFBag=}'/>
<cftype gettypeid_func='CFBinaryHeapGetTypeID' name='CFBinaryHeapRef' tollfree='__NSCFType' type64='^{__CFBinaryHeap=}'/>
<cftype gettypeid_func='CFBitVectorGetTypeID' name='CFBitVectorRef' tollfree='__NSCFType' type64='^{__CFBitVector=}'/>
<cftype gettypeid_func='CFBooleanGetTypeID' name='CFBooleanRef' tollfree='__NSCFBoolean' type64='^{__CFBoolean=}'/>
<cftype gettypeid_func='CFBundleGetTypeID' name='CFBundleRef' tollfree='__NSCFType' type64='^{__CFBundle=}'/>
<cftype gettypeid_func='CFCalendarGetTypeID' name='CFCalendarRef' tollfree='__NSCFCalendar' type64='^{__CFCalendar=}'/>
<cftype gettypeid_func='CFCharacterSetGetTypeID' name='CFCharacterSetRef' tollfree='__NSCFCharacterSet' type64='^{__CFCharacterSet=}'/>
<cftype gettypeid_func='CFDataGetTypeID' name='CFDataRef' tollfree='__NSCFData' type64='^{__CFData=}'/>
<cftype gettypeid_func='CFDateFormatterGetTypeID' name='CFDateFormatterRef' tollfree='__NSCFType' type64='^{__CFDateFormatter=}'/>
<cftype gettypeid_func='CFDateGetTypeID' name='CFDateRef' tollfree='__NSCFType' type64='^{__CFDate=}'/>
<cftype gettypeid_func='CFDictionaryGetTypeID' name='CFDictionaryRef' tollfree='__NSCFDictionary' type64='^{__CFDictionary=}'/>
<cftype gettypeid_func='CFErrorGetTypeID' name='CFErrorRef' tollfree='__NSCFError' type64='^{__CFError=}'/>
<cftype gettypeid_func='CFFileDescriptorGetTypeID' name='CFFileDescriptorRef' tollfree='__NSCFType' type64='^{__CFFileDescriptor=}'/>
<cftype gettypeid_func='CFFileSecurityGetTypeID' name='CFFileSecurityRef' tollfree='__NSCFType' type64='^{__CFFileSecurity=}'/>
<cftype gettypeid_func='CFLocaleGetTypeID' name='CFLocaleRef' tollfree='__NSCFLocale' type64='^{__CFLocale=}'/>
<cftype gettypeid_func='CFMachPortGetTypeID' name='CFMachPortRef' tollfree='NSMachPort' type64='^{__CFMachPort=}'/>
<cftype gettypeid_func='CFMessagePortGetTypeID' name='CFMessagePortRef' tollfree='__NSCFType' type64='^{__CFMessagePort=}'/>
<cftype gettypeid_func='CFArrayGetTypeID' name='CFMutableArrayRef' tollfree='__NSCFArray' type64='^{__CFArray=}'/>
<cftype gettypeid_func='CFAttributedStringGetTypeID' name='CFMutableAttributedStringRef' tollfree='__NSCFAttributedString' type64='^{__CFAttributedString=}'/>
<cftype gettypeid_func='CFBagGetTypeID' name='CFMutableBagRef' tollfree='__NSCFType' type64='^{__CFBag=}'/>
<cftype gettypeid_func='CFBitVectorGetTypeID' name='CFMutableBitVectorRef' tollfree='__NSCFType' type64='^{__CFBitVector=}'/>
<cftype gettypeid_func='CFCharacterSetGetTypeID' name='CFMutableCharacterSetRef' tollfree='__NSCFCharacterSet' type64='^{__CFCharacterSet=}'/>
<cftype gettypeid_func='CFDataGetTypeID' name='CFMutableDataRef' tollfree='__NSCFData' type64='^{__CFData=}'/>
<cftype gettypeid_func='CFDictionaryGetTypeID' name='CFMutableDictionaryRef' tollfree='__NSCFDictionary' type64='^{__CFDictionary=}'/>
<cftype gettypeid_func='CFSetGetTypeID' name='CFMutableSetRef' tollfree='__NSCFSet' type64='^{__CFSet=}'/>
<cftype gettypeid_func='CFStringGetTypeID' name='CFMutableStringRef' tollfree='__NSCFString' type64='^{__CFString=}'/>
<cftype gettypeid_func='CFNotificationCenterGetTypeID' name='CFNotificationCenterRef' tollfree='__NSCFType' type64='^{__CFNotificationCenter=}'/>
<cftype gettypeid_func='CFNullGetTypeID' name='CFNullRef' tollfree='NSNull' type64='^{__CFNull=}'/>
<cftype gettypeid_func='CFNumberFormatterGetTypeID' name='CFNumberFormatterRef' tollfree='__NSCFType' type64='^{__CFNumberFormatter=}'/>
<cftype gettypeid_func='CFNumberGetTypeID' name='CFNumberRef' tollfree='__NSCFNumber' type64='^{__CFNumber=}'/>
<cftype gettypeid_func='CFPlugInInstanceGetTypeID' name='CFPlugInInstanceRef' tollfree='__NSCFType' type64='^{__CFPlugInInstance=}'/>
<cftype gettypeid_func='CFPlugInGetTypeID' name='CFPlugInRef' tollfree='__NSCFType' type64='^{__CFBundle=}'/>
<cftype gettypeid_func='CFReadStreamGetTypeID' name='CFReadStreamRef' tollfree='__NSCFInputStream' type64='^{__CFReadStream=}'/>
<cftype gettypeid_func='CFRunLoopObserverGetTypeID' name='CFRunLoopObserverRef' tollfree='__NSCFType' type64='^{__CFRunLoopObserver=}'/>
<cftype gettypeid_func='CFRunLoopGetTypeID' name='CFRunLoopRef' tollfree='__NSCFType' type64='^{__CFRunLoop=}'/>
<cftype gettypeid_func='CFRunLoopSourceGetTypeID' name='CFRunLoopSourceRef' tollfree='__NSCFType' type64='^{__CFRunLoopSource=}'/>
<cftype gettypeid_func='CFRunLoopTimerGetTypeID' name='CFRunLoopTimerRef' tollfree='__NSCFTimer' type64='^{__CFRunLoopTimer=}'/>
<cftype gettypeid_func='CFSetGetTypeID' name='CFSetRef' tollfree='__NSCFSet' type64='^{__CFSet=}'/>
<cftype gettypeid_func='CFSocketGetTypeID' name='CFSocketRef' tollfree='__NSCFType' type64='^{__CFSocket=}'/>
<cftype gettypeid_func='CFStringGetTypeID' name='CFStringRef' tollfree='__NSCFString' type64='^{__CFString=}'/>
<cftype gettypeid_func='CFStringTokenizerGetTypeID' name='CFStringTokenizerRef' tollfree='__NSCFType' type64='^{__CFStringTokenizer=}'/>
<cftype gettypeid_func='CFTimeZoneGetTypeID' name='CFTimeZoneRef' tollfree='__NSCFType' type64='^{__CFTimeZone=}'/>
<cftype gettypeid_func='CFTreeGetTypeID' name='CFTreeRef' tollfree='__NSCFType' type64='^{__CFTree=}'/>
<cftype gettypeid_func='CFURLEnumeratorGetTypeID' name='CFURLEnumeratorRef' tollfree='__NSCFType' type64='^{__CFURLEnumerator=}'/>
<cftype gettypeid_func='CFURLGetTypeID' name='CFURLRef' tollfree='NSURL' type64='^{__CFURL=}'/>
<cftype gettypeid_func='CFUUIDGetTypeID' name='CFUUIDRef' tollfree='__NSCFType' type64='^{__CFUUID=}'/>
<cftype gettypeid_func='CFWriteStreamGetTypeID' name='CFWriteStreamRef' tollfree='__NSCFOutputStream' type64='^{__CFWriteStream=}'/>
<cftype name='CFTypeRef' type64='^v'/>
<constant const='true' declared_type64='CFTimeInterval' name='kCFAbsoluteTimeIntervalSince1904' type64='d'/>
<constant const='true' declared_type64='CFTimeInterval' name='kCFAbsoluteTimeIntervalSince1970' type64='d'/>
<constant const='true' declared_type64='CFAllocatorRef' name='kCFAllocatorDefault' type64='^{__CFAllocator=}'/>
<constant const='true' declared_type64='CFAllocatorRef' name='kCFAllocatorMalloc' type64='^{__CFAllocator=}'/>
<constant const='true' declared_type64='CFAllocatorRef' name='kCFAllocatorMallocZone' type64='^{__CFAllocator=}'/>
<constant const='true' declared_type64='CFAllocatorRef' name='kCFAllocatorNull' type64='^{__CFAllocator=}'/>
<constant const='true' declared_type64='CFAllocatorRef' name='kCFAllocatorSystemDefault' type64='^{__CFAllocator=}'/>
<constant const='true' declared_type64='CFAllocatorRef' name='kCFAllocatorUseContext' type64='^{__CFAllocator=}'/>
<constant const='true' declared_type64='CFBooleanRef' name='kCFBooleanFalse' type64='^{__CFBoolean=}'/>
<constant const='true' declared_type64='CFBooleanRef' name='kCFBooleanTrue' type64='^{__CFBoolean=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFBuddhistCalendar' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFBundleDevelopmentRegionKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFBundleExecutableKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFBundleIdentifierKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFBundleInfoDictionaryVersionKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFBundleLocalizationsKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFBundleNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFBundleVersionKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFChineseCalendar' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFBagCallBacks' name='kCFCopyStringBagCallBacks' type64='{_CFBagCallBacks=q^?^?^?^?^?}'/>
<constant const='true' declared_type64='CFDictionaryKeyCallBacks' name='kCFCopyStringDictionaryKeyCallBacks' type64='{_CFDictionaryKeyCallBacks=q^?^?^?^?^?}'/>
<constant const='true' declared_type64='CFSetCallBacks' name='kCFCopyStringSetCallBacks' type64='{_CFSetCallBacks=q^?^?^?^?^?}'/>
<constant declared_type64='double' name='kCFCoreFoundationVersionNumber' type64='d'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterAMSymbol' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterCalendar' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterCalendarName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterDefaultDate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterDefaultFormat' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterDoesRelativeDateFormattingKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterEraSymbols' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterGregorianStartDate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterIsLenient' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterLongEraSymbols' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterMonthSymbols' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterPMSymbol' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterQuarterSymbols' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterShortMonthSymbols' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterShortQuarterSymbols' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterShortStandaloneMonthSymbols' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterShortStandaloneQuarterSymbols' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterShortStandaloneWeekdaySymbols' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterShortWeekdaySymbols' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterStandaloneMonthSymbols' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterStandaloneQuarterSymbols' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterStandaloneWeekdaySymbols' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterTimeZone' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterTwoDigitStartDate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterVeryShortMonthSymbols' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterVeryShortStandaloneMonthSymbols' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterVeryShortStandaloneWeekdaySymbols' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterVeryShortWeekdaySymbols' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFDateFormatterWeekdaySymbols' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFErrorDescriptionKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFErrorDomainCocoa' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFErrorDomainMach' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFErrorDomainOSStatus' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFErrorDomainPOSIX' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFErrorFilePathKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFErrorLocalizedDescriptionKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFErrorLocalizedFailureReasonKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFErrorLocalizedRecoverySuggestionKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFErrorURLKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFErrorUnderlyingErrorKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFGregorianCalendar' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFHebrewCalendar' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFISO8601Calendar' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFIndianCalendar' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFIslamicCalendar' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFIslamicCivilCalendar' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFIslamicTabularCalendar' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFIslamicUmmAlQuraCalendar' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFJapaneseCalendar' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleAlternateQuotationBeginDelimiterKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleAlternateQuotationEndDelimiterKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleCalendar' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleCalendarIdentifier' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleCollationIdentifier' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleCollatorIdentifier' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleCountryCode' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleCurrencyCode' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleCurrencySymbol' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleCurrentLocaleDidChangeNotification' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleDecimalSeparator' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleExemplarCharacterSet' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleGroupingSeparator' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleIdentifier' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleLanguageCode' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleMeasurementSystem' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleQuotationBeginDelimiterKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleQuotationEndDelimiterKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleScriptCode' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleUsesMetricSystem' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFLocaleVariantCode' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFIndex' name='kCFNotFound' type64='q'/>
<constant const='true' declared_type64='CFNullRef' name='kCFNull' type64='^{__CFNull=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterAlwaysShowDecimalSeparator' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterCurrencyCode' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterCurrencyDecimalSeparator' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterCurrencyGroupingSeparator' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterCurrencySymbol' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterDecimalSeparator' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterDefaultFormat' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterExponentSymbol' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterFormatWidth' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterGroupingSeparator' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterGroupingSize' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterInfinitySymbol' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterInternationalCurrencySymbol' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterIsLenient' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterMaxFractionDigits' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterMaxIntegerDigits' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterMaxSignificantDigits' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterMinFractionDigits' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterMinIntegerDigits' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterMinSignificantDigits' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterMinusSign' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterMultiplier' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterNaNSymbol' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterNegativePrefix' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterNegativeSuffix' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterPaddingCharacter' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterPaddingPosition' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterPerMillSymbol' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterPercentSymbol' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterPlusSign' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterPositivePrefix' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterPositiveSuffix' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterRoundingIncrement' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterRoundingMode' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterSecondaryGroupingSize' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterUseGroupingSeparator' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterUseSignificantDigits' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFNumberFormatterZeroSymbol' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFNumberRef' name='kCFNumberNaN' type64='^{__CFNumber=}'/>
<constant const='true' declared_type64='CFNumberRef' name='kCFNumberNegativeInfinity' type64='^{__CFNumber=}'/>
<constant const='true' declared_type64='CFNumberRef' name='kCFNumberPositiveInfinity' type64='^{__CFNumber=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFPersianCalendar' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFPlugInDynamicRegisterFunctionKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFPlugInDynamicRegistrationKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFPlugInFactoriesKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFPlugInTypesKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFPlugInUnloadFunctionKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFPreferencesAnyApplication' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFPreferencesAnyHost' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFPreferencesAnyUser' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFPreferencesCurrentApplication' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFPreferencesCurrentHost' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFPreferencesCurrentUser' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFRepublicOfChinaCalendar' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFRunLoopCommonModes' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFRunLoopDefaultMode' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFSocketCommandKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFSocketErrorKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFSocketNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFSocketRegisterCommand' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFSocketResultKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFSocketRetrieveCommand' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFSocketValueKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStreamPropertyAppendToFile' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStreamPropertyDataWritten' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStreamPropertyFileCurrentOffset' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStreamPropertySocketNativeHandle' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStreamPropertySocketRemoteHostName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStreamPropertySocketRemotePortNumber' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFBinaryHeapCallBacks' name='kCFStringBinaryHeapCallBacks' type64='{_CFBinaryHeapCallBacks=q^?^?^?^?}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStringTransformFullwidthHalfwidth' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStringTransformHiraganaKatakana' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStringTransformLatinArabic' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStringTransformLatinCyrillic' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStringTransformLatinGreek' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStringTransformLatinHangul' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStringTransformLatinHebrew' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStringTransformLatinHiragana' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStringTransformLatinKatakana' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStringTransformLatinThai' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStringTransformMandarinLatin' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStringTransformStripCombiningMarks' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStringTransformStripDiacritics' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStringTransformToLatin' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStringTransformToUnicodeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFStringTransformToXMLHex' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFTimeZoneSystemTimeZoneDidChangeNotification' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFArrayCallBacks' name='kCFTypeArrayCallBacks' type64='{_CFArrayCallBacks=q^?^?^?^?}'/>
<constant const='true' declared_type64='CFBagCallBacks' name='kCFTypeBagCallBacks' type64='{_CFBagCallBacks=q^?^?^?^?^?}'/>
<constant const='true' declared_type64='CFDictionaryKeyCallBacks' name='kCFTypeDictionaryKeyCallBacks' type64='{_CFDictionaryKeyCallBacks=q^?^?^?^?^?}'/>
<constant const='true' declared_type64='CFDictionaryValueCallBacks' name='kCFTypeDictionaryValueCallBacks' type64='{_CFDictionaryValueCallBacks=q^?^?^?^?}'/>
<constant const='true' declared_type64='CFSetCallBacks' name='kCFTypeSetCallBacks' type64='{_CFSetCallBacks=q^?^?^?^?^?}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLAddedToDirectoryDateKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLAttributeModificationDateKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLContentAccessDateKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLContentModificationDateKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLCreationDateKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLCustomIconKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLDocumentIdentifierKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLEffectiveIconKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileAllocatedSizeKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileDirectoryContents' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileExists' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileLastModificationTime' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileLength' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileOwnerID' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFilePOSIXMode' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileProtectionComplete' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileProtectionCompleteUnlessOpen' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileProtectionCompleteUntilFirstUserAuthentication' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileProtectionKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileProtectionNone' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileResourceIdentifierKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileResourceTypeBlockSpecial' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileResourceTypeCharacterSpecial' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileResourceTypeDirectory' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileResourceTypeKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileResourceTypeNamedPipe' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileResourceTypeRegular' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileResourceTypeSocket' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileResourceTypeSymbolicLink' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileResourceTypeUnknown' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileSecurityKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLFileSizeKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLGenerationIdentifierKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLHTTPStatusCode' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLHTTPStatusLine' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLHasHiddenExtensionKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLIsAliasFileKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLIsApplicationKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLIsDirectoryKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLIsExcludedFromBackupKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLIsExecutableKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLIsHiddenKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLIsMountTriggerKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLIsPackageKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLIsReadableKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLIsRegularFileKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLIsSymbolicLinkKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLIsSystemImmutableKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLIsUbiquitousItemKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLIsUserImmutableKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLIsVolumeKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLIsWritableKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLKeysOfUnsetValuesKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLLabelColorKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLLabelNumberKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLLinkCountKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLLocalizedLabelKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLLocalizedNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLLocalizedTypeDescriptionKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLParentDirectoryURLKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLPathKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLPreferredIOBlockSizeKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLTotalFileAllocatedSizeKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLTotalFileSizeKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLTypeIdentifierKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLUbiquitousItemDownloadingErrorKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLUbiquitousItemDownloadingStatusCurrent' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLUbiquitousItemDownloadingStatusDownloaded' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLUbiquitousItemDownloadingStatusKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLUbiquitousItemDownloadingStatusNotDownloaded' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLUbiquitousItemHasUnresolvedConflictsKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLUbiquitousItemIsDownloadedKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLUbiquitousItemIsDownloadingKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLUbiquitousItemIsUploadedKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLUbiquitousItemIsUploadingKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLUbiquitousItemPercentDownloadedKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLUbiquitousItemPercentUploadedKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLUbiquitousItemUploadingErrorKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeAvailableCapacityKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeCreationDateKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeIdentifierKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeIsAutomountedKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeIsBrowsableKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeIsEjectableKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeIsInternalKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeIsJournalingKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeIsLocalKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeIsReadOnlyKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeIsRemovableKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeLocalizedFormatDescriptionKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeLocalizedNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeMaximumFileSizeKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeNameKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeResourceCountKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeSupportsAdvisoryFileLockingKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeSupportsCasePreservedNamesKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeSupportsCaseSensitiveNamesKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeSupportsExtendedSecurityKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeSupportsHardLinksKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeSupportsJournalingKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeSupportsPersistentIDsKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeSupportsRenamingKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeSupportsRootDirectoryDatesKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeSupportsSparseFilesKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeSupportsSymbolicLinksKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeSupportsVolumeSizesKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeSupportsZeroRunsKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeTotalCapacityKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeURLForRemountingKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeURLKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef' name='kCFURLVolumeUUIDStringKey' type64='^{__CFString=}'/>
<enum name='CFByteOrderBigEndian' value64='2'/>
<enum name='CFByteOrderLittleEndian' value64='1'/>
<enum name='CFByteOrderUnknown' value64='0'/>
<enum name='CFNotificationSuspensionBehaviorCoalesce' value64='2'/>
<enum name='CFNotificationSuspensionBehaviorDeliverImmediately' value64='4'/>
<enum name='CFNotificationSuspensionBehaviorDrop' value64='1'/>
<enum name='CFNotificationSuspensionBehaviorHold' value64='3'/>
<enum name='CF_USE_OSBYTEORDER_H' value64='1'/>
<enum name='COREFOUNDATION_CFPLUGINCOM_SEPARATE' value64='1'/>
<enum name='E_ABORT' value64='-2147483641'/>
<enum name='E_ACCESSDENIED' value64='-2147483639'/>
<enum name='E_FAIL' value64='-2147483640'/>
<enum name='E_HANDLE' value64='-2147483642'/>
<enum name='E_INVALIDARG' value64='-2147483645'/>
<enum name='E_NOINTERFACE' value64='-2147483644'/>
<enum name='E_NOTIMPL' value64='-2147483647'/>
<enum name='E_OUTOFMEMORY' value64='-2147483646'/>
<enum name='E_POINTER' value64='-2147483643'/>
<enum name='E_UNEXPECTED' value64='-2147418113'/>
<enum name='FALSE' value64='0'/>
<enum name='SEVERITY_ERROR' value64='1'/>
<enum name='SEVERITY_SUCCESS' value64='0'/>
<enum name='S_FALSE' value64='1'/>
<enum name='S_OK' value64='0'/>
<enum name='TRUE' value64='1'/>
<enum name='kCFBookmarkResolutionWithoutMountingMask' value64='512'/>
<enum name='kCFBookmarkResolutionWithoutUIMask' value64='256'/>
<enum name='kCFBundleExecutableArchitectureI386' value64='7'/>
<enum name='kCFBundleExecutableArchitecturePPC' value64='18'/>
<enum name='kCFBundleExecutableArchitecturePPC64' value64='16777234'/>
<enum name='kCFBundleExecutableArchitectureX86_64' value64='16777223'/>
<enum name='kCFCalendarComponentsWrap' value64='1'/>
<enum name='kCFCalendarUnitDay' value64='16'/>
<enum name='kCFCalendarUnitEra' value64='2'/>
<enum name='kCFCalendarUnitHour' value64='32'/>
<enum name='kCFCalendarUnitMinute' value64='64'/>
<enum name='kCFCalendarUnitMonth' value64='8'/>
<enum name='kCFCalendarUnitQuarter' value64='2048'/>
<enum name='kCFCalendarUnitSecond' value64='128'/>
<enum name='kCFCalendarUnitWeek' value64='256'/>
<enum name='kCFCalendarUnitWeekOfMonth' value64='4096'/>
<enum name='kCFCalendarUnitWeekOfYear' value64='8192'/>
<enum name='kCFCalendarUnitWeekday' value64='512'/>
<enum name='kCFCalendarUnitWeekdayOrdinal' value64='1024'/>
<enum name='kCFCalendarUnitYear' value64='4'/>
<enum name='kCFCalendarUnitYearForWeekOfYear' value64='16384'/>
<enum name='kCFCharacterSetAlphaNumeric' value64='10'/>
<enum name='kCFCharacterSetCapitalizedLetter' value64='13'/>
<enum name='kCFCharacterSetControl' value64='1'/>
<enum name='kCFCharacterSetDecimalDigit' value64='4'/>
<enum name='kCFCharacterSetDecomposable' value64='9'/>
<enum name='kCFCharacterSetIllegal' value64='12'/>
<enum name='kCFCharacterSetLetter' value64='5'/>
<enum name='kCFCharacterSetLowercaseLetter' value64='6'/>
<enum name='kCFCharacterSetNewline' value64='15'/>
<enum name='kCFCharacterSetNonBase' value64='8'/>
<enum name='kCFCharacterSetPunctuation' value64='11'/>
<enum name='kCFCharacterSetSymbol' value64='14'/>
<enum name='kCFCharacterSetUppercaseLetter' value64='7'/>
<enum name='kCFCharacterSetWhitespace' value64='2'/>
<enum name='kCFCharacterSetWhitespaceAndNewline' value64='3'/>
<enum name='kCFCompareAnchored' value64='8'/>
<enum name='kCFCompareBackwards' value64='4'/>
<enum name='kCFCompareCaseInsensitive' value64='1'/>
<enum name='kCFCompareDiacriticInsensitive' value64='128'/>
<enum name='kCFCompareEqualTo' value64='0'/>
<enum name='kCFCompareForcedOrdering' value64='512'/>
<enum name='kCFCompareGreaterThan' value64='1'/>
<enum name='kCFCompareLessThan' value64='-1'/>
<enum name='kCFCompareLocalized' value64='32'/>
<enum name='kCFCompareNonliteral' value64='16'/>
<enum name='kCFCompareNumerically' value64='64'/>
<enum name='kCFCompareWidthInsensitive' value64='256'/>
<enum name='kCFCoreFoundationVersionNumber10_0' value64='196.40'/>
<enum name='kCFCoreFoundationVersionNumber10_0_3' value64='196.50'/>
<enum name='kCFCoreFoundationVersionNumber10_1' value64='226.00'/>
<enum name='kCFCoreFoundationVersionNumber10_10' value64='1151.16'/>
<enum name='kCFCoreFoundationVersionNumber10_10_1' value64='1151.16'/>
<enum name='kCFCoreFoundationVersionNumber10_10_2' value64='1152'/>
<enum name='kCFCoreFoundationVersionNumber10_10_3' value64='1153.18'/>
<enum name='kCFCoreFoundationVersionNumber10_1_1' value64='226.00'/>
<enum name='kCFCoreFoundationVersionNumber10_1_2' value64='227.20'/>
<enum name='kCFCoreFoundationVersionNumber10_1_3' value64='227.20'/>
<enum name='kCFCoreFoundationVersionNumber10_1_4' value64='227.30'/>
<enum name='kCFCoreFoundationVersionNumber10_2' value64='263.00'/>
<enum name='kCFCoreFoundationVersionNumber10_2_1' value64='263.10'/>
<enum name='kCFCoreFoundationVersionNumber10_2_2' value64='263.10'/>
<enum name='kCFCoreFoundationVersionNumber10_2_3' value64='263.30'/>
<enum name='kCFCoreFoundationVersionNumber10_2_4' value64='263.30'/>
<enum name='kCFCoreFoundationVersionNumber10_2_5' value64='263.50'/>
<enum name='kCFCoreFoundationVersionNumber10_2_6' value64='263.50'/>
<enum name='kCFCoreFoundationVersionNumber10_2_7' value64='263.50'/>
<enum name='kCFCoreFoundationVersionNumber10_2_8' value64='263.50'/>
<enum name='kCFCoreFoundationVersionNumber10_3' value64='299.00'/>
<enum name='kCFCoreFoundationVersionNumber10_3_1' value64='299.00'/>
<enum name='kCFCoreFoundationVersionNumber10_3_2' value64='299.00'/>
<enum name='kCFCoreFoundationVersionNumber10_3_3' value64='299.30'/>
<enum name='kCFCoreFoundationVersionNumber10_3_4' value64='299.31'/>
<enum name='kCFCoreFoundationVersionNumber10_3_5' value64='299.31'/>
<enum name='kCFCoreFoundationVersionNumber10_3_6' value64='299.32'/>
<enum name='kCFCoreFoundationVersionNumber10_3_7' value64='299.33'/>
<enum name='kCFCoreFoundationVersionNumber10_3_8' value64='299.33'/>
<enum name='kCFCoreFoundationVersionNumber10_3_9' value64='299.35'/>
<enum name='kCFCoreFoundationVersionNumber10_4' value64='368.00'/>
<enum name='kCFCoreFoundationVersionNumber10_4_1' value64='368.10'/>
<enum name='kCFCoreFoundationVersionNumber10_4_10' value64='368.28'/>
<enum name='kCFCoreFoundationVersionNumber10_4_11' value64='368.31'/>
<enum name='kCFCoreFoundationVersionNumber10_4_2' value64='368.11'/>
<enum name='kCFCoreFoundationVersionNumber10_4_3' value64='368.18'/>
<enum name='kCFCoreFoundationVersionNumber10_4_4_Intel' value64='368.26'/>
<enum name='kCFCoreFoundationVersionNumber10_4_4_PowerPC' value64='368.25'/>
<enum name='kCFCoreFoundationVersionNumber10_4_5_Intel' value64='368.26'/>
<enum name='kCFCoreFoundationVersionNumber10_4_5_PowerPC' value64='368.25'/>
<enum name='kCFCoreFoundationVersionNumber10_4_6_Intel' value64='368.26'/>
<enum name='kCFCoreFoundationVersionNumber10_4_6_PowerPC' value64='368.25'/>
<enum name='kCFCoreFoundationVersionNumber10_4_7' value64='368.27'/>
<enum name='kCFCoreFoundationVersionNumber10_4_8' value64='368.27'/>
<enum name='kCFCoreFoundationVersionNumber10_4_9' value64='368.28'/>
<enum name='kCFCoreFoundationVersionNumber10_5' value64='476.00'/>
<enum name='kCFCoreFoundationVersionNumber10_5_1' value64='476.00'/>
<enum name='kCFCoreFoundationVersionNumber10_5_2' value64='476.10'/>
<enum name='kCFCoreFoundationVersionNumber10_5_3' value64='476.13'/>
<enum name='kCFCoreFoundationVersionNumber10_5_4' value64='476.14'/>
<enum name='kCFCoreFoundationVersionNumber10_5_5' value64='476.15'/>
<enum name='kCFCoreFoundationVersionNumber10_5_6' value64='476.17'/>
<enum name='kCFCoreFoundationVersionNumber10_5_7' value64='476.18'/>
<enum name='kCFCoreFoundationVersionNumber10_5_8' value64='476.19'/>
<enum name='kCFCoreFoundationVersionNumber10_6' value64='550.00'/>
<enum name='kCFCoreFoundationVersionNumber10_6_1' value64='550.00'/>
<enum name='kCFCoreFoundationVersionNumber10_6_2' value64='550.13'/>
<enum name='kCFCoreFoundationVersionNumber10_6_3' value64='550.19'/>
<enum name='kCFCoreFoundationVersionNumber10_6_4' value64='550.29'/>
<enum name='kCFCoreFoundationVersionNumber10_6_5' value64='550.42'/>
<enum name='kCFCoreFoundationVersionNumber10_6_6' value64='550.42'/>
<enum name='kCFCoreFoundationVersionNumber10_6_7' value64='550.42'/>
<enum name='kCFCoreFoundationVersionNumber10_6_8' value64='550.43'/>
<enum name='kCFCoreFoundationVersionNumber10_7' value64='635.00'/>
<enum name='kCFCoreFoundationVersionNumber10_7_1' value64='635.00'/>
<enum name='kCFCoreFoundationVersionNumber10_7_2' value64='635.15'/>
<enum name='kCFCoreFoundationVersionNumber10_7_3' value64='635.19'/>
<enum name='kCFCoreFoundationVersionNumber10_7_4' value64='635.21'/>
<enum name='kCFCoreFoundationVersionNumber10_7_5' value64='635.21'/>
<enum name='kCFCoreFoundationVersionNumber10_8' value64='744.00'/>
<enum name='kCFCoreFoundationVersionNumber10_8_1' value64='744.00'/>
<enum name='kCFCoreFoundationVersionNumber10_8_2' value64='744.12'/>
<enum name='kCFCoreFoundationVersionNumber10_8_3' value64='744.18'/>
<enum name='kCFCoreFoundationVersionNumber10_8_4' value64='744.19'/>
<enum name='kCFCoreFoundationVersionNumber10_9' value64='855.11'/>
<enum name='kCFCoreFoundationVersionNumber10_9_1' value64='855.11'/>
<enum name='kCFCoreFoundationVersionNumber10_9_2' value64='855.14'/>
<enum name='kCFCoreFoundationVersionNumber_iOS_4_0' value64='550.32'/>
<enum name='kCFCoreFoundationVersionNumber_iOS_4_1' value64='550.38'/>
<enum name='kCFCoreFoundationVersionNumber_iOS_4_2' value64='550.52'/>
<enum name='kCFCoreFoundationVersionNumber_iOS_4_3' value64='550.52'/>
<enum name='kCFCoreFoundationVersionNumber_iOS_5_0' value64='675.00'/>
<enum name='kCFCoreFoundationVersionNumber_iOS_5_1' value64='690.10'/>
<enum name='kCFCoreFoundationVersionNumber_iOS_6_0' value64='793.00'/>
<enum name='kCFCoreFoundationVersionNumber_iOS_6_1' value64='793.00'/>
<enum name='kCFCoreFoundationVersionNumber_iOS_7_0' value64='847.20'/>
<enum name='kCFCoreFoundationVersionNumber_iOS_7_1' value64='847.24'/>
<enum name='kCFCoreFoundationVersionNumber_iOS_8_0' value64='1140.1'/>
<enum name='kCFCoreFoundationVersionNumber_iOS_8_1' value64='1141.14'/>
<enum name='kCFCoreFoundationVersionNumber_iOS_8_2' value64='1142.16'/>
<enum name='kCFCoreFoundationVersionNumber_iPhoneOS_2_0' value64='478.23'/>
<enum name='kCFCoreFoundationVersionNumber_iPhoneOS_2_1' value64='478.26'/>
<enum name='kCFCoreFoundationVersionNumber_iPhoneOS_2_2' value64='478.29'/>
<enum name='kCFCoreFoundationVersionNumber_iPhoneOS_3_0' value64='478.47'/>
<enum name='kCFCoreFoundationVersionNumber_iPhoneOS_3_1' value64='478.52'/>
<enum name='kCFCoreFoundationVersionNumber_iPhoneOS_3_2' value64='478.61'/>
<enum name='kCFDataSearchAnchored' value64='2'/>
<enum name='kCFDataSearchBackwards' value64='1'/>
<enum name='kCFDateFormatterFullStyle' value64='4'/>
<enum name='kCFDateFormatterLongStyle' value64='3'/>
<enum name='kCFDateFormatterMediumStyle' value64='2'/>
<enum name='kCFDateFormatterNoStyle' value64='0'/>
<enum name='kCFDateFormatterShortStyle' value64='1'/>
<enum name='kCFFileDescriptorReadCallBack' value64='1'/>
<enum name='kCFFileDescriptorWriteCallBack' value64='2'/>
<enum name='kCFFileSecurityClearAccessControlList' value64='32'/>
<enum name='kCFFileSecurityClearGroup' value64='2'/>
<enum name='kCFFileSecurityClearGroupUUID' value64='16'/>
<enum name='kCFFileSecurityClearMode' value64='4'/>
<enum name='kCFFileSecurityClearOwner' value64='1'/>
<enum name='kCFFileSecurityClearOwnerUUID' value64='8'/>
<enum name='kCFGregorianAllUnits' value64='16777215'/>
<enum name='kCFGregorianUnitsDays' value64='4'/>
<enum name='kCFGregorianUnitsHours' value64='8'/>
<enum name='kCFGregorianUnitsMinutes' value64='16'/>
<enum name='kCFGregorianUnitsMonths' value64='2'/>
<enum name='kCFGregorianUnitsSeconds' value64='32'/>
<enum name='kCFGregorianUnitsYears' value64='1'/>
<enum name='kCFLocaleLanguageDirectionBottomToTop' value64='4'/>
<enum name='kCFLocaleLanguageDirectionLeftToRight' value64='1'/>
<enum name='kCFLocaleLanguageDirectionRightToLeft' value64='2'/>
<enum name='kCFLocaleLanguageDirectionTopToBottom' value64='3'/>
<enum name='kCFLocaleLanguageDirectionUnknown' value64='0'/>
<enum name='kCFMessagePortBecameInvalidError' value64='-5'/>
<enum name='kCFMessagePortIsInvalid' value64='-3'/>
<enum name='kCFMessagePortReceiveTimeout' value64='-2'/>
<enum name='kCFMessagePortSendTimeout' value64='-1'/>
<enum name='kCFMessagePortSuccess' value64='0'/>
<enum name='kCFMessagePortTransportError' value64='-4'/>
<enum name='kCFNotificationDeliverImmediately' value64='1'/>
<enum name='kCFNotificationPostToAllSessions' value64='2'/>
<enum name='kCFNumberCFIndexType' value64='14'/>
<enum name='kCFNumberCGFloatType' value64='16'/>
<enum name='kCFNumberCharType' value64='7'/>
<enum name='kCFNumberDoubleType' value64='13'/>
<enum name='kCFNumberFloat32Type' value64='5'/>
<enum name='kCFNumberFloat64Type' value64='6'/>
<enum name='kCFNumberFloatType' value64='12'/>
<enum name='kCFNumberFormatterCurrencyAccountingStyle' value64='10'/>
<enum name='kCFNumberFormatterCurrencyISOCodeStyle' value64='8'/>
<enum name='kCFNumberFormatterCurrencyPluralStyle' value64='9'/>
<enum name='kCFNumberFormatterCurrencyStyle' value64='2'/>
<enum name='kCFNumberFormatterDecimalStyle' value64='1'/>
<enum name='kCFNumberFormatterNoStyle' value64='0'/>
<enum name='kCFNumberFormatterOrdinalStyle' value64='6'/>
<enum name='kCFNumberFormatterPadAfterPrefix' value64='1'/>
<enum name='kCFNumberFormatterPadAfterSuffix' value64='3'/>
<enum name='kCFNumberFormatterPadBeforePrefix' value64='0'/>
<enum name='kCFNumberFormatterPadBeforeSuffix' value64='2'/>
<enum name='kCFNumberFormatterParseIntegersOnly' value64='1'/>
<enum name='kCFNumberFormatterPercentStyle' value64='3'/>
<enum name='kCFNumberFormatterRoundCeiling' value64='0'/>
<enum name='kCFNumberFormatterRoundDown' value64='2'/>
<enum name='kCFNumberFormatterRoundFloor' value64='1'/>
<enum name='kCFNumberFormatterRoundHalfDown' value64='5'/>
<enum name='kCFNumberFormatterRoundHalfEven' value64='4'/>
<enum name='kCFNumberFormatterRoundHalfUp' value64='6'/>
<enum name='kCFNumberFormatterRoundUp' value64='3'/>
<enum name='kCFNumberFormatterScientificStyle' value64='4'/>
<enum name='kCFNumberFormatterSpellOutStyle' value64='5'/>
<enum name='kCFNumberIntType' value64='9'/>
<enum name='kCFNumberLongLongType' value64='11'/>
<enum name='kCFNumberLongType' value64='10'/>
<enum name='kCFNumberMaxType' value64='16'/>
<enum name='kCFNumberNSIntegerType' value64='15'/>
<enum name='kCFNumberSInt16Type' value64='2'/>
<enum name='kCFNumberSInt32Type' value64='3'/>
<enum name='kCFNumberSInt64Type' value64='4'/>
<enum name='kCFNumberSInt8Type' value64='1'/>
<enum name='kCFNumberShortType' value64='8'/>
<enum name='kCFPropertyListBinaryFormat_v1_0' value64='200'/>
<enum name='kCFPropertyListImmutable' value64='0'/>
<enum name='kCFPropertyListMutableContainers' value64='1'/>
<enum name='kCFPropertyListMutableContainersAndLeaves' value64='2'/>
<enum name='kCFPropertyListOpenStepFormat' value64='1'/>
<enum name='kCFPropertyListReadCorruptError' value64='3840'/>
<enum name='kCFPropertyListReadStreamError' value64='3842'/>
<enum name='kCFPropertyListReadUnknownVersionError' value64='3841'/>
<enum name='kCFPropertyListWriteStreamError' value64='3851'/>
<enum name='kCFPropertyListXMLFormat_v1_0' value64='100'/>
<enum name='kCFRunLoopAfterWaiting' value64='64'/>
<enum name='kCFRunLoopAllActivities' value64='268435455'/>
<enum name='kCFRunLoopBeforeSources' value64='4'/>
<enum name='kCFRunLoopBeforeTimers' value64='2'/>
<enum name='kCFRunLoopBeforeWaiting' value64='32'/>
<enum name='kCFRunLoopEntry' value64='1'/>
<enum name='kCFRunLoopExit' value64='128'/>
<enum name='kCFRunLoopRunFinished' value64='1'/>
<enum name='kCFRunLoopRunHandledSource' value64='4'/>
<enum name='kCFRunLoopRunStopped' value64='2'/>
<enum name='kCFRunLoopRunTimedOut' value64='3'/>
<enum name='kCFSocketAcceptCallBack' value64='2'/>
<enum name='kCFSocketAutomaticallyReenableAcceptCallBack' value64='2'/>
<enum name='kCFSocketAutomaticallyReenableDataCallBack' value64='3'/>
<enum name='kCFSocketAutomaticallyReenableReadCallBack' value64='1'/>
<enum name='kCFSocketAutomaticallyReenableWriteCallBack' value64='8'/>
<enum name='kCFSocketCloseOnInvalidate' value64='128'/>
<enum name='kCFSocketConnectCallBack' value64='4'/>
<enum name='kCFSocketDataCallBack' value64='3'/>
<enum name='kCFSocketError' value64='-1'/>
<enum name='kCFSocketLeaveErrors' value64='64'/>
<enum name='kCFSocketNoCallBack' value64='0'/>
<enum name='kCFSocketReadCallBack' value64='1'/>
<enum name='kCFSocketSuccess' value64='0'/>
<enum name='kCFSocketTimeout' value64='-2'/>
<enum name='kCFSocketWriteCallBack' value64='8'/>
<enum name='kCFStreamErrorDomainCustom' value64='-1'/>
<enum name='kCFStreamErrorDomainMacOSStatus' value64='2'/>
<enum name='kCFStreamErrorDomainPOSIX' value64='1'/>
<enum name='kCFStreamEventCanAcceptBytes' value64='4'/>
<enum name='kCFStreamEventEndEncountered' value64='16'/>
<enum name='kCFStreamEventErrorOccurred' value64='8'/>
<enum name='kCFStreamEventHasBytesAvailable' value64='2'/>
<enum name='kCFStreamEventNone' value64='0'/>
<enum name='kCFStreamEventOpenCompleted' value64='1'/>
<enum name='kCFStreamStatusAtEnd' value64='5'/>
<enum name='kCFStreamStatusClosed' value64='6'/>
<enum name='kCFStreamStatusError' value64='7'/>
<enum name='kCFStreamStatusNotOpen' value64='0'/>
<enum name='kCFStreamStatusOpen' value64='2'/>
<enum name='kCFStreamStatusOpening' value64='1'/>
<enum name='kCFStreamStatusReading' value64='3'/>
<enum name='kCFStreamStatusWriting' value64='4'/>
<enum name='kCFStringEncodingANSEL' value64='1537'/>
<enum name='kCFStringEncodingASCII' value64='1536'/>
<enum name='kCFStringEncodingBig5' value64='2563'/>
<enum name='kCFStringEncodingBig5_E' value64='2569'/>
<enum name='kCFStringEncodingBig5_HKSCS_1999' value64='2566'/>
<enum name='kCFStringEncodingCNS_11643_92_P1' value64='1617'/>
<enum name='kCFStringEncodingCNS_11643_92_P2' value64='1618'/>
<enum name='kCFStringEncodingCNS_11643_92_P3' value64='1619'/>
<enum name='kCFStringEncodingDOSArabic' value64='1049'/>
<enum name='kCFStringEncodingDOSBalticRim' value64='1030'/>
<enum name='kCFStringEncodingDOSCanadianFrench' value64='1048'/>
<enum name='kCFStringEncodingDOSChineseSimplif' value64='1057'/>
<enum name='kCFStringEncodingDOSChineseTrad' value64='1059'/>
<enum name='kCFStringEncodingDOSCyrillic' value64='1043'/>
<enum name='kCFStringEncodingDOSGreek' value64='1029'/>
<enum name='kCFStringEncodingDOSGreek1' value64='1041'/>
<enum name='kCFStringEncodingDOSGreek2' value64='1052'/>
<enum name='kCFStringEncodingDOSHebrew' value64='1047'/>
<enum name='kCFStringEncodingDOSIcelandic' value64='1046'/>
<enum name='kCFStringEncodingDOSJapanese' value64='1056'/>
<enum name='kCFStringEncodingDOSKorean' value64='1058'/>
<enum name='kCFStringEncodingDOSLatin1' value64='1040'/>
<enum name='kCFStringEncodingDOSLatin2' value64='1042'/>
<enum name='kCFStringEncodingDOSLatinUS' value64='1024'/>
<enum name='kCFStringEncodingDOSNordic' value64='1050'/>
<enum name='kCFStringEncodingDOSPortuguese' value64='1045'/>
<enum name='kCFStringEncodingDOSRussian' value64='1051'/>
<enum name='kCFStringEncodingDOSThai' value64='1053'/>
<enum name='kCFStringEncodingDOSTurkish' value64='1044'/>
<enum name='kCFStringEncodingEBCDIC_CP037' value64='3074'/>
<enum name='kCFStringEncodingEBCDIC_US' value64='3073'/>
<enum name='kCFStringEncodingEUC_CN' value64='2352'/>
<enum name='kCFStringEncodingEUC_JP' value64='2336'/>
<enum name='kCFStringEncodingEUC_KR' value64='2368'/>
<enum name='kCFStringEncodingEUC_TW' value64='2353'/>
<enum name='kCFStringEncodingGBK_95' value64='1585'/>
<enum name='kCFStringEncodingGB_18030_2000' value64='1586'/>
<enum name='kCFStringEncodingGB_2312_80' value64='1584'/>
<enum name='kCFStringEncodingHZ_GB_2312' value64='2565'/>
<enum name='kCFStringEncodingISOLatin1' value64='513'/>
<enum name='kCFStringEncodingISOLatin10' value64='528'/>
<enum name='kCFStringEncodingISOLatin2' value64='514'/>
<enum name='kCFStringEncodingISOLatin3' value64='515'/>
<enum name='kCFStringEncodingISOLatin4' value64='516'/>
<enum name='kCFStringEncodingISOLatin5' value64='521'/>
<enum name='kCFStringEncodingISOLatin6' value64='522'/>
<enum name='kCFStringEncodingISOLatin7' value64='525'/>
<enum name='kCFStringEncodingISOLatin8' value64='526'/>
<enum name='kCFStringEncodingISOLatin9' value64='527'/>
<enum name='kCFStringEncodingISOLatinArabic' value64='518'/>
<enum name='kCFStringEncodingISOLatinCyrillic' value64='517'/>
<enum name='kCFStringEncodingISOLatinGreek' value64='519'/>
<enum name='kCFStringEncodingISOLatinHebrew' value64='520'/>
<enum name='kCFStringEncodingISOLatinThai' value64='523'/>
<enum name='kCFStringEncodingISO_2022_CN' value64='2096'/>
<enum name='kCFStringEncodingISO_2022_CN_EXT' value64='2097'/>
<enum name='kCFStringEncodingISO_2022_JP' value64='2080'/>
<enum name='kCFStringEncodingISO_2022_JP_1' value64='2082'/>
<enum name='kCFStringEncodingISO_2022_JP_2' value64='2081'/>
<enum name='kCFStringEncodingISO_2022_JP_3' value64='2083'/>
<enum name='kCFStringEncodingISO_2022_KR' value64='2112'/>
<enum name='kCFStringEncodingInvalidId' value64='4294967295'/>
<enum name='kCFStringEncodingJIS_C6226_78' value64='1572'/>
<enum name='kCFStringEncodingJIS_X0201_76' value64='1568'/>
<enum name='kCFStringEncodingJIS_X0208_83' value64='1569'/>
<enum name='kCFStringEncodingJIS_X0208_90' value64='1570'/>
<enum name='kCFStringEncodingJIS_X0212_90' value64='1571'/>
<enum name='kCFStringEncodingKOI8_R' value64='2562'/>
<enum name='kCFStringEncodingKOI8_U' value64='2568'/>
<enum name='kCFStringEncodingKSC_5601_87' value64='1600'/>
<enum name='kCFStringEncodingKSC_5601_92_Johab' value64='1601'/>
<enum name='kCFStringEncodingMacArabic' value64='4'/>
<enum name='kCFStringEncodingMacArmenian' value64='24'/>
<enum name='kCFStringEncodingMacBengali' value64='13'/>
<enum name='kCFStringEncodingMacBurmese' value64='19'/>
<enum name='kCFStringEncodingMacCeltic' value64='39'/>
<enum name='kCFStringEncodingMacCentralEurRoman' value64='29'/>
<enum name='kCFStringEncodingMacChineseSimp' value64='25'/>
<enum name='kCFStringEncodingMacChineseTrad' value64='2'/>
<enum name='kCFStringEncodingMacCroatian' value64='36'/>
<enum name='kCFStringEncodingMacCyrillic' value64='7'/>
<enum name='kCFStringEncodingMacDevanagari' value64='9'/>
<enum name='kCFStringEncodingMacDingbats' value64='34'/>
<enum name='kCFStringEncodingMacEthiopic' value64='28'/>
<enum name='kCFStringEncodingMacExtArabic' value64='31'/>
<enum name='kCFStringEncodingMacFarsi' value64='140'/>
<enum name='kCFStringEncodingMacGaelic' value64='40'/>
<enum name='kCFStringEncodingMacGeorgian' value64='23'/>
<enum name='kCFStringEncodingMacGreek' value64='6'/>
<enum name='kCFStringEncodingMacGujarati' value64='11'/>
<enum name='kCFStringEncodingMacGurmukhi' value64='10'/>
<enum name='kCFStringEncodingMacHFS' value64='255'/>
<enum name='kCFStringEncodingMacHebrew' value64='5'/>
<enum name='kCFStringEncodingMacIcelandic' value64='37'/>
<enum name='kCFStringEncodingMacInuit' value64='236'/>
<enum name='kCFStringEncodingMacJapanese' value64='1'/>
<enum name='kCFStringEncodingMacKannada' value64='16'/>
<enum name='kCFStringEncodingMacKhmer' value64='20'/>
<enum name='kCFStringEncodingMacKorean' value64='3'/>
<enum name='kCFStringEncodingMacLaotian' value64='22'/>
<enum name='kCFStringEncodingMacMalayalam' value64='17'/>
<enum name='kCFStringEncodingMacMongolian' value64='27'/>
<enum name='kCFStringEncodingMacOriya' value64='12'/>
<enum name='kCFStringEncodingMacRoman' value64='0'/>
<enum name='kCFStringEncodingMacRomanLatin1' value64='2564'/>
<enum name='kCFStringEncodingMacRomanian' value64='38'/>
<enum name='kCFStringEncodingMacSinhalese' value64='18'/>
<enum name='kCFStringEncodingMacSymbol' value64='33'/>
<enum name='kCFStringEncodingMacTamil' value64='14'/>
<enum name='kCFStringEncodingMacTelugu' value64='15'/>
<enum name='kCFStringEncodingMacThai' value64='21'/>
<enum name='kCFStringEncodingMacTibetan' value64='26'/>
<enum name='kCFStringEncodingMacTurkish' value64='35'/>
<enum name='kCFStringEncodingMacUkrainian' value64='152'/>
<enum name='kCFStringEncodingMacVT100' value64='252'/>
<enum name='kCFStringEncodingMacVietnamese' value64='30'/>
<enum name='kCFStringEncodingNextStepJapanese' value64='2818'/>
<enum name='kCFStringEncodingNextStepLatin' value64='2817'/>
<enum name='kCFStringEncodingNonLossyASCII' value64='3071'/>
<enum name='kCFStringEncodingShiftJIS' value64='2561'/>
<enum name='kCFStringEncodingShiftJIS_X0213' value64='1576'/>
<enum name='kCFStringEncodingShiftJIS_X0213_00' value64='1576'/>
<enum name='kCFStringEncodingShiftJIS_X0213_MenKuTen' value64='1577'/>
<enum name='kCFStringEncodingUTF16' value64='256'/>
<enum name='kCFStringEncodingUTF16BE' value64='268435712'/>
<enum name='kCFStringEncodingUTF16LE' value64='335544576'/>
<enum name='kCFStringEncodingUTF32' value64='201326848'/>
<enum name='kCFStringEncodingUTF32BE' value64='402653440'/>
<enum name='kCFStringEncodingUTF32LE' value64='469762304'/>
<enum name='kCFStringEncodingUTF7' value64='67109120'/>
<enum name='kCFStringEncodingUTF7_IMAP' value64='2576'/>
<enum name='kCFStringEncodingUTF8' value64='134217984'/>
<enum name='kCFStringEncodingUnicode' value64='256'/>
<enum name='kCFStringEncodingVISCII' value64='2567'/>
<enum name='kCFStringEncodingWindowsArabic' value64='1286'/>
<enum name='kCFStringEncodingWindowsBalticRim' value64='1287'/>
<enum name='kCFStringEncodingWindowsCyrillic' value64='1282'/>
<enum name='kCFStringEncodingWindowsGreek' value64='1283'/>
<enum name='kCFStringEncodingWindowsHebrew' value64='1285'/>
<enum name='kCFStringEncodingWindowsKoreanJohab' value64='1296'/>
<enum name='kCFStringEncodingWindowsLatin1' value64='1280'/>
<enum name='kCFStringEncodingWindowsLatin2' value64='1281'/>
<enum name='kCFStringEncodingWindowsLatin5' value64='1284'/>
<enum name='kCFStringEncodingWindowsVietnamese' value64='1288'/>
<enum name='kCFStringNormalizationFormC' value64='2'/>
<enum name='kCFStringNormalizationFormD' value64='0'/>
<enum name='kCFStringNormalizationFormKC' value64='3'/>
<enum name='kCFStringNormalizationFormKD' value64='1'/>
<enum name='kCFStringTokenizerAttributeLanguage' value64='131072'/>
<enum name='kCFStringTokenizerAttributeLatinTranscription' value64='65536'/>
<enum name='kCFStringTokenizerTokenHasDerivedSubTokensMask' value64='4'/>
<enum name='kCFStringTokenizerTokenHasHasNumbersMask' value64='8'/>
<enum name='kCFStringTokenizerTokenHasNonLettersMask' value64='16'/>
<enum name='kCFStringTokenizerTokenHasSubTokensMask' value64='2'/>
<enum name='kCFStringTokenizerTokenIsCJWordMask' value64='32'/>
<enum name='kCFStringTokenizerTokenNone' value64='0'/>
<enum name='kCFStringTokenizerTokenNormal' value64='1'/>
<enum name='kCFStringTokenizerUnitLineBreak' value64='3'/>
<enum name='kCFStringTokenizerUnitParagraph' value64='2'/>
<enum name='kCFStringTokenizerUnitSentence' value64='1'/>
<enum name='kCFStringTokenizerUnitWord' value64='0'/>
<enum name='kCFStringTokenizerUnitWordBoundary' value64='4'/>
<enum name='kCFTimeZoneNameStyleDaylightSaving' value64='2'/>
<enum name='kCFTimeZoneNameStyleGeneric' value64='4'/>
<enum name='kCFTimeZoneNameStyleShortDaylightSaving' value64='3'/>
<enum name='kCFTimeZoneNameStyleShortGeneric' value64='5'/>
<enum name='kCFTimeZoneNameStyleShortStandard' value64='1'/>
<enum name='kCFTimeZoneNameStyleStandard' value64='0'/>
<enum name='kCFURLBookmarkCreationMinimalBookmarkMask' value64='512'/>
<enum name='kCFURLBookmarkCreationPreferFileIDResolutionMask' value64='256'/>
<enum name='kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess' value64='4096'/>
<enum name='kCFURLBookmarkCreationSuitableForBookmarkFile' value64='1024'/>
<enum name='kCFURLBookmarkCreationWithSecurityScope' value64='2048'/>
<enum name='kCFURLBookmarkResolutionWithSecurityScope' value64='1024'/>
<enum name='kCFURLBookmarkResolutionWithoutMountingMask' value64='512'/>
<enum name='kCFURLBookmarkResolutionWithoutUIMask' value64='256'/>
<enum name='kCFURLComponentFragment' value64='12'/>
<enum name='kCFURLComponentHost' value64='8'/>
<enum name='kCFURLComponentNetLocation' value64='2'/>
<enum name='kCFURLComponentParameterString' value64='10'/>
<enum name='kCFURLComponentPassword' value64='6'/>
<enum name='kCFURLComponentPath' value64='3'/>
<enum name='kCFURLComponentPort' value64='9'/>
<enum name='kCFURLComponentQuery' value64='11'/>
<enum name='kCFURLComponentResourceSpecifier' value64='4'/>
<enum name='kCFURLComponentScheme' value64='1'/>
<enum name='kCFURLComponentUser' value64='5'/>
<enum name='kCFURLComponentUserInfo' value64='7'/>
<enum name='kCFURLEnumeratorDefaultBehavior' value64='0'/>
<enum name='kCFURLEnumeratorDescendRecursively' value64='1'/>
<enum name='kCFURLEnumeratorDirectoryPostOrderSuccess' value64='4'/>
<enum name='kCFURLEnumeratorEnd' value64='2'/>
<enum name='kCFURLEnumeratorError' value64='3'/>
<enum name='kCFURLEnumeratorGenerateFileReferenceURLs' value64='4'/>
<enum name='kCFURLEnumeratorIncludeDirectoriesPostOrder' value64='32'/>
<enum name='kCFURLEnumeratorIncludeDirectoriesPreOrder' value64='16'/>
<enum name='kCFURLEnumeratorSkipInvisibles' value64='2'/>
<enum name='kCFURLEnumeratorSkipPackageContents' value64='8'/>
<enum name='kCFURLEnumeratorSuccess' value64='1'/>
<enum name='kCFURLHFSPathStyle' value64='1'/>
<enum name='kCFURLImproperArgumentsError' value64='-15'/>
<enum name='kCFURLPOSIXPathStyle' value64='0'/>
<enum name='kCFURLPropertyKeyUnavailableError' value64='-17'/>
<enum name='kCFURLRemoteHostUnavailableError' value64='-14'/>
<enum name='kCFURLResourceAccessViolationError' value64='-13'/>
<enum name='kCFURLResourceNotFoundError' value64='-12'/>
<enum name='kCFURLTimeoutError' value64='-18'/>
<enum name='kCFURLUnknownError' value64='-10'/>
<enum name='kCFURLUnknownPropertyKeyError' value64='-16'/>
<enum name='kCFURLUnknownSchemeError' value64='-11'/>
<enum name='kCFURLWindowsPathStyle' value64='2'/>
<function name='CFAbsoluteTimeAddGregorianUnits'>
<arg declared_type64='CFAbsoluteTime' name='at' type64='d'/>
<arg declared_type64='CFTimeZoneRef' name='tz' type64='^{__CFTimeZone=}'/>
<arg declared_type64='CFGregorianUnits' name='units' type64='{_CFGregorianUnits=iiiiid}'/>
<retval declared_type64='CFAbsoluteTime' type64='d'/>
</function>
<function name='CFAbsoluteTimeGetCurrent'>
<retval declared_type64='CFAbsoluteTime' type64='d'/>
</function>
<function name='CFAbsoluteTimeGetDayOfWeek'>
<arg declared_type64='CFAbsoluteTime' name='at' type64='d'/>
<arg declared_type64='CFTimeZoneRef' name='tz' type64='^{__CFTimeZone=}'/>
<retval declared_type64='SInt32' type64='i'/>
</function>
<function name='CFAbsoluteTimeGetDayOfYear'>
<arg declared_type64='CFAbsoluteTime' name='at' type64='d'/>
<arg declared_type64='CFTimeZoneRef' name='tz' type64='^{__CFTimeZone=}'/>
<retval declared_type64='SInt32' type64='i'/>
</function>
<function name='CFAbsoluteTimeGetDifferenceAsGregorianUnits'>
<arg declared_type64='CFAbsoluteTime' name='at1' type64='d'/>
<arg declared_type64='CFAbsoluteTime' name='at2' type64='d'/>
<arg declared_type64='CFTimeZoneRef' name='tz' type64='^{__CFTimeZone=}'/>
<arg declared_type64='CFOptionFlags' name='unitFlags' type64='Q'/>
<retval declared_type64='CFGregorianUnits' type64='{_CFGregorianUnits=iiiiid}'/>
</function>
<function name='CFAbsoluteTimeGetGregorianDate'>
<arg declared_type64='CFAbsoluteTime' name='at' type64='d'/>
<arg declared_type64='CFTimeZoneRef' name='tz' type64='^{__CFTimeZone=}'/>
<retval declared_type64='CFGregorianDate' type64='{_CFGregorianDate=iccccd}'/>
</function>
<function name='CFAbsoluteTimeGetWeekOfYear'>
<arg declared_type64='CFAbsoluteTime' name='at' type64='d'/>
<arg declared_type64='CFTimeZoneRef' name='tz' type64='^{__CFTimeZone=}'/>
<retval declared_type64='SInt32' type64='i'/>
</function>
<function name='CFAllocatorAllocate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='size' type64='q'/>
<arg declared_type64='CFOptionFlags' name='hint' type64='Q'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='CFAllocatorCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFAllocatorContext*' name='context' type64='^{_CFAllocatorContext=q^v^?^?^?^?^?^?^?}'/>
<retval already_retained='true' declared_type64='CFAllocatorRef' type64='^{__CFAllocator=}'/>
</function>
<function name='CFAllocatorDeallocate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='void*' name='ptr' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFAllocatorGetContext'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFAllocatorContext*' name='context' type64='^{_CFAllocatorContext=q^v^?^?^?^?^?^?^?}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFAllocatorGetDefault'>
<retval declared_type64='CFAllocatorRef' type64='^{__CFAllocator=}'/>
</function>
<function name='CFAllocatorGetPreferredSizeForSize'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='size' type64='q'/>
<arg declared_type64='CFOptionFlags' name='hint' type64='Q'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFAllocatorGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFAllocatorReallocate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='void*' name='ptr' type64='^v'/>
<arg declared_type64='CFIndex' name='newsize' type64='q'/>
<arg declared_type64='CFOptionFlags' name='hint' type64='Q'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='CFAllocatorSetDefault'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFArrayAppendArray'>
<arg declared_type64='CFMutableArrayRef' name='theArray' type64='^{__CFArray=}'/>
<arg declared_type64='CFArrayRef' name='otherArray' type64='^{__CFArray=}'/>
<arg declared_type64='CFRange' name='otherRange' type64='{_CFRange=qq}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFArrayAppendValue'>
<arg declared_type64='CFMutableArrayRef' name='theArray' type64='^{__CFArray=}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFArrayApplyFunction'>
<arg declared_type64='CFArrayRef' name='theArray' type64='^{__CFArray=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CFArrayApplierFunction' function_pointer='true' name='applier' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='void*' name='context' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFArrayBSearchValues'>
<arg declared_type64='CFArrayRef' name='theArray' type64='^{__CFArray=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<arg declared_type64='CFComparatorFunction' function_pointer='true' name='comparator' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='CFComparisonResult' type64='q'/>
</arg>
<arg declared_type64='void*' name='context' type64='^v'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFArrayContainsValue'>
<arg declared_type64='CFArrayRef' name='theArray' type64='^{__CFArray=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFArrayCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='void**' name='values' type64='^^v'/>
<arg declared_type64='CFIndex' name='numValues' type64='q'/>
<arg const='true' declared_type64='CFArrayCallBacks*' name='callBacks' type64='^{_CFArrayCallBacks=q^?^?^?^?}'/>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFArrayCreateCopy'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFArrayRef' name='theArray' type64='^{__CFArray=}'/>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFArrayCreateMutable'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='capacity' type64='q'/>
<arg const='true' declared_type64='CFArrayCallBacks*' name='callBacks' type64='^{_CFArrayCallBacks=q^?^?^?^?}'/>
<retval already_retained='true' declared_type64='CFMutableArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFArrayCreateMutableCopy'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='capacity' type64='q'/>
<arg declared_type64='CFArrayRef' name='theArray' type64='^{__CFArray=}'/>
<retval already_retained='true' declared_type64='CFMutableArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFArrayExchangeValuesAtIndices'>
<arg declared_type64='CFMutableArrayRef' name='theArray' type64='^{__CFArray=}'/>
<arg declared_type64='CFIndex' name='idx1' type64='q'/>
<arg declared_type64='CFIndex' name='idx2' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFArrayGetCount'>
<arg declared_type64='CFArrayRef' name='theArray' type64='^{__CFArray=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFArrayGetCountOfValue'>
<arg declared_type64='CFArrayRef' name='theArray' type64='^{__CFArray=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFArrayGetFirstIndexOfValue'>
<arg declared_type64='CFArrayRef' name='theArray' type64='^{__CFArray=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFArrayGetLastIndexOfValue'>
<arg declared_type64='CFArrayRef' name='theArray' type64='^{__CFArray=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFArrayGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFArrayGetValueAtIndex'>
<arg declared_type64='CFArrayRef' name='theArray' type64='^{__CFArray=}'/>
<arg declared_type64='CFIndex' name='idx' type64='q'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</function>
<function name='CFArrayGetValues'>
<arg declared_type64='CFArrayRef' name='theArray' type64='^{__CFArray=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg const='true' declared_type64='void**' name='values' type64='^^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFArrayInsertValueAtIndex'>
<arg declared_type64='CFMutableArrayRef' name='theArray' type64='^{__CFArray=}'/>
<arg declared_type64='CFIndex' name='idx' type64='q'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFArrayRemoveAllValues'>
<arg declared_type64='CFMutableArrayRef' name='theArray' type64='^{__CFArray=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFArrayRemoveValueAtIndex'>
<arg declared_type64='CFMutableArrayRef' name='theArray' type64='^{__CFArray=}'/>
<arg declared_type64='CFIndex' name='idx' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFArrayReplaceValues'>
<arg declared_type64='CFMutableArrayRef' name='theArray' type64='^{__CFArray=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg const='true' declared_type64='void**' name='newValues' type64='^^v'/>
<arg declared_type64='CFIndex' name='newCount' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFArraySetValueAtIndex'>
<arg declared_type64='CFMutableArrayRef' name='theArray' type64='^{__CFArray=}'/>
<arg declared_type64='CFIndex' name='idx' type64='q'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFArraySortValues'>
<arg declared_type64='CFMutableArrayRef' name='theArray' type64='^{__CFArray=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CFComparatorFunction' function_pointer='true' name='comparator' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='CFComparisonResult' type64='q'/>
</arg>
<arg declared_type64='void*' name='context' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFAttributedStringBeginEditing'>
<arg declared_type64='CFMutableAttributedStringRef' name='aStr' type64='^{__CFAttributedString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFAttributedStringCreate'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='str' type64='^{__CFString=}'/>
<arg declared_type64='CFDictionaryRef' name='attributes' type64='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type64='CFAttributedStringRef' type64='^{__CFAttributedString=}'/>
</function>
<function name='CFAttributedStringCreateCopy'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFAttributedStringRef' name='aStr' type64='^{__CFAttributedString=}'/>
<retval already_retained='true' declared_type64='CFAttributedStringRef' type64='^{__CFAttributedString=}'/>
</function>
<function name='CFAttributedStringCreateMutable'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='maxLength' type64='q'/>
<retval already_retained='true' declared_type64='CFMutableAttributedStringRef' type64='^{__CFAttributedString=}'/>
</function>
<function name='CFAttributedStringCreateMutableCopy'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='maxLength' type64='q'/>
<arg declared_type64='CFAttributedStringRef' name='aStr' type64='^{__CFAttributedString=}'/>
<retval already_retained='true' declared_type64='CFMutableAttributedStringRef' type64='^{__CFAttributedString=}'/>
</function>
<function name='CFAttributedStringCreateWithSubstring'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFAttributedStringRef' name='aStr' type64='^{__CFAttributedString=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<retval already_retained='true' declared_type64='CFAttributedStringRef' type64='^{__CFAttributedString=}'/>
</function>
<function name='CFAttributedStringEndEditing'>
<arg declared_type64='CFMutableAttributedStringRef' name='aStr' type64='^{__CFAttributedString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFAttributedStringGetAttribute'>
<arg declared_type64='CFAttributedStringRef' name='aStr' type64='^{__CFAttributedString=}'/>
<arg declared_type64='CFIndex' name='loc' type64='q'/>
<arg declared_type64='CFStringRef' name='attrName' type64='^{__CFString=}'/>
<arg declared_type64='CFRange*' name='effectiveRange' type64='^{_CFRange=qq}'/>
<retval declared_type64='CFTypeRef' type64='@'/>
</function>
<function name='CFAttributedStringGetAttributeAndLongestEffectiveRange'>
<arg declared_type64='CFAttributedStringRef' name='aStr' type64='^{__CFAttributedString=}'/>
<arg declared_type64='CFIndex' name='loc' type64='q'/>
<arg declared_type64='CFStringRef' name='attrName' type64='^{__CFString=}'/>
<arg declared_type64='CFRange' name='inRange' type64='{_CFRange=qq}'/>
<arg declared_type64='CFRange*' name='longestEffectiveRange' type64='^{_CFRange=qq}'/>
<retval declared_type64='CFTypeRef' type64='@'/>
</function>
<function name='CFAttributedStringGetAttributes'>
<arg declared_type64='CFAttributedStringRef' name='aStr' type64='^{__CFAttributedString=}'/>
<arg declared_type64='CFIndex' name='loc' type64='q'/>
<arg declared_type64='CFRange*' name='effectiveRange' type64='^{_CFRange=qq}'/>
<retval declared_type64='CFDictionaryRef' type64='^{__CFDictionary=}'/>
</function>
<function name='CFAttributedStringGetAttributesAndLongestEffectiveRange'>
<arg declared_type64='CFAttributedStringRef' name='aStr' type64='^{__CFAttributedString=}'/>
<arg declared_type64='CFIndex' name='loc' type64='q'/>
<arg declared_type64='CFRange' name='inRange' type64='{_CFRange=qq}'/>
<arg declared_type64='CFRange*' name='longestEffectiveRange' type64='^{_CFRange=qq}'/>
<retval declared_type64='CFDictionaryRef' type64='^{__CFDictionary=}'/>
</function>
<function name='CFAttributedStringGetLength'>
<arg declared_type64='CFAttributedStringRef' name='aStr' type64='^{__CFAttributedString=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFAttributedStringGetMutableString'>
<arg declared_type64='CFMutableAttributedStringRef' name='aStr' type64='^{__CFAttributedString=}'/>
<retval declared_type64='CFMutableStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFAttributedStringGetString'>
<arg declared_type64='CFAttributedStringRef' name='aStr' type64='^{__CFAttributedString=}'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFAttributedStringGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFAttributedStringRemoveAttribute'>
<arg declared_type64='CFMutableAttributedStringRef' name='aStr' type64='^{__CFAttributedString=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CFStringRef' name='attrName' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFAttributedStringReplaceAttributedString'>
<arg declared_type64='CFMutableAttributedStringRef' name='aStr' type64='^{__CFAttributedString=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CFAttributedStringRef' name='replacement' type64='^{__CFAttributedString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFAttributedStringReplaceString'>
<arg declared_type64='CFMutableAttributedStringRef' name='aStr' type64='^{__CFAttributedString=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CFStringRef' name='replacement' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFAttributedStringSetAttribute'>
<arg declared_type64='CFMutableAttributedStringRef' name='aStr' type64='^{__CFAttributedString=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CFStringRef' name='attrName' type64='^{__CFString=}'/>
<arg declared_type64='CFTypeRef' name='value' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFAttributedStringSetAttributes'>
<arg declared_type64='CFMutableAttributedStringRef' name='aStr' type64='^{__CFAttributedString=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CFDictionaryRef' name='replacement' type64='^{__CFDictionary=}'/>
<arg declared_type64='Boolean' name='clearOtherAttributes' type64='B'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFAutorelease'>
<arg declared_type64='CFTypeRef' name='arg' type64='@'/>
<retval declared_type64='CFTypeRef' type64='@'/>
</function>
<function name='CFBagAddValue'>
<arg declared_type64='CFMutableBagRef' name='theBag' type64='^{__CFBag=}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBagApplyFunction'>
<arg declared_type64='CFBagRef' name='theBag' type64='^{__CFBag=}'/>
<arg declared_type64='CFBagApplierFunction' function_pointer='true' name='applier' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='void*' name='context' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBagContainsValue'>
<arg declared_type64='CFBagRef' name='theBag' type64='^{__CFBag=}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFBagCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='void**' name='values' type64='^^v'/>
<arg declared_type64='CFIndex' name='numValues' type64='q'/>
<arg const='true' declared_type64='CFBagCallBacks*' name='callBacks' type64='^{_CFBagCallBacks=q^?^?^?^?^?}'/>
<retval already_retained='true' declared_type64='CFBagRef' type64='^{__CFBag=}'/>
</function>
<function name='CFBagCreateCopy'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFBagRef' name='theBag' type64='^{__CFBag=}'/>
<retval already_retained='true' declared_type64='CFBagRef' type64='^{__CFBag=}'/>
</function>
<function name='CFBagCreateMutable'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='capacity' type64='q'/>
<arg const='true' declared_type64='CFBagCallBacks*' name='callBacks' type64='^{_CFBagCallBacks=q^?^?^?^?^?}'/>
<retval already_retained='true' declared_type64='CFMutableBagRef' type64='^{__CFBag=}'/>
</function>
<function name='CFBagCreateMutableCopy'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='capacity' type64='q'/>
<arg declared_type64='CFBagRef' name='theBag' type64='^{__CFBag=}'/>
<retval already_retained='true' declared_type64='CFMutableBagRef' type64='^{__CFBag=}'/>
</function>
<function name='CFBagGetCount'>
<arg declared_type64='CFBagRef' name='theBag' type64='^{__CFBag=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFBagGetCountOfValue'>
<arg declared_type64='CFBagRef' name='theBag' type64='^{__CFBag=}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFBagGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFBagGetValue'>
<arg declared_type64='CFBagRef' name='theBag' type64='^{__CFBag=}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</function>
<function name='CFBagGetValueIfPresent'>
<arg declared_type64='CFBagRef' name='theBag' type64='^{__CFBag=}'/>
<arg const='true' declared_type64='void*' name='candidate' type64='^v'/>
<arg const='true' declared_type64='void**' name='value' type64='^^v'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFBagGetValues'>
<arg declared_type64='CFBagRef' name='theBag' type64='^{__CFBag=}'/>
<arg const='true' declared_type64='void**' name='values' type64='^^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBagRemoveAllValues'>
<arg declared_type64='CFMutableBagRef' name='theBag' type64='^{__CFBag=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBagRemoveValue'>
<arg declared_type64='CFMutableBagRef' name='theBag' type64='^{__CFBag=}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBagReplaceValue'>
<arg declared_type64='CFMutableBagRef' name='theBag' type64='^{__CFBag=}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBagSetValue'>
<arg declared_type64='CFMutableBagRef' name='theBag' type64='^{__CFBag=}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBinaryHeapAddValue'>
<arg declared_type64='CFBinaryHeapRef' name='heap' type64='^{__CFBinaryHeap=}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBinaryHeapApplyFunction'>
<arg declared_type64='CFBinaryHeapRef' name='heap' type64='^{__CFBinaryHeap=}'/>
<arg declared_type64='CFBinaryHeapApplierFunction' function_pointer='true' name='applier' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='void*' name='context' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBinaryHeapContainsValue'>
<arg declared_type64='CFBinaryHeapRef' name='heap' type64='^{__CFBinaryHeap=}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFBinaryHeapCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='capacity' type64='q'/>
<arg const='true' declared_type64='CFBinaryHeapCallBacks*' name='callBacks' type64='^{_CFBinaryHeapCallBacks=q^?^?^?^?}'/>
<arg const='true' declared_type64='CFBinaryHeapCompareContext*' name='compareContext' type64='^{_CFBinaryHeapCompareContext=q^v^?^?^?}'/>
<retval already_retained='true' declared_type64='CFBinaryHeapRef' type64='^{__CFBinaryHeap=}'/>
</function>
<function name='CFBinaryHeapCreateCopy'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='capacity' type64='q'/>
<arg declared_type64='CFBinaryHeapRef' name='heap' type64='^{__CFBinaryHeap=}'/>
<retval already_retained='true' declared_type64='CFBinaryHeapRef' type64='^{__CFBinaryHeap=}'/>
</function>
<function name='CFBinaryHeapGetCount'>
<arg declared_type64='CFBinaryHeapRef' name='heap' type64='^{__CFBinaryHeap=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFBinaryHeapGetCountOfValue'>
<arg declared_type64='CFBinaryHeapRef' name='heap' type64='^{__CFBinaryHeap=}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFBinaryHeapGetMinimum'>
<arg declared_type64='CFBinaryHeapRef' name='heap' type64='^{__CFBinaryHeap=}'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</function>
<function name='CFBinaryHeapGetMinimumIfPresent'>
<arg declared_type64='CFBinaryHeapRef' name='heap' type64='^{__CFBinaryHeap=}'/>
<arg const='true' declared_type64='void**' name='value' type64='^^v'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFBinaryHeapGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFBinaryHeapGetValues'>
<arg declared_type64='CFBinaryHeapRef' name='heap' type64='^{__CFBinaryHeap=}'/>
<arg const='true' declared_type64='void**' name='values' type64='^^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBinaryHeapRemoveAllValues'>
<arg declared_type64='CFBinaryHeapRef' name='heap' type64='^{__CFBinaryHeap=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBinaryHeapRemoveMinimumValue'>
<arg declared_type64='CFBinaryHeapRef' name='heap' type64='^{__CFBinaryHeap=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBitVectorContainsBit'>
<arg declared_type64='CFBitVectorRef' name='bv' type64='^{__CFBitVector=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CFBit' name='value' type64='I'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFBitVectorCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='UInt8*' name='bytes' type64='*'/>
<arg declared_type64='CFIndex' name='numBits' type64='q'/>
<retval already_retained='true' declared_type64='CFBitVectorRef' type64='^{__CFBitVector=}'/>
</function>
<function name='CFBitVectorCreateCopy'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFBitVectorRef' name='bv' type64='^{__CFBitVector=}'/>
<retval already_retained='true' declared_type64='CFBitVectorRef' type64='^{__CFBitVector=}'/>
</function>
<function name='CFBitVectorCreateMutable'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='capacity' type64='q'/>
<retval already_retained='true' declared_type64='CFMutableBitVectorRef' type64='^{__CFBitVector=}'/>
</function>
<function name='CFBitVectorCreateMutableCopy'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='capacity' type64='q'/>
<arg declared_type64='CFBitVectorRef' name='bv' type64='^{__CFBitVector=}'/>
<retval already_retained='true' declared_type64='CFMutableBitVectorRef' type64='^{__CFBitVector=}'/>
</function>
<function name='CFBitVectorFlipBitAtIndex'>
<arg declared_type64='CFMutableBitVectorRef' name='bv' type64='^{__CFBitVector=}'/>
<arg declared_type64='CFIndex' name='idx' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBitVectorFlipBits'>
<arg declared_type64='CFMutableBitVectorRef' name='bv' type64='^{__CFBitVector=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBitVectorGetBitAtIndex'>
<arg declared_type64='CFBitVectorRef' name='bv' type64='^{__CFBitVector=}'/>
<arg declared_type64='CFIndex' name='idx' type64='q'/>
<retval declared_type64='CFBit' type64='I'/>
</function>
<function name='CFBitVectorGetBits'>
<arg declared_type64='CFBitVectorRef' name='bv' type64='^{__CFBitVector=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='UInt8*' name='bytes' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBitVectorGetCount'>
<arg declared_type64='CFBitVectorRef' name='bv' type64='^{__CFBitVector=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFBitVectorGetCountOfBit'>
<arg declared_type64='CFBitVectorRef' name='bv' type64='^{__CFBitVector=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CFBit' name='value' type64='I'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFBitVectorGetFirstIndexOfBit'>
<arg declared_type64='CFBitVectorRef' name='bv' type64='^{__CFBitVector=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CFBit' name='value' type64='I'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFBitVectorGetLastIndexOfBit'>
<arg declared_type64='CFBitVectorRef' name='bv' type64='^{__CFBitVector=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CFBit' name='value' type64='I'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFBitVectorGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFBitVectorSetAllBits'>
<arg declared_type64='CFMutableBitVectorRef' name='bv' type64='^{__CFBitVector=}'/>
<arg declared_type64='CFBit' name='value' type64='I'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBitVectorSetBitAtIndex'>
<arg declared_type64='CFMutableBitVectorRef' name='bv' type64='^{__CFBitVector=}'/>
<arg declared_type64='CFIndex' name='idx' type64='q'/>
<arg declared_type64='CFBit' name='value' type64='I'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBitVectorSetBits'>
<arg declared_type64='CFMutableBitVectorRef' name='bv' type64='^{__CFBitVector=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CFBit' name='value' type64='I'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBitVectorSetCount'>
<arg declared_type64='CFMutableBitVectorRef' name='bv' type64='^{__CFBitVector=}'/>
<arg declared_type64='CFIndex' name='count' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBooleanGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFBooleanGetValue'>
<arg declared_type64='CFBooleanRef' name='boolean' type64='^{__CFBoolean=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFBundleCloseBundleResourceMap'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<arg declared_type64='CFBundleRefNum' name='refNum' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBundleCopyAuxiliaryExecutableURL'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<arg declared_type64='CFStringRef' name='executableName' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFBundleCopyBuiltInPlugInsURL'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFBundleCopyBundleLocalizations'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFBundleCopyBundleURL'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFBundleCopyExecutableArchitectures'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFBundleCopyExecutableArchitecturesForURL'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFBundleCopyExecutableURL'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFBundleCopyInfoDictionaryForURL'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFDictionaryRef' type64='^{__CFDictionary=}'/>
</function>
<function name='CFBundleCopyInfoDictionaryInDirectory'>
<arg declared_type64='CFURLRef' name='bundleURL' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFDictionaryRef' type64='^{__CFDictionary=}'/>
</function>
<function name='CFBundleCopyLocalizationsForPreferences'>
<arg declared_type64='CFArrayRef' name='locArray' type64='^{__CFArray=}'/>
<arg declared_type64='CFArrayRef' name='prefArray' type64='^{__CFArray=}'/>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFBundleCopyLocalizationsForURL'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFBundleCopyLocalizedString'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<arg declared_type64='CFStringRef' name='key' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='value' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='tableName' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFBundleCopyPreferredLocalizationsFromArray'>
<arg declared_type64='CFArrayRef' name='locArray' type64='^{__CFArray=}'/>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFBundleCopyPrivateFrameworksURL'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFBundleCopyResourceURL'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<arg declared_type64='CFStringRef' name='resourceName' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='resourceType' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='subDirName' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFBundleCopyResourceURLForLocalization'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<arg declared_type64='CFStringRef' name='resourceName' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='resourceType' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='subDirName' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='localizationName' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFBundleCopyResourceURLInDirectory'>
<arg declared_type64='CFURLRef' name='bundleURL' type64='^{__CFURL=}'/>
<arg declared_type64='CFStringRef' name='resourceName' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='resourceType' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='subDirName' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFBundleCopyResourceURLsOfType'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<arg declared_type64='CFStringRef' name='resourceType' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='subDirName' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFBundleCopyResourceURLsOfTypeForLocalization'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<arg declared_type64='CFStringRef' name='resourceType' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='subDirName' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='localizationName' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFBundleCopyResourceURLsOfTypeInDirectory'>
<arg declared_type64='CFURLRef' name='bundleURL' type64='^{__CFURL=}'/>
<arg declared_type64='CFStringRef' name='resourceType' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='subDirName' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFBundleCopyResourcesDirectoryURL'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFBundleCopySharedFrameworksURL'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFBundleCopySharedSupportURL'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFBundleCopySupportFilesDirectoryURL'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFBundleCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFURLRef' name='bundleURL' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFBundleRef' type64='^{__CFBundle=}'/>
</function>
<function name='CFBundleCreateBundlesFromDirectory'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFURLRef' name='directoryURL' type64='^{__CFURL=}'/>
<arg declared_type64='CFStringRef' name='bundleType' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFBundleGetAllBundles'>
<retval declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFBundleGetBundleWithIdentifier'>
<arg declared_type64='CFStringRef' name='bundleID' type64='^{__CFString=}'/>
<retval declared_type64='CFBundleRef' type64='^{__CFBundle=}'/>
</function>
<function name='CFBundleGetDataPointerForName'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<arg declared_type64='CFStringRef' name='symbolName' type64='^{__CFString=}'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='CFBundleGetDataPointersForNames'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<arg declared_type64='CFArrayRef' name='symbolNames' type64='^{__CFArray=}'/>
<arg declared_type64='void**' name='stbl' type64='^^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBundleGetDevelopmentRegion'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFBundleGetFunctionPointerForName'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<arg declared_type64='CFStringRef' name='functionName' type64='^{__CFString=}'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='CFBundleGetFunctionPointersForNames'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<arg declared_type64='CFArrayRef' name='functionNames' type64='^{__CFArray=}'/>
<arg declared_type64='void**' name='ftbl' type64='^^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBundleGetIdentifier'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFBundleGetInfoDictionary'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<retval declared_type64='CFDictionaryRef' type64='^{__CFDictionary=}'/>
</function>
<function name='CFBundleGetLocalInfoDictionary'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<retval declared_type64='CFDictionaryRef' type64='^{__CFDictionary=}'/>
</function>
<function name='CFBundleGetMainBundle'>
<retval declared_type64='CFBundleRef' type64='^{__CFBundle=}'/>
</function>
<function name='CFBundleGetPackageInfo'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<arg declared_type64='UInt32*' name='packageType' type64='^I'/>
<arg declared_type64='UInt32*' name='packageCreator' type64='^I'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFBundleGetPackageInfoInDirectory'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='UInt32*' name='packageType' type64='^I'/>
<arg declared_type64='UInt32*' name='packageCreator' type64='^I'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFBundleGetPlugIn'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<retval declared_type64='CFPlugInRef' type64='^{__CFBundle=}'/>
</function>
<function name='CFBundleGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFBundleGetValueForInfoDictionaryKey'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<arg declared_type64='CFStringRef' name='key' type64='^{__CFString=}'/>
<retval declared_type64='CFTypeRef' type64='@'/>
</function>
<function name='CFBundleGetVersionNumber'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<retval declared_type64='UInt32' type64='I'/>
</function>
<function name='CFBundleIsExecutableLoaded'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFBundleLoadExecutable'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFBundleLoadExecutableAndReturnError'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<arg declared_type64='CFErrorRef*' name='error' type64='^^{__CFError}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFBundleOpenBundleResourceFiles'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<arg declared_type64='CFBundleRefNum*' name='refNum' type64='^i'/>
<arg declared_type64='CFBundleRefNum*' name='localizedRefNum' type64='^i'/>
<retval declared_type64='SInt32' type64='i'/>
</function>
<function name='CFBundleOpenBundleResourceMap'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<retval declared_type64='CFBundleRefNum' type64='i'/>
</function>
<function name='CFBundlePreflightExecutable'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<arg declared_type64='CFErrorRef*' name='error' type64='^^{__CFError}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFBundleUnloadExecutable'>
<arg declared_type64='CFBundleRef' name='bundle' type64='^{__CFBundle=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function inline='true' name='CFByteOrderGetCurrent'>
<retval declared_type64='CFByteOrder' type64='q'/>
</function>
<function name='CFCalendarAddComponents' variadic='true'>
<arg declared_type64='CFCalendarRef' name='calendar' type64='^{__CFCalendar=}'/>
<arg declared_type64='CFAbsoluteTime*' name='at' type64='^d'/>
<arg declared_type64='CFOptionFlags' name='options' type64='Q'/>
<arg const='true' declared_type64='char*' name='componentDesc' type64='*'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFCalendarComposeAbsoluteTime' variadic='true'>
<arg declared_type64='CFCalendarRef' name='calendar' type64='^{__CFCalendar=}'/>
<arg declared_type64='CFAbsoluteTime*' name='at' type64='^d'/>
<arg const='true' declared_type64='char*' name='componentDesc' type64='*'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFCalendarCopyCurrent'>
<retval already_retained='true' declared_type64='CFCalendarRef' type64='^{__CFCalendar=}'/>
</function>
<function name='CFCalendarCopyLocale'>
<arg declared_type64='CFCalendarRef' name='calendar' type64='^{__CFCalendar=}'/>
<retval already_retained='true' declared_type64='CFLocaleRef' type64='^{__CFLocale=}'/>
</function>
<function name='CFCalendarCopyTimeZone'>
<arg declared_type64='CFCalendarRef' name='calendar' type64='^{__CFCalendar=}'/>
<retval already_retained='true' declared_type64='CFTimeZoneRef' type64='^{__CFTimeZone=}'/>
</function>
<function name='CFCalendarCreateWithIdentifier'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='identifier' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFCalendarRef' type64='^{__CFCalendar=}'/>
</function>
<function name='CFCalendarDecomposeAbsoluteTime' variadic='true'>
<arg declared_type64='CFCalendarRef' name='calendar' type64='^{__CFCalendar=}'/>
<arg declared_type64='CFAbsoluteTime' name='at' type64='d'/>
<arg const='true' declared_type64='char*' name='componentDesc' type64='*'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFCalendarGetComponentDifference' variadic='true'>
<arg declared_type64='CFCalendarRef' name='calendar' type64='^{__CFCalendar=}'/>
<arg declared_type64='CFAbsoluteTime' name='startingAT' type64='d'/>
<arg declared_type64='CFAbsoluteTime' name='resultAT' type64='d'/>
<arg declared_type64='CFOptionFlags' name='options' type64='Q'/>
<arg const='true' declared_type64='char*' name='componentDesc' type64='*'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFCalendarGetFirstWeekday'>
<arg declared_type64='CFCalendarRef' name='calendar' type64='^{__CFCalendar=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFCalendarGetIdentifier'>
<arg declared_type64='CFCalendarRef' name='calendar' type64='^{__CFCalendar=}'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFCalendarGetMaximumRangeOfUnit'>
<arg declared_type64='CFCalendarRef' name='calendar' type64='^{__CFCalendar=}'/>
<arg declared_type64='CFCalendarUnit' name='unit' type64='Q'/>
<retval declared_type64='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CFCalendarGetMinimumDaysInFirstWeek'>
<arg declared_type64='CFCalendarRef' name='calendar' type64='^{__CFCalendar=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFCalendarGetMinimumRangeOfUnit'>
<arg declared_type64='CFCalendarRef' name='calendar' type64='^{__CFCalendar=}'/>
<arg declared_type64='CFCalendarUnit' name='unit' type64='Q'/>
<retval declared_type64='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CFCalendarGetOrdinalityOfUnit'>
<arg declared_type64='CFCalendarRef' name='calendar' type64='^{__CFCalendar=}'/>
<arg declared_type64='CFCalendarUnit' name='smallerUnit' type64='Q'/>
<arg declared_type64='CFCalendarUnit' name='biggerUnit' type64='Q'/>
<arg declared_type64='CFAbsoluteTime' name='at' type64='d'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFCalendarGetRangeOfUnit'>
<arg declared_type64='CFCalendarRef' name='calendar' type64='^{__CFCalendar=}'/>
<arg declared_type64='CFCalendarUnit' name='smallerUnit' type64='Q'/>
<arg declared_type64='CFCalendarUnit' name='biggerUnit' type64='Q'/>
<arg declared_type64='CFAbsoluteTime' name='at' type64='d'/>
<retval declared_type64='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CFCalendarGetTimeRangeOfUnit'>
<arg declared_type64='CFCalendarRef' name='calendar' type64='^{__CFCalendar=}'/>
<arg declared_type64='CFCalendarUnit' name='unit' type64='Q'/>
<arg declared_type64='CFAbsoluteTime' name='at' type64='d'/>
<arg declared_type64='CFAbsoluteTime*' name='startp' type64='^d'/>
<arg declared_type64='CFTimeInterval*' name='tip' type64='^d'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFCalendarGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFCalendarSetFirstWeekday'>
<arg declared_type64='CFCalendarRef' name='calendar' type64='^{__CFCalendar=}'/>
<arg declared_type64='CFIndex' name='wkdy' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFCalendarSetLocale'>
<arg declared_type64='CFCalendarRef' name='calendar' type64='^{__CFCalendar=}'/>
<arg declared_type64='CFLocaleRef' name='locale' type64='^{__CFLocale=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFCalendarSetMinimumDaysInFirstWeek'>
<arg declared_type64='CFCalendarRef' name='calendar' type64='^{__CFCalendar=}'/>
<arg declared_type64='CFIndex' name='mwd' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFCalendarSetTimeZone'>
<arg declared_type64='CFCalendarRef' name='calendar' type64='^{__CFCalendar=}'/>
<arg declared_type64='CFTimeZoneRef' name='tz' type64='^{__CFTimeZone=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFCharacterSetAddCharactersInRange'>
<arg declared_type64='CFMutableCharacterSetRef' name='theSet' type64='^{__CFCharacterSet=}'/>
<arg declared_type64='CFRange' name='theRange' type64='{_CFRange=qq}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFCharacterSetAddCharactersInString'>
<arg declared_type64='CFMutableCharacterSetRef' name='theSet' type64='^{__CFCharacterSet=}'/>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFCharacterSetCreateBitmapRepresentation'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFCharacterSetRef' name='theSet' type64='^{__CFCharacterSet=}'/>
<retval already_retained='true' declared_type64='CFDataRef' type64='^{__CFData=}'/>
</function>
<function name='CFCharacterSetCreateCopy'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFCharacterSetRef' name='theSet' type64='^{__CFCharacterSet=}'/>
<retval already_retained='true' declared_type64='CFCharacterSetRef' type64='^{__CFCharacterSet=}'/>
</function>
<function name='CFCharacterSetCreateInvertedSet'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFCharacterSetRef' name='theSet' type64='^{__CFCharacterSet=}'/>
<retval already_retained='true' declared_type64='CFCharacterSetRef' type64='^{__CFCharacterSet=}'/>
</function>
<function name='CFCharacterSetCreateMutable'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<retval already_retained='true' declared_type64='CFMutableCharacterSetRef' type64='^{__CFCharacterSet=}'/>
</function>
<function name='CFCharacterSetCreateMutableCopy'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFCharacterSetRef' name='theSet' type64='^{__CFCharacterSet=}'/>
<retval already_retained='true' declared_type64='CFMutableCharacterSetRef' type64='^{__CFCharacterSet=}'/>
</function>
<function name='CFCharacterSetCreateWithBitmapRepresentation'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFDataRef' name='theData' type64='^{__CFData=}'/>
<retval already_retained='true' declared_type64='CFCharacterSetRef' type64='^{__CFCharacterSet=}'/>
</function>
<function name='CFCharacterSetCreateWithCharactersInRange'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFRange' name='theRange' type64='{_CFRange=qq}'/>
<retval already_retained='true' declared_type64='CFCharacterSetRef' type64='^{__CFCharacterSet=}'/>
</function>
<function name='CFCharacterSetCreateWithCharactersInString'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFCharacterSetRef' type64='^{__CFCharacterSet=}'/>
</function>
<function name='CFCharacterSetGetPredefined'>
<arg declared_type64='CFCharacterSetPredefinedSet' name='theSetIdentifier' type64='q'/>
<retval declared_type64='CFCharacterSetRef' type64='^{__CFCharacterSet=}'/>
</function>
<function name='CFCharacterSetGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFCharacterSetHasMemberInPlane'>
<arg declared_type64='CFCharacterSetRef' name='theSet' type64='^{__CFCharacterSet=}'/>
<arg declared_type64='CFIndex' name='thePlane' type64='q'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFCharacterSetIntersect'>
<arg declared_type64='CFMutableCharacterSetRef' name='theSet' type64='^{__CFCharacterSet=}'/>
<arg declared_type64='CFCharacterSetRef' name='theOtherSet' type64='^{__CFCharacterSet=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFCharacterSetInvert'>
<arg declared_type64='CFMutableCharacterSetRef' name='theSet' type64='^{__CFCharacterSet=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFCharacterSetIsCharacterMember'>
<arg declared_type64='CFCharacterSetRef' name='theSet' type64='^{__CFCharacterSet=}'/>
<arg declared_type64='UniChar' name='theChar' type64='S'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFCharacterSetIsLongCharacterMember'>
<arg declared_type64='CFCharacterSetRef' name='theSet' type64='^{__CFCharacterSet=}'/>
<arg declared_type64='UTF32Char' name='theChar' type64='I'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFCharacterSetIsSupersetOfSet'>
<arg declared_type64='CFCharacterSetRef' name='theSet' type64='^{__CFCharacterSet=}'/>
<arg declared_type64='CFCharacterSetRef' name='theOtherset' type64='^{__CFCharacterSet=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFCharacterSetRemoveCharactersInRange'>
<arg declared_type64='CFMutableCharacterSetRef' name='theSet' type64='^{__CFCharacterSet=}'/>
<arg declared_type64='CFRange' name='theRange' type64='{_CFRange=qq}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFCharacterSetRemoveCharactersInString'>
<arg declared_type64='CFMutableCharacterSetRef' name='theSet' type64='^{__CFCharacterSet=}'/>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFCharacterSetUnion'>
<arg declared_type64='CFMutableCharacterSetRef' name='theSet' type64='^{__CFCharacterSet=}'/>
<arg declared_type64='CFCharacterSetRef' name='theOtherSet' type64='^{__CFCharacterSet=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function inline='true' name='CFConvertDoubleHostToSwapped'>
<arg declared_type64='double' name='arg' type64='d'/>
<retval declared_type64='CFSwappedFloat64' type64='{_CFSwappedFloat64=Q}'/>
</function>
<function inline='true' name='CFConvertDoubleSwappedToHost'>
<arg declared_type64='CFSwappedFloat64' name='arg' type64='{_CFSwappedFloat64=Q}'/>
<retval declared_type64='double' type64='d'/>
</function>
<function inline='true' name='CFConvertFloat32HostToSwapped'>
<arg declared_type64='Float32' name='arg' type64='f'/>
<retval declared_type64='CFSwappedFloat32' type64='{_CFSwappedFloat32=I}'/>
</function>
<function inline='true' name='CFConvertFloat32SwappedToHost'>
<arg declared_type64='CFSwappedFloat32' name='arg' type64='{_CFSwappedFloat32=I}'/>
<retval declared_type64='Float32' type64='f'/>
</function>
<function inline='true' name='CFConvertFloat64HostToSwapped'>
<arg declared_type64='Float64' name='arg' type64='d'/>
<retval declared_type64='CFSwappedFloat64' type64='{_CFSwappedFloat64=Q}'/>
</function>
<function inline='true' name='CFConvertFloat64SwappedToHost'>
<arg declared_type64='CFSwappedFloat64' name='arg' type64='{_CFSwappedFloat64=Q}'/>
<retval declared_type64='Float64' type64='d'/>
</function>
<function inline='true' name='CFConvertFloatHostToSwapped'>
<arg declared_type64='float' name='arg' type64='f'/>
<retval declared_type64='CFSwappedFloat32' type64='{_CFSwappedFloat32=I}'/>
</function>
<function inline='true' name='CFConvertFloatSwappedToHost'>
<arg declared_type64='CFSwappedFloat32' name='arg' type64='{_CFSwappedFloat32=I}'/>
<retval declared_type64='float' type64='f'/>
</function>
<function name='CFCopyDescription'>
<arg declared_type64='CFTypeRef' name='cf' type64='@'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFCopyHomeDirectoryURL'>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFCopyTypeIDDescription'>
<arg declared_type64='CFTypeID' name='type_id' type64='Q'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFDataAppendBytes'>
<arg declared_type64='CFMutableDataRef' name='theData' type64='^{__CFData=}'/>
<arg const='true' declared_type64='UInt8*' name='bytes' type64='*'/>
<arg declared_type64='CFIndex' name='length' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFDataCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='UInt8*' name='bytes' type64='*'/>
<arg declared_type64='CFIndex' name='length' type64='q'/>
<retval already_retained='true' declared_type64='CFDataRef' type64='^{__CFData=}'/>
</function>
<function name='CFDataCreateCopy'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFDataRef' name='theData' type64='^{__CFData=}'/>
<retval already_retained='true' declared_type64='CFDataRef' type64='^{__CFData=}'/>
</function>
<function name='CFDataCreateMutable'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='capacity' type64='q'/>
<retval already_retained='true' declared_type64='CFMutableDataRef' type64='^{__CFData=}'/>
</function>
<function name='CFDataCreateMutableCopy'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='capacity' type64='q'/>
<arg declared_type64='CFDataRef' name='theData' type64='^{__CFData=}'/>
<retval already_retained='true' declared_type64='CFMutableDataRef' type64='^{__CFData=}'/>
</function>
<function name='CFDataCreateWithBytesNoCopy'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='UInt8*' name='bytes' type64='*'/>
<arg declared_type64='CFIndex' name='length' type64='q'/>
<arg declared_type64='CFAllocatorRef' name='bytesDeallocator' type64='^{__CFAllocator=}'/>
<retval already_retained='true' declared_type64='CFDataRef' type64='^{__CFData=}'/>
</function>
<function name='CFDataDeleteBytes'>
<arg declared_type64='CFMutableDataRef' name='theData' type64='^{__CFData=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFDataFind'>
<arg declared_type64='CFDataRef' name='theData' type64='^{__CFData=}'/>
<arg declared_type64='CFDataRef' name='dataToFind' type64='^{__CFData=}'/>
<arg declared_type64='CFRange' name='searchRange' type64='{_CFRange=qq}'/>
<arg declared_type64='CFDataSearchFlags' name='compareOptions' type64='Q'/>
<retval declared_type64='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CFDataGetBytePtr'>
<arg declared_type64='CFDataRef' name='theData' type64='^{__CFData=}'/>
<retval const='true' declared_type64='UInt8*' type64='*'/>
</function>
<function name='CFDataGetBytes'>
<arg declared_type64='CFDataRef' name='theData' type64='^{__CFData=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='UInt8*' name='buffer' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFDataGetLength'>
<arg declared_type64='CFDataRef' name='theData' type64='^{__CFData=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFDataGetMutableBytePtr'>
<arg declared_type64='CFMutableDataRef' name='theData' type64='^{__CFData=}'/>
<retval declared_type64='UInt8*' type64='*'/>
</function>
<function name='CFDataGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFDataIncreaseLength'>
<arg declared_type64='CFMutableDataRef' name='theData' type64='^{__CFData=}'/>
<arg declared_type64='CFIndex' name='extraLength' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFDataReplaceBytes'>
<arg declared_type64='CFMutableDataRef' name='theData' type64='^{__CFData=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg const='true' declared_type64='UInt8*' name='newBytes' type64='*'/>
<arg declared_type64='CFIndex' name='newLength' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFDataSetLength'>
<arg declared_type64='CFMutableDataRef' name='theData' type64='^{__CFData=}'/>
<arg declared_type64='CFIndex' name='length' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFDateCompare'>
<arg declared_type64='CFDateRef' name='theDate' type64='^{__CFDate=}'/>
<arg declared_type64='CFDateRef' name='otherDate' type64='^{__CFDate=}'/>
<arg declared_type64='void*' name='context' type64='^v'/>
<retval declared_type64='CFComparisonResult' type64='q'/>
</function>
<function name='CFDateCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFAbsoluteTime' name='at' type64='d'/>
<retval already_retained='true' declared_type64='CFDateRef' type64='^{__CFDate=}'/>
</function>
<function name='CFDateFormatterCopyProperty'>
<arg declared_type64='CFDateFormatterRef' name='formatter' type64='^{__CFDateFormatter=}'/>
<arg declared_type64='CFStringRef' name='key' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFTypeRef' type64='@'/>
</function>
<function name='CFDateFormatterCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFLocaleRef' name='locale' type64='^{__CFLocale=}'/>
<arg declared_type64='CFDateFormatterStyle' name='dateStyle' type64='q'/>
<arg declared_type64='CFDateFormatterStyle' name='timeStyle' type64='q'/>
<retval already_retained='true' declared_type64='CFDateFormatterRef' type64='^{__CFDateFormatter=}'/>
</function>
<function name='CFDateFormatterCreateDateFormatFromTemplate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='tmplate' type64='^{__CFString=}'/>
<arg declared_type64='CFOptionFlags' name='options' type64='Q'/>
<arg declared_type64='CFLocaleRef' name='locale' type64='^{__CFLocale=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFDateFormatterCreateDateFromString'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFDateFormatterRef' name='formatter' type64='^{__CFDateFormatter=}'/>
<arg declared_type64='CFStringRef' name='string' type64='^{__CFString=}'/>
<arg declared_type64='CFRange*' name='rangep' type64='^{_CFRange=qq}'/>
<retval already_retained='true' declared_type64='CFDateRef' type64='^{__CFDate=}'/>
</function>
<function name='CFDateFormatterCreateStringWithAbsoluteTime'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFDateFormatterRef' name='formatter' type64='^{__CFDateFormatter=}'/>
<arg declared_type64='CFAbsoluteTime' name='at' type64='d'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFDateFormatterCreateStringWithDate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFDateFormatterRef' name='formatter' type64='^{__CFDateFormatter=}'/>
<arg declared_type64='CFDateRef' name='date' type64='^{__CFDate=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFDateFormatterGetAbsoluteTimeFromString'>
<arg declared_type64='CFDateFormatterRef' name='formatter' type64='^{__CFDateFormatter=}'/>
<arg declared_type64='CFStringRef' name='string' type64='^{__CFString=}'/>
<arg declared_type64='CFRange*' name='rangep' type64='^{_CFRange=qq}'/>
<arg declared_type64='CFAbsoluteTime*' name='atp' type64='^d'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFDateFormatterGetDateStyle'>
<arg declared_type64='CFDateFormatterRef' name='formatter' type64='^{__CFDateFormatter=}'/>
<retval declared_type64='CFDateFormatterStyle' type64='q'/>
</function>
<function name='CFDateFormatterGetFormat'>
<arg declared_type64='CFDateFormatterRef' name='formatter' type64='^{__CFDateFormatter=}'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFDateFormatterGetLocale'>
<arg declared_type64='CFDateFormatterRef' name='formatter' type64='^{__CFDateFormatter=}'/>
<retval declared_type64='CFLocaleRef' type64='^{__CFLocale=}'/>
</function>
<function name='CFDateFormatterGetTimeStyle'>
<arg declared_type64='CFDateFormatterRef' name='formatter' type64='^{__CFDateFormatter=}'/>
<retval declared_type64='CFDateFormatterStyle' type64='q'/>
</function>
<function name='CFDateFormatterGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFDateFormatterSetFormat'>
<arg declared_type64='CFDateFormatterRef' name='formatter' type64='^{__CFDateFormatter=}'/>
<arg declared_type64='CFStringRef' name='formatString' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFDateFormatterSetProperty'>
<arg declared_type64='CFDateFormatterRef' name='formatter' type64='^{__CFDateFormatter=}'/>
<arg declared_type64='CFStringRef' name='key' type64='^{__CFString=}'/>
<arg declared_type64='CFTypeRef' name='value' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFDateGetAbsoluteTime'>
<arg declared_type64='CFDateRef' name='theDate' type64='^{__CFDate=}'/>
<retval declared_type64='CFAbsoluteTime' type64='d'/>
</function>
<function name='CFDateGetTimeIntervalSinceDate'>
<arg declared_type64='CFDateRef' name='theDate' type64='^{__CFDate=}'/>
<arg declared_type64='CFDateRef' name='otherDate' type64='^{__CFDate=}'/>
<retval declared_type64='CFTimeInterval' type64='d'/>
</function>
<function name='CFDateGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFDictionaryAddValue'>
<arg declared_type64='CFMutableDictionaryRef' name='theDict' type64='^{__CFDictionary=}'/>
<arg const='true' declared_type64='void*' name='key' type64='^v'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFDictionaryApplyFunction'>
<arg declared_type64='CFDictionaryRef' name='theDict' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFDictionaryApplierFunction' function_pointer='true' name='applier' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='void*' name='context' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFDictionaryContainsKey'>
<arg declared_type64='CFDictionaryRef' name='theDict' type64='^{__CFDictionary=}'/>
<arg const='true' declared_type64='void*' name='key' type64='^v'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFDictionaryContainsValue'>
<arg declared_type64='CFDictionaryRef' name='theDict' type64='^{__CFDictionary=}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFDictionaryCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='void**' name='keys' type64='^^v'/>
<arg const='true' declared_type64='void**' name='values' type64='^^v'/>
<arg declared_type64='CFIndex' name='numValues' type64='q'/>
<arg const='true' declared_type64='CFDictionaryKeyCallBacks*' name='keyCallBacks' type64='^{_CFDictionaryKeyCallBacks=q^?^?^?^?^?}'/>
<arg const='true' declared_type64='CFDictionaryValueCallBacks*' name='valueCallBacks' type64='^{_CFDictionaryValueCallBacks=q^?^?^?^?}'/>
<retval already_retained='true' declared_type64='CFDictionaryRef' type64='^{__CFDictionary=}'/>
</function>
<function name='CFDictionaryCreateCopy'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFDictionaryRef' name='theDict' type64='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type64='CFDictionaryRef' type64='^{__CFDictionary=}'/>
</function>
<function name='CFDictionaryCreateMutable'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='capacity' type64='q'/>
<arg const='true' declared_type64='CFDictionaryKeyCallBacks*' name='keyCallBacks' type64='^{_CFDictionaryKeyCallBacks=q^?^?^?^?^?}'/>
<arg const='true' declared_type64='CFDictionaryValueCallBacks*' name='valueCallBacks' type64='^{_CFDictionaryValueCallBacks=q^?^?^?^?}'/>
<retval already_retained='true' declared_type64='CFMutableDictionaryRef' type64='^{__CFDictionary=}'/>
</function>
<function name='CFDictionaryCreateMutableCopy'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='capacity' type64='q'/>
<arg declared_type64='CFDictionaryRef' name='theDict' type64='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type64='CFMutableDictionaryRef' type64='^{__CFDictionary=}'/>
</function>
<function name='CFDictionaryGetCount'>
<arg declared_type64='CFDictionaryRef' name='theDict' type64='^{__CFDictionary=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFDictionaryGetCountOfKey'>
<arg declared_type64='CFDictionaryRef' name='theDict' type64='^{__CFDictionary=}'/>
<arg const='true' declared_type64='void*' name='key' type64='^v'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFDictionaryGetCountOfValue'>
<arg declared_type64='CFDictionaryRef' name='theDict' type64='^{__CFDictionary=}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFDictionaryGetKeysAndValues'>
<arg declared_type64='CFDictionaryRef' name='theDict' type64='^{__CFDictionary=}'/>
<arg const='true' declared_type64='void**' name='keys' type64='^^v'/>
<arg const='true' declared_type64='void**' name='values' type64='^^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFDictionaryGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFDictionaryGetValue'>
<arg declared_type64='CFDictionaryRef' name='theDict' type64='^{__CFDictionary=}'/>
<arg const='true' declared_type64='void*' name='key' type64='^v'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</function>
<function name='CFDictionaryGetValueIfPresent'>
<arg declared_type64='CFDictionaryRef' name='theDict' type64='^{__CFDictionary=}'/>
<arg const='true' declared_type64='void*' name='key' type64='^v'/>
<arg const='true' declared_type64='void**' name='value' type64='^^v'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFDictionaryRemoveAllValues'>
<arg declared_type64='CFMutableDictionaryRef' name='theDict' type64='^{__CFDictionary=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFDictionaryRemoveValue'>
<arg declared_type64='CFMutableDictionaryRef' name='theDict' type64='^{__CFDictionary=}'/>
<arg const='true' declared_type64='void*' name='key' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFDictionaryReplaceValue'>
<arg declared_type64='CFMutableDictionaryRef' name='theDict' type64='^{__CFDictionary=}'/>
<arg const='true' declared_type64='void*' name='key' type64='^v'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFDictionarySetValue'>
<arg declared_type64='CFMutableDictionaryRef' name='theDict' type64='^{__CFDictionary=}'/>
<arg const='true' declared_type64='void*' name='key' type64='^v'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFEqual'>
<arg declared_type64='CFTypeRef' name='cf1' type64='@'/>
<arg declared_type64='CFTypeRef' name='cf2' type64='@'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFErrorCopyDescription'>
<arg declared_type64='CFErrorRef' name='err' type64='^{__CFError=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFErrorCopyFailureReason'>
<arg declared_type64='CFErrorRef' name='err' type64='^{__CFError=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFErrorCopyRecoverySuggestion'>
<arg declared_type64='CFErrorRef' name='err' type64='^{__CFError=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFErrorCopyUserInfo'>
<arg declared_type64='CFErrorRef' name='err' type64='^{__CFError=}'/>
<retval already_retained='true' declared_type64='CFDictionaryRef' type64='^{__CFDictionary=}'/>
</function>
<function name='CFErrorCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='domain' type64='^{__CFString=}'/>
<arg declared_type64='CFIndex' name='code' type64='q'/>
<arg declared_type64='CFDictionaryRef' name='userInfo' type64='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type64='CFErrorRef' type64='^{__CFError=}'/>
</function>
<function name='CFErrorCreateWithUserInfoKeysAndValues'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='domain' type64='^{__CFString=}'/>
<arg declared_type64='CFIndex' name='code' type64='q'/>
<arg const='true' declared_type64='void **' name='userInfoKeys' type64='^^v'/>
<arg const='true' declared_type64='void **' name='userInfoValues' type64='^^v'/>
<arg declared_type64='CFIndex' name='numUserInfoValues' type64='q'/>
<retval already_retained='true' declared_type64='CFErrorRef' type64='^{__CFError=}'/>
</function>
<function name='CFErrorGetCode'>
<arg declared_type64='CFErrorRef' name='err' type64='^{__CFError=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFErrorGetDomain'>
<arg declared_type64='CFErrorRef' name='err' type64='^{__CFError=}'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFErrorGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFFileDescriptorCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFFileDescriptorNativeDescriptor' name='fd' type64='i'/>
<arg declared_type64='Boolean' name='closeOnInvalidate' type64='B'/>
<arg declared_type64='CFFileDescriptorCallBack' function_pointer='true' name='callout' type64='^?'>
<arg declared_type64='CFFileDescriptorRef' type64='^{__CFFileDescriptor=}'/>
<arg declared_type64='CFOptionFlags' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg const='true' declared_type64='CFFileDescriptorContext*' name='context' type64='^{_CFFileDescriptorContext=q^v^?^?^?}'/>
<retval already_retained='true' declared_type64='CFFileDescriptorRef' type64='^{__CFFileDescriptor=}'/>
</function>
<function name='CFFileDescriptorCreateRunLoopSource'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFFileDescriptorRef' name='f' type64='^{__CFFileDescriptor=}'/>
<arg declared_type64='CFIndex' name='order' type64='q'/>
<retval already_retained='true' declared_type64='CFRunLoopSourceRef' type64='^{__CFRunLoopSource=}'/>
</function>
<function name='CFFileDescriptorDisableCallBacks'>
<arg declared_type64='CFFileDescriptorRef' name='f' type64='^{__CFFileDescriptor=}'/>
<arg declared_type64='CFOptionFlags' name='callBackTypes' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFFileDescriptorEnableCallBacks'>
<arg declared_type64='CFFileDescriptorRef' name='f' type64='^{__CFFileDescriptor=}'/>
<arg declared_type64='CFOptionFlags' name='callBackTypes' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFFileDescriptorGetContext'>
<arg declared_type64='CFFileDescriptorRef' name='f' type64='^{__CFFileDescriptor=}'/>
<arg declared_type64='CFFileDescriptorContext*' name='context' type64='^{_CFFileDescriptorContext=q^v^?^?^?}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFFileDescriptorGetNativeDescriptor'>
<arg declared_type64='CFFileDescriptorRef' name='f' type64='^{__CFFileDescriptor=}'/>
<retval declared_type64='CFFileDescriptorNativeDescriptor' type64='i'/>
</function>
<function name='CFFileDescriptorGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFFileDescriptorInvalidate'>
<arg declared_type64='CFFileDescriptorRef' name='f' type64='^{__CFFileDescriptor=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFFileDescriptorIsValid'>
<arg declared_type64='CFFileDescriptorRef' name='f' type64='^{__CFFileDescriptor=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFFileSecurityClearProperties'>
<arg declared_type64='CFFileSecurityRef' name='fileSec' type64='^{__CFFileSecurity=}'/>
<arg declared_type64='CFFileSecurityClearOptions' name='clearPropertyMask' type64='Q'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFFileSecurityCopyAccessControlList'>
<arg declared_type64='CFFileSecurityRef' name='fileSec' type64='^{__CFFileSecurity=}'/>
<arg declared_type64='acl_t*' name='accessControlList' type64='^^{_acl}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFFileSecurityCopyGroupUUID'>
<arg declared_type64='CFFileSecurityRef' name='fileSec' type64='^{__CFFileSecurity=}'/>
<arg declared_type64='CFUUIDRef*' name='groupUUID' type64='^^{__CFUUID}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFFileSecurityCopyOwnerUUID'>
<arg declared_type64='CFFileSecurityRef' name='fileSec' type64='^{__CFFileSecurity=}'/>
<arg declared_type64='CFUUIDRef*' name='ownerUUID' type64='^^{__CFUUID}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFFileSecurityCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<retval already_retained='true' declared_type64='CFFileSecurityRef' type64='^{__CFFileSecurity=}'/>
</function>
<function name='CFFileSecurityCreateCopy'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFFileSecurityRef' name='fileSec' type64='^{__CFFileSecurity=}'/>
<retval already_retained='true' declared_type64='CFFileSecurityRef' type64='^{__CFFileSecurity=}'/>
</function>
<function name='CFFileSecurityGetGroup'>
<arg declared_type64='CFFileSecurityRef' name='fileSec' type64='^{__CFFileSecurity=}'/>
<arg declared_type64='gid_t*' name='group' type64='^I'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFFileSecurityGetMode'>
<arg declared_type64='CFFileSecurityRef' name='fileSec' type64='^{__CFFileSecurity=}'/>
<arg declared_type64='mode_t*' name='mode' type64='^S'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFFileSecurityGetOwner'>
<arg declared_type64='CFFileSecurityRef' name='fileSec' type64='^{__CFFileSecurity=}'/>
<arg declared_type64='uid_t*' name='owner' type64='^I'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFFileSecurityGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFFileSecuritySetAccessControlList'>
<arg declared_type64='CFFileSecurityRef' name='fileSec' type64='^{__CFFileSecurity=}'/>
<arg declared_type64='acl_t' name='accessControlList' type64='^{_acl=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFFileSecuritySetGroup'>
<arg declared_type64='CFFileSecurityRef' name='fileSec' type64='^{__CFFileSecurity=}'/>
<arg declared_type64='gid_t' name='group' type64='I'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFFileSecuritySetGroupUUID'>
<arg declared_type64='CFFileSecurityRef' name='fileSec' type64='^{__CFFileSecurity=}'/>
<arg declared_type64='CFUUIDRef' name='groupUUID' type64='^{__CFUUID=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFFileSecuritySetMode'>
<arg declared_type64='CFFileSecurityRef' name='fileSec' type64='^{__CFFileSecurity=}'/>
<arg declared_type64='mode_t' name='mode' type64='S'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFFileSecuritySetOwner'>
<arg declared_type64='CFFileSecurityRef' name='fileSec' type64='^{__CFFileSecurity=}'/>
<arg declared_type64='uid_t' name='owner' type64='I'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFFileSecuritySetOwnerUUID'>
<arg declared_type64='CFFileSecurityRef' name='fileSec' type64='^{__CFFileSecurity=}'/>
<arg declared_type64='CFUUIDRef' name='ownerUUID' type64='^{__CFUUID=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFGetAllocator'>
<arg declared_type64='CFTypeRef' name='cf' type64='@'/>
<retval declared_type64='CFAllocatorRef' type64='^{__CFAllocator=}'/>
</function>
<function name='CFGetRetainCount'>
<arg declared_type64='CFTypeRef' name='cf' type64='@'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFGetTypeID'>
<arg declared_type64='CFTypeRef' name='cf' type64='@'/>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFGregorianDateGetAbsoluteTime'>
<arg declared_type64='CFGregorianDate' name='gdate' type64='{_CFGregorianDate=iccccd}'/>
<arg declared_type64='CFTimeZoneRef' name='tz' type64='^{__CFTimeZone=}'/>
<retval declared_type64='CFAbsoluteTime' type64='d'/>
</function>
<function name='CFGregorianDateIsValid'>
<arg declared_type64='CFGregorianDate' name='gdate' type64='{_CFGregorianDate=iccccd}'/>
<arg declared_type64='CFOptionFlags' name='unitFlags' type64='Q'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFHash'>
<arg declared_type64='CFTypeRef' name='cf' type64='@'/>
<retval declared_type64='CFHashCode' type64='Q'/>
</function>
<function name='CFLocaleCopyAvailableLocaleIdentifiers'>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFLocaleCopyCommonISOCurrencyCodes'>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFLocaleCopyCurrent'>
<retval already_retained='true' declared_type64='CFLocaleRef' type64='^{__CFLocale=}'/>
</function>
<function name='CFLocaleCopyDisplayNameForPropertyValue'>
<arg declared_type64='CFLocaleRef' name='displayLocale' type64='^{__CFLocale=}'/>
<arg declared_type64='CFStringRef' name='key' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='value' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFLocaleCopyISOCountryCodes'>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFLocaleCopyISOCurrencyCodes'>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFLocaleCopyISOLanguageCodes'>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFLocaleCopyPreferredLanguages'>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFLocaleCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='localeIdentifier' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFLocaleRef' type64='^{__CFLocale=}'/>
</function>
<function name='CFLocaleCreateCanonicalLanguageIdentifierFromString'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='localeIdentifier' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='LangCode' name='lcode' type64='s'/>
<arg declared_type64='RegionCode' name='rcode' type64='s'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFLocaleCreateCanonicalLocaleIdentifierFromString'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='localeIdentifier' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFLocaleCreateComponentsFromLocaleIdentifier'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='localeID' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFDictionaryRef' type64='^{__CFDictionary=}'/>
</function>
<function name='CFLocaleCreateCopy'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFLocaleRef' name='locale' type64='^{__CFLocale=}'/>
<retval already_retained='true' declared_type64='CFLocaleRef' type64='^{__CFLocale=}'/>
</function>
<function name='CFLocaleCreateLocaleIdentifierFromComponents'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFDictionaryRef' name='dictionary' type64='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='uint32_t' name='lcid' type64='I'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFLocaleGetIdentifier'>
<arg declared_type64='CFLocaleRef' name='locale' type64='^{__CFLocale=}'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFLocaleGetLanguageCharacterDirection'>
<arg declared_type64='CFStringRef' name='isoLangCode' type64='^{__CFString=}'/>
<retval declared_type64='CFLocaleLanguageDirection' type64='q'/>
</function>
<function name='CFLocaleGetLanguageLineDirection'>
<arg declared_type64='CFStringRef' name='isoLangCode' type64='^{__CFString=}'/>
<retval declared_type64='CFLocaleLanguageDirection' type64='q'/>
</function>
<function name='CFLocaleGetSystem'>
<retval declared_type64='CFLocaleRef' type64='^{__CFLocale=}'/>
</function>
<function name='CFLocaleGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFLocaleGetValue'>
<arg declared_type64='CFLocaleRef' name='locale' type64='^{__CFLocale=}'/>
<arg declared_type64='CFStringRef' name='key' type64='^{__CFString=}'/>
<retval declared_type64='CFTypeRef' type64='@'/>
</function>
<function name='CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier'>
<arg declared_type64='CFStringRef' name='localeIdentifier' type64='^{__CFString=}'/>
<retval declared_type64='uint32_t' type64='I'/>
</function>
<function name='CFMachPortCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFMachPortCallBack' function_pointer='true' name='callout' type64='^?'>
<arg declared_type64='CFMachPortRef' type64='^{__CFMachPort=}'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='CFIndex' type64='q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='CFMachPortContext*' name='context' type64='^{_CFMachPortContext=q^v^?^?^?}'/>
<arg declared_type64='Boolean*' name='shouldFreeInfo' type64='^B'/>
<retval already_retained='true' declared_type64='CFMachPortRef' type64='^{__CFMachPort=}'/>
</function>
<function name='CFMachPortCreateRunLoopSource'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFMachPortRef' name='port' type64='^{__CFMachPort=}'/>
<arg declared_type64='CFIndex' name='order' type64='q'/>
<retval already_retained='true' declared_type64='CFRunLoopSourceRef' type64='^{__CFRunLoopSource=}'/>
</function>
<function name='CFMachPortCreateWithPort'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='mach_port_t' name='portNum' type64='I'/>
<arg declared_type64='CFMachPortCallBack' function_pointer='true' name='callout' type64='^?'>
<arg declared_type64='CFMachPortRef' type64='^{__CFMachPort=}'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='CFIndex' type64='q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='CFMachPortContext*' name='context' type64='^{_CFMachPortContext=q^v^?^?^?}'/>
<arg declared_type64='Boolean*' name='shouldFreeInfo' type64='^B'/>
<retval already_retained='true' declared_type64='CFMachPortRef' type64='^{__CFMachPort=}'/>
</function>
<function name='CFMachPortGetContext'>
<arg declared_type64='CFMachPortRef' name='port' type64='^{__CFMachPort=}'/>
<arg declared_type64='CFMachPortContext*' name='context' type64='^{_CFMachPortContext=q^v^?^?^?}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFMachPortGetInvalidationCallBack'>
<arg declared_type64='CFMachPortRef' name='port' type64='^{__CFMachPort=}'/>
<retval declared_type64='CFMachPortInvalidationCallBack' function_pointer='true' type64='^?'>
<arg declared_type64='CFMachPortRef' type64='^{__CFMachPort=}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</retval>
</function>
<function name='CFMachPortGetPort'>
<arg declared_type64='CFMachPortRef' name='port' type64='^{__CFMachPort=}'/>
<retval declared_type64='mach_port_t' type64='I'/>
</function>
<function name='CFMachPortGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFMachPortInvalidate'>
<arg declared_type64='CFMachPortRef' name='port' type64='^{__CFMachPort=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFMachPortIsValid'>
<arg declared_type64='CFMachPortRef' name='port' type64='^{__CFMachPort=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFMachPortSetInvalidationCallBack'>
<arg declared_type64='CFMachPortRef' name='port' type64='^{__CFMachPort=}'/>
<arg declared_type64='CFMachPortInvalidationCallBack' function_pointer='true' name='callout' type64='^?'>
<arg declared_type64='CFMachPortRef' type64='^{__CFMachPort=}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFMakeCollectable'>
<arg declared_type64='CFTypeRef' name='cf' type64='@'/>
<retval declared_type64='CFTypeRef' type64='@'/>
</function>
<function name='CFMessagePortCreateLocal'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='name' type64='^{__CFString=}'/>
<arg declared_type64='CFMessagePortCallBack' function_pointer='true' name='callout' type64='^?'>
<arg declared_type64='CFMessagePortRef' type64='^{__CFMessagePort=}'/>
<arg declared_type64='SInt32' type64='i'/>
<arg declared_type64='CFDataRef' type64='^{__CFData=}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='CFDataRef' type64='^{__CFData=}'/>
</arg>
<arg declared_type64='CFMessagePortContext*' name='context' type64='^{_CFMessagePortContext=q^v^?^?^?}'/>
<arg declared_type64='Boolean*' name='shouldFreeInfo' type64='^B'/>
<retval already_retained='true' declared_type64='CFMessagePortRef' type64='^{__CFMessagePort=}'/>
</function>
<function name='CFMessagePortCreateRemote'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='name' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFMessagePortRef' type64='^{__CFMessagePort=}'/>
</function>
<function name='CFMessagePortCreateRunLoopSource'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFMessagePortRef' name='local' type64='^{__CFMessagePort=}'/>
<arg declared_type64='CFIndex' name='order' type64='q'/>
<retval already_retained='true' declared_type64='CFRunLoopSourceRef' type64='^{__CFRunLoopSource=}'/>
</function>
<function name='CFMessagePortGetContext'>
<arg declared_type64='CFMessagePortRef' name='ms' type64='^{__CFMessagePort=}'/>
<arg declared_type64='CFMessagePortContext*' name='context' type64='^{_CFMessagePortContext=q^v^?^?^?}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFMessagePortGetInvalidationCallBack'>
<arg declared_type64='CFMessagePortRef' name='ms' type64='^{__CFMessagePort=}'/>
<retval declared_type64='CFMessagePortInvalidationCallBack' function_pointer='true' type64='^?'>
<arg declared_type64='CFMessagePortRef' type64='^{__CFMessagePort=}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</retval>
</function>
<function name='CFMessagePortGetName'>
<arg declared_type64='CFMessagePortRef' name='ms' type64='^{__CFMessagePort=}'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFMessagePortGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFMessagePortInvalidate'>
<arg declared_type64='CFMessagePortRef' name='ms' type64='^{__CFMessagePort=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFMessagePortIsRemote'>
<arg declared_type64='CFMessagePortRef' name='ms' type64='^{__CFMessagePort=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFMessagePortIsValid'>
<arg declared_type64='CFMessagePortRef' name='ms' type64='^{__CFMessagePort=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFMessagePortSendRequest'>
<arg declared_type64='CFMessagePortRef' name='remote' type64='^{__CFMessagePort=}'/>
<arg declared_type64='SInt32' name='msgid' type64='i'/>
<arg declared_type64='CFDataRef' name='data' type64='^{__CFData=}'/>
<arg declared_type64='CFTimeInterval' name='sendTimeout' type64='d'/>
<arg declared_type64='CFTimeInterval' name='rcvTimeout' type64='d'/>
<arg declared_type64='CFStringRef' name='replyMode' type64='^{__CFString=}'/>
<arg declared_type64='CFDataRef*' name='returnData' type64='^^{__CFData}'/>
<retval declared_type64='SInt32' type64='i'/>
</function>
<function name='CFMessagePortSetDispatchQueue'>
<arg declared_type64='CFMessagePortRef' name='ms' type64='^{__CFMessagePort=}'/>
<arg declared_type64='dispatch_queue_t' name='queue' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFMessagePortSetInvalidationCallBack'>
<arg declared_type64='CFMessagePortRef' name='ms' type64='^{__CFMessagePort=}'/>
<arg declared_type64='CFMessagePortInvalidationCallBack' function_pointer='true' name='callout' type64='^?'>
<arg declared_type64='CFMessagePortRef' type64='^{__CFMessagePort=}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFMessagePortSetName'>
<arg declared_type64='CFMessagePortRef' name='ms' type64='^{__CFMessagePort=}'/>
<arg declared_type64='CFStringRef' name='newName' type64='^{__CFString=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFNotificationCenterAddObserver'>
<arg declared_type64='CFNotificationCenterRef' name='center' type64='^{__CFNotificationCenter=}'/>
<arg const='true' declared_type64='void*' name='observer' type64='^v'/>
<arg declared_type64='CFNotificationCallback' function_pointer='true' name='callBack' type64='^?'>
<arg declared_type64='CFNotificationCenterRef' type64='^{__CFNotificationCenter=}'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='CFStringRef' type64='^{__CFString=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='CFDictionaryRef' type64='^{__CFDictionary=}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='CFStringRef' name='name' type64='^{__CFString=}'/>
<arg const='true' declared_type64='void*' name='object' type64='^v'/>
<arg declared_type64='CFNotificationSuspensionBehavior' name='suspensionBehavior' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFNotificationCenterGetDarwinNotifyCenter'>
<retval declared_type64='CFNotificationCenterRef' type64='^{__CFNotificationCenter=}'/>
</function>
<function name='CFNotificationCenterGetLocalCenter'>
<retval declared_type64='CFNotificationCenterRef' type64='^{__CFNotificationCenter=}'/>
</function>
<function name='CFNotificationCenterGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFNotificationCenterPostNotification'>
<arg declared_type64='CFNotificationCenterRef' name='center' type64='^{__CFNotificationCenter=}'/>
<arg declared_type64='CFStringRef' name='name' type64='^{__CFString=}'/>
<arg const='true' declared_type64='void*' name='object' type64='^v'/>
<arg declared_type64='CFDictionaryRef' name='userInfo' type64='^{__CFDictionary=}'/>
<arg declared_type64='Boolean' name='deliverImmediately' type64='B'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFNotificationCenterPostNotificationWithOptions'>
<arg declared_type64='CFNotificationCenterRef' name='center' type64='^{__CFNotificationCenter=}'/>
<arg declared_type64='CFStringRef' name='name' type64='^{__CFString=}'/>
<arg const='true' declared_type64='void*' name='object' type64='^v'/>
<arg declared_type64='CFDictionaryRef' name='userInfo' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFOptionFlags' name='options' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFNotificationCenterRemoveEveryObserver'>
<arg declared_type64='CFNotificationCenterRef' name='center' type64='^{__CFNotificationCenter=}'/>
<arg const='true' declared_type64='void*' name='observer' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFNotificationCenterRemoveObserver'>
<arg declared_type64='CFNotificationCenterRef' name='center' type64='^{__CFNotificationCenter=}'/>
<arg const='true' declared_type64='void*' name='observer' type64='^v'/>
<arg declared_type64='CFStringRef' name='name' type64='^{__CFString=}'/>
<arg const='true' declared_type64='void*' name='object' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFNullGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFNumberCompare'>
<arg declared_type64='CFNumberRef' name='number' type64='^{__CFNumber=}'/>
<arg declared_type64='CFNumberRef' name='otherNumber' type64='^{__CFNumber=}'/>
<arg declared_type64='void*' name='context' type64='^v'/>
<retval declared_type64='CFComparisonResult' type64='q'/>
</function>
<function name='CFNumberCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFNumberType' name='theType' type64='q'/>
<arg const='true' declared_type64='void*' name='valuePtr' type64='^v'/>
<retval already_retained='true' declared_type64='CFNumberRef' type64='^{__CFNumber=}'/>
</function>
<function name='CFNumberFormatterCopyProperty'>
<arg declared_type64='CFNumberFormatterRef' name='formatter' type64='^{__CFNumberFormatter=}'/>
<arg declared_type64='CFStringRef' name='key' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFTypeRef' type64='@'/>
</function>
<function name='CFNumberFormatterCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFLocaleRef' name='locale' type64='^{__CFLocale=}'/>
<arg declared_type64='CFNumberFormatterStyle' name='style' type64='q'/>
<retval already_retained='true' declared_type64='CFNumberFormatterRef' type64='^{__CFNumberFormatter=}'/>
</function>
<function name='CFNumberFormatterCreateNumberFromString'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFNumberFormatterRef' name='formatter' type64='^{__CFNumberFormatter=}'/>
<arg declared_type64='CFStringRef' name='string' type64='^{__CFString=}'/>
<arg declared_type64='CFRange*' name='rangep' type64='^{_CFRange=qq}'/>
<arg declared_type64='CFOptionFlags' name='options' type64='Q'/>
<retval already_retained='true' declared_type64='CFNumberRef' type64='^{__CFNumber=}'/>
</function>
<function name='CFNumberFormatterCreateStringWithNumber'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFNumberFormatterRef' name='formatter' type64='^{__CFNumberFormatter=}'/>
<arg declared_type64='CFNumberRef' name='number' type64='^{__CFNumber=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFNumberFormatterCreateStringWithValue'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFNumberFormatterRef' name='formatter' type64='^{__CFNumberFormatter=}'/>
<arg declared_type64='CFNumberType' name='numberType' type64='q'/>
<arg const='true' declared_type64='void*' name='valuePtr' type64='^v'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFNumberFormatterGetDecimalInfoForCurrencyCode'>
<arg declared_type64='CFStringRef' name='currencyCode' type64='^{__CFString=}'/>
<arg declared_type64='int32_t*' name='defaultFractionDigits' type64='^i'/>
<arg declared_type64='double*' name='roundingIncrement' type64='^d'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFNumberFormatterGetFormat'>
<arg declared_type64='CFNumberFormatterRef' name='formatter' type64='^{__CFNumberFormatter=}'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFNumberFormatterGetLocale'>
<arg declared_type64='CFNumberFormatterRef' name='formatter' type64='^{__CFNumberFormatter=}'/>
<retval declared_type64='CFLocaleRef' type64='^{__CFLocale=}'/>
</function>
<function name='CFNumberFormatterGetStyle'>
<arg declared_type64='CFNumberFormatterRef' name='formatter' type64='^{__CFNumberFormatter=}'/>
<retval declared_type64='CFNumberFormatterStyle' type64='q'/>
</function>
<function name='CFNumberFormatterGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFNumberFormatterGetValueFromString'>
<arg declared_type64='CFNumberFormatterRef' name='formatter' type64='^{__CFNumberFormatter=}'/>
<arg declared_type64='CFStringRef' name='string' type64='^{__CFString=}'/>
<arg declared_type64='CFRange*' name='rangep' type64='^{_CFRange=qq}'/>
<arg declared_type64='CFNumberType' name='numberType' type64='q'/>
<arg declared_type64='void*' name='valuePtr' type64='^v'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFNumberFormatterSetFormat'>
<arg declared_type64='CFNumberFormatterRef' name='formatter' type64='^{__CFNumberFormatter=}'/>
<arg declared_type64='CFStringRef' name='formatString' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFNumberFormatterSetProperty'>
<arg declared_type64='CFNumberFormatterRef' name='formatter' type64='^{__CFNumberFormatter=}'/>
<arg declared_type64='CFStringRef' name='key' type64='^{__CFString=}'/>
<arg declared_type64='CFTypeRef' name='value' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFNumberGetByteSize'>
<arg declared_type64='CFNumberRef' name='number' type64='^{__CFNumber=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFNumberGetType'>
<arg declared_type64='CFNumberRef' name='number' type64='^{__CFNumber=}'/>
<retval declared_type64='CFNumberType' type64='q'/>
</function>
<function name='CFNumberGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFNumberGetValue'>
<arg declared_type64='CFNumberRef' name='number' type64='^{__CFNumber=}'/>
<arg declared_type64='CFNumberType' name='theType' type64='q'/>
<arg declared_type64='void*' name='valuePtr' type64='^v'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFNumberIsFloatType'>
<arg declared_type64='CFNumberRef' name='number' type64='^{__CFNumber=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFPlugInAddInstanceForFactory'>
<arg declared_type64='CFUUIDRef' name='factoryID' type64='^{__CFUUID=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFPlugInCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFURLRef' name='plugInURL' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFPlugInRef' type64='^{__CFBundle=}'/>
</function>
<function name='CFPlugInFindFactoriesForPlugInType'>
<arg declared_type64='CFUUIDRef' name='typeUUID' type64='^{__CFUUID=}'/>
<retval declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFPlugInFindFactoriesForPlugInTypeInPlugIn'>
<arg declared_type64='CFUUIDRef' name='typeUUID' type64='^{__CFUUID=}'/>
<arg declared_type64='CFPlugInRef' name='plugIn' type64='^{__CFBundle=}'/>
<retval declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFPlugInGetBundle'>
<arg declared_type64='CFPlugInRef' name='plugIn' type64='^{__CFBundle=}'/>
<retval declared_type64='CFBundleRef' type64='^{__CFBundle=}'/>
</function>
<function name='CFPlugInGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFPlugInInstanceCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFUUIDRef' name='factoryUUID' type64='^{__CFUUID=}'/>
<arg declared_type64='CFUUIDRef' name='typeUUID' type64='^{__CFUUID=}'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='CFPlugInInstanceCreateWithInstanceDataSize'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='instanceDataSize' type64='q'/>
<arg declared_type64='CFPlugInInstanceDeallocateInstanceDataFunction' function_pointer='true' name='deallocateInstanceFunction' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='CFStringRef' name='factoryName' type64='^{__CFString=}'/>
<arg declared_type64='CFPlugInInstanceGetInterfaceFunction' function_pointer='true' name='getInterfaceFunction' type64='^?'>
<arg declared_type64='CFPlugInInstanceRef' type64='^{__CFPlugInInstance=}'/>
<arg declared_type64='CFStringRef' type64='^{__CFString=}'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='Boolean' type64='B'/>
</arg>
<retval already_retained='true' declared_type64='CFPlugInInstanceRef' type64='^{__CFPlugInInstance=}'/>
</function>
<function name='CFPlugInInstanceGetFactoryName'>
<arg declared_type64='CFPlugInInstanceRef' name='instance' type64='^{__CFPlugInInstance=}'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFPlugInInstanceGetInstanceData'>
<arg declared_type64='CFPlugInInstanceRef' name='instance' type64='^{__CFPlugInInstance=}'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='CFPlugInInstanceGetInterfaceFunctionTable'>
<arg declared_type64='CFPlugInInstanceRef' name='instance' type64='^{__CFPlugInInstance=}'/>
<arg declared_type64='CFStringRef' name='interfaceName' type64='^{__CFString=}'/>
<arg declared_type64='void**' name='ftbl' type64='^^v'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFPlugInInstanceGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFPlugInIsLoadOnDemand'>
<arg declared_type64='CFPlugInRef' name='plugIn' type64='^{__CFBundle=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFPlugInRegisterFactoryFunction'>
<arg declared_type64='CFUUIDRef' name='factoryUUID' type64='^{__CFUUID=}'/>
<arg declared_type64='CFPlugInFactoryFunction' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='CFAllocatorRef' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFUUIDRef' type64='^{__CFUUID=}'/>
<retval declared_type64='void*' type64='^v'/>
</arg>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFPlugInRegisterFactoryFunctionByName'>
<arg declared_type64='CFUUIDRef' name='factoryUUID' type64='^{__CFUUID=}'/>
<arg declared_type64='CFPlugInRef' name='plugIn' type64='^{__CFBundle=}'/>
<arg declared_type64='CFStringRef' name='functionName' type64='^{__CFString=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFPlugInRegisterPlugInType'>
<arg declared_type64='CFUUIDRef' name='factoryUUID' type64='^{__CFUUID=}'/>
<arg declared_type64='CFUUIDRef' name='typeUUID' type64='^{__CFUUID=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFPlugInRemoveInstanceForFactory'>
<arg declared_type64='CFUUIDRef' name='factoryID' type64='^{__CFUUID=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFPlugInSetLoadOnDemand'>
<arg declared_type64='CFPlugInRef' name='plugIn' type64='^{__CFBundle=}'/>
<arg declared_type64='Boolean' name='flag' type64='B'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFPlugInUnregisterFactory'>
<arg declared_type64='CFUUIDRef' name='factoryUUID' type64='^{__CFUUID=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFPlugInUnregisterPlugInType'>
<arg declared_type64='CFUUIDRef' name='factoryUUID' type64='^{__CFUUID=}'/>
<arg declared_type64='CFUUIDRef' name='typeUUID' type64='^{__CFUUID=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFPreferencesAddSuitePreferencesToApp'>
<arg declared_type64='CFStringRef' name='applicationID' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='suiteID' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFPreferencesAppSynchronize'>
<arg declared_type64='CFStringRef' name='applicationID' type64='^{__CFString=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFPreferencesAppValueIsForced'>
<arg declared_type64='CFStringRef' name='key' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='applicationID' type64='^{__CFString=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFPreferencesCopyAppValue'>
<arg declared_type64='CFStringRef' name='key' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='applicationID' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFPropertyListRef' type64='@'/>
</function>
<function name='CFPreferencesCopyApplicationList'>
<arg declared_type64='CFStringRef' name='userName' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='hostName' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFPreferencesCopyKeyList'>
<arg declared_type64='CFStringRef' name='applicationID' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='userName' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='hostName' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFPreferencesCopyMultiple'>
<arg declared_type64='CFArrayRef' name='keysToFetch' type64='^{__CFArray=}'/>
<arg declared_type64='CFStringRef' name='applicationID' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='userName' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='hostName' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFDictionaryRef' type64='^{__CFDictionary=}'/>
</function>
<function name='CFPreferencesCopyValue'>
<arg declared_type64='CFStringRef' name='key' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='applicationID' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='userName' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='hostName' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFPropertyListRef' type64='@'/>
</function>
<function name='CFPreferencesGetAppBooleanValue'>
<arg declared_type64='CFStringRef' name='key' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='applicationID' type64='^{__CFString=}'/>
<arg declared_type64='Boolean*' name='keyExistsAndHasValidFormat' type64='^B'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFPreferencesGetAppIntegerValue'>
<arg declared_type64='CFStringRef' name='key' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='applicationID' type64='^{__CFString=}'/>
<arg declared_type64='Boolean*' name='keyExistsAndHasValidFormat' type64='^B'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFPreferencesRemoveSuitePreferencesFromApp'>
<arg declared_type64='CFStringRef' name='applicationID' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='suiteID' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFPreferencesSetAppValue'>
<arg declared_type64='CFStringRef' name='key' type64='^{__CFString=}'/>
<arg declared_type64='CFPropertyListRef' name='value' type64='@'/>
<arg declared_type64='CFStringRef' name='applicationID' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFPreferencesSetMultiple'>
<arg declared_type64='CFDictionaryRef' name='keysToSet' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFArrayRef' name='keysToRemove' type64='^{__CFArray=}'/>
<arg declared_type64='CFStringRef' name='applicationID' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='userName' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='hostName' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFPreferencesSetValue'>
<arg declared_type64='CFStringRef' name='key' type64='^{__CFString=}'/>
<arg declared_type64='CFPropertyListRef' name='value' type64='@'/>
<arg declared_type64='CFStringRef' name='applicationID' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='userName' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='hostName' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFPreferencesSynchronize'>
<arg declared_type64='CFStringRef' name='applicationID' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='userName' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='hostName' type64='^{__CFString=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFPropertyListCreateData'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFPropertyListRef' name='propertyList' type64='@'/>
<arg declared_type64='CFPropertyListFormat' name='format' type64='q'/>
<arg declared_type64='CFOptionFlags' name='options' type64='Q'/>
<arg declared_type64='CFErrorRef*' name='error' type64='^^{__CFError}'/>
<retval already_retained='true' declared_type64='CFDataRef' type64='^{__CFData=}'/>
</function>
<function name='CFPropertyListCreateDeepCopy'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFPropertyListRef' name='propertyList' type64='@'/>
<arg declared_type64='CFOptionFlags' name='mutabilityOption' type64='Q'/>
<retval already_retained='true' declared_type64='CFPropertyListRef' type64='@'/>
</function>
<function name='CFPropertyListCreateFromStream'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFReadStreamRef' name='stream' type64='^{__CFReadStream=}'/>
<arg declared_type64='CFIndex' name='streamLength' type64='q'/>
<arg declared_type64='CFOptionFlags' name='mutabilityOption' type64='Q'/>
<arg declared_type64='CFPropertyListFormat*' name='format' type64='^q'/>
<arg declared_type64='CFStringRef*' name='errorString' type64='^^{__CFString}'/>
<retval already_retained='true' declared_type64='CFPropertyListRef' type64='@'/>
</function>
<function name='CFPropertyListCreateFromXMLData'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFDataRef' name='xmlData' type64='^{__CFData=}'/>
<arg declared_type64='CFOptionFlags' name='mutabilityOption' type64='Q'/>
<arg declared_type64='CFStringRef*' name='errorString' type64='^^{__CFString}'/>
<retval already_retained='true' declared_type64='CFPropertyListRef' type64='@'/>
</function>
<function name='CFPropertyListCreateWithData'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFDataRef' name='data' type64='^{__CFData=}'/>
<arg declared_type64='CFOptionFlags' name='options' type64='Q'/>
<arg declared_type64='CFPropertyListFormat*' name='format' type64='^q'/>
<arg declared_type64='CFErrorRef*' name='error' type64='^^{__CFError}'/>
<retval already_retained='true' declared_type64='CFPropertyListRef' type64='@'/>
</function>
<function name='CFPropertyListCreateWithStream'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFReadStreamRef' name='stream' type64='^{__CFReadStream=}'/>
<arg declared_type64='CFIndex' name='streamLength' type64='q'/>
<arg declared_type64='CFOptionFlags' name='options' type64='Q'/>
<arg declared_type64='CFPropertyListFormat*' name='format' type64='^q'/>
<arg declared_type64='CFErrorRef*' name='error' type64='^^{__CFError}'/>
<retval already_retained='true' declared_type64='CFPropertyListRef' type64='@'/>
</function>
<function name='CFPropertyListCreateXMLData'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFPropertyListRef' name='propertyList' type64='@'/>
<retval already_retained='true' declared_type64='CFDataRef' type64='^{__CFData=}'/>
</function>
<function name='CFPropertyListIsValid'>
<arg declared_type64='CFPropertyListRef' name='plist' type64='@'/>
<arg declared_type64='CFPropertyListFormat' name='format' type64='q'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFPropertyListWrite'>
<arg declared_type64='CFPropertyListRef' name='propertyList' type64='@'/>
<arg declared_type64='CFWriteStreamRef' name='stream' type64='^{__CFWriteStream=}'/>
<arg declared_type64='CFPropertyListFormat' name='format' type64='q'/>
<arg declared_type64='CFOptionFlags' name='options' type64='Q'/>
<arg declared_type64='CFErrorRef*' name='error' type64='^^{__CFError}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFPropertyListWriteToStream'>
<arg declared_type64='CFPropertyListRef' name='propertyList' type64='@'/>
<arg declared_type64='CFWriteStreamRef' name='stream' type64='^{__CFWriteStream=}'/>
<arg declared_type64='CFPropertyListFormat' name='format' type64='q'/>
<arg declared_type64='CFStringRef*' name='errorString' type64='^^{__CFString}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function inline='true' name='CFRangeMake'>
<arg declared_type64='CFIndex' name='loc' type64='q'/>
<arg declared_type64='CFIndex' name='len' type64='q'/>
<retval declared_type64='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CFReadStreamClose'>
<arg declared_type64='CFReadStreamRef' name='stream' type64='^{__CFReadStream=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFReadStreamCopyDispatchQueue'>
<arg declared_type64='CFReadStreamRef' name='stream' type64='^{__CFReadStream=}'/>
<retval declared_type64='dispatch_queue_t' type64='@'/>
</function>
<function name='CFReadStreamCopyError'>
<arg declared_type64='CFReadStreamRef' name='stream' type64='^{__CFReadStream=}'/>
<retval already_retained='true' declared_type64='CFErrorRef' type64='^{__CFError=}'/>
</function>
<function name='CFReadStreamCopyProperty'>
<arg declared_type64='CFReadStreamRef' name='stream' type64='^{__CFReadStream=}'/>
<arg declared_type64='CFStringRef' name='propertyName' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFTypeRef' type64='@'/>
</function>
<function name='CFReadStreamCreateWithBytesNoCopy'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='UInt8*' name='bytes' type64='*'/>
<arg declared_type64='CFIndex' name='length' type64='q'/>
<arg declared_type64='CFAllocatorRef' name='bytesDeallocator' type64='^{__CFAllocator=}'/>
<retval already_retained='true' declared_type64='CFReadStreamRef' type64='^{__CFReadStream=}'/>
</function>
<function name='CFReadStreamCreateWithFile'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFURLRef' name='fileURL' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFReadStreamRef' type64='^{__CFReadStream=}'/>
</function>
<function name='CFReadStreamGetBuffer'>
<arg declared_type64='CFReadStreamRef' name='stream' type64='^{__CFReadStream=}'/>
<arg declared_type64='CFIndex' name='maxBytesToRead' type64='q'/>
<arg declared_type64='CFIndex*' name='numBytesRead' type64='^q'/>
<retval const='true' declared_type64='UInt8*' type64='*'/>
</function>
<function name='CFReadStreamGetError'>
<arg declared_type64='CFReadStreamRef' name='stream' type64='^{__CFReadStream=}'/>
<retval declared_type64='CFStreamError' type64='{_CFStreamError=qi}'/>
</function>
<function name='CFReadStreamGetStatus'>
<arg declared_type64='CFReadStreamRef' name='stream' type64='^{__CFReadStream=}'/>
<retval declared_type64='CFStreamStatus' type64='q'/>
</function>
<function name='CFReadStreamGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFReadStreamHasBytesAvailable'>
<arg declared_type64='CFReadStreamRef' name='stream' type64='^{__CFReadStream=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFReadStreamOpen'>
<arg declared_type64='CFReadStreamRef' name='stream' type64='^{__CFReadStream=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFReadStreamRead'>
<arg declared_type64='CFReadStreamRef' name='stream' type64='^{__CFReadStream=}'/>
<arg declared_type64='UInt8*' name='buffer' type64='*'/>
<arg declared_type64='CFIndex' name='bufferLength' type64='q'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFReadStreamScheduleWithRunLoop'>
<arg declared_type64='CFReadStreamRef' name='stream' type64='^{__CFReadStream=}'/>
<arg declared_type64='CFRunLoopRef' name='runLoop' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFStringRef' name='runLoopMode' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFReadStreamSetClient'>
<arg declared_type64='CFReadStreamRef' name='stream' type64='^{__CFReadStream=}'/>
<arg declared_type64='CFOptionFlags' name='streamEvents' type64='Q'/>
<arg declared_type64='CFReadStreamClientCallBack' function_pointer='true' name='clientCB' type64='^?'>
<arg declared_type64='CFReadStreamRef' type64='^{__CFReadStream=}'/>
<arg declared_type64='CFStreamEventType' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='CFStreamClientContext*' name='clientContext' type64='^{_CFStreamClientContext=q^v^?^?^?}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFReadStreamSetDispatchQueue'>
<arg declared_type64='CFReadStreamRef' name='stream' type64='^{__CFReadStream=}'/>
<arg declared_type64='dispatch_queue_t' name='q' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFReadStreamSetProperty'>
<arg declared_type64='CFReadStreamRef' name='stream' type64='^{__CFReadStream=}'/>
<arg declared_type64='CFStringRef' name='propertyName' type64='^{__CFString=}'/>
<arg declared_type64='CFTypeRef' name='propertyValue' type64='@'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFReadStreamUnscheduleFromRunLoop'>
<arg declared_type64='CFReadStreamRef' name='stream' type64='^{__CFReadStream=}'/>
<arg declared_type64='CFRunLoopRef' name='runLoop' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFStringRef' name='runLoopMode' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRelease'>
<arg declared_type64='CFTypeRef' name='cf' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRetain'>
<arg declared_type64='CFTypeRef' name='cf' type64='@'/>
<retval declared_type64='CFTypeRef' type64='@'/>
</function>
<function name='CFRunLoopAddCommonMode'>
<arg declared_type64='CFRunLoopRef' name='rl' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFStringRef' name='mode' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRunLoopAddObserver'>
<arg declared_type64='CFRunLoopRef' name='rl' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFRunLoopObserverRef' name='observer' type64='^{__CFRunLoopObserver=}'/>
<arg declared_type64='CFStringRef' name='mode' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRunLoopAddSource'>
<arg declared_type64='CFRunLoopRef' name='rl' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFRunLoopSourceRef' name='source' type64='^{__CFRunLoopSource=}'/>
<arg declared_type64='CFStringRef' name='mode' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRunLoopAddTimer'>
<arg declared_type64='CFRunLoopRef' name='rl' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFRunLoopTimerRef' name='timer' type64='^{__CFRunLoopTimer=}'/>
<arg declared_type64='CFStringRef' name='mode' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRunLoopContainsObserver'>
<arg declared_type64='CFRunLoopRef' name='rl' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFRunLoopObserverRef' name='observer' type64='^{__CFRunLoopObserver=}'/>
<arg declared_type64='CFStringRef' name='mode' type64='^{__CFString=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFRunLoopContainsSource'>
<arg declared_type64='CFRunLoopRef' name='rl' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFRunLoopSourceRef' name='source' type64='^{__CFRunLoopSource=}'/>
<arg declared_type64='CFStringRef' name='mode' type64='^{__CFString=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFRunLoopContainsTimer'>
<arg declared_type64='CFRunLoopRef' name='rl' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFRunLoopTimerRef' name='timer' type64='^{__CFRunLoopTimer=}'/>
<arg declared_type64='CFStringRef' name='mode' type64='^{__CFString=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFRunLoopCopyAllModes'>
<arg declared_type64='CFRunLoopRef' name='rl' type64='^{__CFRunLoop=}'/>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFRunLoopCopyCurrentMode'>
<arg declared_type64='CFRunLoopRef' name='rl' type64='^{__CFRunLoop=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFRunLoopGetCurrent'>
<retval declared_type64='CFRunLoopRef' type64='^{__CFRunLoop=}'/>
</function>
<function name='CFRunLoopGetMain'>
<retval declared_type64='CFRunLoopRef' type64='^{__CFRunLoop=}'/>
</function>
<function name='CFRunLoopGetNextTimerFireDate'>
<arg declared_type64='CFRunLoopRef' name='rl' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFStringRef' name='mode' type64='^{__CFString=}'/>
<retval declared_type64='CFAbsoluteTime' type64='d'/>
</function>
<function name='CFRunLoopGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFRunLoopIsWaiting'>
<arg declared_type64='CFRunLoopRef' name='rl' type64='^{__CFRunLoop=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFRunLoopObserverCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFOptionFlags' name='activities' type64='Q'/>
<arg declared_type64='Boolean' name='repeats' type64='B'/>
<arg declared_type64='CFIndex' name='order' type64='q'/>
<arg declared_type64='CFRunLoopObserverCallBack' function_pointer='true' name='callout' type64='^?'>
<arg declared_type64='CFRunLoopObserverRef' type64='^{__CFRunLoopObserver=}'/>
<arg declared_type64='CFRunLoopActivity' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='CFRunLoopObserverContext*' name='context' type64='^{_CFRunLoopObserverContext=q^v^?^?^?}'/>
<retval already_retained='true' declared_type64='CFRunLoopObserverRef' type64='^{__CFRunLoopObserver=}'/>
</function>
<function name='CFRunLoopObserverCreateWithHandler'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFOptionFlags' name='activities' type64='Q'/>
<arg declared_type64='Boolean' name='repeats' type64='B'/>
<arg declared_type64='CFIndex' name='order' type64='q'/>
<arg declared_type64='void (^)(CFRunLoopObserverRef, CFRunLoopActivity)' function_pointer='true' name='block' type64='@?'>
<arg declared_type64='CFRunLoopObserverRef' type64='^{__CFRunLoopObserver=}'/>
<arg declared_type64='CFRunLoopActivity' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval already_retained='true' declared_type64='CFRunLoopObserverRef' type64='^{__CFRunLoopObserver=}'/>
</function>
<function name='CFRunLoopObserverDoesRepeat'>
<arg declared_type64='CFRunLoopObserverRef' name='observer' type64='^{__CFRunLoopObserver=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFRunLoopObserverGetActivities'>
<arg declared_type64='CFRunLoopObserverRef' name='observer' type64='^{__CFRunLoopObserver=}'/>
<retval declared_type64='CFOptionFlags' type64='Q'/>
</function>
<function name='CFRunLoopObserverGetContext'>
<arg declared_type64='CFRunLoopObserverRef' name='observer' type64='^{__CFRunLoopObserver=}'/>
<arg declared_type64='CFRunLoopObserverContext*' name='context' type64='^{_CFRunLoopObserverContext=q^v^?^?^?}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRunLoopObserverGetOrder'>
<arg declared_type64='CFRunLoopObserverRef' name='observer' type64='^{__CFRunLoopObserver=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFRunLoopObserverGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFRunLoopObserverInvalidate'>
<arg declared_type64='CFRunLoopObserverRef' name='observer' type64='^{__CFRunLoopObserver=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRunLoopObserverIsValid'>
<arg declared_type64='CFRunLoopObserverRef' name='observer' type64='^{__CFRunLoopObserver=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFRunLoopPerformBlock'>
<arg declared_type64='CFRunLoopRef' name='rl' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFTypeRef' name='mode' type64='@'/>
<arg declared_type64='void (^)(void)' function_pointer='true' name='block' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRunLoopRemoveObserver'>
<arg declared_type64='CFRunLoopRef' name='rl' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFRunLoopObserverRef' name='observer' type64='^{__CFRunLoopObserver=}'/>
<arg declared_type64='CFStringRef' name='mode' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRunLoopRemoveSource'>
<arg declared_type64='CFRunLoopRef' name='rl' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFRunLoopSourceRef' name='source' type64='^{__CFRunLoopSource=}'/>
<arg declared_type64='CFStringRef' name='mode' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRunLoopRemoveTimer'>
<arg declared_type64='CFRunLoopRef' name='rl' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFRunLoopTimerRef' name='timer' type64='^{__CFRunLoopTimer=}'/>
<arg declared_type64='CFStringRef' name='mode' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRunLoopRun'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRunLoopRunInMode'>
<arg declared_type64='CFStringRef' name='mode' type64='^{__CFString=}'/>
<arg declared_type64='CFTimeInterval' name='seconds' type64='d'/>
<arg declared_type64='Boolean' name='returnAfterSourceHandled' type64='B'/>
<retval declared_type64='CFRunLoopRunResult' type64='i'/>
</function>
<function name='CFRunLoopSourceCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='order' type64='q'/>
<arg declared_type64='CFRunLoopSourceContext*' name='context' type64='^{_CFRunLoopSourceContext=q^v^?^?^?^?^?^?^?^?}'/>
<retval already_retained='true' declared_type64='CFRunLoopSourceRef' type64='^{__CFRunLoopSource=}'/>
</function>
<function name='CFRunLoopSourceGetContext'>
<arg declared_type64='CFRunLoopSourceRef' name='source' type64='^{__CFRunLoopSource=}'/>
<arg declared_type64='CFRunLoopSourceContext*' name='context' type64='^{_CFRunLoopSourceContext=q^v^?^?^?^?^?^?^?^?}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRunLoopSourceGetOrder'>
<arg declared_type64='CFRunLoopSourceRef' name='source' type64='^{__CFRunLoopSource=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFRunLoopSourceGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFRunLoopSourceInvalidate'>
<arg declared_type64='CFRunLoopSourceRef' name='source' type64='^{__CFRunLoopSource=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRunLoopSourceIsValid'>
<arg declared_type64='CFRunLoopSourceRef' name='source' type64='^{__CFRunLoopSource=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFRunLoopSourceSignal'>
<arg declared_type64='CFRunLoopSourceRef' name='source' type64='^{__CFRunLoopSource=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRunLoopStop'>
<arg declared_type64='CFRunLoopRef' name='rl' type64='^{__CFRunLoop=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRunLoopTimerCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFAbsoluteTime' name='fireDate' type64='d'/>
<arg declared_type64='CFTimeInterval' name='interval' type64='d'/>
<arg declared_type64='CFOptionFlags' name='flags' type64='Q'/>
<arg declared_type64='CFIndex' name='order' type64='q'/>
<arg declared_type64='CFRunLoopTimerCallBack' function_pointer='true' name='callout' type64='^?'>
<arg declared_type64='CFRunLoopTimerRef' type64='^{__CFRunLoopTimer=}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='CFRunLoopTimerContext*' name='context' type64='^{_CFRunLoopTimerContext=q^v^?^?^?}'/>
<retval already_retained='true' declared_type64='CFRunLoopTimerRef' type64='^{__CFRunLoopTimer=}'/>
</function>
<function name='CFRunLoopTimerCreateWithHandler'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFAbsoluteTime' name='fireDate' type64='d'/>
<arg declared_type64='CFTimeInterval' name='interval' type64='d'/>
<arg declared_type64='CFOptionFlags' name='flags' type64='Q'/>
<arg declared_type64='CFIndex' name='order' type64='q'/>
<arg declared_type64='void (^)(CFRunLoopTimerRef)' function_pointer='true' name='block' type64='@?'>
<arg declared_type64='CFRunLoopTimerRef' type64='^{__CFRunLoopTimer=}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval already_retained='true' declared_type64='CFRunLoopTimerRef' type64='^{__CFRunLoopTimer=}'/>
</function>
<function name='CFRunLoopTimerDoesRepeat'>
<arg declared_type64='CFRunLoopTimerRef' name='timer' type64='^{__CFRunLoopTimer=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFRunLoopTimerGetContext'>
<arg declared_type64='CFRunLoopTimerRef' name='timer' type64='^{__CFRunLoopTimer=}'/>
<arg declared_type64='CFRunLoopTimerContext*' name='context' type64='^{_CFRunLoopTimerContext=q^v^?^?^?}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRunLoopTimerGetInterval'>
<arg declared_type64='CFRunLoopTimerRef' name='timer' type64='^{__CFRunLoopTimer=}'/>
<retval declared_type64='CFTimeInterval' type64='d'/>
</function>
<function name='CFRunLoopTimerGetNextFireDate'>
<arg declared_type64='CFRunLoopTimerRef' name='timer' type64='^{__CFRunLoopTimer=}'/>
<retval declared_type64='CFAbsoluteTime' type64='d'/>
</function>
<function name='CFRunLoopTimerGetOrder'>
<arg declared_type64='CFRunLoopTimerRef' name='timer' type64='^{__CFRunLoopTimer=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFRunLoopTimerGetTolerance'>
<arg declared_type64='CFRunLoopTimerRef' name='timer' type64='^{__CFRunLoopTimer=}'/>
<retval declared_type64='CFTimeInterval' type64='d'/>
</function>
<function name='CFRunLoopTimerGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFRunLoopTimerInvalidate'>
<arg declared_type64='CFRunLoopTimerRef' name='timer' type64='^{__CFRunLoopTimer=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRunLoopTimerIsValid'>
<arg declared_type64='CFRunLoopTimerRef' name='timer' type64='^{__CFRunLoopTimer=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFRunLoopTimerSetNextFireDate'>
<arg declared_type64='CFRunLoopTimerRef' name='timer' type64='^{__CFRunLoopTimer=}'/>
<arg declared_type64='CFAbsoluteTime' name='fireDate' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRunLoopTimerSetTolerance'>
<arg declared_type64='CFRunLoopTimerRef' name='timer' type64='^{__CFRunLoopTimer=}'/>
<arg declared_type64='CFTimeInterval' name='tolerance' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFRunLoopWakeUp'>
<arg declared_type64='CFRunLoopRef' name='rl' type64='^{__CFRunLoop=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFSetAddValue'>
<arg declared_type64='CFMutableSetRef' name='theSet' type64='^{__CFSet=}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFSetApplyFunction'>
<arg declared_type64='CFSetRef' name='theSet' type64='^{__CFSet=}'/>
<arg declared_type64='CFSetApplierFunction' function_pointer='true' name='applier' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='void*' name='context' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFSetContainsValue'>
<arg declared_type64='CFSetRef' name='theSet' type64='^{__CFSet=}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFSetCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='void**' name='values' type64='^^v'/>
<arg declared_type64='CFIndex' name='numValues' type64='q'/>
<arg const='true' declared_type64='CFSetCallBacks*' name='callBacks' type64='^{_CFSetCallBacks=q^?^?^?^?^?}'/>
<retval already_retained='true' declared_type64='CFSetRef' type64='^{__CFSet=}'/>
</function>
<function name='CFSetCreateCopy'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFSetRef' name='theSet' type64='^{__CFSet=}'/>
<retval already_retained='true' declared_type64='CFSetRef' type64='^{__CFSet=}'/>
</function>
<function name='CFSetCreateMutable'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='capacity' type64='q'/>
<arg const='true' declared_type64='CFSetCallBacks*' name='callBacks' type64='^{_CFSetCallBacks=q^?^?^?^?^?}'/>
<retval already_retained='true' declared_type64='CFMutableSetRef' type64='^{__CFSet=}'/>
</function>
<function name='CFSetCreateMutableCopy'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='capacity' type64='q'/>
<arg declared_type64='CFSetRef' name='theSet' type64='^{__CFSet=}'/>
<retval already_retained='true' declared_type64='CFMutableSetRef' type64='^{__CFSet=}'/>
</function>
<function name='CFSetGetCount'>
<arg declared_type64='CFSetRef' name='theSet' type64='^{__CFSet=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFSetGetCountOfValue'>
<arg declared_type64='CFSetRef' name='theSet' type64='^{__CFSet=}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFSetGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFSetGetValue'>
<arg declared_type64='CFSetRef' name='theSet' type64='^{__CFSet=}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</function>
<function name='CFSetGetValueIfPresent'>
<arg declared_type64='CFSetRef' name='theSet' type64='^{__CFSet=}'/>
<arg const='true' declared_type64='void*' name='candidate' type64='^v'/>
<arg const='true' declared_type64='void**' name='value' type64='^^v'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFSetGetValues'>
<arg declared_type64='CFSetRef' name='theSet' type64='^{__CFSet=}'/>
<arg const='true' declared_type64='void**' name='values' type64='^^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFSetRemoveAllValues'>
<arg declared_type64='CFMutableSetRef' name='theSet' type64='^{__CFSet=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFSetRemoveValue'>
<arg declared_type64='CFMutableSetRef' name='theSet' type64='^{__CFSet=}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFSetReplaceValue'>
<arg declared_type64='CFMutableSetRef' name='theSet' type64='^{__CFSet=}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFSetSetValue'>
<arg declared_type64='CFMutableSetRef' name='theSet' type64='^{__CFSet=}'/>
<arg const='true' declared_type64='void*' name='value' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFShow'>
<arg declared_type64='CFTypeRef' name='obj' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFShowStr'>
<arg declared_type64='CFStringRef' name='str' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFSocketConnectToAddress'>
<arg declared_type64='CFSocketRef' name='s' type64='^{__CFSocket=}'/>
<arg declared_type64='CFDataRef' name='address' type64='^{__CFData=}'/>
<arg declared_type64='CFTimeInterval' name='timeout' type64='d'/>
<retval declared_type64='CFSocketError' type64='q'/>
</function>
<function name='CFSocketCopyAddress'>
<arg declared_type64='CFSocketRef' name='s' type64='^{__CFSocket=}'/>
<retval already_retained='true' declared_type64='CFDataRef' type64='^{__CFData=}'/>
</function>
<function name='CFSocketCopyPeerAddress'>
<arg declared_type64='CFSocketRef' name='s' type64='^{__CFSocket=}'/>
<retval already_retained='true' declared_type64='CFDataRef' type64='^{__CFData=}'/>
</function>
<function name='CFSocketCopyRegisteredSocketSignature'>
<arg const='true' declared_type64='CFSocketSignature*' name='nameServerSignature' type64='^{_CFSocketSignature=iii^{__CFData}}'/>
<arg declared_type64='CFTimeInterval' name='timeout' type64='d'/>
<arg declared_type64='CFStringRef' name='name' type64='^{__CFString=}'/>
<arg declared_type64='CFSocketSignature*' name='signature' type64='^{_CFSocketSignature=iii^{__CFData}}'/>
<arg declared_type64='CFDataRef*' name='nameServerAddress' type64='^^{__CFData}'/>
<retval declared_type64='CFSocketError' type64='q'/>
</function>
<function name='CFSocketCopyRegisteredValue'>
<arg const='true' declared_type64='CFSocketSignature*' name='nameServerSignature' type64='^{_CFSocketSignature=iii^{__CFData}}'/>
<arg declared_type64='CFTimeInterval' name='timeout' type64='d'/>
<arg declared_type64='CFStringRef' name='name' type64='^{__CFString=}'/>
<arg declared_type64='CFPropertyListRef*' name='value' type64='^^v'/>
<arg declared_type64='CFDataRef*' name='nameServerAddress' type64='^^{__CFData}'/>
<retval declared_type64='CFSocketError' type64='q'/>
</function>
<function name='CFSocketCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='SInt32' name='protocolFamily' type64='i'/>
<arg declared_type64='SInt32' name='socketType' type64='i'/>
<arg declared_type64='SInt32' name='protocol' type64='i'/>
<arg declared_type64='CFOptionFlags' name='callBackTypes' type64='Q'/>
<arg declared_type64='CFSocketCallBack' function_pointer='true' name='callout' type64='^?'>
<arg declared_type64='CFSocketRef' type64='^{__CFSocket=}'/>
<arg declared_type64='CFSocketCallBackType' type64='Q'/>
<arg declared_type64='CFDataRef' type64='^{__CFData=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg const='true' declared_type64='CFSocketContext*' name='context' type64='^{_CFSocketContext=q^v^?^?^?}'/>
<retval already_retained='true' declared_type64='CFSocketRef' type64='^{__CFSocket=}'/>
</function>
<function name='CFSocketCreateConnectedToSocketSignature'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='CFSocketSignature*' name='signature' type64='^{_CFSocketSignature=iii^{__CFData}}'/>
<arg declared_type64='CFOptionFlags' name='callBackTypes' type64='Q'/>
<arg declared_type64='CFSocketCallBack' function_pointer='true' name='callout' type64='^?'>
<arg declared_type64='CFSocketRef' type64='^{__CFSocket=}'/>
<arg declared_type64='CFSocketCallBackType' type64='Q'/>
<arg declared_type64='CFDataRef' type64='^{__CFData=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg const='true' declared_type64='CFSocketContext*' name='context' type64='^{_CFSocketContext=q^v^?^?^?}'/>
<arg declared_type64='CFTimeInterval' name='timeout' type64='d'/>
<retval already_retained='true' declared_type64='CFSocketRef' type64='^{__CFSocket=}'/>
</function>
<function name='CFSocketCreateRunLoopSource'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFSocketRef' name='s' type64='^{__CFSocket=}'/>
<arg declared_type64='CFIndex' name='order' type64='q'/>
<retval already_retained='true' declared_type64='CFRunLoopSourceRef' type64='^{__CFRunLoopSource=}'/>
</function>
<function name='CFSocketCreateWithNative'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFSocketNativeHandle' name='sock' type64='i'/>
<arg declared_type64='CFOptionFlags' name='callBackTypes' type64='Q'/>
<arg declared_type64='CFSocketCallBack' function_pointer='true' name='callout' type64='^?'>
<arg declared_type64='CFSocketRef' type64='^{__CFSocket=}'/>
<arg declared_type64='CFSocketCallBackType' type64='Q'/>
<arg declared_type64='CFDataRef' type64='^{__CFData=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg const='true' declared_type64='CFSocketContext*' name='context' type64='^{_CFSocketContext=q^v^?^?^?}'/>
<retval already_retained='true' declared_type64='CFSocketRef' type64='^{__CFSocket=}'/>
</function>
<function name='CFSocketCreateWithSocketSignature'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='CFSocketSignature*' name='signature' type64='^{_CFSocketSignature=iii^{__CFData}}'/>
<arg declared_type64='CFOptionFlags' name='callBackTypes' type64='Q'/>
<arg declared_type64='CFSocketCallBack' function_pointer='true' name='callout' type64='^?'>
<arg declared_type64='CFSocketRef' type64='^{__CFSocket=}'/>
<arg declared_type64='CFSocketCallBackType' type64='Q'/>
<arg declared_type64='CFDataRef' type64='^{__CFData=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg const='true' declared_type64='CFSocketContext*' name='context' type64='^{_CFSocketContext=q^v^?^?^?}'/>
<retval already_retained='true' declared_type64='CFSocketRef' type64='^{__CFSocket=}'/>
</function>
<function name='CFSocketDisableCallBacks'>
<arg declared_type64='CFSocketRef' name='s' type64='^{__CFSocket=}'/>
<arg declared_type64='CFOptionFlags' name='callBackTypes' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFSocketEnableCallBacks'>
<arg declared_type64='CFSocketRef' name='s' type64='^{__CFSocket=}'/>
<arg declared_type64='CFOptionFlags' name='callBackTypes' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFSocketGetContext'>
<arg declared_type64='CFSocketRef' name='s' type64='^{__CFSocket=}'/>
<arg declared_type64='CFSocketContext*' name='context' type64='^{_CFSocketContext=q^v^?^?^?}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFSocketGetDefaultNameRegistryPortNumber'>
<retval declared_type64='UInt16' type64='S'/>
</function>
<function name='CFSocketGetNative'>
<arg declared_type64='CFSocketRef' name='s' type64='^{__CFSocket=}'/>
<retval declared_type64='CFSocketNativeHandle' type64='i'/>
</function>
<function name='CFSocketGetSocketFlags'>
<arg declared_type64='CFSocketRef' name='s' type64='^{__CFSocket=}'/>
<retval declared_type64='CFOptionFlags' type64='Q'/>
</function>
<function name='CFSocketGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFSocketInvalidate'>
<arg declared_type64='CFSocketRef' name='s' type64='^{__CFSocket=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFSocketIsValid'>
<arg declared_type64='CFSocketRef' name='s' type64='^{__CFSocket=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFSocketRegisterSocketSignature'>
<arg const='true' declared_type64='CFSocketSignature*' name='nameServerSignature' type64='^{_CFSocketSignature=iii^{__CFData}}'/>
<arg declared_type64='CFTimeInterval' name='timeout' type64='d'/>
<arg declared_type64='CFStringRef' name='name' type64='^{__CFString=}'/>
<arg const='true' declared_type64='CFSocketSignature*' name='signature' type64='^{_CFSocketSignature=iii^{__CFData}}'/>
<retval declared_type64='CFSocketError' type64='q'/>
</function>
<function name='CFSocketRegisterValue'>
<arg const='true' declared_type64='CFSocketSignature*' name='nameServerSignature' type64='^{_CFSocketSignature=iii^{__CFData}}'/>
<arg declared_type64='CFTimeInterval' name='timeout' type64='d'/>
<arg declared_type64='CFStringRef' name='name' type64='^{__CFString=}'/>
<arg declared_type64='CFPropertyListRef' name='value' type64='@'/>
<retval declared_type64='CFSocketError' type64='q'/>
</function>
<function name='CFSocketSendData'>
<arg declared_type64='CFSocketRef' name='s' type64='^{__CFSocket=}'/>
<arg declared_type64='CFDataRef' name='address' type64='^{__CFData=}'/>
<arg declared_type64='CFDataRef' name='data' type64='^{__CFData=}'/>
<arg declared_type64='CFTimeInterval' name='timeout' type64='d'/>
<retval declared_type64='CFSocketError' type64='q'/>
</function>
<function name='CFSocketSetAddress'>
<arg declared_type64='CFSocketRef' name='s' type64='^{__CFSocket=}'/>
<arg declared_type64='CFDataRef' name='address' type64='^{__CFData=}'/>
<retval declared_type64='CFSocketError' type64='q'/>
</function>
<function name='CFSocketSetDefaultNameRegistryPortNumber'>
<arg declared_type64='UInt16' name='port' type64='S'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFSocketSetSocketFlags'>
<arg declared_type64='CFSocketRef' name='s' type64='^{__CFSocket=}'/>
<arg declared_type64='CFOptionFlags' name='flags' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFSocketUnregister'>
<arg const='true' declared_type64='CFSocketSignature*' name='nameServerSignature' type64='^{_CFSocketSignature=iii^{__CFData}}'/>
<arg declared_type64='CFTimeInterval' name='timeout' type64='d'/>
<arg declared_type64='CFStringRef' name='name' type64='^{__CFString=}'/>
<retval declared_type64='CFSocketError' type64='q'/>
</function>
<function name='CFStreamCreateBoundPair'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFReadStreamRef*' name='readStream' type64='^^{__CFReadStream}'/>
<arg declared_type64='CFWriteStreamRef*' name='writeStream' type64='^^{__CFWriteStream}'/>
<arg declared_type64='CFIndex' name='transferBufferSize' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStreamCreatePairWithPeerSocketSignature'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='CFSocketSignature*' name='signature' type64='^{_CFSocketSignature=iii^{__CFData}}'/>
<arg declared_type64='CFReadStreamRef*' name='readStream' type64='^^{__CFReadStream}'/>
<arg declared_type64='CFWriteStreamRef*' name='writeStream' type64='^^{__CFWriteStream}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStreamCreatePairWithSocket'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFSocketNativeHandle' name='sock' type64='i'/>
<arg declared_type64='CFReadStreamRef*' name='readStream' type64='^^{__CFReadStream}'/>
<arg declared_type64='CFWriteStreamRef*' name='writeStream' type64='^^{__CFWriteStream}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStreamCreatePairWithSocketToHost'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='host' type64='^{__CFString=}'/>
<arg declared_type64='UInt32' name='port' type64='I'/>
<arg declared_type64='CFReadStreamRef*' name='readStream' type64='^^{__CFReadStream}'/>
<arg declared_type64='CFWriteStreamRef*' name='writeStream' type64='^^{__CFWriteStream}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringAppend'>
<arg declared_type64='CFMutableStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='appendedString' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringAppendCString'>
<arg declared_type64='CFMutableStringRef' name='theString' type64='^{__CFString=}'/>
<arg const='true' declared_type64='char*' name='cStr' type64='*'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringAppendCharacters'>
<arg declared_type64='CFMutableStringRef' name='theString' type64='^{__CFString=}'/>
<arg const='true' declared_type64='UniChar*' name='chars' type64='^S'/>
<arg declared_type64='CFIndex' name='numChars' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringAppendFormat' variadic='true'>
<arg declared_type64='CFMutableStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFDictionaryRef' name='formatOptions' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFStringRef' name='format' printf_format='true' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringAppendFormatAndArguments'>
<arg declared_type64='CFMutableStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFDictionaryRef' name='formatOptions' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFStringRef' name='format' printf_format='true' type64='^{__CFString=}'/>
<arg declared_type64='struct __va_list_tag*' name='arguments' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringAppendPascalString'>
<arg declared_type64='CFMutableStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='ConstStr255Param' name='pStr' type64='*'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringCapitalize'>
<arg declared_type64='CFMutableStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFLocaleRef' name='locale' type64='^{__CFLocale=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringCompare'>
<arg declared_type64='CFStringRef' name='theString1' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='theString2' type64='^{__CFString=}'/>
<arg declared_type64='CFStringCompareFlags' name='compareOptions' type64='Q'/>
<retval declared_type64='CFComparisonResult' type64='q'/>
</function>
<function name='CFStringCompareWithOptions'>
<arg declared_type64='CFStringRef' name='theString1' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='theString2' type64='^{__CFString=}'/>
<arg declared_type64='CFRange' name='rangeToCompare' type64='{_CFRange=qq}'/>
<arg declared_type64='CFStringCompareFlags' name='compareOptions' type64='Q'/>
<retval declared_type64='CFComparisonResult' type64='q'/>
</function>
<function name='CFStringCompareWithOptionsAndLocale'>
<arg declared_type64='CFStringRef' name='theString1' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='theString2' type64='^{__CFString=}'/>
<arg declared_type64='CFRange' name='rangeToCompare' type64='{_CFRange=qq}'/>
<arg declared_type64='CFStringCompareFlags' name='compareOptions' type64='Q'/>
<arg declared_type64='CFLocaleRef' name='locale' type64='^{__CFLocale=}'/>
<retval declared_type64='CFComparisonResult' type64='q'/>
</function>
<function name='CFStringConvertEncodingToIANACharSetName'>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringConvertEncodingToNSStringEncoding'>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<retval declared_type64='unsigned long' type64='Q'/>
</function>
<function name='CFStringConvertEncodingToWindowsCodepage'>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<retval declared_type64='UInt32' type64='I'/>
</function>
<function name='CFStringConvertIANACharSetNameToEncoding'>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<retval declared_type64='CFStringEncoding' type64='I'/>
</function>
<function name='CFStringConvertNSStringEncodingToEncoding'>
<arg declared_type64='unsigned long' name='encoding' type64='Q'/>
<retval declared_type64='CFStringEncoding' type64='I'/>
</function>
<function name='CFStringConvertWindowsCodepageToEncoding'>
<arg declared_type64='UInt32' name='codepage' type64='I'/>
<retval declared_type64='CFStringEncoding' type64='I'/>
</function>
<function name='CFStringCreateArrayBySeparatingStrings'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='separatorString' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFStringCreateArrayWithFindResults'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='stringToFind' type64='^{__CFString=}'/>
<arg declared_type64='CFRange' name='rangeToSearch' type64='{_CFRange=qq}'/>
<arg declared_type64='CFStringCompareFlags' name='compareOptions' type64='Q'/>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFStringCreateByCombiningStrings'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFArrayRef' name='theArray' type64='^{__CFArray=}'/>
<arg declared_type64='CFStringRef' name='separatorString' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringCreateCopy'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringCreateExternalRepresentation'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<arg declared_type64='UInt8' name='lossByte' type64='C'/>
<retval already_retained='true' declared_type64='CFDataRef' type64='^{__CFData=}'/>
</function>
<function name='CFStringCreateFromExternalRepresentation'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFDataRef' name='data' type64='^{__CFData=}'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringCreateMutable'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='maxLength' type64='q'/>
<retval already_retained='true' declared_type64='CFMutableStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringCreateMutableCopy'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFIndex' name='maxLength' type64='q'/>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFMutableStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringCreateMutableWithExternalCharactersNoCopy'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='UniChar*' name='chars' type64='^S'/>
<arg declared_type64='CFIndex' name='numChars' type64='q'/>
<arg declared_type64='CFIndex' name='capacity' type64='q'/>
<arg declared_type64='CFAllocatorRef' name='externalCharactersAllocator' type64='^{__CFAllocator=}'/>
<retval already_retained='true' declared_type64='CFMutableStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringCreateWithBytes'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='UInt8*' name='bytes' type64='*'/>
<arg declared_type64='CFIndex' name='numBytes' type64='q'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<arg declared_type64='Boolean' name='isExternalRepresentation' type64='B'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringCreateWithBytesNoCopy'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='UInt8*' name='bytes' type64='*'/>
<arg declared_type64='CFIndex' name='numBytes' type64='q'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<arg declared_type64='Boolean' name='isExternalRepresentation' type64='B'/>
<arg declared_type64='CFAllocatorRef' name='contentsDeallocator' type64='^{__CFAllocator=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringCreateWithCString'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='char*' name='cStr' type64='*'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringCreateWithCStringNoCopy'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='char*' name='cStr' type64='*'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<arg declared_type64='CFAllocatorRef' name='contentsDeallocator' type64='^{__CFAllocator=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringCreateWithCharacters'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='UniChar*' name='chars' type64='^S'/>
<arg declared_type64='CFIndex' name='numChars' type64='q'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringCreateWithCharactersNoCopy'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='UniChar*' name='chars' type64='^S'/>
<arg declared_type64='CFIndex' name='numChars' type64='q'/>
<arg declared_type64='CFAllocatorRef' name='contentsDeallocator' type64='^{__CFAllocator=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringCreateWithFileSystemRepresentation'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='char*' name='buffer' type64='*'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringCreateWithFormat' variadic='true'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFDictionaryRef' name='formatOptions' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFStringRef' name='format' printf_format='true' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringCreateWithFormatAndArguments'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFDictionaryRef' name='formatOptions' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFStringRef' name='format' printf_format='true' type64='^{__CFString=}'/>
<arg declared_type64='struct __va_list_tag*' name='arguments' type64='^{__va_list_tag=II^v^v}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringCreateWithPascalString'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='ConstStr255Param' name='pStr' type64='*'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringCreateWithPascalStringNoCopy'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='ConstStr255Param' name='pStr' type64='*'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<arg declared_type64='CFAllocatorRef' name='contentsDeallocator' type64='^{__CFAllocator=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringCreateWithSubstring'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='str' type64='^{__CFString=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringDelete'>
<arg declared_type64='CFMutableStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringFind'>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='stringToFind' type64='^{__CFString=}'/>
<arg declared_type64='CFStringCompareFlags' name='compareOptions' type64='Q'/>
<retval declared_type64='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CFStringFindAndReplace'>
<arg declared_type64='CFMutableStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='stringToFind' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='replacementString' type64='^{__CFString=}'/>
<arg declared_type64='CFRange' name='rangeToSearch' type64='{_CFRange=qq}'/>
<arg declared_type64='CFStringCompareFlags' name='compareOptions' type64='Q'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFStringFindCharacterFromSet'>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFCharacterSetRef' name='theSet' type64='^{__CFCharacterSet=}'/>
<arg declared_type64='CFRange' name='rangeToSearch' type64='{_CFRange=qq}'/>
<arg declared_type64='CFStringCompareFlags' name='searchOptions' type64='Q'/>
<arg declared_type64='CFRange*' name='result' type64='^{_CFRange=qq}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFStringFindWithOptions'>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='stringToFind' type64='^{__CFString=}'/>
<arg declared_type64='CFRange' name='rangeToSearch' type64='{_CFRange=qq}'/>
<arg declared_type64='CFStringCompareFlags' name='searchOptions' type64='Q'/>
<arg declared_type64='CFRange*' name='result' type64='^{_CFRange=qq}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFStringFindWithOptionsAndLocale'>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='stringToFind' type64='^{__CFString=}'/>
<arg declared_type64='CFRange' name='rangeToSearch' type64='{_CFRange=qq}'/>
<arg declared_type64='CFStringCompareFlags' name='searchOptions' type64='Q'/>
<arg declared_type64='CFLocaleRef' name='locale' type64='^{__CFLocale=}'/>
<arg declared_type64='CFRange*' name='result' type64='^{_CFRange=qq}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFStringFold'>
<arg declared_type64='CFMutableStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFStringCompareFlags' name='theFlags' type64='Q'/>
<arg declared_type64='CFLocaleRef' name='theLocale' type64='^{__CFLocale=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringGetBytes'>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<arg declared_type64='UInt8' name='lossByte' type64='C'/>
<arg declared_type64='Boolean' name='isExternalRepresentation' type64='B'/>
<arg declared_type64='UInt8*' name='buffer' type64='*'/>
<arg declared_type64='CFIndex' name='maxBufLen' type64='q'/>
<arg declared_type64='CFIndex*' name='usedBufLen' type64='^q'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFStringGetCString'>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='char*' name='buffer' type64='*'/>
<arg declared_type64='CFIndex' name='bufferSize' type64='q'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFStringGetCStringPtr'>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<retval const='true' declared_type64='char*' type64='*'/>
</function>
<function name='CFStringGetCharacterAtIndex'>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFIndex' name='idx' type64='q'/>
<retval declared_type64='UniChar' type64='S'/>
</function>
<function inline='true' name='CFStringGetCharacterFromInlineBuffer'>
<arg declared_type64='CFStringInlineBuffer*' name='buf' type64='^{_CFStringInlineBuffer=[64S]^{__CFString}^S*{_CFRange=qq}qq}'/>
<arg declared_type64='CFIndex' name='idx' type64='q'/>
<retval declared_type64='UniChar' type64='S'/>
</function>
<function name='CFStringGetCharacters'>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='UniChar*' name='buffer' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringGetCharactersPtr'>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<retval const='true' declared_type64='UniChar*' type64='^S'/>
</function>
<function name='CFStringGetDoubleValue'>
<arg declared_type64='CFStringRef' name='str' type64='^{__CFString=}'/>
<retval declared_type64='double' type64='d'/>
</function>
<function name='CFStringGetFastestEncoding'>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<retval declared_type64='CFStringEncoding' type64='I'/>
</function>
<function name='CFStringGetFileSystemRepresentation'>
<arg declared_type64='CFStringRef' name='string' type64='^{__CFString=}'/>
<arg declared_type64='char*' name='buffer' type64='*'/>
<arg declared_type64='CFIndex' name='maxBufLen' type64='q'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFStringGetHyphenationLocationBeforeIndex'>
<arg declared_type64='CFStringRef' name='string' type64='^{__CFString=}'/>
<arg declared_type64='CFIndex' name='location' type64='q'/>
<arg declared_type64='CFRange' name='limitRange' type64='{_CFRange=qq}'/>
<arg declared_type64='CFOptionFlags' name='options' type64='Q'/>
<arg declared_type64='CFLocaleRef' name='locale' type64='^{__CFLocale=}'/>
<arg declared_type64='UTF32Char*' name='character' type64='^I'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFStringGetIntValue'>
<arg declared_type64='CFStringRef' name='str' type64='^{__CFString=}'/>
<retval declared_type64='SInt32' type64='i'/>
</function>
<function name='CFStringGetLength'>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFStringGetLineBounds'>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CFIndex*' name='lineBeginIndex' type64='^q'/>
<arg declared_type64='CFIndex*' name='lineEndIndex' type64='^q'/>
<arg declared_type64='CFIndex*' name='contentsEndIndex' type64='^q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringGetListOfAvailableEncodings'>
<retval const='true' declared_type64='CFStringEncoding*' type64='^I'/>
</function>
<function inline='true' name='CFStringGetLongCharacterForSurrogatePair'>
<arg declared_type64='UniChar' name='surrogateHigh' type64='S'/>
<arg declared_type64='UniChar' name='surrogateLow' type64='S'/>
<retval declared_type64='UTF32Char' type64='I'/>
</function>
<function name='CFStringGetMaximumSizeForEncoding'>
<arg declared_type64='CFIndex' name='length' type64='q'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFStringGetMaximumSizeOfFileSystemRepresentation'>
<arg declared_type64='CFStringRef' name='string' type64='^{__CFString=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFStringGetMostCompatibleMacStringEncoding'>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<retval declared_type64='CFStringEncoding' type64='I'/>
</function>
<function name='CFStringGetNameOfEncoding'>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringGetParagraphBounds'>
<arg declared_type64='CFStringRef' name='string' type64='^{__CFString=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CFIndex*' name='parBeginIndex' type64='^q'/>
<arg declared_type64='CFIndex*' name='parEndIndex' type64='^q'/>
<arg declared_type64='CFIndex*' name='contentsEndIndex' type64='^q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringGetPascalString'>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='StringPtr' name='buffer' type64='*'/>
<arg declared_type64='CFIndex' name='bufferSize' type64='q'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFStringGetPascalStringPtr'>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<retval declared_type64='ConstStringPtr' type64='*'/>
</function>
<function name='CFStringGetRangeOfComposedCharactersAtIndex'>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFIndex' name='theIndex' type64='q'/>
<retval declared_type64='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CFStringGetSmallestEncoding'>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<retval declared_type64='CFStringEncoding' type64='I'/>
</function>
<function inline='true' name='CFStringGetSurrogatePairForLongCharacter'>
<arg declared_type64='UTF32Char' name='character' type64='I'/>
<arg declared_type64='UniChar*' name='surrogates' type64='^S'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFStringGetSystemEncoding'>
<retval declared_type64='CFStringEncoding' type64='I'/>
</function>
<function name='CFStringGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFStringHasPrefix'>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='prefix' type64='^{__CFString=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFStringHasSuffix'>
<arg declared_type64='CFStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='suffix' type64='^{__CFString=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function inline='true' name='CFStringInitInlineBuffer'>
<arg declared_type64='CFStringRef' name='str' type64='^{__CFString=}'/>
<arg declared_type64='CFStringInlineBuffer*' name='buf' type64='^{_CFStringInlineBuffer=[64S]^{__CFString}^S*{_CFRange=qq}qq}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringInsert'>
<arg declared_type64='CFMutableStringRef' name='str' type64='^{__CFString=}'/>
<arg declared_type64='CFIndex' name='idx' type64='q'/>
<arg declared_type64='CFStringRef' name='insertedStr' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringIsEncodingAvailable'>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFStringIsHyphenationAvailableForLocale'>
<arg declared_type64='CFLocaleRef' name='locale' type64='^{__CFLocale=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function inline='true' name='CFStringIsSurrogateHighCharacter'>
<arg declared_type64='UniChar' name='character' type64='S'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function inline='true' name='CFStringIsSurrogateLowCharacter'>
<arg declared_type64='UniChar' name='character' type64='S'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFStringLowercase'>
<arg declared_type64='CFMutableStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFLocaleRef' name='locale' type64='^{__CFLocale=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringNormalize'>
<arg declared_type64='CFMutableStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFStringNormalizationForm' name='theForm' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringPad'>
<arg declared_type64='CFMutableStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='padString' type64='^{__CFString=}'/>
<arg declared_type64='CFIndex' name='length' type64='q'/>
<arg declared_type64='CFIndex' name='indexIntoPad' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringReplace'>
<arg declared_type64='CFMutableStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CFStringRef' name='replacement' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringReplaceAll'>
<arg declared_type64='CFMutableStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='replacement' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringSetExternalCharactersNoCopy'>
<arg declared_type64='CFMutableStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='UniChar*' name='chars' type64='^S'/>
<arg declared_type64='CFIndex' name='length' type64='q'/>
<arg declared_type64='CFIndex' name='capacity' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringTokenizerAdvanceToNextToken'>
<arg declared_type64='CFStringTokenizerRef' name='tokenizer' type64='^{__CFStringTokenizer=}'/>
<retval declared_type64='CFStringTokenizerTokenType' type64='Q'/>
</function>
<function name='CFStringTokenizerCopyBestStringLanguage'>
<arg declared_type64='CFStringRef' name='string' type64='^{__CFString=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFStringTokenizerCopyCurrentTokenAttribute'>
<arg declared_type64='CFStringTokenizerRef' name='tokenizer' type64='^{__CFStringTokenizer=}'/>
<arg declared_type64='CFOptionFlags' name='attribute' type64='Q'/>
<retval already_retained='true' declared_type64='CFTypeRef' type64='@'/>
</function>
<function name='CFStringTokenizerCreate'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='string' type64='^{__CFString=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<arg declared_type64='CFOptionFlags' name='options' type64='Q'/>
<arg declared_type64='CFLocaleRef' name='locale' type64='^{__CFLocale=}'/>
<retval already_retained='true' declared_type64='CFStringTokenizerRef' type64='^{__CFStringTokenizer=}'/>
</function>
<function name='CFStringTokenizerGetCurrentSubTokens'>
<arg declared_type64='CFStringTokenizerRef' name='tokenizer' type64='^{__CFStringTokenizer=}'/>
<arg declared_type64='CFRange*' name='ranges' type64='^{_CFRange=qq}'/>
<arg declared_type64='CFIndex' name='maxRangeLength' type64='q'/>
<arg declared_type64='CFMutableArrayRef' name='derivedSubTokens' type64='^{__CFArray=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFStringTokenizerGetCurrentTokenRange'>
<arg declared_type64='CFStringTokenizerRef' name='tokenizer' type64='^{__CFStringTokenizer=}'/>
<retval declared_type64='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CFStringTokenizerGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFStringTokenizerGoToTokenAtIndex'>
<arg declared_type64='CFStringTokenizerRef' name='tokenizer' type64='^{__CFStringTokenizer=}'/>
<arg declared_type64='CFIndex' name='index' type64='q'/>
<retval declared_type64='CFStringTokenizerTokenType' type64='Q'/>
</function>
<function name='CFStringTokenizerSetString'>
<arg declared_type64='CFStringTokenizerRef' name='tokenizer' type64='^{__CFStringTokenizer=}'/>
<arg declared_type64='CFStringRef' name='string' type64='^{__CFString=}'/>
<arg declared_type64='CFRange' name='range' type64='{_CFRange=qq}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringTransform'>
<arg declared_type64='CFMutableStringRef' name='string' type64='^{__CFString=}'/>
<arg declared_type64='CFRange*' name='range' type64='^{_CFRange=qq}'/>
<arg declared_type64='CFStringRef' name='transform' type64='^{__CFString=}'/>
<arg declared_type64='Boolean' name='reverse' type64='B'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFStringTrim'>
<arg declared_type64='CFMutableStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='trimString' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringTrimWhitespace'>
<arg declared_type64='CFMutableStringRef' name='theString' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFStringUppercase'>
<arg declared_type64='CFMutableStringRef' name='theString' type64='^{__CFString=}'/>
<arg declared_type64='CFLocaleRef' name='locale' type64='^{__CFLocale=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function inline='true' name='CFSwapInt16'>
<arg declared_type64='uint16_t' name='arg' type64='S'/>
<retval declared_type64='uint16_t' type64='S'/>
</function>
<function inline='true' name='CFSwapInt16BigToHost'>
<arg declared_type64='uint16_t' name='arg' type64='S'/>
<retval declared_type64='uint16_t' type64='S'/>
</function>
<function inline='true' name='CFSwapInt16HostToBig'>
<arg declared_type64='uint16_t' name='arg' type64='S'/>
<retval declared_type64='uint16_t' type64='S'/>
</function>
<function inline='true' name='CFSwapInt16HostToLittle'>
<arg declared_type64='uint16_t' name='arg' type64='S'/>
<retval declared_type64='uint16_t' type64='S'/>
</function>
<function inline='true' name='CFSwapInt16LittleToHost'>
<arg declared_type64='uint16_t' name='arg' type64='S'/>
<retval declared_type64='uint16_t' type64='S'/>
</function>
<function inline='true' name='CFSwapInt32'>
<arg declared_type64='uint32_t' name='arg' type64='I'/>
<retval declared_type64='uint32_t' type64='I'/>
</function>
<function inline='true' name='CFSwapInt32BigToHost'>
<arg declared_type64='uint32_t' name='arg' type64='I'/>
<retval declared_type64='uint32_t' type64='I'/>
</function>
<function inline='true' name='CFSwapInt32HostToBig'>
<arg declared_type64='uint32_t' name='arg' type64='I'/>
<retval declared_type64='uint32_t' type64='I'/>
</function>
<function inline='true' name='CFSwapInt32HostToLittle'>
<arg declared_type64='uint32_t' name='arg' type64='I'/>
<retval declared_type64='uint32_t' type64='I'/>
</function>
<function inline='true' name='CFSwapInt32LittleToHost'>
<arg declared_type64='uint32_t' name='arg' type64='I'/>
<retval declared_type64='uint32_t' type64='I'/>
</function>
<function inline='true' name='CFSwapInt64'>
<arg declared_type64='uint64_t' name='arg' type64='Q'/>
<retval declared_type64='uint64_t' type64='Q'/>
</function>
<function inline='true' name='CFSwapInt64BigToHost'>
<arg declared_type64='uint64_t' name='arg' type64='Q'/>
<retval declared_type64='uint64_t' type64='Q'/>
</function>
<function inline='true' name='CFSwapInt64HostToBig'>
<arg declared_type64='uint64_t' name='arg' type64='Q'/>
<retval declared_type64='uint64_t' type64='Q'/>
</function>
<function inline='true' name='CFSwapInt64HostToLittle'>
<arg declared_type64='uint64_t' name='arg' type64='Q'/>
<retval declared_type64='uint64_t' type64='Q'/>
</function>
<function inline='true' name='CFSwapInt64LittleToHost'>
<arg declared_type64='uint64_t' name='arg' type64='Q'/>
<retval declared_type64='uint64_t' type64='Q'/>
</function>
<function name='CFTimeZoneCopyAbbreviation'>
<arg declared_type64='CFTimeZoneRef' name='tz' type64='^{__CFTimeZone=}'/>
<arg declared_type64='CFAbsoluteTime' name='at' type64='d'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFTimeZoneCopyAbbreviationDictionary'>
<retval already_retained='true' declared_type64='CFDictionaryRef' type64='^{__CFDictionary=}'/>
</function>
<function name='CFTimeZoneCopyDefault'>
<retval already_retained='true' declared_type64='CFTimeZoneRef' type64='^{__CFTimeZone=}'/>
</function>
<function name='CFTimeZoneCopyKnownNames'>
<retval already_retained='true' declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
</function>
<function name='CFTimeZoneCopyLocalizedName'>
<arg declared_type64='CFTimeZoneRef' name='tz' type64='^{__CFTimeZone=}'/>
<arg declared_type64='CFTimeZoneNameStyle' name='style' type64='q'/>
<arg declared_type64='CFLocaleRef' name='locale' type64='^{__CFLocale=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFTimeZoneCopySystem'>
<retval already_retained='true' declared_type64='CFTimeZoneRef' type64='^{__CFTimeZone=}'/>
</function>
<function name='CFTimeZoneCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='name' type64='^{__CFString=}'/>
<arg declared_type64='CFDataRef' name='data' type64='^{__CFData=}'/>
<retval already_retained='true' declared_type64='CFTimeZoneRef' type64='^{__CFTimeZone=}'/>
</function>
<function name='CFTimeZoneCreateWithName'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='name' type64='^{__CFString=}'/>
<arg declared_type64='Boolean' name='tryAbbrev' type64='B'/>
<retval already_retained='true' declared_type64='CFTimeZoneRef' type64='^{__CFTimeZone=}'/>
</function>
<function name='CFTimeZoneCreateWithTimeIntervalFromGMT'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFTimeInterval' name='ti' type64='d'/>
<retval already_retained='true' declared_type64='CFTimeZoneRef' type64='^{__CFTimeZone=}'/>
</function>
<function name='CFTimeZoneGetData'>
<arg declared_type64='CFTimeZoneRef' name='tz' type64='^{__CFTimeZone=}'/>
<retval declared_type64='CFDataRef' type64='^{__CFData=}'/>
</function>
<function name='CFTimeZoneGetDaylightSavingTimeOffset'>
<arg declared_type64='CFTimeZoneRef' name='tz' type64='^{__CFTimeZone=}'/>
<arg declared_type64='CFAbsoluteTime' name='at' type64='d'/>
<retval declared_type64='CFTimeInterval' type64='d'/>
</function>
<function name='CFTimeZoneGetName'>
<arg declared_type64='CFTimeZoneRef' name='tz' type64='^{__CFTimeZone=}'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFTimeZoneGetNextDaylightSavingTimeTransition'>
<arg declared_type64='CFTimeZoneRef' name='tz' type64='^{__CFTimeZone=}'/>
<arg declared_type64='CFAbsoluteTime' name='at' type64='d'/>
<retval declared_type64='CFAbsoluteTime' type64='d'/>
</function>
<function name='CFTimeZoneGetSecondsFromGMT'>
<arg declared_type64='CFTimeZoneRef' name='tz' type64='^{__CFTimeZone=}'/>
<arg declared_type64='CFAbsoluteTime' name='at' type64='d'/>
<retval declared_type64='CFTimeInterval' type64='d'/>
</function>
<function name='CFTimeZoneGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFTimeZoneIsDaylightSavingTime'>
<arg declared_type64='CFTimeZoneRef' name='tz' type64='^{__CFTimeZone=}'/>
<arg declared_type64='CFAbsoluteTime' name='at' type64='d'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFTimeZoneResetSystem'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFTimeZoneSetAbbreviationDictionary'>
<arg declared_type64='CFDictionaryRef' name='dict' type64='^{__CFDictionary=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFTimeZoneSetDefault'>
<arg declared_type64='CFTimeZoneRef' name='tz' type64='^{__CFTimeZone=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFTreeAppendChild'>
<arg declared_type64='CFTreeRef' name='tree' type64='^{__CFTree=}'/>
<arg declared_type64='CFTreeRef' name='newChild' type64='^{__CFTree=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFTreeApplyFunctionToChildren'>
<arg declared_type64='CFTreeRef' name='tree' type64='^{__CFTree=}'/>
<arg declared_type64='CFTreeApplierFunction' function_pointer='true' name='applier' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='void*' name='context' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFTreeCreate'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='CFTreeContext*' name='context' type64='^{_CFTreeContext=q^v^?^?^?}'/>
<retval already_retained='true' declared_type64='CFTreeRef' type64='^{__CFTree=}'/>
</function>
<function name='CFTreeFindRoot'>
<arg declared_type64='CFTreeRef' name='tree' type64='^{__CFTree=}'/>
<retval declared_type64='CFTreeRef' type64='^{__CFTree=}'/>
</function>
<function name='CFTreeGetChildAtIndex'>
<arg declared_type64='CFTreeRef' name='tree' type64='^{__CFTree=}'/>
<arg declared_type64='CFIndex' name='idx' type64='q'/>
<retval declared_type64='CFTreeRef' type64='^{__CFTree=}'/>
</function>
<function name='CFTreeGetChildCount'>
<arg declared_type64='CFTreeRef' name='tree' type64='^{__CFTree=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFTreeGetChildren'>
<arg declared_type64='CFTreeRef' name='tree' type64='^{__CFTree=}'/>
<arg declared_type64='CFTreeRef*' name='children' type64='^^{__CFTree}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFTreeGetContext'>
<arg declared_type64='CFTreeRef' name='tree' type64='^{__CFTree=}'/>
<arg declared_type64='CFTreeContext*' name='context' type64='^{_CFTreeContext=q^v^?^?^?}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFTreeGetFirstChild'>
<arg declared_type64='CFTreeRef' name='tree' type64='^{__CFTree=}'/>
<retval declared_type64='CFTreeRef' type64='^{__CFTree=}'/>
</function>
<function name='CFTreeGetNextSibling'>
<arg declared_type64='CFTreeRef' name='tree' type64='^{__CFTree=}'/>
<retval declared_type64='CFTreeRef' type64='^{__CFTree=}'/>
</function>
<function name='CFTreeGetParent'>
<arg declared_type64='CFTreeRef' name='tree' type64='^{__CFTree=}'/>
<retval declared_type64='CFTreeRef' type64='^{__CFTree=}'/>
</function>
<function name='CFTreeGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFTreeInsertSibling'>
<arg declared_type64='CFTreeRef' name='tree' type64='^{__CFTree=}'/>
<arg declared_type64='CFTreeRef' name='newSibling' type64='^{__CFTree=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFTreePrependChild'>
<arg declared_type64='CFTreeRef' name='tree' type64='^{__CFTree=}'/>
<arg declared_type64='CFTreeRef' name='newChild' type64='^{__CFTree=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFTreeRemove'>
<arg declared_type64='CFTreeRef' name='tree' type64='^{__CFTree=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFTreeRemoveAllChildren'>
<arg declared_type64='CFTreeRef' name='tree' type64='^{__CFTree=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFTreeSetContext'>
<arg declared_type64='CFTreeRef' name='tree' type64='^{__CFTree=}'/>
<arg const='true' declared_type64='CFTreeContext*' name='context' type64='^{_CFTreeContext=q^v^?^?^?}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFTreeSortChildren'>
<arg declared_type64='CFTreeRef' name='tree' type64='^{__CFTree=}'/>
<arg declared_type64='CFComparatorFunction' function_pointer='true' name='comparator' type64='^?'>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='CFComparisonResult' type64='q'/>
</arg>
<arg declared_type64='void*' name='context' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFURLCanBeDecomposed'>
<arg declared_type64='CFURLRef' name='anURL' type64='^{__CFURL=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFURLClearResourcePropertyCache'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFURLClearResourcePropertyCacheForKey'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='CFStringRef' name='key' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFURLCopyAbsoluteURL'>
<arg declared_type64='CFURLRef' name='relativeURL' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFURLCopyFileSystemPath'>
<arg declared_type64='CFURLRef' name='anURL' type64='^{__CFURL=}'/>
<arg declared_type64='CFURLPathStyle' name='pathStyle' type64='q'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFURLCopyFragment'>
<arg declared_type64='CFURLRef' name='anURL' type64='^{__CFURL=}'/>
<arg declared_type64='CFStringRef' name='charactersToLeaveEscaped' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFURLCopyHostName'>
<arg declared_type64='CFURLRef' name='anURL' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFURLCopyLastPathComponent'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFURLCopyNetLocation'>
<arg declared_type64='CFURLRef' name='anURL' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFURLCopyParameterString'>
<arg declared_type64='CFURLRef' name='anURL' type64='^{__CFURL=}'/>
<arg declared_type64='CFStringRef' name='charactersToLeaveEscaped' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFURLCopyPassword'>
<arg declared_type64='CFURLRef' name='anURL' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFURLCopyPath'>
<arg declared_type64='CFURLRef' name='anURL' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFURLCopyPathExtension'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFURLCopyQueryString'>
<arg declared_type64='CFURLRef' name='anURL' type64='^{__CFURL=}'/>
<arg declared_type64='CFStringRef' name='charactersToLeaveEscaped' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFURLCopyResourcePropertiesForKeys'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='CFArrayRef' name='keys' type64='^{__CFArray=}'/>
<arg declared_type64='CFErrorRef*' name='error' type64='^^{__CFError}'/>
<retval already_retained='true' declared_type64='CFDictionaryRef' type64='^{__CFDictionary=}'/>
</function>
<function name='CFURLCopyResourcePropertyForKey'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='CFStringRef' name='key' type64='^{__CFString=}'/>
<arg declared_type64='void*' name='propertyValueTypeRefPtr' type64='^v'/>
<arg declared_type64='CFErrorRef*' name='error' type64='^^{__CFError}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFURLCopyResourceSpecifier'>
<arg declared_type64='CFURLRef' name='anURL' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFURLCopyScheme'>
<arg declared_type64='CFURLRef' name='anURL' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFURLCopyStrictPath'>
<arg declared_type64='CFURLRef' name='anURL' type64='^{__CFURL=}'/>
<arg declared_type64='Boolean*' name='isAbsolute' type64='^B'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFURLCopyUserName'>
<arg declared_type64='CFURLRef' name='anURL' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFURLCreateAbsoluteURLWithBytes'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='UInt8*' name='relativeURLBytes' type64='*'/>
<arg declared_type64='CFIndex' name='length' type64='q'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<arg declared_type64='CFURLRef' name='baseURL' type64='^{__CFURL=}'/>
<arg declared_type64='Boolean' name='useCompatibilityMode' type64='B'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFURLCreateBookmarkData'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='CFURLBookmarkCreationOptions' name='options' type64='Q'/>
<arg declared_type64='CFArrayRef' name='resourcePropertiesToInclude' type64='^{__CFArray=}'/>
<arg declared_type64='CFURLRef' name='relativeToURL' type64='^{__CFURL=}'/>
<arg declared_type64='CFErrorRef*' name='error' type64='^^{__CFError}'/>
<retval already_retained='true' declared_type64='CFDataRef' type64='^{__CFData=}'/>
</function>
<function name='CFURLCreateBookmarkDataFromFile'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFURLRef' name='fileURL' type64='^{__CFURL=}'/>
<arg declared_type64='CFErrorRef*' name='errorRef' type64='^^{__CFError}'/>
<retval already_retained='true' declared_type64='CFDataRef' type64='^{__CFData=}'/>
</function>
<function name='CFURLCreateByResolvingBookmarkData'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFDataRef' name='bookmark' type64='^{__CFData=}'/>
<arg declared_type64='CFURLBookmarkResolutionOptions' name='options' type64='Q'/>
<arg declared_type64='CFURLRef' name='relativeToURL' type64='^{__CFURL=}'/>
<arg declared_type64='CFArrayRef' name='resourcePropertiesToInclude' type64='^{__CFArray=}'/>
<arg declared_type64='Boolean*' name='isStale' type64='^B'/>
<arg declared_type64='CFErrorRef*' name='error' type64='^^{__CFError}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFURLCreateCopyAppendingPathComponent'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='CFStringRef' name='pathComponent' type64='^{__CFString=}'/>
<arg declared_type64='Boolean' name='isDirectory' type64='B'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFURLCreateCopyAppendingPathExtension'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='CFStringRef' name='extension' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFURLCreateCopyDeletingLastPathComponent'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFURLCreateCopyDeletingPathExtension'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFURLCreateData'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<arg declared_type64='Boolean' name='escapeWhitespace' type64='B'/>
<retval already_retained='true' declared_type64='CFDataRef' type64='^{__CFData=}'/>
</function>
<function name='CFURLCreateDataAndPropertiesFromResource'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='CFDataRef*' name='resourceData' type64='^^{__CFData}'/>
<arg declared_type64='CFDictionaryRef*' name='properties' type64='^^{__CFDictionary}'/>
<arg declared_type64='CFArrayRef' name='desiredProperties' type64='^{__CFArray=}'/>
<arg declared_type64='SInt32*' name='errorCode' type64='^i'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFURLCreateFilePathURL'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='CFErrorRef*' name='error' type64='^^{__CFError}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFURLCreateFileReferenceURL'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='CFErrorRef*' name='error' type64='^^{__CFError}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFURLCreateFromFSRef'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='struct FSRef*' name='fsRef' type64='^{FSRef=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFURLCreateFromFileSystemRepresentation'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='UInt8*' name='buffer' type64='*'/>
<arg declared_type64='CFIndex' name='bufLen' type64='q'/>
<arg declared_type64='Boolean' name='isDirectory' type64='B'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFURLCreateFromFileSystemRepresentationRelativeToBase'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='UInt8*' name='buffer' type64='*'/>
<arg declared_type64='CFIndex' name='bufLen' type64='q'/>
<arg declared_type64='Boolean' name='isDirectory' type64='B'/>
<arg declared_type64='CFURLRef' name='baseURL' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFURLCreatePropertyFromResource'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='CFStringRef' name='property' type64='^{__CFString=}'/>
<arg declared_type64='SInt32*' name='errorCode' type64='^i'/>
<retval already_retained='true' declared_type64='CFTypeRef' type64='@'/>
</function>
<function name='CFURLCreateResourcePropertiesForKeysFromBookmarkData'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFArrayRef' name='resourcePropertiesToReturn' type64='^{__CFArray=}'/>
<arg declared_type64='CFDataRef' name='bookmark' type64='^{__CFData=}'/>
<retval already_retained='true' declared_type64='CFDictionaryRef' type64='^{__CFDictionary=}'/>
</function>
<function name='CFURLCreateResourcePropertyForKeyFromBookmarkData'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='resourcePropertyKey' type64='^{__CFString=}'/>
<arg declared_type64='CFDataRef' name='bookmark' type64='^{__CFData=}'/>
<retval already_retained='true' declared_type64='CFTypeRef' type64='@'/>
</function>
<function name='CFURLCreateStringByAddingPercentEscapes'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='originalString' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='charactersToLeaveUnescaped' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='legalURLCharactersToBeEscaped' type64='^{__CFString=}'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFURLCreateStringByReplacingPercentEscapes'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='originalString' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='charactersToLeaveEscaped' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFURLCreateStringByReplacingPercentEscapesUsingEncoding'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='origString' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef' name='charsToLeaveEscaped' type64='^{__CFString=}'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFURLCreateWithBytes'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg const='true' declared_type64='UInt8*' name='URLBytes' type64='*'/>
<arg declared_type64='CFIndex' name='length' type64='q'/>
<arg declared_type64='CFStringEncoding' name='encoding' type64='I'/>
<arg declared_type64='CFURLRef' name='baseURL' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFURLCreateWithFileSystemPath'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='filePath' type64='^{__CFString=}'/>
<arg declared_type64='CFURLPathStyle' name='pathStyle' type64='q'/>
<arg declared_type64='Boolean' name='isDirectory' type64='B'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFURLCreateWithFileSystemPathRelativeToBase'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='filePath' type64='^{__CFString=}'/>
<arg declared_type64='CFURLPathStyle' name='pathStyle' type64='q'/>
<arg declared_type64='Boolean' name='isDirectory' type64='B'/>
<arg declared_type64='CFURLRef' name='baseURL' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFURLCreateWithString'>
<arg declared_type64='CFAllocatorRef' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='URLString' type64='^{__CFString=}'/>
<arg declared_type64='CFURLRef' name='baseURL' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFURLDestroyResource'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='SInt32*' name='errorCode' type64='^i'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFURLEnumeratorCreateForDirectoryURL'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFURLRef' name='directoryURL' type64='^{__CFURL=}'/>
<arg declared_type64='CFURLEnumeratorOptions' name='option' type64='Q'/>
<arg declared_type64='CFArrayRef' name='propertyKeys' type64='^{__CFArray=}'/>
<retval already_retained='true' declared_type64='CFURLEnumeratorRef' type64='^{__CFURLEnumerator=}'/>
</function>
<function name='CFURLEnumeratorCreateForMountedVolumes'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFURLEnumeratorOptions' name='option' type64='Q'/>
<arg declared_type64='CFArrayRef' name='propertyKeys' type64='^{__CFArray=}'/>
<retval already_retained='true' declared_type64='CFURLEnumeratorRef' type64='^{__CFURLEnumerator=}'/>
</function>
<function name='CFURLEnumeratorGetDescendentLevel'>
<arg declared_type64='CFURLEnumeratorRef' name='enumerator' type64='^{__CFURLEnumerator=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFURLEnumeratorGetNextURL'>
<arg declared_type64='CFURLEnumeratorRef' name='enumerator' type64='^{__CFURLEnumerator=}'/>
<arg declared_type64='CFURLRef*' name='url' type64='^^{__CFURL}'/>
<arg declared_type64='CFErrorRef*' name='error' type64='^^{__CFError}'/>
<retval declared_type64='CFURLEnumeratorResult' type64='q'/>
</function>
<function name='CFURLEnumeratorGetSourceDidChange'>
<arg declared_type64='CFURLEnumeratorRef' name='enumerator' type64='^{__CFURLEnumerator=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFURLEnumeratorGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFURLEnumeratorSkipDescendents'>
<arg declared_type64='CFURLEnumeratorRef' name='enumerator' type64='^{__CFURLEnumerator=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFURLGetBaseURL'>
<arg declared_type64='CFURLRef' name='anURL' type64='^{__CFURL=}'/>
<retval declared_type64='CFURLRef' type64='^{__CFURL=}'/>
</function>
<function name='CFURLGetByteRangeForComponent'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='CFURLComponentType' name='component' type64='q'/>
<arg declared_type64='CFRange*' name='rangeIncludingSeparators' type64='^{_CFRange=qq}'/>
<retval declared_type64='CFRange' type64='{_CFRange=qq}'/>
</function>
<function name='CFURLGetBytes'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='UInt8*' name='buffer' type64='*'/>
<arg declared_type64='CFIndex' name='bufferLength' type64='q'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='CFURLGetFSRef'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='struct FSRef*' name='fsRef' type64='^{FSRef=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFURLGetFileSystemRepresentation'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='Boolean' name='resolveAgainstBase' type64='B'/>
<arg declared_type64='UInt8*' name='buffer' type64='*'/>
<arg declared_type64='CFIndex' name='maxBufLen' type64='q'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFURLGetPortNumber'>
<arg declared_type64='CFURLRef' name='anURL' type64='^{__CFURL=}'/>
<retval declared_type64='SInt32' type64='i'/>
</function>
<function name='CFURLGetString'>
<arg declared_type64='CFURLRef' name='anURL' type64='^{__CFURL=}'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFURLGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFURLHasDirectoryPath'>
<arg declared_type64='CFURLRef' name='anURL' type64='^{__CFURL=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFURLIsFileReferenceURL'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFURLResourceIsReachable'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='CFErrorRef*' name='error' type64='^^{__CFError}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFURLSetResourcePropertiesForKeys'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='CFDictionaryRef' name='keyedPropertyValues' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFErrorRef*' name='error' type64='^^{__CFError}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFURLSetResourcePropertyForKey'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='CFStringRef' name='key' type64='^{__CFString=}'/>
<arg declared_type64='CFTypeRef' name='propertyValue' type64='@'/>
<arg declared_type64='CFErrorRef*' name='error' type64='^^{__CFError}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFURLSetTemporaryResourcePropertyForKey'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='CFStringRef' name='key' type64='^{__CFString=}'/>
<arg declared_type64='CFTypeRef' name='propertyValue' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFURLStartAccessingSecurityScopedResource'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFURLStopAccessingSecurityScopedResource'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFURLWriteBookmarkDataToFile'>
<arg declared_type64='CFDataRef' name='bookmarkRef' type64='^{__CFData=}'/>
<arg declared_type64='CFURLRef' name='fileURL' type64='^{__CFURL=}'/>
<arg declared_type64='CFURLBookmarkFileCreationOptions' name='options' type64='Q'/>
<arg declared_type64='CFErrorRef*' name='errorRef' type64='^^{__CFError}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFURLWriteDataAndPropertiesToResource'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='CFDataRef' name='dataToWrite' type64='^{__CFData=}'/>
<arg declared_type64='CFDictionaryRef' name='propertiesToWrite' type64='^{__CFDictionary=}'/>
<arg declared_type64='SInt32*' name='errorCode' type64='^i'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFUUIDCreate'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<retval already_retained='true' declared_type64='CFUUIDRef' type64='^{__CFUUID=}'/>
</function>
<function name='CFUUIDCreateFromString'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFStringRef' name='uuidStr' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFUUIDRef' type64='^{__CFUUID=}'/>
</function>
<function name='CFUUIDCreateFromUUIDBytes'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFUUIDBytes' name='bytes' type64='{_CFUUIDBytes=CCCCCCCCCCCCCCCC}'/>
<retval already_retained='true' declared_type64='CFUUIDRef' type64='^{__CFUUID=}'/>
</function>
<function name='CFUUIDCreateString'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFUUIDRef' name='uuid' type64='^{__CFUUID=}'/>
<retval already_retained='true' declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='CFUUIDCreateWithBytes'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='UInt8' name='byte0' type64='C'/>
<arg declared_type64='UInt8' name='byte1' type64='C'/>
<arg declared_type64='UInt8' name='byte2' type64='C'/>
<arg declared_type64='UInt8' name='byte3' type64='C'/>
<arg declared_type64='UInt8' name='byte4' type64='C'/>
<arg declared_type64='UInt8' name='byte5' type64='C'/>
<arg declared_type64='UInt8' name='byte6' type64='C'/>
<arg declared_type64='UInt8' name='byte7' type64='C'/>
<arg declared_type64='UInt8' name='byte8' type64='C'/>
<arg declared_type64='UInt8' name='byte9' type64='C'/>
<arg declared_type64='UInt8' name='byte10' type64='C'/>
<arg declared_type64='UInt8' name='byte11' type64='C'/>
<arg declared_type64='UInt8' name='byte12' type64='C'/>
<arg declared_type64='UInt8' name='byte13' type64='C'/>
<arg declared_type64='UInt8' name='byte14' type64='C'/>
<arg declared_type64='UInt8' name='byte15' type64='C'/>
<retval already_retained='true' declared_type64='CFUUIDRef' type64='^{__CFUUID=}'/>
</function>
<function name='CFUUIDGetConstantUUIDWithBytes'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='UInt8' name='byte0' type64='C'/>
<arg declared_type64='UInt8' name='byte1' type64='C'/>
<arg declared_type64='UInt8' name='byte2' type64='C'/>
<arg declared_type64='UInt8' name='byte3' type64='C'/>
<arg declared_type64='UInt8' name='byte4' type64='C'/>
<arg declared_type64='UInt8' name='byte5' type64='C'/>
<arg declared_type64='UInt8' name='byte6' type64='C'/>
<arg declared_type64='UInt8' name='byte7' type64='C'/>
<arg declared_type64='UInt8' name='byte8' type64='C'/>
<arg declared_type64='UInt8' name='byte9' type64='C'/>
<arg declared_type64='UInt8' name='byte10' type64='C'/>
<arg declared_type64='UInt8' name='byte11' type64='C'/>
<arg declared_type64='UInt8' name='byte12' type64='C'/>
<arg declared_type64='UInt8' name='byte13' type64='C'/>
<arg declared_type64='UInt8' name='byte14' type64='C'/>
<arg declared_type64='UInt8' name='byte15' type64='C'/>
<retval declared_type64='CFUUIDRef' type64='^{__CFUUID=}'/>
</function>
<function name='CFUUIDGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFUUIDGetUUIDBytes'>
<arg declared_type64='CFUUIDRef' name='uuid' type64='^{__CFUUID=}'/>
<retval declared_type64='CFUUIDBytes' type64='{_CFUUIDBytes=CCCCCCCCCCCCCCCC}'/>
</function>
<function name='CFWriteStreamCanAcceptBytes'>
<arg declared_type64='CFWriteStreamRef' name='stream' type64='^{__CFWriteStream=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFWriteStreamClose'>
<arg declared_type64='CFWriteStreamRef' name='stream' type64='^{__CFWriteStream=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFWriteStreamCopyDispatchQueue'>
<arg declared_type64='CFWriteStreamRef' name='stream' type64='^{__CFWriteStream=}'/>
<retval declared_type64='dispatch_queue_t' type64='@'/>
</function>
<function name='CFWriteStreamCopyError'>
<arg declared_type64='CFWriteStreamRef' name='stream' type64='^{__CFWriteStream=}'/>
<retval already_retained='true' declared_type64='CFErrorRef' type64='^{__CFError=}'/>
</function>
<function name='CFWriteStreamCopyProperty'>
<arg declared_type64='CFWriteStreamRef' name='stream' type64='^{__CFWriteStream=}'/>
<arg declared_type64='CFStringRef' name='propertyName' type64='^{__CFString=}'/>
<retval already_retained='true' declared_type64='CFTypeRef' type64='@'/>
</function>
<function name='CFWriteStreamCreateWithAllocatedBuffers'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFAllocatorRef' name='bufferAllocator' type64='^{__CFAllocator=}'/>
<retval already_retained='true' declared_type64='CFWriteStreamRef' type64='^{__CFWriteStream=}'/>
</function>
<function name='CFWriteStreamCreateWithBuffer'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='UInt8*' name='buffer' type64='*'/>
<arg declared_type64='CFIndex' name='bufferCapacity' type64='q'/>
<retval already_retained='true' declared_type64='CFWriteStreamRef' type64='^{__CFWriteStream=}'/>
</function>
<function name='CFWriteStreamCreateWithFile'>
<arg declared_type64='CFAllocatorRef' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFURLRef' name='fileURL' type64='^{__CFURL=}'/>
<retval already_retained='true' declared_type64='CFWriteStreamRef' type64='^{__CFWriteStream=}'/>
</function>
<function name='CFWriteStreamGetError'>
<arg declared_type64='CFWriteStreamRef' name='stream' type64='^{__CFWriteStream=}'/>
<retval declared_type64='CFStreamError' type64='{_CFStreamError=qi}'/>
</function>
<function name='CFWriteStreamGetStatus'>
<arg declared_type64='CFWriteStreamRef' name='stream' type64='^{__CFWriteStream=}'/>
<retval declared_type64='CFStreamStatus' type64='q'/>
</function>
<function name='CFWriteStreamGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CFWriteStreamOpen'>
<arg declared_type64='CFWriteStreamRef' name='stream' type64='^{__CFWriteStream=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFWriteStreamScheduleWithRunLoop'>
<arg declared_type64='CFWriteStreamRef' name='stream' type64='^{__CFWriteStream=}'/>
<arg declared_type64='CFRunLoopRef' name='runLoop' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFStringRef' name='runLoopMode' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFWriteStreamSetClient'>
<arg declared_type64='CFWriteStreamRef' name='stream' type64='^{__CFWriteStream=}'/>
<arg declared_type64='CFOptionFlags' name='streamEvents' type64='Q'/>
<arg declared_type64='CFWriteStreamClientCallBack' function_pointer='true' name='clientCB' type64='^?'>
<arg declared_type64='CFWriteStreamRef' type64='^{__CFWriteStream=}'/>
<arg declared_type64='CFStreamEventType' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='CFStreamClientContext*' name='clientContext' type64='^{_CFStreamClientContext=q^v^?^?^?}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFWriteStreamSetDispatchQueue'>
<arg declared_type64='CFWriteStreamRef' name='stream' type64='^{__CFWriteStream=}'/>
<arg declared_type64='dispatch_queue_t' name='q' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFWriteStreamSetProperty'>
<arg declared_type64='CFWriteStreamRef' name='stream' type64='^{__CFWriteStream=}'/>
<arg declared_type64='CFStringRef' name='propertyName' type64='^{__CFString=}'/>
<arg declared_type64='CFTypeRef' name='propertyValue' type64='@'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='CFWriteStreamUnscheduleFromRunLoop'>
<arg declared_type64='CFWriteStreamRef' name='stream' type64='^{__CFWriteStream=}'/>
<arg declared_type64='CFRunLoopRef' name='runLoop' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFStringRef' name='runLoopMode' type64='^{__CFString=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CFWriteStreamWrite'>
<arg declared_type64='CFWriteStreamRef' name='stream' type64='^{__CFWriteStream=}'/>
<arg const='true' declared_type64='UInt8*' name='buffer' type64='*'/>
<arg declared_type64='CFIndex' name='bufferLength' type64='q'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
</signatures>
