<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/IOKit.framework'/>
<cftype gettypeid_func='SSLContextGetTypeID' name='SSLContextRef' tollfree='__NSCFType' type64='^{SSLContext=}'/>
<cftype gettypeid_func='SecAccessControlGetTypeID' name='SecAccessControlRef' tollfree='__NSCFType' type64='^{__SecAccessControl=}'/>
<cftype gettypeid_func='SecCertificateGetTypeID' name='SecCertificateRef' tollfree='__NSCFType' type64='^{__SecCertificate=}'/>
<cftype gettypeid_func='SecIdentityGetTypeID' name='SecIdentityRef' tollfree='__NSCFType' type64='^{__SecIdentity=}'/>
<cftype gettypeid_func='SecKeyGetTypeID' name='SecKeyRef' tollfree='__NSCFType' type64='^{__SecKey=}'/>
<cftype gettypeid_func='SecPolicyGetTypeID' name='SecPolicyRef' tollfree='__NSCFType' type64='^{__SecPolicy=}'/>
<cftype gettypeid_func='SecTrustGetTypeID' name='SecTrustRef' tollfree='__NSCFType' type64='^{__SecTrust=}'/>
<cftype name='SSLConnectionRef' type64='^v'/>
<cftype name='SecRandomRef' type64='^{__SecRandom=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessControl' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessGroup' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessible' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessibleAfterFirstUnlock' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessibleAlways' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessibleAlwaysThisDeviceOnly' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessibleWhenUnlocked' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessibleWhenUnlockedThisDeviceOnly' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccount' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrApplicationLabel' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrApplicationTag' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAuthenticationType' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAuthenticationTypeDPA' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAuthenticationTypeDefault' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAuthenticationTypeHTMLForm' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAuthenticationTypeHTTPBasic' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAuthenticationTypeHTTPDigest' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAuthenticationTypeMSN' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAuthenticationTypeNTLM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAuthenticationTypeRPA' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCanDecrypt' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCanDerive' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCanEncrypt' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCanSign' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCanUnwrap' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCanVerify' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCanWrap' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCertificateEncoding' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCertificateType' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrComment' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCreationDate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCreator' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrDescription' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrEffectiveKeySize' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrGeneric' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrIsInvisible' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrIsNegative' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrIsPermanent' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrIssuer' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyClass' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyClassPrivate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyClassPublic' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyClassSymmetric' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeySizeInBits' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyType' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyTypeEC' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyTypeRSA' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrLabel' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrModificationDate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrPath' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrPort' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocol' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolAFP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolAppleTalk' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolDAAP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolEPPC' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolFTP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolFTPAccount' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolFTPProxy' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolFTPS' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolHTTP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolHTTPProxy' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolHTTPS' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolHTTPSProxy' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolIMAP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolIMAPS' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolIPP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolIRC' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolIRCS' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolLDAP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolLDAPS' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolNNTP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolNNTPS' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolPOP3' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolPOP3S' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolRTSP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolRTSPProxy' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolSMB' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolSMTP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolSOCKS' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolSSH' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolTelnet' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolTelnetS' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrPublicKeyHash' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrSecurityDomain' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrSerialNumber' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrServer' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrService' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrSubject' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrSubjectKeyID' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrSyncViewHint' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrSynchronizable' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrSynchronizableAny' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrTokenID' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrTokenIDSecureEnclave' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrType' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecClass' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecClassCertificate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecClassGenericPassword' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecClassIdentity' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecClassInternetPassword' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecClassKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecImportExportPassphrase' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecImportItemCertChain' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecImportItemIdentity' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecImportItemKeyID' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecImportItemLabel' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecImportItemTrust' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchCaseInsensitive' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchEmailAddressIfPresent' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchIssuers' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchItemList' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchLimit' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchLimitAll' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchLimitOne' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchPolicy' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchSearchList' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchSubjectContains' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchTrustedOnly' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchValidOnDate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyAppleCodeSigning' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyAppleEAP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyAppleIDValidation' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyAppleIPsec' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyApplePayIssuerEncryption' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyAppleRevocation' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyAppleSMIME' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyAppleSSL' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyAppleTimeStamping' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyAppleX509Basic' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyClient' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyMacAppStoreReceipt' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyOid' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyRevocationFlags' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPrivateKeyAttrs' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPropertyTypeError' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPropertyTypeTitle' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPublicKeyAttrs' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecRandomRef _Nonnull' name='kSecRandomDefault' type64='^{__SecRandom=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecReturnAttributes' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecReturnData' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecReturnPersistentRef' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecReturnRef' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecSharedPassword' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTrustCertificateTransparency' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTrustEvaluationDate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTrustExtendedValidation' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTrustOrganizationName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTrustResultValue' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTrustRevocationChecked' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTrustRevocationValidUntilDate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecUseAuthenticationContext' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecUseAuthenticationUI' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecUseAuthenticationUIAllow' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecUseAuthenticationUIFail' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecUseAuthenticationUISkip' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecUseItemList' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecUseNoAuthenticationUI' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecUseOperationPrompt' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecValueData' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecValuePersistentRef' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecValueRef' type64='^{__CFString=}'/>
<enum name='SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA' value64='17'/>
<enum name='SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA' value64='19'/>
<enum name='SSL_DHE_DSS_WITH_DES_CBC_SHA' value64='18'/>
<enum name='SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA' value64='20'/>
<enum name='SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA' value64='22'/>
<enum name='SSL_DHE_RSA_WITH_DES_CBC_SHA' value64='21'/>
<enum name='SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA' value64='11'/>
<enum name='SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA' value64='13'/>
<enum name='SSL_DH_DSS_WITH_DES_CBC_SHA' value64='12'/>
<enum name='SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA' value64='14'/>
<enum name='SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA' value64='16'/>
<enum name='SSL_DH_RSA_WITH_DES_CBC_SHA' value64='15'/>
<enum name='SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA' value64='25'/>
<enum name='SSL_DH_anon_EXPORT_WITH_RC4_40_MD5' value64='23'/>
<enum name='SSL_DH_anon_WITH_3DES_EDE_CBC_SHA' value64='27'/>
<enum name='SSL_DH_anon_WITH_DES_CBC_SHA' value64='26'/>
<enum name='SSL_DH_anon_WITH_RC4_128_MD5' value64='24'/>
<enum name='SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA' value64='29'/>
<enum name='SSL_FORTEZZA_DMS_WITH_NULL_SHA' value64='28'/>
<enum name='SSL_NO_SUCH_CIPHERSUITE' value64='65535'/>
<enum name='SSL_NULL_WITH_NULL_NULL' value64='0'/>
<enum name='SSL_RSA_EXPORT_WITH_DES40_CBC_SHA' value64='8'/>
<enum name='SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5' value64='6'/>
<enum name='SSL_RSA_EXPORT_WITH_RC4_40_MD5' value64='3'/>
<enum name='SSL_RSA_WITH_3DES_EDE_CBC_MD5' value64='65411'/>
<enum name='SSL_RSA_WITH_3DES_EDE_CBC_SHA' value64='10'/>
<enum name='SSL_RSA_WITH_DES_CBC_MD5' value64='65410'/>
<enum name='SSL_RSA_WITH_DES_CBC_SHA' value64='9'/>
<enum name='SSL_RSA_WITH_IDEA_CBC_MD5' value64='65409'/>
<enum name='SSL_RSA_WITH_IDEA_CBC_SHA' value64='7'/>
<enum name='SSL_RSA_WITH_NULL_MD5' value64='1'/>
<enum name='SSL_RSA_WITH_NULL_SHA' value64='2'/>
<enum name='SSL_RSA_WITH_RC2_CBC_MD5' value64='65408'/>
<enum name='SSL_RSA_WITH_RC4_128_MD5' value64='4'/>
<enum name='SSL_RSA_WITH_RC4_128_SHA' value64='5'/>
<enum name='TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA' value64='19'/>
<enum name='TLS_DHE_DSS_WITH_AES_128_CBC_SHA' value64='50'/>
<enum name='TLS_DHE_DSS_WITH_AES_128_CBC_SHA256' value64='64'/>
<enum name='TLS_DHE_DSS_WITH_AES_128_GCM_SHA256' value64='162'/>
<enum name='TLS_DHE_DSS_WITH_AES_256_CBC_SHA' value64='56'/>
<enum name='TLS_DHE_DSS_WITH_AES_256_CBC_SHA256' value64='106'/>
<enum name='TLS_DHE_DSS_WITH_AES_256_GCM_SHA384' value64='163'/>
<enum name='TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA' value64='143'/>
<enum name='TLS_DHE_PSK_WITH_AES_128_CBC_SHA' value64='144'/>
<enum name='TLS_DHE_PSK_WITH_AES_128_CBC_SHA256' value64='178'/>
<enum name='TLS_DHE_PSK_WITH_AES_128_GCM_SHA256' value64='170'/>
<enum name='TLS_DHE_PSK_WITH_AES_256_CBC_SHA' value64='145'/>
<enum name='TLS_DHE_PSK_WITH_AES_256_CBC_SHA384' value64='179'/>
<enum name='TLS_DHE_PSK_WITH_AES_256_GCM_SHA384' value64='171'/>
<enum name='TLS_DHE_PSK_WITH_NULL_SHA' value64='45'/>
<enum name='TLS_DHE_PSK_WITH_NULL_SHA256' value64='180'/>
<enum name='TLS_DHE_PSK_WITH_NULL_SHA384' value64='181'/>
<enum name='TLS_DHE_PSK_WITH_RC4_128_SHA' value64='142'/>
<enum name='TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA' value64='22'/>
<enum name='TLS_DHE_RSA_WITH_AES_128_CBC_SHA' value64='51'/>
<enum name='TLS_DHE_RSA_WITH_AES_128_CBC_SHA256' value64='103'/>
<enum name='TLS_DHE_RSA_WITH_AES_128_GCM_SHA256' value64='158'/>
<enum name='TLS_DHE_RSA_WITH_AES_256_CBC_SHA' value64='57'/>
<enum name='TLS_DHE_RSA_WITH_AES_256_CBC_SHA256' value64='107'/>
<enum name='TLS_DHE_RSA_WITH_AES_256_GCM_SHA384' value64='159'/>
<enum name='TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA' value64='13'/>
<enum name='TLS_DH_DSS_WITH_AES_128_CBC_SHA' value64='48'/>
<enum name='TLS_DH_DSS_WITH_AES_128_CBC_SHA256' value64='62'/>
<enum name='TLS_DH_DSS_WITH_AES_128_GCM_SHA256' value64='164'/>
<enum name='TLS_DH_DSS_WITH_AES_256_CBC_SHA' value64='54'/>
<enum name='TLS_DH_DSS_WITH_AES_256_CBC_SHA256' value64='104'/>
<enum name='TLS_DH_DSS_WITH_AES_256_GCM_SHA384' value64='165'/>
<enum name='TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA' value64='16'/>
<enum name='TLS_DH_RSA_WITH_AES_128_CBC_SHA' value64='49'/>
<enum name='TLS_DH_RSA_WITH_AES_128_CBC_SHA256' value64='63'/>
<enum name='TLS_DH_RSA_WITH_AES_128_GCM_SHA256' value64='160'/>
<enum name='TLS_DH_RSA_WITH_AES_256_CBC_SHA' value64='55'/>
<enum name='TLS_DH_RSA_WITH_AES_256_CBC_SHA256' value64='105'/>
<enum name='TLS_DH_RSA_WITH_AES_256_GCM_SHA384' value64='161'/>
<enum name='TLS_DH_anon_WITH_3DES_EDE_CBC_SHA' value64='27'/>
<enum name='TLS_DH_anon_WITH_AES_128_CBC_SHA' value64='52'/>
<enum name='TLS_DH_anon_WITH_AES_128_CBC_SHA256' value64='108'/>
<enum name='TLS_DH_anon_WITH_AES_128_GCM_SHA256' value64='166'/>
<enum name='TLS_DH_anon_WITH_AES_256_CBC_SHA' value64='58'/>
<enum name='TLS_DH_anon_WITH_AES_256_CBC_SHA256' value64='109'/>
<enum name='TLS_DH_anon_WITH_AES_256_GCM_SHA384' value64='167'/>
<enum name='TLS_DH_anon_WITH_RC4_128_MD5' value64='24'/>
<enum name='TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA' value64='49160'/>
<enum name='TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA' value64='49161'/>
<enum name='TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256' value64='49187'/>
<enum name='TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256' value64='49195'/>
<enum name='TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA' value64='49162'/>
<enum name='TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384' value64='49188'/>
<enum name='TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384' value64='49196'/>
<enum name='TLS_ECDHE_ECDSA_WITH_NULL_SHA' value64='49158'/>
<enum name='TLS_ECDHE_ECDSA_WITH_RC4_128_SHA' value64='49159'/>
<enum name='TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA' value64='49170'/>
<enum name='TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA' value64='49171'/>
<enum name='TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' value64='49191'/>
<enum name='TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256' value64='49199'/>
<enum name='TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA' value64='49172'/>
<enum name='TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384' value64='49192'/>
<enum name='TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384' value64='49200'/>
<enum name='TLS_ECDHE_RSA_WITH_NULL_SHA' value64='49168'/>
<enum name='TLS_ECDHE_RSA_WITH_RC4_128_SHA' value64='49169'/>
<enum name='TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA' value64='49155'/>
<enum name='TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA' value64='49156'/>
<enum name='TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256' value64='49189'/>
<enum name='TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256' value64='49197'/>
<enum name='TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA' value64='49157'/>
<enum name='TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384' value64='49190'/>
<enum name='TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384' value64='49198'/>
<enum name='TLS_ECDH_ECDSA_WITH_NULL_SHA' value64='49153'/>
<enum name='TLS_ECDH_ECDSA_WITH_RC4_128_SHA' value64='49154'/>
<enum name='TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA' value64='49165'/>
<enum name='TLS_ECDH_RSA_WITH_AES_128_CBC_SHA' value64='49166'/>
<enum name='TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256' value64='49193'/>
<enum name='TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256' value64='49201'/>
<enum name='TLS_ECDH_RSA_WITH_AES_256_CBC_SHA' value64='49167'/>
<enum name='TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384' value64='49194'/>
<enum name='TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384' value64='49202'/>
<enum name='TLS_ECDH_RSA_WITH_NULL_SHA' value64='49163'/>
<enum name='TLS_ECDH_RSA_WITH_RC4_128_SHA' value64='49164'/>
<enum name='TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA' value64='49175'/>
<enum name='TLS_ECDH_anon_WITH_AES_128_CBC_SHA' value64='49176'/>
<enum name='TLS_ECDH_anon_WITH_AES_256_CBC_SHA' value64='49177'/>
<enum name='TLS_ECDH_anon_WITH_NULL_SHA' value64='49173'/>
<enum name='TLS_ECDH_anon_WITH_RC4_128_SHA' value64='49174'/>
<enum name='TLS_EMPTY_RENEGOTIATION_INFO_SCSV' value64='255'/>
<enum name='TLS_NULL_WITH_NULL_NULL' value64='0'/>
<enum name='TLS_PSK_WITH_3DES_EDE_CBC_SHA' value64='139'/>
<enum name='TLS_PSK_WITH_AES_128_CBC_SHA' value64='140'/>
<enum name='TLS_PSK_WITH_AES_128_CBC_SHA256' value64='174'/>
<enum name='TLS_PSK_WITH_AES_128_GCM_SHA256' value64='168'/>
<enum name='TLS_PSK_WITH_AES_256_CBC_SHA' value64='141'/>
<enum name='TLS_PSK_WITH_AES_256_CBC_SHA384' value64='175'/>
<enum name='TLS_PSK_WITH_AES_256_GCM_SHA384' value64='169'/>
<enum name='TLS_PSK_WITH_NULL_SHA' value64='44'/>
<enum name='TLS_PSK_WITH_NULL_SHA256' value64='176'/>
<enum name='TLS_PSK_WITH_NULL_SHA384' value64='177'/>
<enum name='TLS_PSK_WITH_RC4_128_SHA' value64='138'/>
<enum name='TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA' value64='147'/>
<enum name='TLS_RSA_PSK_WITH_AES_128_CBC_SHA' value64='148'/>
<enum name='TLS_RSA_PSK_WITH_AES_128_CBC_SHA256' value64='182'/>
<enum name='TLS_RSA_PSK_WITH_AES_128_GCM_SHA256' value64='172'/>
<enum name='TLS_RSA_PSK_WITH_AES_256_CBC_SHA' value64='149'/>
<enum name='TLS_RSA_PSK_WITH_AES_256_CBC_SHA384' value64='183'/>
<enum name='TLS_RSA_PSK_WITH_AES_256_GCM_SHA384' value64='173'/>
<enum name='TLS_RSA_PSK_WITH_NULL_SHA' value64='46'/>
<enum name='TLS_RSA_PSK_WITH_NULL_SHA256' value64='184'/>
<enum name='TLS_RSA_PSK_WITH_NULL_SHA384' value64='185'/>
<enum name='TLS_RSA_PSK_WITH_RC4_128_SHA' value64='146'/>
<enum name='TLS_RSA_WITH_3DES_EDE_CBC_SHA' value64='10'/>
<enum name='TLS_RSA_WITH_AES_128_CBC_SHA' value64='47'/>
<enum name='TLS_RSA_WITH_AES_128_CBC_SHA256' value64='60'/>
<enum name='TLS_RSA_WITH_AES_128_GCM_SHA256' value64='156'/>
<enum name='TLS_RSA_WITH_AES_256_CBC_SHA' value64='53'/>
<enum name='TLS_RSA_WITH_AES_256_CBC_SHA256' value64='61'/>
<enum name='TLS_RSA_WITH_AES_256_GCM_SHA384' value64='157'/>
<enum name='TLS_RSA_WITH_NULL_MD5' value64='1'/>
<enum name='TLS_RSA_WITH_NULL_SHA' value64='2'/>
<enum name='TLS_RSA_WITH_NULL_SHA256' value64='59'/>
<enum name='TLS_RSA_WITH_RC4_128_MD5' value64='4'/>
<enum name='TLS_RSA_WITH_RC4_128_SHA' value64='5'/>
<enum name='errSSLBadCert' value64='-9808'/>
<enum name='errSSLBadCipherSuite' value64='-9818'/>
<enum name='errSSLBadConfiguration' value64='-9848'/>
<enum name='errSSLBadRecordMac' value64='-9846'/>
<enum name='errSSLBufferOverflow' value64='-9817'/>
<enum name='errSSLCertExpired' value64='-9814'/>
<enum name='errSSLCertNotYetValid' value64='-9815'/>
<enum name='errSSLClientAuthCompleted' value64='-9841'/>
<enum name='errSSLClientCertRequested' value64='-9842'/>
<enum name='errSSLClientHelloReceived' value64='-9851'/>
<enum name='errSSLClosedAbort' value64='-9806'/>
<enum name='errSSLClosedGraceful' value64='-9805'/>
<enum name='errSSLClosedNoNotify' value64='-9816'/>
<enum name='errSSLConnectionRefused' value64='-9844'/>
<enum name='errSSLCrypto' value64='-9809'/>
<enum name='errSSLDecryptionFail' value64='-9845'/>
<enum name='errSSLFatalAlert' value64='-9802'/>
<enum name='errSSLHostNameMismatch' value64='-9843'/>
<enum name='errSSLIllegalParam' value64='-9830'/>
<enum name='errSSLInternal' value64='-9810'/>
<enum name='errSSLLast' value64='-9849'/>
<enum name='errSSLModuleAttach' value64='-9811'/>
<enum name='errSSLNegotiation' value64='-9801'/>
<enum name='errSSLNoRootCert' value64='-9813'/>
<enum name='errSSLPeerAccessDenied' value64='-9832'/>
<enum name='errSSLPeerAuthCompleted' value64='-9841'/>
<enum name='errSSLPeerBadCert' value64='-9825'/>
<enum name='errSSLPeerBadRecordMac' value64='-9820'/>
<enum name='errSSLPeerCertExpired' value64='-9828'/>
<enum name='errSSLPeerCertRevoked' value64='-9827'/>
<enum name='errSSLPeerCertUnknown' value64='-9829'/>
<enum name='errSSLPeerDecodeError' value64='-9833'/>
<enum name='errSSLPeerDecompressFail' value64='-9823'/>
<enum name='errSSLPeerDecryptError' value64='-9834'/>
<enum name='errSSLPeerDecryptionFail' value64='-9821'/>
<enum name='errSSLPeerExportRestriction' value64='-9835'/>
<enum name='errSSLPeerHandshakeFail' value64='-9824'/>
<enum name='errSSLPeerInsufficientSecurity' value64='-9837'/>
<enum name='errSSLPeerInternalError' value64='-9838'/>
<enum name='errSSLPeerNoRenegotiation' value64='-9840'/>
<enum name='errSSLPeerProtocolVersion' value64='-9836'/>
<enum name='errSSLPeerRecordOverflow' value64='-9822'/>
<enum name='errSSLPeerUnexpectedMsg' value64='-9819'/>
<enum name='errSSLPeerUnknownCA' value64='-9831'/>
<enum name='errSSLPeerUnsupportedCert' value64='-9826'/>
<enum name='errSSLPeerUserCancelled' value64='-9839'/>
<enum name='errSSLProtocol' value64='-9800'/>
<enum name='errSSLRecordOverflow' value64='-9847'/>
<enum name='errSSLServerAuthCompleted' value64='-9841'/>
<enum name='errSSLSessionNotFound' value64='-9804'/>
<enum name='errSSLUnexpectedRecord' value64='-9849'/>
<enum name='errSSLUnknownRootCert' value64='-9812'/>
<enum name='errSSLWeakPeerEphemeralDHKey' value64='-9850'/>
<enum name='errSSLWouldBlock' value64='-9803'/>
<enum name='errSSLXCertChainInvalid' value64='-9807'/>
<enum name='errSecAllocate' value64='-108'/>
<enum name='errSecAuthFailed' value64='-25293'/>
<enum name='errSecBadReq' value64='-909'/>
<enum name='errSecDecode' value64='-26275'/>
<enum name='errSecDuplicateItem' value64='-25299'/>
<enum name='errSecIO' value64='-36'/>
<enum name='errSecInteractionNotAllowed' value64='-25308'/>
<enum name='errSecInternalComponent' value64='-2070'/>
<enum name='errSecItemNotFound' value64='-25300'/>
<enum name='errSecNotAvailable' value64='-25291'/>
<enum name='errSecOpWr' value64='-49'/>
<enum name='errSecParam' value64='-50'/>
<enum name='errSecSuccess' value64='0'/>
<enum name='errSecUnimplemented' value64='-4'/>
<enum name='errSecUserCanceled' value64='-128'/>
<enum name='kAlwaysAuthenticate' value64='1'/>
<enum name='kDTLSProtocol1' value64='9'/>
<enum name='kNeverAuthenticate' value64='0'/>
<enum name='kSSLAborted' value64='4'/>
<enum name='kSSLClientCertNone' value64='0'/>
<enum name='kSSLClientCertRejected' value64='3'/>
<enum name='kSSLClientCertRequested' value64='1'/>
<enum name='kSSLClientCertSent' value64='2'/>
<enum name='kSSLClientSide' value64='1'/>
<enum name='kSSLClosed' value64='3'/>
<enum name='kSSLConnected' value64='2'/>
<enum name='kSSLDatagramType' value64='1'/>
<enum name='kSSLHandshake' value64='1'/>
<enum name='kSSLIdle' value64='0'/>
<enum name='kSSLProtocol2' value64='1'/>
<enum name='kSSLProtocol3' value64='2'/>
<enum name='kSSLProtocol3Only' value64='3'/>
<enum name='kSSLProtocolAll' value64='6'/>
<enum name='kSSLProtocolUnknown' value64='0'/>
<enum name='kSSLServerSide' value64='0'/>
<enum name='kSSLSessionOptionAllowServerIdentityChange' value64='5'/>
<enum name='kSSLSessionOptionBreakOnCertRequested' value64='1'/>
<enum name='kSSLSessionOptionBreakOnClientAuth' value64='2'/>
<enum name='kSSLSessionOptionBreakOnClientHello' value64='7'/>
<enum name='kSSLSessionOptionBreakOnServerAuth' value64='0'/>
<enum name='kSSLSessionOptionFallback' value64='6'/>
<enum name='kSSLSessionOptionFalseStart' value64='3'/>
<enum name='kSSLSessionOptionSendOneByteRecord' value64='4'/>
<enum name='kSSLSessionStrengthPolicyATSv1' value64='1'/>
<enum name='kSSLSessionStrengthPolicyDefault' value64='0'/>
<enum name='kSSLStreamType' value64='0'/>
<enum name='kSecAccessControlAnd' value64='32768'/>
<enum name='kSecAccessControlApplicationPassword' value64='-2147483648'/>
<enum name='kSecAccessControlDevicePasscode' value64='16'/>
<enum name='kSecAccessControlOr' value64='16384'/>
<enum name='kSecAccessControlPrivateKeyUsage' value64='1073741824'/>
<enum name='kSecAccessControlTouchIDAny' value64='2'/>
<enum name='kSecAccessControlTouchIDCurrentSet' value64='8'/>
<enum name='kSecAccessControlUserPresence' value64='1'/>
<enum name='kSecPaddingNone' value64='0'/>
<enum name='kSecPaddingOAEP' value64='2'/>
<enum name='kSecPaddingPKCS1' value64='1'/>
<enum name='kSecPaddingPKCS1MD2' value64='32768'/>
<enum name='kSecPaddingPKCS1MD5' value64='32769'/>
<enum name='kSecPaddingPKCS1SHA1' value64='32770'/>
<enum name='kSecPaddingPKCS1SHA224' value64='32771'/>
<enum name='kSecPaddingPKCS1SHA256' value64='32772'/>
<enum name='kSecPaddingPKCS1SHA384' value64='32773'/>
<enum name='kSecPaddingPKCS1SHA512' value64='32774'/>
<enum name='kSecPaddingSigRaw' value64='16384'/>
<enum name='kSecRevocationCRLMethod' value64='2'/>
<enum name='kSecRevocationNetworkAccessDisabled' value64='16'/>
<enum name='kSecRevocationOCSPMethod' value64='1'/>
<enum name='kSecRevocationPreferCRL' value64='4'/>
<enum name='kSecRevocationRequirePositiveResponse' value64='8'/>
<enum name='kSecRevocationUseAnyAvailableMethod' value64='3'/>
<enum name='kSecTrustResultConfirm' value64='2'/>
<enum name='kSecTrustResultDeny' value64='3'/>
<enum name='kSecTrustResultFatalTrustFailure' value64='6'/>
<enum name='kSecTrustResultInvalid' value64='0'/>
<enum name='kSecTrustResultOtherError' value64='7'/>
<enum name='kSecTrustResultProceed' value64='1'/>
<enum name='kSecTrustResultRecoverableTrustFailure' value64='5'/>
<enum name='kSecTrustResultUnspecified' value64='4'/>
<enum name='kTLSProtocol1' value64='4'/>
<enum name='kTLSProtocol11' value64='7'/>
<enum name='kTLSProtocol12' value64='8'/>
<enum name='kTLSProtocol1Only' value64='5'/>
<enum name='kTryAuthenticate' value64='2'/>
<function name='SSLAddDistinguishedName'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg const='true' declared_type64='void * _Nullable' name='derDN' type64='^v'/>
<arg declared_type64='size_t' name='derDNLen' type64='Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLClose'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLContextGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SSLCopyDistinguishedNames'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='names' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLCopyPeerTrust'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SecTrustRef _Nullable * _Nonnull' name='trust' type64='^^{__SecTrust}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLCreateContext'>
<arg declared_type64='CFAllocatorRef _Nullable' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='SSLProtocolSide' name='protocolSide' type64='i'/>
<arg declared_type64='SSLConnectionType' name='connectionType' type64='i'/>
<retval declared_type64='SSLContextRef _Nullable' type64='^{SSLContext=}'/>
</function>
<function name='SSLGetBufferedReadSize'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='size_t * _Nonnull' name='bufSize' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetClientCertificateState'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLClientCertificateState * _Nonnull' name='clientState' type64='^i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetConnection'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLConnectionRef _Nullable * _Nonnull' name='connection' type64='^^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetDatagramWriteSize'>
<arg declared_type64='SSLContextRef _Nonnull' name='dtlsContext' type64='^{SSLContext=}'/>
<arg declared_type64='size_t * _Nonnull' name='bufSize' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetEnabledCiphers'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLCipherSuite * _Nonnull' name='ciphers' type64='^S'/>
<arg declared_type64='size_t * _Nonnull' name='numCiphers' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetMaxDatagramRecordSize'>
<arg declared_type64='SSLContextRef _Nonnull' name='dtlsContext' type64='^{SSLContext=}'/>
<arg declared_type64='size_t * _Nonnull' name='maxSize' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetNegotiatedCipher'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLCipherSuite * _Nonnull' name='cipherSuite' type64='^S'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetNegotiatedProtocolVersion'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLProtocol * _Nonnull' name='protocol' type64='^i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetNumberEnabledCiphers'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='size_t * _Nonnull' name='numCiphers' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetNumberSupportedCiphers'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='size_t * _Nonnull' name='numCiphers' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetPeerDomainName'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='char * _Nonnull' name='peerName' type64='*'/>
<arg declared_type64='size_t * _Nonnull' name='peerNameLen' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetPeerDomainNameLength'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='size_t * _Nonnull' name='peerNameLen' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetPeerID'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg const='true' declared_type64='void * _Nullable * _Nonnull' name='peerID' type64='^^v'/>
<arg declared_type64='size_t * _Nonnull' name='peerIDLen' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetProtocolVersionMax'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLProtocol * _Nonnull' name='maxVersion' type64='^i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetProtocolVersionMin'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLProtocol * _Nonnull' name='minVersion' type64='^i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetSessionOption'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLSessionOption' name='option' type64='i'/>
<arg declared_type64='Boolean * _Nonnull' name='value' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetSessionState'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLSessionState * _Nonnull' name='state' type64='^i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetSupportedCiphers'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLCipherSuite * _Nonnull' name='ciphers' type64='^S'/>
<arg declared_type64='size_t * _Nonnull' name='numCiphers' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLHandshake'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLRead'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='void * _Nonnull' name='data' type64='^v'/>
<arg declared_type64='size_t' name='dataLength' type64='Q'/>
<arg declared_type64='size_t * _Nonnull' name='processed' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetCertificate'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='CFArrayRef _Nonnull' name='certRefs' type64='^{__CFArray=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetClientSideAuthenticate'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLAuthenticate' name='auth' type64='i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetConnection'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLConnectionRef _Nullable' name='connection' type64='@'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetDatagramHelloCookie'>
<arg declared_type64='SSLContextRef _Nonnull' name='dtlsContext' type64='^{SSLContext=}'/>
<arg const='true' declared_type64='void * _Nullable' name='cookie' type64='^v'/>
<arg declared_type64='size_t' name='cookieLen' type64='Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetEnabledCiphers'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg const='true' declared_type64='SSLCipherSuite * _Nonnull' name='ciphers' type64='^S'/>
<arg declared_type64='size_t' name='numCiphers' type64='Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetEncryptionCertificate'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='CFArrayRef _Nonnull' name='certRefs' type64='^{__CFArray=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetIOFuncs'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLReadFunc _Nonnull' function_pointer='true' name='readFunc' type64='^?'>
<arg declared_type64='SSLConnectionRef _Nonnull' type64='@'/>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='size_t * _Nonnull' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='SSLWriteFunc _Nonnull' function_pointer='true' name='writeFunc' type64='^?'>
<arg declared_type64='SSLConnectionRef _Nonnull' type64='@'/>
<arg const='true' declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='size_t * _Nonnull' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetMaxDatagramRecordSize'>
<arg declared_type64='SSLContextRef _Nonnull' name='dtlsContext' type64='^{SSLContext=}'/>
<arg declared_type64='size_t' name='maxSize' type64='Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetPeerDomainName'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg const='true' declared_type64='char * _Nullable' name='peerName' type64='*'/>
<arg declared_type64='size_t' name='peerNameLen' type64='Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetPeerID'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg const='true' declared_type64='void * _Nullable' name='peerID' type64='^v'/>
<arg declared_type64='size_t' name='peerIDLen' type64='Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetProtocolVersionMax'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLProtocol' name='maxVersion' type64='i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetProtocolVersionMin'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLProtocol' name='minVersion' type64='i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetSessionOption'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLSessionOption' name='option' type64='i'/>
<arg declared_type64='Boolean' name='value' type64='B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetSessionStrengthPolicy'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLSessionStrengthPolicy' name='policyStrength' type64='i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLWrite'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg const='true' declared_type64='void * _Nullable' name='data' type64='^v'/>
<arg declared_type64='size_t' name='dataLength' type64='Q'/>
<arg declared_type64='size_t * _Nonnull' name='processed' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecAccessControlCreateWithFlags'>
<arg declared_type64='CFAllocatorRef _Nullable' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFTypeRef _Nonnull' name='protection' type64='@'/>
<arg declared_type64='SecAccessControlCreateFlags' name='flags' type64='q'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='SecAccessControlRef _Nullable' type64='^{__SecAccessControl=}'/>
</function>
<function name='SecAccessControlGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecAddSharedWebCredential'>
<arg declared_type64='CFStringRef _Nonnull' name='fqdn' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='account' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef _Nullable' name='password' type64='^{__CFString=}'/>
<arg declared_type64='void (^ _Nonnull)(CFErrorRef _Nullable)' function_pointer='true' name='completionHandler' type64='@?'>
<arg declared_type64='CFErrorRef _Nullable' type64='^{__CFError=}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='SecCertificateCopyData'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{__SecCertificate=}'/>
<retval declared_type64='CFDataRef _Nonnull' type64='^{__CFData=}'/>
</function>
<function name='SecCertificateCopySubjectSummary'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{__SecCertificate=}'/>
<retval declared_type64='CFStringRef _Nonnull' type64='^{__CFString=}'/>
</function>
<function name='SecCertificateCreateWithData'>
<arg declared_type64='CFAllocatorRef _Nullable' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFDataRef _Nonnull' name='data' type64='^{__CFData=}'/>
<retval declared_type64='SecCertificateRef _Nullable' type64='^{__SecCertificate=}'/>
</function>
<function name='SecCertificateGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecCreateSharedWebCredentialPassword'>
<retval declared_type64='CFStringRef _Nullable' type64='^{__CFString=}'/>
</function>
<function name='SecIdentityCopyCertificate'>
<arg declared_type64='SecIdentityRef _Nonnull' name='identityRef' type64='^{__SecIdentity=}'/>
<arg declared_type64='SecCertificateRef _Nullable * _Nonnull' name='certificateRef' type64='^^{__SecCertificate}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecIdentityCopyPrivateKey'>
<arg declared_type64='SecIdentityRef _Nonnull' name='identityRef' type64='^{__SecIdentity=}'/>
<arg declared_type64='SecKeyRef _Nullable * _Nonnull' name='privateKeyRef' type64='^^{__SecKey}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecIdentityGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecItemAdd'>
<arg declared_type64='CFDictionaryRef _Nonnull' name='attributes' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFTypeRef _Nullable * _Nullable' name='result' type64='^^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecItemCopyMatching'>
<arg declared_type64='CFDictionaryRef _Nonnull' name='query' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFTypeRef _Nullable * _Nullable' name='result' type64='^^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecItemDelete'>
<arg declared_type64='CFDictionaryRef _Nonnull' name='query' type64='^{__CFDictionary=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecItemUpdate'>
<arg declared_type64='CFDictionaryRef _Nonnull' name='query' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFDictionaryRef _Nonnull' name='attributesToUpdate' type64='^{__CFDictionary=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeyDecrypt'>
<arg declared_type64='SecKeyRef _Nonnull' name='key' type64='^{__SecKey=}'/>
<arg declared_type64='SecPadding' name='padding' type64='I'/>
<arg const='true' declared_type64='uint8_t * _Nonnull' name='cipherText' type64='*'/>
<arg declared_type64='size_t' name='cipherTextLen' type64='Q'/>
<arg declared_type64='uint8_t * _Nonnull' name='plainText' type64='*'/>
<arg declared_type64='size_t * _Nonnull' name='plainTextLen' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeyEncrypt'>
<arg declared_type64='SecKeyRef _Nonnull' name='key' type64='^{__SecKey=}'/>
<arg declared_type64='SecPadding' name='padding' type64='I'/>
<arg const='true' declared_type64='uint8_t * _Nonnull' name='plainText' type64='*'/>
<arg declared_type64='size_t' name='plainTextLen' type64='Q'/>
<arg declared_type64='uint8_t * _Nonnull' name='cipherText' type64='*'/>
<arg declared_type64='size_t * _Nonnull' name='cipherTextLen' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeyGeneratePair'>
<arg declared_type64='CFDictionaryRef _Nonnull' name='parameters' type64='^{__CFDictionary=}'/>
<arg declared_type64='SecKeyRef _Nullable * _Nullable' name='publicKey' type64='^^{__SecKey}'/>
<arg declared_type64='SecKeyRef _Nullable * _Nullable' name='privateKey' type64='^^{__SecKey}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeyGetBlockSize'>
<arg declared_type64='SecKeyRef _Nonnull' name='key' type64='^{__SecKey=}'/>
<retval declared_type64='size_t' type64='Q'/>
</function>
<function name='SecKeyGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecKeyRawSign'>
<arg declared_type64='SecKeyRef _Nonnull' name='key' type64='^{__SecKey=}'/>
<arg declared_type64='SecPadding' name='padding' type64='I'/>
<arg const='true' declared_type64='uint8_t * _Nonnull' name='dataToSign' type64='*'/>
<arg declared_type64='size_t' name='dataToSignLen' type64='Q'/>
<arg declared_type64='uint8_t * _Nonnull' name='sig' type64='*'/>
<arg declared_type64='size_t * _Nonnull' name='sigLen' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeyRawVerify'>
<arg declared_type64='SecKeyRef _Nonnull' name='key' type64='^{__SecKey=}'/>
<arg declared_type64='SecPadding' name='padding' type64='I'/>
<arg const='true' declared_type64='uint8_t * _Nonnull' name='signedData' type64='*'/>
<arg declared_type64='size_t' name='signedDataLen' type64='Q'/>
<arg const='true' declared_type64='uint8_t * _Nonnull' name='sig' type64='*'/>
<arg declared_type64='size_t' name='sigLen' type64='Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecPKCS12Import'>
<arg declared_type64='CFDataRef _Nonnull' name='pkcs12_data' type64='^{__CFData=}'/>
<arg declared_type64='CFDictionaryRef _Nonnull' name='options' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='items' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecPolicyCopyProperties'>
<arg declared_type64='SecPolicyRef _Nonnull' name='policyRef' type64='^{__SecPolicy=}'/>
<retval declared_type64='CFDictionaryRef _Nonnull' type64='^{__CFDictionary=}'/>
</function>
<function name='SecPolicyCreateBasicX509'>
<retval declared_type64='SecPolicyRef _Nonnull' type64='^{__SecPolicy=}'/>
</function>
<function name='SecPolicyCreateRevocation'>
<arg declared_type64='CFOptionFlags' name='revocationFlags' type64='Q'/>
<retval declared_type64='SecPolicyRef _Nonnull' type64='^{__SecPolicy=}'/>
</function>
<function name='SecPolicyCreateSSL'>
<arg declared_type64='Boolean' name='server' type64='B'/>
<arg declared_type64='CFStringRef _Nullable' name='hostname' type64='^{__CFString=}'/>
<retval declared_type64='SecPolicyRef _Nonnull' type64='^{__SecPolicy=}'/>
</function>
<function name='SecPolicyCreateWithProperties'>
<arg declared_type64='CFTypeRef _Nonnull' name='policyIdentifier' type64='@'/>
<arg declared_type64='CFDictionaryRef _Nullable' name='properties' type64='^{__CFDictionary=}'/>
<retval declared_type64='SecPolicyRef _Nonnull' type64='^{__SecPolicy=}'/>
</function>
<function name='SecPolicyGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecRandomCopyBytes'>
<arg declared_type64='SecRandomRef _Nullable' name='rnd' type64='^{__SecRandom=}'/>
<arg declared_type64='size_t' name='count' type64='Q'/>
<arg declared_type64='uint8_t * _Nonnull' name='bytes' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='SecRequestSharedWebCredential'>
<arg declared_type64='CFStringRef _Nullable' name='fqdn' type64='^{__CFString=}'/>
<arg declared_type64='CFStringRef _Nullable' name='account' type64='^{__CFString=}'/>
<arg declared_type64='void (^ _Nonnull)(CFArrayRef _Nullable, CFErrorRef _Nullable)' function_pointer='true' name='completionHandler' type64='@?'>
<arg declared_type64='CFArrayRef _Nullable' type64='^{__CFArray=}'/>
<arg declared_type64='CFErrorRef _Nullable' type64='^{__CFError=}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='SecTrustCopyCustomAnchorCertificates'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='anchors' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustCopyExceptions'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<retval declared_type64='CFDataRef _Nonnull' type64='^{__CFData=}'/>
</function>
<function name='SecTrustCopyPolicies'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='policies' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustCopyProperties'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<retval declared_type64='CFArrayRef _Nullable' type64='^{__CFArray=}'/>
</function>
<function name='SecTrustCopyPublicKey'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<retval declared_type64='SecKeyRef _Nullable' type64='^{__SecKey=}'/>
</function>
<function name='SecTrustCopyResult'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<retval declared_type64='CFDictionaryRef _Nullable' type64='^{__CFDictionary=}'/>
</function>
<function name='SecTrustCreateWithCertificates'>
<arg declared_type64='CFTypeRef _Nonnull' name='certificates' type64='@'/>
<arg declared_type64='CFTypeRef _Nullable' name='policies' type64='@'/>
<arg declared_type64='SecTrustRef _Nullable * _Nonnull' name='trust' type64='^^{__SecTrust}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustEvaluate'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='SecTrustResultType * _Nullable' name='result' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustEvaluateAsync'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='dispatch_queue_t _Nullable' name='queue' type64='@'/>
<arg declared_type64='SecTrustCallback _Nonnull' function_pointer='true' name='result' type64='@?'>
<arg declared_type64='SecTrustRef _Nonnull' type64='^{__SecTrust=}'/>
<arg declared_type64='SecTrustResultType' type64='I'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustGetCertificateAtIndex'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='CFIndex' name='ix' type64='q'/>
<retval declared_type64='SecCertificateRef _Nullable' type64='^{__SecCertificate=}'/>
</function>
<function name='SecTrustGetCertificateCount'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='SecTrustGetNetworkFetchAllowed'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='Boolean * _Nonnull' name='allowFetch' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustGetTrustResult'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='SecTrustResultType * _Nonnull' name='result' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecTrustGetVerifyTime'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<retval declared_type64='CFAbsoluteTime' type64='d'/>
</function>
<function name='SecTrustSetAnchorCertificates'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='CFArrayRef _Nonnull' name='anchorCertificates' type64='^{__CFArray=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustSetAnchorCertificatesOnly'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='Boolean' name='anchorCertificatesOnly' type64='B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustSetExceptions'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='CFDataRef _Nonnull' name='exceptions' type64='^{__CFData=}'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='SecTrustSetNetworkFetchAllowed'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='Boolean' name='allowFetch' type64='B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustSetOCSPResponse'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='CFTypeRef _Nullable' name='responseData' type64='@'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustSetPolicies'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='CFTypeRef _Nonnull' name='policies' type64='@'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustSetVerifyDate'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='CFDateRef _Nonnull' name='verifyDate' type64='^{__CFDate=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
</signatures>
