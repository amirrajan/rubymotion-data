<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/Accelerate.framework'/>
<depends_on path='/System/Library/Frameworks/Foundation.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/CoreGraphics.framework'/>
<depends_on path='/System/Library/Frameworks/ImageIO.framework'/>
<depends_on path='/System/Library/Frameworks/OpenGLES.framework'/>
<depends_on path='/System/Library/Frameworks/ModelIO.framework'/>
<depends_on path='/System/Library/Frameworks/UIKit.framework'/>
<depends_on path='/System/Library/Frameworks/QuartzCore.framework'/>
<struct name='GLKMatrix2' type64='{_GLKMatrix2=&quot;m&quot;[4f]}'>
<field declared_type64='float*' name='m' type64='[4f]'/>
</struct>
<struct name='GLKMatrix3' type64='{_GLKMatrix3=&quot;m&quot;[9f]}'>
<field declared_type64='float*' name='m' type64='[9f]'/>
</struct>
<struct name='GLKMatrix4' type64='{_GLKMatrix4=&quot;m&quot;[16f]}'>
<field declared_type64='float*' name='m' type64='[16f]'/>
</struct>
<struct name='GLKQuaternion' type64='{_GLKQuaternion=&quot;q&quot;[4f]}'>
<field declared_type64='float*' name='q' type64='[4f]'/>
</struct>
<struct name='GLKVector2' type64='{_GLKVector2=&quot;v&quot;[2f]}'>
<field declared_type64='float*' name='v' type64='[2f]'/>
</struct>
<struct name='GLKVector3' type64='{_GLKVector3=&quot;v&quot;[3f]}'>
<field declared_type64='float*' name='v' type64='[3f]'/>
</struct>
<struct name='GLKVector4' type64='{_GLKVector4=&quot;v&quot;[4f]}'>
<field declared_type64='float*' name='v' type64='[4f]'/>
</struct>
<struct name='GLKVertexAttributeParameters' type64='{_GLKVertexAttributeParameters=&quot;type&quot;I&quot;size&quot;i&quot;normalized&quot;C}'>
<field declared_type64='GLenum' name='type' type64='I'/>
<field declared_type64='GLint' name='size' type64='i'/>
<field declared_type64='GLboolean' name='normalized' type64='C'/>
</struct>
<cftype gettypeid_func='GLKMatrixStackGetTypeID' name='GLKMatrixStackRef' tollfree='__NSCFType' type64='^{_GLKMatrixStack=}'/>
<opaque name='GLKEffectPropertyPrvPtr' type64='^{GLKEffectPropertyPrv=}'/>
<constant const='true' declared_type64='GLKMatrix3' name='GLKMatrix3Identity' type64='{_GLKMatrix3=[9f]}'/>
<constant const='true' declared_type64='GLKMatrix4' name='GLKMatrix4Identity' type64='{_GLKMatrix4=[16f]}'/>
<constant const='true' declared_type64='GLKQuaternion' name='GLKQuaternionIdentity' type64='{_GLKQuaternion=[4f]}'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='GLKTextureLoaderApplyPremultiplication' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='GLKTextureLoaderErrorDomain' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='GLKTextureLoaderErrorKey' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='GLKTextureLoaderGLErrorKey' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='GLKTextureLoaderGenerateMipmaps' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='GLKTextureLoaderGrayscaleAsAlpha' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='GLKTextureLoaderOriginBottomLeft' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='GLKTextureLoaderSRGB' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='kGLKModelErrorDomain' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='kGLKModelErrorKey' type64='@'/>
<enum name='GLKFogModeExp' value64='0'/>
<enum name='GLKFogModeExp2' value64='1'/>
<enum name='GLKFogModeLinear' value64='2'/>
<enum name='GLKLightingTypePerPixel' value64='1'/>
<enum name='GLKLightingTypePerVertex' value64='0'/>
<enum name='GLKTextureEnvModeDecal' value64='2'/>
<enum name='GLKTextureEnvModeModulate' value64='1'/>
<enum name='GLKTextureEnvModeReplace' value64='0'/>
<enum name='GLKTextureInfoAlphaStateNonPremultiplied' value64='1'/>
<enum name='GLKTextureInfoAlphaStateNone' value64='0'/>
<enum name='GLKTextureInfoAlphaStatePremultiplied' value64='2'/>
<enum name='GLKTextureInfoOriginBottomLeft' value64='2'/>
<enum name='GLKTextureInfoOriginTopLeft' value64='1'/>
<enum name='GLKTextureInfoOriginUnknown' value64='0'/>
<enum name='GLKTextureLoaderErrorAlphaPremultiplicationFailure' value64='16'/>
<enum name='GLKTextureLoaderErrorCompressedTextureUpload' value64='7'/>
<enum name='GLKTextureLoaderErrorCubeMapInvalidNumFiles' value64='6'/>
<enum name='GLKTextureLoaderErrorDataPreprocessingFailure' value64='12'/>
<enum name='GLKTextureLoaderErrorFileOrURLNotFound' value64='0'/>
<enum name='GLKTextureLoaderErrorIncompatibleFormatSRGB' value64='18'/>
<enum name='GLKTextureLoaderErrorInvalidCGImage' value64='2'/>
<enum name='GLKTextureLoaderErrorInvalidEAGLContext' value64='17'/>
<enum name='GLKTextureLoaderErrorInvalidNSData' value64='1'/>
<enum name='GLKTextureLoaderErrorMipmapUnsupported' value64='13'/>
<enum name='GLKTextureLoaderErrorPVRAtlasUnsupported' value64='5'/>
<enum name='GLKTextureLoaderErrorReorientationFailure' value64='15'/>
<enum name='GLKTextureLoaderErrorUncompressedTextureUpload' value64='8'/>
<enum name='GLKTextureLoaderErrorUnknownFileType' value64='4'/>
<enum name='GLKTextureLoaderErrorUnknownPathType' value64='3'/>
<enum name='GLKTextureLoaderErrorUnsupportedBitDepth' value64='10'/>
<enum name='GLKTextureLoaderErrorUnsupportedCubeMapDimensions' value64='9'/>
<enum name='GLKTextureLoaderErrorUnsupportedOrientation' value64='14'/>
<enum name='GLKTextureLoaderErrorUnsupportedPVRFormat' value64='11'/>
<enum name='GLKTextureTarget2D' value64='3553'/>
<enum name='GLKTextureTargetCt' value64='2'/>
<enum name='GLKTextureTargetCubeMap' value64='34067'/>
<enum name='GLKVertexAttribColor' value64='2'/>
<enum name='GLKVertexAttribNormal' value64='1'/>
<enum name='GLKVertexAttribPosition' value64='0'/>
<enum name='GLKVertexAttribTexCoord0' value64='3'/>
<enum name='GLKVertexAttribTexCoord1' value64='4'/>
<enum name='GLKViewDrawableColorFormatRGB565' value64='1'/>
<enum name='GLKViewDrawableColorFormatRGBA8888' value64='0'/>
<enum name='GLKViewDrawableColorFormatSRGBA8888' value64='2'/>
<enum name='GLKViewDrawableDepthFormat16' value64='1'/>
<enum name='GLKViewDrawableDepthFormat24' value64='2'/>
<enum name='GLKViewDrawableDepthFormatNone' value64='0'/>
<enum name='GLKViewDrawableMultisample4X' value64='1'/>
<enum name='GLKViewDrawableMultisampleNone' value64='0'/>
<enum name='GLKViewDrawableStencilFormat8' value64='1'/>
<enum name='GLKViewDrawableStencilFormatNone' value64='0'/>
<function inline='true' name='GLKMathDegreesToRadians'>
<arg declared_type64='float' name='degrees' type64='f'/>
<retval declared_type64='float' type64='f'/>
</function>
<function name='GLKMathProject'>
<arg declared_type64='GLKVector3' name='object' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='GLKMatrix4' name='model' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='GLKMatrix4' name='projection' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='int * _Nonnull' name='viewport' type64='^i'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKMathRadiansToDegrees'>
<arg declared_type64='float' name='radians' type64='f'/>
<retval declared_type64='float' type64='f'/>
</function>
<function name='GLKMathUnproject'>
<arg declared_type64='GLKVector3' name='window' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='GLKMatrix4' name='model' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='GLKMatrix4' name='projection' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='int * _Nonnull' name='viewport' type64='^i'/>
<arg declared_type64='_Bool * _Nullable' name='success' type64='^B'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKMatrix3Add'>
<arg declared_type64='GLKMatrix3' name='matrixLeft' type64='{_GLKMatrix3=[9f]}'/>
<arg declared_type64='GLKMatrix3' name='matrixRight' type64='{_GLKMatrix3=[9f]}'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3GetColumn'>
<arg declared_type64='GLKMatrix3' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<arg declared_type64='int' name='column' type64='i'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKMatrix3GetMatrix2'>
<arg declared_type64='GLKMatrix3' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<retval declared_type64='GLKMatrix2' type64='{_GLKMatrix2=[4f]}'/>
</function>
<function inline='true' name='GLKMatrix3GetRow'>
<arg declared_type64='GLKMatrix3' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<arg declared_type64='int' name='row' type64='i'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function name='GLKMatrix3Invert'>
<arg declared_type64='GLKMatrix3' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<arg declared_type64='_Bool*' name='isInvertible' type64='^B'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function name='GLKMatrix3InvertAndTranspose'>
<arg declared_type64='GLKMatrix3' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<arg declared_type64='_Bool*' name='isInvertible' type64='^B'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3Make'>
<arg declared_type64='float' name='m00' type64='f'/>
<arg declared_type64='float' name='m01' type64='f'/>
<arg declared_type64='float' name='m02' type64='f'/>
<arg declared_type64='float' name='m10' type64='f'/>
<arg declared_type64='float' name='m11' type64='f'/>
<arg declared_type64='float' name='m12' type64='f'/>
<arg declared_type64='float' name='m20' type64='f'/>
<arg declared_type64='float' name='m21' type64='f'/>
<arg declared_type64='float' name='m22' type64='f'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3MakeAndTranspose'>
<arg declared_type64='float' name='m00' type64='f'/>
<arg declared_type64='float' name='m01' type64='f'/>
<arg declared_type64='float' name='m02' type64='f'/>
<arg declared_type64='float' name='m10' type64='f'/>
<arg declared_type64='float' name='m11' type64='f'/>
<arg declared_type64='float' name='m12' type64='f'/>
<arg declared_type64='float' name='m20' type64='f'/>
<arg declared_type64='float' name='m21' type64='f'/>
<arg declared_type64='float' name='m22' type64='f'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3MakeRotation'>
<arg declared_type64='float' name='radians' type64='f'/>
<arg declared_type64='float' name='x' type64='f'/>
<arg declared_type64='float' name='y' type64='f'/>
<arg declared_type64='float' name='z' type64='f'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3MakeScale'>
<arg declared_type64='float' name='sx' type64='f'/>
<arg declared_type64='float' name='sy' type64='f'/>
<arg declared_type64='float' name='sz' type64='f'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3MakeWithArray'>
<arg declared_type64='float*' name='values' type64='^f'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3MakeWithArrayAndTranspose'>
<arg declared_type64='float*' name='values' type64='^f'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3MakeWithColumns'>
<arg declared_type64='GLKVector3' name='column0' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='GLKVector3' name='column1' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='GLKVector3' name='column2' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3MakeWithQuaternion'>
<arg declared_type64='GLKQuaternion' name='quaternion' type64='{_GLKQuaternion=[4f]}'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3MakeWithRows'>
<arg declared_type64='GLKVector3' name='row0' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='GLKVector3' name='row1' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='GLKVector3' name='row2' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3MakeXRotation'>
<arg declared_type64='float' name='radians' type64='f'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3MakeYRotation'>
<arg declared_type64='float' name='radians' type64='f'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3MakeZRotation'>
<arg declared_type64='float' name='radians' type64='f'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3Multiply'>
<arg declared_type64='GLKMatrix3' name='matrixLeft' type64='{_GLKMatrix3=[9f]}'/>
<arg declared_type64='GLKMatrix3' name='matrixRight' type64='{_GLKMatrix3=[9f]}'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3MultiplyVector3'>
<arg declared_type64='GLKMatrix3' name='matrixLeft' type64='{_GLKMatrix3=[9f]}'/>
<arg declared_type64='GLKVector3' name='vectorRight' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKMatrix3MultiplyVector3Array'>
<arg declared_type64='GLKMatrix3' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<arg declared_type64='GLKVector3 * _Nonnull' name='vectors' type64='^{_GLKVector3=[3f]}'/>
<arg declared_type64='size_t' name='vectorCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function inline='true' name='GLKMatrix3Rotate'>
<arg declared_type64='GLKMatrix3' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<arg declared_type64='float' name='radians' type64='f'/>
<arg declared_type64='float' name='x' type64='f'/>
<arg declared_type64='float' name='y' type64='f'/>
<arg declared_type64='float' name='z' type64='f'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3RotateWithVector3'>
<arg declared_type64='GLKMatrix3' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<arg declared_type64='float' name='radians' type64='f'/>
<arg declared_type64='GLKVector3' name='axisVector' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3RotateWithVector4'>
<arg declared_type64='GLKMatrix3' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<arg declared_type64='float' name='radians' type64='f'/>
<arg declared_type64='GLKVector4' name='axisVector' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3RotateX'>
<arg declared_type64='GLKMatrix3' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<arg declared_type64='float' name='radians' type64='f'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3RotateY'>
<arg declared_type64='GLKMatrix3' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<arg declared_type64='float' name='radians' type64='f'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3RotateZ'>
<arg declared_type64='GLKMatrix3' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<arg declared_type64='float' name='radians' type64='f'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3Scale'>
<arg declared_type64='GLKMatrix3' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<arg declared_type64='float' name='sx' type64='f'/>
<arg declared_type64='float' name='sy' type64='f'/>
<arg declared_type64='float' name='sz' type64='f'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3ScaleWithVector3'>
<arg declared_type64='GLKMatrix3' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<arg declared_type64='GLKVector3' name='scaleVector' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3ScaleWithVector4'>
<arg declared_type64='GLKMatrix3' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<arg declared_type64='GLKVector4' name='scaleVector' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3SetColumn'>
<arg declared_type64='GLKMatrix3' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<arg declared_type64='int' name='column' type64='i'/>
<arg declared_type64='GLKVector3' name='vector' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3SetRow'>
<arg declared_type64='GLKMatrix3' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<arg declared_type64='int' name='row' type64='i'/>
<arg declared_type64='GLKVector3' name='vector' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3Subtract'>
<arg declared_type64='GLKMatrix3' name='matrixLeft' type64='{_GLKMatrix3=[9f]}'/>
<arg declared_type64='GLKMatrix3' name='matrixRight' type64='{_GLKMatrix3=[9f]}'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix3Transpose'>
<arg declared_type64='GLKMatrix3' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix4Add'>
<arg declared_type64='GLKMatrix4' name='matrixLeft' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='GLKMatrix4' name='matrixRight' type64='{_GLKMatrix4=[16f]}'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4GetColumn'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='int' name='column' type64='i'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function inline='true' name='GLKMatrix4GetMatrix2'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<retval declared_type64='GLKMatrix2' type64='{_GLKMatrix2=[4f]}'/>
</function>
<function inline='true' name='GLKMatrix4GetMatrix3'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function inline='true' name='GLKMatrix4GetRow'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='int' name='row' type64='i'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function name='GLKMatrix4Invert'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='_Bool * _Nullable' name='isInvertible' type64='^B'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function name='GLKMatrix4InvertAndTranspose'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='_Bool * _Nullable' name='isInvertible' type64='^B'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4Make'>
<arg declared_type64='float' name='m00' type64='f'/>
<arg declared_type64='float' name='m01' type64='f'/>
<arg declared_type64='float' name='m02' type64='f'/>
<arg declared_type64='float' name='m03' type64='f'/>
<arg declared_type64='float' name='m10' type64='f'/>
<arg declared_type64='float' name='m11' type64='f'/>
<arg declared_type64='float' name='m12' type64='f'/>
<arg declared_type64='float' name='m13' type64='f'/>
<arg declared_type64='float' name='m20' type64='f'/>
<arg declared_type64='float' name='m21' type64='f'/>
<arg declared_type64='float' name='m22' type64='f'/>
<arg declared_type64='float' name='m23' type64='f'/>
<arg declared_type64='float' name='m30' type64='f'/>
<arg declared_type64='float' name='m31' type64='f'/>
<arg declared_type64='float' name='m32' type64='f'/>
<arg declared_type64='float' name='m33' type64='f'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4MakeAndTranspose'>
<arg declared_type64='float' name='m00' type64='f'/>
<arg declared_type64='float' name='m01' type64='f'/>
<arg declared_type64='float' name='m02' type64='f'/>
<arg declared_type64='float' name='m03' type64='f'/>
<arg declared_type64='float' name='m10' type64='f'/>
<arg declared_type64='float' name='m11' type64='f'/>
<arg declared_type64='float' name='m12' type64='f'/>
<arg declared_type64='float' name='m13' type64='f'/>
<arg declared_type64='float' name='m20' type64='f'/>
<arg declared_type64='float' name='m21' type64='f'/>
<arg declared_type64='float' name='m22' type64='f'/>
<arg declared_type64='float' name='m23' type64='f'/>
<arg declared_type64='float' name='m30' type64='f'/>
<arg declared_type64='float' name='m31' type64='f'/>
<arg declared_type64='float' name='m32' type64='f'/>
<arg declared_type64='float' name='m33' type64='f'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4MakeFrustum'>
<arg declared_type64='float' name='left' type64='f'/>
<arg declared_type64='float' name='right' type64='f'/>
<arg declared_type64='float' name='bottom' type64='f'/>
<arg declared_type64='float' name='top' type64='f'/>
<arg declared_type64='float' name='nearZ' type64='f'/>
<arg declared_type64='float' name='farZ' type64='f'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4MakeLookAt'>
<arg declared_type64='float' name='eyeX' type64='f'/>
<arg declared_type64='float' name='eyeY' type64='f'/>
<arg declared_type64='float' name='eyeZ' type64='f'/>
<arg declared_type64='float' name='centerX' type64='f'/>
<arg declared_type64='float' name='centerY' type64='f'/>
<arg declared_type64='float' name='centerZ' type64='f'/>
<arg declared_type64='float' name='upX' type64='f'/>
<arg declared_type64='float' name='upY' type64='f'/>
<arg declared_type64='float' name='upZ' type64='f'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4MakeOrtho'>
<arg declared_type64='float' name='left' type64='f'/>
<arg declared_type64='float' name='right' type64='f'/>
<arg declared_type64='float' name='bottom' type64='f'/>
<arg declared_type64='float' name='top' type64='f'/>
<arg declared_type64='float' name='nearZ' type64='f'/>
<arg declared_type64='float' name='farZ' type64='f'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4MakePerspective'>
<arg declared_type64='float' name='fovyRadians' type64='f'/>
<arg declared_type64='float' name='aspect' type64='f'/>
<arg declared_type64='float' name='nearZ' type64='f'/>
<arg declared_type64='float' name='farZ' type64='f'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4MakeRotation'>
<arg declared_type64='float' name='radians' type64='f'/>
<arg declared_type64='float' name='x' type64='f'/>
<arg declared_type64='float' name='y' type64='f'/>
<arg declared_type64='float' name='z' type64='f'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4MakeScale'>
<arg declared_type64='float' name='sx' type64='f'/>
<arg declared_type64='float' name='sy' type64='f'/>
<arg declared_type64='float' name='sz' type64='f'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4MakeTranslation'>
<arg declared_type64='float' name='tx' type64='f'/>
<arg declared_type64='float' name='ty' type64='f'/>
<arg declared_type64='float' name='tz' type64='f'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4MakeWithArray'>
<arg declared_type64='float*' name='values' type64='^f'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4MakeWithArrayAndTranspose'>
<arg declared_type64='float*' name='values' type64='^f'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4MakeWithColumns'>
<arg declared_type64='GLKVector4' name='column0' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='GLKVector4' name='column1' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='GLKVector4' name='column2' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='GLKVector4' name='column3' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4MakeWithQuaternion'>
<arg declared_type64='GLKQuaternion' name='quaternion' type64='{_GLKQuaternion=[4f]}'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4MakeWithRows'>
<arg declared_type64='GLKVector4' name='row0' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='GLKVector4' name='row1' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='GLKVector4' name='row2' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='GLKVector4' name='row3' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4MakeXRotation'>
<arg declared_type64='float' name='radians' type64='f'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4MakeYRotation'>
<arg declared_type64='float' name='radians' type64='f'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4MakeZRotation'>
<arg declared_type64='float' name='radians' type64='f'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4Multiply'>
<arg declared_type64='GLKMatrix4' name='matrixLeft' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='GLKMatrix4' name='matrixRight' type64='{_GLKMatrix4=[16f]}'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4MultiplyAndProjectVector3'>
<arg declared_type64='GLKMatrix4' name='matrixLeft' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='GLKVector3' name='vectorRight' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKMatrix4MultiplyAndProjectVector3Array'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='GLKVector3 * _Nonnull' name='vectors' type64='^{_GLKVector3=[3f]}'/>
<arg declared_type64='size_t' name='vectorCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function inline='true' name='GLKMatrix4MultiplyVector3'>
<arg declared_type64='GLKMatrix4' name='matrixLeft' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='GLKVector3' name='vectorRight' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKMatrix4MultiplyVector3Array'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='GLKVector3 * _Nonnull' name='vectors' type64='^{_GLKVector3=[3f]}'/>
<arg declared_type64='size_t' name='vectorCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function inline='true' name='GLKMatrix4MultiplyVector3ArrayWithTranslation'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='GLKVector3 * _Nonnull' name='vectors' type64='^{_GLKVector3=[3f]}'/>
<arg declared_type64='size_t' name='vectorCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function inline='true' name='GLKMatrix4MultiplyVector3WithTranslation'>
<arg declared_type64='GLKMatrix4' name='matrixLeft' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='GLKVector3' name='vectorRight' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKMatrix4MultiplyVector4'>
<arg declared_type64='GLKMatrix4' name='matrixLeft' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='GLKVector4' name='vectorRight' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function inline='true' name='GLKMatrix4MultiplyVector4Array'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='GLKVector4 * _Nonnull' name='vectors' type64='^{_GLKVector4=[4f]}'/>
<arg declared_type64='size_t' name='vectorCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function inline='true' name='GLKMatrix4Rotate'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='float' name='radians' type64='f'/>
<arg declared_type64='float' name='x' type64='f'/>
<arg declared_type64='float' name='y' type64='f'/>
<arg declared_type64='float' name='z' type64='f'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4RotateWithVector3'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='float' name='radians' type64='f'/>
<arg declared_type64='GLKVector3' name='axisVector' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4RotateWithVector4'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='float' name='radians' type64='f'/>
<arg declared_type64='GLKVector4' name='axisVector' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4RotateX'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='float' name='radians' type64='f'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4RotateY'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='float' name='radians' type64='f'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4RotateZ'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='float' name='radians' type64='f'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4Scale'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='float' name='sx' type64='f'/>
<arg declared_type64='float' name='sy' type64='f'/>
<arg declared_type64='float' name='sz' type64='f'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4ScaleWithVector3'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='GLKVector3' name='scaleVector' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4ScaleWithVector4'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='GLKVector4' name='scaleVector' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4SetColumn'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='int' name='column' type64='i'/>
<arg declared_type64='GLKVector4' name='vector' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4SetRow'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='int' name='row' type64='i'/>
<arg declared_type64='GLKVector4' name='vector' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4Subtract'>
<arg declared_type64='GLKMatrix4' name='matrixLeft' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='GLKMatrix4' name='matrixRight' type64='{_GLKMatrix4=[16f]}'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4Translate'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='float' name='tx' type64='f'/>
<arg declared_type64='float' name='ty' type64='f'/>
<arg declared_type64='float' name='tz' type64='f'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4TranslateWithVector3'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='GLKVector3' name='translationVector' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4TranslateWithVector4'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<arg declared_type64='GLKVector4' name='translationVector' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function inline='true' name='GLKMatrix4Transpose'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function name='GLKMatrixStackCreate'>
<arg declared_type64='CFAllocatorRef _Nullable' name='alloc' type64='^{__CFAllocator=}'/>
<retval declared_type64='GLKMatrixStackRef _Nullable' type64='^{_GLKMatrixStack=}'/>
</function>
<function name='GLKMatrixStackGetMatrix2'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<retval declared_type64='GLKMatrix2' type64='{_GLKMatrix2=[4f]}'/>
</function>
<function name='GLKMatrixStackGetMatrix3'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function name='GLKMatrixStackGetMatrix3Inverse'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function name='GLKMatrixStackGetMatrix3InverseTranspose'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</function>
<function name='GLKMatrixStackGetMatrix4'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function name='GLKMatrixStackGetMatrix4Inverse'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function name='GLKMatrixStackGetMatrix4InverseTranspose'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</function>
<function name='GLKMatrixStackGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='GLKMatrixStackLoadMatrix4'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='GLKMatrixStackMultiplyMatrix4'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='GLKMatrixStackMultiplyMatrixStack'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stackLeft' type64='^{_GLKMatrixStack=}'/>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stackRight' type64='^{_GLKMatrixStack=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='GLKMatrixStackPop'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='GLKMatrixStackPush'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='GLKMatrixStackRotate'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<arg declared_type64='float' name='radians' type64='f'/>
<arg declared_type64='float' name='x' type64='f'/>
<arg declared_type64='float' name='y' type64='f'/>
<arg declared_type64='float' name='z' type64='f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='GLKMatrixStackRotateWithVector3'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<arg declared_type64='float' name='radians' type64='f'/>
<arg declared_type64='GLKVector3' name='axisVector' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='GLKMatrixStackRotateWithVector4'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<arg declared_type64='float' name='radians' type64='f'/>
<arg declared_type64='GLKVector4' name='axisVector' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='GLKMatrixStackRotateX'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<arg declared_type64='float' name='radians' type64='f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='GLKMatrixStackRotateY'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<arg declared_type64='float' name='radians' type64='f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='GLKMatrixStackRotateZ'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<arg declared_type64='float' name='radians' type64='f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='GLKMatrixStackScale'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<arg declared_type64='float' name='sx' type64='f'/>
<arg declared_type64='float' name='sy' type64='f'/>
<arg declared_type64='float' name='sz' type64='f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='GLKMatrixStackScaleWithVector3'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<arg declared_type64='GLKVector3' name='scaleVector' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='GLKMatrixStackScaleWithVector4'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<arg declared_type64='GLKVector4' name='scaleVector' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='GLKMatrixStackSize'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='GLKMatrixStackTranslate'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<arg declared_type64='float' name='tx' type64='f'/>
<arg declared_type64='float' name='ty' type64='f'/>
<arg declared_type64='float' name='tz' type64='f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='GLKMatrixStackTranslateWithVector3'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<arg declared_type64='GLKVector3' name='translationVector' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='GLKMatrixStackTranslateWithVector4'>
<arg declared_type64='GLKMatrixStackRef _Nonnull' name='stack' type64='^{_GLKMatrixStack=}'/>
<arg declared_type64='GLKVector4' name='translationVector' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function inline='true' name='GLKQuaternionAdd'>
<arg declared_type64='GLKQuaternion' name='quaternionLeft' type64='{_GLKQuaternion=[4f]}'/>
<arg declared_type64='GLKQuaternion' name='quaternionRight' type64='{_GLKQuaternion=[4f]}'/>
<retval declared_type64='GLKQuaternion' type64='{_GLKQuaternion=[4f]}'/>
</function>
<function name='GLKQuaternionAngle'>
<arg declared_type64='GLKQuaternion' name='quaternion' type64='{_GLKQuaternion=[4f]}'/>
<retval declared_type64='float' type64='f'/>
</function>
<function name='GLKQuaternionAxis'>
<arg declared_type64='GLKQuaternion' name='quaternion' type64='{_GLKQuaternion=[4f]}'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKQuaternionConjugate'>
<arg declared_type64='GLKQuaternion' name='quaternion' type64='{_GLKQuaternion=[4f]}'/>
<retval declared_type64='GLKQuaternion' type64='{_GLKQuaternion=[4f]}'/>
</function>
<function inline='true' name='GLKQuaternionInvert'>
<arg declared_type64='GLKQuaternion' name='quaternion' type64='{_GLKQuaternion=[4f]}'/>
<retval declared_type64='GLKQuaternion' type64='{_GLKQuaternion=[4f]}'/>
</function>
<function inline='true' name='GLKQuaternionLength'>
<arg declared_type64='GLKQuaternion' name='quaternion' type64='{_GLKQuaternion=[4f]}'/>
<retval declared_type64='float' type64='f'/>
</function>
<function inline='true' name='GLKQuaternionMake'>
<arg declared_type64='float' name='x' type64='f'/>
<arg declared_type64='float' name='y' type64='f'/>
<arg declared_type64='float' name='z' type64='f'/>
<arg declared_type64='float' name='w' type64='f'/>
<retval declared_type64='GLKQuaternion' type64='{_GLKQuaternion=[4f]}'/>
</function>
<function inline='true' name='GLKQuaternionMakeWithAngleAndAxis'>
<arg declared_type64='float' name='radians' type64='f'/>
<arg declared_type64='float' name='x' type64='f'/>
<arg declared_type64='float' name='y' type64='f'/>
<arg declared_type64='float' name='z' type64='f'/>
<retval declared_type64='GLKQuaternion' type64='{_GLKQuaternion=[4f]}'/>
</function>
<function inline='true' name='GLKQuaternionMakeWithAngleAndVector3Axis'>
<arg declared_type64='float' name='radians' type64='f'/>
<arg declared_type64='GLKVector3' name='axisVector' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKQuaternion' type64='{_GLKQuaternion=[4f]}'/>
</function>
<function inline='true' name='GLKQuaternionMakeWithArray'>
<arg declared_type64='float*' name='values' type64='^f'/>
<retval declared_type64='GLKQuaternion' type64='{_GLKQuaternion=[4f]}'/>
</function>
<function name='GLKQuaternionMakeWithMatrix3'>
<arg declared_type64='GLKMatrix3' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<retval declared_type64='GLKQuaternion' type64='{_GLKQuaternion=[4f]}'/>
</function>
<function name='GLKQuaternionMakeWithMatrix4'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<retval declared_type64='GLKQuaternion' type64='{_GLKQuaternion=[4f]}'/>
</function>
<function inline='true' name='GLKQuaternionMakeWithVector3'>
<arg declared_type64='GLKVector3' name='vector' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='float' name='scalar' type64='f'/>
<retval declared_type64='GLKQuaternion' type64='{_GLKQuaternion=[4f]}'/>
</function>
<function inline='true' name='GLKQuaternionMultiply'>
<arg declared_type64='GLKQuaternion' name='quaternionLeft' type64='{_GLKQuaternion=[4f]}'/>
<arg declared_type64='GLKQuaternion' name='quaternionRight' type64='{_GLKQuaternion=[4f]}'/>
<retval declared_type64='GLKQuaternion' type64='{_GLKQuaternion=[4f]}'/>
</function>
<function inline='true' name='GLKQuaternionNormalize'>
<arg declared_type64='GLKQuaternion' name='quaternion' type64='{_GLKQuaternion=[4f]}'/>
<retval declared_type64='GLKQuaternion' type64='{_GLKQuaternion=[4f]}'/>
</function>
<function inline='true' name='GLKQuaternionRotateVector3'>
<arg declared_type64='GLKQuaternion' name='quaternion' type64='{_GLKQuaternion=[4f]}'/>
<arg declared_type64='GLKVector3' name='vector' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function name='GLKQuaternionRotateVector3Array'>
<arg declared_type64='GLKQuaternion' name='quaternion' type64='{_GLKQuaternion=[4f]}'/>
<arg declared_type64='GLKVector3 * _Nonnull' name='vectors' type64='^{_GLKVector3=[3f]}'/>
<arg declared_type64='size_t' name='vectorCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function inline='true' name='GLKQuaternionRotateVector4'>
<arg declared_type64='GLKQuaternion' name='quaternion' type64='{_GLKQuaternion=[4f]}'/>
<arg declared_type64='GLKVector4' name='vector' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function name='GLKQuaternionRotateVector4Array'>
<arg declared_type64='GLKQuaternion' name='quaternion' type64='{_GLKQuaternion=[4f]}'/>
<arg declared_type64='GLKVector4 * _Nonnull' name='vectors' type64='^{_GLKVector4=[4f]}'/>
<arg declared_type64='size_t' name='vectorCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='GLKQuaternionSlerp'>
<arg declared_type64='GLKQuaternion' name='quaternionStart' type64='{_GLKQuaternion=[4f]}'/>
<arg declared_type64='GLKQuaternion' name='quaternionEnd' type64='{_GLKQuaternion=[4f]}'/>
<arg declared_type64='float' name='t' type64='f'/>
<retval declared_type64='GLKQuaternion' type64='{_GLKQuaternion=[4f]}'/>
</function>
<function inline='true' name='GLKQuaternionSubtract'>
<arg declared_type64='GLKQuaternion' name='quaternionLeft' type64='{_GLKQuaternion=[4f]}'/>
<arg declared_type64='GLKQuaternion' name='quaternionRight' type64='{_GLKQuaternion=[4f]}'/>
<retval declared_type64='GLKQuaternion' type64='{_GLKQuaternion=[4f]}'/>
</function>
<function inline='true' name='GLKVector2Add'>
<arg declared_type64='GLKVector2' name='vectorLeft' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='GLKVector2' name='vectorRight' type64='{_GLKVector2=[2f]}'/>
<retval declared_type64='GLKVector2' type64='{_GLKVector2=[2f]}'/>
</function>
<function inline='true' name='GLKVector2AddScalar'>
<arg declared_type64='GLKVector2' name='vector' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='GLKVector2' type64='{_GLKVector2=[2f]}'/>
</function>
<function inline='true' name='GLKVector2AllEqualToScalar'>
<arg declared_type64='GLKVector2' name='vector' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function inline='true' name='GLKVector2AllEqualToVector2'>
<arg declared_type64='GLKVector2' name='vectorLeft' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='GLKVector2' name='vectorRight' type64='{_GLKVector2=[2f]}'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function inline='true' name='GLKVector2AllGreaterThanOrEqualToScalar'>
<arg declared_type64='GLKVector2' name='vector' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function inline='true' name='GLKVector2AllGreaterThanOrEqualToVector2'>
<arg declared_type64='GLKVector2' name='vectorLeft' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='GLKVector2' name='vectorRight' type64='{_GLKVector2=[2f]}'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function inline='true' name='GLKVector2AllGreaterThanScalar'>
<arg declared_type64='GLKVector2' name='vector' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function inline='true' name='GLKVector2AllGreaterThanVector2'>
<arg declared_type64='GLKVector2' name='vectorLeft' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='GLKVector2' name='vectorRight' type64='{_GLKVector2=[2f]}'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function inline='true' name='GLKVector2Distance'>
<arg declared_type64='GLKVector2' name='vectorStart' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='GLKVector2' name='vectorEnd' type64='{_GLKVector2=[2f]}'/>
<retval declared_type64='float' type64='f'/>
</function>
<function inline='true' name='GLKVector2Divide'>
<arg declared_type64='GLKVector2' name='vectorLeft' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='GLKVector2' name='vectorRight' type64='{_GLKVector2=[2f]}'/>
<retval declared_type64='GLKVector2' type64='{_GLKVector2=[2f]}'/>
</function>
<function inline='true' name='GLKVector2DivideScalar'>
<arg declared_type64='GLKVector2' name='vector' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='GLKVector2' type64='{_GLKVector2=[2f]}'/>
</function>
<function inline='true' name='GLKVector2DotProduct'>
<arg declared_type64='GLKVector2' name='vectorLeft' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='GLKVector2' name='vectorRight' type64='{_GLKVector2=[2f]}'/>
<retval declared_type64='float' type64='f'/>
</function>
<function inline='true' name='GLKVector2Length'>
<arg declared_type64='GLKVector2' name='vector' type64='{_GLKVector2=[2f]}'/>
<retval declared_type64='float' type64='f'/>
</function>
<function inline='true' name='GLKVector2Lerp'>
<arg declared_type64='GLKVector2' name='vectorStart' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='GLKVector2' name='vectorEnd' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='float' name='t' type64='f'/>
<retval declared_type64='GLKVector2' type64='{_GLKVector2=[2f]}'/>
</function>
<function inline='true' name='GLKVector2Make'>
<arg declared_type64='float' name='x' type64='f'/>
<arg declared_type64='float' name='y' type64='f'/>
<retval declared_type64='GLKVector2' type64='{_GLKVector2=[2f]}'/>
</function>
<function inline='true' name='GLKVector2MakeWithArray'>
<arg declared_type64='float*' name='values' type64='^f'/>
<retval declared_type64='GLKVector2' type64='{_GLKVector2=[2f]}'/>
</function>
<function inline='true' name='GLKVector2Maximum'>
<arg declared_type64='GLKVector2' name='vectorLeft' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='GLKVector2' name='vectorRight' type64='{_GLKVector2=[2f]}'/>
<retval declared_type64='GLKVector2' type64='{_GLKVector2=[2f]}'/>
</function>
<function inline='true' name='GLKVector2Minimum'>
<arg declared_type64='GLKVector2' name='vectorLeft' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='GLKVector2' name='vectorRight' type64='{_GLKVector2=[2f]}'/>
<retval declared_type64='GLKVector2' type64='{_GLKVector2=[2f]}'/>
</function>
<function inline='true' name='GLKVector2Multiply'>
<arg declared_type64='GLKVector2' name='vectorLeft' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='GLKVector2' name='vectorRight' type64='{_GLKVector2=[2f]}'/>
<retval declared_type64='GLKVector2' type64='{_GLKVector2=[2f]}'/>
</function>
<function inline='true' name='GLKVector2MultiplyScalar'>
<arg declared_type64='GLKVector2' name='vector' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='GLKVector2' type64='{_GLKVector2=[2f]}'/>
</function>
<function inline='true' name='GLKVector2Negate'>
<arg declared_type64='GLKVector2' name='vector' type64='{_GLKVector2=[2f]}'/>
<retval declared_type64='GLKVector2' type64='{_GLKVector2=[2f]}'/>
</function>
<function inline='true' name='GLKVector2Normalize'>
<arg declared_type64='GLKVector2' name='vector' type64='{_GLKVector2=[2f]}'/>
<retval declared_type64='GLKVector2' type64='{_GLKVector2=[2f]}'/>
</function>
<function inline='true' name='GLKVector2Project'>
<arg declared_type64='GLKVector2' name='vectorToProject' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='GLKVector2' name='projectionVector' type64='{_GLKVector2=[2f]}'/>
<retval declared_type64='GLKVector2' type64='{_GLKVector2=[2f]}'/>
</function>
<function inline='true' name='GLKVector2Subtract'>
<arg declared_type64='GLKVector2' name='vectorLeft' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='GLKVector2' name='vectorRight' type64='{_GLKVector2=[2f]}'/>
<retval declared_type64='GLKVector2' type64='{_GLKVector2=[2f]}'/>
</function>
<function inline='true' name='GLKVector2SubtractScalar'>
<arg declared_type64='GLKVector2' name='vector' type64='{_GLKVector2=[2f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='GLKVector2' type64='{_GLKVector2=[2f]}'/>
</function>
<function inline='true' name='GLKVector3Add'>
<arg declared_type64='GLKVector3' name='vectorLeft' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='GLKVector3' name='vectorRight' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKVector3AddScalar'>
<arg declared_type64='GLKVector3' name='vector' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKVector3AllEqualToScalar'>
<arg declared_type64='GLKVector3' name='vector' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function inline='true' name='GLKVector3AllEqualToVector3'>
<arg declared_type64='GLKVector3' name='vectorLeft' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='GLKVector3' name='vectorRight' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function inline='true' name='GLKVector3AllGreaterThanOrEqualToScalar'>
<arg declared_type64='GLKVector3' name='vector' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function inline='true' name='GLKVector3AllGreaterThanOrEqualToVector3'>
<arg declared_type64='GLKVector3' name='vectorLeft' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='GLKVector3' name='vectorRight' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function inline='true' name='GLKVector3AllGreaterThanScalar'>
<arg declared_type64='GLKVector3' name='vector' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function inline='true' name='GLKVector3AllGreaterThanVector3'>
<arg declared_type64='GLKVector3' name='vectorLeft' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='GLKVector3' name='vectorRight' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function inline='true' name='GLKVector3CrossProduct'>
<arg declared_type64='GLKVector3' name='vectorLeft' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='GLKVector3' name='vectorRight' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKVector3Distance'>
<arg declared_type64='GLKVector3' name='vectorStart' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='GLKVector3' name='vectorEnd' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='float' type64='f'/>
</function>
<function inline='true' name='GLKVector3Divide'>
<arg declared_type64='GLKVector3' name='vectorLeft' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='GLKVector3' name='vectorRight' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKVector3DivideScalar'>
<arg declared_type64='GLKVector3' name='vector' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKVector3DotProduct'>
<arg declared_type64='GLKVector3' name='vectorLeft' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='GLKVector3' name='vectorRight' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='float' type64='f'/>
</function>
<function inline='true' name='GLKVector3Length'>
<arg declared_type64='GLKVector3' name='vector' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='float' type64='f'/>
</function>
<function inline='true' name='GLKVector3Lerp'>
<arg declared_type64='GLKVector3' name='vectorStart' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='GLKVector3' name='vectorEnd' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='float' name='t' type64='f'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKVector3Make'>
<arg declared_type64='float' name='x' type64='f'/>
<arg declared_type64='float' name='y' type64='f'/>
<arg declared_type64='float' name='z' type64='f'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKVector3MakeWithArray'>
<arg declared_type64='float*' name='values' type64='^f'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKVector3Maximum'>
<arg declared_type64='GLKVector3' name='vectorLeft' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='GLKVector3' name='vectorRight' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKVector3Minimum'>
<arg declared_type64='GLKVector3' name='vectorLeft' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='GLKVector3' name='vectorRight' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKVector3Multiply'>
<arg declared_type64='GLKVector3' name='vectorLeft' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='GLKVector3' name='vectorRight' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKVector3MultiplyScalar'>
<arg declared_type64='GLKVector3' name='vector' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKVector3Negate'>
<arg declared_type64='GLKVector3' name='vector' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKVector3Normalize'>
<arg declared_type64='GLKVector3' name='vector' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKVector3Project'>
<arg declared_type64='GLKVector3' name='vectorToProject' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='GLKVector3' name='projectionVector' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKVector3Subtract'>
<arg declared_type64='GLKVector3' name='vectorLeft' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='GLKVector3' name='vectorRight' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKVector3SubtractScalar'>
<arg declared_type64='GLKVector3' name='vector' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</function>
<function inline='true' name='GLKVector4Add'>
<arg declared_type64='GLKVector4' name='vectorLeft' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='GLKVector4' name='vectorRight' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function inline='true' name='GLKVector4AddScalar'>
<arg declared_type64='GLKVector4' name='vector' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function inline='true' name='GLKVector4AllEqualToScalar'>
<arg declared_type64='GLKVector4' name='vector' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function inline='true' name='GLKVector4AllEqualToVector4'>
<arg declared_type64='GLKVector4' name='vectorLeft' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='GLKVector4' name='vectorRight' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function inline='true' name='GLKVector4AllGreaterThanOrEqualToScalar'>
<arg declared_type64='GLKVector4' name='vector' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function inline='true' name='GLKVector4AllGreaterThanOrEqualToVector4'>
<arg declared_type64='GLKVector4' name='vectorLeft' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='GLKVector4' name='vectorRight' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function inline='true' name='GLKVector4AllGreaterThanScalar'>
<arg declared_type64='GLKVector4' name='vector' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function inline='true' name='GLKVector4AllGreaterThanVector4'>
<arg declared_type64='GLKVector4' name='vectorLeft' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='GLKVector4' name='vectorRight' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function inline='true' name='GLKVector4CrossProduct'>
<arg declared_type64='GLKVector4' name='vectorLeft' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='GLKVector4' name='vectorRight' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function inline='true' name='GLKVector4Distance'>
<arg declared_type64='GLKVector4' name='vectorStart' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='GLKVector4' name='vectorEnd' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='float' type64='f'/>
</function>
<function inline='true' name='GLKVector4Divide'>
<arg declared_type64='GLKVector4' name='vectorLeft' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='GLKVector4' name='vectorRight' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function inline='true' name='GLKVector4DivideScalar'>
<arg declared_type64='GLKVector4' name='vector' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function inline='true' name='GLKVector4DotProduct'>
<arg declared_type64='GLKVector4' name='vectorLeft' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='GLKVector4' name='vectorRight' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='float' type64='f'/>
</function>
<function inline='true' name='GLKVector4Length'>
<arg declared_type64='GLKVector4' name='vector' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='float' type64='f'/>
</function>
<function inline='true' name='GLKVector4Lerp'>
<arg declared_type64='GLKVector4' name='vectorStart' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='GLKVector4' name='vectorEnd' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='float' name='t' type64='f'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function inline='true' name='GLKVector4Make'>
<arg declared_type64='float' name='x' type64='f'/>
<arg declared_type64='float' name='y' type64='f'/>
<arg declared_type64='float' name='z' type64='f'/>
<arg declared_type64='float' name='w' type64='f'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function inline='true' name='GLKVector4MakeWithArray'>
<arg declared_type64='float*' name='values' type64='^f'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function inline='true' name='GLKVector4MakeWithVector3'>
<arg declared_type64='GLKVector3' name='vector' type64='{_GLKVector3=[3f]}'/>
<arg declared_type64='float' name='w' type64='f'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function inline='true' name='GLKVector4Maximum'>
<arg declared_type64='GLKVector4' name='vectorLeft' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='GLKVector4' name='vectorRight' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function inline='true' name='GLKVector4Minimum'>
<arg declared_type64='GLKVector4' name='vectorLeft' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='GLKVector4' name='vectorRight' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function inline='true' name='GLKVector4Multiply'>
<arg declared_type64='GLKVector4' name='vectorLeft' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='GLKVector4' name='vectorRight' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function inline='true' name='GLKVector4MultiplyScalar'>
<arg declared_type64='GLKVector4' name='vector' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function inline='true' name='GLKVector4Negate'>
<arg declared_type64='GLKVector4' name='vector' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function inline='true' name='GLKVector4Normalize'>
<arg declared_type64='GLKVector4' name='vector' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function inline='true' name='GLKVector4Project'>
<arg declared_type64='GLKVector4' name='vectorToProject' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='GLKVector4' name='projectionVector' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function inline='true' name='GLKVector4Subtract'>
<arg declared_type64='GLKVector4' name='vectorLeft' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='GLKVector4' name='vectorRight' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function inline='true' name='GLKVector4SubtractScalar'>
<arg declared_type64='GLKVector4' name='vector' type64='{_GLKVector4=[4f]}'/>
<arg declared_type64='float' name='value' type64='f'/>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</function>
<function name='GLKVertexAttributeParametersFromModelIO'>
<arg declared_type64='MDLVertexFormat' name='vertexFormat' type64='Q'/>
<retval declared_type64='GLKVertexAttributeParameters' type64='{_GLKVertexAttributeParameters=IiC}'/>
</function>
<function name='NSStringFromGLKMatrix2'>
<arg declared_type64='GLKMatrix2' name='matrix' type64='{_GLKMatrix2=[4f]}'/>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</function>
<function name='NSStringFromGLKMatrix3'>
<arg declared_type64='GLKMatrix3' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</function>
<function name='NSStringFromGLKMatrix4'>
<arg declared_type64='GLKMatrix4' name='matrix' type64='{_GLKMatrix4=[16f]}'/>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</function>
<function name='NSStringFromGLKQuaternion'>
<arg declared_type64='GLKQuaternion' name='quaternion' type64='{_GLKQuaternion=[4f]}'/>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</function>
<function name='NSStringFromGLKVector2'>
<arg declared_type64='GLKVector2' name='vector' type64='{_GLKVector2=[2f]}'/>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</function>
<function name='NSStringFromGLKVector3'>
<arg declared_type64='GLKVector3' name='vector' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</function>
<function name='NSStringFromGLKVector4'>
<arg declared_type64='GLKVector4' name='vector' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</function>
<class name='GLKBaseEffect'>
<method selector='colorMaterialEnabled'>
<retval declared_type64='GLboolean' type64='C'/>
</method>
<method selector='constantColor'>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</method>
<method selector='fog'>
<retval declared_type64='GLKEffectPropertyFog * _Nonnull' type64='@'/>
</method>
<method selector='label'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='light0'>
<retval declared_type64='GLKEffectPropertyLight * _Nonnull' type64='@'/>
</method>
<method selector='light1'>
<retval declared_type64='GLKEffectPropertyLight * _Nonnull' type64='@'/>
</method>
<method selector='light2'>
<retval declared_type64='GLKEffectPropertyLight * _Nonnull' type64='@'/>
</method>
<method selector='lightModelAmbientColor'>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</method>
<method selector='lightModelTwoSided'>
<retval declared_type64='GLboolean' type64='C'/>
</method>
<method selector='lightingType'>
<retval declared_type64='GLKLightingType' type64='i'/>
</method>
<method selector='material'>
<retval declared_type64='GLKEffectPropertyMaterial * _Nonnull' type64='@'/>
</method>
<method selector='prepareToDraw'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setColorMaterialEnabled:'>
<arg declared_type64='GLboolean' index='0' name='colorMaterialEnabled' type64='C'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setConstantColor:'>
<arg declared_type64='GLKVector4' index='0' name='constantColor' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLabel:'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLightModelAmbientColor:'>
<arg declared_type64='GLKVector4' index='0' name='lightModelAmbientColor' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLightModelTwoSided:'>
<arg declared_type64='GLboolean' index='0' name='lightModelTwoSided' type64='C'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLightingType:'>
<arg declared_type64='GLKLightingType' index='0' name='lightingType' type64='i'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTextureOrder:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='textureOrder' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUseConstantColor:'>
<arg declared_type64='GLboolean' index='0' name='useConstantColor' type64='C'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='texture2d0'>
<retval declared_type64='GLKEffectPropertyTexture * _Nonnull' type64='@'/>
</method>
<method selector='texture2d1'>
<retval declared_type64='GLKEffectPropertyTexture * _Nonnull' type64='@'/>
</method>
<method selector='textureOrder'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='transform'>
<retval declared_type64='GLKEffectPropertyTransform * _Nonnull' type64='@'/>
</method>
<method selector='useConstantColor'>
<retval declared_type64='GLboolean' type64='C'/>
</method>
</class>
<class name='GLKEffectPropertyFog'>
<method selector='color'>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</method>
<method selector='density'>
<retval declared_type64='GLfloat' type64='f'/>
</method>
<method selector='enabled'>
<retval declared_type64='GLboolean' type64='C'/>
</method>
<method selector='end'>
<retval declared_type64='GLfloat' type64='f'/>
</method>
<method selector='mode'>
<retval declared_type64='GLint' type64='i'/>
</method>
<method selector='setColor:'>
<arg declared_type64='GLKVector4' index='0' name='color' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDensity:'>
<arg declared_type64='GLfloat' index='0' name='density' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEnabled:'>
<arg declared_type64='GLboolean' index='0' name='enabled' type64='C'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEnd:'>
<arg declared_type64='GLfloat' index='0' name='end' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMode:'>
<arg declared_type64='GLint' index='0' name='mode' type64='i'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStart:'>
<arg declared_type64='GLfloat' index='0' name='start' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='start'>
<retval declared_type64='GLfloat' type64='f'/>
</method>
</class>
<class name='GLKEffectPropertyLight'>
<method selector='ambientColor'>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</method>
<method selector='constantAttenuation'>
<retval declared_type64='GLfloat' type64='f'/>
</method>
<method selector='diffuseColor'>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</method>
<method selector='enabled'>
<retval declared_type64='GLboolean' type64='C'/>
</method>
<method selector='linearAttenuation'>
<retval declared_type64='GLfloat' type64='f'/>
</method>
<method selector='position'>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</method>
<method selector='quadraticAttenuation'>
<retval declared_type64='GLfloat' type64='f'/>
</method>
<method selector='setAmbientColor:'>
<arg declared_type64='GLKVector4' index='0' name='ambientColor' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setConstantAttenuation:'>
<arg declared_type64='GLfloat' index='0' name='constantAttenuation' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDiffuseColor:'>
<arg declared_type64='GLKVector4' index='0' name='diffuseColor' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEnabled:'>
<arg declared_type64='GLboolean' index='0' name='enabled' type64='C'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLinearAttenuation:'>
<arg declared_type64='GLfloat' index='0' name='linearAttenuation' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPosition:'>
<arg declared_type64='GLKVector4' index='0' name='position' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setQuadraticAttenuation:'>
<arg declared_type64='GLfloat' index='0' name='quadraticAttenuation' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSpecularColor:'>
<arg declared_type64='GLKVector4' index='0' name='specularColor' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSpotCutoff:'>
<arg declared_type64='GLfloat' index='0' name='spotCutoff' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSpotDirection:'>
<arg declared_type64='GLKVector3' index='0' name='spotDirection' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSpotExponent:'>
<arg declared_type64='GLfloat' index='0' name='spotExponent' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTransform:'>
<arg declared_type64='GLKEffectPropertyTransform * _Nonnull' index='0' name='transform' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='specularColor'>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</method>
<method selector='spotCutoff'>
<retval declared_type64='GLfloat' type64='f'/>
</method>
<method selector='spotDirection'>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</method>
<method selector='spotExponent'>
<retval declared_type64='GLfloat' type64='f'/>
</method>
<method selector='transform'>
<retval declared_type64='GLKEffectPropertyTransform * _Nonnull' type64='@'/>
</method>
</class>
<class name='GLKEffectPropertyMaterial'>
<method selector='ambientColor'>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</method>
<method selector='diffuseColor'>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</method>
<method selector='emissiveColor'>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</method>
<method selector='setAmbientColor:'>
<arg declared_type64='GLKVector4' index='0' name='ambientColor' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDiffuseColor:'>
<arg declared_type64='GLKVector4' index='0' name='diffuseColor' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEmissiveColor:'>
<arg declared_type64='GLKVector4' index='0' name='emissiveColor' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setShininess:'>
<arg declared_type64='GLfloat' index='0' name='shininess' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSpecularColor:'>
<arg declared_type64='GLKVector4' index='0' name='specularColor' type64='{_GLKVector4=[4f]}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='shininess'>
<retval declared_type64='GLfloat' type64='f'/>
</method>
<method selector='specularColor'>
<retval declared_type64='GLKVector4' type64='{_GLKVector4=[4f]}'/>
</method>
</class>
<class name='GLKEffectPropertyTexture'>
<method selector='enabled'>
<retval declared_type64='GLboolean' type64='C'/>
</method>
<method selector='envMode'>
<retval declared_type64='GLKTextureEnvMode' type64='i'/>
</method>
<method selector='name'>
<retval declared_type64='GLuint' type64='I'/>
</method>
<method selector='setEnabled:'>
<arg declared_type64='GLboolean' index='0' name='enabled' type64='C'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEnvMode:'>
<arg declared_type64='GLKTextureEnvMode' index='0' name='envMode' type64='i'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setName:'>
<arg declared_type64='GLuint' index='0' name='name' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTarget:'>
<arg declared_type64='GLKTextureTarget' index='0' name='target' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='target'>
<retval declared_type64='GLKTextureTarget' type64='I'/>
</method>
</class>
<class name='GLKEffectPropertyTransform'>
<method selector='modelviewMatrix'>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</method>
<method selector='normalMatrix'>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</method>
<method selector='projectionMatrix'>
<retval declared_type64='GLKMatrix4' type64='{_GLKMatrix4=[16f]}'/>
</method>
<method selector='setModelviewMatrix:'>
<arg declared_type64='GLKMatrix4' index='0' name='modelviewMatrix' type64='{_GLKMatrix4=[16f]}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setProjectionMatrix:'>
<arg declared_type64='GLKMatrix4' index='0' name='projectionMatrix' type64='{_GLKMatrix4=[16f]}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='GLKMesh'>
<method selector='initWithMesh:error:'>
<arg declared_type64='MDLMesh * _Nonnull' index='0' name='mesh' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='1' name='error' type64='^@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='name'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='newMeshesFromAsset:sourceMeshes:error:'>
<arg declared_type64='MDLAsset * _Nonnull' index='0' name='asset' type64='@'/>
<arg declared_type64='NSArray * _Nullable * _Nullable' index='1' name='sourceMeshes' type64='^@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='2' name='error' type64='^@'/>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='submeshes'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='vertexBuffers'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='vertexCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='vertexDescriptor'>
<retval declared_type64='MDLVertexDescriptor * _Nonnull' type64='@'/>
</method>
</class>
<class name='GLKMeshBuffer'>
<method selector='allocator'>
<retval declared_type64='GLKMeshBufferAllocator * _Nonnull' type64='@'/>
</method>
<method selector='glBufferName'>
<retval declared_type64='GLuint' type64='I'/>
</method>
<method selector='length'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='offset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='type'>
<retval declared_type64='MDLMeshBufferType' type64='Q'/>
</method>
<method selector='zone'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
</class>
<class name='GLKReflectionMapEffect'>
<method selector='matrix'>
<retval declared_type64='GLKMatrix3' type64='{_GLKMatrix3=[9f]}'/>
</method>
<method selector='prepareToDraw'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMatrix:'>
<arg declared_type64='GLKMatrix3' index='0' name='matrix' type64='{_GLKMatrix3=[9f]}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='textureCubeMap'>
<retval declared_type64='GLKEffectPropertyTexture * _Nonnull' type64='@'/>
</method>
</class>
<class name='GLKSkyboxEffect'>
<method selector='center'>
<retval declared_type64='GLKVector3' type64='{_GLKVector3=[3f]}'/>
</method>
<method selector='draw'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='label'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='prepareToDraw'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCenter:'>
<arg declared_type64='GLKVector3' index='0' name='center' type64='{_GLKVector3=[3f]}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLabel:'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setXSize:'>
<arg declared_type64='GLfloat' index='0' name='xSize' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setYSize:'>
<arg declared_type64='GLfloat' index='0' name='ySize' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setZSize:'>
<arg declared_type64='GLfloat' index='0' name='zSize' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='textureCubeMap'>
<retval declared_type64='GLKEffectPropertyTexture * _Nonnull' type64='@'/>
</method>
<method selector='transform'>
<retval declared_type64='GLKEffectPropertyTransform * _Nonnull' type64='@'/>
</method>
<method selector='xSize'>
<retval declared_type64='GLfloat' type64='f'/>
</method>
<method selector='ySize'>
<retval declared_type64='GLfloat' type64='f'/>
</method>
<method selector='zSize'>
<retval declared_type64='GLfloat' type64='f'/>
</method>
</class>
<class name='GLKSubmesh'>
<method selector='elementBuffer'>
<retval declared_type64='GLKMeshBuffer * _Nonnull' type64='@'/>
</method>
<method selector='elementCount'>
<retval declared_type64='GLsizei' type64='i'/>
</method>
<method selector='mesh'>
<retval declared_type64='GLKMesh * _Nullable' type64='@'/>
</method>
<method selector='mode'>
<retval declared_type64='GLenum' type64='I'/>
</method>
<method selector='name'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method selector='type'>
<retval declared_type64='GLenum' type64='I'/>
</method>
</class>
<class name='GLKTextureInfo'>
<method selector='alphaState'>
<retval declared_type64='GLKTextureInfoAlphaState' type64='i'/>
</method>
<method selector='containsMipmaps'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='height'>
<retval declared_type64='GLuint' type64='I'/>
</method>
<method selector='name'>
<retval declared_type64='GLuint' type64='I'/>
</method>
<method selector='target'>
<retval declared_type64='GLenum' type64='I'/>
</method>
<method selector='textureOrigin'>
<retval declared_type64='GLKTextureInfoOrigin' type64='i'/>
</method>
<method selector='width'>
<retval declared_type64='GLuint' type64='I'/>
</method>
</class>
<class name='GLKTextureLoader'>
<method class_method='true' selector='cubeMapWithContentsOfFile:options:error:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='path' type64='@'/>
<arg declared_type64='NSDictionary * _Nullable' index='1' name='options' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='2' name='outError' type64='^@'/>
<retval declared_type64='GLKTextureInfo * _Nullable' type64='@'/>
</method>
<method selector='cubeMapWithContentsOfFile:options:queue:completionHandler:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='path' type64='@'/>
<arg declared_type64='NSDictionary * _Nullable' index='1' name='options' type64='@'/>
<arg declared_type64='dispatch_queue_t _Nullable' index='2' name='queue' type64='@'/>
<arg declared_type64='GLKTextureLoaderCallback _Nonnull' function_pointer='true' index='3' name='block' type64='@?'>
<arg declared_type64='GLKTextureInfo * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='cubeMapWithContentsOfFiles:options:error:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='paths' type64='@'/>
<arg declared_type64='NSDictionary * _Nullable' index='1' name='options' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='2' name='outError' type64='^@'/>
<retval declared_type64='GLKTextureInfo * _Nullable' type64='@'/>
</method>
<method selector='cubeMapWithContentsOfFiles:options:queue:completionHandler:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='paths' type64='@'/>
<arg declared_type64='NSDictionary * _Nullable' index='1' name='options' type64='@'/>
<arg declared_type64='dispatch_queue_t _Nullable' index='2' name='queue' type64='@'/>
<arg declared_type64='GLKTextureLoaderCallback _Nonnull' function_pointer='true' index='3' name='block' type64='@?'>
<arg declared_type64='GLKTextureInfo * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='cubeMapWithContentsOfURL:options:error:'>
<arg declared_type64='NSURL * _Nonnull' index='0' name='url' type64='@'/>
<arg declared_type64='NSDictionary * _Nullable' index='1' name='options' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='2' name='outError' type64='^@'/>
<retval declared_type64='GLKTextureInfo * _Nullable' type64='@'/>
</method>
<method selector='cubeMapWithContentsOfURL:options:queue:completionHandler:'>
<arg declared_type64='NSURL * _Nonnull' index='0' name='url' type64='@'/>
<arg declared_type64='NSDictionary * _Nullable' index='1' name='options' type64='@'/>
<arg declared_type64='dispatch_queue_t _Nullable' index='2' name='queue' type64='@'/>
<arg declared_type64='GLKTextureLoaderCallback _Nonnull' function_pointer='true' index='3' name='block' type64='@?'>
<arg declared_type64='GLKTextureInfo * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithSharegroup:'>
<arg declared_type64='EAGLSharegroup * _Nonnull' index='0' name='sharegroup' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='textureWithCGImage:options:error:'>
<arg declared_type64='CGImageRef _Nonnull' index='0' name='cgImage' type64='^{CGImage=}'/>
<arg declared_type64='NSDictionary * _Nullable' index='1' name='options' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='2' name='outError' type64='^@'/>
<retval declared_type64='GLKTextureInfo * _Nullable' type64='@'/>
</method>
<method selector='textureWithCGImage:options:queue:completionHandler:'>
<arg declared_type64='CGImageRef _Nonnull' index='0' name='cgImage' type64='^{CGImage=}'/>
<arg declared_type64='NSDictionary * _Nullable' index='1' name='options' type64='@'/>
<arg declared_type64='dispatch_queue_t _Nullable' index='2' name='queue' type64='@'/>
<arg declared_type64='GLKTextureLoaderCallback _Nonnull' function_pointer='true' index='3' name='block' type64='@?'>
<arg declared_type64='GLKTextureInfo * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='textureWithContentsOfData:options:error:'>
<arg declared_type64='NSData * _Nonnull' index='0' name='data' type64='@'/>
<arg declared_type64='NSDictionary * _Nullable' index='1' name='options' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='2' name='outError' type64='^@'/>
<retval declared_type64='GLKTextureInfo * _Nullable' type64='@'/>
</method>
<method selector='textureWithContentsOfData:options:queue:completionHandler:'>
<arg declared_type64='NSData * _Nonnull' index='0' name='data' type64='@'/>
<arg declared_type64='NSDictionary * _Nullable' index='1' name='options' type64='@'/>
<arg declared_type64='dispatch_queue_t _Nullable' index='2' name='queue' type64='@'/>
<arg declared_type64='GLKTextureLoaderCallback _Nonnull' function_pointer='true' index='3' name='block' type64='@?'>
<arg declared_type64='GLKTextureInfo * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='textureWithContentsOfFile:options:error:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='path' type64='@'/>
<arg declared_type64='NSDictionary * _Nullable' index='1' name='options' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='2' name='outError' type64='^@'/>
<retval declared_type64='GLKTextureInfo * _Nullable' type64='@'/>
</method>
<method selector='textureWithContentsOfFile:options:queue:completionHandler:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='path' type64='@'/>
<arg declared_type64='NSDictionary * _Nullable' index='1' name='options' type64='@'/>
<arg declared_type64='dispatch_queue_t _Nullable' index='2' name='queue' type64='@'/>
<arg declared_type64='GLKTextureLoaderCallback _Nonnull' function_pointer='true' index='3' name='block' type64='@?'>
<arg declared_type64='GLKTextureInfo * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='textureWithContentsOfURL:options:error:'>
<arg declared_type64='NSURL * _Nonnull' index='0' name='url' type64='@'/>
<arg declared_type64='NSDictionary * _Nullable' index='1' name='options' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='2' name='outError' type64='^@'/>
<retval declared_type64='GLKTextureInfo * _Nullable' type64='@'/>
</method>
<method selector='textureWithContentsOfURL:options:queue:completionHandler:'>
<arg declared_type64='NSURL * _Nonnull' index='0' name='url' type64='@'/>
<arg declared_type64='NSDictionary * _Nullable' index='1' name='options' type64='@'/>
<arg declared_type64='dispatch_queue_t _Nullable' index='2' name='queue' type64='@'/>
<arg declared_type64='GLKTextureLoaderCallback _Nonnull' function_pointer='true' index='3' name='block' type64='@?'>
<arg declared_type64='GLKTextureInfo * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='GLKView'>
<method selector='bindDrawable'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='context'>
<retval declared_type64='EAGLContext * _Nonnull' type64='@'/>
</method>
<method selector='delegate'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='deleteDrawable'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='display'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='drawableColorFormat'>
<retval declared_type64='GLKViewDrawableColorFormat' type64='i'/>
</method>
<method selector='drawableDepthFormat'>
<retval declared_type64='GLKViewDrawableDepthFormat' type64='i'/>
</method>
<method selector='drawableHeight'>
<retval declared_type64='NSInteger' type64='q'/>
</method>
<method selector='drawableMultisample'>
<retval declared_type64='GLKViewDrawableMultisample' type64='i'/>
</method>
<method selector='drawableStencilFormat'>
<retval declared_type64='GLKViewDrawableStencilFormat' type64='i'/>
</method>
<method selector='drawableWidth'>
<retval declared_type64='NSInteger' type64='q'/>
</method>
<method selector='enableSetNeedsDisplay'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='initWithFrame:context:'>
<arg declared_type64='CGRect' index='0' name='frame' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type64='EAGLContext * _Nonnull' index='1' name='context' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setContext:'>
<arg declared_type64='EAGLContext * _Nonnull' index='0' name='context' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDelegate:'>
<arg declared_type64='id _Nullable' index='0' name='delegate' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDrawableColorFormat:'>
<arg declared_type64='GLKViewDrawableColorFormat' index='0' name='drawableColorFormat' type64='i'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDrawableDepthFormat:'>
<arg declared_type64='GLKViewDrawableDepthFormat' index='0' name='drawableDepthFormat' type64='i'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDrawableMultisample:'>
<arg declared_type64='GLKViewDrawableMultisample' index='0' name='drawableMultisample' type64='i'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDrawableStencilFormat:'>
<arg declared_type64='GLKViewDrawableStencilFormat' index='0' name='drawableStencilFormat' type64='i'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEnableSetNeedsDisplay:'>
<arg declared_type64='BOOL' index='0' name='enableSetNeedsDisplay' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='snapshot'>
<retval declared_type64='UIImage * _Nonnull' type64='@'/>
</method>
</class>
<class name='GLKViewController'>
<method selector='delegate'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='framesDisplayed'>
<retval declared_type64='NSInteger' type64='q'/>
</method>
<method selector='framesPerSecond'>
<retval declared_type64='NSInteger' type64='q'/>
</method>
<method selector='isPaused'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='pauseOnWillResignActive'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='preferredFramesPerSecond'>
<retval declared_type64='NSInteger' type64='q'/>
</method>
<method selector='resumeOnDidBecomeActive'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='setDelegate:'>
<arg declared_type64='id _Nullable' index='0' name='delegate' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPauseOnWillResignActive:'>
<arg declared_type64='BOOL' index='0' name='pauseOnWillResignActive' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPaused:'>
<arg declared_type64='BOOL' index='0' name='paused' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPreferredFramesPerSecond:'>
<arg declared_type64='NSInteger' index='0' name='preferredFramesPerSecond' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setResumeOnDidBecomeActive:'>
<arg declared_type64='BOOL' index='0' name='resumeOnDidBecomeActive' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='timeSinceFirstResume'>
<retval declared_type64='NSTimeInterval' type64='d'/>
</method>
<method selector='timeSinceLastDraw'>
<retval declared_type64='NSTimeInterval' type64='d'/>
</method>
<method selector='timeSinceLastResume'>
<retval declared_type64='NSTimeInterval' type64='d'/>
</method>
<method selector='timeSinceLastUpdate'>
<retval declared_type64='NSTimeInterval' type64='d'/>
</method>
</class>
<class name='NSObject'>
<method selector='glkView:drawInRect:'>
<arg declared_type64='GLKView * _Nonnull' index='0' name='view' type64='@'/>
<arg declared_type64='CGRect' index='1' name='rect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='glkViewController:willPause:'>
<arg declared_type64='GLKViewController * _Nonnull' index='0' name='controller' type64='@'/>
<arg declared_type64='BOOL' index='1' name='pause' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='glkViewControllerUpdate:'>
<arg declared_type64='GLKViewController * _Nonnull' index='0' name='controller' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='prepareToDraw'>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<informal_protocol name='GLKNamedEffect'>
<method selector='prepareToDraw' type64='v16@0:8'>
<retval declared_type64='void' type64='v'/>
</method>
</informal_protocol>
<informal_protocol name='GLKViewControllerDelegate'>
<method selector='glkViewController:willPause:' type64='v28@0:8@16B24'>
<arg declared_type64='GLKViewController * _Nonnull' index='0' name='controller' type64='@'/>
<arg declared_type64='BOOL' index='1' name='pause' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='glkViewControllerUpdate:' type64='v24@0:8@16'>
<arg declared_type64='GLKViewController * _Nonnull' index='0' name='controller' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</informal_protocol>
<informal_protocol name='GLKViewDelegate'>
<method selector='glkView:drawInRect:' type64='v56@0:8@16{CGRect={CGPoint=dd}{CGSize=dd}}24'>
<arg declared_type64='GLKView * _Nonnull' index='0' name='view' type64='@'/>
<arg declared_type64='CGRect' index='1' name='rect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type64='void' type64='v'/>
</method>
</informal_protocol>
</signatures>
