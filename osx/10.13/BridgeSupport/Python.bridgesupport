<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='PyAddrPair' type64='{_addr_pair=&quot;ap_lower&quot;i&quot;ap_upper&quot;i}'>
<field declared_type64='int' name='ap_lower' type64='i'/>
<field declared_type64='int' name='ap_upper' type64='i'/>
</struct>
<struct name='PyBaseExceptionObject' type64='{_PyBaseExceptionObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;dict&quot;^{_object}&quot;args&quot;^{_object}&quot;message&quot;^{_object}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyObject*' name='dict' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='args' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='message' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='PyBoolObject' type64='{_PyBoolObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;ob_ival&quot;q}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='long' name='ob_ival' type64='q'/>
</struct>
<struct name='PyBufferProcs' type64='{_PyBufferProcs=&quot;bf_getreadbuffer&quot;^?&quot;bf_getwritebuffer&quot;^?&quot;bf_getsegcount&quot;^?&quot;bf_getcharbuffer&quot;^?&quot;bf_getbuffer&quot;^?&quot;bf_releasebuffer&quot;^?}'>
<field declared_type64='readbufferproc' function_pointer='true' name='bf_getreadbuffer' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</field>
<field declared_type64='writebufferproc' function_pointer='true' name='bf_getwritebuffer' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</field>
<field declared_type64='segcountproc' function_pointer='true' name='bf_getsegcount' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t*' type64='^q'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</field>
<field declared_type64='charbufferproc' function_pointer='true' name='bf_getcharbuffer' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</field>
<field declared_type64='getbufferproc' function_pointer='true' name='bf_getbuffer' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_buffer*' type64='^{bufferinfo=^v^{_object}qqii*^q^q^q[2q]^v}'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='releasebufferproc' function_pointer='true' name='bf_releasebuffer' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_buffer*' type64='^{bufferinfo=^v^{_object}qqii*^q^q^q[2q]^v}'/>
<retval declared_type64='void' type64='v'/>
</field>
</struct>
<struct name='PyByteArrayObject' type64='{_PyByteArrayObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;ob_size&quot;q&quot;ob_exports&quot;i&quot;ob_alloc&quot;q&quot;ob_bytes&quot;*}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='Py_ssize_t' name='ob_size' type64='q'/>
<field declared_type64='int' name='ob_exports' type64='i'/>
<field declared_type64='Py_ssize_t' name='ob_alloc' type64='q'/>
<field declared_type64='char*' name='ob_bytes' type64='*'/>
</struct>
<struct name='PyCFunctionObject' type64='{_PyCFunctionObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;m_ml&quot;^{PyMethodDef}&quot;m_self&quot;^{_object}&quot;m_module&quot;^{_object}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyMethodDef*' name='m_ml' type64='^{PyMethodDef=*^?i*}'/>
<field declared_type64='PyObject*' name='m_self' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='m_module' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='PyCObject' type64='{_PyCObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;cobject&quot;^v&quot;desc&quot;^v&quot;destructor&quot;^?}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='void*' name='cobject' type64='^v'/>
<field declared_type64='void*' name='desc' type64='^v'/>
<field declared_type64='void (*)(void *)' function_pointer='true' name='destructor' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
</struct>
<struct name='PyCellObject' type64='{_PyCellObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;ob_ref&quot;^{_object}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyObject*' name='ob_ref' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='PyClassObject' type64='{_PyClassObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;cl_bases&quot;^{_object}&quot;cl_dict&quot;^{_object}&quot;cl_name&quot;^{_object}&quot;cl_getattr&quot;^{_object}&quot;cl_setattr&quot;^{_object}&quot;cl_delattr&quot;^{_object}&quot;cl_weakreflist&quot;^{_object}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyObject*' name='cl_bases' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='cl_dict' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='cl_name' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='cl_getattr' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='cl_setattr' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='cl_delattr' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='cl_weakreflist' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='PyCodeObject' type64='{_PyCodeObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;co_argcount&quot;i&quot;co_nlocals&quot;i&quot;co_stacksize&quot;i&quot;co_flags&quot;i&quot;co_code&quot;^{_object}&quot;co_consts&quot;^{_object}&quot;co_names&quot;^{_object}&quot;co_varnames&quot;^{_object}&quot;co_freevars&quot;^{_object}&quot;co_cellvars&quot;^{_object}&quot;co_filename&quot;^{_object}&quot;co_name&quot;^{_object}&quot;co_firstlineno&quot;i&quot;co_lnotab&quot;^{_object}&quot;co_zombieframe&quot;^v&quot;co_weakreflist&quot;^{_object}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='int' name='co_argcount' type64='i'/>
<field declared_type64='int' name='co_nlocals' type64='i'/>
<field declared_type64='int' name='co_stacksize' type64='i'/>
<field declared_type64='int' name='co_flags' type64='i'/>
<field declared_type64='PyObject*' name='co_code' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='co_consts' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='co_names' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='co_varnames' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='co_freevars' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='co_cellvars' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='co_filename' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='co_name' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='int' name='co_firstlineno' type64='i'/>
<field declared_type64='PyObject*' name='co_lnotab' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='void*' name='co_zombieframe' type64='^v'/>
<field declared_type64='PyObject*' name='co_weakreflist' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='PyCompilerFlags' type64='{_PyCompilerFlags=&quot;cf_flags&quot;i}'>
<field declared_type64='int' name='cf_flags' type64='i'/>
</struct>
<struct name='PyComplexObject' type64='{_PyComplexObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;cval&quot;{_Py_complex=&quot;real&quot;d&quot;imag&quot;d}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='Py_complex' name='cval' type64='{_Py_complex=&quot;real&quot;d&quot;imag&quot;d}'/>
</struct>
<struct name='PyCursesWindowObject' type64='{_PyCursesWindowObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;win&quot;^{_win_st}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='WINDOW*' name='win' type64='^{_win_st=sssssssIIBBBBBBBBBi^{ldat}ssii^{_win_st}{pdat=ssssss}s}'/>
</struct>
<struct name='PyDateTime_CAPI' type64='{_PyDateTime_CAPI=&quot;DateType&quot;^{_typeobject}&quot;DateTimeType&quot;^{_typeobject}&quot;TimeType&quot;^{_typeobject}&quot;DeltaType&quot;^{_typeobject}&quot;TZInfoType&quot;^{_typeobject}&quot;Date_FromDate&quot;^?&quot;DateTime_FromDateAndTime&quot;^?&quot;Time_FromTime&quot;^?&quot;Delta_FromDelta&quot;^?&quot;DateTime_FromTimestamp&quot;^?&quot;Date_FromTimestamp&quot;^?}'>
<field declared_type64='PyTypeObject*' name='DateType' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyTypeObject*' name='DateTimeType' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyTypeObject*' name='TimeType' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyTypeObject*' name='DeltaType' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyTypeObject*' name='TZInfoType' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyObject *(*)(int, int, int, PyTypeObject *)' function_pointer='true' name='Date_FromDate' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='PyTypeObject*' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='PyObject *(*)(int, int, int, int, int, int, int, PyObject *, PyTypeObject *)' function_pointer='true' name='DateTime_FromDateAndTime' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyTypeObject*' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='PyObject *(*)(int, int, int, int, PyObject *, PyTypeObject *)' function_pointer='true' name='Time_FromTime' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyTypeObject*' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='PyObject *(*)(int, int, int, int, PyTypeObject *)' function_pointer='true' name='Delta_FromDelta' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='PyTypeObject*' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='PyObject *(*)(PyObject *, PyObject *, PyObject *)' function_pointer='true' name='DateTime_FromTimestamp' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='PyObject *(*)(PyObject *, PyObject *)' function_pointer='true' name='Date_FromTimestamp' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
</struct>
<struct name='PyDateTime_Date' type64='{_PyDateTime_Date=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;hashcode&quot;q&quot;hastzinfo&quot;c&quot;data&quot;[4C]}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='long' name='hashcode' type64='q'/>
<field declared_type64='char' name='hastzinfo' type64='c'/>
<field declared_type64='unsigned char*' name='data' type64='[4C]'/>
</struct>
<struct name='PyDateTime_DateTime' type64='{_PyDateTime_DateTime=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;hashcode&quot;q&quot;hastzinfo&quot;c&quot;data&quot;[10C]&quot;tzinfo&quot;^{_object}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='long' name='hashcode' type64='q'/>
<field declared_type64='char' name='hastzinfo' type64='c'/>
<field declared_type64='unsigned char*' name='data' type64='[10C]'/>
<field declared_type64='PyObject*' name='tzinfo' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='PyDateTime_Delta' type64='{_PyDateTime_Delta=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;hashcode&quot;q&quot;days&quot;i&quot;seconds&quot;i&quot;microseconds&quot;i}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='long' name='hashcode' type64='q'/>
<field declared_type64='int' name='days' type64='i'/>
<field declared_type64='int' name='seconds' type64='i'/>
<field declared_type64='int' name='microseconds' type64='i'/>
</struct>
<struct name='PyDateTime_TZInfo' type64='{_PyDateTime_TZInfo=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
</struct>
<struct name='PyDateTime_Time' type64='{_PyDateTime_Time=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;hashcode&quot;q&quot;hastzinfo&quot;c&quot;data&quot;[6C]&quot;tzinfo&quot;^{_object}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='long' name='hashcode' type64='q'/>
<field declared_type64='char' name='hastzinfo' type64='c'/>
<field declared_type64='unsigned char*' name='data' type64='[6C]'/>
<field declared_type64='PyObject*' name='tzinfo' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='PyDescrObject' type64='{_PyDescrObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;d_type&quot;^{_typeobject}&quot;d_name&quot;^{_object}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyTypeObject*' name='d_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyObject*' name='d_name' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='PyDictEntry' type64='{_PyDictEntry=&quot;me_hash&quot;q&quot;me_key&quot;^{_object}&quot;me_value&quot;^{_object}}'>
<field declared_type64='Py_ssize_t' name='me_hash' type64='q'/>
<field declared_type64='PyObject*' name='me_key' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='me_value' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='PyDictObject' type64='{_dictobject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;ma_fill&quot;q&quot;ma_used&quot;q&quot;ma_mask&quot;q&quot;ma_table&quot;^{_PyDictEntry=&quot;me_hash&quot;q&quot;me_key&quot;^{_object}&quot;me_value&quot;^{_object}}&quot;ma_lookup&quot;^?&quot;ma_smalltable&quot;[8{_PyDictEntry=&quot;me_hash&quot;q&quot;me_key&quot;^{_object}&quot;me_value&quot;^{_object}}]}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='Py_ssize_t' name='ma_fill' type64='q'/>
<field declared_type64='Py_ssize_t' name='ma_used' type64='q'/>
<field declared_type64='Py_ssize_t' name='ma_mask' type64='q'/>
<field declared_type64='PyDictEntry*' name='ma_table' type64='^{_PyDictEntry=&quot;me_hash&quot;q&quot;me_key&quot;^{_object}&quot;me_value&quot;^{_object}}'/>
<field declared_type64='PyDictEntry *(*)(PyDictObject *, PyObject *, long)' function_pointer='true' name='ma_lookup' type64='^?'>
<arg declared_type64='PyDictObject*' type64='^{_dictobject=q^{_typeobject}qqq^{_PyDictEntry=q^{_object}^{_object}}^?[8{_PyDictEntry=q^{_object}^{_object}}]}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='long' type64='q'/>
<retval declared_type64='PyDictEntry*' type64='^{_PyDictEntry=q^{_object}^{_object}}'/>
</field>
<field declared_type64='PyDictEntry*' name='ma_smalltable' type64='[8{_PyDictEntry=&quot;me_hash&quot;q&quot;me_key&quot;^{_object}&quot;me_value&quot;^{_object}}'/>
</struct>
<struct name='PyEnvironmentErrorObject' type64='{_PyEnvironmentErrorObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;dict&quot;^{_object}&quot;args&quot;^{_object}&quot;message&quot;^{_object}&quot;myerrno&quot;^{_object}&quot;strerror&quot;^{_object}&quot;filename&quot;^{_object}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyObject*' name='dict' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='args' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='message' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='myerrno' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='strerror' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='filename' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='PyExpat_CAPI' type64='{PyExpat_CAPI=}'>
<field declared_type64='char*' name='magic' type64='*'/>
<field declared_type64='int' name='size' type64='i'/>
<field declared_type64='int' name='MAJOR_VERSION' type64='i'/>
<field declared_type64='int' name='MINOR_VERSION' type64='i'/>
<field declared_type64='int' name='MICRO_VERSION' type64='i'/>
<field const='true' declared_type64='int *(*)(enum XML_Error)' function_pointer='true' name='ErrorString' type64='^?'>
<arg declared_type64='enum XML_Error' type64='i'/>
<retval const='true' declared_type64='int*' type64='^i'/>
</field>
<field declared_type64='enum XML_Error (*)(NSXMLParser *)' function_pointer='true' name='GetErrorCode' type64='^?'>
<arg declared_type64='NSXMLParser*' type64='@'/>
<retval declared_type64='enum XML_Error' type64='i'/>
</field>
<field declared_type64='int (int *)' name='XML_Size' type64='?'/>
<field declared_type64='enum XML_Status (*)(NSXMLParser *, char *, int, int)' function_pointer='true' name='Parse' type64='^?'>
<arg declared_type64='NSXMLParser*' type64='@'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='enum XML_Status' type64='i'/>
</field>
<field declared_type64='int (int *)' name='XML_Parser' type64='?'/>
<field declared_type64='void (*)(NSXMLParser *)' function_pointer='true' name='ParserFree' type64='^?'>
<arg declared_type64='NSXMLParser*' type64='@'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(NSXMLParser *, int)' function_pointer='true' name='SetCharacterDataHandler' type64='^?'>
<arg declared_type64='NSXMLParser*' type64='@'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(NSXMLParser *, int)' function_pointer='true' name='SetCommentHandler' type64='^?'>
<arg declared_type64='NSXMLParser*' type64='@'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(NSXMLParser *, int)' function_pointer='true' name='SetDefaultHandlerExpand' type64='^?'>
<arg declared_type64='NSXMLParser*' type64='@'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(NSXMLParser *, int, int)' function_pointer='true' name='SetElementHandler' type64='^?'>
<arg declared_type64='NSXMLParser*' type64='@'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(NSXMLParser *, int, int)' function_pointer='true' name='SetNamespaceDeclHandler' type64='^?'>
<arg declared_type64='NSXMLParser*' type64='@'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(NSXMLParser *, CFXMLProcessingInstructionInfo)' function_pointer='true' name='SetProcessingInstructionHandler' type64='^?'>
<arg declared_type64='NSXMLParser*' type64='@'/>
<arg declared_type64='CFXMLProcessingInstructionInfo' type64='{_CFXMLProcessingInstructionInfo=^{__CFString}}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(NSXMLParser *, int, void *)' function_pointer='true' name='SetUnknownEncodingHandler' type64='^?'>
<arg declared_type64='NSXMLParser*' type64='@'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(NSXMLParser *, void *)' function_pointer='true' name='SetUserData' type64='^?'>
<arg declared_type64='NSXMLParser*' type64='@'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
</struct>
<struct name='PyFileObject' type64='{_PyFileObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;f_fp&quot;^{__sFILE}&quot;f_name&quot;^{_object}&quot;f_mode&quot;^{_object}&quot;f_close&quot;^?&quot;f_softspace&quot;i&quot;f_binary&quot;i&quot;f_buf&quot;*&quot;f_bufend&quot;*&quot;f_bufptr&quot;*&quot;f_setbuf&quot;*&quot;f_univ_newline&quot;i&quot;f_newlinetypes&quot;i&quot;f_skipnextlf&quot;i&quot;f_encoding&quot;^{_object}&quot;f_errors&quot;^{_object}&quot;weakreflist&quot;^{_object}&quot;unlocked_count&quot;i&quot;readable&quot;i&quot;writable&quot;i}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='FILE*' name='f_fp' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<field declared_type64='PyObject*' name='f_name' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='f_mode' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='int (*)(FILE *)' function_pointer='true' name='f_close' type64='^?'>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='int' name='f_softspace' type64='i'/>
<field declared_type64='int' name='f_binary' type64='i'/>
<field declared_type64='char*' name='f_buf' type64='*'/>
<field declared_type64='char*' name='f_bufend' type64='*'/>
<field declared_type64='char*' name='f_bufptr' type64='*'/>
<field declared_type64='char*' name='f_setbuf' type64='*'/>
<field declared_type64='int' name='f_univ_newline' type64='i'/>
<field declared_type64='int' name='f_newlinetypes' type64='i'/>
<field declared_type64='int' name='f_skipnextlf' type64='i'/>
<field declared_type64='PyObject*' name='f_encoding' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='f_errors' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='weakreflist' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='int' name='unlocked_count' type64='i'/>
<field declared_type64='int' name='readable' type64='i'/>
<field declared_type64='int' name='writable' type64='i'/>
</struct>
<struct name='PyFloatObject' type64='{_PyFloatObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;ob_fval&quot;d}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='double' name='ob_fval' type64='d'/>
</struct>
<struct name='PyFrameObject' type64='{_frame=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;ob_size&quot;q&quot;f_back&quot;^{_frame}&quot;f_code&quot;^{_PyCodeObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;co_argcount&quot;i&quot;co_nlocals&quot;i&quot;co_stacksize&quot;i&quot;co_flags&quot;i&quot;co_code&quot;^{_object}&quot;co_consts&quot;^{_object}&quot;co_names&quot;^{_object}&quot;co_varnames&quot;^{_object}&quot;co_freevars&quot;^{_object}&quot;co_cellvars&quot;^{_object}&quot;co_filename&quot;^{_object}&quot;co_name&quot;^{_object}&quot;co_firstlineno&quot;i&quot;co_lnotab&quot;^{_object}&quot;co_zombieframe&quot;^v&quot;co_weakreflist&quot;^{_object}}&quot;f_builtins&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;f_globals&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;f_locals&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;f_valuestack&quot;^^{_object}&quot;f_stacktop&quot;^^{_object}&quot;f_trace&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;f_exc_type&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;f_exc_value&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;f_exc_traceback&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;f_tstate&quot;^{_ts=&quot;next&quot;^{_ts}&quot;interp&quot;^{_is}&quot;frame&quot;^{_frame}&quot;recursion_depth&quot;i&quot;tracing&quot;i&quot;use_tracing&quot;i&quot;c_profilefunc&quot;^?&quot;c_tracefunc&quot;^?&quot;c_profileobj&quot;^{_object}&quot;c_traceobj&quot;^{_object}&quot;curexc_type&quot;^{_object}&quot;curexc_value&quot;^{_object}&quot;curexc_traceback&quot;^{_object}&quot;exc_type&quot;^{_object}&quot;exc_value&quot;^{_object}&quot;exc_traceback&quot;^{_object}&quot;dict&quot;^{_object}&quot;tick_counter&quot;i&quot;gilstate_counter&quot;i&quot;async_exc&quot;^{_object}&quot;thread_id&quot;q&quot;trash_delete_nesting&quot;i&quot;trash_delete_later&quot;^{_object}}&quot;f_lasti&quot;i&quot;f_lineno&quot;i&quot;f_iblock&quot;i&quot;f_blockstack&quot;[20{_PyTryBlock=&quot;b_type&quot;i&quot;b_handler&quot;i&quot;b_level&quot;i}]&quot;f_localsplus&quot;[1^{_object}]}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='Py_ssize_t' name='ob_size' type64='q'/>
<field declared_type64='struct _frame*' name='f_back' type64='^{_frame=q^{_typeobject}q^{_frame}^{?}^{_object}^{_object}^{_object}^^{_object}^^{_object}^{_object}^{_object}^{_object}^{_object}^{_ts}iii[20{?=iii}][1^{_object}]}'/>
<field declared_type64='PyCodeObject*' name='f_code' type64='^{_PyCodeObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;co_argcount&quot;i&quot;co_nlocals&quot;i&quot;co_stacksize&quot;i&quot;co_flags&quot;i&quot;co_code&quot;^{_object}&quot;co_consts&quot;^{_object}&quot;co_names&quot;^{_object}&quot;co_varnames&quot;^{_object}&quot;co_freevars&quot;^{_object}&quot;co_cellvars&quot;^{_object}&quot;co_filename&quot;^{_object}&quot;co_name&quot;^{_object}&quot;co_firstlineno&quot;i&quot;co_lnotab&quot;^{_object}&quot;co_zombieframe&quot;^v&quot;co_weakreflist&quot;^{_object}}'/>
<field declared_type64='PyObject*' name='f_builtins' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
<field declared_type64='PyObject*' name='f_globals' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
<field declared_type64='PyObject*' name='f_locals' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
<field declared_type64='PyObject**' name='f_valuestack' type64='^^{_object}'/>
<field declared_type64='PyObject**' name='f_stacktop' type64='^^{_object}'/>
<field declared_type64='PyObject*' name='f_trace' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
<field declared_type64='PyObject*' name='f_exc_type' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
<field declared_type64='PyObject*' name='f_exc_value' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
<field declared_type64='PyObject*' name='f_exc_traceback' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
<field declared_type64='PyThreadState*' name='f_tstate' type64='^{_ts=&quot;next&quot;^{_ts}&quot;interp&quot;^{_is}&quot;frame&quot;^{_frame}&quot;recursion_depth&quot;i&quot;tracing&quot;i&quot;use_tracing&quot;i&quot;c_profilefunc&quot;^?&quot;c_tracefunc&quot;^?&quot;c_profileobj&quot;^{_object}&quot;c_traceobj&quot;^{_object}&quot;curexc_type&quot;^{_object}&quot;curexc_value&quot;^{_object}&quot;curexc_traceback&quot;^{_object}&quot;exc_type&quot;^{_object}&quot;exc_value&quot;^{_object}&quot;exc_traceback&quot;^{_object}&quot;dict&quot;^{_object}&quot;tick_counter&quot;i&quot;gilstate_counter&quot;i&quot;async_exc&quot;^{_object}&quot;thread_id&quot;q&quot;trash_delete_nesting&quot;i&quot;trash_delete_later&quot;^{_object}}'/>
<field declared_type64='int' name='f_lasti' type64='i'/>
<field declared_type64='int' name='f_lineno' type64='i'/>
<field declared_type64='int' name='f_iblock' type64='i'/>
<field declared_type64='PyTryBlock*' name='f_blockstack' type64='[20{_PyTryBlock=&quot;b_type&quot;i&quot;b_handler&quot;i&quot;b_level&quot;i}'/>
<field declared_type64='PyObject**' name='f_localsplus' type64='[1^{_object}]'/>
</struct>
<struct name='PyFunctionObject' type64='{_PyFunctionObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;func_code&quot;^{_object}&quot;func_globals&quot;^{_object}&quot;func_defaults&quot;^{_object}&quot;func_closure&quot;^{_object}&quot;func_doc&quot;^{_object}&quot;func_name&quot;^{_object}&quot;func_dict&quot;^{_object}&quot;func_weakreflist&quot;^{_object}&quot;func_module&quot;^{_object}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyObject*' name='func_code' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='func_globals' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='func_defaults' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='func_closure' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='func_doc' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='func_name' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='func_dict' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='func_weakreflist' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='func_module' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='PyFutureFeatures' type64='{_PyFutureFeatures=&quot;ff_features&quot;i&quot;ff_lineno&quot;i}'>
<field declared_type64='int' name='ff_features' type64='i'/>
<field declared_type64='int' name='ff_lineno' type64='i'/>
</struct>
<struct name='PyGenObject' type64='{_PyGenObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;gi_frame&quot;^{_frame}&quot;gi_running&quot;i&quot;gi_code&quot;^{_object}&quot;gi_weakreflist&quot;^{_object}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='struct _frame*' name='gi_frame' type64='^{_frame=q^{_typeobject}q^{_frame}^{?}^{_object}^{_object}^{_object}^^{_object}^^{_object}^{_object}^{_object}^{_object}^{_object}^{_ts}iii[20{?=iii}][1^{_object}]}'/>
<field declared_type64='int' name='gi_running' type64='i'/>
<field declared_type64='PyObject*' name='gi_code' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='gi_weakreflist' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='PyGetSetDef' type64='{PyGetSetDef=&quot;name&quot;*&quot;get&quot;^?&quot;set&quot;^?&quot;doc&quot;*&quot;closure&quot;^v}'>
<field declared_type64='char*' name='name' type64='*'/>
<field declared_type64='getter' function_pointer='true' name='get' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='setter' function_pointer='true' name='set' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='char*' name='doc' type64='*'/>
<field declared_type64='void*' name='closure' type64='^v'/>
</struct>
<struct name='PyGetSetDescrObject' type64='{_PyGetSetDescrObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;d_type&quot;^{_typeobject}&quot;d_name&quot;^{_object}&quot;d_getset&quot;^{PyGetSetDef}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyTypeObject*' name='d_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyObject*' name='d_name' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyGetSetDef*' name='d_getset' type64='^{PyGetSetDef=*^?^?*^v}'/>
</struct>
<struct name='PyHeapTypeObject' type64='{_heaptypeobject=&quot;ht_type&quot;{_typeobject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;ob_size&quot;q&quot;tp_name&quot;*&quot;tp_basicsize&quot;q&quot;tp_itemsize&quot;q&quot;tp_dealloc&quot;^?&quot;tp_print&quot;^?&quot;tp_getattr&quot;^?&quot;tp_setattr&quot;^?&quot;tp_compare&quot;^?&quot;tp_repr&quot;^?&quot;tp_as_number&quot;^{_PyNumberMethods=&quot;nb_add&quot;^?&quot;nb_subtract&quot;^?&quot;nb_multiply&quot;^?&quot;nb_divide&quot;^?&quot;nb_remainder&quot;^?&quot;nb_divmod&quot;^?&quot;nb_power&quot;^?&quot;nb_negative&quot;^?&quot;nb_positive&quot;^?&quot;nb_absolute&quot;^?&quot;nb_nonzero&quot;^?&quot;nb_invert&quot;^?&quot;nb_lshift&quot;^?&quot;nb_rshift&quot;^?&quot;nb_and&quot;^?&quot;nb_xor&quot;^?&quot;nb_or&quot;^?&quot;nb_coerce&quot;^?&quot;nb_int&quot;^?&quot;nb_long&quot;^?&quot;nb_float&quot;^?&quot;nb_oct&quot;^?&quot;nb_hex&quot;^?&quot;nb_inplace_add&quot;^?&quot;nb_inplace_subtract&quot;^?&quot;nb_inplace_multiply&quot;^?&quot;nb_inplace_divide&quot;^?&quot;nb_inplace_remainder&quot;^?&quot;nb_inplace_power&quot;^?&quot;nb_inplace_lshift&quot;^?&quot;nb_inplace_rshift&quot;^?&quot;nb_inplace_and&quot;^?&quot;nb_inplace_xor&quot;^?&quot;nb_inplace_or&quot;^?&quot;nb_floor_divide&quot;^?&quot;nb_true_divide&quot;^?&quot;nb_inplace_floor_divide&quot;^?&quot;nb_inplace_true_divide&quot;^?&quot;nb_index&quot;^?}&quot;tp_as_sequence&quot;^{_PySequenceMethods=&quot;sq_length&quot;^?&quot;sq_concat&quot;^?&quot;sq_repeat&quot;^?&quot;sq_item&quot;^?&quot;sq_slice&quot;^?&quot;sq_ass_item&quot;^?&quot;sq_ass_slice&quot;^?&quot;sq_contains&quot;^?&quot;sq_inplace_concat&quot;^?&quot;sq_inplace_repeat&quot;^?}&quot;tp_as_mapping&quot;^{_PyMappingMethods=&quot;mp_length&quot;^?&quot;mp_subscript&quot;^?&quot;mp_ass_subscript&quot;^?}&quot;tp_hash&quot;^?&quot;tp_call&quot;^?&quot;tp_str&quot;^?&quot;tp_getattro&quot;^?&quot;tp_setattro&quot;^?&quot;tp_as_buffer&quot;^{_PyBufferProcs=&quot;bf_getreadbuffer&quot;^?&quot;bf_getwritebuffer&quot;^?&quot;bf_getsegcount&quot;^?&quot;bf_getcharbuffer&quot;^?&quot;bf_getbuffer&quot;^?&quot;bf_releasebuffer&quot;^?}&quot;tp_flags&quot;q&quot;tp_doc&quot;*&quot;tp_traverse&quot;^?&quot;tp_clear&quot;^?&quot;tp_richcompare&quot;^?&quot;tp_weaklistoffset&quot;q&quot;tp_iter&quot;^?&quot;tp_iternext&quot;^?&quot;tp_methods&quot;^{PyMethodDef}&quot;tp_members&quot;^{PyMemberDef}&quot;tp_getset&quot;^{PyGetSetDef}&quot;tp_base&quot;^{_typeobject}&quot;tp_dict&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;tp_descr_get&quot;^?&quot;tp_descr_set&quot;^?&quot;tp_dictoffset&quot;q&quot;tp_init&quot;^?&quot;tp_alloc&quot;^?&quot;tp_new&quot;^?&quot;tp_free&quot;^?&quot;tp_is_gc&quot;^?&quot;tp_bases&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;tp_mro&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;tp_cache&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;tp_subclasses&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;tp_weaklist&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;tp_del&quot;^?&quot;tp_version_tag&quot;I}&quot;as_number&quot;{_PyNumberMethods=&quot;nb_add&quot;^?&quot;nb_subtract&quot;^?&quot;nb_multiply&quot;^?&quot;nb_divide&quot;^?&quot;nb_remainder&quot;^?&quot;nb_divmod&quot;^?&quot;nb_power&quot;^?&quot;nb_negative&quot;^?&quot;nb_positive&quot;^?&quot;nb_absolute&quot;^?&quot;nb_nonzero&quot;^?&quot;nb_invert&quot;^?&quot;nb_lshift&quot;^?&quot;nb_rshift&quot;^?&quot;nb_and&quot;^?&quot;nb_xor&quot;^?&quot;nb_or&quot;^?&quot;nb_coerce&quot;^?&quot;nb_int&quot;^?&quot;nb_long&quot;^?&quot;nb_float&quot;^?&quot;nb_oct&quot;^?&quot;nb_hex&quot;^?&quot;nb_inplace_add&quot;^?&quot;nb_inplace_subtract&quot;^?&quot;nb_inplace_multiply&quot;^?&quot;nb_inplace_divide&quot;^?&quot;nb_inplace_remainder&quot;^?&quot;nb_inplace_power&quot;^?&quot;nb_inplace_lshift&quot;^?&quot;nb_inplace_rshift&quot;^?&quot;nb_inplace_and&quot;^?&quot;nb_inplace_xor&quot;^?&quot;nb_inplace_or&quot;^?&quot;nb_floor_divide&quot;^?&quot;nb_true_divide&quot;^?&quot;nb_inplace_floor_divide&quot;^?&quot;nb_inplace_true_divide&quot;^?&quot;nb_index&quot;^?}&quot;as_mapping&quot;{_PyMappingMethods=&quot;mp_length&quot;^?&quot;mp_subscript&quot;^?&quot;mp_ass_subscript&quot;^?}&quot;as_sequence&quot;{_PySequenceMethods=&quot;sq_length&quot;^?&quot;sq_concat&quot;^?&quot;sq_repeat&quot;^?&quot;sq_item&quot;^?&quot;sq_slice&quot;^?&quot;sq_ass_item&quot;^?&quot;sq_ass_slice&quot;^?&quot;sq_contains&quot;^?&quot;sq_inplace_concat&quot;^?&quot;sq_inplace_repeat&quot;^?}&quot;as_buffer&quot;{_PyBufferProcs=&quot;bf_getreadbuffer&quot;^?&quot;bf_getwritebuffer&quot;^?&quot;bf_getsegcount&quot;^?&quot;bf_getcharbuffer&quot;^?&quot;bf_getbuffer&quot;^?&quot;bf_releasebuffer&quot;^?}&quot;ht_name&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;ht_slots&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}}'>
<field declared_type64='PyTypeObject' name='ht_type' type64='{_typeobject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;ob_size&quot;q&quot;tp_name&quot;*&quot;tp_basicsize&quot;q&quot;tp_itemsize&quot;q&quot;tp_dealloc&quot;^?&quot;tp_print&quot;^?&quot;tp_getattr&quot;^?&quot;tp_setattr&quot;^?&quot;tp_compare&quot;^?&quot;tp_repr&quot;^?&quot;tp_as_number&quot;^{_PyNumberMethods=&quot;nb_add&quot;^?&quot;nb_subtract&quot;^?&quot;nb_multiply&quot;^?&quot;nb_divide&quot;^?&quot;nb_remainder&quot;^?&quot;nb_divmod&quot;^?&quot;nb_power&quot;^?&quot;nb_negative&quot;^?&quot;nb_positive&quot;^?&quot;nb_absolute&quot;^?&quot;nb_nonzero&quot;^?&quot;nb_invert&quot;^?&quot;nb_lshift&quot;^?&quot;nb_rshift&quot;^?&quot;nb_and&quot;^?&quot;nb_xor&quot;^?&quot;nb_or&quot;^?&quot;nb_coerce&quot;^?&quot;nb_int&quot;^?&quot;nb_long&quot;^?&quot;nb_float&quot;^?&quot;nb_oct&quot;^?&quot;nb_hex&quot;^?&quot;nb_inplace_add&quot;^?&quot;nb_inplace_subtract&quot;^?&quot;nb_inplace_multiply&quot;^?&quot;nb_inplace_divide&quot;^?&quot;nb_inplace_remainder&quot;^?&quot;nb_inplace_power&quot;^?&quot;nb_inplace_lshift&quot;^?&quot;nb_inplace_rshift&quot;^?&quot;nb_inplace_and&quot;^?&quot;nb_inplace_xor&quot;^?&quot;nb_inplace_or&quot;^?&quot;nb_floor_divide&quot;^?&quot;nb_true_divide&quot;^?&quot;nb_inplace_floor_divide&quot;^?&quot;nb_inplace_true_divide&quot;^?&quot;nb_index&quot;^?}&quot;tp_as_sequence&quot;^{_PySequenceMethods=&quot;sq_length&quot;^?&quot;sq_concat&quot;^?&quot;sq_repeat&quot;^?&quot;sq_item&quot;^?&quot;sq_slice&quot;^?&quot;sq_ass_item&quot;^?&quot;sq_ass_slice&quot;^?&quot;sq_contains&quot;^?&quot;sq_inplace_concat&quot;^?&quot;sq_inplace_repeat&quot;^?}&quot;tp_as_mapping&quot;^{_PyMappingMethods=&quot;mp_length&quot;^?&quot;mp_subscript&quot;^?&quot;mp_ass_subscript&quot;^?}&quot;tp_hash&quot;^?&quot;tp_call&quot;^?&quot;tp_str&quot;^?&quot;tp_getattro&quot;^?&quot;tp_setattro&quot;^?&quot;tp_as_buffer&quot;^{_PyBufferProcs=&quot;bf_getreadbuffer&quot;^?&quot;bf_getwritebuffer&quot;^?&quot;bf_getsegcount&quot;^?&quot;bf_getcharbuffer&quot;^?&quot;bf_getbuffer&quot;^?&quot;bf_releasebuffer&quot;^?}&quot;tp_flags&quot;q&quot;tp_doc&quot;*&quot;tp_traverse&quot;^?&quot;tp_clear&quot;^?&quot;tp_richcompare&quot;^?&quot;tp_weaklistoffset&quot;q&quot;tp_iter&quot;^?&quot;tp_iternext&quot;^?&quot;tp_methods&quot;^{PyMethodDef}&quot;tp_members&quot;^{PyMemberDef}&quot;tp_getset&quot;^{PyGetSetDef}&quot;tp_base&quot;^{_typeobject}&quot;tp_dict&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;tp_descr_get&quot;^?&quot;tp_descr_set&quot;^?&quot;tp_dictoffset&quot;q&quot;tp_init&quot;^?&quot;tp_alloc&quot;^?&quot;tp_new&quot;^?&quot;tp_free&quot;^?&quot;tp_is_gc&quot;^?&quot;tp_bases&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;tp_mro&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;tp_cache&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;tp_subclasses&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;tp_weaklist&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;tp_del&quot;^?&quot;tp_version_tag&quot;I}'/>
<field declared_type64='PyNumberMethods' name='as_number' type64='{_PyNumberMethods=&quot;nb_add&quot;^?&quot;nb_subtract&quot;^?&quot;nb_multiply&quot;^?&quot;nb_divide&quot;^?&quot;nb_remainder&quot;^?&quot;nb_divmod&quot;^?&quot;nb_power&quot;^?&quot;nb_negative&quot;^?&quot;nb_positive&quot;^?&quot;nb_absolute&quot;^?&quot;nb_nonzero&quot;^?&quot;nb_invert&quot;^?&quot;nb_lshift&quot;^?&quot;nb_rshift&quot;^?&quot;nb_and&quot;^?&quot;nb_xor&quot;^?&quot;nb_or&quot;^?&quot;nb_coerce&quot;^?&quot;nb_int&quot;^?&quot;nb_long&quot;^?&quot;nb_float&quot;^?&quot;nb_oct&quot;^?&quot;nb_hex&quot;^?&quot;nb_inplace_add&quot;^?&quot;nb_inplace_subtract&quot;^?&quot;nb_inplace_multiply&quot;^?&quot;nb_inplace_divide&quot;^?&quot;nb_inplace_remainder&quot;^?&quot;nb_inplace_power&quot;^?&quot;nb_inplace_lshift&quot;^?&quot;nb_inplace_rshift&quot;^?&quot;nb_inplace_and&quot;^?&quot;nb_inplace_xor&quot;^?&quot;nb_inplace_or&quot;^?&quot;nb_floor_divide&quot;^?&quot;nb_true_divide&quot;^?&quot;nb_inplace_floor_divide&quot;^?&quot;nb_inplace_true_divide&quot;^?&quot;nb_index&quot;^?}'/>
<field declared_type64='PyMappingMethods' name='as_mapping' type64='{_PyMappingMethods=&quot;mp_length&quot;^?&quot;mp_subscript&quot;^?&quot;mp_ass_subscript&quot;^?}'/>
<field declared_type64='PySequenceMethods' name='as_sequence' type64='{_PySequenceMethods=&quot;sq_length&quot;^?&quot;sq_concat&quot;^?&quot;sq_repeat&quot;^?&quot;sq_item&quot;^?&quot;sq_slice&quot;^?&quot;sq_ass_item&quot;^?&quot;sq_ass_slice&quot;^?&quot;sq_contains&quot;^?&quot;sq_inplace_concat&quot;^?&quot;sq_inplace_repeat&quot;^?}'/>
<field declared_type64='PyBufferProcs' name='as_buffer' type64='{_PyBufferProcs=&quot;bf_getreadbuffer&quot;^?&quot;bf_getwritebuffer&quot;^?&quot;bf_getsegcount&quot;^?&quot;bf_getcharbuffer&quot;^?&quot;bf_getbuffer&quot;^?&quot;bf_releasebuffer&quot;^?}'/>
<field declared_type64='PyObject*' name='ht_name' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
<field declared_type64='PyObject*' name='ht_slots' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
</struct>
<struct name='PyInstanceObject' type64='{_PyInstanceObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;in_class&quot;^{_PyClassObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;cl_bases&quot;^{_object}&quot;cl_dict&quot;^{_object}&quot;cl_name&quot;^{_object}&quot;cl_getattr&quot;^{_object}&quot;cl_setattr&quot;^{_object}&quot;cl_delattr&quot;^{_object}&quot;cl_weakreflist&quot;^{_object}}&quot;in_dict&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;in_weakreflist&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyClassObject*' name='in_class' type64='^{_PyClassObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;cl_bases&quot;^{_object}&quot;cl_dict&quot;^{_object}&quot;cl_name&quot;^{_object}&quot;cl_getattr&quot;^{_object}&quot;cl_setattr&quot;^{_object}&quot;cl_delattr&quot;^{_object}&quot;cl_weakreflist&quot;^{_object}}'/>
<field declared_type64='PyObject*' name='in_dict' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
<field declared_type64='PyObject*' name='in_weakreflist' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
</struct>
<struct name='PyIntObject' type64='{_PyIntObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;ob_ival&quot;q}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='long' name='ob_ival' type64='q'/>
</struct>
<struct name='PyInterpreterState' type64='{_is=&quot;next&quot;^{_is}&quot;tstate_head&quot;^{_ts}&quot;modules&quot;^{_object}&quot;sysdict&quot;^{_object}&quot;builtins&quot;^{_object}&quot;modules_reloading&quot;^{_object}&quot;codec_search_path&quot;^{_object}&quot;codec_search_cache&quot;^{_object}&quot;codec_error_registry&quot;^{_object}&quot;dlopenflags&quot;i}'>
<field declared_type64='struct _is*' name='next' type64='^{_is=^{_is}^{_ts}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i}'/>
<field declared_type64='struct _ts*' name='tstate_head' type64='^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}'/>
<field declared_type64='PyObject*' name='modules' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='sysdict' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='builtins' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='modules_reloading' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='codec_search_path' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='codec_search_cache' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='codec_error_registry' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='int' name='dlopenflags' type64='i'/>
</struct>
<struct name='PyListObject' type64='{_PyListObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;ob_size&quot;q&quot;ob_item&quot;^^{_object}&quot;allocated&quot;q}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='Py_ssize_t' name='ob_size' type64='q'/>
<field declared_type64='PyObject**' name='ob_item' type64='^^{_object}'/>
<field declared_type64='Py_ssize_t' name='allocated' type64='q'/>
</struct>
<struct name='PyLongObject' type64='{_longobject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;ob_size&quot;q&quot;ob_digit&quot;[1I]}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='Py_ssize_t' name='ob_size' type64='q'/>
<field declared_type64='digit*' name='ob_digit' type64='[1I]'/>
</struct>
<struct name='PyMappingMethods' type64='{_PyMappingMethods=&quot;mp_length&quot;^?&quot;mp_subscript&quot;^?&quot;mp_ass_subscript&quot;^?}'>
<field declared_type64='lenfunc' function_pointer='true' name='mp_length' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='mp_subscript' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='objobjargproc' function_pointer='true' name='mp_ass_subscript' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</field>
</struct>
<struct name='PyMemberDef' type64='{PyMemberDef=&quot;name&quot;*&quot;type&quot;i&quot;offset&quot;q&quot;flags&quot;i&quot;doc&quot;*}'>
<field declared_type64='char*' name='name' type64='*'/>
<field declared_type64='int' name='type' type64='i'/>
<field declared_type64='Py_ssize_t' name='offset' type64='q'/>
<field declared_type64='int' name='flags' type64='i'/>
<field declared_type64='char*' name='doc' type64='*'/>
</struct>
<struct name='PyMemberDescrObject' type64='{_PyMemberDescrObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;d_type&quot;^{_typeobject}&quot;d_name&quot;^{_object}&quot;d_member&quot;^{PyMemberDef}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyTypeObject*' name='d_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyObject*' name='d_name' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='struct PyMemberDef*' name='d_member' type64='^{PyMemberDef=*iqi*}'/>
</struct>
<struct name='PyMemoryViewObject' type64='{_PyMemoryViewObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;base&quot;^{_object}&quot;view&quot;{bufferinfo=&quot;buf&quot;^v&quot;obj&quot;^{_object}&quot;len&quot;q&quot;itemsize&quot;q&quot;readonly&quot;i&quot;ndim&quot;i&quot;format&quot;*&quot;shape&quot;^q&quot;strides&quot;^q&quot;suboffsets&quot;^q&quot;smalltable&quot;[2q]&quot;internal&quot;^v}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyObject*' name='base' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='Py_buffer' name='view' type64='{bufferinfo=&quot;buf&quot;^v&quot;obj&quot;^{_object}&quot;len&quot;q&quot;itemsize&quot;q&quot;readonly&quot;i&quot;ndim&quot;i&quot;format&quot;*&quot;shape&quot;^q&quot;strides&quot;^q&quot;suboffsets&quot;^q&quot;smalltable&quot;[2q]&quot;internal&quot;^v}'/>
</struct>
<struct name='PyMethodChain' type64='{PyMethodChain=&quot;methods&quot;^{PyMethodDef}&quot;link&quot;^{PyMethodChain}}'>
<field declared_type64='PyMethodDef*' name='methods' type64='^{PyMethodDef=*^?i*}'/>
<field declared_type64='struct PyMethodChain*' name='link' type64='^{PyMethodChain=^{PyMethodDef}^{PyMethodChain}}'/>
</struct>
<struct name='PyMethodDef' type64='{PyMethodDef=&quot;ml_name&quot;*&quot;ml_meth&quot;^?&quot;ml_flags&quot;i&quot;ml_doc&quot;*}'>
<field const='true' declared_type64='char*' name='ml_name' type64='*'/>
<field declared_type64='PyCFunction' function_pointer='true' name='ml_meth' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='int' name='ml_flags' type64='i'/>
<field const='true' declared_type64='char*' name='ml_doc' type64='*'/>
</struct>
<struct name='PyMethodDescrObject' type64='{_PyMethodDescrObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;d_type&quot;^{_typeobject}&quot;d_name&quot;^{_object}&quot;d_method&quot;^{PyMethodDef}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyTypeObject*' name='d_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyObject*' name='d_name' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyMethodDef*' name='d_method' type64='^{PyMethodDef=*^?i*}'/>
</struct>
<struct name='PyMethodObject' type64='{_PyMethodObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;im_func&quot;^{_object}&quot;im_self&quot;^{_object}&quot;im_class&quot;^{_object}&quot;im_weakreflist&quot;^{_object}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyObject*' name='im_func' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='im_self' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='im_class' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='im_weakreflist' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='PyNumberMethods' type64='{_PyNumberMethods=&quot;nb_add&quot;^?&quot;nb_subtract&quot;^?&quot;nb_multiply&quot;^?&quot;nb_divide&quot;^?&quot;nb_remainder&quot;^?&quot;nb_divmod&quot;^?&quot;nb_power&quot;^?&quot;nb_negative&quot;^?&quot;nb_positive&quot;^?&quot;nb_absolute&quot;^?&quot;nb_nonzero&quot;^?&quot;nb_invert&quot;^?&quot;nb_lshift&quot;^?&quot;nb_rshift&quot;^?&quot;nb_and&quot;^?&quot;nb_xor&quot;^?&quot;nb_or&quot;^?&quot;nb_coerce&quot;^?&quot;nb_int&quot;^?&quot;nb_long&quot;^?&quot;nb_float&quot;^?&quot;nb_oct&quot;^?&quot;nb_hex&quot;^?&quot;nb_inplace_add&quot;^?&quot;nb_inplace_subtract&quot;^?&quot;nb_inplace_multiply&quot;^?&quot;nb_inplace_divide&quot;^?&quot;nb_inplace_remainder&quot;^?&quot;nb_inplace_power&quot;^?&quot;nb_inplace_lshift&quot;^?&quot;nb_inplace_rshift&quot;^?&quot;nb_inplace_and&quot;^?&quot;nb_inplace_xor&quot;^?&quot;nb_inplace_or&quot;^?&quot;nb_floor_divide&quot;^?&quot;nb_true_divide&quot;^?&quot;nb_inplace_floor_divide&quot;^?&quot;nb_inplace_true_divide&quot;^?&quot;nb_index&quot;^?}'>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_add' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_subtract' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_multiply' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_divide' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_remainder' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_divmod' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='ternaryfunc' function_pointer='true' name='nb_power' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='unaryfunc' function_pointer='true' name='nb_negative' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='unaryfunc' function_pointer='true' name='nb_positive' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='unaryfunc' function_pointer='true' name='nb_absolute' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='inquiry' function_pointer='true' name='nb_nonzero' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='unaryfunc' function_pointer='true' name='nb_invert' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_lshift' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_rshift' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_and' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_xor' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_or' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='coercion' function_pointer='true' name='nb_coerce' type64='^?'>
<arg declared_type64='PyObject**' type64='^^{_object}'/>
<arg declared_type64='PyObject**' type64='^^{_object}'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='unaryfunc' function_pointer='true' name='nb_int' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='unaryfunc' function_pointer='true' name='nb_long' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='unaryfunc' function_pointer='true' name='nb_float' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='unaryfunc' function_pointer='true' name='nb_oct' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='unaryfunc' function_pointer='true' name='nb_hex' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_inplace_add' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_inplace_subtract' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_inplace_multiply' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_inplace_divide' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_inplace_remainder' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='ternaryfunc' function_pointer='true' name='nb_inplace_power' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_inplace_lshift' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_inplace_rshift' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_inplace_and' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_inplace_xor' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_inplace_or' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_floor_divide' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_true_divide' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_inplace_floor_divide' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='nb_inplace_true_divide' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='unaryfunc' function_pointer='true' name='nb_index' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
</struct>
<struct name='PyObject' type64='{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
</struct>
<struct name='PySTEntryObject' type64='{_symtable_entry=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;ste_id&quot;^{_object}&quot;ste_symbols&quot;^{_object}&quot;ste_name&quot;^{_object}&quot;ste_varnames&quot;^{_object}&quot;ste_children&quot;^{_object}&quot;ste_type&quot;i&quot;ste_unoptimized&quot;i&quot;ste_nested&quot;i&quot;ste_free&quot;b1&quot;ste_child_free&quot;b1&quot;ste_generator&quot;b1&quot;ste_varargs&quot;b1&quot;ste_varkeywords&quot;b1&quot;ste_returns_value&quot;b1&quot;ste_lineno&quot;i&quot;ste_opt_lineno&quot;i&quot;ste_tmpname&quot;i&quot;ste_table&quot;^{symtable}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyObject*' name='ste_id' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='ste_symbols' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='ste_name' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='ste_varnames' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='ste_children' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='_Py_block_ty' name='ste_type' type64='i'/>
<field declared_type64='int' name='ste_unoptimized' type64='i'/>
<field declared_type64='int' name='ste_nested' type64='i'/>
<field declared_type64='unsigned int' name='ste_free' type64='b1'/>
<field declared_type64='unsigned int' name='ste_child_free' type64='b1'/>
<field declared_type64='unsigned int' name='ste_generator' type64='b1'/>
<field declared_type64='unsigned int' name='ste_varargs' type64='b1'/>
<field declared_type64='unsigned int' name='ste_varkeywords' type64='b1'/>
<field declared_type64='unsigned int' name='ste_returns_value' type64='b1'/>
<field declared_type64='int' name='ste_lineno' type64='i'/>
<field declared_type64='int' name='ste_opt_lineno' type64='i'/>
<field declared_type64='int' name='ste_tmpname' type64='i'/>
<field declared_type64='struct symtable*' name='ste_table' type64='^{symtable=*^{_symtable_entry}^{_symtable_entry}^{_object}^{_object}^{_object}i^{_object}^{?}}'/>
</struct>
<struct name='PySequenceMethods' type64='{_PySequenceMethods=&quot;sq_length&quot;^?&quot;sq_concat&quot;^?&quot;sq_repeat&quot;^?&quot;sq_item&quot;^?&quot;sq_slice&quot;^?&quot;sq_ass_item&quot;^?&quot;sq_ass_slice&quot;^?&quot;sq_contains&quot;^?&quot;sq_inplace_concat&quot;^?&quot;sq_inplace_repeat&quot;^?}'>
<field declared_type64='lenfunc' function_pointer='true' name='sq_length' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='sq_concat' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='ssizeargfunc' function_pointer='true' name='sq_repeat' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='ssizeargfunc' function_pointer='true' name='sq_item' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='ssizessizeargfunc' function_pointer='true' name='sq_slice' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='ssizeobjargproc' function_pointer='true' name='sq_ass_item' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='ssizessizeobjargproc' function_pointer='true' name='sq_ass_slice' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='objobjproc' function_pointer='true' name='sq_contains' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='binaryfunc' function_pointer='true' name='sq_inplace_concat' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='ssizeargfunc' function_pointer='true' name='sq_inplace_repeat' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
</struct>
<struct name='PySetObject' type64='{_setobject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;fill&quot;q&quot;used&quot;q&quot;mask&quot;q&quot;table&quot;^{_setentry=&quot;hash&quot;q&quot;key&quot;^{_object}}&quot;lookup&quot;^?&quot;smalltable&quot;[8{_setentry=&quot;hash&quot;q&quot;key&quot;^{_object}}]&quot;hash&quot;q&quot;weakreflist&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='Py_ssize_t' name='fill' type64='q'/>
<field declared_type64='Py_ssize_t' name='used' type64='q'/>
<field declared_type64='Py_ssize_t' name='mask' type64='q'/>
<field declared_type64='setentry*' name='table' type64='^{_setentry=&quot;hash&quot;q&quot;key&quot;^{_object}}'/>
<field declared_type64='setentry *(*)(PySetObject *, PyObject *, long)' function_pointer='true' name='lookup' type64='^?'>
<arg declared_type64='PySetObject*' type64='^{_setobject=q^{_typeobject}qqq^{_setentry=q^{_object}}^?[8{_setentry=q^{_object}}]q^{_object=q^{_typeobject}}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='long' type64='q'/>
<retval declared_type64='setentry*' type64='^{_setentry=q^{_object}}'/>
</field>
<field declared_type64='setentry*' name='smalltable' type64='[8{_setentry=&quot;hash&quot;q&quot;key&quot;^{_object}}'/>
<field declared_type64='long' name='hash' type64='q'/>
<field declared_type64='PyObject*' name='weakreflist' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
</struct>
<struct name='PySliceObject' type64='{_PySliceObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;start&quot;^{_object}&quot;stop&quot;^{_object}&quot;step&quot;^{_object}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyObject*' name='start' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='stop' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='step' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='PyStringObject' type64='{_PyStringObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;ob_size&quot;q&quot;ob_shash&quot;q&quot;ob_sstate&quot;i&quot;ob_sval&quot;[1c]}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='Py_ssize_t' name='ob_size' type64='q'/>
<field declared_type64='long' name='ob_shash' type64='q'/>
<field declared_type64='int' name='ob_sstate' type64='i'/>
<field declared_type64='char*' name='ob_sval' type64='[1c]'/>
</struct>
<struct name='PyStructSequence' type64='{_PyStructSequence=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;ob_size&quot;q&quot;ob_item&quot;[1^{_object}]}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='Py_ssize_t' name='ob_size' type64='q'/>
<field declared_type64='PyObject**' name='ob_item' type64='[1^{_object}]'/>
</struct>
<struct name='PyStructSequence_Desc' type64='{PyStructSequence_Desc=&quot;name&quot;*&quot;doc&quot;*&quot;fields&quot;^{PyStructSequence_Field}&quot;n_in_sequence&quot;i}'>
<field declared_type64='char*' name='name' type64='*'/>
<field declared_type64='char*' name='doc' type64='*'/>
<field declared_type64='struct PyStructSequence_Field*' name='fields' type64='^{PyStructSequence_Field=**}'/>
<field declared_type64='int' name='n_in_sequence' type64='i'/>
</struct>
<struct name='PyStructSequence_Field' type64='{PyStructSequence_Field=&quot;name&quot;*&quot;doc&quot;*}'>
<field declared_type64='char*' name='name' type64='*'/>
<field declared_type64='char*' name='doc' type64='*'/>
</struct>
<struct name='PySyntaxErrorObject' type64='{_PySyntaxErrorObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;dict&quot;^{_object}&quot;args&quot;^{_object}&quot;message&quot;^{_object}&quot;msg&quot;^{_object}&quot;filename&quot;^{_object}&quot;lineno&quot;^{_object}&quot;offset&quot;^{_object}&quot;text&quot;^{_object}&quot;print_file_and_line&quot;^{_object}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyObject*' name='dict' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='args' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='message' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='msg' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='filename' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='lineno' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='offset' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='text' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='print_file_and_line' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='PySystemExitObject' type64='{_PySystemExitObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;dict&quot;^{_object}&quot;args&quot;^{_object}&quot;message&quot;^{_object}&quot;code&quot;^{_object}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyObject*' name='dict' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='args' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='message' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='code' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='PyThreadState' type64='{_ts=&quot;next&quot;^{_ts}&quot;interp&quot;^{_is}&quot;frame&quot;^{_frame}&quot;recursion_depth&quot;i&quot;tracing&quot;i&quot;use_tracing&quot;i&quot;c_profilefunc&quot;^?&quot;c_tracefunc&quot;^?&quot;c_profileobj&quot;^{_object}&quot;c_traceobj&quot;^{_object}&quot;curexc_type&quot;^{_object}&quot;curexc_value&quot;^{_object}&quot;curexc_traceback&quot;^{_object}&quot;exc_type&quot;^{_object}&quot;exc_value&quot;^{_object}&quot;exc_traceback&quot;^{_object}&quot;dict&quot;^{_object}&quot;tick_counter&quot;i&quot;gilstate_counter&quot;i&quot;async_exc&quot;^{_object}&quot;thread_id&quot;q&quot;trash_delete_nesting&quot;i&quot;trash_delete_later&quot;^{_object}}'>
<field declared_type64='struct _ts*' name='next' type64='^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}'/>
<field declared_type64='PyInterpreterState*' name='interp' type64='^{_is=^{_is}^{_ts}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i}'/>
<field declared_type64='struct _frame*' name='frame' type64='^{_frame=q^{_typeobject}q^{_frame}^{?}^{_object}^{_object}^{_object}^^{_object}^^{_object}^{_object}^{_object}^{_object}^{_object}^{_ts}iii[20{?=iii}][1^{_object}]}'/>
<field declared_type64='int' name='recursion_depth' type64='i'/>
<field declared_type64='int' name='tracing' type64='i'/>
<field declared_type64='int' name='use_tracing' type64='i'/>
<field declared_type64='Py_tracefunc' function_pointer='true' name='c_profilefunc' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='struct _frame*' type64='^{_frame=q^{_typeobject}q^{_frame}^{?}^{_object}^{_object}^{_object}^^{_object}^^{_object}^{_object}^{_object}^{_object}^{_object}^{_ts}iii[20{?=iii}][1^{_object}]}'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='Py_tracefunc' function_pointer='true' name='c_tracefunc' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='struct _frame*' type64='^{_frame=q^{_typeobject}q^{_frame}^{?}^{_object}^{_object}^{_object}^^{_object}^^{_object}^{_object}^{_object}^{_object}^{_object}^{_ts}iii[20{?=iii}][1^{_object}]}'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='PyObject*' name='c_profileobj' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='c_traceobj' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='curexc_type' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='curexc_value' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='curexc_traceback' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='exc_type' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='exc_value' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='exc_traceback' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='dict' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='int' name='tick_counter' type64='i'/>
<field declared_type64='int' name='gilstate_counter' type64='i'/>
<field declared_type64='PyObject*' name='async_exc' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='long' name='thread_id' type64='q'/>
<field declared_type64='int' name='trash_delete_nesting' type64='i'/>
<field declared_type64='PyObject*' name='trash_delete_later' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='PyTracebackObject' type64='{_traceback=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;tb_next&quot;^{_traceback}&quot;tb_frame&quot;^{_frame}&quot;tb_lasti&quot;i&quot;tb_lineno&quot;i}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='struct _traceback*' name='tb_next' type64='^{_traceback=q^{_typeobject}^{_traceback}^{_frame}ii}'/>
<field declared_type64='struct _frame*' name='tb_frame' type64='^{_frame=q^{_typeobject}q^{_frame}^{?}^{_object}^{_object}^{_object}^^{_object}^^{_object}^{_object}^{_object}^{_object}^{_object}^{_ts}iii[20{?=iii}][1^{_object}]}'/>
<field declared_type64='int' name='tb_lasti' type64='i'/>
<field declared_type64='int' name='tb_lineno' type64='i'/>
</struct>
<struct name='PyTryBlock' type64='{_PyTryBlock=&quot;b_type&quot;i&quot;b_handler&quot;i&quot;b_level&quot;i}'>
<field declared_type64='int' name='b_type' type64='i'/>
<field declared_type64='int' name='b_handler' type64='i'/>
<field declared_type64='int' name='b_level' type64='i'/>
</struct>
<struct name='PyTupleObject' type64='{_PyTupleObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;ob_size&quot;q&quot;ob_item&quot;[1^{_object}]}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='Py_ssize_t' name='ob_size' type64='q'/>
<field declared_type64='PyObject**' name='ob_item' type64='[1^{_object}]'/>
</struct>
<struct name='PyTypeObject' type64='{_typeobject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;ob_size&quot;q&quot;tp_name&quot;*&quot;tp_basicsize&quot;q&quot;tp_itemsize&quot;q&quot;tp_dealloc&quot;^?&quot;tp_print&quot;^?&quot;tp_getattr&quot;^?&quot;tp_setattr&quot;^?&quot;tp_compare&quot;^?&quot;tp_repr&quot;^?&quot;tp_as_number&quot;^{_PyNumberMethods=&quot;nb_add&quot;^?&quot;nb_subtract&quot;^?&quot;nb_multiply&quot;^?&quot;nb_divide&quot;^?&quot;nb_remainder&quot;^?&quot;nb_divmod&quot;^?&quot;nb_power&quot;^?&quot;nb_negative&quot;^?&quot;nb_positive&quot;^?&quot;nb_absolute&quot;^?&quot;nb_nonzero&quot;^?&quot;nb_invert&quot;^?&quot;nb_lshift&quot;^?&quot;nb_rshift&quot;^?&quot;nb_and&quot;^?&quot;nb_xor&quot;^?&quot;nb_or&quot;^?&quot;nb_coerce&quot;^?&quot;nb_int&quot;^?&quot;nb_long&quot;^?&quot;nb_float&quot;^?&quot;nb_oct&quot;^?&quot;nb_hex&quot;^?&quot;nb_inplace_add&quot;^?&quot;nb_inplace_subtract&quot;^?&quot;nb_inplace_multiply&quot;^?&quot;nb_inplace_divide&quot;^?&quot;nb_inplace_remainder&quot;^?&quot;nb_inplace_power&quot;^?&quot;nb_inplace_lshift&quot;^?&quot;nb_inplace_rshift&quot;^?&quot;nb_inplace_and&quot;^?&quot;nb_inplace_xor&quot;^?&quot;nb_inplace_or&quot;^?&quot;nb_floor_divide&quot;^?&quot;nb_true_divide&quot;^?&quot;nb_inplace_floor_divide&quot;^?&quot;nb_inplace_true_divide&quot;^?&quot;nb_index&quot;^?}&quot;tp_as_sequence&quot;^{_PySequenceMethods=&quot;sq_length&quot;^?&quot;sq_concat&quot;^?&quot;sq_repeat&quot;^?&quot;sq_item&quot;^?&quot;sq_slice&quot;^?&quot;sq_ass_item&quot;^?&quot;sq_ass_slice&quot;^?&quot;sq_contains&quot;^?&quot;sq_inplace_concat&quot;^?&quot;sq_inplace_repeat&quot;^?}&quot;tp_as_mapping&quot;^{_PyMappingMethods=&quot;mp_length&quot;^?&quot;mp_subscript&quot;^?&quot;mp_ass_subscript&quot;^?}&quot;tp_hash&quot;^?&quot;tp_call&quot;^?&quot;tp_str&quot;^?&quot;tp_getattro&quot;^?&quot;tp_setattro&quot;^?&quot;tp_as_buffer&quot;^{_PyBufferProcs=&quot;bf_getreadbuffer&quot;^?&quot;bf_getwritebuffer&quot;^?&quot;bf_getsegcount&quot;^?&quot;bf_getcharbuffer&quot;^?&quot;bf_getbuffer&quot;^?&quot;bf_releasebuffer&quot;^?}&quot;tp_flags&quot;q&quot;tp_doc&quot;*&quot;tp_traverse&quot;^?&quot;tp_clear&quot;^?&quot;tp_richcompare&quot;^?&quot;tp_weaklistoffset&quot;q&quot;tp_iter&quot;^?&quot;tp_iternext&quot;^?&quot;tp_methods&quot;^{PyMethodDef}&quot;tp_members&quot;^{PyMemberDef}&quot;tp_getset&quot;^{PyGetSetDef}&quot;tp_base&quot;^{_typeobject}&quot;tp_dict&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;tp_descr_get&quot;^?&quot;tp_descr_set&quot;^?&quot;tp_dictoffset&quot;q&quot;tp_init&quot;^?&quot;tp_alloc&quot;^?&quot;tp_new&quot;^?&quot;tp_free&quot;^?&quot;tp_is_gc&quot;^?&quot;tp_bases&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;tp_mro&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;tp_cache&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;tp_subclasses&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;tp_weaklist&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;tp_del&quot;^?&quot;tp_version_tag&quot;I}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='Py_ssize_t' name='ob_size' type64='q'/>
<field const='true' declared_type64='char*' name='tp_name' type64='*'/>
<field declared_type64='Py_ssize_t' name='tp_basicsize' type64='q'/>
<field declared_type64='Py_ssize_t' name='tp_itemsize' type64='q'/>
<field declared_type64='destructor' function_pointer='true' name='tp_dealloc' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='printfunc' function_pointer='true' name='tp_print' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='getattrfunc' function_pointer='true' name='tp_getattr' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='setattrfunc' function_pointer='true' name='tp_setattr' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='cmpfunc' function_pointer='true' name='tp_compare' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='reprfunc' function_pointer='true' name='tp_repr' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='PyNumberMethods*' name='tp_as_number' type64='^{_PyNumberMethods=&quot;nb_add&quot;^?&quot;nb_subtract&quot;^?&quot;nb_multiply&quot;^?&quot;nb_divide&quot;^?&quot;nb_remainder&quot;^?&quot;nb_divmod&quot;^?&quot;nb_power&quot;^?&quot;nb_negative&quot;^?&quot;nb_positive&quot;^?&quot;nb_absolute&quot;^?&quot;nb_nonzero&quot;^?&quot;nb_invert&quot;^?&quot;nb_lshift&quot;^?&quot;nb_rshift&quot;^?&quot;nb_and&quot;^?&quot;nb_xor&quot;^?&quot;nb_or&quot;^?&quot;nb_coerce&quot;^?&quot;nb_int&quot;^?&quot;nb_long&quot;^?&quot;nb_float&quot;^?&quot;nb_oct&quot;^?&quot;nb_hex&quot;^?&quot;nb_inplace_add&quot;^?&quot;nb_inplace_subtract&quot;^?&quot;nb_inplace_multiply&quot;^?&quot;nb_inplace_divide&quot;^?&quot;nb_inplace_remainder&quot;^?&quot;nb_inplace_power&quot;^?&quot;nb_inplace_lshift&quot;^?&quot;nb_inplace_rshift&quot;^?&quot;nb_inplace_and&quot;^?&quot;nb_inplace_xor&quot;^?&quot;nb_inplace_or&quot;^?&quot;nb_floor_divide&quot;^?&quot;nb_true_divide&quot;^?&quot;nb_inplace_floor_divide&quot;^?&quot;nb_inplace_true_divide&quot;^?&quot;nb_index&quot;^?}'/>
<field declared_type64='PySequenceMethods*' name='tp_as_sequence' type64='^{_PySequenceMethods=&quot;sq_length&quot;^?&quot;sq_concat&quot;^?&quot;sq_repeat&quot;^?&quot;sq_item&quot;^?&quot;sq_slice&quot;^?&quot;sq_ass_item&quot;^?&quot;sq_ass_slice&quot;^?&quot;sq_contains&quot;^?&quot;sq_inplace_concat&quot;^?&quot;sq_inplace_repeat&quot;^?}'/>
<field declared_type64='PyMappingMethods*' name='tp_as_mapping' type64='^{_PyMappingMethods=&quot;mp_length&quot;^?&quot;mp_subscript&quot;^?&quot;mp_ass_subscript&quot;^?}'/>
<field declared_type64='hashfunc' function_pointer='true' name='tp_hash' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='long' type64='q'/>
</field>
<field declared_type64='ternaryfunc' function_pointer='true' name='tp_call' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='reprfunc' function_pointer='true' name='tp_str' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='getattrofunc' function_pointer='true' name='tp_getattro' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='setattrofunc' function_pointer='true' name='tp_setattro' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='PyBufferProcs*' name='tp_as_buffer' type64='^{_PyBufferProcs=&quot;bf_getreadbuffer&quot;^?&quot;bf_getwritebuffer&quot;^?&quot;bf_getsegcount&quot;^?&quot;bf_getcharbuffer&quot;^?&quot;bf_getbuffer&quot;^?&quot;bf_releasebuffer&quot;^?}'/>
<field declared_type64='long' name='tp_flags' type64='q'/>
<field const='true' declared_type64='char*' name='tp_doc' type64='*'/>
<field declared_type64='traverseproc' function_pointer='true' name='tp_traverse' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='visitproc' function_pointer='true' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='int' type64='i'/>
</arg>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='inquiry' function_pointer='true' name='tp_clear' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='richcmpfunc' function_pointer='true' name='tp_richcompare' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='Py_ssize_t' name='tp_weaklistoffset' type64='q'/>
<field declared_type64='getiterfunc' function_pointer='true' name='tp_iter' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='iternextfunc' function_pointer='true' name='tp_iternext' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='struct PyMethodDef*' name='tp_methods' type64='^{PyMethodDef=*^?i*}'/>
<field declared_type64='struct PyMemberDef*' name='tp_members' type64='^{PyMemberDef=*iqi*}'/>
<field declared_type64='struct PyGetSetDef*' name='tp_getset' type64='^{PyGetSetDef=*^?^?*^v}'/>
<field declared_type64='struct _typeobject*' name='tp_base' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyObject*' name='tp_dict' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
<field declared_type64='descrgetfunc' function_pointer='true' name='tp_descr_get' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='descrsetfunc' function_pointer='true' name='tp_descr_set' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='Py_ssize_t' name='tp_dictoffset' type64='q'/>
<field declared_type64='initproc' function_pointer='true' name='tp_init' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='allocfunc' function_pointer='true' name='tp_alloc' type64='^?'>
<arg declared_type64='struct _typeobject*' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='newfunc' function_pointer='true' name='tp_new' type64='^?'>
<arg declared_type64='struct _typeobject*' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='freefunc' function_pointer='true' name='tp_free' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='inquiry' function_pointer='true' name='tp_is_gc' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='PyObject*' name='tp_bases' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
<field declared_type64='PyObject*' name='tp_mro' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
<field declared_type64='PyObject*' name='tp_cache' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
<field declared_type64='PyObject*' name='tp_subclasses' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
<field declared_type64='PyObject*' name='tp_weaklist' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
<field declared_type64='destructor' function_pointer='true' name='tp_del' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='unsigned int' name='tp_version_tag' type64='I'/>
</struct>
<struct name='PyUnicodeErrorObject' type64='{_PyUnicodeErrorObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;dict&quot;^{_object}&quot;args&quot;^{_object}&quot;message&quot;^{_object}&quot;encoding&quot;^{_object}&quot;object&quot;^{_object}&quot;start&quot;q&quot;end&quot;q&quot;reason&quot;^{_object}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyObject*' name='dict' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='args' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='message' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='encoding' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='object' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='Py_ssize_t' name='start' type64='q'/>
<field declared_type64='Py_ssize_t' name='end' type64='q'/>
<field declared_type64='PyObject*' name='reason' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='PyUnicodeObject' type64='{_PyUnicodeObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;length&quot;q&quot;str&quot;^S&quot;hash&quot;q&quot;defenc&quot;^{_object}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='Py_ssize_t' name='length' type64='q'/>
<field declared_type64='Py_UNICODE*' name='str' type64='^S'/>
<field declared_type64='long' name='hash' type64='q'/>
<field declared_type64='PyObject*' name='defenc' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='PyVarObject' type64='{_PyVarObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;ob_size&quot;q}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='Py_ssize_t' name='ob_size' type64='q'/>
</struct>
<struct name='PyWeakReference' type64='{_PyWeakReference=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;wr_object&quot;^{_object}&quot;wr_callback&quot;^{_object}&quot;hash&quot;q&quot;wr_prev&quot;^{_PyWeakReference}&quot;wr_next&quot;^{_PyWeakReference}}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyObject*' name='wr_object' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='PyObject*' name='wr_callback' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='long' name='hash' type64='q'/>
<field declared_type64='PyWeakReference*' name='wr_prev' type64='^{_PyWeakReference=q^{_typeobject}^{_object}^{_object}q^{_PyWeakReference}^{_PyWeakReference}}'/>
<field declared_type64='PyWeakReference*' name='wr_next' type64='^{_PyWeakReference=q^{_typeobject}^{_object}^{_object}q^{_PyWeakReference}^{_PyWeakReference}}'/>
</struct>
<struct name='PyWrapperDescrObject' type64='{_PyWrapperDescrObject=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}&quot;d_type&quot;^{_typeobject}&quot;d_name&quot;^{_object}&quot;d_base&quot;^{wrapperbase}&quot;d_wrapped&quot;^v}'>
<field declared_type64='Py_ssize_t' name='ob_refcnt' type64='q'/>
<field declared_type64='struct _typeobject*' name='ob_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyTypeObject*' name='d_type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyObject*' name='d_name' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='struct wrapperbase*' name='d_base' type64='^{wrapperbase=*i^v^?*i^{_object}}'/>
<field declared_type64='void*' name='d_wrapped' type64='^v'/>
</struct>
<struct name='Py_buffer' type64='{bufferinfo=&quot;buf&quot;^v&quot;obj&quot;^{_object}&quot;len&quot;q&quot;itemsize&quot;q&quot;readonly&quot;i&quot;ndim&quot;i&quot;format&quot;*&quot;shape&quot;^q&quot;strides&quot;^q&quot;suboffsets&quot;^q&quot;smalltable&quot;[2q]&quot;internal&quot;^v}'>
<field declared_type64='void*' name='buf' type64='^v'/>
<field declared_type64='PyObject*' name='obj' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='Py_ssize_t' name='len' type64='q'/>
<field declared_type64='Py_ssize_t' name='itemsize' type64='q'/>
<field declared_type64='int' name='readonly' type64='i'/>
<field declared_type64='int' name='ndim' type64='i'/>
<field declared_type64='char*' name='format' type64='*'/>
<field declared_type64='Py_ssize_t*' name='shape' type64='^q'/>
<field declared_type64='Py_ssize_t*' name='strides' type64='^q'/>
<field declared_type64='Py_ssize_t*' name='suboffsets' type64='^q'/>
<field declared_type64='Py_ssize_t*' name='smalltable' type64='[2q]'/>
<field declared_type64='void*' name='internal' type64='^v'/>
</struct>
<struct name='Py_complex' type64='{_Py_complex=&quot;real&quot;d&quot;imag&quot;d}'>
<field declared_type64='double' name='real' type64='d'/>
<field declared_type64='double' name='imag' type64='d'/>
</struct>
<struct name='PycStringIO_CAPI' type64='{PycStringIO_CAPI=&quot;cread&quot;^?&quot;creadline&quot;^?&quot;cwrite&quot;^?&quot;cgetvalue&quot;^?&quot;NewOutput&quot;^?&quot;NewInput&quot;^?&quot;InputType&quot;^{_typeobject}&quot;OutputType&quot;^{_typeobject}}'>
<field declared_type64='int (*)(PyObject *, char **, Py_ssize_t)' function_pointer='true' name='cread' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='int (*)(PyObject *, char **)' function_pointer='true' name='creadline' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='int (*)(PyObject *, char *, Py_ssize_t)' function_pointer='true' name='cwrite' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='int' type64='i'/>
</field>
<field declared_type64='PyObject *(*)(PyObject *)' function_pointer='true' name='cgetvalue' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='PyObject *(*)(int)' function_pointer='true' name='NewOutput' type64='^?'>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='PyObject *(*)(PyObject *)' function_pointer='true' name='NewInput' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='PyTypeObject*' name='InputType' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
<field declared_type64='PyTypeObject*' name='OutputType' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{?}^{?}^{?}^?^?^?^?^?^{?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object}^?^?q^?^?^?^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^?I}'/>
</struct>
<struct name='alias_ty' type64='{_alias=&quot;name&quot;^{_object}&quot;asname&quot;^{_object}}'>
<field declared_type64='identifier' name='name' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='identifier' name='asname' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='arc' type64='{_arc=&quot;a_lbl&quot;s&quot;a_arrow&quot;s}'>
<field declared_type64='short' name='a_lbl' type64='s'/>
<field declared_type64='short' name='a_arrow' type64='s'/>
</struct>
<struct name='arguments_ty' type64='{_arguments=&quot;args&quot;^{_asdl_seq=&quot;size&quot;i&quot;elements&quot;[1^v]}&quot;vararg&quot;^{_object}&quot;kwarg&quot;^{_object}&quot;defaults&quot;^{_asdl_seq=&quot;size&quot;i&quot;elements&quot;[1^v]}}'>
<field declared_type64='asdl_seq*' name='args' type64='^{_asdl_seq=&quot;size&quot;i&quot;elements&quot;[1^v]}'/>
<field declared_type64='identifier' name='vararg' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='identifier' name='kwarg' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='asdl_seq*' name='defaults' type64='^{_asdl_seq=&quot;size&quot;i&quot;elements&quot;[1^v]}'/>
</struct>
<struct name='asdl_int_seq' type64='{_asdl_int_seq=&quot;size&quot;i&quot;elements&quot;[1i]}'>
<field declared_type64='int' name='size' type64='i'/>
<field declared_type64='int*' name='elements' type64='[1i]'/>
</struct>
<struct name='asdl_seq' type64='{_asdl_seq=&quot;size&quot;i&quot;elements&quot;[1^v]}'>
<field declared_type64='int' name='size' type64='i'/>
<field declared_type64='void**' name='elements' type64='[1^v]'/>
</struct>
<struct name='bufferinfo' type64='{bufferinfo=&quot;buf&quot;^v&quot;obj&quot;^{_object}&quot;len&quot;q&quot;itemsize&quot;q&quot;readonly&quot;i&quot;ndim&quot;i&quot;format&quot;*&quot;shape&quot;^q&quot;strides&quot;^q&quot;suboffsets&quot;^q&quot;smalltable&quot;[2q]&quot;internal&quot;^v}'>
<field declared_type64='void*' name='buf' type64='^v'/>
<field declared_type64='PyObject*' name='obj' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='Py_ssize_t' name='len' type64='q'/>
<field declared_type64='Py_ssize_t' name='itemsize' type64='q'/>
<field declared_type64='int' name='readonly' type64='i'/>
<field declared_type64='int' name='ndim' type64='i'/>
<field declared_type64='char*' name='format' type64='*'/>
<field declared_type64='Py_ssize_t*' name='shape' type64='^q'/>
<field declared_type64='Py_ssize_t*' name='strides' type64='^q'/>
<field declared_type64='Py_ssize_t*' name='suboffsets' type64='^q'/>
<field declared_type64='Py_ssize_t*' name='smalltable' type64='[2q]'/>
<field declared_type64='void*' name='internal' type64='^v'/>
</struct>
<struct name='comprehension_ty' type64='{_comprehension=&quot;target&quot;^{_expr=}&quot;iter&quot;^{_expr=}&quot;ifs&quot;^{_asdl_seq=&quot;size&quot;i&quot;elements&quot;[1^v]}}'>
<field declared_type64='expr_ty' name='target' type64='^{_expr=}'/>
<field declared_type64='expr_ty' name='iter' type64='^{_expr=}'/>
<field declared_type64='asdl_seq*' name='ifs' type64='^{_asdl_seq=&quot;size&quot;i&quot;elements&quot;[1^v]}'/>
</struct>
<struct name='dfa' type64='{_dfa=&quot;d_type&quot;i&quot;d_name&quot;*&quot;d_initial&quot;i&quot;d_nstates&quot;i&quot;d_state&quot;^{_state=&quot;s_narcs&quot;i&quot;s_arc&quot;^{_arc=&quot;a_lbl&quot;s&quot;a_arrow&quot;s}&quot;s_lower&quot;i&quot;s_upper&quot;i&quot;s_accel&quot;^i&quot;s_accept&quot;i}&quot;d_first&quot;*}'>
<field declared_type64='int' name='d_type' type64='i'/>
<field declared_type64='char*' name='d_name' type64='*'/>
<field declared_type64='int' name='d_initial' type64='i'/>
<field declared_type64='int' name='d_nstates' type64='i'/>
<field declared_type64='state*' name='d_state' type64='^{_state=&quot;s_narcs&quot;i&quot;s_arc&quot;^{_arc=&quot;a_lbl&quot;s&quot;a_arrow&quot;s}&quot;s_lower&quot;i&quot;s_upper&quot;i&quot;s_accel&quot;^i&quot;s_accept&quot;i}'/>
<field declared_type64='bitset' name='d_first' type64='*'/>
</struct>
<struct name='excepthandler_ty' type64='{_excepthandler=&quot;kind&quot;i&quot;v&quot;(?=&quot;ExceptHandler&quot;{?=&quot;type&quot;^{_expr}&quot;name&quot;^{_expr}&quot;body&quot;^{?}})&quot;lineno&quot;i&quot;col_offset&quot;i}'>
<field declared_type64='enum _excepthandler_kind' name='kind' type64='i'/>
<field declared_type64='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Python.framework/Headers/Python-ast.h:345:9)' name='v' type64='(?=&quot;ExceptHandler&quot;{?=&quot;type&quot;^{_expr}&quot;name&quot;^{_expr}&quot;body&quot;^{?}})'/>
<field declared_type64='int' name='lineno' type64='i'/>
<field declared_type64='int' name='col_offset' type64='i'/>
</struct>
<struct name='expr_ty' type64='{_expr=}'>
<field declared_type64='enum _expr_kind' name='kind' type64='i'/>
<field declared_type64='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Python.framework/Headers/Python-ast.h:195:9)' name='v' type64='(?=&quot;BoolOp&quot;{?=&quot;op&quot;i&quot;values&quot;^{?}}&quot;BinOp&quot;{?=&quot;left&quot;^{_expr}&quot;op&quot;i&quot;right&quot;^{_expr}}&quot;UnaryOp&quot;{?=&quot;op&quot;i&quot;operand&quot;^{_expr}}&quot;Lambda&quot;{?=&quot;args&quot;^{_arguments}&quot;body&quot;^{_expr}}&quot;IfExp&quot;{?=}&quot;Dict&quot;{?=&quot;keys&quot;^{?}&quot;values&quot;^{?}}&quot;Set&quot;{?=&quot;elts&quot;^{?}}&quot;ListComp&quot;{?=&quot;elt&quot;^{_expr}&quot;generators&quot;^{?}}&quot;SetComp&quot;{?=&quot;elt&quot;^{_expr}&quot;generators&quot;^{?}}&quot;DictComp&quot;{?=&quot;key&quot;^{_expr}&quot;value&quot;^{_expr}&quot;generators&quot;^{?}}&quot;GeneratorExp&quot;{?=&quot;elt&quot;^{_expr}&quot;generators&quot;^{?}}&quot;Yield&quot;{?=&quot;value&quot;^{_expr}}&quot;Compare&quot;{?=&quot;left&quot;^{_expr}&quot;ops&quot;^{?}&quot;comparators&quot;^{?}}&quot;Call&quot;{?=&quot;func&quot;^{_expr}&quot;args&quot;^{?}&quot;keywords&quot;^{?}&quot;starargs&quot;^{_expr}&quot;kwargs&quot;^{_expr}}&quot;Repr&quot;{?=&quot;value&quot;^{_expr}}&quot;Num&quot;{?=&quot;n&quot;^{_object}}&quot;Str&quot;{?=&quot;s&quot;^{_object}}&quot;Attribute&quot;{?=&quot;value&quot;^{_expr}&quot;attr&quot;^{_object}&quot;ctx&quot;i}&quot;Subscript&quot;{?=&quot;value&quot;^{_expr}&quot;slice&quot;^{_slice}&quot;ctx&quot;i}&quot;Name&quot;{?=&quot;id&quot;^{_object}&quot;ctx&quot;i}&quot;List&quot;{?=&quot;elts&quot;^{?}&quot;ctx&quot;i}&quot;Tuple&quot;{?=&quot;elts&quot;^{?}&quot;ctx&quot;i})'/>
<field declared_type64='int' name='lineno' type64='i'/>
<field declared_type64='int' name='col_offset' type64='i'/>
</struct>
<struct name='grammar' type64='{_grammar=&quot;g_ndfas&quot;i&quot;g_dfa&quot;^{_dfa=&quot;d_type&quot;i&quot;d_name&quot;*&quot;d_initial&quot;i&quot;d_nstates&quot;i&quot;d_state&quot;^{_state=&quot;s_narcs&quot;i&quot;s_arc&quot;^{_arc=&quot;a_lbl&quot;s&quot;a_arrow&quot;s}&quot;s_lower&quot;i&quot;s_upper&quot;i&quot;s_accel&quot;^i&quot;s_accept&quot;i}&quot;d_first&quot;*}&quot;g_ll&quot;{_labellist=&quot;ll_nlabels&quot;i&quot;ll_label&quot;^{_label=&quot;lb_type&quot;i&quot;lb_str&quot;*}}&quot;g_start&quot;i&quot;g_accel&quot;i}'>
<field declared_type64='int' name='g_ndfas' type64='i'/>
<field declared_type64='dfa*' name='g_dfa' type64='^{_dfa=&quot;d_type&quot;i&quot;d_name&quot;*&quot;d_initial&quot;i&quot;d_nstates&quot;i&quot;d_state&quot;^{_state=&quot;s_narcs&quot;i&quot;s_arc&quot;^{_arc=&quot;a_lbl&quot;s&quot;a_arrow&quot;s}&quot;s_lower&quot;i&quot;s_upper&quot;i&quot;s_accel&quot;^i&quot;s_accept&quot;i}&quot;d_first&quot;*}'/>
<field declared_type64='labellist' name='g_ll' type64='{_labellist=&quot;ll_nlabels&quot;i&quot;ll_label&quot;^{_label=&quot;lb_type&quot;i&quot;lb_str&quot;*}}'/>
<field declared_type64='int' name='g_start' type64='i'/>
<field declared_type64='int' name='g_accel' type64='i'/>
</struct>
<struct name='keyword_ty' type64='{_keyword=&quot;arg&quot;^{_object}&quot;value&quot;^{_expr}}'>
<field declared_type64='identifier' name='arg' type64='^{_object=q^{_typeobject}}'/>
<field declared_type64='expr_ty' name='value' type64='^{_expr=}'/>
</struct>
<struct name='label' type64='{_label=&quot;lb_type&quot;i&quot;lb_str&quot;*}'>
<field declared_type64='int' name='lb_type' type64='i'/>
<field declared_type64='char*' name='lb_str' type64='*'/>
</struct>
<struct name='labellist' type64='{_labellist=&quot;ll_nlabels&quot;i&quot;ll_label&quot;^{_label=&quot;lb_type&quot;i&quot;lb_str&quot;*}}'>
<field declared_type64='int' name='ll_nlabels' type64='i'/>
<field declared_type64='label*' name='ll_label' type64='^{_label=&quot;lb_type&quot;i&quot;lb_str&quot;*}'/>
</struct>
<struct name='memberlist' type64='{memberlist=&quot;name&quot;*&quot;type&quot;i&quot;offset&quot;i&quot;flags&quot;i}'>
<field declared_type64='char*' name='name' type64='*'/>
<field declared_type64='int' name='type' type64='i'/>
<field declared_type64='int' name='offset' type64='i'/>
<field declared_type64='int' name='flags' type64='i'/>
</struct>
<struct name='mod_ty' type64='{_mod=&quot;kind&quot;i&quot;v&quot;(?=&quot;Module&quot;{?=&quot;body&quot;^{?}}&quot;Interactive&quot;{?=&quot;body&quot;^{?}}&quot;Expression&quot;{?=&quot;body&quot;^{_expr}}&quot;Suite&quot;{?=&quot;body&quot;^{?}})}'>
<field declared_type64='enum _mod_kind' name='kind' type64='i'/>
<field declared_type64='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Python.framework/Headers/Python-ast.h:42:9)' name='v' type64='(?=&quot;Module&quot;{?=&quot;body&quot;^{?}}&quot;Interactive&quot;{?=&quot;body&quot;^{?}}&quot;Expression&quot;{?=&quot;body&quot;^{_expr}}&quot;Suite&quot;{?=&quot;body&quot;^{?}})'/>
</struct>
<struct name='node' type64='{_node=&quot;n_type&quot;s&quot;n_str&quot;*&quot;n_lineno&quot;i&quot;n_col_offset&quot;i&quot;n_nchildren&quot;i&quot;n_child&quot;^{_node}}'>
<field declared_type64='short' name='n_type' type64='s'/>
<field declared_type64='char*' name='n_str' type64='*'/>
<field declared_type64='int' name='n_lineno' type64='i'/>
<field declared_type64='int' name='n_col_offset' type64='i'/>
<field declared_type64='int' name='n_nchildren' type64='i'/>
<field declared_type64='struct _node*' name='n_child' type64='^{_node=s*iii^{_node}}'/>
</struct>
<struct name='perrdetail' type64='{_perrdetail=&quot;error&quot;i&quot;filename&quot;*&quot;lineno&quot;i&quot;offset&quot;i&quot;text&quot;*&quot;token&quot;i&quot;expected&quot;i}'>
<field declared_type64='int' name='error' type64='i'/>
<field const='true' declared_type64='char*' name='filename' type64='*'/>
<field declared_type64='int' name='lineno' type64='i'/>
<field declared_type64='int' name='offset' type64='i'/>
<field declared_type64='char*' name='text' type64='*'/>
<field declared_type64='int' name='token' type64='i'/>
<field declared_type64='int' name='expected' type64='i'/>
</struct>
<struct name='setentry' type64='{_setentry=&quot;hash&quot;q&quot;key&quot;^{_object}}'>
<field declared_type64='long' name='hash' type64='q'/>
<field declared_type64='PyObject*' name='key' type64='^{_object=q^{_typeobject}}'/>
</struct>
<struct name='slice_ty' type64='{_slice=&quot;kind&quot;i&quot;v&quot;(?=&quot;Slice&quot;{?=&quot;lower&quot;^{_expr}&quot;upper&quot;^{_expr}&quot;step&quot;^{_expr}}&quot;ExtSlice&quot;{?=&quot;dims&quot;^{?}}&quot;Index&quot;{?=&quot;value&quot;^{_expr}})}'>
<field declared_type64='enum _slice_kind' name='kind' type64='i'/>
<field declared_type64='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Python.framework/Headers/Python-ast.h:318:9)' name='v' type64='(?=&quot;Slice&quot;{?=&quot;lower&quot;^{_expr}&quot;upper&quot;^{_expr}&quot;step&quot;^{_expr}}&quot;ExtSlice&quot;{?=&quot;dims&quot;^{?}}&quot;Index&quot;{?=&quot;value&quot;^{_expr}})'/>
</struct>
<struct name='state' type64='{_state=&quot;s_narcs&quot;i&quot;s_arc&quot;^{_arc=&quot;a_lbl&quot;s&quot;a_arrow&quot;s}&quot;s_lower&quot;i&quot;s_upper&quot;i&quot;s_accel&quot;^i&quot;s_accept&quot;i}'>
<field declared_type64='int' name='s_narcs' type64='i'/>
<field declared_type64='arc*' name='s_arc' type64='^{_arc=&quot;a_lbl&quot;s&quot;a_arrow&quot;s}'/>
<field declared_type64='int' name='s_lower' type64='i'/>
<field declared_type64='int' name='s_upper' type64='i'/>
<field declared_type64='int*' name='s_accel' type64='^i'/>
<field declared_type64='int' name='s_accept' type64='i'/>
</struct>
<struct name='stmt_ty' type64='{_stmt=}'>
<field declared_type64='enum _stmt_kind' name='kind' type64='i'/>
<field declared_type64='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Python.framework/Headers/Python-ast.h:71:9)' name='v' type64='(?=&quot;FunctionDef&quot;{?=&quot;name&quot;^{_object}&quot;args&quot;^{_arguments}&quot;body&quot;^{?}&quot;decorator_list&quot;^{?}}&quot;ClassDef&quot;{?=&quot;name&quot;^{_object}&quot;bases&quot;^{?}&quot;body&quot;^{?}&quot;decorator_list&quot;^{?}}&quot;Return&quot;{?=&quot;value&quot;^{_expr}}&quot;Delete&quot;{?=&quot;targets&quot;^{?}}&quot;Assign&quot;{?=&quot;targets&quot;^{?}&quot;value&quot;^{_expr}}&quot;AugAssign&quot;{?=&quot;target&quot;^{_expr}&quot;op&quot;i&quot;value&quot;^{_expr}}&quot;Print&quot;{?=&quot;dest&quot;^{_expr}&quot;values&quot;^{?}&quot;nl&quot;B}&quot;For&quot;{?=&quot;target&quot;^{_expr}&quot;iter&quot;^{_expr}&quot;body&quot;^{?}&quot;orelse&quot;^{?}}&quot;While&quot;{?=}&quot;If&quot;{?=}&quot;With&quot;{?=&quot;context_expr&quot;^{_expr}&quot;optional_vars&quot;^{_expr}&quot;body&quot;^{?}}&quot;Raise&quot;{?=&quot;type&quot;^{_expr}&quot;inst&quot;^{_expr}&quot;tback&quot;^{_expr}}&quot;TryExcept&quot;{?=&quot;body&quot;^{?}&quot;handlers&quot;^{?}&quot;orelse&quot;^{?}}&quot;TryFinally&quot;{?=&quot;body&quot;^{?}&quot;finalbody&quot;^{?}}&quot;Assert&quot;{?=}&quot;Import&quot;{?=&quot;names&quot;^{?}}&quot;ImportFrom&quot;{?=&quot;module&quot;^{_object}&quot;names&quot;^{?}&quot;level&quot;i}&quot;Exec&quot;{?=&quot;body&quot;^{_expr}&quot;globals&quot;^{_expr}&quot;locals&quot;^{_expr}}&quot;Global&quot;{?=&quot;names&quot;^{?}}&quot;Expr&quot;{?=&quot;value&quot;^{_expr}})'/>
<field declared_type64='int' name='lineno' type64='i'/>
<field declared_type64='int' name='col_offset' type64='i'/>
</struct>
<struct name='symtable' type64='{symtable=&quot;st_filename&quot;*&quot;st_cur&quot;^{_symtable_entry}&quot;st_top&quot;^{_symtable_entry}&quot;st_symbols&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;st_stack&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;st_global&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;st_nblocks&quot;i&quot;st_private&quot;^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}&quot;st_future&quot;^{_PyFutureFeatures=&quot;ff_features&quot;i&quot;ff_lineno&quot;i}}'>
<field const='true' declared_type64='char*' name='st_filename' type64='*'/>
<field declared_type64='struct _symtable_entry*' name='st_cur' type64='^{_symtable_entry=q^{_typeobject}^{_object}^{_object}^{_object}^{_object}^{_object}iiib1b1b1b1b1b1iii^{symtable}}'/>
<field declared_type64='struct _symtable_entry*' name='st_top' type64='^{_symtable_entry=q^{_typeobject}^{_object}^{_object}^{_object}^{_object}^{_object}iiib1b1b1b1b1b1iii^{symtable}}'/>
<field declared_type64='PyObject*' name='st_symbols' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
<field declared_type64='PyObject*' name='st_stack' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
<field declared_type64='PyObject*' name='st_global' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
<field declared_type64='int' name='st_nblocks' type64='i'/>
<field declared_type64='PyObject*' name='st_private' type64='^{_object=&quot;ob_refcnt&quot;q&quot;ob_type&quot;^{_typeobject}}'/>
<field declared_type64='PyFutureFeatures*' name='st_future' type64='^{_PyFutureFeatures=&quot;ff_features&quot;i&quot;ff_lineno&quot;i}'/>
</struct>
<struct name='wrapperbase' type64='{wrapperbase=&quot;name&quot;*&quot;offset&quot;i&quot;function&quot;^v&quot;wrapper&quot;^?&quot;doc&quot;*&quot;flags&quot;i&quot;name_strobj&quot;^{_object}}'>
<field declared_type64='char*' name='name' type64='*'/>
<field declared_type64='int' name='offset' type64='i'/>
<field declared_type64='void*' name='function' type64='^v'/>
<field declared_type64='wrapperfunc' function_pointer='true' name='wrapper' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</field>
<field declared_type64='char*' name='doc' type64='*'/>
<field declared_type64='int' name='flags' type64='i'/>
<field declared_type64='PyObject*' name='name_strobj' type64='^{_object=q^{_typeobject}}'/>
</struct>
<cftype name='PyArena' type64='^{_arena=}'/>
<constant declared_type64='PyTypeObject' name='PyBaseObject_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyBaseString_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyBool_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyBuffer_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyByteArrayIter_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyByteArray_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyCFunction_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyCObject_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyCallIter_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyCapsule_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyCell_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyClassMethod_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyClass_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyCode_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyComplex_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='void**' name='PyCurses_API' type64='^^v'/>
<constant declared_type64='PyDateTime_CAPI*' name='PyDateTimeAPI' type64='^{_PyDateTime_CAPI=^{_typeobject}^{_typeobject}^{_typeobject}^{_typeobject}^{_typeobject}^?^?^?^?^?^?}'/>
<constant declared_type64='PyTypeObject' name='PyDictItems_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyDictIterItem_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyDictIterKey_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyDictIterValue_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyDictKeys_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyDictProxy_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyDictValues_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyDict_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyEllipsis_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyEnum_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyObject*' name='PyExc_ArithmeticError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_AssertionError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_AttributeError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_BaseException' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_BufferError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_BytesWarning' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_DeprecationWarning' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_EOFError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_EnvironmentError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_Exception' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_FloatingPointError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_FutureWarning' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_GeneratorExit' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_IOError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_ImportError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_ImportWarning' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_IndentationError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_IndexError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_KeyError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_KeyboardInterrupt' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_LookupError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_MemoryError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_MemoryErrorInst' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_NameError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_NotImplementedError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_OSError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_OverflowError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_PendingDeprecationWarning' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_RecursionErrorInst' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_ReferenceError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_RuntimeError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_RuntimeWarning' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_StandardError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_StopIteration' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_SyntaxError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_SyntaxWarning' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_SystemError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_SystemExit' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_TabError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_TypeError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_UnboundLocalError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_UnicodeDecodeError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_UnicodeEncodeError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_UnicodeError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_UnicodeTranslateError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_UnicodeWarning' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_UserWarning' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_ValueError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_Warning' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyObject*' name='PyExc_ZeroDivisionError' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyTypeObject' name='PyFile_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyFloat_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyFrame_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyFrozenSet_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyFunction_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyGen_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyGetSetDescr_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='struct _frozen*' name='PyImport_FrozenModules' type64='^{_frozen=**i}'/>
<constant declared_type64='struct _inittab*' name='PyImport_Inittab' type64='^{_inittab=*^?}'/>
<constant declared_type64='PyTypeObject' name='PyInstance_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyInt_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyList_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyLong_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyObject*' name='PyMac_OSErrException' type64='^{_object=q^{_typeobject}}'/>
<constant declared_type64='PyTypeObject' name='PyMemberDescr_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyMemoryView_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyMethod_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyModule_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyNullImporter_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyProperty_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyRange_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyReversed_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PySTEntry_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PySeqIter_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PySet_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PySlice_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyStaticMethod_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyString_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='char*' name='PyStructSequence_UnnamedField' type64='*'/>
<constant declared_type64='PyTypeObject' name='PySuper_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyTraceBack_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyTuple_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyType_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyUnicode_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='PyTypeObject' name='PyWrapperDescr_Type' type64='{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<constant declared_type64='int' name='Py_BytesWarningFlag' type64='i'/>
<constant declared_type64='int' name='Py_DebugFlag' type64='i'/>
<constant declared_type64='int' name='Py_DivisionWarningFlag' type64='i'/>
<constant declared_type64='int' name='Py_DontWriteBytecodeFlag' type64='i'/>
<constant const='true' declared_type64='char*' name='Py_FileSystemDefaultEncoding' type64='*'/>
<constant declared_type64='int' name='Py_FrozenFlag' type64='i'/>
<constant declared_type64='int' name='Py_HashRandomizationFlag' type64='i'/>
<constant declared_type64='int' name='Py_IgnoreEnvironmentFlag' type64='i'/>
<constant declared_type64='int' name='Py_InspectFlag' type64='i'/>
<constant declared_type64='int' name='Py_InteractiveFlag' type64='i'/>
<constant declared_type64='int' name='Py_NoSiteFlag' type64='i'/>
<constant declared_type64='int' name='Py_NoUserSiteDirectory' type64='i'/>
<constant declared_type64='int' name='Py_OptimizeFlag' type64='i'/>
<constant declared_type64='int' name='Py_Py3kWarningFlag' type64='i'/>
<constant declared_type64='int' name='Py_TabcheckFlag' type64='i'/>
<constant declared_type64='int' name='Py_UnicodeFlag' type64='i'/>
<constant declared_type64='int' name='Py_UseClassExceptionsFlag' type64='i'/>
<constant declared_type64='int' name='Py_VerboseFlag' type64='i'/>
<constant declared_type64='struct PycStringIO_CAPI*' name='PycStringIO' type64='^{PycStringIO_CAPI=^?^?^?^?^?^?^{_typeobject}^{_typeobject}}'/>
<constant declared_type64='char*' name='catchall_ERR' type64='*'/>
<constant declared_type64='char*' name='catchall_NULL' type64='*'/>
<string_constant name='FUTURE_ABSOLUTE_IMPORT' value='absolute_import'/>
<string_constant name='FUTURE_DIVISION' value='division'/>
<string_constant name='FUTURE_GENERATORS' value='generators'/>
<string_constant name='FUTURE_NESTED_SCOPES' value='nested_scopes'/>
<string_constant name='FUTURE_PRINT_FUNCTION' value='print_function'/>
<string_constant name='FUTURE_UNICODE_LITERALS' value='unicode_literals'/>
<string_constant name='FUTURE_WITH_STATEMENT' value='with_statement'/>
<string_constant name='PYTHON_API_STRING' value='1013'/>
<string_constant name='PY_FORMAT_LONG_LONG' value='ll'/>
<string_constant name='PY_FORMAT_SIZE_T' value='l'/>
<string_constant name='PY_PATCHLEVEL_REVISION' value=''/>
<string_constant name='PY_STDIOTEXTMODE' value='b'/>
<string_constant name='PY_VERSION' value='2.7.10'/>
<string_constant name='PyCurses_CAPSULE_NAME' value='_curses._C_API'/>
<string_constant name='PyDateTime_CAPSULE_NAME' value='datetime.datetime_CAPI'/>
<string_constant name='PyExpat_CAPI_MAGIC' value='pyexpat.expat_CAPI 1.0'/>
<string_constant name='PyExpat_CAPSULE_NAME' value='pyexpat.expat_CAPI'/>
<string_constant name='PyUnicodeData_CAPSULE_NAME' value='unicodedata.ucnhash_CAPI'/>
<string_constant name='PycStringIO_CAPSULE_NAME' value='cStringIO.cStringIO_CAPI'/>
<string_constant name='SHLIB_EXT' value='.so'/>
<enum name='AC_APPLE_UNIVERSAL_BUILD' value64='1'/>
<enum name='ALT' value64='259'/>
<enum name='AMPER' value64='19'/>
<enum name='AMPEREQUAL' value64='42'/>
<enum name='AT' value64='50'/>
<enum name='ATOM' value64='261'/>
<enum name='Add' value64='1'/>
<enum name='And' value64='1'/>
<enum name='Assert_kind' value64='15'/>
<enum name='Assign_kind' value64='5'/>
<enum name='Attribute_kind' value64='18'/>
<enum name='AugAssign_kind' value64='6'/>
<enum name='AugLoad' value64='4'/>
<enum name='AugStore' value64='5'/>
<enum name='BACKQUOTE' value64='25'/>
<enum name='BASE' value64='1073741824'/>
<enum name='BINARY_ADD' value64='23'/>
<enum name='BINARY_AND' value64='64'/>
<enum name='BINARY_DIVIDE' value64='21'/>
<enum name='BINARY_FLOOR_DIVIDE' value64='26'/>
<enum name='BINARY_LSHIFT' value64='62'/>
<enum name='BINARY_MODULO' value64='22'/>
<enum name='BINARY_MULTIPLY' value64='20'/>
<enum name='BINARY_OR' value64='66'/>
<enum name='BINARY_POWER' value64='19'/>
<enum name='BINARY_RSHIFT' value64='63'/>
<enum name='BINARY_SUBSCR' value64='25'/>
<enum name='BINARY_SUBTRACT' value64='24'/>
<enum name='BINARY_TRUE_DIVIDE' value64='27'/>
<enum name='BINARY_XOR' value64='65'/>
<enum name='BITSPERBYTE' value64='8'/>
<enum name='BREAK_LOOP' value64='80'/>
<enum name='BUILD_CLASS' value64='89'/>
<enum name='BUILD_LIST' value64='103'/>
<enum name='BUILD_MAP' value64='105'/>
<enum name='BUILD_SET' value64='104'/>
<enum name='BUILD_SLICE' value64='133'/>
<enum name='BUILD_TUPLE' value64='102'/>
<enum name='BinOp_kind' value64='2'/>
<enum name='BoolOp_kind' value64='1'/>
<enum name='Break_kind' value64='22'/>
<enum name='CALL_FUNCTION' value64='131'/>
<enum name='CALL_FUNCTION_KW' value64='141'/>
<enum name='CALL_FUNCTION_VAR' value64='140'/>
<enum name='CALL_FUNCTION_VAR_KW' value64='142'/>
<enum name='CELL' value64='5'/>
<enum name='CIRCUMFLEX' value64='33'/>
<enum name='CIRCUMFLEXEQUAL' value64='44'/>
<enum name='COLON' value64='11'/>
<enum name='COMMA' value64='12'/>
<enum name='COMPARE_OP' value64='107'/>
<enum name='CONTINUE_LOOP' value64='119'/>
<enum name='CO_FUTURE_ABSOLUTE_IMPORT' value64='16384'/>
<enum name='CO_FUTURE_DIVISION' value64='8192'/>
<enum name='CO_FUTURE_PRINT_FUNCTION' value64='65536'/>
<enum name='CO_FUTURE_UNICODE_LITERALS' value64='131072'/>
<enum name='CO_FUTURE_WITH_STATEMENT' value64='32768'/>
<enum name='CO_GENERATOR' value64='32'/>
<enum name='CO_MAXBLOCKS' value64='20'/>
<enum name='CO_NESTED' value64='16'/>
<enum name='CO_NEWLOCALS' value64='2'/>
<enum name='CO_NOFREE' value64='64'/>
<enum name='CO_OPTIMIZED' value64='1'/>
<enum name='CO_VARARGS' value64='4'/>
<enum name='CO_VARKEYWORDS' value64='8'/>
<enum name='Call_kind' value64='14'/>
<enum name='ClassBlock' value64='1'/>
<enum name='ClassDef_kind' value64='2'/>
<enum name='Compare_kind' value64='13'/>
<enum name='Continue_kind' value64='23'/>
<enum name='DATETIME_API_MAGIC' value64='1095059669'/>
<enum name='DEDENT' value64='6'/>
<enum name='DEF_BOUND' value64='70'/>
<enum name='DEF_FREE' value64='16'/>
<enum name='DEF_FREE_CLASS' value64='32'/>
<enum name='DEF_GLOBAL' value64='1'/>
<enum name='DEF_IMPORT' value64='64'/>
<enum name='DEF_LOCAL' value64='2'/>
<enum name='DEF_PARAM' value64='4'/>
<enum name='DELETE_ATTR' value64='96'/>
<enum name='DELETE_FAST' value64='126'/>
<enum name='DELETE_GLOBAL' value64='98'/>
<enum name='DELETE_NAME' value64='91'/>
<enum name='DELETE_SLICE' value64='50'/>
<enum name='DELETE_SUBSCR' value64='61'/>
<enum name='DELIM' value64='58'/>
<enum name='DOT' value64='23'/>
<enum name='DOUBLESLASH' value64='48'/>
<enum name='DOUBLESLASHEQUAL' value64='49'/>
<enum name='DOUBLESTAR' value64='36'/>
<enum name='DOUBLESTAREQUAL' value64='47'/>
<enum name='DUP_TOP' value64='4'/>
<enum name='DUP_TOPX' value64='99'/>
<enum name='Del' value64='3'/>
<enum name='Delete_kind' value64='4'/>
<enum name='DictComp_kind' value64='10'/>
<enum name='Dict_kind' value64='6'/>
<enum name='Div' value64='4'/>
<enum name='EMPTY' value64='0'/>
<enum name='ENABLE_IPV6' value64='1'/>
<enum name='ENDMARKER' value64='0'/>
<enum name='END_FINALLY' value64='88'/>
<enum name='EQEQUAL' value64='28'/>
<enum name='EQUAL' value64='22'/>
<enum name='ERRORTOKEN' value64='52'/>
<enum name='EXEC_STMT' value64='85'/>
<enum name='EXTENDED_ARG' value64='145'/>
<enum name='E_DECODE' value64='22'/>
<enum name='E_DEDENT' value64='21'/>
<enum name='E_DONE' value64='16'/>
<enum name='E_EOF' value64='11'/>
<enum name='E_EOFS' value64='23'/>
<enum name='E_EOLS' value64='24'/>
<enum name='E_ERROR' value64='17'/>
<enum name='E_INTR' value64='12'/>
<enum name='E_LINECONT' value64='25'/>
<enum name='E_NOMEM' value64='15'/>
<enum name='E_OK' value64='10'/>
<enum name='E_OVERFLOW' value64='19'/>
<enum name='E_SYNTAX' value64='14'/>
<enum name='E_TABSPACE' value64='18'/>
<enum name='E_TOKEN' value64='13'/>
<enum name='E_TOODEEP' value64='20'/>
<enum name='Ellipsis_kind' value64='1'/>
<enum name='Eq' value64='1'/>
<enum name='ExceptHandler_kind' value64='1'/>
<enum name='Exec_kind' value64='18'/>
<enum name='Expr_kind' value64='20'/>
<enum name='Expression_kind' value64='3'/>
<enum name='ExtSlice_kind' value64='3'/>
<enum name='FOR_ITER' value64='93'/>
<enum name='FREE' value64='4'/>
<enum name='FloorDiv' value64='12'/>
<enum name='For_kind' value64='8'/>
<enum name='FunctionBlock' value64='0'/>
<enum name='FunctionDef_kind' value64='1'/>
<enum name='GENERATOR' value64='1'/>
<enum name='GENERATOR_EXPRESSION' value64='2'/>
<enum name='GET_ITER' value64='68'/>
<enum name='GLOBAL_EXPLICIT' value64='2'/>
<enum name='GLOBAL_IMPLICIT' value64='3'/>
<enum name='GREATER' value64='21'/>
<enum name='GREATEREQUAL' value64='31'/>
<enum name='GeneratorExp_kind' value64='11'/>
<enum name='Global_kind' value64='19'/>
<enum name='Gt' value64='5'/>
<enum name='GtE' value64='6'/>
<enum name='HAVE_ACOSH' value64='1'/>
<enum name='HAVE_ADDRINFO' value64='1'/>
<enum name='HAVE_ALARM' value64='1'/>
<enum name='HAVE_ALLOCA_H' value64='1'/>
<enum name='HAVE_ARGUMENT' value64='90'/>
<enum name='HAVE_ASINH' value64='1'/>
<enum name='HAVE_ATANH' value64='1'/>
<enum name='HAVE_BROKEN_SEM_GETVALUE' value64='1'/>
<enum name='HAVE_C99_BOOL' value64='1'/>
<enum name='HAVE_CHFLAGS' value64='1'/>
<enum name='HAVE_CHOWN' value64='1'/>
<enum name='HAVE_CHROOT' value64='1'/>
<enum name='HAVE_CLOCK' value64='1'/>
<enum name='HAVE_CONFSTR' value64='1'/>
<enum name='HAVE_COPYSIGN' value64='1'/>
<enum name='HAVE_CTERMID' value64='1'/>
<enum name='HAVE_CTERMID_R' value64='1'/>
<enum name='HAVE_CURSES_H' value64='1'/>
<enum name='HAVE_CURSES_IS_TERM_RESIZED' value64='1'/>
<enum name='HAVE_CURSES_RESIZETERM' value64='1'/>
<enum name='HAVE_CURSES_RESIZE_TERM' value64='1'/>
<enum name='HAVE_DECL_ISFINITE' value64='1'/>
<enum name='HAVE_DECL_ISINF' value64='1'/>
<enum name='HAVE_DECL_ISNAN' value64='1'/>
<enum name='HAVE_DEVICE_MACROS' value64='1'/>
<enum name='HAVE_DEV_PTMX' value64='1'/>
<enum name='HAVE_DIRENT_H' value64='1'/>
<enum name='HAVE_DLFCN_H' value64='1'/>
<enum name='HAVE_DLOPEN' value64='1'/>
<enum name='HAVE_DUP2' value64='1'/>
<enum name='HAVE_DYNAMIC_LOADING' value64='1'/>
<enum name='HAVE_ERF' value64='1'/>
<enum name='HAVE_ERFC' value64='1'/>
<enum name='HAVE_ERRNO_H' value64='1'/>
<enum name='HAVE_EXECV' value64='1'/>
<enum name='HAVE_EXPM1' value64='1'/>
<enum name='HAVE_FCHDIR' value64='1'/>
<enum name='HAVE_FCHMOD' value64='1'/>
<enum name='HAVE_FCHOWN' value64='1'/>
<enum name='HAVE_FCNTL_H' value64='1'/>
<enum name='HAVE_FINITE' value64='1'/>
<enum name='HAVE_FLOCK' value64='1'/>
<enum name='HAVE_FORK' value64='1'/>
<enum name='HAVE_FORKPTY' value64='1'/>
<enum name='HAVE_FPATHCONF' value64='1'/>
<enum name='HAVE_FSEEKO' value64='1'/>
<enum name='HAVE_FSTATVFS' value64='1'/>
<enum name='HAVE_FSYNC' value64='1'/>
<enum name='HAVE_FTELLO' value64='1'/>
<enum name='HAVE_FTIME' value64='1'/>
<enum name='HAVE_FTRUNCATE' value64='1'/>
<enum name='HAVE_GAI_STRERROR' value64='1'/>
<enum name='HAVE_GAMMA' value64='1'/>
<enum name='HAVE_GETADDRINFO' value64='1'/>
<enum name='HAVE_GETCWD' value64='1'/>
<enum name='HAVE_GETC_UNLOCKED' value64='1'/>
<enum name='HAVE_GETGROUPS' value64='1'/>
<enum name='HAVE_GETHOSTBYNAME' value64='1'/>
<enum name='HAVE_GETITIMER' value64='1'/>
<enum name='HAVE_GETLOADAVG' value64='1'/>
<enum name='HAVE_GETLOGIN' value64='1'/>
<enum name='HAVE_GETNAMEINFO' value64='1'/>
<enum name='HAVE_GETPAGESIZE' value64='1'/>
<enum name='HAVE_GETPEERNAME' value64='1'/>
<enum name='HAVE_GETPGID' value64='1'/>
<enum name='HAVE_GETPGRP' value64='1'/>
<enum name='HAVE_GETPID' value64='1'/>
<enum name='HAVE_GETPRIORITY' value64='1'/>
<enum name='HAVE_GETPWENT' value64='1'/>
<enum name='HAVE_GETSID' value64='1'/>
<enum name='HAVE_GETTIMEOFDAY' value64='1'/>
<enum name='HAVE_GETWD' value64='1'/>
<enum name='HAVE_GRP_H' value64='1'/>
<enum name='HAVE_HSTRERROR' value64='1'/>
<enum name='HAVE_HYPOT' value64='1'/>
<enum name='HAVE_INET_ATON' value64='1'/>
<enum name='HAVE_INET_PTON' value64='1'/>
<enum name='HAVE_INITGROUPS' value64='1'/>
<enum name='HAVE_INT32_T' value64='1'/>
<enum name='HAVE_INT64_T' value64='1'/>
<enum name='HAVE_INTTYPES_H' value64='1'/>
<enum name='HAVE_KILL' value64='1'/>
<enum name='HAVE_KILLPG' value64='1'/>
<enum name='HAVE_KQUEUE' value64='1'/>
<enum name='HAVE_LANGINFO_H' value64='1'/>
<enum name='HAVE_LCHFLAGS' value64='1'/>
<enum name='HAVE_LCHMOD' value64='1'/>
<enum name='HAVE_LCHOWN' value64='1'/>
<enum name='HAVE_LGAMMA' value64='1'/>
<enum name='HAVE_LIBDL' value64='1'/>
<enum name='HAVE_LIBREADLINE' value64='1'/>
<enum name='HAVE_LIBUTIL_H' value64='1'/>
<enum name='HAVE_LINK' value64='1'/>
<enum name='HAVE_LOG1P' value64='1'/>
<enum name='HAVE_LONG_DOUBLE' value64='1'/>
<enum name='HAVE_LONG_LONG' value64='1'/>
<enum name='HAVE_LSTAT' value64='1'/>
<enum name='HAVE_MAKEDEV' value64='1'/>
<enum name='HAVE_MEMMOVE' value64='1'/>
<enum name='HAVE_MEMORY_H' value64='1'/>
<enum name='HAVE_MKFIFO' value64='1'/>
<enum name='HAVE_MKNOD' value64='1'/>
<enum name='HAVE_MKTIME' value64='1'/>
<enum name='HAVE_MMAP' value64='1'/>
<enum name='HAVE_NCURSES_H' value64='1'/>
<enum name='HAVE_NICE' value64='1'/>
<enum name='HAVE_OPENPTY' value64='1'/>
<enum name='HAVE_OSX105_SDK' value64='1'/>
<enum name='HAVE_PATHCONF' value64='1'/>
<enum name='HAVE_PAUSE' value64='1'/>
<enum name='HAVE_PROTOTYPES' value64='1'/>
<enum name='HAVE_PTHREAD_ATFORK' value64='1'/>
<enum name='HAVE_PTHREAD_H' value64='1'/>
<enum name='HAVE_PTHREAD_SIGMASK' value64='1'/>
<enum name='HAVE_PUTENV' value64='1'/>
<enum name='HAVE_READLINK' value64='1'/>
<enum name='HAVE_REALPATH' value64='1'/>
<enum name='HAVE_RL_CALLBACK' value64='1'/>
<enum name='HAVE_RL_COMPLETION_APPEND_CHARACTER' value64='1'/>
<enum name='HAVE_RL_COMPLETION_MATCHES' value64='1'/>
<enum name='HAVE_RL_PRE_INPUT_HOOK' value64='1'/>
<enum name='HAVE_ROUND' value64='1'/>
<enum name='HAVE_SELECT' value64='1'/>
<enum name='HAVE_SEM_GETVALUE' value64='1'/>
<enum name='HAVE_SEM_OPEN' value64='1'/>
<enum name='HAVE_SEM_UNLINK' value64='1'/>
<enum name='HAVE_SETEGID' value64='1'/>
<enum name='HAVE_SETEUID' value64='1'/>
<enum name='HAVE_SETGID' value64='1'/>
<enum name='HAVE_SETGROUPS' value64='1'/>
<enum name='HAVE_SETITIMER' value64='1'/>
<enum name='HAVE_SETLOCALE' value64='1'/>
<enum name='HAVE_SETPGID' value64='1'/>
<enum name='HAVE_SETPGRP' value64='1'/>
<enum name='HAVE_SETREGID' value64='1'/>
<enum name='HAVE_SETREUID' value64='1'/>
<enum name='HAVE_SETSID' value64='1'/>
<enum name='HAVE_SETUID' value64='1'/>
<enum name='HAVE_SETVBUF' value64='1'/>
<enum name='HAVE_SIGACTION' value64='1'/>
<enum name='HAVE_SIGINTERRUPT' value64='1'/>
<enum name='HAVE_SIGNAL_H' value64='1'/>
<enum name='HAVE_SIGRELSE' value64='1'/>
<enum name='HAVE_SNPRINTF' value64='1'/>
<enum name='HAVE_SOCKADDR_SA_LEN' value64='1'/>
<enum name='HAVE_SOCKADDR_STORAGE' value64='1'/>
<enum name='HAVE_SOCKETPAIR' value64='1'/>
<enum name='HAVE_SPAWN_H' value64='1'/>
<enum name='HAVE_SSIZE_T' value64='1'/>
<enum name='HAVE_STATVFS' value64='1'/>
<enum name='HAVE_STAT_TV_NSEC2' value64='1'/>
<enum name='HAVE_STDARG_PROTOTYPES' value64='1'/>
<enum name='HAVE_STDINT_H' value64='1'/>
<enum name='HAVE_STDLIB_H' value64='1'/>
<enum name='HAVE_STRDUP' value64='1'/>
<enum name='HAVE_STRFTIME' value64='1'/>
<enum name='HAVE_STRINGS_H' value64='1'/>
<enum name='HAVE_STRING_H' value64='1'/>
<enum name='HAVE_STRUCT_STAT_ST_BIRTHTIME' value64='1'/>
<enum name='HAVE_STRUCT_STAT_ST_BLKSIZE' value64='1'/>
<enum name='HAVE_STRUCT_STAT_ST_BLOCKS' value64='1'/>
<enum name='HAVE_STRUCT_STAT_ST_FLAGS' value64='1'/>
<enum name='HAVE_STRUCT_STAT_ST_GEN' value64='1'/>
<enum name='HAVE_STRUCT_STAT_ST_RDEV' value64='1'/>
<enum name='HAVE_STRUCT_TM_TM_ZONE' value64='1'/>
<enum name='HAVE_ST_BLOCKS' value64='1'/>
<enum name='HAVE_SYMLINK' value64='1'/>
<enum name='HAVE_SYSCONF' value64='1'/>
<enum name='HAVE_SYSEXITS_H' value64='1'/>
<enum name='HAVE_SYS_EVENT_H' value64='1'/>
<enum name='HAVE_SYS_FILE_H' value64='1'/>
<enum name='HAVE_SYS_LOCK_H' value64='1'/>
<enum name='HAVE_SYS_PARAM_H' value64='1'/>
<enum name='HAVE_SYS_POLL_H' value64='1'/>
<enum name='HAVE_SYS_RESOURCE_H' value64='1'/>
<enum name='HAVE_SYS_SELECT_H' value64='1'/>
<enum name='HAVE_SYS_SOCKET_H' value64='1'/>
<enum name='HAVE_SYS_STATVFS_H' value64='1'/>
<enum name='HAVE_SYS_STAT_H' value64='1'/>
<enum name='HAVE_SYS_TIMES_H' value64='1'/>
<enum name='HAVE_SYS_TIME_H' value64='1'/>
<enum name='HAVE_SYS_TYPES_H' value64='1'/>
<enum name='HAVE_SYS_UN_H' value64='1'/>
<enum name='HAVE_SYS_UTSNAME_H' value64='1'/>
<enum name='HAVE_SYS_WAIT_H' value64='1'/>
<enum name='HAVE_TCGETPGRP' value64='1'/>
<enum name='HAVE_TCSETPGRP' value64='1'/>
<enum name='HAVE_TEMPNAM' value64='1'/>
<enum name='HAVE_TERMIOS_H' value64='1'/>
<enum name='HAVE_TERM_H' value64='1'/>
<enum name='HAVE_TGAMMA' value64='1'/>
<enum name='HAVE_TIMEGM' value64='1'/>
<enum name='HAVE_TIMES' value64='1'/>
<enum name='HAVE_TMPFILE' value64='1'/>
<enum name='HAVE_TMPNAM' value64='1'/>
<enum name='HAVE_TM_ZONE' value64='1'/>
<enum name='HAVE_TRUNCATE' value64='1'/>
<enum name='HAVE_UINT32_T' value64='1'/>
<enum name='HAVE_UINT64_T' value64='1'/>
<enum name='HAVE_UINTPTR_T' value64='1'/>
<enum name='HAVE_UNAME' value64='1'/>
<enum name='HAVE_UNISTD_H' value64='1'/>
<enum name='HAVE_UNSETENV' value64='1'/>
<enum name='HAVE_UTIL_H' value64='1'/>
<enum name='HAVE_UTIMES' value64='1'/>
<enum name='HAVE_UTIME_H' value64='1'/>
<enum name='HAVE_WAIT3' value64='1'/>
<enum name='HAVE_WAIT4' value64='1'/>
<enum name='HAVE_WAITPID' value64='1'/>
<enum name='HAVE_WCHAR_H' value64='1'/>
<enum name='HAVE_WCSCOLL' value64='1'/>
<enum name='HAVE_WORKING_TZSET' value64='1'/>
<enum name='HAVE_ZLIB_COPY' value64='1'/>
<enum name='IMPORT_FROM' value64='109'/>
<enum name='IMPORT_NAME' value64='108'/>
<enum name='IMPORT_STAR' value64='84'/>
<enum name='INDENT' value64='5'/>
<enum name='INPLACE_ADD' value64='55'/>
<enum name='INPLACE_AND' value64='77'/>
<enum name='INPLACE_DIVIDE' value64='58'/>
<enum name='INPLACE_FLOOR_DIVIDE' value64='28'/>
<enum name='INPLACE_LSHIFT' value64='75'/>
<enum name='INPLACE_MODULO' value64='59'/>
<enum name='INPLACE_MULTIPLY' value64='57'/>
<enum name='INPLACE_OR' value64='79'/>
<enum name='INPLACE_POWER' value64='67'/>
<enum name='INPLACE_RSHIFT' value64='76'/>
<enum name='INPLACE_SUBTRACT' value64='56'/>
<enum name='INPLACE_TRUE_DIVIDE' value64='29'/>
<enum name='INPLACE_XOR' value64='78'/>
<enum name='ITEM' value64='260'/>
<enum name='IfExp_kind' value64='5'/>
<enum name='If_kind' value64='10'/>
<enum name='ImportFrom_kind' value64='17'/>
<enum name='Import_kind' value64='16'/>
<enum name='In' value64='9'/>
<enum name='Index_kind' value64='4'/>
<enum name='Interactive_kind' value64='2'/>
<enum name='Invert' value64='1'/>
<enum name='Is' value64='7'/>
<enum name='IsNot' value64='8'/>
<enum name='JUMP_ABSOLUTE' value64='113'/>
<enum name='JUMP_FORWARD' value64='110'/>
<enum name='JUMP_IF_FALSE_OR_POP' value64='111'/>
<enum name='JUMP_IF_TRUE_OR_POP' value64='112'/>
<enum name='LBRACE' value64='26'/>
<enum name='LEFTSHIFT' value64='34'/>
<enum name='LEFTSHIFTEQUAL' value64='45'/>
<enum name='LESS' value64='20'/>
<enum name='LESSEQUAL' value64='30'/>
<enum name='LIST_APPEND' value64='94'/>
<enum name='LOAD_ATTR' value64='106'/>
<enum name='LOAD_CLOSURE' value64='135'/>
<enum name='LOAD_CONST' value64='100'/>
<enum name='LOAD_DEREF' value64='136'/>
<enum name='LOAD_FAST' value64='124'/>
<enum name='LOAD_GLOBAL' value64='116'/>
<enum name='LOAD_LOCALS' value64='82'/>
<enum name='LOAD_NAME' value64='101'/>
<enum name='LOCAL' value64='1'/>
<enum name='LPAR' value64='7'/>
<enum name='LSQB' value64='9'/>
<enum name='LShift' value64='7'/>
<enum name='Lambda_kind' value64='4'/>
<enum name='ListComp_kind' value64='8'/>
<enum name='List_kind' value64='21'/>
<enum name='Load' value64='1'/>
<enum name='Lt' value64='3'/>
<enum name='LtE' value64='4'/>
<enum name='MAKE_CLOSURE' value64='134'/>
<enum name='MAKE_FUNCTION' value64='132'/>
<enum name='MAP_ADD' value64='147'/>
<enum name='MASK' value64='1073741823'/>
<enum name='METH_CLASS' value64='16'/>
<enum name='METH_COEXIST' value64='64'/>
<enum name='METH_KEYWORDS' value64='2'/>
<enum name='METH_NOARGS' value64='4'/>
<enum name='METH_O' value64='8'/>
<enum name='METH_OLDARGS' value64='0'/>
<enum name='METH_STATIC' value64='32'/>
<enum name='METH_VARARGS' value64='1'/>
<enum name='MINEQUAL' value64='38'/>
<enum name='MINUS' value64='15'/>
<enum name='MSTART' value64='256'/>
<enum name='MVWDELCH_IS_EXPRESSION' value64='1'/>
<enum name='Mod' value64='5'/>
<enum name='ModuleBlock' value64='2'/>
<enum name='Module_kind' value64='1'/>
<enum name='Mult' value64='3'/>
<enum name='NAME' value64='1'/>
<enum name='NCURSES_OPAQUE' value64='0'/>
<enum name='NEWLINE' value64='4'/>
<enum name='NOP' value64='9'/>
<enum name='NOTEQUAL' value64='29'/>
<enum name='NOWAIT_LOCK' value64='0'/>
<enum name='NT_OFFSET' value64='256'/>
<enum name='NUMBER' value64='2'/>
<enum name='N_TOKENS' value64='53'/>
<enum name='Name_kind' value64='20'/>
<enum name='Not' value64='2'/>
<enum name='NotEq' value64='2'/>
<enum name='NotIn' value64='10'/>
<enum name='Num_kind' value64='16'/>
<enum name='OP' value64='51'/>
<enum name='OPT_BARE_EXEC' value64='4'/>
<enum name='OPT_EXEC' value64='2'/>
<enum name='OPT_IMPORT_STAR' value64='1'/>
<enum name='OPT_TOPLEVEL' value64='8'/>
<enum name='Or' value64='2'/>
<enum name='PERCENT' value64='24'/>
<enum name='PERCENTEQUAL' value64='41'/>
<enum name='PLUS' value64='14'/>
<enum name='PLUSEQUAL' value64='37'/>
<enum name='POP_BLOCK' value64='87'/>
<enum name='POP_JUMP_IF_FALSE' value64='114'/>
<enum name='POP_JUMP_IF_TRUE' value64='115'/>
<enum name='POP_TOP' value64='1'/>
<enum name='PRINT_EXPR' value64='70'/>
<enum name='PRINT_ITEM' value64='71'/>
<enum name='PRINT_ITEM_TO' value64='73'/>
<enum name='PRINT_NEWLINE' value64='72'/>
<enum name='PRINT_NEWLINE_TO' value64='74'/>
<enum name='PTHREAD_SYSTEM_SCHED_SUPPORTED' value64='1'/>
<enum name='PYLONG_BITS_IN_DIGIT' value64='30'/>
<enum name='PYOS_STACK_MARGIN' value64='2048'/>
<enum name='PYTHON_API_VERSION' value64='1013'/>
<enum name='PY_CTF_ALNUM' value64='7'/>
<enum name='PY_CTF_ALPHA' value64='3'/>
<enum name='PY_CTF_DIGIT' value64='4'/>
<enum name='PY_CTF_LOWER' value64='1'/>
<enum name='PY_CTF_SPACE' value64='8'/>
<enum name='PY_CTF_UPPER' value64='2'/>
<enum name='PY_CTF_XDIGIT' value64='16'/>
<enum name='PY_ITERSEARCH_CONTAINS' value64='3'/>
<enum name='PY_ITERSEARCH_COUNT' value64='1'/>
<enum name='PY_ITERSEARCH_INDEX' value64='2'/>
<enum name='PY_LLONG_MAX' value64='9223372036854775807'/>
<enum name='PY_LLONG_MIN' value64='-9223372036854775808'/>
<enum name='PY_MAJOR_VERSION' value64='2'/>
<enum name='PY_MICRO_VERSION' value64='10'/>
<enum name='PY_MINOR_VERSION' value64='7'/>
<enum name='PY_RELEASE_LEVEL' value64='15'/>
<enum name='PY_RELEASE_LEVEL_ALPHA' value64='10'/>
<enum name='PY_RELEASE_LEVEL_BETA' value64='11'/>
<enum name='PY_RELEASE_LEVEL_FINAL' value64='15'/>
<enum name='PY_RELEASE_LEVEL_GAMMA' value64='12'/>
<enum name='PY_RELEASE_SERIAL' value64='0'/>
<enum name='PY_SIZE_MAX' value64='18446744073709551615'/>
<enum name='PY_SSIZE_T_MAX' value64='9223372036854775807'/>
<enum name='PY_SSIZE_T_MIN' value64='-9223372036854775808'/>
<enum name='PY_ULLONG_MAX' value64='18446744073709551615'/>
<enum name='PY_VERSION_HEX' value64='34015984'/>
<enum name='PY_WRITE_RESTRICTED' value64='4'/>
<enum name='Param' value64='6'/>
<enum name='Pass_kind' value64='21'/>
<enum name='Pow' value64='6'/>
<enum name='Print_kind' value64='7'/>
<enum name='PyBUF_ANY_CONTIGUOUS' value64='152'/>
<enum name='PyBUF_CONTIG' value64='9'/>
<enum name='PyBUF_CONTIG_RO' value64='8'/>
<enum name='PyBUF_C_CONTIGUOUS' value64='56'/>
<enum name='PyBUF_FORMAT' value64='4'/>
<enum name='PyBUF_FULL' value64='285'/>
<enum name='PyBUF_FULL_RO' value64='284'/>
<enum name='PyBUF_F_CONTIGUOUS' value64='88'/>
<enum name='PyBUF_INDIRECT' value64='280'/>
<enum name='PyBUF_ND' value64='8'/>
<enum name='PyBUF_READ' value64='256'/>
<enum name='PyBUF_RECORDS' value64='29'/>
<enum name='PyBUF_RECORDS_RO' value64='28'/>
<enum name='PyBUF_SHADOW' value64='1024'/>
<enum name='PyBUF_SIMPLE' value64='0'/>
<enum name='PyBUF_STRIDED' value64='25'/>
<enum name='PyBUF_STRIDED_RO' value64='24'/>
<enum name='PyBUF_STRIDES' value64='24'/>
<enum name='PyBUF_WRITABLE' value64='1'/>
<enum name='PyBUF_WRITE' value64='512'/>
<enum name='PyBUF_WRITEABLE' value64='1'/>
<enum name='PyCF_DONT_IMPLY_DEDENT' value64='512'/>
<enum name='PyCF_MASK' value64='253952'/>
<enum name='PyCF_MASK_OBSOLETE' value64='16'/>
<enum name='PyCF_ONLY_AST' value64='1024'/>
<enum name='PyCF_SOURCE_IS_UTF8' value64='256'/>
<enum name='PyCmp_BAD' value64='11'/>
<enum name='PyCmp_EQ' value64='2'/>
<enum name='PyCmp_EXC_MATCH' value64='10'/>
<enum name='PyCmp_GE' value64='5'/>
<enum name='PyCmp_GT' value64='4'/>
<enum name='PyCmp_IN' value64='6'/>
<enum name='PyCmp_IS' value64='8'/>
<enum name='PyCmp_IS_NOT' value64='9'/>
<enum name='PyCmp_LE' value64='1'/>
<enum name='PyCmp_LT' value64='0'/>
<enum name='PyCmp_NE' value64='3'/>
<enum name='PyCmp_NOT_IN' value64='7'/>
<enum name='PyCurses_API_pointers' value64='4'/>
<enum name='PyDict_MINSIZE' value64='8'/>
<enum name='PyFloat_STR_PRECISION' value64='12'/>
<enum name='PyGC_HEAD_SIZE' value64='0'/>
<enum name='PyGILState_LOCKED' value64='0'/>
<enum name='PyGILState_UNLOCKED' value64='1'/>
<enum name='PyLong_BASE' value64='1073741824'/>
<enum name='PyLong_MASK' value64='1073741823'/>
<enum name='PyLong_SHIFT' value64='30'/>
<enum name='PyPARSE_DONT_IMPLY_DEDENT' value64='2'/>
<enum name='PyPARSE_PRINT_IS_FUNCTION' value64='4'/>
<enum name='PyPARSE_UNICODE_LITERALS' value64='8'/>
<enum name='PySet_MINSIZE' value64='8'/>
<enum name='PyTrace_CALL' value64='0'/>
<enum name='PyTrace_C_CALL' value64='4'/>
<enum name='PyTrace_C_EXCEPTION' value64='5'/>
<enum name='PyTrace_C_RETURN' value64='6'/>
<enum name='PyTrace_EXCEPTION' value64='1'/>
<enum name='PyTrace_LINE' value64='2'/>
<enum name='PyTrace_RETURN' value64='3'/>
<enum name='PyTrash_UNWIND_LEVEL' value64='50'/>
<enum name='PyWrapperFlag_KEYWORDS' value64='1'/>
<enum name='Py_DTSF_ADD_DOT_0' value64='2'/>
<enum name='Py_DTSF_ALT' value64='4'/>
<enum name='Py_DTSF_SIGN' value64='1'/>
<enum name='Py_DTST_FINITE' value64='0'/>
<enum name='Py_DTST_INFINITE' value64='1'/>
<enum name='Py_DTST_NAN' value64='2'/>
<enum name='Py_END_OF_BUFFER' value64='-1'/>
<enum name='Py_EQ' value64='2'/>
<enum name='Py_GE' value64='5'/>
<enum name='Py_GT' value64='4'/>
<enum name='Py_INVALID_SIZE' value64='-1'/>
<enum name='Py_LE' value64='1'/>
<enum name='Py_LT' value64='0'/>
<enum name='Py_MARSHAL_VERSION' value64='2'/>
<enum name='Py_MATH_E' value64='2.7182818284590452354'/>
<enum name='Py_MATH_El' value64='2.7182818284590452353602874713526625L'/>
<enum name='Py_MATH_PI' value64='3.14159265358979323846'/>
<enum name='Py_MATH_PIl' value64='3.1415926535897932384626433832795029L'/>
<enum name='Py_NE' value64='3'/>
<enum name='Py_PRINT_RAW' value64='1'/>
<enum name='Py_TPFLAGS_BASETYPE' value64='1024'/>
<enum name='Py_TPFLAGS_BASE_EXC_SUBCLASS' value64='1073741824'/>
<enum name='Py_TPFLAGS_BYTES_SUBCLASS' value64='134217728'/>
<enum name='Py_TPFLAGS_CHECKTYPES' value64='16'/>
<enum name='Py_TPFLAGS_DEFAULT' value64='131563'/>
<enum name='Py_TPFLAGS_DEFAULT_CORE' value64='393707'/>
<enum name='Py_TPFLAGS_DEFAULT_EXTERNAL' value64='131563'/>
<enum name='Py_TPFLAGS_DICT_SUBCLASS' value64='536870912'/>
<enum name='Py_TPFLAGS_GC' value64='0'/>
<enum name='Py_TPFLAGS_HAVE_CLASS' value64='256'/>
<enum name='Py_TPFLAGS_HAVE_GC' value64='16384'/>
<enum name='Py_TPFLAGS_HAVE_GETCHARBUFFER' value64='1'/>
<enum name='Py_TPFLAGS_HAVE_INDEX' value64='131072'/>
<enum name='Py_TPFLAGS_HAVE_INPLACEOPS' value64='8'/>
<enum name='Py_TPFLAGS_HAVE_ITER' value64='128'/>
<enum name='Py_TPFLAGS_HAVE_NEWBUFFER' value64='2097152'/>
<enum name='Py_TPFLAGS_HAVE_RICHCOMPARE' value64='32'/>
<enum name='Py_TPFLAGS_HAVE_SEQUENCE_IN' value64='2'/>
<enum name='Py_TPFLAGS_HAVE_STACKLESS_EXTENSION' value64='0'/>
<enum name='Py_TPFLAGS_HAVE_VERSION_TAG' value64='262144'/>
<enum name='Py_TPFLAGS_HAVE_WEAKREFS' value64='64'/>
<enum name='Py_TPFLAGS_HEAPTYPE' value64='512'/>
<enum name='Py_TPFLAGS_INT_SUBCLASS' value64='8388608'/>
<enum name='Py_TPFLAGS_IS_ABSTRACT' value64='1048576'/>
<enum name='Py_TPFLAGS_LIST_SUBCLASS' value64='33554432'/>
<enum name='Py_TPFLAGS_LONG_SUBCLASS' value64='16777216'/>
<enum name='Py_TPFLAGS_READY' value64='4096'/>
<enum name='Py_TPFLAGS_READYING' value64='8192'/>
<enum name='Py_TPFLAGS_STRING_SUBCLASS' value64='134217728'/>
<enum name='Py_TPFLAGS_TUPLE_SUBCLASS' value64='67108864'/>
<enum name='Py_TPFLAGS_TYPE_SUBCLASS' value64='2147483648'/>
<enum name='Py_TPFLAGS_UNICODE_SUBCLASS' value64='268435456'/>
<enum name='Py_TPFLAGS_VALID_VERSION_TAG' value64='524288'/>
<enum name='Py_UNICODE_REPLACEMENT_CHARACTER' value64='65533'/>
<enum name='Py_UNICODE_SIZE' value64='2'/>
<enum name='Py_USING_UNICODE' value64='1'/>
<enum name='Py_eval_input' value64='258'/>
<enum name='Py_file_input' value64='257'/>
<enum name='Py_single_input' value64='256'/>
<enum name='RAISE_VARARGS' value64='130'/>
<enum name='RBRACE' value64='27'/>
<enum name='READONLY' value64='1'/>
<enum name='READ_RESTRICTED' value64='2'/>
<enum name='RESTRICTED' value64='6'/>
<enum name='RETURN_VALUE' value64='83'/>
<enum name='RHS' value64='258'/>
<enum name='RIGHTSHIFT' value64='35'/>
<enum name='RIGHTSHIFTEQUAL' value64='46'/>
<enum name='RO' value64='1'/>
<enum name='ROT_FOUR' value64='5'/>
<enum name='ROT_THREE' value64='3'/>
<enum name='ROT_TWO' value64='2'/>
<enum name='RPAR' value64='8'/>
<enum name='RSQB' value64='10'/>
<enum name='RShift' value64='8'/>
<enum name='RULE' value64='257'/>
<enum name='Raise_kind' value64='12'/>
<enum name='Repr_kind' value64='15'/>
<enum name='Return_kind' value64='3'/>
<enum name='SCOPE_MASK' value64='7'/>
<enum name='SCOPE_OFF' value64='11'/>
<enum name='SEMI' value64='13'/>
<enum name='SEP' value64='47'/>
<enum name='SETUP_EXCEPT' value64='121'/>
<enum name='SETUP_FINALLY' value64='122'/>
<enum name='SETUP_LOOP' value64='120'/>
<enum name='SETUP_WITH' value64='143'/>
<enum name='SET_ADD' value64='146'/>
<enum name='SHIFT' value64='30'/>
<enum name='SIZEOF_DOUBLE' value64='8'/>
<enum name='SIZEOF_FLOAT' value64='4'/>
<enum name='SIZEOF_FPOS_T' value64='8'/>
<enum name='SIZEOF_INT' value64='4'/>
<enum name='SIZEOF_LONG' value64='8'/>
<enum name='SIZEOF_LONG_DOUBLE' value64='16'/>
<enum name='SIZEOF_LONG_LONG' value64='8'/>
<enum name='SIZEOF_OFF_T' value64='8'/>
<enum name='SIZEOF_PID_T' value64='4'/>
<enum name='SIZEOF_PTHREAD_T' value64='8'/>
<enum name='SIZEOF_SHORT' value64='2'/>
<enum name='SIZEOF_SIZE_T' value64='8'/>
<enum name='SIZEOF_TIME_T' value64='8'/>
<enum name='SIZEOF_UINTPTR_T' value64='8'/>
<enum name='SIZEOF_VOID_P' value64='8'/>
<enum name='SIZEOF_WCHAR_T' value64='4'/>
<enum name='SIZEOF__BOOL' value64='1'/>
<enum name='SLASH' value64='17'/>
<enum name='SLASHEQUAL' value64='40'/>
<enum name='SLICE' value64='30'/>
<enum name='SSTATE_INTERNED_IMMORTAL' value64='2'/>
<enum name='SSTATE_INTERNED_MORTAL' value64='1'/>
<enum name='SSTATE_NOT_INTERNED' value64='0'/>
<enum name='STAR' value64='16'/>
<enum name='STAREQUAL' value64='39'/>
<enum name='STDC_HEADERS' value64='1'/>
<enum name='STOP_CODE' value64='0'/>
<enum name='STORE_ATTR' value64='95'/>
<enum name='STORE_DEREF' value64='137'/>
<enum name='STORE_FAST' value64='125'/>
<enum name='STORE_GLOBAL' value64='97'/>
<enum name='STORE_MAP' value64='54'/>
<enum name='STORE_NAME' value64='90'/>
<enum name='STORE_SLICE' value64='40'/>
<enum name='STORE_SUBSCR' value64='60'/>
<enum name='STRING' value64='3'/>
<enum name='SYS_SELECT_WITH_SYS_TIME' value64='1'/>
<enum name='SetComp_kind' value64='9'/>
<enum name='Set_kind' value64='7'/>
<enum name='Slice_kind' value64='2'/>
<enum name='Store' value64='2'/>
<enum name='Str_kind' value64='17'/>
<enum name='Sub' value64='2'/>
<enum name='Subscript_kind' value64='19'/>
<enum name='Suite_kind' value64='4'/>
<enum name='TANH_PRESERVES_ZERO_SIGN' value64='1'/>
<enum name='TILDE' value64='32'/>
<enum name='TIME_WITH_SYS_TIME' value64='1'/>
<enum name='T_BOOL' value64='14'/>
<enum name='T_BYTE' value64='8'/>
<enum name='T_CHAR' value64='7'/>
<enum name='T_DOUBLE' value64='4'/>
<enum name='T_FLOAT' value64='3'/>
<enum name='T_INT' value64='1'/>
<enum name='T_LONG' value64='2'/>
<enum name='T_LONGLONG' value64='17'/>
<enum name='T_OBJECT' value64='6'/>
<enum name='T_OBJECT_EX' value64='16'/>
<enum name='T_PYSSIZET' value64='19'/>
<enum name='T_SHORT' value64='0'/>
<enum name='T_STRING' value64='5'/>
<enum name='T_STRING_INPLACE' value64='13'/>
<enum name='T_UBYTE' value64='9'/>
<enum name='T_UINT' value64='11'/>
<enum name='T_ULONG' value64='12'/>
<enum name='T_ULONGLONG' value64='18'/>
<enum name='T_USHORT' value64='10'/>
<enum name='TryExcept_kind' value64='13'/>
<enum name='TryFinally_kind' value64='14'/>
<enum name='Tuple_kind' value64='22'/>
<enum name='UAdd' value64='3'/>
<enum name='UNARY_CONVERT' value64='13'/>
<enum name='UNARY_INVERT' value64='15'/>
<enum name='UNARY_NEGATIVE' value64='11'/>
<enum name='UNARY_NOT' value64='12'/>
<enum name='UNARY_POSITIVE' value64='10'/>
<enum name='UNPACK_SEQUENCE' value64='92'/>
<enum name='USE' value64='8'/>
<enum name='USE_TOOLBOX_OBJECT_GLUE' value64='1'/>
<enum name='USub' value64='4'/>
<enum name='UnaryOp_kind' value64='3'/>
<enum name='VA_LIST_IS_ARRAY' value64='1'/>
<enum name='VBAR' value64='18'/>
<enum name='VBAREQUAL' value64='43'/>
<enum name='WAIT_LOCK' value64='1'/>
<enum name='WINDOW_HAS_FLAGS' value64='1'/>
<enum name='WITH_CLEANUP' value64='81'/>
<enum name='WITH_CYCLE_GC' value64='1'/>
<enum name='WITH_DOC_STRINGS' value64='1'/>
<enum name='WITH_DYLD' value64='1'/>
<enum name='WITH_NEXT_FRAMEWORK' value64='1'/>
<enum name='WITH_PYMALLOC' value64='1'/>
<enum name='WITH_THREAD' value64='1'/>
<enum name='While_kind' value64='9'/>
<enum name='With_kind' value64='11'/>
<enum name='YIELD_VALUE' value64='86'/>
<enum name='Yield_kind' value64='12'/>
<enum name='and_expr' value64='312'/>
<enum name='and_test' value64='306'/>
<enum name='arglist' value64='330'/>
<enum name='argument' value64='331'/>
<enum name='arith_expr' value64='314'/>
<enum name='assert_stmt' value64='291'/>
<enum name='atom' value64='318'/>
<enum name='augassign' value64='271'/>
<enum name='break_stmt' value64='276'/>
<enum name='classdef' value64='329'/>
<enum name='comp_for' value64='336'/>
<enum name='comp_if' value64='337'/>
<enum name='comp_iter' value64='335'/>
<enum name='comp_op' value64='309'/>
<enum name='comparison' value64='308'/>
<enum name='compound_stmt' value64='292'/>
<enum name='continue_stmt' value64='277'/>
<enum name='decorated' value64='261'/>
<enum name='decorator' value64='259'/>
<enum name='decorators' value64='260'/>
<enum name='del_stmt' value64='273'/>
<enum name='dictorsetmaker' value64='328'/>
<enum name='dotted_as_name' value64='285'/>
<enum name='dotted_as_names' value64='287'/>
<enum name='dotted_name' value64='288'/>
<enum name='encoding_decl' value64='339'/>
<enum name='eval_input' value64='258'/>
<enum name='except_clause' value64='299'/>
<enum name='exec_stmt' value64='290'/>
<enum name='expr' value64='310'/>
<enum name='expr_stmt' value64='270'/>
<enum name='exprlist' value64='326'/>
<enum name='factor' value64='316'/>
<enum name='file_input' value64='257'/>
<enum name='flow_stmt' value64='275'/>
<enum name='for_stmt' value64='295'/>
<enum name='fpdef' value64='265'/>
<enum name='fplist' value64='266'/>
<enum name='funcdef' value64='262'/>
<enum name='global_stmt' value64='289'/>
<enum name='if_stmt' value64='293'/>
<enum name='import_as_name' value64='284'/>
<enum name='import_as_names' value64='286'/>
<enum name='import_from' value64='283'/>
<enum name='import_name' value64='282'/>
<enum name='import_stmt' value64='281'/>
<enum name='lambdef' value64='321'/>
<enum name='list_for' value64='333'/>
<enum name='list_if' value64='334'/>
<enum name='list_iter' value64='332'/>
<enum name='listmaker' value64='319'/>
<enum name='not_test' value64='307'/>
<enum name='old_lambdef' value64='303'/>
<enum name='old_test' value64='302'/>
<enum name='or_test' value64='305'/>
<enum name='parameters' value64='263'/>
<enum name='pass_stmt' value64='274'/>
<enum name='power' value64='317'/>
<enum name='print_stmt' value64='272'/>
<enum name='raise_stmt' value64='280'/>
<enum name='return_stmt' value64='278'/>
<enum name='shift_expr' value64='313'/>
<enum name='simple_stmt' value64='268'/>
<enum name='single_input' value64='256'/>
<enum name='sliceop' value64='325'/>
<enum name='small_stmt' value64='269'/>
<enum name='stmt' value64='267'/>
<enum name='subscript' value64='324'/>
<enum name='subscriptlist' value64='323'/>
<enum name='suite' value64='300'/>
<enum name='term' value64='315'/>
<enum name='test' value64='304'/>
<enum name='testlist' value64='327'/>
<enum name='testlist1' value64='338'/>
<enum name='testlist_comp' value64='320'/>
<enum name='testlist_safe' value64='301'/>
<enum name='trailer' value64='322'/>
<enum name='try_stmt' value64='296'/>
<enum name='varargslist' value64='264'/>
<enum name='while_stmt' value64='294'/>
<enum name='with_item' value64='298'/>
<enum name='with_stmt' value64='297'/>
<enum name='xor_expr' value64='311'/>
<enum name='yield_expr' value64='340'/>
<enum name='yield_stmt' value64='279'/>
<function name='AEDesc_Convert'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='AppleEvent*' type64='^{AEDesc=I^^{OpaqueAEDataStorageType}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='AEDesc_New'>
<arg declared_type64='AppleEvent*' type64='^{AEDesc=I^^{OpaqueAEDataStorageType}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='AEDesc_NewBorrowed'>
<arg declared_type64='AppleEvent*' type64='^{AEDesc=I^^{OpaqueAEDataStorageType}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='CFArrayRefObj_Convert'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='CFArrayRef*' type64='^^{__CFArray}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='CFArrayRefObj_New'>
<arg declared_type64='CFArrayRef' type64='^{__CFArray=}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='CFDictionaryRefObj_Convert'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='CFDictionaryRef*' type64='^^{__CFDictionary}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='CFDictionaryRefObj_New'>
<arg declared_type64='CFDictionaryRef' type64='^{__CFDictionary=}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='CFMutableArrayRefObj_Convert'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='CFMutableArrayRef*' type64='^^{__CFArray}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='CFMutableArrayRefObj_New'>
<arg declared_type64='CFMutableArrayRef' type64='^{__CFArray=}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='CFMutableDictionaryRefObj_Convert'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='CFMutableDictionaryRef*' type64='^^{__CFDictionary}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='CFMutableDictionaryRefObj_New'>
<arg declared_type64='CFMutableDictionaryRef' type64='^{__CFDictionary=}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='CFMutableStringRefObj_Convert'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='CFMutableStringRef*' type64='^^{__CFString}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='CFMutableStringRefObj_New'>
<arg declared_type64='CFMutableStringRef' type64='^{__CFString=}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='CFObj_Convert'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='CFTypeRef*' type64='^^v'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='CFObj_New'>
<arg declared_type64='CFTypeRef' type64='@'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='CFStringRefObj_Convert'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='CFStringRef*' type64='^^{__CFString}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='CFStringRefObj_New'>
<arg declared_type64='CFStringRef' type64='^{__CFString=}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='CFTypeRefObj_Convert'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='CFTypeRef*' type64='^^v'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='CFTypeRefObj_New'>
<arg declared_type64='CFTypeRef' type64='@'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='CFURLRefObj_Convert'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='CFURLRef*' type64='^^{__CFURL}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='CFURLRefObj_New'>
<arg declared_type64='CFURLRef' type64='^{__CFURL=}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='CmpInstObj_Convert'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='ComponentInstance*' type64='^^{ComponentInstanceRecord}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='CmpInstObj_New'>
<arg declared_type64='ComponentInstance' type64='^{ComponentInstanceRecord=[1q]}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='CmpObj_Convert'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Component*' type64='^^{ComponentRecord}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='CmpObj_New'>
<arg declared_type64='Component' type64='^{ComponentRecord=[1q]}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='OptResObj_Convert'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Handle*' type64='^^*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='OptResObj_New'>
<arg declared_type64='Handle' type64='^*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='OptionalCFURLRefObj_Convert'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='CFURLRef*' type64='^^{__CFURL}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyAST_Check'>
<arg declared_type64='PyObject*' name='obj' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyAST_Compile'>
<arg declared_type64='struct _mod*' type64='^{_mod=i(?={?=^{?}}{?=^{?}}{?=^{_expr}}{?=^{?}})}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='PyCompilerFlags*' type64='^{_PyCompilerFlags=i}'/>
<arg declared_type64='PyArena*' type64='^{_arena=}'/>
<retval declared_type64='PyCodeObject*' type64='^{_PyCodeObject=q^{_typeobject}iiii^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i^{_object}^v^{_object}}'/>
</function>
<function name='PyAST_FromNode'>
<arg const='true' declared_type64='int*' type64='^i'/>
<arg declared_type64='PyCompilerFlags*' name='flags' type64='^{_PyCompilerFlags=i}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='PyArena*' type64='^{_arena=}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyAST_mod2obj'>
<arg declared_type64='mod_ty' name='t' type64='^{_mod=i(?={?=^{?}}{?=^{?}}{?=^{_expr}}{?=^{?}})}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyAST_obj2mod'>
<arg declared_type64='PyObject*' name='ast' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyArena*' name='arena' type64='^{_arena=}'/>
<arg declared_type64='int' name='mode' type64='i'/>
<retval declared_type64='mod_ty' type64='^{_mod=i(?={?=^{?}}{?=^{?}}{?=^{_expr}}{?=^{?}})}'/>
</function>
<function name='PyArena_AddPyObject'>
<arg declared_type64='PyArena*' type64='^{_arena=}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyArena_Free'>
<arg declared_type64='PyArena*' type64='^{_arena=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyArena_Malloc'>
<arg declared_type64='PyArena*' type64='^{_arena=}'/>
<arg declared_type64='size_t' name='size' type64='Q'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='PyArena_New'>
<retval declared_type64='PyArena*' type64='^{_arena=}'/>
</function>
<function name='PyArg_Parse' variadic='true'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyArg_ParseTuple' variadic='true'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyArg_ParseTupleAndKeywords' variadic='true'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyArg_UnpackTuple' variadic='true'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyArg_VaParse'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyArg_VaParseTupleAndKeywords'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyBool_FromLong'>
<arg declared_type64='long' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyBuffer_FillContiguousStrides'>
<arg declared_type64='int' name='ndims' type64='i'/>
<arg declared_type64='Py_ssize_t*' name='shape' type64='^q'/>
<arg declared_type64='Py_ssize_t*' name='strides' type64='^q'/>
<arg declared_type64='int' name='itemsize' type64='i'/>
<arg declared_type64='char' name='fort' type64='c'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyBuffer_FillInfo'>
<arg declared_type64='Py_buffer*' name='view' type64='^{bufferinfo=^v^{_object}qqii*^q^q^q[2q]^v}'/>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='void*' name='buf' type64='^v'/>
<arg declared_type64='Py_ssize_t' name='len' type64='q'/>
<arg declared_type64='int' name='readonly' type64='i'/>
<arg declared_type64='int' name='flags' type64='i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyBuffer_FromContiguous'>
<arg declared_type64='Py_buffer*' name='view' type64='^{bufferinfo=^v^{_object}qqii*^q^q^q[2q]^v}'/>
<arg declared_type64='void*' name='buf' type64='^v'/>
<arg declared_type64='Py_ssize_t' name='len' type64='q'/>
<arg declared_type64='char' name='fort' type64='c'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyBuffer_FromMemory'>
<arg declared_type64='void*' name='ptr' type64='^v'/>
<arg declared_type64='Py_ssize_t' name='size' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyBuffer_FromObject'>
<arg declared_type64='PyObject*' name='base' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' name='offset' type64='q'/>
<arg declared_type64='Py_ssize_t' name='size' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyBuffer_FromReadWriteMemory'>
<arg declared_type64='void*' name='ptr' type64='^v'/>
<arg declared_type64='Py_ssize_t' name='size' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyBuffer_FromReadWriteObject'>
<arg declared_type64='PyObject*' name='base' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' name='offset' type64='q'/>
<arg declared_type64='Py_ssize_t' name='size' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyBuffer_GetPointer'>
<arg declared_type64='Py_buffer*' name='view' type64='^{bufferinfo=^v^{_object}qqii*^q^q^q[2q]^v}'/>
<arg declared_type64='Py_ssize_t*' name='indices' type64='^q'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='PyBuffer_IsContiguous'>
<arg declared_type64='Py_buffer*' name='view' type64='^{bufferinfo=^v^{_object}qqii*^q^q^q[2q]^v}'/>
<arg declared_type64='char' name='fort' type64='c'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyBuffer_New'>
<arg declared_type64='Py_ssize_t' name='size' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyBuffer_Release'>
<arg declared_type64='Py_buffer*' name='view' type64='^{bufferinfo=^v^{_object}qqii*^q^q^q[2q]^v}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyBuffer_SizeFromFormat'>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyBuffer_ToContiguous'>
<arg declared_type64='void*' name='buf' type64='^v'/>
<arg declared_type64='Py_buffer*' name='view' type64='^{bufferinfo=^v^{_object}qqii*^q^q^q[2q]^v}'/>
<arg declared_type64='Py_ssize_t' name='len' type64='q'/>
<arg declared_type64='char' name='fort' type64='c'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyByteArray_AsString'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='PyByteArray_Concat'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyByteArray_Fini'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyByteArray_FromObject'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyByteArray_FromStringAndSize'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyByteArray_Init'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyByteArray_Resize'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyByteArray_Size'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PyCFunction_Call'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCFunction_ClearFreeList'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyCFunction_Fini'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyCFunction_GetFlags'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyCFunction_GetFunction'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyCFunction' function_pointer='true' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</retval>
</function>
<function name='PyCFunction_GetSelf'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCFunction_NewEx'>
<arg declared_type64='PyMethodDef*' type64='^{PyMethodDef=*^?i*}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCObject_AsVoidPtr'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='PyCObject_FromVoidPtr'>
<arg declared_type64='void*' name='cobj' type64='^v'/>
<arg declared_type64='void (*)(void *)' function_pointer='true' name='destruct' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCObject_FromVoidPtrAndDesc'>
<arg declared_type64='void*' name='cobj' type64='^v'/>
<arg declared_type64='void*' name='desc' type64='^v'/>
<arg declared_type64='void (*)(void *, void *)' function_pointer='true' name='destruct' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCObject_GetDesc'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='PyCObject_Import'>
<arg declared_type64='char*' name='module_name' type64='*'/>
<arg declared_type64='char*' name='cobject_name' type64='*'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='PyCObject_SetVoidPtr'>
<arg declared_type64='PyObject*' name='self' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='void*' name='cobj' type64='^v'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyCallIter_New'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCallable_Check'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyCapsule_GetContext'>
<arg declared_type64='PyObject*' name='capsule' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='PyCapsule_GetDestructor'>
<arg declared_type64='PyObject*' name='capsule' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyCapsule_Destructor' function_pointer='true' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void' type64='v'/>
</retval>
</function>
<function name='PyCapsule_GetName'>
<arg declared_type64='PyObject*' name='capsule' type64='^{_object=q^{_typeobject}}'/>
<retval const='true' declared_type64='char*' type64='*'/>
</function>
<function name='PyCapsule_GetPointer'>
<arg declared_type64='PyObject*' name='capsule' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='name' type64='*'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='PyCapsule_Import'>
<arg const='true' declared_type64='char*' name='name' type64='*'/>
<arg declared_type64='int' name='no_block' type64='i'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='PyCapsule_IsValid'>
<arg declared_type64='PyObject*' name='capsule' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='name' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyCapsule_New'>
<arg declared_type64='void*' name='pointer' type64='^v'/>
<arg const='true' declared_type64='char*' name='name' type64='*'/>
<arg declared_type64='PyCapsule_Destructor' function_pointer='true' name='destructor' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCapsule_SetContext'>
<arg declared_type64='PyObject*' name='capsule' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='void*' name='context' type64='^v'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyCapsule_SetDestructor'>
<arg declared_type64='PyObject*' name='capsule' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyCapsule_Destructor' function_pointer='true' name='destructor' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyCapsule_SetName'>
<arg declared_type64='PyObject*' name='capsule' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='name' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyCapsule_SetPointer'>
<arg declared_type64='PyObject*' name='capsule' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='void*' name='pointer' type64='^v'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyCell_Get'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCell_New'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCell_Set'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyClassMethod_New'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyClass_IsSubclass'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyClass_New'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCode_Addr2Line'>
<arg declared_type64='PyCodeObject*' type64='^{_PyCodeObject=q^{_typeobject}iiii^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i^{_object}^v^{_object}}'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyCode_New'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyCodeObject*' type64='^{_PyCodeObject=q^{_typeobject}iiii^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i^{_object}^v^{_object}}'/>
</function>
<function name='PyCode_NewEmpty'>
<arg const='true' declared_type64='char*' name='filename' type64='*'/>
<arg const='true' declared_type64='char*' name='funcname' type64='*'/>
<arg declared_type64='int' name='firstlineno' type64='i'/>
<retval declared_type64='PyCodeObject*' type64='^{_PyCodeObject=q^{_typeobject}iiii^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i^{_object}^v^{_object}}'/>
</function>
<function name='PyCode_Optimize'>
<arg declared_type64='PyObject*' name='code' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='consts' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='names' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='lineno_obj' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCodec_BackslashReplaceErrors'>
<arg declared_type64='PyObject*' name='exc' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCodec_Decode'>
<arg declared_type64='PyObject*' name='object' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='encoding' type64='*'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCodec_Decoder'>
<arg const='true' declared_type64='char*' name='encoding' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCodec_Encode'>
<arg declared_type64='PyObject*' name='object' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='encoding' type64='*'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCodec_Encoder'>
<arg const='true' declared_type64='char*' name='encoding' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCodec_IgnoreErrors'>
<arg declared_type64='PyObject*' name='exc' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCodec_IncrementalDecoder'>
<arg const='true' declared_type64='char*' name='encoding' type64='*'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCodec_IncrementalEncoder'>
<arg const='true' declared_type64='char*' name='encoding' type64='*'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCodec_LookupError'>
<arg const='true' declared_type64='char*' name='name' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCodec_Register'>
<arg declared_type64='PyObject*' name='search_function' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyCodec_RegisterError'>
<arg const='true' declared_type64='char*' name='name' type64='*'/>
<arg declared_type64='PyObject*' name='error' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyCodec_ReplaceErrors'>
<arg declared_type64='PyObject*' name='exc' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCodec_StreamReader'>
<arg const='true' declared_type64='char*' name='encoding' type64='*'/>
<arg declared_type64='PyObject*' name='stream' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCodec_StreamWriter'>
<arg const='true' declared_type64='char*' name='encoding' type64='*'/>
<arg declared_type64='PyObject*' name='stream' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCodec_StrictErrors'>
<arg declared_type64='PyObject*' name='exc' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyCodec_XMLCharRefReplaceErrors'>
<arg declared_type64='PyObject*' name='exc' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyComplex_AsCComplex'>
<arg declared_type64='PyObject*' name='op' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_complex' type64='{_Py_complex=dd}'/>
</function>
<function name='PyComplex_FromCComplex'>
<arg declared_type64='Py_complex' type64='{_Py_complex=dd}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyComplex_FromDoubles'>
<arg declared_type64='double' name='real' type64='d'/>
<arg declared_type64='double' name='imag' type64='d'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyComplex_ImagAsDouble'>
<arg declared_type64='PyObject*' name='op' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='double' type64='d'/>
</function>
<function name='PyComplex_RealAsDouble'>
<arg declared_type64='PyObject*' name='op' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='double' type64='d'/>
</function>
<function name='PyDescr_NewClassMethod'>
<arg declared_type64='PyTypeObject*' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<arg declared_type64='PyMethodDef*' type64='^{PyMethodDef=*^?i*}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyDescr_NewGetSet'>
<arg declared_type64='PyTypeObject*' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<arg declared_type64='struct PyGetSetDef*' type64='^{PyGetSetDef=*^?^?*^v}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyDescr_NewMember'>
<arg declared_type64='PyTypeObject*' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<arg declared_type64='struct PyMemberDef*' type64='^{PyMemberDef=*iqi*}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyDescr_NewMethod'>
<arg declared_type64='PyTypeObject*' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<arg declared_type64='PyMethodDef*' type64='^{PyMethodDef=*^?i*}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyDescr_NewWrapper'>
<arg declared_type64='PyTypeObject*' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<arg declared_type64='struct wrapperbase*' type64='^{wrapperbase=*i^v^?*i^{_object}}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyDictProxy_New'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyDict_Clear'>
<arg declared_type64='PyObject*' name='mp' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyDict_Contains'>
<arg declared_type64='PyObject*' name='mp' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='key' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyDict_Copy'>
<arg declared_type64='PyObject*' name='mp' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyDict_DelItem'>
<arg declared_type64='PyObject*' name='mp' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='key' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyDict_DelItemString'>
<arg declared_type64='PyObject*' name='dp' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='key' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyDict_Fini'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyDict_GetItem'>
<arg declared_type64='PyObject*' name='mp' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='key' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyDict_GetItemString'>
<arg declared_type64='PyObject*' name='dp' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='key' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyDict_Items'>
<arg declared_type64='PyObject*' name='mp' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyDict_Keys'>
<arg declared_type64='PyObject*' name='mp' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyDict_Merge'>
<arg declared_type64='PyObject*' name='mp' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='other' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' name='override' type64='i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyDict_MergeFromSeq2'>
<arg declared_type64='PyObject*' name='d' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='seq2' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' name='override' type64='i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyDict_New'>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyDict_Next'>
<arg declared_type64='PyObject*' name='mp' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t*' name='pos' type64='^q'/>
<arg declared_type64='PyObject**' name='key' type64='^^{_object}'/>
<arg declared_type64='PyObject**' name='value' type64='^^{_object}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyDict_SetItem'>
<arg declared_type64='PyObject*' name='mp' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='key' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='item' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyDict_SetItemString'>
<arg declared_type64='PyObject*' name='dp' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='key' type64='*'/>
<arg declared_type64='PyObject*' name='item' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyDict_Size'>
<arg declared_type64='PyObject*' name='mp' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PyDict_Update'>
<arg declared_type64='PyObject*' name='mp' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='other' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyDict_Values'>
<arg declared_type64='PyObject*' name='mp' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyErr_BadArgument'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyErr_BadInternalCall'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyErr_CheckSignals'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyErr_Clear'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyErr_Display'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyErr_ExceptionMatches'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyErr_Fetch'>
<arg declared_type64='PyObject**' type64='^^{_object}'/>
<arg declared_type64='PyObject**' type64='^^{_object}'/>
<arg declared_type64='PyObject**' type64='^^{_object}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyErr_Format' variadic='true'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' printf_format='true' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyErr_GivenExceptionMatches'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyErr_Mac'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyErr_NewException'>
<arg declared_type64='char*' name='name' type64='*'/>
<arg declared_type64='PyObject*' name='base' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='dict' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyErr_NewExceptionWithDoc'>
<arg declared_type64='char*' name='name' type64='*'/>
<arg declared_type64='char*' name='doc' type64='*'/>
<arg declared_type64='PyObject*' name='base' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='dict' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyErr_NoMemory'>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyErr_NormalizeException'>
<arg declared_type64='PyObject**' type64='^^{_object}'/>
<arg declared_type64='PyObject**' type64='^^{_object}'/>
<arg declared_type64='PyObject**' type64='^^{_object}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyErr_Occurred'>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyErr_Print'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyErr_PrintEx'>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyErr_ProgramText'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyErr_Restore'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyErr_SetFromErrno'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyErr_SetFromErrnoWithFilename'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyErr_SetFromErrnoWithFilenameObject'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyErr_SetInterrupt'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyErr_SetNone'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyErr_SetObject'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyErr_SetString'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyErr_SyntaxLocation'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyErr_WarnEx'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyErr_WarnExplicit'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='int' type64='i'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyErr_WriteUnraisable'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyEval_AcquireLock'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyEval_AcquireThread'>
<arg declared_type64='PyThreadState*' name='tstate' type64='^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyEval_CallFunction' variadic='true'>
<arg declared_type64='PyObject*' name='obj' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='format' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyEval_CallMethod' variadic='true'>
<arg declared_type64='PyObject*' name='obj' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='methodname' type64='*'/>
<arg const='true' declared_type64='char*' name='format' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyEval_CallObjectWithKeywords'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyEval_EvalCode'>
<arg declared_type64='PyCodeObject*' type64='^{_PyCodeObject=q^{_typeobject}iiii^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i^{_object}^v^{_object}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyEval_EvalCodeEx'>
<arg declared_type64='PyCodeObject*' name='co' type64='^{_PyCodeObject=q^{_typeobject}iiii^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i^{_object}^v^{_object}}'/>
<arg declared_type64='PyObject*' name='globals' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='locals' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject**' name='args' type64='^^{_object}'/>
<arg declared_type64='int' name='argc' type64='i'/>
<arg declared_type64='PyObject**' name='kwds' type64='^^{_object}'/>
<arg declared_type64='int' name='kwdc' type64='i'/>
<arg declared_type64='PyObject**' name='defs' type64='^^{_object}'/>
<arg declared_type64='int' name='defc' type64='i'/>
<arg declared_type64='PyObject*' name='closure' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyEval_EvalFrame'>
<arg declared_type64='struct _frame*' type64='^{_frame=q^{_typeobject}q^{_frame}^{?}^{_object}^{_object}^{_object}^^{_object}^^{_object}^{_object}^{_object}^{_object}^{_object}^{_ts}iii[20{?=iii}][1^{_object}]}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyEval_EvalFrameEx'>
<arg declared_type64='struct _frame*' name='f' type64='^{_frame=q^{_typeobject}q^{_frame}^{?}^{_object}^{_object}^{_object}^^{_object}^^{_object}^{_object}^{_object}^{_object}^{_object}^{_ts}iii[20{?=iii}][1^{_object}]}'/>
<arg declared_type64='int' name='exc' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyEval_GetBuiltins'>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyEval_GetCallStats'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyEval_GetFrame'>
<retval declared_type64='struct _frame*' type64='^{_frame=q^{_typeobject}q^{_frame}^{?}^{_object}^{_object}^{_object}^^{_object}^^{_object}^{_object}^{_object}^{_object}^{_object}^{_ts}iii[20{?=iii}][1^{_object}]}'/>
</function>
<function name='PyEval_GetFuncDesc'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval const='true' declared_type64='char*' type64='*'/>
</function>
<function name='PyEval_GetFuncName'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval const='true' declared_type64='char*' type64='*'/>
</function>
<function name='PyEval_GetGlobals'>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyEval_GetLocals'>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyEval_GetRestricted'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyEval_InitThreads'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyEval_MergeCompilerFlags'>
<arg declared_type64='PyCompilerFlags*' name='cf' type64='^{_PyCompilerFlags=i}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyEval_ReInitThreads'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyEval_ReleaseLock'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyEval_ReleaseThread'>
<arg declared_type64='PyThreadState*' name='tstate' type64='^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyEval_RestoreThread'>
<arg declared_type64='PyThreadState*' type64='^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyEval_SaveThread'>
<retval declared_type64='PyThreadState*' type64='^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}'/>
</function>
<function name='PyEval_SetProfile'>
<arg declared_type64='Py_tracefunc' function_pointer='true' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='struct _frame*' type64='^{_frame=q^{_typeobject}q^{_frame}^{?}^{_object}^{_object}^{_object}^^{_object}^^{_object}^{_object}^{_object}^{_object}^{_object}^{_ts}iii[20{?=iii}][1^{_object}]}'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</arg>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyEval_SetTrace'>
<arg declared_type64='Py_tracefunc' function_pointer='true' type64='^?'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='struct _frame*' type64='^{_frame=q^{_typeobject}q^{_frame}^{?}^{_object}^{_object}^{_object}^^{_object}^^{_object}^{_object}^{_object}^{_object}^{_object}^{_ts}iii[20{?=iii}][1^{_object}]}'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</arg>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyEval_ThreadsInitialized'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyFile_AsFile'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
</function>
<function name='PyFile_DecUseCount'>
<arg declared_type64='PyFileObject*' type64='^{_PyFileObject=q^{_typeobject}^{__sFILE}^{_object}^{_object}^?ii****iii^{_object}^{_object}^{_object}iii}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyFile_FromFile'>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='int (*)(FILE *)' function_pointer='true' type64='^?'>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type64='int' type64='i'/>
</arg>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyFile_FromString'>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyFile_GetLine'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyFile_IncUseCount'>
<arg declared_type64='PyFileObject*' type64='^{_PyFileObject=q^{_typeobject}^{__sFILE}^{_object}^{_object}^?ii****iii^{_object}^{_object}^{_object}iii}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyFile_Name'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyFile_SetBufSize'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyFile_SetEncoding'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyFile_SetEncodingAndErrors'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyFile_SoftSpace'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyFile_WriteObject'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyFile_WriteString'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyFloat_AsDouble'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='double' type64='d'/>
</function>
<function name='PyFloat_AsReprString'>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='PyFloatObject*' name='v' type64='^{_PyFloatObject=q^{_typeobject}d}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyFloat_AsString'>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='PyFloatObject*' name='v' type64='^{_PyFloatObject=q^{_typeobject}d}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyFloat_ClearFreeList'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyFloat_Fini'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyFloat_FromDouble'>
<arg declared_type64='double' type64='d'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyFloat_FromString'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='char**' name='junk' type64='^*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyFloat_GetInfo'>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyFloat_GetMax'>
<retval declared_type64='double' type64='d'/>
</function>
<function name='PyFloat_GetMin'>
<retval declared_type64='double' type64='d'/>
</function>
<function name='PyFrame_BlockPop'>
<arg declared_type64='PyFrameObject*' type64='^{_frame=q^{_typeobject}q^{_frame}^{_PyCodeObject=q^{_typeobject}iiii^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i^{_object}^v^{_object}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^^{_object}^^{_object}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}iii[20{_PyTryBlock=iii}][1^{_object}]}'/>
<retval declared_type64='PyTryBlock*' type64='^{_PyTryBlock=iii}'/>
</function>
<function name='PyFrame_BlockSetup'>
<arg declared_type64='PyFrameObject*' type64='^{_frame=q^{_typeobject}q^{_frame}^{_PyCodeObject=q^{_typeobject}iiii^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i^{_object}^v^{_object}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^^{_object}^^{_object}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}iii[20{_PyTryBlock=iii}][1^{_object}]}'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyFrame_ClearFreeList'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyFrame_ExtendStack'>
<arg declared_type64='PyFrameObject*' type64='^{_frame=q^{_typeobject}q^{_frame}^{_PyCodeObject=q^{_typeobject}iiii^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i^{_object}^v^{_object}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^^{_object}^^{_object}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}iii[20{_PyTryBlock=iii}][1^{_object}]}'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='PyObject**' type64='^^{_object}'/>
</function>
<function name='PyFrame_FastToLocals'>
<arg declared_type64='PyFrameObject*' type64='^{_frame=q^{_typeobject}q^{_frame}^{_PyCodeObject=q^{_typeobject}iiii^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i^{_object}^v^{_object}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^^{_object}^^{_object}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}iii[20{_PyTryBlock=iii}][1^{_object}]}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyFrame_Fini'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyFrame_GetLineNumber'>
<arg declared_type64='PyFrameObject*' type64='^{_frame=q^{_typeobject}q^{_frame}^{_PyCodeObject=q^{_typeobject}iiii^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i^{_object}^v^{_object}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^^{_object}^^{_object}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}iii[20{_PyTryBlock=iii}][1^{_object}]}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyFrame_LocalsToFast'>
<arg declared_type64='PyFrameObject*' type64='^{_frame=q^{_typeobject}q^{_frame}^{_PyCodeObject=q^{_typeobject}iiii^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i^{_object}^v^{_object}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^^{_object}^^{_object}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}iii[20{_PyTryBlock=iii}][1^{_object}]}'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyFrame_New'>
<arg declared_type64='PyThreadState*' type64='^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}'/>
<arg declared_type64='PyCodeObject*' type64='^{_PyCodeObject=q^{_typeobject}iiii^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i^{_object}^v^{_object}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyFrameObject*' type64='^{_frame=q^{_typeobject}q^{_frame}^{_PyCodeObject=q^{_typeobject}iiii^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i^{_object}^v^{_object}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^^{_object}^^{_object}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}iii[20{_PyTryBlock=iii}][1^{_object}]}'/>
</function>
<function name='PyFrozenSet_New'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyFunction_GetClosure'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyFunction_GetCode'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyFunction_GetDefaults'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyFunction_GetGlobals'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyFunction_GetModule'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyFunction_New'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyFunction_SetClosure'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyFunction_SetDefaults'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyFuture_FromAST'>
<arg declared_type64='struct _mod*' type64='^{_mod=i(?={?=^{?}}{?=^{?}}{?=^{_expr}}{?=^{?}})}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='PyFutureFeatures*' type64='^{_PyFutureFeatures=ii}'/>
</function>
<function name='PyGC_Collect'>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PyGILState_Ensure'>
<retval declared_type64='PyGILState_STATE' type64='i'/>
</function>
<function name='PyGILState_GetThisThreadState'>
<retval declared_type64='PyThreadState*' type64='^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}'/>
</function>
<function name='PyGILState_Release'>
<arg declared_type64='PyGILState_STATE' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyGen_NeedsFinalizing'>
<arg declared_type64='PyGenObject*' type64='^{_PyGenObject=q^{_typeobject}^{_frame}i^{_object}^{_object}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyGen_New'>
<arg declared_type64='struct _frame*' type64='^{_frame=q^{_typeobject}q^{_frame}^{?}^{_object}^{_object}^{_object}^^{_object}^^{_object}^{_object}^{_object}^{_object}^{_object}^{_ts}iii[20{?=iii}][1^{_object}]}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyGrammar_AddAccelerators'>
<arg declared_type64='grammar*' name='g' type64='^{_grammar=i^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}{_labellist=i^{_label=i*}}ii}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyGrammar_FindDFA'>
<arg declared_type64='grammar*' name='g' type64='^{_grammar=i^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}{_labellist=i^{_label=i*}}ii}'/>
<arg declared_type64='int' name='type' type64='i'/>
<retval declared_type64='dfa*' type64='^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}'/>
</function>
<function name='PyGrammar_LabelRepr'>
<arg declared_type64='label*' name='lb' type64='^{_label=i*}'/>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='PyGrammar_RemoveAccelerators'>
<arg declared_type64='grammar*' type64='^{_grammar=i^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}{_labellist=i^{_label=i*}}ii}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyImport_AddModule'>
<arg const='true' declared_type64='char*' name='name' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyImport_AppendInittab'>
<arg const='true' declared_type64='char*' name='name' type64='*'/>
<arg declared_type64='void (*)(void)' function_pointer='true' name='initfunc' type64='^?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyImport_Cleanup'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyImport_ExecCodeModule'>
<arg declared_type64='char*' name='name' type64='*'/>
<arg declared_type64='PyObject*' name='co' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyImport_ExecCodeModuleEx'>
<arg declared_type64='char*' name='name' type64='*'/>
<arg declared_type64='PyObject*' name='co' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='char*' name='pathname' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyImport_ExtendInittab'>
<arg declared_type64='struct _inittab*' name='newtab' type64='^{_inittab=*^?}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyImport_GetImporter'>
<arg declared_type64='PyObject*' name='path' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyImport_GetMagicNumber'>
<retval declared_type64='long' type64='q'/>
</function>
<function name='PyImport_GetModuleDict'>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyImport_Import'>
<arg declared_type64='PyObject*' name='name' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyImport_ImportFrozenModule'>
<arg declared_type64='char*' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyImport_ImportModule'>
<arg const='true' declared_type64='char*' name='name' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyImport_ImportModuleLevel'>
<arg declared_type64='char*' name='name' type64='*'/>
<arg declared_type64='PyObject*' name='globals' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='locals' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='fromlist' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' name='level' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyImport_ImportModuleNoBlock'>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyImport_ReloadModule'>
<arg declared_type64='PyObject*' name='m' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyInstance_New'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyInstance_NewRaw'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyInt_AsLong'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='long' type64='q'/>
</function>
<function name='PyInt_AsSsize_t'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PyInt_AsUnsignedLongLongMask'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='unsigned long long' type64='Q'/>
</function>
<function name='PyInt_AsUnsignedLongMask'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='unsigned long' type64='Q'/>
</function>
<function name='PyInt_ClearFreeList'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyInt_Fini'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyInt_FromLong'>
<arg declared_type64='long' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyInt_FromSize_t'>
<arg declared_type64='size_t' type64='Q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyInt_FromSsize_t'>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyInt_FromString'>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyInt_FromUnicode'>
<arg declared_type64='Py_UNICODE*' type64='^S'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyInt_GetMax'>
<retval declared_type64='long' type64='q'/>
</function>
<function name='PyInterpreterState_Clear'>
<arg declared_type64='PyInterpreterState*' type64='^{_is=^{_is}^{_ts}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyInterpreterState_Delete'>
<arg declared_type64='PyInterpreterState*' type64='^{_is=^{_is}^{_ts}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyInterpreterState_Head'>
<retval declared_type64='PyInterpreterState*' type64='^{_is=^{_is}^{_ts}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i}'/>
</function>
<function name='PyInterpreterState_New'>
<retval declared_type64='PyInterpreterState*' type64='^{_is=^{_is}^{_ts}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i}'/>
</function>
<function name='PyInterpreterState_Next'>
<arg declared_type64='PyInterpreterState*' type64='^{_is=^{_is}^{_ts}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i}'/>
<retval declared_type64='PyInterpreterState*' type64='^{_is=^{_is}^{_ts}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i}'/>
</function>
<function name='PyInterpreterState_ThreadHead'>
<arg declared_type64='PyInterpreterState*' type64='^{_is=^{_is}^{_ts}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i}'/>
<retval declared_type64='PyThreadState*' type64='^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}'/>
</function>
<function name='PyIter_Next'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyList_Append'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyList_AsTuple'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyList_Fini'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyList_GetItem'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyList_GetSlice'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyList_Insert'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyList_New'>
<arg declared_type64='Py_ssize_t' name='size' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyList_Reverse'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyList_SetItem'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyList_SetSlice'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyList_Size'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PyList_Sort'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyLong_AsDouble'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='double' type64='d'/>
</function>
<function name='PyLong_AsLong'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='long' type64='q'/>
</function>
<function name='PyLong_AsLongAndOverflow'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int*' type64='^i'/>
<retval declared_type64='long' type64='q'/>
</function>
<function name='PyLong_AsLongLong'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='long long' type64='q'/>
</function>
<function name='PyLong_AsLongLongAndOverflow'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int*' type64='^i'/>
<retval declared_type64='long long' type64='q'/>
</function>
<function name='PyLong_AsSsize_t'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PyLong_AsUnsignedLong'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='unsigned long' type64='Q'/>
</function>
<function name='PyLong_AsUnsignedLongLong'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='unsigned long long' type64='Q'/>
</function>
<function name='PyLong_AsUnsignedLongLongMask'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='unsigned long long' type64='Q'/>
</function>
<function name='PyLong_AsUnsignedLongMask'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='unsigned long' type64='Q'/>
</function>
<function name='PyLong_AsVoidPtr'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='PyLong_FromDouble'>
<arg declared_type64='double' type64='d'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyLong_FromLong'>
<arg declared_type64='long' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyLong_FromLongLong'>
<arg declared_type64='long long' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyLong_FromSize_t'>
<arg declared_type64='size_t' type64='Q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyLong_FromSsize_t'>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyLong_FromString'>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyLong_FromUnicode'>
<arg declared_type64='Py_UNICODE*' type64='^S'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyLong_FromUnsignedLong'>
<arg declared_type64='unsigned long' type64='Q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyLong_FromUnsignedLongLong'>
<arg declared_type64='unsigned long long' type64='Q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyLong_FromVoidPtr'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyLong_GetInfo'>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMac_BuildEventRecord'>
<arg declared_type64='EventRecord*' type64='^{EventRecord=SQI{Point=ss}S}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMac_BuildFSRef'>
<arg declared_type64='FSRef*' type64='^{FSRef=[80C]}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMac_BuildFixed'>
<arg declared_type64='Fixed' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMac_BuildNumVersion'>
<arg declared_type64='NumVersion' type64='{NumVersion=CCCC}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMac_BuildOSType'>
<arg declared_type64='OSType' type64='I'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMac_BuildOptStr255'>
<arg declared_type64='unsigned char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMac_BuildPoint'>
<arg declared_type64='Point' type64='{Point=ss}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMac_BuildRect'>
<arg declared_type64='Rect*' type64='^{Rect=ssss}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMac_BuildStr255'>
<arg declared_type64='unsigned char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMac_Buildwide'>
<arg declared_type64='wide*' type64='^{wide=Ii}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMac_Error'>
<arg declared_type64='OSErr' type64='s'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMac_GetEventRecord'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='EventRecord*' type64='^{EventRecord=SQI{Point=ss}S}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyMac_GetFSRef'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='FSRef*' type64='^{FSRef=[80C]}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyMac_GetFixed'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Fixed*' type64='^i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyMac_GetOSErrException'>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMac_GetOSType'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='OSType*' type64='^I'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyMac_GetPoint'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Point*' type64='^{Point=ss}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyMac_GetRect'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Rect*' type64='^{Rect=ssss}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyMac_GetStr255'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='unsigned char*' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyMac_Getwide'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='wide*' type64='^{wide=Ii}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyMac_StrError'>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='PyMapping_Check'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyMapping_GetItemString'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='char*' name='key' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMapping_HasKey'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='key' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyMapping_HasKeyString'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='char*' name='key' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyMapping_Length'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PyMapping_SetItemString'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='char*' name='key' type64='*'/>
<arg declared_type64='PyObject*' name='value' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyMapping_Size'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PyMarshal_ReadLastObjectFromFile'>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMarshal_ReadLongFromFile'>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type64='long' type64='q'/>
</function>
<function name='PyMarshal_ReadObjectFromFile'>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMarshal_ReadObjectFromString'>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMarshal_ReadShortFromFile'>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyMarshal_WriteLongToFile'>
<arg declared_type64='long' type64='q'/>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyMarshal_WriteObjectToFile'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyMarshal_WriteObjectToString'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMem_Free'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyMem_Malloc'>
<arg declared_type64='size_t' type64='Q'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='PyMem_Realloc'>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='size_t' type64='Q'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='PyMember_Get'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='struct memberlist*' type64='^{memberlist=*iii}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMember_GetOne'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='struct PyMemberDef*' type64='^{PyMemberDef=*iqi*}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMember_Set'>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='struct memberlist*' type64='^{memberlist=*iii}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyMember_SetOne'>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='struct PyMemberDef*' type64='^{PyMemberDef=*iqi*}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyMemoryView_FromBuffer'>
<arg declared_type64='Py_buffer*' name='info' type64='^{bufferinfo=^v^{_object}qqii*^q^q^q[2q]^v}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMemoryView_FromObject'>
<arg declared_type64='PyObject*' name='base' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMemoryView_GetContiguous'>
<arg declared_type64='PyObject*' name='base' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' name='buffertype' type64='i'/>
<arg declared_type64='char' name='fort' type64='c'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMethod_Class'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMethod_ClearFreeList'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyMethod_Fini'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyMethod_Function'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMethod_New'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyMethod_Self'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyModule_AddIntConstant'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='long' type64='q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyModule_AddObject'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyModule_AddStringConstant'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyModule_GetDict'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyModule_GetFilename'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='PyModule_GetName'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='PyModule_New'>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNode_AddChild'>
<arg declared_type64='node*' name='n' type64='^{_node=s*iii^{_node}}'/>
<arg declared_type64='int' name='type' type64='i'/>
<arg declared_type64='char*' name='str' type64='*'/>
<arg declared_type64='int' name='lineno' type64='i'/>
<arg declared_type64='int' name='col_offset' type64='i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyNode_Compile'>
<arg declared_type64='struct _node*' type64='^{_node=s*iii^{_node}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='PyCodeObject*' type64='^{_PyCodeObject=q^{_typeobject}iiii^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i^{_object}^v^{_object}}'/>
</function>
<function name='PyNode_Free'>
<arg declared_type64='node*' name='n' type64='^{_node=s*iii^{_node}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyNode_ListTree'>
<arg declared_type64='node*' type64='^{_node=s*iii^{_node}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyNode_New'>
<arg declared_type64='int' name='type' type64='i'/>
<retval declared_type64='node*' type64='^{_node=s*iii^{_node}}'/>
</function>
<function name='PyNumber_Absolute'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_Add'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_And'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_AsSsize_t'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='exc' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PyNumber_Check'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyNumber_Coerce'>
<arg declared_type64='PyObject**' type64='^^{_object}'/>
<arg declared_type64='PyObject**' type64='^^{_object}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyNumber_CoerceEx'>
<arg declared_type64='PyObject**' type64='^^{_object}'/>
<arg declared_type64='PyObject**' type64='^^{_object}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyNumber_Divide'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_Divmod'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_Float'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_FloorDivide'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_InPlaceAdd'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_InPlaceAnd'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_InPlaceDivide'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_InPlaceFloorDivide'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_InPlaceLshift'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_InPlaceMultiply'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_InPlaceOr'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_InPlacePower'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o3' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_InPlaceRemainder'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_InPlaceRshift'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_InPlaceSubtract'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_InPlaceTrueDivide'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_InPlaceXor'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_Index'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_Int'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_Invert'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_Long'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_Lshift'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_Multiply'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_Negative'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_Or'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_Positive'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_Power'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o3' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_Remainder'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_Rshift'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_Subtract'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_ToBase'>
<arg declared_type64='PyObject*' name='n' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' name='base' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_TrueDivide'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyNumber_Xor'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyOS_AfterFork'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyOS_FiniInterrupts'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyOS_InitInterrupts'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyOS_InterruptOccurred'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyOS_Readline'>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type64='char*' type64='*'/>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='PyOS_ascii_atof'>
<arg const='true' declared_type64='char*' name='str' type64='*'/>
<retval declared_type64='double' type64='d'/>
</function>
<function name='PyOS_ascii_formatd'>
<arg declared_type64='char*' name='buffer' type64='*'/>
<arg declared_type64='size_t' name='buf_len' type64='Q'/>
<arg const='true' declared_type64='char*' name='format' type64='*'/>
<arg declared_type64='double' name='d' type64='d'/>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='PyOS_ascii_strtod'>
<arg const='true' declared_type64='char*' name='str' type64='*'/>
<arg declared_type64='char**' name='ptr' type64='^*'/>
<retval declared_type64='double' type64='d'/>
</function>
<function name='PyOS_double_to_string'>
<arg declared_type64='double' name='val' type64='d'/>
<arg declared_type64='char' name='format_code' type64='c'/>
<arg declared_type64='int' name='precision' type64='i'/>
<arg declared_type64='int' name='flags' type64='i'/>
<arg declared_type64='int*' name='type' type64='^i'/>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='PyOS_getsig'>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='PyOS_sighandler_t' function_pointer='true' type64='^?'>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</retval>
</function>
<function name='PyOS_mystricmp'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyOS_mystrnicmp'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyOS_setsig'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='PyOS_sighandler_t' function_pointer='true' type64='^?'>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='PyOS_sighandler_t' function_pointer='true' type64='^?'>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</retval>
</function>
<function name='PyOS_snprintf' variadic='true'>
<arg declared_type64='char*' name='str' type64='*'/>
<arg declared_type64='size_t' name='size' type64='Q'/>
<arg const='true' declared_type64='char*' name='format' printf_format='true' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyOS_string_to_double'>
<arg const='true' declared_type64='char*' name='str' type64='*'/>
<arg declared_type64='char**' name='endptr' type64='^*'/>
<arg declared_type64='PyObject*' name='overflow_exception' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='double' type64='d'/>
</function>
<function name='PyOS_strtol'>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='long' type64='q'/>
</function>
<function name='PyOS_strtoul'>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='unsigned long' type64='Q'/>
</function>
<function name='PyOS_vsnprintf'>
<arg declared_type64='char*' name='str' type64='*'/>
<arg declared_type64='size_t' name='size' type64='Q'/>
<arg const='true' declared_type64='char*' name='format' printf_format='true' type64='*'/>
<arg declared_type64='struct __va_list_tag*' name='va' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_AsCharBuffer'>
<arg declared_type64='PyObject*' name='obj' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char**' name='buffer' type64='^*'/>
<arg declared_type64='Py_ssize_t*' name='buffer_len' type64='^q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_AsFileDescriptor'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_AsReadBuffer'>
<arg declared_type64='PyObject*' name='obj' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='void**' name='buffer' type64='^^v'/>
<arg declared_type64='Py_ssize_t*' name='buffer_len' type64='^q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_AsWriteBuffer'>
<arg declared_type64='PyObject*' name='obj' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='void**' name='buffer' type64='^^v'/>
<arg declared_type64='Py_ssize_t*' name='buffer_len' type64='^q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_Call'>
<arg declared_type64='PyObject*' name='callable_object' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='args' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='kw' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyObject_CallFunction' variadic='true'>
<arg declared_type64='PyObject*' name='callable_object' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='char*' name='format' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyObject_CallFunctionObjArgs' variadic='true'>
<arg declared_type64='PyObject*' name='callable' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyObject_CallMethod' variadic='true'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='char*' name='m' type64='*'/>
<arg declared_type64='char*' name='format' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyObject_CallMethodObjArgs' variadic='true'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='m' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyObject_CallObject'>
<arg declared_type64='PyObject*' name='callable_object' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='args' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyObject_CheckReadBuffer'>
<arg declared_type64='PyObject*' name='obj' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_ClearWeakRefs'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyObject_Cmp'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int*' name='result' type64='^i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_Compare'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_CopyData'>
<arg declared_type64='PyObject*' name='dest' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='src' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_DelItem'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='key' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_DelItemString'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='char*' name='key' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_Dir'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyObject_Format'>
<arg declared_type64='PyObject*' name='obj' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='format_spec' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyObject_Free'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyObject_GC_Del'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyObject_GC_Track'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyObject_GC_UnTrack'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyObject_GenericGetAttr'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyObject_GenericSetAttr'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_GetAttr'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyObject_GetAttrString'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyObject_GetBuffer'>
<arg declared_type64='PyObject*' name='obj' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_buffer*' name='view' type64='^{bufferinfo=^v^{_object}qqii*^q^q^q[2q]^v}'/>
<arg declared_type64='int' name='flags' type64='i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_GetItem'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='key' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyObject_GetIter'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyObject_HasAttr'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_HasAttrString'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_Hash'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='long' type64='q'/>
</function>
<function name='PyObject_HashNotImplemented'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='long' type64='q'/>
</function>
<function name='PyObject_Init'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyTypeObject*' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyObject_InitVar'>
<arg declared_type64='PyVarObject*' type64='^{_PyVarObject=q^{_typeobject}q}'/>
<arg declared_type64='PyTypeObject*' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='PyVarObject*' type64='^{_PyVarObject=q^{_typeobject}q}'/>
</function>
<function name='PyObject_IsInstance'>
<arg declared_type64='PyObject*' name='object' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='typeorclass' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_IsSubclass'>
<arg declared_type64='PyObject*' name='object' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='typeorclass' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_IsTrue'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_Length'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PyObject_Malloc'>
<arg declared_type64='size_t' type64='Q'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='PyObject_Not'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_Print'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_Realloc'>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='size_t' type64='Q'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='PyObject_Repr'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyObject_RichCompare'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyObject_RichCompareBool'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_SelfIter'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyObject_SetAttr'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_SetAttrString'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_SetItem'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='key' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='v' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyObject_Size'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PyObject_Str'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyObject_Type'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyObject_Unicode'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyParser_ASTFromFile'>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='PyCompilerFlags*' type64='^{_PyCompilerFlags=i}'/>
<arg declared_type64='int*' type64='^i'/>
<arg declared_type64='PyArena*' type64='^{_arena=}'/>
<retval declared_type64='struct _mod*' type64='^{_mod=i(?={?=^{?}}{?=^{?}}{?=^{_expr}}{?=^{?}})}'/>
</function>
<function name='PyParser_ASTFromString'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='PyCompilerFlags*' name='flags' type64='^{_PyCompilerFlags=i}'/>
<arg declared_type64='PyArena*' type64='^{_arena=}'/>
<retval declared_type64='struct _mod*' type64='^{_mod=i(?={?=^{?}}{?=^{?}}{?=^{_expr}}{?=^{?}})}'/>
</function>
<function name='PyParser_ParseFile'>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='grammar*' type64='^{_grammar=i^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}{_labellist=i^{_label=i*}}ii}'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='perrdetail*' type64='^{_perrdetail=i*ii*ii}'/>
<retval declared_type64='node*' type64='^{_node=s*iii^{_node}}'/>
</function>
<function name='PyParser_ParseFileFlags'>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='grammar*' type64='^{_grammar=i^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}{_labellist=i^{_label=i*}}ii}'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='perrdetail*' type64='^{_perrdetail=i*ii*ii}'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='node*' type64='^{_node=s*iii^{_node}}'/>
</function>
<function name='PyParser_ParseFileFlagsEx'>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='grammar*' type64='^{_grammar=i^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}{_labellist=i^{_label=i*}}ii}'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='perrdetail*' type64='^{_perrdetail=i*ii*ii}'/>
<arg declared_type64='int*' type64='^i'/>
<retval declared_type64='node*' type64='^{_node=s*iii^{_node}}'/>
</function>
<function name='PyParser_ParseString'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='grammar*' type64='^{_grammar=i^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}{_labellist=i^{_label=i*}}ii}'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='perrdetail*' type64='^{_perrdetail=i*ii*ii}'/>
<retval declared_type64='node*' type64='^{_node=s*iii^{_node}}'/>
</function>
<function name='PyParser_ParseStringFlags'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='grammar*' type64='^{_grammar=i^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}{_labellist=i^{_label=i*}}ii}'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='perrdetail*' type64='^{_perrdetail=i*ii*ii}'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='node*' type64='^{_node=s*iii^{_node}}'/>
</function>
<function name='PyParser_ParseStringFlagsFilename'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='grammar*' type64='^{_grammar=i^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}{_labellist=i^{_label=i*}}ii}'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='perrdetail*' type64='^{_perrdetail=i*ii*ii}'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='node*' type64='^{_node=s*iii^{_node}}'/>
</function>
<function name='PyParser_ParseStringFlagsFilenameEx'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='grammar*' type64='^{_grammar=i^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}{_labellist=i^{_label=i*}}ii}'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='perrdetail*' type64='^{_perrdetail=i*ii*ii}'/>
<arg declared_type64='int*' type64='^i'/>
<retval declared_type64='node*' type64='^{_node=s*iii^{_node}}'/>
</function>
<function name='PyParser_SetError'>
<arg declared_type64='perrdetail*' type64='^{_perrdetail=i*ii*ii}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyParser_SimpleParseFileFlags'>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='struct _node*' type64='^{_node=s*iii^{_node}}'/>
</function>
<function name='PyParser_SimpleParseStringFlags'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='struct _node*' type64='^{_node=s*iii^{_node}}'/>
</function>
<function name='PyRun_AnyFileExFlags'>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='PyCompilerFlags*' type64='^{_PyCompilerFlags=i}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyRun_AnyFileFlags'>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='PyCompilerFlags*' type64='^{_PyCompilerFlags=i}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyRun_FileExFlags'>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='PyCompilerFlags*' type64='^{_PyCompilerFlags=i}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyRun_InteractiveLoopFlags'>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='PyCompilerFlags*' type64='^{_PyCompilerFlags=i}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyRun_InteractiveOneFlags'>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='PyCompilerFlags*' type64='^{_PyCompilerFlags=i}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyRun_SimpleFileExFlags'>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='PyCompilerFlags*' type64='^{_PyCompilerFlags=i}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyRun_SimpleStringFlags'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='PyCompilerFlags*' type64='^{_PyCompilerFlags=i}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyRun_StringFlags'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyCompilerFlags*' type64='^{_PyCompilerFlags=i}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyST_GetScope'>
<arg declared_type64='PySTEntryObject*' type64='^{_symtable_entry=q^{_typeobject}^{_object}^{_object}^{_object}^{_object}^{_object}iiib1b1b1b1b1b1iii^{symtable}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PySeqIter_New'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PySequence_Check'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PySequence_Concat'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PySequence_Contains'>
<arg declared_type64='PyObject*' name='seq' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='ob' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PySequence_Count'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='value' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PySequence_DelItem'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' name='i' type64='q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PySequence_DelSlice'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' name='i1' type64='q'/>
<arg declared_type64='Py_ssize_t' name='i2' type64='q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PySequence_Fast'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='m' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PySequence_GetItem'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' name='i' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PySequence_GetSlice'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' name='i1' type64='q'/>
<arg declared_type64='Py_ssize_t' name='i2' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PySequence_In'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='value' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PySequence_InPlaceConcat'>
<arg declared_type64='PyObject*' name='o1' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='o2' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PySequence_InPlaceRepeat'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' name='count' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PySequence_Index'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='value' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PySequence_Length'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PySequence_List'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PySequence_Repeat'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' name='count' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PySequence_SetItem'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' name='i' type64='q'/>
<arg declared_type64='PyObject*' name='v' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PySequence_SetSlice'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' name='i1' type64='q'/>
<arg declared_type64='Py_ssize_t' name='i2' type64='q'/>
<arg declared_type64='PyObject*' name='v' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PySequence_Size'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PySequence_Tuple'>
<arg declared_type64='PyObject*' name='o' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PySet_Add'>
<arg declared_type64='PyObject*' name='set' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='key' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PySet_Clear'>
<arg declared_type64='PyObject*' name='set' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PySet_Contains'>
<arg declared_type64='PyObject*' name='anyset' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='key' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PySet_Discard'>
<arg declared_type64='PyObject*' name='set' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='key' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PySet_Fini'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PySet_New'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PySet_Pop'>
<arg declared_type64='PyObject*' name='set' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PySet_Size'>
<arg declared_type64='PyObject*' name='anyset' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PySignal_SetWakeupFd'>
<arg declared_type64='int' name='fd' type64='i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PySlice_GetIndices'>
<arg declared_type64='PySliceObject*' name='r' type64='^{_PySliceObject=q^{_typeobject}^{_object}^{_object}^{_object}}'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg declared_type64='Py_ssize_t*' name='start' type64='^q'/>
<arg declared_type64='Py_ssize_t*' name='stop' type64='^q'/>
<arg declared_type64='Py_ssize_t*' name='step' type64='^q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PySlice_GetIndicesEx'>
<arg declared_type64='PySliceObject*' name='r' type64='^{_PySliceObject=q^{_typeobject}^{_object}^{_object}^{_object}}'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg declared_type64='Py_ssize_t*' name='start' type64='^q'/>
<arg declared_type64='Py_ssize_t*' name='stop' type64='^q'/>
<arg declared_type64='Py_ssize_t*' name='step' type64='^q'/>
<arg declared_type64='Py_ssize_t*' name='slicelength' type64='^q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PySlice_New'>
<arg declared_type64='PyObject*' name='start' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='stop' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='step' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyStaticMethod_New'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyString_AsDecodedObject'>
<arg declared_type64='PyObject*' name='str' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='encoding' type64='*'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyString_AsDecodedString'>
<arg declared_type64='PyObject*' name='str' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='encoding' type64='*'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyString_AsEncodedObject'>
<arg declared_type64='PyObject*' name='str' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='encoding' type64='*'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyString_AsEncodedString'>
<arg declared_type64='PyObject*' name='str' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='encoding' type64='*'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyString_AsString'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='PyString_AsStringAndSize'>
<arg declared_type64='PyObject*' name='obj' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='char**' name='s' type64='^*'/>
<arg declared_type64='Py_ssize_t*' name='len' type64='^q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyString_Concat'>
<arg declared_type64='PyObject**' type64='^^{_object}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyString_ConcatAndDel'>
<arg declared_type64='PyObject**' type64='^^{_object}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyString_Decode'>
<arg const='true' declared_type64='char*' name='s' type64='*'/>
<arg declared_type64='Py_ssize_t' name='size' type64='q'/>
<arg const='true' declared_type64='char*' name='encoding' type64='*'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyString_DecodeEscape'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyString_Encode'>
<arg const='true' declared_type64='char*' name='s' type64='*'/>
<arg declared_type64='Py_ssize_t' name='size' type64='q'/>
<arg const='true' declared_type64='char*' name='encoding' type64='*'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyString_Fini'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyString_Format'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyString_FromFormat' variadic='true'>
<arg const='true' declared_type64='char*' printf_format='true' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyString_FromFormatV'>
<arg const='true' declared_type64='char*' printf_format='true' type64='*'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyString_FromString'>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyString_FromStringAndSize'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyString_InternFromString'>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyString_InternImmortal'>
<arg declared_type64='PyObject**' type64='^^{_object}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyString_InternInPlace'>
<arg declared_type64='PyObject**' type64='^^{_object}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyString_Repr'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyString_Size'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PyStructSequence_InitType'>
<arg declared_type64='PyTypeObject*' name='type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<arg declared_type64='PyStructSequence_Desc*' name='desc' type64='^{PyStructSequence_Desc=**^{PyStructSequence_Field}i}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyStructSequence_New'>
<arg declared_type64='PyTypeObject*' name='type' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PySymtable_Build'>
<arg declared_type64='mod_ty' type64='^{_mod=i(?={?=^{?}}{?=^{?}}{?=^{_expr}}{?=^{?}})}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='PyFutureFeatures*' type64='^{_PyFutureFeatures=ii}'/>
<retval declared_type64='struct symtable*' type64='^{symtable=*^{_symtable_entry}^{_symtable_entry}^{_object}^{_object}^{_object}i^{_object}^{?}}'/>
</function>
<function name='PySymtable_Free'>
<arg declared_type64='struct symtable*' type64='^{symtable=*^{_symtable_entry}^{_symtable_entry}^{_object}^{_object}^{_object}i^{_object}^{?}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PySymtable_Lookup'>
<arg declared_type64='struct symtable*' type64='^{symtable=*^{_symtable_entry}^{_symtable_entry}^{_object}^{_object}^{_object}i^{_object}^{?}}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='PySTEntryObject*' type64='^{_symtable_entry=q^{_typeobject}^{_object}^{_object}^{_object}^{_object}^{_object}iiib1b1b1b1b1b1iii^{symtable}}'/>
</function>
<function name='PySys_AddWarnOption'>
<arg declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PySys_GetFile'>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
</function>
<function name='PySys_GetObject'>
<arg declared_type64='char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PySys_HasWarnOptions'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PySys_ResetWarnOptions'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PySys_SetArgv'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PySys_SetArgvEx'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PySys_SetObject'>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PySys_SetPath'>
<arg declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PySys_WriteStderr' variadic='true'>
<arg const='true' declared_type64='char*' name='format' printf_format='true' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PySys_WriteStdout' variadic='true'>
<arg const='true' declared_type64='char*' name='format' printf_format='true' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyThreadState_Clear'>
<arg declared_type64='PyThreadState*' type64='^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyThreadState_Delete'>
<arg declared_type64='PyThreadState*' type64='^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyThreadState_DeleteCurrent'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyThreadState_Get'>
<retval declared_type64='PyThreadState*' type64='^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}'/>
</function>
<function name='PyThreadState_GetDict'>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyThreadState_New'>
<arg declared_type64='PyInterpreterState*' type64='^{_is=^{_is}^{_ts}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}i}'/>
<retval declared_type64='PyThreadState*' type64='^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}'/>
</function>
<function name='PyThreadState_Next'>
<arg declared_type64='PyThreadState*' type64='^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}'/>
<retval declared_type64='PyThreadState*' type64='^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}'/>
</function>
<function name='PyThreadState_SetAsyncExc'>
<arg declared_type64='long' type64='q'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyThreadState_Swap'>
<arg declared_type64='PyThreadState*' type64='^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}'/>
<retval declared_type64='PyThreadState*' type64='^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}'/>
</function>
<function name='PyThread_ReInitTLS'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyThread_acquire_lock'>
<arg declared_type64='PyThread_type_lock' type64='^v'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyThread_allocate_lock'>
<retval declared_type64='PyThread_type_lock' type64='^v'/>
</function>
<function name='PyThread_create_key'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyThread_delete_key'>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyThread_delete_key_value'>
<arg declared_type64='int' name='key' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyThread_exit_thread'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyThread_free_lock'>
<arg declared_type64='PyThread_type_lock' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyThread_get_key_value'>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='PyThread_get_stacksize'>
<retval declared_type64='size_t' type64='Q'/>
</function>
<function name='PyThread_get_thread_ident'>
<retval declared_type64='long' type64='q'/>
</function>
<function name='PyThread_init_thread'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyThread_release_lock'>
<arg declared_type64='PyThread_type_lock' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyThread_set_key_value'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyThread_set_stacksize'>
<arg declared_type64='size_t' type64='Q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyThread_start_new_thread'>
<arg declared_type64='void (*)(void *)' function_pointer='true' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='long' type64='q'/>
</function>
<function name='PyToken_OneChar'>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyToken_ThreeChars'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyToken_TwoChars'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyTraceBack_Here'>
<arg declared_type64='struct _frame*' type64='^{_frame=q^{_typeobject}q^{_frame}^{?}^{_object}^{_object}^{_object}^^{_object}^^{_object}^{_object}^{_object}^{_object}^{_object}^{_ts}iii[20{?=iii}][1^{_object}]}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyTraceBack_Print'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyTuple_ClearFreeList'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyTuple_Fini'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyTuple_GetItem'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyTuple_GetSlice'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyTuple_New'>
<arg declared_type64='Py_ssize_t' name='size' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyTuple_Pack' variadic='true'>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyTuple_SetItem'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyTuple_Size'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PyType_ClearCache'>
<retval declared_type64='unsigned int' type64='I'/>
</function>
<function name='PyType_GenericAlloc'>
<arg declared_type64='PyTypeObject*' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyType_GenericNew'>
<arg declared_type64='PyTypeObject*' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyType_IsSubtype'>
<arg declared_type64='PyTypeObject*' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<arg declared_type64='PyTypeObject*' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyType_Modified'>
<arg declared_type64='PyTypeObject*' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='PyType_Ready'>
<arg declared_type64='PyTypeObject*' type64='^{_typeobject=q^{_typeobject}q*qq^?^?^?^?^?^?^{_PyNumberMethods=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}^{_PySequenceMethods=^?^?^?^?^?^?^?^?^?^?}^{_PyMappingMethods=^?^?^?}^?^?^?^?^?^{_PyBufferProcs=^?^?^?^?^?^?}q*^?^?^?q^?^?^{PyMethodDef}^{PyMemberDef}^{PyGetSetDef}^{_typeobject}^{_object=q^{_typeobject}}^?^?q^?^?^?^?^?^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^{_object=q^{_typeobject}}^?I}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeDecodeError_Create'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeDecodeError_GetEncoding'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeDecodeError_GetEnd'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t*' type64='^q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeDecodeError_GetObject'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeDecodeError_GetReason'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeDecodeError_GetStart'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t*' type64='^q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeDecodeError_SetEnd'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeDecodeError_SetReason'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeDecodeError_SetStart'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeEncodeError_Create'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='Py_UNICODE*' type64='^S'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeEncodeError_GetEncoding'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeEncodeError_GetEnd'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t*' type64='^q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeEncodeError_GetObject'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeEncodeError_GetReason'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeEncodeError_GetStart'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t*' type64='^q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeEncodeError_SetEnd'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeEncodeError_SetReason'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeEncodeError_SetStart'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeTranslateError_Create'>
<arg const='true' declared_type64='Py_UNICODE*' type64='^S'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeTranslateError_GetEnd'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t*' type64='^q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeTranslateError_GetObject'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeTranslateError_GetReason'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeTranslateError_GetStart'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t*' type64='^q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeTranslateError_SetEnd'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeTranslateError_SetReason'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeTranslateError_SetStart'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeUCS2_AsASCIIString'>
<arg declared_type64='PyObject*' name='unicode' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_AsCharmapString'>
<arg declared_type64='PyObject*' name='unicode' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='mapping' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_AsEncodedObject'>
<arg declared_type64='PyObject*' name='unicode' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='encoding' type64='*'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_AsEncodedString'>
<arg declared_type64='PyObject*' name='unicode' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='encoding' type64='*'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_AsLatin1String'>
<arg declared_type64='PyObject*' name='unicode' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_AsRawUnicodeEscapeString'>
<arg declared_type64='PyObject*' name='unicode' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_AsUTF16String'>
<arg declared_type64='PyObject*' name='unicode' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_AsUTF32String'>
<arg declared_type64='PyObject*' name='unicode' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_AsUTF8String'>
<arg declared_type64='PyObject*' name='unicode' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_AsUnicode'>
<arg declared_type64='PyObject*' name='unicode' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_UNICODE*' type64='^S'/>
</function>
<function name='PyUnicodeUCS2_AsUnicodeEscapeString'>
<arg declared_type64='PyObject*' name='unicode' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_AsWideChar'>
<arg declared_type64='PyUnicodeObject*' name='unicode' type64='^{_PyUnicodeObject=q^{_typeobject}q^Sq^{_object}}'/>
<arg declared_type64='wchar_t*' name='w' type64='^i'/>
<arg declared_type64='Py_ssize_t' name='size' type64='q'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PyUnicodeUCS2_ClearFreelist'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeUCS2_Compare'>
<arg declared_type64='PyObject*' name='left' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='right' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeUCS2_Concat'>
<arg declared_type64='PyObject*' name='left' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='right' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_Contains'>
<arg declared_type64='PyObject*' name='container' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='element' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeUCS2_Count'>
<arg declared_type64='PyObject*' name='str' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='substr' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' name='start' type64='q'/>
<arg declared_type64='Py_ssize_t' name='end' type64='q'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PyUnicodeUCS2_Decode'>
<arg const='true' declared_type64='char*' name='s' type64='*'/>
<arg declared_type64='Py_ssize_t' name='size' type64='q'/>
<arg const='true' declared_type64='char*' name='encoding' type64='*'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_DecodeASCII'>
<arg const='true' declared_type64='char*' name='string' type64='*'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_DecodeCharmap'>
<arg const='true' declared_type64='char*' name='string' type64='*'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg declared_type64='PyObject*' name='mapping' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_DecodeLatin1'>
<arg const='true' declared_type64='char*' name='string' type64='*'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_DecodeRawUnicodeEscape'>
<arg const='true' declared_type64='char*' name='string' type64='*'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_DecodeUTF16'>
<arg const='true' declared_type64='char*' name='string' type64='*'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<arg declared_type64='int*' name='byteorder' type64='^i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_DecodeUTF16Stateful'>
<arg const='true' declared_type64='char*' name='string' type64='*'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<arg declared_type64='int*' name='byteorder' type64='^i'/>
<arg declared_type64='Py_ssize_t*' name='consumed' type64='^q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_DecodeUTF32'>
<arg const='true' declared_type64='char*' name='string' type64='*'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<arg declared_type64='int*' name='byteorder' type64='^i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_DecodeUTF32Stateful'>
<arg const='true' declared_type64='char*' name='string' type64='*'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<arg declared_type64='int*' name='byteorder' type64='^i'/>
<arg declared_type64='Py_ssize_t*' name='consumed' type64='^q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_DecodeUTF8'>
<arg const='true' declared_type64='char*' name='string' type64='*'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_DecodeUTF8Stateful'>
<arg const='true' declared_type64='char*' name='string' type64='*'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<arg declared_type64='Py_ssize_t*' name='consumed' type64='^q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_DecodeUnicodeEscape'>
<arg const='true' declared_type64='char*' name='string' type64='*'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_Encode'>
<arg const='true' declared_type64='Py_UNICODE*' name='s' type64='^S'/>
<arg declared_type64='Py_ssize_t' name='size' type64='q'/>
<arg const='true' declared_type64='char*' name='encoding' type64='*'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_EncodeASCII'>
<arg const='true' declared_type64='Py_UNICODE*' name='data' type64='^S'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_EncodeCharmap'>
<arg const='true' declared_type64='Py_UNICODE*' name='data' type64='^S'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg declared_type64='PyObject*' name='mapping' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_EncodeDecimal'>
<arg declared_type64='Py_UNICODE*' name='s' type64='^S'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg declared_type64='char*' name='output' type64='*'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeUCS2_EncodeLatin1'>
<arg const='true' declared_type64='Py_UNICODE*' name='data' type64='^S'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_EncodeRawUnicodeEscape'>
<arg const='true' declared_type64='Py_UNICODE*' name='data' type64='^S'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_EncodeUTF16'>
<arg const='true' declared_type64='Py_UNICODE*' name='data' type64='^S'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<arg declared_type64='int' name='byteorder' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_EncodeUTF32'>
<arg const='true' declared_type64='Py_UNICODE*' name='data' type64='^S'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<arg declared_type64='int' name='byteorder' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_EncodeUTF8'>
<arg const='true' declared_type64='Py_UNICODE*' name='data' type64='^S'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_EncodeUnicodeEscape'>
<arg const='true' declared_type64='Py_UNICODE*' name='data' type64='^S'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_Find'>
<arg declared_type64='PyObject*' name='str' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='substr' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' name='start' type64='q'/>
<arg declared_type64='Py_ssize_t' name='end' type64='q'/>
<arg declared_type64='int' name='direction' type64='i'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PyUnicodeUCS2_Format'>
<arg declared_type64='PyObject*' name='format' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='args' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_FromEncodedObject'>
<arg declared_type64='PyObject*' name='obj' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='encoding' type64='*'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_FromFormat' variadic='true'>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_FromFormatV'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_FromObject'>
<arg declared_type64='PyObject*' name='obj' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_FromOrdinal'>
<arg declared_type64='int' name='ordinal' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_FromString'>
<arg const='true' declared_type64='char*' name='u' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_FromStringAndSize'>
<arg const='true' declared_type64='char*' name='u' type64='*'/>
<arg declared_type64='Py_ssize_t' name='size' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_FromUnicode'>
<arg const='true' declared_type64='Py_UNICODE*' name='u' type64='^S'/>
<arg declared_type64='Py_ssize_t' name='size' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_FromWideChar'>
<arg const='true' declared_type64='wchar_t*' name='w' type64='^i'/>
<arg declared_type64='Py_ssize_t' name='size' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_GetDefaultEncoding'>
<retval const='true' declared_type64='char*' type64='*'/>
</function>
<function name='PyUnicodeUCS2_GetMax'>
<retval declared_type64='Py_UNICODE' type64='S'/>
</function>
<function name='PyUnicodeUCS2_GetSize'>
<arg declared_type64='PyObject*' name='unicode' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PyUnicodeUCS2_Join'>
<arg declared_type64='PyObject*' name='separator' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='seq' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_Partition'>
<arg declared_type64='PyObject*' name='s' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='sep' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_RPartition'>
<arg declared_type64='PyObject*' name='s' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='sep' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_RSplit'>
<arg declared_type64='PyObject*' name='s' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='sep' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' name='maxsplit' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_Replace'>
<arg declared_type64='PyObject*' name='str' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='substr' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='replstr' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' name='maxcount' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_Resize'>
<arg declared_type64='PyObject**' name='unicode' type64='^^{_object}'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeUCS2_RichCompare'>
<arg declared_type64='PyObject*' name='left' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='right' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' name='op' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_SetDefaultEncoding'>
<arg const='true' declared_type64='char*' name='encoding' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='PyUnicodeUCS2_Split'>
<arg declared_type64='PyObject*' name='s' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='sep' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' name='maxsplit' type64='q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_Splitlines'>
<arg declared_type64='PyObject*' name='s' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' name='keepends' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_Tailmatch'>
<arg declared_type64='PyObject*' name='str' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='substr' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Py_ssize_t' name='start' type64='q'/>
<arg declared_type64='Py_ssize_t' name='end' type64='q'/>
<arg declared_type64='int' name='direction' type64='i'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='PyUnicodeUCS2_Translate'>
<arg declared_type64='PyObject*' name='str' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='table' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicodeUCS2_TranslateCharmap'>
<arg const='true' declared_type64='Py_UNICODE*' name='data' type64='^S'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg declared_type64='PyObject*' name='table' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicode_BuildEncodingMap'>
<arg declared_type64='PyObject*' name='string' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicode_DecodeUTF7'>
<arg const='true' declared_type64='char*' name='string' type64='*'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicode_DecodeUTF7Stateful'>
<arg const='true' declared_type64='char*' name='string' type64='*'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<arg declared_type64='Py_ssize_t*' name='consumed' type64='^q'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyUnicode_EncodeUTF7'>
<arg const='true' declared_type64='Py_UNICODE*' name='data' type64='^S'/>
<arg declared_type64='Py_ssize_t' name='length' type64='q'/>
<arg declared_type64='int' name='base64SetO' type64='i'/>
<arg declared_type64='int' name='base64WhiteSpace' type64='i'/>
<arg const='true' declared_type64='char*' name='errors' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyWeakref_GetObject'>
<arg declared_type64='PyObject*' name='ref' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyWeakref_NewProxy'>
<arg declared_type64='PyObject*' name='ob' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='callback' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyWeakref_NewRef'>
<arg declared_type64='PyObject*' name='ob' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='callback' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='PyWrapper_New'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='Py_AddPendingCall'>
<arg declared_type64='int (*)(void *)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='int' type64='i'/>
</arg>
<arg declared_type64='void*' name='arg' type64='^v'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='Py_AtExit'>
<arg declared_type64='void (*)(void)' function_pointer='true' name='func' type64='^?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='int' type64='i'/>
</function>
<function name='Py_BuildValue' variadic='true'>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='Py_CompileStringFlags'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='PyCompilerFlags*' type64='^{_PyCompilerFlags=i}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='Py_DecRef'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='Py_EndInterpreter'>
<arg declared_type64='PyThreadState*' type64='^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='Py_Exit'>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='Py_FatalError'>
<arg const='true' declared_type64='char*' name='message' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='Py_FdIsInteractive'>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='Py_Finalize'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='Py_FindMethod'>
<arg declared_type64='PyMethodDef*' type64='^{PyMethodDef=*^?i*}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='Py_FindMethodInChain'>
<arg declared_type64='PyMethodChain*' type64='^{PyMethodChain=^{PyMethodDef}^{PyMethodChain}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='Py_FlushLine'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='Py_GetBuildInfo'>
<retval const='true' declared_type64='char*' type64='*'/>
</function>
<function name='Py_GetCompiler'>
<retval const='true' declared_type64='char*' type64='*'/>
</function>
<function name='Py_GetCopyright'>
<retval const='true' declared_type64='char*' type64='*'/>
</function>
<function name='Py_GetExecPrefix'>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='Py_GetPath'>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='Py_GetPlatform'>
<retval const='true' declared_type64='char*' type64='*'/>
</function>
<function name='Py_GetPrefix'>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='Py_GetProgramFullPath'>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='Py_GetProgramName'>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='Py_GetPythonHome'>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='Py_GetRecursionLimit'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='Py_GetVersion'>
<retval const='true' declared_type64='char*' type64='*'/>
</function>
<function name='Py_IncRef'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='Py_InitModule4_64'>
<arg const='true' declared_type64='char*' name='name' type64='*'/>
<arg declared_type64='PyMethodDef*' name='methods' type64='^{PyMethodDef=*^?i*}'/>
<arg const='true' declared_type64='char*' name='doc' type64='*'/>
<arg declared_type64='PyObject*' name='self' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' name='apiver' type64='i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='Py_Initialize'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='Py_InitializeEx'>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='Py_IsInitialized'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='Py_Main'>
<arg declared_type64='int' name='argc' type64='i'/>
<arg declared_type64='char**' name='argv' type64='^*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='Py_MakePendingCalls'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='Py_NewInterpreter'>
<retval declared_type64='PyThreadState*' type64='^{_ts=^{_ts}^{_is}^{_frame}iii^?^?^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}^{_object}ii^{_object}qi^{_object}}'/>
</function>
<function name='Py_ReprEnter'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='Py_ReprLeave'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='Py_SetProgramName'>
<arg declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='Py_SetPythonHome'>
<arg declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='Py_SetRecursionLimit'>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='Py_SubversionRevision'>
<retval const='true' declared_type64='char*' type64='*'/>
</function>
<function name='Py_SubversionShortBranch'>
<retval const='true' declared_type64='char*' type64='*'/>
</function>
<function name='Py_SymtableString'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='struct symtable*' type64='^{symtable=*^{_symtable_entry}^{_symtable_entry}^{_object}^{_object}^{_object}i^{_object}^{?}}'/>
</function>
<function name='Py_UniversalNewlineFgets'>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='Py_UniversalNewlineFread'>
<arg declared_type64='char*' type64='*'/>
<arg declared_type64='size_t' type64='Q'/>
<arg declared_type64='FILE*' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='size_t' type64='Q'/>
</function>
<function name='Py_VaBuildValue'>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='ResObj_Convert'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='Handle*' type64='^^*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='ResObj_New'>
<arg declared_type64='Handle' type64='^*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='_PyString_Eq'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='_PyString_FormatLong'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='int*' type64='^i'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='_PyString_InsertThousandsGrouping'>
<arg declared_type64='char*' name='buffer' type64='*'/>
<arg declared_type64='Py_ssize_t' name='n_buffer' type64='q'/>
<arg declared_type64='char*' name='digits' type64='*'/>
<arg declared_type64='Py_ssize_t' name='n_digits' type64='q'/>
<arg declared_type64='Py_ssize_t' name='min_width' type64='q'/>
<arg const='true' declared_type64='char*' name='grouping' type64='*'/>
<arg const='true' declared_type64='char*' name='thousands_sep' type64='*'/>
<retval declared_type64='Py_ssize_t' type64='q'/>
</function>
<function name='_PyString_Join'>
<arg declared_type64='PyObject*' name='sep' type64='^{_object=q^{_typeobject}}'/>
<arg declared_type64='PyObject*' name='x' type64='^{_object=q^{_typeobject}}'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='_PyString_Resize'>
<arg declared_type64='PyObject**' type64='^^{_object}'/>
<arg declared_type64='Py_ssize_t' type64='q'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='_PyUnicodeUCS2_AsDefaultEncodedString'>
<arg declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='PyObject*' type64='^{_object=q^{_typeobject}}'/>
</function>
<function name='_PyUnicodeUCS2_IsAlpha'>
<arg declared_type64='Py_UNICODE' name='ch' type64='S'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='_PyUnicodeUCS2_IsDecimalDigit'>
<arg declared_type64='Py_UNICODE' name='ch' type64='S'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='_PyUnicodeUCS2_IsDigit'>
<arg declared_type64='Py_UNICODE' name='ch' type64='S'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='_PyUnicodeUCS2_IsLinebreak'>
<arg const='true' declared_type64='Py_UNICODE' name='ch' type64='S'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='_PyUnicodeUCS2_IsLowercase'>
<arg declared_type64='Py_UNICODE' name='ch' type64='S'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='_PyUnicodeUCS2_IsNumeric'>
<arg declared_type64='Py_UNICODE' name='ch' type64='S'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='_PyUnicodeUCS2_IsTitlecase'>
<arg declared_type64='Py_UNICODE' name='ch' type64='S'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='_PyUnicodeUCS2_IsUppercase'>
<arg declared_type64='Py_UNICODE' name='ch' type64='S'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='_PyUnicodeUCS2_IsWhitespace'>
<arg const='true' declared_type64='Py_UNICODE' name='ch' type64='S'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='_PyUnicodeUCS2_ToDecimalDigit'>
<arg declared_type64='Py_UNICODE' name='ch' type64='S'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='_PyUnicodeUCS2_ToDigit'>
<arg declared_type64='Py_UNICODE' name='ch' type64='S'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='_PyUnicodeUCS2_ToLowercase'>
<arg declared_type64='Py_UNICODE' name='ch' type64='S'/>
<retval declared_type64='Py_UNICODE' type64='S'/>
</function>
<function name='_PyUnicodeUCS2_ToNumeric'>
<arg declared_type64='Py_UNICODE' name='ch' type64='S'/>
<retval declared_type64='double' type64='d'/>
</function>
<function name='_PyUnicodeUCS2_ToTitlecase'>
<arg declared_type64='Py_UNICODE' name='ch' type64='S'/>
<retval declared_type64='Py_UNICODE' type64='S'/>
</function>
<function name='_PyUnicodeUCS2_ToUppercase'>
<arg declared_type64='Py_UNICODE' name='ch' type64='S'/>
<retval declared_type64='Py_UNICODE' type64='S'/>
</function>
<function name='_Py_c_abs'>
<arg declared_type64='Py_complex' type64='{_Py_complex=dd}'/>
<retval declared_type64='double' type64='d'/>
</function>
<function name='_Py_c_diff'>
<arg declared_type64='Py_complex' type64='{_Py_complex=dd}'/>
<arg declared_type64='Py_complex' type64='{_Py_complex=dd}'/>
<retval declared_type64='Py_complex' type64='{_Py_complex=dd}'/>
</function>
<function name='_Py_c_neg'>
<arg declared_type64='Py_complex' type64='{_Py_complex=dd}'/>
<retval declared_type64='Py_complex' type64='{_Py_complex=dd}'/>
</function>
<function name='_Py_c_pow'>
<arg declared_type64='Py_complex' type64='{_Py_complex=dd}'/>
<arg declared_type64='Py_complex' type64='{_Py_complex=dd}'/>
<retval declared_type64='Py_complex' type64='{_Py_complex=dd}'/>
</function>
<function name='_Py_c_prod'>
<arg declared_type64='Py_complex' type64='{_Py_complex=dd}'/>
<arg declared_type64='Py_complex' type64='{_Py_complex=dd}'/>
<retval declared_type64='Py_complex' type64='{_Py_complex=dd}'/>
</function>
<function name='_Py_c_quot'>
<arg declared_type64='Py_complex' type64='{_Py_complex=dd}'/>
<arg declared_type64='Py_complex' type64='{_Py_complex=dd}'/>
<retval declared_type64='Py_complex' type64='{_Py_complex=dd}'/>
</function>
<function name='_Py_c_sum'>
<arg declared_type64='Py_complex' type64='{_Py_complex=dd}'/>
<arg declared_type64='Py_complex' type64='{_Py_complex=dd}'/>
<retval declared_type64='Py_complex' type64='{_Py_complex=dd}'/>
</function>
<function name='addarc'>
<arg declared_type64='dfa*' name='d' type64='^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}'/>
<arg declared_type64='int' name='from' type64='i'/>
<arg declared_type64='int' name='to' type64='i'/>
<arg declared_type64='int' name='lbl' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='addbit'>
<arg declared_type64='bitset' name='bs' type64='*'/>
<arg declared_type64='int' name='ibit' type64='i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='adddfa'>
<arg declared_type64='grammar*' name='g' type64='^{_grammar=i^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}{_labellist=i^{_label=i*}}ii}'/>
<arg declared_type64='int' name='type' type64='i'/>
<arg declared_type64='char*' name='name' type64='*'/>
<retval declared_type64='dfa*' type64='^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}'/>
</function>
<function name='addfirstsets'>
<arg declared_type64='grammar*' name='g' type64='^{_grammar=i^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}{_labellist=i^{_label=i*}}ii}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='addlabel'>
<arg declared_type64='labellist*' name='ll' type64='^{_labellist=i^{_label=i*}}'/>
<arg declared_type64='int' name='type' type64='i'/>
<arg declared_type64='char*' name='str' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='addstate'>
<arg declared_type64='dfa*' name='d' type64='^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='asdl_int_seq_new'>
<arg declared_type64='int' name='size' type64='i'/>
<arg declared_type64='PyArena*' name='arena' type64='^{_arena=}'/>
<retval declared_type64='asdl_int_seq*' type64='^{_asdl_int_seq=i[1i]}'/>
</function>
<function name='asdl_seq_new'>
<arg declared_type64='int' name='size' type64='i'/>
<arg declared_type64='PyArena*' name='arena' type64='^{_arena=}'/>
<retval declared_type64='asdl_seq*' type64='^{_asdl_seq=i[1^v]}'/>
</function>
<function name='delbitset'>
<arg declared_type64='bitset' name='bs' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='findlabel'>
<arg declared_type64='labellist*' name='ll' type64='^{_labellist=i^{_label=i*}}'/>
<arg declared_type64='int' name='type' type64='i'/>
<arg declared_type64='char*' name='str' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='mergebitset'>
<arg declared_type64='bitset' name='bs1' type64='*'/>
<arg declared_type64='bitset' name='bs2' type64='*'/>
<arg declared_type64='int' name='nbits' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='meta_grammar'>
<retval declared_type64='grammar*' type64='^{_grammar=i^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}{_labellist=i^{_label=i*}}ii}'/>
</function>
<function name='newbitset'>
<arg declared_type64='int' name='nbits' type64='i'/>
<retval declared_type64='bitset' type64='*'/>
</function>
<function name='newgrammar'>
<arg declared_type64='int' name='start' type64='i'/>
<retval declared_type64='grammar*' type64='^{_grammar=i^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}{_labellist=i^{_label=i*}}ii}'/>
</function>
<function name='pgen'>
<arg declared_type64='struct _node*' type64='^{_node=s*iii^{_node}}'/>
<retval declared_type64='grammar*' type64='^{_grammar=i^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}{_labellist=i^{_label=i*}}ii}'/>
</function>
<function name='printgrammar'>
<arg declared_type64='grammar*' name='g' type64='^{_grammar=i^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}{_labellist=i^{_label=i*}}ii}'/>
<arg declared_type64='FILE*' name='fp' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='printnonterminals'>
<arg declared_type64='grammar*' name='g' type64='^{_grammar=i^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}{_labellist=i^{_label=i*}}ii}'/>
<arg declared_type64='FILE*' name='fp' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='samebitset'>
<arg declared_type64='bitset' name='bs1' type64='*'/>
<arg declared_type64='bitset' name='bs2' type64='*'/>
<arg declared_type64='int' name='nbits' type64='i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='translatelabels'>
<arg declared_type64='grammar*' name='g' type64='^{_grammar=i^{_dfa=i*ii^{_state=i^{_arc=ss}ii^ii}*}{_labellist=i^{_label=i*}}ii}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function_alias name='PyBytes_AsString' original='PyString_AsString'/>
<function_alias name='PyBytes_AsStringAndSize' original='PyString_AsStringAndSize'/>
<function_alias name='PyBytes_Concat' original='PyString_Concat'/>
<function_alias name='PyBytes_ConcatAndDel' original='PyString_ConcatAndDel'/>
<function_alias name='PyBytes_DecodeEscape' original='PyString_DecodeEscape'/>
<function_alias name='PyBytes_Format' original='PyString_Format'/>
<function_alias name='PyBytes_FromFormat' original='PyString_FromFormat'/>
<function_alias name='PyBytes_FromFormatV' original='PyString_FromFormatV'/>
<function_alias name='PyBytes_FromString' original='PyString_FromString'/>
<function_alias name='PyBytes_FromStringAndSize' original='PyString_FromStringAndSize'/>
<function_alias name='PyBytes_Repr' original='PyString_Repr'/>
<function_alias name='PyBytes_Size' original='PyString_Size'/>
<function_alias name='PyMapping_Length' original='PyMapping_Size'/>
<function_alias name='PyMem_DEL' original='free'/>
<function_alias name='PyMem_Del' original='PyMem_Free'/>
<function_alias name='PyMem_FREE' original='free'/>
<function_alias name='PyOS_stricmp' original='PyOS_mystricmp'/>
<function_alias name='PyOS_strnicmp' original='PyOS_mystrnicmp'/>
<function_alias name='PyObject_Bytes' original='PyObject_Str'/>
<function_alias name='PyObject_DEL' original='PyObject_Free'/>
<function_alias name='PyObject_Del' original='PyObject_Free'/>
<function_alias name='PyObject_FREE' original='PyObject_Free'/>
<function_alias name='PyObject_Length' original='PyObject_Size'/>
<function_alias name='PyObject_MALLOC' original='PyObject_Malloc'/>
<function_alias name='PyObject_REALLOC' original='PyObject_Realloc'/>
<function_alias name='PySequence_In' original='PySequence_Contains'/>
<function_alias name='PySequence_Length' original='PySequence_Size'/>
<function_alias name='PyUnicode_AsASCIIString' original='PyUnicodeUCS2_AsASCIIString'/>
<function_alias name='PyUnicode_AsCharmapString' original='PyUnicodeUCS2_AsCharmapString'/>
<function_alias name='PyUnicode_AsEncodedObject' original='PyUnicodeUCS2_AsEncodedObject'/>
<function_alias name='PyUnicode_AsEncodedString' original='PyUnicodeUCS2_AsEncodedString'/>
<function_alias name='PyUnicode_AsLatin1String' original='PyUnicodeUCS2_AsLatin1String'/>
<function_alias name='PyUnicode_AsRawUnicodeEscapeString' original='PyUnicodeUCS2_AsRawUnicodeEscapeString'/>
<function_alias name='PyUnicode_AsUTF16String' original='PyUnicodeUCS2_AsUTF16String'/>
<function_alias name='PyUnicode_AsUTF32String' original='PyUnicodeUCS2_AsUTF32String'/>
<function_alias name='PyUnicode_AsUTF8String' original='PyUnicodeUCS2_AsUTF8String'/>
<function_alias name='PyUnicode_AsUnicode' original='PyUnicodeUCS2_AsUnicode'/>
<function_alias name='PyUnicode_AsUnicodeEscapeString' original='PyUnicodeUCS2_AsUnicodeEscapeString'/>
<function_alias name='PyUnicode_AsWideChar' original='PyUnicodeUCS2_AsWideChar'/>
<function_alias name='PyUnicode_ClearFreeList' original='PyUnicodeUCS2_ClearFreelist'/>
<function_alias name='PyUnicode_Compare' original='PyUnicodeUCS2_Compare'/>
<function_alias name='PyUnicode_Concat' original='PyUnicodeUCS2_Concat'/>
<function_alias name='PyUnicode_Contains' original='PyUnicodeUCS2_Contains'/>
<function_alias name='PyUnicode_Count' original='PyUnicodeUCS2_Count'/>
<function_alias name='PyUnicode_Decode' original='PyUnicodeUCS2_Decode'/>
<function_alias name='PyUnicode_DecodeASCII' original='PyUnicodeUCS2_DecodeASCII'/>
<function_alias name='PyUnicode_DecodeCharmap' original='PyUnicodeUCS2_DecodeCharmap'/>
<function_alias name='PyUnicode_DecodeLatin1' original='PyUnicodeUCS2_DecodeLatin1'/>
<function_alias name='PyUnicode_DecodeRawUnicodeEscape' original='PyUnicodeUCS2_DecodeRawUnicodeEscape'/>
<function_alias name='PyUnicode_DecodeUTF16' original='PyUnicodeUCS2_DecodeUTF16'/>
<function_alias name='PyUnicode_DecodeUTF16Stateful' original='PyUnicodeUCS2_DecodeUTF16Stateful'/>
<function_alias name='PyUnicode_DecodeUTF32' original='PyUnicodeUCS2_DecodeUTF32'/>
<function_alias name='PyUnicode_DecodeUTF32Stateful' original='PyUnicodeUCS2_DecodeUTF32Stateful'/>
<function_alias name='PyUnicode_DecodeUTF8' original='PyUnicodeUCS2_DecodeUTF8'/>
<function_alias name='PyUnicode_DecodeUTF8Stateful' original='PyUnicodeUCS2_DecodeUTF8Stateful'/>
<function_alias name='PyUnicode_DecodeUnicodeEscape' original='PyUnicodeUCS2_DecodeUnicodeEscape'/>
<function_alias name='PyUnicode_Encode' original='PyUnicodeUCS2_Encode'/>
<function_alias name='PyUnicode_EncodeASCII' original='PyUnicodeUCS2_EncodeASCII'/>
<function_alias name='PyUnicode_EncodeCharmap' original='PyUnicodeUCS2_EncodeCharmap'/>
<function_alias name='PyUnicode_EncodeDecimal' original='PyUnicodeUCS2_EncodeDecimal'/>
<function_alias name='PyUnicode_EncodeLatin1' original='PyUnicodeUCS2_EncodeLatin1'/>
<function_alias name='PyUnicode_EncodeRawUnicodeEscape' original='PyUnicodeUCS2_EncodeRawUnicodeEscape'/>
<function_alias name='PyUnicode_EncodeUTF16' original='PyUnicodeUCS2_EncodeUTF16'/>
<function_alias name='PyUnicode_EncodeUTF32' original='PyUnicodeUCS2_EncodeUTF32'/>
<function_alias name='PyUnicode_EncodeUTF8' original='PyUnicodeUCS2_EncodeUTF8'/>
<function_alias name='PyUnicode_EncodeUnicodeEscape' original='PyUnicodeUCS2_EncodeUnicodeEscape'/>
<function_alias name='PyUnicode_Find' original='PyUnicodeUCS2_Find'/>
<function_alias name='PyUnicode_Format' original='PyUnicodeUCS2_Format'/>
<function_alias name='PyUnicode_FromEncodedObject' original='PyUnicodeUCS2_FromEncodedObject'/>
<function_alias name='PyUnicode_FromFormat' original='PyUnicodeUCS2_FromFormat'/>
<function_alias name='PyUnicode_FromFormatV' original='PyUnicodeUCS2_FromFormatV'/>
<function_alias name='PyUnicode_FromObject' original='PyUnicodeUCS2_FromObject'/>
<function_alias name='PyUnicode_FromOrdinal' original='PyUnicodeUCS2_FromOrdinal'/>
<function_alias name='PyUnicode_FromString' original='PyUnicodeUCS2_FromString'/>
<function_alias name='PyUnicode_FromStringAndSize' original='PyUnicodeUCS2_FromStringAndSize'/>
<function_alias name='PyUnicode_FromUnicode' original='PyUnicodeUCS2_FromUnicode'/>
<function_alias name='PyUnicode_FromWideChar' original='PyUnicodeUCS2_FromWideChar'/>
<function_alias name='PyUnicode_GetDefaultEncoding' original='PyUnicodeUCS2_GetDefaultEncoding'/>
<function_alias name='PyUnicode_GetMax' original='PyUnicodeUCS2_GetMax'/>
<function_alias name='PyUnicode_GetSize' original='PyUnicodeUCS2_GetSize'/>
<function_alias name='PyUnicode_Join' original='PyUnicodeUCS2_Join'/>
<function_alias name='PyUnicode_Partition' original='PyUnicodeUCS2_Partition'/>
<function_alias name='PyUnicode_RPartition' original='PyUnicodeUCS2_RPartition'/>
<function_alias name='PyUnicode_RSplit' original='PyUnicodeUCS2_RSplit'/>
<function_alias name='PyUnicode_Replace' original='PyUnicodeUCS2_Replace'/>
<function_alias name='PyUnicode_Resize' original='PyUnicodeUCS2_Resize'/>
<function_alias name='PyUnicode_RichCompare' original='PyUnicodeUCS2_RichCompare'/>
<function_alias name='PyUnicode_SetDefaultEncoding' original='PyUnicodeUCS2_SetDefaultEncoding'/>
<function_alias name='PyUnicode_Split' original='PyUnicodeUCS2_Split'/>
<function_alias name='PyUnicode_Splitlines' original='PyUnicodeUCS2_Splitlines'/>
<function_alias name='PyUnicode_Tailmatch' original='PyUnicodeUCS2_Tailmatch'/>
<function_alias name='PyUnicode_Translate' original='PyUnicodeUCS2_Translate'/>
<function_alias name='PyUnicode_TranslateCharmap' original='PyUnicodeUCS2_TranslateCharmap'/>
<function_alias name='Py_InitModule4' original='Py_InitModule4_64'/>
<function_alias name='Py_MEMCPY' original='memcpy'/>
<function_alias name='_PyBytes_Eq' original='_PyString_Eq'/>
<function_alias name='_PyBytes_FormatLong' original='_PyString_FormatLong'/>
<function_alias name='_PyBytes_InsertThousandsGrouping' original='_PyString_InsertThousandsGrouping'/>
<function_alias name='_PyBytes_Join' original='_PyString_Join'/>
<function_alias name='_PyBytes_Resize' original='_PyString_Resize'/>
<function_alias name='_PyLong_AsSsize_t' original='PyLong_AsSsize_t'/>
<function_alias name='_PyLong_FromSize_t' original='PyLong_FromSize_t'/>
<function_alias name='_PyLong_FromSsize_t' original='PyLong_FromSsize_t'/>
<function_alias name='_PyObject_Del' original='PyObject_Free'/>
<function_alias name='_PyObject_GC_Del' original='PyObject_GC_Del'/>
<function_alias name='_PyUnicode_AsDefaultEncodedString' original='_PyUnicodeUCS2_AsDefaultEncodedString'/>
<function_alias name='_PyUnicode_Fini' original='PyUnicodeUCS2_Find'/>
<function_alias name='_PyUnicode_IsAlpha' original='_PyUnicodeUCS2_IsAlpha'/>
<function_alias name='_PyUnicode_IsDecimalDigit' original='_PyUnicodeUCS2_IsDecimalDigit'/>
<function_alias name='_PyUnicode_IsDigit' original='_PyUnicodeUCS2_IsDigit'/>
<function_alias name='_PyUnicode_IsLinebreak' original='_PyUnicodeUCS2_IsLinebreak'/>
<function_alias name='_PyUnicode_IsLowercase' original='_PyUnicodeUCS2_IsLowercase'/>
<function_alias name='_PyUnicode_IsNumeric' original='_PyUnicodeUCS2_IsNumeric'/>
<function_alias name='_PyUnicode_IsTitlecase' original='_PyUnicodeUCS2_IsTitlecase'/>
<function_alias name='_PyUnicode_IsUppercase' original='_PyUnicodeUCS2_IsUppercase'/>
<function_alias name='_PyUnicode_IsWhitespace' original='_PyUnicodeUCS2_IsWhitespace'/>
<function_alias name='_PyUnicode_ToDecimalDigit' original='_PyUnicodeUCS2_ToDecimalDigit'/>
<function_alias name='_PyUnicode_ToDigit' original='_PyUnicodeUCS2_ToDigit'/>
<function_alias name='_PyUnicode_ToLowercase' original='_PyUnicodeUCS2_ToLowercase'/>
<function_alias name='_PyUnicode_ToNumeric' original='_PyUnicodeUCS2_ToNumeric'/>
<function_alias name='_PyUnicode_ToTitlecase' original='_PyUnicodeUCS2_ToTitlecase'/>
<function_alias name='_PyUnicode_ToUppercase' original='_PyUnicodeUCS2_ToUppercase'/>
<function_alias name='c_abs' original='_Py_c_abs'/>
<function_alias name='c_diff' original='_Py_c_diff'/>
<function_alias name='c_neg' original='_Py_c_neg'/>
<function_alias name='c_pow' original='_Py_c_pow'/>
<function_alias name='c_prod' original='_Py_c_prod'/>
<function_alias name='c_quot' original='_Py_c_quot'/>
<function_alias name='c_sum' original='_Py_c_sum'/>
</signatures>
