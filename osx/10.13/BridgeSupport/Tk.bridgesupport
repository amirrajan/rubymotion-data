<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/Cocoa.framework'/>
<depends_on path='/System/Library/Frameworks/Carbon.framework'/>
<depends_on path='/System/Library/Frameworks/IOKit.framework'/>
<depends_on path='/System/Library/Frameworks/AppKit.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework'/>
<depends_on path='/System/Library/Frameworks/CoreGraphics.framework'/>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/CoreText.framework'/>
<depends_on path='/System/Library/Frameworks/Foundation.framework'/>
<struct name='Depth' type='{_Depth=&quot;depth&quot;i&quot;nvisuals&quot;i&quot;visuals&quot;^{_Visual=}}'>
<field declared_type='int' name='depth' type='i'/>
<field declared_type='int' name='nvisuals' type='i'/>
<field declared_type='Visual*' name='visuals' type='^{_Visual=}'/>
</struct>
<struct name='Display' type='{_XDisplay=}'>
<field declared_type='XExtData*' name='ext_data' type='^{_XExtData=i^{_XExtData}^?*}'/>
<field declared_type='struct _XFreeFuncs*' name='free_funcs' type='^{_XFreeFuncs=}'/>
<field declared_type='int' name='fd' type='i'/>
<field declared_type='int' name='conn_checker' type='i'/>
<field declared_type='int' name='proto_major_version' type='i'/>
<field declared_type='int' name='proto_minor_version' type='i'/>
<field declared_type='char*' name='vendor' type='*'/>
<field declared_type='int' name='resource_base' type='i'/>
<field declared_type='int' name='resource_mask' type='i'/>
<field declared_type='int' name='resource_id' type='i'/>
<field declared_type='int' name='resource_shift' type='i'/>
<field declared_type='int (int *)' name='XID' type='?'/>
<field declared_type='int' name='byte_order' type='i'/>
<field declared_type='int' name='bitmap_unit' type='i'/>
<field declared_type='int' name='bitmap_pad' type='i'/>
<field declared_type='int' name='bitmap_bit_order' type='i'/>
<field declared_type='int' name='nformats' type='i'/>
<field declared_type='ScreenFormat*' name='pixmap_format' type='^{_ScreenFormat=^{_XExtData}iii}'/>
<field declared_type='int' name='vnumber' type='i'/>
<field declared_type='int' name='release' type='i'/>
<field declared_type='struct _XSQEvent*' name='head' type='^{_XSQEvent=}'/>
<field declared_type='struct _XSQEvent*' name='tail' type='^{_XSQEvent=}'/>
<field declared_type='int' name='qlen' type='i'/>
<field declared_type='unsigned long' name='request' type='L' type64='Q'/>
<field declared_type='char*' name='last_req' type='*'/>
<field declared_type='char*' name='buffer' type='*'/>
<field declared_type='char*' name='bufptr' type='*'/>
<field declared_type='char*' name='bufmax' type='*'/>
<field declared_type='unsigned int' name='max_request_size' type='I'/>
<field declared_type='struct _XrmHashBucketRec*' name='db' type='^{_XrmHashBucketRec=}'/>
<field declared_type='int (*)()' function_pointer='true' name='synchandler' type='^?'>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='char*' name='display_name' type='*'/>
<field declared_type='int' name='default_screen' type='i'/>
<field declared_type='int' name='nscreens' type='i'/>
<field declared_type='Screen*' name='screens' type='^{_Screen=}'/>
<field declared_type='unsigned long' name='motion_buffer' type='L' type64='Q'/>
<field declared_type='unsigned long' name='flags' type='L' type64='Q'/>
<field declared_type='int' name='min_keycode' type='i'/>
<field declared_type='int' name='max_keycode' type='i'/>
<field declared_type='int*' name='keysyms' type='^i'/>
<field declared_type='XModifierKeymap*' name='modifiermap' type='^{_XModifierKeymap=}'/>
<field declared_type='int' name='keysyms_per_keycode' type='i'/>
<field declared_type='char*' name='xdefaults' type='*'/>
<field declared_type='char*' name='scratch_buffer' type='*'/>
<field declared_type='unsigned long' name='scratch_length' type='L' type64='Q'/>
<field declared_type='int' name='ext_number' type='i'/>
<field declared_type='struct _XExten*' name='ext_procs' type='^{_XExten=}'/>
<field declared_type='int (**)()' name='event_vec' type='[128^?]'/>
<field declared_type='Status (**)()' name='wire_vec' type='[128^?]'/>
<field declared_type='int' name='lock_meaning' type='i'/>
<field declared_type='struct _XLockInfo*' name='lock' type='^{_XLockInfo=}'/>
<field declared_type='struct _XInternalAsync*' name='async_handlers' type='^{_XInternalAsync=}'/>
<field declared_type='unsigned long' name='bigreq_size' type='L' type64='Q'/>
<field declared_type='struct _XLockPtrs*' name='lock_fns' type='^{_XLockPtrs=}'/>
<field declared_type='struct _XKeytrans*' name='key_bindings' type='^{_XKeytrans=}'/>
<field declared_type='int' name='cursor_font' type='i'/>
<field declared_type='struct _XDisplayAtoms*' name='atoms' type='^{_XDisplayAtoms=}'/>
<field declared_type='unsigned int' name='mode_switch' type='I'/>
<field declared_type='struct _XContextDB*' name='context_db' type='^{_XContextDB=}'/>
<field declared_type='int (**)()' name='error_vec' type='^^?'/>
<field declared_type='struct (anonymous struct at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Tk.framework/Headers/X11/Xlib.h:513:2)' name='cms' type='{_structanonymousstructatApplicationsXcodeappContentsDeveloperPlatformsMacOSXplatformDeveloperSDKsMacOSX1013sdkSystemLibraryFrameworksTkframeworkHeadersX11Xlibh5132=&quot;defaultCCCs&quot;*&quot;clientCmaps&quot;*&quot;perVisualIntensityMaps&quot;*}'/>
<field declared_type='struct _XIMFilter*' name='im_filters' type='^{_XIMFilter=}'/>
<field declared_type='struct _XSQEvent*' name='qfree' type='^{_XSQEvent=}'/>
<field declared_type='unsigned long' name='next_event_serial_num' type='L' type64='Q'/>
<field declared_type='int (*)()' function_pointer='true' name='savedsynchandler' type='^?'>
<retval declared_type='int' type='i'/>
</field>
</struct>
<struct name='MacDrawable' type='{TkWindowPrivate=&quot;winPtr&quot;^{TkWindow}&quot;view&quot;@&quot;NSView&quot;&quot;context&quot;^{CGContext}&quot;xOff&quot;i&quot;yOff&quot;i&quot;size&quot;{CGSize=&quot;width&quot;f&quot;height&quot;f}&quot;visRgn&quot;^{__HIShape}&quot;aboveVisRgn&quot;^{__HIShape}&quot;drawRgn&quot;^{__HIShape}&quot;referenceCount&quot;i&quot;toplevel&quot;^{TkWindowPrivate}&quot;flags&quot;i}' type64='{TkWindowPrivate=&quot;winPtr&quot;^{TkWindow}&quot;view&quot;@&quot;NSView&quot;&quot;context&quot;^{CGContext}&quot;xOff&quot;i&quot;yOff&quot;i&quot;size&quot;{CGSize=&quot;width&quot;d&quot;height&quot;d}&quot;visRgn&quot;^{__HIShape}&quot;aboveVisRgn&quot;^{__HIShape}&quot;drawRgn&quot;^{__HIShape}&quot;referenceCount&quot;i&quot;toplevel&quot;^{TkWindowPrivate}&quot;flags&quot;i}'>
<field declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<field declared_type='NSView*' name='view' type='@&quot;NSView&quot;'/>
<field declared_type='CGContextRef' name='context' type='^{CGContext=}'/>
<field declared_type='int' name='xOff' type='i'/>
<field declared_type='int' name='yOff' type='i'/>
<field declared_type='CGSize' name='size' type='{CGSize=&quot;width&quot;f&quot;height&quot;f}' type64='{CGSize=&quot;width&quot;d&quot;height&quot;d}'/>
<field declared_type='HIShapeRef' name='visRgn' type='^{__HIShape=}'/>
<field declared_type='HIShapeRef' name='aboveVisRgn' type='^{__HIShape=}'/>
<field declared_type='HIShapeRef' name='drawRgn' type='^{__HIShape=}'/>
<field declared_type='int' name='referenceCount' type='i'/>
<field declared_type='struct TkWindowPrivate*' name='toplevel' type='^{TkWindowPrivate=^{TkWindow}@^{CGContext}ii{CGSize=ff}^{__HIShape}^{__HIShape}^{__HIShape}i^{TkWindowPrivate}i}' type64='^{TkWindowPrivate=^{TkWindow}@^{CGContext}ii{CGSize=dd}^{__HIShape}^{__HIShape}^{__HIShape}i^{TkWindowPrivate}i}'/>
<field declared_type='int' name='flags' type='i'/>
</struct>
<struct name='NullElement' type='{_NullElement=&quot;unused&quot;^{Tcl_Obj}}'>
<field declared_type='Tcl_Obj*' name='unused' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</struct>
<struct name='Screen' type='{_Screen=}'>
<field declared_type='XExtData*' name='ext_data' type='^{_XExtData=i^{_XExtData}^?*}'/>
<field declared_type='struct _XDisplay*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='root' type='i'/>
<field declared_type='int' name='width' type='i'/>
<field declared_type='int' name='height' type='i'/>
<field declared_type='int' name='mwidth' type='i'/>
<field declared_type='int' name='mheight' type='i'/>
<field declared_type='int' name='ndepths' type='i'/>
<field declared_type='Depth*' name='depths' type='^{_Depth=ii^{?}}'/>
<field declared_type='int' name='root_depth' type='i'/>
<field declared_type='Visual*' name='root_visual' type='^{_Visual=}'/>
<field declared_type='GC' name='default_gc' type='^{_GC=}'/>
<field declared_type='int' name='cmap' type='i'/>
<field declared_type='unsigned long' name='white_pixel' type='L' type64='Q'/>
<field declared_type='unsigned long' name='black_pixel' type='L' type64='Q'/>
<field declared_type='int' name='max_maps' type='i'/>
<field declared_type='int' name='min_maps' type='i'/>
<field declared_type='int' name='backing_store' type='i'/>
<field declared_type='int' name='save_unders' type='i'/>
<field declared_type='long' name='root_input_mask' type='l' type64='q'/>
</struct>
<struct name='ScreenFormat' type='{_ScreenFormat=&quot;ext_data&quot;^{_XExtData}&quot;depth&quot;i&quot;bits_per_pixel&quot;i&quot;scanline_pad&quot;i}'>
<field declared_type='XExtData*' name='ext_data' type='^{_XExtData=i^{_XExtData}^?*}'/>
<field declared_type='int' name='depth' type='i'/>
<field declared_type='int' name='bits_per_pixel' type='i'/>
<field declared_type='int' name='scanline_pad' type='i'/>
</struct>
<struct name='TTKLayoutInstruction' type='{_TTKLayoutInstruction=&quot;elementName&quot;*&quot;opcode&quot;I}'>
<field const='true' declared_type='char*' name='elementName' type='*'/>
<field declared_type='unsigned int' name='opcode' type='I'/>
</struct>
<struct name='TkCaret' type='{TkCaret=&quot;winPtr&quot;^{TkWindow}&quot;x&quot;i&quot;y&quot;i&quot;height&quot;i}'>
<field declared_type='struct TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='height' type='i'/>
</struct>
<struct name='TkCursor' type='{TkCursor=&quot;cursor&quot;^{Tk_Cursor_}&quot;display&quot;^{_XDisplay}&quot;resourceRefCount&quot;i&quot;objRefCount&quot;i&quot;otherTable&quot;^{Tcl_HashTable}&quot;hashPtr&quot;^{Tcl_HashEntry}&quot;idHashPtr&quot;^{Tcl_HashEntry}&quot;nextPtr&quot;^{TkCursor}}'>
<field declared_type='Tk_Cursor' name='cursor' type='^{Tk_Cursor_=}'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='resourceRefCount' type='i'/>
<field declared_type='int' name='objRefCount' type='i'/>
<field declared_type='Tcl_HashTable*' name='otherTable' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<field declared_type='Tcl_HashEntry*' name='hashPtr' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][1c])}'/>
<field declared_type='Tcl_HashEntry*' name='idHashPtr' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][1c])}'/>
<field declared_type='struct TkCursor*' name='nextPtr' type='^{TkCursor=^{Tk_Cursor_}^{_XDisplay}ii^{Tcl_HashTable}^{Tcl_HashEntry}^{Tcl_HashEntry}^{TkCursor}}'/>
</struct>
<struct name='TkDisplay' type='{TkDisplay=}'>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='struct TkDisplay*' name='nextPtr' type='^{TkDisplay=}'/>
<field declared_type='char*' name='name' type='*'/>
<field declared_type='int' name='lastEventTime' type='i'/>
<field declared_type='int' name='borderInit' type='i'/>
<field declared_type='Tcl_HashTable' name='borderTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='int' name='atomInit' type='i'/>
<field declared_type='Tcl_HashTable' name='nameTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='Tcl_HashTable' name='atomTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='int' name='bindInfoStale' type='i'/>
<field declared_type='unsigned int' name='modeModMask' type='I'/>
<field declared_type='unsigned int' name='metaModMask' type='I'/>
<field declared_type='unsigned int' name='altModMask' type='I'/>
<field declared_type='enum (anonymous enum at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Tk.framework/Headers/tk-private/tkInt.h:209:5)' name='lockUsage' type='i'/>
<field declared_type='int' name='numModKeyCodes' type='i'/>
<field declared_type='int*' name='modKeyCodes' type='^i'/>
<field declared_type='int' name='bitmapInit' type='i'/>
<field declared_type='int' name='bitmapAutoNumber' type='i'/>
<field declared_type='Tcl_HashTable' name='bitmapNameTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='Tcl_HashTable' name='bitmapIdTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='Tcl_HashTable' name='bitmapDataTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='int' name='numIdSearches' type='i'/>
<field declared_type='int' name='numSlowSearches' type='i'/>
<field declared_type='int' name='colorInit' type='i'/>
<field declared_type='TkStressedCmap*' name='stressPtr' type='^{TkStressedCmap=}'/>
<field declared_type='Tcl_HashTable' name='colorNameTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='Tcl_HashTable' name='colorValueTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='int' name='cursorInit' type='i'/>
<field declared_type='Tcl_HashTable' name='cursorNameTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='Tcl_HashTable' name='cursorDataTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='Tcl_HashTable' name='cursorIdTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='char*' name='cursorString' type='[20c]'/>
<field declared_type='int' name='cursorFont' type='i'/>
<field declared_type='struct TkErrorHandler*' name='errorPtr' type='^{TkErrorHandler=^{TkDisplay}LLiii^?^v^{TkErrorHandler}}' type64='^{TkErrorHandler=^{TkDisplay}QQiii^?^v^{TkErrorHandler}}'/>
<field declared_type='int' name='deleteCount' type='i'/>
<field declared_type='struct TkWindowEvent*' name='delayedMotionPtr' type='^{TkWindowEvent=}'/>
<field declared_type='int' name='focusDebug' type='i'/>
<field declared_type='struct TkWindow*' name='implicitWinPtr' type='^{TkWindow=}'/>
<field declared_type='struct TkWindow*' name='focusPtr' type='^{TkWindow=}'/>
<field declared_type='Tcl_HashTable' name='gcValueTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='Tcl_HashTable' name='gcIdTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='int' name='gcInit' type='i'/>
<field declared_type='Tcl_HashTable' name='maintainHashTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='int' name='geomInit' type='i'/>
<field declared_type='Tcl_HashTable' name='uidTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='int' name='uidInit' type='i'/>
<field declared_type='struct TkWindow*' name='grabWinPtr' type='^{TkWindow=}'/>
<field declared_type='struct TkWindow*' name='eventualGrabWinPtr' type='^{TkWindow=}'/>
<field declared_type='struct TkWindow*' name='buttonWinPtr' type='^{TkWindow=}'/>
<field declared_type='struct TkWindow*' name='serverWinPtr' type='^{TkWindow=}'/>
<field declared_type='TkGrabEvent*' name='firstGrabEventPtr' type='^{TkGrabEvent=}'/>
<field declared_type='TkGrabEvent*' name='lastGrabEventPtr' type='^{TkGrabEvent=}'/>
<field declared_type='int' name='grabFlags' type='i'/>
<field declared_type='int' name='gridInit' type='i'/>
<field declared_type='Tcl_HashTable' name='gridHashTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='int' name='imageId' type='i'/>
<field declared_type='int' name='postCommandGeneration' type='i'/>
<field declared_type='int' name='packInit' type='i'/>
<field declared_type='Tcl_HashTable' name='packerHashTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='int' name='placeInit' type='i'/>
<field declared_type='Tcl_HashTable' name='masterTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='Tcl_HashTable' name='slaveTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='struct TkSelectionInfo*' name='selectionInfoPtr' type='^{TkSelectionInfo=}'/>
<field declared_type='int' name='multipleAtom' type='i'/>
<field declared_type='int' name='incrAtom' type='i'/>
<field declared_type='int' name='targetsAtom' type='i'/>
<field declared_type='int' name='timestampAtom' type='i'/>
<field declared_type='int' name='textAtom' type='i'/>
<field declared_type='int' name='compoundTextAtom' type='i'/>
<field declared_type='int' name='applicationAtom' type='i'/>
<field declared_type='int' name='windowAtom' type='i'/>
<field declared_type='int' name='clipboardAtom' type='i'/>
<field declared_type='int' name='utf8Atom' type='i'/>
<field declared_type='Tk_Window' name='clipWindow' type='^{Tk_Window_=}'/>
<field declared_type='int' name='clipboardActive' type='i'/>
<field declared_type='struct TkMainInfo*' name='clipboardAppPtr' type='^{TkMainInfo=}'/>
<field declared_type='struct TkClipboardTarget*' name='clipTargetPtr' type='^{TkClipboardTarget=}'/>
<field declared_type='Tk_Window' name='commTkwin' type='^{Tk_Window_=}'/>
<field declared_type='int' name='commProperty' type='i'/>
<field declared_type='int' name='registryProperty' type='i'/>
<field declared_type='int' name='appNameProperty' type='i'/>
<field declared_type='struct TkIdStack*' name='idStackPtr' type='^{TkIdStack=}'/>
<field declared_type='int (int *)' name='XID' type='?'/>
<field declared_type='struct TkIdStack*' name='windowStackPtr' type='^{TkIdStack=}'/>
<field declared_type='Tcl_TimerToken' name='idCleanupScheduled' type='^{Tcl_TimerToken_=}'/>
<field declared_type='struct TkWmInfo*' name='firstWmPtr' type='^{TkWmInfo=}'/>
<field declared_type='struct TkWmInfo*' name='foregroundWmPtr' type='^{TkWmInfo=}'/>
<field declared_type='int' name='destroyCount' type='i'/>
<field declared_type='unsigned long' name='lastDestroyRequest' type='L' type64='Q'/>
<field declared_type='TkColormap*' name='cmapPtr' type='^{TkColormap=}'/>
<field declared_type='Tcl_HashTable' name='winTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='int' name='refCount' type='i'/>
<field declared_type='int' name='mouseButtonState' type='i'/>
<field declared_type='Window' name='mouseButtonWindow' type='?'/>
<field declared_type='Window' name='warpWindow' type='?'/>
<field declared_type='int' name='warpX' type='i'/>
<field declared_type='int' name='warpY' type='i'/>
<field declared_type='unsigned int' name='flags' type='I'/>
<field declared_type='TkCaret' name='caret' type='{TkCaret=&quot;winPtr&quot;^{TkWindow}&quot;x&quot;i&quot;y&quot;i&quot;height&quot;i}'/>
<field declared_type='int' name='iconDataSize' type='i'/>
<field declared_type='unsigned char*' name='iconDataPtr' type='*'/>
</struct>
<struct name='TkErrorHandler' type='{TkErrorHandler=&quot;dispPtr&quot;^{TkDisplay}&quot;firstRequest&quot;L&quot;lastRequest&quot;L&quot;error&quot;i&quot;request&quot;i&quot;minorCode&quot;i&quot;errorProc&quot;^?&quot;clientData&quot;^v&quot;nextPtr&quot;^{TkErrorHandler}}' type64='{TkErrorHandler=&quot;dispPtr&quot;^{TkDisplay}&quot;firstRequest&quot;Q&quot;lastRequest&quot;Q&quot;error&quot;i&quot;request&quot;i&quot;minorCode&quot;i&quot;errorProc&quot;^?&quot;clientData&quot;^v&quot;nextPtr&quot;^{TkErrorHandler}}'>
<field declared_type='TkDisplay*' name='dispPtr' type='^{TkDisplay=}'/>
<field declared_type='unsigned long' name='firstRequest' type='L' type64='Q'/>
<field declared_type='unsigned long' name='lastRequest' type='L' type64='Q'/>
<field declared_type='int' name='error' type='i'/>
<field declared_type='int' name='request' type='i'/>
<field declared_type='int' name='minorCode' type='i'/>
<field declared_type='Tk_ErrorProc*' function_pointer='true' name='errorProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='XErrorEvent*' type='^{_XErrorEvent=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='ClientData' name='clientData' type='^v'/>
<field declared_type='struct TkErrorHandler*' name='nextPtr' type='^{TkErrorHandler=^{TkDisplay}LLiii^?^v^{TkErrorHandler}}' type64='^{TkErrorHandler=^{TkDisplay}QQiii^?^v^{TkErrorHandler}}'/>
</struct>
<struct name='TkEventHandler' type='{TkEventHandler=&quot;mask&quot;L&quot;proc&quot;^?&quot;clientData&quot;^v&quot;nextPtr&quot;^{TkEventHandler}}' type64='{TkEventHandler=&quot;mask&quot;Q&quot;proc&quot;^?&quot;clientData&quot;^v&quot;nextPtr&quot;^{TkEventHandler}}'>
<field declared_type='unsigned long' name='mask' type='L' type64='Q'/>
<field declared_type='Tk_EventProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='ClientData' name='clientData' type='^v'/>
<field declared_type='struct TkEventHandler*' name='nextPtr' type='^{TkEventHandler=L^?^v^{TkEventHandler}}' type64='^{TkEventHandler=Q^?^v^{TkEventHandler}}'/>
</struct>
<struct name='TkFont' type='{TkFont=}'>
<field declared_type='int' name='resourceRefCount' type='i'/>
<field declared_type='int' name='objRefCount' type='i'/>
<field declared_type='Tcl_HashEntry*' name='cacheHashPtr' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][1c])}'/>
<field declared_type='Tcl_HashEntry*' name='namedHashPtr' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][1c])}'/>
<field declared_type='Screen*' name='screen' type='^{_Screen=}'/>
<field declared_type='int' name='tabWidth' type='i'/>
<field declared_type='int' name='underlinePos' type='i'/>
<field declared_type='int' name='underlineHeight' type='i'/>
<field declared_type='int' name='fid' type='i'/>
<field declared_type='TkFontAttributes' name='fa' type='{TkFontAttributes=&quot;family&quot;*&quot;size&quot;i&quot;weight&quot;i&quot;slant&quot;i&quot;underline&quot;i&quot;overstrike&quot;i}'/>
<field declared_type='TkFontMetrics' name='fm' type='{TkFontMetrics=&quot;ascent&quot;i&quot;descent&quot;i&quot;maxWidth&quot;i&quot;fixed&quot;i}'/>
<field declared_type='struct TkFont*' name='nextPtr' type='^{TkFont=}'/>
</struct>
<struct name='TkFontAttributes' type='{TkFontAttributes=&quot;family&quot;*&quot;size&quot;i&quot;weight&quot;i&quot;slant&quot;i&quot;underline&quot;i&quot;overstrike&quot;i}'>
<field declared_type='Tk_Uid' name='family' type='*'/>
<field declared_type='int' name='size' type='i'/>
<field declared_type='int' name='weight' type='i'/>
<field declared_type='int' name='slant' type='i'/>
<field declared_type='int' name='underline' type='i'/>
<field declared_type='int' name='overstrike' type='i'/>
</struct>
<struct name='TkFontMetrics' type='{TkFontMetrics=&quot;ascent&quot;i&quot;descent&quot;i&quot;maxWidth&quot;i&quot;fixed&quot;i}'>
<field declared_type='int' name='ascent' type='i'/>
<field declared_type='int' name='descent' type='i'/>
<field declared_type='int' name='maxWidth' type='i'/>
<field declared_type='int' name='fixed' type='i'/>
</struct>
<struct name='TkIntPlatStubs' type='{TkIntPlatStubs=}'>
<field declared_type='int' name='magic' type='i'/>
<field declared_type='struct TkIntPlatStubHooks*' name='hooks' type='^{TkIntPlatStubHooks=}'/>
<field declared_type='void (*)(void)' function_pointer='true' name='tkCreateXEventSource' type='^?'>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkDisplay *, Window *)' function_pointer='true' name='tkFreeWindowId' type='^?'>
<arg declared_type='TkDisplay*' type='^{TkDisplay=}'/>
<arg declared_type='Window*' function_pointer='true' type='^?'>
<retval declared_type='int' type='i'/>
</arg>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkDisplay *)' function_pointer='true' name='tkInitXId' type='^?'>
<arg declared_type='TkDisplay*' type='^{TkDisplay=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tk_Window, int)' function_pointer='true' name='tkpCmapStressed' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Display *)' function_pointer='true' name='tkpSync' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(TkWindow *)' function_pointer='true' name='tkUnixContainerId' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Time *)' function_pointer='true' name='tkUnixDoOneXEvent' type='^?'>
<arg declared_type='Tcl_Time*' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tk_Window, Tk_Window)' function_pointer='true' name='tkUnixSetMenubar' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, Window *)' function_pointer='true' name='tkpScanWindowId' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Window*' function_pointer='true' type='^?'>
<retval declared_type='int' type='i'/>
</arg>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(TkDisplay *)' function_pointer='true' name='tkWmCleanup' type='^?'>
<arg declared_type='TkDisplay*' type='^{TkDisplay=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkDisplay *)' function_pointer='true' name='tkSendCleanup' type='^?'>
<arg declared_type='TkDisplay*' type='^{TkDisplay=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkDisplay *)' function_pointer='true' name='tkFreeXId' type='^?'>
<arg declared_type='TkDisplay*' type='^{TkDisplay=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(TkWindow *, int)' function_pointer='true' name='tkpWmSetState' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(ClientData, Tcl_Interp *, int, char **)' function_pointer='true' name='tkpTestsendCmd' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<retval declared_type='int' type='i'/>
</field>
</struct>
<struct name='TkIntStubs' type='{TkIntStubs=}'>
<field declared_type='int' name='magic' type='i'/>
<field declared_type='struct TkIntStubHooks*' name='hooks' type='^{TkIntStubHooks=}'/>
<field declared_type='TkWindow *(*)(TkDisplay *, int, TkWindow *)' function_pointer='true' name='tkAllocWindow' type='^?'>
<arg declared_type='TkDisplay*' type='^{TkDisplay=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='TkWindow*' type='^{TkWindow=}'/>
</field>
<field declared_type='void (*)(double *, int, double *)' function_pointer='true' name='tkBezierPoints' type='^?'>
<arg declared_type='double*' type='^d'/>
<arg declared_type='int' type='i'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Canvas, double *, int, XPoint *)' function_pointer='true' name='tkBezierScreenPoints' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double*' type='^d'/>
<arg declared_type='int' type='i'/>
<arg declared_type='XPoint*' type='^{_XPoint=ss}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkWindow *)' function_pointer='true' name='tkBindDeadWindow' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkWindow *, XEvent *)' function_pointer='true' name='tkBindEventProc' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkMainInfo *)' function_pointer='true' name='tkBindFree' type='^?'>
<arg declared_type='TkMainInfo*' type='^{TkMainInfo=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkMainInfo *)' function_pointer='true' name='tkBindInit' type='^?'>
<arg declared_type='TkMainInfo*' type='^{TkMainInfo=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(XEvent *, TkWindow *)' function_pointer='true' name='tkChangeEventWindow' type='^?'>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, TkDisplay *)' function_pointer='true' name='tkClipInit' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='TkDisplay*' type='^{TkDisplay=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tk_Anchor, Tk_Window, int, int, int, int, int *, int *)' function_pointer='true' name='tkComputeAnchor' type='^?'>
<arg declared_type='Tk_Anchor' type='i'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *)' function_pointer='true' name='tkCopyAndGlobalEval' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='unsigned long (*)(Tcl_Interp *, int, ClientData, char *, TkBindEvalProc *, TkBindFreeProc *, ClientData)' function_pointer='true' name='tkCreateBindingProcedure' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='ClientData' type='^v'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='TkBindEvalProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='TkBindFreeProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='unsigned long' type='L' type64='Q'/>
</field>
<field declared_type='TkCursor *(*)(Tk_Window, char *, char *, int, int, int, int, XColor, XColor)' function_pointer='true' name='tkCreateCursorFromData' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='XColor' type='{_XColor=LSSScc}' type64='{_XColor=QSSScc}'/>
<arg declared_type='XColor' type='{_XColor=LSSScc}' type64='{_XColor=QSSScc}'/>
<retval declared_type='TkCursor*' type='^{TkCursor=^{Tk_Cursor_}^{_XDisplay}ii^{Tcl_HashTable}^{Tcl_HashEntry}^{Tcl_HashEntry}^{TkCursor}}'/>
</field>
<field declared_type='int (*)(ClientData, Tcl_Interp *, int, char **, int, char *)' function_pointer='true' name='tkCreateFrame' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='char**' type='^*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_Window (*)(Tcl_Interp *, char *, char *)' function_pointer='true' name='tkCreateMainWindow' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
</field>
<field declared_type='int (int *)' name='Time' type='?'/>
<field declared_type='void (*)(TkMainInfo *)' function_pointer='true' name='tkDeleteAllImages' type='^?'>
<arg declared_type='TkMainInfo*' type='^{TkMainInfo=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkWindow *)' function_pointer='true' name='tkDoConfigureNotify' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, GC, int, int, int)' function_pointer='true' name='tkDrawInsetFocusHighlight' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='GC' type='^{_GC=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkWindow *)' function_pointer='true' name='tkEventDeadWindow' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Canvas, double *, int, Display *, int, GC, GC)' function_pointer='true' name='tkFillPolygon' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double*' type='^d'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='GC' type='^{_GC=}'/>
<arg declared_type='GC' type='^{_GC=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, TkStateMap *, char *)' function_pointer='true' name='tkFindStateNum' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='TkStateMap*' type='^{TkStateMap=i*}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='char *(*)( TkStateMap *, int)' function_pointer='true' name='tkFindStateString' type='^?'>
<arg const='true' declared_type='TkStateMap*' type='^{TkStateMap=i*}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='void (*)(TkWindow *)' function_pointer='true' name='tkFocusDeadWindow' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(TkWindow *, XEvent *)' function_pointer='true' name='tkFocusFilterEvent' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='TkWindow *(*)(TkWindow *, XEvent *)' function_pointer='true' name='tkFocusKeyEvent' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='TkWindow*' type='^{TkWindow=}'/>
</field>
<field declared_type='void (*)(TkMainInfo *)' function_pointer='true' name='tkFontPkgInit' type='^?'>
<arg declared_type='TkMainInfo*' type='^{TkMainInfo=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkMainInfo *)' function_pointer='true' name='tkFontPkgFree' type='^?'>
<arg declared_type='TkMainInfo*' type='^{TkMainInfo=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkWindow *)' function_pointer='true' name='tkFreeBindingTags' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkCursor *)' function_pointer='true' name='tkpFreeCursor' type='^?'>
<arg declared_type='TkCursor*' type='^{TkCursor=^{Tk_Cursor_}^{_XDisplay}ii^{Tcl_HashTable}^{Tcl_HashEntry}^{Tcl_HashEntry}^{TkCursor}}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='char *(*)(Tcl_Interp *, char *, char *, int *, int *, int *, int *)' function_pointer='true' name='tkGetBitmapData' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='void (*)(double *, double *, double, int, double *, double *)' function_pointer='true' name='tkGetButtPoints' type='^?'>
<arg declared_type='double*' type='^d'/>
<arg declared_type='double*' type='^d'/>
<arg declared_type='double' type='d'/>
<arg declared_type='int' type='i'/>
<arg declared_type='double*' type='^d'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='TkCursor *(*)(Tcl_Interp *, Tk_Window, Tk_Uid)' function_pointer='true' name='tkGetCursorByName' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_Uid' type='*'/>
<retval declared_type='TkCursor*' type='^{TkCursor=^{Tk_Cursor_}^{_XDisplay}ii^{Tcl_HashTable}^{Tcl_HashEntry}^{Tcl_HashEntry}^{TkCursor}}'/>
</field>
<field const='true' declared_type='char *(*)(Tcl_Interp *, char *)' function_pointer='true' name='tkGetDefaultScreenName' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='TkDisplay *(*)(Display *)' function_pointer='true' name='tkGetDisplay' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<retval declared_type='TkDisplay*' type='^{TkDisplay=}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, int, Tcl_Obj * *, Tk_Window *)' function_pointer='true' name='tkGetDisplayOf' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<arg declared_type='Tk_Window*' type='^^{Tk_Window_}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='TkWindow *(*)(TkWindow *)' function_pointer='true' name='tkGetFocusWin' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='TkWindow*' type='^{TkWindow=}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Window)' function_pointer='true' name='tkGetInterpNames' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(double *, double *, double *, double, double *, double *)' function_pointer='true' name='tkGetMiterPoints' type='^?'>
<arg declared_type='double*' type='^d'/>
<arg declared_type='double*' type='^d'/>
<arg declared_type='double*' type='^d'/>
<arg declared_type='double' type='d'/>
<arg declared_type='double*' type='^d'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tk_Window, int *, int *)' function_pointer='true' name='tkGetPointerCoords' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tk_Window)' function_pointer='true' name='tkGetServerInfo' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkWindow *)' function_pointer='true' name='tkGrabDeadWindow' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(TkWindow *)' function_pointer='true' name='tkGrabState' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tk_Item *, double *)' function_pointer='true' name='tkIncludePoint' type='^?'>
<arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(XEvent *, TkWindow *, TkWindow *, int, int, Tcl_QueuePosition)' function_pointer='true' name='tkInOutEvents' type='^?'>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_QueuePosition' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window)' function_pointer='true' name='tkInstallFrameMenu' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='char *(*)(int)' function_pointer='true' name='tkKeysymToString' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(double *, double *, double *)' function_pointer='true' name='tkLineToArea' type='^?'>
<arg declared_type='double*' type='^d'/>
<arg declared_type='double*' type='^d'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='double (*)(double *, double *, double *)' function_pointer='true' name='tkLineToPoint' type='^?'>
<arg declared_type='double*' type='^d'/>
<arg declared_type='double*' type='^d'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='double' type='d'/>
</field>
<field declared_type='int (*)(Tk_Canvas, double *, int, int, XPoint *, double *)' function_pointer='true' name='tkMakeBezierCurve' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double*' type='^d'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='XPoint*' type='^{_XPoint=ss}'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tk_Canvas, double *, int)' function_pointer='true' name='tkMakeBezierPostscript' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double*' type='^d'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkWindow *)' function_pointer='true' name='tkOptionClassChanged' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkWindow *)' function_pointer='true' name='tkOptionDeadWindow' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(double *, double *)' function_pointer='true' name='tkOvalToArea' type='^?'>
<arg declared_type='double*' type='^d'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='double (*)(double *, double, int, double *)' function_pointer='true' name='tkOvalToPoint' type='^?'>
<arg declared_type='double*' type='^d'/>
<arg declared_type='double' type='d'/>
<arg declared_type='int' type='i'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='double' type='d'/>
</field>
<field declared_type='int (*)(TkWindow *, int)' function_pointer='true' name='tkpChangeFocus' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(TkDisplay *)' function_pointer='true' name='tkpCloseDisplay' type='^?'>
<arg declared_type='TkDisplay*' type='^{TkDisplay=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkWindow *, int)' function_pointer='true' name='tkpClaimFocus' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)( char *, char *)' function_pointer='true' name='tkpDisplayWarning' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tcl_DString *)' function_pointer='true' name='tkpGetAppName' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='TkWindow *(*)(TkWindow *)' function_pointer='true' name='tkpGetOtherWindow' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='TkWindow*' type='^{TkWindow=}'/>
</field>
<field declared_type='TkWindow *(*)(TkWindow *)' function_pointer='true' name='tkpGetWrapperWindow' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='TkWindow*' type='^{TkWindow=}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *)' function_pointer='true' name='tkpInit' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, int)' function_pointer='true' name='tkpInitializeMenuBindings' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window)' function_pointer='true' name='tkpMakeContainer' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int)' function_pointer='true' name='tkpMakeMenuWindow' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(TkWindow *, Window *)' function_pointer='true' name='tkpMakeWindow' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<arg declared_type='Window*' function_pointer='true' type='^?'>
<retval declared_type='int' type='i'/>
</arg>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, char *)' function_pointer='true' name='tkpMenuNotifyToplevelCreate' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='TkDisplay *(*)( char *)' function_pointer='true' name='tkpOpenDisplay' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='TkDisplay*' type='^{TkDisplay=}'/>
</field>
<field declared_type='int (*)(XEvent *, TkWindow *)' function_pointer='true' name='tkPointerEvent' type='^?'>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(double *, int, double *)' function_pointer='true' name='tkPolygonToArea' type='^?'>
<arg declared_type='double*' type='^d'/>
<arg declared_type='int' type='i'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='double (*)(double *, int, double *)' function_pointer='true' name='tkPolygonToPoint' type='^?'>
<arg declared_type='double*' type='^d'/>
<arg declared_type='int' type='i'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='double' type='d'/>
</field>
<field declared_type='int (*)(TkWindow *, TkWindow *)' function_pointer='true' name='tkPositionInTree' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(TkWindow *, XEvent *)' function_pointer='true' name='tkpRedirectKeyEvent' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tk_Window, char *)' function_pointer='true' name='tkpSetMainMenubar' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Window, char *)' function_pointer='true' name='tkpUseWindow' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Window *, TkDisplay *)' function_pointer='true' name='tkpWindowWasRecentlyDeleted' type='^?'>
<arg declared_type='Window*' function_pointer='true' type='^?'>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='TkDisplay*' type='^{TkDisplay=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(TkWindow *, XEvent *)' function_pointer='true' name='tkQueueEventForAllChildren' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Display *, int, char *, unsigned int *, unsigned int *, int *, int *, int *)' function_pointer='true' name='tkReadBitmapFile' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='unsigned int*' type='^I'/>
<arg declared_type='unsigned int*' type='^I'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tk_Window, GC, int, int, int, int, int, int, TkRegion)' function_pointer='true' name='tkScrollWindow' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='GC' type='^{_GC=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='TkRegion' type='^{TkRegion_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(TkWindow *)' function_pointer='true' name='tkSelDeadWindow' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, XEvent *)' function_pointer='true' name='tkSelEventProc' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window)' function_pointer='true' name='tkSelInit' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(XEvent *)' function_pointer='true' name='tkSelPropProc' type='^?'>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' name='reserved84' type='^v'/>
<field declared_type='void (*)(Tcl_Interp *, Tk_Window, char *, char *)' function_pointer='true' name='tkSetWindowMenuBar' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (int *)' name='KeySym' type='?'/>
<field declared_type='int (*)(double *, int, double, int, int, double *)' function_pointer='true' name='tkThickPolyLineToArea' type='^?'>
<arg declared_type='double*' type='^d'/>
<arg declared_type='int' type='i'/>
<arg declared_type='double' type='d'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(TkWindow *)' function_pointer='true' name='tkWmAddToColormapWindows' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkWindow *)' function_pointer='true' name='tkWmDeadWindow' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='TkWindow *(*)(TkWindow *)' function_pointer='true' name='tkWmFocusToplevel' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='TkWindow*' type='^{TkWindow=}'/>
</field>
<field declared_type='void (*)(TkWindow *)' function_pointer='true' name='tkWmMapWindow' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkWindow *)' function_pointer='true' name='tkWmNewWindow' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkWindow *, XEvent *)' function_pointer='true' name='tkWmProtocolEventProc' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkWindow *)' function_pointer='true' name='tkWmRemoveFromColormapWindows' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkWindow *, int, TkWindow *)' function_pointer='true' name='tkWmRestackToplevel' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkWindow *)' function_pointer='true' name='tkWmSetClass' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkWindow *)' function_pointer='true' name='tkWmUnmapWindow' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tk_Window, char *)' function_pointer='true' name='tkDebugBitmap' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tk_Window, char *)' function_pointer='true' name='tkDebugBorder' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tk_Window, char *)' function_pointer='true' name='tkDebugCursor' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tk_Window, char *)' function_pointer='true' name='tkDebugColor' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Interp *, Tk_OptionTable)' function_pointer='true' name='tkDebugConfig' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tk_Window, char *)' function_pointer='true' name='tkDebugFont' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, TkStateMap *, Tcl_Obj *)' function_pointer='true' name='tkFindStateNumObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='TkStateMap*' type='^{TkStateMap=i*}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_HashTable *(*)(void)' function_pointer='true' name='tkGetBitmapPredefTable' type='^?'>
<retval declared_type='Tcl_HashTable*' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
</field>
<field declared_type='TkDisplay *(*)(void)' function_pointer='true' name='tkGetDisplayList' type='^?'>
<retval declared_type='TkDisplay*' type='^{TkDisplay=}'/>
</field>
<field declared_type='TkMainInfo *(*)(void)' function_pointer='true' name='tkGetMainInfoList' type='^?'>
<retval declared_type='TkMainInfo*' type='^{TkMainInfo=}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Window, Tcl_Obj *, Tk_Window *)' function_pointer='true' name='tkGetWindowFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tk_Window*' type='^^{Tk_Window_}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='char *(*)(TkWindow *, XEvent *, Tcl_DString *)' function_pointer='true' name='tkpGetString' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tk_Font)' function_pointer='true' name='tkpGetSubFonts' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tk_Window, char *, char *)' function_pointer='true' name='tkpGetSystemDefault' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='void (*)(void)' function_pointer='true' name='tkpMenuThreadInit' type='^?'>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' name='reserved113' type='^v'/>
<field declared_type='void*' name='reserved114' type='^v'/>
<field declared_type='void*' name='reserved115' type='^v'/>
<field declared_type='void*' name='reserved116' type='^v'/>
<field declared_type='void*' name='reserved117' type='^v'/>
<field declared_type='void*' name='reserved118' type='^v'/>
<field declared_type='void*' name='reserved119' type='^v'/>
<field declared_type='void*' name='reserved120' type='^v'/>
<field declared_type='void*' name='reserved121' type='^v'/>
<field declared_type='void*' name='reserved122' type='^v'/>
<field declared_type='void*' name='reserved123' type='^v'/>
<field declared_type='void*' name='reserved124' type='^v'/>
<field declared_type='void*' name='reserved125' type='^v'/>
<field declared_type='void*' name='reserved126' type='^v'/>
<field declared_type='void*' name='reserved127' type='^v'/>
<field declared_type='void*' name='reserved128' type='^v'/>
<field declared_type='void*' name='reserved129' type='^v'/>
<field declared_type='void*' name='reserved130' type='^v'/>
<field declared_type='void*' name='reserved131' type='^v'/>
<field declared_type='void*' name='reserved132' type='^v'/>
<field declared_type='void*' name='reserved133' type='^v'/>
<field declared_type='void*' name='reserved134' type='^v'/>
<field declared_type='void (*)(Tk_Window, GC, GC, int, int)' function_pointer='true' name='tkpDrawHighlightBorder' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='GC' type='^{_GC=}'/>
<arg declared_type='GC' type='^{_GC=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkWindow *, int)' function_pointer='true' name='tkSetFocusWin' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int, XEvent *)' function_pointer='true' name='tkpSetKeycodeAndState' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkDisplay *)' function_pointer='true' name='tkpInitKeymapInfo' type='^?'>
<arg declared_type='TkDisplay*' type='^{TkDisplay=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='TkRegion (*)(Tk_PhotoHandle)' function_pointer='true' name='tkPhotoGetValidRegion' type='^?'>
<arg declared_type='Tk_PhotoHandle' type='^v'/>
<retval declared_type='TkRegion' type='^{TkRegion_=}'/>
</field>
<field declared_type='TkWindow **(*)(TkWindow *)' function_pointer='true' name='tkWmStackorderToplevel' type='^?'>
<arg declared_type='TkWindow*' type='^{TkWindow=}'/>
<retval declared_type='TkWindow**' type='^^{TkWindow}'/>
</field>
<field declared_type='void (*)(TkMainInfo *)' function_pointer='true' name='tkFocusFree' type='^?'>
<arg declared_type='TkMainInfo*' type='^{TkMainInfo=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkDisplay *)' function_pointer='true' name='tkClipCleanup' type='^?'>
<arg declared_type='TkDisplay*' type='^{TkDisplay=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkDisplay *)' function_pointer='true' name='tkGCCleanup' type='^?'>
<arg declared_type='TkDisplay*' type='^{TkDisplay=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' name='reserved145' type='^v'/>
<field declared_type='void (*)(TkMainInfo *)' function_pointer='true' name='tkStylePkgInit' type='^?'>
<arg declared_type='TkMainInfo*' type='^{TkMainInfo=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(TkMainInfo *)' function_pointer='true' name='tkStylePkgFree' type='^?'>
<arg declared_type='TkMainInfo*' type='^{TkMainInfo=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_Window (*)(Tcl_Interp *, char *)' function_pointer='true' name='tkToplevelWindowForCommand' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
</field>
<field const='true' declared_type='Tk_OptionSpec *(*)( char *, Tk_OptionTable)' function_pointer='true' name='tkGetOptionSpec' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
<retval const='true' declared_type='Tk_OptionSpec*' type='^{Tk_OptionSpec=i****iii^vi}'/>
</field>
<field declared_type='int (*)(Tk_Canvas, double *, int, int, XPoint *, double *)' function_pointer='true' name='tkMakeRawCurve' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double*' type='^d'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='XPoint*' type='^{_XPoint=ss}'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tk_Canvas, double *, int)' function_pointer='true' name='tkMakeRawCurvePostscript' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double*' type='^d'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, Tk_3DBorder, int, int, int)' function_pointer='true' name='tkpDrawFrame' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_ExitProc *, ClientData)' function_pointer='true' name='tkCreateThreadExitHandler' type='^?'>
<arg declared_type='Tcl_ExitProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_ExitProc *, ClientData)' function_pointer='true' name='tkDeleteThreadExitHandler' type='^?'>
<arg declared_type='Tcl_ExitProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' name='reserved155' type='^v'/>
<field declared_type='int (*)(ClientData, Tcl_Interp *, int, char **)' function_pointer='true' name='tkpTestembedCmd' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(ClientData, Tcl_Interp *, int, char **)' function_pointer='true' name='tkpTesttextCmd' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void*' name='reserved158' type='^v'/>
<field declared_type='void*' name='reserved159' type='^v'/>
<field declared_type='void*' name='reserved160' type='^v'/>
<field declared_type='void*' name='reserved161' type='^v'/>
<field declared_type='void*' name='reserved162' type='^v'/>
<field declared_type='void*' name='reserved163' type='^v'/>
<field declared_type='void*' name='reserved164' type='^v'/>
<field declared_type='void*' name='reserved165' type='^v'/>
<field declared_type='void*' name='reserved166' type='^v'/>
<field declared_type='void*' name='reserved167' type='^v'/>
<field declared_type='void*' name='reserved168' type='^v'/>
<field declared_type='int (*)(ClientData, Tcl_Interp *, Tk_Window, char *, char *, int)' function_pointer='true' name='tkStateParseProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='char *(*)(ClientData, Tk_Window, char *, int, Tcl_FreeProc **)' function_pointer='true' name='tkStatePrintProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_FreeProc**' type='^^?'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(ClientData, Tcl_Interp *, Tk_Window, char *, char *, int)' function_pointer='true' name='tkCanvasDashParseProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='char *(*)(ClientData, Tk_Window, char *, int, Tcl_FreeProc **)' function_pointer='true' name='tkCanvasDashPrintProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_FreeProc**' type='^^?'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(ClientData, Tcl_Interp *, Tk_Window, char *, char *, int)' function_pointer='true' name='tkOffsetParseProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='char *(*)(ClientData, Tk_Window, char *, int, Tcl_FreeProc **)' function_pointer='true' name='tkOffsetPrintProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_FreeProc**' type='^^?'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(ClientData, Tcl_Interp *, Tk_Window, char *, char *, int)' function_pointer='true' name='tkPixelParseProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='char *(*)(ClientData, Tk_Window, char *, int, Tcl_FreeProc **)' function_pointer='true' name='tkPixelPrintProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_FreeProc**' type='^^?'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(ClientData, Tcl_Interp *, Tk_Window, char *, char *, int)' function_pointer='true' name='tkOrientParseProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='char *(*)(ClientData, Tk_Window, char *, int, Tcl_FreeProc **)' function_pointer='true' name='tkOrientPrintProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_FreeProc**' type='^^?'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(ClientData, Tcl_Interp *, Tk_Window, char *, char *, int)' function_pointer='true' name='tkSmoothParseProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='char *(*)(ClientData, Tk_Window, char *, int, Tcl_FreeProc **)' function_pointer='true' name='tkSmoothPrintProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_FreeProc**' type='^^?'/>
<retval declared_type='char*' type='*'/>
</field>
</struct>
<struct name='TkKeyEvent' type='{_TkKeyEvent=}'>
<field declared_type='XKeyEvent' name='keyEvent' type='{_XKeyEvent=}'/>
<field declared_type='char*' name='charValuePtr' type='*'/>
<field declared_type='int' name='charValueLen' type='i'/>
</struct>
<struct name='TkMacOSXEmbedHandler' type='{_TkMacOSXEmbedHandler=&quot;registerWinProc&quot;^?&quot;getPortProc&quot;^?&quot;containerExistProc&quot;^?&quot;getClipProc&quot;^?&quot;getOffsetProc&quot;^?}'>
<field declared_type='Tk_MacOSXEmbedRegisterWinProc*' function_pointer='true' name='registerWinProc' type='^?'>
<arg declared_type='long' type='l' type64='q'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_MacOSXEmbedGetGrafPortProc*' function_pointer='true' name='getPortProc' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='void*' type='^v'/>
</field>
<field declared_type='Tk_MacOSXEmbedMakeContainerExistProc*' function_pointer='true' name='containerExistProc' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_MacOSXEmbedGetClipProc*' function_pointer='true' name='getClipProc' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='TkRegion' type='^{TkRegion_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_MacOSXEmbedGetOffsetInParentProc*' function_pointer='true' name='getOffsetProc' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='TkMainInfo' type='{TkMainInfo=}'>
<field declared_type='int' name='refCount' type='i'/>
<field declared_type='struct TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<field declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<field declared_type='Tcl_HashTable' name='nameTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='long' name='deletionEpoch' type='l' type64='q'/>
<field declared_type='int' name='bindingTable' type='i'/>
<field declared_type='TkBindInfo' name='bindInfo' type='^{TkBindInfo_=}'/>
<field declared_type='struct TkFontInfo*' name='fontInfoPtr' type='^{TkFontInfo=}'/>
<field declared_type='struct TkToplevelFocusInfo*' name='tlFocusPtr' type='^{TkToplevelFocusInfo=}'/>
<field declared_type='struct TkDisplayFocusInfo*' name='displayFocusPtr' type='^{TkDisplayFocusInfo=}'/>
<field declared_type='struct ElArray*' name='optionRootPtr' type='^{ElArray=}'/>
<field declared_type='Tcl_HashTable' name='imageTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='int' name='strictMotif' type='i'/>
<field declared_type='int' name='alwaysShowSelection' type='i'/>
<field declared_type='struct TkMainInfo*' name='nextPtr' type='^{TkMainInfo=}'/>
</struct>
<struct name='TkPlatStubs' type='{TkPlatStubs=&quot;magic&quot;i&quot;hooks&quot;^{TkPlatStubHooks}}'>
<field declared_type='int' name='magic' type='i'/>
<field declared_type='struct TkPlatStubHooks*' name='hooks' type='^{TkPlatStubHooks=}'/>
</struct>
<struct name='TkPredefBitmap' type='{_TkPredefBitmap=&quot;source&quot;*&quot;width&quot;i&quot;height&quot;i&quot;native&quot;i}'>
<field const='true' declared_type='char*' name='source' type='*'/>
<field declared_type='int' name='width' type='i'/>
<field declared_type='int' name='height' type='i'/>
<field declared_type='int' name='native' type='i'/>
</struct>
<struct name='TkStateMap' type='{TkStateMap=&quot;numKey&quot;i&quot;strKey&quot;*}'>
<field declared_type='int' name='numKey' type='i'/>
<field const='true' declared_type='char*' name='strKey' type='*'/>
</struct>
<struct name='TkStubHooks' type='{TkStubHooks=&quot;tkPlatStubs&quot;^{TkPlatStubs}&quot;tkIntStubs&quot;^{TkIntStubs}&quot;tkIntPlatStubs&quot;^{TkIntPlatStubs}&quot;tkIntXlibStubs&quot;^{TkIntXlibStubs}}'>
<field declared_type='struct TkPlatStubs*' name='tkPlatStubs' type='^{TkPlatStubs=i^{TkPlatStubHooks}}'/>
<field declared_type='struct TkIntStubs*' name='tkIntStubs' type='^{TkIntStubs=}'/>
<field declared_type='struct TkIntPlatStubs*' name='tkIntPlatStubs' type='^{TkIntPlatStubs=}'/>
<field declared_type='struct TkIntXlibStubs*' name='tkIntXlibStubs' type='^{TkIntXlibStubs=}'/>
</struct>
<struct name='TkStubs' type='{TkStubs=}'>
<field declared_type='int' name='magic' type='i'/>
<field declared_type='struct TkStubHooks*' name='hooks' type='^{TkStubHooks=^{TkPlatStubs}^{TkIntStubs}^{TkIntPlatStubs}^{TkIntXlibStubs}}'/>
<field declared_type='void (*)(void)' function_pointer='true' name='tk_MainLoop' type='^?'>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='XColor *(*)(Tk_3DBorder)' function_pointer='true' name='tk_3DBorderColor' type='^?'>
<arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
<retval declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
</field>
<field declared_type='GC (*)(Tk_Window, Tk_3DBorder, int)' function_pointer='true' name='tk_3DBorderGC' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='GC' type='^{_GC=}'/>
</field>
<field declared_type='void (*)(Tk_Window, int, Tk_3DBorder, int, int, int, int, int, int, int, int)' function_pointer='true' name='tk_3DHorizontalBevel' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int, Tk_3DBorder, int, int, int, int, int, int)' function_pointer='true' name='tk_3DVerticalBevel' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, char *, char *, int)' function_pointer='true' name='tk_AddOption' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(int, XEvent *, Tk_Window, int, ClientData *)' function_pointer='true' name='tk_BindEvent' type='^?'>
<arg declared_type='int' type='i'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='ClientData*' type='^^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Canvas, double, double, short *, short *)' function_pointer='true' name='tk_CanvasDrawableCoords' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double' type='d'/>
<arg declared_type='double' type='d'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='short*' type='^s'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Canvas, int, int, int, int)' function_pointer='true' name='tk_CanvasEventuallyRedraw' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Canvas, char *, double *)' function_pointer='true' name='tk_CanvasGetCoord' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_CanvasTextInfo *(*)(Tk_Canvas)' function_pointer='true' name='tk_CanvasGetTextInfo' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<retval declared_type='Tk_CanvasTextInfo*' type='^{Tk_CanvasTextInfo=^{Tk_3DBorder_}i^{_XColor=LSSScc}^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}ii^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}i^{Tk_3DBorder_}ii^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}ii}' type64='^{Tk_CanvasTextInfo=^{Tk_3DBorder_}i^{_XColor=QSSScc}^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}ii^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}i^{Tk_3DBorder_}ii^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}ii}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Canvas, int, int, int, int, int)' function_pointer='true' name='tk_CanvasPsBitmap' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Canvas, XColor *)' function_pointer='true' name='tk_CanvasPsColor' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Canvas, Tk_Font)' function_pointer='true' name='tk_CanvasPsFont' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tk_Canvas, double *, int)' function_pointer='true' name='tk_CanvasPsPath' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double*' type='^d'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Canvas, int)' function_pointer='true' name='tk_CanvasPsStipple' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='double (*)(Tk_Canvas, double)' function_pointer='true' name='tk_CanvasPsY' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double' type='d'/>
<retval declared_type='double' type='d'/>
</field>
<field declared_type='void (*)(Tk_Canvas, GC)' function_pointer='true' name='tk_CanvasSetStippleOrigin' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='GC' type='^{_GC=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(ClientData, Tcl_Interp *, Tk_Window, char *, char *, int)' function_pointer='true' name='tk_CanvasTagsParseProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='char *(*)(ClientData, Tk_Window, char *, int, Tcl_FreeProc **)' function_pointer='true' name='tk_CanvasTagsPrintProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_FreeProc**' type='^^?'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='Tk_Window (*)(Tk_Canvas)' function_pointer='true' name='tk_CanvasTkwin' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
</field>
<field declared_type='void (*)(Tk_Canvas, double, double, short *, short *)' function_pointer='true' name='tk_CanvasWindowCoords' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double' type='d'/>
<arg declared_type='double' type='d'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='short*' type='^s'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, unsigned long, XSetWindowAttributes *)' function_pointer='true' name='tk_ChangeWindowAttributes' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='unsigned long' type='L' type64='Q'/>
<arg declared_type='XSetWindowAttributes*' type='^{_XSetWindowAttributes=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tk_TextLayout, int, int *, int *, int *, int *)' function_pointer='true' name='tk_CharBbox' type='^?'>
<arg declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tk_Window, int)' function_pointer='true' name='tk_ClearSelection' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Window, int, int, char *)' function_pointer='true' name='tk_ClipboardAppend' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Window)' function_pointer='true' name='tk_ClipboardClear' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Window, Tk_ConfigSpec *, char *, char *, int)' function_pointer='true' name='tk_ConfigureInfo' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_ConfigSpec*' type='^{Tk_ConfigSpec=i****ii^{Tk_CustomOption}}'/>
<arg declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Window, Tk_ConfigSpec *, char *, char *, int)' function_pointer='true' name='tk_ConfigureValue' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_ConfigSpec*' type='^{Tk_ConfigSpec=i****ii^{Tk_CustomOption}}'/>
<arg declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Window, Tk_ConfigSpec *, int, char **, char *, int)' function_pointer='true' name='tk_ConfigureWidget' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_ConfigSpec*' type='^{Tk_ConfigSpec=i****ii^{Tk_CustomOption}}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tk_Window, unsigned int, XWindowChanges *)' function_pointer='true' name='tk_ConfigureWindow' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='unsigned int' type='I'/>
<arg declared_type='XWindowChanges*' type='^{_XWindowChanges=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_TextLayout (*)(Tk_Font, char *, int, int, Tk_Justify, int, int *, int *)' function_pointer='true' name='tk_ComputeTextLayout' type='^?'>
<arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tk_Justify' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
</field>
<field declared_type='Tk_Window (*)(int, int, Tk_Window)' function_pointer='true' name='tk_CoordsToWindow' type='^?'>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
</field>
<field declared_type='unsigned long (*)(Tcl_Interp *, int, ClientData, char *, char *, int)' function_pointer='true' name='tk_CreateBinding' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='ClientData' type='^v'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='unsigned long' type='L' type64='Q'/>
</field>
<field declared_type='int (int *)' name='Tk_BindingTable' type='?'/>
<field declared_type='Tk_ErrorHandler (*)(Display *, int, int, int, Tk_ErrorProc *, ClientData)' function_pointer='true' name='tk_CreateErrorHandler' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tk_ErrorProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='XErrorEvent*' type='^{_XErrorEvent=}'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='Tk_ErrorHandler' type='^{Tk_ErrorHandler_=}'/>
</field>
<field declared_type='void (*)(Tk_Window, unsigned long, Tk_EventProc *, ClientData)' function_pointer='true' name='tk_CreateEventHandler' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='unsigned long' type='L' type64='Q'/>
<arg declared_type='Tk_EventProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_GenericProc *, ClientData)' function_pointer='true' name='tk_CreateGenericHandler' type='^?'>
<arg declared_type='Tk_GenericProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_ImageType *)' function_pointer='true' name='tk_CreateImageType' type='^?'>
<arg declared_type='Tk_ImageType*' type='^{Tk_ImageType=*^?^?^?^?^?^?^{Tk_ImageType}*}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_ItemType *)' function_pointer='true' name='tk_CreateItemType' type='^?'>
<arg declared_type='Tk_ItemType*' type='^{Tk_ItemType=*i^?^{Tk_ConfigSpec}^?^?^?^?i^?^?^?^?^?^?^?^?^?^?^{Tk_ItemType}*i**}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_PhotoImageFormat *)' function_pointer='true' name='tk_CreatePhotoImageFormat' type='^?'>
<arg declared_type='Tk_PhotoImageFormat*' type='^{Tk_PhotoImageFormat=*^?^?^?^?^?^?^{Tk_PhotoImageFormat}}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int, int, Tk_SelectionProc *, ClientData, int)' function_pointer='true' name='tk_CreateSelHandler' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tk_SelectionProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_Window (*)(Tcl_Interp *, Tk_Window, char *, char *)' function_pointer='true' name='tk_CreateWindow' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
</field>
<field declared_type='Tk_Window (*)(Tcl_Interp *, Tk_Window, char *, char *)' function_pointer='true' name='tk_CreateWindowFromPath' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, char *, int, int)' function_pointer='true' name='tk_DefineBitmap' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tk_Window, Tk_Cursor)' function_pointer='true' name='tk_DefineCursor' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(int, ClientData)' function_pointer='true' name='tk_DeleteAllBindings' type='^?'>
<arg declared_type='int' type='i'/>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, int, ClientData, char *)' function_pointer='true' name='tk_DeleteBinding' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='ClientData' type='^v'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(int)' function_pointer='true' name='tk_DeleteBindingTable' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_ErrorHandler)' function_pointer='true' name='tk_DeleteErrorHandler' type='^?'>
<arg declared_type='Tk_ErrorHandler' type='^{Tk_ErrorHandler_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, unsigned long, Tk_EventProc *, ClientData)' function_pointer='true' name='tk_DeleteEventHandler' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='unsigned long' type='L' type64='Q'/>
<arg declared_type='Tk_EventProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_GenericProc *, ClientData)' function_pointer='true' name='tk_DeleteGenericHandler' type='^?'>
<arg declared_type='Tk_GenericProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, char *)' function_pointer='true' name='tk_DeleteImage' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int, int)' function_pointer='true' name='tk_DeleteSelHandler' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window)' function_pointer='true' name='tk_DestroyWindow' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field const='true' declared_type='char *(*)(Tk_Window)' function_pointer='true' name='tk_DisplayName' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(Tk_TextLayout, int, int)' function_pointer='true' name='tk_DistanceToTextLayout' type='^?'>
<arg declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tk_Window, int, Tk_3DBorder, XPoint *, int, int, int)' function_pointer='true' name='tk_Draw3DPolygon' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
<arg declared_type='XPoint*' type='^{_XPoint=ss}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int, Tk_3DBorder, int, int, int, int, int, int)' function_pointer='true' name='tk_Draw3DRectangle' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Display *, int, GC, Tk_Font, char *, int, int, int)' function_pointer='true' name='tk_DrawChars' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='GC' type='^{_GC=}'/>
<arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, GC, int, int)' function_pointer='true' name='tk_DrawFocusHighlight' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='GC' type='^{_GC=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Display *, int, GC, Tk_TextLayout, int, int, int, int)' function_pointer='true' name='tk_DrawTextLayout' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='GC' type='^{_GC=}'/>
<arg declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int, Tk_3DBorder, XPoint *, int, int, int)' function_pointer='true' name='tk_Fill3DPolygon' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
<arg declared_type='XPoint*' type='^{_XPoint=ss}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int, Tk_3DBorder, int, int, int, int, int, int)' function_pointer='true' name='tk_Fill3DRectangle' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_PhotoHandle (*)(Tcl_Interp *, char *)' function_pointer='true' name='tk_FindPhoto' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='Tk_PhotoHandle' type='^v'/>
</field>
<field declared_type='int (int *)' name='Font' type='?'/>
<field declared_type='void (*)(Tk_3DBorder)' function_pointer='true' name='tk_Free3DBorder' type='^?'>
<arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Display *, int)' function_pointer='true' name='tk_FreeBitmap' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(XColor *)' function_pointer='true' name='tk_FreeColor' type='^?'>
<arg declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Display *, int)' function_pointer='true' name='tk_FreeColormap' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Display *, Tk_Cursor)' function_pointer='true' name='tk_FreeCursor' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Font)' function_pointer='true' name='tk_FreeFont' type='^?'>
<arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Display *, GC)' function_pointer='true' name='tk_FreeGC' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='GC' type='^{_GC=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Image)' function_pointer='true' name='tk_FreeImage' type='^?'>
<arg declared_type='Tk_Image' type='^{Tk_Image__=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_ConfigSpec *, char *, Display *, int)' function_pointer='true' name='tk_FreeOptions' type='^?'>
<arg declared_type='Tk_ConfigSpec*' type='^{Tk_ConfigSpec=i****ii^{Tk_CustomOption}}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Display *, int)' function_pointer='true' name='tk_FreePixmap' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_TextLayout)' function_pointer='true' name='tk_FreeTextLayout' type='^?'>
<arg declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Display *, int)' function_pointer='true' name='tk_FreeXId' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='GC (*)(XColor *, int)' function_pointer='true' name='tk_GCForColor' type='^?'>
<arg declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='GC' type='^{_GC=}'/>
</field>
<field declared_type='void (*)(Tk_Window, int, int)' function_pointer='true' name='tk_GeometryRequest' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_3DBorder (*)(Tcl_Interp *, Tk_Window, Tk_Uid)' function_pointer='true' name='tk_Get3DBorder' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_Uid' type='*'/>
<retval declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, int, ClientData)' function_pointer='true' name='tk_GetAllBindings' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, Tk_Anchor *)' function_pointer='true' name='tk_GetAnchor' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tk_Anchor*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field const='true' declared_type='char *(*)(Tk_Window, int)' function_pointer='true' name='tk_GetAtomName' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(Tcl_Interp *, int, ClientData, char *)' function_pointer='true' name='tk_GetBinding' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='ClientData' type='^v'/>
<arg const='true' declared_type='char*' type='*'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='int (int *)' name='Pixmap' type='?'/>
<field declared_type='int (*)(Tcl_Interp *, char *, int *)' function_pointer='true' name='tk_GetCapStyle' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='XColor *(*)(Tcl_Interp *, Tk_Window, Tk_Uid)' function_pointer='true' name='tk_GetColor' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_Uid' type='*'/>
<retval declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
</field>
<field declared_type='XColor *(*)(Tk_Window, XColor *)' function_pointer='true' name='tk_GetColorByValue' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
<retval declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
</field>
<field declared_type='int (int *)' name='Colormap' type='?'/>
<field declared_type='Tk_Cursor (*)(Tcl_Interp *, Tk_Window, Tk_Uid)' function_pointer='true' name='tk_GetCursor' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_Uid' type='*'/>
<retval declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
</field>
<field declared_type='Tk_Cursor (*)(Tcl_Interp *, Tk_Window, char *, char *, int, int, int, int, Tk_Uid, Tk_Uid)' function_pointer='true' name='tk_GetCursorFromData' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tk_Uid' type='*'/>
<arg declared_type='Tk_Uid' type='*'/>
<retval declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
</field>
<field declared_type='Tk_Font (*)(Tcl_Interp *, Tk_Window, char *)' function_pointer='true' name='tk_GetFont' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='Tk_Font' type='^{Tk_Font_=}'/>
</field>
<field declared_type='Tk_Font (*)(Tk_Window, Tcl_Obj *)' function_pointer='true' name='tk_GetFontFromObj' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tk_Font' type='^{Tk_Font_=}'/>
</field>
<field declared_type='void (*)(Tk_Font, Tk_FontMetrics *)' function_pointer='true' name='tk_GetFontMetrics' type='^?'>
<arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
<arg declared_type='Tk_FontMetrics*' type='^{Tk_FontMetrics=iii}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='GC (*)(Tk_Window, unsigned long, XGCValues *)' function_pointer='true' name='tk_GetGC' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='unsigned long' type='L' type64='Q'/>
<arg declared_type='XGCValues*' type='^{_XGCValues=}'/>
<retval declared_type='GC' type='^{_GC=}'/>
</field>
<field declared_type='Tk_Image (*)(Tcl_Interp *, Tk_Window, char *, Tk_ImageChangedProc *, ClientData)' function_pointer='true' name='tk_GetImage' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tk_ImageChangedProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='Tk_Image' type='^{Tk_Image__=}'/>
</field>
<field declared_type='ClientData (*)(Tcl_Interp *, char *, Tk_ImageType **)' function_pointer='true' name='tk_GetImageMasterData' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tk_ImageType**' type='^^{Tk_ImageType}'/>
<retval declared_type='ClientData' type='^v'/>
</field>
<field declared_type='Tk_ItemType *(*)(void)' function_pointer='true' name='tk_GetItemTypes' type='^?'>
<retval declared_type='Tk_ItemType*' type='^{Tk_ItemType=*i^?^{Tk_ConfigSpec}^?^?^?^?i^?^?^?^?^?^?^?^?^?^?^{Tk_ItemType}*i**}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int *)' function_pointer='true' name='tk_GetJoinStyle' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, Tk_Justify *)' function_pointer='true' name='tk_GetJustify' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tk_Justify*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(void)' function_pointer='true' name='tk_GetNumMainWindows' type='^?'>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_Uid (*)(Tk_Window, char *, char *)' function_pointer='true' name='tk_GetOption' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='Tk_Uid' type='*'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Window, char *, int *)' function_pointer='true' name='tk_GetPixels' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int *)' function_pointer='true' name='tk_GetRelief' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tk_Window, int *, int *)' function_pointer='true' name='tk_GetRootCoords' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, int, char **, double *, int *)' function_pointer='true' name='tk_GetScrollInfo' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<arg declared_type='double*' type='^d'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Window, char *, double *)' function_pointer='true' name='tk_GetScreenMM' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Window, int, int, Tk_GetSelProc *, ClientData)' function_pointer='true' name='tk_GetSelection' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tk_GetSelProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_Uid (*)( char *)' function_pointer='true' name='tk_GetUid' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='Tk_Uid' type='*'/>
</field>
<field declared_type='Visual *(*)(Tcl_Interp *, Tk_Window, char *, int *, int *)' function_pointer='true' name='tk_GetVisual' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='Visual*' type='^{_Visual=}'/>
</field>
<field declared_type='void (*)(Tk_Window, int *, int *, int *, int *)' function_pointer='true' name='tk_GetVRootGeometry' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Window, int)' function_pointer='true' name='tk_Grab' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(XEvent *)' function_pointer='true' name='tk_HandleEvent' type='^?'>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_Window (*)(Display *, Window *)' function_pointer='true' name='tk_IdToWindow' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='Window*' function_pointer='true' type='^?'>
<retval declared_type='int' type='i'/>
</arg>
<retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
</field>
<field declared_type='void (*)(Tk_ImageMaster, int, int, int, int, int, int)' function_pointer='true' name='tk_ImageChanged' type='^?'>
<arg declared_type='Tk_ImageMaster' type='^{Tk_ImageMaster_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *)' function_pointer='true' name='tk_Init' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (int *)' name='Atom' type='?'/>
<field declared_type='int (*)(Tk_TextLayout, int, int, int, int)' function_pointer='true' name='tk_IntersectTextLayout' type='^?'>
<arg declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tk_Window, Tk_Window, int, int, int, int)' function_pointer='true' name='tk_MaintainGeometry' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_Window (*)(Tcl_Interp *)' function_pointer='true' name='tk_MainWindow' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
</field>
<field declared_type='void (*)(Tk_Window)' function_pointer='true' name='tk_MakeWindowExist' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, Tk_GeomMgr *, ClientData)' function_pointer='true' name='tk_ManageGeometry' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='Tk_GeomMgr*' type='^{Tk_GeomMgr=*^?^?}'/>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window)' function_pointer='true' name='tk_MapWindow' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tk_Font, char *, int, int, int, int *)' function_pointer='true' name='tk_MeasureChars' type='^?'>
<arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tk_Window, int, int, int, int)' function_pointer='true' name='tk_MoveResizeWindow' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int, int)' function_pointer='true' name='tk_MoveWindow' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int, int)' function_pointer='true' name='tk_MoveToplevelWindow' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field const='true' declared_type='char *(*)(Tk_3DBorder)' function_pointer='true' name='tk_NameOf3DBorder' type='^?'>
<arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(Tk_Anchor)' function_pointer='true' name='tk_NameOfAnchor' type='^?'>
<arg declared_type='Tk_Anchor' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(Display *, int)' function_pointer='true' name='tk_NameOfBitmap' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='int' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(int)' function_pointer='true' name='tk_NameOfCapStyle' type='^?'>
<arg declared_type='int' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(XColor *)' function_pointer='true' name='tk_NameOfColor' type='^?'>
<arg declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(Display *, Tk_Cursor)' function_pointer='true' name='tk_NameOfCursor' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(Tk_Font)' function_pointer='true' name='tk_NameOfFont' type='^?'>
<arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(Tk_ImageMaster)' function_pointer='true' name='tk_NameOfImage' type='^?'>
<arg declared_type='Tk_ImageMaster' type='^{Tk_ImageMaster_=}'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(int)' function_pointer='true' name='tk_NameOfJoinStyle' type='^?'>
<arg declared_type='int' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(Tk_Justify)' function_pointer='true' name='tk_NameOfJustify' type='^?'>
<arg declared_type='Tk_Justify' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(int)' function_pointer='true' name='tk_NameOfRelief' type='^?'>
<arg declared_type='int' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='Tk_Window (*)(Tcl_Interp *, char *, Tk_Window)' function_pointer='true' name='tk_NameToWindow' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
</field>
<field declared_type='void (*)(Tk_Window, int, Tk_LostSelProc *, ClientData)' function_pointer='true' name='tk_OwnSelection' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tk_LostSelProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Window, int *, char **, Tk_ArgvInfo *, int)' function_pointer='true' name='tk_ParseArgv' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int*' type='^i'/>
<arg const='true' declared_type='char**' type='^*'/>
<arg declared_type='Tk_ArgvInfo*' type='^{_Tk_ArgvInfo=*i***}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tk_PhotoHandle, Tk_PhotoImageBlock *, int, int, int, int)' function_pointer='true' name='tk_PhotoPutBlock_NoComposite' type='^?'>
<arg declared_type='Tk_PhotoHandle' type='^v'/>
<arg declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_PhotoHandle, Tk_PhotoImageBlock *, int, int, int, int, int, int, int, int)' function_pointer='true' name='tk_PhotoPutZoomedBlock_NoComposite' type='^?'>
<arg declared_type='Tk_PhotoHandle' type='^v'/>
<arg declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tk_PhotoHandle, Tk_PhotoImageBlock *)' function_pointer='true' name='tk_PhotoGetImage' type='^?'>
<arg declared_type='Tk_PhotoHandle' type='^v'/>
<arg declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tk_PhotoHandle)' function_pointer='true' name='tk_PhotoBlank' type='^?'>
<arg declared_type='Tk_PhotoHandle' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_PhotoHandle, int, int)' function_pointer='true' name='tk_PhotoExpand_Panic' type='^?'>
<arg declared_type='Tk_PhotoHandle' type='^v'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_PhotoHandle, int *, int *)' function_pointer='true' name='tk_PhotoGetSize' type='^?'>
<arg declared_type='Tk_PhotoHandle' type='^v'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_PhotoHandle, int, int)' function_pointer='true' name='tk_PhotoSetSize_Panic' type='^?'>
<arg declared_type='Tk_PhotoHandle' type='^v'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tk_TextLayout, int, int)' function_pointer='true' name='tk_PointToChar' type='^?'>
<arg declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tk_Font, Tcl_DString *)' function_pointer='true' name='tk_PostscriptFontName' type='^?'>
<arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Display *, int)' function_pointer='true' name='tk_PreserveColormap' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(XEvent *, Tcl_QueuePosition)' function_pointer='true' name='tk_QueueWindowEvent' type='^?'>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<arg declared_type='Tcl_QueuePosition' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Image, int, int, int, int, int, int, int)' function_pointer='true' name='tk_RedrawImage' type='^?'>
<arg declared_type='Tk_Image' type='^{Tk_Image__=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int, int)' function_pointer='true' name='tk_ResizeWindow' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tk_Window, int, Tk_Window)' function_pointer='true' name='tk_RestackWindow' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_RestrictProc *(*)(Tk_RestrictProc *, ClientData, ClientData *)' function_pointer='true' name='tk_RestrictEvents' type='^?'>
<arg declared_type='Tk_RestrictProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='Tk_RestrictAction' type='i'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='ClientData*' type='^^v'/>
<retval declared_type='Tk_RestrictProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='Tk_RestrictAction' type='i'/>
</retval>
</field>
<field declared_type='int (*)(Tcl_Interp *)' function_pointer='true' name='tk_SafeInit' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field const='true' declared_type='char *(*)(Tk_Window, char *)' function_pointer='true' name='tk_SetAppName' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='void (*)(Tk_Window, Tk_3DBorder)' function_pointer='true' name='tk_SetBackgroundFromBorder' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, char *)' function_pointer='true' name='tk_SetClass' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int, int, int, int)' function_pointer='true' name='tk_SetGrid' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int)' function_pointer='true' name='tk_SetInternalBorder' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, unsigned long)' function_pointer='true' name='tk_SetWindowBackground' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='unsigned long' type='L' type64='Q'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int)' function_pointer='true' name='tk_SetWindowBackgroundPixmap' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, unsigned long)' function_pointer='true' name='tk_SetWindowBorder' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='unsigned long' type='L' type64='Q'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int)' function_pointer='true' name='tk_SetWindowBorderWidth' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int)' function_pointer='true' name='tk_SetWindowBorderPixmap' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int)' function_pointer='true' name='tk_SetWindowColormap' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tk_Window, Visual *, int, int)' function_pointer='true' name='tk_SetWindowVisual' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Visual*' type='^{_Visual=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Display *, int, int *, int *)' function_pointer='true' name='tk_SizeOfBitmap' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Image, int *, int *)' function_pointer='true' name='tk_SizeOfImage' type='^?'>
<arg declared_type='Tk_Image' type='^{Tk_Image__=}'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tk_Window)' function_pointer='true' name='tk_StrictMotif' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tk_TextLayout)' function_pointer='true' name='tk_TextLayoutToPostscript' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tk_Font, char *, int)' function_pointer='true' name='tk_TextWidth' type='^?'>
<arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tk_Window)' function_pointer='true' name='tk_UndefineCursor' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Display *, int, GC, Tk_Font, char *, int, int, int, int)' function_pointer='true' name='tk_UnderlineChars' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='GC' type='^{_GC=}'/>
<arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Display *, int, GC, Tk_TextLayout, int, int, int)' function_pointer='true' name='tk_UnderlineTextLayout' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='GC' type='^{_GC=}'/>
<arg declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window)' function_pointer='true' name='tk_Ungrab' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, Tk_Window)' function_pointer='true' name='tk_UnmaintainGeometry' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window)' function_pointer='true' name='tk_UnmapWindow' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window)' function_pointer='true' name='tk_UnsetGrid' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int, int, int)' function_pointer='true' name='tk_UpdatePointer' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_3DBorder (*)(Tcl_Interp *, Tk_Window, Tcl_Obj *)' function_pointer='true' name='tk_Alloc3DBorderFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
</field>
<field declared_type='XColor *(*)(Tcl_Interp *, Tk_Window, Tcl_Obj *)' function_pointer='true' name='tk_AllocColorFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
</field>
<field declared_type='Tk_Cursor (*)(Tcl_Interp *, Tk_Window, Tcl_Obj *)' function_pointer='true' name='tk_AllocCursorFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
</field>
<field declared_type='Tk_Font (*)(Tcl_Interp *, Tk_Window, Tcl_Obj *)' function_pointer='true' name='tk_AllocFontFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tk_Font' type='^{Tk_Font_=}'/>
</field>
<field declared_type='Tk_OptionTable (*)(Tcl_Interp *, Tk_OptionSpec *)' function_pointer='true' name='tk_CreateOptionTable' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='Tk_OptionSpec*' type='^{Tk_OptionSpec=i****iii^vi}'/>
<retval declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
</field>
<field declared_type='void (*)(Tk_OptionTable)' function_pointer='true' name='tk_DeleteOptionTable' type='^?'>
<arg declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, Tcl_Obj *)' function_pointer='true' name='tk_Free3DBorderFromObj' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, Tcl_Obj *)' function_pointer='true' name='tk_FreeBitmapFromObj' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, Tcl_Obj *)' function_pointer='true' name='tk_FreeColorFromObj' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(char *, Tk_OptionTable, Tk_Window)' function_pointer='true' name='tk_FreeConfigOptions' type='^?'>
<arg declared_type='char*' type='*'/>
<arg declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_SavedOptions *)' function_pointer='true' name='tk_FreeSavedOptions' type='^?'>
<arg declared_type='Tk_SavedOptions*' type='^{Tk_SavedOptions=*^{Tk_Window_}i[20{Tk_SavedOption=^{TkOption}^{Tcl_Obj}d}]^{Tk_SavedOptions}}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, Tcl_Obj *)' function_pointer='true' name='tk_FreeCursorFromObj' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, Tcl_Obj *)' function_pointer='true' name='tk_FreeFontFromObj' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_3DBorder (*)(Tk_Window, Tcl_Obj *)' function_pointer='true' name='tk_Get3DBorderFromObj' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, Tk_Anchor *)' function_pointer='true' name='tk_GetAnchorFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tk_Anchor*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='XColor *(*)(Tk_Window, Tcl_Obj *)' function_pointer='true' name='tk_GetColorFromObj' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
</field>
<field declared_type='Tk_Cursor (*)(Tk_Window, Tcl_Obj *)' function_pointer='true' name='tk_GetCursorFromObj' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Interp *, char *, Tk_OptionTable, Tcl_Obj *, Tk_Window)' function_pointer='true' name='tk_GetOptionInfo' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Interp *, char *, Tk_OptionTable, Tcl_Obj *, Tk_Window)' function_pointer='true' name='tk_GetOptionValue' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, Tk_Justify *)' function_pointer='true' name='tk_GetJustifyFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tk_Justify*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Window, Tcl_Obj *, double *)' function_pointer='true' name='tk_GetMMFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Window, Tcl_Obj *, int *)' function_pointer='true' name='tk_GetPixelsFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int *)' function_pointer='true' name='tk_GetReliefFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, int, Tcl_Obj * *, double *, int *)' function_pointer='true' name='tk_GetScrollInfoObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<arg declared_type='double*' type='^d'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, Tk_OptionTable, Tk_Window)' function_pointer='true' name='tk_InitOptions' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(int, char **, Tcl_AppInitProc *, Tcl_Interp *)' function_pointer='true' name='tk_MainEx' type='^?'>
<arg declared_type='int' type='i'/>
<arg declared_type='char**' type='^*'/>
<arg declared_type='Tcl_AppInitProc*' function_pointer='true' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_SavedOptions *)' function_pointer='true' name='tk_RestoreSavedOptions' type='^?'>
<arg declared_type='Tk_SavedOptions*' type='^{Tk_SavedOptions=*^{Tk_Window_}i[20{Tk_SavedOption=^{TkOption}^{Tcl_Obj}d}]^{Tk_SavedOptions}}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, Tk_OptionTable, int, Tcl_Obj * *, Tk_Window, Tk_SavedOptions *, int *)' function_pointer='true' name='tk_SetOptions' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_SavedOptions*' type='^{Tk_SavedOptions=*^{Tk_Window_}i[20{Tk_SavedOption=^{TkOption}^{Tcl_Obj}d}]^{Tk_SavedOptions}}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *)' function_pointer='true' name='tk_InitConsoleChannels' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *)' function_pointer='true' name='tk_CreateConsoleWindow' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tk_SmoothMethod *)' function_pointer='true' name='tk_CreateSmoothMethod' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_SmoothMethod*' type='^{Tk_SmoothMethod=*^?^?}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' name='reserved218' type='^v'/>
<field declared_type='void*' name='reserved219' type='^v'/>
<field declared_type='int (*)(Tcl_Interp *, char *, Tk_Dash *)' function_pointer='true' name='tk_GetDash' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tk_Dash*' type='^{Tk_Dash=i(?=*[4c])}' type64='^{Tk_Dash=i(?=*[8c])}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tk_Outline *)' function_pointer='true' name='tk_CreateOutline' type='^?'>
<arg declared_type='Tk_Outline*' type='^{Tk_Outline=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Display *, Tk_Outline *)' function_pointer='true' name='tk_DeleteOutline' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='Tk_Outline*' type='^{Tk_Outline=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(XGCValues *, Tk_Canvas, Tk_Item *, Tk_Outline *)' function_pointer='true' name='tk_ConfigOutlineGC' type='^?'>
<arg declared_type='XGCValues*' type='^{_XGCValues=}'/>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='Tk_Outline*' type='^{Tk_Outline=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tk_Canvas, Tk_Item *, Tk_Outline *)' function_pointer='true' name='tk_ChangeOutlineGC' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='Tk_Outline*' type='^{Tk_Outline=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tk_Canvas, Tk_Item *, Tk_Outline *)' function_pointer='true' name='tk_ResetOutlineGC' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='Tk_Outline*' type='^{Tk_Outline=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tk_Canvas, Tk_Item *, Tk_Outline *)' function_pointer='true' name='tk_CanvasPsOutline' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='Tk_Outline*' type='^{Tk_Outline=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tk_Window, GC, int, int)' function_pointer='true' name='tk_SetTSOrigin' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='GC' type='^{_GC=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Canvas, Tcl_Obj *, double *)' function_pointer='true' name='tk_CanvasGetCoordFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tk_Canvas, GC, Tk_TSOffset *)' function_pointer='true' name='tk_CanvasSetOffset' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='GC' type='^{_GC=}'/>
<arg declared_type='Tk_TSOffset*' type='^{Tk_TSOffset=iii}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_PhotoHandle, int, int, int, int)' function_pointer='true' name='tk_DitherPhoto' type='^?'>
<arg declared_type='Tk_PhotoHandle' type='^v'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Window, Tk_PostscriptInfo, int, int, int, int, int)' function_pointer='true' name='tk_PostscriptBitmap' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_PostscriptInfo, XColor *)' function_pointer='true' name='tk_PostscriptColor' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
<arg declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_PostscriptInfo, Tk_Font)' function_pointer='true' name='tk_PostscriptFont' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
<arg declared_type='Tk_Font' type='^{Tk_Font_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tk_Image, Tcl_Interp *, Tk_Window, Tk_PostscriptInfo, int, int, int, int, int)' function_pointer='true' name='tk_PostscriptImage' type='^?'>
<arg declared_type='Tk_Image' type='^{Tk_Image__=}'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tk_PostscriptInfo, double *, int)' function_pointer='true' name='tk_PostscriptPath' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
<arg declared_type='double*' type='^d'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Window, Tk_PostscriptInfo, int)' function_pointer='true' name='tk_PostscriptStipple' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='double (*)(double, Tk_PostscriptInfo)' function_pointer='true' name='tk_PostscriptY' type='^?'>
<arg declared_type='double' type='d'/>
<arg declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
<retval declared_type='double' type='d'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_PhotoImageBlock *, Tk_PostscriptInfo, int, int)' function_pointer='true' name='tk_PostscriptPhoto' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
<arg declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tk_ClientMessageProc *)' function_pointer='true' name='tk_CreateClientMessageHandler' type='^?'>
<arg declared_type='Tk_ClientMessageProc*' function_pointer='true' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='int' type='i'/>
</arg>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_ClientMessageProc *)' function_pointer='true' name='tk_DeleteClientMessageHandler' type='^?'>
<arg declared_type='Tk_ClientMessageProc*' function_pointer='true' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='int' type='i'/>
</arg>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_Window (*)(Tcl_Interp *, Tk_Window, char *)' function_pointer='true' name='tk_CreateAnonymousWindow' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
</field>
<field declared_type='void (*)(Tk_Window, Tk_ClassProcs *, ClientData)' function_pointer='true' name='tk_SetClassProcs' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_ClassProcs*' type='^{Tk_ClassProcs=}'/>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int, int, int, int)' function_pointer='true' name='tk_SetInternalBorderEx' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int, int)' function_pointer='true' name='tk_SetMinimumRequestSize' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Window, int, int, int)' function_pointer='true' name='tk_SetCaretPos' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_PhotoHandle, Tk_PhotoImageBlock *, int, int, int, int, int)' function_pointer='true' name='tk_PhotoPutBlock_Panic' type='^?'>
<arg declared_type='Tk_PhotoHandle' type='^v'/>
<arg declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_PhotoHandle, Tk_PhotoImageBlock *, int, int, int, int, int, int, int, int, int)' function_pointer='true' name='tk_PhotoPutZoomedBlock_Panic' type='^?'>
<arg declared_type='Tk_PhotoHandle' type='^v'/>
<arg declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Display *, int)' function_pointer='true' name='tk_CollapseMotionEvents' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_StyleEngine (*)( char *, Tk_StyleEngine)' function_pointer='true' name='tk_RegisterStyleEngine' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tk_StyleEngine' type='^{Tk_StyleEngine_=}'/>
<retval declared_type='Tk_StyleEngine' type='^{Tk_StyleEngine_=}'/>
</field>
<field declared_type='Tk_StyleEngine (*)( char *)' function_pointer='true' name='tk_GetStyleEngine' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='Tk_StyleEngine' type='^{Tk_StyleEngine_=}'/>
</field>
<field declared_type='int (*)(Tk_StyleEngine, Tk_ElementSpec *)' function_pointer='true' name='tk_RegisterStyledElement' type='^?'>
<arg declared_type='Tk_StyleEngine' type='^{Tk_StyleEngine_=}'/>
<arg declared_type='Tk_ElementSpec*' type='^{Tk_ElementSpec=i*^{Tk_ElementOptionSpec}^?^?^?^?}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)( char *)' function_pointer='true' name='tk_GetElementId' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_Style (*)( char *, Tk_StyleEngine, ClientData)' function_pointer='true' name='tk_CreateStyle' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tk_StyleEngine' type='^{Tk_StyleEngine_=}'/>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='Tk_Style' type='^{Tk_Style_=}'/>
</field>
<field declared_type='Tk_Style (*)(Tcl_Interp *, char *)' function_pointer='true' name='tk_GetStyle' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='Tk_Style' type='^{Tk_Style_=}'/>
</field>
<field declared_type='void (*)(Tk_Style)' function_pointer='true' name='tk_FreeStyle' type='^?'>
<arg declared_type='Tk_Style' type='^{Tk_Style_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field const='true' declared_type='char *(*)(Tk_Style)' function_pointer='true' name='tk_NameOfStyle' type='^?'>
<arg declared_type='Tk_Style' type='^{Tk_Style_=}'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='Tk_Style (*)(Tcl_Interp *, Tcl_Obj *)' function_pointer='true' name='tk_AllocStyleFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tk_Style' type='^{Tk_Style_=}'/>
</field>
<field declared_type='Tk_Style (*)(Tcl_Obj *)' function_pointer='true' name='tk_GetStyleFromObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tk_Style' type='^{Tk_Style_=}'/>
</field>
<field declared_type='void (*)(Tcl_Obj *)' function_pointer='true' name='tk_FreeStyleFromObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_StyledElement (*)(Tk_Style, int, Tk_OptionTable)' function_pointer='true' name='tk_GetStyledElement' type='^?'>
<arg declared_type='Tk_Style' type='^{Tk_Style_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
<retval declared_type='Tk_StyledElement' type='^{Tk_StyledElement_=}'/>
</field>
<field declared_type='void (*)(Tk_Style, Tk_StyledElement, char *, Tk_Window, int, int, int, int *, int *)' function_pointer='true' name='tk_GetElementSize' type='^?'>
<arg declared_type='Tk_Style' type='^{Tk_Style_=}'/>
<arg declared_type='Tk_StyledElement' type='^{Tk_StyledElement_=}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_Style, Tk_StyledElement, char *, Tk_Window, int, int, int, int, int, int *, int *, int *, int *)' function_pointer='true' name='tk_GetElementBox' type='^?'>
<arg declared_type='Tk_Style' type='^{Tk_Style_=}'/>
<arg declared_type='Tk_StyledElement' type='^{Tk_StyledElement_=}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tk_Style, Tk_StyledElement, char *, Tk_Window)' function_pointer='true' name='tk_GetElementBorderWidth' type='^?'>
<arg declared_type='Tk_Style' type='^{Tk_Style_=}'/>
<arg declared_type='Tk_StyledElement' type='^{Tk_StyledElement_=}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tk_Style, Tk_StyledElement, char *, Tk_Window, int, int, int, int, int, int)' function_pointer='true' name='tk_DrawElement' type='^?'>
<arg declared_type='Tk_Style' type='^{Tk_Style_=}'/>
<arg declared_type='Tk_StyledElement' type='^{Tk_StyledElement_=}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_PhotoHandle, int, int)' function_pointer='true' name='tk_PhotoExpand' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_PhotoHandle' type='^v'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_PhotoHandle, Tk_PhotoImageBlock *, int, int, int, int, int)' function_pointer='true' name='tk_PhotoPutBlock' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_PhotoHandle' type='^v'/>
<arg declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_PhotoHandle, Tk_PhotoImageBlock *, int, int, int, int, int, int, int, int, int)' function_pointer='true' name='tk_PhotoPutZoomedBlock' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_PhotoHandle' type='^v'/>
<arg declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_PhotoHandle, int, int)' function_pointer='true' name='tk_PhotoSetSize' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_PhotoHandle' type='^v'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='long (*)(Display *)' function_pointer='true' name='tk_GetUserInactiveTime' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<retval declared_type='long' type='l' type64='q'/>
</field>
<field declared_type='void (*)(Display *)' function_pointer='true' name='tk_ResetUserInactiveTime' type='^?'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Interp *(*)(Tk_Window)' function_pointer='true' name='tk_Interp' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
</field>
<field declared_type='void (*)(Tk_ImageType *)' function_pointer='true' name='tk_CreateOldImageType' type='^?'>
<arg declared_type='Tk_ImageType*' type='^{Tk_ImageType=*^?^?^?^?^?^?^{Tk_ImageType}*}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tk_PhotoImageFormat *)' function_pointer='true' name='tk_CreateOldPhotoImageFormat' type='^?'>
<arg declared_type='Tk_PhotoImageFormat*' type='^{Tk_PhotoImageFormat=*^?^?^?^?^?^?^{Tk_PhotoImageFormat}}'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='TkWindow' type='{TkWindow=}'>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='TkDisplay*' name='dispPtr' type='^{TkDisplay=}'/>
<field declared_type='int' name='screenNum' type='i'/>
<field declared_type='Visual*' name='visual' type='^{_Visual=}'/>
<field declared_type='int' name='depth' type='i'/>
<field declared_type='Window' name='window' type='?'/>
<field declared_type='struct TkWindow*' name='childList' type='^{TkWindow=}'/>
<field declared_type='struct TkWindow*' name='lastChildPtr' type='^{TkWindow=}'/>
<field declared_type='struct TkWindow*' name='parentPtr' type='^{TkWindow=}'/>
<field declared_type='struct TkWindow*' name='nextPtr' type='^{TkWindow=}'/>
<field declared_type='TkMainInfo*' name='mainPtr' type='^{TkMainInfo=}'/>
<field declared_type='char*' name='pathName' type='*'/>
<field declared_type='Tk_Uid' name='nameUid' type='*'/>
<field declared_type='Tk_Uid' name='classUid' type='*'/>
<field declared_type='XWindowChanges' name='changes' type='{_XWindowChanges=}'/>
<field declared_type='unsigned int' name='dirtyChanges' type='I'/>
<field declared_type='XSetWindowAttributes' name='atts' type='{_XSetWindowAttributes=}'/>
<field declared_type='unsigned long' name='dirtyAtts' type='L' type64='Q'/>
<field declared_type='unsigned int' name='flags' type='I'/>
<field declared_type='TkEventHandler*' name='handlerList' type='^{TkEventHandler=L^?^v^{TkEventHandler}}' type64='^{TkEventHandler=Q^?^v^{TkEventHandler}}'/>
<field declared_type='ClientData*' name='tagPtr' type='^^v'/>
<field declared_type='int' name='numTags' type='i'/>
<field declared_type='int' name='optionLevel' type='i'/>
<field declared_type='struct TkSelHandler*' name='selHandlerList' type='^{TkSelHandler=}'/>
<field const='true' declared_type='Tk_GeomMgr*' name='geomMgrPtr' type='^{Tk_GeomMgr=*^?^?}'/>
<field declared_type='ClientData' name='geomData' type='^v'/>
<field declared_type='int' name='reqWidth' type='i'/>
<field declared_type='int' name='reqHeight' type='i'/>
<field declared_type='int' name='internalBorderLeft' type='i'/>
<field declared_type='struct TkWmInfo*' name='wmInfoPtr' type='^{TkWmInfo=}'/>
<field declared_type='Tk_ClassProcs*' name='classProcsPtr' type='^{Tk_ClassProcs=}'/>
<field declared_type='ClientData' name='instanceData' type='^v'/>
<field declared_type='struct TkWindowPrivate*' name='privatePtr' type='^{TkWindowPrivate=^{TkWindow}@^{CGContext}ii{CGSize=ff}^{__HIShape}^{__HIShape}^{__HIShape}i^{TkWindowPrivate}i}' type64='^{TkWindowPrivate=^{TkWindow}@^{CGContext}ii{CGSize=dd}^{__HIShape}^{__HIShape}^{__HIShape}i^{TkWindowPrivate}i}'/>
<field declared_type='int' name='internalBorderRight' type='i'/>
<field declared_type='int' name='internalBorderTop' type='i'/>
<field declared_type='int' name='internalBorderBottom' type='i'/>
<field declared_type='int' name='minReqWidth' type='i'/>
<field declared_type='int' name='minReqHeight' type='i'/>
</struct>
<struct name='TkWindowPrivate' type='{TkWindowPrivate=&quot;winPtr&quot;^{TkWindow}&quot;view&quot;@&quot;NSView&quot;&quot;context&quot;^{CGContext}&quot;xOff&quot;i&quot;yOff&quot;i&quot;size&quot;{CGSize=&quot;width&quot;f&quot;height&quot;f}&quot;visRgn&quot;^{__HIShape}&quot;aboveVisRgn&quot;^{__HIShape}&quot;drawRgn&quot;^{__HIShape}&quot;referenceCount&quot;i&quot;toplevel&quot;^{TkWindowPrivate}&quot;flags&quot;i}' type64='{TkWindowPrivate=&quot;winPtr&quot;^{TkWindow}&quot;view&quot;@&quot;NSView&quot;&quot;context&quot;^{CGContext}&quot;xOff&quot;i&quot;yOff&quot;i&quot;size&quot;{CGSize=&quot;width&quot;d&quot;height&quot;d}&quot;visRgn&quot;^{__HIShape}&quot;aboveVisRgn&quot;^{__HIShape}&quot;drawRgn&quot;^{__HIShape}&quot;referenceCount&quot;i&quot;toplevel&quot;^{TkWindowPrivate}&quot;flags&quot;i}'>
<field declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<field declared_type='NSView*' name='view' type='@&quot;NSView&quot;'/>
<field declared_type='CGContextRef' name='context' type='^{CGContext=}'/>
<field declared_type='int' name='xOff' type='i'/>
<field declared_type='int' name='yOff' type='i'/>
<field declared_type='CGSize' name='size' type='{CGSize=&quot;width&quot;f&quot;height&quot;f}' type64='{CGSize=&quot;width&quot;d&quot;height&quot;d}'/>
<field declared_type='HIShapeRef' name='visRgn' type='^{__HIShape=}'/>
<field declared_type='HIShapeRef' name='aboveVisRgn' type='^{__HIShape=}'/>
<field declared_type='HIShapeRef' name='drawRgn' type='^{__HIShape=}'/>
<field declared_type='int' name='referenceCount' type='i'/>
<field declared_type='struct TkWindowPrivate*' name='toplevel' type='^{TkWindowPrivate=^{TkWindow}@^{CGContext}ii{CGSize=ff}^{__HIShape}^{__HIShape}^{__HIShape}i^{TkWindowPrivate}i}' type64='^{TkWindowPrivate=^{TkWindow}@^{CGContext}ii{CGSize=dd}^{__HIShape}^{__HIShape}^{__HIShape}i^{TkWindowPrivate}i}'/>
<field declared_type='int' name='flags' type='i'/>
</struct>
<struct name='TkXLFDAttributes' type='{TkXLFDAttributes=&quot;foundry&quot;*&quot;slant&quot;i&quot;setwidth&quot;i&quot;charset&quot;*}'>
<field declared_type='Tk_Uid' name='foundry' type='*'/>
<field declared_type='int' name='slant' type='i'/>
<field declared_type='int' name='setwidth' type='i'/>
<field declared_type='Tk_Uid' name='charset' type='*'/>
</struct>
<struct name='Tk_ArgvInfo' type='{_Tk_ArgvInfo=&quot;key&quot;*&quot;type&quot;i&quot;src&quot;*&quot;dst&quot;*&quot;help&quot;*}'>
<field declared_type='char*' name='key' type='*'/>
<field declared_type='int' name='type' type='i'/>
<field declared_type='char*' name='src' type='*'/>
<field declared_type='char*' name='dst' type='*'/>
<field declared_type='char*' name='help' type='*'/>
</struct>
<struct name='Tk_CanvasTextInfo' type='{Tk_CanvasTextInfo=&quot;selBorder&quot;^{Tk_3DBorder_}&quot;selBorderWidth&quot;i&quot;selFgColorPtr&quot;^{_XColor=&quot;pixel&quot;L&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;flags&quot;c&quot;pad&quot;c}&quot;selItemPtr&quot;^{Tk_Item=&quot;id&quot;i&quot;nextPtr&quot;^{Tk_Item}&quot;staticTagSpace&quot;[3*]&quot;tagPtr&quot;^*&quot;tagSpace&quot;i&quot;numTags&quot;i&quot;typePtr&quot;^{Tk_ItemType}&quot;x1&quot;i&quot;y1&quot;i&quot;x2&quot;i&quot;y2&quot;i&quot;prevPtr&quot;^{Tk_Item}&quot;state&quot;i&quot;reserved1&quot;*&quot;redraw_flags&quot;i}&quot;selectFirst&quot;i&quot;selectLast&quot;i&quot;anchorItemPtr&quot;^{Tk_Item=&quot;id&quot;i&quot;nextPtr&quot;^{Tk_Item}&quot;staticTagSpace&quot;[3*]&quot;tagPtr&quot;^*&quot;tagSpace&quot;i&quot;numTags&quot;i&quot;typePtr&quot;^{Tk_ItemType}&quot;x1&quot;i&quot;y1&quot;i&quot;x2&quot;i&quot;y2&quot;i&quot;prevPtr&quot;^{Tk_Item}&quot;state&quot;i&quot;reserved1&quot;*&quot;redraw_flags&quot;i}&quot;selectAnchor&quot;i&quot;insertBorder&quot;^{Tk_3DBorder_}&quot;insertWidth&quot;i&quot;insertBorderWidth&quot;i&quot;focusItemPtr&quot;^{Tk_Item=&quot;id&quot;i&quot;nextPtr&quot;^{Tk_Item}&quot;staticTagSpace&quot;[3*]&quot;tagPtr&quot;^*&quot;tagSpace&quot;i&quot;numTags&quot;i&quot;typePtr&quot;^{Tk_ItemType}&quot;x1&quot;i&quot;y1&quot;i&quot;x2&quot;i&quot;y2&quot;i&quot;prevPtr&quot;^{Tk_Item}&quot;state&quot;i&quot;reserved1&quot;*&quot;redraw_flags&quot;i}&quot;gotFocus&quot;i&quot;cursorOn&quot;i}' type64='{Tk_CanvasTextInfo=&quot;selBorder&quot;^{Tk_3DBorder_}&quot;selBorderWidth&quot;i&quot;selFgColorPtr&quot;^{_XColor=&quot;pixel&quot;Q&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;flags&quot;c&quot;pad&quot;c}&quot;selItemPtr&quot;^{Tk_Item=&quot;id&quot;i&quot;nextPtr&quot;^{Tk_Item}&quot;staticTagSpace&quot;[3*]&quot;tagPtr&quot;^*&quot;tagSpace&quot;i&quot;numTags&quot;i&quot;typePtr&quot;^{Tk_ItemType}&quot;x1&quot;i&quot;y1&quot;i&quot;x2&quot;i&quot;y2&quot;i&quot;prevPtr&quot;^{Tk_Item}&quot;state&quot;i&quot;reserved1&quot;*&quot;redraw_flags&quot;i}&quot;selectFirst&quot;i&quot;selectLast&quot;i&quot;anchorItemPtr&quot;^{Tk_Item=&quot;id&quot;i&quot;nextPtr&quot;^{Tk_Item}&quot;staticTagSpace&quot;[3*]&quot;tagPtr&quot;^*&quot;tagSpace&quot;i&quot;numTags&quot;i&quot;typePtr&quot;^{Tk_ItemType}&quot;x1&quot;i&quot;y1&quot;i&quot;x2&quot;i&quot;y2&quot;i&quot;prevPtr&quot;^{Tk_Item}&quot;state&quot;i&quot;reserved1&quot;*&quot;redraw_flags&quot;i}&quot;selectAnchor&quot;i&quot;insertBorder&quot;^{Tk_3DBorder_}&quot;insertWidth&quot;i&quot;insertBorderWidth&quot;i&quot;focusItemPtr&quot;^{Tk_Item=&quot;id&quot;i&quot;nextPtr&quot;^{Tk_Item}&quot;staticTagSpace&quot;[3*]&quot;tagPtr&quot;^*&quot;tagSpace&quot;i&quot;numTags&quot;i&quot;typePtr&quot;^{Tk_ItemType}&quot;x1&quot;i&quot;y1&quot;i&quot;x2&quot;i&quot;y2&quot;i&quot;prevPtr&quot;^{Tk_Item}&quot;state&quot;i&quot;reserved1&quot;*&quot;redraw_flags&quot;i}&quot;gotFocus&quot;i&quot;cursorOn&quot;i}'>
<field declared_type='Tk_3DBorder' name='selBorder' type='^{Tk_3DBorder_=}'/>
<field declared_type='int' name='selBorderWidth' type='i'/>
<field declared_type='XColor*' name='selFgColorPtr' type='^{_XColor=&quot;pixel&quot;L&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;flags&quot;c&quot;pad&quot;c}' type64='^{_XColor=&quot;pixel&quot;Q&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;flags&quot;c&quot;pad&quot;c}'/>
<field declared_type='Tk_Item*' name='selItemPtr' type='^{Tk_Item=&quot;id&quot;i&quot;nextPtr&quot;^{Tk_Item}&quot;staticTagSpace&quot;[3*]&quot;tagPtr&quot;^*&quot;tagSpace&quot;i&quot;numTags&quot;i&quot;typePtr&quot;^{Tk_ItemType}&quot;x1&quot;i&quot;y1&quot;i&quot;x2&quot;i&quot;y2&quot;i&quot;prevPtr&quot;^{Tk_Item}&quot;state&quot;i&quot;reserved1&quot;*&quot;redraw_flags&quot;i}'/>
<field declared_type='int' name='selectFirst' type='i'/>
<field declared_type='int' name='selectLast' type='i'/>
<field declared_type='Tk_Item*' name='anchorItemPtr' type='^{Tk_Item=&quot;id&quot;i&quot;nextPtr&quot;^{Tk_Item}&quot;staticTagSpace&quot;[3*]&quot;tagPtr&quot;^*&quot;tagSpace&quot;i&quot;numTags&quot;i&quot;typePtr&quot;^{Tk_ItemType}&quot;x1&quot;i&quot;y1&quot;i&quot;x2&quot;i&quot;y2&quot;i&quot;prevPtr&quot;^{Tk_Item}&quot;state&quot;i&quot;reserved1&quot;*&quot;redraw_flags&quot;i}'/>
<field declared_type='int' name='selectAnchor' type='i'/>
<field declared_type='Tk_3DBorder' name='insertBorder' type='^{Tk_3DBorder_=}'/>
<field declared_type='int' name='insertWidth' type='i'/>
<field declared_type='int' name='insertBorderWidth' type='i'/>
<field declared_type='Tk_Item*' name='focusItemPtr' type='^{Tk_Item=&quot;id&quot;i&quot;nextPtr&quot;^{Tk_Item}&quot;staticTagSpace&quot;[3*]&quot;tagPtr&quot;^*&quot;tagSpace&quot;i&quot;numTags&quot;i&quot;typePtr&quot;^{Tk_ItemType}&quot;x1&quot;i&quot;y1&quot;i&quot;x2&quot;i&quot;y2&quot;i&quot;prevPtr&quot;^{Tk_Item}&quot;state&quot;i&quot;reserved1&quot;*&quot;redraw_flags&quot;i}'/>
<field declared_type='int' name='gotFocus' type='i'/>
<field declared_type='int' name='cursorOn' type='i'/>
</struct>
<struct name='Tk_ClassProcs' type='{Tk_ClassProcs=}'>
<field declared_type='unsigned int' name='size' type='I'/>
<field declared_type='Tk_ClassWorldChangedProc*' function_pointer='true' name='worldChangedProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int*' name='createProc' type='^i'/>
<field declared_type='Tk_ClassModalProc*' function_pointer='true' name='modalProc' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='Tk_ConfigSpec' type='{Tk_ConfigSpec=&quot;type&quot;i&quot;argvName&quot;*&quot;dbName&quot;*&quot;dbClass&quot;*&quot;defValue&quot;*&quot;offset&quot;i&quot;specFlags&quot;i&quot;customPtr&quot;^{Tk_CustomOption}}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='char*' name='argvName' type='*'/>
<field declared_type='Tk_Uid' name='dbName' type='*'/>
<field declared_type='Tk_Uid' name='dbClass' type='*'/>
<field declared_type='Tk_Uid' name='defValue' type='*'/>
<field declared_type='int' name='offset' type='i'/>
<field declared_type='int' name='specFlags' type='i'/>
<field declared_type='Tk_CustomOption*' name='customPtr' type='^{Tk_CustomOption=^?^?^v}'/>
</struct>
<struct name='Tk_CustomOption' type='{Tk_CustomOption=&quot;parseProc&quot;^?&quot;printProc&quot;^?&quot;clientData&quot;^v}'>
<field declared_type='Tk_OptionParseProc*' function_pointer='true' name='parseProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_OptionPrintProc*' function_pointer='true' name='printProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_FreeProc**' type='^^?'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='ClientData' name='clientData' type='^v'/>
</struct>
<struct name='Tk_Dash' type='{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[4c])}' type64='{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[8c])}'>
<field declared_type='int' name='number' type='i'/>
<field declared_type='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Tk.framework/Headers/tk.h:1136:5)' name='pattern' type='(?=&quot;pt&quot;*&quot;array&quot;[4c])' type64='(?=&quot;pt&quot;*&quot;array&quot;[8c])'/>
</struct>
<struct name='Tk_ElementOptionSpec' type='{Tk_ElementOptionSpec=&quot;name&quot;*&quot;type&quot;i}'>
<field declared_type='char*' name='name' type='*'/>
<field declared_type='Tk_OptionType' name='type' type='i'/>
</struct>
<struct name='Tk_ElementSpec' type='{Tk_ElementSpec=&quot;version&quot;i&quot;name&quot;*&quot;options&quot;^{Tk_ElementOptionSpec}&quot;getSize&quot;^?&quot;getBox&quot;^?&quot;getBorderWidth&quot;^?&quot;draw&quot;^?}'>
<field declared_type='int' name='version' type='i'/>
<field declared_type='char*' name='name' type='*'/>
<field declared_type='Tk_ElementOptionSpec*' name='options' type='^{Tk_ElementOptionSpec=*i}'/>
<field declared_type='Tk_GetElementSizeProc*' function_pointer='true' name='getSize' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='char*' type='*'/>
<arg const='true' declared_type='Tk_OptionSpec**' type='^^{Tk_OptionSpec}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_GetElementBoxProc*' function_pointer='true' name='getBox' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='char*' type='*'/>
<arg const='true' declared_type='Tk_OptionSpec**' type='^^{Tk_OptionSpec}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_GetElementBorderWidthProc*' function_pointer='true' name='getBorderWidth' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='char*' type='*'/>
<arg const='true' declared_type='Tk_OptionSpec**' type='^^{Tk_OptionSpec}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_DrawElementProc*' function_pointer='true' name='draw' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='char*' type='*'/>
<arg const='true' declared_type='Tk_OptionSpec**' type='^^{Tk_OptionSpec}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='Tk_FakeWin' type='{Tk_FakeWin=}'>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='char*' name='dummy1' type='*'/>
<field declared_type='int' name='screenNum' type='i'/>
<field declared_type='Visual*' name='visual' type='^{_Visual=}'/>
<field declared_type='int' name='depth' type='i'/>
<field declared_type='Window' name='window' type='?'/>
<field declared_type='char*' name='dummy2' type='*'/>
<field declared_type='char*' name='dummy3' type='*'/>
<field declared_type='Tk_Window' name='parentPtr' type='^{Tk_Window_=}'/>
<field declared_type='char*' name='dummy4' type='*'/>
<field declared_type='char*' name='dummy5' type='*'/>
<field declared_type='char*' name='pathName' type='*'/>
<field declared_type='Tk_Uid' name='nameUid' type='*'/>
<field declared_type='Tk_Uid' name='classUid' type='*'/>
<field declared_type='XWindowChanges' name='changes' type='{_XWindowChanges=}'/>
<field declared_type='unsigned int' name='dummy6' type='I'/>
<field declared_type='XSetWindowAttributes' name='atts' type='{_XSetWindowAttributes=}'/>
<field declared_type='unsigned long' name='dummy7' type='L' type64='Q'/>
<field declared_type='unsigned int' name='flags' type='I'/>
<field declared_type='char*' name='dummy8' type='*'/>
<field declared_type='ClientData*' name='dummy10' type='^^v'/>
<field declared_type='int' name='dummy11' type='i'/>
<field declared_type='int' name='dummy12' type='i'/>
<field declared_type='char*' name='dummy13' type='*'/>
<field declared_type='char*' name='dummy14' type='*'/>
<field declared_type='ClientData' name='dummy15' type='^v'/>
<field declared_type='int' name='reqWidth' type='i'/>
<field declared_type='int' name='reqHeight' type='i'/>
<field declared_type='int' name='internalBorderLeft' type='i'/>
<field declared_type='char*' name='dummy16' type='*'/>
<field declared_type='char*' name='dummy17' type='*'/>
<field declared_type='ClientData' name='dummy18' type='^v'/>
<field declared_type='char*' name='dummy19' type='*'/>
<field declared_type='int' name='internalBorderRight' type='i'/>
<field declared_type='int' name='internalBorderTop' type='i'/>
<field declared_type='int' name='internalBorderBottom' type='i'/>
<field declared_type='int' name='minReqWidth' type='i'/>
<field declared_type='int' name='minReqHeight' type='i'/>
</struct>
<struct name='Tk_FontMetrics' type='{Tk_FontMetrics=&quot;ascent&quot;i&quot;descent&quot;i&quot;linespace&quot;i}'>
<field declared_type='int' name='ascent' type='i'/>
<field declared_type='int' name='descent' type='i'/>
<field declared_type='int' name='linespace' type='i'/>
</struct>
<struct name='Tk_GeomMgr' type='{Tk_GeomMgr=&quot;name&quot;*&quot;requestProc&quot;^?&quot;lostSlaveProc&quot;^?}'>
<field const='true' declared_type='char*' name='name' type='*'/>
<field declared_type='Tk_GeomRequestProc*' function_pointer='true' name='requestProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_GeomLostSlaveProc*' function_pointer='true' name='lostSlaveProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='Tk_ImageType' type='{Tk_ImageType=&quot;name&quot;*&quot;createProc&quot;^?&quot;getProc&quot;^?&quot;displayProc&quot;^?&quot;freeProc&quot;^?&quot;deleteProc&quot;^?&quot;postscriptProc&quot;^?&quot;nextPtr&quot;^{Tk_ImageType}&quot;reserved&quot;*}'>
<field declared_type='char*' name='name' type='*'/>
<field declared_type='Tk_ImageCreateProc*' function_pointer='true' name='createProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<arg declared_type='Tk_ImageType*' type='^{Tk_ImageType=*^?^?^?^?^?^?^{Tk_ImageType}*}'/>
<arg declared_type='Tk_ImageMaster' type='^{Tk_ImageMaster_=}'/>
<arg declared_type='ClientData*' type='^^v'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_ImageGetProc*' function_pointer='true' name='getProc' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='ClientData' type='^v'/>
</field>
<field declared_type='Tk_ImageDisplayProc*' function_pointer='true' name='displayProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_ImageFreeProc*' function_pointer='true' name='freeProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_ImageDeleteProc*' function_pointer='true' name='deleteProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_ImagePostscriptProc*' function_pointer='true' name='postscriptProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='struct Tk_ImageType*' name='nextPtr' type='^{Tk_ImageType=*^?^?^?^?^?^?^{Tk_ImageType}*}'/>
<field declared_type='char*' name='reserved' type='*'/>
</struct>
<struct name='Tk_Item' type='{Tk_Item=&quot;id&quot;i&quot;nextPtr&quot;^{Tk_Item}&quot;staticTagSpace&quot;[3*]&quot;tagPtr&quot;^*&quot;tagSpace&quot;i&quot;numTags&quot;i&quot;typePtr&quot;^{Tk_ItemType}&quot;x1&quot;i&quot;y1&quot;i&quot;x2&quot;i&quot;y2&quot;i&quot;prevPtr&quot;^{Tk_Item}&quot;state&quot;i&quot;reserved1&quot;*&quot;redraw_flags&quot;i}'>
<field declared_type='int' name='id' type='i'/>
<field declared_type='struct Tk_Item*' name='nextPtr' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<field declared_type='Tk_Uid*' name='staticTagSpace' type='[3*]'/>
<field declared_type='Tk_Uid*' name='tagPtr' type='^*'/>
<field declared_type='int' name='tagSpace' type='i'/>
<field declared_type='int' name='numTags' type='i'/>
<field declared_type='struct Tk_ItemType*' name='typePtr' type='^{Tk_ItemType=*i^?^{Tk_ConfigSpec}^?^?^?^?i^?^?^?^?^?^?^?^?^?^?^{Tk_ItemType}*i**}'/>
<field declared_type='int' name='x1' type='i'/>
<field declared_type='int' name='y1' type='i'/>
<field declared_type='int' name='x2' type='i'/>
<field declared_type='int' name='y2' type='i'/>
<field declared_type='struct Tk_Item*' name='prevPtr' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<field declared_type='Tk_State' name='state' type='i'/>
<field declared_type='char*' name='reserved1' type='*'/>
<field declared_type='int' name='redraw_flags' type='i'/>
</struct>
<struct name='Tk_ItemType' type='{Tk_ItemType=&quot;name&quot;*&quot;itemSize&quot;i&quot;createProc&quot;^?&quot;configSpecs&quot;^{Tk_ConfigSpec}&quot;configProc&quot;^?&quot;coordProc&quot;^?&quot;deleteProc&quot;^?&quot;displayProc&quot;^?&quot;alwaysRedraw&quot;i&quot;pointProc&quot;^?&quot;areaProc&quot;^?&quot;postscriptProc&quot;^?&quot;scaleProc&quot;^?&quot;translateProc&quot;^?&quot;indexProc&quot;^?&quot;icursorProc&quot;^?&quot;selectionProc&quot;^?&quot;insertProc&quot;^?&quot;dCharsProc&quot;^?&quot;nextPtr&quot;^{Tk_ItemType}&quot;reserved1&quot;*&quot;reserved2&quot;i&quot;reserved3&quot;*&quot;reserved4&quot;*}'>
<field declared_type='char*' name='name' type='*'/>
<field declared_type='int' name='itemSize' type='i'/>
<field declared_type='Tk_ItemCreateProc*' function_pointer='true' name='createProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_ConfigSpec*' name='configSpecs' type='^{Tk_ConfigSpec=i****ii^{Tk_CustomOption}}'/>
<field declared_type='Tk_ItemConfigureProc*' function_pointer='true' name='configProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_ItemCoordProc*' function_pointer='true' name='coordProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_ItemDeleteProc*' function_pointer='true' name='deleteProc' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_ItemDisplayProc*' function_pointer='true' name='displayProc' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int' name='alwaysRedraw' type='i'/>
<field declared_type='Tk_ItemPointProc*' function_pointer='true' name='pointProc' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='double' type='d'/>
</field>
<field declared_type='Tk_ItemAreaProc*' function_pointer='true' name='areaProc' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_ItemPostscriptProc*' function_pointer='true' name='postscriptProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_ItemScaleProc*' function_pointer='true' name='scaleProc' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='double' type='d'/>
<arg declared_type='double' type='d'/>
<arg declared_type='double' type='d'/>
<arg declared_type='double' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_ItemTranslateProc*' function_pointer='true' name='translateProc' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='double' type='d'/>
<arg declared_type='double' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_ItemIndexProc*' function_pointer='true' name='indexProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_ItemCursorProc*' function_pointer='true' name='icursorProc' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_ItemSelectionProc*' function_pointer='true' name='selectionProc' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_ItemInsertProc*' function_pointer='true' name='insertProc' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_ItemDCharsProc*' function_pointer='true' name='dCharsProc' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='struct Tk_ItemType*' name='nextPtr' type='^{Tk_ItemType=*i^?^{Tk_ConfigSpec}^?^?^?^?i^?^?^?^?^?^?^?^?^?^?^{Tk_ItemType}*i**}'/>
<field declared_type='char*' name='reserved1' type='*'/>
<field declared_type='int' name='reserved2' type='i'/>
<field declared_type='char*' name='reserved3' type='*'/>
<field declared_type='char*' name='reserved4' type='*'/>
</struct>
<struct name='Tk_ObjCustomOption' type='{Tk_ObjCustomOption=&quot;name&quot;*&quot;setProc&quot;^?&quot;getProc&quot;^?&quot;restoreProc&quot;^?&quot;freeProc&quot;^?&quot;clientData&quot;^v}'>
<field const='true' declared_type='char*' name='name' type='*'/>
<field declared_type='Tk_CustomOptionSetProc*' function_pointer='true' name='setProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_CustomOptionGetProc*' function_pointer='true' name='getProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tk_CustomOptionRestoreProc*' function_pointer='true' name='restoreProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tk_CustomOptionFreeProc*' function_pointer='true' name='freeProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='ClientData' name='clientData' type='^v'/>
</struct>
<struct name='Tk_OptionSpec' type='{Tk_OptionSpec=&quot;type&quot;i&quot;optionName&quot;*&quot;dbName&quot;*&quot;dbClass&quot;*&quot;defValue&quot;*&quot;objOffset&quot;i&quot;internalOffset&quot;i&quot;flags&quot;i&quot;clientData&quot;^v&quot;typeMask&quot;i}'>
<field declared_type='Tk_OptionType' name='type' type='i'/>
<field const='true' declared_type='char*' name='optionName' type='*'/>
<field const='true' declared_type='char*' name='dbName' type='*'/>
<field const='true' declared_type='char*' name='dbClass' type='*'/>
<field const='true' declared_type='char*' name='defValue' type='*'/>
<field declared_type='int' name='objOffset' type='i'/>
<field declared_type='int' name='internalOffset' type='i'/>
<field declared_type='int' name='flags' type='i'/>
<field declared_type='ClientData' name='clientData' type='^v'/>
<field declared_type='int' name='typeMask' type='i'/>
</struct>
<struct name='Tk_Outline' type='{Tk_Outline=}'>
<field declared_type='GC' name='gc' type='^{_GC=}'/>
<field declared_type='double' name='width' type='d'/>
<field declared_type='double' name='activeWidth' type='d'/>
<field declared_type='double' name='disabledWidth' type='d'/>
<field declared_type='int' name='offset' type='i'/>
<field declared_type='Tk_Dash' name='dash' type='{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[4c])}' type64='{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[8c])}'/>
<field declared_type='Tk_Dash' name='activeDash' type='{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[4c])}' type64='{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[8c])}'/>
<field declared_type='Tk_Dash' name='disabledDash' type='{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[4c])}' type64='{Tk_Dash=&quot;number&quot;i&quot;pattern&quot;(?=&quot;pt&quot;*&quot;array&quot;[8c])}'/>
<field declared_type='void*' name='reserved1' type='^v'/>
<field declared_type='void*' name='reserved2' type='^v'/>
<field declared_type='void*' name='reserved3' type='^v'/>
<field declared_type='Tk_TSOffset' name='tsoffset' type='{Tk_TSOffset=&quot;flags&quot;i&quot;xoffset&quot;i&quot;yoffset&quot;i}'/>
<field declared_type='XColor*' name='color' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
<field declared_type='XColor*' name='activeColor' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
<field declared_type='XColor*' name='disabledColor' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
<field declared_type='int' name='stipple' type='i'/>
<field declared_type='int' name='activeStipple' type='i'/>
<field declared_type='int' name='disabledStipple' type='i'/>
</struct>
<struct name='Tk_PhotoImageBlock' type='{Tk_PhotoImageBlock=&quot;pixelPtr&quot;*&quot;width&quot;i&quot;height&quot;i&quot;pitch&quot;i&quot;pixelSize&quot;i&quot;offset&quot;[4i]}'>
<field declared_type='unsigned char*' name='pixelPtr' type='*'/>
<field declared_type='int' name='width' type='i'/>
<field declared_type='int' name='height' type='i'/>
<field declared_type='int' name='pitch' type='i'/>
<field declared_type='int' name='pixelSize' type='i'/>
<field declared_type='int*' name='offset' type='[4i]'/>
</struct>
<struct name='Tk_PhotoImageFormat' type='{Tk_PhotoImageFormat=&quot;name&quot;*&quot;fileMatchProc&quot;^?&quot;stringMatchProc&quot;^?&quot;fileReadProc&quot;^?&quot;stringReadProc&quot;^?&quot;fileWriteProc&quot;^?&quot;stringWriteProc&quot;^?&quot;nextPtr&quot;^{Tk_PhotoImageFormat}}'>
<field declared_type='char*' name='name' type='*'/>
<field declared_type='Tk_ImageFileMatchProc*' function_pointer='true' name='fileMatchProc' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_ImageStringMatchProc*' function_pointer='true' name='stringMatchProc' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_ImageFileReadProc*' function_pointer='true' name='fileReadProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tk_PhotoHandle' type='^v'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_ImageStringReadProc*' function_pointer='true' name='stringReadProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tk_PhotoHandle' type='^v'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_ImageFileWriteProc*' function_pointer='true' name='fileWriteProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tk_ImageStringWriteProc*' function_pointer='true' name='stringWriteProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tk_PhotoImageBlock*' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='struct Tk_PhotoImageFormat*' name='nextPtr' type='^{Tk_PhotoImageFormat=*^?^?^?^?^?^?^{Tk_PhotoImageFormat}}'/>
</struct>
<struct name='Tk_SavedOption' type='{Tk_SavedOption=&quot;optionPtr&quot;^{TkOption}&quot;valuePtr&quot;^{Tcl_Obj}&quot;internalForm&quot;d}'>
<field declared_type='struct TkOption*' name='optionPtr' type='^{TkOption=}'/>
<field declared_type='Tcl_Obj*' name='valuePtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<field declared_type='double' name='internalForm' type='d'/>
</struct>
<struct name='Tk_SavedOptions' type='{Tk_SavedOptions=&quot;recordPtr&quot;*&quot;tkwin&quot;^{Tk_Window_}&quot;numItems&quot;i&quot;items&quot;[20{Tk_SavedOption=&quot;optionPtr&quot;^{TkOption}&quot;valuePtr&quot;^{Tcl_Obj}&quot;internalForm&quot;d}]&quot;nextPtr&quot;^{Tk_SavedOptions}}'>
<field declared_type='char*' name='recordPtr' type='*'/>
<field declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<field declared_type='int' name='numItems' type='i'/>
<field declared_type='Tk_SavedOption*' name='items' type='[20{Tk_SavedOption=&quot;optionPtr&quot;^{TkOption}&quot;valuePtr&quot;^{Tcl_Obj}&quot;internalForm&quot;d}]'/>
<field declared_type='struct Tk_SavedOptions*' name='nextPtr' type='^{Tk_SavedOptions=*^{Tk_Window_}i[20{Tk_SavedOption=^{TkOption}^{Tcl_Obj}d}]^{Tk_SavedOptions}}'/>
</struct>
<struct name='Tk_SmoothMethod' type='{Tk_SmoothMethod=&quot;name&quot;*&quot;coordProc&quot;^?&quot;postscriptProc&quot;^?}'>
<field declared_type='char*' name='name' type='*'/>
<field declared_type='int (*)(Tk_Canvas, double *, int, int, XPoint *, double *)' function_pointer='true' name='coordProc' type='^?'>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double*' type='^d'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='XPoint*' type='^{_XPoint=ss}'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tk_Canvas, double *, int, int)' function_pointer='true' name='postscriptProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double*' type='^d'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='Tk_TSOffset' type='{Tk_TSOffset=&quot;flags&quot;i&quot;xoffset&quot;i&quot;yoffset&quot;i}'>
<field declared_type='int' name='flags' type='i'/>
<field declared_type='int' name='xoffset' type='i'/>
<field declared_type='int' name='yoffset' type='i'/>
</struct>
<struct name='TkpClipMask' type='{TkpClipMask=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Tk.framework/Headers/tk-private/tkInt.h:889:5)' name='value' type='(?=&quot;pixmap&quot;i&quot;region&quot;^{TkRegion_})'/>
</struct>
<struct name='TkpGCCache' type='{_TkpGCCache=&quot;cachedForeground&quot;L&quot;cachedForegroundColor&quot;^{CGColor}&quot;cachedBackground&quot;L&quot;cachedBackgroundColor&quot;^{CGColor}}' type64='{_TkpGCCache=&quot;cachedForeground&quot;Q&quot;cachedForegroundColor&quot;^{CGColor}&quot;cachedBackground&quot;Q&quot;cachedBackgroundColor&quot;^{CGColor}}'>
<field declared_type='unsigned long' name='cachedForeground' type='L' type64='Q'/>
<field declared_type='CGColorRef' name='cachedForegroundColor' type='^{CGColor=}'/>
<field declared_type='unsigned long' name='cachedBackground' type='L' type64='Q'/>
<field declared_type='CGColorRef' name='cachedBackgroundColor' type='^{CGColor=}'/>
</struct>
<struct name='TtkEnsemble' type='{TtkEnsemble=&quot;name&quot;*&quot;command&quot;^?&quot;ensemble&quot;^{TtkEnsemble}}'>
<field const='true' declared_type='char*' name='name' type='*'/>
<field declared_type='Tcl_ObjCmdProc*' function_pointer='true' name='command' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='struct Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field const='true' declared_type='struct TtkEnsemble*' name='ensemble' type='^{TtkEnsemble=*^?^{TtkEnsemble}}'/>
</struct>
<struct name='TtkStubs' type='{TtkStubs=}'>
<field declared_type='int' name='magic' type='i'/>
<field declared_type='int' name='epoch' type='i'/>
<field declared_type='int' name='revision' type='i'/>
<field const='true' declared_type='struct TtkStubHooks*' name='hooks' type='^{TtkStubHooks=}'/>
<field declared_type='int (int *)' name='Ttk_Theme' type='?'/>
<field declared_type='void (*)(Tcl_Interp *, void *, int *)' function_pointer='true' name='ttk_RegisterCleanup' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(int, char *, int *, void *)' function_pointer='true' name='ttk_RegisterElementSpec' type='^?'>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int *(*)(Tcl_Interp *, int, char *, int *, void *)' function_pointer='true' name='ttk_RegisterElement' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='int*' type='^i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int, void *)' function_pointer='true' name='ttk_RegisterElementFactory' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(int, char *, int)' function_pointer='true' name='ttk_RegisterLayout' type='^?'>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(void)' function_pointer='true' name='reserved9' type='^?'>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int *)' function_pointer='true' name='ttk_GetStateSpecFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Obj *(*)(unsigned int, unsigned int)' function_pointer='true' name='ttk_NewStateSpecObj' type='^?'>
<arg declared_type='unsigned int' type='I'/>
<arg declared_type='unsigned int' type='I'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='int (int *)' name='Ttk_StateMap' type='?'/>
<field declared_type='Tcl_Obj *(*)(Tcl_Interp *, int, int)' function_pointer='true' name='ttk_StateMapLookup' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='int (*)(int *, int)' function_pointer='true' name='ttk_StateTableLookup' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(void)' function_pointer='true' name='reserved15' type='^?'>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(void)' function_pointer='true' name='reserved16' type='^?'>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(void)' function_pointer='true' name='reserved17' type='^?'>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(void)' function_pointer='true' name='reserved18' type='^?'>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(void)' function_pointer='true' name='reserved19' type='^?'>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tk_Window, Tcl_Obj *, int *)' function_pointer='true' name='ttk_GetPaddingFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int *)' function_pointer='true' name='ttk_GetBorderFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int *)' function_pointer='true' name='ttk_GetStickyFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (int *)' name='Ttk_Padding' type='?'/>
<field declared_type='int (int *)' name='Ttk_Box' type='?'/>
<field declared_type='int (*)(int, int, int)' function_pointer='true' name='ttk_BoxContains' type='^?'>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Obj *(*)(int)' function_pointer='true' name='ttk_NewBoxObj' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='void (*)(void)' function_pointer='true' name='reserved36' type='^?'>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(void)' function_pointer='true' name='reserved37' type='^?'>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(void)' function_pointer='true' name='reserved38' type='^?'>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(void)' function_pointer='true' name='reserved39' type='^?'>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int *)' function_pointer='true' name='ttk_GetOrientFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
</struct>
<struct name='Ttk_Box' type='{_Ttk_Box=&quot;x&quot;i&quot;y&quot;i&quot;width&quot;i&quot;height&quot;i}'>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='width' type='i'/>
<field declared_type='int' name='height' type='i'/>
</struct>
<struct name='Ttk_ElementOptionSpec' type='{Ttk_ElementOptionSpec=&quot;optionName&quot;*&quot;type&quot;i&quot;offset&quot;i&quot;defaultValue&quot;*}'>
<field const='true' declared_type='char*' name='optionName' type='*'/>
<field declared_type='Tk_OptionType' name='type' type='i'/>
<field declared_type='int' name='offset' type='i'/>
<field const='true' declared_type='char*' name='defaultValue' type='*'/>
</struct>
<struct name='Ttk_ElementSpec' type='{Ttk_ElementSpec=&quot;version&quot;i&quot;elementSize&quot;I&quot;options&quot;^{Ttk_ElementOptionSpec}&quot;size&quot;^?&quot;draw&quot;^?}' type64='{Ttk_ElementSpec=&quot;version&quot;i&quot;elementSize&quot;Q&quot;options&quot;^{Ttk_ElementOptionSpec}&quot;size&quot;^?&quot;draw&quot;^?}'>
<field declared_type='enum TTKStyleVersion2' name='version' type='i'/>
<field declared_type='size_t' name='elementSize' type='L' type64='Q'/>
<field declared_type='Ttk_ElementOptionSpec*' name='options' type='^{Ttk_ElementOptionSpec=*ii*}'/>
<field declared_type='Ttk_ElementSizeProc*' function_pointer='true' name='size' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Ttk_ElementDrawProc*' function_pointer='true' name='draw' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Ttk_State' type='I'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='Ttk_Ensemble' type='{TtkEnsemble=&quot;name&quot;*&quot;command&quot;^?&quot;ensemble&quot;^{TtkEnsemble}}'>
<field const='true' declared_type='char*' name='name' type='*'/>
<field declared_type='Tcl_ObjCmdProc*' function_pointer='true' name='command' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='struct Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field const='true' declared_type='struct TtkEnsemble*' name='ensemble' type='^{TtkEnsemble=*^?^{TtkEnsemble}}'/>
</struct>
<struct name='Ttk_LayoutSpec' type='{_Ttk_LayoutSpec=&quot;elementName&quot;*&quot;opcode&quot;I}'>
<field const='true' declared_type='char*' name='elementName' type='*'/>
<field declared_type='unsigned int' name='opcode' type='I'/>
</struct>
<struct name='Ttk_Padding' type='{_Ttk_Padding=&quot;left&quot;s&quot;top&quot;s&quot;right&quot;s&quot;bottom&quot;s}'>
<field declared_type='short' name='left' type='s'/>
<field declared_type='short' name='top' type='s'/>
<field declared_type='short' name='right' type='s'/>
<field declared_type='short' name='bottom' type='s'/>
</struct>
<struct name='Ttk_StateSpec' type='{_Ttk_StateSpec=&quot;onbits&quot;I&quot;offbits&quot;I}'>
<field declared_type='unsigned int' name='onbits' type='I'/>
<field declared_type='unsigned int' name='offbits' type='I'/>
</struct>
<struct name='Ttk_StateTable' type='{_Ttk_StateTable=&quot;index&quot;i&quot;onBits&quot;I&quot;offBits&quot;I}'>
<field declared_type='int' name='index' type='i'/>
<field declared_type='unsigned int' name='onBits' type='I'/>
<field declared_type='unsigned int' name='offBits' type='I'/>
</struct>
<struct name='Visual' type='{_Visual=}'>
<field declared_type='XExtData*' name='ext_data' type='^{_XExtData=i^{_XExtData}^?*}'/>
<field declared_type='int' name='visualid' type='i'/>
<field declared_type='int' name='class' type='i'/>
<field declared_type='unsigned long' name='red_mask' type='L' type64='Q'/>
<field declared_type='unsigned long' name='green_mask' type='L' type64='Q'/>
<field declared_type='unsigned long' name='blue_mask' type='L' type64='Q'/>
<field declared_type='int' name='bits_per_rgb' type='i'/>
<field declared_type='int' name='map_entries' type='i'/>
</struct>
<struct name='XActivateDeactivateEvent' type='{_XActivateDeactivateEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='Window' name='window' type='?'/>
</struct>
<struct name='XActivateEvent' type='{_XActivateEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='Window' name='window' type='?'/>
</struct>
<struct name='XAnyEvent' type='{_XAnyEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
</struct>
<struct name='XArc' type='{_XArc=&quot;x&quot;s&quot;y&quot;s&quot;width&quot;S&quot;height&quot;S&quot;angle1&quot;s&quot;angle2&quot;s}'>
<field declared_type='short' name='x' type='s'/>
<field declared_type='short' name='y' type='s'/>
<field declared_type='unsigned short' name='width' type='S'/>
<field declared_type='unsigned short' name='height' type='S'/>
<field declared_type='short' name='angle1' type='s'/>
<field declared_type='short' name='angle2' type='s'/>
</struct>
<struct name='XButtonEvent' type='{_XButtonEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='root' type='i'/>
<field declared_type='int' name='subwindow' type='i'/>
<field declared_type='int' name='time' type='i'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='x_root' type='i'/>
<field declared_type='int' name='y_root' type='i'/>
<field declared_type='unsigned int' name='state' type='I'/>
<field declared_type='unsigned int' name='button' type='I'/>
<field declared_type='int' name='same_screen' type='i'/>
</struct>
<struct name='XButtonPressedEvent' type='{_XButtonPressedEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='root' type='i'/>
<field declared_type='int' name='subwindow' type='i'/>
<field declared_type='int' name='time' type='i'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='x_root' type='i'/>
<field declared_type='int' name='y_root' type='i'/>
<field declared_type='unsigned int' name='state' type='I'/>
<field declared_type='unsigned int' name='button' type='I'/>
<field declared_type='int' name='same_screen' type='i'/>
</struct>
<struct name='XButtonReleasedEvent' type='{_XButtonReleasedEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='root' type='i'/>
<field declared_type='int' name='subwindow' type='i'/>
<field declared_type='int' name='time' type='i'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='x_root' type='i'/>
<field declared_type='int' name='y_root' type='i'/>
<field declared_type='unsigned int' name='state' type='I'/>
<field declared_type='unsigned int' name='button' type='I'/>
<field declared_type='int' name='same_screen' type='i'/>
</struct>
<struct name='XChar2b' type='{_XChar2b=&quot;byte1&quot;C&quot;byte2&quot;C}'>
<field declared_type='unsigned char' name='byte1' type='C'/>
<field declared_type='unsigned char' name='byte2' type='C'/>
</struct>
<struct name='XCharStruct' type='{_XCharStruct=&quot;lbearing&quot;s&quot;rbearing&quot;s&quot;width&quot;s&quot;ascent&quot;s&quot;descent&quot;s&quot;attributes&quot;S}'>
<field declared_type='short' name='lbearing' type='s'/>
<field declared_type='short' name='rbearing' type='s'/>
<field declared_type='short' name='width' type='s'/>
<field declared_type='short' name='ascent' type='s'/>
<field declared_type='short' name='descent' type='s'/>
<field declared_type='unsigned short' name='attributes' type='S'/>
</struct>
<struct name='XCirculateEvent' type='{_XCirculateEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='event' type='i'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='place' type='i'/>
</struct>
<struct name='XCirculateRequestEvent' type='{_XCirculateRequestEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='parent' type='i'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='place' type='i'/>
</struct>
<struct name='XClassHint' type='{_XClassHint=&quot;res_name&quot;*&quot;res_class&quot;*}'>
<field declared_type='char*' name='res_name' type='*'/>
<field declared_type='char*' name='res_class' type='*'/>
</struct>
<struct name='XClientMessageEvent' type='{_XClientMessageEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='message_type' type='i'/>
<field declared_type='int' name='format' type='i'/>
<field declared_type='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Tk.framework/Headers/X11/Xlib.h:885:2)' name='data' type='(?=&quot;b&quot;[20c]&quot;s&quot;[10s]&quot;l&quot;[5l])' type64='(?=&quot;b&quot;[20c]&quot;s&quot;[10s]&quot;l&quot;[5q])'/>
</struct>
<struct name='XColor' type='{_XColor=&quot;pixel&quot;L&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;flags&quot;c&quot;pad&quot;c}' type64='{_XColor=&quot;pixel&quot;Q&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S&quot;flags&quot;c&quot;pad&quot;c}'>
<field declared_type='unsigned long' name='pixel' type='L' type64='Q'/>
<field declared_type='unsigned short' name='red' type='S'/>
<field declared_type='unsigned short' name='green' type='S'/>
<field declared_type='unsigned short' name='blue' type='S'/>
<field declared_type='char' name='flags' type='c'/>
<field declared_type='char' name='pad' type='c'/>
</struct>
<struct name='XColormapEvent' type='{_XColormapEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='colormap' type='i'/>
<field declared_type='int' name='new' type='i'/>
<field declared_type='int' name='state' type='i'/>
</struct>
<struct name='XComposeStatus' type='{_XComposeStatus=&quot;compose_ptr&quot;*&quot;chars_matched&quot;i}'>
<field declared_type='XPointer' name='compose_ptr' type='*'/>
<field declared_type='int' name='chars_matched' type='i'/>
</struct>
<struct name='XConfigureEvent' type='{_XConfigureEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='event' type='i'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='width' type='i'/>
<field declared_type='int' name='height' type='i'/>
<field declared_type='int' name='border_width' type='i'/>
<field declared_type='int' name='above' type='i'/>
<field declared_type='int' name='override_redirect' type='i'/>
</struct>
<struct name='XConfigureRequestEvent' type='{_XConfigureRequestEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='parent' type='i'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='width' type='i'/>
<field declared_type='int' name='height' type='i'/>
<field declared_type='int' name='border_width' type='i'/>
<field declared_type='int' name='above' type='i'/>
<field declared_type='int' name='detail' type='i'/>
<field declared_type='unsigned long' name='value_mask' type='L' type64='Q'/>
</struct>
<struct name='XCreateWindowEvent' type='{_XCreateWindowEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='parent' type='i'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='width' type='i'/>
<field declared_type='int' name='height' type='i'/>
<field declared_type='int' name='border_width' type='i'/>
<field declared_type='int' name='override_redirect' type='i'/>
</struct>
<struct name='XCrossingEvent' type='{_XCrossingEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='root' type='i'/>
<field declared_type='int' name='subwindow' type='i'/>
<field declared_type='int' name='time' type='i'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='x_root' type='i'/>
<field declared_type='int' name='y_root' type='i'/>
<field declared_type='int' name='mode' type='i'/>
<field declared_type='int' name='detail' type='i'/>
<field declared_type='int' name='same_screen' type='i'/>
<field declared_type='int' name='focus' type='i'/>
<field declared_type='unsigned int' name='state' type='I'/>
</struct>
<struct name='XDeactivateEvent' type='{_XDeactivateEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='Window' name='window' type='?'/>
</struct>
<struct name='XDestroyWindowEvent' type='{_XDestroyWindowEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='event' type='i'/>
<field declared_type='int' name='window' type='i'/>
</struct>
<struct name='XEnterWindowEvent' type='{_XEnterWindowEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='root' type='i'/>
<field declared_type='int' name='subwindow' type='i'/>
<field declared_type='int' name='time' type='i'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='x_root' type='i'/>
<field declared_type='int' name='y_root' type='i'/>
<field declared_type='int' name='mode' type='i'/>
<field declared_type='int' name='detail' type='i'/>
<field declared_type='int' name='same_screen' type='i'/>
<field declared_type='int' name='focus' type='i'/>
<field declared_type='unsigned int' name='state' type='I'/>
</struct>
<struct name='XErrorEvent' type='{_XErrorEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='resourceid' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='unsigned char' name='error_code' type='C'/>
<field declared_type='unsigned char' name='request_code' type='C'/>
<field declared_type='unsigned char' name='minor_code' type='C'/>
</struct>
<struct name='XExposeEvent' type='{_XExposeEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='width' type='i'/>
<field declared_type='int' name='height' type='i'/>
<field declared_type='int' name='count' type='i'/>
</struct>
<struct name='XExtCodes' type='{_XExtCodes=&quot;extension&quot;i&quot;major_opcode&quot;i&quot;first_event&quot;i&quot;first_error&quot;i}'>
<field declared_type='int' name='extension' type='i'/>
<field declared_type='int' name='major_opcode' type='i'/>
<field declared_type='int' name='first_event' type='i'/>
<field declared_type='int' name='first_error' type='i'/>
</struct>
<struct name='XExtData' type='{_XExtData=&quot;number&quot;i&quot;next&quot;^{_XExtData}&quot;free_private&quot;^?&quot;private_data&quot;*}'>
<field declared_type='int' name='number' type='i'/>
<field declared_type='struct _XExtData*' name='next' type='^{_XExtData=i^{_XExtData}^?*}'/>
<field declared_type='int (*)()' function_pointer='true' name='free_private' type='^?'>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='XPointer' name='private_data' type='*'/>
</struct>
<struct name='XFocusChangeEvent' type='{_XFocusChangeEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='mode' type='i'/>
<field declared_type='int' name='detail' type='i'/>
</struct>
<struct name='XFocusInEvent' type='{_XFocusInEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='mode' type='i'/>
<field declared_type='int' name='detail' type='i'/>
</struct>
<struct name='XFocusOutEvent' type='{_XFocusOutEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='mode' type='i'/>
<field declared_type='int' name='detail' type='i'/>
</struct>
<struct name='XFontProp' type='{_XFontProp=}'>
<field declared_type='int' name='name' type='i'/>
<field declared_type='unsigned long' name='card32' type='L' type64='Q'/>
</struct>
<struct name='XFontSetExtents' type='{_XFontSetExtents=&quot;max_ink_extent&quot;{_XRectangle=&quot;x&quot;s&quot;y&quot;s&quot;width&quot;S&quot;height&quot;S}&quot;max_logical_extent&quot;{_XRectangle=&quot;x&quot;s&quot;y&quot;s&quot;width&quot;S&quot;height&quot;S}}'>
<field declared_type='XRectangle' name='max_ink_extent' type='{_XRectangle=&quot;x&quot;s&quot;y&quot;s&quot;width&quot;S&quot;height&quot;S}'/>
<field declared_type='XRectangle' name='max_logical_extent' type='{_XRectangle=&quot;x&quot;s&quot;y&quot;s&quot;width&quot;S&quot;height&quot;S}'/>
</struct>
<struct name='XFontStruct' type='{_XFontStruct=}'>
<field declared_type='XExtData*' name='ext_data' type='^{_XExtData=i^{_XExtData}^?*}'/>
<field declared_type='int' name='fid' type='i'/>
<field declared_type='unsigned int' name='direction' type='I'/>
<field declared_type='unsigned int' name='min_char_or_byte2' type='I'/>
<field declared_type='unsigned int' name='max_char_or_byte2' type='I'/>
<field declared_type='unsigned int' name='min_byte1' type='I'/>
<field declared_type='unsigned int' name='max_byte1' type='I'/>
<field declared_type='int' name='all_chars_exist' type='i'/>
<field declared_type='unsigned int' name='default_char' type='I'/>
<field declared_type='int' name='n_properties' type='i'/>
<field declared_type='XFontProp*' name='properties' type='^{_XFontProp=}'/>
<field declared_type='XCharStruct' name='min_bounds' type='{_XCharStruct=&quot;lbearing&quot;s&quot;rbearing&quot;s&quot;width&quot;s&quot;ascent&quot;s&quot;descent&quot;s&quot;attributes&quot;S}'/>
<field declared_type='XCharStruct' name='max_bounds' type='{_XCharStruct=&quot;lbearing&quot;s&quot;rbearing&quot;s&quot;width&quot;s&quot;ascent&quot;s&quot;descent&quot;s&quot;attributes&quot;S}'/>
<field declared_type='XCharStruct*' name='per_char' type='^{_XCharStruct=sssssS}'/>
<field declared_type='int' name='ascent' type='i'/>
<field declared_type='int' name='descent' type='i'/>
</struct>
<struct name='XGCValues' type='{_XGCValues=}'>
<field declared_type='int' name='function' type='i'/>
<field declared_type='unsigned long' name='plane_mask' type='L' type64='Q'/>
<field declared_type='unsigned long' name='foreground' type='L' type64='Q'/>
<field declared_type='unsigned long' name='background' type='L' type64='Q'/>
<field declared_type='int' name='line_width' type='i'/>
<field declared_type='int' name='line_style' type='i'/>
<field declared_type='int' name='cap_style' type='i'/>
<field declared_type='int' name='join_style' type='i'/>
<field declared_type='int' name='fill_style' type='i'/>
<field declared_type='int' name='fill_rule' type='i'/>
<field declared_type='int' name='arc_mode' type='i'/>
<field declared_type='int' name='tile' type='i'/>
<field declared_type='int' name='stipple' type='i'/>
<field declared_type='int' name='ts_x_origin' type='i'/>
<field declared_type='int' name='ts_y_origin' type='i'/>
<field declared_type='int' name='font' type='i'/>
<field declared_type='int' name='subwindow_mode' type='i'/>
<field declared_type='int' name='graphics_exposures' type='i'/>
<field declared_type='int' name='clip_x_origin' type='i'/>
<field declared_type='int' name='clip_y_origin' type='i'/>
<field declared_type='int' name='clip_mask' type='i'/>
<field declared_type='int' name='dash_offset' type='i'/>
<field declared_type='char' name='dashes' type='c'/>
</struct>
<struct name='XGraphicsExposeEvent' type='{_XGraphicsExposeEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='drawable' type='i'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='width' type='i'/>
<field declared_type='int' name='height' type='i'/>
<field declared_type='int' name='count' type='i'/>
<field declared_type='int' name='major_code' type='i'/>
<field declared_type='int' name='minor_code' type='i'/>
</struct>
<struct name='XGravityEvent' type='{_XGravityEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='event' type='i'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
</struct>
<struct name='XHostAddress' type='{_XHostAddress=&quot;family&quot;i&quot;length&quot;i&quot;address&quot;*}'>
<field declared_type='int' name='family' type='i'/>
<field declared_type='int' name='length' type='i'/>
<field declared_type='char*' name='address' type='*'/>
</struct>
<struct name='XIMCallback' type='{_XIMCallback=&quot;client_data&quot;*&quot;callback&quot;^?}'>
<field declared_type='XPointer' name='client_data' type='*'/>
<field declared_type='XIMProc' function_pointer='true' name='callback' type='^?'>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='XIMPreeditCaretCallbackStruct' type='{_XIMPreeditCaretCallbackStruct=&quot;position&quot;i&quot;direction&quot;i&quot;style&quot;i}'>
<field declared_type='int' name='position' type='i'/>
<field declared_type='XIMCaretDirection' name='direction' type='i'/>
<field declared_type='XIMCaretStyle' name='style' type='i'/>
</struct>
<struct name='XIMPreeditDrawCallbackStruct' type='{_XIMPreeditDrawCallbackStruct=&quot;caret&quot;i&quot;chg_first&quot;i&quot;chg_length&quot;i&quot;text&quot;^{_XIMText}}'>
<field declared_type='int' name='caret' type='i'/>
<field declared_type='int' name='chg_first' type='i'/>
<field declared_type='int' name='chg_length' type='i'/>
<field declared_type='XIMText*' name='text' type='^{_XIMText=S^Ii(?=*^i)}' type64='^{_XIMText=S^Qi(?=*^i)}'/>
</struct>
<struct name='XIMStatusDrawCallbackStruct' type='{_XIMStatusDrawCallbackStruct=}'>
<field declared_type='XIMStatusDataType' name='type' type='i'/>
<field declared_type='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Tk.framework/Headers/X11/Xlib.h:1179:5)' name='data' type='(?=&quot;text&quot;^{_XIMText}&quot;bitmap&quot;i)'/>
</struct>
<struct name='XIMStyles' type='{_XIMStyles=&quot;count_styles&quot;S&quot;supported_styles&quot;^I}' type64='{_XIMStyles=&quot;count_styles&quot;S&quot;supported_styles&quot;^Q}'>
<field declared_type='unsigned short' name='count_styles' type='S'/>
<field declared_type='XIMStyle*' name='supported_styles' type='^I' type64='^Q'/>
</struct>
<struct name='XIMText' type='{_XIMText=&quot;length&quot;S&quot;feedback&quot;^I&quot;encoding_is_wchar&quot;i&quot;string&quot;(?=&quot;multi_byte&quot;*&quot;wide_char&quot;^i)}' type64='{_XIMText=&quot;length&quot;S&quot;feedback&quot;^Q&quot;encoding_is_wchar&quot;i&quot;string&quot;(?=&quot;multi_byte&quot;*&quot;wide_char&quot;^i)}'>
<field declared_type='unsigned short' name='length' type='S'/>
<field declared_type='XIMFeedback*' name='feedback' type='^I' type64='^Q'/>
<field declared_type='int' name='encoding_is_wchar' type='i'/>
<field declared_type='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Tk.framework/Headers/X11/Xlib.h:1137:5)' name='string' type='(?=&quot;multi_byte&quot;*&quot;wide_char&quot;^i)'/>
</struct>
<struct name='XIconSize' type='{_XIconSize=&quot;min_width&quot;i&quot;min_height&quot;i&quot;max_width&quot;i&quot;max_height&quot;i&quot;width_inc&quot;i&quot;height_inc&quot;i}'>
<field declared_type='int' name='min_width' type='i'/>
<field declared_type='int' name='min_height' type='i'/>
<field declared_type='int' name='max_width' type='i'/>
<field declared_type='int' name='max_height' type='i'/>
<field declared_type='int' name='width_inc' type='i'/>
<field declared_type='int' name='height_inc' type='i'/>
</struct>
<struct name='XImage' type='{_XImage=&quot;width&quot;i&quot;height&quot;i&quot;xoffset&quot;i&quot;format&quot;i&quot;data&quot;*&quot;byte_order&quot;i&quot;bitmap_unit&quot;i&quot;bitmap_bit_order&quot;i&quot;bitmap_pad&quot;i&quot;depth&quot;i&quot;bytes_per_line&quot;i&quot;bits_per_pixel&quot;i&quot;red_mask&quot;L&quot;green_mask&quot;L&quot;blue_mask&quot;L&quot;obdata&quot;*&quot;f&quot;{funcs=&quot;create_image&quot;^?&quot;destroy_image&quot;^?&quot;get_pixel&quot;^?&quot;put_pixel&quot;^?&quot;sub_image&quot;^?&quot;add_pixel&quot;^?}}' type64='{_XImage=&quot;width&quot;i&quot;height&quot;i&quot;xoffset&quot;i&quot;format&quot;i&quot;data&quot;*&quot;byte_order&quot;i&quot;bitmap_unit&quot;i&quot;bitmap_bit_order&quot;i&quot;bitmap_pad&quot;i&quot;depth&quot;i&quot;bytes_per_line&quot;i&quot;bits_per_pixel&quot;i&quot;red_mask&quot;Q&quot;green_mask&quot;Q&quot;blue_mask&quot;Q&quot;obdata&quot;*&quot;f&quot;{funcs=&quot;create_image&quot;^?&quot;destroy_image&quot;^?&quot;get_pixel&quot;^?&quot;put_pixel&quot;^?&quot;sub_image&quot;^?&quot;add_pixel&quot;^?}}'>
<field declared_type='int' name='width' type='i'/>
<field declared_type='int' name='height' type='i'/>
<field declared_type='int' name='xoffset' type='i'/>
<field declared_type='int' name='format' type='i'/>
<field declared_type='char*' name='data' type='*'/>
<field declared_type='int' name='byte_order' type='i'/>
<field declared_type='int' name='bitmap_unit' type='i'/>
<field declared_type='int' name='bitmap_bit_order' type='i'/>
<field declared_type='int' name='bitmap_pad' type='i'/>
<field declared_type='int' name='depth' type='i'/>
<field declared_type='int' name='bytes_per_line' type='i'/>
<field declared_type='int' name='bits_per_pixel' type='i'/>
<field declared_type='unsigned long' name='red_mask' type='L' type64='Q'/>
<field declared_type='unsigned long' name='green_mask' type='L' type64='Q'/>
<field declared_type='unsigned long' name='blue_mask' type='L' type64='Q'/>
<field declared_type='XPointer' name='obdata' type='*'/>
<field declared_type='struct funcs' name='f' type='{funcs=&quot;create_image&quot;^?&quot;destroy_image&quot;^?&quot;get_pixel&quot;^?&quot;put_pixel&quot;^?&quot;sub_image&quot;^?&quot;add_pixel&quot;^?}'/>
</struct>
<struct name='XKeyEvent' type='{_XKeyEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='root' type='i'/>
<field declared_type='int' name='subwindow' type='i'/>
<field declared_type='int' name='time' type='i'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='x_root' type='i'/>
<field declared_type='int' name='y_root' type='i'/>
<field declared_type='unsigned int' name='state' type='I'/>
<field declared_type='unsigned int' name='keycode' type='I'/>
<field declared_type='int' name='same_screen' type='i'/>
<field declared_type='char*' name='trans_chars' type='[4c]'/>
<field declared_type='int' name='nbytes' type='i'/>
</struct>
<struct name='XKeyPressedEvent' type='{_XKeyPressedEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='root' type='i'/>
<field declared_type='int' name='subwindow' type='i'/>
<field declared_type='int' name='time' type='i'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='x_root' type='i'/>
<field declared_type='int' name='y_root' type='i'/>
<field declared_type='unsigned int' name='state' type='I'/>
<field declared_type='unsigned int' name='keycode' type='I'/>
<field declared_type='int' name='same_screen' type='i'/>
<field declared_type='char*' name='trans_chars' type='[4c]'/>
<field declared_type='int' name='nbytes' type='i'/>
</struct>
<struct name='XKeyReleasedEvent' type='{_XKeyReleasedEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='root' type='i'/>
<field declared_type='int' name='subwindow' type='i'/>
<field declared_type='int' name='time' type='i'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='x_root' type='i'/>
<field declared_type='int' name='y_root' type='i'/>
<field declared_type='unsigned int' name='state' type='I'/>
<field declared_type='unsigned int' name='keycode' type='I'/>
<field declared_type='int' name='same_screen' type='i'/>
<field declared_type='char*' name='trans_chars' type='[4c]'/>
<field declared_type='int' name='nbytes' type='i'/>
</struct>
<struct name='XKeyboardControl' type='{_XKeyboardControl=&quot;key_click_percent&quot;i&quot;bell_percent&quot;i&quot;bell_pitch&quot;i&quot;bell_duration&quot;i&quot;led&quot;i&quot;led_mode&quot;i&quot;key&quot;i&quot;auto_repeat_mode&quot;i}'>
<field declared_type='int' name='key_click_percent' type='i'/>
<field declared_type='int' name='bell_percent' type='i'/>
<field declared_type='int' name='bell_pitch' type='i'/>
<field declared_type='int' name='bell_duration' type='i'/>
<field declared_type='int' name='led' type='i'/>
<field declared_type='int' name='led_mode' type='i'/>
<field declared_type='int' name='key' type='i'/>
<field declared_type='int' name='auto_repeat_mode' type='i'/>
</struct>
<struct name='XKeyboardState' type='{_XKeyboardState=&quot;key_click_percent&quot;i&quot;bell_percent&quot;i&quot;bell_pitch&quot;I&quot;bell_duration&quot;I&quot;led_mask&quot;L&quot;global_auto_repeat&quot;i&quot;auto_repeats&quot;[32c]}' type64='{_XKeyboardState=&quot;key_click_percent&quot;i&quot;bell_percent&quot;i&quot;bell_pitch&quot;I&quot;bell_duration&quot;I&quot;led_mask&quot;Q&quot;global_auto_repeat&quot;i&quot;auto_repeats&quot;[32c]}'>
<field declared_type='int' name='key_click_percent' type='i'/>
<field declared_type='int' name='bell_percent' type='i'/>
<field declared_type='unsigned int' name='bell_pitch' type='I'/>
<field declared_type='unsigned int' name='bell_duration' type='I'/>
<field declared_type='unsigned long' name='led_mask' type='L' type64='Q'/>
<field declared_type='int' name='global_auto_repeat' type='i'/>
<field declared_type='char*' name='auto_repeats' type='[32c]'/>
</struct>
<struct name='XKeymapEvent' type='{_XKeymapEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='char*' name='key_vector' type='[32c]'/>
</struct>
<struct name='XLeaveWindowEvent' type='{_XLeaveWindowEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='root' type='i'/>
<field declared_type='int' name='subwindow' type='i'/>
<field declared_type='int' name='time' type='i'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='x_root' type='i'/>
<field declared_type='int' name='y_root' type='i'/>
<field declared_type='int' name='mode' type='i'/>
<field declared_type='int' name='detail' type='i'/>
<field declared_type='int' name='same_screen' type='i'/>
<field declared_type='int' name='focus' type='i'/>
<field declared_type='unsigned int' name='state' type='I'/>
</struct>
<struct name='XMapEvent' type='{_XMapEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='event' type='i'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='override_redirect' type='i'/>
</struct>
<struct name='XMapRequestEvent' type='{_XMapRequestEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='parent' type='i'/>
<field declared_type='int' name='window' type='i'/>
</struct>
<struct name='XMappingEvent' type='{_XMappingEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='request' type='i'/>
<field declared_type='int' name='first_keycode' type='i'/>
<field declared_type='int' name='count' type='i'/>
</struct>
<struct name='XModifierKeymap' type='{_XModifierKeymap=}'>
<field declared_type='int' name='max_keypermod' type='i'/>
<field declared_type='int*' name='modifiermap' type='^i'/>
</struct>
<struct name='XMotionEvent' type='{_XMotionEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='root' type='i'/>
<field declared_type='int' name='subwindow' type='i'/>
<field declared_type='int' name='time' type='i'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='x_root' type='i'/>
<field declared_type='int' name='y_root' type='i'/>
<field declared_type='unsigned int' name='state' type='I'/>
<field declared_type='char' name='is_hint' type='c'/>
<field declared_type='int' name='same_screen' type='i'/>
</struct>
<struct name='XNoExposeEvent' type='{_XNoExposeEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='drawable' type='i'/>
<field declared_type='int' name='major_code' type='i'/>
<field declared_type='int' name='minor_code' type='i'/>
</struct>
<struct name='XPixmapFormatValues' type='{_XPixmapFormatValues=&quot;depth&quot;i&quot;bits_per_pixel&quot;i&quot;scanline_pad&quot;i}'>
<field declared_type='int' name='depth' type='i'/>
<field declared_type='int' name='bits_per_pixel' type='i'/>
<field declared_type='int' name='scanline_pad' type='i'/>
</struct>
<struct name='XPoint' type='{_XPoint=&quot;x&quot;s&quot;y&quot;s}'>
<field declared_type='short' name='x' type='s'/>
<field declared_type='short' name='y' type='s'/>
</struct>
<struct name='XPointerMovedEvent' type='{_XPointerMovedEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='root' type='i'/>
<field declared_type='int' name='subwindow' type='i'/>
<field declared_type='int' name='time' type='i'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='x_root' type='i'/>
<field declared_type='int' name='y_root' type='i'/>
<field declared_type='unsigned int' name='state' type='I'/>
<field declared_type='char' name='is_hint' type='c'/>
<field declared_type='int' name='same_screen' type='i'/>
</struct>
<struct name='XPropertyEvent' type='{_XPropertyEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='atom' type='i'/>
<field declared_type='int' name='time' type='i'/>
<field declared_type='int' name='state' type='i'/>
</struct>
<struct name='XRectangle' type='{_XRectangle=&quot;x&quot;s&quot;y&quot;s&quot;width&quot;S&quot;height&quot;S}'>
<field declared_type='short' name='x' type='s'/>
<field declared_type='short' name='y' type='s'/>
<field declared_type='unsigned short' name='width' type='S'/>
<field declared_type='unsigned short' name='height' type='S'/>
</struct>
<struct name='XReparentEvent' type='{_XReparentEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='event' type='i'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='parent' type='i'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='override_redirect' type='i'/>
</struct>
<struct name='XResizeRequestEvent' type='{_XResizeRequestEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='width' type='i'/>
<field declared_type='int' name='height' type='i'/>
</struct>
<struct name='XSegment' type='{_XSegment=&quot;x1&quot;s&quot;y1&quot;s&quot;x2&quot;s&quot;y2&quot;s}'>
<field declared_type='short' name='x1' type='s'/>
<field declared_type='short' name='y1' type='s'/>
<field declared_type='short' name='x2' type='s'/>
<field declared_type='short' name='y2' type='s'/>
</struct>
<struct name='XSelectionClearEvent' type='{_XSelectionClearEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='selection' type='i'/>
<field declared_type='int' name='time' type='i'/>
</struct>
<struct name='XSelectionEvent' type='{_XSelectionEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='requestor' type='i'/>
<field declared_type='int' name='selection' type='i'/>
<field declared_type='int' name='target' type='i'/>
<field declared_type='int' name='property' type='i'/>
<field declared_type='int' name='time' type='i'/>
</struct>
<struct name='XSelectionRequestEvent' type='{_XSelectionRequestEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='owner' type='i'/>
<field declared_type='int' name='requestor' type='i'/>
<field declared_type='int' name='selection' type='i'/>
<field declared_type='int' name='target' type='i'/>
<field declared_type='int' name='property' type='i'/>
<field declared_type='int' name='time' type='i'/>
</struct>
<struct name='XSetWindowAttributes' type='{_XSetWindowAttributes=}'>
<field declared_type='int' name='background_pixmap' type='i'/>
<field declared_type='unsigned long' name='background_pixel' type='L' type64='Q'/>
<field declared_type='int' name='border_pixmap' type='i'/>
<field declared_type='unsigned long' name='border_pixel' type='L' type64='Q'/>
<field declared_type='int' name='bit_gravity' type='i'/>
<field declared_type='int' name='win_gravity' type='i'/>
<field declared_type='int' name='backing_store' type='i'/>
<field declared_type='unsigned long' name='backing_planes' type='L' type64='Q'/>
<field declared_type='unsigned long' name='backing_pixel' type='L' type64='Q'/>
<field declared_type='int' name='save_under' type='i'/>
<field declared_type='long' name='event_mask' type='l' type64='q'/>
<field declared_type='long' name='do_not_propagate_mask' type='l' type64='q'/>
<field declared_type='int' name='override_redirect' type='i'/>
<field declared_type='int' name='colormap' type='i'/>
<field declared_type='int' name='cursor' type='i'/>
</struct>
<struct name='XSizeHints' type='{_XSizeHints=&quot;flags&quot;l&quot;x&quot;i&quot;y&quot;i&quot;width&quot;i&quot;height&quot;i&quot;min_width&quot;i&quot;min_height&quot;i&quot;max_width&quot;i&quot;max_height&quot;i&quot;width_inc&quot;i&quot;height_inc&quot;i&quot;min_aspect&quot;{?=&quot;x&quot;i&quot;y&quot;i}&quot;max_aspect&quot;{?=&quot;x&quot;i&quot;y&quot;i}&quot;base_width&quot;i&quot;base_height&quot;i&quot;win_gravity&quot;i}' type64='{_XSizeHints=&quot;flags&quot;q&quot;x&quot;i&quot;y&quot;i&quot;width&quot;i&quot;height&quot;i&quot;min_width&quot;i&quot;min_height&quot;i&quot;max_width&quot;i&quot;max_height&quot;i&quot;width_inc&quot;i&quot;height_inc&quot;i&quot;min_aspect&quot;{?=&quot;x&quot;i&quot;y&quot;i}&quot;max_aspect&quot;{?=&quot;x&quot;i&quot;y&quot;i}&quot;base_width&quot;i&quot;base_height&quot;i&quot;win_gravity&quot;i}'>
<field declared_type='long' name='flags' type='l' type64='q'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='width' type='i'/>
<field declared_type='int' name='height' type='i'/>
<field declared_type='int' name='min_width' type='i'/>
<field declared_type='int' name='min_height' type='i'/>
<field declared_type='int' name='max_width' type='i'/>
<field declared_type='int' name='max_height' type='i'/>
<field declared_type='int' name='width_inc' type='i'/>
<field declared_type='int' name='height_inc' type='i'/>
<field declared_type='struct (anonymous struct at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Tk.framework/Headers/X11/Xutil.h:60:2)' name='min_aspect' type='{_structanonymousstructatApplicationsXcodeappContentsDeveloperPlatformsMacOSXplatformDeveloperSDKsMacOSX1013sdkSystemLibraryFrameworksTkframeworkHeadersX11Xutilh602=&quot;x&quot;i&quot;y&quot;i}'/>
<field declared_type='struct (anonymous struct at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk/System/Library/Frameworks/Tk.framework/Headers/X11/Xutil.h:60:2)' name='max_aspect' type='{_structanonymousstructatApplicationsXcodeappContentsDeveloperPlatformsMacOSXplatformDeveloperSDKsMacOSX1013sdkSystemLibraryFrameworksTkframeworkHeadersX11Xutilh602=&quot;x&quot;i&quot;y&quot;i}'/>
<field declared_type='int' name='base_width' type='i'/>
<field declared_type='int' name='base_height' type='i'/>
<field declared_type='int' name='win_gravity' type='i'/>
</struct>
<struct name='XStandardColormap' type='{_XStandardColormap=}'>
<field declared_type='int' name='colormap' type='i'/>
<field declared_type='unsigned long' name='red_max' type='L' type64='Q'/>
<field declared_type='unsigned long' name='red_mult' type='L' type64='Q'/>
<field declared_type='unsigned long' name='green_max' type='L' type64='Q'/>
<field declared_type='unsigned long' name='green_mult' type='L' type64='Q'/>
<field declared_type='unsigned long' name='blue_max' type='L' type64='Q'/>
<field declared_type='unsigned long' name='blue_mult' type='L' type64='Q'/>
<field declared_type='unsigned long' name='base_pixel' type='L' type64='Q'/>
<field declared_type='int' name='visualid' type='i'/>
<field declared_type='int' name='killid' type='i'/>
</struct>
<struct name='XTextItem' type='{_XTextItem=}'>
<field declared_type='char*' name='chars' type='*'/>
<field declared_type='int' name='nchars' type='i'/>
<field declared_type='int' name='delta' type='i'/>
<field declared_type='int' name='font' type='i'/>
</struct>
<struct name='XTextItem16' type='{_XTextItem16=}'>
<field declared_type='XChar2b*' name='chars' type='^{_XChar2b=CC}'/>
<field declared_type='int' name='nchars' type='i'/>
<field declared_type='int' name='delta' type='i'/>
<field declared_type='int' name='font' type='i'/>
</struct>
<struct name='XTextProperty' type='{_XTextProperty=}'>
<field declared_type='unsigned char*' name='value' type='*'/>
<field declared_type='int' name='encoding' type='i'/>
<field declared_type='int' name='format' type='i'/>
<field declared_type='unsigned long' name='nitems' type='L' type64='Q'/>
</struct>
<struct name='XTimeCoord' type='{_XTimeCoord=}'>
<field declared_type='int' name='time' type='i'/>
<field declared_type='short' name='x' type='s'/>
<field declared_type='short' name='y' type='s'/>
</struct>
<struct name='XUnmapEvent' type='{_XUnmapEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='event' type='i'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='from_configure' type='i'/>
</struct>
<struct name='XVirtualEvent' type='{_XVirtualEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='Window' name='event' type='?'/>
<field declared_type='Window' name='root' type='?'/>
<field declared_type='Window' name='subwindow' type='?'/>
<field declared_type='int' name='time' type='i'/>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='x_root' type='i'/>
<field declared_type='int' name='y_root' type='i'/>
<field declared_type='unsigned int' name='state' type='I'/>
<field declared_type='Tk_Uid' name='name' type='*'/>
<field declared_type='int' name='same_screen' type='i'/>
<field declared_type='Tcl_Obj*' name='user_data' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</struct>
<struct name='XVisibilityEvent' type='{_XVisibilityEvent=}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='unsigned long' name='serial' type='L' type64='Q'/>
<field declared_type='int' name='send_event' type='i'/>
<field declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<field declared_type='int' name='window' type='i'/>
<field declared_type='int' name='state' type='i'/>
</struct>
<struct name='XVisualInfo' type='{_XVisualInfo=}'>
<field declared_type='Visual*' name='visual' type='^{_Visual=}'/>
<field declared_type='int' name='visualid' type='i'/>
<field declared_type='int' name='screen' type='i'/>
<field declared_type='int' name='depth' type='i'/>
<field declared_type='int' name='class' type='i'/>
<field declared_type='unsigned long' name='red_mask' type='L' type64='Q'/>
<field declared_type='unsigned long' name='green_mask' type='L' type64='Q'/>
<field declared_type='unsigned long' name='blue_mask' type='L' type64='Q'/>
<field declared_type='int' name='colormap_size' type='i'/>
<field declared_type='int' name='bits_per_rgb' type='i'/>
</struct>
<struct name='XWMHints' type='{_XWMHints=}'>
<field declared_type='long' name='flags' type='l' type64='q'/>
<field declared_type='int' name='input' type='i'/>
<field declared_type='int' name='initial_state' type='i'/>
<field declared_type='int' name='icon_pixmap' type='i'/>
<field declared_type='Window' name='icon_window' type='?'/>
<field declared_type='int' name='icon_x' type='i'/>
<field declared_type='int' name='icon_y' type='i'/>
<field declared_type='int' name='icon_mask' type='i'/>
<field declared_type='int' name='window_group' type='i'/>
</struct>
<struct name='XWindowAttributes' type='{_XWindowAttributes=}'>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='width' type='i'/>
<field declared_type='int' name='height' type='i'/>
<field declared_type='int' name='border_width' type='i'/>
<field declared_type='int' name='depth' type='i'/>
<field declared_type='Visual*' name='visual' type='^{_Visual=}'/>
<field declared_type='int' name='root' type='i'/>
<field declared_type='int' name='class' type='i'/>
<field declared_type='int' name='bit_gravity' type='i'/>
<field declared_type='int' name='win_gravity' type='i'/>
<field declared_type='int' name='backing_store' type='i'/>
<field declared_type='unsigned long' name='backing_planes' type='L' type64='Q'/>
<field declared_type='unsigned long' name='backing_pixel' type='L' type64='Q'/>
<field declared_type='int' name='save_under' type='i'/>
<field declared_type='int' name='colormap' type='i'/>
<field declared_type='int' name='map_installed' type='i'/>
<field declared_type='int' name='map_state' type='i'/>
<field declared_type='long' name='all_event_masks' type='l' type64='q'/>
<field declared_type='long' name='your_event_mask' type='l' type64='q'/>
<field declared_type='long' name='do_not_propagate_mask' type='l' type64='q'/>
<field declared_type='int' name='override_redirect' type='i'/>
<field declared_type='Screen*' name='screen' type='^{_Screen=}'/>
</struct>
<struct name='XWindowChanges' type='{_XWindowChanges=}'>
<field declared_type='int' name='x' type='i'/>
<field declared_type='int' name='y' type='i'/>
<field declared_type='int' name='width' type='i'/>
<field declared_type='int' name='height' type='i'/>
<field declared_type='int' name='border_width' type='i'/>
<field declared_type='int' name='sibling' type='i'/>
<field declared_type='int' name='stack_mode' type='i'/>
</struct>
<struct name='XmbTextItem' type='{_XmbTextItem=&quot;chars&quot;*&quot;nchars&quot;i&quot;delta&quot;i&quot;font_set&quot;^{_XFontSet}}'>
<field declared_type='char*' name='chars' type='*'/>
<field declared_type='int' name='nchars' type='i'/>
<field declared_type='int' name='delta' type='i'/>
<field declared_type='XFontSet' name='font_set' type='^{_XFontSet=}'/>
</struct>
<struct name='XwcTextItem' type='{_XwcTextItem=&quot;chars&quot;^i&quot;nchars&quot;i&quot;delta&quot;i&quot;font_set&quot;^{_XFontSet}}'>
<field declared_type='wchar_t*' name='chars' type='^i'/>
<field declared_type='int' name='nchars' type='i'/>
<field declared_type='int' name='delta' type='i'/>
<field declared_type='XFontSet' name='font_set' type='^{_XFontSet=}'/>
</struct>
<cftype name='Region' type='^{_XRegion=}'/>
<cftype name='TkBindInfo' type='^{TkBindInfo_=}'/>
<cftype name='TkColormap' type='^{TkColormap=}'/>
<cftype name='TkGrabEvent' type='^{TkGrabEvent=}'/>
<cftype name='TkRegion' type='^{TkRegion_=}'/>
<cftype name='TkStressedCmap' type='^{TkStressedCmap=}'/>
<cftype name='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
<cftype name='Tk_Canvas' type='^{Tk_Canvas_=}'/>
<cftype name='Tk_Cursor' type='^{Tk_Cursor_=}'/>
<cftype name='Tk_ErrorHandler' type='^{Tk_ErrorHandler_=}'/>
<cftype name='Tk_Font' type='^{Tk_Font_=}'/>
<cftype name='Tk_Image' type='^{Tk_Image__=}'/>
<cftype name='Tk_ImageMaster' type='^{Tk_ImageMaster_=}'/>
<cftype name='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
<cftype name='Tk_PostscriptInfo' type='^{Tk_PostscriptInfo_=}'/>
<cftype name='Tk_Style' type='^{Tk_Style_=}'/>
<cftype name='Tk_StyleEngine' type='^{Tk_StyleEngine_=}'/>
<cftype name='Tk_StyledElement' type='^{Tk_StyledElement_=}'/>
<cftype name='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
<cftype name='Tk_Window' type='^{Tk_Window_=}'/>
<cftype name='TkpCursor' type='^{TkpCursor_=}'/>
<cftype name='Ttk_Element' type='^{Ttk_LayoutNode_=}'/>
<cftype name='Ttk_ElementClass' type='^{Ttk_ElementClass_=}'/>
<cftype name='Ttk_ImageSpec' type='^{TtkImageSpec=}'/>
<cftype name='Ttk_Layout' type='^{Ttk_Layout_=}'/>
<cftype name='Ttk_ResourceCache' type='^{Ttk_ResourceCache_=}'/>
<cftype name='Ttk_Style' type='^{Ttk_Style_=}'/>
<cftype name='Ttk_Theme' type='^{Ttk_Theme_=}'/>
<cftype name='XFontSet' type='^{_XFontSet=}'/>
<cftype name='XIC' type='^{_XIC=}'/>
<cftype name='XIM' type='^{_XIM=}'/>
<constant declared_type='int' name='Tcl_Obj' type='i'/>
<constant declared_type='int' name='TkIntXlibStubs' type='i'/>
<constant declared_type='Ttk_ElementOptionSpec*' name='TtkNullElementOptions' type='^{Ttk_ElementOptionSpec=*ii*}'/>
<constant declared_type='int' name='Ttk_Box' type='i'/>
<constant declared_type='int' name='Ttk_ElementClass' type='i'/>
<constant declared_type='int' name='Ttk_Padding' type='i'/>
<constant declared_type='int' name='Ttk_StateMap' type='i'/>
<constant declared_type='int' name='Ttk_Theme' type='i'/>
<constant declared_type='Tk_SmoothMethod' name='tkBezierSmoothMethod' type='{Tk_SmoothMethod=*^?^?}'/>
<constant declared_type='Tk_ImageType' name='tkBitmapImageType' type='{Tk_ImageType=*^?^?^?^?^?^?^{Tk_ImageType}*}'/>
<constant declared_type='Tcl_ObjType' name='tkBitmapObjType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='Tcl_ObjType' name='tkBorderObjType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='Tcl_ObjType' name='tkColorObjType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='Tcl_ObjType' name='tkCursorObjType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='TkDisplay*' name='tkDisplayList' type='^{TkDisplay=}'/>
<constant declared_type='Tcl_ObjType' name='tkFontObjType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='Tk_PhotoImageFormat' name='tkImgFmtGIF' type='{Tk_PhotoImageFormat=*^?^?^?^?^?^?^{Tk_PhotoImageFormat}}'/>
<constant declared_type='Tk_PhotoImageFormat' name='tkImgFmtPPM' type='{Tk_PhotoImageFormat=*^?^?^?^?^?^?^{Tk_PhotoImageFormat}}'/>
<constant declared_type='TkIntPlatStubs*' name='tkIntPlatStubsPtr' type='^{TkIntPlatStubs=}'/>
<constant declared_type='TkIntStubs*' name='tkIntStubsPtr' type='^{TkIntStubs=}'/>
<constant declared_type='int*' name='tkIntXlibStubsPtr' type='^i'/>
<constant declared_type='TkMacOSXEmbedHandler*' name='tkMacOSXEmbedHandler' type='^{_TkMacOSXEmbedHandler=^?^?^?^?^?}'/>
<constant declared_type='TkMainInfo*' name='tkMainWindowList' type='^{TkMainInfo=}'/>
<constant declared_type='Tcl_ObjType' name='tkOptionObjType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='Tk_ImageType' name='tkPhotoImageType' type='{Tk_ImageType=*^?^?^?^?^?^?^{Tk_ImageType}*}'/>
<constant declared_type='TkPlatStubs*' name='tkPlatStubsPtr' type='^{TkPlatStubs=i^{TkPlatStubHooks}}'/>
<constant declared_type='Tcl_HashTable' name='tkPredefBitmapTable' type='{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<constant declared_type='Tcl_ObjType' name='tkStateKeyObjType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='TkStubs*' name='tkStubsPtr' type='^{TkStubs=}'/>
<constant declared_type='Tcl_ObjType' name='tkTextIndexType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='Ttk_ElementSpec' name='ttkNullElementSpec' type='{Ttk_ElementSpec=iI^{Ttk_ElementOptionSpec}^?^?}' type64='{Ttk_ElementSpec=iQ^{Ttk_ElementOptionSpec}^?^?}'/>
<constant const='true' declared_type='TtkStubs*' name='ttkStubsPtr' type='^{TtkStubs=}'/>
<constant declared_type='unsigned char*' name='xBitReverseTable' type='[256C]'/>
<string_constant name='ACTIVE_BG' value='systemButtonFacePressed'/>
<string_constant name='ACTIVE_FG' value='systemPushButtonPressedText'/>
<string_constant name='BLACK' value='Black'/>
<string_constant name='DEFAULT_BACKGROUND' value='#d9d9d9'/>
<string_constant name='DEFAULT_FONT' value='TkDefaultFont'/>
<string_constant name='DEFAULT_FOREGROUND' value='black'/>
<string_constant name='DEF_BUTTON_ACTIVE_BG_COLOR' value='systemButtonFacePressed'/>
<string_constant name='DEF_BUTTON_ACTIVE_BG_MONO' value='Black'/>
<string_constant name='DEF_BUTTON_ACTIVE_FG_COLOR' value='systemPushButtonPressedText'/>
<string_constant name='DEF_BUTTON_ACTIVE_FG_MONO' value='White'/>
<string_constant name='DEF_BUTTON_ANCHOR' value='center'/>
<string_constant name='DEF_BUTTON_BG_COLOR' value='White'/>
<string_constant name='DEF_BUTTON_BG_MONO' value='White'/>
<string_constant name='DEF_BUTTON_BITMAP' value=''/>
<string_constant name='DEF_BUTTON_BORDER_WIDTH' value='2'/>
<string_constant name='DEF_BUTTON_COMMAND' value=''/>
<string_constant name='DEF_BUTTON_COMPOUND' value='none'/>
<string_constant name='DEF_BUTTON_CURSOR' value=''/>
<string_constant name='DEF_BUTTON_DEFAULT' value='disabled'/>
<string_constant name='DEF_BUTTON_DISABLED_FG_COLOR' value='#a3a3a3'/>
<string_constant name='DEF_BUTTON_DISABLED_FG_MONO' value=''/>
<string_constant name='DEF_BUTTON_FG' value='systemButtonText'/>
<string_constant name='DEF_BUTTON_FONT' value='TkDefaultFont'/>
<string_constant name='DEF_BUTTON_HEIGHT' value='0'/>
<string_constant name='DEF_BUTTON_HIGHLIGHT' value='systemButtonFrame'/>
<string_constant name='DEF_BUTTON_HIGHLIGHT_BG_COLOR' value='White'/>
<string_constant name='DEF_BUTTON_HIGHLIGHT_BG_MONO' value='White'/>
<string_constant name='DEF_BUTTON_HIGHLIGHT_WIDTH' value='4'/>
<string_constant name='DEF_BUTTON_HIGHLIGHT_WIDTH_NOCM' value='1'/>
<string_constant name='DEF_BUTTON_INDICATOR' value='1'/>
<string_constant name='DEF_BUTTON_JUSTIFY' value='center'/>
<string_constant name='DEF_BUTTON_OFF_VALUE' value='0'/>
<string_constant name='DEF_BUTTON_ON_VALUE' value='1'/>
<string_constant name='DEF_BUTTON_OVER_RELIEF' value=''/>
<string_constant name='DEF_BUTTON_PADX' value='12'/>
<string_constant name='DEF_BUTTON_PADX_NOCM' value='1'/>
<string_constant name='DEF_BUTTON_PADY' value='3'/>
<string_constant name='DEF_BUTTON_PADY_NOCM' value='1'/>
<string_constant name='DEF_BUTTON_RELIEF' value='flat'/>
<string_constant name='DEF_BUTTON_REPEAT_DELAY' value='0'/>
<string_constant name='DEF_BUTTON_REPEAT_INTERVAL' value='0'/>
<string_constant name='DEF_BUTTON_SELECT_COLOR' value='#b03060'/>
<string_constant name='DEF_BUTTON_SELECT_MONO' value='Black'/>
<string_constant name='DEF_BUTTON_STATE' value='normal'/>
<string_constant name='DEF_BUTTON_TEXT' value=''/>
<string_constant name='DEF_BUTTON_TEXT_VARIABLE' value=''/>
<string_constant name='DEF_BUTTON_TRISTATE_VALUE' value=''/>
<string_constant name='DEF_BUTTON_UNDERLINE' value='-1'/>
<string_constant name='DEF_BUTTON_VALUE' value=''/>
<string_constant name='DEF_BUTTON_WIDTH' value='0'/>
<string_constant name='DEF_BUTTON_WRAP_LENGTH' value='0'/>
<string_constant name='DEF_CANVAS_BG_COLOR' value='systemWindowBody'/>
<string_constant name='DEF_CANVAS_BG_MONO' value='White'/>
<string_constant name='DEF_CANVAS_BORDER_WIDTH' value='0'/>
<string_constant name='DEF_CANVAS_CLOSE_ENOUGH' value='1'/>
<string_constant name='DEF_CANVAS_CONFINE' value='1'/>
<string_constant name='DEF_CANVAS_CURSOR' value=''/>
<string_constant name='DEF_CANVAS_HEIGHT' value='7c'/>
<string_constant name='DEF_CANVAS_HIGHLIGHT' value='Black'/>
<string_constant name='DEF_CANVAS_HIGHLIGHT_BG' value='systemWindowBody'/>
<string_constant name='DEF_CANVAS_HIGHLIGHT_WIDTH' value='3'/>
<string_constant name='DEF_CANVAS_INSERT_BD_COLOR' value='0'/>
<string_constant name='DEF_CANVAS_INSERT_BD_MONO' value='0'/>
<string_constant name='DEF_CANVAS_INSERT_BG' value='Black'/>
<string_constant name='DEF_CANVAS_INSERT_OFF_TIME' value='300'/>
<string_constant name='DEF_CANVAS_INSERT_ON_TIME' value='600'/>
<string_constant name='DEF_CANVAS_INSERT_WIDTH' value='2'/>
<string_constant name='DEF_CANVAS_RELIEF' value='flat'/>
<string_constant name='DEF_CANVAS_SCROLL_REGION' value=''/>
<string_constant name='DEF_CANVAS_SELECT_BD_COLOR' value='1'/>
<string_constant name='DEF_CANVAS_SELECT_BD_MONO' value='0'/>
<string_constant name='DEF_CANVAS_SELECT_COLOR' value='systemHighlight'/>
<string_constant name='DEF_CANVAS_SELECT_FG_MONO' value='White'/>
<string_constant name='DEF_CANVAS_SELECT_MONO' value='Black'/>
<string_constant name='DEF_CANVAS_WIDTH' value='10c'/>
<string_constant name='DEF_CANVAS_X_SCROLL_CMD' value=''/>
<string_constant name='DEF_CANVAS_X_SCROLL_INCREMENT' value='0'/>
<string_constant name='DEF_CANVAS_Y_SCROLL_CMD' value=''/>
<string_constant name='DEF_CANVAS_Y_SCROLL_INCREMENT' value='0'/>
<string_constant name='DEF_CANVTEXT_FONT' value='TkDefaultFont'/>
<string_constant name='DEF_CHECKBUTTON_VARIABLE' value=''/>
<string_constant name='DEF_CHKRAD_ACTIVE_FG_COLOR' value='systemPushButtonPressedText'/>
<string_constant name='DEF_CHKRAD_FG' value='systemButtonText'/>
<string_constant name='DEF_ENTRY_BG_COLOR' value='systemWindowBody'/>
<string_constant name='DEF_ENTRY_BG_MONO' value='White'/>
<string_constant name='DEF_ENTRY_BORDER_WIDTH' value='2'/>
<string_constant name='DEF_ENTRY_CURSOR' value='xterm'/>
<string_constant name='DEF_ENTRY_DISABLED_BG_COLOR' value='systemWindowBody'/>
<string_constant name='DEF_ENTRY_DISABLED_BG_MONO' value='White'/>
<string_constant name='DEF_ENTRY_DISABLED_FG' value='#a3a3a3'/>
<string_constant name='DEF_ENTRY_EXPORT_SELECTION' value='1'/>
<string_constant name='DEF_ENTRY_FG' value='Black'/>
<string_constant name='DEF_ENTRY_FONT' value='TkTextFont'/>
<string_constant name='DEF_ENTRY_HIGHLIGHT' value='Black'/>
<string_constant name='DEF_ENTRY_HIGHLIGHT_BG' value='systemWindowBody'/>
<string_constant name='DEF_ENTRY_HIGHLIGHT_WIDTH' value='3'/>
<string_constant name='DEF_ENTRY_INSERT_BD_COLOR' value='0'/>
<string_constant name='DEF_ENTRY_INSERT_BD_MONO' value='0'/>
<string_constant name='DEF_ENTRY_INSERT_BG' value='Black'/>
<string_constant name='DEF_ENTRY_INSERT_OFF_TIME' value='300'/>
<string_constant name='DEF_ENTRY_INSERT_ON_TIME' value='600'/>
<string_constant name='DEF_ENTRY_INSERT_WIDTH' value='1'/>
<string_constant name='DEF_ENTRY_JUSTIFY' value='left'/>
<string_constant name='DEF_ENTRY_READONLY_BG_COLOR' value='systemWindowBody'/>
<string_constant name='DEF_ENTRY_READONLY_BG_MONO' value='White'/>
<string_constant name='DEF_ENTRY_RELIEF' value='sunken'/>
<string_constant name='DEF_ENTRY_SCROLL_COMMAND' value=''/>
<string_constant name='DEF_ENTRY_SELECT_BD_COLOR' value='1'/>
<string_constant name='DEF_ENTRY_SELECT_BD_MONO' value='0'/>
<string_constant name='DEF_ENTRY_SELECT_COLOR' value='systemHighlight'/>
<string_constant name='DEF_ENTRY_SELECT_FG_MONO' value='White'/>
<string_constant name='DEF_ENTRY_SELECT_MONO' value='Black'/>
<string_constant name='DEF_ENTRY_STATE' value='normal'/>
<string_constant name='DEF_ENTRY_TEXT_VARIABLE' value=''/>
<string_constant name='DEF_ENTRY_WIDTH' value='20'/>
<string_constant name='DEF_FRAME_BG_COLOR' value='systemWindowBody'/>
<string_constant name='DEF_FRAME_BG_MONO' value='White'/>
<string_constant name='DEF_FRAME_BORDER_WIDTH' value='0'/>
<string_constant name='DEF_FRAME_CLASS' value='Frame'/>
<string_constant name='DEF_FRAME_COLORMAP' value=''/>
<string_constant name='DEF_FRAME_CONTAINER' value='0'/>
<string_constant name='DEF_FRAME_CURSOR' value=''/>
<string_constant name='DEF_FRAME_HEIGHT' value='0'/>
<string_constant name='DEF_FRAME_HIGHLIGHT' value='Black'/>
<string_constant name='DEF_FRAME_HIGHLIGHT_BG' value='systemWindowBody'/>
<string_constant name='DEF_FRAME_HIGHLIGHT_WIDTH' value='0'/>
<string_constant name='DEF_FRAME_PADX' value='0'/>
<string_constant name='DEF_FRAME_PADY' value='0'/>
<string_constant name='DEF_FRAME_RELIEF' value='flat'/>
<string_constant name='DEF_FRAME_TAKE_FOCUS' value='0'/>
<string_constant name='DEF_FRAME_VISUAL' value=''/>
<string_constant name='DEF_FRAME_WIDTH' value='0'/>
<string_constant name='DEF_LABCHKRAD_PADX' value='1'/>
<string_constant name='DEF_LABCHKRAD_PADY' value='1'/>
<string_constant name='DEF_LABCHKRAD_RELIEF' value='flat'/>
<string_constant name='DEF_LABELFRAME_BORDER_WIDTH' value='2'/>
<string_constant name='DEF_LABELFRAME_CLASS' value='Labelframe'/>
<string_constant name='DEF_LABELFRAME_FG' value='systemButtonText'/>
<string_constant name='DEF_LABELFRAME_FONT' value='TkDefaultFont'/>
<string_constant name='DEF_LABELFRAME_LABELANCHOR' value='nw'/>
<string_constant name='DEF_LABELFRAME_RELIEF' value='groove'/>
<string_constant name='DEF_LABELFRAME_TEXT' value=''/>
<string_constant name='DEF_LABEL_HIGHLIGHT_WIDTH' value='0'/>
<string_constant name='DEF_LABEL_TAKE_FOCUS' value='0'/>
<string_constant name='DEF_LISTBOX_ACTIVE_STYLE' value='dotbox'/>
<string_constant name='DEF_LISTBOX_BG_COLOR' value='White'/>
<string_constant name='DEF_LISTBOX_BG_MONO' value='White'/>
<string_constant name='DEF_LISTBOX_BORDER_WIDTH' value='1'/>
<string_constant name='DEF_LISTBOX_CURSOR' value=''/>
<string_constant name='DEF_LISTBOX_DISABLED_FG' value='#a3a3a3'/>
<string_constant name='DEF_LISTBOX_EXPORT_SELECTION' value='1'/>
<string_constant name='DEF_LISTBOX_FG' value='Black'/>
<string_constant name='DEF_LISTBOX_FONT' value='TkTextFont'/>
<string_constant name='DEF_LISTBOX_HEIGHT' value='10'/>
<string_constant name='DEF_LISTBOX_HIGHLIGHT' value='Black'/>
<string_constant name='DEF_LISTBOX_HIGHLIGHT_BG' value='systemWindowBody'/>
<string_constant name='DEF_LISTBOX_HIGHLIGHT_WIDTH' value='0'/>
<string_constant name='DEF_LISTBOX_LIST_VARIABLE' value=''/>
<string_constant name='DEF_LISTBOX_RELIEF' value='solid'/>
<string_constant name='DEF_LISTBOX_SCROLL_COMMAND' value=''/>
<string_constant name='DEF_LISTBOX_SELECT_BD' value='0'/>
<string_constant name='DEF_LISTBOX_SELECT_COLOR' value='systemHighlight'/>
<string_constant name='DEF_LISTBOX_SELECT_FG_MONO' value='White'/>
<string_constant name='DEF_LISTBOX_SELECT_MODE' value='browse'/>
<string_constant name='DEF_LISTBOX_SELECT_MONO' value='Black'/>
<string_constant name='DEF_LISTBOX_SET_GRID' value='0'/>
<string_constant name='DEF_LISTBOX_STATE' value='normal'/>
<string_constant name='DEF_LISTBOX_WIDTH' value='20'/>
<string_constant name='DEF_MENUBUTTON_ACTIVE_BG_COLOR' value='systemButtonFacePressed'/>
<string_constant name='DEF_MENUBUTTON_ACTIVE_BG_MONO' value='Black'/>
<string_constant name='DEF_MENUBUTTON_ACTIVE_FG_COLOR' value='systemPushButtonPressedText'/>
<string_constant name='DEF_MENUBUTTON_ACTIVE_FG_MONO' value='White'/>
<string_constant name='DEF_MENUBUTTON_ANCHOR' value='center'/>
<string_constant name='DEF_MENUBUTTON_BG_COLOR' value='systemWindowBody'/>
<string_constant name='DEF_MENUBUTTON_BG_MONO' value='White'/>
<string_constant name='DEF_MENUBUTTON_BITMAP' value=''/>
<string_constant name='DEF_MENUBUTTON_BORDER_WIDTH' value='2'/>
<string_constant name='DEF_MENUBUTTON_CURSOR' value=''/>
<string_constant name='DEF_MENUBUTTON_DIRECTION' value='below'/>
<string_constant name='DEF_MENUBUTTON_DISABLED_FG_COLOR' value='#a3a3a3'/>
<string_constant name='DEF_MENUBUTTON_DISABLED_FG_MONO' value=''/>
<string_constant name='DEF_MENUBUTTON_FG' value='Black'/>
<string_constant name='DEF_MENUBUTTON_FONT' value='TkDefaultFont'/>
<string_constant name='DEF_MENUBUTTON_HEIGHT' value='0'/>
<string_constant name='DEF_MENUBUTTON_HIGHLIGHT' value='Black'/>
<string_constant name='DEF_MENUBUTTON_HIGHLIGHT_BG_COLOR' value='systemWindowBody'/>
<string_constant name='DEF_MENUBUTTON_HIGHLIGHT_BG_MONO' value='White'/>
<string_constant name='DEF_MENUBUTTON_HIGHLIGHT_WIDTH' value='0'/>
<string_constant name='DEF_MENUBUTTON_INDICATOR' value='1'/>
<string_constant name='DEF_MENUBUTTON_JUSTIFY' value='left'/>
<string_constant name='DEF_MENUBUTTON_MENU' value=''/>
<string_constant name='DEF_MENUBUTTON_PADX' value='4'/>
<string_constant name='DEF_MENUBUTTON_PADY' value='3'/>
<string_constant name='DEF_MENUBUTTON_RELIEF' value='flat'/>
<string_constant name='DEF_MENUBUTTON_STATE' value='normal'/>
<string_constant name='DEF_MENUBUTTON_TAKE_FOCUS' value='0'/>
<string_constant name='DEF_MENUBUTTON_TEXT' value=''/>
<string_constant name='DEF_MENUBUTTON_TEXT_VARIABLE' value=''/>
<string_constant name='DEF_MENUBUTTON_UNDERLINE' value='-1'/>
<string_constant name='DEF_MENUBUTTON_WIDTH' value='0'/>
<string_constant name='DEF_MENUBUTTON_WRAP_LENGTH' value='0'/>
<string_constant name='DEF_MENU_ACTIVE_BG_COLOR' value='systemMenuActive'/>
<string_constant name='DEF_MENU_ACTIVE_BG_MONO' value='Black'/>
<string_constant name='DEF_MENU_ACTIVE_BORDER_WIDTH' value='0'/>
<string_constant name='DEF_MENU_ACTIVE_FG_COLOR' value='systemMenuActiveText'/>
<string_constant name='DEF_MENU_ACTIVE_FG_MONO' value='White'/>
<string_constant name='DEF_MENU_BG_COLOR' value='systemMenu'/>
<string_constant name='DEF_MENU_BG_MONO' value='White'/>
<string_constant name='DEF_MENU_BORDER_WIDTH' value='0'/>
<string_constant name='DEF_MENU_CURSOR' value='arrow'/>
<string_constant name='DEF_MENU_DISABLED_FG_COLOR' value='systemMenuDisabled'/>
<string_constant name='DEF_MENU_DISABLED_FG_MONO' value=''/>
<string_constant name='DEF_MENU_ENTRY_COLUMN_BREAK' value='0'/>
<string_constant name='DEF_MENU_ENTRY_COMPOUND' value='none'/>
<string_constant name='DEF_MENU_ENTRY_HIDE_MARGIN' value='0'/>
<string_constant name='DEF_MENU_ENTRY_INDICATOR' value='1'/>
<string_constant name='DEF_MENU_ENTRY_OFF_VALUE' value='0'/>
<string_constant name='DEF_MENU_ENTRY_ON_VALUE' value='1'/>
<string_constant name='DEF_MENU_ENTRY_RADIO_VARIABLE' value='selectedButton'/>
<string_constant name='DEF_MENU_ENTRY_STATE' value='normal'/>
<string_constant name='DEF_MENU_ENTRY_UNDERLINE' value='-1'/>
<string_constant name='DEF_MENU_FG' value='systemMenuText'/>
<string_constant name='DEF_MENU_FONT' value='menu'/>
<string_constant name='DEF_MENU_POST_COMMAND' value=''/>
<string_constant name='DEF_MENU_RELIEF' value='flat'/>
<string_constant name='DEF_MENU_SELECT_COLOR' value='systemMenuActive'/>
<string_constant name='DEF_MENU_SELECT_MONO' value='Black'/>
<string_constant name='DEF_MENU_TAKE_FOCUS' value='0'/>
<string_constant name='DEF_MENU_TEAROFF' value='0'/>
<string_constant name='DEF_MENU_TITLE' value=''/>
<string_constant name='DEF_MENU_TYPE' value='normal'/>
<string_constant name='DEF_MESSAGE_ANCHOR' value='center'/>
<string_constant name='DEF_MESSAGE_ASPECT' value='150'/>
<string_constant name='DEF_MESSAGE_BG_COLOR' value='systemWindowBody'/>
<string_constant name='DEF_MESSAGE_BG_MONO' value='White'/>
<string_constant name='DEF_MESSAGE_BORDER_WIDTH' value='1'/>
<string_constant name='DEF_MESSAGE_CURSOR' value=''/>
<string_constant name='DEF_MESSAGE_FG' value='Black'/>
<string_constant name='DEF_MESSAGE_FONT' value='TkDefaultFont'/>
<string_constant name='DEF_MESSAGE_HIGHLIGHT' value='Black'/>
<string_constant name='DEF_MESSAGE_HIGHLIGHT_BG' value='systemWindowBody'/>
<string_constant name='DEF_MESSAGE_HIGHLIGHT_WIDTH' value='0'/>
<string_constant name='DEF_MESSAGE_JUSTIFY' value='left'/>
<string_constant name='DEF_MESSAGE_PADX' value='-1'/>
<string_constant name='DEF_MESSAGE_PADY' value='-1'/>
<string_constant name='DEF_MESSAGE_RELIEF' value='flat'/>
<string_constant name='DEF_MESSAGE_TAKE_FOCUS' value='0'/>
<string_constant name='DEF_MESSAGE_TEXT' value=''/>
<string_constant name='DEF_MESSAGE_TEXT_VARIABLE' value=''/>
<string_constant name='DEF_MESSAGE_WIDTH' value='0'/>
<string_constant name='DEF_PANEDWINDOW_BG_COLOR' value='systemWindowBody'/>
<string_constant name='DEF_PANEDWINDOW_BG_MONO' value='White'/>
<string_constant name='DEF_PANEDWINDOW_BORDERWIDTH' value='1'/>
<string_constant name='DEF_PANEDWINDOW_CURSOR' value=''/>
<string_constant name='DEF_PANEDWINDOW_HANDLEPAD' value='8'/>
<string_constant name='DEF_PANEDWINDOW_HANDLESIZE' value='8'/>
<string_constant name='DEF_PANEDWINDOW_HEIGHT' value=''/>
<string_constant name='DEF_PANEDWINDOW_OPAQUERESIZE' value='1'/>
<string_constant name='DEF_PANEDWINDOW_ORIENT' value='horizontal'/>
<string_constant name='DEF_PANEDWINDOW_PANE_AFTER' value=''/>
<string_constant name='DEF_PANEDWINDOW_PANE_BEFORE' value=''/>
<string_constant name='DEF_PANEDWINDOW_PANE_HEIGHT' value=''/>
<string_constant name='DEF_PANEDWINDOW_PANE_HIDE' value='0'/>
<string_constant name='DEF_PANEDWINDOW_PANE_MINSIZE' value='0'/>
<string_constant name='DEF_PANEDWINDOW_PANE_PADX' value='0'/>
<string_constant name='DEF_PANEDWINDOW_PANE_PADY' value='0'/>
<string_constant name='DEF_PANEDWINDOW_PANE_STICKY' value='nsew'/>
<string_constant name='DEF_PANEDWINDOW_PANE_STRETCH' value='last'/>
<string_constant name='DEF_PANEDWINDOW_PANE_WIDTH' value=''/>
<string_constant name='DEF_PANEDWINDOW_RELIEF' value='flat'/>
<string_constant name='DEF_PANEDWINDOW_SASHCURSOR' value=''/>
<string_constant name='DEF_PANEDWINDOW_SASHPAD' value='0'/>
<string_constant name='DEF_PANEDWINDOW_SASHRELIEF' value='flat'/>
<string_constant name='DEF_PANEDWINDOW_SASHWIDTH' value='3'/>
<string_constant name='DEF_PANEDWINDOW_SHOWHANDLE' value='0'/>
<string_constant name='DEF_PANEDWINDOW_WIDTH' value=''/>
<string_constant name='DEF_RADIOBUTTON_VARIABLE' value='selectedButton'/>
<string_constant name='DEF_SCALE_ACTIVE_BG_COLOR' value='systemButtonFacePressed'/>
<string_constant name='DEF_SCALE_ACTIVE_BG_MONO' value='Black'/>
<string_constant name='DEF_SCALE_BG_COLOR' value='systemWindowBody'/>
<string_constant name='DEF_SCALE_BG_MONO' value='White'/>
<string_constant name='DEF_SCALE_BIG_INCREMENT' value='0'/>
<string_constant name='DEF_SCALE_BORDER_WIDTH' value='1'/>
<string_constant name='DEF_SCALE_COMMAND' value=''/>
<string_constant name='DEF_SCALE_CURSOR' value=''/>
<string_constant name='DEF_SCALE_DIGITS' value='0'/>
<string_constant name='DEF_SCALE_FG_COLOR' value='Black'/>
<string_constant name='DEF_SCALE_FG_MONO' value='Black'/>
<string_constant name='DEF_SCALE_FONT' value='TkDefaultFont'/>
<string_constant name='DEF_SCALE_FROM' value='0'/>
<string_constant name='DEF_SCALE_HIGHLIGHT' value='Black'/>
<string_constant name='DEF_SCALE_HIGHLIGHT_BG_COLOR' value='systemWindowBody'/>
<string_constant name='DEF_SCALE_HIGHLIGHT_BG_MONO' value='White'/>
<string_constant name='DEF_SCALE_HIGHLIGHT_WIDTH' value='0'/>
<string_constant name='DEF_SCALE_LABEL' value=''/>
<string_constant name='DEF_SCALE_LENGTH' value='100'/>
<string_constant name='DEF_SCALE_ORIENT' value='vertical'/>
<string_constant name='DEF_SCALE_RELIEF' value='flat'/>
<string_constant name='DEF_SCALE_REPEAT_DELAY' value='300'/>
<string_constant name='DEF_SCALE_REPEAT_INTERVAL' value='100'/>
<string_constant name='DEF_SCALE_RESOLUTION' value='1'/>
<string_constant name='DEF_SCALE_SHOW_VALUE' value='1'/>
<string_constant name='DEF_SCALE_SLIDER_LENGTH' value='30'/>
<string_constant name='DEF_SCALE_SLIDER_RELIEF' value='raised'/>
<string_constant name='DEF_SCALE_STATE' value='normal'/>
<string_constant name='DEF_SCALE_TICK_INTERVAL' value='0'/>
<string_constant name='DEF_SCALE_TO' value='100'/>
<string_constant name='DEF_SCALE_TROUGH_COLOR' value='#c3c3c3'/>
<string_constant name='DEF_SCALE_TROUGH_MONO' value='White'/>
<string_constant name='DEF_SCALE_VARIABLE' value=''/>
<string_constant name='DEF_SCALE_WIDTH' value='15'/>
<string_constant name='DEF_SCROLLBAR_ACTIVE_BG_COLOR' value='systemButtonFacePressed'/>
<string_constant name='DEF_SCROLLBAR_ACTIVE_BG_MONO' value='Black'/>
<string_constant name='DEF_SCROLLBAR_ACTIVE_RELIEF' value='raised'/>
<string_constant name='DEF_SCROLLBAR_BG_COLOR' value='systemWindowBody'/>
<string_constant name='DEF_SCROLLBAR_BG_MONO' value='White'/>
<string_constant name='DEF_SCROLLBAR_BORDER_WIDTH' value='0'/>
<string_constant name='DEF_SCROLLBAR_COMMAND' value=''/>
<string_constant name='DEF_SCROLLBAR_CURSOR' value=''/>
<string_constant name='DEF_SCROLLBAR_EL_BORDER_WIDTH' value='-1'/>
<string_constant name='DEF_SCROLLBAR_HIGHLIGHT' value='Black'/>
<string_constant name='DEF_SCROLLBAR_HIGHLIGHT_BG' value='systemWindowBody'/>
<string_constant name='DEF_SCROLLBAR_HIGHLIGHT_WIDTH' value='0'/>
<string_constant name='DEF_SCROLLBAR_JUMP' value='0'/>
<string_constant name='DEF_SCROLLBAR_ORIENT' value='vertical'/>
<string_constant name='DEF_SCROLLBAR_RELIEF' value='flat'/>
<string_constant name='DEF_SCROLLBAR_REPEAT_DELAY' value='300'/>
<string_constant name='DEF_SCROLLBAR_REPEAT_INTERVAL' value='100'/>
<string_constant name='DEF_SCROLLBAR_TROUGH_COLOR' value='#c3c3c3'/>
<string_constant name='DEF_SCROLLBAR_TROUGH_MONO' value='White'/>
<string_constant name='DEF_SCROLLBAR_WIDTH' value='15'/>
<string_constant name='DEF_TEXT_AUTO_SEPARATORS' value='1'/>
<string_constant name='DEF_TEXT_BG_COLOR' value='systemWindowBody'/>
<string_constant name='DEF_TEXT_BG_MONO' value='White'/>
<string_constant name='DEF_TEXT_BLOCK_CURSOR' value='0'/>
<string_constant name='DEF_TEXT_BORDER_WIDTH' value='0'/>
<string_constant name='DEF_TEXT_CURSOR' value='xterm'/>
<string_constant name='DEF_TEXT_EXPORT_SELECTION' value='1'/>
<string_constant name='DEF_TEXT_FG' value='Black'/>
<string_constant name='DEF_TEXT_FONT' value='TkFixedFont'/>
<string_constant name='DEF_TEXT_HEIGHT' value='24'/>
<string_constant name='DEF_TEXT_HIGHLIGHT' value='Black'/>
<string_constant name='DEF_TEXT_HIGHLIGHT_BG' value='systemWindowBody'/>
<string_constant name='DEF_TEXT_HIGHLIGHT_WIDTH' value='3'/>
<string_constant name='DEF_TEXT_INACTIVE_SELECT_COLOR' value='systemHighlightSecondary'/>
<string_constant name='DEF_TEXT_INSERT_BD_COLOR' value='0'/>
<string_constant name='DEF_TEXT_INSERT_BD_MONO' value='0'/>
<string_constant name='DEF_TEXT_INSERT_BG' value='Black'/>
<string_constant name='DEF_TEXT_INSERT_OFF_TIME' value='300'/>
<string_constant name='DEF_TEXT_INSERT_ON_TIME' value='600'/>
<string_constant name='DEF_TEXT_INSERT_WIDTH' value='1'/>
<string_constant name='DEF_TEXT_MAX_UNDO' value='0'/>
<string_constant name='DEF_TEXT_PADX' value='1'/>
<string_constant name='DEF_TEXT_PADY' value='1'/>
<string_constant name='DEF_TEXT_RELIEF' value='flat'/>
<string_constant name='DEF_TEXT_SELECT_BD_COLOR' value='1'/>
<string_constant name='DEF_TEXT_SELECT_BD_MONO' value='0'/>
<string_constant name='DEF_TEXT_SELECT_COLOR' value='systemHighlight'/>
<string_constant name='DEF_TEXT_SELECT_FG_MONO' value='White'/>
<string_constant name='DEF_TEXT_SELECT_MONO' value='Black'/>
<string_constant name='DEF_TEXT_SELECT_RELIEF' value='flat'/>
<string_constant name='DEF_TEXT_SET_GRID' value='0'/>
<string_constant name='DEF_TEXT_SPACING1' value='0'/>
<string_constant name='DEF_TEXT_SPACING2' value='0'/>
<string_constant name='DEF_TEXT_SPACING3' value='0'/>
<string_constant name='DEF_TEXT_STATE' value='normal'/>
<string_constant name='DEF_TEXT_TABS' value=''/>
<string_constant name='DEF_TEXT_TABSTYLE' value='tabular'/>
<string_constant name='DEF_TEXT_UNDO' value='0'/>
<string_constant name='DEF_TEXT_WIDTH' value='80'/>
<string_constant name='DEF_TEXT_WRAP' value='char'/>
<string_constant name='DEF_TEXT_XSCROLL_COMMAND' value=''/>
<string_constant name='DEF_TEXT_YSCROLL_COMMAND' value=''/>
<string_constant name='DEF_TOPLEVEL_CLASS' value='Toplevel'/>
<string_constant name='DEF_TOPLEVEL_MENU' value=''/>
<string_constant name='DEF_TOPLEVEL_SCREEN' value=''/>
<string_constant name='DEF_TOPLEVEL_USE' value=''/>
<string_constant name='DISABLED' value='#a3a3a3'/>
<string_constant name='INACTIVE_SELECT_BG' value='systemHighlightSecondary'/>
<string_constant name='INDICATOR' value='#b03060'/>
<string_constant name='NORMAL_BG' value='systemWindowBody'/>
<string_constant name='SELECT_BG' value='systemHighlight'/>
<string_constant name='TK_PATCH_LEVEL' value='8.5.9'/>
<string_constant name='TK_VERSION' value='8.5'/>
<string_constant name='TROUGH' value='#c3c3c3'/>
<string_constant name='TTK_PATCH_LEVEL' value='8.5.9'/>
<string_constant name='TTK_VERSION' value='8.5'/>
<string_constant name='WHITE' value='White'/>
<string_constant name='XNArea' value='area'/>
<string_constant name='XNAreaNeeded' value='areaNeeded'/>
<string_constant name='XNBackground' value='background'/>
<string_constant name='XNBackgroundPixmap' value='backgroundPixmap'/>
<string_constant name='XNClientWindow' value='clientWindow'/>
<string_constant name='XNColormap' value='colorMap'/>
<string_constant name='XNCursor' value='cursor'/>
<string_constant name='XNFilterEvents' value='filterEvents'/>
<string_constant name='XNFocusWindow' value='focusWindow'/>
<string_constant name='XNFontSet' value='fontSet'/>
<string_constant name='XNForeground' value='foreground'/>
<string_constant name='XNGeometryCallback' value='geometryCallback'/>
<string_constant name='XNInputStyle' value='inputStyle'/>
<string_constant name='XNLineSpace' value='lineSpace'/>
<string_constant name='XNPreeditAttributes' value='preeditAttributes'/>
<string_constant name='XNPreeditCaretCallback' value='preeditCaretCallback'/>
<string_constant name='XNPreeditDoneCallback' value='preeditDoneCallback'/>
<string_constant name='XNPreeditDrawCallback' value='preeditDrawCallback'/>
<string_constant name='XNPreeditStartCallback' value='preeditStartCallback'/>
<string_constant name='XNResourceClass' value='resourceClass'/>
<string_constant name='XNResourceName' value='resourceName'/>
<string_constant name='XNSpotLocation' value='spotLocation'/>
<string_constant name='XNStatusAttributes' value='statusAttributes'/>
<string_constant name='XNStatusDoneCallback' value='statusDoneCallback'/>
<string_constant name='XNStatusDrawCallback' value='statusDrawCallback'/>
<string_constant name='XNStatusStartCallback' value='statusStartCallback'/>
<string_constant name='XNStdColormap' value='stdColorMap'/>
<string_constant name='XNVaNestedList' value='XNVaNestedList'/>
<enum name='ALT_MASK' value='131072'/>
<enum name='APPEARANCE_PIXEL' value='52'/>
<enum name='ARROW_DOWN' value='1'/>
<enum name='ARROW_LEFT' value='2'/>
<enum name='ARROW_RIGHT' value='3'/>
<enum name='ARROW_UP' value='0'/>
<enum name='Above' value='0'/>
<enum name='ActivateMask' value='536870912'/>
<enum name='ActivateNotify' value='36'/>
<enum name='AllHints' value='127'/>
<enum name='AllPlanes' value='4294967295' value64='18446744073709551615'/>
<enum name='AllTemporary' value='0'/>
<enum name='AllValues' value='15'/>
<enum name='AllocAll' value='1'/>
<enum name='AllocNone' value='0'/>
<enum name='AllowExposures' value='1'/>
<enum name='AlreadyGrabbed' value='1'/>
<enum name='Always' value='2'/>
<enum name='AnyButton' value='0'/>
<enum name='AnyKey' value='0'/>
<enum name='AnyModifier' value='32768'/>
<enum name='AnyPropertyType' value='0'/>
<enum name='ArcChord' value='0'/>
<enum name='ArcPieSlice' value='1'/>
<enum name='AsyncBoth' value='6'/>
<enum name='AsyncKeyboard' value='3'/>
<enum name='AsyncPointer' value='0'/>
<enum name='AutoRepeatModeDefault' value='2'/>
<enum name='AutoRepeatModeOff' value='0'/>
<enum name='AutoRepeatModeOn' value='1'/>
<enum name='BadAccess' value='10'/>
<enum name='BadAlloc' value='11'/>
<enum name='BadAtom' value='5'/>
<enum name='BadColor' value='12'/>
<enum name='BadCursor' value='6'/>
<enum name='BadDrawable' value='9'/>
<enum name='BadFont' value='7'/>
<enum name='BadGC' value='13'/>
<enum name='BadIDChoice' value='14'/>
<enum name='BadImplementation' value='17'/>
<enum name='BadLength' value='16'/>
<enum name='BadMatch' value='8'/>
<enum name='BadName' value='15'/>
<enum name='BadPixmap' value='4'/>
<enum name='BadRequest' value='1'/>
<enum name='BadValue' value='2'/>
<enum name='BadWindow' value='3'/>
<enum name='Below' value='1'/>
<enum name='BitmapFileInvalid' value='2'/>
<enum name='BitmapNoMemory' value='3'/>
<enum name='BitmapOpenFailed' value='1'/>
<enum name='BitmapSuccess' value='0'/>
<enum name='BottomIf' value='3'/>
<enum name='Button1' value='1'/>
<enum name='Button1Mask' value='256'/>
<enum name='Button1MotionMask' value='256'/>
<enum name='Button2' value='2'/>
<enum name='Button2Mask' value='512'/>
<enum name='Button2MotionMask' value='512'/>
<enum name='Button3' value='3'/>
<enum name='Button3Mask' value='1024'/>
<enum name='Button3MotionMask' value='1024'/>
<enum name='Button4' value='4'/>
<enum name='Button4Mask' value='2048'/>
<enum name='Button4MotionMask' value='2048'/>
<enum name='Button5' value='5'/>
<enum name='Button5Mask' value='4096'/>
<enum name='Button5MotionMask' value='4096'/>
<enum name='ButtonMotionMask' value='8192'/>
<enum name='ButtonPress' value='4'/>
<enum name='ButtonPressMask' value='4'/>
<enum name='ButtonRelease' value='5'/>
<enum name='ButtonReleaseMask' value='8'/>
<enum name='CONTROL_BODY_PIXEL' value='37'/>
<enum name='CONTROL_FRAME_PIXEL' value='39'/>
<enum name='CONTROL_TEXT_PIXEL' value='35'/>
<enum name='CWBackPixel' value='2'/>
<enum name='CWBackPixmap' value='1'/>
<enum name='CWBackingPixel' value='256'/>
<enum name='CWBackingPlanes' value='128'/>
<enum name='CWBackingStore' value='64'/>
<enum name='CWBitGravity' value='16'/>
<enum name='CWBorderPixel' value='8'/>
<enum name='CWBorderPixmap' value='4'/>
<enum name='CWBorderWidth' value='16'/>
<enum name='CWColormap' value='8192'/>
<enum name='CWCursor' value='16384'/>
<enum name='CWDontPropagate' value='4096'/>
<enum name='CWEventMask' value='2048'/>
<enum name='CWHeight' value='8'/>
<enum name='CWOverrideRedirect' value='512'/>
<enum name='CWSaveUnder' value='1024'/>
<enum name='CWSibling' value='32'/>
<enum name='CWStackMode' value='64'/>
<enum name='CWWidth' value='4'/>
<enum name='CWWinGravity' value='32'/>
<enum name='CWX' value='1'/>
<enum name='CWY' value='2'/>
<enum name='CapButt' value='1'/>
<enum name='CapNotLast' value='0'/>
<enum name='CapProjecting' value='3'/>
<enum name='CapRound' value='2'/>
<enum name='CenterGravity' value='5'/>
<enum name='CirculateNotify' value='26'/>
<enum name='CirculateRequest' value='27'/>
<enum name='ClientMessage' value='33'/>
<enum name='ClipByChildren' value='0'/>
<enum name='ColormapChangeMask' value='8388608'/>
<enum name='ColormapInstalled' value='1'/>
<enum name='ColormapNotify' value='32'/>
<enum name='ColormapUninstalled' value='0'/>
<enum name='Complex' value='0'/>
<enum name='ConfigureNotify' value='22'/>
<enum name='ConfigureRequest' value='23'/>
<enum name='ControlMapIndex' value='2'/>
<enum name='ControlMask' value='4'/>
<enum name='Convex' value='2'/>
<enum name='CoordModeOrigin' value='0'/>
<enum name='CoordModePrevious' value='1'/>
<enum name='CopyFromParent' value='0'/>
<enum name='CreateNotify' value='16'/>
<enum name='CurrentTime' value='0'/>
<enum name='CursorShape' value='0'/>
<enum name='DEF_CANVAS_SELECT_FG_COLOR' value='0'/>
<enum name='DEF_ENTRY_SELECT_FG_COLOR' value='0'/>
<enum name='DEF_LISTBOX_SELECT_FG_COLOR' value='0'/>
<enum name='DEF_MENU_ENTRY_BITMAP' value='0'/>
<enum name='DEF_TEXT_SELECT_FG_COLOR' value='0'/>
<enum name='DeactivateNotify' value='37'/>
<enum name='DefaultBlanking' value='2'/>
<enum name='DefaultExposures' value='2'/>
<enum name='DestroyAll' value='0'/>
<enum name='DestroyNotify' value='17'/>
<enum name='DirectColor' value='5'/>
<enum name='DisableAccess' value='0'/>
<enum name='DisableScreenInterval' value='0'/>
<enum name='DisableScreenSaver' value='0'/>
<enum name='DoBlue' value='4'/>
<enum name='DoGreen' value='2'/>
<enum name='DoRed' value='1'/>
<enum name='DontAllowExposures' value='0'/>
<enum name='DontCareState' value='0'/>
<enum name='DontPreferBlanking' value='0'/>
<enum name='EMBEDDED_APP_WANTS_FOCUS' value='20'/>
<enum name='EXTENDED_MASK' value='262144'/>
<enum name='EastGravity' value='6'/>
<enum name='EnableAccess' value='1'/>
<enum name='EnterNotify' value='7'/>
<enum name='EnterWindowMask' value='16'/>
<enum name='EvenOddRule' value='0'/>
<enum name='Expose' value='12'/>
<enum name='ExposureMask' value='32768'/>
<enum name='False' value='0'/>
<enum name='FamilyChaos' value='2'/>
<enum name='FamilyDECnet' value='1'/>
<enum name='FamilyInternet' value='0'/>
<enum name='FillOpaqueStippled' value='3'/>
<enum name='FillSolid' value='0'/>
<enum name='FillStippled' value='2'/>
<enum name='FillTiled' value='1'/>
<enum name='FirstExtensionError' value='128'/>
<enum name='FocusChangeMask' value='2097152'/>
<enum name='FocusIn' value='9'/>
<enum name='FocusOut' value='10'/>
<enum name='FontChange' value='255'/>
<enum name='FontLeftToRight' value='0'/>
<enum name='FontRightToLeft' value='1'/>
<enum name='ForgetGravity' value='0'/>
<enum name='GCArcMode' value='4194304'/>
<enum name='GCBackground' value='8'/>
<enum name='GCCapStyle' value='64'/>
<enum name='GCClipMask' value='524288'/>
<enum name='GCClipXOrigin' value='131072'/>
<enum name='GCClipYOrigin' value='262144'/>
<enum name='GCDashList' value='2097152'/>
<enum name='GCDashOffset' value='1048576'/>
<enum name='GCFillRule' value='512'/>
<enum name='GCFillStyle' value='256'/>
<enum name='GCFont' value='16384'/>
<enum name='GCForeground' value='4'/>
<enum name='GCFunction' value='1'/>
<enum name='GCGraphicsExposures' value='65536'/>
<enum name='GCJoinStyle' value='128'/>
<enum name='GCLastBit' value='22'/>
<enum name='GCLineStyle' value='32'/>
<enum name='GCLineWidth' value='16'/>
<enum name='GCPlaneMask' value='2'/>
<enum name='GCStipple' value='2048'/>
<enum name='GCSubwindowMode' value='32768'/>
<enum name='GCTile' value='1024'/>
<enum name='GCTileStipXOrigin' value='4096'/>
<enum name='GCTileStipYOrigin' value='8192'/>
<enum name='GXand' value='1'/>
<enum name='GXandInverted' value='4'/>
<enum name='GXandReverse' value='2'/>
<enum name='GXclear' value='0'/>
<enum name='GXcopy' value='3'/>
<enum name='GXcopyInverted' value='12'/>
<enum name='GXequiv' value='9'/>
<enum name='GXinvert' value='10'/>
<enum name='GXnand' value='14'/>
<enum name='GXnoop' value='5'/>
<enum name='GXnor' value='8'/>
<enum name='GXor' value='7'/>
<enum name='GXorInverted' value='13'/>
<enum name='GXorReverse' value='11'/>
<enum name='GXset' value='15'/>
<enum name='GXxor' value='6'/>
<enum name='GrabFrozen' value='4'/>
<enum name='GrabInvalidTime' value='2'/>
<enum name='GrabModeAsync' value='1'/>
<enum name='GrabModeSync' value='0'/>
<enum name='GrabNotViewable' value='3'/>
<enum name='GrabSuccess' value='0'/>
<enum name='GraphicsExpose' value='13'/>
<enum name='GravityNotify' value='24'/>
<enum name='GrayScale' value='1'/>
<enum name='HIGHLIGHT_ALTERNATE_PIXEL' value='34'/>
<enum name='HIGHLIGHT_PIXEL' value='31'/>
<enum name='HIGHLIGHT_SECONDARY_PIXEL' value='32'/>
<enum name='HIGHLIGHT_TEXT_PIXEL' value='33'/>
<enum name='HeightValue' value='8'/>
<enum name='HostDelete' value='1'/>
<enum name='HostInsert' value='0'/>
<enum name='IconMaskHint' value='32'/>
<enum name='IconPixmapHint' value='4'/>
<enum name='IconPositionHint' value='16'/>
<enum name='IconWindowHint' value='8'/>
<enum name='IconicState' value='3'/>
<enum name='InactiveState' value='4'/>
<enum name='IncludeInferiors' value='1'/>
<enum name='InputFocus' value='1'/>
<enum name='InputHint' value='1'/>
<enum name='InputOnly' value='2'/>
<enum name='InputOutput' value='1'/>
<enum name='IsUnmapped' value='0'/>
<enum name='IsUnviewable' value='1'/>
<enum name='IsViewable' value='2'/>
<enum name='JoinBevel' value='2'/>
<enum name='JoinMiter' value='0'/>
<enum name='JoinRound' value='1'/>
<enum name='KBAutoRepeatMode' value='128'/>
<enum name='KBBellDuration' value='8'/>
<enum name='KBBellPercent' value='2'/>
<enum name='KBBellPitch' value='4'/>
<enum name='KBKey' value='64'/>
<enum name='KBKeyClickPercent' value='1'/>
<enum name='KBLed' value='16'/>
<enum name='KBLedMode' value='32'/>
<enum name='KeyPress' value='2'/>
<enum name='KeyPressMask' value='1'/>
<enum name='KeyRelease' value='3'/>
<enum name='KeyReleaseMask' value='2'/>
<enum name='KeymapNotify' value='11'/>
<enum name='KeymapStateMask' value='16384'/>
<enum name='LASTEvent' value='35'/>
<enum name='LSBFirst' value='0'/>
<enum name='LastExtensionError' value='255'/>
<enum name='LeaveNotify' value='8'/>
<enum name='LeaveWindowMask' value='32'/>
<enum name='LedModeOff' value='0'/>
<enum name='LedModeOn' value='1'/>
<enum name='LineDoubleDash' value='2'/>
<enum name='LineOnOffDash' value='1'/>
<enum name='LineSolid' value='0'/>
<enum name='LockMapIndex' value='1'/>
<enum name='LockMask' value='2'/>
<enum name='LowerHighest' value='1'/>
<enum name='MAC_OSX_ENTRY_BORDER' value='2'/>
<enum name='MAC_OSX_ENTRY_RELIEF' value='5'/>
<enum name='MAC_OSX_ENTRY_SELECT_RELIEF' value='0'/>
<enum name='MAC_OSX_FOCUS_WIDTH' value='3'/>
<enum name='MASK_SIZE' value='32'/>
<enum name='MENU_ACTIVE_PIXEL' value='43'/>
<enum name='MENU_ACTIVE_TEXT_PIXEL' value='45'/>
<enum name='MENU_BACKGROUND_PIXEL' value='47'/>
<enum name='MENU_DISABLED_PIXEL' value='49'/>
<enum name='MENU_TEXT_PIXEL' value='51'/>
<enum name='META_MASK' value='65536'/>
<enum name='MSBFirst' value='1'/>
<enum name='MapNotify' value='19'/>
<enum name='MapRequest' value='20'/>
<enum name='MappingBusy' value='1'/>
<enum name='MappingFailed' value='2'/>
<enum name='MappingKeyboard' value='1'/>
<enum name='MappingModifier' value='0'/>
<enum name='MappingNotify' value='34'/>
<enum name='MappingPointer' value='2'/>
<enum name='MappingSuccess' value='0'/>
<enum name='Mod1MapIndex' value='3'/>
<enum name='Mod1Mask' value='8'/>
<enum name='Mod2MapIndex' value='4'/>
<enum name='Mod2Mask' value='16'/>
<enum name='Mod3MapIndex' value='5'/>
<enum name='Mod3Mask' value='32'/>
<enum name='Mod4MapIndex' value='6'/>
<enum name='Mod4Mask' value='64'/>
<enum name='Mod5MapIndex' value='7'/>
<enum name='Mod5Mask' value='128'/>
<enum name='MotionNotify' value='6'/>
<enum name='MouseWheelEvent' value='38'/>
<enum name='MouseWheelMask' value='268435456'/>
<enum name='NeedFunctionPrototypes' value='1'/>
<enum name='NeedNestedPrototypes' value='1'/>
<enum name='NeedVarargsPrototypes' value='0'/>
<enum name='NeedWidePrototypes' value='1'/>
<enum name='NoEventMask' value='0'/>
<enum name='NoExpose' value='14'/>
<enum name='NoSymbol' value='0'/>
<enum name='NoValue' value='0'/>
<enum name='Nonconvex' value='1'/>
<enum name='None' value='0'/>
<enum name='NormalState' value='1'/>
<enum name='NorthEastGravity' value='3'/>
<enum name='NorthGravity' value='2'/>
<enum name='NorthWestGravity' value='1'/>
<enum name='NotUseful' value='0'/>
<enum name='NotifyAncestor' value='0'/>
<enum name='NotifyDetailNone' value='7'/>
<enum name='NotifyGrab' value='1'/>
<enum name='NotifyHint' value='1'/>
<enum name='NotifyInferior' value='2'/>
<enum name='NotifyNonlinear' value='3'/>
<enum name='NotifyNonlinearVirtual' value='4'/>
<enum name='NotifyNormal' value='0'/>
<enum name='NotifyPointer' value='5'/>
<enum name='NotifyPointerRoot' value='6'/>
<enum name='NotifyUngrab' value='2'/>
<enum name='NotifyVirtual' value='1'/>
<enum name='NotifyWhileGrabbed' value='3'/>
<enum name='Opposite' value='4'/>
<enum name='OwnerGrabButtonMask' value='16777216'/>
<enum name='PAllHints' value='252'/>
<enum name='PAspect' value='128'/>
<enum name='PBaseSize' value='256'/>
<enum name='PIXEL_MAGIC' value='105'/>
<enum name='PMaxSize' value='32'/>
<enum name='PMinSize' value='16'/>
<enum name='PPosition' value='4'/>
<enum name='PResizeInc' value='64'/>
<enum name='PSize' value='8'/>
<enum name='PWinGravity' value='512'/>
<enum name='ParentRelative' value='1'/>
<enum name='PlaceOnBottom' value='1'/>
<enum name='PlaceOnTop' value='0'/>
<enum name='PointerMotionHintMask' value='128'/>
<enum name='PointerMotionMask' value='64'/>
<enum name='PointerRoot' value='1'/>
<enum name='PointerWindow' value='0'/>
<enum name='PreferBlanking' value='1'/>
<enum name='PropModeAppend' value='2'/>
<enum name='PropModePrepend' value='1'/>
<enum name='PropModeReplace' value='0'/>
<enum name='PropertyChangeMask' value='4194304'/>
<enum name='PropertyDelete' value='1'/>
<enum name='PropertyNewValue' value='0'/>
<enum name='PropertyNotify' value='28'/>
<enum name='PseudoColor' value='3'/>
<enum name='QueuedAfterFlush' value='2'/>
<enum name='QueuedAfterReading' value='1'/>
<enum name='QueuedAlready' value='0'/>
<enum name='RaiseLowest' value='0'/>
<enum name='RectangleIn' value='1'/>
<enum name='RectangleOut' value='0'/>
<enum name='RectanglePart' value='2'/>
<enum name='ReparentNotify' value='21'/>
<enum name='ReplayKeyboard' value='5'/>
<enum name='ReplayPointer' value='2'/>
<enum name='ResizeRedirectMask' value='262144'/>
<enum name='ResizeRequest' value='25'/>
<enum name='RetainPermanent' value='1'/>
<enum name='RetainTemporary' value='2'/>
<enum name='RevertToNone' value='0'/>
<enum name='RevertToParent' value='2'/>
<enum name='RevertToPointerRoot' value='1'/>
<enum name='SELECT_FG' value='0'/>
<enum name='ScreenSaverActive' value='1'/>
<enum name='ScreenSaverReset' value='0'/>
<enum name='SelectionClear' value='29'/>
<enum name='SelectionNotify' value='31'/>
<enum name='SelectionRequest' value='30'/>
<enum name='SetModeDelete' value='1'/>
<enum name='SetModeInsert' value='0'/>
<enum name='ShiftMapIndex' value='0'/>
<enum name='ShiftMask' value='1'/>
<enum name='SouthEastGravity' value='9'/>
<enum name='SouthGravity' value='8'/>
<enum name='SouthWestGravity' value='7'/>
<enum name='StateHint' value='2'/>
<enum name='StaticColor' value='2'/>
<enum name='StaticGravity' value='10'/>
<enum name='StaticGray' value='0'/>
<enum name='StippleShape' value='2'/>
<enum name='StructureNotifyMask' value='131072'/>
<enum name='SubstructureNotifyMask' value='524288'/>
<enum name='SubstructureRedirectMask' value='1048576'/>
<enum name='Success' value='0'/>
<enum name='SyncBoth' value='7'/>
<enum name='SyncKeyboard' value='4'/>
<enum name='SyncPointer' value='1'/>
<enum name='TKP_CLIP_PIXMAP' value='0'/>
<enum name='TKP_CLIP_REGION' value='1'/>
<enum name='TK_3D_DARK_GC' value='3'/>
<enum name='TK_3D_FLAT_GC' value='1'/>
<enum name='TK_3D_LIGHT_GC' value='2'/>
<enum name='TK_ALL_EVENTS' value='-3'/>
<enum name='TK_ALREADY_DEAD' value='4'/>
<enum name='TK_ANCHOR_CENTER' value='8'/>
<enum name='TK_ANCHOR_E' value='2'/>
<enum name='TK_ANCHOR_N' value='0'/>
<enum name='TK_ANCHOR_NE' value='1'/>
<enum name='TK_ANCHOR_NW' value='7'/>
<enum name='TK_ANCHOR_S' value='4'/>
<enum name='TK_ANCHOR_SE' value='3'/>
<enum name='TK_ANCHOR_SW' value='5'/>
<enum name='TK_ANCHOR_W' value='6'/>
<enum name='TK_ANONYMOUS_WINDOW' value='16384'/>
<enum name='TK_ARGV_CONSTANT' value='15'/>
<enum name='TK_ARGV_CONST_OPTION' value='24'/>
<enum name='TK_ARGV_DONT_SKIP_FIRST_ARG' value='8'/>
<enum name='TK_ARGV_END' value='27'/>
<enum name='TK_ARGV_FLOAT' value='20'/>
<enum name='TK_ARGV_FUNC' value='21'/>
<enum name='TK_ARGV_GENFUNC' value='22'/>
<enum name='TK_ARGV_HELP' value='23'/>
<enum name='TK_ARGV_INT' value='16'/>
<enum name='TK_ARGV_NO_ABBREV' value='4'/>
<enum name='TK_ARGV_NO_DEFAULTS' value='1'/>
<enum name='TK_ARGV_NO_LEFTOVERS' value='2'/>
<enum name='TK_ARGV_OPTION_NAME_VALUE' value='26'/>
<enum name='TK_ARGV_OPTION_VALUE' value='25'/>
<enum name='TK_ARGV_REST' value='19'/>
<enum name='TK_ARGV_STRING' value='17'/>
<enum name='TK_ARGV_UID' value='18'/>
<enum name='TK_AT_LEAST_ONE' value='2'/>
<enum name='TK_BOTH_CHANGED' value='3'/>
<enum name='TK_BOTH_HALVES' value='1024'/>
<enum name='TK_CHECKED_IC' value='32'/>
<enum name='TK_CLIP_INVALID' value='2'/>
<enum name='TK_CONFIG_ACTIVE_CURSOR' value='11'/>
<enum name='TK_CONFIG_ANCHOR' value='13'/>
<enum name='TK_CONFIG_ARGV_ONLY' value='1'/>
<enum name='TK_CONFIG_BITMAP' value='7'/>
<enum name='TK_CONFIG_BOOLEAN' value='0'/>
<enum name='TK_CONFIG_BORDER' value='8'/>
<enum name='TK_CONFIG_CAP_STYLE' value='15'/>
<enum name='TK_CONFIG_COLOR' value='5'/>
<enum name='TK_CONFIG_COLOR_ONLY' value='2'/>
<enum name='TK_CONFIG_CURSOR' value='10'/>
<enum name='TK_CONFIG_CUSTOM' value='20'/>
<enum name='TK_CONFIG_DONT_SET_DEFAULT' value='8'/>
<enum name='TK_CONFIG_DOUBLE' value='2'/>
<enum name='TK_CONFIG_END' value='21'/>
<enum name='TK_CONFIG_FONT' value='6'/>
<enum name='TK_CONFIG_INT' value='1'/>
<enum name='TK_CONFIG_JOIN_STYLE' value='16'/>
<enum name='TK_CONFIG_JUSTIFY' value='12'/>
<enum name='TK_CONFIG_MM' value='18'/>
<enum name='TK_CONFIG_MONO_ONLY' value='4'/>
<enum name='TK_CONFIG_NULL_OK' value='1'/>
<enum name='TK_CONFIG_OBJS' value='128'/>
<enum name='TK_CONFIG_OPTION_SPECIFIED' value='16'/>
<enum name='TK_CONFIG_PIXELS' value='17'/>
<enum name='TK_CONFIG_RELIEF' value='9'/>
<enum name='TK_CONFIG_STRING' value='3'/>
<enum name='TK_CONFIG_SYNONYM' value='14'/>
<enum name='TK_CONFIG_UID' value='4'/>
<enum name='TK_CONFIG_USER_BIT' value='256'/>
<enum name='TK_CONFIG_WINDOW' value='19'/>
<enum name='TK_CONTAINER' value='512'/>
<enum name='TK_DEFER_EVENT' value='0'/>
<enum name='TK_DEFER_MODAL' value='2048'/>
<enum name='TK_DISCARD_EVENT' value='2'/>
<enum name='TK_DISPLAY_COLLAPSE_MOTION_EVENTS' value='1'/>
<enum name='TK_DISPLAY_IN_WARP' value='16'/>
<enum name='TK_DISPLAY_USE_IM' value='2'/>
<enum name='TK_DISPLAY_WM_TRACING' value='8'/>
<enum name='TK_DONT_DESTROY_WINDOW' value='64'/>
<enum name='TK_DONT_WAIT' value='2'/>
<enum name='TK_DRAWN_UNDER_MENU' value='8'/>
<enum name='TK_DRAW_IN_CONTEXT' value='1'/>
<enum name='TK_ELEMENT_STATE_ACTIVE' value='1'/>
<enum name='TK_ELEMENT_STATE_DISABLED' value='2'/>
<enum name='TK_ELEMENT_STATE_FOCUS' value='4'/>
<enum name='TK_ELEMENT_STATE_PRESSED' value='8'/>
<enum name='TK_EMBEDDED' value='256'/>
<enum name='TK_EXCEPTION' value='8'/>
<enum name='TK_FILE_EVENTS' value='8'/>
<enum name='TK_FOCUSED_VIEW' value='16'/>
<enum name='TK_FS_ITALIC' value='1'/>
<enum name='TK_FS_OBLIQUE' value='2'/>
<enum name='TK_FS_ROMAN' value='0'/>
<enum name='TK_FS_UNKNOWN' value='-1'/>
<enum name='TK_FW_BOLD' value='1'/>
<enum name='TK_FW_NORMAL' value='0'/>
<enum name='TK_FW_UNKNOWN' value='-1'/>
<enum name='TK_GRAB_ANCESTOR' value='2'/>
<enum name='TK_GRAB_EXCLUDED' value='3'/>
<enum name='TK_GRAB_FLAG' value='16'/>
<enum name='TK_GRAB_IN_TREE' value='1'/>
<enum name='TK_GRAB_NONE' value='0'/>
<enum name='TK_HAS_WRAPPER' value='32768'/>
<enum name='TK_HOST_EXISTS' value='4'/>
<enum name='TK_IDLE_EVENTS' value='32'/>
<enum name='TK_IGNORE_NEWLINES' value='16'/>
<enum name='TK_IGNORE_TABS' value='8'/>
<enum name='TK_INTERACTIVE_PRIO' value='80'/>
<enum name='TK_ISOLATE_END' value='32'/>
<enum name='TK_IS_BW_PIXMAP' value='64'/>
<enum name='TK_IS_PIXMAP' value='32'/>
<enum name='TK_ITEM_DONT_REDRAW' value='2'/>
<enum name='TK_ITEM_STATE_DEPENDANT' value='1'/>
<enum name='TK_JUSTIFY_CENTER' value='2'/>
<enum name='TK_JUSTIFY_LEFT' value='0'/>
<enum name='TK_JUSTIFY_RIGHT' value='1'/>
<enum name='TK_LASTEVENT' value='39'/>
<enum name='TK_LAYOUT_WITH_BASE_CHUNKS' value='1'/>
<enum name='TK_LOCATION_CHANGED' value='1'/>
<enum name='TK_MACOSX_HANDLE_EVENT_IMMEDIATELY' value='1024'/>
<enum name='TK_MAC_BUTTON_USE_COMPATIBILITY_METRICS' value='1'/>
<enum name='TK_MAJOR_VERSION' value='8'/>
<enum name='TK_MAPPED' value='1'/>
<enum name='TK_MAX_PRIO' value='100'/>
<enum name='TK_MINOR_VERSION' value='5'/>
<enum name='TK_NEED_CONFIG_NOTIFY' value='8'/>
<enum name='TK_NOTIFY_SHARE' value='20'/>
<enum name='TK_NO_DOUBLE_BUFFERING' value='1'/>
<enum name='TK_NUM_SAVED_OPTIONS' value='20'/>
<enum name='TK_OFFSET_BOTTOM' value='128'/>
<enum name='TK_OFFSET_CENTER' value='8'/>
<enum name='TK_OFFSET_INDEX' value='1'/>
<enum name='TK_OFFSET_LEFT' value='4'/>
<enum name='TK_OFFSET_MIDDLE' value='64'/>
<enum name='TK_OFFSET_RELATIVE' value='2'/>
<enum name='TK_OFFSET_RIGHT' value='16'/>
<enum name='TK_OFFSET_TOP' value='32'/>
<enum name='TK_OPTION_ANCHOR' value='12'/>
<enum name='TK_OPTION_ANY' value='3'/>
<enum name='TK_OPTION_BITMAP' value='7'/>
<enum name='TK_OPTION_BOOLEAN' value='0'/>
<enum name='TK_OPTION_BORDER' value='8'/>
<enum name='TK_OPTION_COLOR' value='5'/>
<enum name='TK_OPTION_CURSOR' value='10'/>
<enum name='TK_OPTION_CUSTOM' value='17'/>
<enum name='TK_OPTION_DONT_SET_DEFAULT' value='8'/>
<enum name='TK_OPTION_DOUBLE' value='2'/>
<enum name='TK_OPTION_END' value='16'/>
<enum name='TK_OPTION_FONT' value='6'/>
<enum name='TK_OPTION_INT' value='1'/>
<enum name='TK_OPTION_JUSTIFY' value='11'/>
<enum name='TK_OPTION_NULL_OK' value='1'/>
<enum name='TK_OPTION_PIXELS' value='14'/>
<enum name='TK_OPTION_RELIEF' value='9'/>
<enum name='TK_OPTION_STRING' value='3'/>
<enum name='TK_OPTION_STRING_TABLE' value='4'/>
<enum name='TK_OPTION_STYLE' value='18'/>
<enum name='TK_OPTION_SYNONYM' value='13'/>
<enum name='TK_OPTION_WINDOW' value='15'/>
<enum name='TK_PARENT_WINDOW' value='1'/>
<enum name='TK_PARTIAL_OK' value='4'/>
<enum name='TK_PHOTO_COMPOSITE_OVERLAY' value='0'/>
<enum name='TK_PHOTO_COMPOSITE_SET' value='1'/>
<enum name='TK_PROCESS_EVENT' value='1'/>
<enum name='TK_PROP_PROPCHANGE' value='262144'/>
<enum name='TK_READABLE' value='2'/>
<enum name='TK_RELEASE_LEVEL' value='2'/>
<enum name='TK_RELEASE_SERIAL' value='9'/>
<enum name='TK_RELIEF_FLAT' value='0'/>
<enum name='TK_RELIEF_GROOVE' value='1'/>
<enum name='TK_RELIEF_NULL' value='-1'/>
<enum name='TK_RELIEF_RAISED' value='2'/>
<enum name='TK_RELIEF_RIDGE' value='3'/>
<enum name='TK_RELIEF_SOLID' value='4'/>
<enum name='TK_RELIEF_SUNKEN' value='5'/>
<enum name='TK_REPARENTED' value='8192'/>
<enum name='TK_SCROLLBAR_GROW' value='1'/>
<enum name='TK_SCROLL_ERROR' value='4'/>
<enum name='TK_SCROLL_MOVETO' value='1'/>
<enum name='TK_SCROLL_PAGES' value='2'/>
<enum name='TK_SCROLL_UNITS' value='3'/>
<enum name='TK_SIZE_CHANGED' value='2'/>
<enum name='TK_STARTUP_FILE_PRIO' value='40'/>
<enum name='TK_STATE_ACTIVE' value='0'/>
<enum name='TK_STATE_DISABLED' value='1'/>
<enum name='TK_STATE_HIDDEN' value='3'/>
<enum name='TK_STATE_NORMAL' value='2'/>
<enum name='TK_STATE_NULL' value='-1'/>
<enum name='TK_STYLE_VERSION' value='1'/>
<enum name='TK_STYLE_VERSION_1' value='1'/>
<enum name='TK_STYLE_VERSION_2' value='2'/>
<enum name='TK_SW_CONDENSE' value='1'/>
<enum name='TK_SW_EXPAND' value='2'/>
<enum name='TK_SW_NORMAL' value='0'/>
<enum name='TK_SW_UNKNOWN' value='3'/>
<enum name='TK_TAG_SPACE' value='3'/>
<enum name='TK_TIMER_EVENTS' value='16'/>
<enum name='TK_TOP_HIERARCHY' value='131072'/>
<enum name='TK_TOP_LEVEL' value='2'/>
<enum name='TK_USER_DEFAULT_PRIO' value='60'/>
<enum name='TK_WHOLE_WORDS' value='1'/>
<enum name='TK_WIDGET_DEFAULT_PRIO' value='20'/>
<enum name='TK_WINDOW_EVENTS' value='4'/>
<enum name='TK_WINDOW_ONLY' value='0'/>
<enum name='TK_WIN_MANAGED' value='65536'/>
<enum name='TK_WM_COLORMAP_WINDOW' value='128'/>
<enum name='TK_WM_MANAGEABLE' value='524288'/>
<enum name='TK_WRAPPER' value='4096'/>
<enum name='TK_WRITABLE' value='4'/>
<enum name='TK_X_EVENTS' value='4'/>
<enum name='TRANSPARENT_PIXEL' value='30'/>
<enum name='TTK_BORDER' value='512'/>
<enum name='TTK_BUTTON_DEFAULT_ACTIVE' value='1'/>
<enum name='TTK_BUTTON_DEFAULT_DISABLED' value='2'/>
<enum name='TTK_BUTTON_DEFAULT_NORMAL' value='0'/>
<enum name='TTK_COMPOUND_BOTTOM' value='5'/>
<enum name='TTK_COMPOUND_CENTER' value='3'/>
<enum name='TTK_COMPOUND_IMAGE' value='2'/>
<enum name='TTK_COMPOUND_LEFT' value='6'/>
<enum name='TTK_COMPOUND_NONE' value='0'/>
<enum name='TTK_COMPOUND_RIGHT' value='7'/>
<enum name='TTK_COMPOUND_TEXT' value='1'/>
<enum name='TTK_COMPOUND_TOP' value='4'/>
<enum name='TTK_EXPAND' value='256'/>
<enum name='TTK_FILL_BOTH' value='15'/>
<enum name='TTK_FILL_X' value='3'/>
<enum name='TTK_FILL_Y' value='12'/>
<enum name='TTK_ORIENT_HORIZONTAL' value='0'/>
<enum name='TTK_ORIENT_VERTICAL' value='1'/>
<enum name='TTK_PACK_BOTTOM' value='128'/>
<enum name='TTK_PACK_LEFT' value='16'/>
<enum name='TTK_PACK_RIGHT' value='32'/>
<enum name='TTK_PACK_TOP' value='64'/>
<enum name='TTK_SIDE_BOTTOM' value='3'/>
<enum name='TTK_SIDE_LEFT' value='0'/>
<enum name='TTK_SIDE_RIGHT' value='2'/>
<enum name='TTK_SIDE_TOP' value='1'/>
<enum name='TTK_STATE_ACTIVE' value='1'/>
<enum name='TTK_STATE_ALTERNATE' value='64'/>
<enum name='TTK_STATE_BACKGROUND' value='32'/>
<enum name='TTK_STATE_DISABLED' value='2'/>
<enum name='TTK_STATE_FOCUS' value='4'/>
<enum name='TTK_STATE_HOVER' value='512'/>
<enum name='TTK_STATE_INVALID' value='128'/>
<enum name='TTK_STATE_PRESSED' value='8'/>
<enum name='TTK_STATE_READONLY' value='256'/>
<enum name='TTK_STATE_SELECTED' value='16'/>
<enum name='TTK_STATE_USER1' value='32768'/>
<enum name='TTK_STATE_USER2' value='16384'/>
<enum name='TTK_STATE_USER3' value='8192'/>
<enum name='TTK_STATE_USER4' value='4096'/>
<enum name='TTK_STATE_USER5' value='2048'/>
<enum name='TTK_STATE_USER6' value='1024'/>
<enum name='TTK_STICK_E' value='2'/>
<enum name='TTK_STICK_N' value='4'/>
<enum name='TTK_STICK_S' value='8'/>
<enum name='TTK_STICK_W' value='1'/>
<enum name='TTK_STUBS_EPOCH' value='0'/>
<enum name='TTK_STUBS_REVISION' value='31'/>
<enum name='TTK_UNIT' value='1024'/>
<enum name='TileShape' value='1'/>
<enum name='TopIf' value='2'/>
<enum name='True' value='1'/>
<enum name='TrueColor' value='4'/>
<enum name='USPosition' value='1'/>
<enum name='USSize' value='2'/>
<enum name='UnmapGravity' value='0'/>
<enum name='UnmapNotify' value='18'/>
<enum name='Unsorted' value='0'/>
<enum name='VirtualEvent' value='35'/>
<enum name='VirtualEventMask' value='1073741824'/>
<enum name='VisibilityChangeMask' value='65536'/>
<enum name='VisibilityFullyObscured' value='2'/>
<enum name='VisibilityNotify' value='15'/>
<enum name='VisibilityPartiallyObscured' value='1'/>
<enum name='VisibilityUnobscured' value='0'/>
<enum name='VisualAllMask' value='511'/>
<enum name='VisualBitsPerRGBMask' value='256'/>
<enum name='VisualBlueMaskMask' value='64'/>
<enum name='VisualClassMask' value='8'/>
<enum name='VisualColormapSizeMask' value='128'/>
<enum name='VisualDepthMask' value='4'/>
<enum name='VisualGreenMaskMask' value='32'/>
<enum name='VisualIDMask' value='1'/>
<enum name='VisualNoMask' value='0'/>
<enum name='VisualRedMaskMask' value='16'/>
<enum name='VisualScreenMask' value='2'/>
<enum name='WINDOW_BODY_PIXEL' value='41'/>
<enum name='WestGravity' value='4'/>
<enum name='WhenMapped' value='1'/>
<enum name='WidthValue' value='4'/>
<enum name='WindingRule' value='1'/>
<enum name='WindowGroupHint' value='64'/>
<enum name='WithdrawnState' value='0'/>
<enum name='XATOM_H' value='1'/>
<enum name='XA_ARC' value='3'/>
<enum name='XA_ATOM' value='4'/>
<enum name='XA_BITMAP' value='5'/>
<enum name='XA_CAP_HEIGHT' value='66'/>
<enum name='XA_CARDINAL' value='6'/>
<enum name='XA_COLORMAP' value='7'/>
<enum name='XA_COPYRIGHT' value='61'/>
<enum name='XA_CURSOR' value='8'/>
<enum name='XA_CUT_BUFFER0' value='9'/>
<enum name='XA_CUT_BUFFER1' value='10'/>
<enum name='XA_CUT_BUFFER2' value='11'/>
<enum name='XA_CUT_BUFFER3' value='12'/>
<enum name='XA_CUT_BUFFER4' value='13'/>
<enum name='XA_CUT_BUFFER5' value='14'/>
<enum name='XA_CUT_BUFFER6' value='15'/>
<enum name='XA_CUT_BUFFER7' value='16'/>
<enum name='XA_DRAWABLE' value='17'/>
<enum name='XA_END_SPACE' value='46'/>
<enum name='XA_FAMILY_NAME' value='64'/>
<enum name='XA_FONT' value='18'/>
<enum name='XA_FONT_NAME' value='63'/>
<enum name='XA_FULL_NAME' value='65'/>
<enum name='XA_INTEGER' value='19'/>
<enum name='XA_ITALIC_ANGLE' value='55'/>
<enum name='XA_LAST_PREDEFINED' value='68'/>
<enum name='XA_MAX_SPACE' value='45'/>
<enum name='XA_MIN_SPACE' value='43'/>
<enum name='XA_NORM_SPACE' value='44'/>
<enum name='XA_NOTICE' value='62'/>
<enum name='XA_PIXMAP' value='20'/>
<enum name='XA_POINT' value='21'/>
<enum name='XA_POINT_SIZE' value='59'/>
<enum name='XA_PRIMARY' value='1'/>
<enum name='XA_QUAD_WIDTH' value='57'/>
<enum name='XA_RECTANGLE' value='22'/>
<enum name='XA_RESOLUTION' value='60'/>
<enum name='XA_RESOURCE_MANAGER' value='23'/>
<enum name='XA_RGB_BEST_MAP' value='25'/>
<enum name='XA_RGB_BLUE_MAP' value='26'/>
<enum name='XA_RGB_COLOR_MAP' value='24'/>
<enum name='XA_RGB_DEFAULT_MAP' value='27'/>
<enum name='XA_RGB_GRAY_MAP' value='28'/>
<enum name='XA_RGB_GREEN_MAP' value='29'/>
<enum name='XA_RGB_RED_MAP' value='30'/>
<enum name='XA_SECONDARY' value='2'/>
<enum name='XA_STRIKEOUT_ASCENT' value='53'/>
<enum name='XA_STRIKEOUT_DESCENT' value='54'/>
<enum name='XA_STRING' value='31'/>
<enum name='XA_SUBSCRIPT_X' value='49'/>
<enum name='XA_SUBSCRIPT_Y' value='50'/>
<enum name='XA_SUPERSCRIPT_X' value='47'/>
<enum name='XA_SUPERSCRIPT_Y' value='48'/>
<enum name='XA_UNDERLINE_POSITION' value='51'/>
<enum name='XA_UNDERLINE_THICKNESS' value='52'/>
<enum name='XA_VISUALID' value='32'/>
<enum name='XA_WEIGHT' value='58'/>
<enum name='XA_WINDOW' value='33'/>
<enum name='XA_WM_CLASS' value='67'/>
<enum name='XA_WM_CLIENT_MACHINE' value='36'/>
<enum name='XA_WM_COMMAND' value='34'/>
<enum name='XA_WM_HINTS' value='35'/>
<enum name='XA_WM_ICON_NAME' value='37'/>
<enum name='XA_WM_ICON_SIZE' value='38'/>
<enum name='XA_WM_NAME' value='39'/>
<enum name='XA_WM_NORMAL_HINTS' value='40'/>
<enum name='XA_WM_SIZE_HINTS' value='41'/>
<enum name='XA_WM_TRANSIENT_FOR' value='68'/>
<enum name='XA_WM_ZOOM_HINTS' value='42'/>
<enum name='XA_X_HEIGHT' value='56'/>
<enum name='XBufferOverflow' value='-1'/>
<enum name='XCNOENT' value='2'/>
<enum name='XCNOMEM' value='1'/>
<enum name='XCSUCCESS' value='0'/>
<enum name='XC_X_cursor' value='0'/>
<enum name='XC_arrow' value='2'/>
<enum name='XC_based_arrow_down' value='4'/>
<enum name='XC_based_arrow_up' value='6'/>
<enum name='XC_boat' value='8'/>
<enum name='XC_bogosity' value='10'/>
<enum name='XC_bottom_left_corner' value='12'/>
<enum name='XC_bottom_right_corner' value='14'/>
<enum name='XC_bottom_side' value='16'/>
<enum name='XC_bottom_tee' value='18'/>
<enum name='XC_box_spiral' value='20'/>
<enum name='XC_center_ptr' value='22'/>
<enum name='XC_circle' value='24'/>
<enum name='XC_clock' value='26'/>
<enum name='XC_coffee_mug' value='28'/>
<enum name='XC_cross' value='30'/>
<enum name='XC_cross_reverse' value='32'/>
<enum name='XC_crosshair' value='34'/>
<enum name='XC_diamond_cross' value='36'/>
<enum name='XC_dot' value='38'/>
<enum name='XC_dotbox' value='40'/>
<enum name='XC_double_arrow' value='42'/>
<enum name='XC_draft_large' value='44'/>
<enum name='XC_draft_small' value='46'/>
<enum name='XC_draped_box' value='48'/>
<enum name='XC_exchange' value='50'/>
<enum name='XC_fleur' value='52'/>
<enum name='XC_gobbler' value='54'/>
<enum name='XC_gumby' value='56'/>
<enum name='XC_hand1' value='58'/>
<enum name='XC_hand2' value='60'/>
<enum name='XC_heart' value='62'/>
<enum name='XC_icon' value='64'/>
<enum name='XC_iron_cross' value='66'/>
<enum name='XC_left_ptr' value='68'/>
<enum name='XC_left_side' value='70'/>
<enum name='XC_left_tee' value='72'/>
<enum name='XC_leftbutton' value='74'/>
<enum name='XC_ll_angle' value='76'/>
<enum name='XC_lr_angle' value='78'/>
<enum name='XC_man' value='80'/>
<enum name='XC_middlebutton' value='82'/>
<enum name='XC_mouse' value='84'/>
<enum name='XC_num_glyphs' value='154'/>
<enum name='XC_pencil' value='86'/>
<enum name='XC_pirate' value='88'/>
<enum name='XC_plus' value='90'/>
<enum name='XC_question_arrow' value='92'/>
<enum name='XC_right_ptr' value='94'/>
<enum name='XC_right_side' value='96'/>
<enum name='XC_right_tee' value='98'/>
<enum name='XC_rightbutton' value='100'/>
<enum name='XC_rtl_logo' value='102'/>
<enum name='XC_sailboat' value='104'/>
<enum name='XC_sb_down_arrow' value='106'/>
<enum name='XC_sb_h_double_arrow' value='108'/>
<enum name='XC_sb_left_arrow' value='110'/>
<enum name='XC_sb_right_arrow' value='112'/>
<enum name='XC_sb_up_arrow' value='114'/>
<enum name='XC_sb_v_double_arrow' value='116'/>
<enum name='XC_shuttle' value='118'/>
<enum name='XC_sizing' value='120'/>
<enum name='XC_spider' value='122'/>
<enum name='XC_spraycan' value='124'/>
<enum name='XC_star' value='126'/>
<enum name='XC_target' value='128'/>
<enum name='XC_tcross' value='130'/>
<enum name='XC_top_left_arrow' value='132'/>
<enum name='XC_top_left_corner' value='134'/>
<enum name='XC_top_right_corner' value='136'/>
<enum name='XC_top_side' value='138'/>
<enum name='XC_top_tee' value='140'/>
<enum name='XC_trek' value='142'/>
<enum name='XC_ul_angle' value='144'/>
<enum name='XC_umbrella' value='146'/>
<enum name='XC_ur_angle' value='148'/>
<enum name='XC_watch' value='150'/>
<enum name='XC_xterm' value='152'/>
<enum name='XCompoundTextStyle' value='1'/>
<enum name='XConverterNotFound' value='-3'/>
<enum name='XIMAbsolutePosition' value='10'/>
<enum name='XIMBackwardChar' value='1'/>
<enum name='XIMBackwardWord' value='3'/>
<enum name='XIMBitmapType' value='1'/>
<enum name='XIMCaretDown' value='5'/>
<enum name='XIMCaretUp' value='4'/>
<enum name='XIMDontChange' value='11'/>
<enum name='XIMForwardChar' value='0'/>
<enum name='XIMForwardWord' value='2'/>
<enum name='XIMHighlight' value='4'/>
<enum name='XIMIsInvisible' value='0'/>
<enum name='XIMIsPrimary' value='1'/>
<enum name='XIMIsSecondary' value='2'/>
<enum name='XIMLineEnd' value='9'/>
<enum name='XIMLineStart' value='8'/>
<enum name='XIMNextLine' value='6'/>
<enum name='XIMPreeditArea' value='1'/>
<enum name='XIMPreeditCallbacks' value='2'/>
<enum name='XIMPreeditNone' value='16'/>
<enum name='XIMPreeditNothing' value='8'/>
<enum name='XIMPreeditPosition' value='4'/>
<enum name='XIMPreviousLine' value='7'/>
<enum name='XIMPrimary' value='32'/>
<enum name='XIMReverse' value='1'/>
<enum name='XIMSecondary' value='64'/>
<enum name='XIMStatusArea' value='256'/>
<enum name='XIMStatusCallbacks' value='512'/>
<enum name='XIMStatusNone' value='2048'/>
<enum name='XIMStatusNothing' value='1024'/>
<enum name='XIMTertiary' value='128'/>
<enum name='XIMTextType' value='0'/>
<enum name='XIMUnderline' value='2'/>
<enum name='XK_VoidSymbol' value='16777215'/>
<enum name='XLFD_ADD_STYLE' value='5'/>
<enum name='XLFD_AVERAGE_WIDTH' value='11'/>
<enum name='XLFD_CHARSET' value='12'/>
<enum name='XLFD_FAMILY' value='1'/>
<enum name='XLFD_FOUNDRY' value='0'/>
<enum name='XLFD_NUMFIELDS' value='13'/>
<enum name='XLFD_PIXEL_SIZE' value='6'/>
<enum name='XLFD_POINT_SIZE' value='7'/>
<enum name='XLFD_RESOLUTION_X' value='8'/>
<enum name='XLFD_RESOLUTION_Y' value='9'/>
<enum name='XLFD_SETWIDTH' value='4'/>
<enum name='XLFD_SLANT' value='3'/>
<enum name='XLFD_SPACING' value='10'/>
<enum name='XLFD_WEIGHT' value='2'/>
<enum name='XLocaleNotSupported' value='-2'/>
<enum name='XLookupBoth' value='4'/>
<enum name='XLookupChars' value='2'/>
<enum name='XLookupKeySym' value='3'/>
<enum name='XLookupNone' value='1'/>
<enum name='XMaxTransChars' value='4'/>
<enum name='XNegative' value='16'/>
<enum name='XNoMemory' value='-1'/>
<enum name='XStdICCTextStyle' value='3'/>
<enum name='XStringStyle' value='0'/>
<enum name='XTextStyle' value='2'/>
<enum name='XValue' value='1'/>
<enum name='XYBitmap' value='0'/>
<enum name='XYPixmap' value='1'/>
<enum name='X_PROTOCOL' value='11'/>
<enum name='X_PROTOCOL_REVISION' value='0'/>
<enum name='XlibSpecificationRelease' value='5'/>
<enum name='YNegative' value='32'/>
<enum name='YSorted' value='1'/>
<enum name='YValue' value='2'/>
<enum name='YXBanded' value='3'/>
<enum name='YXSorted' value='2'/>
<enum name='ZPixmap' value='2'/>
<enum name='ZoomState' value='2'/>
<function name='TkAllocWindow'>
<arg declared_type='TkDisplay*' name='dispPtr' type='^{TkDisplay=}'/>
<arg declared_type='int' name='screenNum' type='i'/>
<arg declared_type='TkWindow*' name='parentPtr' type='^{TkWindow=}'/>
<retval declared_type='TkWindow*' type='^{TkWindow=}'/>
</function>
<function name='TkBackgroundEvalObjv'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkBezierPoints'>
<arg declared_type='double*' name='control' type='^d'/>
<arg declared_type='int' name='numSteps' type='i'/>
<arg declared_type='double*' name='coordPtr' type='^d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkBezierScreenPoints'>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double*' name='control' type='^d'/>
<arg declared_type='int' name='numSteps' type='i'/>
<arg declared_type='XPoint*' name='xPointPtr' type='^{_XPoint=ss}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkBindDeadWindow'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkBindEventProc'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<arg declared_type='XEvent*' name='eventPtr' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkBindFree'>
<arg declared_type='TkMainInfo*' name='mainPtr' type='^{TkMainInfo=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkBindInit'>
<arg declared_type='TkMainInfo*' name='mainPtr' type='^{TkMainInfo=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkCanvasDashParseProc'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='value' type='*'/>
<arg declared_type='char*' name='widgRec' type='*'/>
<arg declared_type='int' name='offset' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkCanvasDashPrintProc'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='char*' name='widgRec' type='*'/>
<arg declared_type='int' name='offset' type='i'/>
<arg declared_type='Tcl_FreeProc**' name='freeProcPtr' type='^^?'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TkCanvasGetCoordObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tcl_Obj*' name='obj' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='double*' name='doublePtr' type='^d'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkChangeEventWindow'>
<arg declared_type='XEvent*' name='eventPtr' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkClipCleanup'>
<arg declared_type='TkDisplay*' name='dispPtr' type='^{TkDisplay=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkClipInit'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='TkDisplay*' name='dispPtr' type='^{TkDisplay=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkComputeAnchor'>
<arg declared_type='Tk_Anchor' name='anchor' type='i'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='padX' type='i'/>
<arg declared_type='int' name='padY' type='i'/>
<arg declared_type='int' name='innerWidth' type='i'/>
<arg declared_type='int' name='innerHeight' type='i'/>
<arg declared_type='int*' name='xPtr' type='^i'/>
<arg declared_type='int*' name='yPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkCopyAndGlobalEval'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' name='script' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkCreateBindingProcedure'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='bindingTable' type='i'/>
<arg declared_type='ClientData' name='object' type='^v'/>
<arg const='true' declared_type='char*' name='eventString' type='*'/>
<arg declared_type='TkBindEvalProc*' function_pointer='true' name='evalProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='TkBindFreeProc*' function_pointer='true' name='freeProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='unsigned long' type='L' type64='Q'/>
</function>
<function name='TkCreateCursorFromData'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='source' type='*'/>
<arg const='true' declared_type='char*' name='mask' type='*'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='xHot' type='i'/>
<arg declared_type='int' name='yHot' type='i'/>
<arg declared_type='XColor' name='fg' type='{_XColor=LSSScc}' type64='{_XColor=QSSScc}'/>
<arg declared_type='XColor' name='bg' type='{_XColor=LSSScc}' type64='{_XColor=QSSScc}'/>
<retval declared_type='TkCursor*' type='^{TkCursor=^{Tk_Cursor_}^{_XDisplay}ii^{Tcl_HashTable}^{Tcl_HashEntry}^{Tcl_HashEntry}^{TkCursor}}'/>
</function>
<function name='TkCreateExitHandler'>
<arg declared_type='Tcl_ExitProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkCreateFrame'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='argc' type='i'/>
<arg declared_type='char**' name='argv' type='^*'/>
<arg declared_type='int' name='toplevel' type='i'/>
<arg declared_type='char*' name='appName' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkCreateMainWindow'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='screenName' type='*'/>
<arg declared_type='char*' name='baseName' type='*'/>
<retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
</function>
<function name='TkCreateMenuCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkCreateNamedFont'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='TkFontAttributes*' name='faPtr' type='^{TkFontAttributes=*iiiii}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkCreateThreadExitHandler'>
<arg declared_type='Tcl_ExitProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkCreateXEventSource'>
<retval declared_type='void' type='v'/>
</function>
<function name='TkCurrentTime'>
<arg declared_type='TkDisplay*' name='dispPtr' type='^{TkDisplay=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkDeadAppCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='argc' type='i'/>
<arg const='true' declared_type='char**' name='argv' type='^*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkDebugBitmap'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='char*' name='name' type='*'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TkDebugBorder'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='char*' name='name' type='*'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TkDebugColor'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='char*' name='name' type='*'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TkDebugConfig'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_OptionTable' name='table' type='^{Tk_OptionTable_=}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TkDebugCursor'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='char*' name='name' type='*'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TkDebugFont'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='char*' name='name' type='*'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TkDeleteAllImages'>
<arg declared_type='TkMainInfo*' name='mainPtr' type='^{TkMainInfo=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkDeleteExitHandler'>
<arg declared_type='Tcl_ExitProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkDeleteNamedFont'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkDeleteThreadExitHandler'>
<arg declared_type='Tcl_ExitProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkDoConfigureNotify'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkDrawInsetFocusHighlight'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='GC' name='gc' type='^{_GC=}'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='drawable' type='i'/>
<arg declared_type='int' name='padding' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkEventDeadWindow'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkEventInit'>
<retval declared_type='void' type='v'/>
</function>
<function name='TkFillPolygon'>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double*' name='coordPtr' type='^d'/>
<arg declared_type='int' name='numPoints' type='i'/>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='int' name='drawable' type='i'/>
<arg declared_type='GC' name='gc' type='^{_GC=}'/>
<arg declared_type='GC' name='outlineGC' type='^{_GC=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkFinalize'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkFinalizeThread'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkFindStateNum'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='option' type='*'/>
<arg const='true' declared_type='TkStateMap*' name='mapPtr' type='^{TkStateMap=i*}'/>
<arg const='true' declared_type='char*' name='strKey' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkFindStateNumObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='optionPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='TkStateMap*' name='mapPtr' type='^{TkStateMap=i*}'/>
<arg declared_type='Tcl_Obj*' name='keyPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkFindStateString'>
<arg const='true' declared_type='TkStateMap*' name='mapPtr' type='^{TkStateMap=i*}'/>
<arg declared_type='int' name='numKey' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TkFocusDeadWindow'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkFocusFilterEvent'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<arg declared_type='XEvent*' name='eventPtr' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkFocusFree'>
<arg declared_type='TkMainInfo*' name='mainPtr' type='^{TkMainInfo=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkFocusJoin'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkFocusKeyEvent'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<arg declared_type='XEvent*' name='eventPtr' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='TkWindow*' type='^{TkWindow=}'/>
</function>
<function name='TkFocusSplit'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkFontGetAliasList'>
<arg const='true' declared_type='char*' name='faceName' type='*'/>
<retval declared_type='char**' type='^*'/>
</function>
<function name='TkFontGetFallbacks'>
<retval declared_type='char***' type='^^*'/>
</function>
<function name='TkFontGetFirstTextLayout'>
<arg declared_type='Tk_TextLayout' name='layout' type='^{Tk_TextLayout_=}'/>
<arg declared_type='Tk_Font*' name='font' type='^^{Tk_Font_}'/>
<arg declared_type='char*' name='dst' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkFontGetGlobalClass'>
<retval declared_type='char**' type='^*'/>
</function>
<function name='TkFontGetPixels'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='size' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkFontGetPoints'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='size' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkFontGetSymbolClass'>
<retval declared_type='char**' type='^*'/>
</function>
<function name='TkFontParseXLFD'>
<arg const='true' declared_type='char*' name='string' type='*'/>
<arg declared_type='TkFontAttributes*' name='faPtr' type='^{TkFontAttributes=*iiiii}'/>
<arg declared_type='TkXLFDAttributes*' name='xaPtr' type='^{TkXLFDAttributes=*ii*}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkFontPkgFree'>
<arg declared_type='TkMainInfo*' name='mainPtr' type='^{TkMainInfo=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkFontPkgInit'>
<arg declared_type='TkMainInfo*' name='mainPtr' type='^{TkMainInfo=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkFreeBindingTags'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkFreeWindowId'>
<arg declared_type='TkDisplay*' name='dispPtr' type='^{TkDisplay=}'/>
<arg declared_type='Window*' function_pointer='true' name='w' type='^?'>
<retval declared_type='int' type='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='TkFreeXId'>
<arg declared_type='TkDisplay*' name='dispPtr' type='^{TkDisplay=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkGCCleanup'>
<arg declared_type='TkDisplay*' name='dispPtr' type='^{TkDisplay=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkGetBitmapData'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' name='string' type='*'/>
<arg declared_type='char*' name='fileName' type='*'/>
<arg declared_type='int*' name='widthPtr' type='^i'/>
<arg declared_type='int*' name='heightPtr' type='^i'/>
<arg declared_type='int*' name='hotXPtr' type='^i'/>
<arg declared_type='int*' name='hotYPtr' type='^i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TkGetBitmapPredefTable'>
<retval declared_type='Tcl_HashTable*' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
</function>
<function name='TkGetButtPoints'>
<arg declared_type='double*' name='p1' type='^d'/>
<arg declared_type='double*' name='p2' type='^d'/>
<arg declared_type='double' name='width' type='d'/>
<arg declared_type='int' name='project' type='i'/>
<arg declared_type='double*' name='m1' type='^d'/>
<arg declared_type='double*' name='m2' type='^d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkGetCursorByName'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_Uid' name='string' type='*'/>
<retval declared_type='TkCursor*' type='^{TkCursor=^{Tk_Cursor_}^{_XDisplay}ii^{Tcl_HashTable}^{Tcl_HashEntry}^{Tcl_HashEntry}^{TkCursor}}'/>
</function>
<function name='TkGetDefaultScreenName'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='screenName' type='*'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='TkGetDisplay'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<retval declared_type='TkDisplay*' type='^{TkDisplay=}'/>
</function>
<function name='TkGetDisplayList'>
<retval declared_type='TkDisplay*' type='^{TkDisplay=}'/>
</function>
<function name='TkGetDisplayOf'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<arg declared_type='Tk_Window*' name='tkwinPtr' type='^^{Tk_Window_}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkGetDoublePixels'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='string' type='*'/>
<arg declared_type='double*' name='doublePtr' type='^d'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkGetFocusWin'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='TkWindow*' type='^{TkWindow=}'/>
</function>
<function name='TkGetInterpNames'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkGetMainInfoList'>
<retval declared_type='TkMainInfo*' type='^{TkMainInfo=}'/>
</function>
<function name='TkGetMiterPoints'>
<arg declared_type='double*' name='p1' type='^d'/>
<arg declared_type='double*' name='p2' type='^d'/>
<arg declared_type='double*' name='p3' type='^d'/>
<arg declared_type='double' name='width' type='d'/>
<arg declared_type='double*' name='m1' type='^d'/>
<arg declared_type='double*' name='m2' type='^d'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkGetOptionSpec'>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='Tk_OptionTable' name='optionTable' type='^{Tk_OptionTable_=}'/>
<retval const='true' declared_type='Tk_OptionSpec*' type='^{Tk_OptionSpec=i****iii^vi}'/>
</function>
<function name='TkGetPointerCoords'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int*' name='xPtr' type='^i'/>
<arg declared_type='int*' name='yPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkGetServerInfo'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkGetWindowFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tk_Window*' name='windowPtr' type='^^{Tk_Window_}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkGrabDeadWindow'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkGrabState'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkInOutEvents'>
<arg declared_type='XEvent*' name='eventPtr' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<arg declared_type='TkWindow*' name='sourcePtr' type='^{TkWindow=}'/>
<arg declared_type='TkWindow*' name='destPtr' type='^{TkWindow=}'/>
<arg declared_type='int' name='leaveType' type='i'/>
<arg declared_type='int' name='enterType' type='i'/>
<arg declared_type='Tcl_QueuePosition' name='position' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkIncludePoint'>
<arg declared_type='Tk_Item*' name='itemPtr' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='double*' name='pointPtr' type='^d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkInitXId'>
<arg declared_type='TkDisplay*' name='dispPtr' type='^{TkDisplay=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkInstallFrameMenu'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkKeysymToString'>
<arg declared_type='int' name='keysym' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TkLineToArea'>
<arg declared_type='double*' name='end1Ptr' type='^d'/>
<arg declared_type='double*' name='end2Ptr' type='^d'/>
<arg declared_type='double*' name='rectPtr' type='^d'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkLineToPoint'>
<arg declared_type='double*' name='end1Ptr' type='^d'/>
<arg declared_type='double*' name='end2Ptr' type='^d'/>
<arg declared_type='double*' name='pointPtr' type='^d'/>
<retval declared_type='double' type='d'/>
</function>
<function name='TkMacOSXDefaultStartupScript'>
<retval declared_type='void' type='v'/>
</function>
<function name='TkMakeBezierCurve'>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double*' name='pointPtr' type='^d'/>
<arg declared_type='int' name='numPoints' type='i'/>
<arg declared_type='int' name='numSteps' type='i'/>
<arg declared_type='XPoint*' name='xPoints' type='^{_XPoint=ss}'/>
<arg declared_type='double*' name='dblPoints' type='^d'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkMakeBezierPostscript'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double*' name='pointPtr' type='^d'/>
<arg declared_type='int' name='numPoints' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkMakeRawCurve'>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double*' name='pointPtr' type='^d'/>
<arg declared_type='int' name='numPoints' type='i'/>
<arg declared_type='int' name='numSteps' type='i'/>
<arg declared_type='XPoint*' name='xPoints' type='^{_XPoint=ss}'/>
<arg declared_type='double*' name='dblPoints' type='^d'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkMakeRawCurvePostscript'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double*' name='pointPtr' type='^d'/>
<arg declared_type='int' name='numPoints' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkMapTopFrame'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkOffsetParseProc'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='value' type='*'/>
<arg declared_type='char*' name='widgRec' type='*'/>
<arg declared_type='int' name='offset' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkOffsetPrintProc'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='char*' name='widgRec' type='*'/>
<arg declared_type='int' name='offset' type='i'/>
<arg declared_type='Tcl_FreeProc**' name='freeProcPtr' type='^^?'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TkOptionClassChanged'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkOptionDeadWindow'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkOrientParseProc'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='value' type='*'/>
<arg declared_type='char*' name='widgRec' type='*'/>
<arg declared_type='int' name='offset' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkOrientPrintProc'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='char*' name='widgRec' type='*'/>
<arg declared_type='int' name='offset' type='i'/>
<arg declared_type='Tcl_FreeProc**' name='freeProcPtr' type='^^?'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TkOvalToArea'>
<arg declared_type='double*' name='ovalPtr' type='^d'/>
<arg declared_type='double*' name='rectPtr' type='^d'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkOvalToPoint'>
<arg declared_type='double*' name='ovalPtr' type='^d'/>
<arg declared_type='double' name='width' type='d'/>
<arg declared_type='int' name='filled' type='i'/>
<arg declared_type='double*' name='pointPtr' type='^d'/>
<retval declared_type='double' type='d'/>
</function>
<function name='TkParsePadAmount'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' name='pad1Ptr' type='^i'/>
<arg declared_type='int*' name='pad2Ptr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkPhotoGetValidRegion'>
<arg declared_type='Tk_PhotoHandle' name='handle' type='^v'/>
<retval declared_type='TkRegion' type='^{TkRegion_=}'/>
</function>
<function name='TkPixelParseProc'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='value' type='*'/>
<arg declared_type='char*' name='widgRec' type='*'/>
<arg declared_type='int' name='offset' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkPixelPrintProc'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='char*' name='widgRec' type='*'/>
<arg declared_type='int' name='offset' type='i'/>
<arg declared_type='Tcl_FreeProc**' name='freeProcPtr' type='^^?'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TkPointerEvent'>
<arg declared_type='XEvent*' name='eventPtr' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkPolygonToArea'>
<arg declared_type='double*' name='polyPtr' type='^d'/>
<arg declared_type='int' name='numPoints' type='i'/>
<arg declared_type='double*' name='rectPtr' type='^d'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkPolygonToPoint'>
<arg declared_type='double*' name='polyPtr' type='^d'/>
<arg declared_type='int' name='numPoints' type='i'/>
<arg declared_type='double*' name='pointPtr' type='^d'/>
<retval declared_type='double' type='d'/>
</function>
<function name='TkPositionInTree'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<arg declared_type='TkWindow*' name='treePtr' type='^{TkWindow=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkPostscriptImage'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_PostscriptInfo' name='psInfo' type='^{Tk_PostscriptInfo_=}'/>
<arg declared_type='XImage*' name='ximage' type='^{_XImage=iiii*iiiiiiiLLL*{funcs=^?^?^?^?^?^?}}' type64='^{_XImage=iiii*iiiiiiiQQQ*{funcs=^?^?^?^?^?^?}}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkPrintPadAmount'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' name='buffer' type='*'/>
<arg declared_type='int' name='pad1' type='i'/>
<arg declared_type='int' name='pad2' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkQueueEventForAllChildren'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<arg declared_type='XEvent*' name='eventPtr' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkReadBitmapFile'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='int' name='d' type='i'/>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<arg declared_type='unsigned int*' name='width_return' type='^I'/>
<arg declared_type='unsigned int*' name='height_return' type='^I'/>
<arg declared_type='int*' name='bitmap_return' type='^i'/>
<arg declared_type='int*' name='x_hot_return' type='^i'/>
<arg declared_type='int*' name='y_hot_return' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkRegisterObjTypes'>
<retval declared_type='void' type='v'/>
</function>
<function name='TkScrollWindow'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='GC' name='gc' type='^{_GC=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='dx' type='i'/>
<arg declared_type='int' name='dy' type='i'/>
<arg declared_type='TkRegion' name='damageRgn' type='^{TkRegion_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkSelDeadWindow'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkSelEventProc'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='XEvent*' name='eventPtr' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkSelInit'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkSelPropProc'>
<arg declared_type='XEvent*' name='eventPtr' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkSendCleanup'>
<arg declared_type='TkDisplay*' name='dispPtr' type='^{TkDisplay=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkSetFocusWin'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<arg declared_type='int' name='force' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkSetWindowMenuBar'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='char*' name='oldMenuName' type='*'/>
<arg declared_type='char*' name='menuName' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkSmoothParseProc'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='value' type='*'/>
<arg declared_type='char*' name='widgRec' type='*'/>
<arg declared_type='int' name='offset' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkSmoothPrintProc'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='char*' name='widgRec' type='*'/>
<arg declared_type='int' name='offset' type='i'/>
<arg declared_type='Tcl_FreeProc**' name='freeProcPtr' type='^^?'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TkStateParseProc'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='value' type='*'/>
<arg declared_type='char*' name='widgRec' type='*'/>
<arg declared_type='int' name='offset' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkStatePrintProc'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='char*' name='widgRec' type='*'/>
<arg declared_type='int' name='offset' type='i'/>
<arg declared_type='Tcl_FreeProc**' name='freeProcPtr' type='^^?'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TkStringToKeysym'>
<arg declared_type='char*' name='name' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkStylePkgFree'>
<arg declared_type='TkMainInfo*' name='mainPtr' type='^{TkMainInfo=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkStylePkgInit'>
<arg declared_type='TkMainInfo*' name='mainPtr' type='^{TkMainInfo=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkThickPolyLineToArea'>
<arg declared_type='double*' name='coordPtr' type='^d'/>
<arg declared_type='int' name='numPoints' type='i'/>
<arg declared_type='double' name='width' type='d'/>
<arg declared_type='int' name='capStyle' type='i'/>
<arg declared_type='int' name='joinStyle' type='i'/>
<arg declared_type='double*' name='rectPtr' type='^d'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkToplevelWindowForCommand'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='cmdName' type='*'/>
<retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
</function>
<function name='TkUnderlineCharsInContext'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='int' name='drawable' type='i'/>
<arg declared_type='GC' name='gc' type='^{_GC=}'/>
<arg declared_type='Tk_Font' name='tkfont' type='^{Tk_Font_=}'/>
<arg const='true' declared_type='char*' name='string' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='firstByte' type='i'/>
<arg declared_type='int' name='lastByte' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkUnixContainerId'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkUnixDoOneXEvent'>
<arg declared_type='Tcl_Time*' name='timePtr' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkUnixSetMenubar'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_Window' name='menubar' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkUnsupported1ObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkWmAddToColormapWindows'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkWmCleanup'>
<arg declared_type='TkDisplay*' name='dispPtr' type='^{TkDisplay=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkWmDeadWindow'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkWmFocusToplevel'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='TkWindow*' type='^{TkWindow=}'/>
</function>
<function name='TkWmMapWindow'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkWmNewWindow'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkWmProtocolEventProc'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<arg declared_type='XEvent*' name='evenvPtr' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkWmRemoveFromColormapWindows'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkWmRestackToplevel'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<arg declared_type='int' name='aboveBelow' type='i'/>
<arg declared_type='TkWindow*' name='otherPtr' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkWmSetClass'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkWmStackorderToplevel'>
<arg declared_type='TkWindow*' name='parentPtr' type='^{TkWindow=}'/>
<retval declared_type='TkWindow**' type='^^{TkWindow}'/>
</function>
<function name='TkWmUnmapWindow'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_3DBorderColor'>
<arg declared_type='Tk_3DBorder' name='border' type='^{Tk_3DBorder_=}'/>
<retval declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
</function>
<function name='Tk_3DBorderGC'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_3DBorder' name='border' type='^{Tk_3DBorder_=}'/>
<arg declared_type='int' name='which' type='i'/>
<retval declared_type='GC' type='^{_GC=}'/>
</function>
<function name='Tk_3DHorizontalBevel'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='drawable' type='i'/>
<arg declared_type='Tk_3DBorder' name='border' type='^{Tk_3DBorder_=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='leftIn' type='i'/>
<arg declared_type='int' name='rightIn' type='i'/>
<arg declared_type='int' name='topBevel' type='i'/>
<arg declared_type='int' name='relief' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_3DVerticalBevel'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='drawable' type='i'/>
<arg declared_type='Tk_3DBorder' name='border' type='^{Tk_3DBorder_=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='leftBevel' type='i'/>
<arg declared_type='int' name='relief' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_AddOption'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg const='true' declared_type='char*' name='value' type='*'/>
<arg declared_type='int' name='priority' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_Alloc3DBorderFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
</function>
<function name='Tk_AllocBitmapFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_AllocColorFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
</function>
<function name='Tk_AllocCursorFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
</function>
<function name='Tk_AllocFontFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tk_Font' type='^{Tk_Font_=}'/>
</function>
<function name='Tk_AllocStyleFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tk_Style' type='^{Tk_Style_=}'/>
</function>
<function name='Tk_BellObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_BindEvent'>
<arg declared_type='int' name='bindingTable' type='i'/>
<arg declared_type='XEvent*' name='eventPtr' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='numObjects' type='i'/>
<arg declared_type='ClientData*' name='objectPtr' type='^^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_BindObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_BindtagsObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_ButtonObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_CanvasDrawableCoords'>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double' name='x' type='d'/>
<arg declared_type='double' name='y' type='d'/>
<arg declared_type='short*' name='drawableXPtr' type='^s'/>
<arg declared_type='short*' name='drawableYPtr' type='^s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_CanvasEventuallyRedraw'>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='int' name='x1' type='i'/>
<arg declared_type='int' name='y1' type='i'/>
<arg declared_type='int' name='x2' type='i'/>
<arg declared_type='int' name='y2' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_CanvasGetCoord'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg declared_type='double*' name='doublePtr' type='^d'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_CanvasGetCoordFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tcl_Obj*' name='obj' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='double*' name='doublePtr' type='^d'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_CanvasGetTextInfo'>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<retval declared_type='Tk_CanvasTextInfo*' type='^{Tk_CanvasTextInfo=^{Tk_3DBorder_}i^{_XColor=LSSScc}^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}ii^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}i^{Tk_3DBorder_}ii^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}ii}' type64='^{Tk_CanvasTextInfo=^{Tk_3DBorder_}i^{_XColor=QSSScc}^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}ii^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}i^{Tk_3DBorder_}ii^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}ii}'/>
</function>
<function name='Tk_CanvasObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='argc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_CanvasPsBitmap'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='int' name='bitmap' type='i'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_CanvasPsColor'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='XColor*' name='colorPtr' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_CanvasPsFont'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Font' name='font' type='^{Tk_Font_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_CanvasPsOutline'>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' name='item' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='Tk_Outline*' name='outline' type='^{Tk_Outline=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_CanvasPsPath'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double*' name='coordPtr' type='^d'/>
<arg declared_type='int' name='numPoints' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_CanvasPsStipple'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='int' name='bitmap' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_CanvasPsY'>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double' name='y' type='d'/>
<retval declared_type='double' type='d'/>
</function>
<function name='Tk_CanvasSetOffset'>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='GC' name='gc' type='^{_GC=}'/>
<arg declared_type='Tk_TSOffset*' name='offset' type='^{Tk_TSOffset=iii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_CanvasSetStippleOrigin'>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='GC' name='gc' type='^{_GC=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_CanvasTagsParseProc'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='value' type='*'/>
<arg declared_type='char*' name='widgRec' type='*'/>
<arg declared_type='int' name='offset' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_CanvasTagsPrintProc'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='char*' name='widgRec' type='*'/>
<arg declared_type='int' name='offset' type='i'/>
<arg declared_type='Tcl_FreeProc**' name='freeProcPtr' type='^^?'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tk_CanvasTkwin'>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
</function>
<function name='Tk_CanvasWindowCoords'>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='double' name='x' type='d'/>
<arg declared_type='double' name='y' type='d'/>
<arg declared_type='short*' name='screenXPtr' type='^s'/>
<arg declared_type='short*' name='screenYPtr' type='^s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_ChangeOutlineGC'>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' name='item' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='Tk_Outline*' name='outline' type='^{Tk_Outline=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_ChangeWindowAttributes'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='unsigned long' name='valueMask' type='L' type64='Q'/>
<arg declared_type='XSetWindowAttributes*' name='attsPtr' type='^{_XSetWindowAttributes=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_CharBbox'>
<arg declared_type='Tk_TextLayout' name='layout' type='^{Tk_TextLayout_=}'/>
<arg declared_type='int' name='index' type='i'/>
<arg declared_type='int*' name='xPtr' type='^i'/>
<arg declared_type='int*' name='yPtr' type='^i'/>
<arg declared_type='int*' name='widthPtr' type='^i'/>
<arg declared_type='int*' name='heightPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_CheckbuttonObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_ChooseColorObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_ChooseDirectoryObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_ChooseFontObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_ClearSelection'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='selection' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_ClipboardAppend'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='target' type='i'/>
<arg declared_type='int' name='format' type='i'/>
<arg declared_type='char*' name='buffer' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_ClipboardClear'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_ClipboardObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_CollapseMotionEvents'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='int' name='collapse' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_ComputeTextLayout'>
<arg declared_type='Tk_Font' name='font' type='^{Tk_Font_=}'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg declared_type='int' name='numChars' type='i'/>
<arg declared_type='int' name='wrapLength' type='i'/>
<arg declared_type='Tk_Justify' name='justify' type='i'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='int*' name='widthPtr' type='^i'/>
<arg declared_type='int*' name='heightPtr' type='^i'/>
<retval declared_type='Tk_TextLayout' type='^{Tk_TextLayout_=}'/>
</function>
<function name='Tk_ConfigOutlineGC'>
<arg declared_type='XGCValues*' name='gcValues' type='^{_XGCValues=}'/>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' name='item' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='Tk_Outline*' name='outline' type='^{Tk_Outline=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_ConfigureInfo'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_ConfigSpec*' name='specs' type='^{Tk_ConfigSpec=i****ii^{Tk_CustomOption}}'/>
<arg declared_type='char*' name='widgRec' type='*'/>
<arg const='true' declared_type='char*' name='argvName' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_ConfigureValue'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_ConfigSpec*' name='specs' type='^{Tk_ConfigSpec=i****ii^{Tk_CustomOption}}'/>
<arg declared_type='char*' name='widgRec' type='*'/>
<arg const='true' declared_type='char*' name='argvName' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_ConfigureWidget'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_ConfigSpec*' name='specs' type='^{Tk_ConfigSpec=i****ii^{Tk_CustomOption}}'/>
<arg declared_type='int' name='argc' type='i'/>
<arg const='true' declared_type='char**' name='argv' type='^*'/>
<arg declared_type='char*' name='widgRec' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_ConfigureWindow'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='unsigned int' name='valueMask' type='I'/>
<arg declared_type='XWindowChanges*' name='valuePtr' type='^{_XWindowChanges=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_CoordsToWindow'>
<arg declared_type='int' name='rootX' type='i'/>
<arg declared_type='int' name='rootY' type='i'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
</function>
<function name='Tk_CreateAnonymousWindow'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='parent' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='screenName' type='*'/>
<retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
</function>
<function name='Tk_CreateBinding'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='bindingTable' type='i'/>
<arg declared_type='ClientData' name='object' type='^v'/>
<arg const='true' declared_type='char*' name='eventStr' type='*'/>
<arg const='true' declared_type='char*' name='command' type='*'/>
<arg declared_type='int' name='append' type='i'/>
<retval declared_type='unsigned long' type='L' type64='Q'/>
</function>
<function name='Tk_CreateBindingTable'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_CreateClientMessageHandler'>
<arg declared_type='Tk_ClientMessageProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='int' type='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_CreateConsoleWindow'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_CreateErrorHandler'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='int' name='errNum' type='i'/>
<arg declared_type='int' name='request' type='i'/>
<arg declared_type='int' name='minorCode' type='i'/>
<arg declared_type='Tk_ErrorProc*' function_pointer='true' name='errorProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='XErrorEvent*' type='^{_XErrorEvent=}'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='Tk_ErrorHandler' type='^{Tk_ErrorHandler_=}'/>
</function>
<function name='Tk_CreateEventHandler'>
<arg declared_type='Tk_Window' name='token' type='^{Tk_Window_=}'/>
<arg declared_type='unsigned long' name='mask' type='L' type64='Q'/>
<arg declared_type='Tk_EventProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_CreateGenericHandler'>
<arg declared_type='Tk_GenericProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_CreateImageType'>
<arg declared_type='Tk_ImageType*' name='typePtr' type='^{Tk_ImageType=*^?^?^?^?^?^?^{Tk_ImageType}*}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_CreateItemType'>
<arg declared_type='Tk_ItemType*' name='typePtr' type='^{Tk_ItemType=*i^?^{Tk_ConfigSpec}^?^?^?^?i^?^?^?^?^?^?^?^?^?^?^{Tk_ItemType}*i**}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_CreateOldImageType'>
<arg declared_type='Tk_ImageType*' name='typePtr' type='^{Tk_ImageType=*^?^?^?^?^?^?^{Tk_ImageType}*}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_CreateOldPhotoImageFormat'>
<arg declared_type='Tk_PhotoImageFormat*' name='formatPtr' type='^{Tk_PhotoImageFormat=*^?^?^?^?^?^?^{Tk_PhotoImageFormat}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_CreateOptionTable'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='Tk_OptionSpec*' name='templatePtr' type='^{Tk_OptionSpec=i****iii^vi}'/>
<retval declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
</function>
<function name='Tk_CreateOutline'>
<arg declared_type='Tk_Outline*' name='outline' type='^{Tk_Outline=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_CreatePhotoImageFormat'>
<arg declared_type='Tk_PhotoImageFormat*' name='formatPtr' type='^{Tk_PhotoImageFormat=*^?^?^?^?^?^?^{Tk_PhotoImageFormat}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_CreateSelHandler'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='selection' type='i'/>
<arg declared_type='int' name='target' type='i'/>
<arg declared_type='Tk_SelectionProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='int' name='format' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_CreateSmoothMethod'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_SmoothMethod*' name='method' type='^{Tk_SmoothMethod=*^?^?}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_CreateStyle'>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='Tk_StyleEngine' name='engine' type='^{Tk_StyleEngine_=}'/>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='Tk_Style' type='^{Tk_Style_=}'/>
</function>
<function name='Tk_CreateWindow'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='parent' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg const='true' declared_type='char*' name='screenName' type='*'/>
<retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
</function>
<function name='Tk_CreateWindowFromPath'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='pathName' type='*'/>
<arg const='true' declared_type='char*' name='screenName' type='*'/>
<retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
</function>
<function name='Tk_DefineBitmap'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg const='true' declared_type='char*' name='source' type='*'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_DefineCursor'>
<arg declared_type='Tk_Window' name='window' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_Cursor' name='cursor' type='^{Tk_Cursor_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_DeleteAllBindings'>
<arg declared_type='int' name='bindingTable' type='i'/>
<arg declared_type='ClientData' name='object' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_DeleteBinding'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='bindingTable' type='i'/>
<arg declared_type='ClientData' name='object' type='^v'/>
<arg const='true' declared_type='char*' name='eventStr' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_DeleteBindingTable'>
<arg declared_type='int' name='bindingTable' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_DeleteClientMessageHandler'>
<arg declared_type='Tk_ClientMessageProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='int' type='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_DeleteErrorHandler'>
<arg declared_type='Tk_ErrorHandler' name='handler' type='^{Tk_ErrorHandler_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_DeleteEventHandler'>
<arg declared_type='Tk_Window' name='token' type='^{Tk_Window_=}'/>
<arg declared_type='unsigned long' name='mask' type='L' type64='Q'/>
<arg declared_type='Tk_EventProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_DeleteGenericHandler'>
<arg declared_type='Tk_GenericProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_DeleteImage'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_DeleteOptionTable'>
<arg declared_type='Tk_OptionTable' name='optionTable' type='^{Tk_OptionTable_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_DeleteOutline'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='Tk_Outline*' name='outline' type='^{Tk_Outline=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_DeleteSelHandler'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='selection' type='i'/>
<arg declared_type='int' name='target' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_DestroyObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_DestroyWindow'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_DisplayName'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tk_DistanceToTextLayout'>
<arg declared_type='Tk_TextLayout' name='layout' type='^{Tk_TextLayout_=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_DitherPhoto'>
<arg declared_type='Tk_PhotoHandle' name='handle' type='^v'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_Draw3DPolygon'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='drawable' type='i'/>
<arg declared_type='Tk_3DBorder' name='border' type='^{Tk_3DBorder_=}'/>
<arg declared_type='XPoint*' name='pointPtr' type='^{_XPoint=ss}'/>
<arg declared_type='int' name='numPoints' type='i'/>
<arg declared_type='int' name='borderWidth' type='i'/>
<arg declared_type='int' name='leftRelief' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_Draw3DRectangle'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='drawable' type='i'/>
<arg declared_type='Tk_3DBorder' name='border' type='^{Tk_3DBorder_=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='borderWidth' type='i'/>
<arg declared_type='int' name='relief' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_DrawChars'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='int' name='drawable' type='i'/>
<arg declared_type='GC' name='gc' type='^{_GC=}'/>
<arg declared_type='Tk_Font' name='tkfont' type='^{Tk_Font_=}'/>
<arg const='true' declared_type='char*' name='source' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_DrawElement'>
<arg declared_type='Tk_Style' name='style' type='^{Tk_Style_=}'/>
<arg declared_type='Tk_StyledElement' name='element' type='^{Tk_StyledElement_=}'/>
<arg declared_type='char*' name='recordPtr' type='*'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='d' type='i'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='state' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_DrawFocusHighlight'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='GC' name='gc' type='^{_GC=}'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='drawable' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_DrawTextLayout'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='int' name='drawable' type='i'/>
<arg declared_type='GC' name='gc' type='^{_GC=}'/>
<arg declared_type='Tk_TextLayout' name='layout' type='^{Tk_TextLayout_=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='firstChar' type='i'/>
<arg declared_type='int' name='lastChar' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_EntryObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_EventObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_Fill3DPolygon'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='drawable' type='i'/>
<arg declared_type='Tk_3DBorder' name='border' type='^{Tk_3DBorder_=}'/>
<arg declared_type='XPoint*' name='pointPtr' type='^{_XPoint=ss}'/>
<arg declared_type='int' name='numPoints' type='i'/>
<arg declared_type='int' name='borderWidth' type='i'/>
<arg declared_type='int' name='leftRelief' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_Fill3DRectangle'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='drawable' type='i'/>
<arg declared_type='Tk_3DBorder' name='border' type='^{Tk_3DBorder_=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='borderWidth' type='i'/>
<arg declared_type='int' name='relief' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_FindPhoto'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='imageName' type='*'/>
<retval declared_type='Tk_PhotoHandle' type='^v'/>
</function>
<function name='Tk_FocusObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_FontId'>
<arg declared_type='Tk_Font' name='font' type='^{Tk_Font_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_FontObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_FrameObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_Free3DBorder'>
<arg declared_type='Tk_3DBorder' name='border' type='^{Tk_3DBorder_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_Free3DBorderFromObj'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_FreeBitmap'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='int' name='bitmap' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_FreeBitmapFromObj'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_FreeColor'>
<arg declared_type='XColor*' name='colorPtr' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_FreeColorFromObj'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_FreeColormap'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='int' name='colormap' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_FreeConfigOptions'>
<arg declared_type='char*' name='recordPtr' type='*'/>
<arg declared_type='Tk_OptionTable' name='optionToken' type='^{Tk_OptionTable_=}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_FreeCursor'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='Tk_Cursor' name='cursor' type='^{Tk_Cursor_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_FreeCursorFromObj'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_FreeFont'>
<arg declared_type='Tk_Font' name='f' type='^{Tk_Font_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_FreeFontFromObj'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_FreeGC'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='GC' name='gc' type='^{_GC=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_FreeImage'>
<arg declared_type='Tk_Image' name='image' type='^{Tk_Image__=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_FreeOptions'>
<arg declared_type='Tk_ConfigSpec*' name='specs' type='^{Tk_ConfigSpec=i****ii^{Tk_CustomOption}}'/>
<arg declared_type='char*' name='widgRec' type='*'/>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='int' name='needFlags' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_FreePixmap'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='int' name='pixmap' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_FreeSavedOptions'>
<arg declared_type='Tk_SavedOptions*' name='savePtr' type='^{Tk_SavedOptions=*^{Tk_Window_}i[20{Tk_SavedOption=^{TkOption}^{Tcl_Obj}d}]^{Tk_SavedOptions}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_FreeStyle'>
<arg declared_type='Tk_Style' name='style' type='^{Tk_Style_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_FreeStyleFromObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_FreeTextLayout'>
<arg declared_type='Tk_TextLayout' name='textLayout' type='^{Tk_TextLayout_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_FreeXId'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='int' name='xid' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_GCForColor'>
<arg declared_type='XColor*' name='colorPtr' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
<arg declared_type='int' name='drawable' type='i'/>
<retval declared_type='GC' type='^{_GC=}'/>
</function>
<function name='Tk_GeometryRequest'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='reqWidth' type='i'/>
<arg declared_type='int' name='reqHeight' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_Get3DBorder'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_Uid' name='colorName' type='*'/>
<retval declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
</function>
<function name='Tk_Get3DBorderFromObj'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tk_3DBorder' type='^{Tk_3DBorder_=}'/>
</function>
<function name='Tk_GetAllBindings'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='bindingTable' type='i'/>
<arg declared_type='ClientData' name='object' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_GetAnchor'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg declared_type='Tk_Anchor*' name='anchorPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetAnchorFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tk_Anchor*' name='anchorPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetAtomName'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='atom' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tk_GetBinding'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='bindingTable' type='i'/>
<arg declared_type='ClientData' name='object' type='^v'/>
<arg const='true' declared_type='char*' name='eventStr' type='*'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tk_GetBitmap'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetBitmapFromData'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='source' type='*'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetBitmapFromObj'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetCapStyle'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg declared_type='int*' name='capPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetColor'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_Uid' name='name' type='*'/>
<retval declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
</function>
<function name='Tk_GetColorByValue'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='XColor*' name='colorPtr' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
<retval declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
</function>
<function name='Tk_GetColorFromObj'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
</function>
<function name='Tk_GetColormap'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetCursor'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_Uid' name='str' type='*'/>
<retval declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
</function>
<function name='Tk_GetCursorFromData'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='source' type='*'/>
<arg const='true' declared_type='char*' name='mask' type='*'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='xHot' type='i'/>
<arg declared_type='int' name='yHot' type='i'/>
<arg declared_type='Tk_Uid' name='fg' type='*'/>
<arg declared_type='Tk_Uid' name='bg' type='*'/>
<retval declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
</function>
<function name='Tk_GetCursorFromObj'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tk_Cursor' type='^{Tk_Cursor_=}'/>
</function>
<function name='Tk_GetDash'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='value' type='*'/>
<arg declared_type='Tk_Dash*' name='dash' type='^{Tk_Dash=i(?=*[4c])}' type64='^{Tk_Dash=i(?=*[8c])}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetDoublePixelsFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='double*' name='doublePtr' type='^d'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetElementBorderWidth'>
<arg declared_type='Tk_Style' name='style' type='^{Tk_Style_=}'/>
<arg declared_type='Tk_StyledElement' name='element' type='^{Tk_StyledElement_=}'/>
<arg declared_type='char*' name='recordPtr' type='*'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetElementBox'>
<arg declared_type='Tk_Style' name='style' type='^{Tk_Style_=}'/>
<arg declared_type='Tk_StyledElement' name='element' type='^{Tk_StyledElement_=}'/>
<arg declared_type='char*' name='recordPtr' type='*'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='inner' type='i'/>
<arg declared_type='int*' name='xPtr' type='^i'/>
<arg declared_type='int*' name='yPtr' type='^i'/>
<arg declared_type='int*' name='widthPtr' type='^i'/>
<arg declared_type='int*' name='heightPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_GetElementId'>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetElementSize'>
<arg declared_type='Tk_Style' name='style' type='^{Tk_Style_=}'/>
<arg declared_type='Tk_StyledElement' name='element' type='^{Tk_StyledElement_=}'/>
<arg declared_type='char*' name='recordPtr' type='*'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='inner' type='i'/>
<arg declared_type='int*' name='widthPtr' type='^i'/>
<arg declared_type='int*' name='heightPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_GetFont'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<retval declared_type='Tk_Font' type='^{Tk_Font_=}'/>
</function>
<function name='Tk_GetFontFromObj'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tk_Font' type='^{Tk_Font_=}'/>
</function>
<function name='Tk_GetFontMetrics'>
<arg declared_type='Tk_Font' name='font' type='^{Tk_Font_=}'/>
<arg declared_type='Tk_FontMetrics*' name='fmPtr' type='^{Tk_FontMetrics=iii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_GetGC'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='unsigned long' name='valueMask' type='L' type64='Q'/>
<arg declared_type='XGCValues*' name='valuePtr' type='^{_XGCValues=}'/>
<retval declared_type='GC' type='^{_GC=}'/>
</function>
<function name='Tk_GetImage'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='Tk_ImageChangedProc*' function_pointer='true' name='changeProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='Tk_Image' type='^{Tk_Image__=}'/>
</function>
<function name='Tk_GetImageMasterData'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='Tk_ImageType**' name='typePtrPtr' type='^^{Tk_ImageType}'/>
<retval declared_type='ClientData' type='^v'/>
</function>
<function name='Tk_GetItemTypes'>
<retval declared_type='Tk_ItemType*' type='^{Tk_ItemType=*i^?^{Tk_ConfigSpec}^?^?^?^?i^?^?^?^?^?^?^?^?^?^?^{Tk_ItemType}*i**}'/>
</function>
<function name='Tk_GetJoinStyle'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg declared_type='int*' name='joinPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetJustify'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg declared_type='Tk_Justify*' name='justifyPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetJustifyFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tk_Justify*' name='justifyPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetMMFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='double*' name='doublePtr' type='^d'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetNumMainWindows'>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetOpenFileObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetOption'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg const='true' declared_type='char*' name='className' type='*'/>
<retval declared_type='Tk_Uid' type='*'/>
</function>
<function name='Tk_GetOptionInfo'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' name='recordPtr' type='*'/>
<arg declared_type='Tk_OptionTable' name='optionTable' type='^{Tk_OptionTable_=}'/>
<arg declared_type='Tcl_Obj*' name='namePtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tk_GetOptionValue'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' name='recordPtr' type='*'/>
<arg declared_type='Tk_OptionTable' name='optionTable' type='^{Tk_OptionTable_=}'/>
<arg declared_type='Tcl_Obj*' name='namePtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tk_GetPixels'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg declared_type='int*' name='intPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetPixelsFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' name='intPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetPixmap'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='int' name='d' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='depth' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetRelief'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='int*' name='reliefPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetReliefFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' name='resultPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetRootCoords'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int*' name='xPtr' type='^i'/>
<arg declared_type='int*' name='yPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_GetSaveFileObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetScreenMM'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg declared_type='double*' name='doublePtr' type='^d'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetScrollInfo'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='argc' type='i'/>
<arg const='true' declared_type='char**' name='argv' type='^*'/>
<arg declared_type='double*' name='dblPtr' type='^d'/>
<arg declared_type='int*' name='intPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetScrollInfoObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<arg declared_type='double*' name='dblPtr' type='^d'/>
<arg declared_type='int*' name='intPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetSelection'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='selection' type='i'/>
<arg declared_type='int' name='target' type='i'/>
<arg declared_type='Tk_GetSelProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GetStyle'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='Tk_Style' type='^{Tk_Style_=}'/>
</function>
<function name='Tk_GetStyleEngine'>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='Tk_StyleEngine' type='^{Tk_StyleEngine_=}'/>
</function>
<function name='Tk_GetStyleFromObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tk_Style' type='^{Tk_Style_=}'/>
</function>
<function name='Tk_GetStyledElement'>
<arg declared_type='Tk_Style' name='style' type='^{Tk_Style_=}'/>
<arg declared_type='int' name='elementId' type='i'/>
<arg declared_type='Tk_OptionTable' name='optionTable' type='^{Tk_OptionTable_=}'/>
<retval declared_type='Tk_StyledElement' type='^{Tk_StyledElement_=}'/>
</function>
<function name='Tk_GetUid'>
<arg const='true' declared_type='char*' name='str' type='*'/>
<retval declared_type='Tk_Uid' type='*'/>
</function>
<function name='Tk_GetUserInactiveTime'>
<arg declared_type='Display*' name='dpy' type='^{_XDisplay=}'/>
<retval declared_type='long' type='l' type64='q'/>
</function>
<function name='Tk_GetVRootGeometry'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int*' name='xPtr' type='^i'/>
<arg declared_type='int*' name='yPtr' type='^i'/>
<arg declared_type='int*' name='widthPtr' type='^i'/>
<arg declared_type='int*' name='heightPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_GetVisual'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg declared_type='int*' name='depthPtr' type='^i'/>
<arg declared_type='int*' name='colormapPtr' type='^i'/>
<retval declared_type='Visual*' type='^{_Visual=}'/>
</function>
<function name='Tk_Grab'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='grabGlobal' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GrabObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_GridObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_HandleEvent'>
<arg declared_type='XEvent*' name='eventPtr' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_IdToWindow'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='Window*' function_pointer='true' name='window' type='^?'>
<retval declared_type='int' type='i'/>
</arg>
<retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
</function>
<function name='Tk_ImageChanged'>
<arg declared_type='Tk_ImageMaster' name='master' type='^{Tk_ImageMaster_=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='imageWidth' type='i'/>
<arg declared_type='int' name='imageHeight' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_ImageObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_Init'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_InitConsoleChannels'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_InitOptions'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' name='recordPtr' type='*'/>
<arg declared_type='Tk_OptionTable' name='optionToken' type='^{Tk_OptionTable_=}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_InitStubs'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='version' type='*'/>
<arg declared_type='int' name='exact' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tk_InternAtom'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_Interp'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
</function>
<function name='Tk_IntersectTextLayout'>
<arg declared_type='Tk_TextLayout' name='layout' type='^{Tk_TextLayout_=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_LabelObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_LabelframeObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_ListboxObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_LowerObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_MainEx'>
<arg declared_type='int' name='argc' type='i'/>
<arg declared_type='char**' name='argv' type='^*'/>
<arg declared_type='Tcl_AppInitProc*' function_pointer='true' name='appInitProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_MainLoop'>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_MainWindow'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
</function>
<function name='Tk_MaintainGeometry'>
<arg declared_type='Tk_Window' name='slave' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_Window' name='master' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_MakeWindowExist'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_ManageGeometry'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='Tk_GeomMgr*' name='mgrPtr' type='^{Tk_GeomMgr=*^?^?}'/>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_MapWindow'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_MeasureChars'>
<arg declared_type='Tk_Font' name='tkfont' type='^{Tk_Font_=}'/>
<arg const='true' declared_type='char*' name='source' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<arg declared_type='int' name='maxPixels' type='i'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='int*' name='lengthPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_MenubuttonObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_MessageBoxObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_MessageObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_MoveResizeWindow'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_MoveToplevelWindow'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_MoveWindow'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_NameOf3DBorder'>
<arg declared_type='Tk_3DBorder' name='border' type='^{Tk_3DBorder_=}'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tk_NameOfAnchor'>
<arg declared_type='Tk_Anchor' name='anchor' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tk_NameOfBitmap'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='int' name='bitmap' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tk_NameOfCapStyle'>
<arg declared_type='int' name='cap' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tk_NameOfColor'>
<arg declared_type='XColor*' name='colorPtr' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tk_NameOfCursor'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='Tk_Cursor' name='cursor' type='^{Tk_Cursor_=}'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tk_NameOfFont'>
<arg declared_type='Tk_Font' name='font' type='^{Tk_Font_=}'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tk_NameOfImage'>
<arg declared_type='Tk_ImageMaster' name='imageMaster' type='^{Tk_ImageMaster_=}'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tk_NameOfJoinStyle'>
<arg declared_type='int' name='join' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tk_NameOfJustify'>
<arg declared_type='Tk_Justify' name='justify' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tk_NameOfRelief'>
<arg declared_type='int' name='relief' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tk_NameOfStyle'>
<arg declared_type='Tk_Style' name='style' type='^{Tk_Style_=}'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tk_NameToWindow'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='pathName' type='*'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='Tk_Window' type='^{Tk_Window_=}'/>
</function>
<function name='Tk_OptionObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_OwnSelection'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='selection' type='i'/>
<arg declared_type='Tk_LostSelProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_PackObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_PanedWindowObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_ParseArgv'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int*' name='argcPtr' type='^i'/>
<arg const='true' declared_type='char**' name='argv' type='^*'/>
<arg declared_type='Tk_ArgvInfo*' name='argTable' type='^{_Tk_ArgvInfo=*i***}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_PhotoBlank'>
<arg declared_type='Tk_PhotoHandle' name='handle' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_PhotoExpand'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_PhotoHandle' name='handle' type='^v'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_PhotoExpand_Panic'>
<arg declared_type='Tk_PhotoHandle' name='handle' type='^v'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_PhotoGetImage'>
<arg declared_type='Tk_PhotoHandle' name='handle' type='^v'/>
<arg declared_type='Tk_PhotoImageBlock*' name='blockPtr' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_PhotoGetSize'>
<arg declared_type='Tk_PhotoHandle' name='handle' type='^v'/>
<arg declared_type='int*' name='widthPtr' type='^i'/>
<arg declared_type='int*' name='heightPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_PhotoPutBlock'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_PhotoHandle' name='handle' type='^v'/>
<arg declared_type='Tk_PhotoImageBlock*' name='blockPtr' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='compRule' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_PhotoPutBlock_NoComposite'>
<arg declared_type='Tk_PhotoHandle' name='handle' type='^v'/>
<arg declared_type='Tk_PhotoImageBlock*' name='blockPtr' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_PhotoPutBlock_Panic'>
<arg declared_type='Tk_PhotoHandle' name='handle' type='^v'/>
<arg declared_type='Tk_PhotoImageBlock*' name='blockPtr' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='compRule' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_PhotoPutZoomedBlock'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_PhotoHandle' name='handle' type='^v'/>
<arg declared_type='Tk_PhotoImageBlock*' name='blockPtr' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='zoomX' type='i'/>
<arg declared_type='int' name='zoomY' type='i'/>
<arg declared_type='int' name='subsampleX' type='i'/>
<arg declared_type='int' name='subsampleY' type='i'/>
<arg declared_type='int' name='compRule' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_PhotoPutZoomedBlock_NoComposite'>
<arg declared_type='Tk_PhotoHandle' name='handle' type='^v'/>
<arg declared_type='Tk_PhotoImageBlock*' name='blockPtr' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='zoomX' type='i'/>
<arg declared_type='int' name='zoomY' type='i'/>
<arg declared_type='int' name='subsampleX' type='i'/>
<arg declared_type='int' name='subsampleY' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_PhotoPutZoomedBlock_Panic'>
<arg declared_type='Tk_PhotoHandle' name='handle' type='^v'/>
<arg declared_type='Tk_PhotoImageBlock*' name='blockPtr' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='zoomX' type='i'/>
<arg declared_type='int' name='zoomY' type='i'/>
<arg declared_type='int' name='subsampleX' type='i'/>
<arg declared_type='int' name='subsampleY' type='i'/>
<arg declared_type='int' name='compRule' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_PhotoSetSize'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_PhotoHandle' name='handle' type='^v'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_PhotoSetSize_Panic'>
<arg declared_type='Tk_PhotoHandle' name='handle' type='^v'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_PkgInitStubsCheck'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='version' type='*'/>
<arg declared_type='int' name='exact' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tk_PlaceObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_PointToChar'>
<arg declared_type='Tk_TextLayout' name='layout' type='^{Tk_TextLayout_=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_PostscriptBitmap'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_PostscriptInfo' name='psInfo' type='^{Tk_PostscriptInfo_=}'/>
<arg declared_type='int' name='bitmap' type='i'/>
<arg declared_type='int' name='startX' type='i'/>
<arg declared_type='int' name='startY' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_PostscriptColor'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_PostscriptInfo' name='psInfo' type='^{Tk_PostscriptInfo_=}'/>
<arg declared_type='XColor*' name='colorPtr' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_PostscriptFont'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_PostscriptInfo' name='psInfo' type='^{Tk_PostscriptInfo_=}'/>
<arg declared_type='Tk_Font' name='font' type='^{Tk_Font_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_PostscriptFontName'>
<arg declared_type='Tk_Font' name='tkfont' type='^{Tk_Font_=}'/>
<arg declared_type='Tcl_DString*' name='dsPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_PostscriptImage'>
<arg declared_type='Tk_Image' name='image' type='^{Tk_Image__=}'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_PostscriptInfo' name='psinfo' type='^{Tk_PostscriptInfo_=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='prepass' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_PostscriptPath'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_PostscriptInfo' name='psInfo' type='^{Tk_PostscriptInfo_=}'/>
<arg declared_type='double*' name='coordPtr' type='^d'/>
<arg declared_type='int' name='numPoints' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_PostscriptPhoto'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_PhotoImageBlock*' name='blockPtr' type='^{Tk_PhotoImageBlock=*iiii[4i]}'/>
<arg declared_type='Tk_PostscriptInfo' name='psInfo' type='^{Tk_PostscriptInfo_=}'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_PostscriptStipple'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_PostscriptInfo' name='psInfo' type='^{Tk_PostscriptInfo_=}'/>
<arg declared_type='int' name='bitmap' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_PostscriptY'>
<arg declared_type='double' name='y' type='d'/>
<arg declared_type='Tk_PostscriptInfo' name='psInfo' type='^{Tk_PostscriptInfo_=}'/>
<retval declared_type='double' type='d'/>
</function>
<function name='Tk_PreserveColormap'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='int' name='colormap' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_QueueWindowEvent'>
<arg declared_type='XEvent*' name='eventPtr' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<arg declared_type='Tcl_QueuePosition' name='position' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_RadiobuttonObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_RaiseObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_RedrawImage'>
<arg declared_type='Tk_Image' name='image' type='^{Tk_Image__=}'/>
<arg declared_type='int' name='imageX' type='i'/>
<arg declared_type='int' name='imageY' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='int' name='drawable' type='i'/>
<arg declared_type='int' name='drawableX' type='i'/>
<arg declared_type='int' name='drawableY' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_RegisterStyleEngine'>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='Tk_StyleEngine' name='parent' type='^{Tk_StyleEngine_=}'/>
<retval declared_type='Tk_StyleEngine' type='^{Tk_StyleEngine_=}'/>
</function>
<function name='Tk_RegisterStyledElement'>
<arg declared_type='Tk_StyleEngine' name='engine' type='^{Tk_StyleEngine_=}'/>
<arg declared_type='Tk_ElementSpec*' name='templatePtr' type='^{Tk_ElementSpec=i*^{Tk_ElementOptionSpec}^?^?^?^?}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_ResetOutlineGC'>
<arg declared_type='Tk_Canvas' name='canvas' type='^{Tk_Canvas_=}'/>
<arg declared_type='Tk_Item*' name='item' type='^{Tk_Item=i^{Tk_Item}[3*]^*ii^{Tk_ItemType}iiii^{Tk_Item}i*i}'/>
<arg declared_type='Tk_Outline*' name='outline' type='^{Tk_Outline=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_ResetUserInactiveTime'>
<arg declared_type='Display*' name='dpy' type='^{_XDisplay=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_ResizeWindow'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_RestackWindow'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='aboveBelow' type='i'/>
<arg declared_type='Tk_Window' name='other' type='^{Tk_Window_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_RestoreSavedOptions'>
<arg declared_type='Tk_SavedOptions*' name='savePtr' type='^{Tk_SavedOptions=*^{Tk_Window_}i[20{Tk_SavedOption=^{TkOption}^{Tcl_Obj}d}]^{Tk_SavedOptions}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_RestrictEvents'>
<arg declared_type='Tk_RestrictProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='Tk_RestrictAction' type='i'/>
</arg>
<arg declared_type='ClientData' name='arg' type='^v'/>
<arg declared_type='ClientData*' name='prevArgPtr' type='^^v'/>
<retval declared_type='Tk_RestrictProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='Tk_RestrictAction' type='i'/>
</retval>
</function>
<function name='Tk_SafeInit'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_ScaleObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_ScrollbarCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='argc' type='i'/>
<arg const='true' declared_type='char**' name='argv' type='^*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_SelectionObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_SendCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='argc' type='i'/>
<arg const='true' declared_type='char**' name='argv' type='^*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_SendObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_SetAppName'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tk_SetBackgroundFromBorder'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_3DBorder' name='border' type='^{Tk_3DBorder_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_SetCaretPos'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_SetClass'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='className' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_SetClassProcs'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_ClassProcs*' name='procs' type='^{Tk_ClassProcs=}'/>
<arg declared_type='ClientData' name='instanceData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_SetGrid'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='reqWidth' type='i'/>
<arg declared_type='int' name='reqHeight' type='i'/>
<arg declared_type='int' name='gridWidth' type='i'/>
<arg declared_type='int' name='gridHeight' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_SetInternalBorder'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='width' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_SetInternalBorderEx'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='left' type='i'/>
<arg declared_type='int' name='right' type='i'/>
<arg declared_type='int' name='top' type='i'/>
<arg declared_type='int' name='bottom' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_SetMinimumRequestSize'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='minWidth' type='i'/>
<arg declared_type='int' name='minHeight' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_SetOptions'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' name='recordPtr' type='*'/>
<arg declared_type='Tk_OptionTable' name='optionTable' type='^{Tk_OptionTable_=}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_SavedOptions*' name='savePtr' type='^{Tk_SavedOptions=*^{Tk_Window_}i[20{Tk_SavedOption=^{TkOption}^{Tcl_Obj}d}]^{Tk_SavedOptions}}'/>
<arg declared_type='int*' name='maskPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_SetTSOrigin'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='GC' name='gc' type='^{_GC=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_SetWindowBackground'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='unsigned long' name='pixel' type='L' type64='Q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_SetWindowBackgroundPixmap'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='pixmap' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_SetWindowBorder'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='unsigned long' name='pixel' type='L' type64='Q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_SetWindowBorderPixmap'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='pixmap' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_SetWindowBorderWidth'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='width' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_SetWindowColormap'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='colormap' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_SetWindowVisual'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Visual*' name='visual' type='^{_Visual=}'/>
<arg declared_type='int' name='depth' type='i'/>
<arg declared_type='int' name='colormap' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_SizeOfBitmap'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='int' name='bitmap' type='i'/>
<arg declared_type='int*' name='widthPtr' type='^i'/>
<arg declared_type='int*' name='heightPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_SizeOfImage'>
<arg declared_type='Tk_Image' name='image' type='^{Tk_Image__=}'/>
<arg declared_type='int*' name='widthPtr' type='^i'/>
<arg declared_type='int*' name='heightPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_SpinboxObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_StrictMotif'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_TextLayoutToPostscript'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_TextLayout' name='layout' type='^{Tk_TextLayout_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_TextObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_TextWidth'>
<arg declared_type='Tk_Font' name='font' type='^{Tk_Font_=}'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_TkObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_TkwaitObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_ToplevelObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_UndefineCursor'>
<arg declared_type='Tk_Window' name='window' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_UnderlineChars'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='int' name='drawable' type='i'/>
<arg declared_type='GC' name='gc' type='^{_GC=}'/>
<arg declared_type='Tk_Font' name='tkfont' type='^{Tk_Font_=}'/>
<arg const='true' declared_type='char*' name='source' type='*'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='firstByte' type='i'/>
<arg declared_type='int' name='lastByte' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_UnderlineTextLayout'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='int' name='drawable' type='i'/>
<arg declared_type='GC' name='gc' type='^{_GC=}'/>
<arg declared_type='Tk_TextLayout' name='layout' type='^{Tk_TextLayout_=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='underline' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_Ungrab'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_UnmaintainGeometry'>
<arg declared_type='Tk_Window' name='slave' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_Window' name='master' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_UnmapWindow'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_UnsetGrid'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_UpdateObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_UpdatePointer'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='state' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tk_WinfoObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tk_WmObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkpAlwaysShowSelection'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkpBuildRegionFromAlphaData'>
<arg declared_type='TkRegion' name='region' type='^{TkRegion_=}'/>
<arg declared_type='unsigned int' name='x' type='I'/>
<arg declared_type='unsigned int' name='y' type='I'/>
<arg declared_type='unsigned int' name='width' type='I'/>
<arg declared_type='unsigned int' name='height' type='I'/>
<arg declared_type='unsigned char*' name='dataPtr' type='*'/>
<arg declared_type='unsigned int' name='pixelStride' type='I'/>
<arg declared_type='unsigned int' name='lineStride' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpChangeFocus'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<arg declared_type='int' name='force' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkpClaimFocus'>
<arg declared_type='TkWindow*' name='topLevelPtr' type='^{TkWindow=}'/>
<arg declared_type='int' name='force' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpClipDrawableToRect'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='int' name='d' type='i'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpCloseDisplay'>
<arg declared_type='TkDisplay*' name='dispPtr' type='^{TkDisplay=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpCmapStressed'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='colormap' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkpDeleteFont'>
<arg declared_type='TkFont*' name='tkFontPtr' type='^{TkFont=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpDisplayWarning'>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='char*' name='title' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpDrawCharsInContext'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<arg declared_type='int' name='drawable' type='i'/>
<arg declared_type='GC' name='gc' type='^{_GC=}'/>
<arg declared_type='Tk_Font' name='tkfont' type='^{Tk_Font_=}'/>
<arg const='true' declared_type='char*' name='source' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<arg declared_type='int' name='rangeStart' type='i'/>
<arg declared_type='int' name='rangeLength' type='i'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpDrawFrame'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_3DBorder' name='border' type='^{Tk_3DBorder_=}'/>
<arg declared_type='int' name='highlightWidth' type='i'/>
<arg declared_type='int' name='borderWidth' type='i'/>
<arg declared_type='int' name='relief' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpDrawHighlightBorder'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='GC' name='fgGC' type='^{_GC=}'/>
<arg declared_type='GC' name='bgGC' type='^{_GC=}'/>
<arg declared_type='int' name='highlightWidth' type='i'/>
<arg declared_type='int' name='drawable' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpFontPkgInit'>
<arg declared_type='TkMainInfo*' name='mainPtr' type='^{TkMainInfo=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpFreeCursor'>
<arg declared_type='TkCursor*' name='cursorPtr' type='^{TkCursor=^{Tk_Cursor_}^{_XDisplay}ii^{Tcl_HashTable}^{Tcl_HashEntry}^{Tcl_HashEntry}^{TkCursor}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpFreeGCCache'>
<arg declared_type='GC' name='gc' type='^{_GC=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpGetAppName'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_DString*' name='name' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpGetBindingXEvent'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='XEvent*' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
</function>
<function name='TkpGetFontAttrsForChar'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='Tk_Font' name='tkfont' type='^{Tk_Font_=}'/>
<arg declared_type='Tcl_UniChar' name='c' type='S'/>
<arg declared_type='struct TkFontAttributes*' name='faPtr' type='^{TkFontAttributes=*iiiii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpGetFontFamilies'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpGetFontFromAttributes'>
<arg declared_type='TkFont*' name='tkFontPtr' type='^{TkFont=}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='TkFontAttributes*' name='faPtr' type='^{TkFontAttributes=*iiiii}'/>
<retval declared_type='TkFont*' type='^{TkFont=}'/>
</function>
<function name='TkpGetGCCache'>
<arg declared_type='GC' name='gc' type='^{_GC=}'/>
<retval declared_type='TkpGCCache*' type='^{_TkpGCCache=L^{CGColor}L^{CGColor}}' type64='^{_TkpGCCache=Q^{CGColor}Q^{CGColor}}'/>
</function>
<function name='TkpGetKeySym'>
<arg declared_type='TkDisplay*' name='dispPtr' type='^{TkDisplay=}'/>
<arg declared_type='XEvent*' name='eventPtr' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkpGetNativeFont'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='TkFont*' type='^{TkFont=}'/>
</function>
<function name='TkpGetOtherWindow'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='TkWindow*' type='^{TkWindow=}'/>
</function>
<function name='TkpGetString'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<arg declared_type='XEvent*' name='eventPtr' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<arg declared_type='Tcl_DString*' name='dsPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TkpGetSubFonts'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Font' name='tkfont' type='^{Tk_Font_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpGetSystemDefault'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='dbName' type='*'/>
<arg const='true' declared_type='char*' name='className' type='*'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TkpGetWrapperWindow'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<retval declared_type='TkWindow*' type='^{TkWindow=}'/>
</function>
<function name='TkpInit'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkpInitGCCache'>
<arg declared_type='GC' name='gc' type='^{_GC=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpInitKeymapInfo'>
<arg declared_type='TkDisplay*' name='dispPtr' type='^{TkDisplay=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpInitializeMenuBindings'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='bindingTable' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpMakeContainer'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpMakeMenuWindow'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='transient' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpMakeWindow'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<arg declared_type='Window*' function_pointer='true' name='parent' type='^?'>
<retval declared_type='int' type='i'/>
</arg>
<retval declared_type='int' type='i'/>
</function>
<function name='TkpMeasureCharsInContext'>
<arg declared_type='Tk_Font' name='tkfont' type='^{Tk_Font_=}'/>
<arg const='true' declared_type='char*' name='source' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<arg declared_type='int' name='rangeStart' type='i'/>
<arg declared_type='int' name='rangeLength' type='i'/>
<arg declared_type='int' name='maxLength' type='i'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='int*' name='lengthPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkpMenuNotifyToplevelCreate'>
<arg declared_type='Tcl_Interp*' name='interp1' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' name='menuName' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpMenuThreadInit'>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpOpenDisplay'>
<arg const='true' declared_type='char*' name='display_name' type='*'/>
<retval declared_type='TkDisplay*' type='^{TkDisplay=}'/>
</function>
<function name='TkpRedirectKeyEvent'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<arg declared_type='XEvent*' name='eventPtr' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpReleaseRegion'>
<arg declared_type='TkRegion' name='r' type='^{TkRegion_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpRetainRegion'>
<arg declared_type='TkRegion' name='r' type='^{TkRegion_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpScanWindowId'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='string' type='*'/>
<arg declared_type='Window*' function_pointer='true' name='idPtr' type='^?'>
<retval declared_type='int' type='i'/>
</arg>
<retval declared_type='int' type='i'/>
</function>
<function name='TkpSetKeycodeAndState'>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='keySym' type='i'/>
<arg declared_type='XEvent*' name='eventPtr' type='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24l])' type64='^(_XEvent=i{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}{?=}[24q])'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpSetMainMenubar'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg declared_type='char*' name='menuName' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpSync'>
<arg declared_type='Display*' name='display' type='^{_XDisplay=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TkpTestembedCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='argc' type='i'/>
<arg const='true' declared_type='char**' name='argv' type='^*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkpTestsendCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='argc' type='i'/>
<arg const='true' declared_type='char**' name='argv' type='^*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkpTesttextCmd'>
<arg declared_type='ClientData' name='dummy' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='argc' type='i'/>
<arg const='true' declared_type='char**' name='argv' type='^*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkpUseWindow'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<arg const='true' declared_type='char*' name='string' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkpWindowWasRecentlyDeleted'>
<arg declared_type='Window*' function_pointer='true' name='win' type='^?'>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='TkDisplay*' name='dispPtr' type='^{TkDisplay=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TkpWmSetState'>
<arg declared_type='TkWindow*' name='winPtr' type='^{TkWindow=}'/>
<arg declared_type='int' name='state' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TtkArrowSize'>
<arg declared_type='int' name='h' type='i'/>
<arg declared_type='ArrowDirection' type='i'/>
<arg declared_type='int*' name='widthPtr' type='^i'/>
<arg declared_type='int*' name='heightPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TtkDrawArrow'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='int' name='Drawable' type='i'/>
<arg declared_type='GC' type='^{_GC=}'/>
<arg declared_type='int' name='Ttk_Box' type='i'/>
<arg declared_type='ArrowDirection' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TtkEnumerateHashTable'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_HashTable*' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TtkFillArrow'>
<arg declared_type='Display*' type='^{_XDisplay=}'/>
<arg declared_type='int' name='Drawable' type='i'/>
<arg declared_type='GC' type='^{_GC=}'/>
<arg declared_type='int' name='Ttk_Box' type='i'/>
<arg declared_type='ArrowDirection' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TtkFreeImageSpec'>
<arg declared_type='Ttk_ImageSpec*' type='^{TtkImageSpec=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TtkGetImageSpec'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Ttk_ImageSpec*' type='^{TtkImageSpec=}'/>
</function>
<function name='TtkNullElementDraw'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int' name='Drawable' type='i'/>
<arg declared_type='int' name='Ttk_Box' type='i'/>
<arg declared_type='Ttk_State' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TtkNullElementSize'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TtkSelectImage'>
<arg declared_type='Ttk_ImageSpec*' type='^{TtkImageSpec=}'/>
<arg declared_type='Ttk_State' type='I'/>
<retval declared_type='Tk_Image' type='^{Tk_Image__=}'/>
</function>
<function name='Ttk_AddPadding'>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_AnchorBox'>
<arg declared_type='int' name='parcel' type='i'/>
<arg declared_type='int' name='w' type='i'/>
<arg declared_type='int' name='h' type='i'/>
<arg declared_type='Tk_Anchor' name='anchor' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_BoxContains'>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_ChangeElementState'>
<arg declared_type='Ttk_Element' type='^{Ttk_LayoutNode_=}'/>
<arg declared_type='unsigned int' name='set' type='I'/>
<arg declared_type='unsigned int' name='clr' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Ttk_ClientRegion'>
<arg declared_type='Ttk_Layout' type='^{Ttk_Layout_=}'/>
<arg const='true' declared_type='char*' name='elementName' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_CreateLayout'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='Ttk_Theme' type='i'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='void*' name='recordPtr' type='^v'/>
<arg declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
<arg declared_type='Tk_Window' name='tkwin' type='^{Tk_Window_=}'/>
<retval declared_type='Ttk_Layout' type='^{Ttk_Layout_=}'/>
</function>
<function name='Ttk_CreateResourceCache'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Ttk_ResourceCache' type='^{Ttk_ResourceCache_=}'/>
</function>
<function name='Ttk_CreateSublayout'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='Ttk_Theme' type='i'/>
<arg declared_type='Ttk_Layout' type='^{Ttk_Layout_=}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='Tk_OptionTable' type='^{Tk_OptionTable_=}'/>
<retval declared_type='Ttk_Layout' type='^{Ttk_Layout_=}'/>
</function>
<function name='Ttk_CreateTheme'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='int' name='parent' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_DrawLayout'>
<arg declared_type='Ttk_Layout' type='^{Ttk_Layout_=}'/>
<arg declared_type='Ttk_State' type='I'/>
<arg declared_type='int' name='Drawable' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Ttk_ElementName'>
<arg declared_type='Ttk_Element' type='^{Ttk_LayoutNode_=}'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Ttk_ElementParcel'>
<arg declared_type='Ttk_Element' type='^{Ttk_LayoutNode_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_ExpandBox'>
<arg declared_type='int' name='b' type='i'/>
<arg declared_type='int' name='p' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_FindElement'>
<arg declared_type='Ttk_Layout' type='^{Ttk_Layout_=}'/>
<arg const='true' declared_type='char*' name='nodeName' type='*'/>
<retval declared_type='Ttk_Element' type='^{Ttk_LayoutNode_=}'/>
</function>
<function name='Ttk_FreeLayout'>
<arg declared_type='Ttk_Layout' type='^{Ttk_Layout_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Ttk_FreeResourceCache'>
<arg declared_type='Ttk_ResourceCache' type='^{Ttk_ResourceCache_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Ttk_GetBorderFromObj'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_GetButtonDefaultStateFromObj'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_GetCompoundFromObj'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_GetCurrentTheme'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_GetDefaultTheme'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_GetPaddingFromObj'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_GetResourceCache'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Ttk_ResourceCache' type='^{Ttk_ResourceCache_=}'/>
</function>
<function name='Ttk_GetStateMapFromObj'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_GetStateSpecFromObj'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Ttk_StateSpec*' type='^{_Ttk_StateSpec=II}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_GetStickyFromObj'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Ttk_Sticky*' type='^I'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_GetTheme'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_IdentifyElement'>
<arg declared_type='Ttk_Layout' type='^{Ttk_Layout_=}'/>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<retval declared_type='Ttk_Element' type='^{Ttk_LayoutNode_=}'/>
</function>
<function name='Ttk_Init'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_InvokeEnsemble'>
<arg const='true' declared_type='Ttk_Ensemble*' name='commands' type='^{TtkEnsemble=*^?^{TtkEnsemble}}'/>
<arg declared_type='int' name='cmdIndex' type='i'/>
<arg declared_type='void*' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_LayoutNodeInternalPadding'>
<arg declared_type='Ttk_Layout' type='^{Ttk_Layout_=}'/>
<arg declared_type='Ttk_Element' type='^{Ttk_LayoutNode_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_LayoutNodeInternalParcel'>
<arg declared_type='Ttk_Layout' type='^{Ttk_Layout_=}'/>
<arg declared_type='Ttk_Element' type='^{Ttk_LayoutNode_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_LayoutNodeReqSize'>
<arg declared_type='Ttk_Layout' type='^{Ttk_Layout_=}'/>
<arg declared_type='Ttk_Element' type='^{Ttk_LayoutNode_=}'/>
<arg declared_type='int*' name='w' type='^i'/>
<arg declared_type='int*' name='h' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Ttk_LayoutSize'>
<arg declared_type='Ttk_Layout' type='^{Ttk_Layout_=}'/>
<arg declared_type='Ttk_State' type='I'/>
<arg declared_type='int*' name='widthPtr' type='^i'/>
<arg declared_type='int*' name='heightPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Ttk_LayoutStyle'>
<arg declared_type='Ttk_Layout' type='^{Ttk_Layout_=}'/>
<retval declared_type='Ttk_Style' type='^{Ttk_Style_=}'/>
</function>
<function name='Ttk_MakeBox'>
<arg declared_type='int' name='x' type='i'/>
<arg declared_type='int' name='y' type='i'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_MakePadding'>
<arg declared_type='short' name='l' type='s'/>
<arg declared_type='short' name='t' type='s'/>
<arg declared_type='short' name='r' type='s'/>
<arg declared_type='short' name='b' type='s'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_NewStateSpecObj'>
<arg declared_type='unsigned int' name='onbits' type='I'/>
<arg declared_type='unsigned int' name='offbits' type='I'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Ttk_NewStickyObj'>
<arg declared_type='Ttk_Sticky' type='I'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Ttk_PackBox'>
<arg declared_type='int*' name='cavity' type='^i'/>
<arg declared_type='int' name='w' type='i'/>
<arg declared_type='int' name='h' type='i'/>
<arg declared_type='Ttk_Side' name='side' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_PadBox'>
<arg declared_type='int' name='b' type='i'/>
<arg declared_type='int' name='p' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_PlaceBox'>
<arg declared_type='int*' name='cavity' type='^i'/>
<arg declared_type='int' name='w' type='i'/>
<arg declared_type='int' name='h' type='i'/>
<arg declared_type='Ttk_Side' type='i'/>
<arg declared_type='Ttk_Sticky' type='I'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_PlaceElement'>
<arg declared_type='Ttk_Layout' type='^{Ttk_Layout_=}'/>
<arg declared_type='Ttk_Element' type='^{Ttk_LayoutNode_=}'/>
<arg declared_type='int' name='Ttk_Box' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Ttk_PlaceLayout'>
<arg declared_type='Ttk_Layout' type='^{Ttk_Layout_=}'/>
<arg declared_type='Ttk_State' type='I'/>
<arg declared_type='int' name='Ttk_Box' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Ttk_PositionBox'>
<arg declared_type='int*' name='cavity' type='^i'/>
<arg declared_type='int' name='w' type='i'/>
<arg declared_type='int' name='h' type='i'/>
<arg declared_type='Ttk_PositionSpec' type='I'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_QueryOption'>
<arg declared_type='Ttk_Layout' type='^{Ttk_Layout_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Ttk_State' type='I'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Ttk_RebindSublayout'>
<arg declared_type='Ttk_Layout' type='^{Ttk_Layout_=}'/>
<arg declared_type='void*' name='recordPtr' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Ttk_RegisterCleanup'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='void*' name='deleteData' type='^v'/>
<arg declared_type='Ttk_CleanupProc*' function_pointer='true' name='cleanupProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='Ttk_RegisterElement'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='theme' type='i'/>
<arg const='true' declared_type='char*' name='elementName' type='*'/>
<arg declared_type='Ttk_ElementSpec*' type='^{Ttk_ElementSpec=iI^{Ttk_ElementOptionSpec}^?^?}' type64='^{Ttk_ElementSpec=iQ^{Ttk_ElementOptionSpec}^?^?}'/>
<arg declared_type='void*' name='clientData' type='^v'/>
<retval declared_type='int*' type='^i'/>
</function>
<function name='Ttk_RegisterElementFactory'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='Ttk_ElementFactory' function_pointer='true' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='void*' name='clientData' type='^v'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_RegisterLayout'>
<arg declared_type='int' name='theme' type='i'/>
<arg const='true' declared_type='char*' name='className' type='*'/>
<arg declared_type='Ttk_LayoutSpec' name='layoutSpec' type='^{_Ttk_LayoutSpec=*I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Ttk_RegisterLayouts'>
<arg declared_type='int' name='theme' type='i'/>
<arg declared_type='Ttk_LayoutSpec' name='layoutTable' type='^{_Ttk_LayoutSpec=*I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Ttk_RegisterNamedColor'>
<arg declared_type='Ttk_ResourceCache' type='^{Ttk_ResourceCache_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='XColor*' type='^{_XColor=LSSScc}' type64='^{_XColor=QSSScc}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Ttk_RelievePadding'>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_SetThemeEnabledProc'>
<retval declared_type='void' type='v'/>
</function>
<function name='Ttk_StateMapLookup'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='Ttk_StateMap' type='i'/>
<arg declared_type='Ttk_State' type='I'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Ttk_StateTableLookup'>
<arg declared_type='Ttk_StateTable*' name='map' type='^{_Ttk_StateTable=iII}'/>
<arg declared_type='Ttk_State' type='I'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_StickBox'>
<arg declared_type='int' name='parcel' type='i'/>
<arg declared_type='int' name='w' type='i'/>
<arg declared_type='int' name='h' type='i'/>
<arg declared_type='Ttk_Sticky' name='sticky' type='I'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_StyleDefault'>
<arg declared_type='Ttk_Style' type='^{Ttk_Style_=}'/>
<arg const='true' declared_type='char*' name='optionName' type='*'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Ttk_StyleMap'>
<arg declared_type='Ttk_Style' type='^{Ttk_Style_=}'/>
<arg const='true' declared_type='char*' name='optionName' type='*'/>
<arg declared_type='Ttk_State' type='I'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Ttk_StylePkgInit'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Ttk_UniformPadding'>
<arg declared_type='short' name='borderWidth' type='s'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Ttk_UseBorder'>
<arg declared_type='Ttk_ResourceCache' type='^{Ttk_ResourceCache_=}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Ttk_UseColor'>
<arg declared_type='Ttk_ResourceCache' type='^{Ttk_ResourceCache_=}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Ttk_UseFont'>
<arg declared_type='Ttk_ResourceCache' type='^{Ttk_ResourceCache_=}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Ttk_UseImage'>
<arg declared_type='Ttk_ResourceCache' type='^{Ttk_ResourceCache_=}'/>
<arg declared_type='Tk_Window' type='^{Tk_Window_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tk_Image' type='^{Tk_Image__=}'/>
</function>
<function name='Ttk_UseTheme'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='Ttk_Theme' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='XAllocIconSize'>
<retval declared_type='XIconSize*' type='^{_XIconSize=iiiiii}'/>
</function>
<function name='XAllocSizeHints'>
<retval declared_type='XSizeHints*' type='^{_XSizeHints=liiiiiiiiii{?=ii}{?=ii}iii}' type64='^{_XSizeHints=qiiiiiiiiii{?=ii}{?=ii}iii}'/>
</function>
<function name='XAllocStandardColormap'>
<retval declared_type='XStandardColormap*' type='^{_XStandardColormap=}'/>
</function>
<function name='XAllocWMHints'>
<retval declared_type='XWMHints*' type='^{_XWMHints=}'/>
</function>
<function name='XClipBox'>
<retval declared_type='void' type='v'/>
</function>
<function name='XCreateRegion'>
<retval declared_type='Region' type='^{_XRegion=}'/>
</function>
<function name='XDefaultString'>
<retval declared_type='char*' type='*'/>
</function>
<function name='XDeleteContext'>
<retval declared_type='int' type='i'/>
</function>
<function name='XDestroyRegion'>
<retval declared_type='void' type='v'/>
</function>
<function name='XEmptyRegion'>
<retval declared_type='void' type='v'/>
</function>
<function name='XEqualRegion'>
<retval declared_type='void' type='v'/>
</function>
<function name='XFindContext'>
<retval declared_type='int' type='i'/>
</function>
<function name='XGetClassHint'>
<retval declared_type='Status' type='i'/>
</function>
<function name='XGetIconSizes'>
<retval declared_type='Status' type='i'/>
</function>
<function name='XGetNormalHints'>
<retval declared_type='Status' type='i'/>
</function>
<function name='XGetRGBColormaps'>
<retval declared_type='Status' type='i'/>
</function>
<function name='XGetSizeHints'>
<retval declared_type='Status' type='i'/>
</function>
<function name='XGetStandardColormap'>
<retval declared_type='Status' type='i'/>
</function>
<function name='XGetTextProperty'>
<retval declared_type='Status' type='i'/>
</function>
<function name='XGetWMClientMachine'>
<retval declared_type='Status' type='i'/>
</function>
<function name='XGetWMHints'>
<retval declared_type='XWMHints*' type='^{_XWMHints=}'/>
</function>
<function name='XGetWMIconName'>
<retval declared_type='Status' type='i'/>
</function>
<function name='XGetWMName'>
<retval declared_type='Status' type='i'/>
</function>
<function name='XGetWMNormalHints'>
<retval declared_type='Status' type='i'/>
</function>
<function name='XGetWMSizeHints'>
<retval declared_type='Status' type='i'/>
</function>
<function name='XGetZoomHints'>
<retval declared_type='Status' type='i'/>
</function>
<function name='XIntersectRegion'>
<retval declared_type='void' type='v'/>
</function>
<function name='XLookupString'>
<retval declared_type='int' type='i'/>
</function>
<function name='XMatchVisualInfo'>
<retval declared_type='Status' type='i'/>
</function>
<function name='XOffsetRegion'>
<retval declared_type='void' type='v'/>
</function>
<function name='XPointInRegion'>
<retval declared_type='int' type='i'/>
</function>
<function name='XPolygonRegion'>
<retval declared_type='Region' type='^{_XRegion=}'/>
</function>
<function name='XRectInRegion'>
<retval declared_type='int' type='i'/>
</function>
<function name='XSaveContext'>
<retval declared_type='int' type='i'/>
</function>
<function name='XSetClassHint'>
<retval declared_type='void' type='v'/>
</function>
<function name='XSetIconSizes'>
<retval declared_type='void' type='v'/>
</function>
<function name='XSetNormalHints'>
<retval declared_type='void' type='v'/>
</function>
<function name='XSetRGBColormaps'>
<retval declared_type='void' type='v'/>
</function>
<function name='XSetRegion'>
<retval declared_type='void' type='v'/>
</function>
<function name='XSetSizeHints'>
<retval declared_type='void' type='v'/>
</function>
<function name='XSetStandardColormap'>
<retval declared_type='void' type='v'/>
</function>
<function name='XSetStandardProperties'>
<retval declared_type='void' type='v'/>
</function>
<function name='XSetTextProperty'>
<retval declared_type='void' type='v'/>
</function>
<function name='XSetWMHints'>
<retval declared_type='void' type='v'/>
</function>
<function name='XSetWMIconName'>
<retval declared_type='void' type='v'/>
</function>
<function name='XSetWMName'>
<retval declared_type='void' type='v'/>
</function>
<function name='XSetWMNormalHints'>
<retval declared_type='void' type='v'/>
</function>
<function name='XSetWMProperties'>
<retval declared_type='void' type='v'/>
</function>
<function name='XSetWMSizeHints'>
<retval declared_type='void' type='v'/>
</function>
<function name='XSetZoomHints'>
<retval declared_type='void' type='v'/>
</function>
<function name='XShrinkRegion'>
<retval declared_type='void' type='v'/>
</function>
<function name='XSubtractRegion'>
<retval declared_type='void' type='v'/>
</function>
<function name='XTextPropertyToStringList'>
<retval declared_type='Status' type='i'/>
</function>
<function name='XUnionRectWithRegion'>
<retval declared_type='void' type='v'/>
</function>
<function name='XUnionRegion'>
<retval declared_type='void' type='v'/>
</function>
<function name='XWMGeometry'>
<retval declared_type='int' type='i'/>
</function>
<function name='XXorRegion'>
<retval declared_type='void' type='v'/>
</function>
<function name='XmbSetWMProperties'>
<retval declared_type='void' type='v'/>
</function>
<function name='XmbTextListToTextProperty'>
<retval declared_type='int' type='i'/>
</function>
<function name='XmbTextPropertyToTextList'>
<retval declared_type='int' type='i'/>
</function>
<function name='XwcFreeStringList'>
<retval declared_type='void' type='v'/>
</function>
<function name='XwcTextListToTextProperty'>
<retval declared_type='int' type='i'/>
</function>
<function name='XwcTextPropertyToTextList'>
<retval declared_type='int' type='i'/>
</function>
<function_alias name='Tk_BackgroundError' original='Tcl_BackgroundError'/>
<function_alias name='Tk_CancelIdleCall' original='Tcl_CancelIdleCall'/>
<function_alias name='Tk_CreateFileHandler' original='Tcl_CreateFileHandler'/>
<function_alias name='Tk_CreateTimerHandler' original='Tcl_CreateTimerHandler'/>
<function_alias name='Tk_DeleteFileHandler' original='Tcl_DeleteFileHandler'/>
<function_alias name='Tk_DeleteTimerHandler' original='Tcl_DeleteTimerHandler'/>
<function_alias name='Tk_DoOneEvent' original='Tcl_DoOneEvent'/>
<function_alias name='Tk_DoWhenIdle' original='Tcl_DoWhenIdle'/>
<function_alias name='Tk_EventuallyFree' original='Tcl_EventuallyFree'/>
<function_alias name='Tk_Preserve' original='Tcl_Preserve'/>
<function_alias name='Tk_Release' original='Tcl_Release'/>
<function_alias name='Tk_Sleep' original='Tcl_Sleep'/>
</signatures>
