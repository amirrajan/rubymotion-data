<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/IOSurface.framework'/>
<depends_on path='/System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSCore.framework'/>
<depends_on path='/System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSImage.framework'/>
<depends_on path='/System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSMatrix.framework'/>
<depends_on path='/System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSNeuralNetwork.framework'/>
<depends_on path='/System/Library/Frameworks/Foundation.framework'/>
<depends_on path='/System/Library/Frameworks/Metal.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<function name='MPSSupportsMTLDevice'>
<arg declared_type64='id _Nullable' name='device' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</function>
<enum name='MPSCNNBinaryConvolutionFlagsNone' value64='0'/>
<enum name='MPSCNNBinaryConvolutionFlagsUseBetaScaling' value64='1'/>
<enum name='MPSCNNBinaryConvolutionTypeAND' value64='2'/>
<enum name='MPSCNNBinaryConvolutionTypeBinaryWeights' value64='0'/>
<enum name='MPSCNNBinaryConvolutionTypeXNOR' value64='1'/>
<enum name='MPSCNNConvolutionFlagsNone' value64='0'/>
<enum name='MPSCNNNeuronTypeAbsolute' value64='6'/>
<enum name='MPSCNNNeuronTypeCount' value64='12'/>
<enum name='MPSCNNNeuronTypeELU' value64='9'/>
<enum name='MPSCNNNeuronTypeHardSigmoid' value64='4'/>
<enum name='MPSCNNNeuronTypeLinear' value64='2'/>
<enum name='MPSCNNNeuronTypeNone' value64='0'/>
<enum name='MPSCNNNeuronTypePReLU' value64='10'/>
<enum name='MPSCNNNeuronTypeReLU' value64='1'/>
<enum name='MPSCNNNeuronTypeReLUN' value64='11'/>
<enum name='MPSCNNNeuronTypeSigmoid' value64='3'/>
<enum name='MPSCNNNeuronTypeSoftPlus' value64='7'/>
<enum name='MPSCNNNeuronTypeSoftSign' value64='8'/>
<enum name='MPSCNNNeuronTypeTanH' value64='5'/>
<enum name='MPSNNPaddingMethodAddRemainderToBottomLeft' value64='8'/>
<enum name='MPSNNPaddingMethodAddRemainderToBottomRight' value64='12'/>
<enum name='MPSNNPaddingMethodAddRemainderToMask' value64='12'/>
<enum name='MPSNNPaddingMethodAddRemainderToTopLeft' value64='0'/>
<enum name='MPSNNPaddingMethodAddRemainderToTopRight' value64='4'/>
<enum name='MPSNNPaddingMethodAlignBottomRight' value64='2'/>
<enum name='MPSNNPaddingMethodAlignCentered' value64='0'/>
<enum name='MPSNNPaddingMethodAlignMask' value64='3'/>
<enum name='MPSNNPaddingMethodAlignTopLeft' value64='1'/>
<enum name='MPSNNPaddingMethodAlign_reserved' value64='3'/>
<enum name='MPSNNPaddingMethodCustom' value64='16384'/>
<enum name='MPSNNPaddingMethodExcludeEdges' value64='32768'/>
<enum name='MPSNNPaddingMethodSizeFull' value64='32'/>
<enum name='MPSNNPaddingMethodSizeMask' value64='2032'/>
<enum name='MPSNNPaddingMethodSizeSame' value64='16'/>
<enum name='MPSNNPaddingMethodSizeValidOnly' value64='0'/>
<enum name='MPSNNPaddingMethodSize_reserved' value64='48'/>
<enum name='MPSRNNBidirectionalCombineModeAdd' value64='1'/>
<enum name='MPSRNNBidirectionalCombineModeConcatenate' value64='2'/>
<enum name='MPSRNNBidirectionalCombineModeNone' value64='0'/>
<enum name='MPSRNNSequenceDirectionBackward' value64='1'/>
<enum name='MPSRNNSequenceDirectionForward' value64='0'/>
<class name='MPSCNNBinaryConvolution'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:convolutionData:outputBiasTerms:outputScaleTerms:inputBiasTerms:inputScaleTerms:type:flags:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='convolutionData' type64='@'/>
<arg const='true' declared_type64='float * _Nullable' index='2' name='outputBiasTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='3' name='outputScaleTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='4' name='inputBiasTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='5' name='inputScaleTerms' type64='^f'/>
<arg declared_type64='MPSCNNBinaryConvolutionType' index='6' name='type' type64='Q'/>
<arg declared_type64='MPSCNNBinaryConvolutionFlags' index='7' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:convolutionData:scaleValue:type:flags:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='convolutionData' type64='@'/>
<arg declared_type64='float' index='2' name='scaleValue' type64='f'/>
<arg declared_type64='MPSCNNBinaryConvolutionType' index='3' name='type' type64='Q'/>
<arg declared_type64='MPSCNNBinaryConvolutionFlags' index='4' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='inputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='outputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSCNNBinaryConvolutionNode'>
<method selector='initWithSource:weights:scaleValue:type:flags:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<arg declared_type64='float' index='2' name='scaleValue' type64='f'/>
<arg declared_type64='MPSCNNBinaryConvolutionType' index='3' name='type' type64='Q'/>
<arg declared_type64='MPSCNNBinaryConvolutionFlags' index='4' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:weights:scaleValue:type:flags:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<arg declared_type64='float' index='2' name='scaleValue' type64='f'/>
<arg declared_type64='MPSCNNBinaryConvolutionType' index='3' name='type' type64='Q'/>
<arg declared_type64='MPSCNNBinaryConvolutionFlags' index='4' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNBinaryFullyConnected'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:convolutionData:outputBiasTerms:outputScaleTerms:inputBiasTerms:inputScaleTerms:type:flags:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='convolutionData' type64='@'/>
<arg const='true' declared_type64='float * _Nullable' index='2' name='outputBiasTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='3' name='outputScaleTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='4' name='inputBiasTerms' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='5' name='inputScaleTerms' type64='^f'/>
<arg declared_type64='MPSCNNBinaryConvolutionType' index='6' name='type' type64='Q'/>
<arg declared_type64='MPSCNNBinaryConvolutionFlags' index='7' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:convolutionData:scaleValue:type:flags:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='convolutionData' type64='@'/>
<arg declared_type64='float' index='2' name='scaleValue' type64='f'/>
<arg declared_type64='MPSCNNBinaryConvolutionType' index='3' name='type' type64='Q'/>
<arg declared_type64='MPSCNNBinaryConvolutionFlags' index='4' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNBinaryFullyConnectedNode'>
<method selector='initWithSource:weights:scaleValue:type:flags:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<arg declared_type64='float' index='2' name='scaleValue' type64='f'/>
<arg declared_type64='MPSCNNBinaryConvolutionType' index='3' name='type' type64='Q'/>
<arg declared_type64='MPSCNNBinaryConvolutionFlags' index='4' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:weights:scaleValue:type:flags:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<arg declared_type64='float' index='2' name='scaleValue' type64='f'/>
<arg declared_type64='MPSCNNBinaryConvolutionType' index='3' name='type' type64='Q'/>
<arg declared_type64='MPSCNNBinaryConvolutionFlags' index='4' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNBinaryKernel'>
<method selector='clipRect'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='destinationFeatureChannelOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='destinationImageAllocator'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:primaryImage:secondaryImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='primaryImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='secondaryImage' type64='@'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:primaryImage:secondaryImage:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='primaryImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='secondaryImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='isBackwards'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='padding'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='primaryEdgeMode'>
<retval declared_type64='MPSImageEdgeMode' type64='Q'/>
</method>
<method selector='primaryOffset'>
<retval declared_type64='MPSOffset' type64='{_MPSOffset=qqq}'/>
</method>
<method selector='primaryStrideInPixelsX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='primaryStrideInPixelsY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='secondaryEdgeMode'>
<retval declared_type64='MPSImageEdgeMode' type64='Q'/>
</method>
<method selector='secondaryOffset'>
<retval declared_type64='MPSOffset' type64='{_MPSOffset=qqq}'/>
</method>
<method selector='secondaryStrideInPixelsX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='secondaryStrideInPixelsY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setClipRect:'>
<arg declared_type64='MTLRegion' index='0' name='clipRect' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDestinationFeatureChannelOffset:'>
<arg declared_type64='NSUInteger' index='0' name='destinationFeatureChannelOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDestinationImageAllocator:'>
<arg declared_type64='id _Nonnull' index='0' name='destinationImageAllocator' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPadding:'>
<arg declared_type64='id _Nonnull' index='0' name='padding' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryEdgeMode:'>
<arg declared_type64='MPSImageEdgeMode' index='0' name='primaryEdgeMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryOffset:'>
<arg declared_type64='MPSOffset' index='0' name='primaryOffset' type64='{_MPSOffset=qqq}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryEdgeMode:'>
<arg declared_type64='MPSImageEdgeMode' index='0' name='secondaryEdgeMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryOffset:'>
<arg declared_type64='MPSOffset' index='0' name='secondaryOffset' type64='{_MPSOffset=qqq}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNConvolution'>
<method selector='channelMultiplier'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='dilationRateX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='dilationRateY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:destinationImage:state:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='destinationImage' type64='@'/>
<arg declared_type64='MPSCNNConvolutionState * _Nonnull * _Nonnull' index='3' name='outState' type64='^@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='groups'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:convolutionDescriptor:kernelWeights:biasTerms:flags:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSCNNConvolutionDescriptor * _Nonnull' index='1' name='convolutionDescriptor' type64='@'/>
<arg const='true' declared_type64='float * _Nonnull' index='2' name='kernelWeights' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='3' name='biasTerms' type64='^f'/>
<arg declared_type64='MPSCNNConvolutionFlags' index='4' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:weights:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='inputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='neuron'>
<retval const='true' declared_type64='MPSCNNNeuron * _Nullable' type64='@'/>
</method>
<method selector='neuronParameterA'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronParameterB'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronType'>
<retval declared_type64='MPSCNNNeuronType' type64='i'/>
</method>
<method selector='outputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='subPixelScaleFactor'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSCNNConvolutionDescriptor'>
<method class_method='true' selector='cnnConvolutionDescriptorWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='inputFeatureChannels' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='outputFeatureChannels' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='cnnConvolutionDescriptorWithKernelWidth:kernelHeight:inputFeatureChannels:outputFeatureChannels:neuronFilter:'>
<arg declared_type64='NSUInteger' index='0' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='inputFeatureChannels' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='outputFeatureChannels' type64='Q'/>
<arg const='true' declared_type64='MPSCNNNeuron * _Nullable' index='4' name='neuronFilter' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='dilationRateX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='dilationRateY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='encodeWithCoder:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aCoder' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='groups'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='initWithCoder:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='inputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='neuron'>
<retval const='true' declared_type64='MPSCNNNeuron * _Nullable' type64='@'/>
</method>
<method selector='neuronParameterA'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronParameterB'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='neuronType'>
<retval declared_type64='MPSCNNNeuronType' type64='i'/>
</method>
<method selector='outputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setBatchNormalizationParametersForInferenceWithMean:variance:gamma:beta:epsilon:'>
<arg const='true' declared_type64='float * _Nonnull' index='0' name='mean' type64='^f'/>
<arg const='true' declared_type64='float * _Nonnull' index='1' name='variance' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='2' name='gamma' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='3' name='beta' type64='^f'/>
<arg const='true' declared_type64='float' index='4' name='epsilon' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDilationRateX:'>
<arg declared_type64='NSUInteger' index='0' name='dilationRateX' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDilationRateY:'>
<arg declared_type64='NSUInteger' index='0' name='dilationRateY' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setGroups:'>
<arg declared_type64='NSUInteger' index='0' name='groups' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setInputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='inputFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setKernelHeight:'>
<arg declared_type64='NSUInteger' index='0' name='kernelHeight' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setKernelWidth:'>
<arg declared_type64='NSUInteger' index='0' name='kernelWidth' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNeuron:'>
<arg const='true' declared_type64='MPSCNNNeuron * _Nullable' index='0' name='neuron' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNeuronToPReLUWithParametersA:'>
<arg declared_type64='NSData * _Nonnull' index='0' name='A' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNeuronType:parameterA:parameterB:'>
<arg declared_type64='MPSCNNNeuronType' index='0' name='neuronType' type64='i'/>
<arg declared_type64='float' index='1' name='parameterA' type64='f'/>
<arg declared_type64='float' index='2' name='parameterB' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOutputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='outputFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStrideInPixelsX:'>
<arg declared_type64='NSUInteger' index='0' name='strideInPixelsX' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStrideInPixelsY:'>
<arg declared_type64='NSUInteger' index='0' name='strideInPixelsY' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='strideInPixelsX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='strideInPixelsY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='supportsSecureCoding'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSCNNConvolutionNode'>
<method selector='convolutionState'>
<retval declared_type64='MPSCNNConvolutionStateNode * _Nullable' type64='@'/>
</method>
<method selector='initWithSource:weights:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:weights:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNConvolutionState'>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceOffset'>
<retval declared_type64='MPSOffset' type64='{_MPSOffset=qqq}'/>
</method>
</class>
<class name='MPSCNNConvolutionTranspose'>
<method selector='encodeToCommandBuffer:sourceImage:convolutionState:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSCNNConvolutionState * _Nullable' index='2' name='convolutionState' type64='@'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='groups'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:weights:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='inputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelOffsetX'>
<retval declared_type64='NSInteger' type64='q'/>
</method>
<method selector='kernelOffsetY'>
<retval declared_type64='NSInteger' type64='q'/>
</method>
<method selector='outputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setKernelOffsetX:'>
<arg declared_type64='NSInteger' index='0' name='kernelOffsetX' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setKernelOffsetY:'>
<arg declared_type64='NSInteger' index='0' name='kernelOffsetY' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNConvolutionTransposeNode'>
<method selector='initWithSource:convolutionState:weights:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='MPSCNNConvolutionStateNode * _Nullable' index='1' name='convolutionState' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:convolutionState:weights:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='MPSCNNConvolutionStateNode * _Nullable' index='1' name='convolutionState' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNCrossChannelNormalization'>
<method selector='alpha'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='beta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='delta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelSize:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='float' index='0' name='alpha' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBeta:'>
<arg declared_type64='float' index='0' name='beta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDelta:'>
<arg declared_type64='float' index='0' name='delta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNCrossChannelNormalizationNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:kernelSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelSizeInFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='nodeWithSource:kernelSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setKernelSizeInFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='kernelSizeInFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNDepthWiseConvolutionDescriptor'>
<method selector='channelMultiplier'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSCNNDilatedPoolingMax'>
<method selector='dilationRateX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='dilationRateY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:dilationRateX:dilationRateY:strideInPixelsX:strideInPixelsY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='dilationRateX' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='dilationRateY' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='6' name='strideInPixelsY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNDilatedPoolingMaxNode'>
<method selector='dilationRateX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='dilationRateY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='initWithSource:filterSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='size' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:filterSize:stride:dilationRate:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='size' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='stride' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='dilationRate' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:dilationRateX:dilationRateY:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='strideInPixelsY' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='dilationRateX' type64='Q'/>
<arg declared_type64='NSUInteger' index='6' name='dilationRateY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:filterSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='size' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:filterSize:stride:dilationRate:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='size' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='stride' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='dilationRate' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNFullyConnected'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:convolutionDescriptor:kernelWeights:biasTerms:flags:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSCNNConvolutionDescriptor * _Nonnull' index='1' name='fullyConnectedDescriptor' type64='@'/>
<arg const='true' declared_type64='float * _Nonnull' index='2' name='kernelWeights' type64='^f'/>
<arg const='true' declared_type64='float * _Nullable' index='3' name='biasTerms' type64='^f'/>
<arg declared_type64='MPSCNNConvolutionFlags' index='4' name='flags' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:weights:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNFullyConnectedNode'>
<method selector='initWithSource:weights:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:weights:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='weights' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNKernel'>
<method selector='clipRect'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='destinationFeatureChannelOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='destinationImageAllocator'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='edgeMode'>
<retval declared_type64='MPSImageEdgeMode' type64='Q'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='isBackwards'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='offset'>
<retval declared_type64='MPSOffset' type64='{_MPSOffset=qqq}'/>
</method>
<method selector='padding'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='setClipRect:'>
<arg declared_type64='MTLRegion' index='0' name='clipRect' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDestinationFeatureChannelOffset:'>
<arg declared_type64='NSUInteger' index='0' name='destinationFeatureChannelOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDestinationImageAllocator:'>
<arg declared_type64='id _Nonnull' index='0' name='destinationImageAllocator' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEdgeMode:'>
<arg declared_type64='MPSImageEdgeMode' index='0' name='edgeMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOffset:'>
<arg declared_type64='MPSOffset' index='0' name='offset' type64='{_MPSOffset=qqq}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPadding:'>
<arg declared_type64='id _Nonnull' index='0' name='padding' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='strideInPixelsX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='strideInPixelsY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSCNNLocalContrastNormalization'>
<method selector='alpha'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='beta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='delta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='p0'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='pm'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='ps'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='float' index='0' name='alpha' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBeta:'>
<arg declared_type64='float' index='0' name='beta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDelta:'>
<arg declared_type64='float' index='0' name='delta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setP0:'>
<arg declared_type64='float' index='0' name='p0' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPm:'>
<arg declared_type64='float' index='0' name='pm' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPs:'>
<arg declared_type64='float' index='0' name='ps' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNLocalContrastNormalizationNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:kernelSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='nodeWithSource:kernelSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='p0'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='pm'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='ps'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='setKernelHeight:'>
<arg declared_type64='NSUInteger' index='0' name='kernelHeight' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setKernelWidth:'>
<arg declared_type64='NSUInteger' index='0' name='kernelWidth' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setP0:'>
<arg declared_type64='float' index='0' name='p0' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPm:'>
<arg declared_type64='float' index='0' name='pm' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPs:'>
<arg declared_type64='float' index='0' name='ps' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNLogSoftMaxNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuron'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronAbsolute'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronAbsoluteNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronELU'>
<method selector='a'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithDevice:a:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronELUNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:a:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:a:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronHardSigmoid'>
<method selector='a'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='b'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithDevice:a:b:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronHardSigmoidNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:a:b:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:a:b:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronLinear'>
<method selector='a'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='b'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithDevice:a:b:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronLinearNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:a:b:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:a:b:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronNode'>
<method selector='a'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='b'>
<retval declared_type64='float' type64='f'/>
</method>
</class>
<class name='MPSCNNNeuronPReLU'>
<method selector='initWithDevice:a:count:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='float * _Nonnull' index='1' name='a' type64='^f'/>
<arg declared_type64='NSUInteger' index='2' name='count' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronPReLUNode'>
<method selector='initWithSource:aData:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSData * _Nonnull' index='1' name='aData' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:aData:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSData * _Nonnull' index='1' name='aData' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronReLU'>
<method selector='a'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithDevice:a:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronReLUN'>
<method selector='a'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='b'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithDevice:a:b:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronReLUNNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:a:b:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:a:b:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronReLUNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:a:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:a:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronSigmoid'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronSigmoidNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronSoftPlus'>
<method selector='a'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='b'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithDevice:a:b:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronSoftPlusNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:a:b:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:a:b:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronSoftSign'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronSoftSignNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronTanH'>
<method selector='a'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='b'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithDevice:a:b:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNeuronTanHNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:a:b:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:a:b:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='float' index='1' name='a' type64='f'/>
<arg declared_type64='float' index='2' name='b' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNNormalizationNode'>
<method selector='alpha'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='beta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='delta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='float' index='0' name='alpha' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBeta:'>
<arg declared_type64='float' index='0' name='beta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDelta:'>
<arg declared_type64='float' index='0' name='delta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNPooling'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='strideInPixelsY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNPoolingAverage'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='strideInPixelsY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setZeroPadSizeX:'>
<arg declared_type64='NSUInteger' index='0' name='zeroPadSizeX' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setZeroPadSizeY:'>
<arg declared_type64='NSUInteger' index='0' name='zeroPadSizeY' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='zeroPadSizeX'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='zeroPadSizeY'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSCNNPoolingL2Norm'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='strideInPixelsY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNPoolingMax'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='strideInPixelsY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNPoolingNode'>
<method selector='initWithSource:filterSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='size' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:filterSize:stride:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='size' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='stride' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:kernelWidth:kernelHeight:strideInPixelsX:strideInPixelsY:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='strideInPixelsX' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='strideInPixelsY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:filterSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='size' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:filterSize:stride:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='size' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='stride' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNSoftMaxNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNSpatialNormalization'>
<method selector='alpha'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='beta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='delta'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='float' index='0' name='alpha' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBeta:'>
<arg declared_type64='float' index='0' name='beta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDelta:'>
<arg declared_type64='float' index='0' name='delta' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNSpatialNormalizationNode'>
<method selector='initWithSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:kernelSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='nodeWithSource:kernelSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelSize' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setKernelHeight:'>
<arg declared_type64='NSUInteger' index='0' name='kernelHeight' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setKernelWidth:'>
<arg declared_type64='NSUInteger' index='0' name='kernelWidth' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSCNNSubPixelConvolutionDescriptor'>
<method selector='setSubPixelScaleFactor:'>
<arg declared_type64='NSUInteger' index='0' name='subPixelScaleFactor' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='subPixelScaleFactor'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSCNNUpsampling'>
<method selector='scaleFactorX'>
<retval declared_type64='double' type64='d'/>
</method>
<method selector='scaleFactorY'>
<retval declared_type64='double' type64='d'/>
</method>
</class>
<class name='MPSCNNUpsamplingBilinear'>
<method selector='initWithDevice:integerScaleFactorX:integerScaleFactorY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='integerScaleFactorX' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='integerScaleFactorY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNUpsamplingBilinearNode'>
<method selector='initWithSource:integerScaleFactorX:integerScaleFactorY:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='integerScaleFactorX' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='integerScaleFactorY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:integerScaleFactorX:integerScaleFactorY:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='integerScaleFactorX' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='integerScaleFactorY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='scaleFactorX'>
<retval declared_type64='double' type64='d'/>
</method>
<method selector='scaleFactorY'>
<retval declared_type64='double' type64='d'/>
</method>
</class>
<class name='MPSCNNUpsamplingNearest'>
<method selector='initWithDevice:integerScaleFactorX:integerScaleFactorY:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='integerScaleFactorX' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='integerScaleFactorY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSCNNUpsamplingNearestNode'>
<method selector='initWithSource:integerScaleFactorX:integerScaleFactorY:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='integerScaleFactorX' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='integerScaleFactorY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:integerScaleFactorX:integerScaleFactorY:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='integerScaleFactorX' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='integerScaleFactorY' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='scaleFactorX'>
<retval declared_type64='double' type64='d'/>
</method>
<method selector='scaleFactorY'>
<retval declared_type64='double' type64='d'/>
</method>
</class>
<class name='MPSGRUDescriptor'>
<method class_method='true' selector='createGRUDescriptorWithInputFeatureChannels:outputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='inputFeatureChannels' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='outputFeatureChannels' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='flipOutputGates'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='gatePnormValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='inputGateInputWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='inputGateRecurrentWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='outputGateInputGateWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='outputGateInputWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='outputGateRecurrentWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='recurrentGateInputWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='recurrentGateRecurrentWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='setFlipOutputGates:'>
<arg declared_type64='BOOL' index='0' name='flipOutputGates' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setGatePnormValue:'>
<arg declared_type64='float' index='0' name='gatePnormValue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setInputGateInputWeights:'>
<arg declared_type64='id _Nullable' index='0' name='inputGateInputWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setInputGateRecurrentWeights:'>
<arg declared_type64='id _Nullable' index='0' name='inputGateRecurrentWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOutputGateInputGateWeights:'>
<arg declared_type64='id _Nullable' index='0' name='outputGateInputGateWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOutputGateInputWeights:'>
<arg declared_type64='id _Nullable' index='0' name='outputGateInputWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOutputGateRecurrentWeights:'>
<arg declared_type64='id _Nullable' index='0' name='outputGateRecurrentWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRecurrentGateInputWeights:'>
<arg declared_type64='id _Nullable' index='0' name='recurrentGateInputWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRecurrentGateRecurrentWeights:'>
<arg declared_type64='id _Nullable' index='0' name='recurrentGateRecurrentWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSLSTMDescriptor'>
<method selector='cellGateInputWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='cellGateMemoryWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='cellGateRecurrentWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='cellToOutputNeuronParamA'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='cellToOutputNeuronParamB'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='cellToOutputNeuronType'>
<retval declared_type64='MPSCNNNeuronType' type64='i'/>
</method>
<method class_method='true' selector='createLSTMDescriptorWithInputFeatureChannels:outputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='inputFeatureChannels' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='outputFeatureChannels' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='forgetGateInputWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='forgetGateMemoryWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='forgetGateRecurrentWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='inputGateInputWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='inputGateMemoryWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='inputGateRecurrentWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='memoryWeightsAreDiagonal'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='outputGateInputWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='outputGateMemoryWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='outputGateRecurrentWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='setCellGateInputWeights:'>
<arg declared_type64='id _Nullable' index='0' name='cellGateInputWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCellGateMemoryWeights:'>
<arg declared_type64='id _Nullable' index='0' name='cellGateMemoryWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCellGateRecurrentWeights:'>
<arg declared_type64='id _Nullable' index='0' name='cellGateRecurrentWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCellToOutputNeuronParamA:'>
<arg declared_type64='float' index='0' name='cellToOutputNeuronParamA' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCellToOutputNeuronParamB:'>
<arg declared_type64='float' index='0' name='cellToOutputNeuronParamB' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCellToOutputNeuronType:'>
<arg declared_type64='MPSCNNNeuronType' index='0' name='cellToOutputNeuronType' type64='i'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setForgetGateInputWeights:'>
<arg declared_type64='id _Nullable' index='0' name='forgetGateInputWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setForgetGateMemoryWeights:'>
<arg declared_type64='id _Nullable' index='0' name='forgetGateMemoryWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setForgetGateRecurrentWeights:'>
<arg declared_type64='id _Nullable' index='0' name='forgetGateRecurrentWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setInputGateInputWeights:'>
<arg declared_type64='id _Nullable' index='0' name='inputGateInputWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setInputGateMemoryWeights:'>
<arg declared_type64='id _Nullable' index='0' name='inputGateMemoryWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setInputGateRecurrentWeights:'>
<arg declared_type64='id _Nullable' index='0' name='inputGateRecurrentWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMemoryWeightsAreDiagonal:'>
<arg declared_type64='BOOL' index='0' name='memoryWeightsAreDiagonal' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOutputGateInputWeights:'>
<arg declared_type64='id _Nullable' index='0' name='outputGateInputWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOutputGateMemoryWeights:'>
<arg declared_type64='id _Nullable' index='0' name='outputGateMemoryWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOutputGateRecurrentWeights:'>
<arg declared_type64='id _Nullable' index='0' name='outputGateRecurrentWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSNNBinaryArithmeticNode'>
<method selector='initWithLeftSource:rightSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='left' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='right' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSources:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceNodes' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithLeftSource:rightSource:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='left' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='right' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSources:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceNodes' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNConcatenationNode'>
<method selector='initWithSources:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceNodes' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSources:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceNodes' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNDefaultPadding'>
<method selector='label'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='paddingForTensorflowAveragePooling'>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='paddingWithMethod:'>
<arg declared_type64='MPSNNPaddingMethod' index='0' name='method' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNFilterNode'>
<method selector='label'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='paddingPolicy'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='resultImage'>
<retval declared_type64='MPSNNImageNode * _Nonnull' type64='@'/>
</method>
<method selector='resultState'>
<retval declared_type64='MPSNNStateNode * _Nullable' type64='@'/>
</method>
<method selector='resultStates'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='setLabel:'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPaddingPolicy:'>
<arg declared_type64='id _Nonnull' index='0' name='paddingPolicy' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSNNGraph'>
<method selector='destinationImageAllocator'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceImages:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceImages' type64='@'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:sourceImages:sourceStates:intermediateImages:destinationStates:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceImages' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='2' name='sourceStates' type64='@'/>
<arg declared_type64='NSMutableArray * _Nullable' index='3' name='intermediateImages' type64='@'/>
<arg declared_type64='NSMutableArray * _Nullable' index='4' name='destinationStates' type64='@'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='executeAsyncWithSourceImages:completionHandler:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceImages' type64='@'/>
<arg declared_type64='MPSNNGraphCompletionHandler _Nonnull' function_pointer='true' index='1' name='handler' type64='@?'>
<arg declared_type64='MPSImage * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:resultImage:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='1' name='resultImage' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='intermediateImageHandles'>
<retval declared_type64='NSArray&gt; * _Nullable' type64='@'/>
</method>
<method selector='outputStateIsTemporary'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='resultHandle'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='resultStateHandles'>
<retval declared_type64='NSArray&gt; * _Nullable' type64='@'/>
</method>
<method selector='setDestinationImageAllocator:'>
<arg declared_type64='id _Nonnull' index='0' name='destinationImageAllocator' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOutputStateIsTemporary:'>
<arg declared_type64='BOOL' index='0' name='outputStateIsTemporary' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceImageHandles'>
<retval declared_type64='NSArray&gt; * _Nonnull' type64='@'/>
</method>
<method selector='sourceStateHandles'>
<retval declared_type64='NSArray&gt; * _Nullable' type64='@'/>
</method>
</class>
<class name='MPSNNImageNode'>
<method selector='exportFromGraph'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method class_method='true' selector='exportedNodeWithHandle:'>
<arg declared_type64='NSObject * _Nullable' index='0' name='handle' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='format'>
<retval declared_type64='MPSImageFeatureChannelFormat' type64='Q'/>
</method>
<method selector='handle'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='imageAllocator'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='initWithHandle:'>
<arg declared_type64='NSObject * _Nullable' index='0' name='handle' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithHandle:'>
<arg declared_type64='NSObject * _Nullable' index='0' name='handle' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setExportFromGraph:'>
<arg declared_type64='BOOL' index='0' name='exportFromGraph' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFormat:'>
<arg declared_type64='MPSImageFeatureChannelFormat' index='0' name='format' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setHandle:'>
<arg declared_type64='id _Nullable' index='0' name='handle' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setImageAllocator:'>
<arg declared_type64='id _Nonnull' index='0' name='imageAllocator' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSNNScaleNode'>
<method selector='initWithSource:outputSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='MTLSize' index='1' name='size' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSource:transformProvider:outputSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nullable' index='1' name='transformProvider' type64='@'/>
<arg declared_type64='MTLSize' index='2' name='size' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:outputSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='MTLSize' index='1' name='size' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='nodeWithSource:transformProvider:outputSize:'>
<arg declared_type64='MPSNNImageNode * _Nonnull' index='0' name='sourceNode' type64='@'/>
<arg declared_type64='id _Nullable' index='1' name='transformProvider' type64='@'/>
<arg declared_type64='MTLSize' index='2' name='size' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSNNStateNode'>
<method selector='handle'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='setHandle:'>
<arg declared_type64='id _Nullable' index='0' name='handle' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSRNNDescriptor'>
<method selector='inputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='layerSequenceDirection'>
<retval declared_type64='MPSRNNSequenceDirection' type64='Q'/>
</method>
<method selector='outputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setInputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='inputFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLayerSequenceDirection:'>
<arg declared_type64='MPSRNNSequenceDirection' index='0' name='layerSequenceDirection' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOutputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='outputFeatureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUseFloat32Weights:'>
<arg declared_type64='BOOL' index='0' name='useFloat32Weights' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUseLayerInputUnitTransformMode:'>
<arg declared_type64='BOOL' index='0' name='useLayerInputUnitTransformMode' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='useFloat32Weights'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='useLayerInputUnitTransformMode'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSRNNImageInferenceLayer'>
<method selector='bidirectionalCombineMode'>
<retval declared_type64='MPSRNNBidirectionalCombineMode' type64='Q'/>
</method>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeBidirectionalSequenceToCommandBuffer:sourceSequence:destinationForwardImages:destinationBackwardImages:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceSequence' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='2' name='destinationForwardImages' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='3' name='destinationBackwardImages' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeSequenceToCommandBuffer:sourceImages:destinationImages:recurrentInputState:recurrentOutputStates:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceImages' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='2' name='destinationImages' type64='@'/>
<arg declared_type64='MPSRNNRecurrentImageState * _Nullable' index='3' name='recurrentInputState' type64='@'/>
<arg declared_type64='NSMutableArray * _Nullable' index='4' name='recurrentOutputStates' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:rnnDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSRNNDescriptor * _Nonnull' index='1' name='rnnDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:rnnDescriptors:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='NSArray * _Nonnull' index='1' name='rnnDescriptors' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='inputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='numberOfLayers'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='outputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='recurrentOutputIsTemporary'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='setBidirectionalCombineMode:'>
<arg declared_type64='MPSRNNBidirectionalCombineMode' index='0' name='bidirectionalCombineMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRecurrentOutputIsTemporary:'>
<arg declared_type64='BOOL' index='0' name='recurrentOutputIsTemporary' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStoreAllIntermediateStates:'>
<arg declared_type64='BOOL' index='0' name='storeAllIntermediateStates' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='storeAllIntermediateStates'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSRNNMatrixInferenceLayer'>
<method selector='bidirectionalCombineMode'>
<retval declared_type64='MPSRNNBidirectionalCombineMode' type64='Q'/>
</method>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeBidirectionalSequenceToCommandBuffer:sourceSequence:destinationForwardMatrices:destinationBackwardMatrices:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceSequence' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='2' name='destinationForwardMatrices' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='3' name='destinationBackwardMatrices' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeSequenceToCommandBuffer:sourceMatrices:destinationMatrices:recurrentInputState:recurrentOutputStates:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='sourceMatrices' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='2' name='destinationMatrices' type64='@'/>
<arg declared_type64='MPSRNNRecurrentMatrixState * _Nullable' index='3' name='recurrentInputState' type64='@'/>
<arg declared_type64='NSMutableArray * _Nullable' index='4' name='recurrentOutputStates' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:rnnDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSRNNDescriptor * _Nonnull' index='1' name='rnnDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:rnnDescriptors:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='NSArray * _Nonnull' index='1' name='rnnDescriptors' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='inputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='numberOfLayers'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='outputFeatureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='recurrentOutputIsTemporary'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='setBidirectionalCombineMode:'>
<arg declared_type64='MPSRNNBidirectionalCombineMode' index='0' name='bidirectionalCombineMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRecurrentOutputIsTemporary:'>
<arg declared_type64='BOOL' index='0' name='recurrentOutputIsTemporary' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStoreAllIntermediateStates:'>
<arg declared_type64='BOOL' index='0' name='storeAllIntermediateStates' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='storeAllIntermediateStates'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSRNNRecurrentImageState'>
<method selector='getMemoryCellImageForLayerIndex:'>
<arg declared_type64='NSUInteger' index='0' name='layerIndex' type64='Q'/>
<retval declared_type64='MPSImage * _Nullable' type64='@'/>
</method>
<method selector='getRecurrentOutputImageForLayerIndex:'>
<arg declared_type64='NSUInteger' index='0' name='layerIndex' type64='Q'/>
<retval declared_type64='MPSImage * _Nullable' type64='@'/>
</method>
</class>
<class name='MPSRNNRecurrentMatrixState'>
<method selector='getMemoryCellMatrixForLayerIndex:'>
<arg declared_type64='NSUInteger' index='0' name='layerIndex' type64='Q'/>
<retval declared_type64='MPSMatrix * _Nullable' type64='@'/>
</method>
<method selector='getRecurrentOutputMatrixForLayerIndex:'>
<arg declared_type64='NSUInteger' index='0' name='layerIndex' type64='Q'/>
<retval declared_type64='MPSMatrix * _Nullable' type64='@'/>
</method>
</class>
<class name='MPSRNNSingleGateDescriptor'>
<method class_method='true' selector='createRNNSingleGateDescriptorWithInputFeatureChannels:outputFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='inputFeatureChannels' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='outputFeatureChannels' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='inputWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='recurrentWeights'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='setInputWeights:'>
<arg declared_type64='id _Nullable' index='0' name='inputWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRecurrentWeights:'>
<arg declared_type64='id _Nullable' index='0' name='recurrentWeights' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NSObject'>
<method selector='biasTerms'>
<retval declared_type64='float * _Nullable' type64='^f'/>
</method>
<method selector='dataType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='descriptor'>
<retval declared_type64='MPSCNNConvolutionDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='destinationImageDescriptorForSourceImages:sourceStates:forKernel:suggestedDescriptor:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceImages' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSKernel * _Nonnull' index='2' name='kernel' type64='@'/>
<arg declared_type64='MPSImageDescriptor * _Nonnull' index='3' name='inDescriptor' type64='@'/>
<retval declared_type64='MPSImageDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='label'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='load'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='lookupTableForUInt8Kernel'>
<retval declared_type64='float * _Nonnull' type64='^f'/>
</method>
<method selector='paddingMethod'>
<retval declared_type64='MPSNNPaddingMethod' type64='Q'/>
</method>
<method selector='purge'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='rangesForUInt8Kernel'>
<retval declared_type64='vector_float2 * _Nonnull' type64='^'/>
</method>
<method selector='sourceHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='transformForSourceImage:handle:'>
<arg declared_type64='MPSImage * _Nonnull' index='0' name='image' type64='@'/>
<arg declared_type64='id _Nullable' index='1' name='handle' type64='@'/>
<retval declared_type64='MPSScaleTransform' type64='{MPSScaleTransform=dddd}'/>
</method>
<method selector='weights'>
<retval declared_type64='void * _Nonnull' type64='^v'/>
</method>
</class>
<informal_protocol name='MPSCNNConvolutionDataSource'>
<method selector='biasTerms' type64='^f16@0:8'>
<retval declared_type64='float * _Nullable' type64='^f'/>
</method>
<method selector='dataType' type64='I16@0:8'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='descriptor' type64='@16@0:8'>
<retval declared_type64='MPSCNNConvolutionDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='label' type64='@16@0:8'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='load' type64='B16@0:8'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='lookupTableForUInt8Kernel' type64='^f16@0:8'>
<retval declared_type64='float * _Nonnull' type64='^f'/>
</method>
<method selector='purge' type64='v16@0:8'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='rangesForUInt8Kernel' type64='^16@0:8'>
<retval declared_type64='vector_float2 * _Nonnull' type64='^'/>
</method>
<method selector='weights' type64='^v16@0:8'>
<retval declared_type64='void * _Nonnull' type64='^v'/>
</method>
</informal_protocol>
<informal_protocol name='MPSHandle'>
<method selector='label' type64='@16@0:8'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
</informal_protocol>
<informal_protocol name='MPSImageSizeEncodingState'>
<method selector='sourceHeight' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceWidth' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</informal_protocol>
<informal_protocol name='MPSImageTransformProvider'>
<method selector='transformForSourceImage:handle:' type64='{MPSScaleTransform=dddd}32@0:8@16@24'>
<arg declared_type64='MPSImage * _Nonnull' index='0' name='image' type64='@'/>
<arg declared_type64='id _Nullable' index='1' name='handle' type64='@'/>
<retval declared_type64='MPSScaleTransform' type64='{MPSScaleTransform=dddd}'/>
</method>
</informal_protocol>
<informal_protocol name='MPSNNPadding'>
<method selector='destinationImageDescriptorForSourceImages:sourceStates:forKernel:suggestedDescriptor:' type64='@48@0:8@16@24@32@40'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceImages' type64='@'/>
<arg declared_type64='NSArray * _Nullable' index='1' name='sourceStates' type64='@'/>
<arg declared_type64='MPSKernel * _Nonnull' index='2' name='kernel' type64='@'/>
<arg declared_type64='MPSImageDescriptor * _Nonnull' index='3' name='inDescriptor' type64='@'/>
<retval declared_type64='MPSImageDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='label' type64='@16@0:8'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='paddingMethod' type64='Q16@0:8'>
<retval declared_type64='MPSNNPaddingMethod' type64='Q'/>
</method>
</informal_protocol>
<struct name='MPSImageReadWriteParams' type64='{_MPSImageReadWriteParams=&quot;featureChannelOffset&quot;Q&quot;numberOfFeatureChannelsToReadWrite&quot;Q}'>
<field declared_type64='NSUInteger' name='featureChannelOffset' type64='Q'/>
<field declared_type64='NSUInteger' name='numberOfFeatureChannelsToReadWrite' type64='Q'/>
</struct>
<struct name='MPSOffset' type64='{_MPSOffset=&quot;x&quot;q&quot;y&quot;q&quot;z&quot;q}'>
<field declared_type64='NSInteger' name='x' type64='q'/>
<field declared_type64='NSInteger' name='y' type64='q'/>
<field declared_type64='NSInteger' name='z' type64='q'/>
</struct>
<struct name='MPSOrigin' type64='{MPSOrigin=&quot;x&quot;d&quot;y&quot;d&quot;z&quot;d}'>
<field declared_type64='double' name='x' type64='d'/>
<field declared_type64='double' name='y' type64='d'/>
<field declared_type64='double' name='z' type64='d'/>
</struct>
<struct name='MPSRegion' type64='{MPSRegion=&quot;origin&quot;{MPSOrigin=&quot;x&quot;d&quot;y&quot;d&quot;z&quot;d}&quot;size&quot;{MPSSize=&quot;width&quot;d&quot;height&quot;d&quot;depth&quot;d}}'>
<field declared_type64='MPSOrigin' name='origin' type64='{MPSOrigin=&quot;x&quot;d&quot;y&quot;d&quot;z&quot;d}'/>
<field declared_type64='MPSSize' name='size' type64='{MPSSize=&quot;width&quot;d&quot;height&quot;d&quot;depth&quot;d}'/>
</struct>
<struct name='MPSScaleTransform' type64='{MPSScaleTransform=&quot;scaleX&quot;d&quot;scaleY&quot;d&quot;translateX&quot;d&quot;translateY&quot;d}'>
<field declared_type64='double' name='scaleX' type64='d'/>
<field declared_type64='double' name='scaleY' type64='d'/>
<field declared_type64='double' name='translateX' type64='d'/>
<field declared_type64='double' name='translateY' type64='d'/>
</struct>
<struct name='MPSSize' type64='{MPSSize=&quot;width&quot;d&quot;height&quot;d&quot;depth&quot;d}'>
<field declared_type64='double' name='width' type64='d'/>
<field declared_type64='double' name='height' type64='d'/>
<field declared_type64='double' name='depth' type64='d'/>
</struct>
<constant const='true' declared_type64='MTLRegion' name='MPSRectNoClip' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<enum name='MPSDataLayoutFeatureChannelsxHeightxWidth' value64='1'/>
<enum name='MPSDataLayoutHeightxWidthxFeatureChannels' value64='0'/>
<enum name='MPSDataTypeFloat16' value64='268435472'/>
<enum name='MPSDataTypeFloat32' value64='268435488'/>
<enum name='MPSDataTypeFloatBit' value64='268435456'/>
<enum name='MPSDataTypeInt16' value64='536870928'/>
<enum name='MPSDataTypeInt8' value64='536870920'/>
<enum name='MPSDataTypeIntBit' value64='536870912'/>
<enum name='MPSDataTypeInvalid' value64='0'/>
<enum name='MPSDataTypeNormalizedBit' value64='1073741824'/>
<enum name='MPSDataTypeSignedBit' value64='536870912'/>
<enum name='MPSDataTypeUInt16' value64='16'/>
<enum name='MPSDataTypeUInt32' value64='32'/>
<enum name='MPSDataTypeUInt8' value64='8'/>
<enum name='MPSDataTypeUnorm1' value64='1073741825'/>
<enum name='MPSDataTypeUnorm8' value64='1073741832'/>
<enum name='MPSImageEdgeModeClamp' value64='1'/>
<enum name='MPSImageEdgeModeZero' value64='0'/>
<enum name='MPSImageFeatureChannelFormatFloat16' value64='3'/>
<enum name='MPSImageFeatureChannelFormatFloat32' value64='4'/>
<enum name='MPSImageFeatureChannelFormatNone' value64='0'/>
<enum name='MPSImageFeatureChannelFormatUnorm16' value64='2'/>
<enum name='MPSImageFeatureChannelFormatUnorm8' value64='1'/>
<enum name='MPSKernelOptionsAllowReducedPrecision' value64='2'/>
<enum name='MPSKernelOptionsDisableInternalTiling' value64='4'/>
<enum name='MPSKernelOptionsInsertDebugGroups' value64='8'/>
<enum name='MPSKernelOptionsNone' value64='0'/>
<enum name='MPSKernelOptionsSkipAPIValidation' value64='1'/>
<enum name='MPSKernelOptionsVerbose' value64='16'/>
<enum name='MPSPurgeableStateAllocationDeferred' value64='0'/>
<enum name='MPSPurgeableStateEmpty' value64='4'/>
<enum name='MPSPurgeableStateKeepCurrent' value64='1'/>
<enum name='MPSPurgeableStateNonVolatile' value64='2'/>
<enum name='MPSPurgeableStateVolatile' value64='3'/>
<class name='MPSImage'>
<method class_method='true' selector='defaultAllocator'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='device'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='featureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='height'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='initWithDevice:imageDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSImageDescriptor * _Nonnull' index='1' name='imageDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithTexture:featureChannels:'>
<arg declared_type64='id _Nonnull' index='0' name='texture' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='featureChannels' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='label'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='numberOfImages'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='pixelFormat'>
<retval declared_type64='MTLPixelFormat' type64='Q'/>
</method>
<method selector='pixelSize'>
<retval declared_type64='size_t' type64='Q'/>
</method>
<method selector='precision'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='readBytes:dataLayout:bytesPerRow:region:featureChannelInfo:imageIndex:'>
<arg declared_type64='void * _Nonnull' index='0' name='dataBytes' type64='^v'/>
<arg declared_type64='MPSDataLayout' index='1' name='dataLayout' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='bytesPerRow' type64='Q'/>
<arg declared_type64='MTLRegion' index='3' name='region' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<arg declared_type64='MPSImageReadWriteParams' index='4' name='featureChannelInfo' type64='{_MPSImageReadWriteParams=QQ}'/>
<arg declared_type64='NSUInteger' index='5' name='imageIndex' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='readBytes:dataLayout:imageIndex:'>
<arg declared_type64='void * _Nonnull' index='0' name='dataBytes' type64='^v'/>
<arg declared_type64='MPSDataLayout' index='1' name='dataLayout' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='imageIndex' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLabel:'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPurgeableState:'>
<arg declared_type64='MPSPurgeableState' index='0' name='state' type64='Q'/>
<retval declared_type64='MPSPurgeableState' type64='Q'/>
</method>
<method selector='texture'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='textureType'>
<retval declared_type64='MTLTextureType' type64='Q'/>
</method>
<method selector='usage'>
<retval declared_type64='MTLTextureUsage' type64='Q'/>
</method>
<method selector='width'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='writeBytes:dataLayout:bytesPerRow:region:featureChannelInfo:imageIndex:'>
<arg const='true' declared_type64='void * _Nonnull' index='0' name='dataBytes' type64='^v'/>
<arg declared_type64='MPSDataLayout' index='1' name='dataLayout' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='bytesPerRow' type64='Q'/>
<arg declared_type64='MTLRegion' index='3' name='region' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<arg declared_type64='MPSImageReadWriteParams' index='4' name='featureChannelInfo' type64='{_MPSImageReadWriteParams=QQ}'/>
<arg declared_type64='NSUInteger' index='5' name='imageIndex' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='writeBytes:dataLayout:imageIndex:'>
<arg const='true' declared_type64='void * _Nonnull' index='0' name='dataBytes' type64='^v'/>
<arg declared_type64='MPSDataLayout' index='1' name='dataLayout' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='imageIndex' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageDescriptor'>
<method selector='channelFormat'>
<retval declared_type64='MPSImageFeatureChannelFormat' type64='Q'/>
</method>
<method selector='cpuCacheMode'>
<retval declared_type64='MTLCPUCacheMode' type64='Q'/>
</method>
<method selector='featureChannels'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='height'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='imageDescriptorWithChannelFormat:width:height:featureChannels:'>
<arg declared_type64='MPSImageFeatureChannelFormat' index='0' name='channelFormat' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='width' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='height' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='featureChannels' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='imageDescriptorWithChannelFormat:width:height:featureChannels:numberOfImages:usage:'>
<arg declared_type64='MPSImageFeatureChannelFormat' index='0' name='channelFormat' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='width' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='height' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='featureChannels' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='numberOfImages' type64='Q'/>
<arg declared_type64='MTLTextureUsage' index='5' name='usage' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='numberOfImages'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='pixelFormat'>
<retval declared_type64='MTLPixelFormat' type64='Q'/>
</method>
<method selector='setChannelFormat:'>
<arg declared_type64='MPSImageFeatureChannelFormat' index='0' name='channelFormat' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCpuCacheMode:'>
<arg declared_type64='MTLCPUCacheMode' index='0' name='cpuCacheMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFeatureChannels:'>
<arg declared_type64='NSUInteger' index='0' name='featureChannels' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setHeight:'>
<arg declared_type64='NSUInteger' index='0' name='height' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNumberOfImages:'>
<arg declared_type64='NSUInteger' index='0' name='numberOfImages' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStorageMode:'>
<arg declared_type64='MTLStorageMode' index='0' name='storageMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUsage:'>
<arg declared_type64='MTLTextureUsage' index='0' name='usage' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setWidth:'>
<arg declared_type64='NSUInteger' index='0' name='width' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='storageMode'>
<retval declared_type64='MTLStorageMode' type64='Q'/>
</method>
<method selector='usage'>
<retval declared_type64='MTLTextureUsage' type64='Q'/>
</method>
<method selector='width'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSKernel'>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='device'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='initWithCoder:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='label'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='options'>
<retval declared_type64='MPSKernelOptions' type64='Q'/>
</method>
<method selector='setLabel:'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOptions:'>
<arg declared_type64='MPSKernelOptions' index='0' name='options' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSState'>
<method selector='isTemporary'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='label'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='readCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setLabel:'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setReadCount:'>
<arg declared_type64='NSUInteger' index='0' name='readCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSTemporaryImage'>
<method class_method='true' selector='defaultAllocator'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='prefetchStorageWithCommandBuffer:imageDescriptorList:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='descriptorList' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='readCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setReadCount:'>
<arg declared_type64='NSUInteger' index='0' name='readCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='temporaryImageWithCommandBuffer:imageDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg const='true' declared_type64='MPSImageDescriptor * _Nonnull' index='1' name='imageDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='temporaryImageWithCommandBuffer:textureDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg const='true' declared_type64='MTLTextureDescriptor * _Nonnull' index='1' name='textureDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='NSObject'>
<method selector='imageForCommandBuffer:imageDescriptor:kernel:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSImageDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<arg declared_type64='MPSKernel * _Nonnull' index='2' name='kernel' type64='@'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
<method selector='mpsMTLDevice'>
<retval declared_type64='id' type64='@'/>
</method>
</class>
<informal_protocol name='MPSDeviceProvider'>
<method selector='mpsMTLDevice' type64='@16@0:8'>
<retval declared_type64='id' type64='@'/>
</method>
</informal_protocol>
<informal_protocol name='MPSImageAllocator'>
<method selector='imageForCommandBuffer:imageDescriptor:kernel:' type64='@40@0:8@16@24@32'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSImageDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<arg declared_type64='MPSKernel * _Nonnull' index='2' name='kernel' type64='@'/>
<retval declared_type64='MPSImage * _Nonnull' type64='@'/>
</method>
</informal_protocol>
<struct name='MPSImageHistogramInfo' type64='{_MPSImageHistogramInfo=&quot;numberOfHistogramEntries&quot;Q&quot;histogramForAlpha&quot;B&quot;minPixelValue&quot;&quot;maxPixelValue&quot;}'>
<field declared_type64='NSUInteger' name='numberOfHistogramEntries' type64='Q'/>
<field declared_type64='BOOL' name='histogramForAlpha' type64='B'/>
<field declared_type64='vector_float4' name='minPixelValue' type64=''/>
<field declared_type64='vector_float4' name='maxPixelValue' type64=''/>
</struct>
<struct name='MPSImageKeypointData' type64='{_MPSImageKeypointData=&quot;keypointCoordinate&quot;&quot;keypointColorValue&quot;f}'>
<field declared_type64='vector_ushort2' name='keypointCoordinate' type64=''/>
<field declared_type64='float' name='keypointColorValue' type64='f'/>
</struct>
<struct name='MPSImageKeypointRangeInfo' type64='{_MPSImageKeypointRangeInfo=&quot;maximumKeypoints&quot;Q&quot;minimumThresholdValue&quot;f}'>
<field declared_type64='NSUInteger' name='maximumKeypoints' type64='Q'/>
<field declared_type64='float' name='minimumThresholdValue' type64='f'/>
</struct>
<enum name='MPSAlphaTypeAlphaIsOne' value64='1'/>
<enum name='MPSAlphaTypeNonPremultiplied' value64='0'/>
<enum name='MPSAlphaTypePremultiplied' value64='2'/>
<class name='MPSBinaryImageKernel'>
<method selector='clipRect'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='encodeToCommandBuffer:inPlacePrimaryTexture:secondaryTexture:fallbackCopyAllocator:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull * _Nonnull' index='1' name='inPlacePrimaryTexture' type64='^@'/>
<arg declared_type64='id _Nonnull' index='2' name='secondaryTexture' type64='@'/>
<arg declared_type64='MPSCopyAllocator _Nullable' function_pointer='true' index='3' name='copyAllocator' type64='@?'>
<arg declared_type64='MPSKernel * _Nonnull' type64='@'/>
<arg declared_type64='id _Nonnull' type64='@'/>
<arg declared_type64='id _Nonnull' type64='@'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</arg>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='encodeToCommandBuffer:primaryImage:secondaryImage:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='primaryImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='secondaryImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:primaryTexture:inPlaceSecondaryTexture:fallbackCopyAllocator:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='primaryTexture' type64='@'/>
<arg declared_type64='id _Nonnull * _Nonnull' index='2' name='inPlaceSecondaryTexture' type64='^@'/>
<arg declared_type64='MPSCopyAllocator _Nullable' function_pointer='true' index='3' name='copyAllocator' type64='@?'>
<arg declared_type64='MPSKernel * _Nonnull' type64='@'/>
<arg declared_type64='id _Nonnull' type64='@'/>
<arg declared_type64='id _Nonnull' type64='@'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</arg>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='encodeToCommandBuffer:primaryTexture:secondaryTexture:destinationTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='primaryTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='secondaryTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='3' name='destinationTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='primaryEdgeMode'>
<retval declared_type64='MPSImageEdgeMode' type64='Q'/>
</method>
<method selector='primaryOffset'>
<retval declared_type64='MPSOffset' type64='{_MPSOffset=qqq}'/>
</method>
<method selector='primarySourceRegionForDestinationSize:'>
<arg declared_type64='MTLSize' index='0' name='destinationSize' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='MPSRegion' type64='{MPSRegion={MPSOrigin=ddd}{MPSSize=ddd}}'/>
</method>
<method selector='secondaryEdgeMode'>
<retval declared_type64='MPSImageEdgeMode' type64='Q'/>
</method>
<method selector='secondaryOffset'>
<retval declared_type64='MPSOffset' type64='{_MPSOffset=qqq}'/>
</method>
<method selector='secondarySourceRegionForDestinationSize:'>
<arg declared_type64='MTLSize' index='0' name='destinationSize' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='MPSRegion' type64='{MPSRegion={MPSOrigin=ddd}{MPSSize=ddd}}'/>
</method>
<method selector='setClipRect:'>
<arg declared_type64='MTLRegion' index='0' name='clipRect' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryEdgeMode:'>
<arg declared_type64='MPSImageEdgeMode' index='0' name='primaryEdgeMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryOffset:'>
<arg declared_type64='MPSOffset' index='0' name='primaryOffset' type64='{_MPSOffset=qqq}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryEdgeMode:'>
<arg declared_type64='MPSImageEdgeMode' index='0' name='secondaryEdgeMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryOffset:'>
<arg declared_type64='MPSOffset' index='0' name='secondaryOffset' type64='{_MPSOffset=qqq}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageAdd'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageAreaMax'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSImageArithmetic'>
<method selector='bias'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='primaryScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='primaryStrideInPixels'>
<retval declared_type64='MTLSize' type64='{_MTLSize=QQQ}'/>
</method>
<method selector='secondaryScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='secondaryStrideInPixels'>
<retval declared_type64='MTLSize' type64='{_MTLSize=QQQ}'/>
</method>
<method selector='setBias:'>
<arg declared_type64='float' index='0' name='bias' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryScale:'>
<arg declared_type64='float' index='0' name='primaryScale' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryStrideInPixels:'>
<arg declared_type64='MTLSize' index='0' name='primaryStrideInPixels' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryScale:'>
<arg declared_type64='float' index='0' name='secondaryScale' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryStrideInPixels:'>
<arg declared_type64='MTLSize' index='0' name='secondaryStrideInPixels' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageBilinearScale'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageBox'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSImageConversion'>
<method selector='destinationAlpha'>
<retval declared_type64='MPSAlphaType' type64='Q'/>
</method>
<method selector='initWithDevice:srcAlpha:destAlpha:backgroundColor:conversionInfo:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSAlphaType' index='1' name='srcAlpha' type64='Q'/>
<arg declared_type64='MPSAlphaType' index='2' name='destAlpha' type64='Q'/>
<arg declared_type64='CGFloat * _Nullable' index='3' name='backgroundColor' type64='^d'/>
<arg declared_type64='CGColorConversionInfoRef _Nullable' index='4' name='conversionInfo' type64='^{CGColorConversionInfo=}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='sourceAlpha'>
<retval declared_type64='MPSAlphaType' type64='Q'/>
</method>
</class>
<class name='MPSImageConvolution'>
<method selector='bias'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:weights:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg const='true' declared_type64='float * _Nonnull' index='3' name='kernelWeights' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setBias:'>
<arg declared_type64='float' index='0' name='bias' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageCopyToMatrix'>
<method selector='dataLayout'>
<retval declared_type64='MPSDataLayout' type64='Q'/>
</method>
<method selector='destinationMatrixBatchIndex'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='destinationMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:destinationMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='destinationMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:dataLayout:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSDataLayout' index='1' name='dataLayout' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setDestinationMatrixBatchIndex:'>
<arg declared_type64='NSUInteger' index='0' name='destinationMatrixBatchIndex' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDestinationMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='destinationMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageDilate'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:values:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg const='true' declared_type64='float * _Nonnull' index='3' name='values' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSImageDivide'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageFindKeypoints'>
<method selector='encodeToCommandBuffer:sourceTexture:regions:numberOfRegions:keypointCountBuffer:keypointCountBufferOffset:keypointDataBuffer:keypointDataBufferOffset:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='source' type64='@'/>
<arg const='true' declared_type64='MTLRegion * _Nonnull' index='2' name='regions' type64='^{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<arg declared_type64='NSUInteger' index='3' name='numberOfRegions' type64='Q'/>
<arg declared_type64='id _Nonnull' index='4' name='keypointCountBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='5' name='keypointCountBufferOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='6' name='keypointDataBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='7' name='keypointDataBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:info:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSImageKeypointRangeInfo * _Nonnull' index='1' name='info' type64='^{_MPSImageKeypointRangeInfo=Qf}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='keypointRangeInfo'>
<retval declared_type64='MPSImageKeypointRangeInfo' type64='{_MPSImageKeypointRangeInfo=Qf}'/>
</method>
</class>
<class name='MPSImageGaussianBlur'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:sigma:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='sigma' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='sigma'>
<retval declared_type64='float' type64='f'/>
</method>
</class>
<class name='MPSImageHistogram'>
<method selector='clipRectSource'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='encodeToCommandBuffer:sourceTexture:histogram:histogramOffset:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='source' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='histogram' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='histogramOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='histogramInfo'>
<retval declared_type64='MPSImageHistogramInfo' type64='{_MPSImageHistogramInfo=QB}'/>
</method>
<method selector='histogramSizeForSourceFormat:'>
<arg declared_type64='MTLPixelFormat' index='0' name='sourceFormat' type64='Q'/>
<retval declared_type64='size_t' type64='Q'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:histogramInfo:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSImageHistogramInfo * _Nonnull' index='1' name='histogramInfo' type64='^{_MPSImageHistogramInfo=QB}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='minPixelThresholdValue'>
<retval declared_type64='vector_float4' type64=''/>
</method>
<method selector='setClipRectSource:'>
<arg declared_type64='MTLRegion' index='0' name='clipRectSource' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMinPixelThresholdValue:'>
<arg declared_type64='vector_float4' index='0' name='minPixelThresholdValue' type64=''/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setZeroHistogram:'>
<arg declared_type64='BOOL' index='0' name='zeroHistogram' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='zeroHistogram'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSImageHistogramEqualization'>
<method selector='encodeTransformToCommandBuffer:sourceTexture:histogram:histogramOffset:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='source' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='histogram' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='histogramOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='histogramInfo'>
<retval declared_type64='MPSImageHistogramInfo' type64='{_MPSImageHistogramInfo=QB}'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:histogramInfo:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSImageHistogramInfo * _Nonnull' index='1' name='histogramInfo' type64='^{_MPSImageHistogramInfo=QB}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageHistogramSpecification'>
<method selector='encodeTransformToCommandBuffer:sourceTexture:sourceHistogram:sourceHistogramOffset:desiredHistogram:desiredHistogramOffset:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='source' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='sourceHistogram' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='sourceHistogramOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='4' name='desiredHistogram' type64='@'/>
<arg declared_type64='NSUInteger' index='5' name='desiredHistogramOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='histogramInfo'>
<retval declared_type64='MPSImageHistogramInfo' type64='{_MPSImageHistogramInfo=QB}'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:histogramInfo:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSImageHistogramInfo * _Nonnull' index='1' name='histogramInfo' type64='^{_MPSImageHistogramInfo=QB}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageLanczosScale'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageLaplacian'>
<method selector='bias'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='setBias:'>
<arg declared_type64='float' index='0' name='bias' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageMedian'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelDiameter:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelDiameter' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelDiameter'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='maxKernelDiameter'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='minKernelDiameter'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSImageMultiply'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImagePyramid'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:centerWeight:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='centerWeight' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:weights:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg const='true' declared_type64='float * _Nonnull' index='3' name='kernelWeights' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSImageScale'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='scaleTransform'>
<retval const='true' declared_type64='MPSScaleTransform * _Nullable' type64='^{MPSScaleTransform=dddd}'/>
</method>
<method selector='setScaleTransform:'>
<arg const='true' declared_type64='MPSScaleTransform * _Nullable' index='0' name='scaleTransform' type64='^{MPSScaleTransform=dddd}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageSobel'>
<method selector='colorTransform'>
<retval const='true' declared_type64='float * _Nonnull' type64='^f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:linearGrayColorTransform:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='float * _Nonnull' index='1' name='transform' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageStatisticsMean'>
<method selector='clipRectSource'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setClipRectSource:'>
<arg declared_type64='MTLRegion' index='0' name='clipRectSource' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageStatisticsMeanAndVariance'>
<method selector='clipRectSource'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setClipRectSource:'>
<arg declared_type64='MTLRegion' index='0' name='clipRectSource' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageStatisticsMinAndMax'>
<method selector='clipRectSource'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setClipRectSource:'>
<arg declared_type64='MTLRegion' index='0' name='clipRectSource' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageSubtract'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageThresholdBinary'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:thresholdValue:maximumValue:linearGrayColorTransform:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='thresholdValue' type64='f'/>
<arg declared_type64='float' index='2' name='maximumValue' type64='f'/>
<arg const='true' declared_type64='float * _Nullable' index='3' name='transform' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='maximumValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='thresholdValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='transform'>
<retval const='true' declared_type64='float * _Nonnull' type64='^f'/>
</method>
</class>
<class name='MPSImageThresholdBinaryInverse'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:thresholdValue:maximumValue:linearGrayColorTransform:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='thresholdValue' type64='f'/>
<arg declared_type64='float' index='2' name='maximumValue' type64='f'/>
<arg const='true' declared_type64='float * _Nullable' index='3' name='transform' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='maximumValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='thresholdValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='transform'>
<retval const='true' declared_type64='float * _Nonnull' type64='^f'/>
</method>
</class>
<class name='MPSImageThresholdToZero'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:thresholdValue:linearGrayColorTransform:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='thresholdValue' type64='f'/>
<arg const='true' declared_type64='float * _Nullable' index='2' name='transform' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='thresholdValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='transform'>
<retval const='true' declared_type64='float * _Nonnull' type64='^f'/>
</method>
</class>
<class name='MPSImageThresholdToZeroInverse'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:thresholdValue:linearGrayColorTransform:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='thresholdValue' type64='f'/>
<arg const='true' declared_type64='float * _Nullable' index='2' name='transform' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='thresholdValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='transform'>
<retval const='true' declared_type64='float * _Nonnull' type64='^f'/>
</method>
</class>
<class name='MPSImageThresholdTruncate'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:thresholdValue:linearGrayColorTransform:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='thresholdValue' type64='f'/>
<arg const='true' declared_type64='float * _Nullable' index='2' name='transform' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='thresholdValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='transform'>
<retval const='true' declared_type64='float * _Nonnull' type64='^f'/>
</method>
</class>
<class name='MPSUnaryImageKernel'>
<method selector='clipRect'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='edgeMode'>
<retval declared_type64='MPSImageEdgeMode' type64='Q'/>
</method>
<method selector='encodeToCommandBuffer:inPlaceTexture:fallbackCopyAllocator:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull * _Nonnull' index='1' name='texture' type64='^@'/>
<arg declared_type64='MPSCopyAllocator _Nullable' function_pointer='true' index='2' name='copyAllocator' type64='@?'>
<arg declared_type64='MPSKernel * _Nonnull' type64='@'/>
<arg declared_type64='id _Nonnull' type64='@'/>
<arg declared_type64='id _Nonnull' type64='@'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</arg>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:sourceTexture:destinationTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='sourceTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='destinationTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='offset'>
<retval declared_type64='MPSOffset' type64='{_MPSOffset=qqq}'/>
</method>
<method selector='setClipRect:'>
<arg declared_type64='MTLRegion' index='0' name='clipRect' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEdgeMode:'>
<arg declared_type64='MPSImageEdgeMode' index='0' name='edgeMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOffset:'>
<arg declared_type64='MPSOffset' index='0' name='offset' type64='{_MPSOffset=qqq}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceRegionForDestinationSize:'>
<arg declared_type64='MTLSize' index='0' name='destinationSize' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='MPSRegion' type64='{MPSRegion={MPSOrigin=ddd}{MPSSize=ddd}}'/>
</method>
</class>
<struct name='MPSMatrixCopyOffsets' type64='{_MPSMatrixCopyOffsets=&quot;sourceRowOffset&quot;I&quot;sourceColumnOffset&quot;I&quot;destinationRowOffset&quot;I&quot;destinationColumnOffset&quot;I}'>
<field declared_type64='uint32_t' name='sourceRowOffset' type64='I'/>
<field declared_type64='uint32_t' name='sourceColumnOffset' type64='I'/>
<field declared_type64='uint32_t' name='destinationRowOffset' type64='I'/>
<field declared_type64='uint32_t' name='destinationColumnOffset' type64='I'/>
</struct>
<enum name='MPSMatrixDecompositionStatusFailure' value64='-1'/>
<enum name='MPSMatrixDecompositionStatusNonPositiveDefinite' value64='-3'/>
<enum name='MPSMatrixDecompositionStatusSingular' value64='-2'/>
<enum name='MPSMatrixDecompositionStatusSuccess' value64='0'/>
<class name='MPSMatrix'>
<method selector='columns'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='data'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='dataType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='device'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='initWithBuffer:descriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='buffer' type64='@'/>
<arg declared_type64='MPSMatrixDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='matrices'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='matrixBytes'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='rowBytes'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='rows'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSMatrixBinaryKernel'>
<method selector='batchSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='batchStart'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='primarySourceMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='resultMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='secondarySourceMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='setBatchSize:'>
<arg declared_type64='NSUInteger' index='0' name='batchSize' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBatchStart:'>
<arg declared_type64='NSUInteger' index='0' name='batchStart' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimarySourceMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='primarySourceMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setResultMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='resultMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondarySourceMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='secondarySourceMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSMatrixCopy'>
<method selector='copyColumns'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='copyRows'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='destinationsAreTransposed'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='encodeToCommandBuffer:copyDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='cmdBuf' type64='@'/>
<arg declared_type64='MPSMatrixCopyDescriptor * _Nonnull' index='1' name='copyDescriptor' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:copyRows:copyColumns:sourcesAreTransposed:destinationsAreTransposed:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='copyRows' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='copyColumns' type64='Q'/>
<arg declared_type64='BOOL' index='3' name='sourcesAreTransposed' type64='B'/>
<arg declared_type64='BOOL' index='4' name='destinationsAreTransposed' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='sourcesAreTransposed'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSMatrixCopyDescriptor'>
<method class_method='true' selector='descriptorWithSourceMatrix:destinationMatrix:offsets:'>
<arg declared_type64='MPSMatrix * _Nonnull' index='0' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='destinationMatrix' type64='@'/>
<arg declared_type64='MPSMatrixCopyOffsets' index='2' name='offsets' type64='{_MPSMatrixCopyOffsets=IIII}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:count:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='count' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSourceMatrices:destinationMatrices:offsetVector:offset:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceMatrices' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='destinationMatrices' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='2' name='offsets' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='byteOffset' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setCopyOperationAtIndex:sourceMatrix:destinationMatrix:offsets:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='destinationMatrix' type64='@'/>
<arg declared_type64='MPSMatrixCopyOffsets' index='3' name='offsets' type64='{_MPSMatrixCopyOffsets=IIII}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSMatrixDecompositionCholesky'>
<method selector='encodeToCommandBuffer:sourceMatrix:resultMatrix:status:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg const='true' declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='resultMatrix' type64='@'/>
<arg declared_type64='id _Nullable' index='3' name='status' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:lower:order:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='lower' type64='B'/>
<arg declared_type64='NSUInteger' index='2' name='order' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSMatrixDecompositionLU'>
<method selector='encodeToCommandBuffer:sourceMatrix:resultMatrix:pivotIndices:status:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg const='true' declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='resultMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='pivotIndices' type64='@'/>
<arg declared_type64='id _Nullable' index='4' name='status' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:rows:columns:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='rows' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='columns' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSMatrixDescriptor'>
<method selector='columns'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='dataType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='matrices'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='matrixBytes'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='matrixDescriptorWithDimensions:columns:rowBytes:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='rows' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='columns' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='rowBytes' type64='Q'/>
<arg declared_type64='MPSDataType' index='3' name='dataType' type64='I'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='matrixDescriptorWithRows:columns:matrices:rowBytes:matrixBytes:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='rows' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='columns' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='matrices' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='rowBytes' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='matrixBytes' type64='Q'/>
<arg declared_type64='MPSDataType' index='5' name='dataType' type64='I'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='matrixDescriptorWithRows:columns:rowBytes:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='rows' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='columns' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='rowBytes' type64='Q'/>
<arg declared_type64='MPSDataType' index='3' name='dataType' type64='I'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='rowBytes'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='rowBytesForColumns:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='columns' type64='Q'/>
<arg declared_type64='MPSDataType' index='1' name='dataType' type64='I'/>
<retval declared_type64='size_t' type64='Q'/>
</method>
<method class_method='true' selector='rowBytesFromColumns:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='columns' type64='Q'/>
<arg declared_type64='MPSDataType' index='1' name='dataType' type64='I'/>
<retval declared_type64='size_t' type64='Q'/>
</method>
<method selector='rows'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setColumns:'>
<arg declared_type64='NSUInteger' index='0' name='columns' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDataType:'>
<arg declared_type64='MPSDataType' index='0' name='dataType' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRowBytes:'>
<arg declared_type64='NSUInteger' index='0' name='rowBytes' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRows:'>
<arg declared_type64='NSUInteger' index='0' name='rows' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSMatrixMultiplication'>
<method selector='batchSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='batchStart'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='encodeToCommandBuffer:leftMatrix:rightMatrix:resultMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg const='true' declared_type64='MPSMatrix * _Nonnull' index='1' name='leftMatrix' type64='@'/>
<arg const='true' declared_type64='MPSMatrix * _Nonnull' index='2' name='rightMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='resultMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:resultRows:resultColumns:interiorColumns:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='resultRows' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='resultColumns' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='interiorColumns' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:transposeLeft:transposeRight:resultRows:resultColumns:interiorColumns:alpha:beta:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='transposeLeft' type64='B'/>
<arg declared_type64='BOOL' index='2' name='transposeRight' type64='B'/>
<arg declared_type64='NSUInteger' index='3' name='resultRows' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='resultColumns' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='interiorColumns' type64='Q'/>
<arg declared_type64='double' index='6' name='alpha' type64='d'/>
<arg declared_type64='double' index='7' name='beta' type64='d'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='leftMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='resultMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='rightMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='setBatchSize:'>
<arg declared_type64='NSUInteger' index='0' name='batchSize' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBatchStart:'>
<arg declared_type64='NSUInteger' index='0' name='batchStart' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLeftMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='leftMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setResultMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='resultMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRightMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='rightMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSMatrixSolveCholesky'>
<method selector='encodeToCommandBuffer:sourceMatrix:rightHandSideMatrix:solutionMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg const='true' declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg const='true' declared_type64='MPSMatrix * _Nonnull' index='2' name='rightHandSideMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='solutionMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:upper:order:numberOfRightHandSides:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='upper' type64='B'/>
<arg declared_type64='NSUInteger' index='2' name='order' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='numberOfRightHandSides' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSMatrixSolveLU'>
<method selector='encodeToCommandBuffer:sourceMatrix:rightHandSideMatrix:pivotIndices:solutionMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg const='true' declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg const='true' declared_type64='MPSMatrix * _Nonnull' index='2' name='rightHandSideMatrix' type64='@'/>
<arg const='true' declared_type64='MPSMatrix * _Nonnull' index='3' name='pivotIndices' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='4' name='solutionMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:transpose:order:numberOfRightHandSides:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='transpose' type64='B'/>
<arg declared_type64='NSUInteger' index='2' name='order' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='numberOfRightHandSides' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSMatrixSolveTriangular'>
<method selector='encodeToCommandBuffer:sourceMatrix:rightHandSideMatrix:solutionMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg const='true' declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg const='true' declared_type64='MPSMatrix * _Nonnull' index='2' name='rightHandSideMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='solutionMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:right:upper:transpose:unit:order:numberOfRightHandSides:alpha:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='right' type64='B'/>
<arg declared_type64='BOOL' index='2' name='upper' type64='B'/>
<arg declared_type64='BOOL' index='3' name='transpose' type64='B'/>
<arg declared_type64='BOOL' index='4' name='unit' type64='B'/>
<arg declared_type64='NSUInteger' index='5' name='order' type64='Q'/>
<arg declared_type64='NSUInteger' index='6' name='numberOfRightHandSides' type64='Q'/>
<arg declared_type64='double' index='7' name='alpha' type64='d'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSMatrixUnaryKernel'>
<method selector='batchSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='batchStart'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='resultMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='setBatchSize:'>
<arg declared_type64='NSUInteger' index='0' name='batchSize' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBatchStart:'>
<arg declared_type64='NSUInteger' index='0' name='batchStart' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setResultMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='resultMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='sourceMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
</class>
<class name='MPSMatrixVectorMultiplication'>
<method selector='encodeToCommandBuffer:inputMatrix:inputVector:resultVector:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg const='true' declared_type64='MPSMatrix * _Nonnull' index='1' name='inputMatrix' type64='@'/>
<arg const='true' declared_type64='MPSVector * _Nonnull' index='2' name='inputVector' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='3' name='resultVector' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:rows:columns:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='rows' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='columns' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:transpose:rows:columns:alpha:beta:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='transpose' type64='B'/>
<arg declared_type64='NSUInteger' index='2' name='rows' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='columns' type64='Q'/>
<arg declared_type64='double' index='4' name='alpha' type64='d'/>
<arg declared_type64='double' index='5' name='beta' type64='d'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSTemporaryMatrix'>
<method class_method='true' selector='prefetchStorageWithCommandBuffer:matrixDescriptorList:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='descriptorList' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='readCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setReadCount:'>
<arg declared_type64='NSUInteger' index='0' name='readCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='temporaryMatrixWithCommandBuffer:matrixDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrixDescriptor * _Nonnull' index='1' name='matrixDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSVector'>
<method selector='data'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='dataType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='device'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='initWithBuffer:descriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='buffer' type64='@'/>
<arg declared_type64='MPSVectorDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='length'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='vectorBytes'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='vectors'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSVectorDescriptor'>
<method selector='dataType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='length'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setDataType:'>
<arg declared_type64='MPSDataType' index='0' name='dataType' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLength:'>
<arg declared_type64='NSUInteger' index='0' name='length' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='vectorBytes'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='vectorBytesForLength:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='length' type64='Q'/>
<arg declared_type64='MPSDataType' index='1' name='dataType' type64='I'/>
<retval declared_type64='size_t' type64='Q'/>
</method>
<method class_method='true' selector='vectorDescriptorWithLength:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='length' type64='Q'/>
<arg declared_type64='MPSDataType' index='1' name='dataType' type64='I'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='vectorDescriptorWithLength:vectors:vectorBytes:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='length' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='vectors' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='vectorBytes' type64='Q'/>
<arg declared_type64='MPSDataType' index='3' name='dataType' type64='I'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='vectors'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
</signatures>
