<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/SystemConfiguration.framework'/>
<depends_on path='/System/Library/Frameworks/Security.framework'/>
<depends_on path='/System/Library/Frameworks/IOKit.framework'/>
<struct name='CFHostClientContext' type='{CFHostClientContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' type64='{CFHostClientContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field declared_type='CFIndex' name='version' type='l' type64='q'/>
<field declared_type='void*' name='info' type='^v'/>
<field declared_type='CFAllocatorRetainCallBack' function_pointer='true' name='retain' type='^?'>
<arg const='true' declared_type='void*' type='^v'/>
<retval const='true' declared_type='void*' type='^v'/>
</field>
<field declared_type='CFAllocatorReleaseCallBack' function_pointer='true' name='release' type='^?'>
<arg const='true' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='CFAllocatorCopyDescriptionCallBack' function_pointer='true' name='copyDescription' type='^?'>
<arg const='true' declared_type='void*' type='^v'/>
<retval declared_type='CFStringRef' type='^{__CFString=}'/>
</field>
</struct>
<struct name='CFNetServiceClientContext' type='{CFNetServiceClientContext=&quot;version&quot;i&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}' type64='{CFNetServiceClientContext=&quot;version&quot;q&quot;info&quot;^v&quot;retain&quot;^?&quot;release&quot;^?&quot;copyDescription&quot;^?}'>
<field declared_type='CFIndex' name='version' type='l' type64='q'/>
<field declared_type='void*' name='info' type='^v'/>
<field declared_type='CFAllocatorRetainCallBack' function_pointer='true' name='retain' type='^?'>
<arg const='true' declared_type='void*' type='^v'/>
<retval const='true' declared_type='void*' type='^v'/>
</field>
<field declared_type='CFAllocatorReleaseCallBack' function_pointer='true' name='release' type='^?'>
<arg const='true' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='CFAllocatorCopyDescriptionCallBack' function_pointer='true' name='copyDescription' type='^?'>
<arg const='true' declared_type='void*' type='^v'/>
<retval declared_type='CFStringRef' type='^{__CFString=}'/>
</field>
</struct>
<cftype gettypeid_func='CFHTTPAuthenticationGetTypeID' name='CFHTTPAuthenticationRef' type='^{_CFHTTPAuthentication=}'/>
<cftype gettypeid_func='CFHTTPMessageGetTypeID' name='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
<cftype gettypeid_func='CFHostGetTypeID' name='CFHostRef' type='^{__CFHost=}'/>
<cftype gettypeid_func='CFNetServiceBrowserGetTypeID' name='CFNetServiceBrowserRef' type='^{__CFNetServiceBrowser=}'/>
<cftype gettypeid_func='CFNetServiceMonitorGetTypeID' name='CFNetServiceMonitorRef' type='^{__CFNetServiceMonitor=}'/>
<cftype gettypeid_func='CFNetServiceGetTypeID' name='CFNetServiceRef' type='^{__CFNetService=}'/>
<cftype name='CFNetDiagnosticRef' type='^{__CFNetDiagnostic=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFDNSServiceFailureKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFErrorDomainCFNetwork' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFErrorDomainWinSock' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFFTPResourceGroup' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFFTPResourceLink' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFFTPResourceModDate' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFFTPResourceMode' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFFTPResourceName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFFTPResourceOwner' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFFTPResourceSize' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFFTPResourceType' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFFTPStatusCodeKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFGetAddrInfoFailureKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFHTTPAuthenticationAccountDomain' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFHTTPAuthenticationPassword' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFHTTPAuthenticationSchemeBasic' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFHTTPAuthenticationSchemeDigest' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFHTTPAuthenticationSchemeKerberos' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFHTTPAuthenticationSchemeNTLM' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFHTTPAuthenticationSchemeNegotiate' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFHTTPAuthenticationSchemeNegotiate2' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFHTTPAuthenticationSchemeOAuth1' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFHTTPAuthenticationSchemeXMobileMeAuthToken' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFHTTPAuthenticationUsername' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFHTTPVersion1_0' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFHTTPVersion1_1' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesExceptionsList' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesExcludeSimpleHostnames' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesFTPEnable' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesFTPPassive' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesFTPPort' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesFTPProxy' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesGopherEnable' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesGopherPort' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesGopherProxy' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesHTTPEnable' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesHTTPPort' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesHTTPProxy' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesHTTPSEnable' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesHTTPSPort' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesHTTPSProxy' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesProxyAutoConfigEnable' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesProxyAutoConfigJavaScript' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesProxyAutoConfigURLString' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesProxyAutoDiscoveryEnable' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesRTSPEnable' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesRTSPPort' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesRTSPProxy' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesSOCKSEnable' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesSOCKSPort' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFNetworkProxiesSOCKSProxy' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFProxyAutoConfigurationHTTPResponseKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFProxyAutoConfigurationJavaScriptKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFProxyAutoConfigurationURLKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFProxyHostNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFProxyPasswordKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFProxyPortNumberKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFProxyTypeAutoConfigurationJavaScript' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFProxyTypeAutoConfigurationURL' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFProxyTypeFTP' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFProxyTypeHTTP' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFProxyTypeHTTPS' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFProxyTypeKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFProxyTypeNone' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFProxyTypeSOCKS' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFProxyUsernameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFSOCKSNegotiationMethodKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFSOCKSStatusCodeKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFSOCKSVersionKey' type='^{__CFString=}'/>
<constant const='true' declared_type='SInt32' name='kCFStreamErrorDomainFTP' type='l' type64='i'/>
<constant const='true' declared_type='SInt32' name='kCFStreamErrorDomainHTTP' type='l' type64='i'/>
<constant const='true' declared_type='SInt32' name='kCFStreamErrorDomainMach' type='l' type64='i'/>
<constant const='true' declared_type='SInt32' name='kCFStreamErrorDomainNetDB' type='l' type64='i'/>
<constant const='true' declared_type='SInt32' name='kCFStreamErrorDomainNetServices' type='l' type64='i'/>
<constant const='true' declared_type='int' name='kCFStreamErrorDomainSOCKS' type='i'/>
<constant const='true' declared_type='int' name='kCFStreamErrorDomainSSL' type='i'/>
<constant const='true' declared_type='SInt32' name='kCFStreamErrorDomainSystemConfiguration' type='l' type64='i'/>
<constant const='true' declared_type='CFIndex' name='kCFStreamErrorDomainWinSock' type='l' type64='q'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamNetworkServiceType' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamNetworkServiceTypeBackground' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamNetworkServiceTypeVideo' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamNetworkServiceTypeVoIP' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamNetworkServiceTypeVoice' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyConnectionIsCellular' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyFTPAttemptPersistentConnection' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyFTPFetchResourceInfo' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyFTPFileTransferOffset' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyFTPPassword' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyFTPProxy' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyFTPProxyHost' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyFTPProxyPassword' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyFTPProxyPort' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyFTPProxyUser' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyFTPResourceSize' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyFTPUsePassiveMode' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyFTPUserName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyHTTPAttemptPersistentConnection' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyHTTPFinalRequest' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyHTTPFinalURL' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyHTTPProxy' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyHTTPProxyHost' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyHTTPProxyPort' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyHTTPRequestBytesWrittenCount' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyHTTPResponseHeader' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyHTTPSProxyHost' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyHTTPSProxyPort' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyHTTPShouldAutoredirect' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyNoCellular' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyProxyLocalBypass' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertySOCKSPassword' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertySOCKSProxy' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertySOCKSProxyHost' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertySOCKSProxyPort' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertySOCKSUser' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertySOCKSVersion' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertySSLContext' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertySSLPeerCertificates' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertySSLPeerTrust' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertySSLSettings' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertyShouldCloseNativeSocket' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertySocketRemoteHost' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertySocketRemoteNetService' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamPropertySocketSecurityLevel' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamSSLAllowsAnyRoot' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamSSLAllowsExpiredCertificates' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamSSLAllowsExpiredRoots' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamSSLCertificates' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamSSLIsServer' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamSSLLevel' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamSSLPeerName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamSSLValidatesCertificateChain' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamSocketSOCKSVersion4' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamSocketSOCKSVersion5' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamSocketSecurityLevelNegotiatedSSL' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamSocketSecurityLevelNone' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamSocketSecurityLevelSSLv2' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamSocketSecurityLevelSSLv3' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFStreamSocketSecurityLevelTLSv1' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFURLErrorFailingURLErrorKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFURLErrorFailingURLStringErrorKey' type='^{__CFString=}'/>
<enum name='kCFErrorHTTPAuthenticationTypeUnsupported' value='300'/>
<enum name='kCFErrorHTTPBadCredentials' value='301'/>
<enum name='kCFErrorHTTPBadProxyCredentials' value='307'/>
<enum name='kCFErrorHTTPBadURL' value='305'/>
<enum name='kCFErrorHTTPConnectionLost' value='302'/>
<enum name='kCFErrorHTTPParseFailure' value='303'/>
<enum name='kCFErrorHTTPProxyConnectionFailure' value='306'/>
<enum name='kCFErrorHTTPRedirectionLoopDetected' value='304'/>
<enum name='kCFErrorHTTPSProxyConnectionFailure' value='310'/>
<enum name='kCFErrorPACFileAuth' value='309'/>
<enum name='kCFErrorPACFileError' value='308'/>
<enum name='kCFFTPErrorUnexpectedStatusCode' value='200'/>
<enum name='kCFHTTPCookieCannotParseCookieFile' value='-4000'/>
<enum name='kCFHostAddresses' value='0'/>
<enum name='kCFHostErrorHostNotFound' value='1'/>
<enum name='kCFHostErrorUnknown' value='2'/>
<enum name='kCFHostNames' value='1'/>
<enum name='kCFHostReachability' value='2'/>
<enum name='kCFNetDiagnosticConnectionDown' value='-66557'/>
<enum name='kCFNetDiagnosticConnectionIndeterminate' value='-66558'/>
<enum name='kCFNetDiagnosticConnectionUp' value='-66559'/>
<enum name='kCFNetDiagnosticErr' value='-66560'/>
<enum name='kCFNetDiagnosticNoErr' value='0'/>
<enum name='kCFNetServiceErrorBadArgument' value='-72004'/>
<enum name='kCFNetServiceErrorCancel' value='-72005'/>
<enum name='kCFNetServiceErrorCollision' value='-72001'/>
<enum name='kCFNetServiceErrorDNSServiceFailure' value='-73000'/>
<enum name='kCFNetServiceErrorInProgress' value='-72003'/>
<enum name='kCFNetServiceErrorInvalid' value='-72006'/>
<enum name='kCFNetServiceErrorNotFound' value='-72002'/>
<enum name='kCFNetServiceErrorTimeout' value='-72007'/>
<enum name='kCFNetServiceErrorUnknown' value='-72000'/>
<enum name='kCFNetServiceFlagIsDefault' value='4'/>
<enum name='kCFNetServiceFlagIsDomain' value='2'/>
<enum name='kCFNetServiceFlagIsRegistrationDomain' value='4'/>
<enum name='kCFNetServiceFlagMoreComing' value='1'/>
<enum name='kCFNetServiceFlagNoAutoRename' value='1'/>
<enum name='kCFNetServiceFlagRemove' value='8'/>
<enum name='kCFNetServiceMonitorTXT' value='1'/>
<enum name='kCFNetServicesErrorBadArgument' value='-72004'/>
<enum name='kCFNetServicesErrorCancel' value='-72005'/>
<enum name='kCFNetServicesErrorCollision' value='-72001'/>
<enum name='kCFNetServicesErrorInProgress' value='-72003'/>
<enum name='kCFNetServicesErrorInvalid' value='-72006'/>
<enum name='kCFNetServicesErrorNotFound' value='-72002'/>
<enum name='kCFNetServicesErrorTimeout' value='-72007'/>
<enum name='kCFNetServicesErrorUnknown' value='-72000'/>
<enum name='kCFSOCKS4ErrorIdConflict' value='112'/>
<enum name='kCFSOCKS4ErrorIdentdFailed' value='111'/>
<enum name='kCFSOCKS4ErrorRequestFailed' value='110'/>
<enum name='kCFSOCKS4ErrorUnknownStatusCode' value='113'/>
<enum name='kCFSOCKS5ErrorBadCredentials' value='122'/>
<enum name='kCFSOCKS5ErrorBadResponseAddr' value='121'/>
<enum name='kCFSOCKS5ErrorBadState' value='120'/>
<enum name='kCFSOCKS5ErrorNoAcceptableMethod' value='124'/>
<enum name='kCFSOCKS5ErrorUnsupportedNegotiationMethod' value='123'/>
<enum name='kCFSOCKSErrorUnknownClientVersion' value='100'/>
<enum name='kCFSOCKSErrorUnsupportedServerVersion' value='101'/>
<enum name='kCFStreamErrorHTTPAuthenticationBadPassword' value='-1002'/>
<enum name='kCFStreamErrorHTTPAuthenticationBadUserName' value='-1001'/>
<enum name='kCFStreamErrorHTTPAuthenticationTypeUnsupported' value='-1000'/>
<enum name='kCFStreamErrorHTTPBadURL' value='-3'/>
<enum name='kCFStreamErrorHTTPParseFailure' value='-1'/>
<enum name='kCFStreamErrorHTTPRedirectionLoop' value='-2'/>
<enum name='kCFStreamErrorHTTPSProxyFailureUnexpectedResponseToCONNECTMethod' value='311'/>
<enum name='kCFStreamErrorSOCKS4IdConflict' value='93'/>
<enum name='kCFStreamErrorSOCKS4IdentdFailed' value='92'/>
<enum name='kCFStreamErrorSOCKS4RequestFailed' value='91'/>
<enum name='kCFStreamErrorSOCKS4SubDomainResponse' value='2'/>
<enum name='kCFStreamErrorSOCKS5BadResponseAddr' value='1'/>
<enum name='kCFStreamErrorSOCKS5BadState' value='2'/>
<enum name='kCFStreamErrorSOCKS5SubDomainMethod' value='4'/>
<enum name='kCFStreamErrorSOCKS5SubDomainResponse' value='5'/>
<enum name='kCFStreamErrorSOCKS5SubDomainUserPass' value='3'/>
<enum name='kCFStreamErrorSOCKSSubDomainNone' value='0'/>
<enum name='kCFStreamErrorSOCKSSubDomainVersionCode' value='1'/>
<enum name='kCFStreamErrorSOCKSUnknownClientVersion' value='3'/>
<enum name='kCFStreamSocketSecurityNone' value='0'/>
<enum name='kCFStreamSocketSecuritySSLv2' value='1'/>
<enum name='kCFStreamSocketSecuritySSLv23' value='3'/>
<enum name='kCFStreamSocketSecuritySSLv3' value='2'/>
<enum name='kCFStreamSocketSecurityTLSv1' value='4'/>
<enum name='kCFURLErrorBadServerResponse' value='-1011'/>
<enum name='kCFURLErrorBadURL' value='-1000'/>
<enum name='kCFURLErrorCallIsActive' value='-1019'/>
<enum name='kCFURLErrorCancelled' value='-999'/>
<enum name='kCFURLErrorCannotCloseFile' value='-3002'/>
<enum name='kCFURLErrorCannotConnectToHost' value='-1004'/>
<enum name='kCFURLErrorCannotCreateFile' value='-3000'/>
<enum name='kCFURLErrorCannotDecodeContentData' value='-1016'/>
<enum name='kCFURLErrorCannotDecodeRawData' value='-1015'/>
<enum name='kCFURLErrorCannotFindHost' value='-1003'/>
<enum name='kCFURLErrorCannotLoadFromNetwork' value='-2000'/>
<enum name='kCFURLErrorCannotMoveFile' value='-3005'/>
<enum name='kCFURLErrorCannotOpenFile' value='-3001'/>
<enum name='kCFURLErrorCannotParseResponse' value='-1017'/>
<enum name='kCFURLErrorCannotRemoveFile' value='-3004'/>
<enum name='kCFURLErrorCannotWriteToFile' value='-3003'/>
<enum name='kCFURLErrorClientCertificateRejected' value='-1205'/>
<enum name='kCFURLErrorClientCertificateRequired' value='-1206'/>
<enum name='kCFURLErrorDNSLookupFailed' value='-1006'/>
<enum name='kCFURLErrorDataLengthExceedsMaximum' value='-1103'/>
<enum name='kCFURLErrorDataNotAllowed' value='-1020'/>
<enum name='kCFURLErrorDownloadDecodingFailedMidStream' value='-3006'/>
<enum name='kCFURLErrorDownloadDecodingFailedToComplete' value='-3007'/>
<enum name='kCFURLErrorFileDoesNotExist' value='-1100'/>
<enum name='kCFURLErrorFileIsDirectory' value='-1101'/>
<enum name='kCFURLErrorHTTPTooManyRedirects' value='-1007'/>
<enum name='kCFURLErrorInternationalRoamingOff' value='-1018'/>
<enum name='kCFURLErrorNetworkConnectionLost' value='-1005'/>
<enum name='kCFURLErrorNoPermissionsToReadFile' value='-1102'/>
<enum name='kCFURLErrorNotConnectedToInternet' value='-1009'/>
<enum name='kCFURLErrorRedirectToNonExistentLocation' value='-1010'/>
<enum name='kCFURLErrorRequestBodyStreamExhausted' value='-1021'/>
<enum name='kCFURLErrorResourceUnavailable' value='-1008'/>
<enum name='kCFURLErrorSecureConnectionFailed' value='-1200'/>
<enum name='kCFURLErrorServerCertificateHasBadDate' value='-1201'/>
<enum name='kCFURLErrorServerCertificateHasUnknownRoot' value='-1203'/>
<enum name='kCFURLErrorServerCertificateNotYetValid' value='-1204'/>
<enum name='kCFURLErrorServerCertificateUntrusted' value='-1202'/>
<enum name='kCFURLErrorTimedOut' value='-1001'/>
<enum name='kCFURLErrorUnknown' value='-998'/>
<enum name='kCFURLErrorUnsupportedURL' value='-1002'/>
<enum name='kCFURLErrorUserAuthenticationRequired' value='-1013'/>
<enum name='kCFURLErrorUserCancelledAuthentication' value='-1012'/>
<enum name='kCFURLErrorZeroByteResource' value='-1014'/>
<enum name='kSOCKS5NoAcceptableMethod' value='255'/>
<function name='CFFTPCreateParsedResourceListing'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg const='true' declared_type='UInt8*' name='buffer' type='*'/>
<arg declared_type='CFIndex' name='bufferLength' type='l' type64='q'/>
<arg declared_type='CFDictionaryRef*' name='parsed' type='^^{__CFDictionary}'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<function name='CFHTTPAuthenticationAppliesToRequest'>
<arg declared_type='CFHTTPAuthenticationRef' name='auth' type='^{_CFHTTPAuthentication=}'/>
<arg declared_type='CFHTTPMessageRef' name='request' type='^{__CFHTTPMessage=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPAuthenticationCopyDomains'>
<arg declared_type='CFHTTPAuthenticationRef' name='auth' type='^{_CFHTTPAuthentication=}'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CFHTTPAuthenticationCopyMethod'>
<arg declared_type='CFHTTPAuthenticationRef' name='auth' type='^{_CFHTTPAuthentication=}'/>
<retval already_retained='true' declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CFHTTPAuthenticationCopyRealm'>
<arg declared_type='CFHTTPAuthenticationRef' name='auth' type='^{_CFHTTPAuthentication=}'/>
<retval already_retained='true' declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CFHTTPAuthenticationCreateFromResponse'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg declared_type='CFHTTPMessageRef' name='response' type='^{__CFHTTPMessage=}'/>
<retval already_retained='true' declared_type='CFHTTPAuthenticationRef' type='^{_CFHTTPAuthentication=}'/>
</function>
<function name='CFHTTPAuthenticationGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CFHTTPAuthenticationIsValid'>
<arg declared_type='CFHTTPAuthenticationRef' name='auth' type='^{_CFHTTPAuthentication=}'/>
<arg declared_type='CFStreamError*' name='error' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPAuthenticationRequiresAccountDomain'>
<arg declared_type='CFHTTPAuthenticationRef' name='auth' type='^{_CFHTTPAuthentication=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPAuthenticationRequiresOrderedRequests'>
<arg declared_type='CFHTTPAuthenticationRef' name='auth' type='^{_CFHTTPAuthentication=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPAuthenticationRequiresUserNameAndPassword'>
<arg declared_type='CFHTTPAuthenticationRef' name='auth' type='^{_CFHTTPAuthentication=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPMessageAddAuthentication'>
<arg declared_type='CFHTTPMessageRef' name='request' type='^{__CFHTTPMessage=}'/>
<arg declared_type='CFHTTPMessageRef' name='authenticationFailureResponse' type='^{__CFHTTPMessage=}'/>
<arg declared_type='CFStringRef' name='username' type='^{__CFString=}'/>
<arg declared_type='CFStringRef' name='password' type='^{__CFString=}'/>
<arg declared_type='CFStringRef' name='authenticationScheme' type='^{__CFString=}'/>
<arg declared_type='Boolean' name='forProxy' type='B'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPMessageAppendBytes'>
<arg declared_type='CFHTTPMessageRef' name='message' type='^{__CFHTTPMessage=}'/>
<arg const='true' declared_type='UInt8*' name='newBytes' type='*'/>
<arg declared_type='CFIndex' name='numBytes' type='l' type64='q'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPMessageApplyCredentialDictionary'>
<arg declared_type='CFHTTPMessageRef' name='request' type='^{__CFHTTPMessage=}'/>
<arg declared_type='CFHTTPAuthenticationRef' name='auth' type='^{_CFHTTPAuthentication=}'/>
<arg declared_type='CFDictionaryRef' name='dict' type='^{__CFDictionary=}'/>
<arg declared_type='CFStreamError*' name='error' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPMessageApplyCredentials'>
<arg declared_type='CFHTTPMessageRef' name='request' type='^{__CFHTTPMessage=}'/>
<arg declared_type='CFHTTPAuthenticationRef' name='auth' type='^{_CFHTTPAuthentication=}'/>
<arg declared_type='CFStringRef' name='username' type='^{__CFString=}'/>
<arg declared_type='CFStringRef' name='password' type='^{__CFString=}'/>
<arg declared_type='CFStreamError*' name='error' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPMessageCopyAllHeaderFields'>
<arg declared_type='CFHTTPMessageRef' name='message' type='^{__CFHTTPMessage=}'/>
<retval already_retained='true' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
</function>
<function name='CFHTTPMessageCopyBody'>
<arg declared_type='CFHTTPMessageRef' name='message' type='^{__CFHTTPMessage=}'/>
<retval already_retained='true' declared_type='CFDataRef' type='^{__CFData=}'/>
</function>
<function name='CFHTTPMessageCopyHeaderFieldValue'>
<arg declared_type='CFHTTPMessageRef' name='message' type='^{__CFHTTPMessage=}'/>
<arg declared_type='CFStringRef' name='headerField' type='^{__CFString=}'/>
<retval already_retained='true' declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CFHTTPMessageCopyRequestMethod'>
<arg declared_type='CFHTTPMessageRef' name='request' type='^{__CFHTTPMessage=}'/>
<retval already_retained='true' declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CFHTTPMessageCopyRequestURL'>
<arg declared_type='CFHTTPMessageRef' name='request' type='^{__CFHTTPMessage=}'/>
<retval already_retained='true' declared_type='CFURLRef' type='^{__CFURL=}'/>
</function>
<function name='CFHTTPMessageCopyResponseStatusLine'>
<arg declared_type='CFHTTPMessageRef' name='response' type='^{__CFHTTPMessage=}'/>
<retval already_retained='true' declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CFHTTPMessageCopySerializedMessage'>
<arg declared_type='CFHTTPMessageRef' name='message' type='^{__CFHTTPMessage=}'/>
<retval already_retained='true' declared_type='CFDataRef' type='^{__CFData=}'/>
</function>
<function name='CFHTTPMessageCopyVersion'>
<arg declared_type='CFHTTPMessageRef' name='message' type='^{__CFHTTPMessage=}'/>
<retval already_retained='true' declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CFHTTPMessageCreateCopy'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg declared_type='CFHTTPMessageRef' name='message' type='^{__CFHTTPMessage=}'/>
<retval already_retained='true' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
</function>
<function name='CFHTTPMessageCreateEmpty'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg declared_type='Boolean' name='isRequest' type='B'/>
<retval already_retained='true' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
</function>
<function name='CFHTTPMessageCreateRequest'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg declared_type='CFStringRef' name='requestMethod' type='^{__CFString=}'/>
<arg declared_type='CFURLRef' name='url' type='^{__CFURL=}'/>
<arg declared_type='CFStringRef' name='httpVersion' type='^{__CFString=}'/>
<retval already_retained='true' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
</function>
<function name='CFHTTPMessageCreateResponse'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg declared_type='CFIndex' name='statusCode' type='l' type64='q'/>
<arg declared_type='CFStringRef' name='statusDescription' type='^{__CFString=}'/>
<arg declared_type='CFStringRef' name='httpVersion' type='^{__CFString=}'/>
<retval already_retained='true' declared_type='CFHTTPMessageRef' type='^{__CFHTTPMessage=}'/>
</function>
<function name='CFHTTPMessageGetResponseStatusCode'>
<arg declared_type='CFHTTPMessageRef' name='response' type='^{__CFHTTPMessage=}'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<function name='CFHTTPMessageGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CFHTTPMessageIsHeaderComplete'>
<arg declared_type='CFHTTPMessageRef' name='message' type='^{__CFHTTPMessage=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPMessageIsRequest'>
<arg declared_type='CFHTTPMessageRef' name='message' type='^{__CFHTTPMessage=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHTTPMessageSetBody'>
<arg declared_type='CFHTTPMessageRef' name='message' type='^{__CFHTTPMessage=}'/>
<arg declared_type='CFDataRef' name='bodyData' type='^{__CFData=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFHTTPMessageSetHeaderFieldValue'>
<arg declared_type='CFHTTPMessageRef' name='message' type='^{__CFHTTPMessage=}'/>
<arg declared_type='CFStringRef' name='headerField' type='^{__CFString=}'/>
<arg declared_type='CFStringRef' name='value' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFHTTPReadStreamSetProxy'>
<arg declared_type='CFReadStreamRef' name='httpStream' type='^{__CFReadStream=}'/>
<arg declared_type='CFStringRef' name='proxyHost' type='^{__CFString=}'/>
<arg declared_type='CFIndex' name='proxyPort' type='l' type64='q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFHTTPReadStreamSetRedirectsAutomatically'>
<arg declared_type='CFReadStreamRef' name='httpStream' type='^{__CFReadStream=}'/>
<arg declared_type='Boolean' name='shouldAutoRedirect' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFHostCancelInfoResolution'>
<arg declared_type='CFHostRef' name='theHost' type='^{__CFHost=}'/>
<arg declared_type='CFHostInfoType' name='info' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFHostCreateCopy'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg declared_type='CFHostRef' name='host' type='^{__CFHost=}'/>
<retval already_retained='true' declared_type='CFHostRef' type='^{__CFHost=}'/>
</function>
<function name='CFHostCreateWithAddress'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='CFDataRef' name='addr' type='^{__CFData=}'/>
<retval already_retained='true' declared_type='CFHostRef' type='^{__CFHost=}'/>
</function>
<function name='CFHostCreateWithName'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='CFStringRef' name='hostname' type='^{__CFString=}'/>
<retval already_retained='true' declared_type='CFHostRef' type='^{__CFHost=}'/>
</function>
<function name='CFHostGetAddressing'>
<arg declared_type='CFHostRef' name='theHost' type='^{__CFHost=}'/>
<arg declared_type='Boolean*' name='hasBeenResolved' type='^B'/>
<retval declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CFHostGetNames'>
<arg declared_type='CFHostRef' name='theHost' type='^{__CFHost=}'/>
<arg declared_type='Boolean*' name='hasBeenResolved' type='^B'/>
<retval declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CFHostGetReachability'>
<arg declared_type='CFHostRef' name='theHost' type='^{__CFHost=}'/>
<arg declared_type='Boolean*' name='hasBeenResolved' type='^B'/>
<retval declared_type='CFDataRef' type='^{__CFData=}'/>
</function>
<function name='CFHostGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CFHostScheduleWithRunLoop'>
<arg declared_type='CFHostRef' name='theHost' type='^{__CFHost=}'/>
<arg declared_type='CFRunLoopRef' name='runLoop' type='^{__CFRunLoop=}'/>
<arg declared_type='CFStringRef' name='runLoopMode' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFHostSetClient'>
<arg declared_type='CFHostRef' name='theHost' type='^{__CFHost=}'/>
<arg declared_type='CFHostClientCallBack' function_pointer='true' name='clientCB' type='^?'>
<arg declared_type='CFHostRef' type='^{__CFHost=}'/>
<arg declared_type='CFHostInfoType' type='i'/>
<arg const='true' declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='CFHostClientContext*' name='clientContext' type='^{CFHostClientContext=i^v^?^?^?}' type64='^{CFHostClientContext=q^v^?^?^?}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHostStartInfoResolution'>
<arg declared_type='CFHostRef' name='theHost' type='^{__CFHost=}'/>
<arg declared_type='CFHostInfoType' name='info' type='i'/>
<arg declared_type='CFStreamError*' name='error' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFHostUnscheduleFromRunLoop'>
<arg declared_type='CFHostRef' name='theHost' type='^{__CFHost=}'/>
<arg declared_type='CFRunLoopRef' name='runLoop' type='^{__CFRunLoop=}'/>
<arg declared_type='CFStringRef' name='runLoopMode' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetDiagnosticCopyNetworkStatusPassively'>
<arg declared_type='CFNetDiagnosticRef' name='details' type='^{__CFNetDiagnostic=}'/>
<arg declared_type='CFStringRef*' name='description' type='^^{__CFString}'/>
<retval declared_type='CFNetDiagnosticStatus' type='l' type64='q'/>
</function>
<function name='CFNetDiagnosticCreateWithStreams'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg declared_type='CFReadStreamRef' name='readStream' type='^{__CFReadStream=}'/>
<arg declared_type='CFWriteStreamRef' name='writeStream' type='^{__CFWriteStream=}'/>
<retval already_retained='true' declared_type='CFNetDiagnosticRef' type='^{__CFNetDiagnostic=}'/>
</function>
<function name='CFNetDiagnosticCreateWithURL'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg declared_type='CFURLRef' name='url' type='^{__CFURL=}'/>
<retval already_retained='true' declared_type='CFNetDiagnosticRef' type='^{__CFNetDiagnostic=}'/>
</function>
<function name='CFNetDiagnosticDiagnoseProblemInteractively'>
<arg declared_type='CFNetDiagnosticRef' name='details' type='^{__CFNetDiagnostic=}'/>
<retval declared_type='CFNetDiagnosticStatus' type='l' type64='q'/>
</function>
<function name='CFNetDiagnosticSetName'>
<arg declared_type='CFNetDiagnosticRef' name='details' type='^{__CFNetDiagnostic=}'/>
<arg declared_type='CFStringRef' name='name' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceBrowserCreate'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg declared_type='CFNetServiceBrowserClientCallBack' function_pointer='true' name='clientCB' type='^?'>
<arg declared_type='CFNetServiceBrowserRef' type='^{__CFNetServiceBrowser=}'/>
<arg declared_type='CFOptionFlags' type='L' type64='Q'/>
<arg declared_type='CFTypeRef' type='@'/>
<arg declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='CFNetServiceClientContext*' name='clientContext' type='^{CFNetServiceClientContext=i^v^?^?^?}' type64='^{CFNetServiceClientContext=q^v^?^?^?}'/>
<retval already_retained='true' declared_type='CFNetServiceBrowserRef' type='^{__CFNetServiceBrowser=}'/>
</function>
<function name='CFNetServiceBrowserGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CFNetServiceBrowserInvalidate'>
<arg declared_type='CFNetServiceBrowserRef' name='browser' type='^{__CFNetServiceBrowser=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceBrowserScheduleWithRunLoop'>
<arg declared_type='CFNetServiceBrowserRef' name='browser' type='^{__CFNetServiceBrowser=}'/>
<arg declared_type='CFRunLoopRef' name='runLoop' type='^{__CFRunLoop=}'/>
<arg declared_type='CFStringRef' name='runLoopMode' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceBrowserSearchForDomains'>
<arg declared_type='CFNetServiceBrowserRef' name='browser' type='^{__CFNetServiceBrowser=}'/>
<arg declared_type='Boolean' name='registrationDomains' type='B'/>
<arg declared_type='CFStreamError*' name='error' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFNetServiceBrowserSearchForServices'>
<arg declared_type='CFNetServiceBrowserRef' name='browser' type='^{__CFNetServiceBrowser=}'/>
<arg declared_type='CFStringRef' name='domain' type='^{__CFString=}'/>
<arg declared_type='CFStringRef' name='serviceType' type='^{__CFString=}'/>
<arg declared_type='CFStreamError*' name='error' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFNetServiceBrowserStopSearch'>
<arg declared_type='CFNetServiceBrowserRef' name='browser' type='^{__CFNetServiceBrowser=}'/>
<arg declared_type='CFStreamError*' name='error' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceBrowserUnscheduleFromRunLoop'>
<arg declared_type='CFNetServiceBrowserRef' name='browser' type='^{__CFNetServiceBrowser=}'/>
<arg declared_type='CFRunLoopRef' name='runLoop' type='^{__CFRunLoop=}'/>
<arg declared_type='CFStringRef' name='runLoopMode' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceCancel'>
<arg declared_type='CFNetServiceRef' name='theService' type='^{__CFNetService=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceCreate'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg declared_type='CFStringRef' name='domain' type='^{__CFString=}'/>
<arg declared_type='CFStringRef' name='serviceType' type='^{__CFString=}'/>
<arg declared_type='CFStringRef' name='name' type='^{__CFString=}'/>
<arg declared_type='SInt32' name='port' type='l' type64='i'/>
<retval already_retained='true' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
</function>
<function name='CFNetServiceCreateCopy'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg declared_type='CFNetServiceRef' name='service' type='^{__CFNetService=}'/>
<retval already_retained='true' declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
</function>
<function name='CFNetServiceCreateDictionaryWithTXTData'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg declared_type='CFDataRef' name='txtRecord' type='^{__CFData=}'/>
<retval already_retained='true' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
</function>
<function name='CFNetServiceCreateTXTDataWithDictionary'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg declared_type='CFDictionaryRef' name='keyValuePairs' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CFDataRef' type='^{__CFData=}'/>
</function>
<function name='CFNetServiceGetAddressing'>
<arg declared_type='CFNetServiceRef' name='theService' type='^{__CFNetService=}'/>
<retval declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CFNetServiceGetDomain'>
<arg declared_type='CFNetServiceRef' name='theService' type='^{__CFNetService=}'/>
<retval declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CFNetServiceGetName'>
<arg declared_type='CFNetServiceRef' name='theService' type='^{__CFNetService=}'/>
<retval declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CFNetServiceGetPortNumber'>
<arg declared_type='CFNetServiceRef' name='theService' type='^{__CFNetService=}'/>
<retval declared_type='SInt32' type='l' type64='i'/>
</function>
<function name='CFNetServiceGetProtocolSpecificInformation'>
<arg declared_type='CFNetServiceRef' name='theService' type='^{__CFNetService=}'/>
<retval declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CFNetServiceGetTXTData'>
<arg declared_type='CFNetServiceRef' name='theService' type='^{__CFNetService=}'/>
<retval declared_type='CFDataRef' type='^{__CFData=}'/>
</function>
<function name='CFNetServiceGetTargetHost'>
<arg declared_type='CFNetServiceRef' name='theService' type='^{__CFNetService=}'/>
<retval declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CFNetServiceGetType'>
<arg declared_type='CFNetServiceRef' name='theService' type='^{__CFNetService=}'/>
<retval declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CFNetServiceGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CFNetServiceMonitorCreate'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg declared_type='CFNetServiceRef' name='theService' type='^{__CFNetService=}'/>
<arg declared_type='CFNetServiceMonitorClientCallBack' function_pointer='true' name='clientCB' type='^?'>
<arg declared_type='CFNetServiceMonitorRef' type='^{__CFNetServiceMonitor=}'/>
<arg declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<arg declared_type='CFNetServiceMonitorType' type='i'/>
<arg declared_type='CFDataRef' type='^{__CFData=}'/>
<arg declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='CFNetServiceClientContext*' name='clientContext' type='^{CFNetServiceClientContext=i^v^?^?^?}' type64='^{CFNetServiceClientContext=q^v^?^?^?}'/>
<retval already_retained='true' declared_type='CFNetServiceMonitorRef' type='^{__CFNetServiceMonitor=}'/>
</function>
<function name='CFNetServiceMonitorGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CFNetServiceMonitorInvalidate'>
<arg declared_type='CFNetServiceMonitorRef' name='monitor' type='^{__CFNetServiceMonitor=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceMonitorScheduleWithRunLoop'>
<arg declared_type='CFNetServiceMonitorRef' name='monitor' type='^{__CFNetServiceMonitor=}'/>
<arg declared_type='CFRunLoopRef' name='runLoop' type='^{__CFRunLoop=}'/>
<arg declared_type='CFStringRef' name='runLoopMode' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceMonitorStart'>
<arg declared_type='CFNetServiceMonitorRef' name='monitor' type='^{__CFNetServiceMonitor=}'/>
<arg declared_type='CFNetServiceMonitorType' name='recordType' type='i'/>
<arg declared_type='CFStreamError*' name='error' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFNetServiceMonitorStop'>
<arg declared_type='CFNetServiceMonitorRef' name='monitor' type='^{__CFNetServiceMonitor=}'/>
<arg declared_type='CFStreamError*' name='error' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceMonitorUnscheduleFromRunLoop'>
<arg declared_type='CFNetServiceMonitorRef' name='monitor' type='^{__CFNetServiceMonitor=}'/>
<arg declared_type='CFRunLoopRef' name='runLoop' type='^{__CFRunLoop=}'/>
<arg declared_type='CFStringRef' name='runLoopMode' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceRegister'>
<arg declared_type='CFNetServiceRef' name='theService' type='^{__CFNetService=}'/>
<arg declared_type='CFStreamError*' name='error' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFNetServiceRegisterWithOptions'>
<arg declared_type='CFNetServiceRef' name='theService' type='^{__CFNetService=}'/>
<arg declared_type='CFOptionFlags' name='options' type='L' type64='Q'/>
<arg declared_type='CFStreamError*' name='error' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFNetServiceResolve'>
<arg declared_type='CFNetServiceRef' name='theService' type='^{__CFNetService=}'/>
<arg declared_type='CFStreamError*' name='error' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFNetServiceResolveWithTimeout'>
<arg declared_type='CFNetServiceRef' name='theService' type='^{__CFNetService=}'/>
<arg declared_type='CFTimeInterval' name='timeout' type='d'/>
<arg declared_type='CFStreamError*' name='error' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFNetServiceScheduleWithRunLoop'>
<arg declared_type='CFNetServiceRef' name='theService' type='^{__CFNetService=}'/>
<arg declared_type='CFRunLoopRef' name='runLoop' type='^{__CFRunLoop=}'/>
<arg declared_type='CFStringRef' name='runLoopMode' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceSetClient'>
<arg declared_type='CFNetServiceRef' name='theService' type='^{__CFNetService=}'/>
<arg declared_type='CFNetServiceClientCallBack' function_pointer='true' name='clientCB' type='^?'>
<arg declared_type='CFNetServiceRef' type='^{__CFNetService=}'/>
<arg declared_type='CFStreamError*' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='CFNetServiceClientContext*' name='clientContext' type='^{CFNetServiceClientContext=i^v^?^?^?}' type64='^{CFNetServiceClientContext=q^v^?^?^?}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFNetServiceSetProtocolSpecificInformation'>
<arg declared_type='CFNetServiceRef' name='theService' type='^{__CFNetService=}'/>
<arg declared_type='CFStringRef' name='theInfo' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetServiceSetTXTData'>
<arg declared_type='CFNetServiceRef' name='theService' type='^{__CFNetService=}'/>
<arg declared_type='CFDataRef' name='txtRecord' type='^{__CFData=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CFNetServiceUnscheduleFromRunLoop'>
<arg declared_type='CFNetServiceRef' name='theService' type='^{__CFNetService=}'/>
<arg declared_type='CFRunLoopRef' name='runLoop' type='^{__CFRunLoop=}'/>
<arg declared_type='CFStringRef' name='runLoopMode' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFNetworkCopyProxiesForAutoConfigurationScript'>
<arg declared_type='CFStringRef' name='proxyAutoConfigurationScript' type='^{__CFString=}'/>
<arg declared_type='CFURLRef' name='targetURL' type='^{__CFURL=}'/>
<arg declared_type='CFErrorRef*' name='error' type='^^{__CFError}'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CFNetworkCopyProxiesForURL'>
<arg declared_type='CFURLRef' name='url' type='^{__CFURL=}'/>
<arg declared_type='CFDictionaryRef' name='proxySettings' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CFNetworkCopySystemProxySettings'>
<retval already_retained='true' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
</function>
<function name='CFNetworkExecuteProxyAutoConfigurationScript'>
<arg declared_type='CFStringRef' name='proxyAutoConfigurationScript' type='^{__CFString=}'/>
<arg declared_type='CFURLRef' name='targetURL' type='^{__CFURL=}'/>
<arg declared_type='CFProxyAutoConfigurationResultCallback' function_pointer='true' name='cb' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='CFArrayRef' type='^{__CFArray=}'/>
<arg declared_type='CFErrorRef' type='^{__CFError=}'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='CFStreamClientContext*' name='clientContext' type='^{_CFStreamClientContext=i^v^?^?^?}' type64='^{_CFStreamClientContext=q^v^?^?^?}'/>
<retval declared_type='CFRunLoopSourceRef' type='^{__CFRunLoopSource=}'/>
</function>
<function name='CFNetworkExecuteProxyAutoConfigurationURL'>
<arg declared_type='CFURLRef' name='proxyAutoConfigURL' type='^{__CFURL=}'/>
<arg declared_type='CFURLRef' name='targetURL' type='^{__CFURL=}'/>
<arg declared_type='CFProxyAutoConfigurationResultCallback' function_pointer='true' name='cb' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='CFArrayRef' type='^{__CFArray=}'/>
<arg declared_type='CFErrorRef' type='^{__CFError=}'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='CFStreamClientContext*' name='clientContext' type='^{_CFStreamClientContext=i^v^?^?^?}' type64='^{_CFStreamClientContext=q^v^?^?^?}'/>
<retval declared_type='CFRunLoopSourceRef' type='^{__CFRunLoopSource=}'/>
</function>
<function name='CFReadStreamCreateForHTTPRequest'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg declared_type='CFHTTPMessageRef' name='request' type='^{__CFHTTPMessage=}'/>
<retval already_retained='true' declared_type='CFReadStreamRef' type='^{__CFReadStream=}'/>
</function>
<function name='CFReadStreamCreateForStreamedHTTPRequest'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg declared_type='CFHTTPMessageRef' name='requestHeaders' type='^{__CFHTTPMessage=}'/>
<arg declared_type='CFReadStreamRef' name='requestBody' type='^{__CFReadStream=}'/>
<retval already_retained='true' declared_type='CFReadStreamRef' type='^{__CFReadStream=}'/>
</function>
<function name='CFReadStreamCreateWithFTPURL'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg declared_type='CFURLRef' name='ftpURL' type='^{__CFURL=}'/>
<retval already_retained='true' declared_type='CFReadStreamRef' type='^{__CFReadStream=}'/>
</function>
<function name='CFSocketStreamPairSetSecurityProtocol'>
<arg declared_type='CFReadStreamRef' name='socketReadStream' type='^{__CFReadStream=}'/>
<arg declared_type='CFWriteStreamRef' name='socketWriteStream' type='^{__CFWriteStream=}'/>
<arg declared_type='CFStreamSocketSecurityProtocol' name='securityProtocol' type='i'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function inline='true' name='CFSocketStreamSOCKSGetError'>
<arg const='true' declared_type='CFStreamError*' name='error' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='SInt32' type='l' type64='i'/>
</function>
<function inline='true' name='CFSocketStreamSOCKSGetErrorSubdomain'>
<arg const='true' declared_type='CFStreamError*' name='error' type='^{_CFStreamError=ii}' type64='^{_CFStreamError=qi}'/>
<retval declared_type='SInt32' type='l' type64='i'/>
</function>
<function name='CFStreamCreatePairWithSocketToCFHost'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg declared_type='CFHostRef' name='host' type='^{__CFHost=}'/>
<arg declared_type='SInt32' name='port' type='l' type64='i'/>
<arg declared_type='CFReadStreamRef*' name='readStream' type='^^{__CFReadStream}'/>
<arg declared_type='CFWriteStreamRef*' name='writeStream' type='^^{__CFWriteStream}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFStreamCreatePairWithSocketToNetService'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg declared_type='CFNetServiceRef' name='service' type='^{__CFNetService=}'/>
<arg declared_type='CFReadStreamRef*' name='readStream' type='^^{__CFReadStream}'/>
<arg declared_type='CFWriteStreamRef*' name='writeStream' type='^^{__CFWriteStream}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CFWriteStreamCreateWithFTPURL'>
<arg declared_type='CFAllocatorRef' name='alloc' type='^{__CFAllocator=}'/>
<arg declared_type='CFURLRef' name='ftpURL' type='^{__CFURL=}'/>
<retval already_retained='true' declared_type='CFWriteStreamRef' type='^{__CFWriteStream=}'/>
</function>
</signatures>
