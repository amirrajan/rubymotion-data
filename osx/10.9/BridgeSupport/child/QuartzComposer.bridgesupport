<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/JavaScriptCore.framework'/>
<depends_on path='/System/Library/Frameworks/QTKit.framework'/>
<depends_on path='/System/Library/Frameworks/OpenCL.framework'/>
<depends_on path='/System/Library/Frameworks/IOSurface.framework'/>
<depends_on path='/System/Library/Frameworks/Foundation.framework'/>
<depends_on path='/System/Library/Frameworks/AppKit.framework'/>
<depends_on path='/System/Library/Frameworks/QuartzCore.framework'/>
<depends_on path='/System/Library/Frameworks/OpenGL.framework'/>
<depends_on path='/System/Library/Frameworks/Accelerate.framework'/>
<depends_on path='/System/Library/Frameworks/IOKit.framework'/>
<depends_on path='/System/Library/Frameworks/CoreText.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/CoreVideo.framework'/>
<depends_on path='/System/Library/Frameworks/CFNetwork.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework'/>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/CoreGraphics.framework'/>
<depends_on path='/System/Library/Frameworks/ImageIO.framework'/>
<constant const='true' declared_type='NSString*' name='QCCompositionAttributeBuiltInKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionAttributeCategoryKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionAttributeCopyrightKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionAttributeDescriptionKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionAttributeHasConsumersKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionAttributeIsTimeDependentKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionAttributeNameKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionCategoryDistortion' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionCategoryStylize' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionCategoryUtility' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionInputAudioPeakKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionInputAudioSpectrumKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionInputDestinationImageKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionInputImageKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionInputPaceKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionInputPreviewModeKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionInputPrimaryColorKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionInputRSSArticleDurationKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionInputRSSFeedURLKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionInputScreenImageKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionInputSecondaryColorKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionInputSourceImageKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionInputTrackInfoKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionInputTrackPositionKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionInputTrackSignalKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionInputXKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionInputYKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionOutputImageKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionOutputWebPageURLKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionPickerPanelDidSelectCompositionNotification' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionPickerViewDidSelectCompositionNotification' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionProtocolGraphicAnimation' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionProtocolGraphicTransition' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionProtocolImageFilter' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionProtocolMusicVisualizer' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionProtocolRSSVisualizer' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionProtocolScreenSaver' type='@'/>
<constant const='true' declared_type='NSString*' name='QCCompositionRepositoryDidUpdateNotification' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPlugInAttributeCategoriesKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPlugInAttributeCopyrightKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPlugInAttributeDescriptionKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPlugInAttributeExamplesKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPlugInAttributeNameKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPlugInExecutionArgumentEventKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPlugInExecutionArgumentMouseLocationKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPlugInPixelFormatARGB8' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPlugInPixelFormatBGRA8' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPlugInPixelFormatI8' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPlugInPixelFormatIf' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPlugInPixelFormatRGBAf' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPortAttributeDefaultValueKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPortAttributeMaximumValueKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPortAttributeMenuItemsKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPortAttributeMinimumValueKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPortAttributeNameKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPortAttributeTypeKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPortTypeBoolean' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPortTypeColor' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPortTypeImage' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPortTypeIndex' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPortTypeNumber' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPortTypeString' type='@'/>
<constant const='true' declared_type='NSString*' name='QCPortTypeStructure' type='@'/>
<constant const='true' declared_type='NSString*' name='QCRendererEventKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCRendererMouseLocationKey' type='@'/>
<constant const='true' declared_type='NSString*' name='QCViewDidStartRenderingNotification' type='@'/>
<constant const='true' declared_type='NSString*' name='QCViewDidStopRenderingNotification' type='@'/>
<enum name='kQCPlugInExecutionModeConsumer' value='3'/>
<enum name='kQCPlugInExecutionModeProcessor' value='2'/>
<enum name='kQCPlugInExecutionModeProvider' value='1'/>
<enum name='kQCPlugInTimeModeIdle' value='1'/>
<enum name='kQCPlugInTimeModeNone' value='0'/>
<enum name='kQCPlugInTimeModeTimeBase' value='2'/>
<class name='NSObject'>
<method selector='CGLContextObj'>
<retval declared_type='CGLContextObj' type='^{_CGLContextObject=}'/>
</method>
<method selector='attributes'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='bindTextureRepresentationToCGLContext:textureUnit:normalizeCoordinates:'>
<arg declared_type='CGLContextObj' index='0' name='cgl_ctx' type='^{_CGLContextObject=}'/>
<arg declared_type='GLenum' index='1' name='unit' type='I'/>
<arg declared_type='BOOL' index='2' name='flag' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='bounds'>
<retval declared_type='NSRect' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</method>
<method selector='bufferBaseAddress'>
<retval const='true' declared_type='void*' type='^v'/>
</method>
<method selector='bufferBytesPerRow'>
<retval declared_type='NSUInteger' type='I' type64='Q'/>
</method>
<method selector='bufferColorSpace'>
<retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
</method>
<method selector='bufferPixelFormat'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='bufferPixelsHigh'>
<retval declared_type='NSUInteger' type='I' type64='Q'/>
</method>
<method selector='bufferPixelsWide'>
<retval declared_type='NSUInteger' type='I' type64='Q'/>
</method>
<method selector='canRenderWithCGLContext:'>
<arg declared_type='CGLContextObj' index='0' name='cgl_ctx' type='^{_CGLContextObject=}'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='colorSpace'>
<retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
</method>
<method selector='compositionParameterView:didChangeParameterWithKey:'>
<arg declared_type='QCCompositionParameterView*' index='0' name='parameterView' type='@'/>
<arg declared_type='NSString*' index='1' name='portKey' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='compositionParameterView:shouldDisplayParameterWithKey:attributes:'>
<arg declared_type='QCCompositionParameterView*' index='0' name='parameterView' type='@'/>
<arg declared_type='NSString*' index='1' name='portKey' type='@'/>
<arg declared_type='NSDictionary*' index='2' name='portAttributes' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='compositionPickerView:didSelectComposition:'>
<arg declared_type='QCCompositionPickerView*' index='0' name='pickerView' type='@'/>
<arg declared_type='QCComposition*' index='1' name='composition' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='compositionPickerViewDidStartAnimating:'>
<arg declared_type='QCCompositionPickerView*' index='0' name='pickerView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='compositionPickerViewWillStopAnimating:'>
<arg declared_type='QCCompositionPickerView*' index='0' name='pickerView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='compositionURL'>
<retval declared_type='NSURL*' type='@'/>
</method>
<method selector='copyRenderedTextureForCGLContext:pixelFormat:bounds:isFlipped:'>
<arg declared_type='CGLContextObj' index='0' name='cgl_ctx' type='^{_CGLContextObject=}'/>
<arg declared_type='NSString*' index='1' name='format' type='@'/>
<arg declared_type='NSRect' index='2' name='bounds' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type='BOOL*' index='3' name='flipped' type='^B'/>
<retval declared_type='GLuint' type='I'/>
</method>
<method selector='imageBounds'>
<retval declared_type='NSRect' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</method>
<method selector='imageColorSpace'>
<retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
</method>
<method selector='inputKeys'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='lockBufferRepresentationWithPixelFormat:colorSpace:forBounds:'>
<arg declared_type='NSString*' index='0' name='format' type='@'/>
<arg declared_type='CGColorSpaceRef' index='1' name='colorSpace' type='^{CGColorSpace=}'/>
<arg declared_type='NSRect' index='2' name='bounds' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='lockTextureRepresentationWithColorSpace:forBounds:'>
<arg declared_type='CGColorSpaceRef' index='0' name='colorSpace' type='^{CGColorSpace=}'/>
<arg declared_type='NSRect' index='1' name='bounds' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='logMessage:' variadic='true'>
<arg declared_type='NSString*' index='0' name='format' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outputImageProviderFromBufferWithPixelFormat:pixelsWide:pixelsHigh:baseAddress:bytesPerRow:releaseCallback:releaseContext:colorSpace:shouldColorMatch:'>
<arg declared_type='NSString*' index='0' name='format' type='@'/>
<arg declared_type='NSUInteger' index='1' name='width' type='I' type64='Q'/>
<arg declared_type='NSUInteger' index='2' name='height' type='I' type64='Q'/>
<arg const='true' declared_type='void*' index='3' name='baseAddress' type='^v'/>
<arg declared_type='NSUInteger' index='4' name='rowBytes' type='I' type64='Q'/>
<arg declared_type='QCPlugInBufferReleaseCallback' function_pointer='true' index='5' name='callback' type='^?'>
<arg const='true' declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' index='6' name='context' type='^v'/>
<arg declared_type='CGColorSpaceRef' index='7' name='colorSpace' type='^{CGColorSpace=}'/>
<arg declared_type='BOOL' index='8' name='colorMatch' type='B'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='outputImageProviderFromTextureWithPixelFormat:pixelsWide:pixelsHigh:name:flipped:releaseCallback:releaseContext:colorSpace:shouldColorMatch:'>
<arg declared_type='NSString*' index='0' name='format' type='@'/>
<arg declared_type='NSUInteger' index='1' name='width' type='I' type64='Q'/>
<arg declared_type='NSUInteger' index='2' name='height' type='I' type64='Q'/>
<arg declared_type='GLuint' index='3' name='name' type='I'/>
<arg declared_type='BOOL' index='4' name='flipped' type='B'/>
<arg declared_type='QCPlugInTextureReleaseCallback' function_pointer='true' index='5' name='callback' type='^?'>
<arg declared_type='CGLContextObj' type='^{_CGLContextObject=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' index='6' name='context' type='^v'/>
<arg declared_type='CGColorSpaceRef' index='7' name='colorSpace' type='^{CGColorSpace=}'/>
<arg declared_type='BOOL' index='8' name='colorMatch' type='B'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='outputKeys'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='propertyListFromInputValues'>
<retval declared_type='id' type='@'/>
</method>
<method selector='releaseRenderedTexture:forCGLContext:'>
<arg declared_type='GLuint' index='0' name='name' type='I'/>
<arg declared_type='CGLContextObj' index='1' name='cgl_ctx' type='^{_CGLContextObject=}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='renderToBuffer:withBytesPerRow:pixelFormat:forBounds:'>
<arg declared_type='void*' index='0' name='baseAddress' type='^v'/>
<arg declared_type='NSUInteger' index='1' name='rowBytes' type='I' type64='Q'/>
<arg declared_type='NSString*' index='2' name='format' type='@'/>
<arg declared_type='NSRect' index='3' name='bounds' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='renderWithCGLContext:forBounds:'>
<arg declared_type='CGLContextObj' index='0' name='cgl_ctx' type='^{_CGLContextObject=}'/>
<arg declared_type='NSRect' index='1' name='bounds' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setInputValuesWithPropertyList:'>
<arg declared_type='id' index='0' name='plist' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setValue:forInputKey:'>
<arg declared_type='id' index='0' name='value' type='@'/>
<arg declared_type='NSString*' index='1' name='key' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='shouldColorMatch'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='supportedBufferPixelFormats'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='supportedRenderedTexturePixelFormats'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='textureColorSpace'>
<retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
</method>
<method selector='textureFlipped'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='textureMatrix'>
<retval const='true' declared_type='GLfloat*' type='^f'/>
</method>
<method selector='textureName'>
<retval declared_type='GLuint' type='I'/>
</method>
<method selector='texturePixelsHigh'>
<retval declared_type='NSUInteger' type='I' type64='Q'/>
</method>
<method selector='texturePixelsWide'>
<retval declared_type='NSUInteger' type='I' type64='Q'/>
</method>
<method selector='textureTarget'>
<retval declared_type='GLenum' type='I'/>
</method>
<method selector='unbindTextureRepresentationFromCGLContext:textureUnit:'>
<arg declared_type='CGLContextObj' index='0' name='cgl_ctx' type='^{_CGLContextObject=}'/>
<arg declared_type='GLenum' index='1' name='unit' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='unlockBufferRepresentation'>
<retval declared_type='void' type='v'/>
</method>
<method selector='unlockTextureRepresentation'>
<retval declared_type='void' type='v'/>
</method>
<method selector='userInfo'>
<retval declared_type='NSMutableDictionary*' type='@'/>
</method>
<method selector='valueForInputKey:'>
<arg declared_type='NSString*' index='0' name='key' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='valueForOutputKey:'>
<arg declared_type='NSString*' index='0' name='key' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='valueForOutputKey:ofType:'>
<arg declared_type='NSString*' index='0' name='key' type='@'/>
<arg declared_type='NSString*' index='1' name='type' type='@'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='QCComposition'>
<method selector='attributes'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method class_method='true' selector='compositionWithData:'>
<arg declared_type='NSData*' index='0' name='data' type='@'/>
<retval declared_type='QCComposition*' type='@'/>
</method>
<method class_method='true' selector='compositionWithFile:'>
<arg declared_type='NSString*' index='0' name='path' type='@'/>
<retval declared_type='QCComposition*' type='@'/>
</method>
<method selector='identifier'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='inputKeys'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='outputKeys'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='protocols'>
<retval declared_type='NSArray*' type='@'/>
</method>
</class>
<class name='QCCompositionLayer'>
<method selector='composition'>
<retval declared_type='QCComposition*' type='@'/>
</method>
<method class_method='true' selector='compositionLayerWithComposition:'>
<arg declared_type='QCComposition*' index='0' name='composition' type='@'/>
<retval declared_type='QCCompositionLayer*' type='@'/>
</method>
<method class_method='true' selector='compositionLayerWithFile:'>
<arg declared_type='NSString*' index='0' name='path' type='@'/>
<retval declared_type='QCCompositionLayer*' type='@'/>
</method>
<method selector='initWithComposition:'>
<arg declared_type='QCComposition*' index='0' name='composition' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithFile:'>
<arg declared_type='NSString*' index='0' name='path' type='@'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='QCCompositionParameterView'>
<method selector='backgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='compositionRenderer'>
<retval declared_type='id' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='drawsBackground'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='hasParameters'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='setBackgroundColor:'>
<arg declared_type='NSColor*' index='0' name='color' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCompositionRenderer:'>
<arg declared_type='id' index='0' name='renderer' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg declared_type='id' index='0' name='delegate' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDrawsBackground:'>
<arg declared_type='BOOL' index='0' name='flag' type='B'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='QCCompositionPickerPanel'>
<method selector='compositionPickerView'>
<retval declared_type='QCCompositionPickerView*' type='@'/>
</method>
<method class_method='true' selector='sharedCompositionPickerPanel'>
<retval declared_type='QCCompositionPickerPanel*' type='@'/>
</method>
</class>
<class name='QCCompositionPickerView'>
<method selector='allowsEmptySelection'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='backgroundColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='compositionAspectRatio'>
<retval declared_type='NSSize' type='{_NSSize=ff}' type64='{CGSize=dd}'/>
</method>
<method selector='compositions'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='delegate'>
<retval declared_type='id' type='@'/>
</method>
<method selector='drawsBackground'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isAnimating'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='maxAnimationFrameRate'>
<retval declared_type='float' type='f'/>
</method>
<method selector='numberOfColumns'>
<retval declared_type='NSUInteger' type='I' type64='Q'/>
</method>
<method selector='numberOfRows'>
<retval declared_type='NSUInteger' type='I' type64='Q'/>
</method>
<method selector='resetDefaultInputValues'>
<retval declared_type='void' type='v'/>
</method>
<method selector='selectedComposition'>
<retval declared_type='QCComposition*' type='@'/>
</method>
<method selector='setAllowsEmptySelection:'>
<arg declared_type='BOOL' index='0' name='flag' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setBackgroundColor:'>
<arg declared_type='NSColor*' index='0' name='color' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCompositionAspectRatio:'>
<arg declared_type='NSSize' index='0' name='ratio' type='{_NSSize=ff}' type64='{CGSize=dd}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setCompositionsFromRepositoryWithProtocol:andAttributes:'>
<arg declared_type='NSString*' index='0' name='protocol' type='@'/>
<arg declared_type='NSDictionary*' index='1' name='attributes' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDefaultValue:forInputKey:'>
<arg declared_type='id' index='0' name='value' type='@'/>
<arg declared_type='NSString*' index='1' name='key' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDelegate:'>
<arg declared_type='id' index='0' name='delegate' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setDrawsBackground:'>
<arg declared_type='BOOL' index='0' name='flag' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxAnimationFrameRate:'>
<arg declared_type='float' index='0' name='maxFPS' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNumberOfColumns:'>
<arg declared_type='NSUInteger' index='0' name='columns' type='I' type64='Q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setNumberOfRows:'>
<arg declared_type='NSUInteger' index='0' name='rows' type='I' type64='Q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setSelectedComposition:'>
<arg declared_type='QCComposition*' index='0' name='composition' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setShowsCompositionNames:'>
<arg declared_type='BOOL' index='0' name='flag' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='showsCompositionNames'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='startAnimation:'>
<arg declared_type='id' index='0' name='sender' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='stopAnimation:'>
<arg declared_type='id' index='0' name='sender' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</class>
<class name='QCCompositionRepository'>
<method selector='allCompositions'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='compositionWithIdentifier:'>
<arg declared_type='NSString*' index='0' name='identifier' type='@'/>
<retval declared_type='QCComposition*' type='@'/>
</method>
<method selector='compositionsWithProtocols:andAttributes:'>
<arg declared_type='NSArray*' index='0' name='protocols' type='@'/>
<arg declared_type='NSDictionary*' index='1' name='attributes' type='@'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method class_method='true' selector='sharedCompositionRepository'>
<retval declared_type='QCCompositionRepository*' type='@'/>
</method>
</class>
<class name='QCPlugIn'>
<method selector='addInputPortWithType:forKey:withAttributes:'>
<arg declared_type='NSString*' index='0' name='type' type='@'/>
<arg declared_type='NSString*' index='1' name='key' type='@'/>
<arg declared_type='NSDictionary*' index='2' name='attributes' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='addOutputPortWithType:forKey:withAttributes:'>
<arg declared_type='NSString*' index='0' name='type' type='@'/>
<arg declared_type='NSString*' index='1' name='key' type='@'/>
<arg declared_type='NSDictionary*' index='2' name='attributes' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='attributes'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method class_method='true' selector='attributesForPropertyPortWithKey:'>
<arg declared_type='NSString*' index='0' name='key' type='@'/>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='createViewController'>
<retval already_retained='true' declared_type='QCPlugInViewController*' type='@'/>
</method>
<method selector='didValueForInputKeyChange:'>
<arg declared_type='NSString*' index='0' name='key' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='disableExecution:'>
<arg declared_type='id' index='0' name='context' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='enableExecution:'>
<arg declared_type='id' index='0' name='context' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='execute:atTime:withArguments:'>
<arg declared_type='id' index='0' name='context' type='@'/>
<arg declared_type='NSTimeInterval' index='1' name='time' type='d'/>
<arg declared_type='NSDictionary*' index='2' name='arguments' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method class_method='true' selector='executionMode'>
<retval declared_type='QCPlugInExecutionMode' type='i'/>
</method>
<method selector='executionTimeForContext:atTime:withArguments:'>
<arg declared_type='id' index='0' name='context' type='@'/>
<arg declared_type='NSTimeInterval' index='1' name='time' type='d'/>
<arg declared_type='NSDictionary*' index='2' name='arguments' type='@'/>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method class_method='true' selector='loadPlugInAtPath:'>
<arg declared_type='NSString*' index='0' name='path' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method class_method='true' selector='plugInKeys'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method class_method='true' selector='registerPlugInClass:'>
<arg declared_type='Class' index='0' name='aClass' type='#'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeInputPortForKey:'>
<arg declared_type='NSString*' index='0' name='key' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='removeOutputPortForKey:'>
<arg declared_type='NSString*' index='0' name='key' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='serializedValueForKey:'>
<arg declared_type='NSString*' index='0' name='key' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='setSerializedValue:forKey:'>
<arg declared_type='id' index='0' name='serializedValue' type='@'/>
<arg declared_type='NSString*' index='1' name='key' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setValue:forOutputKey:'>
<arg declared_type='id' index='0' name='value' type='@'/>
<arg declared_type='NSString*' index='1' name='key' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method class_method='true' selector='sortedPropertyPortKeys'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='startExecution:'>
<arg declared_type='id' index='0' name='context' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='stopExecution:'>
<arg declared_type='id' index='0' name='context' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method class_method='true' selector='timeMode'>
<retval declared_type='QCPlugInTimeMode' type='i'/>
</method>
<method selector='valueForInputKey:'>
<arg declared_type='NSString*' index='0' name='key' type='@'/>
<retval declared_type='id' type='@'/>
</method>
</class>
<class name='QCPlugInViewController'>
<method selector='initWithPlugIn:viewNibName:'>
<arg declared_type='QCPlugIn*' index='0' name='plugIn' type='@'/>
<arg declared_type='NSString*' index='1' name='name' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='plugIn'>
<retval declared_type='QCPlugIn*' type='@'/>
</method>
</class>
<class name='QCRenderer'>
<method selector='composition'>
<retval declared_type='QCComposition*' type='@'/>
</method>
<method selector='createSnapshotImageOfType:'>
<arg declared_type='NSString*' index='0' name='type' type='@'/>
<retval already_retained='true' declared_type='id' type='@'/>
</method>
<method selector='initOffScreenWithSize:colorSpace:composition:'>
<arg declared_type='NSSize' index='0' name='size' type='{_NSSize=ff}' type64='{CGSize=dd}'/>
<arg declared_type='CGColorSpaceRef' index='1' name='colorSpace' type='^{CGColorSpace=}'/>
<arg declared_type='QCComposition*' index='2' name='composition' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithCGLContext:pixelFormat:colorSpace:composition:'>
<arg declared_type='CGLContextObj' index='0' name='context' type='^{_CGLContextObject=}'/>
<arg declared_type='CGLPixelFormatObj' index='1' name='format' type='^{_CGLPixelFormatObject=}'/>
<arg declared_type='CGColorSpaceRef' index='2' name='colorSpace' type='^{CGColorSpace=}'/>
<arg declared_type='QCComposition*' index='3' name='composition' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithComposition:colorSpace:'>
<arg declared_type='QCComposition*' index='0' name='composition' type='@'/>
<arg declared_type='CGColorSpaceRef' index='1' name='colorSpace' type='^{CGColorSpace=}'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='initWithOpenGLContext:pixelFormat:file:'>
<arg declared_type='NSOpenGLContext*' index='0' name='context' type='@'/>
<arg declared_type='NSOpenGLPixelFormat*' index='1' name='format' type='@'/>
<arg declared_type='NSString*' index='2' name='path' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='renderAtTime:arguments:'>
<arg declared_type='NSTimeInterval' index='0' name='time' type='d'/>
<arg declared_type='NSDictionary*' index='1' name='arguments' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='renderingTimeForTime:arguments:'>
<arg declared_type='NSTimeInterval' index='0' name='time' type='d'/>
<arg declared_type='NSDictionary*' index='1' name='arguments' type='@'/>
<retval declared_type='NSTimeInterval' type='d'/>
</method>
<method selector='snapshotImage'>
<retval declared_type='NSImage*' type='@'/>
</method>
</class>
<class name='QCView'>
<method selector='autostartsRendering'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='createSnapshotImageOfType:'>
<arg declared_type='NSString*' index='0' name='type' type='@'/>
<retval already_retained='true' declared_type='id' type='@'/>
</method>
<method selector='erase'>
<retval declared_type='void' type='v'/>
</method>
<method selector='eraseColor'>
<retval declared_type='NSColor*' type='@'/>
</method>
<method selector='eventForwardingMask'>
<retval declared_type='NSUInteger' type='I' type64='Q'/>
</method>
<method selector='isPausedRendering'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='isRendering'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='loadComposition:'>
<arg declared_type='QCComposition*' index='0' name='composition' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='loadCompositionFromFile:'>
<arg declared_type='NSString*' index='0' name='path' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='loadedComposition'>
<retval declared_type='QCComposition*' type='@'/>
</method>
<method selector='maxRenderingFrameRate'>
<retval declared_type='float' type='f'/>
</method>
<method selector='openGLContext'>
<retval declared_type='NSOpenGLContext*' type='@'/>
</method>
<method selector='openGLPixelFormat'>
<retval declared_type='NSOpenGLPixelFormat*' type='@'/>
</method>
<method selector='pauseRendering'>
<retval declared_type='void' type='v'/>
</method>
<method selector='play:'>
<arg declared_type='id' index='0' name='sender' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='renderAtTime:arguments:'>
<arg declared_type='NSTimeInterval' index='0' name='time' type='d'/>
<arg declared_type='NSDictionary*' index='1' name='arguments' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='resumeRendering'>
<retval declared_type='void' type='v'/>
</method>
<method selector='setAutostartsRendering:'>
<arg declared_type='BOOL' index='0' name='flag' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEraseColor:'>
<arg declared_type='NSColor*' index='0' name='color' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setEventForwardingMask:'>
<arg declared_type='NSUInteger' index='0' name='mask' type='I' type64='Q'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setMaxRenderingFrameRate:'>
<arg declared_type='float' index='0' name='maxFPS' type='f'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='snapshotImage'>
<retval declared_type='NSImage*' type='@'/>
</method>
<method selector='start:'>
<arg declared_type='id' index='0' name='sender' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='startRendering'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='stop:'>
<arg declared_type='id' index='0' name='sender' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='stopRendering'>
<retval declared_type='void' type='v'/>
</method>
<method selector='unloadComposition'>
<retval declared_type='void' type='v'/>
</method>
</class>
<informal_protocol name='QCCompositionParameterViewDelegate'>
<method selector='compositionParameterView:didChangeParameterWithKey:' type='v16@0:4@8@12' type64='v32@0:8@16@24'>
<arg declared_type='QCCompositionParameterView*' index='0' name='parameterView' type='@'/>
<arg declared_type='NSString*' index='1' name='portKey' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='compositionParameterView:shouldDisplayParameterWithKey:attributes:' type='B20@0:4@8@12@16' type64='B40@0:8@16@24@32'>
<arg declared_type='QCCompositionParameterView*' index='0' name='parameterView' type='@'/>
<arg declared_type='NSString*' index='1' name='portKey' type='@'/>
<arg declared_type='NSDictionary*' index='2' name='portAttributes' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='QCCompositionPickerViewDelegate'>
<method selector='compositionPickerView:didSelectComposition:' type='v16@0:4@8@12' type64='v32@0:8@16@24'>
<arg declared_type='QCCompositionPickerView*' index='0' name='pickerView' type='@'/>
<arg declared_type='QCComposition*' index='1' name='composition' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='compositionPickerViewDidStartAnimating:' type='v12@0:4@8' type64='v24@0:8@16'>
<arg declared_type='QCCompositionPickerView*' index='0' name='pickerView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='compositionPickerViewWillStopAnimating:' type='v12@0:4@8' type64='v24@0:8@16'>
<arg declared_type='QCCompositionPickerView*' index='0' name='pickerView' type='@'/>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='QCCompositionRenderer'>
<method selector='attributes' type='@8@0:4' type64='@16@0:8'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='inputKeys' type='@8@0:4' type64='@16@0:8'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='outputKeys' type='@8@0:4' type64='@16@0:8'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='propertyListFromInputValues' type='@8@0:4' type64='@16@0:8'>
<retval declared_type='id' type='@'/>
</method>
<method selector='setInputValuesWithPropertyList:' type='v12@0:4@8' type64='v24@0:8@16'>
<arg declared_type='id' index='0' name='plist' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='setValue:forInputKey:' type='B16@0:4@8@12' type64='B32@0:8@16@24'>
<arg declared_type='id' index='0' name='value' type='@'/>
<arg declared_type='NSString*' index='1' name='key' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='userInfo' type='@8@0:4' type64='@16@0:8'>
<retval declared_type='NSMutableDictionary*' type='@'/>
</method>
<method selector='valueForInputKey:' type='@12@0:4@8' type64='@24@0:8@16'>
<arg declared_type='NSString*' index='0' name='key' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='valueForOutputKey:' type='@12@0:4@8' type64='@24@0:8@16'>
<arg declared_type='NSString*' index='0' name='key' type='@'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='valueForOutputKey:ofType:' type='@16@0:4@8@12' type64='@32@0:8@16@24'>
<arg declared_type='NSString*' index='0' name='key' type='@'/>
<arg declared_type='NSString*' index='1' name='type' type='@'/>
<retval declared_type='id' type='@'/>
</method>
</informal_protocol>
<informal_protocol name='QCPlugInContext'>
<method selector='CGLContextObj' type='^{_CGLContextObject=}8@0:4' type64='^{_CGLContextObject=}16@0:8'>
<retval declared_type='CGLContextObj' type='^{_CGLContextObject=}'/>
</method>
<method selector='bounds' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}8@0:4' type64='{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8'>
<retval declared_type='NSRect' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</method>
<method selector='colorSpace' type='^{CGColorSpace=}8@0:4' type64='^{CGColorSpace=}16@0:8'>
<retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
</method>
<method selector='compositionURL' type='@8@0:4' type64='@16@0:8'>
<retval declared_type='NSURL*' type='@'/>
</method>
<method selector='logMessage:' type='v12@0:4@8' type64='v24@0:8@16' variadic='true'>
<arg declared_type='NSString*' index='0' name='format' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='outputImageProviderFromBufferWithPixelFormat:pixelsWide:pixelsHigh:baseAddress:bytesPerRow:releaseCallback:releaseContext:colorSpace:shouldColorMatch:' type='@44@0:4@8I12I16r^v20I24^?28^v32^{CGColorSpace=}36B40' type64='@84@0:8@16Q24Q32r^v40Q48^?56^v64^{CGColorSpace=}72B80'>
<arg declared_type='NSString*' index='0' name='format' type='@'/>
<arg declared_type='NSUInteger' index='1' name='width' type='I' type64='Q'/>
<arg declared_type='NSUInteger' index='2' name='height' type='I' type64='Q'/>
<arg const='true' declared_type='void*' index='3' name='baseAddress' type='^v'/>
<arg declared_type='NSUInteger' index='4' name='rowBytes' type='I' type64='Q'/>
<arg declared_type='QCPlugInBufferReleaseCallback' function_pointer='true' index='5' name='callback' type='^?'>
<arg const='true' declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' index='6' name='context' type='^v'/>
<arg declared_type='CGColorSpaceRef' index='7' name='colorSpace' type='^{CGColorSpace=}'/>
<arg declared_type='BOOL' index='8' name='colorMatch' type='B'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='outputImageProviderFromTextureWithPixelFormat:pixelsWide:pixelsHigh:name:flipped:releaseCallback:releaseContext:colorSpace:shouldColorMatch:' type='@44@0:4@8I12I16I20B24^?28^v32^{CGColorSpace=}36B40' type64='@76@0:8@16Q24Q32I40B44^?48^v56^{CGColorSpace=}64B72'>
<arg declared_type='NSString*' index='0' name='format' type='@'/>
<arg declared_type='NSUInteger' index='1' name='width' type='I' type64='Q'/>
<arg declared_type='NSUInteger' index='2' name='height' type='I' type64='Q'/>
<arg declared_type='GLuint' index='3' name='name' type='I'/>
<arg declared_type='BOOL' index='4' name='flipped' type='B'/>
<arg declared_type='QCPlugInTextureReleaseCallback' function_pointer='true' index='5' name='callback' type='^?'>
<arg declared_type='CGLContextObj' type='^{_CGLContextObject=}'/>
<arg declared_type='GLuint' type='I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' index='6' name='context' type='^v'/>
<arg declared_type='CGColorSpaceRef' index='7' name='colorSpace' type='^{CGColorSpace=}'/>
<arg declared_type='BOOL' index='8' name='colorMatch' type='B'/>
<retval declared_type='id' type='@'/>
</method>
<method selector='userInfo' type='@8@0:4' type64='@16@0:8'>
<retval declared_type='NSMutableDictionary*' type='@'/>
</method>
</informal_protocol>
<informal_protocol name='QCPlugInInputImageSource'>
<method selector='bindTextureRepresentationToCGLContext:textureUnit:normalizeCoordinates:' type='v20@0:4^{_CGLContextObject=}8I12B16' type64='v32@0:8^{_CGLContextObject=}16I24B28'>
<arg declared_type='CGLContextObj' index='0' name='cgl_ctx' type='^{_CGLContextObject=}'/>
<arg declared_type='GLenum' index='1' name='unit' type='I'/>
<arg declared_type='BOOL' index='2' name='flag' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='bufferBaseAddress' type='r^v8@0:4' type64='r^v16@0:8'>
<retval const='true' declared_type='void*' type='^v'/>
</method>
<method selector='bufferBytesPerRow' type='I8@0:4' type64='Q16@0:8'>
<retval declared_type='NSUInteger' type='I' type64='Q'/>
</method>
<method selector='bufferColorSpace' type='^{CGColorSpace=}8@0:4' type64='^{CGColorSpace=}16@0:8'>
<retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
</method>
<method selector='bufferPixelFormat' type='@8@0:4' type64='@16@0:8'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='bufferPixelsHigh' type='I8@0:4' type64='Q16@0:8'>
<retval declared_type='NSUInteger' type='I' type64='Q'/>
</method>
<method selector='bufferPixelsWide' type='I8@0:4' type64='Q16@0:8'>
<retval declared_type='NSUInteger' type='I' type64='Q'/>
</method>
<method selector='imageBounds' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}8@0:4' type64='{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8'>
<retval declared_type='NSRect' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</method>
<method selector='imageColorSpace' type='^{CGColorSpace=}8@0:4' type64='^{CGColorSpace=}16@0:8'>
<retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
</method>
<method selector='lockBufferRepresentationWithPixelFormat:colorSpace:forBounds:' type='B32@0:4@8^{CGColorSpace=}12{_NSRect={_NSPoint=ff}{_NSSize=ff}}16' type64='B64@0:8@16^{CGColorSpace=}24{CGRect={CGPoint=dd}{CGSize=dd}}32'>
<arg declared_type='NSString*' index='0' name='format' type='@'/>
<arg declared_type='CGColorSpaceRef' index='1' name='colorSpace' type='^{CGColorSpace=}'/>
<arg declared_type='NSRect' index='2' name='bounds' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='lockTextureRepresentationWithColorSpace:forBounds:' type='B28@0:4^{CGColorSpace=}8{_NSRect={_NSPoint=ff}{_NSSize=ff}}12' type64='B56@0:8^{CGColorSpace=}16{CGRect={CGPoint=dd}{CGSize=dd}}24'>
<arg declared_type='CGColorSpaceRef' index='0' name='colorSpace' type='^{CGColorSpace=}'/>
<arg declared_type='NSRect' index='1' name='bounds' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='shouldColorMatch' type='B8@0:4' type64='B16@0:8'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='textureColorSpace' type='^{CGColorSpace=}8@0:4' type64='^{CGColorSpace=}16@0:8'>
<retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
</method>
<method selector='textureFlipped' type='B8@0:4' type64='B16@0:8'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='textureMatrix' type='r^f8@0:4' type64='r^f16@0:8'>
<retval const='true' declared_type='GLfloat*' type='^f'/>
</method>
<method selector='textureName' type='I8@0:4' type64='I16@0:8'>
<retval declared_type='GLuint' type='I'/>
</method>
<method selector='texturePixelsHigh' type='I8@0:4' type64='Q16@0:8'>
<retval declared_type='NSUInteger' type='I' type64='Q'/>
</method>
<method selector='texturePixelsWide' type='I8@0:4' type64='Q16@0:8'>
<retval declared_type='NSUInteger' type='I' type64='Q'/>
</method>
<method selector='textureTarget' type='I8@0:4' type64='I16@0:8'>
<retval declared_type='GLenum' type='I'/>
</method>
<method selector='unbindTextureRepresentationFromCGLContext:textureUnit:' type='v16@0:4^{_CGLContextObject=}8I12' type64='v28@0:8^{_CGLContextObject=}16I24'>
<arg declared_type='CGLContextObj' index='0' name='cgl_ctx' type='^{_CGLContextObject=}'/>
<arg declared_type='GLenum' index='1' name='unit' type='I'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='unlockBufferRepresentation' type='v8@0:4' type64='v16@0:8'>
<retval declared_type='void' type='v'/>
</method>
<method selector='unlockTextureRepresentation' type='v8@0:4' type64='v16@0:8'>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='QCPlugInOutputImageProvider'>
<method selector='canRenderWithCGLContext:' type='B12@0:4^{_CGLContextObject=}8' type64='B24@0:8^{_CGLContextObject=}16'>
<arg declared_type='CGLContextObj' index='0' name='cgl_ctx' type='^{_CGLContextObject=}'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='copyRenderedTextureForCGLContext:pixelFormat:bounds:isFlipped:' type='I36@0:4^{_CGLContextObject=}8@12{_NSRect={_NSPoint=ff}{_NSSize=ff}}16^B32' type64='I72@0:8^{_CGLContextObject=}16@24{CGRect={CGPoint=dd}{CGSize=dd}}32^B64'>
<arg declared_type='CGLContextObj' index='0' name='cgl_ctx' type='^{_CGLContextObject=}'/>
<arg declared_type='NSString*' index='1' name='format' type='@'/>
<arg declared_type='NSRect' index='2' name='bounds' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type='BOOL*' index='3' name='flipped' type='^B'/>
<retval declared_type='GLuint' type='I'/>
</method>
<method selector='imageBounds' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}8@0:4' type64='{CGRect={CGPoint=dd}{CGSize=dd}}16@0:8'>
<retval declared_type='NSRect' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</method>
<method selector='imageColorSpace' type='^{CGColorSpace=}8@0:4' type64='^{CGColorSpace=}16@0:8'>
<retval declared_type='CGColorSpaceRef' type='^{CGColorSpace=}'/>
</method>
<method selector='releaseRenderedTexture:forCGLContext:' type='v16@0:4I8^{_CGLContextObject=}12' type64='v28@0:8I16^{_CGLContextObject=}20'>
<arg declared_type='GLuint' index='0' name='name' type='I'/>
<arg declared_type='CGLContextObj' index='1' name='cgl_ctx' type='^{_CGLContextObject=}'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='renderToBuffer:withBytesPerRow:pixelFormat:forBounds:' type='B36@0:4^v8I12@16{_NSRect={_NSPoint=ff}{_NSSize=ff}}20' type64='B72@0:8^v16Q24@32{CGRect={CGPoint=dd}{CGSize=dd}}40'>
<arg declared_type='void*' index='0' name='baseAddress' type='^v'/>
<arg declared_type='NSUInteger' index='1' name='rowBytes' type='I' type64='Q'/>
<arg declared_type='NSString*' index='2' name='format' type='@'/>
<arg declared_type='NSRect' index='3' name='bounds' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='renderWithCGLContext:forBounds:' type='B28@0:4^{_CGLContextObject=}8{_NSRect={_NSPoint=ff}{_NSSize=ff}}12' type64='B56@0:8^{_CGLContextObject=}16{CGRect={CGPoint=dd}{CGSize=dd}}24'>
<arg declared_type='CGLContextObj' index='0' name='cgl_ctx' type='^{_CGLContextObject=}'/>
<arg declared_type='NSRect' index='1' name='bounds' type='{_NSRect={_NSPoint=ff}{_NSSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='shouldColorMatch' type='B8@0:4' type64='B16@0:8'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='supportedBufferPixelFormats' type='@8@0:4' type64='@16@0:8'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='supportedRenderedTexturePixelFormats' type='@8@0:4' type64='@16@0:8'>
<retval declared_type='NSArray*' type='@'/>
</method>
</informal_protocol>
</signatures>
