<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/HIToolbox.framework'/>
<depends_on path='/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/NavigationServices.framework'/>
<depends_on path='/System/Library/Frameworks/Carbon.framework/Versions/A/Frameworks/CarbonSound.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/CoreAudio.framework'/>
<depends_on path='/System/Library/Frameworks/AudioToolbox.framework'/>
<depends_on path='/System/Library/Frameworks/AudioUnit.framework'/>
<depends_on path='/System/Library/Frameworks/Accelerate.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework'/>
<depends_on path='/System/Library/Frameworks/Security.framework'/>
<depends_on path='/System/Library/Frameworks/IOKit.framework'/>
<depends_on path='/System/Library/Frameworks/SystemConfiguration.framework'/>
<depends_on path='/System/Library/Frameworks/CoreData.framework'/>
<depends_on path='/System/Library/Frameworks/Foundation.framework'/>
<depends_on path='/System/Library/Frameworks/CFNetwork.framework'/>
<depends_on path='/System/Library/Frameworks/CoreGraphics.framework'/>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<struct name='ARGBColor' type='{ARGBColor=&quot;alpha&quot;S&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'>
<field declared_type='unsigned short' name='alpha' type='S'/>
<field declared_type='unsigned short' name='red' type='S'/>
<field declared_type='unsigned short' name='green' type='S'/>
<field declared_type='unsigned short' name='blue' type='S'/>
</struct>
<struct name='BandwidthManagementPrefsRecord' type='{BandwidthManagementPrefsRecord=&quot;overrideConnectionSpeedForBandwidth&quot;B}'>
<field declared_type='Boolean' name='overrideConnectionSpeedForBandwidth' type='B'/>
</struct>
<struct name='BooleanRangeRecord' type='{BooleanRangeRecord=&quot;maskValue&quot;l}'>
<field declared_type='long' name='maskValue' type='l'/>
</struct>
<struct name='CDSequenceDataSource' type='{CDSequenceDataSource=&quot;recordSize&quot;l&quot;next&quot;^v&quot;seqID&quot;i&quot;sourceID&quot;i&quot;sourceType&quot;I&quot;sourceInputNumber&quot;l&quot;dataPtr&quot;^v&quot;dataDescription&quot;^*&quot;changeSeed&quot;l&quot;transferProc&quot;^?&quot;transferRefcon&quot;^v&quot;dataSize&quot;l&quot;dataQueue&quot;^{QHdr}&quot;originalDataPtr&quot;^v&quot;originalDataSize&quot;l&quot;originalDataDescription&quot;^*&quot;originalDataDescriptionSeed&quot;l}'>
<field declared_type='long' name='recordSize' type='l'/>
<field declared_type='void*' name='next' type='^v'/>
<field declared_type='ImageSequence' name='seqID' type='l'/>
<field declared_type='ImageSequenceDataSource' name='sourceID' type='l'/>
<field declared_type='OSType' name='sourceType' type='L'/>
<field declared_type='long' name='sourceInputNumber' type='l'/>
<field declared_type='void*' name='dataPtr' type='^v'/>
<field declared_type='Handle' name='dataDescription' type='^*'/>
<field declared_type='long' name='changeSeed' type='l'/>
<field declared_type='ICMConvertDataFormatUPP' function_pointer='true' name='transferProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='void**' type='^^v'/>
<arg declared_type='long*' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</field>
<field declared_type='void*' name='transferRefcon' type='^v'/>
<field declared_type='long' name='dataSize' type='l'/>
<field declared_type='QHdrPtr' name='dataQueue' type='^{QHdr=s^{QElem}^{QElem}}'/>
<field declared_type='void*' name='originalDataPtr' type='^v'/>
<field declared_type='long' name='originalDataSize' type='l'/>
<field declared_type='Handle' name='originalDataDescription' type='^*'/>
<field declared_type='long' name='originalDataDescriptionSeed' type='l'/>
</struct>
<struct name='CDSequenceDataSourceQueueEntry' type='{CDSequenceDataSourceQueueEntry=&quot;nextBusy&quot;^v&quot;descSeed&quot;l&quot;dataDesc&quot;^*&quot;data&quot;^v&quot;dataSize&quot;l&quot;useCount&quot;l&quot;frameTime&quot;i&quot;frameDuration&quot;i&quot;timeScale&quot;i}'>
<field declared_type='void*' name='nextBusy' type='^v'/>
<field declared_type='long' name='descSeed' type='l'/>
<field declared_type='Handle' name='dataDesc' type='^*'/>
<field declared_type='void*' name='data' type='^v'/>
<field declared_type='long' name='dataSize' type='l'/>
<field declared_type='long' name='useCount' type='l'/>
<field declared_type='TimeValue' name='frameTime' type='l'/>
<field declared_type='TimeValue' name='frameDuration' type='l'/>
<field declared_type='TimeValue' name='timeScale' type='l'/>
</struct>
<struct name='ChunkOffsetAtom' type='{ChunkOffsetAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;chunkOffsetTable&quot;[1l]}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt32' name='numEntries' type='l'/>
<field declared_type='SInt32*' name='chunkOffsetTable' type='[1l]'/>
</struct>
<struct name='CleanApertureImageDescriptionExtension' type='{CleanApertureImageDescriptionExtension=&quot;cleanApertureWidthN&quot;I&quot;cleanApertureWidthD&quot;I&quot;cleanApertureHeightN&quot;I&quot;cleanApertureHeightD&quot;I&quot;horizOffN&quot;i&quot;horizOffD&quot;I&quot;vertOffN&quot;i&quot;vertOffD&quot;I}'>
<field declared_type='UInt32' name='cleanApertureWidthN' type='L'/>
<field declared_type='UInt32' name='cleanApertureWidthD' type='L'/>
<field declared_type='UInt32' name='cleanApertureHeightN' type='L'/>
<field declared_type='UInt32' name='cleanApertureHeightD' type='L'/>
<field declared_type='SInt32' name='horizOffN' type='l'/>
<field declared_type='UInt32' name='horizOffD' type='L'/>
<field declared_type='SInt32' name='vertOffN' type='l'/>
<field declared_type='UInt32' name='vertOffD' type='L'/>
</struct>
<struct name='ClippingAtom' type='{ClippingAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;aRgnClip&quot;{RgnAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;rgnSize&quot;s&quot;rgnBBox&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;data&quot;[1c]}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='RgnAtom' name='aRgnClip' type='{RgnAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;rgnSize&quot;s&quot;rgnBBox&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;data&quot;[1c]}'/>
</struct>
<struct name='CloneAtom' type='{CloneAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;cloneInfo&quot;{CloneRecord=&quot;flags&quot;i&quot;masterTrackID&quot;i}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='CloneRecord' name='cloneInfo' type='{CloneRecord=&quot;flags&quot;i&quot;masterTrackID&quot;i}'/>
</struct>
<struct name='CloneRecord' type='{CloneRecord=&quot;flags&quot;i&quot;masterTrackID&quot;i}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt32' name='masterTrackID' type='l'/>
</struct>
<struct name='CodecCapabilities' type='{CodecCapabilities=&quot;flags&quot;l&quot;wantedPixelSize&quot;s&quot;extendWidth&quot;s&quot;extendHeight&quot;s&quot;bandMin&quot;s&quot;bandInc&quot;s&quot;pad&quot;s&quot;time&quot;L&quot;flags2&quot;l}'>
<field declared_type='long' name='flags' type='l'/>
<field declared_type='short' name='wantedPixelSize' type='s'/>
<field declared_type='short' name='extendWidth' type='s'/>
<field declared_type='short' name='extendHeight' type='s'/>
<field declared_type='short' name='bandMin' type='s'/>
<field declared_type='short' name='bandInc' type='s'/>
<field declared_type='short' name='pad' type='s'/>
<field declared_type='unsigned long' name='time' type='L'/>
<field declared_type='long' name='flags2' type='l'/>
</struct>
<struct name='CodecCompressParams' type='{CodecCompressParams=&quot;sequenceID&quot;i&quot;imageDescription&quot;^^{ImageDescription}&quot;data&quot;*&quot;bufferSize&quot;l&quot;frameNumber&quot;l&quot;startLine&quot;l&quot;stopLine&quot;l&quot;conditionFlags&quot;l&quot;callerFlags&quot;S&quot;capabilities&quot;^{CodecCapabilities}&quot;progressProcRecord&quot;{ICMProgressProcRecord=&quot;progressProc&quot;^?&quot;progressRefCon&quot;l}&quot;completionProcRecord&quot;{ICMCompletionProcRecord=&quot;completionProc&quot;^?&quot;completionRefCon&quot;l}&quot;flushProcRecord&quot;{ICMFlushProcRecord=&quot;flushProc&quot;^?&quot;flushRefCon&quot;l}&quot;srcPixMap&quot;{PixMap=&quot;baseAddr&quot;*&quot;rowBytes&quot;s&quot;bounds&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;pmVersion&quot;s&quot;packType&quot;s&quot;packSize&quot;i&quot;hRes&quot;i&quot;vRes&quot;i&quot;pixelType&quot;s&quot;pixelSize&quot;s&quot;cmpCount&quot;s&quot;cmpSize&quot;s&quot;pixelFormat&quot;I&quot;pmTable&quot;^^{ColorTable}&quot;pmExt&quot;^v}&quot;prevPixMap&quot;{PixMap=&quot;baseAddr&quot;*&quot;rowBytes&quot;s&quot;bounds&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;pmVersion&quot;s&quot;packType&quot;s&quot;packSize&quot;i&quot;hRes&quot;i&quot;vRes&quot;i&quot;pixelType&quot;s&quot;pixelSize&quot;s&quot;cmpCount&quot;s&quot;cmpSize&quot;s&quot;pixelFormat&quot;I&quot;pmTable&quot;^^{ColorTable}&quot;pmExt&quot;^v}&quot;spatialQuality&quot;I&quot;temporalQuality&quot;I&quot;similarity&quot;i&quot;dataRateParams&quot;^{DataRateParams}&quot;reserved&quot;l&quot;majorSourceChangeSeed&quot;S&quot;minorSourceChangeSeed&quot;S&quot;sourceData&quot;^{CDSequenceDataSource}&quot;preferredPacketSizeInBytes&quot;l&quot;requestedBufferWidth&quot;l&quot;requestedBufferHeight&quot;l&quot;wantedSourcePixelType&quot;I&quot;compressedDataSize&quot;l&quot;taskWeight&quot;I&quot;taskName&quot;I}'>
<field declared_type='ImageSequence' name='sequenceID' type='l'/>
<field declared_type='ImageDescriptionHandle' name='imageDescription' type='^^{ImageDescription}'/>
<field declared_type='Ptr' name='data' type='*'/>
<field declared_type='long' name='bufferSize' type='l'/>
<field declared_type='long' name='frameNumber' type='l'/>
<field declared_type='long' name='startLine' type='l'/>
<field declared_type='long' name='stopLine' type='l'/>
<field declared_type='long' name='conditionFlags' type='l'/>
<field declared_type='CodecFlags' name='callerFlags' type='S'/>
<field declared_type='CodecCapabilities*' name='capabilities' type='^{CodecCapabilities=lssssssLl}'/>
<field declared_type='ICMProgressProcRecord' name='progressProcRecord' type='{ICMProgressProcRecord=&quot;progressProc&quot;^?&quot;progressRefCon&quot;l}'/>
<field declared_type='ICMCompletionProcRecord' name='completionProcRecord' type='{ICMCompletionProcRecord=&quot;completionProc&quot;^?&quot;completionRefCon&quot;l}'/>
<field declared_type='ICMFlushProcRecord' name='flushProcRecord' type='{ICMFlushProcRecord=&quot;flushProc&quot;^?&quot;flushRefCon&quot;l}'/>
<field declared_type='PixMap' name='srcPixMap' type='{PixMap=&quot;baseAddr&quot;*&quot;rowBytes&quot;s&quot;bounds&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;pmVersion&quot;s&quot;packType&quot;s&quot;packSize&quot;i&quot;hRes&quot;i&quot;vRes&quot;i&quot;pixelType&quot;s&quot;pixelSize&quot;s&quot;cmpCount&quot;s&quot;cmpSize&quot;s&quot;pixelFormat&quot;I&quot;pmTable&quot;^^{ColorTable}&quot;pmExt&quot;^v}'/>
<field declared_type='PixMap' name='prevPixMap' type='{PixMap=&quot;baseAddr&quot;*&quot;rowBytes&quot;s&quot;bounds&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;pmVersion&quot;s&quot;packType&quot;s&quot;packSize&quot;i&quot;hRes&quot;i&quot;vRes&quot;i&quot;pixelType&quot;s&quot;pixelSize&quot;s&quot;cmpCount&quot;s&quot;cmpSize&quot;s&quot;pixelFormat&quot;I&quot;pmTable&quot;^^{ColorTable}&quot;pmExt&quot;^v}'/>
<field declared_type='CodecQ' name='spatialQuality' type='L'/>
<field declared_type='CodecQ' name='temporalQuality' type='L'/>
<field declared_type='Fixed' name='similarity' type='l'/>
<field declared_type='DataRateParamsPtr' name='dataRateParams' type='^{DataRateParams=llllII}'/>
<field declared_type='long' name='reserved' type='l'/>
<field declared_type='UInt16' name='majorSourceChangeSeed' type='S'/>
<field declared_type='UInt16' name='minorSourceChangeSeed' type='S'/>
<field declared_type='CDSequenceDataSourcePtr' name='sourceData' type='^{CDSequenceDataSource=l^viiIl^v^*l^?^vl^{QHdr}^vl^*l}'/>
<field declared_type='long' name='preferredPacketSizeInBytes' type='l'/>
<field declared_type='long' name='requestedBufferWidth' type='l'/>
<field declared_type='long' name='requestedBufferHeight' type='l'/>
<field declared_type='OSType' name='wantedSourcePixelType' type='L'/>
<field declared_type='long' name='compressedDataSize' type='l'/>
<field declared_type='UInt32' name='taskWeight' type='L'/>
<field declared_type='OSType' name='taskName' type='L'/>
</struct>
<struct name='CodecDecompressParams' type='{CodecDecompressParams=&quot;sequenceID&quot;i&quot;imageDescription&quot;^^{ImageDescription}&quot;data&quot;*&quot;bufferSize&quot;l&quot;frameNumber&quot;l&quot;startLine&quot;l&quot;stopLine&quot;l&quot;conditionFlags&quot;l&quot;callerFlags&quot;S&quot;capabilities&quot;^{CodecCapabilities}&quot;progressProcRecord&quot;{ICMProgressProcRecord=&quot;progressProc&quot;^?&quot;progressRefCon&quot;l}&quot;completionProcRecord&quot;{ICMCompletionProcRecord=&quot;completionProc&quot;^?&quot;completionRefCon&quot;l}&quot;dataProcRecord&quot;{ICMDataProcRecord=&quot;dataProc&quot;^?&quot;dataRefCon&quot;l}&quot;port&quot;^{OpaqueGrafPtr}&quot;dstPixMap&quot;{PixMap=&quot;baseAddr&quot;*&quot;rowBytes&quot;s&quot;bounds&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;pmVersion&quot;s&quot;packType&quot;s&quot;packSize&quot;i&quot;hRes&quot;i&quot;vRes&quot;i&quot;pixelType&quot;s&quot;pixelSize&quot;s&quot;cmpCount&quot;s&quot;cmpSize&quot;s&quot;pixelFormat&quot;I&quot;pmTable&quot;^^{ColorTable}&quot;pmExt&quot;^v}&quot;maskBits&quot;^{BitMap}&quot;mattePixMap&quot;^{PixMap}&quot;srcRect&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;matrix&quot;^{MatrixRecord}&quot;accuracy&quot;I&quot;transferMode&quot;s&quot;frameTime&quot;^{ICMFrameTimeRecord}&quot;reserved&quot;[1l]&quot;matrixFlags&quot;c&quot;matrixType&quot;c&quot;dstRect&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;majorSourceChangeSeed&quot;S&quot;minorSourceChangeSeed&quot;S&quot;sourceData&quot;^{CDSequenceDataSource}&quot;maskRegion&quot;^{OpaqueRgnHandle}&quot;wantedDestinationPixelTypes&quot;^^I&quot;screenFloodMethod&quot;l&quot;screenFloodValue&quot;l&quot;preferredOffscreenPixelSize&quot;s&quot;syncFrameTime&quot;^{ICMFrameTimeInfo}&quot;needUpdateOnTimeChange&quot;B&quot;enableBlackLining&quot;B&quot;needUpdateOnSourceChange&quot;B&quot;pad&quot;B&quot;unused&quot;l&quot;finalDestinationPort&quot;^{OpaqueGrafPtr}&quot;requestedBufferWidth&quot;l&quot;requestedBufferHeight&quot;l&quot;displayableAreaOfRequestedBuffer&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;requestedSingleField&quot;B&quot;needUpdateOnNextIdle&quot;B&quot;pad2&quot;[2B]&quot;bufferGammaLevel&quot;i&quot;taskWeight&quot;I&quot;taskName&quot;I&quot;pad3&quot;B&quot;destinationBufferMemoryPreference&quot;C&quot;codecBufferMemoryPreference&quot;C&quot;onlyUseCodecIfItIsInUserPreferredCodecList&quot;B&quot;mediaContextID&quot;{QTUUID=&quot;data1&quot;I&quot;data2&quot;S&quot;data3&quot;S&quot;data4&quot;[8C]}&quot;deinterlaceRequest&quot;C&quot;deinterlaceAnswer&quot;C&quot;pad4&quot;[2C]&quot;reserved2&quot;l&quot;reserved3&quot;I&quot;reserved4&quot;l&quot;reserved5&quot;^v&quot;reserved6&quot;^v&quot;reserved7&quot;^v&quot;reserved8&quot;^v}'>
<field declared_type='ImageSequence' name='sequenceID' type='l'/>
<field declared_type='ImageDescriptionHandle' name='imageDescription' type='^^{ImageDescription}'/>
<field declared_type='Ptr' name='data' type='*'/>
<field declared_type='long' name='bufferSize' type='l'/>
<field declared_type='long' name='frameNumber' type='l'/>
<field declared_type='long' name='startLine' type='l'/>
<field declared_type='long' name='stopLine' type='l'/>
<field declared_type='long' name='conditionFlags' type='l'/>
<field declared_type='CodecFlags' name='callerFlags' type='S'/>
<field declared_type='CodecCapabilities*' name='capabilities' type='^{CodecCapabilities=lssssssLl}'/>
<field declared_type='ICMProgressProcRecord' name='progressProcRecord' type='{ICMProgressProcRecord=&quot;progressProc&quot;^?&quot;progressRefCon&quot;l}'/>
<field declared_type='ICMCompletionProcRecord' name='completionProcRecord' type='{ICMCompletionProcRecord=&quot;completionProc&quot;^?&quot;completionRefCon&quot;l}'/>
<field declared_type='ICMDataProcRecord' name='dataProcRecord' type='{ICMDataProcRecord=&quot;dataProc&quot;^?&quot;dataRefCon&quot;l}'/>
<field declared_type='CGrafPtr' name='port' type='^{OpaqueGrafPtr=}'/>
<field declared_type='PixMap' name='dstPixMap' type='{PixMap=&quot;baseAddr&quot;*&quot;rowBytes&quot;s&quot;bounds&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;pmVersion&quot;s&quot;packType&quot;s&quot;packSize&quot;i&quot;hRes&quot;i&quot;vRes&quot;i&quot;pixelType&quot;s&quot;pixelSize&quot;s&quot;cmpCount&quot;s&quot;cmpSize&quot;s&quot;pixelFormat&quot;I&quot;pmTable&quot;^^{ColorTable}&quot;pmExt&quot;^v}'/>
<field declared_type='BitMapPtr' name='maskBits' type='^{BitMap=*s{Rect=ssss}}'/>
<field declared_type='PixMapPtr' name='mattePixMap' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<field declared_type='Rect' name='srcRect' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field declared_type='MatrixRecord*' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<field declared_type='CodecQ' name='accuracy' type='L'/>
<field declared_type='short' name='transferMode' type='s'/>
<field declared_type='ICMFrameTimePtr' name='frameTime' type='^{ICMFrameTimeRecord={wide=Ii}l^vlilll{wide=Ii}lq}'/>
<field declared_type='long*' name='reserved' type='[1l]'/>
<field declared_type='SInt8' name='matrixFlags' type='c'/>
<field declared_type='SInt8' name='matrixType' type='c'/>
<field declared_type='Rect' name='dstRect' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field declared_type='UInt16' name='majorSourceChangeSeed' type='S'/>
<field declared_type='UInt16' name='minorSourceChangeSeed' type='S'/>
<field declared_type='CDSequenceDataSourcePtr' name='sourceData' type='^{CDSequenceDataSource=l^viiIl^v^*l^?^vl^{QHdr}^vl^*l}'/>
<field declared_type='RgnHandle' name='maskRegion' type='^{OpaqueRgnHandle=}'/>
<field declared_type='OSType**' name='wantedDestinationPixelTypes' type='^^I'/>
<field declared_type='long' name='screenFloodMethod' type='l'/>
<field declared_type='long' name='screenFloodValue' type='l'/>
<field declared_type='short' name='preferredOffscreenPixelSize' type='s'/>
<field declared_type='ICMFrameTimeInfoPtr' name='syncFrameTime' type='^{ICMFrameTimeInfo={wide=Ii}ll}'/>
<field declared_type='Boolean' name='needUpdateOnTimeChange' type='B'/>
<field declared_type='Boolean' name='enableBlackLining' type='B'/>
<field declared_type='Boolean' name='needUpdateOnSourceChange' type='B'/>
<field declared_type='Boolean' name='pad' type='B'/>
<field declared_type='long' name='unused' type='l'/>
<field declared_type='CGrafPtr' name='finalDestinationPort' type='^{OpaqueGrafPtr=}'/>
<field declared_type='long' name='requestedBufferWidth' type='l'/>
<field declared_type='long' name='requestedBufferHeight' type='l'/>
<field declared_type='Rect' name='displayableAreaOfRequestedBuffer' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field declared_type='Boolean' name='requestedSingleField' type='B'/>
<field declared_type='Boolean' name='needUpdateOnNextIdle' type='B'/>
<field declared_type='Boolean*' name='pad2' type='[2B]'/>
<field declared_type='Fixed' name='bufferGammaLevel' type='l'/>
<field declared_type='UInt32' name='taskWeight' type='L'/>
<field declared_type='OSType' name='taskName' type='L'/>
<field declared_type='Boolean' name='pad3' type='B'/>
<field declared_type='UInt8' name='destinationBufferMemoryPreference' type='C'/>
<field declared_type='UInt8' name='codecBufferMemoryPreference' type='C'/>
<field declared_type='Boolean' name='onlyUseCodecIfItIsInUserPreferredCodecList' type='B'/>
<field declared_type='QTMediaContextID' name='mediaContextID' type='{QTUUID=&quot;data1&quot;I&quot;data2&quot;S&quot;data3&quot;S&quot;data4&quot;[8C]}'/>
<field declared_type='UInt8' name='deinterlaceRequest' type='C'/>
<field declared_type='UInt8' name='deinterlaceAnswer' type='C'/>
<field declared_type='UInt8*' name='pad4' type='[2C]'/>
<field declared_type='long' name='reserved2' type='l'/>
<field declared_type='UInt32' name='reserved3' type='L'/>
<field declared_type='long' name='reserved4' type='l'/>
<field declared_type='void*' name='reserved5' type='^v'/>
<field declared_type='void*' name='reserved6' type='^v'/>
<field declared_type='void*' name='reserved7' type='^v'/>
<field declared_type='void*' name='reserved8' type='^v'/>
</struct>
<struct name='CodecInfo' type='{CodecInfo=&quot;typeName&quot;[32C]&quot;version&quot;s&quot;revisionLevel&quot;s&quot;vendor&quot;l&quot;decompressFlags&quot;l&quot;compressFlags&quot;l&quot;formatFlags&quot;l&quot;compressionAccuracy&quot;C&quot;decompressionAccuracy&quot;C&quot;compressionSpeed&quot;S&quot;decompressionSpeed&quot;S&quot;compressionLevel&quot;C&quot;resvd&quot;C&quot;minimumHeight&quot;s&quot;minimumWidth&quot;s&quot;decompressPipelineLatency&quot;s&quot;compressPipelineLatency&quot;s&quot;privateData&quot;l}'>
<field declared_type='Str31' name='typeName' type='[32C]'/>
<field declared_type='short' name='version' type='s'/>
<field declared_type='short' name='revisionLevel' type='s'/>
<field declared_type='long' name='vendor' type='l'/>
<field declared_type='long' name='decompressFlags' type='l'/>
<field declared_type='long' name='compressFlags' type='l'/>
<field declared_type='long' name='formatFlags' type='l'/>
<field declared_type='UInt8' name='compressionAccuracy' type='C'/>
<field declared_type='UInt8' name='decompressionAccuracy' type='C'/>
<field declared_type='unsigned short' name='compressionSpeed' type='S'/>
<field declared_type='unsigned short' name='decompressionSpeed' type='S'/>
<field declared_type='UInt8' name='compressionLevel' type='C'/>
<field declared_type='UInt8' name='resvd' type='C'/>
<field declared_type='short' name='minimumHeight' type='s'/>
<field declared_type='short' name='minimumWidth' type='s'/>
<field declared_type='short' name='decompressPipelineLatency' type='s'/>
<field declared_type='short' name='compressPipelineLatency' type='s'/>
<field declared_type='long' name='privateData' type='l'/>
</struct>
<struct name='CodecNameSpec' type='{CodecNameSpec=&quot;codec&quot;^{ComponentRecord}&quot;cType&quot;I&quot;typeName&quot;[32C]&quot;name&quot;^*}'>
<field declared_type='CodecComponent' name='codec' type='^{ComponentRecord=[1l]}'/>
<field declared_type='CodecType' name='cType' type='L'/>
<field declared_type='Str31' name='typeName' type='[32C]'/>
<field declared_type='Handle' name='name' type='^*'/>
</struct>
<struct name='CodecNameSpecList' type='{CodecNameSpecList=&quot;count&quot;s&quot;list&quot;[1{CodecNameSpec=&quot;codec&quot;^{ComponentRecord}&quot;cType&quot;I&quot;typeName&quot;[32C]&quot;name&quot;^*}]}'>
<field declared_type='short' name='count' type='s'/>
<field declared_type='CodecNameSpec*' name='list' type='[1{CodecNameSpec=&quot;codec&quot;^{ComponentRecord}&quot;cType&quot;I&quot;typeName&quot;[32C]&quot;name&quot;^*}]'/>
</struct>
<struct name='ComponentPreflightFlags' type='{ComponentPreflightFlags=&quot;flags&quot;l}'>
<field declared_type='long' name='flags' type='l'/>
</struct>
<struct name='ComponentPropertyInfo' type='{ComponentPropertyInfo=&quot;propClass&quot;I&quot;propID&quot;I&quot;propType&quot;I&quot;propSize&quot;I&quot;propFlags&quot;I}'>
<field declared_type='ComponentPropertyClass' name='propClass' type='L'/>
<field declared_type='ComponentPropertyID' name='propID' type='L'/>
<field declared_type='ComponentValueType' name='propType' type='L'/>
<field declared_type='ByteCount' name='propSize' type='L'/>
<field declared_type='UInt32' name='propFlags' type='L'/>
</struct>
<struct name='CompositionOffsetAtom' type='{CompositionOffsetAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;compositionOffsetTable&quot;[1{CompositionOffsetEntry=&quot;sampleCount&quot;i&quot;displayOffset&quot;i}]}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt32' name='numEntries' type='l'/>
<field declared_type='CompositionOffsetEntry*' name='compositionOffsetTable' type='[1{CompositionOffsetEntry=&quot;sampleCount&quot;i&quot;displayOffset&quot;i}]'/>
</struct>
<struct name='CompositionOffsetEntry' type='{CompositionOffsetEntry=&quot;sampleCount&quot;i&quot;displayOffset&quot;i}'>
<field declared_type='SInt32' name='sampleCount' type='l'/>
<field declared_type='TimeValue' name='displayOffset' type='l'/>
</struct>
<struct name='CompositionShiftLeastGreatestAtom' type='{CompositionShiftLeastGreatestAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;compositionOffsetToDTDDeltaShift&quot;i&quot;leastDecodeToDisplayDelta&quot;i&quot;greatestDecodeToDisplayDelta&quot;i&quot;displayStartTime&quot;i&quot;displayEndTime&quot;i}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt32' name='compositionOffsetToDTDDeltaShift' type='l'/>
<field declared_type='SInt32' name='leastDecodeToDisplayDelta' type='l'/>
<field declared_type='SInt32' name='greatestDecodeToDisplayDelta' type='l'/>
<field declared_type='SInt32' name='displayStartTime' type='l'/>
<field declared_type='SInt32' name='displayEndTime' type='l'/>
</struct>
<struct name='ConnectionSpeedPrefsRecord' type='{ConnectionSpeedPrefsRecord=&quot;connectionSpeed&quot;l}'>
<field declared_type='long' name='connectionSpeed' type='l'/>
</struct>
<struct name='ControlBehaviors' type='{ControlBehaviors=&quot;groupID&quot;i&quot;controlValue&quot;l&quot;customType&quot;i&quot;customID&quot;i}'>
<field declared_type='QTAtomID' name='groupID' type='l'/>
<field declared_type='long' name='controlValue' type='l'/>
<field declared_type='QTAtomType' name='customType' type='l'/>
<field declared_type='QTAtomID' name='customID' type='l'/>
</struct>
<struct name='DataHChokeAtomRecord' type='{DataHChokeAtomRecord=&quot;flags&quot;l&quot;param&quot;l}'>
<field declared_type='long' name='flags' type='l'/>
<field declared_type='long' name='param' type='l'/>
</struct>
<struct name='DataHScheduleRecord' type='{DataHScheduleRecord=&quot;timeNeededBy&quot;{TimeRecord=&quot;value&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;scale&quot;i&quot;base&quot;^{TimeBaseRecord}}&quot;extendedID&quot;l&quot;extendedVers&quot;l&quot;priority&quot;i}'>
<field declared_type='TimeRecord' name='timeNeededBy' type='{TimeRecord=&quot;value&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;scale&quot;i&quot;base&quot;^{TimeBaseRecord}}'/>
<field declared_type='long' name='extendedID' type='l'/>
<field declared_type='long' name='extendedVers' type='l'/>
<field declared_type='Fixed' name='priority' type='l'/>
</struct>
<struct name='DataHVolumeListRecord' type='{DataHVolumeListRecord=&quot;vRefNum&quot;s&quot;flags&quot;l}'>
<field declared_type='short' name='vRefNum' type='s'/>
<field declared_type='long' name='flags' type='l'/>
</struct>
<struct name='DataInfoAtom' type='{DataInfoAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;dataRef&quot;i}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='DataRefAtom' name='dataRef' type='l'/>
</struct>
<struct name='DataRateParams' type='{DataRateParams=&quot;dataRate&quot;l&quot;dataOverrun&quot;l&quot;frameDuration&quot;l&quot;keyFrameRate&quot;l&quot;minSpatialQuality&quot;I&quot;minTemporalQuality&quot;I}'>
<field declared_type='long' name='dataRate' type='l'/>
<field declared_type='long' name='dataOverrun' type='l'/>
<field declared_type='long' name='frameDuration' type='l'/>
<field declared_type='long' name='keyFrameRate' type='l'/>
<field declared_type='CodecQ' name='minSpatialQuality' type='L'/>
<field declared_type='CodecQ' name='minTemporalQuality' type='L'/>
</struct>
<struct name='DataReferenceRecord' type='{DataReferenceRecord=&quot;dataRefType&quot;I&quot;dataRef&quot;^*}'>
<field declared_type='OSType' name='dataRefType' type='L'/>
<field declared_type='Handle' name='dataRef' type='^*'/>
</struct>
<struct name='DigitizerInfo' type='{DigitizerInfo=&quot;vdigType&quot;s&quot;inputCapabilityFlags&quot;l&quot;outputCapabilityFlags&quot;l&quot;inputCurrentFlags&quot;l&quot;outputCurrentFlags&quot;l&quot;slot&quot;s&quot;gdh&quot;^^{GDevice}&quot;maskgdh&quot;^^{GDevice}&quot;minDestHeight&quot;s&quot;minDestWidth&quot;s&quot;maxDestHeight&quot;s&quot;maxDestWidth&quot;s&quot;blendLevels&quot;s&quot;reserved&quot;l}'>
<field declared_type='short' name='vdigType' type='s'/>
<field declared_type='long' name='inputCapabilityFlags' type='l'/>
<field declared_type='long' name='outputCapabilityFlags' type='l'/>
<field declared_type='long' name='inputCurrentFlags' type='l'/>
<field declared_type='long' name='outputCurrentFlags' type='l'/>
<field declared_type='short' name='slot' type='s'/>
<field declared_type='GDHandle' name='gdh' type='^^{GDevice}'/>
<field declared_type='GDHandle' name='maskgdh' type='^^{GDevice}'/>
<field declared_type='short' name='minDestHeight' type='s'/>
<field declared_type='short' name='minDestWidth' type='s'/>
<field declared_type='short' name='maxDestHeight' type='s'/>
<field declared_type='short' name='maxDestWidth' type='s'/>
<field declared_type='short' name='blendLevels' type='s'/>
<field declared_type='long' name='reserved' type='l'/>
</struct>
<struct name='DoubleRangeRecord' type='{DoubleRangeRecord=&quot;minValue&quot;d&quot;maxValue&quot;d&quot;scaleValue&quot;d&quot;precisionDigits&quot;l}'>
<field declared_type='QTFloatDouble' name='minValue' type='d'/>
<field declared_type='QTFloatDouble' name='maxValue' type='d'/>
<field declared_type='QTFloatDouble' name='scaleValue' type='d'/>
<field declared_type='long' name='precisionDigits' type='l'/>
</struct>
<struct name='EditListAtom' type='{EditListAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;editListTable&quot;[1{EditListType=&quot;trackDuration&quot;i&quot;mediaTime&quot;i&quot;mediaRate&quot;i}]}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt32' name='numEntries' type='l'/>
<field declared_type='EditListType*' name='editListTable' type='[1{EditListType=&quot;trackDuration&quot;i&quot;mediaTime&quot;i&quot;mediaRate&quot;i}]'/>
</struct>
<struct name='EditListType' type='{EditListType=&quot;trackDuration&quot;i&quot;mediaTime&quot;i&quot;mediaRate&quot;i}'>
<field declared_type='TimeValue' name='trackDuration' type='l'/>
<field declared_type='TimeValue' name='mediaTime' type='l'/>
<field declared_type='Fixed' name='mediaRate' type='l'/>
</struct>
<struct name='EditsAtom' type='{EditsAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;editList&quot;{EditListAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;editListTable&quot;[1{EditListType=&quot;trackDuration&quot;i&quot;mediaTime&quot;i&quot;mediaRate&quot;i}]}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='EditListAtom' name='editList' type='{EditListAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;editListTable&quot;[1{EditListType=&quot;trackDuration&quot;i&quot;mediaTime&quot;i&quot;mediaRate&quot;i}]}'/>
</struct>
<struct name='EffectSource' type='{EffectSource=&quot;effectType&quot;l&quot;data&quot;*&quot;source&quot;(SourceData=&quot;image&quot;^{CDSequenceDataSource}&quot;effect&quot;^{EffectSource})&quot;next&quot;^{EffectSource}&quot;lastTranslatedFrameTime&quot;i&quot;lastFrameDuration&quot;i&quot;lastFrameTimeScale&quot;i}'>
<field declared_type='long' name='effectType' type='l'/>
<field declared_type='Ptr' name='data' type='*'/>
<field declared_type='SourceData' name='source' type='(SourceData=&quot;image&quot;^{CDSequenceDataSource}&quot;effect&quot;^{EffectSource})'/>
<field declared_type='EffectSourcePtr' name='next' type='^{EffectSource=l*(SourceData=^{CDSequenceDataSource}^{EffectSource})^{EffectSource}iii}'/>
<field declared_type='TimeValue' name='lastTranslatedFrameTime' type='l'/>
<field declared_type='TimeValue' name='lastFrameDuration' type='l'/>
<field declared_type='TimeValue' name='lastFrameTimeScale' type='l'/>
</struct>
<struct name='EffectsFrameParams' type='{EffectsFrameParams=&quot;frameTime&quot;{ICMFrameTimeRecord_QT3=&quot;value&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;scale&quot;l&quot;base&quot;^v&quot;duration&quot;l&quot;rate&quot;i&quot;recordSize&quot;l&quot;frameNumber&quot;l&quot;flags&quot;l&quot;virtualStartTime&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;virtualDuration&quot;l}&quot;effectDuration&quot;l&quot;doAsync&quot;B&quot;pad&quot;[3C]&quot;source&quot;^{EffectSource}&quot;refCon&quot;^v}'>
<field declared_type='ICMFrameTimeRecord_QT3' name='frameTime' type='{ICMFrameTimeRecord_QT3=&quot;value&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;scale&quot;l&quot;base&quot;^v&quot;duration&quot;l&quot;rate&quot;i&quot;recordSize&quot;l&quot;frameNumber&quot;l&quot;flags&quot;l&quot;virtualStartTime&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;virtualDuration&quot;l}'/>
<field declared_type='long' name='effectDuration' type='l'/>
<field declared_type='Boolean' name='doAsync' type='B'/>
<field declared_type='unsigned char*' name='pad' type='[3C]'/>
<field declared_type='EffectSourcePtr' name='source' type='^{EffectSource=l*(SourceData=^{CDSequenceDataSource}^{EffectSource})^{EffectSource}iii}'/>
<field declared_type='void*' name='refCon' type='^v'/>
</struct>
<struct name='EnumListRecord' type='{EnumListRecord=&quot;enumCount&quot;l&quot;values&quot;[1{EnumValuePair=&quot;value&quot;l&quot;name&quot;[256C]}]}'>
<field declared_type='long' name='enumCount' type='l'/>
<field declared_type='EnumValuePair*' name='values' type='[1{EnumValuePair=&quot;value&quot;l&quot;name&quot;[256C]}]'/>
</struct>
<struct name='EnumRangeRecord' type='{EnumRangeRecord=&quot;enumID&quot;l}'>
<field declared_type='long' name='enumID' type='l'/>
</struct>
<struct name='EnumValuePair' type='{EnumValuePair=&quot;value&quot;l&quot;name&quot;[256C]}'>
<field declared_type='long' name='value' type='l'/>
<field declared_type='Str255' name='name' type='[256C]'/>
</struct>
<struct name='FieldInfoImageDescriptionExtension' type='{FieldInfoImageDescriptionExtension=&quot;fieldCount&quot;C&quot;fieldOrderings&quot;C}'>
<field declared_type='UInt8' name='fieldCount' type='C'/>
<field declared_type='UInt8' name='fieldOrderings' type='C'/>
</struct>
<struct name='FieldInfoImageDescriptionExtension2' type='{FieldInfoImageDescriptionExtension2=&quot;fields&quot;C&quot;detail&quot;C}'>
<field declared_type='UInt8' name='fields' type='C'/>
<field declared_type='UInt8' name='detail' type='C'/>
</struct>
<struct name='FileTypeAtom' type='{FileTypeAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;majorBrand&quot;i&quot;minorVersion&quot;i&quot;compatibleBrands&quot;[4l]}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='SInt32' name='majorBrand' type='l'/>
<field declared_type='SInt32' name='minorVersion' type='l'/>
<field declared_type='SInt32*' name='compatibleBrands' type='[4l]'/>
</struct>
<struct name='FixedRangeRecord' type='{FixedRangeRecord=&quot;minValue&quot;i&quot;maxValue&quot;i&quot;scaleValue&quot;i&quot;precisionDigits&quot;l}'>
<field declared_type='Fixed' name='minValue' type='l'/>
<field declared_type='Fixed' name='maxValue' type='l'/>
<field declared_type='Fixed' name='scaleValue' type='l'/>
<field declared_type='long' name='precisionDigits' type='l'/>
</struct>
<struct name='FlashDescription' type='{FlashDescription=&quot;descSize&quot;l&quot;dataFormat&quot;l&quot;resvd1&quot;l&quot;resvd2&quot;s&quot;dataRefIndex&quot;s&quot;version&quot;l&quot;decompressorType&quot;I&quot;flags&quot;l}'>
<field declared_type='long' name='descSize' type='l'/>
<field declared_type='long' name='dataFormat' type='l'/>
<field declared_type='long' name='resvd1' type='l'/>
<field declared_type='short' name='resvd2' type='s'/>
<field declared_type='short' name='dataRefIndex' type='s'/>
<field declared_type='long' name='version' type='l'/>
<field declared_type='OSType' name='decompressorType' type='L'/>
<field declared_type='long' name='flags' type='l'/>
</struct>
<struct name='GCInstrumentData' type='{GCInstrumentData=&quot;tone&quot;{ToneDescription=&quot;synthesizerType&quot;{BigEndianOSType=&quot;bigEndianValue&quot;I}&quot;synthesizerName&quot;[32C]&quot;instrumentName&quot;[32C]&quot;instrumentNumber&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}&quot;gmNumber&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}}&quot;knobCount&quot;l&quot;knob&quot;[1l]}'>
<field declared_type='ToneDescription' name='tone' type='{ToneDescription=&quot;synthesizerType&quot;{BigEndianOSType=&quot;bigEndianValue&quot;I}&quot;synthesizerName&quot;[32C]&quot;instrumentName&quot;[32C]&quot;instrumentNumber&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}&quot;gmNumber&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}}'/>
<field declared_type='long' name='knobCount' type='l'/>
<field declared_type='long*' name='knob' type='[1l]'/>
</struct>
<struct name='GCPart' type='{GCPart=&quot;hwInstrumentNumber&quot;l&quot;controller&quot;[128s]&quot;volume&quot;l&quot;polyphony&quot;l&quot;midiChannel&quot;l&quot;id&quot;{GCInstrumentData=&quot;tone&quot;{ToneDescription=&quot;synthesizerType&quot;{BigEndianOSType=&quot;bigEndianValue&quot;I}&quot;synthesizerName&quot;[32C]&quot;instrumentName&quot;[32C]&quot;instrumentNumber&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}&quot;gmNumber&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}}&quot;knobCount&quot;l&quot;knob&quot;[1l]}}'>
<field declared_type='long' name='hwInstrumentNumber' type='l'/>
<field declared_type='short*' name='controller' type='[128s]'/>
<field declared_type='long' name='volume' type='l'/>
<field declared_type='long' name='polyphony' type='l'/>
<field declared_type='long' name='midiChannel' type='l'/>
<field declared_type='GCInstrumentData' name='id' type='{GCInstrumentData=&quot;tone&quot;{ToneDescription=&quot;synthesizerType&quot;{BigEndianOSType=&quot;bigEndianValue&quot;I}&quot;synthesizerName&quot;[32C]&quot;instrumentName&quot;[32C]&quot;instrumentNumber&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}&quot;gmNumber&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}}&quot;knobCount&quot;l&quot;knob&quot;[1l]}'/>
</struct>
<struct name='GenericKnobDescription' type='{GenericKnobDescription=&quot;kd&quot;{KnobDescription=&quot;name&quot;[64C]&quot;lowValue&quot;l&quot;highValue&quot;l&quot;defaultValue&quot;l&quot;flags&quot;l&quot;knobID&quot;l}&quot;hw1&quot;l&quot;hw2&quot;l&quot;hw3&quot;l&quot;settingsID&quot;l}'>
<field declared_type='KnobDescription' name='kd' type='{KnobDescription=&quot;name&quot;[64C]&quot;lowValue&quot;l&quot;highValue&quot;l&quot;defaultValue&quot;l&quot;flags&quot;l&quot;knobID&quot;l}'/>
<field declared_type='long' name='hw1' type='l'/>
<field declared_type='long' name='hw2' type='l'/>
<field declared_type='long' name='hw3' type='l'/>
<field declared_type='long' name='settingsID' type='l'/>
</struct>
<struct name='GenericKnobDescriptionList' type='{GenericKnobDescriptionList=&quot;knobCount&quot;l&quot;knob&quot;[1{GenericKnobDescription=&quot;kd&quot;{KnobDescription=&quot;name&quot;[64C]&quot;lowValue&quot;l&quot;highValue&quot;l&quot;defaultValue&quot;l&quot;flags&quot;l&quot;knobID&quot;l}&quot;hw1&quot;l&quot;hw2&quot;l&quot;hw3&quot;l&quot;settingsID&quot;l}]}'>
<field declared_type='long' name='knobCount' type='l'/>
<field declared_type='GenericKnobDescription*' name='knob' type='[1{GenericKnobDescription=&quot;kd&quot;{KnobDescription=&quot;name&quot;[64C]&quot;lowValue&quot;l&quot;highValue&quot;l&quot;defaultValue&quot;l&quot;flags&quot;l&quot;knobID&quot;l}&quot;hw1&quot;l&quot;hw2&quot;l&quot;hw3&quot;l&quot;settingsID&quot;l}]'/>
</struct>
<struct name='GetMovieCompleteParams' type='{GetMovieCompleteParams=&quot;version&quot;s&quot;theMovie&quot;^^{MovieType}&quot;theTrack&quot;^^{TrackType}&quot;theMedia&quot;^^{MediaType}&quot;movieScale&quot;i&quot;mediaScale&quot;i&quot;movieDuration&quot;i&quot;trackDuration&quot;i&quot;mediaDuration&quot;i&quot;effectiveRate&quot;i&quot;timeBase&quot;^{TimeBaseRecord}&quot;volume&quot;s&quot;width&quot;i&quot;height&quot;i&quot;trackMovieMatrix&quot;{MatrixRecord=&quot;matrix&quot;[3[3l]]}&quot;moviePort&quot;^{OpaqueGrafPtr}&quot;movieGD&quot;^^{GDevice}&quot;trackMatte&quot;^^{PixMap}&quot;inputMap&quot;^*&quot;mediaContextID&quot;{QTUUID=&quot;data1&quot;I&quot;data2&quot;S&quot;data3&quot;S&quot;data4&quot;[8C]}}'>
<field declared_type='short' name='version' type='s'/>
<field declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<field declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<field declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<field declared_type='TimeScale' name='movieScale' type='l'/>
<field declared_type='TimeScale' name='mediaScale' type='l'/>
<field declared_type='TimeValue' name='movieDuration' type='l'/>
<field declared_type='TimeValue' name='trackDuration' type='l'/>
<field declared_type='TimeValue' name='mediaDuration' type='l'/>
<field declared_type='Fixed' name='effectiveRate' type='l'/>
<field declared_type='TimeBase' name='timeBase' type='^{TimeBaseRecord=}'/>
<field declared_type='short' name='volume' type='s'/>
<field declared_type='Fixed' name='width' type='l'/>
<field declared_type='Fixed' name='height' type='l'/>
<field declared_type='MatrixRecord' name='trackMovieMatrix' type='{MatrixRecord=&quot;matrix&quot;[3[3l]]}'/>
<field declared_type='CGrafPtr' name='moviePort' type='^{OpaqueGrafPtr=}'/>
<field declared_type='GDHandle' name='movieGD' type='^^{GDevice}'/>
<field declared_type='PixMapHandle' name='trackMatte' type='^^{PixMap}'/>
<field declared_type='QTAtomContainer' name='inputMap' type='^*'/>
<field declared_type='QTMediaContextID' name='mediaContextID' type='{QTUUID=&quot;data1&quot;I&quot;data2&quot;S&quot;data3&quot;S&quot;data4&quot;[8C]}'/>
</struct>
<struct name='GradientColorRecord' type='{GradientColorRecord=&quot;thisColor&quot;{ARGBColor=&quot;alpha&quot;S&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}&quot;endingPercentage&quot;i}'>
<field declared_type='ARGBColor' name='thisColor' type='{ARGBColor=&quot;alpha&quot;S&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'/>
<field declared_type='Fixed' name='endingPercentage' type='l'/>
</struct>
<struct name='HandleDataRefRecord' type='{HandleDataRefRecord=&quot;dataHndl&quot;^*}'>
<field declared_type='Handle' name='dataHndl' type='^*'/>
</struct>
<struct name='HandlerAtom' type='{HandlerAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;hInfo&quot;{PublicHandlerInfo=&quot;flags&quot;i&quot;componentType&quot;i&quot;componentSubType&quot;i&quot;componentManufacturer&quot;i&quot;componentFlags&quot;i&quot;componentFlagsMask&quot;i&quot;componentName&quot;[1c]}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='PublicHandlerInfo' name='hInfo' type='{PublicHandlerInfo=&quot;flags&quot;i&quot;componentType&quot;i&quot;componentSubType&quot;i&quot;componentManufacturer&quot;i&quot;componentFlags&quot;i&quot;componentFlagsMask&quot;i&quot;componentName&quot;[1c]}'/>
</struct>
<struct name='HiliteAtom' type='{HiliteAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;selStart&quot;i&quot;selEnd&quot;i}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='SInt32' name='selStart' type='l'/>
<field declared_type='SInt32' name='selEnd' type='l'/>
</struct>
<struct name='ICMAlignmentProcRecord' type='{ICMAlignmentProcRecord=&quot;alignmentProc&quot;^?&quot;alignmentRefCon&quot;l}'>
<field declared_type='ICMAlignmentUPP' function_pointer='true' name='alignmentProc' type='^?'>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='long' name='alignmentRefCon' type='l'/>
</struct>
<struct name='ICMCompletionProcRecord' type='{ICMCompletionProcRecord=&quot;completionProc&quot;^?&quot;completionRefCon&quot;l}'>
<field declared_type='ICMCompletionUPP' function_pointer='true' name='completionProc' type='^?'>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='long' name='completionRefCon' type='l'/>
</struct>
<struct name='ICMDataProcRecord' type='{ICMDataProcRecord=&quot;dataProc&quot;^?&quot;dataRefCon&quot;l}'>
<field declared_type='ICMDataUPP' function_pointer='true' name='dataProc' type='^?'>
<arg declared_type='Ptr*' type='^*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</field>
<field declared_type='long' name='dataRefCon' type='l'/>
</struct>
<struct name='ICMDataRateLimit' type='{ICMDataRateLimit=&quot;dataSize&quot;i&quot;dataDuration&quot;f}'>
<field declared_type='SInt32' name='dataSize' type='l'/>
<field declared_type='Float32' name='dataDuration' type='f'/>
</struct>
<struct name='ICMDecompressionTrackingCallbackRecord' type='{ICMDecompressionTrackingCallbackRecord=&quot;decompressionTrackingCallback&quot;^?&quot;decompressionTrackingRefCon&quot;^v}'>
<field declared_type='ICMDecompressionTrackingCallback' function_pointer='true' name='decompressionTrackingCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='OSStatus' type='l'/>
<arg declared_type='ICMDecompressionTrackingFlags' type='L'/>
<arg declared_type='CVPixelBufferRef' type='^{__CVBuffer=}'/>
<arg declared_type='TimeValue64' type='q'/>
<arg declared_type='TimeValue64' type='q'/>
<arg declared_type='ICMValidTimeFlags' type='L'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' name='decompressionTrackingRefCon' type='^v'/>
</struct>
<struct name='ICMEncodedFrameOutputRecord' type='{ICMEncodedFrameOutputRecord=&quot;encodedFrameOutputCallback&quot;^?&quot;encodedFrameOutputRefCon&quot;^v&quot;frameDataAllocator&quot;^{__CFAllocator}}'>
<field declared_type='ICMEncodedFrameOutputCallback' function_pointer='true' name='encodedFrameOutputCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ICMCompressionSessionRef' type='^{OpaqueICMCompressionSession=}'/>
<arg declared_type='OSStatus' type='l'/>
<arg declared_type='ICMEncodedFrameRef' type='^{OpaqueICMEncodedFrame=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l'/>
</field>
<field declared_type='void*' name='encodedFrameOutputRefCon' type='^v'/>
<field declared_type='CFAllocatorRef' name='frameDataAllocator' type='^{__CFAllocator=}'/>
</struct>
<struct name='ICMFlushProcRecord' type='{ICMFlushProcRecord=&quot;flushProc&quot;^?&quot;flushRefCon&quot;l}'>
<field declared_type='ICMFlushUPP' function_pointer='true' name='flushProc' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</field>
<field declared_type='long' name='flushRefCon' type='l'/>
</struct>
<struct name='ICMFrameTimeInfo' type='{ICMFrameTimeInfo=&quot;startTime&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;scale&quot;l&quot;duration&quot;l}'>
<field declared_type='wide' name='startTime' type='{wide=&quot;lo&quot;I&quot;hi&quot;i}'/>
<field declared_type='long' name='scale' type='l'/>
<field declared_type='long' name='duration' type='l'/>
</struct>
<struct name='ICMFrameTimeRecord' type='{ICMFrameTimeRecord=&quot;value&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;scale&quot;l&quot;base&quot;^v&quot;duration&quot;l&quot;rate&quot;i&quot;recordSize&quot;l&quot;frameNumber&quot;l&quot;flags&quot;l&quot;virtualStartTime&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;virtualDuration&quot;l&quot;decodeTime&quot;q}'>
<field declared_type='wide' name='value' type='{wide=&quot;lo&quot;I&quot;hi&quot;i}'/>
<field declared_type='long' name='scale' type='l'/>
<field declared_type='void*' name='base' type='^v'/>
<field declared_type='long' name='duration' type='l'/>
<field declared_type='Fixed' name='rate' type='l'/>
<field declared_type='long' name='recordSize' type='l'/>
<field declared_type='long' name='frameNumber' type='l'/>
<field declared_type='long' name='flags' type='l'/>
<field declared_type='wide' name='virtualStartTime' type='{wide=&quot;lo&quot;I&quot;hi&quot;i}'/>
<field declared_type='long' name='virtualDuration' type='l'/>
<field declared_type='TimeValue64' name='decodeTime' type='q'/>
</struct>
<struct name='ICMFrameTimeRecord_QT3' type='{ICMFrameTimeRecord_QT3=&quot;value&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;scale&quot;l&quot;base&quot;^v&quot;duration&quot;l&quot;rate&quot;i&quot;recordSize&quot;l&quot;frameNumber&quot;l&quot;flags&quot;l&quot;virtualStartTime&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;virtualDuration&quot;l}'>
<field declared_type='wide' name='value' type='{wide=&quot;lo&quot;I&quot;hi&quot;i}'/>
<field declared_type='long' name='scale' type='l'/>
<field declared_type='void*' name='base' type='^v'/>
<field declared_type='long' name='duration' type='l'/>
<field declared_type='Fixed' name='rate' type='l'/>
<field declared_type='long' name='recordSize' type='l'/>
<field declared_type='long' name='frameNumber' type='l'/>
<field declared_type='long' name='flags' type='l'/>
<field declared_type='wide' name='virtualStartTime' type='{wide=&quot;lo&quot;I&quot;hi&quot;i}'/>
<field declared_type='long' name='virtualDuration' type='l'/>
</struct>
<struct name='ICMMultiPassStorageCallbacks' type='{ICMMultiPassStorageCallbacks=&quot;version&quot;I&quot;storageRefCon&quot;^v&quot;setDataAtTimeStampCallback&quot;^?&quot;getTimeStampCallback&quot;^?&quot;copyDataAtTimeStampCallback&quot;^?&quot;releaseCallback&quot;^?}'>
<field declared_type='UInt32' name='version' type='L'/>
<field declared_type='void*' name='storageRefCon' type='^v'/>
<field declared_type='ICMMultiPassSetDataAtTimeStampCallback' function_pointer='true' name='setDataAtTimeStampCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='TimeValue64' type='q'/>
<arg declared_type='long' type='l'/>
<arg declared_type='CFDataRef' type='^{__CFData=}'/>
<retval declared_type='OSStatus' type='l'/>
</field>
<field declared_type='ICMMultiPassGetTimeStampCallback' function_pointer='true' name='getTimeStampCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='TimeValue64' type='q'/>
<arg declared_type='ICMMultiPassStorageStep' type='L'/>
<arg declared_type='TimeValue64*' type='^q'/>
<retval declared_type='OSStatus' type='l'/>
</field>
<field declared_type='ICMMultiPassCopyDataAtTimeStampCallback' function_pointer='true' name='copyDataAtTimeStampCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='TimeValue64' type='q'/>
<arg declared_type='long' type='l'/>
<arg declared_type='CFMutableDataRef*' type='^^{__CFData}'/>
<retval declared_type='OSStatus' type='l'/>
</field>
<field declared_type='ICMMultiPassReleaseCallback' function_pointer='true' name='releaseCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l'/>
</field>
</struct>
<struct name='ICMNonScheduledDisplayTime' type='{ICMNonScheduledDisplayTime=&quot;displayTime&quot;q&quot;displayTimeScale&quot;i&quot;flags&quot;I}'>
<field declared_type='TimeValue64' name='displayTime' type='q'/>
<field declared_type='TimeScale' name='displayTimeScale' type='l'/>
<field declared_type='UInt32' name='flags' type='L'/>
</struct>
<struct name='ICMPixelFormatInfo' type='{ICMPixelFormatInfo=&quot;size&quot;l&quot;formatFlags&quot;L&quot;bitsPerPixel&quot;[14s]&quot;defaultGammaLevel&quot;i&quot;horizontalSubsampling&quot;[14s]&quot;verticalSubsampling&quot;[14s]&quot;cmpCount&quot;s&quot;cmpSize&quot;s}'>
<field declared_type='long' name='size' type='l'/>
<field declared_type='unsigned long' name='formatFlags' type='L'/>
<field declared_type='short*' name='bitsPerPixel' type='[14s]'/>
<field declared_type='Fixed' name='defaultGammaLevel' type='l'/>
<field declared_type='short*' name='horizontalSubsampling' type='[14s]'/>
<field declared_type='short*' name='verticalSubsampling' type='[14s]'/>
<field declared_type='short' name='cmpCount' type='s'/>
<field declared_type='short' name='cmpSize' type='s'/>
</struct>
<struct name='ICMProgressProcRecord' type='{ICMProgressProcRecord=&quot;progressProc&quot;^?&quot;progressRefCon&quot;l}'>
<field declared_type='ICMProgressUPP' function_pointer='true' name='progressProc' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='Fixed' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</field>
<field declared_type='long' name='progressRefCon' type='l'/>
</struct>
<struct name='ICMSimpleBoundaryConditions' type='{ICMSimpleBoundaryConditions=&quot;moreFramesBeforeStart&quot;B&quot;moreFramesAfterEnd&quot;B}'>
<field declared_type='Boolean' name='moreFramesBeforeStart' type='B'/>
<field declared_type='Boolean' name='moreFramesAfterEnd' type='B'/>
</struct>
<struct name='ICMSourceTrackingCallbackRecord' type='{ICMSourceTrackingCallbackRecord=&quot;sourceTrackingCallback&quot;^?&quot;sourceTrackingRefCon&quot;^v}'>
<field declared_type='ICMSourceTrackingCallback' function_pointer='true' name='sourceTrackingCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ICMSourceTrackingFlags' type='L'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' name='sourceTrackingRefCon' type='^v'/>
</struct>
<struct name='ImageDescription' type='{ImageDescription=&quot;idSize&quot;i&quot;cType&quot;I&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s&quot;version&quot;s&quot;revisionLevel&quot;s&quot;vendor&quot;i&quot;temporalQuality&quot;I&quot;spatialQuality&quot;I&quot;width&quot;s&quot;height&quot;s&quot;hRes&quot;i&quot;vRes&quot;i&quot;dataSize&quot;i&quot;frameCount&quot;s&quot;name&quot;[32C]&quot;depth&quot;s&quot;clutID&quot;s}'>
<field declared_type='SInt32' name='idSize' type='l'/>
<field declared_type='CodecType' name='cType' type='L'/>
<field declared_type='SInt32' name='resvd1' type='l'/>
<field declared_type='SInt16' name='resvd2' type='s'/>
<field declared_type='SInt16' name='dataRefIndex' type='s'/>
<field declared_type='SInt16' name='version' type='s'/>
<field declared_type='SInt16' name='revisionLevel' type='s'/>
<field declared_type='SInt32' name='vendor' type='l'/>
<field declared_type='CodecQ' name='temporalQuality' type='L'/>
<field declared_type='CodecQ' name='spatialQuality' type='L'/>
<field declared_type='SInt16' name='width' type='s'/>
<field declared_type='SInt16' name='height' type='s'/>
<field declared_type='Fixed' name='hRes' type='l'/>
<field declared_type='Fixed' name='vRes' type='l'/>
<field declared_type='SInt32' name='dataSize' type='l'/>
<field declared_type='SInt16' name='frameCount' type='s'/>
<field declared_type='Str31' name='name' type='[32C]'/>
<field declared_type='SInt16' name='depth' type='s'/>
<field declared_type='SInt16' name='clutID' type='s'/>
</struct>
<struct name='ImageRangeRecord' type='{ImageRangeRecord=&quot;imageFlags&quot;l&quot;fileType&quot;I&quot;replacedAtoms&quot;l}'>
<field declared_type='long' name='imageFlags' type='l'/>
<field declared_type='OSType' name='fileType' type='L'/>
<field declared_type='long' name='replacedAtoms' type='l'/>
</struct>
<struct name='ImageSubCodecDecompressCapabilities' type='{ImageSubCodecDecompressCapabilities=&quot;recordSize&quot;l&quot;decompressRecordSize&quot;l&quot;canAsync&quot;B&quot;pad0&quot;C&quot;suggestedQueueSize&quot;S&quot;canProvideTrigger&quot;B&quot;subCodecFlushesScreen&quot;B&quot;subCodecCallsDrawBandComplete&quot;B&quot;pad2&quot;[1C]&quot;isChildCodec&quot;B&quot;reserved1&quot;C&quot;pad4&quot;[1C]&quot;subCodecIsMultiBufferAware&quot;B&quot;subCodecSupportsOutOfOrderDisplayTimes&quot;B&quot;subCodecSupportsScheduledBackwardsPlaybackWithDifferenceFrames&quot;B&quot;subCodecNeedsHelpReportingNonDisplayableFrames&quot;B&quot;baseCodecShouldCallDecodeBandForAllFrames&quot;B&quot;pad5&quot;[2C]&quot;subCodecSupportsDrawInDecodeOrder&quot;B&quot;subCodecSupportsDecodeSmoothing&quot;B&quot;pad6&quot;[4C]}'>
<field declared_type='long' name='recordSize' type='l'/>
<field declared_type='long' name='decompressRecordSize' type='l'/>
<field declared_type='Boolean' name='canAsync' type='B'/>
<field declared_type='UInt8' name='pad0' type='C'/>
<field declared_type='UInt16' name='suggestedQueueSize' type='S'/>
<field declared_type='Boolean' name='canProvideTrigger' type='B'/>
<field declared_type='Boolean' name='subCodecFlushesScreen' type='B'/>
<field declared_type='Boolean' name='subCodecCallsDrawBandComplete' type='B'/>
<field declared_type='UInt8*' name='pad2' type='[1C]'/>
<field declared_type='Boolean' name='isChildCodec' type='B'/>
<field declared_type='UInt8' name='reserved1' type='C'/>
<field declared_type='UInt8*' name='pad4' type='[1C]'/>
<field declared_type='Boolean' name='subCodecIsMultiBufferAware' type='B'/>
<field declared_type='Boolean' name='subCodecSupportsOutOfOrderDisplayTimes' type='B'/>
<field declared_type='Boolean' name='subCodecSupportsScheduledBackwardsPlaybackWithDifferenceFrames' type='B'/>
<field declared_type='Boolean' name='subCodecNeedsHelpReportingNonDisplayableFrames' type='B'/>
<field declared_type='Boolean' name='baseCodecShouldCallDecodeBandForAllFrames' type='B'/>
<field declared_type='UInt8*' name='pad5' type='[2C]'/>
<field declared_type='Boolean' name='subCodecSupportsDrawInDecodeOrder' type='B'/>
<field declared_type='Boolean' name='subCodecSupportsDecodeSmoothing' type='B'/>
<field declared_type='UInt8*' name='pad6' type='[4C]'/>
</struct>
<struct name='ImageSubCodecDecompressRecord' type='{ImageSubCodecDecompressRecord=&quot;baseAddr&quot;*&quot;rowBytes&quot;l&quot;codecData&quot;*&quot;progressProcRecord&quot;{ICMProgressProcRecord=&quot;progressProc&quot;^?&quot;progressRefCon&quot;l}&quot;dataProcRecord&quot;{ICMDataProcRecord=&quot;dataProc&quot;^?&quot;dataRefCon&quot;l}&quot;userDecompressRecord&quot;^v&quot;frameType&quot;C&quot;inhibitMP&quot;B&quot;pad&quot;[2C]&quot;priv&quot;[2l]&quot;drawBandCompleteUPP&quot;^?&quot;drawBandCompleteRefCon&quot;^v&quot;reserved1&quot;^v&quot;reserved2&quot;l&quot;reserved3&quot;l}'>
<field declared_type='Ptr' name='baseAddr' type='*'/>
<field declared_type='long' name='rowBytes' type='l'/>
<field declared_type='Ptr' name='codecData' type='*'/>
<field declared_type='ICMProgressProcRecord' name='progressProcRecord' type='{ICMProgressProcRecord=&quot;progressProc&quot;^?&quot;progressRefCon&quot;l}'/>
<field declared_type='ICMDataProcRecord' name='dataProcRecord' type='{ICMDataProcRecord=&quot;dataProc&quot;^?&quot;dataRefCon&quot;l}'/>
<field declared_type='void*' name='userDecompressRecord' type='^v'/>
<field declared_type='UInt8' name='frameType' type='C'/>
<field declared_type='Boolean' name='inhibitMP' type='B'/>
<field declared_type='UInt8*' name='pad' type='[2C]'/>
<field declared_type='long*' name='priv' type='[2l]'/>
<field declared_type='ImageCodecDrawBandCompleteUPP' function_pointer='true' name='drawBandCompleteUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ComponentResult' type='l'/>
<arg declared_type='UInt32' type='L'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' name='drawBandCompleteRefCon' type='^v'/>
<field declared_type='void*' name='reserved1' type='^v'/>
<field declared_type='long' name='reserved2' type='l'/>
<field declared_type='long' name='reserved3' type='l'/>
</struct>
<struct name='InstKnobList' type='{InstKnobList=&quot;knobCount&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}&quot;knobFlags&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}&quot;knob&quot;[1{InstKnobRec=&quot;number&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}&quot;value&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}}]}'>
<field declared_type='BigEndianLong' name='knobCount' type='{BigEndianLong=&quot;bigEndianValue&quot;l}'/>
<field declared_type='BigEndianLong' name='knobFlags' type='{BigEndianLong=&quot;bigEndianValue&quot;l}'/>
<field declared_type='InstKnobRec*' name='knob' type='[1{InstKnobRec=&quot;number&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}&quot;value&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}}]'/>
</struct>
<struct name='InstKnobRec' type='{InstKnobRec=&quot;number&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}&quot;value&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}}'>
<field declared_type='BigEndianLong' name='number' type='{BigEndianLong=&quot;bigEndianValue&quot;l}'/>
<field declared_type='BigEndianLong' name='value' type='{BigEndianLong=&quot;bigEndianValue&quot;l}'/>
</struct>
<struct name='InstLibDescRec' type='{InstLibDescRec=&quot;libIDName&quot;[32C]}'>
<field declared_type='Str31' name='libIDName' type='[32C]'/>
</struct>
<struct name='InstSampleDescRec' type='{InstSampleDescRec=&quot;dataFormat&quot;{BigEndianOSType=&quot;bigEndianValue&quot;I}&quot;numChannels&quot;{BigEndianShort=&quot;bigEndianValue&quot;s}&quot;sampleSize&quot;{BigEndianShort=&quot;bigEndianValue&quot;s}&quot;sampleRate&quot;{BigEndianUnsignedFixed=&quot;bigEndianValue&quot;I}&quot;sampleDataID&quot;{BigEndianShort=&quot;bigEndianValue&quot;s}&quot;offset&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}&quot;numSamples&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}&quot;loopType&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}&quot;loopStart&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}&quot;loopEnd&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}&quot;pitchNormal&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}&quot;pitchLow&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}&quot;pitchHigh&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}}'>
<field declared_type='BigEndianOSType' name='dataFormat' type='{BigEndianOSType=&quot;bigEndianValue&quot;I}'/>
<field declared_type='BigEndianShort' name='numChannels' type='{BigEndianShort=&quot;bigEndianValue&quot;s}'/>
<field declared_type='BigEndianShort' name='sampleSize' type='{BigEndianShort=&quot;bigEndianValue&quot;s}'/>
<field declared_type='BigEndianUnsignedFixed' name='sampleRate' type='{BigEndianUnsignedFixed=&quot;bigEndianValue&quot;I}'/>
<field declared_type='BigEndianShort' name='sampleDataID' type='{BigEndianShort=&quot;bigEndianValue&quot;s}'/>
<field declared_type='BigEndianLong' name='offset' type='{BigEndianLong=&quot;bigEndianValue&quot;l}'/>
<field declared_type='BigEndianLong' name='numSamples' type='{BigEndianLong=&quot;bigEndianValue&quot;l}'/>
<field declared_type='BigEndianLong' name='loopType' type='{BigEndianLong=&quot;bigEndianValue&quot;l}'/>
<field declared_type='BigEndianLong' name='loopStart' type='{BigEndianLong=&quot;bigEndianValue&quot;l}'/>
<field declared_type='BigEndianLong' name='loopEnd' type='{BigEndianLong=&quot;bigEndianValue&quot;l}'/>
<field declared_type='BigEndianLong' name='pitchNormal' type='{BigEndianLong=&quot;bigEndianValue&quot;l}'/>
<field declared_type='BigEndianLong' name='pitchLow' type='{BigEndianLong=&quot;bigEndianValue&quot;l}'/>
<field declared_type='BigEndianLong' name='pitchHigh' type='{BigEndianLong=&quot;bigEndianValue&quot;l}'/>
</struct>
<struct name='InstrumentAboutInfo' type='{InstrumentAboutInfo=&quot;p&quot;^^{Picture}&quot;author&quot;[256C]&quot;copyright&quot;[256C]&quot;other&quot;[256C]}'>
<field declared_type='PicHandle' name='p' type='^^{Picture}'/>
<field declared_type='Str255' name='author' type='[256C]'/>
<field declared_type='Str255' name='copyright' type='[256C]'/>
<field declared_type='Str255' name='other' type='[256C]'/>
</struct>
<struct name='InstrumentInfoList' type='{InstrumentInfoList=&quot;recordCount&quot;l&quot;toneNames&quot;^*&quot;itxtNames&quot;^*&quot;info&quot;[1{InstrumentInfoRecord=&quot;instrumentNumber&quot;l&quot;flags&quot;l&quot;toneNameIndex&quot;l&quot;itxtNameAtomID&quot;l}]}'>
<field declared_type='long' name='recordCount' type='l'/>
<field declared_type='Handle' name='toneNames' type='^*'/>
<field declared_type='QTAtomContainer' name='itxtNames' type='^*'/>
<field declared_type='InstrumentInfoRecord*' name='info' type='[1{InstrumentInfoRecord=&quot;instrumentNumber&quot;l&quot;flags&quot;l&quot;toneNameIndex&quot;l&quot;itxtNameAtomID&quot;l}]'/>
</struct>
<struct name='InstrumentInfoRecord' type='{InstrumentInfoRecord=&quot;instrumentNumber&quot;l&quot;flags&quot;l&quot;toneNameIndex&quot;l&quot;itxtNameAtomID&quot;l}'>
<field declared_type='long' name='instrumentNumber' type='l'/>
<field declared_type='long' name='flags' type='l'/>
<field declared_type='long' name='toneNameIndex' type='l'/>
<field declared_type='long' name='itxtNameAtomID' type='l'/>
</struct>
<struct name='KaraokeAtom' type='{KaraokeAtom=&quot;numEntries&quot;i&quot;karaokeEntries&quot;[1{KaraokeRec=&quot;timeVal&quot;i&quot;beginHilite&quot;s&quot;endHilite&quot;s}]}'>
<field declared_type='SInt32' name='numEntries' type='l'/>
<field declared_type='KaraokeRec*' name='karaokeEntries' type='[1{KaraokeRec=&quot;timeVal&quot;i&quot;beginHilite&quot;s&quot;endHilite&quot;s}]'/>
</struct>
<struct name='KaraokeRec' type='{KaraokeRec=&quot;timeVal&quot;i&quot;beginHilite&quot;s&quot;endHilite&quot;s}'>
<field declared_type='TimeValue' name='timeVal' type='l'/>
<field declared_type='SInt16' name='beginHilite' type='s'/>
<field declared_type='SInt16' name='endHilite' type='s'/>
</struct>
<struct name='KnobDescription' type='{KnobDescription=&quot;name&quot;[64C]&quot;lowValue&quot;l&quot;highValue&quot;l&quot;defaultValue&quot;l&quot;flags&quot;l&quot;knobID&quot;l}'>
<field declared_type='Str63' name='name' type='[64C]'/>
<field declared_type='long' name='lowValue' type='l'/>
<field declared_type='long' name='highValue' type='l'/>
<field declared_type='long' name='defaultValue' type='l'/>
<field declared_type='long' name='flags' type='l'/>
<field declared_type='long' name='knobID' type='l'/>
</struct>
<struct name='LongRangeRecord' type='{LongRangeRecord=&quot;minValue&quot;l&quot;maxValue&quot;l&quot;scaleValue&quot;l&quot;precisionDigits&quot;l}'>
<field declared_type='long' name='minValue' type='l'/>
<field declared_type='long' name='maxValue' type='l'/>
<field declared_type='long' name='scaleValue' type='l'/>
<field declared_type='long' name='precisionDigits' type='l'/>
</struct>
<struct name='MHInfoEncodedFrameRateRecord' type='{MHInfoEncodedFrameRateRecord=&quot;encodedFrameRate&quot;i}'>
<field declared_type='Fixed' name='encodedFrameRate' type='l'/>
</struct>
<struct name='MatrixRecord' type='{MatrixRecord=&quot;matrix&quot;[3[3l]]}'>
<field declared_type='Fixed**' name='matrix' type='[3[3l]]'/>
</struct>
<struct name='MatteAtom' type='{MatteAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;aCompressedMatte&quot;{MatteCompressedAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;matteImageDescription&quot;{ImageDescription=&quot;idSize&quot;i&quot;cType&quot;I&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s&quot;version&quot;s&quot;revisionLevel&quot;s&quot;vendor&quot;i&quot;temporalQuality&quot;I&quot;spatialQuality&quot;I&quot;width&quot;s&quot;height&quot;s&quot;hRes&quot;i&quot;vRes&quot;i&quot;dataSize&quot;i&quot;frameCount&quot;s&quot;name&quot;[32C]&quot;depth&quot;s&quot;clutID&quot;s}&quot;matteData&quot;[1c]}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='MatteCompressedAtom' name='aCompressedMatte' type='{MatteCompressedAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;matteImageDescription&quot;{ImageDescription=&quot;idSize&quot;i&quot;cType&quot;I&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s&quot;version&quot;s&quot;revisionLevel&quot;s&quot;vendor&quot;i&quot;temporalQuality&quot;I&quot;spatialQuality&quot;I&quot;width&quot;s&quot;height&quot;s&quot;hRes&quot;i&quot;vRes&quot;i&quot;dataSize&quot;i&quot;frameCount&quot;s&quot;name&quot;[32C]&quot;depth&quot;s&quot;clutID&quot;s}&quot;matteData&quot;[1c]}'/>
</struct>
<struct name='MatteCompressedAtom' type='{MatteCompressedAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;matteImageDescription&quot;{ImageDescription=&quot;idSize&quot;i&quot;cType&quot;I&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s&quot;version&quot;s&quot;revisionLevel&quot;s&quot;vendor&quot;i&quot;temporalQuality&quot;I&quot;spatialQuality&quot;I&quot;width&quot;s&quot;height&quot;s&quot;hRes&quot;i&quot;vRes&quot;i&quot;dataSize&quot;i&quot;frameCount&quot;s&quot;name&quot;[32C]&quot;depth&quot;s&quot;clutID&quot;s}&quot;matteData&quot;[1c]}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='ImageDescription' name='matteImageDescription' type='{ImageDescription=&quot;idSize&quot;i&quot;cType&quot;I&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s&quot;version&quot;s&quot;revisionLevel&quot;s&quot;vendor&quot;i&quot;temporalQuality&quot;I&quot;spatialQuality&quot;I&quot;width&quot;s&quot;height&quot;s&quot;hRes&quot;i&quot;vRes&quot;i&quot;dataSize&quot;i&quot;frameCount&quot;s&quot;name&quot;[32C]&quot;depth&quot;s&quot;clutID&quot;s}'/>
<field declared_type='char*' name='matteData' type='[1c]'/>
</struct>
<struct name='MediaDirectory' type='{MediaDirectory=&quot;size&quot;i&quot;atomType&quot;i&quot;mediaHeader&quot;{MediaHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{MediaHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;timeScale&quot;i&quot;duration&quot;i&quot;language&quot;s&quot;quality&quot;s}}&quot;mediaHandler&quot;{HandlerAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;hInfo&quot;{PublicHandlerInfo=&quot;flags&quot;i&quot;componentType&quot;i&quot;componentSubType&quot;i&quot;componentManufacturer&quot;i&quot;componentFlags&quot;i&quot;componentFlagsMask&quot;i&quot;componentName&quot;[1c]}}&quot;mediaInfo&quot;{MediaInfo=&quot;size&quot;i&quot;atomType&quot;i}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='MediaHeaderAtom' name='mediaHeader' type='{MediaHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{MediaHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;timeScale&quot;i&quot;duration&quot;i&quot;language&quot;s&quot;quality&quot;s}}'/>
<field declared_type='HandlerAtom' name='mediaHandler' type='{HandlerAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;hInfo&quot;{PublicHandlerInfo=&quot;flags&quot;i&quot;componentType&quot;i&quot;componentSubType&quot;i&quot;componentManufacturer&quot;i&quot;componentFlags&quot;i&quot;componentFlagsMask&quot;i&quot;componentName&quot;[1c]}}'/>
<field declared_type='MediaInfo' name='mediaInfo' type='{MediaInfo=&quot;size&quot;i&quot;atomType&quot;i}'/>
</struct>
<struct name='MediaEQSpectrumBandsRecord' type='{MediaEQSpectrumBandsRecord=&quot;count&quot;s&quot;frequency&quot;^I}'>
<field declared_type='short' name='count' type='s'/>
<field declared_type='UnsignedFixedPtr' name='frequency' type='^I'/>
</struct>
<struct name='MediaHeader' type='{MediaHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;timeScale&quot;i&quot;duration&quot;i&quot;language&quot;s&quot;quality&quot;s}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt32' name='creationTime' type='l'/>
<field declared_type='SInt32' name='modificationTime' type='l'/>
<field declared_type='TimeValue' name='timeScale' type='l'/>
<field declared_type='TimeValue' name='duration' type='l'/>
<field declared_type='SInt16' name='language' type='s'/>
<field declared_type='SInt16' name='quality' type='s'/>
</struct>
<struct name='MediaHeaderAtom' type='{MediaHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{MediaHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;timeScale&quot;i&quot;duration&quot;i&quot;language&quot;s&quot;quality&quot;s}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='MediaHeader' name='header' type='{MediaHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;timeScale&quot;i&quot;duration&quot;i&quot;language&quot;s&quot;quality&quot;s}'/>
</struct>
<struct name='MediaInfo' type='{MediaInfo=&quot;size&quot;i&quot;atomType&quot;i}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
</struct>
<struct name='MediaPacketizerInfo' type='{MediaPacketizerInfo=&quot;mediaType&quot;I&quot;dataFormat&quot;I&quot;vendor&quot;I&quot;capabilityFlags&quot;I&quot;canPackMatrixType&quot;C&quot;reserved1&quot;C&quot;reserved2&quot;C&quot;reserved3&quot;C&quot;characteristicCount&quot;l&quot;characteristic&quot;[1{RTPPayloadCharacteristic=&quot;tag&quot;I&quot;value&quot;l}]}'>
<field declared_type='OSType' name='mediaType' type='L'/>
<field declared_type='OSType' name='dataFormat' type='L'/>
<field declared_type='OSType' name='vendor' type='L'/>
<field declared_type='UInt32' name='capabilityFlags' type='L'/>
<field declared_type='UInt8' name='canPackMatrixType' type='C'/>
<field declared_type='UInt8' name='reserved1' type='C'/>
<field declared_type='UInt8' name='reserved2' type='C'/>
<field declared_type='UInt8' name='reserved3' type='C'/>
<field declared_type='long' name='characteristicCount' type='l'/>
<field declared_type='RTPPayloadCharacteristic*' name='characteristic' type='[1{RTPPayloadCharacteristic=&quot;tag&quot;I&quot;value&quot;l}]'/>
</struct>
<struct name='MediaPacketizerRequirements' type='{MediaPacketizerRequirements=&quot;mediaType&quot;I&quot;dataFormat&quot;I&quot;capabilityFlags&quot;I&quot;canPackMatrixType&quot;C&quot;reserved1&quot;C&quot;reserved2&quot;C&quot;reserved3&quot;C}'>
<field declared_type='OSType' name='mediaType' type='L'/>
<field declared_type='OSType' name='dataFormat' type='L'/>
<field declared_type='UInt32' name='capabilityFlags' type='L'/>
<field declared_type='UInt8' name='canPackMatrixType' type='C'/>
<field declared_type='UInt8' name='reserved1' type='C'/>
<field declared_type='UInt8' name='reserved2' type='C'/>
<field declared_type='UInt8' name='reserved3' type='C'/>
</struct>
<struct name='ModifierTrackGraphicsModeRecord' type='{ModifierTrackGraphicsModeRecord=&quot;graphicsMode&quot;l&quot;opColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}}'>
<field declared_type='long' name='graphicsMode' type='l'/>
<field declared_type='RGBColor' name='opColor' type='{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'/>
</struct>
<struct name='MotionJPEGApp1Marker' type='{MotionJPEGApp1Marker=&quot;unused&quot;l&quot;tag&quot;l&quot;fieldSize&quot;l&quot;paddedFieldSize&quot;l&quot;offsetToNextField&quot;l&quot;qTableOffset&quot;l&quot;huffmanTableOffset&quot;l&quot;sofOffset&quot;l&quot;sosOffset&quot;l&quot;soiOffset&quot;l}'>
<field declared_type='long' name='unused' type='l'/>
<field declared_type='long' name='tag' type='l'/>
<field declared_type='long' name='fieldSize' type='l'/>
<field declared_type='long' name='paddedFieldSize' type='l'/>
<field declared_type='long' name='offsetToNextField' type='l'/>
<field declared_type='long' name='qTableOffset' type='l'/>
<field declared_type='long' name='huffmanTableOffset' type='l'/>
<field declared_type='long' name='sofOffset' type='l'/>
<field declared_type='long' name='sosOffset' type='l'/>
<field declared_type='long' name='soiOffset' type='l'/>
</struct>
<struct name='MovieDirectory' type='{MovieDirectory=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{MovieHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{MovieHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;timeScale&quot;i&quot;duration&quot;i&quot;preferredRate&quot;i&quot;preferredVolume&quot;s&quot;reserved1&quot;s&quot;preferredLong1&quot;i&quot;preferredLong2&quot;i&quot;matrix&quot;{MatrixRecord=&quot;matrix&quot;[3[3l]]}&quot;previewTime&quot;i&quot;previewDuration&quot;i&quot;posterTime&quot;i&quot;selectionTime&quot;i&quot;selectionDuration&quot;i&quot;currentTime&quot;i&quot;nextTrackID&quot;i}}&quot;movieClip&quot;{ClippingAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;aRgnClip&quot;{RgnAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;rgnSize&quot;s&quot;rgnBBox&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;data&quot;[1c]}}&quot;track&quot;[1{TrackDirectoryEntry=&quot;trackDirectory&quot;{TrackDirectory=&quot;size&quot;i&quot;atomType&quot;i&quot;trackHeader&quot;{TrackHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{TrackHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;trackID&quot;i&quot;reserved1&quot;i&quot;duration&quot;i&quot;reserved2&quot;i&quot;reserved3&quot;i&quot;layer&quot;s&quot;alternateGroup&quot;s&quot;volume&quot;s&quot;reserved4&quot;s&quot;matrix&quot;{MatrixRecord=&quot;matrix&quot;[3[3l]]}&quot;trackWidth&quot;i&quot;trackHeight&quot;i}}&quot;trackClip&quot;{ClippingAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;aRgnClip&quot;{RgnAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;rgnSize&quot;s&quot;rgnBBox&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;data&quot;[1c]}}&quot;edits&quot;{EditsAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;editList&quot;{EditListAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;editListTable&quot;[1{EditListType=&quot;trackDuration&quot;i&quot;mediaTime&quot;i&quot;mediaRate&quot;i}]}}&quot;media&quot;{MediaDirectory=&quot;size&quot;i&quot;atomType&quot;i&quot;mediaHeader&quot;{MediaHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{MediaHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;timeScale&quot;i&quot;duration&quot;i&quot;language&quot;s&quot;quality&quot;s}}&quot;mediaHandler&quot;{HandlerAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;hInfo&quot;{PublicHandlerInfo=&quot;flags&quot;i&quot;componentType&quot;i&quot;componentSubType&quot;i&quot;componentManufacturer&quot;i&quot;componentFlags&quot;i&quot;componentFlagsMask&quot;i&quot;componentName&quot;[1c]}}&quot;mediaInfo&quot;{MediaInfo=&quot;size&quot;i&quot;atomType&quot;i}}&quot;userData&quot;{UserDataAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;userData&quot;[1{MoviesUserData=&quot;size&quot;i&quot;udType&quot;i&quot;data&quot;[1c]}]}}}]&quot;userData&quot;{UserDataAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;userData&quot;[1{MoviesUserData=&quot;size&quot;i&quot;udType&quot;i&quot;data&quot;[1c]}]}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='MovieHeaderAtom' name='header' type='{MovieHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{MovieHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;timeScale&quot;i&quot;duration&quot;i&quot;preferredRate&quot;i&quot;preferredVolume&quot;s&quot;reserved1&quot;s&quot;preferredLong1&quot;i&quot;preferredLong2&quot;i&quot;matrix&quot;{MatrixRecord=&quot;matrix&quot;[3[3l]]}&quot;previewTime&quot;i&quot;previewDuration&quot;i&quot;posterTime&quot;i&quot;selectionTime&quot;i&quot;selectionDuration&quot;i&quot;currentTime&quot;i&quot;nextTrackID&quot;i}}'/>
<field declared_type='ClippingAtom' name='movieClip' type='{ClippingAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;aRgnClip&quot;{RgnAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;rgnSize&quot;s&quot;rgnBBox&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;data&quot;[1c]}}'/>
<field declared_type='TrackDirectoryEntry*' name='track' type='[1{TrackDirectoryEntry=&quot;trackDirectory&quot;{TrackDirectory=&quot;size&quot;i&quot;atomType&quot;i&quot;trackHeader&quot;{TrackHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{TrackHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;trackID&quot;i&quot;reserved1&quot;i&quot;duration&quot;i&quot;reserved2&quot;i&quot;reserved3&quot;i&quot;layer&quot;s&quot;alternateGroup&quot;s&quot;volume&quot;s&quot;reserved4&quot;s&quot;matrix&quot;{MatrixRecord=&quot;matrix&quot;[3[3l]]}&quot;trackWidth&quot;i&quot;trackHeight&quot;i}}&quot;trackClip&quot;{ClippingAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;aRgnClip&quot;{RgnAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;rgnSize&quot;s&quot;rgnBBox&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;data&quot;[1c]}}&quot;edits&quot;{EditsAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;editList&quot;{EditListAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;editListTable&quot;[1{EditListType=&quot;trackDuration&quot;i&quot;mediaTime&quot;i&quot;mediaRate&quot;i}]}}&quot;media&quot;{MediaDirectory=&quot;size&quot;i&quot;atomType&quot;i&quot;mediaHeader&quot;{MediaHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{MediaHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;timeScale&quot;i&quot;duration&quot;i&quot;language&quot;s&quot;quality&quot;s}}&quot;mediaHandler&quot;{HandlerAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;hInfo&quot;{PublicHandlerInfo=&quot;flags&quot;i&quot;componentType&quot;i&quot;componentSubType&quot;i&quot;componentManufacturer&quot;i&quot;componentFlags&quot;i&quot;componentFlagsMask&quot;i&quot;componentName&quot;[1c]}}&quot;mediaInfo&quot;{MediaInfo=&quot;size&quot;i&quot;atomType&quot;i}}&quot;userData&quot;{UserDataAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;userData&quot;[1{MoviesUserData=&quot;size&quot;i&quot;udType&quot;i&quot;data&quot;[1c]}]}}}]'/>
<field declared_type='UserDataAtom' name='userData' type='{UserDataAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;userData&quot;[1{MoviesUserData=&quot;size&quot;i&quot;udType&quot;i&quot;data&quot;[1c]}]}'/>
</struct>
<struct name='MovieExportGetDataParams' type='{MovieExportGetDataParams=&quot;recordSize&quot;l&quot;trackID&quot;l&quot;sourceTimeScale&quot;i&quot;requestedTime&quot;i&quot;actualTime&quot;i&quot;dataPtr&quot;*&quot;dataSize&quot;l&quot;desc&quot;^^{SampleDescription}&quot;descType&quot;I&quot;descSeed&quot;l&quot;requestedSampleCount&quot;l&quot;actualSampleCount&quot;l&quot;durationPerSample&quot;i&quot;sampleFlags&quot;l}'>
<field declared_type='long' name='recordSize' type='l'/>
<field declared_type='long' name='trackID' type='l'/>
<field declared_type='TimeScale' name='sourceTimeScale' type='l'/>
<field declared_type='TimeValue' name='requestedTime' type='l'/>
<field declared_type='TimeValue' name='actualTime' type='l'/>
<field declared_type='Ptr' name='dataPtr' type='*'/>
<field declared_type='long' name='dataSize' type='l'/>
<field declared_type='SampleDescriptionHandle' name='desc' type='^^{SampleDescription}'/>
<field declared_type='OSType' name='descType' type='L'/>
<field declared_type='long' name='descSeed' type='l'/>
<field declared_type='long' name='requestedSampleCount' type='l'/>
<field declared_type='long' name='actualSampleCount' type='l'/>
<field declared_type='TimeValue' name='durationPerSample' type='l'/>
<field declared_type='long' name='sampleFlags' type='l'/>
</struct>
<struct name='MovieExportStageReachedCallbackProcRecord' type='{MovieExportStageReachedCallbackProcRecord=&quot;stageReachedCallbackProc&quot;^?&quot;stageReachedCallbackRefCon&quot;^v}'>
<field declared_type='MovieExportStageReachedCallbackUPP' function_pointer='true' name='stageReachedCallbackProc' type='^?'>
<arg declared_type='OSType' type='L'/>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</field>
<field declared_type='void*' name='stageReachedCallbackRefCon' type='^v'/>
</struct>
<struct name='MovieHeader' type='{MovieHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;timeScale&quot;i&quot;duration&quot;i&quot;preferredRate&quot;i&quot;preferredVolume&quot;s&quot;reserved1&quot;s&quot;preferredLong1&quot;i&quot;preferredLong2&quot;i&quot;matrix&quot;{MatrixRecord=&quot;matrix&quot;[3[3l]]}&quot;previewTime&quot;i&quot;previewDuration&quot;i&quot;posterTime&quot;i&quot;selectionTime&quot;i&quot;selectionDuration&quot;i&quot;currentTime&quot;i&quot;nextTrackID&quot;i}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt32' name='creationTime' type='l'/>
<field declared_type='SInt32' name='modificationTime' type='l'/>
<field declared_type='TimeValue' name='timeScale' type='l'/>
<field declared_type='TimeValue' name='duration' type='l'/>
<field declared_type='Fixed' name='preferredRate' type='l'/>
<field declared_type='SInt16' name='preferredVolume' type='s'/>
<field declared_type='SInt16' name='reserved1' type='s'/>
<field declared_type='SInt32' name='preferredLong1' type='l'/>
<field declared_type='SInt32' name='preferredLong2' type='l'/>
<field declared_type='MatrixRecord' name='matrix' type='{MatrixRecord=&quot;matrix&quot;[3[3l]]}'/>
<field declared_type='TimeValue' name='previewTime' type='l'/>
<field declared_type='TimeValue' name='previewDuration' type='l'/>
<field declared_type='TimeValue' name='posterTime' type='l'/>
<field declared_type='TimeValue' name='selectionTime' type='l'/>
<field declared_type='TimeValue' name='selectionDuration' type='l'/>
<field declared_type='TimeValue' name='currentTime' type='l'/>
<field declared_type='SInt32' name='nextTrackID' type='l'/>
</struct>
<struct name='MovieHeaderAtom' type='{MovieHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{MovieHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;timeScale&quot;i&quot;duration&quot;i&quot;preferredRate&quot;i&quot;preferredVolume&quot;s&quot;reserved1&quot;s&quot;preferredLong1&quot;i&quot;preferredLong2&quot;i&quot;matrix&quot;{MatrixRecord=&quot;matrix&quot;[3[3l]]}&quot;previewTime&quot;i&quot;previewDuration&quot;i&quot;posterTime&quot;i&quot;selectionTime&quot;i&quot;selectionDuration&quot;i&quot;currentTime&quot;i&quot;nextTrackID&quot;i}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='MovieHeader' name='header' type='{MovieHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;timeScale&quot;i&quot;duration&quot;i&quot;preferredRate&quot;i&quot;preferredVolume&quot;s&quot;reserved1&quot;s&quot;preferredLong1&quot;i&quot;preferredLong2&quot;i&quot;matrix&quot;{MatrixRecord=&quot;matrix&quot;[3[3l]]}&quot;previewTime&quot;i&quot;previewDuration&quot;i&quot;posterTime&quot;i&quot;selectionTime&quot;i&quot;selectionDuration&quot;i&quot;currentTime&quot;i&quot;nextTrackID&quot;i}'/>
</struct>
<struct name='MovieMediaInstantiationInfoRecord' type='{MovieMediaInstantiationInfoRecord=&quot;immediately&quot;B&quot;pad&quot;B&quot;bitRate&quot;i}'>
<field declared_type='Boolean' name='immediately' type='B'/>
<field declared_type='Boolean' name='pad' type='B'/>
<field declared_type='SInt32' name='bitRate' type='l'/>
</struct>
<struct name='MovieMediaTimeRecord' type='{MovieMediaTimeRecord=&quot;time&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;scale&quot;i}'>
<field declared_type='wide' name='time' type='{wide=&quot;lo&quot;I&quot;hi&quot;i}'/>
<field declared_type='TimeScale' name='scale' type='l'/>
</struct>
<struct name='MoviesUserData' type='{MoviesUserData=&quot;size&quot;i&quot;udType&quot;i&quot;data&quot;[1c]}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='udType' type='l'/>
<field declared_type='char*' name='data' type='[1c]'/>
</struct>
<struct name='MusicDescription' type='{MusicDescription=&quot;descSize&quot;l&quot;dataFormat&quot;l&quot;resvd1&quot;l&quot;resvd2&quot;s&quot;dataRefIndex&quot;s&quot;musicFlags&quot;l&quot;headerData&quot;[1L]}'>
<field declared_type='long' name='descSize' type='l'/>
<field declared_type='long' name='dataFormat' type='l'/>
<field declared_type='long' name='resvd1' type='l'/>
<field declared_type='short' name='resvd2' type='s'/>
<field declared_type='short' name='dataRefIndex' type='s'/>
<field declared_type='long' name='musicFlags' type='l'/>
<field declared_type='unsigned long*' name='headerData' type='[1L]'/>
</struct>
<struct name='MusicMIDIPacket' type='{MusicMIDIPacket=&quot;length&quot;S&quot;reserved&quot;L&quot;data&quot;[249C]}'>
<field declared_type='unsigned short' name='length' type='S'/>
<field declared_type='unsigned long' name='reserved' type='L'/>
<field declared_type='UInt8*' name='data' type='[249C]'/>
</struct>
<struct name='NCLCColorInfoImageDescriptionExtension' type='{NCLCColorInfoImageDescriptionExtension=&quot;colorParamType&quot;I&quot;primaries&quot;S&quot;transferFunction&quot;S&quot;matrix&quot;S}'>
<field declared_type='OSType' name='colorParamType' type='L'/>
<field declared_type='UInt16' name='primaries' type='S'/>
<field declared_type='UInt16' name='transferFunction' type='S'/>
<field declared_type='UInt16' name='matrix' type='S'/>
</struct>
<struct name='NoteRequest' type='{NoteRequest=&quot;info&quot;{NoteRequestInfo=&quot;flags&quot;C&quot;midiChannelAssignment&quot;C&quot;polyphony&quot;{BigEndianShort=&quot;bigEndianValue&quot;s}&quot;typicalPolyphony&quot;{BigEndianFixed=&quot;bigEndianValue&quot;i}}&quot;tone&quot;{ToneDescription=&quot;synthesizerType&quot;{BigEndianOSType=&quot;bigEndianValue&quot;I}&quot;synthesizerName&quot;[32C]&quot;instrumentName&quot;[32C]&quot;instrumentNumber&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}&quot;gmNumber&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}}}'>
<field declared_type='NoteRequestInfo' name='info' type='{NoteRequestInfo=&quot;flags&quot;C&quot;midiChannelAssignment&quot;C&quot;polyphony&quot;{BigEndianShort=&quot;bigEndianValue&quot;s}&quot;typicalPolyphony&quot;{BigEndianFixed=&quot;bigEndianValue&quot;i}}'/>
<field declared_type='ToneDescription' name='tone' type='{ToneDescription=&quot;synthesizerType&quot;{BigEndianOSType=&quot;bigEndianValue&quot;I}&quot;synthesizerName&quot;[32C]&quot;instrumentName&quot;[32C]&quot;instrumentNumber&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}&quot;gmNumber&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}}'/>
</struct>
<struct name='NoteRequestInfo' type='{NoteRequestInfo=&quot;flags&quot;C&quot;midiChannelAssignment&quot;C&quot;polyphony&quot;{BigEndianShort=&quot;bigEndianValue&quot;s}&quot;typicalPolyphony&quot;{BigEndianFixed=&quot;bigEndianValue&quot;i}}'>
<field declared_type='UInt8' name='flags' type='C'/>
<field declared_type='NoteRequestMIDIChannel' name='midiChannelAssignment' type='C'/>
<field declared_type='BigEndianShort' name='polyphony' type='{BigEndianShort=&quot;bigEndianValue&quot;s}'/>
<field declared_type='BigEndianFixed' name='typicalPolyphony' type='{BigEndianFixed=&quot;bigEndianValue&quot;i}'/>
</struct>
<struct name='OfflineSampleType' type='{OfflineSampleType=&quot;numChannels&quot;L&quot;sampleRate&quot;I&quot;sampleSize&quot;S}'>
<field declared_type='unsigned long' name='numChannels' type='L'/>
<field declared_type='UnsignedFixed' name='sampleRate' type='L'/>
<field declared_type='unsigned short' name='sampleSize' type='S'/>
</struct>
<struct name='ParameterAlternateDataEntry' type='{ParameterAlternateDataEntry=&quot;dataType&quot;I&quot;alternateAtom&quot;i}'>
<field declared_type='OSType' name='dataType' type='L'/>
<field declared_type='QTAtomType' name='alternateAtom' type='l'/>
</struct>
<struct name='ParameterAlternateDataType' type='{ParameterAlternateDataType=&quot;numEntries&quot;l&quot;entries&quot;[1{ParameterAlternateDataEntry=&quot;dataType&quot;I&quot;alternateAtom&quot;i}]}'>
<field declared_type='long' name='numEntries' type='l'/>
<field declared_type='ParameterAlternateDataEntry*' name='entries' type='[1{ParameterAlternateDataEntry=&quot;dataType&quot;I&quot;alternateAtom&quot;i}]'/>
</struct>
<struct name='ParameterAtomTypeAndID' type='{ParameterAtomTypeAndID=&quot;atomType&quot;i&quot;atomID&quot;i&quot;atomFlags&quot;l&quot;atomName&quot;[256C]}'>
<field declared_type='QTAtomType' name='atomType' type='l'/>
<field declared_type='QTAtomID' name='atomID' type='l'/>
<field declared_type='long' name='atomFlags' type='l'/>
<field declared_type='Str255' name='atomName' type='[256C]'/>
</struct>
<struct name='ParameterDataBehavior' type='{ParameterDataBehavior=&quot;behaviorType&quot;I&quot;behaviorFlags&quot;l&quot;u&quot;(?=&quot;controls&quot;{ControlBehaviors=&quot;groupID&quot;i&quot;controlValue&quot;l&quot;customType&quot;i&quot;customID&quot;i})}'>
<field declared_type='OSType' name='behaviorType' type='L'/>
<field declared_type='long' name='behaviorFlags' type='l'/>
<field declared_type='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/System/Library/Frameworks/QuickTime.framework/Headers/ImageCodec.h:967:3)' name='u' type='(?=&quot;controls&quot;{ControlBehaviors=&quot;groupID&quot;i&quot;controlValue&quot;l&quot;customType&quot;i&quot;customID&quot;i})'/>
</struct>
<struct name='ParameterDataType' type='{ParameterDataType=&quot;dataType&quot;I}'>
<field declared_type='OSType' name='dataType' type='L'/>
</struct>
<struct name='ParameterDataUsage' type='{ParameterDataUsage=&quot;usageType&quot;I}'>
<field declared_type='OSType' name='usageType' type='L'/>
</struct>
<struct name='ParameterDependancyRecord' type='{ParameterDependancyRecord=&quot;dependCount&quot;l&quot;depends&quot;[1L]}'>
<field declared_type='long' name='dependCount' type='l'/>
<field declared_type='OSType*' name='depends' type='[1L]'/>
</struct>
<struct name='ParameterProperty' type='{ParameterProperty=&quot;propertyClass&quot;I&quot;propertyID&quot;I}'>
<field declared_type='OSType' name='propertyClass' type='L'/>
<field declared_type='OSType' name='propertyID' type='L'/>
</struct>
<struct name='ParameterRangeRecord' type='{ParameterRangeRecord=&quot;u&quot;(?=&quot;longRange&quot;{LongRangeRecord=&quot;minValue&quot;l&quot;maxValue&quot;l&quot;scaleValue&quot;l&quot;precisionDigits&quot;l}&quot;enumRange&quot;{EnumRangeRecord=&quot;enumID&quot;l}&quot;fixedRange&quot;{FixedRangeRecord=&quot;minValue&quot;i&quot;maxValue&quot;i&quot;scaleValue&quot;i&quot;precisionDigits&quot;l}&quot;doubleRange&quot;{DoubleRangeRecord=&quot;minValue&quot;d&quot;maxValue&quot;d&quot;scaleValue&quot;d&quot;precisionDigits&quot;l}&quot;stringRange&quot;{StringRangeRecord=&quot;maxChars&quot;l&quot;maxLines&quot;l}&quot;booleanRange&quot;{BooleanRangeRecord=&quot;maskValue&quot;l}&quot;rgbRange&quot;{RGBRangeRecord=&quot;minColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}&quot;maxColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}}&quot;imageRange&quot;{ImageRangeRecord=&quot;imageFlags&quot;l&quot;fileType&quot;I&quot;replacedAtoms&quot;l})}'>
<field declared_type='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/System/Library/Frameworks/QuickTime.framework/Headers/ImageCodec.h:902:7)' name='u' type='(?=&quot;longRange&quot;{LongRangeRecord=&quot;minValue&quot;l&quot;maxValue&quot;l&quot;scaleValue&quot;l&quot;precisionDigits&quot;l}&quot;enumRange&quot;{EnumRangeRecord=&quot;enumID&quot;l}&quot;fixedRange&quot;{FixedRangeRecord=&quot;minValue&quot;i&quot;maxValue&quot;i&quot;scaleValue&quot;i&quot;precisionDigits&quot;l}&quot;doubleRange&quot;{DoubleRangeRecord=&quot;minValue&quot;d&quot;maxValue&quot;d&quot;scaleValue&quot;d&quot;precisionDigits&quot;l}&quot;stringRange&quot;{StringRangeRecord=&quot;maxChars&quot;l&quot;maxLines&quot;l}&quot;booleanRange&quot;{BooleanRangeRecord=&quot;maskValue&quot;l}&quot;rgbRange&quot;{RGBRangeRecord=&quot;minColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}&quot;maxColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}}&quot;imageRange&quot;{ImageRangeRecord=&quot;imageFlags&quot;l&quot;fileType&quot;I&quot;replacedAtoms&quot;l})'/>
</struct>
<struct name='PartialSyncSampleAtom' type='{PartialSyncSampleAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;partialSyncSampleTable&quot;[1L]}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt32' name='numEntries' type='l'/>
<field declared_type='UInt32*' name='partialSyncSampleTable' type='[1L]'/>
</struct>
<struct name='PixelAspectRatioImageDescriptionExtension' type='{PixelAspectRatioImageDescriptionExtension=&quot;hSpacing&quot;I&quot;vSpacing&quot;I}'>
<field declared_type='UInt32' name='hSpacing' type='L'/>
<field declared_type='UInt32' name='vSpacing' type='L'/>
</struct>
<struct name='PlanarComponentInfo' type='{PlanarComponentInfo=&quot;offset&quot;i&quot;rowBytes&quot;I}'>
<field declared_type='SInt32' name='offset' type='l'/>
<field declared_type='UInt32' name='rowBytes' type='L'/>
</struct>
<struct name='PlanarPixMapInfo' type='{PlanarPixMapInfo=&quot;componentInfo&quot;[1{PlanarComponentInfo=&quot;offset&quot;i&quot;rowBytes&quot;I}]}'>
<field declared_type='PlanarComponentInfo*' name='componentInfo' type='[1{PlanarComponentInfo=&quot;offset&quot;i&quot;rowBytes&quot;I}]'/>
</struct>
<struct name='PlanarPixmapInfoSorensonYUV9' type='{PlanarPixmapInfoSorensonYUV9=&quot;componentInfoY&quot;{PlanarComponentInfo=&quot;offset&quot;i&quot;rowBytes&quot;I}&quot;componentInfoU&quot;{PlanarComponentInfo=&quot;offset&quot;i&quot;rowBytes&quot;I}&quot;componentInfoV&quot;{PlanarComponentInfo=&quot;offset&quot;i&quot;rowBytes&quot;I}}'>
<field declared_type='PlanarComponentInfo' name='componentInfoY' type='{PlanarComponentInfo=&quot;offset&quot;i&quot;rowBytes&quot;I}'/>
<field declared_type='PlanarComponentInfo' name='componentInfoU' type='{PlanarComponentInfo=&quot;offset&quot;i&quot;rowBytes&quot;I}'/>
<field declared_type='PlanarComponentInfo' name='componentInfoV' type='{PlanarComponentInfo=&quot;offset&quot;i&quot;rowBytes&quot;I}'/>
</struct>
<struct name='PlanarPixmapInfoYUV420' type='{PlanarPixmapInfoYUV420=&quot;componentInfoY&quot;{PlanarComponentInfo=&quot;offset&quot;i&quot;rowBytes&quot;I}&quot;componentInfoCb&quot;{PlanarComponentInfo=&quot;offset&quot;i&quot;rowBytes&quot;I}&quot;componentInfoCr&quot;{PlanarComponentInfo=&quot;offset&quot;i&quot;rowBytes&quot;I}}'>
<field declared_type='PlanarComponentInfo' name='componentInfoY' type='{PlanarComponentInfo=&quot;offset&quot;i&quot;rowBytes&quot;I}'/>
<field declared_type='PlanarComponentInfo' name='componentInfoCb' type='{PlanarComponentInfo=&quot;offset&quot;i&quot;rowBytes&quot;I}'/>
<field declared_type='PlanarComponentInfo' name='componentInfoCr' type='{PlanarComponentInfo=&quot;offset&quot;i&quot;rowBytes&quot;I}'/>
</struct>
<struct name='PointerDataRefRecord' type='{PointerDataRefRecord=&quot;data&quot;^v&quot;dataLength&quot;i}'>
<field declared_type='void*' name='data' type='^v'/>
<field declared_type='Size' name='dataLength' type='l'/>
</struct>
<struct name='PreviewResourceRecord' type='{PreviewResourceRecord=&quot;modDate&quot;L&quot;version&quot;s&quot;resType&quot;I&quot;resID&quot;s}'>
<field declared_type='unsigned long' name='modDate' type='L'/>
<field declared_type='short' name='version' type='s'/>
<field declared_type='OSType' name='resType' type='L'/>
<field declared_type='short' name='resID' type='s'/>
</struct>
<struct name='PublicHandlerInfo' type='{PublicHandlerInfo=&quot;flags&quot;i&quot;componentType&quot;i&quot;componentSubType&quot;i&quot;componentManufacturer&quot;i&quot;componentFlags&quot;i&quot;componentFlagsMask&quot;i&quot;componentName&quot;[1c]}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt32' name='componentType' type='l'/>
<field declared_type='SInt32' name='componentSubType' type='l'/>
<field declared_type='SInt32' name='componentManufacturer' type='l'/>
<field declared_type='SInt32' name='componentFlags' type='l'/>
<field declared_type='SInt32' name='componentFlagsMask' type='l'/>
<field declared_type='char*' name='componentName' type='[1c]'/>
</struct>
<struct name='QTAltCPURatingRecord' type='{QTAltCPURatingRecord=&quot;flags&quot;I&quot;speed&quot;S}'>
<field declared_type='UInt32' name='flags' type='L'/>
<field declared_type='UInt16' name='speed' type='S'/>
</struct>
<struct name='QTAltComponentCheckRecord' type='{QTAltComponentCheckRecord=&quot;flags&quot;i&quot;cd&quot;{ComponentDescription=&quot;componentType&quot;I&quot;componentSubType&quot;I&quot;componentManufacturer&quot;I&quot;componentFlags&quot;I&quot;componentFlagsMask&quot;I}&quot;minVersion&quot;I}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='ComponentDescription' name='cd' type='{ComponentDescription=&quot;componentType&quot;I&quot;componentSubType&quot;I&quot;componentManufacturer&quot;I&quot;componentFlags&quot;I&quot;componentFlagsMask&quot;I}'/>
<field declared_type='UInt32' name='minVersion' type='L'/>
</struct>
<struct name='QTAltDataRateRecord' type='{QTAltDataRateRecord=&quot;flags&quot;i&quot;dataRate&quot;i}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt32' name='dataRate' type='l'/>
</struct>
<struct name='QTAltLanguageRecord' type='{QTAltLanguageRecord=&quot;flags&quot;i&quot;language&quot;s}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt16' name='language' type='s'/>
</struct>
<struct name='QTAltVersionCheckRecord' type='{QTAltVersionCheckRecord=&quot;flags&quot;i&quot;gestaltTag&quot;I&quot;val1&quot;I&quot;val2&quot;I&quot;checkType&quot;s}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='OSType' name='gestaltTag' type='L'/>
<field declared_type='UInt32' name='val1' type='L'/>
<field declared_type='UInt32' name='val2' type='L'/>
<field declared_type='SInt16' name='checkType' type='s'/>
</struct>
<struct name='QTAtomSpec' type='{QTAtomSpec=&quot;container&quot;^*&quot;atom&quot;i}'>
<field declared_type='QTAtomContainer' name='container' type='^*'/>
<field declared_type='QTAtom' name='atom' type='l'/>
</struct>
<struct name='QTAudioContextInsertRegistryInfo' type='{QTAudioContextInsertRegistryInfo=&quot;userData&quot;^v&quot;inputChannelLayoutSize&quot;I&quot;inputChannelLayout&quot;^{AudioChannelLayout}&quot;outputChannelLayoutSize&quot;I&quot;outputChannelLayout&quot;^{AudioChannelLayout}&quot;processDataCallback&quot;^?&quot;resetCallback&quot;^?&quot;finalizeCallback&quot;^?}'>
<field declared_type='void*' name='userData' type='^v'/>
<field declared_type='UInt32' name='inputChannelLayoutSize' type='L'/>
<field declared_type='AudioChannelLayout*' name='inputChannelLayout' type='^{AudioChannelLayout=III[1{AudioChannelDescription=II[3f]}]}'/>
<field declared_type='UInt32' name='outputChannelLayoutSize' type='L'/>
<field declared_type='AudioChannelLayout*' name='outputChannelLayout' type='^{AudioChannelLayout=III[1{AudioChannelDescription=II[3f]}]}'/>
<field declared_type='AudioContextInsertProcessDataCallback' function_pointer='true' name='processDataCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='AudioUnitRenderActionFlags*' type='^I'/>
<arg const='true' declared_type='AudioTimeStamp*' type='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='AudioBufferList*' type='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<arg declared_type='AudioBufferList*' type='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<retval declared_type='OSStatus' type='l'/>
</field>
<field declared_type='AudioContextInsertResetCallback' function_pointer='true' name='resetCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Float64' type='d'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='Float64*' type='^d'/>
<arg declared_type='Float64*' type='^d'/>
<retval declared_type='OSStatus' type='l'/>
</field>
<field declared_type='AudioContextInsertFinalizeCallback' function_pointer='true' name='finalizeCallback' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l'/>
</field>
</struct>
<struct name='QTAudioFrequencyLevels' type='{QTAudioFrequencyLevels=&quot;numChannels&quot;I&quot;numFrequencyBands&quot;I&quot;level&quot;[1f]}'>
<field declared_type='UInt32' name='numChannels' type='L'/>
<field declared_type='UInt32' name='numFrequencyBands' type='L'/>
<field declared_type='Float32*' name='level' type='[1f]'/>
</struct>
<struct name='QTAudioTrackInsertRegistryInfo' type='{QTAudioTrackInsertRegistryInfo=&quot;track&quot;^^{TrackType}&quot;regInfo&quot;{QTAudioContextInsertRegistryInfo=&quot;userData&quot;^v&quot;inputChannelLayoutSize&quot;I&quot;inputChannelLayout&quot;^{AudioChannelLayout}&quot;outputChannelLayoutSize&quot;I&quot;outputChannelLayout&quot;^{AudioChannelLayout}&quot;processDataCallback&quot;^?&quot;resetCallback&quot;^?&quot;finalizeCallback&quot;^?}}'>
<field declared_type='Track' name='track' type='^^{TrackType}'/>
<field declared_type='QTAudioContextInsertRegistryInfo' name='regInfo' type='{QTAudioContextInsertRegistryInfo=&quot;userData&quot;^v&quot;inputChannelLayoutSize&quot;I&quot;inputChannelLayout&quot;^{AudioChannelLayout}&quot;outputChannelLayoutSize&quot;I&quot;outputChannelLayout&quot;^{AudioChannelLayout}&quot;processDataCallback&quot;^?&quot;resetCallback&quot;^?&quot;finalizeCallback&quot;^?}'/>
</struct>
<struct name='QTAudioVolumeLevels' type='{QTAudioVolumeLevels=&quot;numChannels&quot;I&quot;level&quot;[1f]}'>
<field declared_type='UInt32' name='numChannels' type='L'/>
<field declared_type='Float32*' name='level' type='[1f]'/>
</struct>
<struct name='QTCallBackOpaqueHeader' type='{QTCallBackOpaqueHeader=&quot;callBackFlags&quot;l&quot;reserved1&quot;l&quot;qtPrivate&quot;[52c]}'>
<field declared_type='long' name='callBackFlags' type='l'/>
<field declared_type='long' name='reserved1' type='l'/>
<field declared_type='SInt8*' name='qtPrivate' type='[52c]'/>
</struct>
<struct name='QTChapterInfoRecord' type='{QTChapterInfoRecord=&quot;index&quot;l&quot;time&quot;i&quot;name&quot;[256C]}'>
<field declared_type='long' name='index' type='l'/>
<field declared_type='TimeValue' name='time' type='l'/>
<field declared_type='Str255' name='name' type='[256C]'/>
</struct>
<struct name='QTComponentPropertyListenerCollectionContext' type='{QTComponentPropertyListenerCollectionContext=&quot;version&quot;I&quot;filterProcUPP&quot;^?&quot;filterProcData&quot;^v}'>
<field declared_type='UInt32' name='version' type='L'/>
<field declared_type='QTComponentPropertyListenerFilterUPP' function_pointer='true' name='filterProcUPP' type='^?'>
<arg declared_type='QTComponentPropertyListenersRef' type='@'/>
<arg const='true' declared_type='QTComponentPropertyListenerCollectionContext*' type='^{QTComponentPropertyListenerCollectionContext=I^?^v}'/>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' type='L'/>
<arg declared_type='ComponentPropertyID' type='L'/>
<arg declared_type='QTComponentPropertyListenerUPP' function_pointer='true' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' type='L'/>
<arg declared_type='ComponentPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg const='true' declared_type='void*' type='^v'/>
<arg const='true' declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</field>
<field declared_type='void*' name='filterProcData' type='^v'/>
</struct>
<struct name='QTConnectionStatusRecord' type='{QTConnectionStatusRecord=&quot;flags&quot;s&quot;error&quot;s&quot;message&quot;^*}'>
<field declared_type='short' name='flags' type='s'/>
<field declared_type='short' name='error' type='s'/>
<field declared_type='Handle' name='message' type='^*'/>
</struct>
<struct name='QTCustomActionTargetRecord' type='{QTCustomActionTargetRecord=&quot;movie&quot;^^{MovieType}&quot;doMCActionCallbackProc&quot;^?&quot;callBackRefcon&quot;l&quot;track&quot;^^{TrackType}&quot;trackObjectRefCon&quot;l&quot;defaultTrack&quot;^^{TrackType}&quot;defaultObjectRefCon&quot;l&quot;reserved1&quot;l&quot;reserved2&quot;l}'>
<field declared_type='Movie' name='movie' type='^^{MovieType}'/>
<field declared_type='DoMCActionUPP' function_pointer='true' name='doMCActionCallbackProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Boolean*' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</field>
<field declared_type='long' name='callBackRefcon' type='l'/>
<field declared_type='Track' name='track' type='^^{TrackType}'/>
<field declared_type='long' name='trackObjectRefCon' type='l'/>
<field declared_type='Track' name='defaultTrack' type='^^{TrackType}'/>
<field declared_type='long' name='defaultObjectRefCon' type='l'/>
<field declared_type='long' name='reserved1' type='l'/>
<field declared_type='long' name='reserved2' type='l'/>
</struct>
<struct name='QTCustomControlDoEditCommandRecord' type='{QTCustomControlDoEditCommandRecord=&quot;storage&quot;^v&quot;command&quot;l}'>
<field declared_type='void*' name='storage' type='^v'/>
<field declared_type='long' name='command' type='l'/>
</struct>
<struct name='QTCustomControlGetEnableValueRecord' type='{QTCustomControlGetEnableValueRecord=&quot;storage&quot;^v&quot;currentValue&quot;l}'>
<field declared_type='void*' name='storage' type='^v'/>
<field declared_type='long' name='currentValue' type='l'/>
</struct>
<struct name='QTCustomControlGetValueRecord' type='{QTCustomControlGetValueRecord=&quot;storage&quot;^v&quot;sample&quot;^*}'>
<field declared_type='void*' name='storage' type='^v'/>
<field declared_type='QTAtomContainer' name='sample' type='^*'/>
</struct>
<struct name='QTCustomControlHandleEventRecord' type='{QTCustomControlHandleEventRecord=&quot;storage&quot;^v&quot;pEvent&quot;^{EventRecord}&quot;didProcess&quot;B&quot;tookFocus&quot;B&quot;needIdle&quot;B&quot;didEdit&quot;B}'>
<field declared_type='void*' name='storage' type='^v'/>
<field declared_type='EventRecord*' name='pEvent' type='^{EventRecord=SLI{Point=ss}S}'/>
<field declared_type='Boolean' name='didProcess' type='B'/>
<field declared_type='Boolean' name='tookFocus' type='B'/>
<field declared_type='Boolean' name='needIdle' type='B'/>
<field declared_type='Boolean' name='didEdit' type='B'/>
</struct>
<struct name='QTCustomControlNewRecord' type='{QTCustomControlNewRecord=&quot;storage&quot;^v&quot;options&quot;i&quot;sample&quot;^*&quot;customType&quot;l&quot;customID&quot;l}'>
<field declared_type='void*' name='storage' type='^v'/>
<field declared_type='QTParameterDialogOptions' name='options' type='l'/>
<field declared_type='QTAtomContainer' name='sample' type='^*'/>
<field declared_type='long' name='customType' type='l'/>
<field declared_type='long' name='customID' type='l'/>
</struct>
<struct name='QTCustomControlPositionControlRecord' type='{QTCustomControlPositionControlRecord=&quot;storage&quot;^v&quot;window&quot;^{OpaqueWindowPtr}&quot;location&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;used&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;didFit&quot;B&quot;pad&quot;[3B]}'>
<field declared_type='void*' name='storage' type='^v'/>
<field declared_type='WindowPtr' name='window' type='^{OpaqueWindowPtr=}'/>
<field declared_type='Rect' name='location' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field declared_type='Rect' name='used' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field declared_type='Boolean' name='didFit' type='B'/>
<field declared_type='Boolean*' name='pad' type='[3B]'/>
</struct>
<struct name='QTCustomControlSetEditCalloutRecord' type='{QTCustomControlSetEditCalloutRecord=&quot;storage&quot;^v&quot;callout&quot;^{QTParamPreviewCalloutRecord}}'>
<field declared_type='void*' name='storage' type='^v'/>
<field declared_type='QTParamPreviewCalloutPtr' name='callout' type='^{QTParamPreviewCalloutRecord=^?l}'/>
</struct>
<struct name='QTCustomControlSetEditMenuRecord' type='{QTCustomControlSetEditMenuRecord=&quot;storage&quot;^v&quot;editMenu&quot;^{OpaqueMenuRef}}'>
<field declared_type='void*' name='storage' type='^v'/>
<field declared_type='MenuHandle' name='editMenu' type='^{OpaqueMenuRef=}'/>
</struct>
<struct name='QTCustomControlSetFocusRecord' type='{QTCustomControlSetFocusRecord=&quot;storage&quot;^v&quot;focus&quot;l}'>
<field declared_type='void*' name='storage' type='^v'/>
<field declared_type='long' name='focus' type='l'/>
</struct>
<struct name='QTCustomControlSetPreviewPictureRecord' type='{QTCustomControlSetPreviewPictureRecord=&quot;storage&quot;^v&quot;preview&quot;^{QTParamPreviewRecord}}'>
<field declared_type='void*' name='storage' type='^v'/>
<field declared_type='QTParamPreviewPtr' name='preview' type='^{QTParamPreviewRecord=l^^{Picture}}'/>
</struct>
<struct name='QTCustomControlSetSampleTimeRecord' type='{QTCustomControlSetSampleTimeRecord=&quot;storage&quot;^v&quot;sampleTime&quot;^{QTParamSampleTimeRecord}}'>
<field declared_type='void*' name='storage' type='^v'/>
<field declared_type='QTParamSampleTimePtr' name='sampleTime' type='^{QTParamSampleTimeRecord=l{TimeRecord={wide=Ii}i^{TimeBaseRecord}}il}'/>
</struct>
<struct name='QTCustomControlShowHideControlRecord' type='{QTCustomControlShowHideControlRecord=&quot;storage&quot;^v&quot;show&quot;B&quot;enable&quot;B&quot;pad&quot;[2B]}'>
<field declared_type='void*' name='storage' type='^v'/>
<field declared_type='Boolean' name='show' type='B'/>
<field declared_type='Boolean' name='enable' type='B'/>
<field declared_type='Boolean*' name='pad' type='[2B]'/>
</struct>
<struct name='QTDoScriptRecord' type='{QTDoScriptRecord=&quot;scriptTypeFlags&quot;l&quot;command&quot;*&quot;arguments&quot;*}'>
<field declared_type='long' name='scriptTypeFlags' type='l'/>
<field declared_type='char*' name='command' type='*'/>
<field declared_type='char*' name='arguments' type='*'/>
</struct>
<struct name='QTErrorReplacementRecord' type='{QTErrorReplacementRecord=&quot;numEntries&quot;l&quot;replacementString&quot;[1*]}'>
<field declared_type='long' name='numEntries' type='l'/>
<field declared_type='StringPtr*' name='replacementString' type='[1*]'/>
</struct>
<struct name='QTEvaluateExpressionRecord' type='{QTEvaluateExpressionRecord=&quot;expressionSpec&quot;{QTAtomSpec=&quot;container&quot;^*&quot;atom&quot;i}&quot;expressionResult&quot;^f}'>
<field declared_type='QTAtomSpec' name='expressionSpec' type='{QTAtomSpec=&quot;container&quot;^*&quot;atom&quot;i}'/>
<field declared_type='float*' name='expressionResult' type='^f'/>
</struct>
<struct name='QTEvaluateExpressionWithTypeRecord' type='{QTEvaluateExpressionWithTypeRecord=&quot;recordSize&quot;l&quot;expressionSpec&quot;{QTAtomSpec=&quot;container&quot;^*&quot;atom&quot;i}&quot;expressionResult&quot;^f&quot;fetchAsType&quot;l&quot;nonNumericResult&quot;^*}'>
<field declared_type='long' name='recordSize' type='l'/>
<field declared_type='QTAtomSpec' name='expressionSpec' type='{QTAtomSpec=&quot;container&quot;^*&quot;atom&quot;i}'/>
<field declared_type='float*' name='expressionResult' type='^f'/>
<field declared_type='long' name='fetchAsType' type='l'/>
<field declared_type='Handle' name='nonNumericResult' type='^*'/>
</struct>
<struct name='QTEventLoopDescriptionPtr' type='{QTEventLoopDescriptionRecord=&quot;recordSize&quot;l&quot;windowRefKind&quot;l&quot;parentWindow&quot;^v&quot;eventTarget&quot;^v}'>
<field declared_type='long' name='recordSize' type='l'/>
<field declared_type='long' name='windowRefKind' type='l'/>
<field declared_type='void*' name='parentWindow' type='^v'/>
<field declared_type='void*' name='eventTarget' type='^v'/>
</struct>
<struct name='QTEventLoopDescriptionRecord' type='{QTEventLoopDescriptionRecord=&quot;recordSize&quot;l&quot;windowRefKind&quot;l&quot;parentWindow&quot;^v&quot;eventTarget&quot;^v}'>
<field declared_type='long' name='recordSize' type='l'/>
<field declared_type='long' name='windowRefKind' type='l'/>
<field declared_type='void*' name='parentWindow' type='^v'/>
<field declared_type='void*' name='eventTarget' type='^v'/>
</struct>
<struct name='QTEventRecord' type='{QTEventRecord=&quot;version&quot;l&quot;eventType&quot;I&quot;where&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;flags&quot;l&quot;payloadRefcon&quot;l&quot;param1&quot;l&quot;param2&quot;l&quot;param3&quot;l}'>
<field declared_type='long' name='version' type='l'/>
<field declared_type='OSType' name='eventType' type='L'/>
<field declared_type='Point' name='where' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
<field declared_type='long' name='flags' type='l'/>
<field declared_type='long' name='payloadRefcon' type='l'/>
<field declared_type='long' name='param1' type='l'/>
<field declared_type='long' name='param2' type='l'/>
<field declared_type='long' name='param3' type='l'/>
</struct>
<struct name='QTFetchParameterAsRecord' type='{QTFetchParameterAsRecord=&quot;paramListSpec&quot;{QTAtomSpec=&quot;container&quot;^*&quot;atom&quot;i}&quot;paramIndex&quot;l&quot;paramType&quot;l&quot;allowedFlags&quot;l&quot;min&quot;^v&quot;max&quot;^v&quot;currentValue&quot;^v&quot;newValue&quot;^v&quot;isUnsignedValue&quot;B}'>
<field declared_type='QTAtomSpec' name='paramListSpec' type='{QTAtomSpec=&quot;container&quot;^*&quot;atom&quot;i}'/>
<field declared_type='long' name='paramIndex' type='l'/>
<field declared_type='long' name='paramType' type='l'/>
<field declared_type='long' name='allowedFlags' type='l'/>
<field declared_type='void*' name='min' type='^v'/>
<field declared_type='void*' name='max' type='^v'/>
<field declared_type='void*' name='currentValue' type='^v'/>
<field declared_type='void*' name='newValue' type='^v'/>
<field declared_type='Boolean' name='isUnsignedValue' type='B'/>
</struct>
<struct name='QTGetChapterTimeRecord' type='{QTGetChapterTimeRecord=&quot;chapterName&quot;*&quot;chapterTime&quot;{TimeRecord=&quot;value&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;scale&quot;i&quot;base&quot;^{TimeBaseRecord}}}'>
<field declared_type='StringPtr' name='chapterName' type='*'/>
<field declared_type='TimeRecord' name='chapterTime' type='{TimeRecord=&quot;value&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;scale&quot;i&quot;base&quot;^{TimeBaseRecord}}'/>
</struct>
<struct name='QTGetCursorByIDRecord' type='{QTGetCursorByIDRecord=&quot;cursorID&quot;s&quot;colorCursorData&quot;^*&quot;reserved1&quot;l}'>
<field declared_type='short' name='cursorID' type='s'/>
<field declared_type='Handle' name='colorCursorData' type='^*'/>
<field declared_type='long' name='reserved1' type='l'/>
</struct>
<struct name='QTGetExternalMovieRecord' type='{QTGetExternalMovieRecord=&quot;targetType&quot;l&quot;movieName&quot;*&quot;movieID&quot;l&quot;theMovie&quot;^^^{MovieType}&quot;theController&quot;^^{ComponentInstanceRecord}}'>
<field declared_type='long' name='targetType' type='l'/>
<field declared_type='StringPtr' name='movieName' type='*'/>
<field declared_type='long' name='movieID' type='l'/>
<field declared_type='PtrToMovie' name='theMovie' type='^^^{MovieType}'/>
<field declared_type='MovieControllerPtr' name='theController' type='^^{ComponentInstanceRecord}'/>
</struct>
<struct name='QTKeyboardFocusRecord' type='{QTKeyboardFocusRecord=&quot;recordSize&quot;l&quot;navigation&quot;l&quot;focusRefCon&quot;l&quot;focusFlags&quot;s}'>
<field declared_type='long' name='recordSize' type='l'/>
<field declared_type='long' name='navigation' type='l'/>
<field declared_type='long' name='focusRefCon' type='l'/>
<field declared_type='short' name='focusFlags' type='s'/>
</struct>
<struct name='QTMCActionNotificationRecord' type='{QTMCActionNotificationRecord=&quot;returnSignature&quot;I&quot;notifyAction&quot;^?&quot;refcon&quot;^v&quot;flags&quot;I}'>
<field declared_type='OSType' name='returnSignature' type='L'/>
<field declared_type='MCActionNotificationUPP' function_pointer='true' name='notifyAction' type='^?'>
<arg declared_type='MovieController' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</field>
<field declared_type='void*' name='refcon' type='^v'/>
<field declared_type='UInt32' name='flags' type='L'/>
</struct>
<struct name='QTMIDIPort' type='{QTMIDIPort=&quot;portConnections&quot;{SynthesizerConnections=&quot;clientID&quot;I&quot;inputPortID&quot;I&quot;outputPortID&quot;I&quot;midiChannel&quot;l&quot;flags&quot;l&quot;unique&quot;l&quot;sampleBankFile&quot;^{FSSpec}&quot;reserved2&quot;l}&quot;portName&quot;[64C]}'>
<field declared_type='SynthesizerConnections' name='portConnections' type='{SynthesizerConnections=&quot;clientID&quot;I&quot;inputPortID&quot;I&quot;outputPortID&quot;I&quot;midiChannel&quot;l&quot;flags&quot;l&quot;unique&quot;l&quot;sampleBankFile&quot;^{FSSpec}&quot;reserved2&quot;l}'/>
<field declared_type='Str63' name='portName' type='[64C]'/>
</struct>
<struct name='QTMIDIPortList' type='{QTMIDIPortList=&quot;portCount&quot;s&quot;port&quot;[1{QTMIDIPort=&quot;portConnections&quot;{SynthesizerConnections=&quot;clientID&quot;I&quot;inputPortID&quot;I&quot;outputPortID&quot;I&quot;midiChannel&quot;l&quot;flags&quot;l&quot;unique&quot;l&quot;sampleBankFile&quot;^{FSSpec}&quot;reserved2&quot;l}&quot;portName&quot;[64C]}]}'>
<field declared_type='short' name='portCount' type='s'/>
<field declared_type='QTMIDIPort*' name='port' type='[1{QTMIDIPort=&quot;portConnections&quot;{SynthesizerConnections=&quot;clientID&quot;I&quot;inputPortID&quot;I&quot;outputPortID&quot;I&quot;midiChannel&quot;l&quot;flags&quot;l&quot;unique&quot;l&quot;sampleBankFile&quot;^{FSSpec}&quot;reserved2&quot;l}&quot;portName&quot;[64C]}]'/>
</struct>
<struct name='QTMediaContextID' type='{QTUUID=&quot;data1&quot;I&quot;data2&quot;S&quot;data3&quot;S&quot;data4&quot;[8C]}'>
<field declared_type='UInt32' name='data1' type='L'/>
<field declared_type='UInt16' name='data2' type='S'/>
<field declared_type='UInt16' name='data3' type='S'/>
<field declared_type='UInt8*' name='data4' type='[8C]'/>
</struct>
<struct name='QTMovieExportSourceInfo' type='{QTMovieExportSourceInfo=&quot;mediaType&quot;I&quot;minCount&quot;S&quot;maxCount&quot;S&quot;flags&quot;l}'>
<field declared_type='OSType' name='mediaType' type='L'/>
<field declared_type='UInt16' name='minCount' type='S'/>
<field declared_type='UInt16' name='maxCount' type='S'/>
<field declared_type='long' name='flags' type='l'/>
</struct>
<struct name='QTMovieExportSourceRecord' type='{QTMovieExportSourceRecord=&quot;count&quot;l&quot;reserved&quot;l&quot;sourceArray&quot;[1{QTMovieExportSourceInfo=&quot;mediaType&quot;I&quot;minCount&quot;S&quot;maxCount&quot;S&quot;flags&quot;l}]}'>
<field declared_type='long' name='count' type='l'/>
<field declared_type='long' name='reserved' type='l'/>
<field declared_type='QTMovieExportSourceInfo*' name='sourceArray' type='[1{QTMovieExportSourceInfo=&quot;mediaType&quot;I&quot;minCount&quot;S&quot;maxCount&quot;S&quot;flags&quot;l}]'/>
</struct>
<struct name='QTNewMoviePropertyElement' type='{QTNewMoviePropertyElement=&quot;propClass&quot;I&quot;propID&quot;I&quot;propValueSize&quot;I&quot;propValueAddress&quot;^v&quot;propStatus&quot;i}'>
<field declared_type='QTPropertyClass' name='propClass' type='L'/>
<field declared_type='QTPropertyID' name='propID' type='L'/>
<field declared_type='ByteCount' name='propValueSize' type='L'/>
<field declared_type='QTPropertyValuePtr' name='propValueAddress' type='^v'/>
<field declared_type='OSStatus' name='propStatus' type='l'/>
</struct>
<struct name='QTNewMovieUserProcRecord' type='{QTNewMovieUserProcRecord=&quot;getMovieUserProc&quot;^?&quot;getMovieUserProcRefcon&quot;^v&quot;defaultDataRef&quot;{DataReferenceRecord=&quot;dataRefType&quot;I&quot;dataRef&quot;^*}}'>
<field declared_type='GetMovieUPP' function_pointer='true' name='getMovieUserProc' type='^?'>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</field>
<field declared_type='void*' name='getMovieUserProcRefcon' type='^v'/>
<field declared_type='DataReferenceRecord' name='defaultDataRef' type='{DataReferenceRecord=&quot;dataRefType&quot;I&quot;dataRef&quot;^*}'/>
</struct>
<struct name='QTParamComponentPropertyRecord' type='{QTParamComponentPropertyRecord=&quot;component&quot;^{ComponentInstanceRecord}&quot;defaultClass&quot;I}'>
<field declared_type='ComponentInstance' name='component' type='^{ComponentInstanceRecord=[1l]}'/>
<field declared_type='OSType' name='defaultClass' type='L'/>
</struct>
<struct name='QTParamDialogEventRecord' type='{QTParamDialogEventRecord=&quot;theEvent&quot;^{EventRecord}&quot;whichDialog&quot;^{OpaqueDialogPtr}&quot;itemHit&quot;s}'>
<field declared_type='EventRecord*' name='theEvent' type='^{EventRecord=SLI{Point=ss}S}'/>
<field declared_type='DialogRef' name='whichDialog' type='^{OpaqueDialogPtr=}'/>
<field declared_type='short' name='itemHit' type='s'/>
</struct>
<struct name='QTParamFetchPreviewRecord' type='{QTParamFetchPreviewRecord=&quot;theWorld&quot;^{OpaqueGrafPtr}&quot;percentage&quot;i}'>
<field declared_type='GWorldPtr' name='theWorld' type='^{OpaqueGrafPtr=}'/>
<field declared_type='Fixed' name='percentage' type='l'/>
</struct>
<struct name='QTParamPreviewCalloutRecord' type='{QTParamPreviewCalloutRecord=&quot;calloutProc&quot;^?&quot;refCon&quot;l}'>
<field declared_type='MoviePreviewCallOutUPP' function_pointer='true' name='calloutProc' type='^?'>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</field>
<field declared_type='long' name='refCon' type='l'/>
</struct>
<struct name='QTParamPreviewRecord' type='{QTParamPreviewRecord=&quot;sourceID&quot;l&quot;sourcePicture&quot;^^{Picture}}'>
<field declared_type='long' name='sourceID' type='l'/>
<field declared_type='PicHandle' name='sourcePicture' type='^^{Picture}'/>
</struct>
<struct name='QTParamSampleTimeRecord' type='{QTParamSampleTimeRecord=&quot;displayOptions&quot;l&quot;sampleStartTime&quot;{TimeRecord=&quot;value&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;scale&quot;i&quot;base&quot;^{TimeBaseRecord}}&quot;sampleDuration&quot;i&quot;framesPerSecond&quot;l}'>
<field declared_type='long' name='displayOptions' type='l'/>
<field declared_type='TimeRecord' name='sampleStartTime' type='{TimeRecord=&quot;value&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;scale&quot;i&quot;base&quot;^{TimeBaseRecord}}'/>
<field declared_type='TimeValue' name='sampleDuration' type='l'/>
<field declared_type='long' name='framesPerSecond' type='l'/>
</struct>
<struct name='QTPresetInfo' type='{QTPresetInfo=&quot;presetKey&quot;I&quot;presetFlags&quot;I&quot;settingsResourceType&quot;I&quot;settingsResourceID&quot;s&quot;padding1&quot;s&quot;nameStringListID&quot;s&quot;nameStringIndex&quot;s&quot;infoStringListID&quot;s&quot;infoStringIndex&quot;s}'>
<field declared_type='OSType' name='presetKey' type='L'/>
<field declared_type='UInt32' name='presetFlags' type='L'/>
<field declared_type='OSType' name='settingsResourceType' type='L'/>
<field declared_type='SInt16' name='settingsResourceID' type='s'/>
<field declared_type='SInt16' name='padding1' type='s'/>
<field declared_type='SInt16' name='nameStringListID' type='s'/>
<field declared_type='SInt16' name='nameStringIndex' type='s'/>
<field declared_type='SInt16' name='infoStringListID' type='s'/>
<field declared_type='SInt16' name='infoStringIndex' type='s'/>
</struct>
<struct name='QTPresetListRecord' type='{QTPresetListRecord=&quot;flags&quot;I&quot;count&quot;I&quot;reserved&quot;I&quot;presetsArray&quot;[1{QTPresetInfo=&quot;presetKey&quot;I&quot;presetFlags&quot;I&quot;settingsResourceType&quot;I&quot;settingsResourceID&quot;s&quot;padding1&quot;s&quot;nameStringListID&quot;s&quot;nameStringIndex&quot;s&quot;infoStringListID&quot;s&quot;infoStringIndex&quot;s}]}'>
<field declared_type='UInt32' name='flags' type='L'/>
<field declared_type='UInt32' name='count' type='L'/>
<field declared_type='UInt32' name='reserved' type='L'/>
<field declared_type='QTPresetInfo*' name='presetsArray' type='[1{QTPresetInfo=&quot;presetKey&quot;I&quot;presetFlags&quot;I&quot;settingsResourceType&quot;I&quot;settingsResourceID&quot;s&quot;padding1&quot;s&quot;nameStringListID&quot;s&quot;nameStringIndex&quot;s&quot;infoStringListID&quot;s&quot;infoStringIndex&quot;s}]'/>
</struct>
<struct name='QTResolutionSettings' type='{QTResolutionSettings=&quot;horizontalResolution&quot;i&quot;verticalResolution&quot;i}'>
<field declared_type='Fixed' name='horizontalResolution' type='l'/>
<field declared_type='Fixed' name='verticalResolution' type='l'/>
</struct>
<struct name='QTRestartAtTimeRecord' type='{QTRestartAtTimeRecord=&quot;startTime&quot;i&quot;rate&quot;i}'>
<field declared_type='TimeValue' name='startTime' type='l'/>
<field declared_type='Fixed' name='rate' type='l'/>
</struct>
<struct name='QTRuntimeSpriteDescStruct' type='{QTRuntimeSpriteDescStruct=&quot;version&quot;l&quot;spriteID&quot;i&quot;imageIndex&quot;s&quot;matrix&quot;{MatrixRecord=&quot;matrix&quot;[3[3l]]}&quot;visible&quot;s&quot;layer&quot;s&quot;graphicsMode&quot;{ModifierTrackGraphicsModeRecord=&quot;graphicsMode&quot;l&quot;opColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}}&quot;actionHandlingSpriteID&quot;i}'>
<field declared_type='long' name='version' type='l'/>
<field declared_type='QTAtomID' name='spriteID' type='l'/>
<field declared_type='short' name='imageIndex' type='s'/>
<field declared_type='MatrixRecord' name='matrix' type='{MatrixRecord=&quot;matrix&quot;[3[3l]]}'/>
<field declared_type='short' name='visible' type='s'/>
<field declared_type='short' name='layer' type='s'/>
<field declared_type='ModifierTrackGraphicsModeRecord' name='graphicsMode' type='{ModifierTrackGraphicsModeRecord=&quot;graphicsMode&quot;l&quot;opColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}}'/>
<field declared_type='QTAtomID' name='actionHandlingSpriteID' type='l'/>
</struct>
<struct name='QTSAtomContainerDataStruct' type='{QTSAtomContainerDataStruct=&quot;container&quot;^*&quot;parentAtom&quot;i}'>
<field declared_type='QTAtomContainer' name='container' type='^*'/>
<field declared_type='QTAtom' name='parentAtom' type='l'/>
</struct>
<struct name='QTSAudioParams' type='{QTSAudioParams=&quot;leftVolume&quot;s&quot;rightVolume&quot;s&quot;bassLevel&quot;s&quot;trebleLevel&quot;s&quot;frequencyBandsCount&quot;s&quot;frequencyBands&quot;^v&quot;levelMeteringEnabled&quot;B}'>
<field declared_type='SInt16' name='leftVolume' type='s'/>
<field declared_type='SInt16' name='rightVolume' type='s'/>
<field declared_type='SInt16' name='bassLevel' type='s'/>
<field declared_type='SInt16' name='trebleLevel' type='s'/>
<field declared_type='short' name='frequencyBandsCount' type='s'/>
<field declared_type='void*' name='frequencyBands' type='^v'/>
<field declared_type='Boolean' name='levelMeteringEnabled' type='B'/>
</struct>
<struct name='QTSAuthenticationParams' type='{QTSAuthenticationParams=&quot;flags&quot;i&quot;userID&quot;*&quot;password&quot;*}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field const='true' declared_type='char*' name='userID' type='*'/>
<field const='true' declared_type='char*' name='password' type='*'/>
</struct>
<struct name='QTSBandwidthAlertParams' type='{QTSBandwidthAlertParams=&quot;flags&quot;i&quot;restartAt&quot;i&quot;reserved&quot;^v}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='TimeValue' name='restartAt' type='l'/>
<field declared_type='void*' name='reserved' type='^v'/>
</struct>
<struct name='QTSBufferTimeAtom' type='{QTSBufferTimeAtom=&quot;versionAndFlags&quot;i&quot;bufferTime&quot;i}'>
<field declared_type='SInt32' name='versionAndFlags' type='l'/>
<field declared_type='Fixed' name='bufferTime' type='l'/>
</struct>
<struct name='QTSCanHandleSendDataTypeParams' type='{QTSCanHandleSendDataTypeParams=&quot;modifierTypeOrInputID&quot;i&quot;isModifierType&quot;B&quot;returnedCanHandleSendDataType&quot;B}'>
<field declared_type='SInt32' name='modifierTypeOrInputID' type='l'/>
<field declared_type='Boolean' name='isModifierType' type='B'/>
<field declared_type='Boolean' name='returnedCanHandleSendDataType' type='B'/>
</struct>
<struct name='QTSClipRectAtom' type='{QTSClipRectAtom=&quot;versionAndFlags&quot;i&quot;clipRect&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}}'>
<field declared_type='SInt32' name='versionAndFlags' type='l'/>
<field declared_type='Rect' name='clipRect' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
</struct>
<struct name='QTSDataProcParams' type='{QTSDataProcParams=&quot;version&quot;i&quot;flags&quot;i&quot;stream&quot;^{QTSStreamRecord}&quot;procType&quot;I&quot;proc&quot;^?&quot;procRefCon&quot;^v}'>
<field declared_type='SInt32' name='version' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='QTSStream' name='stream' type='^{QTSStreamRecord=[1l]}'/>
<field declared_type='OSType' name='procType' type='L'/>
<field declared_type='QTSNotificationUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ComponentResult' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</field>
<field declared_type='void*' name='procRefCon' type='^v'/>
</struct>
<struct name='QTSDimensionParams' type='{QTSDimensionParams=&quot;width&quot;i&quot;height&quot;i}'>
<field declared_type='Fixed' name='width' type='l'/>
<field declared_type='Fixed' name='height' type='l'/>
</struct>
<struct name='QTSDirectConnectPrefsRecord' type='{QTSDirectConnectPrefsRecord=&quot;tcpPortID&quot;I&quot;protocol&quot;I}'>
<field declared_type='UInt32' name='tcpPortID' type='L'/>
<field declared_type='OSType' name='protocol' type='L'/>
</struct>
<struct name='QTSDurationAtom' type='{QTSDurationAtom=&quot;versionAndFlags&quot;i&quot;timeScale&quot;i&quot;duration&quot;q}'>
<field declared_type='SInt32' name='versionAndFlags' type='l'/>
<field declared_type='TimeScale' name='timeScale' type='l'/>
<field declared_type='TimeValue64' name='duration' type='q'/>
</struct>
<struct name='QTSEditEntry' type='{QTSEditEntry=&quot;presentationDuration&quot;q&quot;streamStartTime&quot;q&quot;streamRate&quot;i}'>
<field declared_type='TimeValue64' name='presentationDuration' type='q'/>
<field declared_type='TimeValue64' name='streamStartTime' type='q'/>
<field declared_type='Fixed' name='streamRate' type='l'/>
</struct>
<struct name='QTSEditList' type='{QTSEditList=&quot;numEdits&quot;i&quot;edits&quot;[1{QTSEditEntry=&quot;presentationDuration&quot;q&quot;streamStartTime&quot;q&quot;streamRate&quot;i}]}'>
<field declared_type='SInt32' name='numEdits' type='l'/>
<field declared_type='QTSEditEntry*' name='edits' type='[1{QTSEditEntry=&quot;presentationDuration&quot;q&quot;streamStartTime&quot;q&quot;streamRate&quot;i}]'/>
</struct>
<struct name='QTSErrorParams' type='{QTSErrorParams=&quot;errorString&quot;*&quot;flags&quot;i}'>
<field const='true' declared_type='char*' name='errorString' type='*'/>
<field declared_type='SInt32' name='flags' type='l'/>
</struct>
<struct name='QTSExportParams' type='{QTSExportParams=&quot;version&quot;i&quot;exportType&quot;I&quot;exportExtraData&quot;^v&quot;destinationContainerType&quot;I&quot;destinationContainerData&quot;^v&quot;destinationContainerExtras&quot;^v&quot;flagsIn&quot;i&quot;flagsOut&quot;i&quot;filterProc&quot;^?&quot;filterProcRefCon&quot;^v&quot;exportComponent&quot;^{ComponentRecord}}'>
<field declared_type='SInt32' name='version' type='l'/>
<field declared_type='OSType' name='exportType' type='L'/>
<field declared_type='void*' name='exportExtraData' type='^v'/>
<field declared_type='OSType' name='destinationContainerType' type='L'/>
<field declared_type='void*' name='destinationContainerData' type='^v'/>
<field declared_type='void*' name='destinationContainerExtras' type='^v'/>
<field declared_type='SInt32' name='flagsIn' type='l'/>
<field declared_type='SInt32' name='flagsOut' type='l'/>
<field declared_type='QTSModalFilterUPP' function_pointer='true' name='filterProc' type='^?'>
<arg declared_type='DialogPtr' type='^{OpaqueDialogPtr=}'/>
<arg const='true' declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='SInt16*' type='^s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</field>
<field declared_type='void*' name='filterProcRefCon' type='^v'/>
<field declared_type='Component' name='exportComponent' type='^{ComponentRecord=[1l]}'/>
</struct>
<struct name='QTSGetURLLinkRecord' type='{QTSGetURLLinkRecord=&quot;displayWhere&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;returnedURLLink&quot;^*}'>
<field declared_type='Point' name='displayWhere' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
<field declared_type='Handle' name='returnedURLLink' type='^*'/>
</struct>
<struct name='QTSGraphicsModeParams' type='{QTSGraphicsModeParams=&quot;graphicsMode&quot;s&quot;opColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}}'>
<field declared_type='SInt16' name='graphicsMode' type='s'/>
<field declared_type='RGBColor' name='opColor' type='{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'/>
</struct>
<struct name='QTSInfoParams' type='{QTSInfoParams=&quot;infoType&quot;I&quot;infoParams&quot;^v}'>
<field declared_type='OSType' name='infoType' type='L'/>
<field declared_type='void*' name='infoParams' type='^v'/>
</struct>
<struct name='QTSInstantOnPref' type='{QTSInstantOnPref=&quot;flags&quot;i&quot;factor&quot;i}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt32' name='factor' type='l'/>
</struct>
<struct name='QTSLoopParams' type='{QTSLoopParams=&quot;version&quot;i&quot;flags&quot;i&quot;loopFlags&quot;i&quot;flagsMask&quot;i&quot;numLoops&quot;i}'>
<field declared_type='SInt32' name='version' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt32' name='loopFlags' type='l'/>
<field declared_type='SInt32' name='flagsMask' type='l'/>
<field declared_type='SInt32' name='numLoops' type='l'/>
</struct>
<struct name='QTSLostPercentParams' type='{QTSLostPercentParams=&quot;receivedPkts&quot;I&quot;lostPkts&quot;I&quot;percent&quot;i}'>
<field declared_type='UInt32' name='receivedPkts' type='L'/>
<field declared_type='UInt32' name='lostPkts' type='L'/>
<field declared_type='Fixed' name='percent' type='l'/>
</struct>
<struct name='QTSMediaIndSampleDescriptionParams' type='{QTSMediaIndSampleDescriptionParams=&quot;index&quot;i&quot;returnedMediaType&quot;I&quot;returnedSampleDescription&quot;^^{SampleDescription}}'>
<field declared_type='SInt32' name='index' type='l'/>
<field declared_type='OSType' name='returnedMediaType' type='L'/>
<field declared_type='SampleDescriptionHandle' name='returnedSampleDescription' type='^^{SampleDescription}'/>
</struct>
<struct name='QTSMediaNotificationParams' type='{QTSMediaNotificationParams=&quot;notificationProc&quot;^?&quot;notificationRefCon&quot;^v&quot;flags&quot;i}'>
<field declared_type='QTSNotificationUPP' function_pointer='true' name='notificationProc' type='^?'>
<arg declared_type='ComponentResult' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</field>
<field declared_type='void*' name='notificationRefCon' type='^v'/>
<field declared_type='SInt32' name='flags' type='l'/>
</struct>
<struct name='QTSMediaParams' type='{QTSMediaParams=&quot;v&quot;{QTSVideoParams=&quot;width&quot;i&quot;height&quot;i&quot;matrix&quot;{MatrixRecord=&quot;matrix&quot;[3[3l]]}&quot;gWorld&quot;^{OpaqueGrafPtr}&quot;gdHandle&quot;^^{GDevice}&quot;clip&quot;^{OpaqueRgnHandle}&quot;graphicsMode&quot;s&quot;opColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}}&quot;a&quot;{QTSAudioParams=&quot;leftVolume&quot;s&quot;rightVolume&quot;s&quot;bassLevel&quot;s&quot;trebleLevel&quot;s&quot;frequencyBandsCount&quot;s&quot;frequencyBands&quot;^v&quot;levelMeteringEnabled&quot;B}}'>
<field declared_type='QTSVideoParams' name='v' type='{QTSVideoParams=&quot;width&quot;i&quot;height&quot;i&quot;matrix&quot;{MatrixRecord=&quot;matrix&quot;[3[3l]]}&quot;gWorld&quot;^{OpaqueGrafPtr}&quot;gdHandle&quot;^^{GDevice}&quot;clip&quot;^{OpaqueRgnHandle}&quot;graphicsMode&quot;s&quot;opColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}}'/>
<field declared_type='QTSAudioParams' name='a' type='{QTSAudioParams=&quot;leftVolume&quot;s&quot;rightVolume&quot;s&quot;bassLevel&quot;s&quot;trebleLevel&quot;s&quot;frequencyBandsCount&quot;s&quot;frequencyBands&quot;^v&quot;levelMeteringEnabled&quot;B}'/>
</struct>
<struct name='QTSMediaPresentationParams' type='{QTSMediaPresentationParams=&quot;presentationID&quot;^{QTSPresentationRecord}}'>
<field declared_type='QTSPresentation' name='presentationID' type='^{QTSPresentationRecord=[1l]}'/>
</struct>
<struct name='QTSMediaStreamHeaderAtom' type='{QTSMediaStreamHeaderAtom=&quot;versionAndFlags&quot;i&quot;mediaTransportType&quot;I&quot;mediaTransportDataAID&quot;I}'>
<field declared_type='SInt32' name='versionAndFlags' type='l'/>
<field declared_type='OSType' name='mediaTransportType' type='L'/>
<field declared_type='OSType' name='mediaTransportDataAID' type='L'/>
</struct>
<struct name='QTSNameParams' type='{QTSNameParams=&quot;maxNameLength&quot;i&quot;requestedLanguage&quot;i&quot;returnedActualLanguage&quot;i&quot;returnedName&quot;*}'>
<field declared_type='SInt32' name='maxNameLength' type='l'/>
<field declared_type='SInt32' name='requestedLanguage' type='l'/>
<field declared_type='SInt32' name='returnedActualLanguage' type='l'/>
<field declared_type='unsigned char*' name='returnedName' type='*'/>
</struct>
<struct name='QTSNewPresDetectedParams' type='{QTSNewPresDetectedParams=&quot;data&quot;^v}'>
<field declared_type='void*' name='data' type='^v'/>
</struct>
<struct name='QTSNewPresentationParams' type='{QTSNewPresentationParams=&quot;dataType&quot;I&quot;data&quot;^v&quot;dataLength&quot;I&quot;editList&quot;^^{QTSEditList}&quot;flags&quot;i&quot;timeScale&quot;i&quot;mediaParams&quot;^{QTSMediaParams}&quot;notificationProc&quot;^?&quot;notificationRefCon&quot;^v}'>
<field declared_type='OSType' name='dataType' type='L'/>
<field const='true' declared_type='void*' name='data' type='^v'/>
<field declared_type='UInt32' name='dataLength' type='L'/>
<field declared_type='QTSEditListHandle' name='editList' type='^^{QTSEditList}'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='TimeScale' name='timeScale' type='l'/>
<field declared_type='QTSMediaParams*' name='mediaParams' type='^{QTSMediaParams={QTSVideoParams=ii{MatrixRecord=[3[3l]]}^{OpaqueGrafPtr}^^{GDevice}^{OpaqueRgnHandle}s{RGBColor=SSS}}{QTSAudioParams=sssss^vB}}'/>
<field declared_type='QTSNotificationUPP' function_pointer='true' name='notificationProc' type='^?'>
<arg declared_type='ComponentResult' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</field>
<field declared_type='void*' name='notificationRefCon' type='^v'/>
</struct>
<struct name='QTSNewStreamParams' type='{QTSNewStreamParams=&quot;stream&quot;^{QTSStreamRecord}}'>
<field declared_type='QTSStream' name='stream' type='^{QTSStreamRecord=[1l]}'/>
</struct>
<struct name='QTSNoProxyPref' type='{QTSNoProxyPref=&quot;flags&quot;I&quot;seed&quot;I&quot;urlList&quot;[1c]}'>
<field declared_type='UInt32' name='flags' type='L'/>
<field declared_type='UInt32' name='seed' type='L'/>
<field declared_type='char*' name='urlList' type='[1c]'/>
</struct>
<struct name='QTSPanelFilterParams' type='{QTSPanelFilterParams=&quot;version&quot;i&quot;inStream&quot;^{QTSStreamRecord}&quot;inPanelType&quot;I&quot;inPanelSubType&quot;I&quot;details&quot;{QTAtomSpec=&quot;container&quot;^*&quot;atom&quot;i}}'>
<field declared_type='SInt32' name='version' type='l'/>
<field declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<field declared_type='OSType' name='inPanelType' type='L'/>
<field declared_type='OSType' name='inPanelSubType' type='L'/>
<field declared_type='QTAtomSpec' name='details' type='{QTAtomSpec=&quot;container&quot;^*&quot;atom&quot;i}'/>
</struct>
<struct name='QTSPresIdleParams' type='{QTSPresIdleParams=&quot;stream&quot;^{QTSStreamRecord}&quot;movieTimeToDisplay&quot;q&quot;flagsIn&quot;i&quot;flagsOut&quot;i}'>
<field declared_type='QTSStream' name='stream' type='^{QTSStreamRecord=[1l]}'/>
<field declared_type='TimeValue64' name='movieTimeToDisplay' type='q'/>
<field declared_type='SInt32' name='flagsIn' type='l'/>
<field declared_type='SInt32' name='flagsOut' type='l'/>
</struct>
<struct name='QTSPresParams' type='{QTSPresParams=&quot;version&quot;I&quot;editList&quot;^^{QTSEditList}&quot;flags&quot;i&quot;timeScale&quot;i&quot;mediaParams&quot;^{QTSMediaParams}&quot;notificationProc&quot;^?&quot;notificationRefCon&quot;^v}'>
<field declared_type='UInt32' name='version' type='L'/>
<field declared_type='QTSEditListHandle' name='editList' type='^^{QTSEditList}'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='TimeScale' name='timeScale' type='l'/>
<field declared_type='QTSMediaParams*' name='mediaParams' type='^{QTSMediaParams={QTSVideoParams=ii{MatrixRecord=[3[3l]]}^{OpaqueGrafPtr}^^{GDevice}^{OpaqueRgnHandle}s{RGBColor=SSS}}{QTSAudioParams=sssss^vB}}'/>
<field declared_type='QTSNotificationUPP' function_pointer='true' name='notificationProc' type='^?'>
<arg declared_type='ComponentResult' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</field>
<field declared_type='void*' name='notificationRefCon' type='^v'/>
</struct>
<struct name='QTSPresentationHeaderAtom' type='{QTSPresentationHeaderAtom=&quot;versionAndFlags&quot;i&quot;conductorOrDataType&quot;I&quot;dataAtomType&quot;I}'>
<field declared_type='SInt32' name='versionAndFlags' type='l'/>
<field declared_type='OSType' name='conductorOrDataType' type='L'/>
<field declared_type='OSType' name='dataAtomType' type='L'/>
</struct>
<struct name='QTSPresentationRecord' type='{QTSPresentationRecord=&quot;data&quot;[1l]}'>
<field declared_type='long*' name='data' type='[1l]'/>
</struct>
<struct name='QTSProxyPref' type='{QTSProxyPref=&quot;flags&quot;I&quot;portID&quot;i&quot;seed&quot;I&quot;serverNameStr&quot;[256C]}'>
<field declared_type='UInt32' name='flags' type='L'/>
<field declared_type='SInt32' name='portID' type='l'/>
<field declared_type='UInt32' name='seed' type='L'/>
<field declared_type='Str255' name='serverNameStr' type='[256C]'/>
</struct>
<struct name='QTSProxyPrefsRecord' type='{QTSProxyPrefsRecord=&quot;serverNameStr&quot;[256C]&quot;portID&quot;I}'>
<field declared_type='Str255' name='serverNameStr' type='[256C]'/>
<field declared_type='UInt32' name='portID' type='L'/>
</struct>
<struct name='QTSPushDataHasCharacteristicParams' type='{QTSPushDataHasCharacteristicParams=&quot;version&quot;i&quot;flags&quot;i&quot;characteristic&quot;I&quot;returnedHasIt&quot;B&quot;reserved1&quot;c&quot;reserved2&quot;c&quot;reserved3&quot;c}'>
<field declared_type='SInt32' name='version' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='OSType' name='characteristic' type='L'/>
<field declared_type='Boolean' name='returnedHasIt' type='B'/>
<field declared_type='char' name='reserved1' type='c'/>
<field declared_type='char' name='reserved2' type='c'/>
<field declared_type='char' name='reserved3' type='c'/>
</struct>
<struct name='QTSPushDataInfoParams' type='{QTSPushDataInfoParams=&quot;version&quot;i&quot;flags&quot;i&quot;selector&quot;I&quot;ioParams&quot;^v}'>
<field declared_type='SInt32' name='version' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='OSType' name='selector' type='L'/>
<field declared_type='void*' name='ioParams' type='^v'/>
</struct>
<struct name='QTSPushDataParams' type='{QTSPushDataParams=&quot;version&quot;i&quot;flags&quot;i&quot;sampleDescription&quot;^^{SampleDescription}&quot;sampleDescSeed&quot;I&quot;sampleTime&quot;q&quot;duration&quot;q&quot;dataLength&quot;I&quot;dataPtr&quot;^v}'>
<field declared_type='SInt32' name='version' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SampleDescriptionHandle' name='sampleDescription' type='^^{SampleDescription}'/>
<field declared_type='UInt32' name='sampleDescSeed' type='L'/>
<field declared_type='TimeValue64' name='sampleTime' type='q'/>
<field declared_type='TimeValue64' name='duration' type='q'/>
<field declared_type='UInt32' name='dataLength' type='L'/>
<field declared_type='void*' name='dataPtr' type='^v'/>
</struct>
<struct name='QTSSGChannelSettingsParams' type='{QTSSGChannelSettingsParams=&quot;settings&quot;^^{UserDataRecord}&quot;flags&quot;i}'>
<field declared_type='UserData' name='settings' type='^^{UserDataRecord}'/>
<field declared_type='SInt32' name='flags' type='l'/>
</struct>
<struct name='QTSSampleDataCallbackParams' type='{QTSSampleDataCallbackParams=&quot;version&quot;i&quot;flags&quot;i&quot;stream&quot;^{QTSStreamRecord}&quot;procType&quot;I&quot;mediaType&quot;I&quot;mediaTimeScale&quot;i&quot;sampleDesc&quot;^^{SampleDescription}&quot;sampleDescSeed&quot;I&quot;sampleTime&quot;q&quot;duration&quot;q&quot;sampleFlags&quot;i&quot;dataLength&quot;I&quot;data&quot;^v}'>
<field declared_type='SInt32' name='version' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='QTSStream' name='stream' type='^{QTSStreamRecord=[1l]}'/>
<field declared_type='OSType' name='procType' type='L'/>
<field declared_type='OSType' name='mediaType' type='L'/>
<field declared_type='TimeScale' name='mediaTimeScale' type='l'/>
<field declared_type='SampleDescriptionHandle' name='sampleDesc' type='^^{SampleDescription}'/>
<field declared_type='UInt32' name='sampleDescSeed' type='L'/>
<field declared_type='TimeValue64' name='sampleTime' type='q'/>
<field declared_type='TimeValue64' name='duration' type='q'/>
<field declared_type='SInt32' name='sampleFlags' type='l'/>
<field declared_type='UInt32' name='dataLength' type='L'/>
<field const='true' declared_type='void*' name='data' type='^v'/>
</struct>
<struct name='QTSSampleDescription' type='{QTSSampleDescription=&quot;descSize&quot;l&quot;dataFormat&quot;l&quot;resvd1&quot;l&quot;resvd2&quot;s&quot;dataRefIndex&quot;s&quot;version&quot;I&quot;resvd3&quot;I&quot;flags&quot;i}'>
<field declared_type='long' name='descSize' type='l'/>
<field declared_type='long' name='dataFormat' type='l'/>
<field declared_type='long' name='resvd1' type='l'/>
<field declared_type='short' name='resvd2' type='s'/>
<field declared_type='short' name='dataRefIndex' type='s'/>
<field declared_type='UInt32' name='version' type='L'/>
<field declared_type='UInt32' name='resvd3' type='L'/>
<field declared_type='SInt32' name='flags' type='l'/>
</struct>
<struct name='QTSSendDataExtrasParams' type='{QTSSendDataExtrasParams=&quot;version&quot;i&quot;flags&quot;i&quot;procType&quot;I}'>
<field declared_type='SInt32' name='version' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='OSType' name='procType' type='L'/>
</struct>
<struct name='QTSSettingsTextParams' type='{QTSSettingsTextParams=&quot;flags&quot;i&quot;inSettingsSelector&quot;I&quot;outSettingsAsText&quot;^*&quot;inPanelFilterProc&quot;^?&quot;inPanelFilterProcRefCon&quot;^v}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='OSType' name='inSettingsSelector' type='L'/>
<field declared_type='Handle' name='outSettingsAsText' type='^*'/>
<field declared_type='QTSPanelFilterUPP' function_pointer='true' name='inPanelFilterProc' type='^?'>
<arg declared_type='QTSPanelFilterParams*' type='^{QTSPanelFilterParams=i^{QTSStreamRecord}II{QTAtomSpec=^*i}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</field>
<field declared_type='void*' name='inPanelFilterProcRefCon' type='^v'/>
</struct>
<struct name='QTSSourcerCallbackProcParams' type='{QTSSourcerCallbackProcParams=&quot;version&quot;i&quot;flags&quot;i&quot;proc&quot;^?&quot;refCon&quot;^v}'>
<field declared_type='SInt32' name='version' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='QTSNotificationUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ComponentResult' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</field>
<field declared_type='void*' name='refCon' type='^v'/>
</struct>
<struct name='QTSSourcerDoneParams' type='{QTSSourcerDoneParams=&quot;version&quot;i&quot;flags&quot;i&quot;sourcer&quot;^{ComponentInstanceRecord}}'>
<field declared_type='SInt32' name='version' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='ComponentInstance' name='sourcer' type='^{ComponentInstanceRecord=[1l]}'/>
</struct>
<struct name='QTSSourcerInitParams' type='{QTSSourcerInitParams=&quot;version&quot;i&quot;flags&quot;i&quot;dataType&quot;I&quot;data&quot;^v&quot;dataLength&quot;I}'>
<field declared_type='SInt32' name='version' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='OSType' name='dataType' type='L'/>
<field declared_type='void*' name='data' type='^v'/>
<field declared_type='UInt32' name='dataLength' type='L'/>
</struct>
<struct name='QTSSourcerTimingParams' type='{QTSSourcerTimingParams=&quot;version&quot;i&quot;flags&quot;i&quot;timeScale&quot;i&quot;presentationStartTime&quot;q&quot;presentationEndTime&quot;q&quot;presentationCurrentTime&quot;q&quot;localStartTime&quot;q&quot;localEndTime&quot;q&quot;localCurrentTime&quot;q}'>
<field declared_type='SInt32' name='version' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='TimeScale' name='timeScale' type='l'/>
<field declared_type='TimeValue64' name='presentationStartTime' type='q'/>
<field declared_type='TimeValue64' name='presentationEndTime' type='q'/>
<field declared_type='TimeValue64' name='presentationCurrentTime' type='q'/>
<field declared_type='TimeValue64' name='localStartTime' type='q'/>
<field declared_type='TimeValue64' name='localEndTime' type='q'/>
<field declared_type='TimeValue64' name='localCurrentTime' type='q'/>
</struct>
<struct name='QTSStatHelperNextParams' type='{QTSStatHelperNextParams=&quot;flags&quot;i&quot;returnedStatisticsType&quot;I&quot;returnedStream&quot;^{QTSStreamRecord}&quot;maxStatNameLength&quot;I&quot;returnedStatName&quot;*&quot;maxStatStringLength&quot;I&quot;returnedStatString&quot;*&quot;maxStatUnitLength&quot;I&quot;returnedStatUnit&quot;*}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='OSType' name='returnedStatisticsType' type='L'/>
<field declared_type='QTSStream' name='returnedStream' type='^{QTSStreamRecord=[1l]}'/>
<field declared_type='UInt32' name='maxStatNameLength' type='L'/>
<field declared_type='char*' name='returnedStatName' type='*'/>
<field declared_type='UInt32' name='maxStatStringLength' type='L'/>
<field declared_type='char*' name='returnedStatString' type='*'/>
<field declared_type='UInt32' name='maxStatUnitLength' type='L'/>
<field declared_type='char*' name='returnedStatUnit' type='*'/>
</struct>
<struct name='QTSStatHelperRecord' type='{QTSStatHelperRecord=&quot;data&quot;[1l]}'>
<field declared_type='long*' name='data' type='[1l]'/>
</struct>
<struct name='QTSStatisticsParams' type='{QTSStatisticsParams=&quot;statisticsType&quot;I&quot;container&quot;^*&quot;parentAtom&quot;i&quot;flags&quot;i}'>
<field declared_type='OSType' name='statisticsType' type='L'/>
<field declared_type='QTAtomContainer' name='container' type='^*'/>
<field declared_type='QTAtom' name='parentAtom' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
</struct>
<struct name='QTSStatusParams' type='{QTSStatusParams=&quot;status&quot;I&quot;statusString&quot;*&quot;detailedStatus&quot;I&quot;detailedStatusString&quot;*}'>
<field declared_type='UInt32' name='status' type='L'/>
<field const='true' declared_type='char*' name='statusString' type='*'/>
<field declared_type='UInt32' name='detailedStatus' type='L'/>
<field const='true' declared_type='char*' name='detailedStatusString' type='*'/>
</struct>
<struct name='QTSStreamBuffer' type='{QTSStreamBuffer=&quot;reserved1&quot;^{QTSStreamBuffer}&quot;reserved2&quot;^{QTSStreamBuffer}&quot;next&quot;^{QTSStreamBuffer}&quot;rptr&quot;*&quot;wptr&quot;*&quot;version&quot;i&quot;metadata&quot;[4L]&quot;flags&quot;i&quot;reserved3&quot;l&quot;reserved4&quot;l&quot;reserved5&quot;l&quot;moreMeta&quot;[8L]}'>
<field declared_type='struct QTSStreamBuffer*' name='reserved1' type='^{QTSStreamBuffer=^{QTSStreamBuffer}^{QTSStreamBuffer}^{QTSStreamBuffer}**i[4L]illl[8L]}'/>
<field declared_type='struct QTSStreamBuffer*' name='reserved2' type='^{QTSStreamBuffer=^{QTSStreamBuffer}^{QTSStreamBuffer}^{QTSStreamBuffer}**i[4L]illl[8L]}'/>
<field declared_type='struct QTSStreamBuffer*' name='next' type='^{QTSStreamBuffer=^{QTSStreamBuffer}^{QTSStreamBuffer}^{QTSStreamBuffer}**i[4L]illl[8L]}'/>
<field declared_type='unsigned char*' name='rptr' type='*'/>
<field declared_type='unsigned char*' name='wptr' type='*'/>
<field declared_type='SInt32' name='version' type='l'/>
<field declared_type='UInt32*' name='metadata' type='[4L]'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='long' name='reserved3' type='l'/>
<field declared_type='long' name='reserved4' type='l'/>
<field declared_type='long' name='reserved5' type='l'/>
<field declared_type='UInt32*' name='moreMeta' type='[8L]'/>
</struct>
<struct name='QTSStreamChangedParams' type='{QTSStreamChangedParams=&quot;stream&quot;^{QTSStreamRecord}&quot;mediaComponent&quot;^{ComponentInstanceRecord}}'>
<field declared_type='QTSStream' name='stream' type='^{QTSStreamRecord=[1l]}'/>
<field declared_type='ComponentInstance' name='mediaComponent' type='^{ComponentInstanceRecord=[1l]}'/>
</struct>
<struct name='QTSStreamGoneParams' type='{QTSStreamGoneParams=&quot;stream&quot;^{QTSStreamRecord}}'>
<field declared_type='QTSStream' name='stream' type='^{QTSStreamRecord=[1l]}'/>
</struct>
<struct name='QTSStreamRecord' type='{QTSStreamRecord=&quot;data&quot;[1l]}'>
<field declared_type='long*' name='data' type='[1l]'/>
</struct>
<struct name='QTSTrackParams' type='{QTSTrackParams=&quot;version&quot;i&quot;flags&quot;i&quot;track&quot;^^{TrackType}&quot;trackStartOffset&quot;q&quot;duration&quot;q&quot;loopParams&quot;^{QTSLoopParams}}'>
<field declared_type='SInt32' name='version' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='Track' name='track' type='^^{TrackType}'/>
<field declared_type='TimeValue64' name='trackStartOffset' type='q'/>
<field declared_type='TimeValue64' name='duration' type='q'/>
<field declared_type='QTSLoopParams*' name='loopParams' type='^{QTSLoopParams=iiiii}'/>
</struct>
<struct name='QTSTransportPref' type='{QTSTransportPref=&quot;protocol&quot;I&quot;portID&quot;i&quot;flags&quot;I&quot;seed&quot;I}'>
<field declared_type='OSType' name='protocol' type='L'/>
<field declared_type='SInt32' name='portID' type='l'/>
<field declared_type='UInt32' name='flags' type='L'/>
<field declared_type='UInt32' name='seed' type='L'/>
</struct>
<struct name='QTSURLParams' type='{QTSURLParams=&quot;urlLength&quot;I&quot;url&quot;*}'>
<field declared_type='UInt32' name='urlLength' type='L'/>
<field const='true' declared_type='char*' name='url' type='*'/>
</struct>
<struct name='QTSUserDataCallbackParams' type='{QTSUserDataCallbackParams=&quot;version&quot;i&quot;flags&quot;i&quot;stream&quot;^{QTSStreamRecord}&quot;procType&quot;I&quot;userDataType&quot;I&quot;userDataHandle&quot;^*}'>
<field declared_type='SInt32' name='version' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='QTSStream' name='stream' type='^{QTSStreamRecord=[1l]}'/>
<field declared_type='OSType' name='procType' type='L'/>
<field declared_type='OSType' name='userDataType' type='L'/>
<field declared_type='Handle' name='userDataHandle' type='^*'/>
</struct>
<struct name='QTSVideoParams' type='{QTSVideoParams=&quot;width&quot;i&quot;height&quot;i&quot;matrix&quot;{MatrixRecord=&quot;matrix&quot;[3[3l]]}&quot;gWorld&quot;^{OpaqueGrafPtr}&quot;gdHandle&quot;^^{GDevice}&quot;clip&quot;^{OpaqueRgnHandle}&quot;graphicsMode&quot;s&quot;opColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}}'>
<field declared_type='Fixed' name='width' type='l'/>
<field declared_type='Fixed' name='height' type='l'/>
<field declared_type='MatrixRecord' name='matrix' type='{MatrixRecord=&quot;matrix&quot;[3[3l]]}'/>
<field declared_type='CGrafPtr' name='gWorld' type='^{OpaqueGrafPtr=}'/>
<field declared_type='GDHandle' name='gdHandle' type='^^{GDevice}'/>
<field declared_type='RgnHandle' name='clip' type='^{OpaqueRgnHandle=}'/>
<field declared_type='short' name='graphicsMode' type='s'/>
<field declared_type='RGBColor' name='opColor' type='{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'/>
</struct>
<struct name='QTSVolumesParams' type='{QTSVolumesParams=&quot;leftVolume&quot;s&quot;rightVolume&quot;s}'>
<field declared_type='SInt16' name='leftVolume' type='s'/>
<field declared_type='SInt16' name='rightVolume' type='s'/>
</struct>
<struct name='QTScheduledBandwidthRecord' type='{QTScheduledBandwidthRecord=&quot;recordSize&quot;l&quot;priority&quot;l&quot;dataRate&quot;l&quot;startTime&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;duration&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;prerollDuration&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;scale&quot;i&quot;base&quot;^{TimeBaseRecord}}'>
<field declared_type='long' name='recordSize' type='l'/>
<field declared_type='long' name='priority' type='l'/>
<field declared_type='long' name='dataRate' type='l'/>
<field declared_type='CompTimeValue' name='startTime' type='{wide=&quot;lo&quot;I&quot;hi&quot;i}'/>
<field declared_type='CompTimeValue' name='duration' type='{wide=&quot;lo&quot;I&quot;hi&quot;i}'/>
<field declared_type='CompTimeValue' name='prerollDuration' type='{wide=&quot;lo&quot;I&quot;hi&quot;i}'/>
<field declared_type='TimeScale' name='scale' type='l'/>
<field declared_type='TimeBase' name='base' type='^{TimeBaseRecord=}'/>
</struct>
<struct name='QTSettingsVersionAtomRecord' type='{QTSettingsVersionAtomRecord=&quot;componentVersion&quot;l&quot;flags&quot;s&quot;reserved&quot;s}'>
<field declared_type='long' name='componentVersion' type='l'/>
<field declared_type='short' name='flags' type='s'/>
<field declared_type='short' name='reserved' type='s'/>
</struct>
<struct name='QTSpriteButtonBehaviorStruct' type='{QTSpriteButtonBehaviorStruct=&quot;notOverNotPressedStateID&quot;i&quot;overNotPressedStateID&quot;i&quot;overPressedStateID&quot;i&quot;notOverPressedStateID&quot;i}'>
<field declared_type='QTAtomID' name='notOverNotPressedStateID' type='l'/>
<field declared_type='QTAtomID' name='overNotPressedStateID' type='l'/>
<field declared_type='QTAtomID' name='overPressedStateID' type='l'/>
<field declared_type='QTAtomID' name='notOverPressedStateID' type='l'/>
</struct>
<struct name='QTStatusStringRecord' type='{QTStatusStringRecord=&quot;stringTypeFlags&quot;l&quot;statusString&quot;*}'>
<field declared_type='long' name='stringTypeFlags' type='l'/>
<field declared_type='char*' name='statusString' type='*'/>
</struct>
<struct name='QTSyncTaskRecord' type='{QTSyncTaskRecord=&quot;qLink&quot;^v&quot;proc&quot;^?}'>
<field declared_type='void*' name='qLink' type='^v'/>
<field declared_type='QTSyncTaskUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='QTTargetDataSize' type='{QTTargetDataSize=&quot;targetDataSize&quot;L}'>
<field declared_type='unsigned long' name='targetDataSize' type='L'/>
</struct>
<struct name='QTThumbnailSettings' type='{QTThumbnailSettings=&quot;enableThumbnail&quot;l&quot;maxThumbnailWidth&quot;l&quot;maxThumbnailHeight&quot;l}'>
<field declared_type='long' name='enableThumbnail' type='l'/>
<field declared_type='long' name='maxThumbnailWidth' type='l'/>
<field declared_type='long' name='maxThumbnailHeight' type='l'/>
</struct>
<struct name='QTUUID' type='{QTUUID=&quot;data1&quot;I&quot;data2&quot;S&quot;data3&quot;S&quot;data4&quot;[8C]}'>
<field declared_type='UInt32' name='data1' type='L'/>
<field declared_type='UInt16' name='data2' type='S'/>
<field declared_type='UInt16' name='data3' type='S'/>
<field declared_type='UInt8*' name='data4' type='[8C]'/>
</struct>
<struct name='QTVRAngleRangeAtom' type='{QTVRAngleRangeAtom=&quot;minimumAngle&quot;f&quot;maximumAngle&quot;f}'>
<field declared_type='Float32' name='minimumAngle' type='f'/>
<field declared_type='Float32' name='maximumAngle' type='f'/>
</struct>
<struct name='QTVRAreaOfInterest' type='{QTVRAreaOfInterest=&quot;panAngle&quot;f&quot;tiltAngle&quot;f&quot;width&quot;f&quot;height&quot;f&quot;flags&quot;I}'>
<field declared_type='float' name='panAngle' type='f'/>
<field declared_type='float' name='tiltAngle' type='f'/>
<field declared_type='float' name='width' type='f'/>
<field declared_type='float' name='height' type='f'/>
<field declared_type='UInt32' name='flags' type='L'/>
</struct>
<struct name='QTVRCubicFaceData' type='{QTVRCubicFaceData=&quot;orientation&quot;[4f]&quot;center&quot;[2f]&quot;aspect&quot;f&quot;skew&quot;f}'>
<field declared_type='Float32*' name='orientation' type='[4f]'/>
<field declared_type='Float32*' name='center' type='[2f]'/>
<field declared_type='Float32' name='aspect' type='f'/>
<field declared_type='Float32' name='skew' type='f'/>
</struct>
<struct name='QTVRCubicViewAtom' type='{QTVRCubicViewAtom=&quot;minPan&quot;f&quot;maxPan&quot;f&quot;minTilt&quot;f&quot;maxTilt&quot;f&quot;minFieldOfView&quot;f&quot;maxFieldOfView&quot;f&quot;defaultPan&quot;f&quot;defaultTilt&quot;f&quot;defaultFieldOfView&quot;f}'>
<field declared_type='Float32' name='minPan' type='f'/>
<field declared_type='Float32' name='maxPan' type='f'/>
<field declared_type='Float32' name='minTilt' type='f'/>
<field declared_type='Float32' name='maxTilt' type='f'/>
<field declared_type='Float32' name='minFieldOfView' type='f'/>
<field declared_type='Float32' name='maxFieldOfView' type='f'/>
<field declared_type='Float32' name='defaultPan' type='f'/>
<field declared_type='Float32' name='defaultTilt' type='f'/>
<field declared_type='Float32' name='defaultFieldOfView' type='f'/>
</struct>
<struct name='QTVRCursorRecord' type='{QTVRCursorRecord=&quot;theType&quot;S&quot;rsrcID&quot;s&quot;handle&quot;^*}'>
<field declared_type='UInt16' name='theType' type='S'/>
<field declared_type='SInt16' name='rsrcID' type='s'/>
<field declared_type='Handle' name='handle' type='^*'/>
</struct>
<struct name='QTVRFloatPoint' type='{QTVRFloatPoint=&quot;x&quot;f&quot;y&quot;f}'>
<field declared_type='float' name='x' type='f'/>
<field declared_type='float' name='y' type='f'/>
</struct>
<struct name='QTVRHotSpotInfoAtom' type='{QTVRHotSpotInfoAtom=&quot;majorVersion&quot;S&quot;minorVersion&quot;S&quot;hotSpotType&quot;I&quot;nameAtomID&quot;i&quot;commentAtomID&quot;i&quot;cursorID&quot;[3l]&quot;bestPan&quot;f&quot;bestTilt&quot;f&quot;bestFOV&quot;f&quot;bestViewCenter&quot;{QTVRFloatPoint=&quot;x&quot;f&quot;y&quot;f}&quot;hotSpotRect&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;flags&quot;I&quot;reserved1&quot;I&quot;reserved2&quot;I}'>
<field declared_type='UInt16' name='majorVersion' type='S'/>
<field declared_type='UInt16' name='minorVersion' type='S'/>
<field declared_type='OSType' name='hotSpotType' type='L'/>
<field declared_type='QTAtomID' name='nameAtomID' type='l'/>
<field declared_type='QTAtomID' name='commentAtomID' type='l'/>
<field declared_type='SInt32*' name='cursorID' type='[3l]'/>
<field declared_type='Float32' name='bestPan' type='f'/>
<field declared_type='Float32' name='bestTilt' type='f'/>
<field declared_type='Float32' name='bestFOV' type='f'/>
<field declared_type='QTVRFloatPoint' name='bestViewCenter' type='{QTVRFloatPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='Rect' name='hotSpotRect' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field declared_type='UInt32' name='flags' type='L'/>
<field declared_type='UInt32' name='reserved1' type='L'/>
<field declared_type='UInt32' name='reserved2' type='L'/>
</struct>
<struct name='QTVRInterceptRecord' type='{QTVRInterceptRecord=&quot;reserved1&quot;i&quot;selector&quot;i&quot;reserved2&quot;i&quot;reserved3&quot;i&quot;paramCount&quot;i&quot;parameter&quot;[6^v]}'>
<field declared_type='SInt32' name='reserved1' type='l'/>
<field declared_type='SInt32' name='selector' type='l'/>
<field declared_type='SInt32' name='reserved2' type='l'/>
<field declared_type='SInt32' name='reserved3' type='l'/>
<field declared_type='SInt32' name='paramCount' type='l'/>
<field declared_type='void**' name='parameter' type='[6^v]'/>
</struct>
<struct name='QTVRLinkHotSpotAtom' type='{QTVRLinkHotSpotAtom=&quot;majorVersion&quot;S&quot;minorVersion&quot;S&quot;toNodeID&quot;I&quot;fromValidFlags&quot;I&quot;fromPan&quot;f&quot;fromTilt&quot;f&quot;fromFOV&quot;f&quot;fromViewCenter&quot;{QTVRFloatPoint=&quot;x&quot;f&quot;y&quot;f}&quot;toValidFlags&quot;I&quot;toPan&quot;f&quot;toTilt&quot;f&quot;toFOV&quot;f&quot;toViewCenter&quot;{QTVRFloatPoint=&quot;x&quot;f&quot;y&quot;f}&quot;distance&quot;f&quot;flags&quot;I&quot;reserved1&quot;I&quot;reserved2&quot;I}'>
<field declared_type='UInt16' name='majorVersion' type='S'/>
<field declared_type='UInt16' name='minorVersion' type='S'/>
<field declared_type='UInt32' name='toNodeID' type='L'/>
<field declared_type='UInt32' name='fromValidFlags' type='L'/>
<field declared_type='Float32' name='fromPan' type='f'/>
<field declared_type='Float32' name='fromTilt' type='f'/>
<field declared_type='Float32' name='fromFOV' type='f'/>
<field declared_type='QTVRFloatPoint' name='fromViewCenter' type='{QTVRFloatPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='UInt32' name='toValidFlags' type='L'/>
<field declared_type='Float32' name='toPan' type='f'/>
<field declared_type='Float32' name='toTilt' type='f'/>
<field declared_type='Float32' name='toFOV' type='f'/>
<field declared_type='QTVRFloatPoint' name='toViewCenter' type='{QTVRFloatPoint=&quot;x&quot;f&quot;y&quot;f}'/>
<field declared_type='Float32' name='distance' type='f'/>
<field declared_type='UInt32' name='flags' type='L'/>
<field declared_type='UInt32' name='reserved1' type='L'/>
<field declared_type='UInt32' name='reserved2' type='L'/>
</struct>
<struct name='QTVRNodeHeaderAtom' type='{QTVRNodeHeaderAtom=&quot;majorVersion&quot;S&quot;minorVersion&quot;S&quot;nodeType&quot;I&quot;nodeID&quot;i&quot;nameAtomID&quot;i&quot;commentAtomID&quot;i&quot;reserved1&quot;I&quot;reserved2&quot;I}'>
<field declared_type='UInt16' name='majorVersion' type='S'/>
<field declared_type='UInt16' name='minorVersion' type='S'/>
<field declared_type='OSType' name='nodeType' type='L'/>
<field declared_type='QTAtomID' name='nodeID' type='l'/>
<field declared_type='QTAtomID' name='nameAtomID' type='l'/>
<field declared_type='QTAtomID' name='commentAtomID' type='l'/>
<field declared_type='UInt32' name='reserved1' type='L'/>
<field declared_type='UInt32' name='reserved2' type='L'/>
</struct>
<struct name='QTVRNodeLocationAtom' type='{QTVRNodeLocationAtom=&quot;majorVersion&quot;S&quot;minorVersion&quot;S&quot;nodeType&quot;I&quot;locationFlags&quot;I&quot;locationData&quot;I&quot;reserved1&quot;I&quot;reserved2&quot;I}'>
<field declared_type='UInt16' name='majorVersion' type='S'/>
<field declared_type='UInt16' name='minorVersion' type='S'/>
<field declared_type='OSType' name='nodeType' type='L'/>
<field declared_type='UInt32' name='locationFlags' type='L'/>
<field declared_type='UInt32' name='locationData' type='L'/>
<field declared_type='UInt32' name='reserved1' type='L'/>
<field declared_type='UInt32' name='reserved2' type='L'/>
</struct>
<struct name='QTVRObjectSampleAtom' type='{QTVRObjectSampleAtom=&quot;majorVersion&quot;S&quot;minorVersion&quot;S&quot;movieType&quot;S&quot;viewStateCount&quot;S&quot;defaultViewState&quot;S&quot;mouseDownViewState&quot;S&quot;viewDuration&quot;I&quot;columns&quot;I&quot;rows&quot;I&quot;mouseMotionScale&quot;f&quot;minPan&quot;f&quot;maxPan&quot;f&quot;defaultPan&quot;f&quot;minTilt&quot;f&quot;maxTilt&quot;f&quot;defaultTilt&quot;f&quot;minFieldOfView&quot;f&quot;fieldOfView&quot;f&quot;defaultFieldOfView&quot;f&quot;defaultViewCenterH&quot;f&quot;defaultViewCenterV&quot;f&quot;viewRate&quot;f&quot;frameRate&quot;f&quot;animationSettings&quot;I&quot;controlSettings&quot;I}'>
<field declared_type='UInt16' name='majorVersion' type='S'/>
<field declared_type='UInt16' name='minorVersion' type='S'/>
<field declared_type='UInt16' name='movieType' type='S'/>
<field declared_type='UInt16' name='viewStateCount' type='S'/>
<field declared_type='UInt16' name='defaultViewState' type='S'/>
<field declared_type='UInt16' name='mouseDownViewState' type='S'/>
<field declared_type='UInt32' name='viewDuration' type='L'/>
<field declared_type='UInt32' name='columns' type='L'/>
<field declared_type='UInt32' name='rows' type='L'/>
<field declared_type='Float32' name='mouseMotionScale' type='f'/>
<field declared_type='Float32' name='minPan' type='f'/>
<field declared_type='Float32' name='maxPan' type='f'/>
<field declared_type='Float32' name='defaultPan' type='f'/>
<field declared_type='Float32' name='minTilt' type='f'/>
<field declared_type='Float32' name='maxTilt' type='f'/>
<field declared_type='Float32' name='defaultTilt' type='f'/>
<field declared_type='Float32' name='minFieldOfView' type='f'/>
<field declared_type='Float32' name='fieldOfView' type='f'/>
<field declared_type='Float32' name='defaultFieldOfView' type='f'/>
<field declared_type='Float32' name='defaultViewCenterH' type='f'/>
<field declared_type='Float32' name='defaultViewCenterV' type='f'/>
<field declared_type='Float32' name='viewRate' type='f'/>
<field declared_type='Float32' name='frameRate' type='f'/>
<field declared_type='UInt32' name='animationSettings' type='L'/>
<field declared_type='UInt32' name='controlSettings' type='L'/>
</struct>
<struct name='QTVRPanoImagingAtom' type='{QTVRPanoImagingAtom=&quot;majorVersion&quot;S&quot;minorVersion&quot;S&quot;imagingMode&quot;I&quot;imagingValidFlags&quot;I&quot;correction&quot;I&quot;quality&quot;I&quot;directDraw&quot;I&quot;imagingProperties&quot;[6L]&quot;reserved1&quot;I&quot;reserved2&quot;I}'>
<field declared_type='UInt16' name='majorVersion' type='S'/>
<field declared_type='UInt16' name='minorVersion' type='S'/>
<field declared_type='UInt32' name='imagingMode' type='L'/>
<field declared_type='UInt32' name='imagingValidFlags' type='L'/>
<field declared_type='UInt32' name='correction' type='L'/>
<field declared_type='UInt32' name='quality' type='L'/>
<field declared_type='UInt32' name='directDraw' type='L'/>
<field declared_type='UInt32*' name='imagingProperties' type='[6L]'/>
<field declared_type='UInt32' name='reserved1' type='L'/>
<field declared_type='UInt32' name='reserved2' type='L'/>
</struct>
<struct name='QTVRPanoSampleAtom' type='{QTVRPanoSampleAtom=&quot;majorVersion&quot;S&quot;minorVersion&quot;S&quot;imageRefTrackIndex&quot;I&quot;hotSpotRefTrackIndex&quot;I&quot;minPan&quot;f&quot;maxPan&quot;f&quot;minTilt&quot;f&quot;maxTilt&quot;f&quot;minFieldOfView&quot;f&quot;maxFieldOfView&quot;f&quot;defaultPan&quot;f&quot;defaultTilt&quot;f&quot;defaultFieldOfView&quot;f&quot;imageSizeX&quot;I&quot;imageSizeY&quot;I&quot;imageNumFramesX&quot;S&quot;imageNumFramesY&quot;S&quot;hotSpotSizeX&quot;I&quot;hotSpotSizeY&quot;I&quot;hotSpotNumFramesX&quot;S&quot;hotSpotNumFramesY&quot;S&quot;flags&quot;I&quot;panoType&quot;I&quot;reserved2&quot;I}'>
<field declared_type='UInt16' name='majorVersion' type='S'/>
<field declared_type='UInt16' name='minorVersion' type='S'/>
<field declared_type='UInt32' name='imageRefTrackIndex' type='L'/>
<field declared_type='UInt32' name='hotSpotRefTrackIndex' type='L'/>
<field declared_type='Float32' name='minPan' type='f'/>
<field declared_type='Float32' name='maxPan' type='f'/>
<field declared_type='Float32' name='minTilt' type='f'/>
<field declared_type='Float32' name='maxTilt' type='f'/>
<field declared_type='Float32' name='minFieldOfView' type='f'/>
<field declared_type='Float32' name='maxFieldOfView' type='f'/>
<field declared_type='Float32' name='defaultPan' type='f'/>
<field declared_type='Float32' name='defaultTilt' type='f'/>
<field declared_type='Float32' name='defaultFieldOfView' type='f'/>
<field declared_type='UInt32' name='imageSizeX' type='L'/>
<field declared_type='UInt32' name='imageSizeY' type='L'/>
<field declared_type='UInt16' name='imageNumFramesX' type='S'/>
<field declared_type='UInt16' name='imageNumFramesY' type='S'/>
<field declared_type='UInt32' name='hotSpotSizeX' type='L'/>
<field declared_type='UInt32' name='hotSpotSizeY' type='L'/>
<field declared_type='UInt16' name='hotSpotNumFramesX' type='S'/>
<field declared_type='UInt16' name='hotSpotNumFramesY' type='S'/>
<field declared_type='UInt32' name='flags' type='L'/>
<field declared_type='OSType' name='panoType' type='L'/>
<field declared_type='UInt32' name='reserved2' type='L'/>
</struct>
<struct name='QTVRSampleDescription' type='{QTVRSampleDescription=&quot;descSize&quot;I&quot;descType&quot;I&quot;reserved1&quot;I&quot;reserved2&quot;S&quot;dataRefIndex&quot;S&quot;data&quot;I}'>
<field declared_type='UInt32' name='descSize' type='L'/>
<field declared_type='UInt32' name='descType' type='L'/>
<field declared_type='UInt32' name='reserved1' type='L'/>
<field declared_type='UInt16' name='reserved2' type='S'/>
<field declared_type='UInt16' name='dataRefIndex' type='S'/>
<field declared_type='UInt32' name='data' type='L'/>
</struct>
<struct name='QTVRStringAtom' type='{QTVRStringAtom=&quot;stringUsage&quot;S&quot;stringLength&quot;S&quot;theString&quot;[4C]}'>
<field declared_type='UInt16' name='stringUsage' type='S'/>
<field declared_type='UInt16' name='stringLength' type='S'/>
<field declared_type='unsigned char*' name='theString' type='[4C]'/>
</struct>
<struct name='QTVRTrackRefEntry' type='{QTVRTrackRefEntry=&quot;trackRefType&quot;I&quot;trackResolution&quot;S&quot;trackRefIndex&quot;I}'>
<field declared_type='UInt32' name='trackRefType' type='L'/>
<field declared_type='UInt16' name='trackResolution' type='S'/>
<field declared_type='UInt32' name='trackRefIndex' type='L'/>
</struct>
<struct name='QTVRWorldHeaderAtom' type='{QTVRWorldHeaderAtom=&quot;majorVersion&quot;S&quot;minorVersion&quot;S&quot;nameAtomID&quot;i&quot;defaultNodeID&quot;I&quot;vrWorldFlags&quot;I&quot;reserved1&quot;I&quot;reserved2&quot;I}'>
<field declared_type='UInt16' name='majorVersion' type='S'/>
<field declared_type='UInt16' name='minorVersion' type='S'/>
<field declared_type='QTAtomID' name='nameAtomID' type='l'/>
<field declared_type='UInt32' name='defaultNodeID' type='L'/>
<field declared_type='UInt32' name='vrWorldFlags' type='L'/>
<field declared_type='UInt32' name='reserved1' type='L'/>
<field declared_type='UInt32' name='reserved2' type='L'/>
</struct>
<struct name='RGBRangeRecord' type='{RGBRangeRecord=&quot;minColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}&quot;maxColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}}'>
<field declared_type='RGBColor' name='minColor' type='{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'/>
<field declared_type='RGBColor' name='maxColor' type='{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'/>
</struct>
<struct name='RTPDescParams' type='{RTPDescParams=&quot;container&quot;^*&quot;presentationParentAtom&quot;i&quot;streamParentAtom&quot;i}'>
<field declared_type='QTAtomContainer' name='container' type='^*'/>
<field declared_type='QTAtom' name='presentationParentAtom' type='l'/>
<field declared_type='QTAtom' name='streamParentAtom' type='l'/>
</struct>
<struct name='RTPMPPayloadTypeParams' type='{RTPMPPayloadTypeParams=&quot;flags&quot;I&quot;payloadNumber&quot;I&quot;nameLength&quot;s&quot;payloadName&quot;*}'>
<field declared_type='UInt32' name='flags' type='L'/>
<field declared_type='UInt32' name='payloadNumber' type='L'/>
<field declared_type='short' name='nameLength' type='s'/>
<field declared_type='char*' name='payloadName' type='*'/>
</struct>
<struct name='RTPMPSampleDataParams' type='{RTPMPSampleDataParams=&quot;version&quot;I&quot;timeStamp&quot;I&quot;duration&quot;I&quot;playOffset&quot;I&quot;playRate&quot;i&quot;flags&quot;i&quot;sampleDescSeed&quot;I&quot;sampleDescription&quot;^*&quot;sampleRef&quot;I&quot;dataLength&quot;I&quot;data&quot;*&quot;releaseProc&quot;^?&quot;refCon&quot;^v}'>
<field declared_type='UInt32' name='version' type='L'/>
<field declared_type='UInt32' name='timeStamp' type='L'/>
<field declared_type='UInt32' name='duration' type='L'/>
<field declared_type='UInt32' name='playOffset' type='L'/>
<field declared_type='Fixed' name='playRate' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='UInt32' name='sampleDescSeed' type='L'/>
<field declared_type='Handle' name='sampleDescription' type='^*'/>
<field declared_type='RTPMPSampleRef' name='sampleRef' type='L'/>
<field declared_type='UInt32' name='dataLength' type='L'/>
<field const='true' declared_type='UInt8*' name='data' type='*'/>
<field declared_type='RTPMPDataReleaseUPP' function_pointer='true' name='releaseProc' type='^?'>
<arg declared_type='UInt8*' type='*'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' name='refCon' type='^v'/>
</struct>
<struct name='RTPPayloadCharacteristic' type='{RTPPayloadCharacteristic=&quot;tag&quot;I&quot;value&quot;l}'>
<field declared_type='OSType' name='tag' type='L'/>
<field declared_type='long' name='value' type='l'/>
</struct>
<struct name='RTPPayloadInfo' type='{RTPPayloadInfo=&quot;payloadFlags&quot;l&quot;payloadID&quot;C&quot;reserved1&quot;c&quot;reserved2&quot;c&quot;reserved3&quot;c&quot;payloadName&quot;[1c]}'>
<field declared_type='long' name='payloadFlags' type='l'/>
<field declared_type='UInt8' name='payloadID' type='C'/>
<field declared_type='char' name='reserved1' type='c'/>
<field declared_type='char' name='reserved2' type='c'/>
<field declared_type='char' name='reserved3' type='c'/>
<field declared_type='char*' name='payloadName' type='[1c]'/>
</struct>
<struct name='RTPPayloadSortRequest' type='{RTPPayloadSortRequest=&quot;characteristicCount&quot;l&quot;characteristic&quot;[1{RTPPayloadCharacteristic=&quot;tag&quot;I&quot;value&quot;l}]}'>
<field declared_type='long' name='characteristicCount' type='l'/>
<field declared_type='RTPPayloadCharacteristic*' name='characteristic' type='[1{RTPPayloadCharacteristic=&quot;tag&quot;I&quot;value&quot;l}]'/>
</struct>
<struct name='RTPReassemblerInfo' type='{RTPReassemblerInfo=&quot;characteristicCount&quot;l&quot;characteristic&quot;[1{RTPPayloadCharacteristic=&quot;tag&quot;I&quot;value&quot;l}]}'>
<field declared_type='long' name='characteristicCount' type='l'/>
<field declared_type='RTPPayloadCharacteristic*' name='characteristic' type='[1{RTPPayloadCharacteristic=&quot;tag&quot;I&quot;value&quot;l}]'/>
</struct>
<struct name='RTPRssmInitParams' type='{RTPRssmInitParams=&quot;ssrc&quot;I&quot;payloadType&quot;C&quot;reserved1&quot;C&quot;reserved2&quot;C&quot;reserved3&quot;C&quot;timeBase&quot;^{TimeBaseRecord}&quot;timeScale&quot;i}'>
<field declared_type='RTPSSRC' name='ssrc' type='L'/>
<field declared_type='UInt8' name='payloadType' type='C'/>
<field declared_type='UInt8' name='reserved1' type='C'/>
<field declared_type='UInt8' name='reserved2' type='C'/>
<field declared_type='UInt8' name='reserved3' type='C'/>
<field declared_type='TimeBase' name='timeBase' type='^{TimeBaseRecord=}'/>
<field declared_type='TimeScale' name='timeScale' type='l'/>
</struct>
<struct name='RTPRssmMoreInitParams' type='{RTPRssmMoreInitParams=&quot;initParams&quot;{RTPRssmInitParams=&quot;ssrc&quot;I&quot;payloadType&quot;C&quot;reserved1&quot;C&quot;reserved2&quot;C&quot;reserved3&quot;C&quot;timeBase&quot;^{TimeBaseRecord}&quot;timeScale&quot;i}&quot;version&quot;i&quot;desc&quot;{RTPDescParams=&quot;container&quot;^*&quot;presentationParentAtom&quot;i&quot;streamParentAtom&quot;i}}'>
<field declared_type='RTPRssmInitParams' name='initParams' type='{RTPRssmInitParams=&quot;ssrc&quot;I&quot;payloadType&quot;C&quot;reserved1&quot;C&quot;reserved2&quot;C&quot;reserved3&quot;C&quot;timeBase&quot;^{TimeBaseRecord}&quot;timeScale&quot;i}'/>
<field declared_type='SInt32' name='version' type='l'/>
<field declared_type='RTPDescParams' name='desc' type='{RTPDescParams=&quot;container&quot;^*&quot;presentationParentAtom&quot;i&quot;streamParentAtom&quot;i}'/>
</struct>
<struct name='RTPRssmPacket' type='{RTPRssmPacket=&quot;next&quot;^{RTPRssmPacket}&quot;prev&quot;^{RTPRssmPacket}&quot;streamBuffer&quot;^{QTSStreamBuffer}&quot;paramsFilledIn&quot;B&quot;reserved&quot;C&quot;sequenceNum&quot;S&quot;transportHeaderLength&quot;I&quot;payloadHeaderLength&quot;I&quot;dataLength&quot;I&quot;serverEditParams&quot;{SHServerEditParameters=&quot;version&quot;I&quot;editRate&quot;i&quot;dataStartTime_mediaAxis&quot;q&quot;dataEndTime_mediaAxis&quot;q}&quot;timeStamp&quot;q&quot;chunkFlags&quot;i&quot;flags&quot;i}'>
<field declared_type='struct RTPRssmPacket*' name='next' type='^{RTPRssmPacket=^{RTPRssmPacket}^{RTPRssmPacket}^{QTSStreamBuffer}BCSIII{SHServerEditParameters=Iiqq}qii}'/>
<field declared_type='struct RTPRssmPacket*' name='prev' type='^{RTPRssmPacket=^{RTPRssmPacket}^{RTPRssmPacket}^{QTSStreamBuffer}BCSIII{SHServerEditParameters=Iiqq}qii}'/>
<field declared_type='QTSStreamBuffer*' name='streamBuffer' type='^{QTSStreamBuffer=^{QTSStreamBuffer}^{QTSStreamBuffer}^{QTSStreamBuffer}**i[4L]illl[8L]}'/>
<field declared_type='Boolean' name='paramsFilledIn' type='B'/>
<field declared_type='UInt8' name='reserved' type='C'/>
<field declared_type='UInt16' name='sequenceNum' type='S'/>
<field declared_type='UInt32' name='transportHeaderLength' type='L'/>
<field declared_type='UInt32' name='payloadHeaderLength' type='L'/>
<field declared_type='UInt32' name='dataLength' type='L'/>
<field declared_type='SHServerEditParameters' name='serverEditParams' type='{SHServerEditParameters=&quot;version&quot;I&quot;editRate&quot;i&quot;dataStartTime_mediaAxis&quot;q&quot;dataEndTime_mediaAxis&quot;q}'/>
<field declared_type='TimeValue64' name='timeStamp' type='q'/>
<field declared_type='SInt32' name='chunkFlags' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
</struct>
<struct name='RTPSendStreamBufferRangeParams' type='{RTPSendStreamBufferRangeParams=&quot;streamBuffer&quot;^{QTSStreamBuffer}&quot;presentationTime&quot;q&quot;chunkStartPosition&quot;I&quot;numDataBytes&quot;I&quot;chunkFlags&quot;i&quot;flags&quot;i&quot;serverEditParams&quot;^{SHServerEditParameters}}'>
<field declared_type='QTSStreamBuffer*' name='streamBuffer' type='^{QTSStreamBuffer=^{QTSStreamBuffer}^{QTSStreamBuffer}^{QTSStreamBuffer}**i[4L]illl[8L]}'/>
<field declared_type='TimeValue64' name='presentationTime' type='q'/>
<field declared_type='UInt32' name='chunkStartPosition' type='L'/>
<field declared_type='UInt32' name='numDataBytes' type='L'/>
<field declared_type='SInt32' name='chunkFlags' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field const='true' declared_type='SHServerEditParameters*' name='serverEditParams' type='^{SHServerEditParameters=Iiqq}'/>
</struct>
<struct name='ReferenceMovieDataRefRecord' type='{ReferenceMovieDataRefRecord=&quot;flags&quot;i&quot;dataRefType&quot;I&quot;dataRefSize&quot;i&quot;dataRef&quot;[1c]}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='OSType' name='dataRefType' type='L'/>
<field declared_type='SInt32' name='dataRefSize' type='l'/>
<field declared_type='char*' name='dataRef' type='[1c]'/>
</struct>
<struct name='ReferenceMovieNetworkStatusRecord' type='{ReferenceMovieNetworkStatusRecord=&quot;flags&quot;I&quot;valueCount&quot;I&quot;netStatusValues&quot;[1l]}'>
<field declared_type='UInt32' name='flags' type='L'/>
<field declared_type='UInt32' name='valueCount' type='L'/>
<field declared_type='SInt32*' name='netStatusValues' type='[1l]'/>
</struct>
<struct name='ResolvedQTEventSpec' type='{ResolvedQTEventSpec=&quot;actionAtom&quot;{QTAtomSpec=&quot;container&quot;^*&quot;atom&quot;i}&quot;targetTrack&quot;^^{TrackType}&quot;targetRefCon&quot;l}'>
<field declared_type='QTAtomSpec' name='actionAtom' type='{QTAtomSpec=&quot;container&quot;^*&quot;atom&quot;i}'/>
<field declared_type='Track' name='targetTrack' type='^^{TrackType}'/>
<field declared_type='long' name='targetRefCon' type='l'/>
</struct>
<struct name='RgnAtom' type='{RgnAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;rgnSize&quot;s&quot;rgnBBox&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;data&quot;[1c]}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='SInt16' name='rgnSize' type='s'/>
<field declared_type='Rect' name='rgnBBox' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field declared_type='char*' name='data' type='[1c]'/>
</struct>
<struct name='SCAudioFormatFlagsRestrictions' type='{SCAudioFormatFlagsRestrictions=&quot;formatFlagsMask&quot;I&quot;formatFlagsValues&quot;I}'>
<field declared_type='UInt32' name='formatFlagsMask' type='L'/>
<field declared_type='UInt32' name='formatFlagsValues' type='L'/>
</struct>
<struct name='SCDataRateSettings' type='{SCDataRateSettings=&quot;dataRate&quot;l&quot;frameDuration&quot;l&quot;minSpatialQuality&quot;I&quot;minTemporalQuality&quot;I}'>
<field declared_type='long' name='dataRate' type='l'/>
<field declared_type='long' name='frameDuration' type='l'/>
<field declared_type='CodecQ' name='minSpatialQuality' type='L'/>
<field declared_type='CodecQ' name='minTemporalQuality' type='L'/>
</struct>
<struct name='SCExtendedProcs' type='{SCExtendedProcs=&quot;filterProc&quot;^?&quot;hookProc&quot;^?&quot;refcon&quot;l&quot;customName&quot;[32C]}'>
<field declared_type='SCModalFilterUPP' function_pointer='true' name='filterProc' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</field>
<field declared_type='SCModalHookUPP' function_pointer='true' name='hookProc' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<retval declared_type='short' type='s'/>
</field>
<field declared_type='long' name='refcon' type='l'/>
<field declared_type='Str31' name='customName' type='[32C]'/>
</struct>
<struct name='SCParams' type='{SCParams=&quot;flags&quot;l&quot;theCodecType&quot;I&quot;theCodec&quot;^{ComponentRecord}&quot;spatialQuality&quot;I&quot;temporalQuality&quot;I&quot;depth&quot;s&quot;frameRate&quot;i&quot;keyFrameRate&quot;l&quot;reserved1&quot;l&quot;reserved2&quot;l}'>
<field declared_type='long' name='flags' type='l'/>
<field declared_type='CodecType' name='theCodecType' type='L'/>
<field declared_type='CodecComponent' name='theCodec' type='^{ComponentRecord=[1l]}'/>
<field declared_type='CodecQ' name='spatialQuality' type='L'/>
<field declared_type='CodecQ' name='temporalQuality' type='L'/>
<field declared_type='short' name='depth' type='s'/>
<field declared_type='Fixed' name='frameRate' type='l'/>
<field declared_type='long' name='keyFrameRate' type='l'/>
<field declared_type='long' name='reserved1' type='l'/>
<field declared_type='long' name='reserved2' type='l'/>
</struct>
<struct name='SCSpatialSettings' type='{SCSpatialSettings=&quot;codecType&quot;I&quot;codec&quot;^{ComponentRecord}&quot;depth&quot;s&quot;spatialQuality&quot;I}'>
<field declared_type='CodecType' name='codecType' type='L'/>
<field declared_type='CodecComponent' name='codec' type='^{ComponentRecord=[1l]}'/>
<field declared_type='short' name='depth' type='s'/>
<field declared_type='CodecQ' name='spatialQuality' type='L'/>
</struct>
<struct name='SCTemporalSettings' type='{SCTemporalSettings=&quot;temporalQuality&quot;I&quot;frameRate&quot;i&quot;keyFrameRate&quot;l}'>
<field declared_type='CodecQ' name='temporalQuality' type='L'/>
<field declared_type='Fixed' name='frameRate' type='l'/>
<field declared_type='long' name='keyFrameRate' type='l'/>
</struct>
<struct name='SCVideoMultiPassEncodingSettings' type='{SCVideoMultiPassEncodingSettings=&quot;allowMultiPassEncoding&quot;B&quot;maxEncodingPassCount&quot;C}'>
<field declared_type='Boolean' name='allowMultiPassEncoding' type='B'/>
<field declared_type='unsigned char' name='maxEncodingPassCount' type='C'/>
</struct>
<struct name='SCWindowSettings' type='{SCWindowSettings=&quot;size&quot;l&quot;windowRefKind&quot;l&quot;parentWindow&quot;^v}'>
<field declared_type='long' name='size' type='l'/>
<field declared_type='long' name='windowRefKind' type='l'/>
<field declared_type='void*' name='parentWindow' type='^v'/>
</struct>
<struct name='SGAudioCallbackStruct' type='{SGAudioCallbackStruct=&quot;inputProc&quot;^?&quot;inputProcRefCon&quot;^v}'>
<field declared_type='SGAudioCallback' function_pointer='true' name='inputProc' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='SGAudioCallbackFlags*' type='^I'/>
<arg const='true' declared_type='AudioTimeStamp*' type='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<arg const='true' declared_type='UInt32*' type='^I'/>
<arg const='true' declared_type='AudioBufferList*' type='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<arg const='true' declared_type='AudioStreamPacketDescription*' type='^{AudioStreamPacketDescription=qII}'/>
<retval declared_type='OSStatus' type='l'/>
</field>
<field declared_type='void*' name='inputProcRefCon' type='^v'/>
</struct>
<struct name='SGCompressInfo' type='{SGCompressInfo=&quot;buffer&quot;*&quot;bufferSize&quot;L&quot;similarity&quot;C&quot;reserved&quot;C}'>
<field declared_type='Ptr' name='buffer' type='*'/>
<field declared_type='unsigned long' name='bufferSize' type='L'/>
<field declared_type='UInt8' name='similarity' type='C'/>
<field declared_type='UInt8' name='reserved' type='C'/>
</struct>
<struct name='SGDeviceInputListRecord' type='{SGDeviceInputListRecord=&quot;count&quot;s&quot;selectedIndex&quot;s&quot;reserved&quot;l&quot;entry&quot;[1{SGDeviceInputName=&quot;name&quot;[64C]&quot;icon&quot;^*&quot;flags&quot;l&quot;reserved&quot;l}]}'>
<field declared_type='short' name='count' type='s'/>
<field declared_type='short' name='selectedIndex' type='s'/>
<field declared_type='long' name='reserved' type='l'/>
<field declared_type='SGDeviceInputName*' name='entry' type='[1{SGDeviceInputName=&quot;name&quot;[64C]&quot;icon&quot;^*&quot;flags&quot;l&quot;reserved&quot;l}]'/>
</struct>
<struct name='SGDeviceInputName' type='{SGDeviceInputName=&quot;name&quot;[64C]&quot;icon&quot;^*&quot;flags&quot;l&quot;reserved&quot;l}'>
<field declared_type='Str63' name='name' type='[64C]'/>
<field declared_type='Handle' name='icon' type='^*'/>
<field declared_type='long' name='flags' type='l'/>
<field declared_type='long' name='reserved' type='l'/>
</struct>
<struct name='SGDeviceListRecord' type='{SGDeviceListRecord=&quot;count&quot;s&quot;selectedIndex&quot;s&quot;reserved&quot;l&quot;entry&quot;[1{SGDeviceName=&quot;name&quot;[64C]&quot;icon&quot;^*&quot;flags&quot;l&quot;refCon&quot;l&quot;inputs&quot;^^{SGDeviceInputListRecord}}]}'>
<field declared_type='short' name='count' type='s'/>
<field declared_type='short' name='selectedIndex' type='s'/>
<field declared_type='long' name='reserved' type='l'/>
<field declared_type='SGDeviceName*' name='entry' type='[1{SGDeviceName=&quot;name&quot;[64C]&quot;icon&quot;^*&quot;flags&quot;l&quot;refCon&quot;l&quot;inputs&quot;^^{SGDeviceInputListRecord}}]'/>
</struct>
<struct name='SGDeviceName' type='{SGDeviceName=&quot;name&quot;[64C]&quot;icon&quot;^*&quot;flags&quot;l&quot;refCon&quot;l&quot;inputs&quot;^^{SGDeviceInputListRecord}}'>
<field declared_type='Str63' name='name' type='[64C]'/>
<field declared_type='Handle' name='icon' type='^*'/>
<field declared_type='long' name='flags' type='l'/>
<field declared_type='long' name='refCon' type='l'/>
<field declared_type='SGDeviceInputList' name='inputs' type='^^{SGDeviceInputListRecord}'/>
</struct>
<struct name='SGOutputRecord' type='{SGOutputRecord=&quot;data&quot;[1l]}'>
<field declared_type='long*' name='data' type='[1l]'/>
</struct>
<struct name='SHChunkRecord' type='{SHChunkRecord=&quot;version&quot;I&quot;reserved1&quot;l&quot;flags&quot;i&quot;dataSize&quot;I&quot;dataPtr&quot;*&quot;reserved2&quot;l&quot;reserved3&quot;l&quot;presentationTime&quot;q&quot;reserved4&quot;l&quot;reserved5&quot;l&quot;serverEditParameters&quot;^{SHServerEditParameters}&quot;reserved6&quot;l&quot;reserved7&quot;l}'>
<field declared_type='UInt32' name='version' type='L'/>
<field declared_type='long' name='reserved1' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='UInt32' name='dataSize' type='L'/>
<field declared_type='UInt8*' name='dataPtr' type='*'/>
<field declared_type='long' name='reserved2' type='l'/>
<field declared_type='long' name='reserved3' type='l'/>
<field declared_type='TimeValue64' name='presentationTime' type='q'/>
<field declared_type='long' name='reserved4' type='l'/>
<field declared_type='long' name='reserved5' type='l'/>
<field const='true' declared_type='SHServerEditParameters*' name='serverEditParameters' type='^{SHServerEditParameters=Iiqq}'/>
<field declared_type='long' name='reserved6' type='l'/>
<field declared_type='long' name='reserved7' type='l'/>
</struct>
<struct name='SHExtendedChunkRecord' type='{SHExtendedChunkRecord=&quot;chunk&quot;{SHChunkRecord=&quot;version&quot;I&quot;reserved1&quot;l&quot;flags&quot;i&quot;dataSize&quot;I&quot;dataPtr&quot;*&quot;reserved2&quot;l&quot;reserved3&quot;l&quot;presentationTime&quot;q&quot;reserved4&quot;l&quot;reserved5&quot;l&quot;serverEditParameters&quot;^{SHServerEditParameters}&quot;reserved6&quot;l&quot;reserved7&quot;l}&quot;extendedFlags&quot;i&quot;extendedData&quot;[10l]}'>
<field declared_type='SHChunkRecord' name='chunk' type='{SHChunkRecord=&quot;version&quot;I&quot;reserved1&quot;l&quot;flags&quot;i&quot;dataSize&quot;I&quot;dataPtr&quot;*&quot;reserved2&quot;l&quot;reserved3&quot;l&quot;presentationTime&quot;q&quot;reserved4&quot;l&quot;reserved5&quot;l&quot;serverEditParameters&quot;^{SHServerEditParameters}&quot;reserved6&quot;l&quot;reserved7&quot;l}'/>
<field declared_type='SInt32' name='extendedFlags' type='l'/>
<field declared_type='SInt32*' name='extendedData' type='[10l]'/>
</struct>
<struct name='SHServerEditParameters' type='{SHServerEditParameters=&quot;version&quot;I&quot;editRate&quot;i&quot;dataStartTime_mediaAxis&quot;q&quot;dataEndTime_mediaAxis&quot;q}'>
<field declared_type='UInt32' name='version' type='L'/>
<field declared_type='Fixed' name='editRate' type='l'/>
<field declared_type='TimeValue64' name='dataStartTime_mediaAxis' type='q'/>
<field declared_type='TimeValue64' name='dataEndTime_mediaAxis' type='q'/>
</struct>
<struct name='SampleDependencyAtom' type='{SampleDependencyAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;sampleDependencyTable&quot;[1C]}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='UInt8*' name='sampleDependencyTable' type='[1C]'/>
</struct>
<struct name='SampleDescription' type='{SampleDescription=&quot;descSize&quot;i&quot;dataFormat&quot;i&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s}'>
<field declared_type='SInt32' name='descSize' type='l'/>
<field declared_type='SInt32' name='dataFormat' type='l'/>
<field declared_type='SInt32' name='resvd1' type='l'/>
<field declared_type='SInt16' name='resvd2' type='s'/>
<field declared_type='SInt16' name='dataRefIndex' type='s'/>
</struct>
<struct name='SampleDescriptionAtom' type='{SampleDescriptionAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;sampleDescTable&quot;[1{SampleDescription=&quot;descSize&quot;i&quot;dataFormat&quot;i&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s}]}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt32' name='numEntries' type='l'/>
<field declared_type='SampleDescription*' name='sampleDescTable' type='[1{SampleDescription=&quot;descSize&quot;i&quot;dataFormat&quot;i&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s}]'/>
</struct>
<struct name='SampleReference64Record' type='{SampleReference64Record=&quot;dataOffset&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;dataSize&quot;L&quot;durationPerSample&quot;i&quot;numberOfSamples&quot;L&quot;sampleFlags&quot;s}'>
<field declared_type='wide' name='dataOffset' type='{wide=&quot;lo&quot;I&quot;hi&quot;i}'/>
<field declared_type='unsigned long' name='dataSize' type='L'/>
<field declared_type='TimeValue' name='durationPerSample' type='l'/>
<field declared_type='unsigned long' name='numberOfSamples' type='L'/>
<field declared_type='short' name='sampleFlags' type='s'/>
</struct>
<struct name='SampleReferenceRecord' type='{SampleReferenceRecord=&quot;dataOffset&quot;l&quot;dataSize&quot;l&quot;durationPerSample&quot;i&quot;numberOfSamples&quot;l&quot;sampleFlags&quot;s}'>
<field declared_type='long' name='dataOffset' type='l'/>
<field declared_type='long' name='dataSize' type='l'/>
<field declared_type='TimeValue' name='durationPerSample' type='l'/>
<field declared_type='long' name='numberOfSamples' type='l'/>
<field declared_type='short' name='sampleFlags' type='s'/>
</struct>
<struct name='SampleSizeAtom' type='{SampleSizeAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;sampleSize&quot;i&quot;numEntries&quot;i&quot;sampleSizeTable&quot;[1l]}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt32' name='sampleSize' type='l'/>
<field declared_type='SInt32' name='numEntries' type='l'/>
<field declared_type='SInt32*' name='sampleSizeTable' type='[1l]'/>
</struct>
<struct name='SampleTableAtom' type='{SampleTableAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;sampleDescription&quot;{SampleDescriptionAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;sampleDescTable&quot;[1{SampleDescription=&quot;descSize&quot;i&quot;dataFormat&quot;i&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s}]}&quot;timeToSampleNum&quot;{TimeToSampleNumAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;timeToSampleNumTable&quot;[1{TimeToSampleNum=&quot;sampleCount&quot;i&quot;sampleDuration&quot;i}]}&quot;sampleToChunk&quot;{SampleToChunkAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;sampleToChunkTable&quot;[1{SampleToChunk=&quot;firstChunk&quot;i&quot;samplesPerChunk&quot;i&quot;sampleDescriptionID&quot;i}]}&quot;syncSample&quot;{SyncSampleAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;syncSampleTable&quot;[1l]}&quot;sampleSize&quot;{SampleSizeAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;sampleSize&quot;i&quot;numEntries&quot;i&quot;sampleSizeTable&quot;[1l]}&quot;chunkOffset&quot;{ChunkOffsetAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;chunkOffsetTable&quot;[1l]}&quot;shadowSync&quot;{ShadowSyncAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;shadowSyncTable&quot;[1{ShadowSync=&quot;fdSampleNum&quot;i&quot;syncSampleNum&quot;i}]}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='SampleDescriptionAtom' name='sampleDescription' type='{SampleDescriptionAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;sampleDescTable&quot;[1{SampleDescription=&quot;descSize&quot;i&quot;dataFormat&quot;i&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s}]}'/>
<field declared_type='TimeToSampleNumAtom' name='timeToSampleNum' type='{TimeToSampleNumAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;timeToSampleNumTable&quot;[1{TimeToSampleNum=&quot;sampleCount&quot;i&quot;sampleDuration&quot;i}]}'/>
<field declared_type='SampleToChunkAtom' name='sampleToChunk' type='{SampleToChunkAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;sampleToChunkTable&quot;[1{SampleToChunk=&quot;firstChunk&quot;i&quot;samplesPerChunk&quot;i&quot;sampleDescriptionID&quot;i}]}'/>
<field declared_type='SyncSampleAtom' name='syncSample' type='{SyncSampleAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;syncSampleTable&quot;[1l]}'/>
<field declared_type='SampleSizeAtom' name='sampleSize' type='{SampleSizeAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;sampleSize&quot;i&quot;numEntries&quot;i&quot;sampleSizeTable&quot;[1l]}'/>
<field declared_type='ChunkOffsetAtom' name='chunkOffset' type='{ChunkOffsetAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;chunkOffsetTable&quot;[1l]}'/>
<field declared_type='ShadowSyncAtom' name='shadowSync' type='{ShadowSyncAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;shadowSyncTable&quot;[1{ShadowSync=&quot;fdSampleNum&quot;i&quot;syncSampleNum&quot;i}]}'/>
</struct>
<struct name='SampleToChunk' type='{SampleToChunk=&quot;firstChunk&quot;i&quot;samplesPerChunk&quot;i&quot;sampleDescriptionID&quot;i}'>
<field declared_type='SInt32' name='firstChunk' type='l'/>
<field declared_type='SInt32' name='samplesPerChunk' type='l'/>
<field declared_type='SInt32' name='sampleDescriptionID' type='l'/>
</struct>
<struct name='SampleToChunkAtom' type='{SampleToChunkAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;sampleToChunkTable&quot;[1{SampleToChunk=&quot;firstChunk&quot;i&quot;samplesPerChunk&quot;i&quot;sampleDescriptionID&quot;i}]}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt32' name='numEntries' type='l'/>
<field declared_type='SampleToChunk*' name='sampleToChunkTable' type='[1{SampleToChunk=&quot;firstChunk&quot;i&quot;samplesPerChunk&quot;i&quot;sampleDescriptionID&quot;i}]'/>
</struct>
<struct name='SecureContentInfoAtom' type='{SecureContentInfoAtom=&quot;size&quot;i&quot;atomType&quot;i}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
</struct>
<struct name='SecureContentSchemeInfoAtom' type='{SecureContentSchemeInfoAtom=&quot;size&quot;i&quot;atomType&quot;i}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
</struct>
<struct name='SecureContentSchemeTypeAtom' type='{SecureContentSchemeTypeAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;schemeType&quot;i&quot;schemeVersion&quot;I}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt32' name='schemeType' type='l'/>
<field declared_type='UInt32' name='schemeVersion' type='L'/>
</struct>
<struct name='SeqGrabExtendedFrameInfo' type='{SeqGrabExtendedFrameInfo=&quot;frameOffset&quot;{wide=&quot;lo&quot;I&quot;hi&quot;i}&quot;frameTime&quot;l&quot;frameSize&quot;l&quot;frameChannel&quot;^{ComponentInstanceRecord}&quot;frameRefCon&quot;l&quot;frameOutput&quot;^{SGOutputRecord}}'>
<field declared_type='wide' name='frameOffset' type='{wide=&quot;lo&quot;I&quot;hi&quot;i}'/>
<field declared_type='long' name='frameTime' type='l'/>
<field declared_type='long' name='frameSize' type='l'/>
<field declared_type='SGChannel' name='frameChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<field declared_type='long' name='frameRefCon' type='l'/>
<field declared_type='SGOutput' name='frameOutput' type='^{SGOutputRecord=[1l]}'/>
</struct>
<struct name='SeqGrabFrameInfo' type='{SeqGrabFrameInfo=&quot;frameOffset&quot;l&quot;frameTime&quot;l&quot;frameSize&quot;l&quot;frameChannel&quot;^{ComponentInstanceRecord}&quot;frameRefCon&quot;l}'>
<field declared_type='long' name='frameOffset' type='l'/>
<field declared_type='long' name='frameTime' type='l'/>
<field declared_type='long' name='frameSize' type='l'/>
<field declared_type='SGChannel' name='frameChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<field declared_type='long' name='frameRefCon' type='l'/>
</struct>
<struct name='ShadowSync' type='{ShadowSync=&quot;fdSampleNum&quot;i&quot;syncSampleNum&quot;i}'>
<field declared_type='SInt32' name='fdSampleNum' type='l'/>
<field declared_type='SInt32' name='syncSampleNum' type='l'/>
</struct>
<struct name='ShadowSyncAtom' type='{ShadowSyncAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;shadowSyncTable&quot;[1{ShadowSync=&quot;fdSampleNum&quot;i&quot;syncSampleNum&quot;i}]}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt32' name='numEntries' type='l'/>
<field declared_type='ShadowSync*' name='shadowSyncTable' type='[1{ShadowSync=&quot;fdSampleNum&quot;i&quot;syncSampleNum&quot;i}]'/>
</struct>
<struct name='SoundDescription' type='{SoundDescription=&quot;descSize&quot;i&quot;dataFormat&quot;i&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s&quot;version&quot;s&quot;revlevel&quot;s&quot;vendor&quot;i&quot;numChannels&quot;s&quot;sampleSize&quot;s&quot;compressionID&quot;s&quot;packetSize&quot;s&quot;sampleRate&quot;I}'>
<field declared_type='SInt32' name='descSize' type='l'/>
<field declared_type='SInt32' name='dataFormat' type='l'/>
<field declared_type='SInt32' name='resvd1' type='l'/>
<field declared_type='SInt16' name='resvd2' type='s'/>
<field declared_type='SInt16' name='dataRefIndex' type='s'/>
<field declared_type='SInt16' name='version' type='s'/>
<field declared_type='SInt16' name='revlevel' type='s'/>
<field declared_type='SInt32' name='vendor' type='l'/>
<field declared_type='SInt16' name='numChannels' type='s'/>
<field declared_type='SInt16' name='sampleSize' type='s'/>
<field declared_type='SInt16' name='compressionID' type='s'/>
<field declared_type='SInt16' name='packetSize' type='s'/>
<field declared_type='UnsignedFixed' name='sampleRate' type='L'/>
</struct>
<struct name='SoundDescriptionV1' type='{SoundDescriptionV1=&quot;desc&quot;{SoundDescription=&quot;descSize&quot;i&quot;dataFormat&quot;i&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s&quot;version&quot;s&quot;revlevel&quot;s&quot;vendor&quot;i&quot;numChannels&quot;s&quot;sampleSize&quot;s&quot;compressionID&quot;s&quot;packetSize&quot;s&quot;sampleRate&quot;I}&quot;samplesPerPacket&quot;I&quot;bytesPerPacket&quot;I&quot;bytesPerFrame&quot;I&quot;bytesPerSample&quot;I}'>
<field declared_type='SoundDescription' name='desc' type='{SoundDescription=&quot;descSize&quot;i&quot;dataFormat&quot;i&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s&quot;version&quot;s&quot;revlevel&quot;s&quot;vendor&quot;i&quot;numChannels&quot;s&quot;sampleSize&quot;s&quot;compressionID&quot;s&quot;packetSize&quot;s&quot;sampleRate&quot;I}'/>
<field declared_type='UInt32' name='samplesPerPacket' type='L'/>
<field declared_type='UInt32' name='bytesPerPacket' type='L'/>
<field declared_type='UInt32' name='bytesPerFrame' type='L'/>
<field declared_type='UInt32' name='bytesPerSample' type='L'/>
</struct>
<struct name='SoundDescriptionV2' type='{SoundDescriptionV2=&quot;descSize&quot;i&quot;dataFormat&quot;I&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s&quot;version&quot;s&quot;revlevel&quot;s&quot;vendor&quot;i&quot;always3&quot;s&quot;always16&quot;s&quot;alwaysMinus2&quot;s&quot;always0&quot;s&quot;always65536&quot;I&quot;sizeOfStructOnly&quot;I&quot;audioSampleRate&quot;d&quot;numAudioChannels&quot;I&quot;always7F000000&quot;i&quot;constBitsPerChannel&quot;I&quot;formatSpecificFlags&quot;I&quot;constBytesPerAudioPacket&quot;I&quot;constLPCMFramesPerAudioPacket&quot;I}'>
<field declared_type='SInt32' name='descSize' type='l'/>
<field declared_type='OSType' name='dataFormat' type='L'/>
<field declared_type='SInt32' name='resvd1' type='l'/>
<field declared_type='SInt16' name='resvd2' type='s'/>
<field declared_type='SInt16' name='dataRefIndex' type='s'/>
<field declared_type='SInt16' name='version' type='s'/>
<field declared_type='SInt16' name='revlevel' type='s'/>
<field declared_type='SInt32' name='vendor' type='l'/>
<field declared_type='SInt16' name='always3' type='s'/>
<field declared_type='SInt16' name='always16' type='s'/>
<field declared_type='SInt16' name='alwaysMinus2' type='s'/>
<field declared_type='SInt16' name='always0' type='s'/>
<field declared_type='UInt32' name='always65536' type='L'/>
<field declared_type='UInt32' name='sizeOfStructOnly' type='L'/>
<field declared_type='Float64' name='audioSampleRate' type='d'/>
<field declared_type='UInt32' name='numAudioChannels' type='L'/>
<field declared_type='SInt32' name='always7F000000' type='l'/>
<field declared_type='UInt32' name='constBitsPerChannel' type='L'/>
<field declared_type='UInt32' name='formatSpecificFlags' type='L'/>
<field declared_type='UInt32' name='constBytesPerAudioPacket' type='L'/>
<field declared_type='UInt32' name='constLPCMFramesPerAudioPacket' type='L'/>
</struct>
<struct name='SoundMediaInfo' type='{SoundMediaInfo=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{SoundMediaInfoHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;smiHeader&quot;{SoundMediaInfoHeader=&quot;flags&quot;i&quot;balance&quot;s&quot;rsrvd&quot;s}}&quot;dataHandler&quot;{HandlerAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;hInfo&quot;{PublicHandlerInfo=&quot;flags&quot;i&quot;componentType&quot;i&quot;componentSubType&quot;i&quot;componentManufacturer&quot;i&quot;componentFlags&quot;i&quot;componentFlagsMask&quot;i&quot;componentName&quot;[1c]}}&quot;dataReference&quot;i&quot;sampleTable&quot;{SampleTableAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;sampleDescription&quot;{SampleDescriptionAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;sampleDescTable&quot;[1{SampleDescription=&quot;descSize&quot;i&quot;dataFormat&quot;i&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s}]}&quot;timeToSampleNum&quot;{TimeToSampleNumAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;timeToSampleNumTable&quot;[1{TimeToSampleNum=&quot;sampleCount&quot;i&quot;sampleDuration&quot;i}]}&quot;sampleToChunk&quot;{SampleToChunkAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;sampleToChunkTable&quot;[1{SampleToChunk=&quot;firstChunk&quot;i&quot;samplesPerChunk&quot;i&quot;sampleDescriptionID&quot;i}]}&quot;syncSample&quot;{SyncSampleAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;syncSampleTable&quot;[1l]}&quot;sampleSize&quot;{SampleSizeAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;sampleSize&quot;i&quot;numEntries&quot;i&quot;sampleSizeTable&quot;[1l]}&quot;chunkOffset&quot;{ChunkOffsetAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;chunkOffsetTable&quot;[1l]}&quot;shadowSync&quot;{ShadowSyncAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;shadowSyncTable&quot;[1{ShadowSync=&quot;fdSampleNum&quot;i&quot;syncSampleNum&quot;i}]}}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='SoundMediaInfoHeaderAtom' name='header' type='{SoundMediaInfoHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;smiHeader&quot;{SoundMediaInfoHeader=&quot;flags&quot;i&quot;balance&quot;s&quot;rsrvd&quot;s}}'/>
<field declared_type='HandlerAtom' name='dataHandler' type='{HandlerAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;hInfo&quot;{PublicHandlerInfo=&quot;flags&quot;i&quot;componentType&quot;i&quot;componentSubType&quot;i&quot;componentManufacturer&quot;i&quot;componentFlags&quot;i&quot;componentFlagsMask&quot;i&quot;componentName&quot;[1c]}}'/>
<field declared_type='DataRefAtom' name='dataReference' type='l'/>
<field declared_type='SampleTableAtom' name='sampleTable' type='{SampleTableAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;sampleDescription&quot;{SampleDescriptionAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;sampleDescTable&quot;[1{SampleDescription=&quot;descSize&quot;i&quot;dataFormat&quot;i&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s}]}&quot;timeToSampleNum&quot;{TimeToSampleNumAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;timeToSampleNumTable&quot;[1{TimeToSampleNum=&quot;sampleCount&quot;i&quot;sampleDuration&quot;i}]}&quot;sampleToChunk&quot;{SampleToChunkAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;sampleToChunkTable&quot;[1{SampleToChunk=&quot;firstChunk&quot;i&quot;samplesPerChunk&quot;i&quot;sampleDescriptionID&quot;i}]}&quot;syncSample&quot;{SyncSampleAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;syncSampleTable&quot;[1l]}&quot;sampleSize&quot;{SampleSizeAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;sampleSize&quot;i&quot;numEntries&quot;i&quot;sampleSizeTable&quot;[1l]}&quot;chunkOffset&quot;{ChunkOffsetAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;chunkOffsetTable&quot;[1l]}&quot;shadowSync&quot;{ShadowSyncAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;shadowSyncTable&quot;[1{ShadowSync=&quot;fdSampleNum&quot;i&quot;syncSampleNum&quot;i}]}}'/>
</struct>
<struct name='SoundMediaInfoHeader' type='{SoundMediaInfoHeader=&quot;flags&quot;i&quot;balance&quot;s&quot;rsrvd&quot;s}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt16' name='balance' type='s'/>
<field declared_type='SInt16' name='rsrvd' type='s'/>
</struct>
<struct name='SoundMediaInfoHeaderAtom' type='{SoundMediaInfoHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;smiHeader&quot;{SoundMediaInfoHeader=&quot;flags&quot;i&quot;balance&quot;s&quot;rsrvd&quot;s}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='SoundMediaInfoHeader' name='smiHeader' type='{SoundMediaInfoHeader=&quot;flags&quot;i&quot;balance&quot;s&quot;rsrvd&quot;s}'/>
</struct>
<struct name='SpriteDescription' type='{SpriteDescription=&quot;descSize&quot;l&quot;dataFormat&quot;l&quot;resvd1&quot;l&quot;resvd2&quot;s&quot;dataRefIndex&quot;s&quot;version&quot;l&quot;decompressorType&quot;I&quot;sampleFlags&quot;l}'>
<field declared_type='long' name='descSize' type='l'/>
<field declared_type='long' name='dataFormat' type='l'/>
<field declared_type='long' name='resvd1' type='l'/>
<field declared_type='short' name='resvd2' type='s'/>
<field declared_type='short' name='dataRefIndex' type='s'/>
<field declared_type='long' name='version' type='l'/>
<field declared_type='OSType' name='decompressorType' type='L'/>
<field declared_type='long' name='sampleFlags' type='l'/>
</struct>
<struct name='StringRangeRecord' type='{StringRangeRecord=&quot;maxChars&quot;l&quot;maxLines&quot;l}'>
<field declared_type='long' name='maxChars' type='l'/>
<field declared_type='long' name='maxLines' type='l'/>
</struct>
<struct name='SyncSampleAtom' type='{SyncSampleAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;syncSampleTable&quot;[1l]}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt32' name='numEntries' type='l'/>
<field declared_type='SInt32*' name='syncSampleTable' type='[1l]'/>
</struct>
<struct name='SynthesizerConnections' type='{SynthesizerConnections=&quot;clientID&quot;I&quot;inputPortID&quot;I&quot;outputPortID&quot;I&quot;midiChannel&quot;l&quot;flags&quot;l&quot;unique&quot;l&quot;sampleBankFile&quot;^{FSSpec}&quot;reserved2&quot;l}'>
<field declared_type='OSType' name='clientID' type='L'/>
<field declared_type='OSType' name='inputPortID' type='L'/>
<field declared_type='OSType' name='outputPortID' type='L'/>
<field declared_type='long' name='midiChannel' type='l'/>
<field declared_type='long' name='flags' type='l'/>
<field declared_type='long' name='unique' type='l'/>
<field declared_type='FSSpecPtr' name='sampleBankFile' type='^{FSSpec=si[64C]}'/>
<field declared_type='long' name='reserved2' type='l'/>
</struct>
<struct name='SynthesizerDescription' type='{SynthesizerDescription=&quot;synthesizerType&quot;I&quot;name&quot;[32C]&quot;flags&quot;L&quot;voiceCount&quot;L&quot;partCount&quot;L&quot;instrumentCount&quot;L&quot;modifiableInstrumentCount&quot;L&quot;channelMask&quot;L&quot;drumPartCount&quot;L&quot;drumCount&quot;L&quot;modifiableDrumCount&quot;L&quot;drumChannelMask&quot;L&quot;outputCount&quot;L&quot;latency&quot;L&quot;controllers&quot;[4L]&quot;gmInstruments&quot;[4L]&quot;gmDrums&quot;[4L]}'>
<field declared_type='OSType' name='synthesizerType' type='L'/>
<field declared_type='Str31' name='name' type='[32C]'/>
<field declared_type='unsigned long' name='flags' type='L'/>
<field declared_type='unsigned long' name='voiceCount' type='L'/>
<field declared_type='unsigned long' name='partCount' type='L'/>
<field declared_type='unsigned long' name='instrumentCount' type='L'/>
<field declared_type='unsigned long' name='modifiableInstrumentCount' type='L'/>
<field declared_type='unsigned long' name='channelMask' type='L'/>
<field declared_type='unsigned long' name='drumPartCount' type='L'/>
<field declared_type='unsigned long' name='drumCount' type='L'/>
<field declared_type='unsigned long' name='modifiableDrumCount' type='L'/>
<field declared_type='unsigned long' name='drumChannelMask' type='L'/>
<field declared_type='unsigned long' name='outputCount' type='L'/>
<field declared_type='unsigned long' name='latency' type='L'/>
<field declared_type='unsigned long*' name='controllers' type='[4L]'/>
<field declared_type='unsigned long*' name='gmInstruments' type='[4L]'/>
<field declared_type='unsigned long*' name='gmDrums' type='[4L]'/>
</struct>
<struct name='TCTextOptions' type='{TCTextOptions=&quot;txFont&quot;s&quot;txFace&quot;s&quot;txSize&quot;s&quot;pad&quot;s&quot;foreColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}&quot;backColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}}'>
<field declared_type='short' name='txFont' type='s'/>
<field declared_type='short' name='txFace' type='s'/>
<field declared_type='short' name='txSize' type='s'/>
<field declared_type='short' name='pad' type='s'/>
<field declared_type='RGBColor' name='foreColor' type='{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'/>
<field declared_type='RGBColor' name='backColor' type='{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'/>
</struct>
<struct name='TextBoxAtom' type='{TextBoxAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;textBox&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='Rect' name='textBox' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
</struct>
<struct name='TextDescription' type='{TextDescription=&quot;descSize&quot;i&quot;dataFormat&quot;i&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s&quot;displayFlags&quot;i&quot;textJustification&quot;i&quot;bgColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}&quot;defaultTextBox&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;defaultStyle&quot;{ScrpSTElement=&quot;scrpStartChar&quot;i&quot;scrpHeight&quot;s&quot;scrpAscent&quot;s&quot;scrpFont&quot;s&quot;scrpFace&quot;C&quot;scrpSize&quot;s&quot;scrpColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}}&quot;defaultFontName&quot;[1c]}'>
<field declared_type='SInt32' name='descSize' type='l'/>
<field declared_type='SInt32' name='dataFormat' type='l'/>
<field declared_type='SInt32' name='resvd1' type='l'/>
<field declared_type='SInt16' name='resvd2' type='s'/>
<field declared_type='SInt16' name='dataRefIndex' type='s'/>
<field declared_type='SInt32' name='displayFlags' type='l'/>
<field declared_type='SInt32' name='textJustification' type='l'/>
<field declared_type='RGBColor' name='bgColor' type='{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'/>
<field declared_type='Rect' name='defaultTextBox' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field declared_type='ScrpSTElement' name='defaultStyle' type='{ScrpSTElement=&quot;scrpStartChar&quot;i&quot;scrpHeight&quot;s&quot;scrpAscent&quot;s&quot;scrpFont&quot;s&quot;scrpFace&quot;C&quot;scrpSize&quot;s&quot;scrpColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}}'/>
<field declared_type='char*' name='defaultFontName' type='[1c]'/>
</struct>
<struct name='TextDisplayData' type='{TextDisplayData=&quot;displayFlags&quot;l&quot;textJustification&quot;l&quot;bgColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}&quot;textBox&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;beginHilite&quot;s&quot;endHilite&quot;s&quot;hiliteColor&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}&quot;doHiliteColor&quot;B&quot;filler&quot;c&quot;scrollDelayDur&quot;i&quot;dropShadowOffset&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;dropShadowTransparency&quot;s}'>
<field declared_type='long' name='displayFlags' type='l'/>
<field declared_type='long' name='textJustification' type='l'/>
<field declared_type='RGBColor' name='bgColor' type='{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'/>
<field declared_type='Rect' name='textBox' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field declared_type='short' name='beginHilite' type='s'/>
<field declared_type='short' name='endHilite' type='s'/>
<field declared_type='RGBColor' name='hiliteColor' type='{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'/>
<field declared_type='Boolean' name='doHiliteColor' type='B'/>
<field declared_type='SInt8' name='filler' type='c'/>
<field declared_type='TimeValue' name='scrollDelayDur' type='l'/>
<field declared_type='Point' name='dropShadowOffset' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
<field declared_type='short' name='dropShadowTransparency' type='s'/>
</struct>
<struct name='ThreeDeeDescription' type='{ThreeDeeDescription=&quot;descSize&quot;l&quot;dataFormat&quot;l&quot;resvd1&quot;l&quot;resvd2&quot;s&quot;dataRefIndex&quot;s&quot;version&quot;l&quot;rendererType&quot;l&quot;decompressorType&quot;l}'>
<field declared_type='long' name='descSize' type='l'/>
<field declared_type='long' name='dataFormat' type='l'/>
<field declared_type='long' name='resvd1' type='l'/>
<field declared_type='short' name='resvd2' type='s'/>
<field declared_type='short' name='dataRefIndex' type='s'/>
<field declared_type='long' name='version' type='l'/>
<field declared_type='long' name='rendererType' type='l'/>
<field declared_type='long' name='decompressorType' type='l'/>
</struct>
<struct name='TimeCodeCounter' type='{TimeCodeCounter=&quot;counter&quot;l}'>
<field declared_type='long' name='counter' type='l'/>
</struct>
<struct name='TimeCodeDef' type='{TimeCodeDef=&quot;flags&quot;i&quot;fTimeScale&quot;i&quot;frameDuration&quot;i&quot;numFrames&quot;C&quot;padding&quot;C}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='TimeScale' name='fTimeScale' type='l'/>
<field declared_type='TimeValue' name='frameDuration' type='l'/>
<field declared_type='UInt8' name='numFrames' type='C'/>
<field declared_type='UInt8' name='padding' type='C'/>
</struct>
<struct name='TimeCodeDescription' type='{TimeCodeDescription=&quot;descSize&quot;i&quot;dataFormat&quot;i&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s&quot;flags&quot;i&quot;timeCodeDef&quot;{TimeCodeDef=&quot;flags&quot;i&quot;fTimeScale&quot;i&quot;frameDuration&quot;i&quot;numFrames&quot;C&quot;padding&quot;C}&quot;srcRef&quot;[1l]}'>
<field declared_type='SInt32' name='descSize' type='l'/>
<field declared_type='SInt32' name='dataFormat' type='l'/>
<field declared_type='SInt32' name='resvd1' type='l'/>
<field declared_type='SInt16' name='resvd2' type='s'/>
<field declared_type='SInt16' name='dataRefIndex' type='s'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='TimeCodeDef' name='timeCodeDef' type='{TimeCodeDef=&quot;flags&quot;i&quot;fTimeScale&quot;i&quot;frameDuration&quot;i&quot;numFrames&quot;C&quot;padding&quot;C}'/>
<field declared_type='SInt32*' name='srcRef' type='[1l]'/>
</struct>
<struct name='TimeCodeTime' type='{TimeCodeTime=&quot;hours&quot;C&quot;minutes&quot;C&quot;seconds&quot;C&quot;frames&quot;C}'>
<field declared_type='UInt8' name='hours' type='C'/>
<field declared_type='UInt8' name='minutes' type='C'/>
<field declared_type='UInt8' name='seconds' type='C'/>
<field declared_type='UInt8' name='frames' type='C'/>
</struct>
<struct name='TimeToSampleNum' type='{TimeToSampleNum=&quot;sampleCount&quot;i&quot;sampleDuration&quot;i}'>
<field declared_type='SInt32' name='sampleCount' type='l'/>
<field declared_type='TimeValue' name='sampleDuration' type='l'/>
</struct>
<struct name='TimeToSampleNumAtom' type='{TimeToSampleNumAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;timeToSampleNumTable&quot;[1{TimeToSampleNum=&quot;sampleCount&quot;i&quot;sampleDuration&quot;i}]}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt32' name='numEntries' type='l'/>
<field declared_type='TimeToSampleNum*' name='timeToSampleNumTable' type='[1{TimeToSampleNum=&quot;sampleCount&quot;i&quot;sampleDuration&quot;i}]'/>
</struct>
<struct name='ToneDescription' type='{ToneDescription=&quot;synthesizerType&quot;{BigEndianOSType=&quot;bigEndianValue&quot;I}&quot;synthesizerName&quot;[32C]&quot;instrumentName&quot;[32C]&quot;instrumentNumber&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}&quot;gmNumber&quot;{BigEndianLong=&quot;bigEndianValue&quot;l}}'>
<field declared_type='BigEndianOSType' name='synthesizerType' type='{BigEndianOSType=&quot;bigEndianValue&quot;I}'/>
<field declared_type='Str31' name='synthesizerName' type='[32C]'/>
<field declared_type='Str31' name='instrumentName' type='[32C]'/>
<field declared_type='BigEndianLong' name='instrumentNumber' type='{BigEndianLong=&quot;bigEndianValue&quot;l}'/>
<field declared_type='BigEndianLong' name='gmNumber' type='{BigEndianLong=&quot;bigEndianValue&quot;l}'/>
</struct>
<struct name='TrackCleanApertureDimensions' type='{TrackCleanApertureDimensions=&quot;flags&quot;i&quot;cleanApertureDimensions&quot;{FixedPoint=&quot;x&quot;i&quot;y&quot;i}}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='FixedPoint' name='cleanApertureDimensions' type='{FixedPoint=&quot;x&quot;i&quot;y&quot;i}'/>
</struct>
<struct name='TrackCleanApertureDimensionsAtom' type='{TrackCleanApertureDimensionsAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;cleanApertureDimensions&quot;{TrackCleanApertureDimensions=&quot;flags&quot;i&quot;cleanApertureDimensions&quot;{FixedPoint=&quot;x&quot;i&quot;y&quot;i}}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='TrackCleanApertureDimensions' name='cleanApertureDimensions' type='{TrackCleanApertureDimensions=&quot;flags&quot;i&quot;cleanApertureDimensions&quot;{FixedPoint=&quot;x&quot;i&quot;y&quot;i}}'/>
</struct>
<struct name='TrackDirectory' type='{TrackDirectory=&quot;size&quot;i&quot;atomType&quot;i&quot;trackHeader&quot;{TrackHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{TrackHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;trackID&quot;i&quot;reserved1&quot;i&quot;duration&quot;i&quot;reserved2&quot;i&quot;reserved3&quot;i&quot;layer&quot;s&quot;alternateGroup&quot;s&quot;volume&quot;s&quot;reserved4&quot;s&quot;matrix&quot;{MatrixRecord=&quot;matrix&quot;[3[3l]]}&quot;trackWidth&quot;i&quot;trackHeight&quot;i}}&quot;trackClip&quot;{ClippingAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;aRgnClip&quot;{RgnAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;rgnSize&quot;s&quot;rgnBBox&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;data&quot;[1c]}}&quot;edits&quot;{EditsAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;editList&quot;{EditListAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;editListTable&quot;[1{EditListType=&quot;trackDuration&quot;i&quot;mediaTime&quot;i&quot;mediaRate&quot;i}]}}&quot;media&quot;{MediaDirectory=&quot;size&quot;i&quot;atomType&quot;i&quot;mediaHeader&quot;{MediaHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{MediaHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;timeScale&quot;i&quot;duration&quot;i&quot;language&quot;s&quot;quality&quot;s}}&quot;mediaHandler&quot;{HandlerAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;hInfo&quot;{PublicHandlerInfo=&quot;flags&quot;i&quot;componentType&quot;i&quot;componentSubType&quot;i&quot;componentManufacturer&quot;i&quot;componentFlags&quot;i&quot;componentFlagsMask&quot;i&quot;componentName&quot;[1c]}}&quot;mediaInfo&quot;{MediaInfo=&quot;size&quot;i&quot;atomType&quot;i}}&quot;userData&quot;{UserDataAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;userData&quot;[1{MoviesUserData=&quot;size&quot;i&quot;udType&quot;i&quot;data&quot;[1c]}]}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='TrackHeaderAtom' name='trackHeader' type='{TrackHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{TrackHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;trackID&quot;i&quot;reserved1&quot;i&quot;duration&quot;i&quot;reserved2&quot;i&quot;reserved3&quot;i&quot;layer&quot;s&quot;alternateGroup&quot;s&quot;volume&quot;s&quot;reserved4&quot;s&quot;matrix&quot;{MatrixRecord=&quot;matrix&quot;[3[3l]]}&quot;trackWidth&quot;i&quot;trackHeight&quot;i}}'/>
<field declared_type='ClippingAtom' name='trackClip' type='{ClippingAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;aRgnClip&quot;{RgnAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;rgnSize&quot;s&quot;rgnBBox&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;data&quot;[1c]}}'/>
<field declared_type='EditsAtom' name='edits' type='{EditsAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;editList&quot;{EditListAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;editListTable&quot;[1{EditListType=&quot;trackDuration&quot;i&quot;mediaTime&quot;i&quot;mediaRate&quot;i}]}}'/>
<field declared_type='MediaDirectory' name='media' type='{MediaDirectory=&quot;size&quot;i&quot;atomType&quot;i&quot;mediaHeader&quot;{MediaHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{MediaHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;timeScale&quot;i&quot;duration&quot;i&quot;language&quot;s&quot;quality&quot;s}}&quot;mediaHandler&quot;{HandlerAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;hInfo&quot;{PublicHandlerInfo=&quot;flags&quot;i&quot;componentType&quot;i&quot;componentSubType&quot;i&quot;componentManufacturer&quot;i&quot;componentFlags&quot;i&quot;componentFlagsMask&quot;i&quot;componentName&quot;[1c]}}&quot;mediaInfo&quot;{MediaInfo=&quot;size&quot;i&quot;atomType&quot;i}}'/>
<field declared_type='UserDataAtom' name='userData' type='{UserDataAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;userData&quot;[1{MoviesUserData=&quot;size&quot;i&quot;udType&quot;i&quot;data&quot;[1c]}]}'/>
</struct>
<struct name='TrackDirectoryEntry' type='{TrackDirectoryEntry=&quot;trackDirectory&quot;{TrackDirectory=&quot;size&quot;i&quot;atomType&quot;i&quot;trackHeader&quot;{TrackHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{TrackHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;trackID&quot;i&quot;reserved1&quot;i&quot;duration&quot;i&quot;reserved2&quot;i&quot;reserved3&quot;i&quot;layer&quot;s&quot;alternateGroup&quot;s&quot;volume&quot;s&quot;reserved4&quot;s&quot;matrix&quot;{MatrixRecord=&quot;matrix&quot;[3[3l]]}&quot;trackWidth&quot;i&quot;trackHeight&quot;i}}&quot;trackClip&quot;{ClippingAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;aRgnClip&quot;{RgnAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;rgnSize&quot;s&quot;rgnBBox&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;data&quot;[1c]}}&quot;edits&quot;{EditsAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;editList&quot;{EditListAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;editListTable&quot;[1{EditListType=&quot;trackDuration&quot;i&quot;mediaTime&quot;i&quot;mediaRate&quot;i}]}}&quot;media&quot;{MediaDirectory=&quot;size&quot;i&quot;atomType&quot;i&quot;mediaHeader&quot;{MediaHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{MediaHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;timeScale&quot;i&quot;duration&quot;i&quot;language&quot;s&quot;quality&quot;s}}&quot;mediaHandler&quot;{HandlerAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;hInfo&quot;{PublicHandlerInfo=&quot;flags&quot;i&quot;componentType&quot;i&quot;componentSubType&quot;i&quot;componentManufacturer&quot;i&quot;componentFlags&quot;i&quot;componentFlagsMask&quot;i&quot;componentName&quot;[1c]}}&quot;mediaInfo&quot;{MediaInfo=&quot;size&quot;i&quot;atomType&quot;i}}&quot;userData&quot;{UserDataAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;userData&quot;[1{MoviesUserData=&quot;size&quot;i&quot;udType&quot;i&quot;data&quot;[1c]}]}}}'>
<field declared_type='TrackDirectory' name='trackDirectory' type='{TrackDirectory=&quot;size&quot;i&quot;atomType&quot;i&quot;trackHeader&quot;{TrackHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{TrackHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;trackID&quot;i&quot;reserved1&quot;i&quot;duration&quot;i&quot;reserved2&quot;i&quot;reserved3&quot;i&quot;layer&quot;s&quot;alternateGroup&quot;s&quot;volume&quot;s&quot;reserved4&quot;s&quot;matrix&quot;{MatrixRecord=&quot;matrix&quot;[3[3l]]}&quot;trackWidth&quot;i&quot;trackHeight&quot;i}}&quot;trackClip&quot;{ClippingAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;aRgnClip&quot;{RgnAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;rgnSize&quot;s&quot;rgnBBox&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;data&quot;[1c]}}&quot;edits&quot;{EditsAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;editList&quot;{EditListAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;editListTable&quot;[1{EditListType=&quot;trackDuration&quot;i&quot;mediaTime&quot;i&quot;mediaRate&quot;i}]}}&quot;media&quot;{MediaDirectory=&quot;size&quot;i&quot;atomType&quot;i&quot;mediaHeader&quot;{MediaHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{MediaHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;timeScale&quot;i&quot;duration&quot;i&quot;language&quot;s&quot;quality&quot;s}}&quot;mediaHandler&quot;{HandlerAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;hInfo&quot;{PublicHandlerInfo=&quot;flags&quot;i&quot;componentType&quot;i&quot;componentSubType&quot;i&quot;componentManufacturer&quot;i&quot;componentFlags&quot;i&quot;componentFlagsMask&quot;i&quot;componentName&quot;[1c]}}&quot;mediaInfo&quot;{MediaInfo=&quot;size&quot;i&quot;atomType&quot;i}}&quot;userData&quot;{UserDataAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;userData&quot;[1{MoviesUserData=&quot;size&quot;i&quot;udType&quot;i&quot;data&quot;[1c]}]}}'/>
</struct>
<struct name='TrackEncodedPixelsDimensions' type='{TrackEncodedPixelsDimensions=&quot;flags&quot;i&quot;encodedPixelsDimensions&quot;{FixedPoint=&quot;x&quot;i&quot;y&quot;i}}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='FixedPoint' name='encodedPixelsDimensions' type='{FixedPoint=&quot;x&quot;i&quot;y&quot;i}'/>
</struct>
<struct name='TrackEncodedPixelsDimensionsAtom' type='{TrackEncodedPixelsDimensionsAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;encodedPixelsDimensions&quot;{TrackEncodedPixelsDimensions=&quot;flags&quot;i&quot;encodedPixelsDimensions&quot;{FixedPoint=&quot;x&quot;i&quot;y&quot;i}}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='TrackEncodedPixelsDimensions' name='encodedPixelsDimensions' type='{TrackEncodedPixelsDimensions=&quot;flags&quot;i&quot;encodedPixelsDimensions&quot;{FixedPoint=&quot;x&quot;i&quot;y&quot;i}}'/>
</struct>
<struct name='TrackHeader' type='{TrackHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;trackID&quot;i&quot;reserved1&quot;i&quot;duration&quot;i&quot;reserved2&quot;i&quot;reserved3&quot;i&quot;layer&quot;s&quot;alternateGroup&quot;s&quot;volume&quot;s&quot;reserved4&quot;s&quot;matrix&quot;{MatrixRecord=&quot;matrix&quot;[3[3l]]}&quot;trackWidth&quot;i&quot;trackHeight&quot;i}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt32' name='creationTime' type='l'/>
<field declared_type='SInt32' name='modificationTime' type='l'/>
<field declared_type='SInt32' name='trackID' type='l'/>
<field declared_type='SInt32' name='reserved1' type='l'/>
<field declared_type='TimeValue' name='duration' type='l'/>
<field declared_type='SInt32' name='reserved2' type='l'/>
<field declared_type='SInt32' name='reserved3' type='l'/>
<field declared_type='SInt16' name='layer' type='s'/>
<field declared_type='SInt16' name='alternateGroup' type='s'/>
<field declared_type='SInt16' name='volume' type='s'/>
<field declared_type='SInt16' name='reserved4' type='s'/>
<field declared_type='MatrixRecord' name='matrix' type='{MatrixRecord=&quot;matrix&quot;[3[3l]]}'/>
<field declared_type='Fixed' name='trackWidth' type='l'/>
<field declared_type='Fixed' name='trackHeight' type='l'/>
</struct>
<struct name='TrackHeaderAtom' type='{TrackHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{TrackHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;trackID&quot;i&quot;reserved1&quot;i&quot;duration&quot;i&quot;reserved2&quot;i&quot;reserved3&quot;i&quot;layer&quot;s&quot;alternateGroup&quot;s&quot;volume&quot;s&quot;reserved4&quot;s&quot;matrix&quot;{MatrixRecord=&quot;matrix&quot;[3[3l]]}&quot;trackWidth&quot;i&quot;trackHeight&quot;i}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='TrackHeader' name='header' type='{TrackHeader=&quot;flags&quot;i&quot;creationTime&quot;i&quot;modificationTime&quot;i&quot;trackID&quot;i&quot;reserved1&quot;i&quot;duration&quot;i&quot;reserved2&quot;i&quot;reserved3&quot;i&quot;layer&quot;s&quot;alternateGroup&quot;s&quot;volume&quot;s&quot;reserved4&quot;s&quot;matrix&quot;{MatrixRecord=&quot;matrix&quot;[3[3l]]}&quot;trackWidth&quot;i&quot;trackHeight&quot;i}'/>
</struct>
<struct name='TrackLoadSettings' type='{TrackLoadSettings=&quot;preloadStartTime&quot;i&quot;preloadDuration&quot;i&quot;preloadFlags&quot;i&quot;defaultHints&quot;i}'>
<field declared_type='TimeValue' name='preloadStartTime' type='l'/>
<field declared_type='TimeValue' name='preloadDuration' type='l'/>
<field declared_type='SInt32' name='preloadFlags' type='l'/>
<field declared_type='SInt32' name='defaultHints' type='l'/>
</struct>
<struct name='TrackLoadSettingsAtom' type='{TrackLoadSettingsAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;settings&quot;{TrackLoadSettings=&quot;preloadStartTime&quot;i&quot;preloadDuration&quot;i&quot;preloadFlags&quot;i&quot;defaultHints&quot;i}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='TrackLoadSettings' name='settings' type='{TrackLoadSettings=&quot;preloadStartTime&quot;i&quot;preloadDuration&quot;i&quot;preloadFlags&quot;i&quot;defaultHints&quot;i}'/>
</struct>
<struct name='TrackProductionApertureDimensions' type='{TrackProductionApertureDimensions=&quot;flags&quot;i&quot;productionApertureDimensions&quot;{FixedPoint=&quot;x&quot;i&quot;y&quot;i}}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='FixedPoint' name='productionApertureDimensions' type='{FixedPoint=&quot;x&quot;i&quot;y&quot;i}'/>
</struct>
<struct name='TrackProductionApertureDimensionsAtom' type='{TrackProductionApertureDimensionsAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;productionApertureDimensions&quot;{TrackProductionApertureDimensions=&quot;flags&quot;i&quot;productionApertureDimensions&quot;{FixedPoint=&quot;x&quot;i&quot;y&quot;i}}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='TrackProductionApertureDimensions' name='productionApertureDimensions' type='{TrackProductionApertureDimensions=&quot;flags&quot;i&quot;productionApertureDimensions&quot;{FixedPoint=&quot;x&quot;i&quot;y&quot;i}}'/>
</struct>
<struct name='TuneStatus' type='{TuneStatus=&quot;tune&quot;^L&quot;tunePtr&quot;^L&quot;time&quot;i&quot;queueCount&quot;s&quot;queueSpots&quot;s&quot;queueTime&quot;i&quot;reserved&quot;[3l]}'>
<field declared_type='unsigned long*' name='tune' type='^L'/>
<field declared_type='unsigned long*' name='tunePtr' type='^L'/>
<field declared_type='TimeValue' name='time' type='l'/>
<field declared_type='short' name='queueCount' type='s'/>
<field declared_type='short' name='queueSpots' type='s'/>
<field declared_type='TimeValue' name='queueTime' type='l'/>
<field declared_type='long*' name='reserved' type='[3l]'/>
</struct>
<struct name='TweenRecord' type='{TweenRecord=&quot;version&quot;l&quot;container&quot;^*&quot;tweenAtom&quot;i&quot;dataAtom&quot;i&quot;percent&quot;i&quot;dataProc&quot;^?&quot;private1&quot;^v&quot;private2&quot;^v}'>
<field declared_type='long' name='version' type='l'/>
<field declared_type='QTAtomContainer' name='container' type='^*'/>
<field declared_type='QTAtom' name='tweenAtom' type='l'/>
<field declared_type='QTAtom' name='dataAtom' type='l'/>
<field declared_type='Fixed' name='percent' type='l'/>
<field declared_type='TweenerDataUPP' function_pointer='true' name='dataProc' type='^?'>
<arg declared_type='TweenRecord*' type='^{TweenRecord=l^*iii^?^v^v}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='ICMCompletionProcRecordPtr' type='^{ICMCompletionProcRecord=^?l}'/>
<arg declared_type='UniversalProcPtr' function_pointer='true' type='^?'>
<retval declared_type='long' type='l'/>
</arg>
<arg declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</field>
<field declared_type='void*' name='private1' type='^v'/>
<field declared_type='void*' name='private2' type='^v'/>
</struct>
<struct name='TweenSequenceEntryRecord' type='{TweenSequenceEntryRecord=&quot;endPercent&quot;i&quot;tweenAtomID&quot;i&quot;dataAtomID&quot;i}'>
<field declared_type='Fixed' name='endPercent' type='l'/>
<field declared_type='QTAtomID' name='tweenAtomID' type='l'/>
<field declared_type='QTAtomID' name='dataAtomID' type='l'/>
</struct>
<struct name='TweenV1Record' type='{TweenV1Record=&quot;version&quot;l&quot;container&quot;^*&quot;tweenAtom&quot;i&quot;dataAtom&quot;i&quot;percent&quot;i&quot;dataProc&quot;^?&quot;private1&quot;^v&quot;private2&quot;^v&quot;fractPercent&quot;i}'>
<field declared_type='long' name='version' type='l'/>
<field declared_type='QTAtomContainer' name='container' type='^*'/>
<field declared_type='QTAtom' name='tweenAtom' type='l'/>
<field declared_type='QTAtom' name='dataAtom' type='l'/>
<field declared_type='Fixed' name='percent' type='l'/>
<field declared_type='TweenerDataUPP' function_pointer='true' name='dataProc' type='^?'>
<arg declared_type='TweenRecord*' type='^{TweenRecord=l^*iii^?^v^v}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='ICMCompletionProcRecordPtr' type='^{ICMCompletionProcRecord=^?l}'/>
<arg declared_type='UniversalProcPtr' function_pointer='true' type='^?'>
<retval declared_type='long' type='l'/>
</arg>
<arg declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</field>
<field declared_type='void*' name='private1' type='^v'/>
<field declared_type='void*' name='private2' type='^v'/>
<field declared_type='Fract' name='fractPercent' type='l'/>
</struct>
<struct name='TweenV2Record' type='{TweenV2Record=&quot;version&quot;l&quot;container&quot;^*&quot;tweenAtom&quot;i&quot;dataAtom&quot;i&quot;percent&quot;i&quot;dataProc&quot;^?&quot;private1&quot;^v&quot;private2&quot;^v&quot;fractPercent&quot;i&quot;flags&quot;l}'>
<field declared_type='long' name='version' type='l'/>
<field declared_type='QTAtomContainer' name='container' type='^*'/>
<field declared_type='QTAtom' name='tweenAtom' type='l'/>
<field declared_type='QTAtom' name='dataAtom' type='l'/>
<field declared_type='Fixed' name='percent' type='l'/>
<field declared_type='TweenerDataUPP' function_pointer='true' name='dataProc' type='^?'>
<arg declared_type='TweenRecord*' type='^{TweenRecord=l^*iii^?^v^v}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='ICMCompletionProcRecordPtr' type='^{ICMCompletionProcRecord=^?l}'/>
<arg declared_type='UniversalProcPtr' function_pointer='true' type='^?'>
<retval declared_type='long' type='l'/>
</arg>
<arg declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</field>
<field declared_type='void*' name='private1' type='^v'/>
<field declared_type='void*' name='private2' type='^v'/>
<field declared_type='Fract' name='fractPercent' type='l'/>
<field declared_type='long' name='flags' type='l'/>
</struct>
<struct name='Tx3gDescription' type='{Tx3gDescription=&quot;descSize&quot;i&quot;dataFormat&quot;i&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s&quot;displayFlags&quot;I&quot;horizontalJustification&quot;c&quot;verticalJustification&quot;c&quot;backgroundColor&quot;{Tx3gRGBAColor=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;transparency&quot;C}&quot;defaultTextBox&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;defaultStyle&quot;{Tx3gStyleRecord=&quot;startChar&quot;S&quot;endChar&quot;S&quot;fontID&quot;S&quot;fontFace&quot;C&quot;fontSize&quot;C&quot;fontColor&quot;{Tx3gRGBAColor=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;transparency&quot;C}}}'>
<field declared_type='SInt32' name='descSize' type='l'/>
<field declared_type='SInt32' name='dataFormat' type='l'/>
<field declared_type='SInt32' name='resvd1' type='l'/>
<field declared_type='SInt16' name='resvd2' type='s'/>
<field declared_type='SInt16' name='dataRefIndex' type='s'/>
<field declared_type='UInt32' name='displayFlags' type='L'/>
<field declared_type='char' name='horizontalJustification' type='c'/>
<field declared_type='char' name='verticalJustification' type='c'/>
<field declared_type='Tx3gRGBAColor' name='backgroundColor' type='{Tx3gRGBAColor=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;transparency&quot;C}'/>
<field declared_type='Rect' name='defaultTextBox' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field declared_type='Tx3gStyleRecord' name='defaultStyle' type='{Tx3gStyleRecord=&quot;startChar&quot;S&quot;endChar&quot;S&quot;fontID&quot;S&quot;fontFace&quot;C&quot;fontSize&quot;C&quot;fontColor&quot;{Tx3gRGBAColor=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;transparency&quot;C}}'/>
</struct>
<struct name='Tx3gFontRecord' type='{Tx3gFontRecord=&quot;fontID&quot;S&quot;nameLength&quot;C&quot;name&quot;[1C]}'>
<field declared_type='UInt16' name='fontID' type='S'/>
<field declared_type='unsigned char' name='nameLength' type='C'/>
<field declared_type='unsigned char*' name='name' type='[1C]'/>
</struct>
<struct name='Tx3gFontTableRecord' type='{Tx3gFontTableRecord=&quot;entryCount&quot;S&quot;fontEntries&quot;[1{Tx3gFontRecord=&quot;fontID&quot;S&quot;nameLength&quot;C&quot;name&quot;[1C]}]}'>
<field declared_type='UInt16' name='entryCount' type='S'/>
<field declared_type='Tx3gFontRecord*' name='fontEntries' type='[1{Tx3gFontRecord=&quot;fontID&quot;S&quot;nameLength&quot;C&quot;name&quot;[1C]}]'/>
</struct>
<struct name='Tx3gRGBAColor' type='{Tx3gRGBAColor=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;transparency&quot;C}'>
<field declared_type='UInt8' name='red' type='C'/>
<field declared_type='UInt8' name='green' type='C'/>
<field declared_type='UInt8' name='blue' type='C'/>
<field declared_type='UInt8' name='transparency' type='C'/>
</struct>
<struct name='Tx3gStyleRecord' type='{Tx3gStyleRecord=&quot;startChar&quot;S&quot;endChar&quot;S&quot;fontID&quot;S&quot;fontFace&quot;C&quot;fontSize&quot;C&quot;fontColor&quot;{Tx3gRGBAColor=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;transparency&quot;C}}'>
<field declared_type='UInt16' name='startChar' type='S'/>
<field declared_type='UInt16' name='endChar' type='S'/>
<field declared_type='UInt16' name='fontID' type='S'/>
<field declared_type='UInt8' name='fontFace' type='C'/>
<field declared_type='UInt8' name='fontSize' type='C'/>
<field declared_type='Tx3gRGBAColor' name='fontColor' type='{Tx3gRGBAColor=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;transparency&quot;C}'/>
</struct>
<struct name='Tx3gStyleTableRecord' type='{Tx3gStyleTableRecord=&quot;count&quot;S&quot;table&quot;[1{Tx3gStyleRecord=&quot;startChar&quot;S&quot;endChar&quot;S&quot;fontID&quot;S&quot;fontFace&quot;C&quot;fontSize&quot;C&quot;fontColor&quot;{Tx3gRGBAColor=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;transparency&quot;C}}]}'>
<field declared_type='UInt16' name='count' type='S'/>
<field declared_type='Tx3gStyleRecord*' name='table' type='[1{Tx3gStyleRecord=&quot;startChar&quot;S&quot;endChar&quot;S&quot;fontID&quot;S&quot;fontFace&quot;C&quot;fontSize&quot;C&quot;fontColor&quot;{Tx3gRGBAColor=&quot;red&quot;C&quot;green&quot;C&quot;blue&quot;C&quot;transparency&quot;C}}]'/>
</struct>
<struct name='UserDataAtom' type='{UserDataAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;userData&quot;[1{MoviesUserData=&quot;size&quot;i&quot;udType&quot;i&quot;data&quot;[1c]}]}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='MoviesUserData*' name='userData' type='[1{MoviesUserData=&quot;size&quot;i&quot;udType&quot;i&quot;data&quot;[1c]}]'/>
</struct>
<struct name='VDCompressionList' type='{VDCompressionList=&quot;codec&quot;^{ComponentRecord}&quot;cType&quot;I&quot;typeName&quot;[64C]&quot;name&quot;[64C]&quot;formatFlags&quot;l&quot;compressFlags&quot;l&quot;reserved&quot;l}'>
<field declared_type='CodecComponent' name='codec' type='^{ComponentRecord=[1l]}'/>
<field declared_type='CodecType' name='cType' type='L'/>
<field declared_type='Str63' name='typeName' type='[64C]'/>
<field declared_type='Str63' name='name' type='[64C]'/>
<field declared_type='long' name='formatFlags' type='l'/>
<field declared_type='long' name='compressFlags' type='l'/>
<field declared_type='long' name='reserved' type='l'/>
</struct>
<struct name='VDIIDCFeatureAtomTypeAndID' type='{VDIIDCFeatureAtomTypeAndID=&quot;feature&quot;I&quot;group&quot;I&quot;name&quot;[256C]&quot;atomType&quot;i&quot;atomID&quot;i}'>
<field declared_type='OSType' name='feature' type='L'/>
<field declared_type='OSType' name='group' type='L'/>
<field declared_type='Str255' name='name' type='[256C]'/>
<field declared_type='QTAtomType' name='atomType' type='l'/>
<field declared_type='QTAtomID' name='atomID' type='l'/>
</struct>
<struct name='VDIIDCFeatureCapabilities' type='{VDIIDCFeatureCapabilities=&quot;flags&quot;I&quot;rawMinimum&quot;S&quot;rawMaximum&quot;S&quot;absoluteMinimum&quot;f&quot;absoluteMaximum&quot;f}'>
<field declared_type='UInt32' name='flags' type='L'/>
<field declared_type='UInt16' name='rawMinimum' type='S'/>
<field declared_type='UInt16' name='rawMaximum' type='S'/>
<field declared_type='QTFloatSingle' name='absoluteMinimum' type='f'/>
<field declared_type='QTFloatSingle' name='absoluteMaximum' type='f'/>
</struct>
<struct name='VDIIDCFeatureSettings' type='{VDIIDCFeatureSettings=&quot;capabilities&quot;{VDIIDCFeatureCapabilities=&quot;flags&quot;I&quot;rawMinimum&quot;S&quot;rawMaximum&quot;S&quot;absoluteMinimum&quot;f&quot;absoluteMaximum&quot;f}&quot;state&quot;{VDIIDCFeatureState=&quot;flags&quot;I&quot;value&quot;f}}'>
<field declared_type='VDIIDCFeatureCapabilities' name='capabilities' type='{VDIIDCFeatureCapabilities=&quot;flags&quot;I&quot;rawMinimum&quot;S&quot;rawMaximum&quot;S&quot;absoluteMinimum&quot;f&quot;absoluteMaximum&quot;f}'/>
<field declared_type='VDIIDCFeatureState' name='state' type='{VDIIDCFeatureState=&quot;flags&quot;I&quot;value&quot;f}'/>
</struct>
<struct name='VDIIDCFeatureState' type='{VDIIDCFeatureState=&quot;flags&quot;I&quot;value&quot;f}'>
<field declared_type='UInt32' name='flags' type='L'/>
<field declared_type='QTFloatSingle' name='value' type='f'/>
</struct>
<struct name='VDIIDCFocusPointSettings' type='{VDIIDCFocusPointSettings=&quot;focusPoint&quot;{Point=&quot;v&quot;s&quot;h&quot;s}}'>
<field declared_type='Point' name='focusPoint' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
</struct>
<struct name='VDIIDCLightingHintSettings' type='{VDIIDCLightingHintSettings=&quot;capabilityFlags&quot;I&quot;stateFlags&quot;I}'>
<field declared_type='UInt32' name='capabilityFlags' type='L'/>
<field declared_type='UInt32' name='stateFlags' type='L'/>
</struct>
<struct name='VDIIDCTriggerCapabilities' type='{VDIIDCTriggerCapabilities=&quot;flags&quot;I&quot;absoluteMinimum&quot;f&quot;absoluteMaximum&quot;f}'>
<field declared_type='UInt32' name='flags' type='L'/>
<field declared_type='QTFloatSingle' name='absoluteMinimum' type='f'/>
<field declared_type='QTFloatSingle' name='absoluteMaximum' type='f'/>
</struct>
<struct name='VDIIDCTriggerSettings' type='{VDIIDCTriggerSettings=&quot;capabilities&quot;{VDIIDCTriggerCapabilities=&quot;flags&quot;I&quot;absoluteMinimum&quot;f&quot;absoluteMaximum&quot;f}&quot;state&quot;{VDIIDCTriggerState=&quot;flags&quot;I&quot;mode2TransitionCount&quot;S&quot;mode3FrameRateMultiplier&quot;S&quot;absoluteValue&quot;f}}'>
<field declared_type='VDIIDCTriggerCapabilities' name='capabilities' type='{VDIIDCTriggerCapabilities=&quot;flags&quot;I&quot;absoluteMinimum&quot;f&quot;absoluteMaximum&quot;f}'/>
<field declared_type='VDIIDCTriggerState' name='state' type='{VDIIDCTriggerState=&quot;flags&quot;I&quot;mode2TransitionCount&quot;S&quot;mode3FrameRateMultiplier&quot;S&quot;absoluteValue&quot;f}'/>
</struct>
<struct name='VDIIDCTriggerState' type='{VDIIDCTriggerState=&quot;flags&quot;I&quot;mode2TransitionCount&quot;S&quot;mode3FrameRateMultiplier&quot;S&quot;absoluteValue&quot;f}'>
<field declared_type='UInt32' name='flags' type='L'/>
<field declared_type='UInt16' name='mode2TransitionCount' type='S'/>
<field declared_type='UInt16' name='mode3FrameRateMultiplier' type='S'/>
<field declared_type='QTFloatSingle' name='absoluteValue' type='f'/>
</struct>
<struct name='VdigBufferRec' type='{VdigBufferRec=&quot;dest&quot;^^{PixMap}&quot;location&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;reserved&quot;l}'>
<field declared_type='PixMapHandle' name='dest' type='^^{PixMap}'/>
<field declared_type='Point' name='location' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
<field declared_type='long' name='reserved' type='l'/>
</struct>
<struct name='VdigBufferRecList' type='{VdigBufferRecList=&quot;count&quot;s&quot;matrix&quot;^{MatrixRecord}&quot;mask&quot;^{OpaqueRgnHandle}&quot;list&quot;[1{VdigBufferRec=&quot;dest&quot;^^{PixMap}&quot;location&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;reserved&quot;l}]}'>
<field declared_type='short' name='count' type='s'/>
<field declared_type='MatrixRecordPtr' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<field declared_type='RgnHandle' name='mask' type='^{OpaqueRgnHandle=}'/>
<field declared_type='VdigBufferRec*' name='list' type='[1{VdigBufferRec=&quot;dest&quot;^^{PixMap}&quot;location&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;reserved&quot;l}]'/>
</struct>
<struct name='VdigType' type='{VdigType=&quot;digType&quot;l&quot;reserved&quot;l}'>
<field declared_type='long' name='digType' type='l'/>
<field declared_type='long' name='reserved' type='l'/>
</struct>
<struct name='VdigTypeList' type='{VdigTypeList=&quot;count&quot;s&quot;list&quot;[1{VdigType=&quot;digType&quot;l&quot;reserved&quot;l}]}'>
<field declared_type='short' name='count' type='s'/>
<field declared_type='VdigType*' name='list' type='[1{VdigType=&quot;digType&quot;l&quot;reserved&quot;l}]'/>
</struct>
<struct name='VideoBottles' type='{VideoBottles=&quot;procCount&quot;s&quot;grabProc&quot;^?&quot;grabCompleteProc&quot;^?&quot;displayProc&quot;^?&quot;compressProc&quot;^?&quot;compressCompleteProc&quot;^?&quot;addFrameProc&quot;^?&quot;transferFrameProc&quot;^?&quot;grabCompressCompleteProc&quot;^?&quot;displayCompressProc&quot;^?}'>
<field declared_type='short' name='procCount' type='s'/>
<field declared_type='SGGrabBottleUPP' function_pointer='true' name='grabProc' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</field>
<field declared_type='SGGrabCompleteBottleUPP' function_pointer='true' name='grabCompleteProc' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Boolean*' type='^B'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</field>
<field declared_type='SGDisplayBottleUPP' function_pointer='true' name='displayProc' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</field>
<field declared_type='SGCompressBottleUPP' function_pointer='true' name='compressProc' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</field>
<field declared_type='SGCompressCompleteBottleUPP' function_pointer='true' name='compressCompleteProc' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Boolean*' type='^B'/>
<arg declared_type='SGCompressInfo*' type='^{SGCompressInfo=*LCC}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</field>
<field declared_type='SGAddFrameBottleUPP' function_pointer='true' name='addFrameProc' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='TimeValue' type='l'/>
<arg declared_type='TimeScale' type='l'/>
<arg const='true' declared_type='SGCompressInfo*' type='^{SGCompressInfo=*LCC}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</field>
<field declared_type='SGTransferFrameBottleUPP' function_pointer='true' name='transferFrameProc' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</field>
<field declared_type='SGGrabCompressCompleteBottleUPP' function_pointer='true' name='grabCompressCompleteProc' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt8*' type='*'/>
<arg declared_type='SGCompressInfo*' type='^{SGCompressInfo=*LCC}'/>
<arg declared_type='TimeRecord*' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</field>
<field declared_type='SGDisplayCompressBottleUPP' function_pointer='true' name='displayCompressProc' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='ImageDescriptionHandle' type='^^{ImageDescription}'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</field>
</struct>
<struct name='VideoMediaInfo' type='{VideoMediaInfo=&quot;size&quot;i&quot;atomType&quot;i&quot;header&quot;{VideoMediaInfoHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;vmiHeader&quot;{VideoMediaInfoHeader=&quot;flags&quot;i&quot;graphicsMode&quot;s&quot;opColorRed&quot;s&quot;opColorGreen&quot;s&quot;opColorBlue&quot;s}}&quot;dataHandler&quot;{HandlerAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;hInfo&quot;{PublicHandlerInfo=&quot;flags&quot;i&quot;componentType&quot;i&quot;componentSubType&quot;i&quot;componentManufacturer&quot;i&quot;componentFlags&quot;i&quot;componentFlagsMask&quot;i&quot;componentName&quot;[1c]}}&quot;dataInfo&quot;{DataInfoAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;dataRef&quot;i}&quot;sampleTable&quot;{SampleTableAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;sampleDescription&quot;{SampleDescriptionAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;sampleDescTable&quot;[1{SampleDescription=&quot;descSize&quot;i&quot;dataFormat&quot;i&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s}]}&quot;timeToSampleNum&quot;{TimeToSampleNumAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;timeToSampleNumTable&quot;[1{TimeToSampleNum=&quot;sampleCount&quot;i&quot;sampleDuration&quot;i}]}&quot;sampleToChunk&quot;{SampleToChunkAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;sampleToChunkTable&quot;[1{SampleToChunk=&quot;firstChunk&quot;i&quot;samplesPerChunk&quot;i&quot;sampleDescriptionID&quot;i}]}&quot;syncSample&quot;{SyncSampleAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;syncSampleTable&quot;[1l]}&quot;sampleSize&quot;{SampleSizeAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;sampleSize&quot;i&quot;numEntries&quot;i&quot;sampleSizeTable&quot;[1l]}&quot;chunkOffset&quot;{ChunkOffsetAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;chunkOffsetTable&quot;[1l]}&quot;shadowSync&quot;{ShadowSyncAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;shadowSyncTable&quot;[1{ShadowSync=&quot;fdSampleNum&quot;i&quot;syncSampleNum&quot;i}]}}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='VideoMediaInfoHeaderAtom' name='header' type='{VideoMediaInfoHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;vmiHeader&quot;{VideoMediaInfoHeader=&quot;flags&quot;i&quot;graphicsMode&quot;s&quot;opColorRed&quot;s&quot;opColorGreen&quot;s&quot;opColorBlue&quot;s}}'/>
<field declared_type='HandlerAtom' name='dataHandler' type='{HandlerAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;hInfo&quot;{PublicHandlerInfo=&quot;flags&quot;i&quot;componentType&quot;i&quot;componentSubType&quot;i&quot;componentManufacturer&quot;i&quot;componentFlags&quot;i&quot;componentFlagsMask&quot;i&quot;componentName&quot;[1c]}}'/>
<field declared_type='DataInfoAtom' name='dataInfo' type='{DataInfoAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;dataRef&quot;i}'/>
<field declared_type='SampleTableAtom' name='sampleTable' type='{SampleTableAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;sampleDescription&quot;{SampleDescriptionAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;sampleDescTable&quot;[1{SampleDescription=&quot;descSize&quot;i&quot;dataFormat&quot;i&quot;resvd1&quot;i&quot;resvd2&quot;s&quot;dataRefIndex&quot;s}]}&quot;timeToSampleNum&quot;{TimeToSampleNumAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;timeToSampleNumTable&quot;[1{TimeToSampleNum=&quot;sampleCount&quot;i&quot;sampleDuration&quot;i}]}&quot;sampleToChunk&quot;{SampleToChunkAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;sampleToChunkTable&quot;[1{SampleToChunk=&quot;firstChunk&quot;i&quot;samplesPerChunk&quot;i&quot;sampleDescriptionID&quot;i}]}&quot;syncSample&quot;{SyncSampleAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;syncSampleTable&quot;[1l]}&quot;sampleSize&quot;{SampleSizeAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;sampleSize&quot;i&quot;numEntries&quot;i&quot;sampleSizeTable&quot;[1l]}&quot;chunkOffset&quot;{ChunkOffsetAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;chunkOffsetTable&quot;[1l]}&quot;shadowSync&quot;{ShadowSyncAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;flags&quot;i&quot;numEntries&quot;i&quot;shadowSyncTable&quot;[1{ShadowSync=&quot;fdSampleNum&quot;i&quot;syncSampleNum&quot;i}]}}'/>
</struct>
<struct name='VideoMediaInfoHeader' type='{VideoMediaInfoHeader=&quot;flags&quot;i&quot;graphicsMode&quot;s&quot;opColorRed&quot;s&quot;opColorGreen&quot;s&quot;opColorBlue&quot;s}'>
<field declared_type='SInt32' name='flags' type='l'/>
<field declared_type='SInt16' name='graphicsMode' type='s'/>
<field declared_type='SInt16' name='opColorRed' type='s'/>
<field declared_type='SInt16' name='opColorGreen' type='s'/>
<field declared_type='SInt16' name='opColorBlue' type='s'/>
</struct>
<struct name='VideoMediaInfoHeaderAtom' type='{VideoMediaInfoHeaderAtom=&quot;size&quot;i&quot;atomType&quot;i&quot;vmiHeader&quot;{VideoMediaInfoHeader=&quot;flags&quot;i&quot;graphicsMode&quot;s&quot;opColorRed&quot;s&quot;opColorGreen&quot;s&quot;opColorBlue&quot;s}}'>
<field declared_type='SInt32' name='size' type='l'/>
<field declared_type='SInt32' name='atomType' type='l'/>
<field declared_type='VideoMediaInfoHeader' name='vmiHeader' type='{VideoMediaInfoHeader=&quot;flags&quot;i&quot;graphicsMode&quot;s&quot;opColorRed&quot;s&quot;opColorGreen&quot;s&quot;opColorBlue&quot;s}'/>
</struct>
<struct name='XMLAttribute' type='{XMLAttribute=&quot;identifier&quot;I&quot;name&quot;*&quot;valueKind&quot;l&quot;value&quot;(XMLAttributeValue=&quot;number&quot;i&quot;boolean&quot;B&quot;color&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}&quot;enumType&quot;I)&quot;valueStr&quot;*}'>
<field declared_type='UInt32' name='identifier' type='L'/>
<field declared_type='char*' name='name' type='*'/>
<field declared_type='long' name='valueKind' type='l'/>
<field declared_type='XMLAttributeValue' name='value' type='(XMLAttributeValue=&quot;number&quot;i&quot;boolean&quot;B&quot;color&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}&quot;enumType&quot;I)'/>
<field declared_type='char*' name='valueStr' type='*'/>
</struct>
<struct name='XMLContent' type='{XMLContent=&quot;kind&quot;I&quot;actualContent&quot;(XMLElementContent=&quot;element&quot;{XMLElement=&quot;identifier&quot;I&quot;name&quot;*&quot;attributes&quot;^{XMLAttribute}&quot;contents&quot;^{XMLContent}}&quot;charData&quot;*)}'>
<field declared_type='UInt32' name='kind' type='L'/>
<field declared_type='XMLElementContent' name='actualContent' type='(XMLElementContent=&quot;element&quot;{XMLElement=&quot;identifier&quot;I&quot;name&quot;*&quot;attributes&quot;^{XMLAttribute}&quot;contents&quot;^{XMLContent}}&quot;charData&quot;*)'/>
</struct>
<struct name='XMLDocRecord' type='{XMLDocRecord=&quot;xmlDataStorage&quot;^v&quot;rootElement&quot;{XMLElement=&quot;identifier&quot;I&quot;name&quot;*&quot;attributes&quot;^{XMLAttribute}&quot;contents&quot;^{XMLContent}}}'>
<field declared_type='void*' name='xmlDataStorage' type='^v'/>
<field declared_type='XMLElement' name='rootElement' type='{XMLElement=&quot;identifier&quot;I&quot;name&quot;*&quot;attributes&quot;^{XMLAttribute}&quot;contents&quot;^{XMLContent}}'/>
</struct>
<struct name='XMLElement' type='{XMLElement=&quot;identifier&quot;I&quot;name&quot;*&quot;attributes&quot;^{XMLAttribute}&quot;contents&quot;^{XMLContent}}'>
<field declared_type='UInt32' name='identifier' type='L'/>
<field declared_type='char*' name='name' type='*'/>
<field declared_type='XMLAttributePtr' name='attributes' type='^{XMLAttribute=I*l(XMLAttributeValue=iB{RGBColor=SSS}I)*}'/>
<field declared_type='XMLContentPtr' name='contents' type='^{XMLContent=I(XMLElementContent={XMLElement=I*^{XMLAttribute}^{XMLContent}}*)}'/>
</struct>
<struct name='gxPath' type='{gxPath=&quot;vectors&quot;l&quot;controlBits&quot;[1l]&quot;vector&quot;[1{gxPoint=&quot;x&quot;i&quot;y&quot;i}]}'>
<field declared_type='long' name='vectors' type='l'/>
<field declared_type='long*' name='controlBits' type='[1l]'/>
<field declared_type='gxPoint*' name='vector' type='[1{gxPoint=&quot;x&quot;i&quot;y&quot;i}]'/>
</struct>
<struct name='gxPaths' type='{gxPaths=&quot;contours&quot;l&quot;contour&quot;[1{gxPath=&quot;vectors&quot;l&quot;controlBits&quot;[1l]&quot;vector&quot;[1{gxPoint=&quot;x&quot;i&quot;y&quot;i}]}]}'>
<field declared_type='long' name='contours' type='l'/>
<field declared_type='gxPath*' name='contour' type='[1{gxPath=&quot;vectors&quot;l&quot;controlBits&quot;[1l]&quot;vector&quot;[1{gxPoint=&quot;x&quot;i&quot;y&quot;i}]}]'/>
</struct>
<struct name='gxPoint' type='{gxPoint=&quot;x&quot;i&quot;y&quot;i}'>
<field declared_type='Fixed' name='x' type='l'/>
<field declared_type='Fixed' name='y' type='l'/>
</struct>
<cftype gettypeid_func='ICMCompressionFrameOptionsGetTypeID' name='ICMCompressionFrameOptionsRef' type='^{OpaqueICMCompressionFrameOptions=}'/>
<cftype gettypeid_func='ICMCompressionSessionOptionsGetTypeID' name='ICMCompressionSessionOptionsRef' type='^{OpaqueICMCompressionSessionOptions=}'/>
<cftype gettypeid_func='ICMCompressionSessionGetTypeID' name='ICMCompressionSessionRef' type='^{OpaqueICMCompressionSession=}'/>
<cftype gettypeid_func='ICMCompressorSourceFrameGetTypeID' name='ICMCompressorSourceFrameRef' type='^{OpaqueICMCompressorSourceFrame=}'/>
<cftype gettypeid_func='ICMDecompressionFrameOptionsGetTypeID' name='ICMDecompressionFrameOptionsRef' type='^{OpaqueICMDecompressionFrameOptions=}'/>
<cftype gettypeid_func='ICMDecompressionSessionOptionsGetTypeID' name='ICMDecompressionSessionOptionsRef' type='^{OpaqueICMDecompressionSessionOptions=}'/>
<cftype gettypeid_func='ICMDecompressionSessionGetTypeID' name='ICMDecompressionSessionRef' type='^{OpaqueICMDecompressionSession=}'/>
<cftype gettypeid_func='ICMEncodedFrameGetTypeID' name='ICMEncodedFrameRef' type='^{OpaqueICMEncodedFrame=}'/>
<cftype gettypeid_func='ICMMultiPassStorageGetTypeID' name='ICMMultiPassStorageRef' type='^{OpaqueICMMultiPassStorage=}'/>
<cftype gettypeid_func='ICMEncodedFrameGetTypeID' name='ICMMutableEncodedFrameRef' type='^{OpaqueICMEncodedFrame=}'/>
<cftype gettypeid_func='QTSampleTableGetTypeID' name='QTMutableSampleTableRef' type='^{OpaqueQTSampleTable=}'/>
<cftype gettypeid_func='QTSampleTableGetTypeID' name='QTSampleTableRef' type='^{OpaqueQTSampleTable=}'/>
<cftype gettypeid_func='QTVisualContextGetTypeID' name='QTVisualContextRef' type='^{OpaqueQTVisualContext=}'/>
<cftype name='HandleDataRef' type='^^{HandleDataRefRecord}'/>
<cftype name='ICMCompressorSessionRef' type='^{OpaqueICMCompressorSession=}'/>
<cftype name='IdleManager' type='^{OpaqueIdleManager=}'/>
<cftype name='MovieAudioExtractionRef' type='^{MovieAudioExtractionRefRecord=}'/>
<cftype name='PointerDataRef' type='^^{PointerDataRefRecord}'/>
<cftype name='QTAudioContextInsertRegistryInfoRef' type='^{QTAudioContextInsertRegistryInfo=^vI^{AudioChannelLayout}I^{AudioChannelLayout}^?^?^?}'/>
<cftype name='QTAudioContextRef' type='^{QTAudioContextRefType=}'/>
<cftype name='QTAudioTrackInsertRegistryInfoRef' type='^{QTAudioTrackInsertRegistryInfo=^^{TrackType}{QTAudioContextInsertRegistryInfo=^vI^{AudioChannelLayout}I^{AudioChannelLayout}^?^?^?}}'/>
<cftype name='QTCallBack' type='^{QTCallBackHeader=}'/>
<cftype name='QTMLMutex' type='^{OpaqueQTMLMutex=}'/>
<cftype name='QTMLSyncVar' type='^{OpaqueQTMLSyncVar=}'/>
<cftype name='QTMetaDataRef' type='^{OpaqueQTMetaDataRef=}'/>
<cftype name='QTSMemPtr' type='^{OpaqueQTSMemPtr=}'/>
<cftype name='QTTweener' type='^{QTTweenerRecord=}'/>
<cftype name='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<cftype name='RTPPacketGroupRef' type='^{OpaqueRTPPacketGroupRef=}'/>
<cftype name='RTPPacketRef' type='^{OpaqueRTPPacketRef=}'/>
<cftype name='RTPPacketRepeatedDataRef' type='^{OpaqueRTPPacketRepeatedDataRef=}'/>
<cftype name='Sprite' type='^{SpriteRecord=}'/>
<cftype name='SpriteWorld' type='^{SpriteWorldRecord=}'/>
<constant const='true' declared_type='CFStringRef' name='kQTVisualContextExpectedReadAheadKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kQTVisualContextOutputColorSpaceKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kQTVisualContextPixelBufferAttributesKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kQTVisualContextTargetDimensionsKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kQTVisualContextTargetDimensions_HeightKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kQTVisualContextTargetDimensions_WidthKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kQTVisualContextTypeKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kQTVisualContextType_OpenGLTexture' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kQTVisualContextType_PixelBuffer' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kQTVisualContextWorkingColorSpaceKey' type='^{__CFString=}'/>
<string_constant name='kHIMovieViewClassID' nsstring='true' value='com.apple.quicktime.HIMovieView'/>
<string_constant name='kQTMLIsDoubleBuffered' value='UsesDoubleBuffer'/>
<enum name='AliasDataHandlerSubType' value='1634494835'/>
<enum name='AppleDataCompressorSubType' value='1633969507'/>
<enum name='AudioMediaCharacteristic' value='1700885107'/>
<enum name='BandwidthManagementPrefsType' value='1651993959'/>
<enum name='BaseMediaType' value='1735291491'/>
<enum name='ClipAID' value='1668049264'/>
<enum name='CloneMediaAID' value='1668050798'/>
<enum name='ColorTableAID' value='1668571490'/>
<enum name='CompressedMovieAID' value='1668116342'/>
<enum name='CompressedMovieDataAID' value='1668118116'/>
<enum name='ConnectionSpeedIsValidPrefsType' value='1987276900'/>
<enum name='ConnectionSpeedPrefsType' value='1668509796'/>
<enum name='CreateFilePreviewComponentType' value='1886216555'/>
<enum name='DataCompressionAtomAID' value='1684238189'/>
<enum name='DataCompressorComponentType' value='1684238189'/>
<enum name='DataDecompressorComponentType' value='1684301155'/>
<enum name='DataHandlerType' value='1684565106'/>
<enum name='DataInfoAID' value='1684631142'/>
<enum name='DataRefAID' value='1685218662'/>
<enum name='DataRefContainerAID' value='1685218915'/>
<enum name='DoTheRightThing' value='0'/>
<enum name='EditListAID' value='1701606260'/>
<enum name='EditsAID' value='1701082227'/>
<enum name='FileTypeAID' value='1718909296'/>
<enum name='FlashMediaType' value='1718383464'/>
<enum name='FreeAtomType' value='1718773093'/>
<enum name='GenericMediaInfoAID' value='1735223662'/>
<enum name='GenericMediaInfoHeaderAID' value='1735223396'/>
<enum name='GraphicsExporterComponentType' value='1735550328'/>
<enum name='GraphicsImporterComponentType' value='1735551344'/>
<enum name='HandleDataHandlerSubType' value='1752065132'/>
<enum name='HandlerAID' value='1751411826'/>
<enum name='ImageTranscodererComponentType' value='1768780899'/>
<enum name='InputMapAID' value='1768776048'/>
<enum name='LoadSettingsAID' value='1819238756'/>
<enum name='MAX_ATTRIBUTE_VALUE_KIND' value='64'/>
<enum name='MEDIA_TYPE' value='1835297121'/>
<enum name='MOVIE_TYPE' value='1836019574'/>
<enum name='MPEGMediaType' value='1297106247'/>
<enum name='MatteAID' value='1835103348'/>
<enum name='MatteCompAID' value='1802330484'/>
<enum name='MediaAID' value='1835297121'/>
<enum name='MediaHandlerType' value='1835560050'/>
<enum name='MediaHeaderAID' value='1835296868'/>
<enum name='MediaInfoAID' value='1835626086'/>
<enum name='MovieAID' value='1836019574'/>
<enum name='MovieBackwardPointerResourceType' value='1650549611'/>
<enum name='MovieBufferHintsAID' value='1835165288'/>
<enum name='MovieControllerComponentType' value='1886151033'/>
<enum name='MovieDataAtomType' value='1835295092'/>
<enum name='MovieDataRefAliasAID' value='1835299425'/>
<enum name='MovieExportType' value='1936746868'/>
<enum name='MovieFileType' value='1299148630'/>
<enum name='MovieForwardPointerResourceType' value='1718579813'/>
<enum name='MovieHeaderAID' value='1836476516'/>
<enum name='MovieImportType' value='1700885536'/>
<enum name='MovieMediaType' value='1836019574'/>
<enum name='MovieResourceAtomType' value='1836019574'/>
<enum name='MovieResourceType' value='1836019574'/>
<enum name='MovieScrapType' value='1836019574'/>
<enum name='MusicMediaType' value='1836413801'/>
<enum name='NullDataHandlerSubType' value='1853189228'/>
<enum name='PointerDataHandlerSubType' value='1886679584'/>
<enum name='PropertyAtomAID' value='1668244581'/>
<enum name='QTVideoOutputComponentBaseSubType' value='1650553701'/>
<enum name='QTVideoOutputComponentType' value='1987016052'/>
<enum name='QT_MEDIA_TYPE' value='1835297121'/>
<enum name='QT_MOVIE_TYPE' value='1836019574'/>
<enum name='QT_SOUND_TYPE' value='1936684398'/>
<enum name='QT_TRACK_TYPE' value='1953653099'/>
<enum name='QT_VIDEO_TYPE' value='1986618469'/>
<enum name='ReferenceMovieAlternateGroupAID' value='1919770983'/>
<enum name='ReferenceMovieCPURatingAID' value='1919771507'/>
<enum name='ReferenceMovieComponentCheckAID' value='1919771492'/>
<enum name='ReferenceMovieDataRateAID' value='1919771762'/>
<enum name='ReferenceMovieDataRefAID' value='1919185510'/>
<enum name='ReferenceMovieDescriptorAID' value='1919771745'/>
<enum name='ReferenceMovieLanguageAID' value='1919773793'/>
<enum name='ReferenceMovieNetworkStatusAID' value='1919837556'/>
<enum name='ReferenceMovieQualityAID' value='1919775093'/>
<enum name='ReferenceMovieRecordAID' value='1919775329'/>
<enum name='ReferenceMovieVersionCheckAID' value='1919776355'/>
<enum name='ResourceDataHandlerSubType' value='1920168547'/>
<enum name='RgnClipAID' value='1668441966'/>
<enum name='SGAudioMediaType' value='1635083369'/>
<enum name='SOUND_TYPE' value='1936684398'/>
<enum name='STChunkOffset64AID' value='1668232756'/>
<enum name='STChunkOffsetAID' value='1937007471'/>
<enum name='STCompositionOffsetAID' value='1668576371'/>
<enum name='STCompositionShiftLeastGreatestAID' value='1668508775'/>
<enum name='STPartialSyncSampleAID' value='1937010803'/>
<enum name='STSampleDependencyAID' value='1935963248'/>
<enum name='STSampleDescAID' value='1937011556'/>
<enum name='STSampleIDAID' value='1937008996'/>
<enum name='STSampleSizeAID' value='1937011578'/>
<enum name='STSampleToChunkAID' value='1937011555'/>
<enum name='STShadowSyncAID' value='1937011560'/>
<enum name='STSyncSampleAID' value='1937011571'/>
<enum name='STTimeToSampAID' value='1937011827'/>
<enum name='SampleTableAID' value='1937007212'/>
<enum name='SecureContentInfoAID' value='1936289382'/>
<enum name='SecureContentSchemeInfoAID' value='1935894633'/>
<enum name='SecureContentSchemeTypeAID' value='1935894637'/>
<enum name='SeqGrabChannelType' value='1936155496'/>
<enum name='SeqGrabComponentType' value='1650553447'/>
<enum name='SeqGrabCompressionPanelType' value='1668116594'/>
<enum name='SeqGrabPanelType' value='1936158830'/>
<enum name='SeqGrabSourcePanelType' value='1936684402'/>
<enum name='ShowFilePreviewComponentType' value='1886285684'/>
<enum name='SkinMediaType' value='1936419182'/>
<enum name='SkipAtomType' value='1936419184'/>
<enum name='SoundLocalizationAID' value='1936486243'/>
<enum name='SoundMediaInfoHeaderAID' value='1936549988'/>
<enum name='SoundMediaType' value='1936684398'/>
<enum name='SpriteMediaType' value='1936749172'/>
<enum name='StandardCompressionSubType' value='1768776039'/>
<enum name='StandardCompressionSubTypeAudio' value='1635083369'/>
<enum name='StandardCompressionSubTypeSound' value='1936684398'/>
<enum name='StandardCompressionType' value='1935893609'/>
<enum name='TCSourceRefNameType' value='1851878757'/>
<enum name='TRACK_TYPE' value='1953653099'/>
<enum name='TextMediaType' value='1952807028'/>
<enum name='ThreeDeeMediaType' value='1902392164'/>
<enum name='TimeCode64MediaType' value='1952658996'/>
<enum name='TimeCodeMediaType' value='1953325924'/>
<enum name='TrackAID' value='1953653099'/>
<enum name='TrackApertureModeDimensionsAID' value='1952542836'/>
<enum name='TrackCleanApertureDimensionsAID' value='1668048230'/>
<enum name='TrackEnable' value='1'/>
<enum name='TrackEncodedPixelsDimensionsAID' value='1701736294'/>
<enum name='TrackHeaderAID' value='1953196132'/>
<enum name='TrackInMovie' value='2'/>
<enum name='TrackInPoster' value='8'/>
<enum name='TrackInPreview' value='4'/>
<enum name='TrackProductionApertureDimensionsAID' value='1886547814'/>
<enum name='TrackReferenceAID' value='1953654118'/>
<enum name='TweenComponentType' value='1953981806'/>
<enum name='TweenMediaType' value='1953981806'/>
<enum name='URLDataHandlerSubType' value='1970433056'/>
<enum name='UserDataAID' value='1969517665'/>
<enum name='VIDEO_TYPE' value='1986618469'/>
<enum name='VideoMediaInfoHeaderAID' value='1986881636'/>
<enum name='VideoMediaType' value='1986618469'/>
<enum name='VisualMediaCharacteristic' value='1702454643'/>
<enum name='WideAtomPlaceholderType' value='2003395685'/>
<enum name='WiredActionHandlerType' value='2003399269'/>
<enum name='attributeValueKindBoolean' value='4'/>
<enum name='attributeValueKindCaseSensEnum' value='64'/>
<enum name='attributeValueKindCharString' value='0'/>
<enum name='attributeValueKindColor' value='16'/>
<enum name='attributeValueKindEnum' value='32'/>
<enum name='attributeValueKindInteger' value='1'/>
<enum name='attributeValueKindOnOff' value='8'/>
<enum name='attributeValueKindPercent' value='2'/>
<enum name='callBackAtDeferredTask' value='16384'/>
<enum name='callBackAtExtremes' value='4'/>
<enum name='callBackAtInterrupt' value='32768'/>
<enum name='callBackAtRate' value='2'/>
<enum name='callBackAtTime' value='1'/>
<enum name='callBackAtTimeBaseDisposed' value='5'/>
<enum name='callBackAtTimeJump' value='3'/>
<enum name='callOldBits' value='2'/>
<enum name='callStdBits' value='1'/>
<enum name='canMovieExportAuxDataHandle' value='128'/>
<enum name='canMovieExportFiles' value='16'/>
<enum name='canMovieExportFromProcedures' value='32768'/>
<enum name='canMovieExportHandles' value='8'/>
<enum name='canMovieExportValidateMovie' value='65536'/>
<enum name='canMovieImportAvoidBlocking' value='32768'/>
<enum name='canMovieImportDataReferences' value='262144'/>
<enum name='canMovieImportFiles' value='2'/>
<enum name='canMovieImportHandles' value='1'/>
<enum name='canMovieImportInPlace' value='2048'/>
<enum name='canMovieImportPartial' value='8192'/>
<enum name='canMovieImportValidateDataReferences' value='2097152'/>
<enum name='canMovieImportValidateFile' value='512'/>
<enum name='canMovieImportValidateHandles' value='256'/>
<enum name='canMovieImportWithIdle' value='1048576'/>
<enum name='cantReceiveFromSynthesizerErr' value='2147547111'/>
<enum name='cantSendToSynthesizerErr' value='2147547112'/>
<enum name='channelFlagDontOpenResFile' value='2'/>
<enum name='channelFlagHasDependency' value='4'/>
<enum name='channelPlayAllData' value='4'/>
<enum name='channelPlayFast' value='1'/>
<enum name='channelPlayHighQuality' value='2'/>
<enum name='channelPlayNormal' value='0'/>
<enum name='channelPlayPostConversion' value='64'/>
<enum name='channelPlayPostMix' value='16'/>
<enum name='channelPlayPreConversion' value='32'/>
<enum name='channelPlayPreMix' value='8'/>
<enum name='clockComponentType' value='1668050795'/>
<enum name='codecCanAsync' value='8192'/>
<enum name='codecCanAsyncWhen' value='65536'/>
<enum name='codecCanClipRectangular' value='256'/>
<enum name='codecCanClipVertical' value='128'/>
<enum name='codecCanCopyPrev' value='32'/>
<enum name='codecCanCopyPrevComp' value='4096'/>
<enum name='codecCanDoIndirectSurface' value='33554432'/>
<enum name='codecCanFastDither' value='1024'/>
<enum name='codecCanLockSurface' value='-2147483648'/>
<enum name='codecCanMakeMask' value='16384'/>
<enum name='codecCanManagePrevBuffer' value='262144'/>
<enum name='codecCanMask' value='2'/>
<enum name='codecCanMatte' value='4'/>
<enum name='codecCanRemapColor' value='512'/>
<enum name='codecCanRemapResolution' value='536870912'/>
<enum name='codecCanScale' value='1'/>
<enum name='codecCanShieldCursor' value='131072'/>
<enum name='codecCanShift' value='32768'/>
<enum name='codecCanSpool' value='64'/>
<enum name='codecCanSrcExtract' value='2048'/>
<enum name='codecCanTransferMode' value='16'/>
<enum name='codecCanTransform' value='8'/>
<enum name='codecCompletionDecoded' value='1024'/>
<enum name='codecCompletionDest' value='2'/>
<enum name='codecCompletionDontUnshield' value='4'/>
<enum name='codecCompletionDropped' value='64'/>
<enum name='codecCompletionForceChainFlush' value='32'/>
<enum name='codecCompletionNotDisplayable' value='2048'/>
<enum name='codecCompletionNotDrawn' value='4096'/>
<enum name='codecCompletionSource' value='1'/>
<enum name='codecCompletionUnlockBits' value='16'/>
<enum name='codecCompletionWentOffscreen' value='8'/>
<enum name='codecConditionCatchUpDiff' value='16384'/>
<enum name='codecConditionCodecChangedMask' value='-2147483648'/>
<enum name='codecConditionDoCursor' value='8192'/>
<enum name='codecConditionFirstBand' value='1'/>
<enum name='codecConditionFirstFrame' value='4'/>
<enum name='codecConditionFirstScreen' value='4096'/>
<enum name='codecConditionLastBand' value='2'/>
<enum name='codecConditionMaskMayBeChanged' value='32768'/>
<enum name='codecConditionNewAccuracy' value='1024'/>
<enum name='codecConditionNewClut' value='512'/>
<enum name='codecConditionNewDepth' value='8'/>
<enum name='codecConditionNewDestination' value='2048'/>
<enum name='codecConditionNewMask' value='64'/>
<enum name='codecConditionNewMatte' value='128'/>
<enum name='codecConditionNewSrcRect' value='32'/>
<enum name='codecConditionNewTransferMode' value='256'/>
<enum name='codecConditionNewTransform' value='16'/>
<enum name='codecConditionToBuffer' value='65536'/>
<enum name='codecDSequenceBidirectionalPrediction' value='128'/>
<enum name='codecDSequenceDeinterlaceFields' value='1024'/>
<enum name='codecDSequenceDisableOverlaySurface' value='32'/>
<enum name='codecDSequenceEnableSubPixelPositioning' value='512'/>
<enum name='codecDSequenceFlushInsteadOfDirtying' value='256'/>
<enum name='codecDSequenceSingleField' value='64'/>
<enum name='codecDrawsHigherQualityScaled' value='128'/>
<enum name='codecFlagCatchUpDiff' value='4096'/>
<enum name='codecFlagDiffFrame' value='512'/>
<enum name='codecFlagDontOffscreen' value='32'/>
<enum name='codecFlagDontUseNewImageBuffer' value='1024'/>
<enum name='codecFlagForceKeyFrame' value='128'/>
<enum name='codecFlagImageBufferNotSourceImage' value='8192'/>
<enum name='codecFlagInterlaceUpdate' value='2048'/>
<enum name='codecFlagLiveGrab' value='512'/>
<enum name='codecFlagNoScreenUpdate' value='8'/>
<enum name='codecFlagOnlyScreenUpdate' value='256'/>
<enum name='codecFlagOutUpdateOnDataSourceChange' value='1024'/>
<enum name='codecFlagOutUpdateOnNextIdle' value='512'/>
<enum name='codecFlagOutUpdateOnTimeChange' value='4096'/>
<enum name='codecFlagReenable' value='16384'/>
<enum name='codecFlagSequenceSensitive' value='2048'/>
<enum name='codecFlagSupportDisable' value='8192'/>
<enum name='codecFlagUpdatePrevious' value='4'/>
<enum name='codecFlagUpdatePreviousComp' value='64'/>
<enum name='codecFlagUseImageBuffer' value='1'/>
<enum name='codecFlagUseScreenBuffer' value='2'/>
<enum name='codecFlagUsedImageBuffer' value='32768'/>
<enum name='codecFlagUsedNewImageBuffer' value='16384'/>
<enum name='codecFlagWasCompressed' value='16'/>
<enum name='codecHandlesInputs' value='16777216'/>
<enum name='codecHasVolatileBuffer' value='524288'/>
<enum name='codecHighQuality' value='768'/>
<enum name='codecImageBufferIsInAGPMemory' value='16'/>
<enum name='codecImageBufferIsInPCIMemory' value='32'/>
<enum name='codecImageBufferIsOnScreen' value='2097152'/>
<enum name='codecImageBufferIsOverlaySurface' value='2'/>
<enum name='codecImageBufferMemoryFlagsValid' value='64'/>
<enum name='codecInfoDepth1' value='1'/>
<enum name='codecInfoDepth16' value='16'/>
<enum name='codecInfoDepth2' value='2'/>
<enum name='codecInfoDepth24' value='64'/>
<enum name='codecInfoDepth32' value='32'/>
<enum name='codecInfoDepth33' value='128'/>
<enum name='codecInfoDepth34' value='256'/>
<enum name='codecInfoDepth36' value='512'/>
<enum name='codecInfoDepth4' value='4'/>
<enum name='codecInfoDepth40' value='1024'/>
<enum name='codecInfoDepth8' value='8'/>
<enum name='codecInfoDoes1' value='1'/>
<enum name='codecInfoDoes16' value='16'/>
<enum name='codecInfoDoes2' value='2'/>
<enum name='codecInfoDoes32' value='32'/>
<enum name='codecInfoDoes4' value='4'/>
<enum name='codecInfoDoes8' value='8'/>
<enum name='codecInfoDoesBlend' value='524288'/>
<enum name='codecInfoDoesDither' value='64'/>
<enum name='codecInfoDoesDouble' value='2048'/>
<enum name='codecInfoDoesHalf' value='8192'/>
<enum name='codecInfoDoesHorizFlip' value='65536'/>
<enum name='codecInfoDoesLossless' value='4096'/>
<enum name='codecInfoDoesMask' value='512'/>
<enum name='codecInfoDoesMultiPass' value='1048576'/>
<enum name='codecInfoDoesQuad' value='4096'/>
<enum name='codecInfoDoesQuarter' value='16384'/>
<enum name='codecInfoDoesRateConstrain' value='8388608'/>
<enum name='codecInfoDoesRecompress' value='2097152'/>
<enum name='codecInfoDoesReorder' value='524288'/>
<enum name='codecInfoDoesRotate' value='32768'/>
<enum name='codecInfoDoesShrink' value='256'/>
<enum name='codecInfoDoesSpool' value='4194304'/>
<enum name='codecInfoDoesStretch' value='128'/>
<enum name='codecInfoDoesTemporal' value='1024'/>
<enum name='codecInfoDoesVertFlip' value='131072'/>
<enum name='codecInfoDoesWarp' value='1048576'/>
<enum name='codecInfoHasEffectParameterList' value='262144'/>
<enum name='codecInfoResourceType' value='1667523433'/>
<enum name='codecInfoSequenceSensitive' value='8192'/>
<enum name='codecInfoStoresClut' value='2048'/>
<enum name='codecInterfaceVersion' value='2'/>
<enum name='codecIsDirectToScreenOnly' value='1073741824'/>
<enum name='codecIsSequenceSensitive' value='67108864'/>
<enum name='codecLockBitsShieldCursor' value='1'/>
<enum name='codecLosslessQuality' value='1024'/>
<enum name='codecLowQuality' value='256'/>
<enum name='codecMaxQuality' value='1023'/>
<enum name='codecMinQuality' value='0'/>
<enum name='codecMinimumDataSize' value='32768'/>
<enum name='codecNormalQuality' value='512'/>
<enum name='codecProgressClose' value='2'/>
<enum name='codecProgressOpen' value='0'/>
<enum name='codecProgressUpdatePercent' value='1'/>
<enum name='codecRequiresMaskBits' value='268435456'/>
<enum name='codecRequiresOffscreen' value='134217728'/>
<enum name='codecSrcMustBeImageBuffer' value='4'/>
<enum name='codecSuggestedBufferSentinel' value='1936027252'/>
<enum name='codecSupportsOutOfOrderDisplayTimes' value='256'/>
<enum name='codecSupportsScheduledBackwardsPlaybackWithDifferenceFrames' value='512'/>
<enum name='codecUsesOverlaySurface' value='1'/>
<enum name='codecWantsDestinationPixels' value='4194304'/>
<enum name='codecWantsRegionMask' value='1048576'/>
<enum name='codecWantsSpecialScaling' value='8388608'/>
<enum name='compositeIn' value='0'/>
<enum name='compressorComponentType' value='1768776559'/>
<enum name='createMovieFileDeleteCurFile' value='-2147483648'/>
<enum name='createMovieFileDontCreateMovie' value='1073741824'/>
<enum name='createMovieFileDontCreateResFile' value='268435456'/>
<enum name='createMovieFileDontOpenFile' value='536870912'/>
<enum name='currentIn' value='0'/>
<enum name='dataRefSelfReference' value='1'/>
<enum name='dataRefWasNotResolved' value='2'/>
<enum name='decompressorComponentType' value='1768776803'/>
<enum name='defaultDither' value='0'/>
<enum name='dfAntiAlias' value='8192'/>
<enum name='dfClipToTextBox' value='4'/>
<enum name='dfContinuousKaraoke' value='2048'/>
<enum name='dfContinuousScroll' value='512'/>
<enum name='dfDontAutoScale' value='2'/>
<enum name='dfDontDisplay' value='1'/>
<enum name='dfDropShadow' value='4096'/>
<enum name='dfFlowHoriz' value='1024'/>
<enum name='dfHorizScroll' value='128'/>
<enum name='dfInverseHilite' value='32768'/>
<enum name='dfKeyedText' value='16384'/>
<enum name='dfReverseScroll' value='256'/>
<enum name='dfScrollIn' value='32'/>
<enum name='dfScrollOut' value='64'/>
<enum name='dfShrinkTextBoxToFit' value='16'/>
<enum name='dfTextColorHilite' value='65536'/>
<enum name='dfUseMovieBGColor' value='8'/>
<enum name='digiInDoesBW' value='8192'/>
<enum name='digiInDoesColor' value='4096'/>
<enum name='digiInDoesComponent' value='1024'/>
<enum name='digiInDoesComposite' value='256'/>
<enum name='digiInDoesGenLock' value='128'/>
<enum name='digiInDoesNTSC' value='1'/>
<enum name='digiInDoesPAL' value='2'/>
<enum name='digiInDoesSECAM' value='4'/>
<enum name='digiInDoesSVideo' value='512'/>
<enum name='digiInSignalLock' value='-2147483648'/>
<enum name='digiInVTR_Broadcast' value='2048'/>
<enum name='digiOutDoes1' value='1'/>
<enum name='digiOutDoes16' value='16'/>
<enum name='digiOutDoes2' value='2'/>
<enum name='digiOutDoes32' value='32'/>
<enum name='digiOutDoes4' value='4'/>
<enum name='digiOutDoes8' value='8'/>
<enum name='digiOutDoesAsyncGrabs' value='33554432'/>
<enum name='digiOutDoesBlend' value='524288'/>
<enum name='digiOutDoesCompress' value='134217728'/>
<enum name='digiOutDoesCompressOnly' value='268435456'/>
<enum name='digiOutDoesCompressPartiallyVisible' value='1073741824'/>
<enum name='digiOutDoesDither' value='64'/>
<enum name='digiOutDoesDouble' value='2048'/>
<enum name='digiOutDoesHWPlayThru' value='4194304'/>
<enum name='digiOutDoesHW_DMA' value='2097152'/>
<enum name='digiOutDoesHorizFlip' value='65536'/>
<enum name='digiOutDoesILUT' value='8388608'/>
<enum name='digiOutDoesKeyColor' value='16777216'/>
<enum name='digiOutDoesMask' value='512'/>
<enum name='digiOutDoesNotNeedCopyOfCompressData' value='-2147483648'/>
<enum name='digiOutDoesPlayThruDuringCompress' value='536870912'/>
<enum name='digiOutDoesQuad' value='4096'/>
<enum name='digiOutDoesQuarter' value='8192'/>
<enum name='digiOutDoesRotate' value='32768'/>
<enum name='digiOutDoesShrink' value='256'/>
<enum name='digiOutDoesSixteenth' value='16384'/>
<enum name='digiOutDoesSkew' value='262144'/>
<enum name='digiOutDoesStretch' value='128'/>
<enum name='digiOutDoesUnreadableScreenBits' value='67108864'/>
<enum name='digiOutDoesVertFlip' value='131072'/>
<enum name='digiOutDoesWarp' value='1048576'/>
<enum name='dmaDepth1' value='1'/>
<enum name='dmaDepth16' value='16'/>
<enum name='dmaDepth2' value='2'/>
<enum name='dmaDepth2Gray' value='64'/>
<enum name='dmaDepth32' value='32'/>
<enum name='dmaDepth4' value='4'/>
<enum name='dmaDepth4Gray' value='128'/>
<enum name='dmaDepth8' value='8'/>
<enum name='dmaDepth8Gray' value='256'/>
<enum name='dontAutoFileMovieImport' value='64'/>
<enum name='dontRegisterWithEasyOpen' value='1024'/>
<enum name='dropShadowOffsetType' value='1685221487'/>
<enum name='dropShadowTranslucencyType' value='1685221492'/>
<enum name='effectIsRealtime' value='0'/>
<enum name='elOptionsIncludeNoneInList' value='1'/>
<enum name='elementFlagAlwaysSelfContained' value='1'/>
<enum name='elementFlagPreserveWhiteSpace' value='2'/>
<enum name='evenField1ToEvenFieldOut' value='1'/>
<enum name='evenField1ToOddFieldOut' value='2'/>
<enum name='evenField2ToEvenFieldOut' value='16'/>
<enum name='evenField2ToOddFieldOut' value='32'/>
<enum name='findTextCaseSensitive' value='2'/>
<enum name='findTextEdgeOK' value='1'/>
<enum name='findTextReverseSearch' value='4'/>
<enum name='findTextUseOffset' value='16'/>
<enum name='findTextWrapAround' value='8'/>
<enum name='flattenActiveTracksOnly' value='4'/>
<enum name='flattenAddMovieToDataFork' value='1'/>
<enum name='flattenCompressMovieResource' value='32'/>
<enum name='flattenDontInterleaveFlatten' value='8'/>
<enum name='flattenFSSpecPtrIsDataRefRecordPtr' value='16'/>
<enum name='flattenForceMovieResourceBeforeMovieData' value='64'/>
<enum name='flushFromRam' value='4'/>
<enum name='forceDither' value='1'/>
<enum name='forceUpdateNewBuffer' value='2'/>
<enum name='forceUpdateRedraw' value='1'/>
<enum name='fullScreenAllowEvents' value='2'/>
<enum name='fullScreenCaptureAllDisplays' value='64'/>
<enum name='fullScreenCaptureDisplay' value='32'/>
<enum name='fullScreenDontChangeMenuBar' value='4'/>
<enum name='fullScreenDontSwitchMonitorResolution' value='16'/>
<enum name='fullScreenHideCursor' value='1'/>
<enum name='fullScreenPreflightSize' value='8'/>
<enum name='grabPictCurrentImage' value='4'/>
<enum name='grabPictIgnoreClip' value='2'/>
<enum name='grabPictOffScreen' value='1'/>
<enum name='graphicsExporterCanTranscode' value='2'/>
<enum name='graphicsExporterIsBaseExporter' value='1'/>
<enum name='graphicsExporterUsesImageCompressor' value='4'/>
<enum name='graphicsImporterCanValidateFile' value='512'/>
<enum name='graphicsImporterDoesntDrawAllPixels' value='1'/>
<enum name='graphicsImporterDontKnowIfDrawAllPixels' value='2'/>
<enum name='graphicsImporterDrawsAllPixels' value='0'/>
<enum name='graphicsImporterHasMIMEList' value='16384'/>
<enum name='graphicsImporterIsBaseImporter' value='1'/>
<enum name='graphicsImporterSubTypeIsFileExtension' value='4096'/>
<enum name='graphicsImporterUsesImageDecompressor' value='8388608'/>
<enum name='graphicsModeComposition' value='259'/>
<enum name='graphicsModePerComponentAlpha' value='272'/>
<enum name='graphicsModePreBlackAlpha' value='258'/>
<enum name='graphicsModePreMulColorAlpha' value='261'/>
<enum name='graphicsModePreWhiteAlpha' value='257'/>
<enum name='graphicsModeStraightAlpha' value='256'/>
<enum name='graphicsModeStraightAlphaBlend' value='260'/>
<enum name='handlerCGrafPortOnly' value='256'/>
<enum name='handlerCanClip' value='2'/>
<enum name='handlerCanHandleComplexMatrix' value='1024'/>
<enum name='handlerCanMatte' value='4'/>
<enum name='handlerCanPicSave' value='8192'/>
<enum name='handlerCanSend' value='512'/>
<enum name='handlerCanSendImageData' value='4096'/>
<enum name='handlerCanTransferMode' value='8'/>
<enum name='handlerHasSpatial' value='1'/>
<enum name='handlerNeedsBuffer' value='16'/>
<enum name='handlerNoIdle' value='32'/>
<enum name='handlerNoScheduler' value='64'/>
<enum name='handlerWantsDestinationPixels' value='2048'/>
<enum name='handlerWantsTime' value='128'/>
<enum name='hasMovieExportUserInterface' value='32'/>
<enum name='hasMovieImportMIMEList' value='16384'/>
<enum name='hasMovieImportUserInterface' value='4'/>
<enum name='hintsAllowBlacklining' value='16384'/>
<enum name='hintsAllowDynamicResize' value='524288'/>
<enum name='hintsAllowIdleSleep' value='33554432'/>
<enum name='hintsAllowInterlace' value='64'/>
<enum name='hintsDeinterlaceFields' value='67108864'/>
<enum name='hintsDontDraw' value='8192'/>
<enum name='hintsDontPurge' value='4'/>
<enum name='hintsDontUseVideoOverlaySurface' value='65536'/>
<enum name='hintsEnableSubPixelPositioning' value='8388608'/>
<enum name='hintsFlushVideoInsteadOfDirtying' value='4194304'/>
<enum name='hintsHighQuality' value='256'/>
<enum name='hintsIgnoreBandwidthRestrictions' value='131072'/>
<enum name='hintsInactive' value='2048'/>
<enum name='hintsLoop' value='2'/>
<enum name='hintsNoRenderingTimeOut' value='2097152'/>
<enum name='hintsOffscreen' value='4096'/>
<enum name='hintsPalindrome' value='512'/>
<enum name='hintsPlayingEveryFrame' value='262144'/>
<enum name='hintsRenderingMode' value='16777216'/>
<enum name='hintsScrubMode' value='1'/>
<enum name='hintsSingleField' value='1048576'/>
<enum name='hintsUseScreenBuffer' value='32'/>
<enum name='hintsUseSoundInterp' value='128'/>
<enum name='icmFrameAlreadyDecoded' value='2'/>
<enum name='icmFrameTimeDecodeImmediately' value='16'/>
<enum name='icmFrameTimeDoNotDisplay' value='32'/>
<enum name='icmFrameTimeHasDecodeTime' value='8'/>
<enum name='icmFrameTimeHasVirtualStartTimeAndDuration' value='1'/>
<enum name='icmFrameTimeIsNonScheduledDisplayTime' value='4'/>
<enum name='identityMatrixType' value='0'/>
<enum name='illegalChannelErr' value='2147547108'/>
<enum name='illegalControllerErr' value='2147547104'/>
<enum name='illegalInstrumentErr' value='2147547105'/>
<enum name='illegalKnobErr' value='2147547107'/>
<enum name='illegalKnobValueErr' value='2147547106'/>
<enum name='illegalNoteChannelErr' value='2147547100'/>
<enum name='illegalPartErr' value='2147547109'/>
<enum name='illegalVoiceAllocationErr' value='2147547110'/>
<enum name='instSamplePreProcessFlag' value='1'/>
<enum name='k16GrayCodecType' value='1647392359'/>
<enum name='k16GrayPixelFormat' value='1647392359'/>
<enum name='k32AlphaGrayCodecType' value='1647522401'/>
<enum name='k32AlphaGrayPixelFormat' value='1647522401'/>
<enum name='k3DMediaRendererCode' value='1919119204'/>
<enum name='k3DMediaRendererEntry' value='1919250020'/>
<enum name='k3DMediaRendererName' value='1851878757'/>
<enum name='k3DMinorClass' value='1887072869'/>
<enum name='k422YpCbCr10CodecType' value='1983000880'/>
<enum name='k422YpCbCr16CodecType' value='1983000886'/>
<enum name='k422YpCbCr8CodecType' value='846624121'/>
<enum name='k422YpCbCr8PixelFormat' value='846624121'/>
<enum name='k4444YpCbCrA8CodecType' value='1983131704'/>
<enum name='k4444YpCbCrA8PixelFormat' value='1983131704'/>
<enum name='k4444YpCbCrA8RCodecType' value='1916022840'/>
<enum name='k4444YpCbCrA8RPixelFormat' value='1916022840'/>
<enum name='k444YpCbCr10CodecType' value='1983131952'/>
<enum name='k444YpCbCr8CodecType' value='1983066168'/>
<enum name='k48RGBCodecType' value='1647589490'/>
<enum name='k48RGBPixelFormat' value='1647589490'/>
<enum name='k64ARGBCodecType' value='1647719521'/>
<enum name='k64ARGBPixelFormat' value='1647719521'/>
<enum name='kAVRJPEGCodecType' value='1635152416'/>
<enum name='kAbsoluteUI' value='5'/>
<enum name='kAccessKeyAtomType' value='1633905529'/>
<enum name='kAccessKeySystemFlag' value='1'/>
<enum name='kAction' value='1633907822'/>
<enum name='kActionAddChannelSubscription' value='6155'/>
<enum name='kActionApplicationNumberAndString' value='8192'/>
<enum name='kActionCase' value='6144'/>
<enum name='kActionDebugStr' value='6148'/>
<enum name='kActionDoCompressedActions' value='6159'/>
<enum name='kActionDoScript' value='6158'/>
<enum name='kActionDontPassKeyEvent' value='6163'/>
<enum name='kActionFlagActionIsDelta' value='2'/>
<enum name='kActionFlagActionIsToggle' value='8'/>
<enum name='kActionFlagParameterWrapsAround' value='4'/>
<enum name='kActionFlags' value='1718378855'/>
<enum name='kActionFlashTrackDoButtonActions' value='10246'/>
<enum name='kActionFlashTrackGotoFrameLabel' value='10244'/>
<enum name='kActionFlashTrackGotoFrameNumber' value='10243'/>
<enum name='kActionFlashTrackSetFlashVariable' value='10245'/>
<enum name='kActionFlashTrackSetPan' value='10240'/>
<enum name='kActionFlashTrackSetZoom' value='10241'/>
<enum name='kActionFlashTrackSetZoomRect' value='10242'/>
<enum name='kActionGoToURL' value='6146'/>
<enum name='kActionListAddAttribute' value='13320'/>
<enum name='kActionListAddElement' value='13312'/>
<enum name='kActionListAtomType' value='1818850164'/>
<enum name='kActionListExchangeLists' value='13318'/>
<enum name='kActionListPasteFromXML' value='13315'/>
<enum name='kActionListRemoveAttributes' value='13321'/>
<enum name='kActionListRemoveElements' value='13313'/>
<enum name='kActionListServerQuery' value='13319'/>
<enum name='kActionListSetAttributeValue' value='13322'/>
<enum name='kActionListSetElementValue' value='13314'/>
<enum name='kActionListSetFromURL' value='13317'/>
<enum name='kActionListSetMatchingFromXML' value='13316'/>
<enum name='kActionLoadComponent' value='6161'/>
<enum name='kActionMovieChanged' value='1037'/>
<enum name='kActionMovieGoToBeginning' value='1029'/>
<enum name='kActionMovieGoToEnd' value='1030'/>
<enum name='kActionMovieGoToTime' value='1027'/>
<enum name='kActionMovieGoToTimeByName' value='1028'/>
<enum name='kActionMovieGotoChapterByIndex' value='1043'/>
<enum name='kActionMovieGotoFirstChapter' value='1041'/>
<enum name='kActionMovieGotoLastChapter' value='1042'/>
<enum name='kActionMovieGotoNextChapter' value='1039'/>
<enum name='kActionMovieGotoPreviousChapter' value='1040'/>
<enum name='kActionMoviePlaySelection' value='1035'/>
<enum name='kActionMovieRestartAtTime' value='1038'/>
<enum name='kActionMovieSetLanguage' value='1036'/>
<enum name='kActionMovieSetLoopingFlags' value='1026'/>
<enum name='kActionMovieSetRate' value='1025'/>
<enum name='kActionMovieSetScale' value='1044'/>
<enum name='kActionMovieSetSelection' value='1033'/>
<enum name='kActionMovieSetSelectionByName' value='1034'/>
<enum name='kActionMovieSetVolume' value='1024'/>
<enum name='kActionMovieStepBackward' value='1032'/>
<enum name='kActionMovieStepForward' value='1031'/>
<enum name='kActionMovieTrackAddChildMovie' value='11264'/>
<enum name='kActionMovieTrackLoadChildMovie' value='11265'/>
<enum name='kActionMovieTrackLoadChildMovieWithQTListParams' value='11266'/>
<enum name='kActionMusicPlayNote' value='5120'/>
<enum name='kActionMusicSetController' value='5121'/>
<enum name='kActionOpenCustomActionHandler' value='6157'/>
<enum name='kActionParameter' value='1885434477'/>
<enum name='kActionParameterMaxValue' value='1835104374'/>
<enum name='kActionParameterMinValue' value='1835626102'/>
<enum name='kActionPopAndGotoLabeledTime' value='6152'/>
<enum name='kActionPopAndGotoTopTime' value='6151'/>
<enum name='kActionPushCurrentTime' value='6149'/>
<enum name='kActionPushCurrentTimeWithLabel' value='6150'/>
<enum name='kActionQD3DNamedObjectRotateTo' value='9218'/>
<enum name='kActionQD3DNamedObjectScaleTo' value='9217'/>
<enum name='kActionQD3DNamedObjectTranslateTo' value='9216'/>
<enum name='kActionQTVREnableHotSpot' value='4101'/>
<enum name='kActionQTVRGoToNodeID' value='4100'/>
<enum name='kActionQTVRSetFieldOfView' value='4098'/>
<enum name='kActionQTVRSetPanAngle' value='4096'/>
<enum name='kActionQTVRSetTiltAngle' value='4097'/>
<enum name='kActionQTVRSetViewState' value='4109'/>
<enum name='kActionQTVRShowDefaultView' value='4099'/>
<enum name='kActionQTVRShowHotSpots' value='4102'/>
<enum name='kActionQTVRTranslateObject' value='4103'/>
<enum name='kActionRemoveChannelSubscription' value='6156'/>
<enum name='kActionSendAppMessage' value='6160'/>
<enum name='kActionSendQTEventToSprite' value='6147'/>
<enum name='kActionSendQTEventToTrackObject' value='6154'/>
<enum name='kActionSetFocus' value='6162'/>
<enum name='kActionSetRandomSeed' value='6164'/>
<enum name='kActionSpriteClickOnCodec' value='3079'/>
<enum name='kActionSpritePassMouseToCodec' value='3078'/>
<enum name='kActionSpriteRotate' value='3082'/>
<enum name='kActionSpriteScale' value='3081'/>
<enum name='kActionSpriteSetCanBeHitTested' value='3094'/>
<enum name='kActionSpriteSetGraphicsMode' value='3076'/>
<enum name='kActionSpriteSetImageIndex' value='3073'/>
<enum name='kActionSpriteSetLayer' value='3075'/>
<enum name='kActionSpriteSetMatrix' value='3072'/>
<enum name='kActionSpriteSetVisible' value='3074'/>
<enum name='kActionSpriteStretch' value='3083'/>
<enum name='kActionSpriteTrackConcatVariables' value='7172'/>
<enum name='kActionSpriteTrackDisposeImage' value='7183'/>
<enum name='kActionSpriteTrackDisposeSprite' value='7170'/>
<enum name='kActionSpriteTrackNewImage' value='7182'/>
<enum name='kActionSpriteTrackNewSprite' value='7169'/>
<enum name='kActionSpriteTrackSetAllSpritesHitTestingMode' value='7181'/>
<enum name='kActionSpriteTrackSetVariable' value='7168'/>
<enum name='kActionSpriteTrackSetVariableToMovieBaseURL' value='7174'/>
<enum name='kActionSpriteTrackSetVariableToMovieURL' value='7173'/>
<enum name='kActionSpriteTrackSetVariableToString' value='7171'/>
<enum name='kActionSpriteTranslate' value='3080'/>
<enum name='kActionStatusString' value='6153'/>
<enum name='kActionTarget' value='1952543335'/>
<enum name='kActionTextTrackFindText' value='12305'/>
<enum name='kActionTextTrackKeyEntry' value='12308'/>
<enum name='kActionTextTrackMouseDown' value='12309'/>
<enum name='kActionTextTrackPasteText' value='12288'/>
<enum name='kActionTextTrackRelativeScroll' value='12304'/>
<enum name='kActionTextTrackSetAlignment' value='12299'/>
<enum name='kActionTextTrackSetBackgroundColor' value='12294'/>
<enum name='kActionTextTrackSetDisplayFlags' value='12302'/>
<enum name='kActionTextTrackSetDropShadow' value='12301'/>
<enum name='kActionTextTrackSetEditable' value='12310'/>
<enum name='kActionTextTrackSetFace' value='12296'/>
<enum name='kActionTextTrackSetFont' value='12297'/>
<enum name='kActionTextTrackSetForegroundColor' value='12295'/>
<enum name='kActionTextTrackSetHilite' value='12300'/>
<enum name='kActionTextTrackSetHyperTextColor' value='12307'/>
<enum name='kActionTextTrackSetHyperTextFace' value='12306'/>
<enum name='kActionTextTrackSetScroll' value='12303'/>
<enum name='kActionTextTrackSetSelection' value='12293'/>
<enum name='kActionTextTrackSetSize' value='12298'/>
<enum name='kActionTextTrackSetTextBox' value='12291'/>
<enum name='kActionTextTrackSetTextStyle' value='12292'/>
<enum name='kActionTrackSetBalance' value='2049'/>
<enum name='kActionTrackSetBassTreble' value='2057'/>
<enum name='kActionTrackSetClip' value='2053'/>
<enum name='kActionTrackSetCursor' value='2054'/>
<enum name='kActionTrackSetEnabled' value='2050'/>
<enum name='kActionTrackSetGraphicsMode' value='2055'/>
<enum name='kActionTrackSetIdleFrequency' value='2056'/>
<enum name='kActionTrackSetLayer' value='2052'/>
<enum name='kActionTrackSetMatrix' value='2051'/>
<enum name='kActionTrackSetVolume' value='2048'/>
<enum name='kActionWhile' value='6145'/>
<enum name='kAdjustmentMinorClass' value='1633973108'/>
<enum name='kAlphaCompositorTransitionType' value='1651273316'/>
<enum name='kAlphaGainImageFilterType' value='1734437230'/>
<enum name='kAnimationCodecType' value='1919706400'/>
<enum name='kAppleSysexCmdAtomicInstrument' value='16'/>
<enum name='kAppleSysexCmdDeveloper' value='32512'/>
<enum name='kAppleSysexCmdSampleBreak' value='2'/>
<enum name='kAppleSysexCmdSampleSize' value='1'/>
<enum name='kAppleSysexID' value='17'/>
<enum name='kArtisticMinorClass' value='1634890867'/>
<enum name='kAtomInterpolateIsOptional' value='2'/>
<enum name='kAtomMayBeIndexed' value='4'/>
<enum name='kAtomNoFlags' value='0'/>
<enum name='kAtomNotInterpolated' value='1'/>
<enum name='kBMPCodecType' value='1465011269'/>
<enum name='kBackgroundSpriteLayerNum' value='32767'/>
<enum name='kBarnHorizontalWipe' value='22'/>
<enum name='kBarnVerticalWipe' value='21'/>
<enum name='kBaseCodecType' value='1650553701'/>
<enum name='kBaseGraphicsExporterSubType' value='1650553701'/>
<enum name='kBlurImageFilterType' value='1651275122'/>
<enum name='kBlurMinorClass' value='1651275122'/>
<enum name='kBottom180Wipe' value='223'/>
<enum name='kBottomCenterWipe' value='25'/>
<enum name='kBottomLeftDiagonalMatrixWipe' value='306'/>
<enum name='kBottomLeftWipe' value='6'/>
<enum name='kBottomRightDiagonalMatrixWipe' value='305'/>
<enum name='kBottomRightWipe' value='5'/>
<enum name='kBrightnessContrastImageFilterType' value='1651663727'/>
<enum name='kCMYKCodecType' value='1668118891'/>
<enum name='kCMYKPixelFormat' value='1668118891'/>
<enum name='kCallComponentExecuteWiredActionSelect' value='-9'/>
<enum name='kCatEyeSideWipe' value='123'/>
<enum name='kCatEyeWipe' value='122'/>
<enum name='kChannelCompositeEffectType' value='1667785070'/>
<enum name='kCharacteristicCanSendVideo' value='1987276388'/>
<enum name='kCharacteristicCanStep' value='1937007984'/>
<enum name='kCharacteristicHasNoDuration' value='1852798057'/>
<enum name='kCharacteristicHasSkinData' value='1936419182'/>
<enum name='kCharacteristicNonLinear' value='1852796524'/>
<enum name='kCharacteristicProvidesActions' value='1633907822'/>
<enum name='kCharacteristicProvidesKeyFocus' value='1801812326'/>
<enum name='kCharacteristicSupportsApertureModes' value='1634757988'/>
<enum name='kCharacteristicSupportsDisplayOffsets' value='1685349476'/>
<enum name='kChromaKeyTransitionType' value='1667982713'/>
<enum name='kCinepakCodecType' value='1668704612'/>
<enum name='kCircleWipe' value='119'/>
<enum name='kCircularGradient' value='1'/>
<enum name='kCleanApertureImageDescriptionExtension' value='1668047216'/>
<enum name='kClockCallMeWhenSelect' value='4'/>
<enum name='kClockCanHandleIntermittentSound' value='4'/>
<enum name='kClockCancelCallBackSelect' value='5'/>
<enum name='kClockDisposeCallBackSelect' value='3'/>
<enum name='kClockGetRateChangeConstraintsSelect' value='12'/>
<enum name='kClockGetRateSelect' value='10'/>
<enum name='kClockGetTimeSelect' value='1'/>
<enum name='kClockGetTimesForRateChangeSelect' value='11'/>
<enum name='kClockImplementsCallBacks' value='2'/>
<enum name='kClockNewCallBackSelect' value='2'/>
<enum name='kClockRateChangedSelect' value='6'/>
<enum name='kClockRateIsLinear' value='1'/>
<enum name='kClockSetTimeBaseSelect' value='8'/>
<enum name='kClockStartStopChangedSelect' value='9'/>
<enum name='kClockTimeChangedSelect' value='7'/>
<enum name='kClockwiseBottomLeftMatrixWipe' value='313'/>
<enum name='kClockwiseBottomRightMatrixWipe' value='312'/>
<enum name='kClockwiseTopLeftMatrixWipe' value='310'/>
<enum name='kClockwiseTopRightMatrixWipe' value='311'/>
<enum name='kCloudCodecType' value='1668050805'/>
<enum name='kCodecFrameTypeDifference' value='2'/>
<enum name='kCodecFrameTypeDroppableDifference' value='3'/>
<enum name='kCodecFrameTypeKey' value='1'/>
<enum name='kCodecFrameTypeUnknown' value='0'/>
<enum name='kColorInfoImageDescriptionExtension' value='1668246642'/>
<enum name='kColorSyncImageFilterType' value='1937337955'/>
<enum name='kColorTintImageFilterType' value='1953066612'/>
<enum name='kCommentAtomType' value='2003335456'/>
<enum name='kComponentPropertyCacheFlagIsDynamic' value='2'/>
<enum name='kComponentPropertyCacheFlagNotPersistent' value='1'/>
<enum name='kComponentPropertyCacheFlags' value='1718380403'/>
<enum name='kComponentPropertyCacheSeed' value='1936024932'/>
<enum name='kComponentPropertyClassPropertyInfo' value='1886283375'/>
<enum name='kComponentPropertyExtendedInfo' value='1835365473'/>
<enum name='kComponentPropertyFlagCanGetLater' value='4'/>
<enum name='kComponentPropertyFlagCanGetNow' value='8'/>
<enum name='kComponentPropertyFlagCanSetLater' value='1'/>
<enum name='kComponentPropertyFlagCanSetNow' value='2'/>
<enum name='kComponentPropertyFlagGetBufferMustBeInitialized' value='128'/>
<enum name='kComponentPropertyFlagHasExtendedInfo' value='16'/>
<enum name='kComponentPropertyFlagValueIsCFTypeRef' value='64'/>
<enum name='kComponentPropertyFlagValueMustBeReleased' value='32'/>
<enum name='kComponentPropertyFlagWillNotifyListeners' value='256'/>
<enum name='kComponentPropertyInfoList' value='1818850164'/>
<enum name='kComponentVideoCodecType' value='2037741106'/>
<enum name='kComponentVideoSigned' value='2037741173'/>
<enum name='kComponentVideoUnsigned' value='2037741171'/>
<enum name='kCompositorMajorClass' value='1668246896'/>
<enum name='kCompositorMinorClass' value='1668246896'/>
<enum name='kConditionalAtomType' value='1952805748'/>
<enum name='kConnectionActive' value='1'/>
<enum name='kConnectionUseSystemPref' value='2'/>
<enum name='kControlEventControllerFieldPos' value='16'/>
<enum name='kControlEventControllerFieldWidth' value='8'/>
<enum name='kControlEventLen' value='1'/>
<enum name='kControlEventType' value='2'/>
<enum name='kControlEventValueFieldPos' value='0'/>
<enum name='kControlEventValueFieldWidth' value='16'/>
<enum name='kControllerAfterTouch' value='33'/>
<enum name='kControllerBalance' value='8'/>
<enum name='kControllerBreath' value='2'/>
<enum name='kControllerCeleste' value='94'/>
<enum name='kControllerChorus' value='93'/>
<enum name='kControllerEditPart' value='113'/>
<enum name='kControllerExpression' value='11'/>
<enum name='kControllerFoot' value='4'/>
<enum name='kControllerLever1' value='16'/>
<enum name='kControllerLever2' value='17'/>
<enum name='kControllerLever3' value='18'/>
<enum name='kControllerLever4' value='19'/>
<enum name='kControllerLever5' value='80'/>
<enum name='kControllerLever6' value='81'/>
<enum name='kControllerLever7' value='82'/>
<enum name='kControllerLever8' value='83'/>
<enum name='kControllerMasterCPULoad' value='116'/>
<enum name='kControllerMasterFeatures' value='118'/>
<enum name='kControllerMasterPolyphony' value='117'/>
<enum name='kControllerMasterTranspose' value='114'/>
<enum name='kControllerMasterTune' value='114'/>
<enum name='kControllerMasterVolume' value='115'/>
<enum name='kControllerMaximum' value='32767'/>
<enum name='kControllerMinimum' value='-32768'/>
<enum name='kControllerModulationWheel' value='1'/>
<enum name='kControllerPan' value='10'/>
<enum name='kControllerPartTranspose' value='40'/>
<enum name='kControllerPartVolume' value='42'/>
<enum name='kControllerPhaser' value='95'/>
<enum name='kControllerPitchBend' value='32'/>
<enum name='kControllerPortamento' value='65'/>
<enum name='kControllerPortamentoTime' value='5'/>
<enum name='kControllerReverb' value='91'/>
<enum name='kControllerSoftPedal' value='67'/>
<enum name='kControllerSostenuto' value='66'/>
<enum name='kControllerSustain' value='64'/>
<enum name='kControllerTremolo' value='92'/>
<enum name='kControllerTuneTranspose' value='41'/>
<enum name='kControllerTuneVolume' value='43'/>
<enum name='kControllerUnderstandsIdleManagers' value='1'/>
<enum name='kControllerVolume' value='7'/>
<enum name='kConvolveImageFilterType' value='1734700651'/>
<enum name='kCounterClockwiseBottomLeftMatrixWipe' value='317'/>
<enum name='kCounterClockwiseBottomRightMatrixWipe' value='316'/>
<enum name='kCounterClockwiseTopLeftMatrixWipe' value='314'/>
<enum name='kCounterClockwiseTopRightMatrixWipe' value='315'/>
<enum name='kCounterRotatingLeftRightWipe' value='226'/>
<enum name='kCounterRotatingTopBottomWipe' value='225'/>
<enum name='kCrossFadeTransitionType' value='1685286006'/>
<enum name='kCurrentlyNativeEndian' value='1'/>
<enum name='kCurrentlyNotNativeEndian' value='2'/>
<enum name='kCurveARGBColorAtom' value='1634887522'/>
<enum name='kCurveAddAtomToVectorStreamSelect' value='266'/>
<enum name='kCurveAddPathAtomToVectorStreamSelect' value='267'/>
<enum name='kCurveAddZeroAtomToVectorStreamSelect' value='268'/>
<enum name='kCurveAntialiasControlAtom' value='1634628713'/>
<enum name='kCurveAntialiasOff' value='0'/>
<enum name='kCurveAntialiasOn' value='-1'/>
<enum name='kCurveCountPointsInPathSelect' value='259'/>
<enum name='kCurveCreateVectorStreamSelect' value='265'/>
<enum name='kCurveDepthAlwaysOffscreenMask' value='-2147483648'/>
<enum name='kCurveEndAtom' value='2053468783'/>
<enum name='kCurveFillTypeAtom' value='1718185068'/>
<enum name='kCurveGetAtomDataFromVectorStreamSelect' value='269'/>
<enum name='kCurveGetLengthSelect' value='256'/>
<enum name='kCurveGetNearestPathPointSelect' value='263'/>
<enum name='kCurveGetPathPointSelect' value='260'/>
<enum name='kCurveGradientAngleAtom' value='1634625388'/>
<enum name='kCurveGradientOffsetAtom' value='1667591796'/>
<enum name='kCurveGradientRadiusAtom' value='1918985321'/>
<enum name='kCurveGradientRecordAtom' value='1735549284'/>
<enum name='kCurveGradientTypeAtom' value='1735550068'/>
<enum name='kCurveInsertPointIntoPathSelect' value='261'/>
<enum name='kCurveJoinAttributesAtom' value='1785686382'/>
<enum name='kCurveLengthToPointSelect' value='257'/>
<enum name='kCurveMinimumDepthAtom' value='1835626084'/>
<enum name='kCurveMiterLimitAtom' value='1835627634'/>
<enum name='kCurveNewPathSelect' value='258'/>
<enum name='kCurvePathAtom' value='1885434984'/>
<enum name='kCurvePathPointToLengthSelect' value='264'/>
<enum name='kCurvePenThicknessAtom' value='1885695604'/>
<enum name='kCurveSetPathPointSelect' value='262'/>
<enum name='kCurveTransferModeAtom' value='2019976562'/>
<enum name='kCustomActionHandler' value='1668641652'/>
<enum name='kCustomControl' value='1048576'/>
<enum name='kCustomHandlerDesc' value='1684370275'/>
<enum name='kCustomHandlerID' value='1768169504'/>
<enum name='kDVCNTSCCodecType' value='1685480224'/>
<enum name='kDVCPALCodecType' value='1685480304'/>
<enum name='kDVCPROHD1080i50CodecType' value='1685481525'/>
<enum name='kDVCPROHD1080i60CodecType' value='1685481526'/>
<enum name='kDVCPROHD1080p25CodecType' value='1685481522'/>
<enum name='kDVCPROHD1080p30CodecType' value='1685481523'/>
<enum name='kDVCPROHD720p50CodecType' value='1685481585'/>
<enum name='kDVCPROHD720p60CodecType' value='1685481584'/>
<enum name='kDVCPROHD720pCodecType' value='1685481584'/>
<enum name='kDVCPro50NTSCCodecType' value='1685468526'/>
<enum name='kDVCPro50PALCodecType' value='1685468528'/>
<enum name='kDVCProPALCodecType' value='1685483632'/>
<enum name='kDVCompressorPropertyID_AspectRatio16x9' value='825653305'/>
<enum name='kDVCompressorPropertyID_ProgressiveScan' value='1886547815'/>
<enum name='kDataCodecBeginInterruptSafeSelect' value='4'/>
<enum name='kDataCodecCompressPartialSelect' value='7'/>
<enum name='kDataCodecCompressSelect' value='3'/>
<enum name='kDataCodecDecompressPartialSelect' value='6'/>
<enum name='kDataCodecDecompressSelect' value='1'/>
<enum name='kDataCodecEndInterruptSafeSelect' value='5'/>
<enum name='kDataCodecGetCompressBufferSizeSelect' value='2'/>
<enum name='kDataHAddMovieSelect' value='34'/>
<enum name='kDataHAppend64Select' value='52'/>
<enum name='kDataHCanRead' value='1'/>
<enum name='kDataHCanStreamingWrite' value='64'/>
<enum name='kDataHCanUseDataRefSelect' value='19'/>
<enum name='kDataHCanWrite' value='8'/>
<enum name='kDataHChokeToMovieDataRate' value='1'/>
<enum name='kDataHChokeToParam' value='2'/>
<enum name='kDataHCloseForReadSelect' value='9'/>
<enum name='kDataHCloseForWriteSelect' value='6'/>
<enum name='kDataHCompareDataRefSelect' value='12'/>
<enum name='kDataHCreateFileButDontCreateResFile' value='1'/>
<enum name='kDataHCreateFileSelect' value='25'/>
<enum name='kDataHCreateFileWithFlagsSelect' value='65'/>
<enum name='kDataHDeleteFileSelect' value='69'/>
<enum name='kDataHDoesBufferSelect' value='36'/>
<enum name='kDataHExtendedSchedule' value='2020896356'/>
<enum name='kDataHFileTypeExtension' value='1717926004'/>
<enum name='kDataHFileTypeMIME' value='1835625829'/>
<enum name='kDataHFileTypeMacOSFileType' value='1718909296'/>
<enum name='kDataHFinishDataSelect' value='15'/>
<enum name='kDataHFlushCacheSelect' value='16'/>
<enum name='kDataHFlushDataSelect' value='4'/>
<enum name='kDataHGetAvailableFileSize64Select' value='78'/>
<enum name='kDataHGetAvailableFileSizeSelect' value='38'/>
<enum name='kDataHGetCacheSizeLimitSelect' value='32'/>
<enum name='kDataHGetDataAvailability64Select' value='79'/>
<enum name='kDataHGetDataAvailabilitySelect' value='55'/>
<enum name='kDataHGetDataInBufferSelect' value='29'/>
<enum name='kDataHGetDataRateInfiniteRate' value='2147483647'/>
<enum name='kDataHGetDataRateSelect' value='272'/>
<enum name='kDataHGetDataRefAsTypeSelect' value='59'/>
<enum name='kDataHGetDataRefExtensionSelect' value='61'/>
<enum name='kDataHGetDataRefSelect' value='11'/>
<enum name='kDataHGetDataRefWithAnchorSelect' value='42'/>
<enum name='kDataHGetDataSelect' value='2'/>
<enum name='kDataHGetDeviceIndexSelect' value='27'/>
<enum name='kDataHGetFileNameSelect' value='37'/>
<enum name='kDataHGetFileSize64Select' value='48'/>
<enum name='kDataHGetFileSizeAsyncSelect' value='58'/>
<enum name='kDataHGetFileSizeSelect' value='18'/>
<enum name='kDataHGetFileTypeOrderingSelect' value='64'/>
<enum name='kDataHGetFreeSpace64Select' value='51'/>
<enum name='kDataHGetFreeSpaceSelect' value='24'/>
<enum name='kDataHGetInfoFlagsSelect' value='45'/>
<enum name='kDataHGetInfoSelect' value='67'/>
<enum name='kDataHGetMIMETypeAsyncSelect' value='66'/>
<enum name='kDataHGetMIMETypeSelect' value='40'/>
<enum name='kDataHGetMacOSFileTypeSelect' value='39'/>
<enum name='kDataHGetMovieSelect' value='33'/>
<enum name='kDataHGetMovieWithFlagsSelect' value='62'/>
<enum name='kDataHGetPreferredBlockSizeSelect' value='26'/>
<enum name='kDataHGetScheduleAheadTimeSelect' value='30'/>
<enum name='kDataHGetTemporaryDataRefCapabilitiesSelect' value='72'/>
<enum name='kDataHGetVolumeListSelect' value='20'/>
<enum name='kDataHInfoFlagCanUpdateDataRefs' value='2'/>
<enum name='kDataHInfoFlagNeedsNetworkBandwidth' value='4'/>
<enum name='kDataHInfoFlagNeverStreams' value='1'/>
<enum name='kDataHIsStreamingDataHandlerSelect' value='28'/>
<enum name='kDataHMovieUsageDoAppendMDAT' value='1'/>
<enum name='kDataHMustCheckDataRef' value='128'/>
<enum name='kDataHOpenForReadSelect' value='8'/>
<enum name='kDataHOpenForWriteSelect' value='5'/>
<enum name='kDataHPlaybackHints64Select' value='270'/>
<enum name='kDataHPlaybackHintsSelect' value='259'/>
<enum name='kDataHPollReadSelect' value='54'/>
<enum name='kDataHPreextend64Select' value='49'/>
<enum name='kDataHPreextendSelect' value='22'/>
<enum name='kDataHPutDataSelect' value='3'/>
<enum name='kDataHReadAsyncSelect' value='53'/>
<enum name='kDataHRenameFileSelect' value='73'/>
<enum name='kDataHResolveDataRefSelect' value='17'/>
<enum name='kDataHScheduleData64Select' value='46'/>
<enum name='kDataHScheduleDataSelect' value='14'/>
<enum name='kDataHSetCacheSizeLimitSelect' value='31'/>
<enum name='kDataHSetDataRefExtensionSelect' value='60'/>
<enum name='kDataHSetDataRefSelect' value='10'/>
<enum name='kDataHSetDataRefWithAnchorSelect' value='41'/>
<enum name='kDataHSetFileSize64Select' value='50'/>
<enum name='kDataHSetFileSizeSelect' value='23'/>
<enum name='kDataHSetIdleManagerSelect' value='68'/>
<enum name='kDataHSetMacOSFileTypeSelect' value='43'/>
<enum name='kDataHSetMovieUsageFlagsSelect' value='70'/>
<enum name='kDataHSetTimeBaseSelect' value='44'/>
<enum name='kDataHSetTimeHintsSelect' value='273'/>
<enum name='kDataHSetTimeHintsSkipBandwidthRequest' value='1'/>
<enum name='kDataHSpecialRead' value='2'/>
<enum name='kDataHSpecialReadFile' value='4'/>
<enum name='kDataHSpecialWrite' value='16'/>
<enum name='kDataHSpecialWriteFile' value='32'/>
<enum name='kDataHTaskSelect' value='13'/>
<enum name='kDataHTempCreateFile' value='4'/>
<enum name='kDataHTempOpenFile' value='8'/>
<enum name='kDataHTempUseSameDirectory' value='1'/>
<enum name='kDataHTempUseSameVolume' value='2'/>
<enum name='kDataHUpdateMovieSelect' value='35'/>
<enum name='kDataHUseTemporaryDataRefSelect' value='71'/>
<enum name='kDataHWrite64Select' value='47'/>
<enum name='kDataHWriteSelect' value='21'/>
<enum name='kDataRate144ModemRate' value='1400'/>
<enum name='kDataRate1MbpsRate' value='100000'/>
<enum name='kDataRate256kbpsRate' value='25600'/>
<enum name='kDataRate288ModemRate' value='2800'/>
<enum name='kDataRate384kbpsRate' value='38400'/>
<enum name='kDataRate512kbpsRate' value='51200'/>
<enum name='kDataRate768kbpsRate' value='76800'/>
<enum name='kDataRateDefaultIfNotSet' value='51200'/>
<enum name='kDataRateDualISDNRate' value='11200'/>
<enum name='kDataRateISDNRate' value='5600'/>
<enum name='kDataRateInfiniteRate' value='2147483647'/>
<enum name='kDataRateT1Rate' value='150000'/>
<enum name='kDataRefExtensionChokeSpeed' value='1667788651'/>
<enum name='kDataRefExtensionFileName' value='1718509933'/>
<enum name='kDataRefExtensionInitializationData' value='1684108385'/>
<enum name='kDataRefExtensionMIMEType' value='1835625829'/>
<enum name='kDataRefExtensionMacOSFileType' value='1718909296'/>
<enum name='kDataRefExtensionQuickTimeMediaType' value='1836349808'/>
<enum name='kDataRefIsSelfContained' value='1'/>
<enum name='kDefaultKnobValue' value='2147483646'/>
<enum name='kDiagonalBoxWipe' value='48'/>
<enum name='kDiagonalCrossWipe' value='47'/>
<enum name='kDiagonalLeftDownWipe' value='41'/>
<enum name='kDiagonalLeftOutWipe' value='45'/>
<enum name='kDiagonalRightDownWipe' value='42'/>
<enum name='kDiagonalRightOutWipe' value='46'/>
<enum name='kDiamondWipe' value='102'/>
<enum name='kDirectoryPathOnly' value='2'/>
<enum name='kDisableControl' value='1'/>
<enum name='kDisableWhenEqual' value='17'/>
<enum name='kDisableWhenGreaterThan' value='49'/>
<enum name='kDisableWhenLessThan' value='33'/>
<enum name='kDisableWhenNotEqual' value='1'/>
<enum name='kDistortMinorClass' value='1684632436'/>
<enum name='kDontUseValidateToFindGraphicsImporter' value='1'/>
<enum name='kDoubleDiagonalBottomRightMatrixWipe' value='329'/>
<enum name='kDoubleDiagonalTopRightMatrixWipe' value='328'/>
<enum name='kDoubleRotatingLeftRightWipe' value='228'/>
<enum name='kDoubleRotatingTopBottomWipe' value='227'/>
<enum name='kDoubleSpiralBottomMatixWipe' value='341'/>
<enum name='kDoubleSpiralLeftMatixWipe' value='342'/>
<enum name='kDoubleSpiralRightMatixWipe' value='343'/>
<enum name='kDoubleSpiralTopMatixWipe' value='340'/>
<enum name='kEdgeDetectImageFilterType' value='1701078885'/>
<enum name='kEffectDataSourceType' value='1685353332'/>
<enum name='kEffectGenericType' value='1734698598'/>
<enum name='kEffectMajorClassID' value='1'/>
<enum name='kEffectMajorClassType' value='1668051809'/>
<enum name='kEffectManufacturerAtom' value='1835101813'/>
<enum name='kEffectMinorClassID' value='1'/>
<enum name='kEffectMinorClassNameID' value='1'/>
<enum name='kEffectMinorClassNameType' value='1668051822'/>
<enum name='kEffectMinorClassType' value='1668051817'/>
<enum name='kEffectNameAtom' value='1851878757'/>
<enum name='kEffectParentWindowCarbon' value='1667330658'/>
<enum name='kEffectPresetType' value='1885693542'/>
<enum name='kEffectRawSource' value='0'/>
<enum name='kEffectSourceName' value='1936876320'/>
<enum name='kEffectTypeAtom' value='1954115685'/>
<enum name='kEffectsMinorClass' value='1719166584'/>
<enum name='kEmbossImageFilterType' value='1701667443'/>
<enum name='kEmptyPurgableChunksOverAllowance' value='1'/>
<enum name='kEndMarkerValue' value='96'/>
<enum name='kErrorIfFileNotFound' value='-2147483648'/>
<enum name='kEventClassMovieView' value='1836019574'/>
<enum name='kEventLen' value='1'/>
<enum name='kEventLengthFieldPos' value='30'/>
<enum name='kEventLengthFieldWidth' value='2'/>
<enum name='kEventMovieViewOptimalBoundsChanged' value='1'/>
<enum name='kEventPartFieldPos' value='24'/>
<enum name='kEventPartFieldWidth' value='5'/>
<enum name='kEventTypeFieldPos' value='29'/>
<enum name='kEventTypeFieldWidth' value='3'/>
<enum name='kExplodeTransitionType' value='2020633711'/>
<enum name='kExpressionContainerAtomType' value='1702391922'/>
<enum name='kFLCCodecType' value='1718380899'/>
<enum name='kFMSComponentSubType' value='1179472672'/>
<enum name='kFetchAsBooleanPtr' value='1'/>
<enum name='kFetchAsCString' value='16'/>
<enum name='kFetchAsComponentDescriptionPtr' value='15'/>
<enum name='kFetchAsFixedPtr' value='12'/>
<enum name='kFetchAsFloatPtr' value='8'/>
<enum name='kFetchAsHandle' value='6'/>
<enum name='kFetchAsLongPtr' value='3'/>
<enum name='kFetchAsMatrixRecordPtr' value='4'/>
<enum name='kFetchAsModifierTrackGraphicsModeRecord' value='5'/>
<enum name='kFetchAsNewAtomContainer' value='10'/>
<enum name='kFetchAsPointPtr' value='9'/>
<enum name='kFetchAsQTEventRecordPtr' value='11'/>
<enum name='kFetchAsRgnHandle' value='14'/>
<enum name='kFetchAsSetControllerValuePtr' value='13'/>
<enum name='kFetchAsShortPtr' value='2'/>
<enum name='kFetchAsStr255' value='7'/>
<enum name='kFieldInfoImageDescriptionExtension' value='1718183276'/>
<enum name='kFieldOrderUnknown' value='0'/>
<enum name='kFieldsStoredF1F2DisplayedF1F2' value='1'/>
<enum name='kFieldsStoredF1F2DisplayedF2F1' value='2'/>
<enum name='kFieldsStoredF2F1DisplayedF1F2' value='5'/>
<enum name='kFieldsStoredF2F1DisplayedF2F1' value='6'/>
<enum name='kFileNameOnly' value='1'/>
<enum name='kFilledVBottomWipe' value='63'/>
<enum name='kFilledVLeftWipe' value='64'/>
<enum name='kFilledVRightWipe' value='62'/>
<enum name='kFilledVWipe' value='61'/>
<enum name='kFilmNoiseImageFilterType' value='1718447731'/>
<enum name='kFilterMajorClass' value='1718185076'/>
<enum name='kFilterMinorClass' value='1718185076'/>
<enum name='kFireCodecType' value='1718186597'/>
<enum name='kFirstAction' value='1024'/>
<enum name='kFirstApplicationAction' value='8192'/>
<enum name='kFirstDrumkit' value='16384'/>
<enum name='kFirstFlashTrackAction' value='10240'/>
<enum name='kFirstGMInstrument' value='1'/>
<enum name='kFirstGSInstrument' value='129'/>
<enum name='kFirstMovieAction' value='1024'/>
<enum name='kFirstMovieTrackAction' value='11264'/>
<enum name='kFirstMultiTargetAction' value='13312'/>
<enum name='kFirstMusicAction' value='5120'/>
<enum name='kFirstQD3DNamedObjectAction' value='9216'/>
<enum name='kFirstQTVRAction' value='4096'/>
<enum name='kFirstROMInstrument' value='32768'/>
<enum name='kFirstSpriteAction' value='3072'/>
<enum name='kFirstSpriteTrackAction' value='7168'/>
<enum name='kFirstSystemAction' value='6144'/>
<enum name='kFirstTextTrackAction' value='12288'/>
<enum name='kFirstTrackAction' value='2048'/>
<enum name='kFirstUserInstrument' value='65536'/>
<enum name='kFivePointStarWipe' value='128'/>
<enum name='kFlashMediaDoButtonActionsSelect' value='268'/>
<enum name='kFlashMediaFrameLabelToMovieTimeSelect' value='265'/>
<enum name='kFlashMediaFrameNumberToMovieTimeSelect' value='264'/>
<enum name='kFlashMediaGetDisplayedFrameNumberSelect' value='263'/>
<enum name='kFlashMediaGetFlashVariableSelect' value='266'/>
<enum name='kFlashMediaGetRefConBoundsSelect' value='260'/>
<enum name='kFlashMediaGetRefConIDSelect' value='261'/>
<enum name='kFlashMediaGetSupportedSwfVersionSelect' value='269'/>
<enum name='kFlashMediaIDToRefConSelect' value='262'/>
<enum name='kFlashMediaSetFlashVariableSelect' value='267'/>
<enum name='kFlashMediaSetPanSelect' value='257'/>
<enum name='kFlashMediaSetZoomRectSelect' value='259'/>
<enum name='kFlashMediaSetZoomSelect' value='258'/>
<enum name='kFlashTrackPropertyAcceptAllClicks' value='1668049259'/>
<enum name='kFlushFirstQueuedFrame' value='1'/>
<enum name='kFlushLastQueuedFrame' value='0'/>
<enum name='kFourBoxWipe' value='8'/>
<enum name='kFourCornerWipe' value='7'/>
<enum name='kFourPointStarWipe' value='127'/>
<enum name='kFullNativePath' value='0'/>
<enum name='kFullPathSpecifiedMask' value='16'/>
<enum name='kGIFCodecType' value='1734960672'/>
<enum name='kGMSynthComponentSubType' value='1735204896'/>
<enum name='kGeneralEventAtomicInstrument' value='6'/>
<enum name='kGeneralEventKnob' value='7'/>
<enum name='kGeneralEventLen' value='2'/>
<enum name='kGeneralEventLengthBits' value='3'/>
<enum name='kGeneralEventLengthFieldPos' value='0'/>
<enum name='kGeneralEventLengthFieldWidth' value='16'/>
<enum name='kGeneralEventMIDIChannel' value='8'/>
<enum name='kGeneralEventNoOp' value='10'/>
<enum name='kGeneralEventNoteRequest' value='1'/>
<enum name='kGeneralEventPartChange' value='9'/>
<enum name='kGeneralEventPartKey' value='4'/>
<enum name='kGeneralEventPartMix' value='12'/>
<enum name='kGeneralEventSubtypeFieldPos' value='16'/>
<enum name='kGeneralEventSubtypeFieldWidth' value='14'/>
<enum name='kGeneralEventTuneDifference' value='5'/>
<enum name='kGeneralEventType' value='15'/>
<enum name='kGeneralEventUsedNotes' value='11'/>
<enum name='kGeneratorMajorClass' value='1734700658'/>
<enum name='kGeneratorMinorClass' value='1734700658'/>
<enum name='kGenericMusicAllDefaults' value='512'/>
<enum name='kGenericMusicBank0' value='2'/>
<enum name='kGenericMusicBank32' value='4'/>
<enum name='kGenericMusicCallInstrument' value='64'/>
<enum name='kGenericMusicCallKnobs' value='16'/>
<enum name='kGenericMusicCallNumber' value='128'/>
<enum name='kGenericMusicCallParts' value='32'/>
<enum name='kGenericMusicCallROMInstrument' value='256'/>
<enum name='kGenericMusicComponentSubtype' value='1734700645'/>
<enum name='kGenericMusicDoMIDI' value='1'/>
<enum name='kGenericMusicDrumKnob' value='3'/>
<enum name='kGenericMusicErsatzMIDI' value='8'/>
<enum name='kGenericMusicGlobalController' value='4'/>
<enum name='kGenericMusicInstrumentKnob' value='2'/>
<enum name='kGenericMusicKnob' value='1'/>
<enum name='kGenericMusicMiscLongChannelMask' value='4'/>
<enum name='kGenericMusicMiscLongDrumChannelMask' value='7'/>
<enum name='kGenericMusicMiscLongDrumPartCount' value='5'/>
<enum name='kGenericMusicMiscLongFirst' value='0'/>
<enum name='kGenericMusicMiscLongFirstGMDrumHW' value='12'/>
<enum name='kGenericMusicMiscLongFirstGMHW' value='11'/>
<enum name='kGenericMusicMiscLongFirstUserHW' value='13'/>
<enum name='kGenericMusicMiscLongFlags' value='10'/>
<enum name='kGenericMusicMiscLongLast' value='14'/>
<enum name='kGenericMusicMiscLongLatency' value='9'/>
<enum name='kGenericMusicMiscLongModifiableDrumCount' value='6'/>
<enum name='kGenericMusicMiscLongModifiableInstrumentCount' value='3'/>
<enum name='kGenericMusicMiscLongOutputCount' value='8'/>
<enum name='kGenericMusicMiscLongPartCount' value='2'/>
<enum name='kGenericMusicMiscLongVoiceCount' value='1'/>
<enum name='kGenericMusicResAboutPICT' value='12'/>
<enum name='kGenericMusicResBitsLongList' value='8'/>
<enum name='kGenericMusicResDrumKnobDescriptionList' value='6'/>
<enum name='kGenericMusicResDrumList' value='4'/>
<enum name='kGenericMusicResFirst' value='0'/>
<enum name='kGenericMusicResGMTranslation' value='10'/>
<enum name='kGenericMusicResInstrumentKnobDescriptionList' value='5'/>
<enum name='kGenericMusicResInstrumentList' value='3'/>
<enum name='kGenericMusicResKnobDescriptionList' value='7'/>
<enum name='kGenericMusicResLast' value='13'/>
<enum name='kGenericMusicResMiscLongList' value='2'/>
<enum name='kGenericMusicResMiscStringList' value='1'/>
<enum name='kGenericMusicResModifiableInstrumentHW' value='9'/>
<enum name='kGenericMusicResROMInstrumentData' value='11'/>
<enum name='kGetAtomicInstAllKnobs' value='32'/>
<enum name='kGetAtomicInstNoExpandedSamples' value='1'/>
<enum name='kGetAtomicInstNoInstrumentInfo' value='8'/>
<enum name='kGetAtomicInstNoKnobList' value='4'/>
<enum name='kGetAtomicInstNoOriginalSamples' value='2'/>
<enum name='kGetAtomicInstNoSamples' value='3'/>
<enum name='kGetAtomicInstOriginalKnobList' value='16'/>
<enum name='kGetInstrumentInfoMidiUserInst' value='2'/>
<enum name='kGetInstrumentInfoNoBuiltIn' value='1'/>
<enum name='kGetInstrumentInfoNoIText' value='4'/>
<enum name='kGetMovieImporterAllowNewFile' value='2'/>
<enum name='kGetMovieImporterAutoImportOnly' value='1024'/>
<enum name='kGetMovieImporterDontConsiderFileOnlyImporters' value='64'/>
<enum name='kGetMovieImporterDontConsiderGraphicsImporters' value='4'/>
<enum name='kGetMovieImporterValidateToFind' value='1'/>
<enum name='kGetSpriteWorldInvalidRegionAndLeaveIntact' value='-1'/>
<enum name='kGetSpriteWorldInvalidRegionAndThenSetEmpty' value='-2'/>
<enum name='kGrabberScrollerUI' value='1'/>
<enum name='kGrabberUI' value='4'/>
<enum name='kGradientTransitionType' value='1835103348'/>
<enum name='kGraphicsCodecType' value='1936548640'/>
<enum name='kGraphicsExportCanTranscodeSelect' value='2'/>
<enum name='kGraphicsExportCanUseCompressorSelect' value='4'/>
<enum name='kGraphicsExportDescription' value='1684370275'/>
<enum name='kGraphicsExportDoExportSelect' value='1'/>
<enum name='kGraphicsExportDoStandaloneExportSelect' value='6'/>
<enum name='kGraphicsExportDoTranscodeSelect' value='3'/>
<enum name='kGraphicsExportDoUseCompressorSelect' value='5'/>
<enum name='kGraphicsExportDrawInputImageSelect' value='61'/>
<enum name='kGraphicsExportExtension' value='1702392864'/>
<enum name='kGraphicsExportFileType' value='1718909296'/>
<enum name='kGraphicsExportGetColorSyncProfileSelect' value='34'/>
<enum name='kGraphicsExportGetCompressionMethodSelect' value='24'/>
<enum name='kGraphicsExportGetCompressionQualitySelect' value='26'/>
<enum name='kGraphicsExportGetDefaultFileNameExtensionSelect' value='8'/>
<enum name='kGraphicsExportGetDefaultFileTypeAndCreatorSelect' value='7'/>
<enum name='kGraphicsExportGetDepthSelect' value='30'/>
<enum name='kGraphicsExportGetDontRecompressSelect' value='16'/>
<enum name='kGraphicsExportGetExifEnabledSelect' value='79'/>
<enum name='kGraphicsExportGetFlagsSelect' value='85'/>
<enum name='kGraphicsExportGetInputCGBitmapContextSelect' value='83'/>
<enum name='kGraphicsExportGetInputCGImageSelect' value='81'/>
<enum name='kGraphicsExportGetInputDataReferenceSelect' value='38'/>
<enum name='kGraphicsExportGetInputDataSizeSelect' value='56'/>
<enum name='kGraphicsExportGetInputFileSelect' value='40'/>
<enum name='kGraphicsExportGetInputGWorldSelect' value='50'/>
<enum name='kGraphicsExportGetInputGraphicsImporterSelect' value='46'/>
<enum name='kGraphicsExportGetInputHandleSelect' value='42'/>
<enum name='kGraphicsExportGetInputImageDepthSelect' value='60'/>
<enum name='kGraphicsExportGetInputImageDescriptionSelect' value='58'/>
<enum name='kGraphicsExportGetInputImageDimensionsSelect' value='59'/>
<enum name='kGraphicsExportGetInputOffsetAndLimitSelect' value='54'/>
<enum name='kGraphicsExportGetInputPictureSelect' value='48'/>
<enum name='kGraphicsExportGetInputPixmapSelect' value='52'/>
<enum name='kGraphicsExportGetInputPtrSelect' value='44'/>
<enum name='kGraphicsExportGetInterlaceStyleSelect' value='18'/>
<enum name='kGraphicsExportGetMIMETypeListSelect' value='9'/>
<enum name='kGraphicsExportGetMetaDataSelect' value='20'/>
<enum name='kGraphicsExportGetOutputDataReferenceSelect' value='63'/>
<enum name='kGraphicsExportGetOutputFileSelect' value='65'/>
<enum name='kGraphicsExportGetOutputFileTypeAndCreatorSelect' value='71'/>
<enum name='kGraphicsExportGetOutputHandleSelect' value='67'/>
<enum name='kGraphicsExportGetOutputMarkSelect' value='74'/>
<enum name='kGraphicsExportGetOutputOffsetAndMaxSizeSelect' value='69'/>
<enum name='kGraphicsExportGetProgressProcSelect' value='36'/>
<enum name='kGraphicsExportGetResolutionSelect' value='28'/>
<enum name='kGraphicsExportGetSettingsAsAtomContainerSelect' value='13'/>
<enum name='kGraphicsExportGetSettingsAsTextSelect' value='14'/>
<enum name='kGraphicsExportGetTargetDataSizeSelect' value='22'/>
<enum name='kGraphicsExportGetThumbnailEnabledSelect' value='77'/>
<enum name='kGraphicsExportGroup' value='1702391919'/>
<enum name='kGraphicsExportMIMEType' value='1835625829'/>
<enum name='kGraphicsExportMayExporterReadInputDataSelect' value='55'/>
<enum name='kGraphicsExportReadInputDataSelect' value='57'/>
<enum name='kGraphicsExportReadOutputDataSelect' value='75'/>
<enum name='kGraphicsExportRequestSettingsSelect' value='11'/>
<enum name='kGraphicsExportSetColorSyncProfileSelect' value='33'/>
<enum name='kGraphicsExportSetCompressionMethodSelect' value='23'/>
<enum name='kGraphicsExportSetCompressionQualitySelect' value='25'/>
<enum name='kGraphicsExportSetDepthSelect' value='29'/>
<enum name='kGraphicsExportSetDontRecompressSelect' value='15'/>
<enum name='kGraphicsExportSetExifEnabledSelect' value='78'/>
<enum name='kGraphicsExportSetFlagsSelect' value='84'/>
<enum name='kGraphicsExportSetInputCGBitmapContextSelect' value='82'/>
<enum name='kGraphicsExportSetInputCGImageSelect' value='80'/>
<enum name='kGraphicsExportSetInputDataReferenceSelect' value='37'/>
<enum name='kGraphicsExportSetInputFileSelect' value='39'/>
<enum name='kGraphicsExportSetInputGWorldSelect' value='49'/>
<enum name='kGraphicsExportSetInputGraphicsImporterSelect' value='45'/>
<enum name='kGraphicsExportSetInputHandleSelect' value='41'/>
<enum name='kGraphicsExportSetInputOffsetAndLimitSelect' value='53'/>
<enum name='kGraphicsExportSetInputPictureSelect' value='47'/>
<enum name='kGraphicsExportSetInputPixmapSelect' value='51'/>
<enum name='kGraphicsExportSetInputPtrSelect' value='43'/>
<enum name='kGraphicsExportSetInterlaceStyleSelect' value='17'/>
<enum name='kGraphicsExportSetMetaDataSelect' value='19'/>
<enum name='kGraphicsExportSetOutputDataReferenceSelect' value='62'/>
<enum name='kGraphicsExportSetOutputFileSelect' value='64'/>
<enum name='kGraphicsExportSetOutputFileTypeAndCreatorSelect' value='70'/>
<enum name='kGraphicsExportSetOutputHandleSelect' value='66'/>
<enum name='kGraphicsExportSetOutputMarkSelect' value='73'/>
<enum name='kGraphicsExportSetOutputOffsetAndMaxSizeSelect' value='68'/>
<enum name='kGraphicsExportSetProgressProcSelect' value='35'/>
<enum name='kGraphicsExportSetResolutionSelect' value='27'/>
<enum name='kGraphicsExportSetSettingsFromAtomContainerSelect' value='12'/>
<enum name='kGraphicsExportSetTargetDataSizeSelect' value='21'/>
<enum name='kGraphicsExportSetThumbnailEnabledSelect' value='76'/>
<enum name='kGraphicsExportWriteOutputDataSelect' value='72'/>
<enum name='kGraphicsFlagsGray' value='1'/>
<enum name='kGraphicsImageImportGetSequenceEnabledSelect' value='257'/>
<enum name='kGraphicsImageImportSetSequenceEnabledSelect' value='256'/>
<enum name='kGraphicsImportCreateCGImageSelect' value='63'/>
<enum name='kGraphicsImportCreateCGImageUsingCurrentSettings' value='1'/>
<enum name='kGraphicsImportDoExportImageFileDialogSelect' value='38'/>
<enum name='kGraphicsImportDoExportImageFileToDataRefDialogSelect' value='67'/>
<enum name='kGraphicsImportDoesDrawAllPixelsSelect' value='34'/>
<enum name='kGraphicsImportDrawSelect' value='15'/>
<enum name='kGraphicsImportExportImageFileSelect' value='36'/>
<enum name='kGraphicsImportExportImageFileToDataRefSelect' value='66'/>
<enum name='kGraphicsImportGetAliasedDataReferenceSelect' value='30'/>
<enum name='kGraphicsImportGetAsPictureSelect' value='35'/>
<enum name='kGraphicsImportGetBaseDataOffsetAndSize64Select' value='61'/>
<enum name='kGraphicsImportGetBoundsRectSelect' value='21'/>
<enum name='kGraphicsImportGetClipSelect' value='11'/>
<enum name='kGraphicsImportGetColorSyncProfileSelect' value='54'/>
<enum name='kGraphicsImportGetDataFileSelect' value='4'/>
<enum name='kGraphicsImportGetDataHandleSelect' value='6'/>
<enum name='kGraphicsImportGetDataOffsetAndSize64Select' value='46'/>
<enum name='kGraphicsImportGetDataOffsetAndSizeSelect' value='8'/>
<enum name='kGraphicsImportGetDataReferenceOffsetAndLimit64Select' value='49'/>
<enum name='kGraphicsImportGetDataReferenceOffsetAndLimitSelect' value='29'/>
<enum name='kGraphicsImportGetDataReferenceSelect' value='2'/>
<enum name='kGraphicsImportGetDefaultClipSelect' value='51'/>
<enum name='kGraphicsImportGetDefaultGraphicsModeSelect' value='52'/>
<enum name='kGraphicsImportGetDefaultMatrixSelect' value='50'/>
<enum name='kGraphicsImportGetDefaultSourceRectSelect' value='53'/>
<enum name='kGraphicsImportGetDestRectSelect' value='56'/>
<enum name='kGraphicsImportGetDestinationColorSyncProfileRefSelect' value='71'/>
<enum name='kGraphicsImportGetExportImageTypeListSelect' value='37'/>
<enum name='kGraphicsImportGetExportSettingsAsAtomContainerSelect' value='39'/>
<enum name='kGraphicsImportGetFlagsSelect' value='58'/>
<enum name='kGraphicsImportGetGWorldSelect' value='17'/>
<enum name='kGraphicsImportGetGenericColorSyncProfileSelect' value='73'/>
<enum name='kGraphicsImportGetGraphicsModeSelect' value='24'/>
<enum name='kGraphicsImportGetImageCountSelect' value='43'/>
<enum name='kGraphicsImportGetImageDescriptionSelect' value='7'/>
<enum name='kGraphicsImportGetImageIndexSelect' value='45'/>
<enum name='kGraphicsImportGetMIMETypeListSelect' value='33'/>
<enum name='kGraphicsImportGetMatrixSelect' value='19'/>
<enum name='kGraphicsImportGetMetaDataSelect' value='32'/>
<enum name='kGraphicsImportGetNaturalBoundsSelect' value='14'/>
<enum name='kGraphicsImportGetOverrideSourceColorSyncProfileRefSelect' value='69'/>
<enum name='kGraphicsImportGetProgressProcSelect' value='42'/>
<enum name='kGraphicsImportGetQualitySelect' value='26'/>
<enum name='kGraphicsImportGetReturnGenericColorSyncProfileSelect' value='75'/>
<enum name='kGraphicsImportGetSourceRectSelect' value='13'/>
<enum name='kGraphicsImportReadData64Select' value='47'/>
<enum name='kGraphicsImportReadDataSelect' value='9'/>
<enum name='kGraphicsImportSaveAsPictureSelect' value='22'/>
<enum name='kGraphicsImportSaveAsPictureToDataRefSelect' value='64'/>
<enum name='kGraphicsImportSaveAsQuickTimeImageFileSelect' value='27'/>
<enum name='kGraphicsImportSaveAsQuickTimeImageFileToDataRefSelect' value='65'/>
<enum name='kGraphicsImportSetBoundsRectSelect' value='20'/>
<enum name='kGraphicsImportSetClipSelect' value='10'/>
<enum name='kGraphicsImportSetDataFileSelect' value='3'/>
<enum name='kGraphicsImportSetDataHandleSelect' value='5'/>
<enum name='kGraphicsImportSetDataReferenceOffsetAndLimit64Select' value='48'/>
<enum name='kGraphicsImportSetDataReferenceOffsetAndLimitSelect' value='28'/>
<enum name='kGraphicsImportSetDataReferenceSelect' value='1'/>
<enum name='kGraphicsImportSetDestRectSelect' value='55'/>
<enum name='kGraphicsImportSetDestinationColorSyncProfileRefSelect' value='70'/>
<enum name='kGraphicsImportSetExportSettingsFromAtomContainerSelect' value='40'/>
<enum name='kGraphicsImportSetFlagsSelect' value='57'/>
<enum name='kGraphicsImportSetGWorldSelect' value='16'/>
<enum name='kGraphicsImportSetGraphicsModeSelect' value='23'/>
<enum name='kGraphicsImportSetImageIndexSelect' value='44'/>
<enum name='kGraphicsImportSetImageIndexToThumbnailSelect' value='62'/>
<enum name='kGraphicsImportSetMatrixSelect' value='18'/>
<enum name='kGraphicsImportSetOverrideSourceColorSyncProfileRefSelect' value='68'/>
<enum name='kGraphicsImportSetProgressProcSelect' value='41'/>
<enum name='kGraphicsImportSetQualitySelect' value='25'/>
<enum name='kGraphicsImportSetReturnGenericColorSyncProfileSelect' value='74'/>
<enum name='kGraphicsImportSetSourceRectSelect' value='12'/>
<enum name='kGraphicsImportValidateSelect' value='31'/>
<enum name='kGraphicsImportWillUseColorMatchingSelect' value='72'/>
<enum name='kGraphicsImporterDontDoGammaCorrection' value='1'/>
<enum name='kGraphicsImporterDontUseColorMatching' value='8'/>
<enum name='kGraphicsImporterEnableSubPixelPositioning' value='4'/>
<enum name='kGraphicsImporterTrustResolutionFromFile' value='2'/>
<enum name='kGraphicsNoFlags' value='0'/>
<enum name='kGroupAlignText' value='65536'/>
<enum name='kGroupMatrix' value='262144'/>
<enum name='kGroupNoFlags' value='0'/>
<enum name='kGroupNoName' value='524288'/>
<enum name='kGroupSurroundBox' value='131072'/>
<enum name='kH261CodecType' value='1748121137'/>
<enum name='kH263CodecType' value='1748121139'/>
<enum name='kH264CodecType' value='1635148593'/>
<enum name='kHIMovieViewAcceptsFocusAttribute' value='4'/>
<enum name='kHIMovieViewAutoIdlingAttribute' value='2'/>
<enum name='kHIMovieViewControllerVisibleAttribute' value='1'/>
<enum name='kHIMovieViewEditableAttribute' value='8'/>
<enum name='kHIMovieViewHandleEditingHIAttribute' value='16'/>
<enum name='kHIMovieViewNoAttributes' value='0'/>
<enum name='kHIMovieViewStandardAttributes' value='7'/>
<enum name='kHSLColorBalanceImageFilterType' value='1752394850'/>
<enum name='kHeartWipe' value='130'/>
<enum name='kHexagonSideWipe' value='114'/>
<enum name='kHexagonWipe' value='113'/>
<enum name='kHollowVBottomWipe' value='67'/>
<enum name='kHollowVLeftWipe' value='68'/>
<enum name='kHollowVRightWipe' value='66'/>
<enum name='kHollowVWipe' value='65'/>
<enum name='kHorizontalBarnZigZagWipe' value='74'/>
<enum name='kHorizontalMatrixWipe' value='301'/>
<enum name='kHorizontalStartLeftMatrixWipe' value='324'/>
<enum name='kHorizontalStartLeftOppositeMatrixWipe' value='326'/>
<enum name='kHorizontalStartRightMatrixWipe' value='325'/>
<enum name='kHorizontalStartRightOppositeMatrixWipe' value='327'/>
<enum name='kHorizontalWaterfallLeftMatrixWipe' value='352'/>
<enum name='kHorizontalWaterfallRightMatrixWipe' value='353'/>
<enum name='kHorizontalZigZagWipe' value='72'/>
<enum name='kICCProfileColorInfoImageDescriptionExtensionType' value='1886547814'/>
<enum name='kICMAppThenTempMemory' value='8192'/>
<enum name='kICMCodecCantQueueOutOfOrderErr' value='-8995'/>
<enum name='kICMCompressionFrameOptionsPropertyID_ForceKeyFrame' value='1801812326'/>
<enum name='kICMCompressionFrameOptionsPropertyID_FrameType' value='1718776953'/>
<enum name='kICMCompressionPassMode_NoSourceFrames' value='2'/>
<enum name='kICMCompressionPassMode_NotReadyToOutputEncodedFrames' value='16'/>
<enum name='kICMCompressionPassMode_OutputEncodedFrames' value='1'/>
<enum name='kICMCompressionPassMode_ReadFromMultiPassStorage' value='8'/>
<enum name='kICMCompressionPassMode_WriteToMultiPassStorage' value='4'/>
<enum name='kICMCompressionSessionOptionsPropertyID_AllowAsyncCompletion' value='1634955115'/>
<enum name='kICMCompressionSessionOptionsPropertyID_AllowFrameReordering' value='1646292843'/>
<enum name='kICMCompressionSessionOptionsPropertyID_AllowFrameTimeChanges' value='723545963'/>
<enum name='kICMCompressionSessionOptionsPropertyID_AllowTemporalCompression' value='1881173867'/>
<enum name='kICMCompressionSessionOptionsPropertyID_AverageDataRate' value='1635149170'/>
<enum name='kICMCompressionSessionOptionsPropertyID_CPUTimeBudget' value='1668314484'/>
<enum name='kICMCompressionSessionOptionsPropertyID_CleanAperture' value='1668047216'/>
<enum name='kICMCompressionSessionOptionsPropertyID_ColorTable' value='1668052340'/>
<enum name='kICMCompressionSessionOptionsPropertyID_CompressorComponent' value='1768776559'/>
<enum name='kICMCompressionSessionOptionsPropertyID_CompressorSettings' value='1668248436'/>
<enum name='kICMCompressionSessionOptionsPropertyID_DataRateLimitCount' value='1751216675'/>
<enum name='kICMCompressionSessionOptionsPropertyID_DataRateLimits' value='1751216740'/>
<enum name='kICMCompressionSessionOptionsPropertyID_Depth' value='1684366704'/>
<enum name='kICMCompressionSessionOptionsPropertyID_DurationsNeeded' value='1852138852'/>
<enum name='kICMCompressionSessionOptionsPropertyID_ExpectedFrameRate' value='1718772078'/>
<enum name='kICMCompressionSessionOptionsPropertyID_ExtraAspectRatioStretchFactor' value='1702392678'/>
<enum name='kICMCompressionSessionOptionsPropertyID_FieldInfo' value='1718183276'/>
<enum name='kICMCompressionSessionOptionsPropertyID_MaxDataRateLimits' value='1835557234'/>
<enum name='kICMCompressionSessionOptionsPropertyID_MaxFrameDelayCount' value='1668770158'/>
<enum name='kICMCompressionSessionOptionsPropertyID_MaxFrameDelayTime' value='1668770164'/>
<enum name='kICMCompressionSessionOptionsPropertyID_MaxKeyFrameInterval' value='1803118194'/>
<enum name='kICMCompressionSessionOptionsPropertyID_MaxPartialSyncFrameInterval' value='1886611058'/>
<enum name='kICMCompressionSessionOptionsPropertyID_MultiPassStorage' value='1768779891'/>
<enum name='kICMCompressionSessionOptionsPropertyID_PixelAspectRatio' value='1885434736'/>
<enum name='kICMCompressionSessionOptionsPropertyID_Quality' value='1903518060'/>
<enum name='kICMCompressionSessionOptionsPropertyID_ScalingMode' value='1935892845'/>
<enum name='kICMCompressionSessionOptionsPropertyID_SimpleBoundaryConditions' value='1701733491'/>
<enum name='kICMCompressionSessionOptionsPropertyID_SourceFrameCount' value='1718772591'/>
<enum name='kICMCompressionSessionOptionsPropertyID_WasCompressed' value='2002875235'/>
<enum name='kICMCompressionSessionPropertyID_CompressorPixelBufferAttributes' value='1650553972'/>
<enum name='kICMCompressionSessionPropertyID_ImageDescription' value='1768190819'/>
<enum name='kICMCompressionSessionPropertyID_PixelBufferPool' value='1886351212'/>
<enum name='kICMCompressionSessionPropertyID_TimeScale' value='1953719148'/>
<enum name='kICMDecompressionFrameOptionsPropertyID_DestinationPixelBuffer' value='1668706402'/>
<enum name='kICMDecompressionSessionOptionsPropertyID_Accuracy' value='1633908082'/>
<enum name='kICMDecompressionSessionOptionsPropertyID_ApertureMode' value='1634757988'/>
<enum name='kICMDecompressionSessionOptionsPropertyID_DecompressorComponent' value='1768776803'/>
<enum name='kICMDecompressionSessionOptionsPropertyID_DisplayOrderRequired' value='1685025393'/>
<enum name='kICMDecompressionSessionOptionsPropertyID_FieldMode' value='1718183276'/>
<enum name='kICMDecompressionSessionOptionsPropertyID_MaxBufferCount' value='1831035494'/>
<enum name='kICMDecompressionSessionOptionsPropertyID_OutputAheadTime' value='1718973557'/>
<enum name='kICMDecompressionSessionPropertyID_NonScheduledDisplayDirection' value='1853056117'/>
<enum name='kICMDecompressionSessionPropertyID_NonScheduledDisplayTime' value='1853060201'/>
<enum name='kICMDecompressionSessionPropertyID_PixelBufferPool' value='1886351212'/>
<enum name='kICMDecompressionSessionPropertyID_PixelBufferPoolIsShared' value='1886155624'/>
<enum name='kICMDecompressionTracking_EmittingFrame' value='4'/>
<enum name='kICMDecompressionTracking_FrameDecoded' value='8'/>
<enum name='kICMDecompressionTracking_FrameDropped' value='16'/>
<enum name='kICMDecompressionTracking_FrameNeedsRequeueing' value='32'/>
<enum name='kICMDecompressionTracking_LastCall' value='1'/>
<enum name='kICMDecompressionTracking_ReleaseSourceData' value='2'/>
<enum name='kICMDeinterlaceFields' value='1'/>
<enum name='kICMFieldMode_BothFields' value='0'/>
<enum name='kICMFieldMode_BottomFieldOnly' value='2'/>
<enum name='kICMFieldMode_DeinterlaceFields' value='3'/>
<enum name='kICMFieldMode_TopFieldOnly' value='1'/>
<enum name='kICMFrameType_B' value='66'/>
<enum name='kICMFrameType_I' value='73'/>
<enum name='kICMFrameType_P' value='80'/>
<enum name='kICMFrameType_Unknown' value='0'/>
<enum name='kICMGetChainChild' value='2'/>
<enum name='kICMGetChainParent' value='1'/>
<enum name='kICMGetChainUltimateChild' value='3'/>
<enum name='kICMGetChainUltimateParent' value='0'/>
<enum name='kICMImageBufferNoPreference' value='0'/>
<enum name='kICMImageBufferPreferMainMemory' value='1'/>
<enum name='kICMImageBufferPreferVideoMemory' value='2'/>
<enum name='kICMImageCompressorPropertyID_EnforcedCleanAperture' value='1701733228'/>
<enum name='kICMImageCompressorPropertyID_EnforcedEncodedHeight' value='1701734501'/>
<enum name='kICMImageCompressorPropertyID_EnforcedEncodedWidth' value='1701738345'/>
<enum name='kICMImageCompressorPropertyID_EnforcedFieldInfo' value='1701733993'/>
<enum name='kICMImageCompressorPropertyID_EnforcedPixelAspectRatio' value='1701736545'/>
<enum name='kICMImageDescriptionPropertyID_CGColorSpace' value='1667720051'/>
<enum name='kICMImageDescriptionPropertyID_ClassicTrackHeight' value='1668047208'/>
<enum name='kICMImageDescriptionPropertyID_ClassicTrackWidth' value='1668047223'/>
<enum name='kICMImageDescriptionPropertyID_CleanAperture' value='1668047216'/>
<enum name='kICMImageDescriptionPropertyID_CleanApertureClipRect' value='1667326834'/>
<enum name='kICMImageDescriptionPropertyID_CleanApertureDisplayDimensions' value='1667327081'/>
<enum name='kICMImageDescriptionPropertyID_CleanApertureDisplayHeight' value='1684632424'/>
<enum name='kICMImageDescriptionPropertyID_CleanApertureDisplayWidth' value='1684632439'/>
<enum name='kICMImageDescriptionPropertyID_CleanApertureMatrix' value='1667329400'/>
<enum name='kICMImageDescriptionPropertyID_DisplayHeight' value='1684632424'/>
<enum name='kICMImageDescriptionPropertyID_DisplayWidth' value='1684632439'/>
<enum name='kICMImageDescriptionPropertyID_EncodedHeight' value='1701733224'/>
<enum name='kICMImageDescriptionPropertyID_EncodedPixelsDimensions' value='1701733481'/>
<enum name='kICMImageDescriptionPropertyID_EncodedWidth' value='1701733239'/>
<enum name='kICMImageDescriptionPropertyID_FieldInfo' value='1718183276'/>
<enum name='kICMImageDescriptionPropertyID_GammaLevel' value='1734438241'/>
<enum name='kICMImageDescriptionPropertyID_ICCProfile' value='1768121200'/>
<enum name='kICMImageDescriptionPropertyID_NCLCColorInfo' value='1852009571'/>
<enum name='kICMImageDescriptionPropertyID_PixelAspectRatio' value='1885434736'/>
<enum name='kICMImageDescriptionPropertyID_ProductionApertureDisplayDimensions' value='1886545001'/>
<enum name='kICMImageDescriptionPropertyID_ProductionApertureDisplayHeight' value='1885631336'/>
<enum name='kICMImageDescriptionPropertyID_ProductionApertureDisplayWidth' value='1885631351'/>
<enum name='kICMImageDescriptionPropertyID_ProductionApertureMatrix' value='1885433208'/>
<enum name='kICMImageDescriptionPropertyID_ProductionDisplayHeight' value='1885631336'/>
<enum name='kICMImageDescriptionPropertyID_ProductionDisplayWidth' value='1885631351'/>
<enum name='kICMImageDescriptionPropertyID_RowBytes' value='1919907682'/>
<enum name='kICMImageDescriptionPropertyID_StepDuration' value='1937007984'/>
<enum name='kICMImageDescriptionPropertyID_SummaryString' value='1769174381'/>
<enum name='kICMMultiPassStorageCallbacksVersionOne' value='1'/>
<enum name='kICMMultiPassStorage_DoNotDeleteWhenDone' value='1'/>
<enum name='kICMMultiPassStorage_GetFirstTimeStamp' value='1'/>
<enum name='kICMMultiPassStorage_GetLastTimeStamp' value='4'/>
<enum name='kICMMultiPassStorage_GetNextTimeStamp' value='3'/>
<enum name='kICMMultiPassStorage_GetPreviousTimeStamp' value='2'/>
<enum name='kICMNoDeinterlacing' value='0'/>
<enum name='kICMPixelFormatHasAlphaChannel' value='128'/>
<enum name='kICMPixelFormatIsIndexed' value='16'/>
<enum name='kICMPixelFormatIsMonochrome' value='64'/>
<enum name='kICMPixelFormatIsPlanarMask' value='15'/>
<enum name='kICMPixelFormatIsSupportedByQD' value='32'/>
<enum name='kICMScalingMode_Letterbox' value='1818588276'/>
<enum name='kICMScalingMode_StretchCleanAperture' value='1935880803'/>
<enum name='kICMScalingMode_StretchProductionAperture' value='1936732784'/>
<enum name='kICMScalingMode_Trim' value='1953655149'/>
<enum name='kICMSequenceTaskName' value='1953390957'/>
<enum name='kICMSequenceTaskWeight' value='1953981801'/>
<enum name='kICMSequenceUserPreferredCodecs' value='1886744180'/>
<enum name='kICMSourceTracking_CopiedPixelBuffer' value='64'/>
<enum name='kICMSourceTracking_FrameTimeWasChanged' value='32'/>
<enum name='kICMSourceTracking_FrameWasDropped' value='8'/>
<enum name='kICMSourceTracking_FrameWasEncoded' value='4'/>
<enum name='kICMSourceTracking_FrameWasMerged' value='16'/>
<enum name='kICMSourceTracking_LastCall' value='1'/>
<enum name='kICMSourceTracking_ReleasedPixelBuffer' value='2'/>
<enum name='kICMTempThenAppMemory' value='4096'/>
<enum name='kICMUnlimitedCPUTimeBudget' value='-1'/>
<enum name='kICMUnlimitedFrameDelayCount' value='-1'/>
<enum name='kICMUnlimitedFrameDelayTime' value='-1'/>
<enum name='kICMValidTime_DecodeDurationIsValid' value='8'/>
<enum name='kICMValidTime_DecodeTimeStampIsValid' value='4'/>
<enum name='kICMValidTime_DisplayDurationIsValid' value='2'/>
<enum name='kICMValidTime_DisplayOffsetIsValid' value='16'/>
<enum name='kICMValidTime_DisplayTimeStampIsValid' value='1'/>
<enum name='kITextAtomType' value='1769240692'/>
<enum name='kITextRemoveEverythingBut' value='0'/>
<enum name='kITextRemoveLeaveSuggestedAlternate' value='2'/>
<enum name='kITextStringAtomType' value='1952807028'/>
<enum name='kImageCodecBandCompressSelect' value='4'/>
<enum name='kImageCodecBandDecompressSelect' value='6'/>
<enum name='kImageCodecBeginBandSelect' value='514'/>
<enum name='kImageCodecBeginPassSelect' value='58'/>
<enum name='kImageCodecBusySelect' value='7'/>
<enum name='kImageCodecCancelTriggerSelect' value='521'/>
<enum name='kImageCodecCompleteFrameSelect' value='57'/>
<enum name='kImageCodecCreateStandardParameterDialogSelect' value='29'/>
<enum name='kImageCodecDITLEventSelect' value='48'/>
<enum name='kImageCodecDITLInstallSelect' value='47'/>
<enum name='kImageCodecDITLItemSelect' value='49'/>
<enum name='kImageCodecDITLRemoveSelect' value='50'/>
<enum name='kImageCodecDITLValidateInputSelect' value='51'/>
<enum name='kImageCodecDecodeBandSelect' value='527'/>
<enum name='kImageCodecDismissStandardParameterDialogSelect' value='31'/>
<enum name='kImageCodecDisposeImageGWorldSelect' value='34'/>
<enum name='kImageCodecDisposeMemorySelect' value='18'/>
<enum name='kImageCodecDrawBandSelect' value='515'/>
<enum name='kImageCodecDroppingFrameSelect' value='519'/>
<enum name='kImageCodecEffectBeginSelect' value='769'/>
<enum name='kImageCodecEffectCancelSelect' value='772'/>
<enum name='kImageCodecEffectConvertEffectSourceToFormatSelect' value='771'/>
<enum name='kImageCodecEffectDisposeSMPTEFrameSelect' value='257'/>
<enum name='kImageCodecEffectGetSpeedSelect' value='773'/>
<enum name='kImageCodecEffectPrepareSMPTEFrameSelect' value='256'/>
<enum name='kImageCodecEffectRenderFrameSelect' value='770'/>
<enum name='kImageCodecEffectRenderSMPTEFrameSelect' value='258'/>
<enum name='kImageCodecEffectSetupSelect' value='768'/>
<enum name='kImageCodecEncodeFrameSelect' value='56'/>
<enum name='kImageCodecEndBandSelect' value='516'/>
<enum name='kImageCodecEndPassSelect' value='59'/>
<enum name='kImageCodecExtractAndCombineFieldsSelect' value='21'/>
<enum name='kImageCodecFlushFrameSelect' value='25'/>
<enum name='kImageCodecFlushSelect' value='14'/>
<enum name='kImageCodecGetBaseMPWorkFunctionSelect' value='37'/>
<enum name='kImageCodecGetCodecInfoSelect' value='0'/>
<enum name='kImageCodecGetCompressedImageSizeSelect' value='8'/>
<enum name='kImageCodecGetCompressionTimeSelect' value='1'/>
<enum name='kImageCodecGetDITLForSizeSelect' value='46'/>
<enum name='kImageCodecGetDecompressLatencySelect' value='43'/>
<enum name='kImageCodecGetMaxCompressionSizeSelect' value='2'/>
<enum name='kImageCodecGetMaxCompressionSizeWithSourcesSelect' value='22'/>
<enum name='kImageCodecGetParameterListHandleSelect' value='27'/>
<enum name='kImageCodecGetParameterListSelect' value='28'/>
<enum name='kImageCodecGetPreferredChunkSizeAndAlignmentSelect' value='54'/>
<enum name='kImageCodecGetSettingsAsTextSelect' value='26'/>
<enum name='kImageCodecGetSettingsSelect' value='12'/>
<enum name='kImageCodecGetSimilaritySelect' value='9'/>
<enum name='kImageCodecGetSourceDataGammaLevelSelect' value='41'/>
<enum name='kImageCodecHitTestDataSelect' value='19'/>
<enum name='kImageCodecHitTestDataWithFlagsSelect' value='35'/>
<enum name='kImageCodecInitializeSelect' value='513'/>
<enum name='kImageCodecIsImageDescriptionEquivalentSelect' value='16'/>
<enum name='kImageCodecIsStandardParameterDialogEventSelect' value='30'/>
<enum name='kImageCodecLockBitsSelect' value='38'/>
<enum name='kImageCodecMergeFloatingImageOntoWindowSelect' value='44'/>
<enum name='kImageCodecNewImageBufferMemorySelect' value='20'/>
<enum name='kImageCodecNewImageGWorldSelect' value='33'/>
<enum name='kImageCodecNewMemorySelect' value='17'/>
<enum name='kImageCodecPreCompressSelect' value='3'/>
<enum name='kImageCodecPreDecompressSelect' value='5'/>
<enum name='kImageCodecPreflightSelect' value='512'/>
<enum name='kImageCodecPrepareToCompressFramesSelect' value='55'/>
<enum name='kImageCodecProcessBetweenPassesSelect' value='60'/>
<enum name='kImageCodecQueueStartingSelect' value='517'/>
<enum name='kImageCodecQueueStoppingSelect' value='518'/>
<enum name='kImageCodecRemoveFloatingImageSelect' value='45'/>
<enum name='kImageCodecRequestGammaLevelSelect' value='40'/>
<enum name='kImageCodecRequestSettingsSelect' value='11'/>
<enum name='kImageCodecScheduleFrameSelect' value='520'/>
<enum name='kImageCodecSetSettingsSelect' value='13'/>
<enum name='kImageCodecSetTimeBaseSelect' value='23'/>
<enum name='kImageCodecSetTimeCodeSelect' value='15'/>
<enum name='kImageCodecSettingsFieldCount' value='1718183276'/>
<enum name='kImageCodecSettingsFieldOrdering' value='1717858157'/>
<enum name='kImageCodecSettingsFieldOrderingF1F2' value='1'/>
<enum name='kImageCodecSettingsFieldOrderingF2F1' value='2'/>
<enum name='kImageCodecSourceChangedSelect' value='24'/>
<enum name='kImageCodecStandardParameterDialogDoActionSelect' value='32'/>
<enum name='kImageCodecTrimImageSelect' value='10'/>
<enum name='kImageCodecUnlockBitsSelect' value='39'/>
<enum name='kImageCodecValidateParametersSelect' value='36'/>
<enum name='kImageDescriptionAlternateCodec' value='1937072755'/>
<enum name='kImageDescriptionClassicAtomFormat' value='1635020653'/>
<enum name='kImageDescriptionColorSpace' value='1668509795'/>
<enum name='kImageDescriptionEffectDataFormat' value='1719165300'/>
<enum name='kImageDescriptionPrivateDataFormat' value='1886546294'/>
<enum name='kImageDescriptionQTAtomFormat' value='1903452532'/>
<enum name='kImageDescriptionSampleFormat' value='1768187501'/>
<enum name='kImageTranscoderBeginSequenceSelect' value='1'/>
<enum name='kImageTranscoderConvertSelect' value='2'/>
<enum name='kImageTranscoderDisposeDataSelect' value='3'/>
<enum name='kImageTranscoderEndSequenceSelect' value='4'/>
<enum name='kImagingDefaultValue' value='-2147483648'/>
<enum name='kImplodeTransitionType' value='1836084335'/>
<enum name='kIndeo4CodecType' value='1230386225'/>
<enum name='kInitialRotationAtom' value='1768845935'/>
<enum name='kInitializeQTMLDisableDDClippers' value='16'/>
<enum name='kInitializeQTMLDisableDirectSound' value='4'/>
<enum name='kInitializeQTMLEnableDoubleBufferedSurface' value='64'/>
<enum name='kInitializeQTMLNoSoundFlag' value='1'/>
<enum name='kInitializeQTMLUseExclusiveFullScreenModeFlag' value='8'/>
<enum name='kInitializeQTMLUseGDIFlag' value='2'/>
<enum name='kInputMapSubInputID' value='1937072745'/>
<enum name='kInstKnobMissingDefault' value='1'/>
<enum name='kInstKnobMissingUnknown' value='0'/>
<enum name='kInstrumentComponentType' value='1768846196'/>
<enum name='kInstrumentMatchGMNumber' value='16'/>
<enum name='kInstrumentMatchGSNumber' value='32'/>
<enum name='kInstrumentMatchName' value='4'/>
<enum name='kInstrumentMatchNumber' value='8'/>
<enum name='kInstrumentMatchSynthesizerName' value='2'/>
<enum name='kInstrumentMatchSynthesizerType' value='1'/>
<enum name='kInstrumentNamesBoth' value='2'/>
<enum name='kInstrumentNamesModifiable' value='1'/>
<enum name='kIrisTransitionType' value='1936551986'/>
<enum name='kJPEG2000CodecType' value='1835692082'/>
<enum name='kJPEGCodecType' value='1785750887'/>
<enum name='kJPEGHuffmanTablesImageDescriptionExtension' value='1835690100'/>
<enum name='kJPEGQuantizationTablesImageDescriptionExtension' value='1835692404'/>
<enum name='kJoystickUI' value='3'/>
<enum name='kKeyFrameAndAllOverrides' value='4'/>
<enum name='kKeyFrameAndSingleOverride' value='2'/>
<enum name='kKeyboardAllowFocus' value='1'/>
<enum name='kKeyboardHaveFocus' value='2'/>
<enum name='kKeyboardValidate' value='4'/>
<enum name='kKeyholeWipe' value='131'/>
<enum name='kKnobBasic' value='8'/>
<enum name='kKnobEventKnobFieldPos' value='16'/>
<enum name='kKnobEventKnobFieldWidth' value='14'/>
<enum name='kKnobEventType' value='11'/>
<enum name='kKnobEventValueHighFieldPos' value='0'/>
<enum name='kKnobEventValueHighFieldWidth' value='16'/>
<enum name='kKnobEventValueLowFieldPos' value='0'/>
<enum name='kKnobEventValueLowFieldWidth' value='16'/>
<enum name='kKnobFixedPoint16' value='2048'/>
<enum name='kKnobFixedPoint8' value='1024'/>
<enum name='kKnobGroupStart' value='128'/>
<enum name='kKnobInterruptUnsafe' value='32'/>
<enum name='kKnobKeyrangeOverride' value='64'/>
<enum name='kKnobReadOnly' value='16'/>
<enum name='kKnobTypeBoolean' value='8192'/>
<enum name='kKnobTypeButton' value='40960'/>
<enum name='kKnobTypeGroupName' value='4096'/>
<enum name='kKnobTypeHertz' value='36864'/>
<enum name='kKnobTypeInstrument' value='20480'/>
<enum name='kKnobTypeMilliseconds' value='28672'/>
<enum name='kKnobTypeNote' value='12288'/>
<enum name='kKnobTypeNumber' value='0'/>
<enum name='kKnobTypePan' value='16384'/>
<enum name='kKnobTypePercentage' value='32768'/>
<enum name='kKnobTypeSetting' value='24576'/>
<enum name='kLastAction' value='13322'/>
<enum name='kLastApplicationAction' value='8192'/>
<enum name='kLastDrumkit' value='16512'/>
<enum name='kLastFlashTrackAction' value='10246'/>
<enum name='kLastGMInstrument' value='128'/>
<enum name='kLastGSInstrument' value='16383'/>
<enum name='kLastMovieAction' value='1044'/>
<enum name='kLastMovieTrackAction' value='11266'/>
<enum name='kLastMultiTargetAction' value='13322'/>
<enum name='kLastMusicAction' value='5121'/>
<enum name='kLastQD3DNamedObjectAction' value='9218'/>
<enum name='kLastQTVRAction' value='4109'/>
<enum name='kLastROMInstrument' value='65535'/>
<enum name='kLastSpriteAction' value='3094'/>
<enum name='kLastSpriteTrackAction' value='7183'/>
<enum name='kLastSystemAction' value='6164'/>
<enum name='kLastTextTrackAction' value='12310'/>
<enum name='kLastTrackAction' value='2057'/>
<enum name='kLastUserInstrument' value='131071'/>
<enum name='kLeft180Wipe' value='224'/>
<enum name='kLeftCenterWipe' value='26'/>
<enum name='kLeftRightBowTieWipe' value='44'/>
<enum name='kLensFlareImageFilterType' value='1818586739'/>
<enum name='kLinearGradient' value='0'/>
<enum name='kListElementDataType' value='1684108409'/>
<enum name='kListElementType' value='1954115685'/>
<enum name='kMCActivateSelect' value='25'/>
<enum name='kMCAddMovieSegmentSelect' value='51'/>
<enum name='kMCAdjustCursorSelect' value='48'/>
<enum name='kMCClearSelect' value='34'/>
<enum name='kMCClickSelect' value='28'/>
<enum name='kMCCopySelect' value='31'/>
<enum name='kMCCutSelect' value='32'/>
<enum name='kMCDoActionSelect' value='9'/>
<enum name='kMCDrawBadgeSelect' value='42'/>
<enum name='kMCDrawSelect' value='24'/>
<enum name='kMCEnableEditingSelect' value='29'/>
<enum name='kMCGetClipSelect' value='41'/>
<enum name='kMCGetControllerBoundsRectSelect' value='16'/>
<enum name='kMCGetControllerBoundsRgnSelect' value='18'/>
<enum name='kMCGetControllerInfoSelect' value='37'/>
<enum name='kMCGetControllerPortSelect' value='13'/>
<enum name='kMCGetCurrentTimeSelect' value='22'/>
<enum name='kMCGetDoActionsProcSelect' value='50'/>
<enum name='kMCGetIndMovieSelect' value='5'/>
<enum name='kMCGetInterfaceElementSelect' value='49'/>
<enum name='kMCGetMenuStringSelect' value='44'/>
<enum name='kMCGetVisibleSelect' value='15'/>
<enum name='kMCGetWindowRgnSelect' value='19'/>
<enum name='kMCIEColorTable' value='256'/>
<enum name='kMCIEDepressedButtonPicture' value='3'/>
<enum name='kMCIEDisabledButtonPicture' value='2'/>
<enum name='kMCIEDisabledSizeBoxPicture' value='5'/>
<enum name='kMCIEDisabledUnavailableButtonPicture' value='7'/>
<enum name='kMCIEDoButtonIconsDropOnDepress' value='258'/>
<enum name='kMCIEEnabledButtonPicture' value='1'/>
<enum name='kMCIEEnabledSizeBoxPicture' value='4'/>
<enum name='kMCIEEnabledUnavailableButtonPicture' value='6'/>
<enum name='kMCIEIsFlatAppearance' value='257'/>
<enum name='kMCIESoundSlider' value='128'/>
<enum name='kMCIESoundThumb' value='129'/>
<enum name='kMCIdleSelect' value='26'/>
<enum name='kMCInvalidateSelect' value='47'/>
<enum name='kMCIsControllerAttachedSelect' value='11'/>
<enum name='kMCIsEditingEnabledSelect' value='30'/>
<enum name='kMCIsPlayerEventSelect' value='7'/>
<enum name='kMCKeySelect' value='27'/>
<enum name='kMCMovieChangedSelect' value='20'/>
<enum name='kMCNewAttachedControllerSelect' value='23'/>
<enum name='kMCPasteSelect' value='33'/>
<enum name='kMCPositionControllerSelect' value='36'/>
<enum name='kMCPtInControllerSelect' value='46'/>
<enum name='kMCRemoveAMovieSelect' value='3'/>
<enum name='kMCRemoveAllMoviesSelect' value='6'/>
<enum name='kMCRemoveMovieSelect' value='6'/>
<enum name='kMCSetActionFilterSelect' value='8'/>
<enum name='kMCSetActionFilterWithRefConSelect' value='45'/>
<enum name='kMCSetClipSelect' value='40'/>
<enum name='kMCSetControllerAttachedSelect' value='10'/>
<enum name='kMCSetControllerBoundsRectSelect' value='17'/>
<enum name='kMCSetControllerCapabilitiesSelect' value='54'/>
<enum name='kMCSetControllerPortSelect' value='12'/>
<enum name='kMCSetDurationSelect' value='21'/>
<enum name='kMCSetIdleManagerSelect' value='53'/>
<enum name='kMCSetMovieSelect' value='2'/>
<enum name='kMCSetUpEditMenuSelect' value='43'/>
<enum name='kMCSetVisibleSelect' value='14'/>
<enum name='kMCTrimMovieSegmentSelect' value='52'/>
<enum name='kMCUndoSelect' value='35'/>
<enum name='kMHInfoEncodedFrameRate' value='1869767028'/>
<enum name='kMIDIImport20Playable' value='4'/>
<enum name='kMIDIImportGetSettingsSelect' value='256'/>
<enum name='kMIDIImportSetSettingsSelect' value='257'/>
<enum name='kMIDIImportSilenceAfter' value='2'/>
<enum name='kMIDIImportSilenceBefore' value='1'/>
<enum name='kMIDIImportWantLyrics' value='8'/>
<enum name='kMIDIManagerComponentSubType' value='1835886450'/>
<enum name='kMPEG4VisualCodecType' value='1836070006'/>
<enum name='kMacPaintCodecType' value='1347310663'/>
<enum name='kMarkerEventBeat' value='1'/>
<enum name='kMarkerEventEnd' value='0'/>
<enum name='kMarkerEventLen' value='1'/>
<enum name='kMarkerEventSubtypeFieldPos' value='16'/>
<enum name='kMarkerEventSubtypeFieldWidth' value='8'/>
<enum name='kMarkerEventTempo' value='2'/>
<enum name='kMarkerEventType' value='3'/>
<enum name='kMarkerEventValueFieldPos' value='0'/>
<enum name='kMarkerEventValueFieldWidth' value='16'/>
<enum name='kMatrixTransitionType' value='1936551988'/>
<enum name='kMedia3DGetCameraAngleAspectSelect' value='266'/>
<enum name='kMedia3DGetCameraDataSelect' value='264'/>
<enum name='kMedia3DGetCameraRangeSelect' value='270'/>
<enum name='kMedia3DGetCurrentGroupSelect' value='259'/>
<enum name='kMedia3DGetNamedObjectListSelect' value='257'/>
<enum name='kMedia3DGetRendererListSelect' value='258'/>
<enum name='kMedia3DGetViewObjectSelect' value='271'/>
<enum name='kMedia3DRotateNamedObjectToSelect' value='262'/>
<enum name='kMedia3DScaleNamedObjectToSelect' value='261'/>
<enum name='kMedia3DSetCameraAngleAspectSelect' value='265'/>
<enum name='kMedia3DSetCameraDataSelect' value='263'/>
<enum name='kMedia3DSetCameraRangeSelect' value='269'/>
<enum name='kMedia3DTranslateNamedObjectToSelect' value='260'/>
<enum name='kMediaChangedNonPrimarySourceSelect' value='1316'/>
<enum name='kMediaCompareSelect' value='1325'/>
<enum name='kMediaCurrentMediaQueuedDataSelect' value='1360'/>
<enum name='kMediaDisposeTargetRefConSelect' value='1353'/>
<enum name='kMediaDoIdleActionsSelect' value='1373'/>
<enum name='kMediaEmptyAllPurgeableChunksSelect' value='1049'/>
<enum name='kMediaEmptySampleCacheSelect' value='1380'/>
<enum name='kMediaEnterEmptyEditSelect' value='1359'/>
<enum name='kMediaFlushNonPrimarySourceDataSelect' value='1345'/>
<enum name='kMediaForceUpdateSelect' value='1310'/>
<enum name='kMediaGGetIdleManagerSelect' value='1388'/>
<enum name='kMediaGGetLatencySelect' value='1393'/>
<enum name='kMediaGGetStatusSelect' value='1288'/>
<enum name='kMediaGSetActiveSegmentSelect' value='1312'/>
<enum name='kMediaGSetIdleManagerSelect' value='1389'/>
<enum name='kMediaGSetVolumeSelect' value='1299'/>
<enum name='kMediaGenerateApertureModeDimensionsSelect' value='1404'/>
<enum name='kMediaGetActionsForQTEventSelect' value='1352'/>
<enum name='kMediaGetApertureModeClipRectForSampleDescriptionIndexSelect' value='1402'/>
<enum name='kMediaGetApertureModeMatrixForSampleDescriptionIndexSelect' value='1403'/>
<enum name='kMediaGetChunkManagementFlagsSelect' value='1046'/>
<enum name='kMediaGetClockSelect' value='1326'/>
<enum name='kMediaGetDrawingRgnSelect' value='1311'/>
<enum name='kMediaGetEffectiveSoundBalanceSelect' value='1366'/>
<enum name='kMediaGetEffectiveVolumeSelect' value='1361'/>
<enum name='kMediaGetErrorStringSelect' value='1369'/>
<enum name='kMediaGetGraphicsModeSelect' value='1298'/>
<enum name='kMediaGetInvalidRegionSelect' value='1340'/>
<enum name='kMediaGetMediaInfoSelect' value='1284'/>
<enum name='kMediaGetMediaLoadStateSelect' value='1378'/>
<enum name='kMediaGetNameSelect' value='1309'/>
<enum name='kMediaGetNextBoundsChangeSelect' value='1302'/>
<enum name='kMediaGetNextStepTimeSelect' value='1314'/>
<enum name='kMediaGetOffscreenBufferSizeSelect' value='1307'/>
<enum name='kMediaGetPublicInfoSelect' value='1381'/>
<enum name='kMediaGetPurgeableChunkMemoryAllowanceSelect' value='1048'/>
<enum name='kMediaGetSampleDataPointerSelect' value='1318'/>
<enum name='kMediaGetSoundBalanceSelect' value='1301'/>
<enum name='kMediaGetSoundBassAndTrebleSelect' value='1375'/>
<enum name='kMediaGetSoundEqualizerBandLevelsSelect' value='1372'/>
<enum name='kMediaGetSoundEqualizerBandsSelect' value='1370'/>
<enum name='kMediaGetSoundLevelMeterInfoSelect' value='1365'/>
<enum name='kMediaGetSoundLevelMeteringEnabledSelect' value='1363'/>
<enum name='kMediaGetSoundOutputComponentSelect' value='1328'/>
<enum name='kMediaGetSrcRgnSelect' value='1303'/>
<enum name='kMediaGetTrackOpaqueSelect' value='1296'/>
<enum name='kMediaGetURLLinkSelect' value='1347'/>
<enum name='kMediaGetUserPreferredCodecsSelect' value='1383'/>
<enum name='kMediaGetVideoParamSelect' value='1324'/>
<enum name='kMediaHasCharacteristicSelect' value='1306'/>
<enum name='kMediaHitTestForTargetRefConSelect' value='1350'/>
<enum name='kMediaHitTestTargetRefConSelect' value='1351'/>
<enum name='kMediaIdleSelect' value='1283'/>
<enum name='kMediaInitializeSelect' value='1281'/>
<enum name='kMediaInvalidateRegionSelect' value='1313'/>
<enum name='kMediaMCIsPlayerEventSelect' value='1377'/>
<enum name='kMediaMakeMediaTimeTableSelect' value='1349'/>
<enum name='kMediaNavigateTargetRefConSelect' value='1387'/>
<enum name='kMediaPacketizerCanPackBalance' value='8'/>
<enum name='kMediaPacketizerCanPackEditRate' value='1'/>
<enum name='kMediaPacketizerCanPackEmptyEdit' value='32'/>
<enum name='kMediaPacketizerCanPackGraphicsMode' value='16'/>
<enum name='kMediaPacketizerCanPackLayer' value='2'/>
<enum name='kMediaPacketizerCanPackVolume' value='4'/>
<enum name='kMediaPacketizerInfoPadUpToBytes' value='4'/>
<enum name='kMediaPrePrerollBeginSelect' value='1356'/>
<enum name='kMediaPrePrerollCancelSelect' value='1357'/>
<enum name='kMediaPrerollSelect' value='1304'/>
<enum name='kMediaPropertyHasActions' value='105'/>
<enum name='kMediaPropertyNonLinearAtomType' value='1852796524'/>
<enum name='kMediaPutMediaInfoSelect' value='1285'/>
<enum name='kMediaQTIdleFrequencySelector' value='1768187505'/>
<enum name='kMediaQueueNonPrimarySourceDataSelect' value='1344'/>
<enum name='kMediaRefConGetPropertySelect' value='1386'/>
<enum name='kMediaRefConSetPropertySelect' value='1385'/>
<enum name='kMediaReleaseSampleDataPointerSelect' value='1319'/>
<enum name='kMediaResolveTargetRefConSelect' value='1362'/>
<enum name='kMediaSampleDescriptionB2NSelect' value='1342'/>
<enum name='kMediaSampleDescriptionChangedSelect' value='1305'/>
<enum name='kMediaSampleDescriptionN2BSelect' value='1343'/>
<enum name='kMediaSetActionsCallbackSelect' value='1355'/>
<enum name='kMediaSetActiveSelect' value='1286'/>
<enum name='kMediaSetChunkManagementFlagsSelect' value='1045'/>
<enum name='kMediaSetClipSelect' value='1294'/>
<enum name='kMediaSetDimensionsSelect' value='1293'/>
<enum name='kMediaSetDoMCActionCallbackSelect' value='1368'/>
<enum name='kMediaSetGWorldSelect' value='1292'/>
<enum name='kMediaSetGraphicsModeSelect' value='1297'/>
<enum name='kMediaSetHandlerCapabilitiesSelect' value='1282'/>
<enum name='kMediaSetHintsSelect' value='1308'/>
<enum name='kMediaSetMatrixSelect' value='1295'/>
<enum name='kMediaSetMediaTimeScaleSelect' value='1290'/>
<enum name='kMediaSetMovieTimeScaleSelect' value='1291'/>
<enum name='kMediaSetNonPrimarySourceDataSelect' value='1315'/>
<enum name='kMediaSetPublicInfoSelect' value='1382'/>
<enum name='kMediaSetPurgeableChunkMemoryAllowanceSelect' value='1047'/>
<enum name='kMediaSetRateSelect' value='1287'/>
<enum name='kMediaSetScreenLockSelect' value='1367'/>
<enum name='kMediaSetSoundBalanceSelect' value='1300'/>
<enum name='kMediaSetSoundBassAndTrebleSelect' value='1374'/>
<enum name='kMediaSetSoundEqualizerBandsSelect' value='1371'/>
<enum name='kMediaSetSoundLevelMeteringEnabledSelect' value='1364'/>
<enum name='kMediaSetSoundLocalizationDataSelect' value='1329'/>
<enum name='kMediaSetSoundOutputComponentSelect' value='1327'/>
<enum name='kMediaSetTrackApertureModeDimensionsUsingSampleDescriptionSelect' value='1401'/>
<enum name='kMediaSetTrackInputMapReferenceSelect' value='1321'/>
<enum name='kMediaSetUserPreferredCodecsSelect' value='1384'/>
<enum name='kMediaSetVideoParamSelect' value='1323'/>
<enum name='kMediaTargetRefConsEqualSelect' value='1354'/>
<enum name='kMediaTimeBaseChangedSelect' value='1376'/>
<enum name='kMediaTrackEditedSelect' value='1289'/>
<enum name='kMediaTrackPropertyAtomChangedSelect' value='1320'/>
<enum name='kMediaTrackReferencesChangedSelect' value='1317'/>
<enum name='kMediaVideoOutputChangedSelect' value='1379'/>
<enum name='kMediaVideoParamBlackLevel' value='6'/>
<enum name='kMediaVideoParamBrightness' value='1'/>
<enum name='kMediaVideoParamContrast' value='2'/>
<enum name='kMediaVideoParamHue' value='3'/>
<enum name='kMediaVideoParamSaturation' value='5'/>
<enum name='kMediaVideoParamSharpness' value='4'/>
<enum name='kMediaVideoParamWhiteLevel' value='7'/>
<enum name='kMicrosoftVideo1CodecType' value='1836283491'/>
<enum name='kMimeInfoDescriptionTag' value='1684370275'/>
<enum name='kMimeInfoDoNotOverrideExistingFileTypeAssociation' value='1852794465'/>
<enum name='kMimeInfoFileExtensionTag' value='1702392864'/>
<enum name='kMimeInfoGroupTag' value='1735552880'/>
<enum name='kMimeInfoMimeTypeTag' value='1835625829'/>
<enum name='kMiscMajorClass' value='1835627363'/>
<enum name='kMiscMinorClass' value='1835627363'/>
<enum name='kMotionJPEGACodecType' value='1835692129'/>
<enum name='kMotionJPEGBCodecType' value='1835692130'/>
<enum name='kMotionJPEGTag' value='1835692135'/>
<enum name='kMovieAnchorDataRefIsDefault' value='1'/>
<enum name='kMovieControlDataManualIdling' value='1835101813'/>
<enum name='kMovieControlDataMovie' value='1836019574'/>
<enum name='kMovieControlDataMovieController' value='1835212832'/>
<enum name='kMovieControlOptionEnableEditing' value='4'/>
<enum name='kMovieControlOptionHandleEditingHI' value='8'/>
<enum name='kMovieControlOptionHideController' value='1'/>
<enum name='kMovieControlOptionLocateTopLeft' value='2'/>
<enum name='kMovieControlOptionManuallyIdled' value='32'/>
<enum name='kMovieControlOptionSetKeysEnabled' value='16'/>
<enum name='kMovieControllerDontDisplayToUser' value='2'/>
<enum name='kMovieControllerQTVRFlag' value='1'/>
<enum name='kMovieExportAbsoluteTime' value='1'/>
<enum name='kMovieExportAddDataSourceSelect' value='138'/>
<enum name='kMovieExportDisposeGetDataAndPropertiesProcsSelect' value='257'/>
<enum name='kMovieExportDoUserDialogSelect' value='134'/>
<enum name='kMovieExportFromProceduresToDataRefSelect' value='137'/>
<enum name='kMovieExportGetAuxiliaryDataSelect' value='131'/>
<enum name='kMovieExportGetCreatorTypeSelect' value='135'/>
<enum name='kMovieExportGetFileNameExtensionSelect' value='142'/>
<enum name='kMovieExportGetSettingsAsAtomContainerSelect' value='140'/>
<enum name='kMovieExportGetShortFileTypeStringSelect' value='143'/>
<enum name='kMovieExportGetSourceMediaTypeSelect' value='144'/>
<enum name='kMovieExportNewGetDataAndPropertiesProcsSelect' value='256'/>
<enum name='kMovieExportRelativeTime' value='2'/>
<enum name='kMovieExportSetGetMoviePropertyProcSelect' value='145'/>
<enum name='kMovieExportSetProgressProcSelect' value='132'/>
<enum name='kMovieExportSetSampleDescriptionSelect' value='133'/>
<enum name='kMovieExportSetSettingsFromAtomContainerSelect' value='141'/>
<enum name='kMovieExportTextOnly' value='0'/>
<enum name='kMovieExportToDataRefSelect' value='136'/>
<enum name='kMovieExportToFileSelect' value='129'/>
<enum name='kMovieExportToHandleSelect' value='128'/>
<enum name='kMovieExportValidateSelect' value='139'/>
<enum name='kMovieImportDataRefSelect' value='16'/>
<enum name='kMovieImportDoUserDialogDataRefSelect' value='34'/>
<enum name='kMovieImportDoUserDialogSelect' value='11'/>
<enum name='kMovieImportEstimateCompletionTimeSelect' value='27'/>
<enum name='kMovieImportFileSelect' value='2'/>
<enum name='kMovieImportGetAuxiliaryDataTypeSelect' value='13'/>
<enum name='kMovieImportGetDestinationMediaTypeSelect' value='32'/>
<enum name='kMovieImportGetDontBlockSelect' value='29'/>
<enum name='kMovieImportGetFileTypeSelect' value='15'/>
<enum name='kMovieImportGetLoadStateSelect' value='25'/>
<enum name='kMovieImportGetMIMETypeListSelect' value='18'/>
<enum name='kMovieImportGetMaxLoadedTimeSelect' value='26'/>
<enum name='kMovieImportGetSampleDescriptionSelect' value='17'/>
<enum name='kMovieImportGetSettingsAsAtomContainerSelect' value='20'/>
<enum name='kMovieImportHandleSelect' value='1'/>
<enum name='kMovieImportIdleSelect' value='23'/>
<enum name='kMovieImportSetAuxiliaryDataSelect' value='9'/>
<enum name='kMovieImportSetChunkSizeSelect' value='7'/>
<enum name='kMovieImportSetDimensionsSelect' value='6'/>
<enum name='kMovieImportSetDontBlockSelect' value='28'/>
<enum name='kMovieImportSetDurationSelect' value='12'/>
<enum name='kMovieImportSetFromScrapSelect' value='10'/>
<enum name='kMovieImportSetIdleManagerSelect' value='30'/>
<enum name='kMovieImportSetMediaDataRefSelect' value='33'/>
<enum name='kMovieImportSetMediaFileSelect' value='5'/>
<enum name='kMovieImportSetNewMovieFlagsSelect' value='31'/>
<enum name='kMovieImportSetOffsetAndLimit64Select' value='22'/>
<enum name='kMovieImportSetOffsetAndLimitSelect' value='19'/>
<enum name='kMovieImportSetProgressProcSelect' value='8'/>
<enum name='kMovieImportSetSampleDescriptionSelect' value='4'/>
<enum name='kMovieImportSetSampleDurationSelect' value='3'/>
<enum name='kMovieImportSetSettingsFromAtomContainerSelect' value='21'/>
<enum name='kMovieImportValidateDataRefSelect' value='24'/>
<enum name='kMovieImportValidateSelect' value='14'/>
<enum name='kMovieLoadStateComplete' value='100000'/>
<enum name='kMovieLoadStateError' value='-1'/>
<enum name='kMovieLoadStateLoaded' value='2000'/>
<enum name='kMovieLoadStateLoading' value='1000'/>
<enum name='kMovieLoadStatePlayable' value='10000'/>
<enum name='kMovieLoadStatePlaythroughOK' value='20000'/>
<enum name='kMovieMediaAltText' value='1634497652'/>
<enum name='kMovieMediaAutoPlay' value='1886151033'/>
<enum name='kMovieMediaBackgroundColor' value='1651204972'/>
<enum name='kMovieMediaClipBegin' value='1668051042'/>
<enum name='kMovieMediaClipDuration' value='1668051044'/>
<enum name='kMovieMediaDataReference' value='1835885682'/>
<enum name='kMovieMediaDefaultDataReferenceID' value='1684304489'/>
<enum name='kMovieMediaEnableFrameStepping' value='1701734003'/>
<enum name='kMovieMediaFitClipIfNecessary' value='1751737444'/>
<enum name='kMovieMediaFitFill' value='1718185068'/>
<enum name='kMovieMediaFitMeet' value='1835361652'/>
<enum name='kMovieMediaFitNone' value='0'/>
<enum name='kMovieMediaFitScroll' value='1935897199'/>
<enum name='kMovieMediaFitSlice' value='1936484707'/>
<enum name='kMovieMediaGetChildDoMCActionCallbackSelect' value='258'/>
<enum name='kMovieMediaGetChildMovieDataReferenceSelect' value='262'/>
<enum name='kMovieMediaGetCurrentMoviePropertySelect' value='260'/>
<enum name='kMovieMediaGetCurrentTrackPropertySelect' value='261'/>
<enum name='kMovieMediaGetDoMCActionCallbackSelect' value='259'/>
<enum name='kMovieMediaHeight' value='1752440864'/>
<enum name='kMovieMediaLeft' value='1818584692'/>
<enum name='kMovieMediaLoadChildMovieFromDataReferenceSelect' value='264'/>
<enum name='kMovieMediaLoop' value='1819242352'/>
<enum name='kMovieMediaPrerollTime' value='1886545266'/>
<enum name='kMovieMediaRectangleAtom' value='1919247220'/>
<enum name='kMovieMediaRegionAtom' value='1919248233'/>
<enum name='kMovieMediaSetChildMovieDataReferenceSelect' value='263'/>
<enum name='kMovieMediaSlaveAudio' value='1936482677'/>
<enum name='kMovieMediaSlaveGraphicsMode' value='1936484210'/>
<enum name='kMovieMediaSlaveTime' value='1936487529'/>
<enum name='kMovieMediaSlaveTrackDuration' value='1936487538'/>
<enum name='kMovieMediaSpatialAdjustment' value='1718187040'/>
<enum name='kMovieMediaTitle' value='1953068140'/>
<enum name='kMovieMediaTop' value='1953460256'/>
<enum name='kMovieMediaUseMIMEType' value='1835625829'/>
<enum name='kMovieMediaWidth' value='2003050528'/>
<enum name='kMoviePropertyDuration' value='1685418593'/>
<enum name='kMoviePropertyMatrix' value='1836348024'/>
<enum name='kMoviePropertyNaturalBounds' value='1851880546'/>
<enum name='kMoviePropertyTime' value='1953066358'/>
<enum name='kMoviePropertyTimeScale' value='1953066355'/>
<enum name='kMoviePropertyTrackList' value='1953264500'/>
<enum name='kMovieVersion' value='0'/>
<enum name='kMpegYUV420CodecType' value='1836676470'/>
<enum name='kMusicComponentType' value='1836413801'/>
<enum name='kMusicDerivedCloseResFileSelect' value='520'/>
<enum name='kMusicDerivedMIDISendSelect' value='512'/>
<enum name='kMusicDerivedOpenResFileSelect' value='519'/>
<enum name='kMusicDerivedRange' value='512'/>
<enum name='kMusicDerivedSetInstrumentSelect' value='515'/>
<enum name='kMusicDerivedSetKnobSelect' value='513'/>
<enum name='kMusicDerivedSetMIDISelect' value='517'/>
<enum name='kMusicDerivedSetPartInstrumentNumberSelect' value='516'/>
<enum name='kMusicDerivedSetPartSelect' value='514'/>
<enum name='kMusicDerivedStorePartInstrumentSelect' value='518'/>
<enum name='kMusicFindToneSelect' value='22'/>
<enum name='kMusicFlagDontPlay2Soft' value='1'/>
<enum name='kMusicFlagDontSlaveToMovie' value='2'/>
<enum name='kMusicGenericConfigureSelect' value='256'/>
<enum name='kMusicGenericGetKnobListSelect' value='258'/>
<enum name='kMusicGenericGetPartSelect' value='257'/>
<enum name='kMusicGenericRange' value='256'/>
<enum name='kMusicGenericSetResourceNumbersSelect' value='259'/>
<enum name='kMusicGetDescriptionSelect' value='1'/>
<enum name='kMusicGetDeviceConnectionSelect' value='35'/>
<enum name='kMusicGetDrumKnobDescriptionSelect' value='44'/>
<enum name='kMusicGetDrumNamesSelect' value='30'/>
<enum name='kMusicGetInfoTextSelect' value='46'/>
<enum name='kMusicGetInstrumentAboutInfoSelect' value='34'/>
<enum name='kMusicGetInstrumentInfoSelect' value='47'/>
<enum name='kMusicGetInstrumentKnobDescriptionSelect' value='43'/>
<enum name='kMusicGetInstrumentNamesSelect' value='29'/>
<enum name='kMusicGetKnobDescriptionSelect' value='45'/>
<enum name='kMusicGetKnobSelect' value='18'/>
<enum name='kMusicGetKnobSettingStringsSelect' value='37'/>
<enum name='kMusicGetMIDIPortsSelect' value='38'/>
<enum name='kMusicGetMIDIProcSelect' value='27'/>
<enum name='kMusicGetMasterTuneSelect' value='31'/>
<enum name='kMusicGetPartAtomicInstrumentSelect' value='9'/>
<enum name='kMusicGetPartControllerSelect' value='26'/>
<enum name='kMusicGetPartInstrumentNumberSelect' value='5'/>
<enum name='kMusicGetPartKnobSelect' value='16'/>
<enum name='kMusicGetPartNameSelect' value='20'/>
<enum name='kMusicGetPartSelect' value='2'/>
<enum name='kMusicLoopTypeNormal' value='0'/>
<enum name='kMusicLoopTypePalindrome' value='1'/>
<enum name='kMusicMediaGetIndexedTunePlayerSelect' value='257'/>
<enum name='kMusicPacketPortFound' value='2'/>
<enum name='kMusicPacketPortLost' value='1'/>
<enum name='kMusicPacketTimeGap' value='3'/>
<enum name='kMusicPlayNoteSelect' value='23'/>
<enum name='kMusicResetPartSelect' value='24'/>
<enum name='kMusicSendMIDISelect' value='39'/>
<enum name='kMusicSetKnobSelect' value='19'/>
<enum name='kMusicSetMIDIProcSelect' value='28'/>
<enum name='kMusicSetMasterTuneSelect' value='32'/>
<enum name='kMusicSetOfflineTimeToSelect' value='42'/>
<enum name='kMusicSetPartAtomicInstrumentSelect' value='10'/>
<enum name='kMusicSetPartControllerSelect' value='25'/>
<enum name='kMusicSetPartInstrumentNumberInterruptSafeSelect' value='50'/>
<enum name='kMusicSetPartInstrumentNumberSelect' value='4'/>
<enum name='kMusicSetPartKnobSelect' value='17'/>
<enum name='kMusicSetPartNameSelect' value='21'/>
<enum name='kMusicSetPartSelect' value='3'/>
<enum name='kMusicSetPartSoundLocalizationSelect' value='51'/>
<enum name='kMusicStartOfflineSelect' value='41'/>
<enum name='kMusicStorePartInstrumentSelect' value='6'/>
<enum name='kMusicTaskSelect' value='49'/>
<enum name='kMusicUseDeviceConnectionSelect' value='36'/>
<enum name='kNACopyrightDialogSelect' value='28'/>
<enum name='kNADisposeNoteChannelSelect' value='5'/>
<enum name='kNAFindNoteChannelToneSelect' value='16'/>
<enum name='kNAGetControllerSelect' value='45'/>
<enum name='kNAGetIndNoteChannelSelect' value='31'/>
<enum name='kNAGetKnobSelect' value='40'/>
<enum name='kNAGetMIDIPortsSelect' value='33'/>
<enum name='kNAGetNoteChannelInfoSelect' value='6'/>
<enum name='kNAGetNoteRequestSelect' value='34'/>
<enum name='kNAGetRegisteredMusicDeviceSelect' value='2'/>
<enum name='kNANewNoteChannelFromAtomicInstrumentSelect' value='37'/>
<enum name='kNANewNoteChannelSelect' value='4'/>
<enum name='kNAPickArrangementSelect' value='19'/>
<enum name='kNAPickEditInstrumentSelect' value='36'/>
<enum name='kNAPickInstrumentSelect' value='18'/>
<enum name='kNAPlayNoteSelect' value='13'/>
<enum name='kNAPrerollNoteChannelSelect' value='7'/>
<enum name='kNARegisterMusicDeviceSelect' value='0'/>
<enum name='kNAResetNoteChannelSelect' value='12'/>
<enum name='kNASaveMusicConfigurationSelect' value='3'/>
<enum name='kNASendMIDISelect' value='35'/>
<enum name='kNASetAtomicInstrumentSelect' value='38'/>
<enum name='kNASetControllerSelect' value='14'/>
<enum name='kNASetInstrumentNumberInterruptSafeSelect' value='43'/>
<enum name='kNASetInstrumentNumberSelect' value='17'/>
<enum name='kNASetKnobSelect' value='15'/>
<enum name='kNASetNoteChannelBalanceSelect' value='42'/>
<enum name='kNASetNoteChannelSoundLocalizationSelect' value='44'/>
<enum name='kNASetNoteChannelVolumeSelect' value='11'/>
<enum name='kNAStuffToneDescriptionSelect' value='27'/>
<enum name='kNATaskSelect' value='41'/>
<enum name='kNAUnregisterMusicDeviceSelect' value='1'/>
<enum name='kNAUnrollNoteChannelSelect' value='8'/>
<enum name='kNameAtom' value='1851878757'/>
<enum name='kNewImageGWorldErase' value='1'/>
<enum name='kNoAtom' value='1852796517'/>
<enum name='kNoMaximumLongFixed' value='-2147483648'/>
<enum name='kNoMinimumLongFixed' value='2147483647'/>
<enum name='kNoPrecision' value='-1'/>
<enum name='kNoProxyUseSystemPref' value='1'/>
<enum name='kNoQTIdleEvents' value='-1'/>
<enum name='kNoScaleDouble' value='0'/>
<enum name='kNoScaleLongFixed' value='0'/>
<enum name='kNoiseMinorClass' value='1852795251'/>
<enum name='kNonLinearTweenHeader' value='1852601448'/>
<enum name='kNoteAllocatorComponentType' value='1852798049'/>
<enum name='kNoteEventDurationFieldPos' value='0'/>
<enum name='kNoteEventDurationFieldWidth' value='11'/>
<enum name='kNoteEventDurationMax' value='2047'/>
<enum name='kNoteEventLen' value='1'/>
<enum name='kNoteEventPitchFieldPos' value='18'/>
<enum name='kNoteEventPitchFieldWidth' value='6'/>
<enum name='kNoteEventPitchOffset' value='32'/>
<enum name='kNoteEventType' value='1'/>
<enum name='kNoteEventVolumeFieldPos' value='11'/>
<enum name='kNoteEventVolumeFieldWidth' value='7'/>
<enum name='kNoteEventVolumeOffset' value='0'/>
<enum name='kNoteRequestNoGM' value='1'/>
<enum name='kNoteRequestNoSynthType' value='2'/>
<enum name='kNoteRequestSpecifyMIDIChannel' value='128'/>
<enum name='kNoteRequestSynthMustMatch' value='4'/>
<enum name='kOMSComponentSubType' value='1330467616'/>
<enum name='kOSXMIDIComponentSubType' value='1869838445'/>
<enum name='kOldJoyStickUI' value='2'/>
<enum name='kOnlyDrawToSpriteWorld' value='1'/>
<enum name='kOpenDMLJPEGCodecType' value='1684890161'/>
<enum name='kOperandATan' value='8195'/>
<enum name='kOperandATan2' value='8196'/>
<enum name='kOperandAtomType' value='1869640302'/>
<enum name='kOperandCanHaveFocus' value='5124'/>
<enum name='kOperandComponentVersion' value='22'/>
<enum name='kOperandConnectionSpeed' value='6'/>
<enum name='kOperandConstant' value='2'/>
<enum name='kOperandCos' value='8193'/>
<enum name='kOperandCustomActionHandlerIDIsOpen' value='5'/>
<enum name='kOperandDegreesToRadians' value='8197'/>
<enum name='kOperandEventParameter' value='26'/>
<enum name='kOperandExponent' value='8200'/>
<enum name='kOperandExpression' value='1'/>
<enum name='kOperandFlashTrackVariable' value='9216'/>
<enum name='kOperandFreeMemory' value='27'/>
<enum name='kOperandGMTDay' value='7'/>
<enum name='kOperandGMTHours' value='10'/>
<enum name='kOperandGMTMinutes' value='11'/>
<enum name='kOperandGMTMonth' value='8'/>
<enum name='kOperandGMTSeconds' value='12'/>
<enum name='kOperandGMTYear' value='9'/>
<enum name='kOperandHasFocus' value='5125'/>
<enum name='kOperandKeyIsDown' value='5122'/>
<enum name='kOperandListCopyToXML' value='7171'/>
<enum name='kOperandListCountAttributes' value='7172'/>
<enum name='kOperandListCountElements' value='7168'/>
<enum name='kOperandListGetAttributeNameByIndex' value='7173'/>
<enum name='kOperandListGetAttributeValue' value='7174'/>
<enum name='kOperandListGetElementPathByIndex' value='7169'/>
<enum name='kOperandListGetElementValue' value='7170'/>
<enum name='kOperandLocalDay' value='13'/>
<enum name='kOperandLocalHours' value='16'/>
<enum name='kOperandLocalMinutes' value='17'/>
<enum name='kOperandLocalMonth' value='14'/>
<enum name='kOperandLocalSeconds' value='18'/>
<enum name='kOperandLocalYear' value='15'/>
<enum name='kOperandLog' value='8201'/>
<enum name='kOperandMaxLoadedTimeInMovie' value='25'/>
<enum name='kOperandMouseLocalHLoc' value='5120'/>
<enum name='kOperandMouseLocalVLoc' value='5121'/>
<enum name='kOperandMovieAnnotation' value='1043'/>
<enum name='kOperandMovieChapterCount' value='1038'/>
<enum name='kOperandMovieChapterIndex' value='1039'/>
<enum name='kOperandMovieChapterIndexByName' value='1042'/>
<enum name='kOperandMovieChapterName' value='1040'/>
<enum name='kOperandMovieChapterNameByIndex' value='1041'/>
<enum name='kOperandMovieConnectionFlags' value='1044'/>
<enum name='kOperandMovieConnectionString' value='1045'/>
<enum name='kOperandMovieDuration' value='1029'/>
<enum name='kOperandMovieHeight' value='1032'/>
<enum name='kOperandMovieID' value='1037'/>
<enum name='kOperandMovieIsActive' value='1035'/>
<enum name='kOperandMovieIsLooping' value='1026'/>
<enum name='kOperandMovieLoadState' value='1033'/>
<enum name='kOperandMovieLoopIsPalindrome' value='1027'/>
<enum name='kOperandMovieName' value='1036'/>
<enum name='kOperandMovieRate' value='1025'/>
<enum name='kOperandMovieTime' value='1028'/>
<enum name='kOperandMovieTimeScale' value='1030'/>
<enum name='kOperandMovieTrackCount' value='1034'/>
<enum name='kOperandMovieVolume' value='1024'/>
<enum name='kOperandMovieWidth' value='1031'/>
<enum name='kOperandNetworkStatus' value='28'/>
<enum name='kOperandOriginalHandlerRefcon' value='23'/>
<enum name='kOperandPlatformRunningOn' value='20'/>
<enum name='kOperandQTVRFieldOfView' value='4098'/>
<enum name='kOperandQTVRHotSpotsVisible' value='4100'/>
<enum name='kOperandQTVRNodeID' value='4099'/>
<enum name='kOperandQTVRPanAngle' value='4096'/>
<enum name='kOperandQTVRTiltAngle' value='4097'/>
<enum name='kOperandQTVRViewCenterH' value='4101'/>
<enum name='kOperandQTVRViewCenterV' value='4102'/>
<enum name='kOperandQTVRViewState' value='4104'/>
<enum name='kOperandQTVRViewStateCount' value='4103'/>
<enum name='kOperandQuickTimeVersion' value='21'/>
<enum name='kOperandQuickTimeVersionRegistered' value='29'/>
<enum name='kOperandRadiansToDegrees' value='8198'/>
<enum name='kOperandRandom' value='5123'/>
<enum name='kOperandRegisteredForQuickTimePro' value='19'/>
<enum name='kOperandSin' value='8192'/>
<enum name='kOperandSpriteBoundsBottom' value='3075'/>
<enum name='kOperandSpriteBoundsLeft' value='3072'/>
<enum name='kOperandSpriteBoundsRight' value='3074'/>
<enum name='kOperandSpriteBoundsTop' value='3073'/>
<enum name='kOperandSpriteCanBeHitTested' value='3105'/>
<enum name='kOperandSpriteFirstCornerX' value='3084'/>
<enum name='kOperandSpriteFirstCornerY' value='3085'/>
<enum name='kOperandSpriteFourthCornerX' value='3090'/>
<enum name='kOperandSpriteFourthCornerY' value='3091'/>
<enum name='kOperandSpriteID' value='3082'/>
<enum name='kOperandSpriteImageIndex' value='3076'/>
<enum name='kOperandSpriteImageRegistrationPointX' value='3092'/>
<enum name='kOperandSpriteImageRegistrationPointY' value='3093'/>
<enum name='kOperandSpriteIndex' value='3083'/>
<enum name='kOperandSpriteLayer' value='3078'/>
<enum name='kOperandSpriteName' value='3095'/>
<enum name='kOperandSpriteSecondCornerX' value='3086'/>
<enum name='kOperandSpriteSecondCornerY' value='3087'/>
<enum name='kOperandSpriteThirdCornerX' value='3088'/>
<enum name='kOperandSpriteThirdCornerY' value='3089'/>
<enum name='kOperandSpriteTrackAllSpritesHitTestingMode' value='3106'/>
<enum name='kOperandSpriteTrackImageIDByIndex' value='3107'/>
<enum name='kOperandSpriteTrackImageIndexByID' value='3108'/>
<enum name='kOperandSpriteTrackNumImages' value='3081'/>
<enum name='kOperandSpriteTrackNumSprites' value='3080'/>
<enum name='kOperandSpriteTrackSpriteIDAtPoint' value='3094'/>
<enum name='kOperandSpriteTrackVariable' value='3079'/>
<enum name='kOperandSpriteVisible' value='3077'/>
<enum name='kOperandSquareRoot' value='8199'/>
<enum name='kOperandStringCompare' value='10241'/>
<enum name='kOperandStringConcat' value='10243'/>
<enum name='kOperandStringLength' value='10240'/>
<enum name='kOperandStringSubString' value='10242'/>
<enum name='kOperandSubscribedToChannel' value='3'/>
<enum name='kOperandSystemVersion' value='30'/>
<enum name='kOperandTan' value='8194'/>
<enum name='kOperandTextTrackCopyText' value='6145'/>
<enum name='kOperandTextTrackEditable' value='6144'/>
<enum name='kOperandTextTrackEndSelection' value='6147'/>
<enum name='kOperandTextTrackStartSelection' value='6146'/>
<enum name='kOperandTextTrackTextBoxBottom' value='6151'/>
<enum name='kOperandTextTrackTextBoxLeft' value='6148'/>
<enum name='kOperandTextTrackTextBoxRight' value='6150'/>
<enum name='kOperandTextTrackTextBoxTop' value='6149'/>
<enum name='kOperandTextTrackTextLength' value='6152'/>
<enum name='kOperandTicks' value='24'/>
<enum name='kOperandTrackBalance' value='2049'/>
<enum name='kOperandTrackBass' value='2058'/>
<enum name='kOperandTrackDuration' value='2054'/>
<enum name='kOperandTrackEnabled' value='2050'/>
<enum name='kOperandTrackHeight' value='2053'/>
<enum name='kOperandTrackID' value='2056'/>
<enum name='kOperandTrackIdleFrequency' value='2057'/>
<enum name='kOperandTrackLayer' value='2051'/>
<enum name='kOperandTrackName' value='2055'/>
<enum name='kOperandTrackTreble' value='2059'/>
<enum name='kOperandTrackVolume' value='2048'/>
<enum name='kOperandTrackWidth' value='2052'/>
<enum name='kOperandUniqueCustomActionHandlerID' value='4'/>
<enum name='kOperatorAbsoluteValue' value='1633841952'/>
<enum name='kOperatorAdd' value='1633969184'/>
<enum name='kOperatorAnd' value='1634624544'/>
<enum name='kOperatorAtomType' value='1869636978'/>
<enum name='kOperatorDivide' value='1684633120'/>
<enum name='kOperatorEqualTo' value='1025515552'/>
<enum name='kOperatorGreaterThan' value='1042292768'/>
<enum name='kOperatorGreaterThanEqualTo' value='1044193312'/>
<enum name='kOperatorIntegerDivide' value='1768188278'/>
<enum name='kOperatorLessThan' value='1008738336'/>
<enum name='kOperatorLessThanEqualTo' value='1010638880'/>
<enum name='kOperatorModulo' value='1836016672'/>
<enum name='kOperatorMultiply' value='1836412020'/>
<enum name='kOperatorNegate' value='1852139296'/>
<enum name='kOperatorNot' value='1852797984'/>
<enum name='kOperatorNotEqualTo' value='557654048'/>
<enum name='kOperatorOr' value='1869750304'/>
<enum name='kOperatorSubtract' value='1937072672'/>
<enum name='kOvalSideWipe' value='121'/>
<enum name='kOvalWipe' value='120'/>
<enum name='kPNGCodecType' value='1886283552'/>
<enum name='kParameterAlternateCodecID' value='1'/>
<enum name='kParameterAlternateCodecName' value='1937072755'/>
<enum name='kParameterAlternateDataType' value='1634497585'/>
<enum name='kParameterAtomTypeAndID' value='1954115685'/>
<enum name='kParameterDataBehavior' value='1684632684'/>
<enum name='kParameterDataDefaultItem' value='1684434036'/>
<enum name='kParameterDataRange' value='1918987879'/>
<enum name='kParameterDataType' value='1684108385'/>
<enum name='kParameterDataUsage' value='1970496800'/>
<enum name='kParameterDependencyID' value='1'/>
<enum name='kParameterDependencyName' value='1684366704'/>
<enum name='kParameterEnumList' value='1701737837'/>
<enum name='kParameterImageIsPreset' value='1'/>
<enum name='kParameterImageNoFlags' value='0'/>
<enum name='kParameterInfoCopyright' value='-1453100935'/>
<enum name='kParameterInfoDescription' value='-1452708250'/>
<enum name='kParameterInfoIDs' value='1'/>
<enum name='kParameterInfoLongName' value='-1452383891'/>
<enum name='kParameterInfoManufacturer' value='-1452449426'/>
<enum name='kParameterInfoPicture' value='-1452250760'/>
<enum name='kParameterInfoWindowTitle' value='-1451790732'/>
<enum name='kParameterItemCheckBox' value='1667786104'/>
<enum name='kParameterItemColorPicker' value='1885954923'/>
<enum name='kParameterItemControl' value='1668183148'/>
<enum name='kParameterItemDragImage' value='1768776039'/>
<enum name='kParameterItemEditDouble' value='1685026146'/>
<enum name='kParameterItemEditFixed' value='1718188132'/>
<enum name='kParameterItemEditLong' value='1819242087'/>
<enum name='kParameterItemEditText' value='1701079412'/>
<enum name='kParameterItemGroupDivider' value='1684633193'/>
<enum name='kParameterItemLine' value='1818848869'/>
<enum name='kParameterItemPopUp' value='1886351477'/>
<enum name='kParameterItemRadioCluster' value='1918985321'/>
<enum name='kParameterItemStaticText' value='1937006964'/>
<enum name='kParameterListDependsUponColorProfiles' value='1886547814'/>
<enum name='kParameterListDependsUponFonts' value='1718578804'/>
<enum name='kParameterProperty' value='1886547824'/>
<enum name='kParameterRepeatableFalse' value='0'/>
<enum name='kParameterRepeatableID' value='1'/>
<enum name='kParameterRepeatableName' value='1885697125'/>
<enum name='kParameterRepeatableTrue' value='1'/>
<enum name='kParameterSourceCountID' value='1'/>
<enum name='kParameterSourceCountName' value='1936876403'/>
<enum name='kParameterTitleID' value='1'/>
<enum name='kParameterTitleName' value='1851878757'/>
<enum name='kParameterTypeDataBitField' value='1651470188'/>
<enum name='kParameterTypeDataColorValue' value='1668115570'/>
<enum name='kParameterTypeDataCubic' value='1668637289'/>
<enum name='kParameterTypeDataDouble' value='11'/>
<enum name='kParameterTypeDataEnum' value='1701737837'/>
<enum name='kParameterTypeDataFixed' value='3'/>
<enum name='kParameterTypeDataImage' value='1768776039'/>
<enum name='kParameterTypeDataLong' value='2'/>
<enum name='kParameterTypeDataNURB' value='1853190754'/>
<enum name='kParameterTypeDataRGBValue' value='8'/>
<enum name='kParameterTypeDataText' value='1952807028'/>
<enum name='kParameterUsage3DPoint' value='2021227040'/>
<enum name='kParameterUsage3by3Matrix' value='862091571'/>
<enum name='kParameterUsageCircularDegrees' value='1684367203'/>
<enum name='kParameterUsageCircularRadians' value='1918985315'/>
<enum name='kParameterUsageDegrees' value='1684367218'/>
<enum name='kParameterUsageMicroseconds' value='-1250728605'/>
<enum name='kParameterUsageMilliseconds' value='1836279139'/>
<enum name='kParameterUsagePercent' value='1885564532'/>
<enum name='kParameterUsagePixels' value='1885960300'/>
<enum name='kParameterUsagePoint' value='2021204000'/>
<enum name='kParameterUsageRadians' value='1918985331'/>
<enum name='kParameterUsageRectangle' value='1919247220'/>
<enum name='kParameterUsageSeconds' value='1936024435'/>
<enum name='kParameterValidationFinalValidation' value='1'/>
<enum name='kParameterValidationNoFlags' value='0'/>
<enum name='kParameterVersionID' value='1'/>
<enum name='kParameterVersionName' value='1986359923'/>
<enum name='kParameterWhatID' value='1'/>
<enum name='kParameterWhatName' value='2003329396'/>
<enum name='kParentAtomIsContainer' value='0'/>
<enum name='kPentagonUpsideDownWipe' value='112'/>
<enum name='kPentagonWipe' value='111'/>
<enum name='kPhotoCDCodecType' value='1802527588'/>
<enum name='kPickDontMix' value='1'/>
<enum name='kPickEditAllowEdit' value='8'/>
<enum name='kPickEditAllowPick' value='16'/>
<enum name='kPickEditControllers' value='64'/>
<enum name='kPickEditSynthGlobal' value='32'/>
<enum name='kPickSameSynth' value='2'/>
<enum name='kPickUserInsts' value='4'/>
<enum name='kPixelAspectRatioImageDescriptionExtension' value='1885434736'/>
<enum name='kPixletCodecType' value='1886940276'/>
<enum name='kPlanarRGBCodecType' value='943870035'/>
<enum name='kPlatformMacintosh' value='1'/>
<enum name='kPlatformWindows' value='2'/>
<enum name='kPopupStoreAsString' value='65536'/>
<enum name='kPresetNameID' value='1'/>
<enum name='kPresetNameType' value='1886282093'/>
<enum name='kPresetPreviewPictureID' value='1'/>
<enum name='kPresetPreviewPictureType' value='1886413684'/>
<enum name='kPresetSettingsID' value='1'/>
<enum name='kPresetSettingsType' value='1886614388'/>
<enum name='kPreviewEventSelect' value='4'/>
<enum name='kPreviewMakePreviewReferenceSelect' value='3'/>
<enum name='kPreviewMakePreviewSelect' value='2'/>
<enum name='kPreviewShowDataSelect' value='1'/>
<enum name='kPropertyClass_MetaData' value='1835365473'/>
<enum name='kPropertyClass_MetaDataItem' value='1835297140'/>
<enum name='kProxyActive' value='1'/>
<enum name='kProxyUseSystemPref' value='2'/>
<enum name='kPushTransitionType' value='1886745448'/>
<enum name='kQTAddComponentPropertyListenerSelect' value='-14'/>
<enum name='kQTAllowAggressiveImporters' value='16'/>
<enum name='kQTAllowImportersThatWouldCreateNewFile' value='8'/>
<enum name='kQTAllowOpeningStillImagesAsMovies' value='4'/>
<enum name='kQTAlphaMode' value='1634495855'/>
<enum name='kQTAlphaModePreMulColor' value='1634495856'/>
<enum name='kQTAnimatedGIFLoopCountInfinite' value='0'/>
<enum name='kQTApertureMode_Classic' value='1668047219'/>
<enum name='kQTApertureMode_CleanAperture' value='1668048225'/>
<enum name='kQTApertureMode_EncodedPixels' value='1701733231'/>
<enum name='kQTApertureMode_ProductionAperture' value='1886547812'/>
<enum name='kQTAppMessageDisplayChannels' value='5'/>
<enum name='kQTAppMessageEnterFullScreenRequested' value='6'/>
<enum name='kQTAppMessageExitFullScreenRequested' value='4'/>
<enum name='kQTAppMessageSoftwareChanged' value='1'/>
<enum name='kQTAppMessageWindowCloseRequested' value='3'/>
<enum name='kQTAudioDeviceAttribute_DefaultInputDeviceKey' value='1682533920'/>
<enum name='kQTAudioDeviceAttribute_DefaultOutputDeviceKey' value='1682929012'/>
<enum name='kQTAudioDeviceAttribute_DefaultSystemOutputDeviceKey' value='1934587252'/>
<enum name='kQTAudioDeviceAttribute_DeviceAliveKey' value='1634494838'/>
<enum name='kQTAudioDeviceAttribute_DeviceCanPreviewKey' value='1886545270'/>
<enum name='kQTAudioDeviceAttribute_DeviceCanRecordKey' value='1919247136'/>
<enum name='kQTAudioDeviceAttribute_DeviceHoggedKey' value='1752131431'/>
<enum name='kQTAudioDeviceAttribute_DeviceInUseKey' value='1970496868'/>
<enum name='kQTAudioDeviceAttribute_DeviceInputDescription' value='1768842355'/>
<enum name='kQTAudioDeviceAttribute_DeviceInputID' value='1768835396'/>
<enum name='kQTAudioDeviceAttribute_DeviceManufacturerKey' value='1835101813'/>
<enum name='kQTAudioDeviceAttribute_DeviceNameKey' value='1851878757'/>
<enum name='kQTAudioDeviceAttribute_DeviceOutputDescription' value='1869898867'/>
<enum name='kQTAudioDeviceAttribute_DeviceOutputID' value='1869891908'/>
<enum name='kQTAudioDeviceAttribute_DeviceSupportsHardwarePlaythruKey' value='1751216740'/>
<enum name='kQTAudioDeviceAttribute_DeviceTransportTypeKey' value='1953653102'/>
<enum name='kQTAudioDeviceAttribute_DeviceUIDKey' value='1969841184'/>
<enum name='kQTAudioDeviceAttribute_InputListWithAttributesKey' value='594112112'/>
<enum name='kQTAudioDeviceAttribute_InputSelectionKey' value='1768845428'/>
<enum name='kQTAudioDeviceAttribute_IsCoreAudioDeviceKey' value='1751215137'/>
<enum name='kQTAudioDeviceAttribute_OutputListWithAttributesKey' value='594506864'/>
<enum name='kQTAudioDeviceAttribute_OutputSelectionKey' value='1869901940'/>
<enum name='kQTAudioMeter_DeviceMix' value='1684237433'/>
<enum name='kQTAudioMeter_MonoMix' value='1836019064'/>
<enum name='kQTAudioMeter_StereoMix' value='1937010040'/>
<enum name='kQTAudioPropertyID_Balance' value='1650551905'/>
<enum name='kQTAudioPropertyID_BitRateString' value='1651733618'/>
<enum name='kQTAudioPropertyID_ChannelLayout' value='1953259897'/>
<enum name='kQTAudioPropertyID_ChannelLayoutString' value='1819505778'/>
<enum name='kQTAudioPropertyID_DeviceASBD' value='1684108132'/>
<enum name='kQTAudioPropertyID_DeviceChannelLayout' value='1684237433'/>
<enum name='kQTAudioPropertyID_FormatString' value='1718842482'/>
<enum name='kQTAudioPropertyID_Gain' value='1734437230'/>
<enum name='kQTAudioPropertyID_Mute' value='1836414053'/>
<enum name='kQTAudioPropertyID_Pitch' value='1885959267'/>
<enum name='kQTAudioPropertyID_RateChangesPreservePitch' value='1635083120'/>
<enum name='kQTAudioPropertyID_RegisterAudioContextInsert' value='1919248244'/>
<enum name='kQTAudioPropertyID_RenderQuality' value='1903518060'/>
<enum name='kQTAudioPropertyID_SampleRateString' value='1920169074'/>
<enum name='kQTAudioPropertyID_SampleSizeString' value='1936946290'/>
<enum name='kQTAudioPropertyID_SummaryASBD' value='1935766372'/>
<enum name='kQTAudioPropertyID_SummaryChannelLayout' value='1668047225'/>
<enum name='kQTAudioPropertyID_SummaryString' value='1634956653'/>
<enum name='kQTAudioRenderQuality_High' value='96'/>
<enum name='kQTAudioRenderQuality_Low' value='32'/>
<enum name='kQTAudioRenderQuality_Max' value='127'/>
<enum name='kQTAudioRenderQuality_Medium' value='64'/>
<enum name='kQTAudioRenderQuality_Min' value='0'/>
<enum name='kQTAudioRenderQuality_PlaybackDefault' value='32768'/>
<enum name='kQTBandwidthChangeRequest' value='4'/>
<enum name='kQTBandwidthNotifyGoodToGo' value='2'/>
<enum name='kQTBandwidthNotifyNeedToStop' value='1'/>
<enum name='kQTBandwidthQueueRequest' value='8'/>
<enum name='kQTBandwidthScheduledRequest' value='16'/>
<enum name='kQTBandwidthVoluntaryRelease' value='32'/>
<enum name='kQTBrowserInfoCanUseSystemFolderPlugin' value='1'/>
<enum name='kQTBrowserInfoResourceType' value='1651668851'/>
<enum name='kQTBrowserInfoResourceVersion' value='1'/>
<enum name='kQTCCIR601VideoGammaLevel' value='144179'/>
<enum name='kQTCPUSpeed1Rating' value='100'/>
<enum name='kQTCPUSpeed2Rating' value='200'/>
<enum name='kQTCPUSpeed3Rating' value='300'/>
<enum name='kQTCPUSpeed4Rating' value='400'/>
<enum name='kQTCPUSpeed5Rating' value='500'/>
<enum name='kQTCannotCoerceValueErr' value='-2192'/>
<enum name='kQTCloneDontCopyEdits' value='2'/>
<enum name='kQTCloneShareSamples' value='1'/>
<enum name='kQTColorSyncProfile' value='1768121200'/>
<enum name='kQTComponentPropertyListenerCollectionContextVersion' value='1'/>
<enum name='kQTContextPropertyID_AudioContext' value='1635083369'/>
<enum name='kQTContextPropertyID_VisualContext' value='1986622325'/>
<enum name='kQTControllerID' value='1'/>
<enum name='kQTControllerType' value='1668577648'/>
<enum name='kQTCopyUserDataMerge' value='1835364967'/>
<enum name='kQTCopyUserDataReplace' value='1919970403'/>
<enum name='kQTCursorClosedHand' value='-19182'/>
<enum name='kQTCursorDownArrow' value='-19178'/>
<enum name='kQTCursorIBeam' value='-19176'/>
<enum name='kQTCursorLeftArrow' value='-19179'/>
<enum name='kQTCursorOpenHand' value='-19183'/>
<enum name='kQTCursorPointingHand' value='-19181'/>
<enum name='kQTCursorRightArrow' value='-19180'/>
<enum name='kQTCursorUpArrow' value='-19177'/>
<enum name='kQTDRMPropertyID_InteractWithUser' value='1936225641'/>
<enum name='kQTDRMPropertyID_IsAuthorized' value='1635087464'/>
<enum name='kQTDRMPropertyID_IsProtected' value='1886547828'/>
<enum name='kQTDataLocationPropertyID_CFStringHFSPath' value='1667655792'/>
<enum name='kQTDataLocationPropertyID_CFStringNativePath' value='1667657328'/>
<enum name='kQTDataLocationPropertyID_CFStringPosixPath' value='1667657840'/>
<enum name='kQTDataLocationPropertyID_CFStringWindowsPath' value='1667659632'/>
<enum name='kQTDataLocationPropertyID_CFURL' value='1667659122'/>
<enum name='kQTDataLocationPropertyID_DataFork' value='1684435563'/>
<enum name='kQTDataLocationPropertyID_DataReference' value='1685218662'/>
<enum name='kQTDataLocationPropertyID_LegacyMovieResourceHandle' value='1919253096'/>
<enum name='kQTDataLocationPropertyID_MovieUserProc' value='1970499698'/>
<enum name='kQTDataLocationPropertyID_QTDataHandler' value='1903453288'/>
<enum name='kQTDataLocationPropertyID_ResourceFork' value='1919316587'/>
<enum name='kQTDataLocationPropertyID_Scrap' value='1935897200'/>
<enum name='kQTDisplayTimeAlreadyInUseErr' value='-9462'/>
<enum name='kQTDisplayTimeTooEarlyErr' value='-9463'/>
<enum name='kQTDontLookForMovieImporterIfGraphicsImporterFound' value='2'/>
<enum name='kQTDontRecompress' value='1684960370'/>
<enum name='kQTDontUseDataToFindImporter' value='1'/>
<enum name='kQTEnableExif' value='1702390118'/>
<enum name='kQTEnterMoviesFlagDontSetComponentsThreadMode' value='1'/>
<enum name='kQTEventFrameLoaded' value='1718772077'/>
<enum name='kQTEventIdle' value='1768189029'/>
<enum name='kQTEventKey' value='1801812256'/>
<enum name='kQTEventKeyUp' value='1801812309'/>
<enum name='kQTEventListReceived' value='1818850164'/>
<enum name='kQTEventMouseClick' value='1668049259'/>
<enum name='kQTEventMouseClickEnd' value='1667591780'/>
<enum name='kQTEventMouseClickEndTriggerButton' value='1953655143'/>
<enum name='kQTEventMouseEnter' value='1701737586'/>
<enum name='kQTEventMouseExit' value='1702390132'/>
<enum name='kQTEventMouseMoved' value='1836021349'/>
<enum name='kQTEventMovieLoaded' value='1819238756'/>
<enum name='kQTEventPayloadIsQTList' value='1'/>
<enum name='kQTEventRecordAtomType' value='1701995875'/>
<enum name='kQTEventRequestToModifyMovie' value='1919250797'/>
<enum name='kQTEventType' value='1702260340'/>
<enum name='kQTExifUserDataApertureValue' value='1702400514'/>
<enum name='kQTExifUserDataBrightnessValue' value='1702400515'/>
<enum name='kQTExifUserDataColorSpace' value='1702404097'/>
<enum name='kQTExifUserDataComponentsConfiguration' value='1702400257'/>
<enum name='kQTExifUserDataCompressedBitsPerPixel' value='1702400258'/>
<enum name='kQTExifUserDataDateTimeDigitized' value='1702400004'/>
<enum name='kQTExifUserDataDateTimeOriginal' value='1702400003'/>
<enum name='kQTExifUserDataExifVersion' value='1702400000'/>
<enum name='kQTExifUserDataExposureBiasValue' value='1702400516'/>
<enum name='kQTExifUserDataExposureIndex' value='1702404629'/>
<enum name='kQTExifUserDataExposureProgram' value='1702397986'/>
<enum name='kQTExifUserDataExposureTime' value='1702396570'/>
<enum name='kQTExifUserDataFNumber' value='1702396573'/>
<enum name='kQTExifUserDataFileSource' value='1702404864'/>
<enum name='kQTExifUserDataFlash' value='1702400521'/>
<enum name='kQTExifUserDataFlashEnergy' value='1702404619'/>
<enum name='kQTExifUserDataFlashPixVersion' value='1702404096'/>
<enum name='kQTExifUserDataFocalLength' value='1702400522'/>
<enum name='kQTExifUserDataFocalPlaneResolutionUnit' value='1702404624'/>
<enum name='kQTExifUserDataFocalPlaneXResolution' value='1702404622'/>
<enum name='kQTExifUserDataFocalPlaneYResolution' value='1702404623'/>
<enum name='kQTExifUserDataGPSAltitude' value='1735393286'/>
<enum name='kQTExifUserDataGPSAltitudeRef' value='1735393285'/>
<enum name='kQTExifUserDataGPSDOP' value='1735393291'/>
<enum name='kQTExifUserDataGPSDestBearing' value='1735393304'/>
<enum name='kQTExifUserDataGPSDestBearingRef' value='1735393303'/>
<enum name='kQTExifUserDataGPSDestDistance' value='1735393306'/>
<enum name='kQTExifUserDataGPSDestDistanceRef' value='1735393305'/>
<enum name='kQTExifUserDataGPSDestLatitude' value='1735393300'/>
<enum name='kQTExifUserDataGPSDestLatitudeRef' value='1735393299'/>
<enum name='kQTExifUserDataGPSDestLongitude' value='1735393302'/>
<enum name='kQTExifUserDataGPSDestLongitudeRef' value='1735393301'/>
<enum name='kQTExifUserDataGPSImgDirection' value='1735393297'/>
<enum name='kQTExifUserDataGPSImgDirectionRef' value='1735393296'/>
<enum name='kQTExifUserDataGPSLatitude' value='1735393282'/>
<enum name='kQTExifUserDataGPSLatitudeRef' value='1735393281'/>
<enum name='kQTExifUserDataGPSLongitude' value='1735393284'/>
<enum name='kQTExifUserDataGPSLongitudeRef' value='1735393283'/>
<enum name='kQTExifUserDataGPSMapDatum' value='1735393298'/>
<enum name='kQTExifUserDataGPSMeasureMode' value='1735393290'/>
<enum name='kQTExifUserDataGPSSatellites' value='1735393288'/>
<enum name='kQTExifUserDataGPSSpeed' value='1735393293'/>
<enum name='kQTExifUserDataGPSSpeedRef' value='1735393292'/>
<enum name='kQTExifUserDataGPSStatus' value='1735393289'/>
<enum name='kQTExifUserDataGPSTimeStamp' value='1735393287'/>
<enum name='kQTExifUserDataGPSTrack' value='1735393295'/>
<enum name='kQTExifUserDataGPSTrackRef' value='1735393294'/>
<enum name='kQTExifUserDataGPSVersionID' value='1735393280'/>
<enum name='kQTExifUserDataISOSpeedRatings' value='1702397991'/>
<enum name='kQTExifUserDataLightSource' value='1702400520'/>
<enum name='kQTExifUserDataMakerNote' value='1702400636'/>
<enum name='kQTExifUserDataMaxApertureValue' value='1702400517'/>
<enum name='kQTExifUserDataMeteringMode' value='1702400519'/>
<enum name='kQTExifUserDataPixelXDimension' value='1702404098'/>
<enum name='kQTExifUserDataPixelYDimension' value='1702404099'/>
<enum name='kQTExifUserDataRelatedSoundFile' value='1702404100'/>
<enum name='kQTExifUserDataSceneType' value='1702404865'/>
<enum name='kQTExifUserDataSensingMethod' value='1702404631'/>
<enum name='kQTExifUserDataShutterSpeedValue' value='1702400513'/>
<enum name='kQTExifUserDataSpectralSensitivity' value='1702397988'/>
<enum name='kQTExifUserDataSubSecTime' value='1702400656'/>
<enum name='kQTExifUserDataSubSecTimeDigitized' value='1702400658'/>
<enum name='kQTExifUserDataSubSecTimeOriginal' value='1702400657'/>
<enum name='kQTExifUserDataSubjectDistance' value='1702400518'/>
<enum name='kQTExifUserDataSubjectLocation' value='1702404628'/>
<enum name='kQTExifUserDataUserComment' value='1702400646'/>
<enum name='kQTFieldDetailSpatialFirstLineEarly' value='9'/>
<enum name='kQTFieldDetailSpatialFirstLineLate' value='14'/>
<enum name='kQTFieldDetailTemporalBottomFirst' value='6'/>
<enum name='kQTFieldDetailTemporalTopFirst' value='1'/>
<enum name='kQTFieldDetailUnknown' value='0'/>
<enum name='kQTFieldsInterlaced' value='2'/>
<enum name='kQTFieldsProgressiveScan' value='1'/>
<enum name='kQTFileType3DMF' value='860114246'/>
<enum name='kQTFileType3GP2' value='862416946'/>
<enum name='kQTFileType3GPP' value='862417008'/>
<enum name='kQTFileTypeAIFC' value='1095321155'/>
<enum name='kQTFileTypeAIFF' value='1095321158'/>
<enum name='kQTFileTypeAMC' value='1634558752'/>
<enum name='kQTFileTypeAMR' value='1634562592'/>
<enum name='kQTFileTypeAVI' value='1449547552'/>
<enum name='kQTFileTypeAudioCDTrack' value='1953653099'/>
<enum name='kQTFileTypeBMP' value='1112363110'/>
<enum name='kQTFileTypeBrandISOFile' value='1769172845'/>
<enum name='kQTFileTypeBrandMPEG4v1' value='1836069937'/>
<enum name='kQTFileTypeBrandMPEG4v2' value='1836069938'/>
<enum name='kQTFileTypeBrandQuickTimeMovie' value='1903435808'/>
<enum name='kQTFileTypeDVC' value='1685480225'/>
<enum name='kQTFileTypeFLC' value='1179403040'/>
<enum name='kQTFileTypeFlash' value='1398228556'/>
<enum name='kQTFileTypeFlashPix' value='1179675000'/>
<enum name='kQTFileTypeGIF' value='1195984486'/>
<enum name='kQTFileTypeJFIF' value='1246774599'/>
<enum name='kQTFileTypeJPEG' value='1246774599'/>
<enum name='kQTFileTypeJPEG2000' value='1785737760'/>
<enum name='kQTFileTypeMIDI' value='1298752617'/>
<enum name='kQTFileTypeMP4' value='1836082996'/>
<enum name='kQTFileTypeMacPaint' value='1347310663'/>
<enum name='kQTFileTypeMovie' value='1299148630'/>
<enum name='kQTFileTypeMuLaw' value='1431060823'/>
<enum name='kQTFileTypePDF' value='1346651680'/>
<enum name='kQTFileTypePICS' value='1346978643'/>
<enum name='kQTFileTypePNG' value='1347307366'/>
<enum name='kQTFileTypePhotoShop' value='943870035'/>
<enum name='kQTFileTypePicture' value='1346978644'/>
<enum name='kQTFileTypeQuickDrawGXPicture' value='1902405496'/>
<enum name='kQTFileTypeQuickTimeImage' value='1903454566'/>
<enum name='kQTFileTypeSDV' value='1935963680'/>
<enum name='kQTFileTypeSGIImage' value='777209673'/>
<enum name='kQTFileTypeSoundDesignerII' value='1399075430'/>
<enum name='kQTFileTypeSystemSevenSound' value='1936091500'/>
<enum name='kQTFileTypeTIFF' value='1414088262'/>
<enum name='kQTFileTypeTargaImage' value='1414547779'/>
<enum name='kQTFileTypeText' value='1413830740'/>
<enum name='kQTFileTypeWave' value='1463899717'/>
<enum name='kQTGetComponentPropertyInfoSelect' value='-11'/>
<enum name='kQTGetComponentPropertySelect' value='-12'/>
<enum name='kQTGetMIMETypeInfoIsQuickTimeMovieType' value='1836019574'/>
<enum name='kQTGetMIMETypeInfoIsUnhelpfulType' value='1685417314'/>
<enum name='kQTHFSPathStyle' value='1'/>
<enum name='kQTIdlePriority' value='10'/>
<enum name='kQTIncompatibleDescriptionErr' value='-2166'/>
<enum name='kQTIndexedImageIsLayer' value='1849519225'/>
<enum name='kQTIndexedImageIsMultiResolution' value='1849520755'/>
<enum name='kQTIndexedImageIsPage' value='1849520231'/>
<enum name='kQTIndexedImageIsThumbnail' value='1849521256'/>
<enum name='kQTIndexedImageType' value='1853122623'/>
<enum name='kQTInterlaceStyle' value='1768710499'/>
<enum name='kQTJPEGHuffmanTables' value='1785751668'/>
<enum name='kQTJPEGQuantizationTables' value='1785753972'/>
<enum name='kQTMCActionNotifyAfter' value='2'/>
<enum name='kQTMCActionNotifyBefore' value='1'/>
<enum name='kQTMCActionNotifyCancelled' value='512'/>
<enum name='kQTMCActionNotifyParamChanged' value='256'/>
<enum name='kQTMCActionNotifySignature' value='1852798057'/>
<enum name='kQTMCActionNotifyUserFilterCancelled' value='1024'/>
<enum name='kQTMIDIComponentType' value='1835623529'/>
<enum name='kQTMIDIGetMIDIPortsSelect' value='1'/>
<enum name='kQTMIDISendMIDISelect' value='3'/>
<enum name='kQTMIDIUseSendPortSelect' value='2'/>
<enum name='kQTMLHandlePortEvents' value='1'/>
<enum name='kQTMLNoDoubleBufferPort' value='4'/>
<enum name='kQTMLNoIdleEvents' value='2'/>
<enum name='kQTMSKnobEnv1AttackTimeID' value='33554471'/>
<enum name='kQTMSKnobEnv1DecayTimeID' value='33554472'/>
<enum name='kQTMSKnobEnv1ExpOptionsID' value='33554477'/>
<enum name='kQTMSKnobEnv1ReleaseTimeID' value='33554476'/>
<enum name='kQTMSKnobEnv1SustainInfiniteID' value='33554475'/>
<enum name='kQTMSKnobEnv1SustainLevelID' value='33554473'/>
<enum name='kQTMSKnobEnv1SustainTimeID' value='33554474'/>
<enum name='kQTMSKnobEnv2AttackTimeID' value='33554478'/>
<enum name='kQTMSKnobEnv2DecayTimeID' value='33554479'/>
<enum name='kQTMSKnobEnv2ExpOptionsID' value='33554484'/>
<enum name='kQTMSKnobEnv2ReleaseTimeID' value='33554483'/>
<enum name='kQTMSKnobEnv2SustainInfiniteID' value='33554482'/>
<enum name='kQTMSKnobEnv2SustainLevelID' value='33554480'/>
<enum name='kQTMSKnobEnv2SustainTimeID' value='33554481'/>
<enum name='kQTMSKnobExclusionGroupID' value='33554460'/>
<enum name='kQTMSKnobFilterFrequencyEnvelopeDepthID' value='33554491'/>
<enum name='kQTMSKnobFilterFrequencyEnvelopeID' value='33554490'/>
<enum name='kQTMSKnobFilterKeyFollowID' value='33554487'/>
<enum name='kQTMSKnobFilterQEnvelopeDepthID' value='33554493'/>
<enum name='kQTMSKnobFilterQEnvelopeID' value='33554492'/>
<enum name='kQTMSKnobFilterQID' value='33554489'/>
<enum name='kQTMSKnobFilterTransposeID' value='33554488'/>
<enum name='kQTMSKnobLastIDPlus1' value='33554496'/>
<enum name='kQTMSKnobPitchEnvelopeDepthID' value='33554486'/>
<enum name='kQTMSKnobPitchEnvelopeID' value='33554485'/>
<enum name='kQTMSKnobPitchLFODelayID' value='33554451'/>
<enum name='kQTMSKnobPitchLFODepthFromWheelID' value='33554469'/>
<enum name='kQTMSKnobPitchLFODepthID' value='33554455'/>
<enum name='kQTMSKnobPitchLFOOffsetID' value='33554459'/>
<enum name='kQTMSKnobPitchLFOPeriodID' value='33554453'/>
<enum name='kQTMSKnobPitchLFOQuantizeID' value='33554456'/>
<enum name='kQTMSKnobPitchLFORampTimeID' value='33554452'/>
<enum name='kQTMSKnobPitchLFOShapeID' value='33554454'/>
<enum name='kQTMSKnobPitchSensitivityID' value='33554467'/>
<enum name='kQTMSKnobPitchTransposeID' value='33554450'/>
<enum name='kQTMSKnobReverbThresholdID' value='33554494'/>
<enum name='kQTMSKnobStartID' value='33554432'/>
<enum name='kQTMSKnobStereoDefaultPanID' value='33554457'/>
<enum name='kQTMSKnobStereoPositionKeyScalingID' value='33554458'/>
<enum name='kQTMSKnobSustainInfiniteID' value='33554462'/>
<enum name='kQTMSKnobSustainTimeID' value='33554461'/>
<enum name='kQTMSKnobVelocityHighID' value='33554465'/>
<enum name='kQTMSKnobVelocityLowID' value='33554464'/>
<enum name='kQTMSKnobVelocitySensitivityID' value='33554466'/>
<enum name='kQTMSKnobVolumeAttackTimeID' value='33554433'/>
<enum name='kQTMSKnobVolumeAttackVelScalingID' value='33554495'/>
<enum name='kQTMSKnobVolumeDecayKeyScalingID' value='33554437'/>
<enum name='kQTMSKnobVolumeDecayTimeID' value='33554434'/>
<enum name='kQTMSKnobVolumeExpOptionsID' value='33554470'/>
<enum name='kQTMSKnobVolumeLFODelayID' value='33554439'/>
<enum name='kQTMSKnobVolumeLFODepthFromWheelID' value='33554468'/>
<enum name='kQTMSKnobVolumeLFODepthID' value='33554443'/>
<enum name='kQTMSKnobVolumeLFOPeriodID' value='33554441'/>
<enum name='kQTMSKnobVolumeLFORampTimeID' value='33554440'/>
<enum name='kQTMSKnobVolumeLFOShapeID' value='33554442'/>
<enum name='kQTMSKnobVolumeLFOStereoID' value='33554463'/>
<enum name='kQTMSKnobVolumeOverallID' value='33554444'/>
<enum name='kQTMSKnobVolumeRelease1RateID' value='33554436'/>
<enum name='kQTMSKnobVolumeReleaseTimeID' value='33554438'/>
<enum name='kQTMSKnobVolumeSustainLevelID' value='33554435'/>
<enum name='kQTMSKnobVolumeVelocity127ID' value='33554445'/>
<enum name='kQTMSKnobVolumeVelocity16ID' value='33554449'/>
<enum name='kQTMSKnobVolumeVelocity32ID' value='33554448'/>
<enum name='kQTMSKnobVolumeVelocity64ID' value='33554447'/>
<enum name='kQTMSKnobVolumeVelocity96ID' value='33554446'/>
<enum name='kQTMatrix_ITU_R_601_4' value='6'/>
<enum name='kQTMatrix_ITU_R_709_2' value='1'/>
<enum name='kQTMatrix_SMPTE_240M_1995' value='7'/>
<enum name='kQTMatrix_Unknown' value='2'/>
<enum name='kQTMediaConfigAssociateByDefault' value='134217728'/>
<enum name='kQTMediaConfigAudioGroupID' value='1700885107'/>
<enum name='kQTMediaConfigBinaryFile' value='8388608'/>
<enum name='kQTMediaConfigCanDoFileAssociation' value='67108864'/>
<enum name='kQTMediaConfigCanUseApp' value='262144'/>
<enum name='kQTMediaConfigCanUsePlugin' value='524288'/>
<enum name='kQTMediaConfigDefaultsMask' value='805306368'/>
<enum name='kQTMediaConfigDefaultsShift' value='12'/>
<enum name='kQTMediaConfigHasFileHasQTAtoms' value='1073741824'/>
<enum name='kQTMediaConfigImageGroupID' value='1869048933'/>
<enum name='kQTMediaConfigInteractiveGroupID' value='1768846450'/>
<enum name='kQTMediaConfigMP3GroupID' value='1836069664'/>
<enum name='kQTMediaConfigMPEGGroupID' value='1836082535'/>
<enum name='kQTMediaConfigMacintoshFile' value='16777216'/>
<enum name='kQTMediaConfigMiscGroupID' value='1835627363'/>
<enum name='kQTMediaConfigResourceType' value='1835230823'/>
<enum name='kQTMediaConfigResourceVersion' value='2'/>
<enum name='kQTMediaConfigStreamGroupID' value='1937011309'/>
<enum name='kQTMediaConfigTakeFileAssociationByDefault' value='134217728'/>
<enum name='kQTMediaConfigTextFile' value='0'/>
<enum name='kQTMediaConfigUNUSED' value='1048576'/>
<enum name='kQTMediaConfigUseAppByDefault' value='268435456'/>
<enum name='kQTMediaConfigUsePluginByDefault' value='536870912'/>
<enum name='kQTMediaConfigVideoGroupID' value='1702454643'/>
<enum name='kQTMediaDoesNotSupportDisplayOffsetsErr' value='-9460'/>
<enum name='kQTMediaFileInfoHasChanged' value='4'/>
<enum name='kQTMediaGroupResourceType' value='1835496048'/>
<enum name='kQTMediaGroupResourceVersion' value='1'/>
<enum name='kQTMediaHasDisplayOffsetsErr' value='-9461'/>
<enum name='kQTMediaInfoMacGroup' value='1835098912'/>
<enum name='kQTMediaInfoMiscGroup' value='1061109567'/>
<enum name='kQTMediaInfoNetGroup' value='1852142624'/>
<enum name='kQTMediaInfoWinGroup' value='2003398176'/>
<enum name='kQTMediaMIMEInfoHasChanged' value='2'/>
<enum name='kQTMessageCommandNotSupportedErr' value='-2196'/>
<enum name='kQTMessageNoSuchParameterErr' value='-2197'/>
<enum name='kQTMessageNotHandledErr' value='-2194'/>
<enum name='kQTMetaData' value='1835365473'/>
<enum name='kQTMetaDataCommonKeyAlbum' value='1634493037'/>
<enum name='kQTMetaDataCommonKeyArtist' value='1634890867'/>
<enum name='kQTMetaDataCommonKeyArtwork' value='1634890871'/>
<enum name='kQTMetaDataCommonKeyAuthor' value='1635087464'/>
<enum name='kQTMetaDataCommonKeyChapterName' value='1667785072'/>
<enum name='kQTMetaDataCommonKeyComment' value='1668115828'/>
<enum name='kQTMetaDataCommonKeyComposer' value='1668246896'/>
<enum name='kQTMetaDataCommonKeyCopyright' value='1668313716'/>
<enum name='kQTMetaDataCommonKeyDescription' value='1684370275'/>
<enum name='kQTMetaDataCommonKeyDirector' value='1685352306'/>
<enum name='kQTMetaDataCommonKeyDisplayName' value='1851878757'/>
<enum name='kQTMetaDataCommonKeyGenre' value='1734700658'/>
<enum name='kQTMetaDataCommonKeyInformation' value='1768842863'/>
<enum name='kQTMetaDataCommonKeyKeywords' value='1801812343'/>
<enum name='kQTMetaDataCommonKeyOriginalFormat' value='1869769062'/>
<enum name='kQTMetaDataCommonKeyOriginalSource' value='1869769075'/>
<enum name='kQTMetaDataCommonKeyPerformers' value='1885696614'/>
<enum name='kQTMetaDataCommonKeyProducer' value='1886547812'/>
<enum name='kQTMetaDataCommonKeySoftware' value='1936680564'/>
<enum name='kQTMetaDataCommonKeyWriter' value='2003989618'/>
<enum name='kQTMetaDataInvalidItemErr' value='-2174'/>
<enum name='kQTMetaDataInvalidKeyFormatErr' value='-2176'/>
<enum name='kQTMetaDataInvalidMetaDataErr' value='-2173'/>
<enum name='kQTMetaDataInvalidStorageFormatErr' value='-2175'/>
<enum name='kQTMetaDataItemPropertyID_DataType' value='1685354864'/>
<enum name='kQTMetaDataItemPropertyID_Key' value='1801812256'/>
<enum name='kQTMetaDataItemPropertyID_KeyFormat' value='1801812326'/>
<enum name='kQTMetaDataItemPropertyID_Locale' value='1819239200'/>
<enum name='kQTMetaDataItemPropertyID_StorageFormat' value='1936092532'/>
<enum name='kQTMetaDataItemPropertyID_Value' value='1986096245'/>
<enum name='kQTMetaDataItemUninitialized' value='0'/>
<enum name='kQTMetaDataKeyFormatCommon' value='1668246894'/>
<enum name='kQTMetaDataKeyFormatQuickTime' value='1835299937'/>
<enum name='kQTMetaDataKeyFormatUserData' value='1969517665'/>
<enum name='kQTMetaDataKeyFormatWildcard' value='0'/>
<enum name='kQTMetaDataKeyFormatiTunesLongForm' value='1769237611'/>
<enum name='kQTMetaDataKeyFormatiTunesShortForm' value='1769239403'/>
<enum name='kQTMetaDataNoMoreItemsErr' value='-2177'/>
<enum name='kQTMetaDataPropertyID_Owner' value='1870098034'/>
<enum name='kQTMetaDataPropertyID_OwnerType' value='1870098036'/>
<enum name='kQTMetaDataPropertyID_StorageFormats' value='1718449267'/>
<enum name='kQTMetaDataStorageFormatQuickTime' value='1835299937'/>
<enum name='kQTMetaDataStorageFormatUserData' value='1969517665'/>
<enum name='kQTMetaDataStorageFormatWildcard' value='0'/>
<enum name='kQTMetaDataStorageFormatiTunes' value='1769237875'/>
<enum name='kQTMetaDataTypeBMPImage' value='27'/>
<enum name='kQTMetaDataTypeBinary' value='0'/>
<enum name='kQTMetaDataTypeFloat32BE' value='23'/>
<enum name='kQTMetaDataTypeFloat64BE' value='24'/>
<enum name='kQTMetaDataTypeJPEGImage' value='13'/>
<enum name='kQTMetaDataTypeMacEncodedText' value='3'/>
<enum name='kQTMetaDataTypePNGImage' value='14'/>
<enum name='kQTMetaDataTypeQuickTimeMetaData' value='28'/>
<enum name='kQTMetaDataTypeSignedIntegerBE' value='21'/>
<enum name='kQTMetaDataTypeUTF16BE' value='2'/>
<enum name='kQTMetaDataTypeUTF8' value='1'/>
<enum name='kQTMetaDataTypeUnsignedIntegerBE' value='22'/>
<enum name='kQTMovieAudioExtractionAudioPropertyID_AudioChannelLayout' value='1668047225'/>
<enum name='kQTMovieAudioExtractionAudioPropertyID_AudioStreamBasicDescription' value='1634951780'/>
<enum name='kQTMovieAudioExtractionAudioPropertyID_RegisterMovieInsert' value='1919248237'/>
<enum name='kQTMovieAudioExtractionAudioPropertyID_RegisterTrackInsert' value='1919248244'/>
<enum name='kQTMovieAudioExtractionAudioPropertyID_RemainingAudioDuration' value='1685418593'/>
<enum name='kQTMovieAudioExtractionAudioPropertyID_RenderQuality' value='1903518060'/>
<enum name='kQTMovieAudioExtractionComplete' value='1'/>
<enum name='kQTMovieAudioExtractionMoviePropertyID_AllChannelsDiscrete' value='1684632419'/>
<enum name='kQTMovieAudioExtractionMoviePropertyID_CurrentTime' value='1953066341'/>
<enum name='kQTMovieExportSourceInfoIsMediaCharacteristic' value='2'/>
<enum name='kQTMovieExportSourceInfoIsMediaType' value='1'/>
<enum name='kQTMovieExportSourceInfoIsSourceType' value='4'/>
<enum name='kQTMovieExportSourceInfoResourceType' value='1936876323'/>
<enum name='kQTMovieExportStage_AllTracksAddedToMovie' value='1953653112'/>
<enum name='kQTMovieExportStage_EmptyMovieCreated' value='1701671028'/>
<enum name='kQTMovieExporterPropertyID_DeinterlaceVideo' value='1684631156'/>
<enum name='kQTMovieExporterPropertyID_EnableHighResolutionAudioFeatures' value='1752326517'/>
<enum name='kQTMovieExporterPropertyID_StageReachedCallback' value='1937008498'/>
<enum name='kQTMovieImporterPropertyID_AllowMediaOptimization' value='1634561904'/>
<enum name='kQTMovieInstantiationPropertyID_AllowMediaOptimization' value='1634561904'/>
<enum name='kQTMovieInstantiationPropertyID_AsyncOK' value='1634955115'/>
<enum name='kQTMovieInstantiationPropertyID_DontAskUnresolvedDataRefs' value='1635086958'/>
<enum name='kQTMovieInstantiationPropertyID_DontAutoAlternates' value='1633774702'/>
<enum name='kQTMovieInstantiationPropertyID_DontAutoUpdateClock' value='1635083116'/>
<enum name='kQTMovieInstantiationPropertyID_DontResolveDataRefs' value='1919185518'/>
<enum name='kQTMovieInstantiationPropertyID_DontUpdateForeBackPointers' value='1717727342'/>
<enum name='kQTMovieInstantiationPropertyID_IdleImportOK' value='1768779627'/>
<enum name='kQTMovieInstantiationPropertyID_ResultDataLocationChanged' value='1684824936'/>
<enum name='kQTMovieResourceLocatorPropertyID_Callback' value='1667329122'/>
<enum name='kQTMovieResourceLocatorPropertyID_FileOffset' value='1718576742'/>
<enum name='kQTMovieResourceLocatorPropertyID_LegacyResID' value='1919253097'/>
<enum name='kQTMovieResourceLocatorPropertyID_LegacyResName' value='1919253102'/>
<enum name='kQTNativeDefaultPathStyle' value='-1'/>
<enum name='kQTNetworkStatusConnected' value='1'/>
<enum name='kQTNetworkStatusNoNetwork' value='-2'/>
<enum name='kQTNetworkStatusNotConnected' value='0'/>
<enum name='kQTNetworkStatusUncertain' value='-1'/>
<enum name='kQTNewMoviePropertyID_Active' value='1633907830'/>
<enum name='kQTNewMoviePropertyID_DefaultDataRef' value='1684304486'/>
<enum name='kQTNewMoviePropertyID_DontInteractWithUser' value='1768846446'/>
<enum name='kQTNonRealTimePriority' value='20'/>
<enum name='kQTObsoleteLPCMSoundFormatErr' value='-2171'/>
<enum name='kQTPNGFilterAdaptivePerRow' value='1634102388'/>
<enum name='kQTPNGFilterAverage' value='3'/>
<enum name='kQTPNGFilterBestForColorType' value='1650879604'/>
<enum name='kQTPNGFilterNone' value='0'/>
<enum name='kQTPNGFilterPaeth' value='4'/>
<enum name='kQTPNGFilterPreference' value='1886283622'/>
<enum name='kQTPNGFilterSub' value='1'/>
<enum name='kQTPNGFilterUp' value='2'/>
<enum name='kQTPNGInterlaceAdam7' value='1'/>
<enum name='kQTPNGInterlaceNone' value='0'/>
<enum name='kQTPNGInterlaceStyle' value='1768710499'/>
<enum name='kQTPOSIXPathStyle' value='0'/>
<enum name='kQTParseTextHREFBaseURL' value='1651864172'/>
<enum name='kQTParseTextHREFChapter' value='1667785072'/>
<enum name='kQTParseTextHREFClickPoint' value='1668049259'/>
<enum name='kQTParseTextHREFDelimiter' value='1684368493'/>
<enum name='kQTParseTextHREFEMBEDArgs' value='1835165028'/>
<enum name='kQTParseTextHREFHREF' value='1752327526'/>
<enum name='kQTParseTextHREFIsAutoHREF' value='1635087471'/>
<enum name='kQTParseTextHREFIsServerMap' value='1936548208'/>
<enum name='kQTParseTextHREFRecomposeHREF' value='1919447654'/>
<enum name='kQTParseTextHREFTarget' value='1952543335'/>
<enum name='kQTParseTextHREFText' value='1952807028'/>
<enum name='kQTParseTextHREFURL' value='1970433056'/>
<enum name='kQTParseTextHREFUseAltDelim' value='1634497636'/>
<enum name='kQTPerformancePropertyID_AudioIOOverloadCount' value='1870029684'/>
<enum name='kQTPerformancePropertyID_MediaStallCount' value='1937006956'/>
<enum name='kQTPhotoDefineHuffmanTableSelect' value='258'/>
<enum name='kQTPhotoDefineQuantizationTableSelect' value='259'/>
<enum name='kQTPhotoSetRestartIntervalSelect' value='257'/>
<enum name='kQTPhotoSetSamplingSelect' value='256'/>
<enum name='kQTPhotoshopLayerClipping' value='1818455152'/>
<enum name='kQTPhotoshopLayerFlags' value='1818651751'/>
<enum name='kQTPhotoshopLayerMode' value='1819111268'/>
<enum name='kQTPhotoshopLayerName' value='-1452511635'/>
<enum name='kQTPhotoshopLayerOpacity' value='1819242593'/>
<enum name='kQTPhotoshopLayerUnicodeName' value='1819635305'/>
<enum name='kQTPreFlightOpenComponent' value='2'/>
<enum name='kQTPresetInfoIsDivider' value='1'/>
<enum name='kQTPresetsListResourceType' value='1937008419'/>
<enum name='kQTPresetsPlatformListResourceType' value='1937008496'/>
<enum name='kQTPrimaries_EBU_3213' value='5'/>
<enum name='kQTPrimaries_ITU_R709_2' value='1'/>
<enum name='kQTPrimaries_SMPTE_C' value='6'/>
<enum name='kQTPrimaries_Unknown' value='2'/>
<enum name='kQTPropertyArrayElementUnprocessedErr' value='-9465'/>
<enum name='kQTPropertyAskLaterErr' value='-2200'/>
<enum name='kQTPropertyBadValueSizeErr' value='-2184'/>
<enum name='kQTPropertyClass_Audio' value='1635083369'/>
<enum name='kQTPropertyClass_Context' value='1668577396'/>
<enum name='kQTPropertyClass_DRM' value='1685220640'/>
<enum name='kQTPropertyClass_DVCompressor' value='1685480303'/>
<enum name='kQTPropertyClass_DataLocation' value='1684828003'/>
<enum name='kQTPropertyClass_ICMCompressionFrameOptions' value='1768121967'/>
<enum name='kQTPropertyClass_ICMCompressionSession' value='1768125285'/>
<enum name='kQTPropertyClass_ICMCompressionSessionOptions' value='1768125295'/>
<enum name='kQTPropertyClass_ICMDecompressionFrameOptions' value='1768187503'/>
<enum name='kQTPropertyClass_ICMDecompressionSession' value='1768121459'/>
<enum name='kQTPropertyClass_ICMDecompressionSessionOptions' value='1768190831'/>
<enum name='kQTPropertyClass_ImageCompressor' value='1768776559'/>
<enum name='kQTPropertyClass_ImageDescription' value='1768190819'/>
<enum name='kQTPropertyClass_MovieAudioExtraction_Audio' value='2019652964'/>
<enum name='kQTPropertyClass_MovieAudioExtraction_Movie' value='2020437878'/>
<enum name='kQTPropertyClass_MovieExporter' value='1936746868'/>
<enum name='kQTPropertyClass_MovieImporter' value='1700885536'/>
<enum name='kQTPropertyClass_MovieInstantiation' value='1835626099'/>
<enum name='kQTPropertyClass_MovieResourceLocator' value='1919709027'/>
<enum name='kQTPropertyClass_NewMovieProperty' value='1836085872'/>
<enum name='kQTPropertyClass_Performance' value='1885696614'/>
<enum name='kQTPropertyClass_SCAudio' value='1935893601'/>
<enum name='kQTPropertyClass_SGAudio' value='1635083375'/>
<enum name='kQTPropertyClass_SGAudioPreviewDevice' value='1635083376'/>
<enum name='kQTPropertyClass_SGAudioRecordDevice' value='1635083378'/>
<enum name='kQTPropertyClass_SampleTable' value='1903457140'/>
<enum name='kQTPropertyClass_SoundDescription' value='1935959411'/>
<enum name='kQTPropertyClass_Visual' value='1986622325'/>
<enum name='kQTPropertyNotSupportedErr' value='-2195'/>
<enum name='kQTPropertyReadOnlyErr' value='-2191'/>
<enum name='kQTQuartzComposerMediaType' value='1903458848'/>
<enum name='kQTRealTimePriority' value='30'/>
<enum name='kQTRealTimeSharedPriority' value='25'/>
<enum name='kQTRegistrationDialogForceDialog' value='4'/>
<enum name='kQTRegistrationDialogShowDialog' value='2'/>
<enum name='kQTRegistrationDialogTimeOutFlag' value='1'/>
<enum name='kQTRemoveComponentPropertyListenerSelect' value='-15'/>
<enum name='kQTResolutionSettings' value='1919251311'/>
<enum name='kQTRestrictionClassEdit' value='1701079412'/>
<enum name='kQTRestrictionClassPlay' value='1886151033'/>
<enum name='kQTRestrictionClassSave' value='1935767141'/>
<enum name='kQTRestrictionEditDontClear' value='8'/>
<enum name='kQTRestrictionEditDontCopy' value='1'/>
<enum name='kQTRestrictionEditDontCut' value='2'/>
<enum name='kQTRestrictionEditDontExtract' value='32'/>
<enum name='kQTRestrictionEditDontModify' value='16'/>
<enum name='kQTRestrictionEditDontPaste' value='4'/>
<enum name='kQTRestrictionPlayDontPlay' value='1'/>
<enum name='kQTRestrictionSaveDontAddMovieResource' value='1'/>
<enum name='kQTRestrictionSaveDontExport' value='4'/>
<enum name='kQTRestrictionSaveDontExtract' value='8'/>
<enum name='kQTRestrictionSaveDontFlatten' value='2'/>
<enum name='kQTRowBytesImageDescriptionExtension' value='1919907682'/>
<enum name='kQTSAliasDataType' value='1634494835'/>
<enum name='kQTSAllStatisticsType' value='1634495520'/>
<enum name='kQTSAnnotationsChangedNotification' value='1835365473'/>
<enum name='kQTSAnnotationsInfo' value='1835365473'/>
<enum name='kQTSAtEnd' value='16'/>
<enum name='kQTSAtomContainerDataType' value='1903452515'/>
<enum name='kQTSAtomDataType' value='1903452532'/>
<enum name='kQTSAtomType_BufferTime' value='1651861106'/>
<enum name='kQTSAtomType_ClipRect' value='1668049264'/>
<enum name='kQTSAtomType_Duration' value='1685418593'/>
<enum name='kQTSAtomType_MediaDescriptionText' value='1835296115'/>
<enum name='kQTSAtomType_MediaStream' value='1836282994'/>
<enum name='kQTSAtomType_MediaStreamHeader' value='1836279908'/>
<enum name='kQTSAtomType_Presentation' value='1886545267'/>
<enum name='kQTSAtomType_PresentationHeader' value='1885889650'/>
<enum name='kQTSAutoConfiguringStatus' value='15'/>
<enum name='kQTSAutoModeFlag' value='1'/>
<enum name='kQTSBandwidthAlertNeedToStop' value='1'/>
<enum name='kQTSBandwidthAlertNotification' value='1651990892'/>
<enum name='kQTSBandwidthAlertRestartAt' value='2'/>
<enum name='kQTSBufferingStatus' value='12'/>
<enum name='kQTSBufferingWithTimeStatus' value='17'/>
<enum name='kQTSCAudioPropertyID_ApplicableChannelLayoutTagList' value='1634757667'/>
<enum name='kQTSCAudioPropertyID_ApplicableChannelLayoutTagNamesList' value='1886154275'/>
<enum name='kQTSCAudioPropertyID_ApplicableLPCMBitsPerChannelList' value='1634755107'/>
<enum name='kQTSCAudioPropertyID_ApplicableSampleRateList' value='1634759203'/>
<enum name='kQTSCAudioPropertyID_AvailableChannelLayoutTagList' value='1635150883'/>
<enum name='kQTSCAudioPropertyID_AvailableChannelLayoutTagNamesList' value='1986817571'/>
<enum name='kQTSCAudioPropertyID_AvailableCompressionFormatList' value='1633904163'/>
<enum name='kQTSCAudioPropertyID_AvailableCompressionFormatNamesList' value='1668181283'/>
<enum name='kQTSCAudioPropertyID_AvailableLPCMBitsPerChannelList' value='1635148323'/>
<enum name='kQTSCAudioPropertyID_AvailableSampleRateList' value='1635152419'/>
<enum name='kQTSCAudioPropertyID_BasicDescription' value='1869832804'/>
<enum name='kQTSCAudioPropertyID_BitRate' value='1651663220'/>
<enum name='kQTSCAudioPropertyID_ChannelLayout' value='1668047225'/>
<enum name='kQTSCAudioPropertyID_ChannelLayoutName' value='1668053358'/>
<enum name='kQTSCAudioPropertyID_ClientRestrictedChannelLayoutTagList' value='1668443171'/>
<enum name='kQTSCAudioPropertyID_ClientRestrictedCompressionFormatList' value='1668441635'/>
<enum name='kQTSCAudioPropertyID_ClientRestrictedLPCMBitsPerChannelList' value='1668440611'/>
<enum name='kQTSCAudioPropertyID_ClientRestrictedLPCMFlags' value='1668443248'/>
<enum name='kQTSCAudioPropertyID_ClientRestrictedSampleRateList' value='1668444707'/>
<enum name='kQTSCAudioPropertyID_CodecSpecificSettingsArray' value='1667527540'/>
<enum name='kQTSCAudioPropertyID_ConstantBitRateFormatsOnly' value='561406578'/>
<enum name='kQTSCAudioPropertyID_ExtendedProcs' value='2020635235'/>
<enum name='kQTSCAudioPropertyID_HasLegacyCodecOptionsDialog' value='1869639231'/>
<enum name='kQTSCAudioPropertyID_InputBasicDescription' value='1769169508'/>
<enum name='kQTSCAudioPropertyID_InputChannelLayout' value='1768123513'/>
<enum name='kQTSCAudioPropertyID_InputChannelLayoutName' value='1768123502'/>
<enum name='kQTSCAudioPropertyID_InputMagicCookie' value='1768647529'/>
<enum name='kQTSCAudioPropertyID_InputSoundDescription' value='1769170024'/>
<enum name='kQTSCAudioPropertyID_MagicCookie' value='1802857321'/>
<enum name='kQTSCAudioPropertyID_MaximumOutputPacketSize' value='2020569203'/>
<enum name='kQTSCAudioPropertyID_OutputFormatIsExternallyFramed' value='1717925990'/>
<enum name='kQTSCAudioPropertyID_PreferenceFlags' value='1886545254'/>
<enum name='kQTSCAudioPropertyID_PreviewSourceMovie' value='1886547318'/>
<enum name='kQTSCAudioPropertyID_PreviewSourceTrack' value='1886549099'/>
<enum name='kQTSCAudioPropertyID_RenderQuality' value='1902933113'/>
<enum name='kQTSCAudioPropertyID_SampleRateIsRecommended' value='1919247215'/>
<enum name='kQTSCAudioPropertyID_SettingsState' value='1936946273'/>
<enum name='kQTSCAudioPropertyID_SoundDescription' value='1869833320'/>
<enum name='kQTSCAudioPropertyID_WindowOptions' value='1936221541'/>
<enum name='kQTSCanHandleSendDataType' value='1667789668'/>
<enum name='kQTSConnectingStatus' value='2'/>
<enum name='kQTSConnectionAtomType' value='1668247150'/>
<enum name='kQTSConnectionMethodPrefsType' value='1836345444'/>
<enum name='kQTSConnectionPrefsType' value='1937007469'/>
<enum name='kQTSConnectionPrefsVersion' value='1986359923'/>
<enum name='kQTSDataProcParamsVersion1' value='1'/>
<enum name='kQTSDataProcSelector_SampleData' value='1935764848'/>
<enum name='kQTSDataProcSelector_UserData' value='1970496882'/>
<enum name='kQTSDataProcType_HintSample' value='1751740020'/>
<enum name='kQTSDataProcType_MediaSample' value='1835297121'/>
<enum name='kQTSDataRefDataType' value='1685218662'/>
<enum name='kQTSDefaultMediaTimeScale' value='600'/>
<enum name='kQTSDidDraw' value='1'/>
<enum name='kQTSDirectConnectHTTPProtocol' value='1752462448'/>
<enum name='kQTSDirectConnectPrefsType' value='1685218164'/>
<enum name='kQTSDirectConnectRTSPProtocol' value='1920234352'/>
<enum name='kQTSDontGetDataStatisticsFlag' value='2'/>
<enum name='kQTSDontProxyDataType' value='1684108385'/>
<enum name='kQTSDontProxyPrefsAtomType' value='1852797042'/>
<enum name='kQTSDontShowStatusFlag' value='8'/>
<enum name='kQTSDownloadingStatus' value='16'/>
<enum name='kQTSDrawAgain' value='8'/>
<enum name='kQTSDuplicateBufferFlag_CopyData' value='1'/>
<enum name='kQTSDuplicateBufferFlag_FlattenMessage' value='2'/>
<enum name='kQTSDurationInfo' value='1685418593'/>
<enum name='kQTSDurationNotification' value='1685418593'/>
<enum name='kQTSEmptyEditStreamStartTime' value='-1'/>
<enum name='kQTSErrorNotification' value='1701999136'/>
<enum name='kQTSExportFlag_ShowDialog' value='1'/>
<enum name='kQTSExportParamsVersion1' value='1'/>
<enum name='kQTSFatalErrorFlag' value='1'/>
<enum name='kQTSFileDataType' value='1718841443'/>
<enum name='kQTSFileSpecDataType' value='1718841443'/>
<enum name='kQTSGAudioPropertyID_AveragePowerLevels' value='1634757750'/>
<enum name='kQTSGAudioPropertyID_ChannelLayout' value='1668047225'/>
<enum name='kQTSGAudioPropertyID_ChannelMap' value='1668112752'/>
<enum name='kQTSGAudioPropertyID_ChunkSize' value='1667788395'/>
<enum name='kQTSGAudioPropertyID_CodecSpecificSettingsArray' value='1667527540'/>
<enum name='kQTSGAudioPropertyID_DeviceAlive' value='1634494838'/>
<enum name='kQTSGAudioPropertyID_DeviceAttributes' value='1684371041'/>
<enum name='kQTSGAudioPropertyID_DeviceHogged' value='1752131431'/>
<enum name='kQTSGAudioPropertyID_DeviceInUse' value='1970496868'/>
<enum name='kQTSGAudioPropertyID_DeviceListWithAttributes' value='593786465'/>
<enum name='kQTSGAudioPropertyID_DeviceUID' value='1969841184'/>
<enum name='kQTSGAudioPropertyID_GainScalarToDecibels' value='1735615586'/>
<enum name='kQTSGAudioPropertyID_HardwarePlaythruEnabled' value='1751216740'/>
<enum name='kQTSGAudioPropertyID_InputListWithAttributes' value='594112112'/>
<enum name='kQTSGAudioPropertyID_InputSelection' value='1768845428'/>
<enum name='kQTSGAudioPropertyID_LevelMetersEnabled' value='1819108724'/>
<enum name='kQTSGAudioPropertyID_MagicCookie' value='1802857321'/>
<enum name='kQTSGAudioPropertyID_MasterGain' value='1835491694'/>
<enum name='kQTSGAudioPropertyID_MixerCoefficients' value='1835628643'/>
<enum name='kQTSGAudioPropertyID_OutputListWithAttributes' value='594506864'/>
<enum name='kQTSGAudioPropertyID_OutputSelection' value='1869901940'/>
<enum name='kQTSGAudioPropertyID_PeakHoldLevels' value='1885891702'/>
<enum name='kQTSGAudioPropertyID_PerChannelGain' value='1667719534'/>
<enum name='kQTSGAudioPropertyID_PostConversionCallback' value='1668702051'/>
<enum name='kQTSGAudioPropertyID_PostConversionCallbackFormat' value='1667195750'/>
<enum name='kQTSGAudioPropertyID_PostMixCallback' value='1836605283'/>
<enum name='kQTSGAudioPropertyID_PostMixCallbackFormat' value='1834967910'/>
<enum name='kQTSGAudioPropertyID_PreConversionCallback' value='1600353891'/>
<enum name='kQTSGAudioPropertyID_PreConversionCallbackFormat' value='1600349030'/>
<enum name='kQTSGAudioPropertyID_PreMixCallback' value='1601009763'/>
<enum name='kQTSGAudioPropertyID_PreMixCallbackFormat' value='1601004390'/>
<enum name='kQTSGAudioPropertyID_Settings' value='1936028789'/>
<enum name='kQTSGAudioPropertyID_SoftPreviewLatency' value='1936482676'/>
<enum name='kQTSGAudioPropertyID_SoundDescription' value='1936614515'/>
<enum name='kQTSGAudioPropertyID_StreamFormat' value='1718775156'/>
<enum name='kQTSGAudioPropertyID_StreamFormatList' value='593916525'/>
<enum name='kQTSGetNameStatisticsFlag' value='1'/>
<enum name='kQTSGetURLLink' value='1735748716'/>
<enum name='kQTSGetUnitsStatisticsFlag' value='8'/>
<enum name='kQTSGettingDescriptionDetailedStatus' value='6'/>
<enum name='kQTSGotDescriptionDetailedStatus' value='7'/>
<enum name='kQTSHTTPProxyPrefsType' value='1752462448'/>
<enum name='kQTSHTTPTransportType' value='1752462448'/>
<enum name='kQTSHandleDataType' value='1752065132'/>
<enum name='kQTSHintMediaType' value='1751740020'/>
<enum name='kQTSHintTrackReference' value='1751740020'/>
<enum name='kQTSInfiniteDuration' value='2147483647'/>
<enum name='kQTSInfo_AudioAutoGainOnOff' value='1634165536'/>
<enum name='kQTSInfo_AudioGain' value='1734437230'/>
<enum name='kQTSInfo_Authentication' value='1635087728'/>
<enum name='kQTSInfo_AverageFrameRate' value='1718645536'/>
<enum name='kQTSInfo_CodecFlags' value='1667656807'/>
<enum name='kQTSInfo_CodecSettings' value='1667523939'/>
<enum name='kQTSInfo_CompressionList' value='1668577644'/>
<enum name='kQTSInfo_CompressionParams' value='1935893360'/>
<enum name='kQTSInfo_CroppedInputRect' value='1668444274'/>
<enum name='kQTSInfo_DataProc' value='1684108400'/>
<enum name='kQTSInfo_DataRateSettings' value='1685217652'/>
<enum name='kQTSInfo_ForceKeyValue' value='1802725741'/>
<enum name='kQTSInfo_FullInputRect' value='1718971506'/>
<enum name='kQTSInfo_HintTrackID' value='1752459620'/>
<enum name='kQTSInfo_InputDeviceName' value='1768844909'/>
<enum name='kQTSInfo_InputSourceName' value='1936879213'/>
<enum name='kQTSInfo_Loop' value='1819242352'/>
<enum name='kQTSInfo_MediaPacketizer' value='1919774827'/>
<enum name='kQTSInfo_PreviewWhileRecordingMode' value='1936879730'/>
<enum name='kQTSInfo_PushData' value='1886745448'/>
<enum name='kQTSInfo_SGChannel' value='1936155496'/>
<enum name='kQTSInfo_SGChannelDeviceInput' value='1935960425'/>
<enum name='kQTSInfo_SGChannelDeviceList' value='1936876652'/>
<enum name='kQTSInfo_SGChannelDeviceName' value='1768844909'/>
<enum name='kQTSInfo_SGChannelInputName' value='1936879213'/>
<enum name='kQTSInfo_SGChannelSettings' value='1936028519'/>
<enum name='kQTSInfo_SendDataExtras' value='1684371572'/>
<enum name='kQTSInfo_SettingsText' value='1937011832'/>
<enum name='kQTSInfo_SoundChannelCount' value='1936941923'/>
<enum name='kQTSInfo_SoundCompression' value='1936941940'/>
<enum name='kQTSInfo_SoundSampleRate' value='1936945780'/>
<enum name='kQTSInfo_SoundSampleSize' value='1936946035'/>
<enum name='kQTSInfo_SourcerCallbackProc' value='1935893104'/>
<enum name='kQTSInfo_SourcerTiming' value='1937009005'/>
<enum name='kQTSInfo_SpatialSettings' value='1936749676'/>
<enum name='kQTSInfo_TargetDataRate' value='1952739956'/>
<enum name='kQTSInfo_TargetFrameRate' value='1952870515'/>
<enum name='kQTSInfo_TemporalSettings' value='1953526380'/>
<enum name='kQTSInfo_TimeScale' value='1935892844'/>
<enum name='kQTSInfo_Track' value='1953653099'/>
<enum name='kQTSInfo_URL' value='1970433056'/>
<enum name='kQTSInfo_VideoBrightness' value='1651665268'/>
<enum name='kQTSInfo_VideoContrast' value='1953657716'/>
<enum name='kQTSInfo_VideoHue' value='1752524064'/>
<enum name='kQTSInfo_VideoSaturation' value='1935766642'/>
<enum name='kQTSInfo_VideoSharpness' value='1936224880'/>
<enum name='kQTSInstantOnFlag_Enable' value='1'/>
<enum name='kQTSInstantOnFlag_Permitted' value='2'/>
<enum name='kQTSInstantOnPrefsAtomType' value='1768845166'/>
<enum name='kQTSInvalidStatHelper' value='0'/>
<enum name='kQTSLoopFlag_Loop' value='1'/>
<enum name='kQTSLoopParamsVersion1' value='1'/>
<enum name='kQTSLostPercentInfo' value='1819304820'/>
<enum name='kQTSMadeConnectionDetailedStatus' value='4'/>
<enum name='kQTSMediaGetIndStreamInfoSelect' value='259'/>
<enum name='kQTSMediaGetInfoSelect' value='257'/>
<enum name='kQTSMediaIndSampleDescriptionInfo' value='1769170019'/>
<enum name='kQTSMediaLostPercentInfo' value='1819504739'/>
<enum name='kQTSMediaNotificationInfo' value='1852798057'/>
<enum name='kQTSMediaNumStreamsInfo' value='1853060210'/>
<enum name='kQTSMediaPresentationInfo' value='1886545267'/>
<enum name='kQTSMediaSetIndStreamInfoSelect' value='258'/>
<enum name='kQTSMediaSetInfoSelect' value='256'/>
<enum name='kQTSMediaTotalDataRateInfo' value='1685353076'/>
<enum name='kQTSMediaTypeInfo' value='1836349808'/>
<enum name='kQTSMemAllocAllocatedInSystemMem' value='2'/>
<enum name='kQTSMemAllocAllocatedInTempMem' value='1'/>
<enum name='kQTSMemAllocClearMem' value='1'/>
<enum name='kQTSMemAllocDontUseSystemMem' value='8'/>
<enum name='kQTSMemAllocDontUseTempMem' value='2'/>
<enum name='kQTSMemAllocHoldMemory' value='4096'/>
<enum name='kQTSMemAllocIsInterruptTime' value='16842752'/>
<enum name='kQTSMemAllocTrySystemMemFirst' value='16'/>
<enum name='kQTSMemAllocTryTempMemFirst' value='4'/>
<enum name='kQTSMinStatusDimensionsInfo' value='1836282980'/>
<enum name='kQTSMovieTrackSourcerType' value='1953653099'/>
<enum name='kQTSMustDraw' value='8'/>
<enum name='kQTSNameInfo' value='1851878757'/>
<enum name='kQTSNeedsToDraw' value='4'/>
<enum name='kQTSNegotiatingStatus' value='5'/>
<enum name='kQTSNetworkAppNameIsFullNameFlag' value='1'/>
<enum name='kQTSNetworkIDStringStat' value='1852400755'/>
<enum name='kQTSNewPresDetectedNotification' value='1852143472'/>
<enum name='kQTSNewPresentationNotification' value='1852863091'/>
<enum name='kQTSNewStreamNotification' value='1937010295'/>
<enum name='kQTSNormalForwardRate' value='65536'/>
<enum name='kQTSNormalStatusDimensionsInfo' value='1853060196'/>
<enum name='kQTSNullDataType' value='1314212940'/>
<enum name='kQTSNullNotification' value='1853189228'/>
<enum name='kQTSNullStatus' value='0'/>
<enum name='kQTSNumViewersInfo' value='1853254007'/>
<enum name='kQTSOpeningConnectionDetailedStatus' value='3'/>
<enum name='kQTSPartialDraw' value='16'/>
<enum name='kQTSPausedStatus' value='14'/>
<enum name='kQTSPlayingStatus' value='13'/>
<enum name='kQTSPreflightDraw' value='32'/>
<enum name='kQTSPrerollAckNotification' value='1885430635'/>
<enum name='kQTSPresBeginChangingNotification' value='1886544738'/>
<enum name='kQTSPresDoneChangingNotification' value='1886544740'/>
<enum name='kQTSPresHeaderDataIsHandle' value='512'/>
<enum name='kQTSPresHeaderTypeIsData' value='256'/>
<enum name='kQTSPresParamsVersion1' value='1'/>
<enum name='kQTSPresentationChangedNotification' value='1886544744'/>
<enum name='kQTSPresentationDoneNotification' value='1885630318'/>
<enum name='kQTSPresentationGoneNotification' value='2020635251'/>
<enum name='kQTSPreviewAckNotification' value='1886806379'/>
<enum name='kQTSProxyPrefsAtomType' value='1886550137'/>
<enum name='kQTSProxyUserInfoPrefsType' value='1970496882'/>
<enum name='kQTSPushDataFlag_DurationIsValid' value='2'/>
<enum name='kQTSPushDataFlag_SampleTimeIsValid' value='1'/>
<enum name='kQTSPushDataParamsVersion1' value='1'/>
<enum name='kQTSPushDataSourcerCallback_GetInfo' value='1288'/>
<enum name='kQTSPushDataSourcerCallback_HasCharacteristic' value='1293'/>
<enum name='kQTSPushDataSourcerCallback_SetInfo' value='1287'/>
<enum name='kQTSPushDataSourcerFlag_SampleTimeIsValid' value='-2147483648'/>
<enum name='kQTSPushDataSourcerType' value='1886745448'/>
<enum name='kQTSRTSPDataType' value='1920234352'/>
<enum name='kQTSRTSPProxyPrefsType' value='1920234352'/>
<enum name='kQTSReceiveMediaFlag' value='131072'/>
<enum name='kQTSReceivedPlayResponseDetailedStatus' value='11'/>
<enum name='kQTSReceivedSetupResponseDetailedStatus' value='9'/>
<enum name='kQTSRemainingBufferTimeInfo' value='1651797363'/>
<enum name='kQTSSDPDataType' value='1935962144'/>
<enum name='kQTSSGChannelSourcerType' value='1936155496'/>
<enum name='kQTSSOCKSPrefsType' value='1936679787'/>
<enum name='kQTSSOCKSProxyPrefsType' value='1936679787'/>
<enum name='kQTSSampleDataCallbackParamsVersion1' value='1'/>
<enum name='kQTSSampleDescPassSampleDataAsHandleFlag' value='1'/>
<enum name='kQTSSampleDescriptionVersion1' value='1'/>
<enum name='kQTSSendDataExtrasParamsVersion1' value='1'/>
<enum name='kQTSSendMediaFlag' value='65536'/>
<enum name='kQTSSentPlayCmdDetailedStatus' value='10'/>
<enum name='kQTSSentSetupCmdDetailedStatus' value='8'/>
<enum name='kQTSSettingsTextDetails' value='1936028772'/>
<enum name='kQTSSettingsTextSummary' value='1936028721'/>
<enum name='kQTSShortStatisticsType' value='1936224884'/>
<enum name='kQTSSoundLevelMeterInfo' value='1818588781'/>
<enum name='kQTSSoundLevelMeteringEnabledInfo' value='1836348014'/>
<enum name='kQTSSourceBoundingRectInfo' value='1869767540'/>
<enum name='kQTSSourceClipRectInfo' value='1868786800'/>
<enum name='kQTSSourceDimensionsInfo' value='1868851565'/>
<enum name='kQTSSourceGraphicsModeInfo' value='1869050477'/>
<enum name='kQTSSourceInputMapInfo' value='1869180272'/>
<enum name='kQTSSourceLanguageInfo' value='1869377127'/>
<enum name='kQTSSourceLayerInfo' value='1869379954'/>
<enum name='kQTSSourceMatrixInfo' value='1869439348'/>
<enum name='kQTSSourceScaleInfo' value='1869833068'/>
<enum name='kQTSSourceTrackFlagsInfo' value='1869899372'/>
<enum name='kQTSSourceTrackIDInfo' value='1869900132'/>
<enum name='kQTSSourceUserDataInfo' value='1869964404'/>
<enum name='kQTSSourceVolumesInfo' value='1870032748'/>
<enum name='kQTSSourcerCallbackProcParamsVersion1' value='1'/>
<enum name='kQTSSourcerCallback_Done' value='1685024357'/>
<enum name='kQTSSourcerDataFlag_SyncSample' value='1'/>
<enum name='kQTSSourcerDoneParamsVersion1' value='1'/>
<enum name='kQTSSourcerGetEnableSelect' value='1284'/>
<enum name='kQTSSourcerGetInfoSelect' value='1288'/>
<enum name='kQTSSourcerGetTimeScaleSelect' value='1295'/>
<enum name='kQTSSourcerIdleSelect' value='1302'/>
<enum name='kQTSSourcerInitParamsVersion1' value='1'/>
<enum name='kQTSSourcerInitializeSelect' value='1280'/>
<enum name='kQTSSourcerSetEnableSelect' value='1283'/>
<enum name='kQTSSourcerSetInfoSelect' value='1287'/>
<enum name='kQTSSourcerSetTimeScaleSelect' value='1294'/>
<enum name='kQTSSourcerTimingParamsVersion1' value='1'/>
<enum name='kQTSSourcerType' value='1936876402'/>
<enum name='kQTSStartAckNotification' value='1935762283'/>
<enum name='kQTSStatHelperReturnPascalStringsFlag' value='1'/>
<enum name='kQTSStatisticsBitsPerSecUnitsType' value='1651536672'/>
<enum name='kQTSStatisticsDataAtomType' value='1684108385'/>
<enum name='kQTSStatisticsDataFormatAtomType' value='1718775156'/>
<enum name='kQTSStatisticsFixedDataFormat' value='1718188132'/>
<enum name='kQTSStatisticsFramesPerSecUnitsType' value='1718645536'/>
<enum name='kQTSStatisticsInfo' value='1937006964'/>
<enum name='kQTSStatisticsNameAtomType' value='1851878757'/>
<enum name='kQTSStatisticsNoUnitsType' value='0'/>
<enum name='kQTSStatisticsOSTypeDataFormat' value='1869837424'/>
<enum name='kQTSStatisticsPercentUnitsType' value='1885564532'/>
<enum name='kQTSStatisticsPointDataFormat' value='1886350964'/>
<enum name='kQTSStatisticsRectDataFormat' value='1919247220'/>
<enum name='kQTSStatisticsSInt16DataFormat' value='1936273718'/>
<enum name='kQTSStatisticsSInt32DataFormat' value='1936274226'/>
<enum name='kQTSStatisticsStreamAtomType' value='1937011309'/>
<enum name='kQTSStatisticsStringDataFormat' value='1937011303'/>
<enum name='kQTSStatisticsUInt16DataFormat' value='1969828150'/>
<enum name='kQTSStatisticsUInt32DataFormat' value='1969828658'/>
<enum name='kQTSStatisticsUnitsAtomType' value='1970170228'/>
<enum name='kQTSStatisticsUnitsNameAtomType' value='1970170222'/>
<enum name='kQTSStatisticsUnsignedFixedDataFormat' value='1969645944'/>
<enum name='kQTSStatusNotification' value='1937006964'/>
<enum name='kQTSStopAckNotification' value='2019648363'/>
<enum name='kQTSStoppedRate' value='0'/>
<enum name='kQTSStreamBeginChangingNotification' value='1937007458'/>
<enum name='kQTSStreamBufferVersion1' value='1'/>
<enum name='kQTSStreamChangedNotification' value='1937007464'/>
<enum name='kQTSStreamDoneChangingNotification' value='1937007460'/>
<enum name='kQTSStreamGoneNotification' value='1937008494'/>
<enum name='kQTSStreamMediaType' value='1937011309'/>
<enum name='kQTSSummaryStatisticsType' value='1937075565'/>
<enum name='kQTSSupportsPerStreamControlCharacteristic' value='1886610292'/>
<enum name='kQTSSyncDrawing' value='64'/>
<enum name='kQTSTCPTransportType' value='1952673824'/>
<enum name='kQTSTargetBufferDurationInfo' value='1651861106'/>
<enum name='kQTSTargetBufferDurationTimeScale' value='1000'/>
<enum name='kQTSTotalDataRateInInfo' value='1685222505'/>
<enum name='kQTSTotalDataRateInStat' value='1685222505'/>
<enum name='kQTSTotalDataRateInfo' value='1685222516'/>
<enum name='kQTSTotalDataRateOutInfo' value='1685222511'/>
<enum name='kQTSTotalDataRateOutStat' value='1685222511'/>
<enum name='kQTSTotalDataRateStat' value='1685222516'/>
<enum name='kQTSTrackParamsVersion1' value='1'/>
<enum name='kQTSTransAndProxyAtomType' value='1937011312'/>
<enum name='kQTSTransAndProxyPrefsVersNum' value='2'/>
<enum name='kQTSTransportPrefsAtomType' value='1953656435'/>
<enum name='kQTSUDPTransportType' value='1969516576'/>
<enum name='kQTSURLNotification' value='1970433056'/>
<enum name='kQTSUninitializedStatus' value='1'/>
<enum name='kQTSUnknownDataType' value='1752524863'/>
<enum name='kQTSUnknownDuration' value='0'/>
<enum name='kQTSUpdateAllIfNecessaryStatisticsFlag' value='65536'/>
<enum name='kQTSUpdateAtomsStatisticsFlag' value='4'/>
<enum name='kQTSUserDataCallbackParamsVersion1' value='1'/>
<enum name='kQTSWaitingDisconnectStatus' value='100'/>
<enum name='kQTSampleDependency_DependsOnOthers_Corrected' value='16'/>
<enum name='kQTSampleDependency_DoesNotDependOnOthers_Corrected' value='32'/>
<enum name='kQTSampleDependency_EarlierDisplayTimesAllowed' value='64'/>
<enum name='kQTSampleDependency_HasNoRedundantCoding_Corrected' value='2'/>
<enum name='kQTSampleDependency_HasRedundantCoding_Corrected' value='1'/>
<enum name='kQTSampleDependency_IsDependedOnByOthers_Corrected' value='4'/>
<enum name='kQTSampleDependency_IsNotDependedOnByOthers_Corrected' value='8'/>
<enum name='kQTSampleTableAnyAttributeChange' value='0'/>
<enum name='kQTSampleTableAttribute_DataSizePerSampleChange' value='2'/>
<enum name='kQTSampleTableAttribute_DecodeDurationChange' value='4'/>
<enum name='kQTSampleTableAttribute_DiscontiguousData' value='1'/>
<enum name='kQTSampleTableAttribute_DisplayOffsetChange' value='8'/>
<enum name='kQTSampleTableAttribute_SampleDescriptionIDChange' value='16'/>
<enum name='kQTSampleTableAttribute_SampleFlagsChange' value='32'/>
<enum name='kQTSampleTablePropertyID_MaxDisplayOffset' value='1046766692'/>
<enum name='kQTSampleTablePropertyID_MaxRelativeDisplayTime' value='1046767987'/>
<enum name='kQTSampleTablePropertyID_MinDisplayOffset' value='1013212260'/>
<enum name='kQTSampleTablePropertyID_MinRelativeDisplayTime' value='1013213555'/>
<enum name='kQTSampleTablePropertyID_TotalDecodeDuration' value='1952736612'/>
<enum name='kQTSetComponentPropertySelect' value='-13'/>
<enum name='kQTSettingsAudioCDTrack' value='1953653099'/>
<enum name='kQTSettingsAudioCDTrackRateShift' value='1920165990'/>
<enum name='kQTSettingsCleanAperture' value='1668047216'/>
<enum name='kQTSettingsComponentVersion' value='1986359923'/>
<enum name='kQTSettingsDVExportDVFormat' value='1685480294'/>
<enum name='kQTSettingsDVExportLockedAudio' value='1819239275'/>
<enum name='kQTSettingsDVExportNTSC' value='1685480310'/>
<enum name='kQTSettingsDeinterlaceSource' value='1684631156'/>
<enum name='kQTSettingsEffect' value='1701209701'/>
<enum name='kQTSettingsGraphicsFileImportSequence' value='1936028021'/>
<enum name='kQTSettingsGraphicsFileImportSequenceEnabled' value='1701732706'/>
<enum name='kQTSettingsImageHeight' value='1768449908'/>
<enum name='kQTSettingsImageWidth' value='1769432180'/>
<enum name='kQTSettingsMIDI' value='1296647241'/>
<enum name='kQTSettingsMIDISettingFlags' value='1937011815'/>
<enum name='kQTSettingsMovieExportEnableSound' value='1701737327'/>
<enum name='kQTSettingsMovieExportEnableVideo' value='1701738089'/>
<enum name='kQTSettingsMovieExportSaveCompressedMovie' value='1668116589'/>
<enum name='kQTSettingsMovieExportSaveForInternet' value='1717662580'/>
<enum name='kQTSettingsMovieExportSaveOptions' value='1935767141'/>
<enum name='kQTSettingsPixelAspectRatio' value='1885434736'/>
<enum name='kQTSettingsScalingMode' value='1935892845'/>
<enum name='kQTSettingsSound' value='1936684398'/>
<enum name='kQTSettingsText' value='1952807028'/>
<enum name='kQTSettingsTextDescription' value='1684370275'/>
<enum name='kQTSettingsTextSettingFlags' value='1937011815'/>
<enum name='kQTSettingsTextSize' value='1936292453'/>
<enum name='kQTSettingsTextTimeFraction' value='1953066342'/>
<enum name='kQTSettingsTime' value='1953066341'/>
<enum name='kQTSettingsTimeDuration' value='1685418593'/>
<enum name='kQTSettingsUseCodecEnforcedDimensions' value='1969581670'/>
<enum name='kQTSettingsVideo' value='1986618469'/>
<enum name='kQTSettingsVideoSize' value='1769171322'/>
<enum name='kQTSoundDescriptionKind_Movie_AnyVersion' value='1836478073'/>
<enum name='kQTSoundDescriptionKind_Movie_LowestPossibleVersion' value='1836477551'/>
<enum name='kQTSoundDescriptionKind_Movie_Version1' value='1836480049'/>
<enum name='kQTSoundDescriptionKind_Movie_Version2' value='1836480050'/>
<enum name='kQTSoundDescriptionPropertyID_AudioChannelLayout' value='1668047225'/>
<enum name='kQTSoundDescriptionPropertyID_AudioStreamBasicDescription' value='1634951780'/>
<enum name='kQTSoundDescriptionPropertyID_BitRate' value='1651663220'/>
<enum name='kQTSoundDescriptionPropertyID_MagicCookie' value='1802857321'/>
<enum name='kQTSoundDescriptionPropertyID_UserReadableText' value='1952807028'/>
<enum name='kQTSpecialScalingMode_FitWithinDimensions' value='1718187040'/>
<enum name='kQTTIFFCompressionMethod' value='1953064547'/>
<enum name='kQTTIFFCompression_None' value='1'/>
<enum name='kQTTIFFCompression_PackBits' value='32773'/>
<enum name='kQTTIFFExifGPSUserDataPrefix' value='1735393280'/>
<enum name='kQTTIFFExifUserDataPrefix' value='1702363136'/>
<enum name='kQTTIFFLittleEndian' value='1953064549'/>
<enum name='kQTTIFFUserDataGeoAsciiParams' value='1953073073'/>
<enum name='kQTTIFFUserDataGeoDoubleParams' value='1953073072'/>
<enum name='kQTTIFFUserDataGeoKeyDirectory' value='1953073071'/>
<enum name='kQTTIFFUserDataIntergraphMatrix' value='1953072256'/>
<enum name='kQTTIFFUserDataModelPixelScale' value='1953071886'/>
<enum name='kQTTIFFUserDataModelTiepoint' value='1953072258'/>
<enum name='kQTTIFFUserDataModelTransformation' value='1953072600'/>
<enum name='kQTTIFFUserDataOrientation' value='1953038610'/>
<enum name='kQTTIFFUserDataPrefix' value='1953038336'/>
<enum name='kQTTIFFUserDataPrimaryChromaticities' value='1953038655'/>
<enum name='kQTTIFFUserDataReferenceBlackWhite' value='1953038868'/>
<enum name='kQTTIFFUserDataTransferFunction' value='1953038637'/>
<enum name='kQTTIFFUserDataTransferRange' value='1953038678'/>
<enum name='kQTTIFFUserDataWhitePoint' value='1953038654'/>
<enum name='kQTTIFFUserDataYCbCrPositioning' value='1953038867'/>
<enum name='kQTTargetDataSize' value='1684108154'/>
<enum name='kQTThumbnailSettings' value='1953002861'/>
<enum name='kQTTimeValueTooBigErr' value='-9464'/>
<enum name='kQTTransferFunction_ITU_R709_2' value='1'/>
<enum name='kQTTransferFunction_SMPTE_240M_1995' value='7'/>
<enum name='kQTTransferFunction_Unknown' value='2'/>
<enum name='kQTUsePlatformDefaultGammaLevel' value='0'/>
<enum name='kQTUseSourceGammaLevel' value='-1'/>
<enum name='kQTVODecompressorComponent' value='1668116596'/>
<enum name='kQTVODecompressorContinuous' value='1668247156'/>
<enum name='kQTVODecompressorType' value='1684370553'/>
<enum name='kQTVODecompressors' value='1684366191'/>
<enum name='kQTVODimensions' value='1684630894'/>
<enum name='kQTVODisplayModeItem' value='1902407017'/>
<enum name='kQTVOName' value='1851878757'/>
<enum name='kQTVOPixelType' value='1885960300'/>
<enum name='kQTVORefreshRate' value='1919247986'/>
<enum name='kQTVOResolution' value='1919251308'/>
<enum name='kQTVRAPIMajorVersion' value='5'/>
<enum name='kQTVRAPIMajorVersion02' value='2'/>
<enum name='kQTVRAPIMajorVersion05' value='5'/>
<enum name='kQTVRAPIMinorVersion' value='0'/>
<enum name='kQTVRAPIMinorVersion00' value='0'/>
<enum name='kQTVRAPIMinorVersion01' value='1'/>
<enum name='kQTVRAPIMinorVersion10' value='16'/>
<enum name='kQTVRAPIMinorVersion20' value='32'/>
<enum name='kQTVRAllHotSpots' value='2'/>
<enum name='kQTVRAllModes' value='100'/>
<enum name='kQTVRAngleRangeAtomType' value='1634889319'/>
<enum name='kQTVRBackBufferAlwaysRefresh' value='4'/>
<enum name='kQTVRBackBufferEveryIdle' value='2'/>
<enum name='kQTVRBackBufferEveryUpdate' value='1'/>
<enum name='kQTVRBackBufferFlagDidDraw' value='1'/>
<enum name='kQTVRBackBufferFlagLastFlag' value='-2147483648'/>
<enum name='kQTVRBackBufferHorizontal' value='8'/>
<enum name='kQTVRBackBufferRectVisible' value='1'/>
<enum name='kQTVRBackBufferWasRefreshed' value='2'/>
<enum name='kQTVRCanZoom' value='3'/>
<enum name='kQTVRCantPanDown' value='8'/>
<enum name='kQTVRCantPanLeft' value='1'/>
<enum name='kQTVRCantPanRight' value='2'/>
<enum name='kQTVRCantPanUp' value='4'/>
<enum name='kQTVRCantTranslateDown' value='512'/>
<enum name='kQTVRCantTranslateLeft' value='64'/>
<enum name='kQTVRCantTranslateRight' value='128'/>
<enum name='kQTVRCantTranslateUp' value='256'/>
<enum name='kQTVRCantZoomIn' value='16'/>
<enum name='kQTVRCantZoomOut' value='32'/>
<enum name='kQTVRColorCursorAtomType' value='1668445042'/>
<enum name='kQTVRColorCursorType' value='2'/>
<enum name='kQTVRControllerSubType' value='1668577648'/>
<enum name='kQTVRCube' value='1668637285'/>
<enum name='kQTVRCubicFaceDataAtomType' value='1668638305'/>
<enum name='kQTVRCubicViewAtomType' value='1668642423'/>
<enum name='kQTVRCurrent' value='2'/>
<enum name='kQTVRCurrentMode' value='0'/>
<enum name='kQTVRCurrentNode' value='0'/>
<enum name='kQTVRCursorAtomType' value='1129665107'/>
<enum name='kQTVRCursorParentAtomType' value='1987208048'/>
<enum name='kQTVRDefault' value='0'/>
<enum name='kQTVRDefaultNode' value='-2147483647'/>
<enum name='kQTVRDefaultRes' value='0'/>
<enum name='kQTVRDegrees' value='0'/>
<enum name='kQTVRDontLoopViewFrames' value='3'/>
<enum name='kQTVRDown' value='270'/>
<enum name='kQTVRDownLeft' value='225'/>
<enum name='kQTVRDownRight' value='315'/>
<enum name='kQTVRFOVConstraintAtomType' value='1717792622'/>
<enum name='kQTVRFieldOfView' value='2'/>
<enum name='kQTVRFieldOfViewAngle' value='259'/>
<enum name='kQTVRFlattenerBlurPreviewAtomType' value='1114404210'/>
<enum name='kQTVRFlattenerCreatePreviewAtomType' value='1349674358'/>
<enum name='kQTVRFlattenerImportPreviewAtomType' value='1230008933'/>
<enum name='kQTVRFlattenerImportSpecAtomType' value='1230205029'/>
<enum name='kQTVRFlattenerManufacturer' value='1987213157'/>
<enum name='kQTVRFlattenerPreviewResAtomType' value='1347577203'/>
<enum name='kQTVRFlattenerSettingsParentAtomType' value='1448236901'/>
<enum name='kQTVRFullCache' value='1'/>
<enum name='kQTVRFullCorrection' value='2'/>
<enum name='kQTVRFullRes' value='1'/>
<enum name='kQTVRFullTrackRes' value='1'/>
<enum name='kQTVRGetHotSpotTypeSelector' value='8203'/>
<enum name='kQTVRGetViewParameterSelector' value='8205'/>
<enum name='kQTVRHalfRes' value='2'/>
<enum name='kQTVRHalfTrackRes' value='2'/>
<enum name='kQTVRHorizontalCylinder' value='1751349612'/>
<enum name='kQTVRHotSpotAtomType' value='1752134771'/>
<enum name='kQTVRHotSpotEnter' value='0'/>
<enum name='kQTVRHotSpotID' value='0'/>
<enum name='kQTVRHotSpotInfoAtomType' value='1752394094'/>
<enum name='kQTVRHotSpotLeave' value='2'/>
<enum name='kQTVRHotSpotLinkType' value='1818848875'/>
<enum name='kQTVRHotSpotNavigableType' value='1851881063'/>
<enum name='kQTVRHotSpotParentAtomType' value='1752395873'/>
<enum name='kQTVRHotSpotTrackRefAtomType' value='1752396914'/>
<enum name='kQTVRHotSpotTrackRefType' value='1752134772'/>
<enum name='kQTVRHotSpotType' value='1'/>
<enum name='kQTVRHotSpotURLType' value='1970433056'/>
<enum name='kQTVRHotSpotUndefinedType' value='1970168934'/>
<enum name='kQTVRHotSpotWithin' value='1'/>
<enum name='kQTVRHotSpotsVisible' value='512'/>
<enum name='kQTVRImageTrackRefAtomType' value='1768780914'/>
<enum name='kQTVRImageTrackRefType' value='1768777588'/>
<enum name='kQTVRImagingCorrection' value='1'/>
<enum name='kQTVRImagingCurrentMode' value='100'/>
<enum name='kQTVRImagingDirectDraw' value='3'/>
<enum name='kQTVRImagingParentAtomType' value='1768777584'/>
<enum name='kQTVRImagingQuality' value='2'/>
<enum name='kQTVRInteractionDefaultValue' value='-2147483648'/>
<enum name='kQTVRInteractionMouseClickHysteresis' value='1'/>
<enum name='kQTVRInteractionMouseClickTimeout' value='2'/>
<enum name='kQTVRInteractionMouseMotionScale' value='102'/>
<enum name='kQTVRInteractionNudgeMode' value='103'/>
<enum name='kQTVRInteractionPanTiltSpeed' value='3'/>
<enum name='kQTVRInteractionTranslateOnMouseDown' value='101'/>
<enum name='kQTVRInteractionZoomSpeed' value='4'/>
<enum name='kQTVRLeft' value='180'/>
<enum name='kQTVRLinkInfoAtomType' value='1818848875'/>
<enum name='kQTVRMajorVersion' value='2'/>
<enum name='kQTVRMinimumCache' value='-1'/>
<enum name='kQTVRMinorVersion' value='0'/>
<enum name='kQTVRMotion' value='2'/>
<enum name='kQTVRMouseDown' value='3'/>
<enum name='kQTVRMouseDownSelector' value='8199'/>
<enum name='kQTVRMouseEnterSelector' value='8196'/>
<enum name='kQTVRMouseLeaveSelector' value='8198'/>
<enum name='kQTVRMouseStillDownSelector' value='8200'/>
<enum name='kQTVRMouseUpSelector' value='8201'/>
<enum name='kQTVRMouseWithinSelector' value='8197'/>
<enum name='kQTVRNoCorrection' value='0'/>
<enum name='kQTVRNodeHeaderAtomType' value='1852074084'/>
<enum name='kQTVRNodeIDAtomType' value='1987210857'/>
<enum name='kQTVRNodeLocationAtomType' value='1852600163'/>
<enum name='kQTVRNodeParentAtomType' value='1987210864'/>
<enum name='kQTVRNudgeRotate' value='0'/>
<enum name='kQTVRNudgeSameAsMouse' value='2'/>
<enum name='kQTVRNudgeTranslate' value='1'/>
<enum name='kQTVRObjExporterManufacturer' value='1987211106'/>
<enum name='kQTVRObjExporterSettingsBlockSize' value='1651730810'/>
<enum name='kQTVRObjExporterSettingsTargetSize' value='1953720698'/>
<enum name='kQTVRObjectAnimateViewFramesOn' value='1'/>
<enum name='kQTVRObjectAnimateViewsOn' value='8'/>
<enum name='kQTVRObjectCanZoomOn' value='4'/>
<enum name='kQTVRObjectDontLoopViewFramesOn' value='64'/>
<enum name='kQTVRObjectHotSpotTrackRefAtomID' value='1'/>
<enum name='kQTVRObjectImageTrackRefAtomID' value='1'/>
<enum name='kQTVRObjectImagingAtomType' value='1768779618'/>
<enum name='kQTVRObjectInfoAtomID' value='1'/>
<enum name='kQTVRObjectInfoAtomType' value='1868720745'/>
<enum name='kQTVRObjectPalindromeViewFramesOn' value='2'/>
<enum name='kQTVRObjectPalindromeViewsOn' value='16'/>
<enum name='kQTVRObjectPlayEveryViewFrameOn' value='128'/>
<enum name='kQTVRObjectReverseHControlOn' value='8'/>
<enum name='kQTVRObjectReverseVControlOn' value='16'/>
<enum name='kQTVRObjectStartFirstViewFrameOn' value='4'/>
<enum name='kQTVRObjectStreamingViewsOn' value='256'/>
<enum name='kQTVRObjectSwapHVControlOn' value='32'/>
<enum name='kQTVRObjectSyncViewToFrameRate' value='32'/>
<enum name='kQTVRObjectTranslationOn' value='64'/>
<enum name='kQTVRObjectType' value='1868720741'/>
<enum name='kQTVRObjectWrapPanOn' value='1'/>
<enum name='kQTVRObjectWrapTiltOn' value='2'/>
<enum name='kQTVROldObjectType' value='1937010273'/>
<enum name='kQTVROldPanoType' value='1398042734'/>
<enum name='kQTVRPalindromeViewFrames' value='1'/>
<enum name='kQTVRPalindromeViews' value='17'/>
<enum name='kQTVRPan' value='0'/>
<enum name='kQTVRPanAngle' value='256'/>
<enum name='kQTVRPanConstraintAtomType' value='1885564782'/>
<enum name='kQTVRPanning' value='1'/>
<enum name='kQTVRPanoFlagHorizontal' value='1'/>
<enum name='kQTVRPanoFlagLast' value='-2147483648'/>
<enum name='kQTVRPanoImagingAtomType' value='1768779886'/>
<enum name='kQTVRPanoSampleDataAtomType' value='1885626740'/>
<enum name='kQTVRPanoramaType' value='1885433455'/>
<enum name='kQTVRPartialCorrection' value='1'/>
<enum name='kQTVRPlayEveryViewFrame' value='4'/>
<enum name='kQTVRPlayStreamingViews' value='18'/>
<enum name='kQTVRPreScreenEveryIdle' value='1'/>
<enum name='kQTVRPreviewTrackRes' value='32768'/>
<enum name='kQTVRPreviousNode' value='-2147483648'/>
<enum name='kQTVRQTVRType' value='1903457906'/>
<enum name='kQTVRQuarterRes' value='4'/>
<enum name='kQTVRQuarterTrackRes' value='4'/>
<enum name='kQTVRRadians' value='1'/>
<enum name='kQTVRReverseHControl' value='4'/>
<enum name='kQTVRReverseVControl' value='5'/>
<enum name='kQTVRRight' value='0'/>
<enum name='kQTVRSameFile' value='0'/>
<enum name='kQTVRScrolling' value='8'/>
<enum name='kQTVRSelecting' value='16'/>
<enum name='kQTVRSetFieldOfViewSelector' value='8194'/>
<enum name='kQTVRSetPanAngleSelector' value='8192'/>
<enum name='kQTVRSetTiltAngleSelector' value='8193'/>
<enum name='kQTVRSetViewCenterSelector' value='8195'/>
<enum name='kQTVRSetViewParameterSelector' value='8204'/>
<enum name='kQTVRSplitterGenerateHTMLAtomType' value='1198027885'/>
<enum name='kQTVRSplitterManufacturer' value='1987212144'/>
<enum name='kQTVRSplitterOverwriteFilesAtomType' value='1333225065'/>
<enum name='kQTVRSplitterSettingsParentAtomType' value='1448235888'/>
<enum name='kQTVRSplitterShowControllerAtomType' value='1399350127'/>
<enum name='kQTVRSplitterTargetMyselfAtomType' value='1416066157'/>
<enum name='kQTVRSplitterUseFlattenerAtomType' value='1433625958'/>
<enum name='kQTVRStartFirstViewFrame' value='2'/>
<enum name='kQTVRStatic' value='1'/>
<enum name='kQTVRStdCursorType' value='1'/>
<enum name='kQTVRStringAtomType' value='1987212135'/>
<enum name='kQTVRStringEncodingAtomType' value='1987212133'/>
<enum name='kQTVRSuggestedCache' value='0'/>
<enum name='kQTVRSwapHVControl' value='6'/>
<enum name='kQTVRSyncViewToFrameRate' value='16'/>
<enum name='kQTVRTilt' value='1'/>
<enum name='kQTVRTiltAngle' value='257'/>
<enum name='kQTVRTiltConstraintAtomType' value='1952673646'/>
<enum name='kQTVRTrackRefArrayAtomType' value='1953654118'/>
<enum name='kQTVRTransitionDirection' value='2'/>
<enum name='kQTVRTransitionSpeed' value='1'/>
<enum name='kQTVRTransitionSwing' value='1'/>
<enum name='kQTVRTranslating' value='2'/>
<enum name='kQTVRTranslation' value='7'/>
<enum name='kQTVRTriggerHotSpotSelector' value='8202'/>
<enum name='kQTVRUnconstrained' value='0'/>
<enum name='kQTVRUnknownType' value='1061109567'/>
<enum name='kQTVRUp' value='90'/>
<enum name='kQTVRUpLeft' value='135'/>
<enum name='kQTVRUpRight' value='45'/>
<enum name='kQTVRUseDefaultCursor' value='0'/>
<enum name='kQTVRUseMovieDepth' value='0'/>
<enum name='kQTVRUseMovieGeometry' value='0'/>
<enum name='kQTVRValidCorrection' value='1'/>
<enum name='kQTVRValidDirectDraw' value='4'/>
<enum name='kQTVRValidFOV' value='4'/>
<enum name='kQTVRValidFirstExtraProperty' value='8'/>
<enum name='kQTVRValidPan' value='1'/>
<enum name='kQTVRValidQuality' value='2'/>
<enum name='kQTVRValidTilt' value='2'/>
<enum name='kQTVRValidViewCenter' value='8'/>
<enum name='kQTVRValueIsRate' value='2'/>
<enum name='kQTVRValueIsRelative' value='1'/>
<enum name='kQTVRValueIsUserPrefRelative' value='4'/>
<enum name='kQTVRVerticalCylinder' value='1986230636'/>
<enum name='kQTVRViewCenter' value='260'/>
<enum name='kQTVRViewCenterH' value='4'/>
<enum name='kQTVRViewCenterV' value='5'/>
<enum name='kQTVRWorldHeaderAtomType' value='1987212131'/>
<enum name='kQTVRWrapPan' value='1'/>
<enum name='kQTVRWrapTilt' value='2'/>
<enum name='kQTVRZooming' value='4'/>
<enum name='kQTVideoOutputBaseSetEchoPortSelect' value='18'/>
<enum name='kQTVideoOutputBeginSelect' value='5'/>
<enum name='kQTVideoOutputCopyIndAudioOutputDeviceUIDSelect' value='22'/>
<enum name='kQTVideoOutputCustomConfigureDisplaySelect' value='9'/>
<enum name='kQTVideoOutputDontDisplayToUser' value='1'/>
<enum name='kQTVideoOutputEndSelect' value='6'/>
<enum name='kQTVideoOutputGetClientNameSelect' value='4'/>
<enum name='kQTVideoOutputGetClockSelect' value='15'/>
<enum name='kQTVideoOutputGetCurrentClientNameSelect' value='2'/>
<enum name='kQTVideoOutputGetDisplayModeListSelect' value='1'/>
<enum name='kQTVideoOutputGetDisplayModeSelect' value='8'/>
<enum name='kQTVideoOutputGetGWorldParametersSelect' value='13'/>
<enum name='kQTVideoOutputGetGWorldSelect' value='12'/>
<enum name='kQTVideoOutputGetIndImageDecompressorSelect' value='17'/>
<enum name='kQTVideoOutputGetIndSoundOutputSelect' value='14'/>
<enum name='kQTVideoOutputRestoreStateSelect' value='11'/>
<enum name='kQTVideoOutputSaveStateSelect' value='10'/>
<enum name='kQTVideoOutputSetClientNameSelect' value='3'/>
<enum name='kQTVideoOutputSetDisplayModeSelect' value='7'/>
<enum name='kQTVideoOutputSetEchoPortSelect' value='16'/>
<enum name='kQTVisualContextNotAllowedErr' value='-9459'/>
<enum name='kQTVisualContextRequiredErr' value='-9458'/>
<enum name='kQTVisualPropertyID_ApertureMode' value='1634757988'/>
<enum name='kQTVisualPropertyID_Brightness' value='1986163316'/>
<enum name='kQTVisualPropertyID_ClassicDimensions' value='1668047977'/>
<enum name='kQTVisualPropertyID_CleanApertureDimensions' value='1667327081'/>
<enum name='kQTVisualPropertyID_Contrast' value='1986228078'/>
<enum name='kQTVisualPropertyID_EncodedPixelsDimensions' value='1701733481'/>
<enum name='kQTVisualPropertyID_HasApertureModeDimensions' value='1751215460'/>
<enum name='kQTVisualPropertyID_Hue' value='1986557285'/>
<enum name='kQTVisualPropertyID_ProductionApertureDimensions' value='1886545001'/>
<enum name='kQTVisualPropertyID_Saturation' value='1987273076'/>
<enum name='kQTWindowsPathStyle' value='2'/>
<enum name='kQuadSpiralHorizontalMatixWipe' value='345'/>
<enum name='kQuadSpiralVerticalMatixWipe' value='344'/>
<enum name='kQuickDrawCodecType' value='1902408311'/>
<enum name='kQuickDrawGXCodecType' value='1902405496'/>
<enum name='kRGBColorBalanceImageFilterType' value='1919378018'/>
<enum name='kRTP261MediaPacketizerType' value='1748121137'/>
<enum name='kRTP261ReassemblerType' value='1748121137'/>
<enum name='kRTP263PlusMediaPacketizerType' value='842412843'/>
<enum name='kRTP263PlusReassemblerType' value='842412843'/>
<enum name='kRTP263ReassemblerType' value='1748121139'/>
<enum name='kRTPAMRMediaPacketizerType' value='1634562592'/>
<enum name='kRTPAMRReassemblerType' value='1634562592'/>
<enum name='kRTPArriveTooLatePktsStat' value='1634890860'/>
<enum name='kRTPAudioMediaPacketizerType' value='1936684398'/>
<enum name='kRTPAudioReassemblerType' value='1936684398'/>
<enum name='kRTPBadHeaderDroppedPktsStat' value='1651008624'/>
<enum name='kRTPBadPayloadDroppedPktsStat' value='1651532912'/>
<enum name='kRTPBadSeqDroppedPktsStat' value='1651729520'/>
<enum name='kRTPBadStateDroppedPktsStat' value='1937007728'/>
<enum name='kRTPBaseMediaPacketizerType' value='1735291491'/>
<enum name='kRTPBaseReassemblerType' value='1735291491'/>
<enum name='kRTPCharacteristic_RequiresOrderedPackets' value='1920102256'/>
<enum name='kRTPCharacteristic_TimeStampsNotMonoIncreasing' value='1953721705'/>
<enum name='kRTPDroppedPktsPercentStat' value='1685090416'/>
<enum name='kRTPDupSeqNumDroppedPktsStat' value='1685283952'/>
<enum name='kRTPInfo_FormatString' value='1718449264'/>
<enum name='kRTPInfo_NextSeqNum' value='1919841134'/>
<enum name='kRTPInfo_SSRC' value='1936945763'/>
<enum name='kRTPInvalidSSRC' value='0'/>
<enum name='kRTPJPEGMediaPacketizerType' value='1785750887'/>
<enum name='kRTPJPEGReassemblerType' value='1785750887'/>
<enum name='kRTPLostPktsPercentStat' value='1819504752'/>
<enum name='kRTPMP3MediaPacketizerType' value='1836069664'/>
<enum name='kRTPMP3ReassemblerType' value='1836069664'/>
<enum name='kRTPMPDoUserDialogSelect' value='1302'/>
<enum name='kRTPMPEG4AudioMediaPacketizerType' value='1836069985'/>
<enum name='kRTPMPEG4AudioReassemblerType' value='1836069985'/>
<enum name='kRTPMPEG4VideoMediaPacketizerType' value='1836070006'/>
<enum name='kRTPMPEG4VideoReassemblerType' value='1836070006'/>
<enum name='kRTPMPFlushSelect' value='1284'/>
<enum name='kRTPMPGetInfoSelect' value='1287'/>
<enum name='kRTPMPGetMaxPacketDurationSelect' value='1301'/>
<enum name='kRTPMPGetMaxPacketSizeSelect' value='1299'/>
<enum name='kRTPMPGetMediaTypeSelect' value='1297'/>
<enum name='kRTPMPGetPacketBuilderSelect' value='1295'/>
<enum name='kRTPMPGetSettingsAsTextSelect' value='1305'/>
<enum name='kRTPMPGetSettingsIntoAtomContainerAtAtomSelect' value='1304'/>
<enum name='kRTPMPGetSettingsSelect' value='1308'/>
<enum name='kRTPMPGetTimeBaseSelect' value='1291'/>
<enum name='kRTPMPGetTimeScaleSelect' value='1289'/>
<enum name='kRTPMPHasCharacteristicSelect' value='1292'/>
<enum name='kRTPMPHasUserSettingsDialogCharacteristic' value='1935961191'/>
<enum name='kRTPMPIdleSelect' value='1282'/>
<enum name='kRTPMPInitializeSelect' value='1280'/>
<enum name='kRTPMPMaxPartialSampleSizeInfo' value='1836086131'/>
<enum name='kRTPMPMinPacketDuration' value='1835626084'/>
<enum name='kRTPMPMinPayloadSize' value='1835626099'/>
<enum name='kRTPMPNoSampleDataRequiredCharacteristic' value='1853056114'/>
<enum name='kRTPMPPayloadNameInfo' value='1851878757'/>
<enum name='kRTPMPPayloadTypeInfo' value='1920233584'/>
<enum name='kRTPMPPreferredBufferDelayInfo' value='1886544484'/>
<enum name='kRTPMPPrefersReliableTransportCharacteristic' value='1919249529'/>
<enum name='kRTPMPPreflightMediaSelect' value='1281'/>
<enum name='kRTPMPRTPTimeScaleInfo' value='1920233588'/>
<enum name='kRTPMPReadsPartialSamplesCharacteristic' value='1919972208'/>
<enum name='kRTPMPRealtimeModeFlag' value='1'/>
<enum name='kRTPMPRequiredSampleDescriptionInfo' value='1935962979'/>
<enum name='kRTPMPRequiresOutOfBandDimensionsCharacteristic' value='1919902308'/>
<enum name='kRTPMPResetSelect' value='1285'/>
<enum name='kRTPMPRespectDurationFlag' value='2'/>
<enum name='kRTPMPSetInfoSelect' value='1286'/>
<enum name='kRTPMPSetMaxPacketDurationSelect' value='1300'/>
<enum name='kRTPMPSetMaxPacketSizeSelect' value='1298'/>
<enum name='kRTPMPSetMediaTypeSelect' value='1296'/>
<enum name='kRTPMPSetPacketBuilderSelect' value='1294'/>
<enum name='kRTPMPSetSampleDataSelect' value='1283'/>
<enum name='kRTPMPSetSettingsFromAtomContainerAtAtomSelect' value='1303'/>
<enum name='kRTPMPSetSettingsSelect' value='1309'/>
<enum name='kRTPMPSetTimeBaseSelect' value='1290'/>
<enum name='kRTPMPSetTimeScaleSelect' value='1288'/>
<enum name='kRTPMPStillProcessingData' value='1'/>
<enum name='kRTPMPSuggestedRepeatPktCountInfo' value='1936879715'/>
<enum name='kRTPMPSuggestedRepeatPktSpacingInfo' value='1936879731'/>
<enum name='kRTPMPSyncSampleFlag' value='1'/>
<enum name='kRTPMediaPacketizerInfoRezType' value='1885563753'/>
<enum name='kRTPMediaPacketizerType' value='1920233581'/>
<enum name='kRTPNoTimeScaleDroppedPktsStat' value='1853121648'/>
<enum name='kRTPNotProcessingDroppedPktsStat' value='1852859504'/>
<enum name='kRTPNotReceivingSenderDroppedPktsStat' value='1853056112'/>
<enum name='kRTPNumPktsInQueueStat' value='1919840369'/>
<enum name='kRTPOurHeaderDroppedPktsStat' value='1869112432'/>
<enum name='kRTPPBAddPacketLiteralDataSelect' value='1284'/>
<enum name='kRTPPBAddPacketRepeatedDataSelect' value='1286'/>
<enum name='kRTPPBAddPacketSampleData64Select' value='1296'/>
<enum name='kRTPPBAddPacketSampleDataSelect' value='1285'/>
<enum name='kRTPPBAddRepeatPacketSelect' value='1298'/>
<enum name='kRTPPBBFrameFlag' value='131072'/>
<enum name='kRTPPBBeginPacketGroupSelect' value='1280'/>
<enum name='kRTPPBBeginPacketSelect' value='1282'/>
<enum name='kRTPPBDontSendFlag' value='268435456'/>
<enum name='kRTPPBEndOfDataFlag' value='1'/>
<enum name='kRTPPBEndPacketGroupSelect' value='1281'/>
<enum name='kRTPPBEndPacketSelect' value='1283'/>
<enum name='kRTPPBGetCallbackSelect' value='1291'/>
<enum name='kRTPPBGetInfoSelect' value='1293'/>
<enum name='kRTPPBGetPacketSequenceNumberSelect' value='1289'/>
<enum name='kRTPPBGetPacketTimeStampOffsetSelect' value='1295'/>
<enum name='kRTPPBGetSampleDataSelect' value='1297'/>
<enum name='kRTPPBReleaseRepeatedDataSelect' value='1287'/>
<enum name='kRTPPBRepeatPacketFlag' value='2'/>
<enum name='kRTPPBSetCallbackSelect' value='1290'/>
<enum name='kRTPPBSetInfoSelect' value='1292'/>
<enum name='kRTPPBSetMarkerFlag' value='1'/>
<enum name='kRTPPBSetPacketSequenceNumberSelect' value='1288'/>
<enum name='kRTPPBSetPacketTimeStampOffsetSelect' value='1294'/>
<enum name='kRTPPBSyncSampleFlag' value='65536'/>
<enum name='kRTPPBUnknownPacketMediaDataLength' value='0'/>
<enum name='kRTPPacketBuilderType' value='1920233570'/>
<enum name='kRTPPayloadConformanceTag' value='1668247142'/>
<enum name='kRTPPayloadIDStat' value='1919969636'/>
<enum name='kRTPPayloadLossRecoveryTag' value='1819243379'/>
<enum name='kRTPPayloadNameStat' value='1919970925'/>
<enum name='kRTPPayloadSpeedTag' value='1936745828'/>
<enum name='kRTPPayloadTypeDynamicFlag' value='2'/>
<enum name='kRTPPayloadTypeStaticFlag' value='1'/>
<enum name='kRTPPayload_1016' value='1'/>
<enum name='kRTPPayload_CELLB' value='25'/>
<enum name='kRTPPayload_CPV' value='30'/>
<enum name='kRTPPayload_CUSEEME' value='27'/>
<enum name='kRTPPayload_DVI_11' value='16'/>
<enum name='kRTPPayload_DVI_16' value='6'/>
<enum name='kRTPPayload_DVI_22' value='17'/>
<enum name='kRTPPayload_DVI_8' value='5'/>
<enum name='kRTPPayload_FirstDynamic' value='96'/>
<enum name='kRTPPayload_G721' value='2'/>
<enum name='kRTPPayload_G723' value='4'/>
<enum name='kRTPPayload_GSM' value='3'/>
<enum name='kRTPPayload_H261' value='31'/>
<enum name='kRTPPayload_H263' value='34'/>
<enum name='kRTPPayload_JPEG' value='26'/>
<enum name='kRTPPayload_L16_44_1' value='11'/>
<enum name='kRTPPayload_L16_44_2' value='10'/>
<enum name='kRTPPayload_LPC' value='7'/>
<enum name='kRTPPayload_LastDynamic' value='127'/>
<enum name='kRTPPayload_MPEG2T' value='33'/>
<enum name='kRTPPayload_MPEGAUDIO' value='14'/>
<enum name='kRTPPayload_MPEGVIDEO' value='32'/>
<enum name='kRTPPayload_NV' value='28'/>
<enum name='kRTPPayload_PCMA' value='8'/>
<enum name='kRTPPayload_PCMU' value='0'/>
<enum name='kRTPPayload_PICWIN' value='29'/>
<enum name='kRTPPayload_PureVoice' value='12'/>
<enum name='kRTPPayload_Unknown' value='255'/>
<enum name='kRTPPureVoiceMediaPacketizerType' value='1365470320'/>
<enum name='kRTPPureVoiceReassemblerType' value='1365470320'/>
<enum name='kRTPQDesign2MediaPacketizerType' value='1363430706'/>
<enum name='kRTPQDesign2ReassemblerType' value='1363430706'/>
<enum name='kRTPQTMediaPacketizerType' value='1903454573'/>
<enum name='kRTPQTReassemblerType' value='1903454573'/>
<enum name='kRTPRTCPDataRateStat' value='1920099172'/>
<enum name='kRTPReassemblerInfoPadUpToBytes' value='4'/>
<enum name='kRTPReassemblerInfoResType' value='1920167273'/>
<enum name='kRTPReassemblerType' value='1920233586'/>
<enum name='kRTPRetransmissionStat' value='1920103544'/>
<enum name='kRTPRssmAdjustPacketParamsSelect' value='1283'/>
<enum name='kRTPRssmCanRefStreamBuffer' value='1'/>
<enum name='kRTPRssmClearCachedPackets' value='273'/>
<enum name='kRTPRssmComputeChunkSizeSelect' value='1282'/>
<enum name='kRTPRssmCopyDataToChunkSelect' value='1284'/>
<enum name='kRTPRssmDecrChunkRefCountSelect' value='278'/>
<enum name='kRTPRssmEveryPacketAChunkFlag' value='1'/>
<enum name='kRTPRssmFillPacketListParamsSelect' value='275'/>
<enum name='kRTPRssmGetCapabilitiesSelect' value='257'/>
<enum name='kRTPRssmGetChunkAndIncrRefCountSelect' value='269'/>
<enum name='kRTPRssmGetExtChunkAndIncrRefCountSelect' value='279'/>
<enum name='kRTPRssmGetInfoSelect' value='1290'/>
<enum name='kRTPRssmGetPayloadHeaderLengthSelect' value='259'/>
<enum name='kRTPRssmGetStreamHandlerSelect' value='264'/>
<enum name='kRTPRssmGetTimeScaleFromPacketSelect' value='1286'/>
<enum name='kRTPRssmGetTimeScaleSelect' value='261'/>
<enum name='kRTPRssmHandleNewPacketSelect' value='1281'/>
<enum name='kRTPRssmHasCharacteristicSelect' value='1291'/>
<enum name='kRTPRssmIncrChunkRefCountSelect' value='277'/>
<enum name='kRTPRssmInfo_MoreInitParams' value='1920101737'/>
<enum name='kRTPRssmInitializeSelect' value='1280'/>
<enum name='kRTPRssmLostSomePackets' value='1'/>
<enum name='kRTPRssmMoreInitParamsVersion1' value='1'/>
<enum name='kRTPRssmNewStreamHandlerSelect' value='262'/>
<enum name='kRTPRssmNoReorderingRequiredFlag' value='131072'/>
<enum name='kRTPRssmPacketHasMarkerBitSet' value='1'/>
<enum name='kRTPRssmPacketHasServerEditFlag' value='65536'/>
<enum name='kRTPRssmQueueAndUseMarkerBitFlag' value='2'/>
<enum name='kRTPRssmReleasePacketListSelect' value='276'/>
<enum name='kRTPRssmResetSelect' value='1292'/>
<enum name='kRTPRssmSendChunkAndDecrRefCountSelect' value='270'/>
<enum name='kRTPRssmSendLostChunkSelect' value='271'/>
<enum name='kRTPRssmSendPacketListSelect' value='1285'/>
<enum name='kRTPRssmSendStreamBufferRangeSelect' value='272'/>
<enum name='kRTPRssmSendStreamHandlerChangedSelect' value='265'/>
<enum name='kRTPRssmSetCapabilitiesSelect' value='256'/>
<enum name='kRTPRssmSetInfoSelect' value='1289'/>
<enum name='kRTPRssmSetPayloadHeaderLengthSelect' value='258'/>
<enum name='kRTPRssmSetSampleDescriptionSelect' value='266'/>
<enum name='kRTPRssmSetStreamHandlerSelect' value='263'/>
<enum name='kRTPRssmSetTimeScaleSelect' value='260'/>
<enum name='kRTPRssmTrackLostPacketsFlag' value='65536'/>
<enum name='kRTPSorensonMediaPacketizerType' value='1398165809'/>
<enum name='kRTPSorensonReassemblerType' value='1398165809'/>
<enum name='kRTPTotalDroppedPktsStat' value='1952739952'/>
<enum name='kRTPTotalLostPktsStat' value='1953264496'/>
<enum name='kRTPTotalOutOfOrderPktsStat' value='1920233327'/>
<enum name='kRTPTotalPktsInQueueStat' value='1920233585'/>
<enum name='kRTPTotalProcessedPktsStat' value='1953526384'/>
<enum name='kRTPTotalReceivedPktsStat' value='1953653616'/>
<enum name='kRTPTotalUnprocessedPktsPercentStat' value='1953853552'/>
<enum name='kRTPWaitForSeqDroppedPktsStat' value='2004051056'/>
<enum name='kRadialTransitionType' value='1936551987'/>
<enum name='kRandomIrisGroupWipe' value='502'/>
<enum name='kRandomMatrixGroupWipe' value='504'/>
<enum name='kRandomRadialGroupWipe' value='503'/>
<enum name='kRandomWipe' value='409'/>
<enum name='kRandomWipeGroupWipe' value='501'/>
<enum name='kRawCodecType' value='1918990112'/>
<enum name='kRectangleWipe' value='101'/>
<enum name='kRefConNavigateClick' value='1668049259'/>
<enum name='kRefConNavigationNext' value='0'/>
<enum name='kRefConNavigationPrevious' value='1'/>
<enum name='kRefConPropertyCanHaveFocus' value='1'/>
<enum name='kRefConPropertyHasFocus' value='2'/>
<enum name='kRenderMinorClass' value='1919250020'/>
<enum name='kRestEventDurationFieldPos' value='0'/>
<enum name='kRestEventDurationFieldWidth' value='24'/>
<enum name='kRestEventDurationMax' value='16777215'/>
<enum name='kRestEventLen' value='1'/>
<enum name='kRestEventType' value='0'/>
<enum name='kRight180Wipe' value='222'/>
<enum name='kRightCenterWipe' value='24'/>
<enum name='kRightToLeft180Wipe' value='212'/>
<enum name='kRightToLeft90Wipe' value='214'/>
<enum name='kRotatingBottomLeftRightWipe' value='253'/>
<enum name='kRotatingBottomLeftTopRightWipe' value='246'/>
<enum name='kRotatingBottomLeftWipe' value='242'/>
<enum name='kRotatingBottomRightWipe' value='243'/>
<enum name='kRotatingBottomWipe' value='203'/>
<enum name='kRotatingDoubleCenterLeftRightWipe' value='264'/>
<enum name='kRotatingDoubleCenterRightWipe' value='261'/>
<enum name='kRotatingDoubleCenterTopBottomWipe' value='263'/>
<enum name='kRotatingDoubleCenterTopWipe' value='262'/>
<enum name='kRotatingLeftRightWipe' value='206'/>
<enum name='kRotatingLeftTopBottomWipe' value='252'/>
<enum name='kRotatingLeftWipe' value='204'/>
<enum name='kRotatingQuadrantWipe' value='207'/>
<enum name='kRotatingRightTopBottomWipe' value='254'/>
<enum name='kRotatingRightWipe' value='202'/>
<enum name='kRotatingTopBottomWipe' value='205'/>
<enum name='kRotatingTopLeftBottomRightWipe' value='245'/>
<enum name='kRotatingTopLeftRightWipe' value='251'/>
<enum name='kRotatingTopLeftWipe' value='241'/>
<enum name='kRotatingTopRightWipe' value='244'/>
<enum name='kRotatingTopWipe' value='201'/>
<enum name='kRoundRectSideWipe' value='125'/>
<enum name='kRoundRectWipe' value='124'/>
<enum name='kSCAsyncIdleSelect' value='30'/>
<enum name='kSCAudioFillBufferSelect' value='130'/>
<enum name='kSCAudioInvokeLegacyCodecOptionsDialogSelect' value='129'/>
<enum name='kSCAudioResetSelect' value='131'/>
<enum name='kSCCompressImageSelect' value='11'/>
<enum name='kSCCompressPictureFileSelect' value='13'/>
<enum name='kSCCompressPictureSelect' value='12'/>
<enum name='kSCCompressSequenceBeginSelect' value='15'/>
<enum name='kSCCompressSequenceEndSelect' value='17'/>
<enum name='kSCCompressSequenceFrameAsyncSelect' value='29'/>
<enum name='kSCCompressSequenceFrameSelect' value='16'/>
<enum name='kSCCopyCompressionSessionOptionsSelect' value='31'/>
<enum name='kSCDefaultPictFileSettingsSelect' value='19'/>
<enum name='kSCDefaultPictHandleSettingsSelect' value='18'/>
<enum name='kSCDefaultPixMapSettingsSelect' value='20'/>
<enum name='kSCGetBestDeviceRectSelect' value='7'/>
<enum name='kSCGetCompressFlagsSelect' value='25'/>
<enum name='kSCGetCompressionExtendedSelect' value='1'/>
<enum name='kSCGetInfoSelect' value='21'/>
<enum name='kSCGetSettingsAsAtomContainerSelect' value='27'/>
<enum name='kSCGetSettingsAsTextSelect' value='26'/>
<enum name='kSCNewGWorldSelect' value='23'/>
<enum name='kSCPositionDialogSelect' value='3'/>
<enum name='kSCPositionRectSelect' value='2'/>
<enum name='kSCRequestImageSettingsSelect' value='10'/>
<enum name='kSCRequestSequenceSettingsSelect' value='14'/>
<enum name='kSCSetCompressFlagsSelect' value='24'/>
<enum name='kSCSetInfoSelect' value='22'/>
<enum name='kSCSetSettingsFromAtomContainerSelect' value='28'/>
<enum name='kSCSetTestImagePictFileSelect' value='5'/>
<enum name='kSCSetTestImagePictHandleSelect' value='4'/>
<enum name='kSCSetTestImagePixMapSelect' value='6'/>
<enum name='kSGAddExtendedFrameReferenceSelect' value='263'/>
<enum name='kSGAddExtendedMovieDataSelect' value='265'/>
<enum name='kSGAddFrameReferenceSelect' value='257'/>
<enum name='kSGAddFrameSelect' value='273'/>
<enum name='kSGAddMovieDataSelect' value='261'/>
<enum name='kSGAddOutputDataRefToMediaSelect' value='266'/>
<enum name='kSGAlignChannelRectSelect' value='387'/>
<enum name='kSGAppendDeviceListToMenuSelect' value='35'/>
<enum name='kSGChangedSourceSelect' value='262'/>
<enum name='kSGChannelGetCodecSettingsSelect' value='154'/>
<enum name='kSGChannelGetDataSourceNameSelect' value='152'/>
<enum name='kSGChannelGetRequestedDataRateSelect' value='150'/>
<enum name='kSGChannelPutPictureSelect' value='148'/>
<enum name='kSGChannelSetCodecSettingsSelect' value='153'/>
<enum name='kSGChannelSetDataSourceNameSelect' value='151'/>
<enum name='kSGChannelSetRequestedDataRateSelect' value='149'/>
<enum name='kSGCompressFrameCompleteSelect' value='272'/>
<enum name='kSGCompressFrameSelect' value='271'/>
<enum name='kSGDisplayCompressSelect' value='281'/>
<enum name='kSGDisplayFrameSelect' value='270'/>
<enum name='kSGDisposeChannelSelect' value='7'/>
<enum name='kSGDisposeDeviceListSelect' value='34'/>
<enum name='kSGDisposeOutputSelect' value='49'/>
<enum name='kSGGetAdditionalSoundRatesSelect' value='266'/>
<enum name='kSGGetAlignmentProcSelect' value='42'/>
<enum name='kSGGetBufferInfoSelect' value='277'/>
<enum name='kSGGetChannelBoundsSelect' value='131'/>
<enum name='kSGGetChannelClipSelect' value='141'/>
<enum name='kSGGetChannelDeviceAndInputNamesSelect' value='157'/>
<enum name='kSGGetChannelDeviceListSelect' value='143'/>
<enum name='kSGGetChannelInfoSelect' value='134'/>
<enum name='kSGGetChannelMatrixSelect' value='146'/>
<enum name='kSGGetChannelMaxFramesSelect' value='138'/>
<enum name='kSGGetChannelPlayFlagsSelect' value='136'/>
<enum name='kSGGetChannelRefConSelect' value='156'/>
<enum name='kSGGetChannelSampleDescriptionSelect' value='142'/>
<enum name='kSGGetChannelSettingsSelect' value='44'/>
<enum name='kSGGetChannelTimeBaseSelect' value='155'/>
<enum name='kSGGetChannelTimeScaleSelect' value='147'/>
<enum name='kSGGetChannelUsageSelect' value='129'/>
<enum name='kSGGetChannelVolumeSelect' value='133'/>
<enum name='kSGGetCompressBufferSelect' value='276'/>
<enum name='kSGGetDataOutputSelect' value='3'/>
<enum name='kSGGetDataOutputStorageSpaceRemaining64Select' value='61'/>
<enum name='kSGGetDataOutputStorageSpaceRemainingSelect' value='52'/>
<enum name='kSGGetDataRateSelect' value='386'/>
<enum name='kSGGetDataRefSelect' value='47'/>
<enum name='kSGGetFlagsSelect' value='31'/>
<enum name='kSGGetFrameRateSelect' value='283'/>
<enum name='kSGGetGWorldSelect' value='5'/>
<enum name='kSGGetIndChannelSelect' value='38'/>
<enum name='kSGGetInstrumentSelect' value='256'/>
<enum name='kSGGetLastMovieResIDSelect' value='29'/>
<enum name='kSGGetMaximumRecordTimeSelect' value='25'/>
<enum name='kSGGetModeSelect' value='45'/>
<enum name='kSGGetMovieSelect' value='23'/>
<enum name='kSGGetNextExtendedFrameReferenceSelect' value='264'/>
<enum name='kSGGetNextFrameReferenceSelect' value='258'/>
<enum name='kSGGetOutputDataReferenceSelect' value='58'/>
<enum name='kSGGetOutputMaximumOffsetSelect' value='57'/>
<enum name='kSGGetOutputNextOutputSelect' value='55'/>
<enum name='kSGGetPauseSelect' value='40'/>
<enum name='kSGGetPreferredPacketSizeSelect' value='290'/>
<enum name='kSGGetSettingsSelect' value='37'/>
<enum name='kSGGetSoundInputDriverSelect' value='257'/>
<enum name='kSGGetSoundInputParametersSelect' value='264'/>
<enum name='kSGGetSoundInputRateSelect' value='262'/>
<enum name='kSGGetSoundRecordChunkSizeSelect' value='260'/>
<enum name='kSGGetSrcVideoBoundsSelect' value='256'/>
<enum name='kSGGetStorageSpaceRemaining64Select' value='60'/>
<enum name='kSGGetStorageSpaceRemainingSelect' value='26'/>
<enum name='kSGGetTextReturnToSpaceValueSelect' value='261'/>
<enum name='kSGGetTimeBaseSelect' value='259'/>
<enum name='kSGGetTimeRemainingSelect' value='27'/>
<enum name='kSGGetUseScreenBufferSelect' value='279'/>
<enum name='kSGGetUserVideoCompressorListSelect' value='292'/>
<enum name='kSGGetVideoBottlenecksSelect' value='267'/>
<enum name='kSGGetVideoCompressorSelect' value='262'/>
<enum name='kSGGetVideoCompressorTypeSelect' value='259'/>
<enum name='kSGGetVideoDigitizerComponentSelect' value='263'/>
<enum name='kSGGetVideoRectSelect' value='258'/>
<enum name='kSGGrabCompressCompleteSelect' value='280'/>
<enum name='kSGGrabFrameCompleteSelect' value='269'/>
<enum name='kSGGrabFrameSelect' value='268'/>
<enum name='kSGGrabPictSelect' value='28'/>
<enum name='kSGHandleUpdateEventSelect' value='53'/>
<enum name='kSGICodecType' value='777209673'/>
<enum name='kSGIdleSelect' value='18'/>
<enum name='kSGInitChannelSelect' value='384'/>
<enum name='kSGInitializeSelect' value='1'/>
<enum name='kSGLargestDITLSize' value='-2'/>
<enum name='kSGNewChannelFromComponentSelect' value='33'/>
<enum name='kSGNewChannelSelect' value='6'/>
<enum name='kSGNewOutputSelect' value='48'/>
<enum name='kSGPanelCanRunSelect' value='514'/>
<enum name='kSGPanelEventSelect' value='516'/>
<enum name='kSGPanelGetDITLForSizeSelect' value='525'/>
<enum name='kSGPanelGetDitlSelect' value='512'/>
<enum name='kSGPanelGetSettingsSelect' value='521'/>
<enum name='kSGPanelGetTitleSelect' value='513'/>
<enum name='kSGPanelInstallSelect' value='515'/>
<enum name='kSGPanelItemSelect' value='517'/>
<enum name='kSGPanelRemoveSelect' value='518'/>
<enum name='kSGPanelSetEventFilterSelect' value='524'/>
<enum name='kSGPanelSetGrabberSelect' value='519'/>
<enum name='kSGPanelSetResFileSelect' value='520'/>
<enum name='kSGPanelSetSettingsSelect' value='522'/>
<enum name='kSGPanelValidateInputSelect' value='523'/>
<enum name='kSGPauseSelect' value='20'/>
<enum name='kSGPrepareSelect' value='21'/>
<enum name='kSGReleaseSelect' value='22'/>
<enum name='kSGSetAdditionalSoundRatesSelect' value='265'/>
<enum name='kSGSetChannelBoundsSelect' value='130'/>
<enum name='kSGSetChannelClipSelect' value='140'/>
<enum name='kSGSetChannelDeviceInputSelect' value='158'/>
<enum name='kSGSetChannelDeviceSelect' value='144'/>
<enum name='kSGSetChannelMatrixSelect' value='145'/>
<enum name='kSGSetChannelMaxFramesSelect' value='137'/>
<enum name='kSGSetChannelOutputSelect' value='51'/>
<enum name='kSGSetChannelPlayFlagsSelect' value='135'/>
<enum name='kSGSetChannelRefConSelect' value='139'/>
<enum name='kSGSetChannelSettingsSelect' value='43'/>
<enum name='kSGSetChannelSettingsStateChangingSelect' value='159'/>
<enum name='kSGSetChannelUsageSelect' value='128'/>
<enum name='kSGSetChannelVolumeSelect' value='132'/>
<enum name='kSGSetCompressBufferSelect' value='275'/>
<enum name='kSGSetDataOutputSelect' value='2'/>
<enum name='kSGSetDataProcSelect' value='32'/>
<enum name='kSGSetDataRefSelect' value='46'/>
<enum name='kSGSetFlagsSelect' value='30'/>
<enum name='kSGSetFontNameSelect' value='256'/>
<enum name='kSGSetFontSizeSelect' value='257'/>
<enum name='kSGSetFrameRateSelect' value='282'/>
<enum name='kSGSetGWorldSelect' value='4'/>
<enum name='kSGSetInstrumentSelect' value='257'/>
<enum name='kSGSetJustificationSelect' value='260'/>
<enum name='kSGSetMaximumRecordTimeSelect' value='24'/>
<enum name='kSGSetOutputFlagsSelect' value='50'/>
<enum name='kSGSetOutputMaximumOffsetSelect' value='56'/>
<enum name='kSGSetOutputNextOutputSelect' value='54'/>
<enum name='kSGSetPreferredPacketSizeSelect' value='289'/>
<enum name='kSGSetSettingsSelect' value='36'/>
<enum name='kSGSetSettingsSummarySelect' value='267'/>
<enum name='kSGSetSoundInputDriverSelect' value='256'/>
<enum name='kSGSetSoundInputParametersSelect' value='263'/>
<enum name='kSGSetSoundInputRateSelect' value='261'/>
<enum name='kSGSetSoundRecordChunkSizeSelect' value='259'/>
<enum name='kSGSetTextBackColorSelect' value='259'/>
<enum name='kSGSetTextForeColorSelect' value='258'/>
<enum name='kSGSetTextReturnToSpaceValueSelect' value='262'/>
<enum name='kSGSetUseScreenBufferSelect' value='278'/>
<enum name='kSGSetUserVideoCompressorListSelect' value='291'/>
<enum name='kSGSetVideoBottlenecksSelect' value='266'/>
<enum name='kSGSetVideoCompressorSelect' value='261'/>
<enum name='kSGSetVideoCompressorTypeSelect' value='260'/>
<enum name='kSGSetVideoDigitizerComponentSelect' value='264'/>
<enum name='kSGSetVideoRectSelect' value='257'/>
<enum name='kSGSettingsDialogSelect' value='41'/>
<enum name='kSGSmallestDITLSize' value='-1'/>
<enum name='kSGSortDeviceListSelect' value='260'/>
<enum name='kSGSoundInputDriverChangedSelect' value='258'/>
<enum name='kSGStartPreviewSelect' value='16'/>
<enum name='kSGStartRecordSelect' value='17'/>
<enum name='kSGStopSelect' value='19'/>
<enum name='kSGTransferFrameForCompressSelect' value='274'/>
<enum name='kSGUpdateSelect' value='39'/>
<enum name='kSGVideoDigitizerChangedSelect' value='265'/>
<enum name='kSGWriteExtendedMovieDataSelect' value='59'/>
<enum name='kSGWriteMovieDataSelect' value='256'/>
<enum name='kSGWriteSamplesSelect' value='385'/>
<enum name='kSHChunkFlagDataLoss' value='16'/>
<enum name='kSHChunkFlagExtended' value='32'/>
<enum name='kSHChunkFlagSyncSample' value='4'/>
<enum name='kSHExtendedChunkFlag_HasFrameLengths' value='2'/>
<enum name='kSHExtendedChunkFlag_HasSampleCount' value='1'/>
<enum name='kSHNoChunkDispatchFlags' value='0'/>
<enum name='kSHNumExtendedDataLongs' value='10'/>
<enum name='kSMPTENoFlag' value='0'/>
<enum name='kSMPTESmoothEdgeFlag' value='1'/>
<enum name='kSMPTEStrokeEdgeFlag' value='2'/>
<enum name='kScaleSpritesToScaleWorld' value='2'/>
<enum name='kScreenFloodMethodAlpha' value='2'/>
<enum name='kScreenFloodMethodKeyColor' value='1'/>
<enum name='kScreenFloodMethodNone' value='0'/>
<enum name='kScriptIsAppleScript' value='32'/>
<enum name='kScriptIsJavaScript' value='2'/>
<enum name='kScriptIsLingoEvent' value='4'/>
<enum name='kScriptIsProjectorCommand' value='16'/>
<enum name='kScriptIsUnknownType' value='1'/>
<enum name='kScriptIsVBEvent' value='8'/>
<enum name='kSetAtomicInstCallerGuarantees' value='8'/>
<enum name='kSetAtomicInstCallerTosses' value='4'/>
<enum name='kSetAtomicInstDontPreprocess' value='128'/>
<enum name='kSetAtomicInstInterruptSafe' value='16'/>
<enum name='kSetAtomicInstKeepOriginalInstrument' value='1'/>
<enum name='kSetAtomicInstShareAcrossParts' value='2'/>
<enum name='kSharpenImageFilterType' value='1936224880'/>
<enum name='kSharpenMinorClass' value='1936224880'/>
<enum name='kSlideHorizontalWipe' value='1'/>
<enum name='kSlideTransitionType' value='1936484708'/>
<enum name='kSlideVerticalWipe' value='2'/>
<enum name='kSoftSynthComponentSubType' value='1936924704'/>
<enum name='kSolarizeImageFilterType' value='1936682098'/>
<enum name='kSorenson3CodecType' value='1398165811'/>
<enum name='kSorensonCodecType' value='1398165809'/>
<enum name='kSorensonYUV9CodecType' value='1937339961'/>
<enum name='kSpaceShipLeftWipe' value='110'/>
<enum name='kSpaceShipRightWipe' value='108'/>
<enum name='kSpaceShipUpsideDownWipe' value='109'/>
<enum name='kSpaceShipWipe' value='107'/>
<enum name='kSpriteAtomType' value='1936749172'/>
<enum name='kSpriteBehaviorsAtomType' value='1650813025'/>
<enum name='kSpriteCursorBehaviorAtomType' value='1668445042'/>
<enum name='kSpriteFloatingPointVariableAtomType' value='1718382454'/>
<enum name='kSpriteHitTestTreatAllSpritesAsHitTestableMode' value='1'/>
<enum name='kSpriteHitTestTreatAllSpritesAsNotHitTestableMode' value='2'/>
<enum name='kSpriteHitTestUseSpritesOwnPropertiesMode' value='0'/>
<enum name='kSpriteImageAtomType' value='1768776039'/>
<enum name='kSpriteImageBehaviorAtomType' value='1768776039'/>
<enum name='kSpriteImageDataAtomType' value='1768776801'/>
<enum name='kSpriteImageDataRefAtomType' value='1768780389'/>
<enum name='kSpriteImageDataRefTypeAtomType' value='1768780404'/>
<enum name='kSpriteImageDefaultImageIndexAtomType' value='1684366953'/>
<enum name='kSpriteImageGroupIDAtomType' value='1768777586'/>
<enum name='kSpriteImageNameAtomType' value='1851878757'/>
<enum name='kSpriteImagePropertyGroupID' value='1001'/>
<enum name='kSpriteImagePropertyRegistrationPoint' value='1000'/>
<enum name='kSpriteImageRegistrationAtomType' value='1768780391'/>
<enum name='kSpriteImagesContainerAtomType' value='1768776564'/>
<enum name='kSpriteMediaCountImagesSelect' value='261'/>
<enum name='kSpriteMediaCountSpritesSelect' value='260'/>
<enum name='kSpriteMediaDisposeImageSelect' value='284'/>
<enum name='kSpriteMediaDisposeSpriteSelect' value='277'/>
<enum name='kSpriteMediaGetActionVariableAsStringSelect' value='279'/>
<enum name='kSpriteMediaGetActionVariableSelect' value='274'/>
<enum name='kSpriteMediaGetDisplayedSampleNumberSelect' value='263'/>
<enum name='kSpriteMediaGetImageNameSelect' value='265'/>
<enum name='kSpriteMediaGetIndImageDescriptionSelect' value='262'/>
<enum name='kSpriteMediaGetIndImagePropertySelect' value='275'/>
<enum name='kSpriteMediaGetPropertySelect' value='258'/>
<enum name='kSpriteMediaGetSpriteActionsForQTEventSelect' value='272'/>
<enum name='kSpriteMediaGetSpriteNameSelect' value='264'/>
<enum name='kSpriteMediaGetSpritePropertySelect' value='267'/>
<enum name='kSpriteMediaHitTestAllSpritesSelect' value='268'/>
<enum name='kSpriteMediaHitTestOneSpriteSelect' value='269'/>
<enum name='kSpriteMediaHitTestSpritesSelect' value='259'/>
<enum name='kSpriteMediaImageIDToIndexSelect' value='286'/>
<enum name='kSpriteMediaImageIndexToIDSelect' value='285'/>
<enum name='kSpriteMediaNewImageSelect' value='283'/>
<enum name='kSpriteMediaNewSpriteSelect' value='276'/>
<enum name='kSpriteMediaSetActionVariableSelect' value='273'/>
<enum name='kSpriteMediaSetActionVariableToStringSelect' value='278'/>
<enum name='kSpriteMediaSetPropertySelect' value='257'/>
<enum name='kSpriteMediaSetSpritePropertySelect' value='266'/>
<enum name='kSpriteMediaSpriteIDToIndexSelect' value='271'/>
<enum name='kSpriteMediaSpriteIndexToIDSelect' value='270'/>
<enum name='kSpriteNameAtomType' value='1851878757'/>
<enum name='kSpritePropertyActionHandlingSpriteID' value='8'/>
<enum name='kSpritePropertyCanBeHitTested' value='9'/>
<enum name='kSpritePropertyGraphicsMode' value='6'/>
<enum name='kSpritePropertyImageDataPtr' value='3'/>
<enum name='kSpritePropertyImageDataSize' value='7'/>
<enum name='kSpritePropertyImageDescription' value='2'/>
<enum name='kSpritePropertyImageIndex' value='100'/>
<enum name='kSpritePropertyLayer' value='5'/>
<enum name='kSpritePropertyMatrix' value='1'/>
<enum name='kSpritePropertyVisible' value='4'/>
<enum name='kSpriteSharedDataAtomType' value='1684434036'/>
<enum name='kSpriteStatusStringsBehaviorAtomType' value='1936946290'/>
<enum name='kSpriteStringVariableAtomType' value='1937011318'/>
<enum name='kSpriteTrackPreferredDepthCompatibilityMode' value='0'/>
<enum name='kSpriteTrackPreferredDepthModernMode' value='1'/>
<enum name='kSpriteTrackPropertyAllSpritesHitTestingMode' value='108'/>
<enum name='kSpriteTrackPropertyBackgroundColor' value='101'/>
<enum name='kSpriteTrackPropertyHasActions' value='105'/>
<enum name='kSpriteTrackPropertyOffscreenBitDepth' value='102'/>
<enum name='kSpriteTrackPropertyPreferredDepthInterpretationMode' value='109'/>
<enum name='kSpriteTrackPropertyQTIdleEventsFrequency' value='107'/>
<enum name='kSpriteTrackPropertySampleFormat' value='103'/>
<enum name='kSpriteTrackPropertyScaleSpritesToScaleWorld' value='104'/>
<enum name='kSpriteTrackPropertyVisible' value='106'/>
<enum name='kSpriteUsesImageIDsAtomType' value='1970496883'/>
<enum name='kSpriteVariablesContainerAtomType' value='1986097779'/>
<enum name='kSpriteWorldDidDraw' value='1'/>
<enum name='kSpriteWorldDirtyInsteadOfFlush' value='32'/>
<enum name='kSpriteWorldDontAutoInvalidate' value='8'/>
<enum name='kSpriteWorldHighQuality' value='4'/>
<enum name='kSpriteWorldInvisible' value='16'/>
<enum name='kSpriteWorldNeedsToDraw' value='2'/>
<enum name='kSpriteWorldPreflight' value='2'/>
<enum name='kStandardPresetGroup' value='1886610804'/>
<enum name='kStarOfDavidWipe' value='129'/>
<enum name='kStatusHasCodeNumber' value='8'/>
<enum name='kStatusIsError' value='16'/>
<enum name='kStatusStringIsStreamingStatus' value='4'/>
<enum name='kStatusStringIsURLLink' value='2'/>
<enum name='kSynthesizerConnectionFMS' value='1'/>
<enum name='kSynthesizerConnectionMMgr' value='2'/>
<enum name='kSynthesizerConnectionOMS' value='4'/>
<enum name='kSynthesizerConnectionOSXMIDI' value='16'/>
<enum name='kSynthesizerConnectionQT' value='8'/>
<enum name='kSynthesizerConnectionUnavailable' value='256'/>
<enum name='kSynthesizerDLS' value='32768'/>
<enum name='kSynthesizerDynamicChannel' value='128'/>
<enum name='kSynthesizerDynamicVoice' value='1'/>
<enum name='kSynthesizerGM' value='16384'/>
<enum name='kSynthesizerHardware' value='64'/>
<enum name='kSynthesizerHasSamples' value='8'/>
<enum name='kSynthesizerHasSystemChannel' value='512'/>
<enum name='kSynthesizerHogsSystemChannel' value='256'/>
<enum name='kSynthesizerMicrotone' value='4'/>
<enum name='kSynthesizerMixedDrums' value='16'/>
<enum name='kSynthesizerOffline' value='4096'/>
<enum name='kSynthesizerSlowSetPart' value='1024'/>
<enum name='kSynthesizerSoftware' value='32'/>
<enum name='kSynthesizerSoundLocalization' value='65536'/>
<enum name='kSynthesizerUsesMIDIPort' value='2'/>
<enum name='kSystemIsClassicBlueBox' value='262144'/>
<enum name='kSystemIsWindows9x' value='65536'/>
<enum name='kSystemIsWindowsNT' value='131072'/>
<enum name='kTCFrameNumberToTimeCodeCounterSelect' value='275'/>
<enum name='kTCFrameNumberToTimeCodeSelect' value='261'/>
<enum name='kTCFrameNumberToTimeCodeTimeSelect' value='274'/>
<enum name='kTCGetCurrentFrameAndTimeCodeDefSelect' value='268'/>
<enum name='kTCGetCurrentTimeCodeSelect' value='257'/>
<enum name='kTCGetDisplayOptionsSelect' value='267'/>
<enum name='kTCGetFrameAndTimeCodeDefAtTimeSelect' value='269'/>
<enum name='kTCGetSourceRefSelect' value='262'/>
<enum name='kTCGetTimeCodeAtTimeSelect' value='258'/>
<enum name='kTCGetTimeCodeFlagsSelect' value='265'/>
<enum name='kTCSetDisplayOptionsSelect' value='266'/>
<enum name='kTCSetSourceRefSelect' value='263'/>
<enum name='kTCSetTimeCodeFlagsSelect' value='264'/>
<enum name='kTCTimeCodeCounterToFrameNumberSelect' value='273'/>
<enum name='kTCTimeCodeCounterToStringSelect' value='271'/>
<enum name='kTCTimeCodeTimeToFrameNumberSelect' value='272'/>
<enum name='kTCTimeCodeTimeToStringSelect' value='270'/>
<enum name='kTCTimeCodeToFrameNumberSelect' value='260'/>
<enum name='kTCTimeCodeToStringSelect' value='259'/>
<enum name='kTIFFCodecType' value='1953064550'/>
<enum name='kTargaCodecType' value='1952932128'/>
<enum name='kTargetChildMovieMovieID' value='1836019049'/>
<enum name='kTargetChildMovieMovieName' value='1836019054'/>
<enum name='kTargetChildMovieTrackID' value='1836020841'/>
<enum name='kTargetChildMovieTrackIndex' value='1836020856'/>
<enum name='kTargetChildMovieTrackName' value='1836020846'/>
<enum name='kTargetCurrentQTEventParams' value='1702260833'/>
<enum name='kTargetMovie' value='1836019574'/>
<enum name='kTargetMovieID' value='1836018020'/>
<enum name='kTargetMovieName' value='1836019297'/>
<enum name='kTargetParentMovie' value='1836019809'/>
<enum name='kTargetQD3DNamedObjectName' value='1851879009'/>
<enum name='kTargetRootMovie' value='1836020335'/>
<enum name='kTargetSpriteID' value='1936746852'/>
<enum name='kTargetSpriteIndex' value='1936746862'/>
<enum name='kTargetSpriteName' value='1936748129'/>
<enum name='kTargetTrackID' value='1953655140'/>
<enum name='kTargetTrackIndex' value='1953655150'/>
<enum name='kTargetTrackName' value='1953656417'/>
<enum name='kTargetTrackType' value='1953657977'/>
<enum name='kTextAlignment' value='10'/>
<enum name='kTextBackColor' value='5'/>
<enum name='kTextDisplayFlags' value='13'/>
<enum name='kTextDropShadow' value='12'/>
<enum name='kTextEditState' value='21'/>
<enum name='kTextExportGetDisplayDataSelect' value='256'/>
<enum name='kTextExportGetSettingsSelect' value='259'/>
<enum name='kTextExportGetTimeFractionSelect' value='257'/>
<enum name='kTextExportSetSettingsSelect' value='260'/>
<enum name='kTextExportSetTimeFractionSelect' value='258'/>
<enum name='kTextFace' value='7'/>
<enum name='kTextFont' value='8'/>
<enum name='kTextForeColor' value='6'/>
<enum name='kTextHilite' value='11'/>
<enum name='kTextHyperTextColor' value='17'/>
<enum name='kTextHyperTextFace' value='16'/>
<enum name='kTextKeyEntry' value='18'/>
<enum name='kTextLength' value='22'/>
<enum name='kTextMediaAddHiliteSampleSelect' value='260'/>
<enum name='kTextMediaAddTESampleSelect' value='259'/>
<enum name='kTextMediaAddTextSampleSelect' value='258'/>
<enum name='kTextMediaDrawRawSelect' value='265'/>
<enum name='kTextMediaFindNextTextSelect' value='261'/>
<enum name='kTextMediaGetTextPropertySelect' value='269'/>
<enum name='kTextMediaHiliteTextSampleSelect' value='262'/>
<enum name='kTextMediaRawIdleSelect' value='268'/>
<enum name='kTextMediaRawSetupSelect' value='267'/>
<enum name='kTextMediaSetTextProcSelect' value='257'/>
<enum name='kTextMediaSetTextPropertySelect' value='266'/>
<enum name='kTextMediaSetTextSampleDataSelect' value='263'/>
<enum name='kTextMouseDown' value='19'/>
<enum name='kTextRelativeScroll' value='15'/>
<enum name='kTextScroll' value='14'/>
<enum name='kTextSelection' value='4'/>
<enum name='kTextSize' value='9'/>
<enum name='kTextTEStyle' value='3'/>
<enum name='kTextTextBox' value='20'/>
<enum name='kTextTextHandle' value='1'/>
<enum name='kTextTextPtr' value='2'/>
<enum name='kTop180Wipe' value='221'/>
<enum name='kTopBottomBowTieWipe' value='43'/>
<enum name='kTopCenterWipe' value='23'/>
<enum name='kTopLeftDiagonalMatrixWipe' value='303'/>
<enum name='kTopLeftWipe' value='3'/>
<enum name='kTopRightDiagonalMatrixWipe' value='304'/>
<enum name='kTopRightWipe' value='4'/>
<enum name='kTopToBottom180Wipe' value='211'/>
<enum name='kTopToBottom90Wipe' value='213'/>
<enum name='kTrackDefaultFocusFlags' value='1801875299'/>
<enum name='kTrackFocusCanEditFlag' value='1801806964'/>
<enum name='kTrackFocusDefaultRefcon' value='1802659174'/>
<enum name='kTrackFocusOn' value='1'/>
<enum name='kTrackHandlesTabs' value='2'/>
<enum name='kTrackModifierAngleAspectCamera' value='14'/>
<enum name='kTrackModifierCameraData' value='9'/>
<enum name='kTrackModifierInput' value='26990'/>
<enum name='kTrackModifierInputName' value='1851878757'/>
<enum name='kTrackModifierObjectCanBeHitTested' value='15'/>
<enum name='kTrackModifierObjectGraphicsMode' value='7'/>
<enum name='kTrackModifierObjectID' value='1868720484'/>
<enum name='kTrackModifierObjectImageIndex' value='11'/>
<enum name='kTrackModifierObjectLayer' value='12'/>
<enum name='kTrackModifierObjectMatrix' value='6'/>
<enum name='kTrackModifierObjectQTEventSend' value='1702260340'/>
<enum name='kTrackModifierObjectVisible' value='13'/>
<enum name='kTrackModifierPanAngle' value='1885433376'/>
<enum name='kTrackModifierReference' value='1936945763'/>
<enum name='kTrackModifierSoundLocalizationData' value='10'/>
<enum name='kTrackModifierTiltAngle' value='1953066100'/>
<enum name='kTrackModifierType' value='29817'/>
<enum name='kTrackModifierType3d4x4Matrix' value='8'/>
<enum name='kTrackModifierTypeBalance' value='4'/>
<enum name='kTrackModifierTypeClip' value='2'/>
<enum name='kTrackModifierTypeGraphicsMode' value='5'/>
<enum name='kTrackModifierTypeImage' value='1986618469'/>
<enum name='kTrackModifierTypeMatrix' value='1'/>
<enum name='kTrackModifierTypeVolume' value='3'/>
<enum name='kTrackModifierVerticalFieldOfViewAngle' value='1718580768'/>
<enum name='kTrackPropertyInstantiation' value='1768846196'/>
<enum name='kTrackPropertyMediaType' value='1836349808'/>
<enum name='kTrackReferenceChapterList' value='1667785072'/>
<enum name='kTrackReferenceModifier' value='1936945763'/>
<enum name='kTrackReferenceTimeCode' value='1953325924'/>
<enum name='kTransitionMajorClass' value='1953653102'/>
<enum name='kTransitionMinorClass' value='1953653102'/>
<enum name='kTravellingMatteEffectType' value='1953653110'/>
<enum name='kTriangleLeftWipe' value='106'/>
<enum name='kTriangleRightWipe' value='104'/>
<enum name='kTriangleUpsideDownWipe' value='105'/>
<enum name='kTriangleWipe' value='103'/>
<enum name='kTryVDIMask' value='8'/>
<enum name='kTuneDontClipNotes' value='2'/>
<enum name='kTuneExcludeEdgeNotes' value='4'/>
<enum name='kTuneGetIndexedNoteChannelSelect' value='8'/>
<enum name='kTuneGetNoteAllocatorSelect' value='23'/>
<enum name='kTuneGetPartMixSelect' value='30'/>
<enum name='kTuneGetStatusSelect' value='12'/>
<enum name='kTuneGetTimeBaseSelect' value='5'/>
<enum name='kTuneGetTimeScaleSelect' value='7'/>
<enum name='kTuneGetVolumeSelect' value='17'/>
<enum name='kTuneInstantSelect' value='11'/>
<enum name='kTuneLoopUntil' value='16'/>
<enum name='kTuneMixMute' value='1'/>
<enum name='kTuneMixSolo' value='2'/>
<enum name='kTunePlayConcurrent' value='64'/>
<enum name='kTunePlayDifference' value='32'/>
<enum name='kTunePlayerComponentType' value='1953853029'/>
<enum name='kTunePrerollSelect' value='18'/>
<enum name='kTuneQueueDepth' value='8'/>
<enum name='kTuneQueueSelect' value='10'/>
<enum name='kTuneQuickStart' value='8'/>
<enum name='kTuneSetBalanceSelect' value='26'/>
<enum name='kTuneSetHeaderSelect' value='4'/>
<enum name='kTuneSetHeaderWithSizeSelect' value='28'/>
<enum name='kTuneSetNoteChannelsSelect' value='20'/>
<enum name='kTuneSetPartMixSelect' value='29'/>
<enum name='kTuneSetPartTransposeSelect' value='21'/>
<enum name='kTuneSetSofterSelect' value='24'/>
<enum name='kTuneSetSoundLocalizationSelect' value='27'/>
<enum name='kTuneSetTimeScaleSelect' value='6'/>
<enum name='kTuneSetVolumeSelect' value='16'/>
<enum name='kTuneStartNewMaster' value='16384'/>
<enum name='kTuneStartNow' value='1'/>
<enum name='kTuneStopFade' value='1'/>
<enum name='kTuneStopInstant' value='4'/>
<enum name='kTuneStopReleaseChannels' value='8'/>
<enum name='kTuneStopSelect' value='13'/>
<enum name='kTuneStopSustain' value='2'/>
<enum name='kTuneTaskSelect' value='25'/>
<enum name='kTuneUnrollSelect' value='19'/>
<enum name='kTween3dInitialCondition' value='1768124004'/>
<enum name='kTweenData' value='1684108385'/>
<enum name='kTweenDuration' value='1953981557'/>
<enum name='kTweenEntry' value='1953981806'/>
<enum name='kTweenFlags' value='1718378855'/>
<enum name='kTweenInterpolationID' value='1768846450'/>
<enum name='kTweenOutputMax' value='1869439352'/>
<enum name='kTweenOutputMin' value='1869441390'/>
<enum name='kTweenPictureData' value='1346978644'/>
<enum name='kTweenRecordIsAtInterruptTime' value='1'/>
<enum name='kTweenRecordNoFlags' value='0'/>
<enum name='kTweenRegionData' value='1902408295'/>
<enum name='kTweenReturnDelta' value='1'/>
<enum name='kTweenSequenceElement' value='1936028005'/>
<enum name='kTweenStartOffset' value='1953985396'/>
<enum name='kTweenType' value='1953984116'/>
<enum name='kTweenType3dAngleAspectCameraData' value='862151009'/>
<enum name='kTweenType3dCameraData' value='862151021'/>
<enum name='kTweenType3dMatrix' value='862806388'/>
<enum name='kTweenType3dMatrixNonLinear' value='862874738'/>
<enum name='kTweenType3dQuaternion' value='863073633'/>
<enum name='kTweenType3dRotate' value='863137652'/>
<enum name='kTweenType3dRotateAboutAxis' value='863134072'/>
<enum name='kTweenType3dRotateAboutPoint' value='863134064'/>
<enum name='kTweenType3dRotateAboutVector' value='863139427'/>
<enum name='kTweenType3dScale' value='863200097'/>
<enum name='kTweenType3dSoundLocalizationData' value='863202403'/>
<enum name='kTweenType3dTranslate' value='863269473'/>
<enum name='kTweenType3dVRObject' value='863400559'/>
<enum name='kTweenTypeAtomList' value='1635020653'/>
<enum name='kTweenTypeFixed' value='3'/>
<enum name='kTweenTypeFixedPoint' value='12'/>
<enum name='kTweenTypeGraphicsModeWithRGBColor' value='9'/>
<enum name='kTweenTypeLong' value='2'/>
<enum name='kTweenTypeMatrix' value='7'/>
<enum name='kTweenTypeMultiMatrix' value='1836412013'/>
<enum name='kTweenTypePathToFixedPoint' value='1735943792'/>
<enum name='kTweenTypePathToMatrixRotation' value='1735946354'/>
<enum name='kTweenTypePathToMatrixTranslation' value='1735945588'/>
<enum name='kTweenTypePathToMatrixTranslationAndRotation' value='1735945586'/>
<enum name='kTweenTypePathXtoY' value='1735948409'/>
<enum name='kTweenTypePathYtoX' value='1735948664'/>
<enum name='kTweenTypePoint' value='4'/>
<enum name='kTweenTypePolygon' value='1886350457'/>
<enum name='kTweenTypeQDRect' value='5'/>
<enum name='kTweenTypeQDRegion' value='6'/>
<enum name='kTweenTypeQTFloatDouble' value='11'/>
<enum name='kTweenTypeQTFloatSingle' value='10'/>
<enum name='kTweenTypeRGBColor' value='8'/>
<enum name='kTweenTypeShort' value='1'/>
<enum name='kTweenTypeSpin' value='1936746862'/>
<enum name='kTweenerDoTweenSelect' value='2'/>
<enum name='kTweenerInitializeSelect' value='1'/>
<enum name='kTweenerResetSelect' value='3'/>
<enum name='kTx3gBlinkAtomType' value='1651273323'/>
<enum name='kTx3gFontTableAtomType' value='1718903138'/>
<enum name='kTx3gSampleType' value='1954034535'/>
<enum name='kUFSFullPathName' value='4'/>
<enum name='kUndefined1EventType' value='8'/>
<enum name='kUndefined2EventType' value='12'/>
<enum name='kUndefined3EventType' value='13'/>
<enum name='kUndefined4EventType' value='14'/>
<enum name='kUnknownKnobValue' value='2147483647'/>
<enum name='kUserDataAnimatedGIFBufferingSize' value='1734960738'/>
<enum name='kUserDataAnimatedGIFLoopCount' value='1734960739'/>
<enum name='kUserDataIPTC' value='1768977507'/>
<enum name='kUserDataMovieControllerType' value='1668577648'/>
<enum name='kUserDataName' value='1851878757'/>
<enum name='kUserDataTextAlbum' value='-1453233054'/>
<enum name='kUserDataTextArtist' value='-1455336876'/>
<enum name='kUserDataTextAuthor' value='-1453230732'/>
<enum name='kUserDataTextChapter' value='-1453102992'/>
<enum name='kUserDataTextComment' value='-1453101708'/>
<enum name='kUserDataTextComposer' value='-1453101203'/>
<enum name='kUserDataTextCopyright' value='-1453100935'/>
<enum name='kUserDataTextCreationDate' value='-1453039239'/>
<enum name='kUserDataTextDescription' value='-1453038221'/>
<enum name='kUserDataTextDirector' value='-1453037198'/>
<enum name='kUserDataTextDisclaimer' value='-1453037197'/>
<enum name='kUserDataTextEditDate1' value='-1452973007'/>
<enum name='kUserDataTextEncodedBy' value='-1452970397'/>
<enum name='kUserDataTextFullName' value='-1452383891'/>
<enum name='kUserDataTextGenre' value='-1452841618'/>
<enum name='kUserDataTextHostComputer' value='-1452772492'/>
<enum name='kUserDataTextInformation' value='-1452708250'/>
<enum name='kUserDataTextKeywords' value='-1452579463'/>
<enum name='kUserDataTextMake' value='-1452449429'/>
<enum name='kUserDataTextModel' value='-1452445852'/>
<enum name='kUserDataTextOriginalArtist' value='-1452314523'/>
<enum name='kUserDataTextOriginalFormat' value='-1452905100'/>
<enum name='kUserDataTextOriginalSource' value='-1452051869'/>
<enum name='kUserDataTextPerformers' value='-1452248474'/>
<enum name='kUserDataTextProducer' value='-1452248476'/>
<enum name='kUserDataTextProduct' value='-1454353852'/>
<enum name='kUserDataTextPublisher' value='-1452247710'/>
<enum name='kUserDataTextSoftware' value='-1452050574'/>
<enum name='kUserDataTextSpecialPlaybackRequirements' value='-1452120719'/>
<enum name='kUserDataTextTrack' value='-1451986325'/>
<enum name='kUserDataTextURLLink' value='-1451920788'/>
<enum name='kUserDataTextWarning' value='-1451789714'/>
<enum name='kUserDataTextWriter' value='-1451789708'/>
<enum name='kUserDataUnicodeBit' value='128'/>
<enum name='kVDAddKeyColorSelect' value='29'/>
<enum name='kVDCaptureStateChangingSelect' value='95'/>
<enum name='kVDClearClipRgnSelect' value='39'/>
<enum name='kVDCompressDoneSelect' value='70'/>
<enum name='kVDCompressOneFrameAsyncSelect' value='69'/>
<enum name='kVDCopyPreferredAudioDeviceSelect' value='99'/>
<enum name='kVDDoneSelect' value='67'/>
<enum name='kVDGetActiveSrcRectSelect' value='2'/>
<enum name='kVDGetBlackLevelValueSelect' value='56'/>
<enum name='kVDGetBrightnessSelect' value='13'/>
<enum name='kVDGetCLUTInUseSelect' value='40'/>
<enum name='kVDGetClipStateSelect' value='37'/>
<enum name='kVDGetCompressionTimeSelect' value='88'/>
<enum name='kVDGetCompressionTypesSelect' value='75'/>
<enum name='kVDGetContrastSelect' value='18'/>
<enum name='kVDGetCurrentFlagsSelect' value='26'/>
<enum name='kVDGetDMADepthsSelect' value='80'/>
<enum name='kVDGetDataRateSelect' value='78'/>
<enum name='kVDGetDeviceNameAndFlagsSelect' value='94'/>
<enum name='kVDGetDigitizerInfoSelect' value='25'/>
<enum name='kVDGetDigitizerRectSelect' value='4'/>
<enum name='kVDGetFieldPreferenceSelect' value='48'/>
<enum name='kVDGetHueSelect' value='19'/>
<enum name='kVDGetImageDescriptionSelect' value='72'/>
<enum name='kVDGetInputColorSpaceModeSelect' value='35'/>
<enum name='kVDGetInputFormatSelect' value='61'/>
<enum name='kVDGetInputGammaRecordSelect' value='54'/>
<enum name='kVDGetInputGammaValueSelect' value='11'/>
<enum name='kVDGetInputNameSelect' value='92'/>
<enum name='kVDGetInputSelect' value='63'/>
<enum name='kVDGetKeyColorRangeSelect' value='32'/>
<enum name='kVDGetKeyColorSelect' value='28'/>
<enum name='kVDGetMaskPixMapSelect' value='6'/>
<enum name='kVDGetMaskandValueSelect' value='43'/>
<enum name='kVDGetMaxAuxBufferSelect' value='23'/>
<enum name='kVDGetMaxSrcRectSelect' value='1'/>
<enum name='kVDGetNextKeyColorSelect' value='30'/>
<enum name='kVDGetNumberOfInputsSelect' value='60'/>
<enum name='kVDGetPLLFilterTypeSelect' value='42'/>
<enum name='kVDGetPlayThruDestinationSelect' value='8'/>
<enum name='kVDGetPreferredImageDimensionsSelect' value='91'/>
<enum name='kVDGetPreferredTimeScaleSelect' value='81'/>
<enum name='kVDGetSaturationSelect' value='21'/>
<enum name='kVDGetSharpnessSelect' value='20'/>
<enum name='kVDGetSoundInputDriverSelect' value='79'/>
<enum name='kVDGetSoundInputSourceSelect' value='87'/>
<enum name='kVDGetTimeCodeSelect' value='85'/>
<enum name='kVDGetUniqueIDsSelect' value='96'/>
<enum name='kVDGetVBlankRectSelect' value='5'/>
<enum name='kVDGetVideoDefaultsSelect' value='59'/>
<enum name='kVDGetWhiteLevelValueSelect' value='58'/>
<enum name='kVDGrabOneFrameAsyncSelect' value='66'/>
<enum name='kVDGrabOneFrameSelect' value='22'/>
<enum name='kVDIGControlledFrameRate' value='-1'/>
<enum name='kVDIIDCGetCSRDataSelect' value='515'/>
<enum name='kVDIIDCGetDefaultFeaturesSelect' value='514'/>
<enum name='kVDIIDCGetFeaturesForSpecifierSelect' value='517'/>
<enum name='kVDIIDCGetFeaturesSelect' value='512'/>
<enum name='kVDIIDCSetCSRDataSelect' value='516'/>
<enum name='kVDIIDCSetFeaturesSelect' value='513'/>
<enum name='kVDPreflightDestinationSelect' value='50'/>
<enum name='kVDPreflightGlobalRectSelect' value='51'/>
<enum name='kVDReleaseAsyncBuffersSelect' value='82'/>
<enum name='kVDReleaseCompressBufferSelect' value='71'/>
<enum name='kVDResetCompressSequenceSelect' value='73'/>
<enum name='kVDSelectUniqueIDsSelect' value='97'/>
<enum name='kVDSetBlackLevelValueSelect' value='55'/>
<enum name='kVDSetBrightnessSelect' value='12'/>
<enum name='kVDSetClipRgnSelect' value='38'/>
<enum name='kVDSetClipStateSelect' value='36'/>
<enum name='kVDSetCompressionOnOffSelect' value='74'/>
<enum name='kVDSetCompressionSelect' value='68'/>
<enum name='kVDSetContrastSelect' value='14'/>
<enum name='kVDSetDataRateSelect' value='84'/>
<enum name='kVDSetDestinationPortSelect' value='93'/>
<enum name='kVDSetDigitizerRectSelect' value='3'/>
<enum name='kVDSetDigitizerUserInterruptSelect' value='33'/>
<enum name='kVDSetFieldPreferenceSelect' value='47'/>
<enum name='kVDSetFrameRateSelect' value='77'/>
<enum name='kVDSetHueSelect' value='15'/>
<enum name='kVDSetInputColorSpaceModeSelect' value='34'/>
<enum name='kVDSetInputGammaRecordSelect' value='53'/>
<enum name='kVDSetInputGammaValueSelect' value='10'/>
<enum name='kVDSetInputSelect' value='62'/>
<enum name='kVDSetInputStandardSelect' value='64'/>
<enum name='kVDSetKeyColorRangeSelect' value='31'/>
<enum name='kVDSetKeyColorSelect' value='27'/>
<enum name='kVDSetMasterBlendLevelSelect' value='44'/>
<enum name='kVDSetPLLFilterTypeSelect' value='41'/>
<enum name='kVDSetPlayThruDestinationSelect' value='45'/>
<enum name='kVDSetPlayThruGlobalRectSelect' value='52'/>
<enum name='kVDSetPlayThruOnOffSelect' value='46'/>
<enum name='kVDSetPreferredImageDimensionsSelect' value='90'/>
<enum name='kVDSetPreferredPacketSizeSelect' value='89'/>
<enum name='kVDSetSaturationSelect' value='17'/>
<enum name='kVDSetSharpnessSelect' value='16'/>
<enum name='kVDSetTimeBaseSelect' value='76'/>
<enum name='kVDSetWhiteLevelValueSelect' value='57'/>
<enum name='kVDSetupBuffersSelect' value='65'/>
<enum name='kVDUseSafeBuffersSelect' value='86'/>
<enum name='kVDUseThisCLUTSelect' value='9'/>
<enum name='kVOpenBottomWipe' value='233'/>
<enum name='kVOpenLeftRightWipe' value='236'/>
<enum name='kVOpenLeftWipe' value='234'/>
<enum name='kVOpenRightWipe' value='232'/>
<enum name='kVOpenTopBottomWipe' value='235'/>
<enum name='kVOpenTopWipe' value='231'/>
<enum name='kVectorCodecType' value='1885434984'/>
<enum name='kVersionCheckMask' value='1'/>
<enum name='kVersionCheckMin' value='0'/>
<enum name='kVerticalBarnZigZagWipe' value='73'/>
<enum name='kVerticalMatrixWipe' value='302'/>
<enum name='kVerticalStartBottomMatrixWipe' value='321'/>
<enum name='kVerticalStartBottomOppositeMatrixWipe' value='323'/>
<enum name='kVerticalStartTopMatrixWipe' value='320'/>
<enum name='kVerticalStartTopOppositeMatrixWipe' value='322'/>
<enum name='kVerticalWaterfallLeftMatrixWipe' value='350'/>
<enum name='kVerticalWaterfallRightMatrixWipe' value='351'/>
<enum name='kVerticalZigZagWipe' value='71'/>
<enum name='kVideoCodecType' value='1919973985'/>
<enum name='kVideoColorInfoImageDescriptionExtensionType' value='1852009571'/>
<enum name='kVideoMediaGetCodecParameterSelect' value='272'/>
<enum name='kVideoMediaGetStallCountSelect' value='270'/>
<enum name='kVideoMediaGetStatisticsSelect' value='262'/>
<enum name='kVideoMediaResetStatisticsSelect' value='261'/>
<enum name='kVideoMediaSetCodecParameterSelect' value='271'/>
<enum name='kVoiceCountDynamic' value='-1'/>
<enum name='kWaterRippleCodecType' value='1919512684'/>
<enum name='kWhichAction' value='2003331427'/>
<enum name='kWindowsRawCodecType' value='1465008471'/>
<enum name='kWipeMinorClass' value='2003398757'/>
<enum name='kWipeTransitionType' value='1936552052'/>
<enum name='kXControlEventControllerFieldPos' value='0'/>
<enum name='kXControlEventControllerFieldWidth' value='16'/>
<enum name='kXControlEventLen' value='2'/>
<enum name='kXControlEventType' value='10'/>
<enum name='kXControlEventValueFieldPos' value='0'/>
<enum name='kXControlEventValueFieldWidth' value='16'/>
<enum name='kXEventLen' value='2'/>
<enum name='kXEventLengthBits' value='2'/>
<enum name='kXEventPartFieldPos' value='16'/>
<enum name='kXEventPartFieldWidth' value='12'/>
<enum name='kXEventTypeFieldPos' value='28'/>
<enum name='kXEventTypeFieldWidth' value='4'/>
<enum name='kXMLParseAddAttributeAndValueSelect' value='8'/>
<enum name='kXMLParseAddAttributeSelect' value='6'/>
<enum name='kXMLParseAddAttributeValueKindSelect' value='10'/>
<enum name='kXMLParseAddElementSelect' value='5'/>
<enum name='kXMLParseAddMultipleAttributesAndValuesSelect' value='9'/>
<enum name='kXMLParseAddMultipleAttributesSelect' value='7'/>
<enum name='kXMLParseAddNameSpaceSelect' value='11'/>
<enum name='kXMLParseDataRefSelect' value='1'/>
<enum name='kXMLParseDisposeXMLDocSelect' value='3'/>
<enum name='kXMLParseFileSelect' value='2'/>
<enum name='kXMLParseGetDetailedParseErrorSelect' value='4'/>
<enum name='kXMLParseSetCDataHandlerSelect' value='21'/>
<enum name='kXMLParseSetCharDataHandlerSelect' value='18'/>
<enum name='kXMLParseSetCommentHandlerSelect' value='20'/>
<enum name='kXMLParseSetEndDocumentHandlerSelect' value='15'/>
<enum name='kXMLParseSetEndElementHandlerSelect' value='17'/>
<enum name='kXMLParseSetEventParseRefConSelect' value='13'/>
<enum name='kXMLParseSetOffsetAndLimitSelect' value='12'/>
<enum name='kXMLParseSetPreprocessInstructionHandlerSelect' value='19'/>
<enum name='kXMLParseSetStartDocumentHandlerSelect' value='14'/>
<enum name='kXMLParseSetStartElementHandlerSelect' value='16'/>
<enum name='kXNoteEventDurationFieldPos' value='0'/>
<enum name='kXNoteEventDurationFieldWidth' value='22'/>
<enum name='kXNoteEventDurationMax' value='4194303'/>
<enum name='kXNoteEventLen' value='2'/>
<enum name='kXNoteEventPitchFieldPos' value='0'/>
<enum name='kXNoteEventPitchFieldWidth' value='16'/>
<enum name='kXNoteEventType' value='9'/>
<enum name='kXNoteEventVolumeFieldPos' value='22'/>
<enum name='kXNoteEventVolumeFieldWidth' value='7'/>
<enum name='kYUV420CodecType' value='2033463856'/>
<enum name='kYUV420PixelFormat' value='2033463856'/>
<enum name='kZoomTransitionType' value='2054123373'/>
<enum name='kaiCopyrightType' value='-1453100935'/>
<enum name='kaiInstGMQualityType' value='1903518060'/>
<enum name='kaiInstInfoType' value='1768517222'/>
<enum name='kaiInstrumentRefType' value='1769104742'/>
<enum name='kaiKeyRangeInfoType' value='1936289382'/>
<enum name='kaiKnobListType' value='1802396268'/>
<enum name='kaiLibraryDescType' value='1818522467'/>
<enum name='kaiLibraryInfoType' value='1818848870'/>
<enum name='kaiNoteRequestInfoType' value='1853125233'/>
<enum name='kaiOtherStrType' value='1937011232'/>
<enum name='kaiPictType' value='1885954932'/>
<enum name='kaiSampleDataQUIDType' value='1903520100'/>
<enum name='kaiSampleDataType' value='1935958388'/>
<enum name='kaiSampleDescType' value='1935962979'/>
<enum name='kaiSampleInfoType' value='1936550254'/>
<enum name='kaiToneDescType' value='1953459813'/>
<enum name='kaiWriterType' value='-1451789708'/>
<enum name='keepInRam' value='1'/>
<enum name='linearMatrixType' value='4'/>
<enum name='linearTranslateMatrixType' value='5'/>
<enum name='loadBackwardTrackEdits' value='16'/>
<enum name='loadForwardTrackEdits' value='8'/>
<enum name='loopTimeBase' value='1'/>
<enum name='mAtEnd' value='16'/>
<enum name='mDidDraw' value='1'/>
<enum name='mDisableIdleActions' value='4096'/>
<enum name='mDoIdleActionsBeforeDraws' value='2048'/>
<enum name='mDrawAgain' value='8'/>
<enum name='mHitTestBounds' value='1'/>
<enum name='mHitTestImage' value='2'/>
<enum name='mHitTestInvisible' value='4'/>
<enum name='mHitTestIsClick' value='8'/>
<enum name='mInvisible' value='2'/>
<enum name='mMustDraw' value='8'/>
<enum name='mNeedsToDraw' value='4'/>
<enum name='mOpaque' value='1'/>
<enum name='mPartialDraw' value='16'/>
<enum name='mPrecompositeOnly' value='512'/>
<enum name='mPreflightDraw' value='32'/>
<enum name='mSoundOnly' value='1024'/>
<enum name='mSyncDrawing' value='64'/>
<enum name='mWantIdleActions' value='32'/>
<enum name='maintainTimeBaseZero' value='4'/>
<enum name='matrixFlagScale1x' value='64'/>
<enum name='matrixFlagScale2x' value='128'/>
<enum name='matrixFlagScaleHalf' value='32'/>
<enum name='mcActionActivate' value='3'/>
<enum name='mcActionAddActionNotification' value='95'/>
<enum name='mcActionAdjustCursor' value='65'/>
<enum name='mcActionAppMessageReceived' value='85'/>
<enum name='mcActionAutoPlay' value='83'/>
<enum name='mcActionBadgeClick' value='44'/>
<enum name='mcActionChapterListChanged' value='99'/>
<enum name='mcActionClickAndHoldPoint' value='67'/>
<enum name='mcActionControllerSizeChanged' value='26'/>
<enum name='mcActionCurrentChapterChanged' value='102'/>
<enum name='mcActionCustomButtonClick' value='60'/>
<enum name='mcActionDeactivate' value='4'/>
<enum name='mcActionDoScript' value='78'/>
<enum name='mcActionDraw' value='2'/>
<enum name='mcActionEditStateChanged' value='101'/>
<enum name='mcActionEvaluateExpression' value='73'/>
<enum name='mcActionEvaluateExpressionWithType' value='89'/>
<enum name='mcActionExecuteAllActionsForQTEvent' value='63'/>
<enum name='mcActionExecuteOneActionForQTEvent' value='64'/>
<enum name='mcActionFetchParameterAs' value='74'/>
<enum name='mcActionForceTimeTableUpdate' value='61'/>
<enum name='mcActionGetChapterTime' value='71'/>
<enum name='mcActionGetConnectionStatus' value='98'/>
<enum name='mcActionGetCursorByID' value='75'/>
<enum name='mcActionGetCursorSettingEnabled' value='56'/>
<enum name='mcActionGetDragEnabled' value='51'/>
<enum name='mcActionGetExternalMovie' value='70'/>
<enum name='mcActionGetFlags' value='39'/>
<enum name='mcActionGetIndChapter' value='80'/>
<enum name='mcActionGetKeyboardFocus' value='93'/>
<enum name='mcActionGetKeysEnabled' value='33'/>
<enum name='mcActionGetLoopIsPalindrome' value='24'/>
<enum name='mcActionGetLooping' value='22'/>
<enum name='mcActionGetMovieActive' value='92'/>
<enum name='mcActionGetMovieID' value='91'/>
<enum name='mcActionGetMovieName' value='90'/>
<enum name='mcActionGetNextURL' value='76'/>
<enum name='mcActionGetPlayEveryFrame' value='41'/>
<enum name='mcActionGetPlayRate' value='42'/>
<enum name='mcActionGetPlaySelection' value='35'/>
<enum name='mcActionGetSelectionBegin' value='53'/>
<enum name='mcActionGetSelectionDuration' value='54'/>
<enum name='mcActionGetTimeSliderRect' value='49'/>
<enum name='mcActionGetUseBadge' value='37'/>
<enum name='mcActionGetVolume' value='15'/>
<enum name='mcActionGoToTime' value='12'/>
<enum name='mcActionIdle' value='1'/>
<enum name='mcActionKey' value='6'/>
<enum name='mcActionKeyUp' value='97'/>
<enum name='mcActionLinkToURL' value='59'/>
<enum name='mcActionLinkToURLExtended' value='81'/>
<enum name='mcActionMouseDown' value='5'/>
<enum name='mcActionMovieChanged' value='77'/>
<enum name='mcActionMovieClick' value='45'/>
<enum name='mcActionMovieEdited' value='50'/>
<enum name='mcActionMovieFinished' value='86'/>
<enum name='mcActionMovieLoadStateChanged' value='100'/>
<enum name='mcActionPauseToBuffer' value='84'/>
<enum name='mcActionPerformActionList' value='72'/>
<enum name='mcActionPlay' value='8'/>
<enum name='mcActionPrerollAndPlay' value='55'/>
<enum name='mcActionRemoveActionNotification' value='96'/>
<enum name='mcActionRestartAtTime' value='79'/>
<enum name='mcActionResume' value='47'/>
<enum name='mcActionSetColorTable' value='58'/>
<enum name='mcActionSetControllerKeysEnabled' value='48'/>
<enum name='mcActionSetControllerTimeLimits' value='62'/>
<enum name='mcActionSetCursorSettingEnabled' value='57'/>
<enum name='mcActionSetDragEnabled' value='52'/>
<enum name='mcActionSetFlags' value='38'/>
<enum name='mcActionSetGrowBoxBounds' value='25'/>
<enum name='mcActionSetKeyboardFocus' value='94'/>
<enum name='mcActionSetKeysEnabled' value='32'/>
<enum name='mcActionSetLoopIsPalindrome' value='23'/>
<enum name='mcActionSetLooping' value='21'/>
<enum name='mcActionSetPlayEveryFrame' value='40'/>
<enum name='mcActionSetPlaySelection' value='34'/>
<enum name='mcActionSetSelectionBegin' value='29'/>
<enum name='mcActionSetSelectionDuration' value='30'/>
<enum name='mcActionSetUseBadge' value='36'/>
<enum name='mcActionSetVolume' value='14'/>
<enum name='mcActionSetVolumeStep' value='82'/>
<enum name='mcActionShowBalloon' value='43'/>
<enum name='mcActionShowMessageString' value='68'/>
<enum name='mcActionShowStatusString' value='69'/>
<enum name='mcActionStep' value='18'/>
<enum name='mcActionSuspend' value='46'/>
<enum name='mcActionUseTrackForTimeTable' value='66'/>
<enum name='mcFlagQTVRExplicitFlagSet' value='-2147483648'/>
<enum name='mcFlagQTVRSuppressBackBtn' value='65536'/>
<enum name='mcFlagQTVRSuppressHelpText' value='1048576'/>
<enum name='mcFlagQTVRSuppressHotSpotBtn' value='262144'/>
<enum name='mcFlagQTVRSuppressHotSpotNames' value='2097152'/>
<enum name='mcFlagQTVRSuppressTranslateBtn' value='524288'/>
<enum name='mcFlagQTVRSuppressZoomBtns' value='131072'/>
<enum name='mcFlagSuppressMovieFrame' value='1'/>
<enum name='mcFlagSuppressSpeakerButton' value='4'/>
<enum name='mcFlagSuppressStepButtons' value='2'/>
<enum name='mcFlagsDontInvalidate' value='16'/>
<enum name='mcFlagsUseCustomButton' value='32'/>
<enum name='mcFlagsUseWindowPalette' value='8'/>
<enum name='mcInfoClearAvailable' value='16'/>
<enum name='mcInfoCopyAvailable' value='4'/>
<enum name='mcInfoCutAvailable' value='2'/>
<enum name='mcInfoEditingEnabled' value='512'/>
<enum name='mcInfoHasSound' value='32'/>
<enum name='mcInfoIsInPalindrome' value='256'/>
<enum name='mcInfoIsLooping' value='128'/>
<enum name='mcInfoIsPlaying' value='64'/>
<enum name='mcInfoMovieIsInteractive' value='1024'/>
<enum name='mcInfoPasteAvailable' value='8'/>
<enum name='mcInfoUndoAvailable' value='1'/>
<enum name='mcMenuClear' value='6'/>
<enum name='mcMenuCopy' value='4'/>
<enum name='mcMenuCut' value='3'/>
<enum name='mcMenuPaste' value='5'/>
<enum name='mcMenuUndo' value='1'/>
<enum name='mcNotVisible' value='8'/>
<enum name='mcPositionDontInvalidate' value='32'/>
<enum name='mcScaleMovieToFit' value='2'/>
<enum name='mcTopLeftMovie' value='1'/>
<enum name='mcWithBadge' value='4'/>
<enum name='mcWithFrame' value='16'/>
<enum name='mediaHandlerFlagBaseClient' value='1'/>
<enum name='mediaQualityBest' value='192'/>
<enum name='mediaQualityBetter' value='128'/>
<enum name='mediaQualityDraft' value='0'/>
<enum name='mediaQualityNormal' value='64'/>
<enum name='mediaSampleDependsOnOthers' value='268435456'/>
<enum name='mediaSampleDoesNotDependOnOthers' value='536870912'/>
<enum name='mediaSampleDroppable' value='134217728'/>
<enum name='mediaSampleEarlierDisplayTimesAllowed' value='1073741824'/>
<enum name='mediaSampleHasNoRedundantCoding' value='33554432'/>
<enum name='mediaSampleHasRedundantCoding' value='16777216'/>
<enum name='mediaSampleIsDependedOnByOthers' value='67108864'/>
<enum name='mediaSampleIsNotDependedOnByOthers' value='134217728'/>
<enum name='mediaSampleNotSync' value='1'/>
<enum name='mediaSamplePartialSync' value='65536'/>
<enum name='mediaSampleShadowSync' value='2'/>
<enum name='midiManagerAbsentErr' value='2147547103'/>
<enum name='movieDrawingCallAlways' value='1'/>
<enum name='movieDrawingCallWhenChanged' value='0'/>
<enum name='movieExecuteWiredActionDontExecute' value='1'/>
<enum name='movieExportChannelLayoutSize' value='1668051834'/>
<enum name='movieExportDuration' value='1685418593'/>
<enum name='movieExportHeight' value='1751476084'/>
<enum name='movieExportMagicCookieSize' value='1835234170'/>
<enum name='movieExportMustGetSourceMediaType' value='524288'/>
<enum name='movieExportNeedsResourceFork' value='131072'/>
<enum name='movieExportSourceApertureMode' value='1936875888'/>
<enum name='movieExportTimeScale' value='1953330019'/>
<enum name='movieExportUseConfiguredSettings' value='1969448551'/>
<enum name='movieExportUseHighResolutionAudioProperties' value='1752326517'/>
<enum name='movieExportVideoFilter' value='1768320116'/>
<enum name='movieExportWidth' value='2003072104'/>
<enum name='movieFileSpecValid' value='8'/>
<enum name='movieImportCreateTrack' value='1'/>
<enum name='movieImportInParallel' value='2'/>
<enum name='movieImportMustGetDestinationMediaType' value='65536'/>
<enum name='movieImportMustUseTrack' value='4'/>
<enum name='movieImportResultComplete' value='64'/>
<enum name='movieImportResultNeedIdles' value='32'/>
<enum name='movieImportResultUsedMultipleTracks' value='8'/>
<enum name='movieImportSubTypeIsFileExtension' value='4096'/>
<enum name='movieImportWithIdle' value='16'/>
<enum name='movieImporterIsXMLBased' value='32'/>
<enum name='movieInDataForkResID' value='-1'/>
<enum name='movieProgressClose' value='2'/>
<enum name='movieProgressOpen' value='0'/>
<enum name='movieProgressUpdatePercent' value='1'/>
<enum name='movieScrapDontZeroScrap' value='1'/>
<enum name='movieScrapOnlyPutMovie' value='2'/>
<enum name='movieToFileOnlyExport' value='4'/>
<enum name='movieTrackCharacteristic' value='2'/>
<enum name='movieTrackEnabledOnly' value='4'/>
<enum name='movieTrackMediaType' value='1'/>
<enum name='nameSpaceIDNone' value='0'/>
<enum name='newMovieActive' value='1'/>
<enum name='newMovieAsyncOK' value='256'/>
<enum name='newMovieDontAskUnresolvedDataRefs' value='4'/>
<enum name='newMovieDontAutoAlternates' value='8'/>
<enum name='newMovieDontAutoUpdateClock' value='32'/>
<enum name='newMovieDontInteractWithUser' value='2048'/>
<enum name='newMovieDontResolveDataRefs' value='2'/>
<enum name='newMovieDontUpdateForeBackPointers' value='16'/>
<enum name='newMovieIdleImportOK' value='1024'/>
<enum name='nextTimeEdgeOK' value='16384'/>
<enum name='nextTimeIgnoreActiveSegment' value='32768'/>
<enum name='nextTimeMediaEdit' value='2'/>
<enum name='nextTimeMediaSample' value='1'/>
<enum name='nextTimePartialSyncSample' value='32'/>
<enum name='nextTimeStep' value='16'/>
<enum name='nextTimeSyncSample' value='8'/>
<enum name='nextTimeTrackEdit' value='4'/>
<enum name='noDefaultOpcodes' value='4'/>
<enum name='notImplementedMusicErr' value='2147547113'/>
<enum name='noteChannelNotAllocatedErr' value='2147547099'/>
<enum name='ntscIn' value='0'/>
<enum name='ntscReallyIn' value='3'/>
<enum name='oddField1ToEvenFieldOut' value='4'/>
<enum name='oddField1ToOddFieldOut' value='8'/>
<enum name='oddField2ToEvenFieldOut' value='64'/>
<enum name='oddField2ToOddFieldOut' value='128'/>
<enum name='palIn' value='1'/>
<enum name='palindromeLoopTimeBase' value='2'/>
<enum name='pasteInParallel' value='1'/>
<enum name='pdActionActivateSubPanel' value='10'/>
<enum name='pdActionCompactSample' value='18'/>
<enum name='pdActionConductStopAlert' value='11'/>
<enum name='pdActionConfirmDialog' value='1'/>
<enum name='pdActionConvertSettingsToText' value='39'/>
<enum name='pdActionConvertSettingsToXML' value='37'/>
<enum name='pdActionConvertSettingsToXMLWithComments' value='38'/>
<enum name='pdActionConvertXMLToSettings' value='40'/>
<enum name='pdActionCustomDisposeControl' value='24'/>
<enum name='pdActionCustomDoEditCommand' value='35'/>
<enum name='pdActionCustomGetEnableValue' value='32'/>
<enum name='pdActionCustomGetValue' value='34'/>
<enum name='pdActionCustomHandleEvent' value='27'/>
<enum name='pdActionCustomNewControl' value='23'/>
<enum name='pdActionCustomPositionControl' value='25'/>
<enum name='pdActionCustomSetEditCallout' value='31'/>
<enum name='pdActionCustomSetEditMenu' value='29'/>
<enum name='pdActionCustomSetFocus' value='28'/>
<enum name='pdActionCustomSetPreviewPicture' value='30'/>
<enum name='pdActionCustomSetSampleTime' value='33'/>
<enum name='pdActionCustomShowHideControl' value='26'/>
<enum name='pdActionDoEditCommand' value='21'/>
<enum name='pdActionFetchPreview' value='13'/>
<enum name='pdActionFocusBackward' value='4'/>
<enum name='pdActionFocusFirst' value='1'/>
<enum name='pdActionFocusForward' value='3'/>
<enum name='pdActionFocusLast' value='2'/>
<enum name='pdActionFocusOff' value='0'/>
<enum name='pdActionGetDialogSettings' value='15'/>
<enum name='pdActionGetDialogValues' value='4'/>
<enum name='pdActionGetNextSample' value='16'/>
<enum name='pdActionGetPreviousSample' value='17'/>
<enum name='pdActionGetSubPanelMenu' value='9'/>
<enum name='pdActionGetSubPanelMenuValue' value='22'/>
<enum name='pdActionModelessCallback' value='12'/>
<enum name='pdActionRunInEventLoop' value='36'/>
<enum name='pdActionSetAppleMenu' value='2'/>
<enum name='pdActionSetColorPickerEventProc' value='7'/>
<enum name='pdActionSetDialogSettings' value='14'/>
<enum name='pdActionSetDialogTitle' value='8'/>
<enum name='pdActionSetEditCallout' value='19'/>
<enum name='pdActionSetEditMenu' value='3'/>
<enum name='pdActionSetPreviewPicture' value='6'/>
<enum name='pdActionSetPreviewUserItem' value='5'/>
<enum name='pdActionSetPropertyComponent' value='41'/>
<enum name='pdActionSetSampleTime' value='20'/>
<enum name='pdOptionsAllowOptionalInterpolations' value='2'/>
<enum name='pdOptionsCollectOneValue' value='1'/>
<enum name='pdOptionsDisplayAsSheet' value='32'/>
<enum name='pdOptionsEditCurrentEffectOnly' value='8'/>
<enum name='pdOptionsHidePreview' value='16'/>
<enum name='pdOptionsModalDialogBox' value='4'/>
<enum name='pdSampleTimeDisplayOptionsNone' value='0'/>
<enum name='perspectiveMatrixType' value='6'/>
<enum name='pnotComponentNeedsNoCache' value='2'/>
<enum name='pnotComponentWantsEvents' value='1'/>
<enum name='preloadAlways' value='1'/>
<enum name='preloadOnlyIfEnabled' value='2'/>
<enum name='progressOpAddMovieSelection' value='5'/>
<enum name='progressOpCopy' value='6'/>
<enum name='progressOpCut' value='7'/>
<enum name='progressOpExportMovie' value='12'/>
<enum name='progressOpFlatten' value='1'/>
<enum name='progressOpImportMovie' value='11'/>
<enum name='progressOpInsertMovieSegment' value='3'/>
<enum name='progressOpInsertTrackSegment' value='2'/>
<enum name='progressOpLoadMediaIntoRam' value='10'/>
<enum name='progressOpLoadMovieIntoRam' value='8'/>
<enum name='progressOpLoadTrackIntoRam' value='9'/>
<enum name='progressOpPaste' value='4'/>
<enum name='qtcbNeedsRateChanges' value='1'/>
<enum name='qtcbNeedsStartStopChanges' value='4'/>
<enum name='qtcbNeedsTimeChanges' value='2'/>
<enum name='quickTimeImageFileColorSyncProfileAtom' value='1768514403'/>
<enum name='quickTimeImageFileImageDataAtom' value='1768186228'/>
<enum name='quickTimeImageFileImageDescriptionAtom' value='1768190819'/>
<enum name='quickTimeImageFileMetaDataAtom' value='1835365473'/>
<enum name='reservedForUseByGraphicsImporters' value='8388608'/>
<enum name='rgbComponentIn' value='2'/>
<enum name='rgbComponentSyncIn' value='3'/>
<enum name='sVideoIn' value='1'/>
<enum name='scAllowEncodingWithCompressionSession' value='256'/>
<enum name='scAllowZeroFrameRate' value='4'/>
<enum name='scAllowZeroKeyFrameRate' value='8'/>
<enum name='scAvailableCompressionListType' value='1635148137'/>
<enum name='scCancelItem' value='2'/>
<enum name='scCodecFlagsType' value='1667656807'/>
<enum name='scCodecManufacturerType' value='1668114034'/>
<enum name='scCodecSettingsType' value='1667523939'/>
<enum name='scColorTableType' value='1668052340'/>
<enum name='scCompressFlagIgnoreIdenticalFrames' value='1'/>
<enum name='scCompressImage' value='11'/>
<enum name='scCompressPicture' value='12'/>
<enum name='scCompressPictureFile' value='13'/>
<enum name='scCompressSequenceBegin' value='15'/>
<enum name='scCompressSequenceEnd' value='17'/>
<enum name='scCompressSequenceFrame' value='16'/>
<enum name='scCompressionListType' value='1668577644'/>
<enum name='scCustomItem' value='3'/>
<enum name='scDataRateSettingsType' value='1685217652'/>
<enum name='scDefaultPictFileSettings' value='19'/>
<enum name='scDefaultPictHandleSettings' value='18'/>
<enum name='scDefaultPixMapSettings' value='20'/>
<enum name='scDisableFrameRateItem' value='64'/>
<enum name='scDisableFrameReorderingItem' value='512'/>
<enum name='scDisableMultiPassEncodingItem' value='1024'/>
<enum name='scDontDetermineSettingsFromTestImage' value='4'/>
<enum name='scExtendedProcsType' value='2020635235'/>
<enum name='scForceKeyValueType' value='1802725741'/>
<enum name='scGetBestDeviceRect' value='7'/>
<enum name='scGetCompression' value='1'/>
<enum name='scGetInfo' value='21'/>
<enum name='scListEveryCodec' value='2'/>
<enum name='scNewGWorld' value='23'/>
<enum name='scOKItem' value='1'/>
<enum name='scPositionDialog' value='3'/>
<enum name='scPositionRect' value='2'/>
<enum name='scPreferCropping' value='1'/>
<enum name='scPreferScaling' value='2'/>
<enum name='scPreferScalingAndCropping' value='3'/>
<enum name='scPreferenceFlagsType' value='1886545254'/>
<enum name='scProgressProcType' value='1886547815'/>
<enum name='scRequestImageSettings' value='10'/>
<enum name='scRequestSequenceSettings' value='14'/>
<enum name='scSequenceIDType' value='1936028021'/>
<enum name='scSetInfo' value='22'/>
<enum name='scSetTestImagePictFile' value='5'/>
<enum name='scSetTestImagePictHandle' value='4'/>
<enum name='scSetTestImagePixMap' value='6'/>
<enum name='scSettingsChangedItem' value='-1'/>
<enum name='scSettingsStateType' value='1936946273'/>
<enum name='scShowBestDepth' value='16'/>
<enum name='scShowDataRateAsKilobits' value='128'/>
<enum name='scShowMotionSettings' value='1'/>
<enum name='scSoundChannelCountType' value='1936941923'/>
<enum name='scSoundCompressionType' value='1936941940'/>
<enum name='scSoundInputSampleRateType' value='1936943474'/>
<enum name='scSoundSampleRateChangeOK' value='1919119211'/>
<enum name='scSoundSampleRateType' value='1936945780'/>
<enum name='scSoundSampleSizeType' value='1936946035'/>
<enum name='scSoundVBRCompressionOK' value='1668702834'/>
<enum name='scSpatialSettingsType' value='1936749676'/>
<enum name='scTemporalSettingsType' value='1953526380'/>
<enum name='scTestImageHeight' value='80'/>
<enum name='scTestImageWidth' value='80'/>
<enum name='scUseMovableModal' value='32'/>
<enum name='scUserCancelled' value='1'/>
<enum name='scVideoAllowFrameReorderingType' value='1650881121'/>
<enum name='scVideoMultiPassEncodingSettingsType' value='1836082547'/>
<enum name='scWindowOptionsType' value='1936221541'/>
<enum name='scWindowPositionType' value='2003723383'/>
<enum name='scWindowRefKindCarbon' value='1667330658'/>
<enum name='scaleMatrixType' value='2'/>
<enum name='scaleTranslateMatrixType' value='3'/>
<enum name='sdiIn' value='7'/>
<enum name='searchTextDontGoToFoundTime' value='65536'/>
<enum name='searchTextDontHiliteFoundText' value='131072'/>
<enum name='searchTextEnabledTracksOnly' value='524288'/>
<enum name='searchTextOneTrackOnly' value='262144'/>
<enum name='secamIn' value='2'/>
<enum name='seqGrabAlwaysUseTimeBase' value='16'/>
<enum name='seqGrabAppendToFile' value='8'/>
<enum name='seqGrabCanMoveWindowWhileRecording' value='16'/>
<enum name='seqGrabDataProcDoesOverlappingReads' value='256'/>
<enum name='seqGrabDataProcIsInterruptSafe' value='128'/>
<enum name='seqGrabDoNotBufferizeData' value='8'/>
<enum name='seqGrabDontAddMovieResource' value='16'/>
<enum name='seqGrabDontMakeMovie' value='32'/>
<enum name='seqGrabDontPreAllocateFileSize' value='512'/>
<enum name='seqGrabDontUseTempMemory' value='4'/>
<enum name='seqGrabHasBounds' value='1'/>
<enum name='seqGrabHasDiscreteSamples' value='4'/>
<enum name='seqGrabHasVolume' value='2'/>
<enum name='seqGrabLowLatencyCapture' value='8'/>
<enum name='seqGrabPause' value='1'/>
<enum name='seqGrabPauseForMenu' value='3'/>
<enum name='seqGrabPlayDuringRecord' value='4'/>
<enum name='seqGrabPreExtendFile' value='64'/>
<enum name='seqGrabPreview' value='2'/>
<enum name='seqGrabRecord' value='1'/>
<enum name='seqGrabRecordPreferQualityOverFrameRate' value='32'/>
<enum name='seqGrabSettingsPreviewOnly' value='1'/>
<enum name='seqGrabToDisk' value='1'/>
<enum name='seqGrabToMemory' value='2'/>
<enum name='seqGrabUnpause' value='0'/>
<enum name='seqGrabWriteAppend' value='0'/>
<enum name='seqGrabWriteFill' value='2'/>
<enum name='seqGrabWriteReserve' value='1'/>
<enum name='sgChannelAtom' value='1667785070'/>
<enum name='sgChannelDescription' value='1667527523'/>
<enum name='sgChannelSettings' value='1668506996'/>
<enum name='sgChannelSettingsAtom' value='1668575085'/>
<enum name='sgClipType' value='1668049264'/>
<enum name='sgDeviceDisplayNameType' value='1684955501'/>
<enum name='sgDeviceInputNameFlagInputUnavailable' value='1'/>
<enum name='sgDeviceListDontCheckAvailability' value='2'/>
<enum name='sgDeviceListIncludeInputs' value='4'/>
<enum name='sgDeviceListWithIcons' value='1'/>
<enum name='sgDeviceNameFlagDeviceUnavailable' value='1'/>
<enum name='sgDeviceNameFlagShowInputsAsDevices' value='2'/>
<enum name='sgDeviceNameType' value='1851878757'/>
<enum name='sgDeviceUIDType' value='1685416292'/>
<enum name='sgFlagAllowNonRGBPixMaps' value='2'/>
<enum name='sgFlagControlledGrab' value='1'/>
<enum name='sgInputUIDType' value='1769302372'/>
<enum name='sgMatrixType' value='1836348024'/>
<enum name='sgPanelDescription' value='1885631331'/>
<enum name='sgPanelFlagForPanel' value='1'/>
<enum name='sgPanelSettings' value='1886610804'/>
<enum name='sgPanelSettingsAtom' value='1886678893'/>
<enum name='sgPlayFlagsType' value='1886157158'/>
<enum name='sgSetSettingsBegin' value='1'/>
<enum name='sgSetSettingsEnd' value='2'/>
<enum name='sgUsageType' value='1970496800'/>
<enum name='sgVolumeType' value='1987013749'/>
<enum name='sgcAudioChannelLayout' value='1668047225'/>
<enum name='sgcAudioChannelMap' value='1668112752'/>
<enum name='sgcAudioChunkSize' value='1667788395'/>
<enum name='sgcAudioCodecSpecificSettingsArray' value='1667527540'/>
<enum name='sgcAudioDeviceName' value='1851878757'/>
<enum name='sgcAudioDeviceUID' value='1969841184'/>
<enum name='sgcAudioHardwarePlaythruEnabled' value='1751216740'/>
<enum name='sgcAudioInputSelection' value='1768845428'/>
<enum name='sgcAudioLevelMetersEnabled' value='1819108724'/>
<enum name='sgcAudioMagicCookie' value='1802857321'/>
<enum name='sgcAudioMasterGain' value='1835491694'/>
<enum name='sgcAudioMixerCoefficients' value='1835628643'/>
<enum name='sgcAudioOutputSelection' value='1869901940'/>
<enum name='sgcAudioOutputSettingsAtom' value='1635083375'/>
<enum name='sgcAudioPerChannelGain' value='1667719534'/>
<enum name='sgcAudioPreviewDeviceSettingsAtom' value='1635083376'/>
<enum name='sgcAudioRecordDeviceSettingsAtom' value='1635083378'/>
<enum name='sgcAudioSettingsVersion' value='1986359923'/>
<enum name='sgcAudioSoftPreviewLatency' value='1936482676'/>
<enum name='sgcAudioStreamFormat' value='1718775156'/>
<enum name='sgcSoundChannelCountType' value='1935894638'/>
<enum name='sgcSoundCodecSettingsType' value='1667523939'/>
<enum name='sgcSoundCompressionType' value='1935895920'/>
<enum name='sgcSoundGainType' value='1734437230'/>
<enum name='sgcSoundInputType' value='1936289392'/>
<enum name='sgcSoundSampleRateType' value='1936875892'/>
<enum name='sgcSoundSampleSizeType' value='1936943482'/>
<enum name='sgcVideoBlackLevelType' value='1651272556'/>
<enum name='sgcVideoBrigtnessType' value='1651665268'/>
<enum name='sgcVideoContrastType' value='1953657716'/>
<enum name='sgcVideoDigitizerType' value='1986292071'/>
<enum name='sgcVideoFilterType' value='1986423924'/>
<enum name='sgcVideoFormatType' value='1987277924'/>
<enum name='sgcVideoHueType' value='1752524064'/>
<enum name='sgcVideoInputType' value='1986621040'/>
<enum name='sgcVideoRectType' value='1987208052'/>
<enum name='sgcVideoSaturationType' value='1935766642'/>
<enum name='sgcVideoSharpnessType' value='1936224880'/>
<enum name='sgcVideoWhiteLevelType' value='2003334252'/>
<enum name='showUserSettingsDialog' value='2'/>
<enum name='spriteHitTestBounds' value='1'/>
<enum name='spriteHitTestImage' value='2'/>
<enum name='spriteHitTestInvisibleSprites' value='4'/>
<enum name='spriteHitTestIsClick' value='8'/>
<enum name='spriteHitTestLocInDisplayCoordinates' value='16'/>
<enum name='spriteHitTestTreatAllSpritesAsHitTestable' value='32'/>
<enum name='suppressDither' value='2'/>
<enum name='synthesizerErr' value='2147547101'/>
<enum name='synthesizerNotRespondingErr' value='2147547102'/>
<enum name='systemMicrosecondClock' value='1835623282'/>
<enum name='systemMillisecondClock' value='1835625580'/>
<enum name='systemSecondClock' value='1936024431'/>
<enum name='systemTickClock' value='1953063787'/>
<enum name='tc24HourMax' value='2'/>
<enum name='tcCounter' value='8'/>
<enum name='tcDropFrame' value='1'/>
<enum name='tcNegTimesOK' value='4'/>
<enum name='tcdfShowTimeCode' value='1'/>
<enum name='tctNegFlag' value='128'/>
<enum name='timeBaseAfterStopTime' value='2'/>
<enum name='timeBaseBeforeStartTime' value='1'/>
<enum name='timeBaseRateChanging' value='4'/>
<enum name='trackUsageInMovie' value='2'/>
<enum name='trackUsageInPoster' value='8'/>
<enum name='trackUsageInPreview' value='4'/>
<enum name='translateMatrixType' value='1'/>
<enum name='triggerAtStart' value='1'/>
<enum name='triggerAtStop' value='2'/>
<enum name='triggerRateChange' value='0'/>
<enum name='triggerRateEqual' value='16'/>
<enum name='triggerRateGT' value='8'/>
<enum name='triggerRateGTE' value='24'/>
<enum name='triggerRateLT' value='4'/>
<enum name='triggerRateLTE' value='20'/>
<enum name='triggerRateNotEqual' value='28'/>
<enum name='triggerTimeBwd' value='2'/>
<enum name='triggerTimeEither' value='3'/>
<enum name='triggerTimeFwd' value='1'/>
<enum name='tuneParseErr' value='2147547097'/>
<enum name='tunePlayerFullErr' value='2147547098'/>
<enum name='tvTunerIn' value='6'/>
<enum name='txtProcDefaultDisplay' value='0'/>
<enum name='txtProcDoDisplay' value='2'/>
<enum name='txtProcDontDisplay' value='1'/>
<enum name='unkeepInRam' value='2'/>
<enum name='uppCallComponentAddComponentPropertyListenerProcInfo' value='65520'/>
<enum name='uppCallComponentExecuteWiredActionProcInfo' value='65520'/>
<enum name='uppCallComponentGetComponentPropertyInfoProcInfo' value='262128'/>
<enum name='uppCallComponentGetComponentPropertyProcInfo' value='262128'/>
<enum name='uppCallComponentRemoveComponentPropertyListenerProcInfo' value='65520'/>
<enum name='uppCallComponentSetComponentPropertyProcInfo' value='65520'/>
<enum name='uppDataHAddMovieProcInfo' value='4080'/>
<enum name='uppDataHAppend64ProcInfo' value='16368'/>
<enum name='uppDataHCanUseDataRefProcInfo' value='4080'/>
<enum name='uppDataHCloseForReadProcInfo' value='240'/>
<enum name='uppDataHCloseForWriteProcInfo' value='240'/>
<enum name='uppDataHCompareDataRefProcInfo' value='4080'/>
<enum name='uppDataHCreateFileProcInfo' value='2032'/>
<enum name='uppDataHCreateFileWithFlagsProcInfo' value='14320'/>
<enum name='uppDataHDeleteFileProcInfo' value='240'/>
<enum name='uppDataHDoesBufferProcInfo' value='4080'/>
<enum name='uppDataHFinishDataProcInfo' value='2032'/>
<enum name='uppDataHFlushCacheProcInfo' value='240'/>
<enum name='uppDataHFlushDataProcInfo' value='240'/>
<enum name='uppDataHGetAvailableFileSize64ProcInfo' value='1008'/>
<enum name='uppDataHGetAvailableFileSizeProcInfo' value='1008'/>
<enum name='uppDataHGetCacheSizeLimitProcInfo' value='1008'/>
<enum name='uppDataHGetDataAvailability64ProcInfo' value='65520'/>
<enum name='uppDataHGetDataAvailabilityProcInfo' value='65520'/>
<enum name='uppDataHGetDataInBufferProcInfo' value='4080'/>
<enum name='uppDataHGetDataProcInfo' value='65520'/>
<enum name='uppDataHGetDataRateProcInfo' value='4080'/>
<enum name='uppDataHGetDataRefAsTypeProcInfo' value='4080'/>
<enum name='uppDataHGetDataRefExtensionProcInfo' value='4080'/>
<enum name='uppDataHGetDataRefProcInfo' value='1008'/>
<enum name='uppDataHGetDataRefWithAnchorProcInfo' value='16368'/>
<enum name='uppDataHGetDeviceIndexProcInfo' value='1008'/>
<enum name='uppDataHGetFileNameProcInfo' value='1008'/>
<enum name='uppDataHGetFileSize64ProcInfo' value='1008'/>
<enum name='uppDataHGetFileSizeAsyncProcInfo' value='16368'/>
<enum name='uppDataHGetFileSizeProcInfo' value='1008'/>
<enum name='uppDataHGetFileTypeOrderingProcInfo' value='1008'/>
<enum name='uppDataHGetFreeSpace64ProcInfo' value='1008'/>
<enum name='uppDataHGetFreeSpaceProcInfo' value='1008'/>
<enum name='uppDataHGetInfoFlagsProcInfo' value='1008'/>
<enum name='uppDataHGetInfoProcInfo' value='4080'/>
<enum name='uppDataHGetMIMETypeAsyncProcInfo' value='16368'/>
<enum name='uppDataHGetMIMETypeProcInfo' value='1008'/>
<enum name='uppDataHGetMacOSFileTypeProcInfo' value='1008'/>
<enum name='uppDataHGetMovieProcInfo' value='4080'/>
<enum name='uppDataHGetMovieWithFlagsProcInfo' value='12272'/>
<enum name='uppDataHGetPreferredBlockSizeProcInfo' value='1008'/>
<enum name='uppDataHGetScheduleAheadTimeProcInfo' value='1008'/>
<enum name='uppDataHGetTemporaryDataRefCapabilitiesProcInfo' value='1008'/>
<enum name='uppDataHGetVolumeListProcInfo' value='1008'/>
<enum name='uppDataHIsStreamingDataHandlerProcInfo' value='1008'/>
<enum name='uppDataHOpenForReadProcInfo' value='240'/>
<enum name='uppDataHOpenForWriteProcInfo' value='240'/>
<enum name='uppDataHPlaybackHints64ProcInfo' value='65520'/>
<enum name='uppDataHPlaybackHintsProcInfo' value='65520'/>
<enum name='uppDataHPollReadProcInfo' value='4080'/>
<enum name='uppDataHPreextend64ProcInfo' value='4080'/>
<enum name='uppDataHPreextendProcInfo' value='4080'/>
<enum name='uppDataHPutDataProcInfo' value='65520'/>
<enum name='uppDataHReadAsyncProcInfo' value='262128'/>
<enum name='uppDataHRenameFileProcInfo' value='1008'/>
<enum name='uppDataHResolveDataRefProcInfo' value='8176'/>
<enum name='uppDataHScheduleData64ProcInfo' value='1048560'/>
<enum name='uppDataHScheduleDataProcInfo' value='1048560'/>
<enum name='uppDataHSetCacheSizeLimitProcInfo' value='1008'/>
<enum name='uppDataHSetDataRefExtensionProcInfo' value='4080'/>
<enum name='uppDataHSetDataRefProcInfo' value='1008'/>
<enum name='uppDataHSetDataRefWithAnchorProcInfo' value='16368'/>
<enum name='uppDataHSetFileSize64ProcInfo' value='1008'/>
<enum name='uppDataHSetFileSizeProcInfo' value='1008'/>
<enum name='uppDataHSetIdleManagerProcInfo' value='1008'/>
<enum name='uppDataHSetMacOSFileTypeProcInfo' value='1008'/>
<enum name='uppDataHSetMovieUsageFlagsProcInfo' value='1008'/>
<enum name='uppDataHSetTimeBaseProcInfo' value='1008'/>
<enum name='uppDataHSetTimeHintsProcInfo' value='262128'/>
<enum name='uppDataHTaskProcInfo' value='240'/>
<enum name='uppDataHUpdateMovieProcInfo' value='3056'/>
<enum name='uppDataHUseTemporaryDataRefProcInfo' value='1008'/>
<enum name='uppDataHWrite64ProcInfo' value='262128'/>
<enum name='uppDataHWriteProcInfo' value='262128'/>
<enum name='uppGraphicsImageImportGetSequenceEnabledProcInfo' value='1008'/>
<enum name='uppGraphicsImageImportSetSequenceEnabledProcInfo' value='496'/>
<enum name='uppMIDIImportGetSettingsProcInfo' value='1008'/>
<enum name='uppMIDIImportSetSettingsProcInfo' value='1008'/>
<enum name='uppMediaChangedNonPrimarySourceProcInfo' value='1008'/>
<enum name='uppMediaCompareProcInfo' value='16368'/>
<enum name='uppMediaCurrentMediaQueuedDataProcInfo' value='1008'/>
<enum name='uppMediaDisposeTargetRefConProcInfo' value='1008'/>
<enum name='uppMediaDoIdleActionsProcInfo' value='240'/>
<enum name='uppMediaEmptyAllPurgeableChunksProcInfo' value='240'/>
<enum name='uppMediaEmptySampleCacheProcInfo' value='4080'/>
<enum name='uppMediaEnterEmptyEditProcInfo' value='240'/>
<enum name='uppMediaFlushNonPrimarySourceDataProcInfo' value='1008'/>
<enum name='uppMediaForceUpdateProcInfo' value='1008'/>
<enum name='uppMediaGGetIdleManagerProcInfo' value='1008'/>
<enum name='uppMediaGGetLatencyProcInfo' value='1008'/>
<enum name='uppMediaGGetStatusProcInfo' value='1008'/>
<enum name='uppMediaGSetActiveSegmentProcInfo' value='4080'/>
<enum name='uppMediaGSetIdleManagerProcInfo' value='1008'/>
<enum name='uppMediaGSetVolumeProcInfo' value='752'/>
<enum name='uppMediaGenerateApertureModeDimensionsProcInfo' value='240'/>
<enum name='uppMediaGetActionsForQTEventProcInfo' value='65520'/>
<enum name='uppMediaGetApertureModeClipRectForSampleDescriptionIndexProcInfo' value='4080'/>
<enum name='uppMediaGetApertureModeMatrixForSampleDescriptionIndexProcInfo' value='4080'/>
<enum name='uppMediaGetChunkManagementFlagsProcInfo' value='1008'/>
<enum name='uppMediaGetClockProcInfo' value='1008'/>
<enum name='uppMediaGetDrawingRgnProcInfo' value='1008'/>
<enum name='uppMediaGetEffectiveSoundBalanceProcInfo' value='1008'/>
<enum name='uppMediaGetEffectiveVolumeProcInfo' value='1008'/>
<enum name='uppMediaGetErrorStringProcInfo' value='4080'/>
<enum name='uppMediaGetGraphicsModeProcInfo' value='4080'/>
<enum name='uppMediaGetInvalidRegionProcInfo' value='1008'/>
<enum name='uppMediaGetMediaInfoProcInfo' value='1008'/>
<enum name='uppMediaGetMediaLoadStateProcInfo' value='1008'/>
<enum name='uppMediaGetNameProcInfo' value='16368'/>
<enum name='uppMediaGetNextBoundsChangeProcInfo' value='1008'/>
<enum name='uppMediaGetNextStepTimeProcInfo' value='65264'/>
<enum name='uppMediaGetOffscreenBufferSizeProcInfo' value='15344'/>
<enum name='uppMediaGetPublicInfoProcInfo' value='16368'/>
<enum name='uppMediaGetPurgeableChunkMemoryAllowanceProcInfo' value='1008'/>
<enum name='uppMediaGetSampleDataPointerProcInfo' value='65520'/>
<enum name='uppMediaGetSoundBalanceProcInfo' value='1008'/>
<enum name='uppMediaGetSoundBassAndTrebleProcInfo' value='4080'/>
<enum name='uppMediaGetSoundEqualizerBandLevelsProcInfo' value='1008'/>
<enum name='uppMediaGetSoundEqualizerBandsProcInfo' value='1008'/>
<enum name='uppMediaGetSoundLevelMeterInfoProcInfo' value='1008'/>
<enum name='uppMediaGetSoundLevelMeteringEnabledProcInfo' value='1008'/>
<enum name='uppMediaGetSoundOutputComponentProcInfo' value='1008'/>
<enum name='uppMediaGetSrcRgnProcInfo' value='4080'/>
<enum name='uppMediaGetTrackOpaqueProcInfo' value='1008'/>
<enum name='uppMediaGetURLLinkProcInfo' value='4080'/>
<enum name='uppMediaGetUserPreferredCodecsProcInfo' value='1008'/>
<enum name='uppMediaGetVideoParamProcInfo' value='4080'/>
<enum name='uppMediaHasCharacteristicProcInfo' value='4080'/>
<enum name='uppMediaHitTestForTargetRefConProcInfo' value='16368'/>
<enum name='uppMediaHitTestTargetRefConProcInfo' value='65520'/>
<enum name='uppMediaIdleProcInfo' value='65520'/>
<enum name='uppMediaInitializeProcInfo' value='1008'/>
<enum name='uppMediaInvalidateRegionProcInfo' value='1008'/>
<enum name='uppMediaMCIsPlayerEventProcInfo' value='4080'/>
<enum name='uppMediaMakeMediaTimeTableProcInfo' value='3866608'/>
<enum name='uppMediaNavigateTargetRefConProcInfo' value='4080'/>
<enum name='uppMediaPrePrerollBeginProcInfo' value='65520'/>
<enum name='uppMediaPrePrerollCancelProcInfo' value='1008'/>
<enum name='uppMediaPrerollProcInfo' value='4080'/>
<enum name='uppMediaPutMediaInfoProcInfo' value='1008'/>
<enum name='uppMediaQueueNonPrimarySourceDataProcInfo' value='67108848'/>
<enum name='uppMediaRefConGetPropertyProcInfo' value='16368'/>
<enum name='uppMediaRefConSetPropertyProcInfo' value='16368'/>
<enum name='uppMediaReleaseSampleDataPointerProcInfo' value='1008'/>
<enum name='uppMediaResolveTargetRefConProcInfo' value='16368'/>
<enum name='uppMediaSampleDescriptionB2NProcInfo' value='1008'/>
<enum name='uppMediaSampleDescriptionChangedProcInfo' value='1008'/>
<enum name='uppMediaSampleDescriptionN2BProcInfo' value='1008'/>
<enum name='uppMediaSetActionsCallbackProcInfo' value='4080'/>
<enum name='uppMediaSetActiveProcInfo' value='496'/>
<enum name='uppMediaSetChunkManagementFlagsProcInfo' value='4080'/>
<enum name='uppMediaSetClipProcInfo' value='1008'/>
<enum name='uppMediaSetDimensionsProcInfo' value='4080'/>
<enum name='uppMediaSetDoMCActionCallbackProcInfo' value='4080'/>
<enum name='uppMediaSetGWorldProcInfo' value='4080'/>
<enum name='uppMediaSetGraphicsModeProcInfo' value='4080'/>
<enum name='uppMediaSetHandlerCapabilitiesProcInfo' value='4080'/>
<enum name='uppMediaSetHintsProcInfo' value='1008'/>
<enum name='uppMediaSetMatrixProcInfo' value='1008'/>
<enum name='uppMediaSetMediaTimeScaleProcInfo' value='1008'/>
<enum name='uppMediaSetMovieTimeScaleProcInfo' value='1008'/>
<enum name='uppMediaSetNonPrimarySourceDataProcInfo' value='16777200'/>
<enum name='uppMediaSetPublicInfoProcInfo' value='16368'/>
<enum name='uppMediaSetPurgeableChunkMemoryAllowanceProcInfo' value='1008'/>
<enum name='uppMediaSetRateProcInfo' value='1008'/>
<enum name='uppMediaSetScreenLockProcInfo' value='496'/>
<enum name='uppMediaSetSoundBalanceProcInfo' value='752'/>
<enum name='uppMediaSetSoundBassAndTrebleProcInfo' value='2800'/>
<enum name='uppMediaSetSoundEqualizerBandsProcInfo' value='1008'/>
<enum name='uppMediaSetSoundLevelMeteringEnabledProcInfo' value='496'/>
<enum name='uppMediaSetSoundLocalizationDataProcInfo' value='1008'/>
<enum name='uppMediaSetSoundOutputComponentProcInfo' value='1008'/>
<enum name='uppMediaSetTrackApertureModeDimensionsUsingSampleDescriptionProcInfo' value='1008'/>
<enum name='uppMediaSetTrackInputMapReferenceProcInfo' value='1008'/>
<enum name='uppMediaSetUserPreferredCodecsProcInfo' value='1008'/>
<enum name='uppMediaSetVideoParamProcInfo' value='4080'/>
<enum name='uppMediaTargetRefConsEqualProcInfo' value='16368'/>
<enum name='uppMediaTimeBaseChangedProcInfo' value='240'/>
<enum name='uppMediaTrackEditedProcInfo' value='240'/>
<enum name='uppMediaTrackPropertyAtomChangedProcInfo' value='240'/>
<enum name='uppMediaTrackReferencesChangedProcInfo' value='240'/>
<enum name='uppMediaVideoOutputChangedProcInfo' value='1008'/>
<enum name='uppMovieExportDisposeGetDataAndPropertiesProcsProcInfo' value='16368'/>
<enum name='uppMovieExportNewGetDataAndPropertiesProcsProcInfo' value='67108848'/>
<enum name='uppQTSMediaGetIndStreamInfoProcInfo' value='16368'/>
<enum name='uppQTSMediaGetInfoProcInfo' value='4080'/>
<enum name='uppQTSMediaSetIndStreamInfoProcInfo' value='16368'/>
<enum name='uppQTSMediaSetInfoProcInfo' value='4080'/>
<enum name='uppTextExportGetDisplayDataProcInfo' value='1008'/>
<enum name='uppTextExportGetSettingsProcInfo' value='1008'/>
<enum name='uppTextExportGetTimeFractionProcInfo' value='1008'/>
<enum name='uppTextExportSetSettingsProcInfo' value='1008'/>
<enum name='uppTextExportSetTimeFractionProcInfo' value='1008'/>
<enum name='uppVDAddKeyColorProcInfo' value='1008'/>
<enum name='uppVDCaptureStateChangingProcInfo' value='1008'/>
<enum name='uppVDClearClipRgnProcInfo' value='1008'/>
<enum name='uppVDCompressDoneProcInfo' value='262128'/>
<enum name='uppVDCompressOneFrameAsyncProcInfo' value='240'/>
<enum name='uppVDCopyPreferredAudioDeviceProcInfo' value='1008'/>
<enum name='uppVDDoneProcInfo' value='752'/>
<enum name='uppVDGetActiveSrcRectProcInfo' value='3824'/>
<enum name='uppVDGetBlackLevelValueProcInfo' value='1008'/>
<enum name='uppVDGetBrightnessProcInfo' value='1008'/>
<enum name='uppVDGetCLUTInUseProcInfo' value='1008'/>
<enum name='uppVDGetClipStateProcInfo' value='1008'/>
<enum name='uppVDGetCompressionTimeProcInfo' value='1047536'/>
<enum name='uppVDGetCompressionTypesProcInfo' value='1008'/>
<enum name='uppVDGetContrastProcInfo' value='1008'/>
<enum name='uppVDGetCurrentFlagsProcInfo' value='4080'/>
<enum name='uppVDGetDMADepthsProcInfo' value='4080'/>
<enum name='uppVDGetDataRateProcInfo' value='16368'/>
<enum name='uppVDGetDeviceNameAndFlagsProcInfo' value='4080'/>
<enum name='uppVDGetDigitizerInfoProcInfo' value='1008'/>
<enum name='uppVDGetDigitizerRectProcInfo' value='1008'/>
<enum name='uppVDGetFieldPreferenceProcInfo' value='1008'/>
<enum name='uppVDGetHueProcInfo' value='1008'/>
<enum name='uppVDGetImageDescriptionProcInfo' value='1008'/>
<enum name='uppVDGetInputColorSpaceModeProcInfo' value='1008'/>
<enum name='uppVDGetInputFormatProcInfo' value='3824'/>
<enum name='uppVDGetInputGammaRecordProcInfo' value='1008'/>
<enum name='uppVDGetInputGammaValueProcInfo' value='16368'/>
<enum name='uppVDGetInputNameProcInfo' value='4080'/>
<enum name='uppVDGetInputProcInfo' value='1008'/>
<enum name='uppVDGetKeyColorProcInfo' value='1008'/>
<enum name='uppVDGetKeyColorRangeProcInfo' value='4080'/>
<enum name='uppVDGetMaskPixMapProcInfo' value='1008'/>
<enum name='uppVDGetMaskandValueProcInfo' value='16112'/>
<enum name='uppVDGetMaxAuxBufferProcInfo' value='4080'/>
<enum name='uppVDGetMaxSrcRectProcInfo' value='3824'/>
<enum name='uppVDGetNextKeyColorProcInfo' value='1008'/>
<enum name='uppVDGetNumberOfInputsProcInfo' value='1008'/>
<enum name='uppVDGetPLLFilterTypeProcInfo' value='1008'/>
<enum name='uppVDGetPlayThruDestinationProcInfo' value='65520'/>
<enum name='uppVDGetPreferredImageDimensionsProcInfo' value='4080'/>
<enum name='uppVDGetPreferredTimeScaleProcInfo' value='1008'/>
<enum name='uppVDGetSaturationProcInfo' value='1008'/>
<enum name='uppVDGetSharpnessProcInfo' value='1008'/>
<enum name='uppVDGetSoundInputDriverProcInfo' value='1008'/>
<enum name='uppVDGetSoundInputSourceProcInfo' value='4080'/>
<enum name='uppVDGetTimeCodeProcInfo' value='16368'/>
<enum name='uppVDGetUniqueIDsProcInfo' value='4080'/>
<enum name='uppVDGetVBlankRectProcInfo' value='3824'/>
<enum name='uppVDGetVideoDefaultsProcInfo' value='4194288'/>
<enum name='uppVDGetWhiteLevelValueProcInfo' value='1008'/>
<enum name='uppVDGrabOneFrameAsyncProcInfo' value='752'/>
<enum name='uppVDGrabOneFrameProcInfo' value='240'/>
<enum name='uppVDPreflightDestinationProcInfo' value='65520'/>
<enum name='uppVDPreflightGlobalRectProcInfo' value='4080'/>
<enum name='uppVDReleaseAsyncBuffersProcInfo' value='240'/>
<enum name='uppVDReleaseCompressBufferProcInfo' value='1008'/>
<enum name='uppVDResetCompressSequenceProcInfo' value='240'/>
<enum name='uppVDSelectUniqueIDsProcInfo' value='4080'/>
<enum name='uppVDSetBlackLevelValueProcInfo' value='1008'/>
<enum name='uppVDSetBrightnessProcInfo' value='1008'/>
<enum name='uppVDSetClipRgnProcInfo' value='1008'/>
<enum name='uppVDSetClipStateProcInfo' value='752'/>
<enum name='uppVDSetCompressionOnOffProcInfo' value='496'/>
<enum name='uppVDSetCompressionProcInfo' value='1047536'/>
<enum name='uppVDSetContrastProcInfo' value='1008'/>
<enum name='uppVDSetDataRateProcInfo' value='1008'/>
<enum name='uppVDSetDestinationPortProcInfo' value='1008'/>
<enum name='uppVDSetDigitizerRectProcInfo' value='1008'/>
<enum name='uppVDSetDigitizerUserInterruptProcInfo' value='16368'/>
<enum name='uppVDSetFieldPreferenceProcInfo' value='752'/>
<enum name='uppVDSetFrameRateProcInfo' value='1008'/>
<enum name='uppVDSetHueProcInfo' value='1008'/>
<enum name='uppVDSetInputColorSpaceModeProcInfo' value='752'/>
<enum name='uppVDSetInputGammaRecordProcInfo' value='1008'/>
<enum name='uppVDSetInputGammaValueProcInfo' value='16368'/>
<enum name='uppVDSetInputProcInfo' value='752'/>
<enum name='uppVDSetInputStandardProcInfo' value='752'/>
<enum name='uppVDSetKeyColorProcInfo' value='1008'/>
<enum name='uppVDSetKeyColorRangeProcInfo' value='4080'/>
<enum name='uppVDSetMasterBlendLevelProcInfo' value='1008'/>
<enum name='uppVDSetPLLFilterTypeProcInfo' value='752'/>
<enum name='uppVDSetPlayThruDestinationProcInfo' value='65520'/>
<enum name='uppVDSetPlayThruGlobalRectProcInfo' value='4080'/>
<enum name='uppVDSetPlayThruOnOffProcInfo' value='752'/>
<enum name='uppVDSetPreferredImageDimensionsProcInfo' value='4080'/>
<enum name='uppVDSetPreferredPacketSizeProcInfo' value='1008'/>
<enum name='uppVDSetSaturationProcInfo' value='1008'/>
<enum name='uppVDSetSharpnessProcInfo' value='1008'/>
<enum name='uppVDSetTimeBaseProcInfo' value='1008'/>
<enum name='uppVDSetWhiteLevelValueProcInfo' value='1008'/>
<enum name='uppVDSetupBuffersProcInfo' value='1008'/>
<enum name='uppVDUseSafeBuffersProcInfo' value='496'/>
<enum name='uppVDUseThisCLUTProcInfo' value='1008'/>
<enum name='useColorMatching' value='4'/>
<enum name='vdBroadcastMode' value='0'/>
<enum name='vdDeviceFlagHideDevice' value='2'/>
<enum name='vdDeviceFlagShowInputsAsDevices' value='1'/>
<enum name='vdDigitizerBW' value='0'/>
<enum name='vdDigitizerRGB' value='1'/>
<enum name='vdDontHaveThatUniqueIDErr' value='-2212'/>
<enum name='vdFlagCaptureAlwaysUseTimeBase' value='32'/>
<enum name='vdFlagCaptureIsForPreview' value='4'/>
<enum name='vdFlagCaptureIsForRecord' value='8'/>
<enum name='vdFlagCaptureLowLatency' value='16'/>
<enum name='vdFlagCaptureSetSettingsBegin' value='64'/>
<enum name='vdFlagCaptureSetSettingsEnd' value='128'/>
<enum name='vdFlagCaptureStarting' value='1'/>
<enum name='vdFlagCaptureStopping' value='2'/>
<enum name='vdHardwareGoneErr' value='-2211'/>
<enum name='vdIIDCAtomIDFeatureAtomTypeAndID' value='1'/>
<enum name='vdIIDCAtomIDFeatureSettings' value='1'/>
<enum name='vdIIDCAtomIDFocusPointSettings' value='1'/>
<enum name='vdIIDCAtomIDLightingHintSettings' value='1'/>
<enum name='vdIIDCAtomIDTriggerSettings' value='1'/>
<enum name='vdIIDCAtomTypeFeature' value='1717920116'/>
<enum name='vdIIDCAtomTypeFeatureAtomTypeAndID' value='1948674404'/>
<enum name='vdIIDCAtomTypeFeatureSettings' value='1718842471'/>
<enum name='vdIIDCAtomTypeFocusPointSettings' value='1718645620'/>
<enum name='vdIIDCAtomTypeLightingHintSettings' value='1818784628'/>
<enum name='vdIIDCAtomTypeTriggerSettings' value='1953723495'/>
<enum name='vdIIDCFeatureBrightness' value='1651665268'/>
<enum name='vdIIDCFeatureCaptureQuality' value='1668313452'/>
<enum name='vdIIDCFeatureCaptureSize' value='1668313978'/>
<enum name='vdIIDCFeatureEdgeEnhancement' value='1701078382'/>
<enum name='vdIIDCFeatureExposure' value='2020635506'/>
<enum name='vdIIDCFeatureFlagAbsoluteControl' value='64'/>
<enum name='vdIIDCFeatureFlagAuto' value='8'/>
<enum name='vdIIDCFeatureFlagManual' value='4'/>
<enum name='vdIIDCFeatureFlagOff' value='2'/>
<enum name='vdIIDCFeatureFlagOn' value='1'/>
<enum name='vdIIDCFeatureFlagRawControl' value='32'/>
<enum name='vdIIDCFeatureFlagTune' value='16'/>
<enum name='vdIIDCFeatureFocus' value='1717794163'/>
<enum name='vdIIDCFeatureFocusPoint' value='1718644340'/>
<enum name='vdIIDCFeatureGain' value='1734437230'/>
<enum name='vdIIDCFeatureGamma' value='1735224673'/>
<enum name='vdIIDCFeatureHue' value='1752524064'/>
<enum name='vdIIDCFeatureIris' value='1769105779'/>
<enum name='vdIIDCFeatureLightingHint' value='1818783348'/>
<enum name='vdIIDCFeatureOpticalFilter' value='1869637236'/>
<enum name='vdIIDCFeaturePan' value='1885433376'/>
<enum name='vdIIDCFeatureSaturation' value='1935766645'/>
<enum name='vdIIDCFeatureSharpness' value='1936224880'/>
<enum name='vdIIDCFeatureShutter' value='1936225394'/>
<enum name='vdIIDCFeatureTemperature' value='1952804208'/>
<enum name='vdIIDCFeatureTilt' value='1953066100'/>
<enum name='vdIIDCFeatureTrigger' value='1953654642'/>
<enum name='vdIIDCFeatureWhiteBalanceU' value='2003329653'/>
<enum name='vdIIDCFeatureWhiteBalanceV' value='2003329654'/>
<enum name='vdIIDCFeatureZoom' value='2054123373'/>
<enum name='vdIIDCGroupColor' value='1668246642'/>
<enum name='vdIIDCGroupImage' value='1768776039'/>
<enum name='vdIIDCGroupMechanics' value='1835361128'/>
<enum name='vdIIDCGroupTrigger' value='1953655143'/>
<enum name='vdIIDCLightingHintLow' value='2'/>
<enum name='vdIIDCLightingHintNormal' value='1'/>
<enum name='vdIIDCTriggerFlagAbsoluteControl' value='512'/>
<enum name='vdIIDCTriggerFlagActiveHigh' value='4'/>
<enum name='vdIIDCTriggerFlagActiveLow' value='8'/>
<enum name='vdIIDCTriggerFlagMode0' value='16'/>
<enum name='vdIIDCTriggerFlagMode1' value='32'/>
<enum name='vdIIDCTriggerFlagMode2' value='64'/>
<enum name='vdIIDCTriggerFlagMode3' value='128'/>
<enum name='vdIIDCTriggerFlagOff' value='2'/>
<enum name='vdIIDCTriggerFlagOn' value='1'/>
<enum name='vdIIDCTriggerFlagRawControl' value='256'/>
<enum name='vdImageDescStaleErr' value='-2210'/>
<enum name='vdPlayThruOff' value='0'/>
<enum name='vdPlayThruOn' value='1'/>
<enum name='vdSubtypeIIDC' value='1768514659'/>
<enum name='vdTypeAlpha' value='1'/>
<enum name='vdTypeBasic' value='0'/>
<enum name='vdTypeKey' value='3'/>
<enum name='vdTypeMask' value='2'/>
<enum name='vdUseAnyField' value='0'/>
<enum name='vdUseEvenField' value='2'/>
<enum name='vdUseOddField' value='1'/>
<enum name='vdVTRMode' value='1'/>
<enum name='vdigInterfaceRev' value='2'/>
<enum name='videoDigitizerComponentType' value='1986292071'/>
<enum name='videoFlagDontLeanAhead' value='1'/>
<enum name='xmlContentTypeCharData' value='2'/>
<enum name='xmlContentTypeElement' value='1'/>
<enum name='xmlContentTypeInvalid' value='0'/>
<enum name='xmlIdentifierInvalid' value='0'/>
<enum name='xmlIdentifierUnrecognized' value='-1'/>
<enum name='xmlParseComponentSubType' value='2020437024'/>
<enum name='xmlParseComponentType' value='1885434483'/>
<enum name='xmlParseFlagAllowUnquotedAttributeValues' value='2'/>
<enum name='xmlParseFlagAllowUppercase' value='1'/>
<enum name='xmlParseFlagEventParseOnly' value='4'/>
<enum name='xmlParseFlagPreserveWhiteSpace' value='8'/>
<enum name='yuvComponentIn' value='4'/>
<enum name='yuvComponentSyncIn' value='5'/>
<enum name='zlibDataCompressorSubType' value='2053925218'/>
<function name='AbortPrePrerollMovie'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<arg declared_type='OSErr' name='err' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='AddCallBackToTimeBase'>
<arg declared_type='QTCallBack' name='cb' type='^{QTCallBackHeader=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AddClonedTrackToMovie'>
<arg declared_type='Track' name='srcTrack' type='^^{TrackType}'/>
<arg declared_type='Movie' name='dstMovie' type='^^{MovieType}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='Track*' name='dstTrack' type='^^^{TrackType}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AddEmptyTrackToMovie'>
<arg declared_type='Track' name='srcTrack' type='^^{TrackType}'/>
<arg declared_type='Movie' name='dstMovie' type='^^{MovieType}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='Track*' name='dstTrack' type='^^^{TrackType}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AddFilePreview'>
<arg declared_type='short' name='resRefNum' type='s'/>
<arg declared_type='OSType' name='previewType' type='L'/>
<arg declared_type='Handle' name='previewData' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AddImageDescriptionExtension'>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='Handle' name='extension' type='^*'/>
<arg declared_type='long' name='idType' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AddMediaDataRef'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='short*' name='index' type='^s'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AddMediaSample'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='Handle' name='dataIn' type='^*'/>
<arg declared_type='long' name='inOffset' type='l'/>
<arg declared_type='unsigned long' name='size' type='L'/>
<arg declared_type='TimeValue' name='durationPerSample' type='l'/>
<arg declared_type='SampleDescriptionHandle' name='sampleDescriptionH' type='^^{SampleDescription}'/>
<arg declared_type='long' name='numberOfSamples' type='l'/>
<arg declared_type='short' name='sampleFlags' type='s'/>
<arg declared_type='TimeValue*' name='sampleTime' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AddMediaSample2'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg const='true' declared_type='UInt8*' name='dataIn' type='*'/>
<arg declared_type='ByteCount' name='size' type='L'/>
<arg declared_type='TimeValue64' name='decodeDurationPerSample' type='q'/>
<arg declared_type='TimeValue64' name='displayOffset' type='q'/>
<arg declared_type='SampleDescriptionHandle' name='sampleDescriptionH' type='^^{SampleDescription}'/>
<arg declared_type='ItemCount' name='numberOfSamples' type='L'/>
<arg declared_type='MediaSampleFlags' name='sampleFlags' type='L'/>
<arg declared_type='TimeValue64*' name='sampleDecodeTimeOut' type='^q'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AddMediaSampleFromEncodedFrame'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='ICMEncodedFrameRef' name='encodedFrame' type='^{OpaqueICMEncodedFrame=}'/>
<arg declared_type='TimeValue64*' name='sampleDecodeTimeOut' type='^q'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AddMediaSampleReference'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='long' name='dataOffset' type='l'/>
<arg declared_type='unsigned long' name='size' type='L'/>
<arg declared_type='TimeValue' name='durationPerSample' type='l'/>
<arg declared_type='SampleDescriptionHandle' name='sampleDescriptionH' type='^^{SampleDescription}'/>
<arg declared_type='long' name='numberOfSamples' type='l'/>
<arg declared_type='short' name='sampleFlags' type='s'/>
<arg declared_type='TimeValue*' name='sampleTime' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AddMediaSampleReferences'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='SampleDescriptionHandle' name='sampleDescriptionH' type='^^{SampleDescription}'/>
<arg declared_type='long' name='numberOfSamples' type='l'/>
<arg declared_type='SampleReferencePtr' name='sampleRefs' type='^{SampleReferenceRecord=llils}'/>
<arg declared_type='TimeValue*' name='sampleTime' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AddMediaSampleReferences64'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='SampleDescriptionHandle' name='sampleDescriptionH' type='^^{SampleDescription}'/>
<arg declared_type='long' name='numberOfSamples' type='l'/>
<arg declared_type='SampleReference64Ptr' name='sampleRefs' type='^{SampleReference64Record={wide=Ii}LiLs}'/>
<arg declared_type='TimeValue*' name='sampleTime' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AddMovieExecuteWiredActionsProc'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='MovieExecuteWiredActionsUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='QTAtomContainer' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AddMovieResource'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='short' name='resRefNum' type='s'/>
<arg declared_type='short*' name='resId' type='^s'/>
<arg declared_type='ConstStr255Param' name='resName' type='*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AddMovieSelection'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Movie' name='src' type='^^{MovieType}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='AddMovieToStorage'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AddSampleTableToMedia'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='QTSampleTableRef' name='sampleTable' type='^{OpaqueQTSampleTable=}'/>
<arg declared_type='SInt64' name='startSampleNum' type='q'/>
<arg declared_type='SInt64' name='numberOfSamples' type='q'/>
<arg declared_type='TimeValue64*' name='sampleDecodeTimeOut' type='^q'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AddSoundDescriptionExtension'>
<arg declared_type='SoundDescriptionHandle' name='desc' type='^^{SoundDescription}'/>
<arg declared_type='Handle' name='extension' type='^*'/>
<arg declared_type='OSType' name='idType' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AddTime'>
<arg declared_type='TimeRecord*' name='dst' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<arg const='true' declared_type='TimeRecord*' name='src' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='AddTrackReference'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='Track' name='refTrack' type='^^{TrackType}'/>
<arg declared_type='OSType' name='refType' type='L'/>
<arg declared_type='long*' name='addedIndex' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AddUserData'>
<arg declared_type='UserData' name='theUserData' type='^^{UserDataRecord}'/>
<arg declared_type='Handle' name='data' type='^*'/>
<arg declared_type='OSType' name='udType' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AddUserDataText'>
<arg declared_type='UserData' name='theUserData' type='^^{UserDataRecord}'/>
<arg declared_type='Handle' name='data' type='^*'/>
<arg declared_type='OSType' name='udType' type='L'/>
<arg declared_type='long' name='index' type='l'/>
<arg declared_type='short' name='itlRegionTag' type='s'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AlignScreenRect'>
<arg declared_type='Rect*' name='rp' type='^{Rect=ssss}'/>
<arg declared_type='ICMAlignmentProcRecordPtr' name='alignmentProc' type='^{ICMAlignmentProcRecord=^?l}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='AlignWindow'>
<arg declared_type='WindowRef' name='wp' type='^{OpaqueWindowPtr=}'/>
<arg declared_type='Boolean' name='front' type='B'/>
<arg const='true' declared_type='Rect*' name='alignmentRect' type='^{Rect=ssss}'/>
<arg declared_type='ICMAlignmentProcRecordPtr' name='alignmentProc' type='^{ICMAlignmentProcRecord=^?l}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='AttachMovieToCurrentThread'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='AttachTimeBaseToCurrentThread'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='BeginFullScreen'>
<arg declared_type='Ptr*' name='restoreState' type='^*'/>
<arg declared_type='GDHandle' name='whichGD' type='^^{GDevice}'/>
<arg declared_type='short*' name='desiredWidth' type='^s'/>
<arg declared_type='short*' name='desiredHeight' type='^s'/>
<arg declared_type='WindowRef*' name='newWindow' type='^^{OpaqueWindowPtr}'/>
<arg declared_type='RGBColor*' name='eraseColor' type='^{RGBColor=SSS}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='BeginMediaEdits'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CDSequenceBusy'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CDSequenceChangedSourceData'>
<arg declared_type='ImageSequenceDataSource' name='sourceID' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CDSequenceDisposeDataSource'>
<arg declared_type='ImageSequenceDataSource' name='sourceID' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CDSequenceDisposeMemory'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='Ptr' name='data' type='*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CDSequenceEnd'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CDSequenceEquivalentImageDescription'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='ImageDescriptionHandle' name='newDesc' type='^^{ImageDescription}'/>
<arg declared_type='Boolean*' name='equivalent' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CDSequenceEquivalentImageDescriptionS'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='ImageDescriptionHandle' name='newDesc' type='^^{ImageDescription}'/>
<arg declared_type='Boolean*' name='equivalent' type='^B'/>
<arg declared_type='Boolean*' name='canSwitch' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CDSequenceFlush'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CDSequenceGetDataSource'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='ImageSequenceDataSource*' name='sourceID' type='^i'/>
<arg declared_type='OSType' name='sourceType' type='L'/>
<arg declared_type='long' name='sourceInputNumber' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CDSequenceInvalidate'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='RgnHandle' name='invalRgn' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CDSequenceNewDataSource'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='ImageSequenceDataSource*' name='sourceID' type='^i'/>
<arg declared_type='OSType' name='sourceType' type='L'/>
<arg declared_type='long' name='sourceInputNumber' type='l'/>
<arg declared_type='Handle' name='dataDescription' type='^*'/>
<arg declared_type='ICMConvertDataFormatUPP' function_pointer='true' name='transferProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='void**' type='^^v'/>
<arg declared_type='long*' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CDSequenceNewMemory'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='Ptr*' name='data' type='^*'/>
<arg declared_type='Size' name='dataSize' type='l'/>
<arg declared_type='long' name='dataUse' type='l'/>
<arg declared_type='ICMMemoryDisposedUPP' function_pointer='true' name='memoryGoneProc' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CDSequenceSetSourceData'>
<arg declared_type='ImageSequenceDataSource' name='sourceID' type='l'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='long' name='dataSize' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CDSequenceSetSourceDataQueue'>
<arg declared_type='ImageSequenceDataSource' name='sourceID' type='l'/>
<arg declared_type='QHdrPtr' name='dataQueue' type='^{QHdr=s^{QElem}^{QElem}}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CDSequenceSetTimeBase'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='void*' name='base' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CallComponentExecuteWiredAction'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer' name='actionContainer' type='^*'/>
<arg declared_type='QTAtom' name='actionAtom' type='l'/>
<arg declared_type='QTCustomActionTargetPtr' name='target' type='^{QTCustomActionTargetRecord=^^{MovieType}^?l^^{TrackType}l^^{TrackType}lll}'/>
<arg declared_type='QTEventRecordPtr' name='event' type='^{QTEventRecord=lI{Point=ss}lllll}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='CallMeWhen'>
<arg declared_type='QTCallBack' name='cb' type='^{QTCallBackHeader=}'/>
<arg declared_type='QTCallBackUPP' function_pointer='true' name='callBackProc' type='^?'>
<arg declared_type='QTCallBack' type='^{QTCallBackHeader=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='long' name='param1' type='l'/>
<arg declared_type='long' name='param2' type='l'/>
<arg declared_type='long' name='param3' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CanQuickTimeOpenDataRef'>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='Boolean*' name='outCanOpenWithGraphicsImporter' type='^B'/>
<arg declared_type='Boolean*' name='outCanOpenAsMovie' type='^B'/>
<arg declared_type='Boolean*' name='outPreferGraphicsImporter' type='^B'/>
<arg declared_type='UInt32' name='inFlags' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CanQuickTimeOpenFile'>
<arg declared_type='FSSpecPtr' name='fileSpec' type='^{FSSpec=si[64C]}'/>
<arg declared_type='OSType' name='fileType' type='L'/>
<arg declared_type='OSType' name='fileNameExtension' type='L'/>
<arg declared_type='Boolean*' name='outCanOpenWithGraphicsImporter' type='^B'/>
<arg declared_type='Boolean*' name='outCanOpenAsMovie' type='^B'/>
<arg declared_type='Boolean*' name='outPreferGraphicsImporter' type='^B'/>
<arg declared_type='UInt32' name='inFlags' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CancelCallBack'>
<arg declared_type='QTCallBack' name='cb' type='^{QTCallBackHeader=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CheckQuickTimeRegistration'>
<arg declared_type='void*' name='registrationKey' type='^v'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ChooseMovieClock'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ClearMovieChanged'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ClearMovieSelection'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ClearMoviesStickyError'>
<retval declared_type='void' type='v'/>
</function>
<function name='ClockCallMeWhen'>
<arg declared_type='ComponentInstance' name='aClock' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTCallBack' name='cb' type='^{QTCallBackHeader=}'/>
<arg declared_type='long' name='param1' type='l'/>
<arg declared_type='long' name='param2' type='l'/>
<arg declared_type='long' name='param3' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ClockCancelCallBack'>
<arg declared_type='ComponentInstance' name='aClock' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTCallBack' name='cb' type='^{QTCallBackHeader=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ClockDisposeCallBack'>
<arg declared_type='ComponentInstance' name='aClock' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTCallBack' name='cb' type='^{QTCallBackHeader=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ClockGetRate'>
<arg declared_type='ComponentInstance' name='aClock' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Fixed*' name='rate' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ClockGetRateChangeConstraints'>
<arg declared_type='ComponentInstance' name='aClock' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeRecord*' name='minimumDelay' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<arg declared_type='TimeRecord*' name='maximumDelay' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ClockGetTime'>
<arg declared_type='ComponentInstance' name='aClock' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeRecord*' name='out' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ClockGetTimesForRateChange'>
<arg declared_type='ComponentInstance' name='aClock' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Fixed' name='fromRate' type='l'/>
<arg declared_type='Fixed' name='toRate' type='l'/>
<arg declared_type='TimeRecord*' name='currentTime' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<arg declared_type='TimeRecord*' name='preferredTime' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<arg declared_type='TimeRecord*' name='safeIncrementForPreferredTime' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ClockNewCallBack'>
<arg declared_type='ComponentInstance' name='aClock' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<arg declared_type='short' name='callBackType' type='s'/>
<retval declared_type='QTCallBack' type='^{QTCallBackHeader=}'/>
</function>
<function name='ClockRateChanged'>
<arg declared_type='ComponentInstance' name='aClock' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTCallBack' name='cb' type='^{QTCallBackHeader=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ClockSetTimeBase'>
<arg declared_type='ComponentInstance' name='aClock' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ClockStartStopChanged'>
<arg declared_type='ComponentInstance' name='aClock' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTCallBack' name='cb' type='^{QTCallBackHeader=}'/>
<arg declared_type='Boolean' name='startChanged' type='B'/>
<arg declared_type='Boolean' name='stopChanged' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ClockTimeChanged'>
<arg declared_type='ComponentInstance' name='aClock' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTCallBack' name='cb' type='^{QTCallBackHeader=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='CloseMovieFile'>
<arg declared_type='short' name='resRefNum' type='s'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CloseMovieStorage'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CodecManagerVersion'>
<arg declared_type='long*' name='version' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CompAdd'>
<arg declared_type='wide*' name='src' type='^{wide=Ii}'/>
<arg declared_type='wide*' name='dst' type='^{wide=Ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CompCompare'>
<arg const='true' declared_type='wide*' name='a' type='^{wide=Ii}'/>
<arg const='true' declared_type='wide*' name='minusb' type='^{wide=Ii}'/>
<retval declared_type='long' type='l'/>
</function>
<function name='CompDiv'>
<arg declared_type='wide*' name='numerator' type='^{wide=Ii}'/>
<arg declared_type='long' name='denominator' type='l'/>
<arg declared_type='long*' name='remainder' type='^l'/>
<retval declared_type='long' type='l'/>
</function>
<function name='CompFixMul'>
<arg declared_type='wide*' name='compSrc' type='^{wide=Ii}'/>
<arg declared_type='Fixed' name='fixSrc' type='l'/>
<arg declared_type='wide*' name='compDst' type='^{wide=Ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CompMul'>
<arg declared_type='long' name='src1' type='l'/>
<arg declared_type='long' name='src2' type='l'/>
<arg declared_type='wide*' name='dst' type='^{wide=Ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CompMulDiv'>
<arg declared_type='wide*' name='co' type='^{wide=Ii}'/>
<arg declared_type='long' name='mul' type='l'/>
<arg declared_type='long' name='divisor' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CompMulDivTrunc'>
<arg declared_type='wide*' name='co' type='^{wide=Ii}'/>
<arg declared_type='long' name='mul' type='l'/>
<arg declared_type='long' name='divisor' type='l'/>
<arg declared_type='long*' name='remainder' type='^l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CompNeg'>
<arg declared_type='wide*' name='dst' type='^{wide=Ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CompShift'>
<arg declared_type='wide*' name='src' type='^{wide=Ii}'/>
<arg declared_type='short' name='shift' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CompSquareRoot'>
<arg const='true' declared_type='wide*' name='src' type='^{wide=Ii}'/>
<retval declared_type='unsigned long' type='L'/>
</function>
<function name='CompSub'>
<arg declared_type='wide*' name='src' type='^{wide=Ii}'/>
<arg declared_type='wide*' name='dst' type='^{wide=Ii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CompressImage'>
<arg declared_type='PixMapHandle' name='src' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='CodecQ' name='quality' type='L'/>
<arg declared_type='CodecType' name='cType' type='L'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='Ptr' name='data' type='*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CompressPicture'>
<arg declared_type='PicHandle' name='srcPicture' type='^^{Picture}'/>
<arg declared_type='PicHandle' name='dstPicture' type='^^{Picture}'/>
<arg declared_type='CodecQ' name='quality' type='L'/>
<arg declared_type='CodecType' name='cType' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CompressPictureFile'>
<arg declared_type='short' name='srcRefNum' type='s'/>
<arg declared_type='short' name='dstRefNum' type='s'/>
<arg declared_type='CodecQ' name='quality' type='L'/>
<arg declared_type='CodecType' name='cType' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CompressSequenceBegin'>
<arg declared_type='ImageSequence*' name='seqID' type='^i'/>
<arg declared_type='PixMapHandle' name='src' type='^^{PixMap}'/>
<arg declared_type='PixMapHandle' name='prev' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg const='true' declared_type='Rect*' name='prevRect' type='^{Rect=ssss}'/>
<arg declared_type='short' name='colorDepth' type='s'/>
<arg declared_type='CodecType' name='cType' type='L'/>
<arg declared_type='CompressorComponent' name='codec' type='^{ComponentRecord=[1l]}'/>
<arg declared_type='CodecQ' name='spatialQuality' type='L'/>
<arg declared_type='CodecQ' name='temporalQuality' type='L'/>
<arg declared_type='long' name='keyFrameRate' type='l'/>
<arg declared_type='CTabHandle' name='ctable' type='^^{ColorTable}'/>
<arg declared_type='CodecFlags' name='flags' type='S'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CompressSequenceFrame'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='PixMapHandle' name='src' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='CodecFlags' name='flags' type='S'/>
<arg declared_type='Ptr' name='data' type='*'/>
<arg declared_type='long*' name='dataSize' type='^l'/>
<arg declared_type='UInt8*' name='similarity' type='*'/>
<arg declared_type='ICMCompletionProcRecordPtr' name='asyncCompletionProc' type='^{ICMCompletionProcRecord=^?l}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ConcatMatrix'>
<arg const='true' declared_type='MatrixRecord*' name='a' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='MatrixRecord*' name='b' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ConvertDataRefToMovieDataRef'>
<arg declared_type='Handle' name='inputDataRef' type='^*'/>
<arg declared_type='OSType' name='inputDataRefType' type='L'/>
<arg declared_type='Handle' name='outputDataRef' type='^*'/>
<arg declared_type='OSType' name='outputDataRefType' type='L'/>
<arg declared_type='OSType' name='creator' type='L'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='ComponentInstance' name='userComp' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='MovieProgressUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Fixed' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='long' name='refCon' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ConvertFileToMovieFile'>
<arg const='true' declared_type='FSSpec*' name='inputFile' type='^{FSSpec=si[64C]}'/>
<arg const='true' declared_type='FSSpec*' name='outputFile' type='^{FSSpec=si[64C]}'/>
<arg declared_type='OSType' name='creator' type='L'/>
<arg declared_type='ScriptCode' name='scriptTag' type='s'/>
<arg declared_type='short*' name='resID' type='^s'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='ComponentInstance' name='userComp' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='MovieProgressUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Fixed' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='long' name='refCon' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ConvertImage'>
<arg declared_type='ImageDescriptionHandle' name='srcDD' type='^^{ImageDescription}'/>
<arg declared_type='Ptr' name='srcData' type='*'/>
<arg declared_type='short' name='colorDepth' type='s'/>
<arg declared_type='CTabHandle' name='ctable' type='^^{ColorTable}'/>
<arg declared_type='CodecQ' name='accuracy' type='L'/>
<arg declared_type='CodecQ' name='quality' type='L'/>
<arg declared_type='CodecType' name='cType' type='L'/>
<arg declared_type='CodecComponent' name='codec' type='^{ComponentRecord=[1l]}'/>
<arg declared_type='ImageDescriptionHandle' name='dstDD' type='^^{ImageDescription}'/>
<arg declared_type='Ptr' name='dstData' type='*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ConvertMovieToDataRef'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<arg declared_type='Track' name='onlyTrack' type='^^{TrackType}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='OSType' name='fileType' type='L'/>
<arg declared_type='OSType' name='creator' type='L'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='ComponentInstance' name='userComp' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ConvertMovieToFile'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Track' name='onlyTrack' type='^^{TrackType}'/>
<arg declared_type='FSSpec*' name='outputFile' type='^{FSSpec=si[64C]}'/>
<arg declared_type='OSType' name='fileType' type='L'/>
<arg declared_type='OSType' name='creator' type='L'/>
<arg declared_type='ScriptCode' name='scriptTag' type='s'/>
<arg declared_type='short*' name='resID' type='^s'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='ComponentInstance' name='userComp' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ConvertTime'>
<arg declared_type='TimeRecord*' name='theTime' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<arg declared_type='TimeBase' name='newBase' type='^{TimeBaseRecord=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ConvertTimeScale'>
<arg declared_type='TimeRecord*' name='theTime' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<arg declared_type='TimeScale' name='newScale' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ConvertTimeToClockTime'>
<arg declared_type='TimeRecord*' name='time' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CopyMatrix'>
<arg const='true' declared_type='MatrixRecord*' name='m1' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='MatrixRecord*' name='m2' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CopyMediaMutableSampleTable'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='TimeValue64' name='startDecodeTime' type='q'/>
<arg declared_type='TimeValue64*' name='sampleStartDecodeTime' type='^q'/>
<arg declared_type='SInt64' name='maxNumberOfSamples' type='q'/>
<arg declared_type='TimeValue64' name='maxDecodeDuration' type='q'/>
<arg declared_type='QTMutableSampleTableRef*' name='sampleTableOut' type='^^{OpaqueQTSampleTable}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CopyMediaUserData'>
<arg declared_type='Media' name='srcMedia' type='^^{MediaType}'/>
<arg declared_type='Media' name='dstMedia' type='^^{MediaType}'/>
<arg declared_type='OSType' name='copyRule' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CopyMovieSelection'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='Movie' type='^^{MovieType}'/>
</function>
<function name='CopyMovieSettings'>
<arg declared_type='Movie' name='srcMovie' type='^^{MovieType}'/>
<arg declared_type='Movie' name='dstMovie' type='^^{MovieType}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CopyMovieUserData'>
<arg declared_type='Movie' name='srcMovie' type='^^{MovieType}'/>
<arg declared_type='Movie' name='dstMovie' type='^^{MovieType}'/>
<arg declared_type='OSType' name='copyRule' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CopyTrackSettings'>
<arg declared_type='Track' name='srcTrack' type='^^{TrackType}'/>
<arg declared_type='Track' name='dstTrack' type='^^{TrackType}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CopyTrackUserData'>
<arg declared_type='Track' name='srcTrack' type='^^{TrackType}'/>
<arg declared_type='Track' name='dstTrack' type='^^{TrackType}'/>
<arg declared_type='OSType' name='copyRule' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CopyUserData'>
<arg declared_type='UserData' name='srcUserData' type='^^{UserDataRecord}'/>
<arg declared_type='UserData' name='dstUserData' type='^^{UserDataRecord}'/>
<arg declared_type='OSType' name='copyRule' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CountImageDescriptionExtensionType'>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='long' name='idType' type='l'/>
<arg declared_type='long*' name='count' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CountUserDataType'>
<arg declared_type='UserData' name='theUserData' type='^^{UserDataRecord}'/>
<arg declared_type='OSType' name='udType' type='L'/>
<retval declared_type='short' type='s'/>
</function>
<function name='CreateMovieControl'>
<arg declared_type='WindowRef' name='theWindow' type='^{OpaqueWindowPtr=}'/>
<arg declared_type='Rect*' name='localRect' type='^{Rect=ssss}'/>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='UInt32' name='options' type='L'/>
<arg declared_type='ControlRef*' name='returnedControl' type='^^{OpaqueControlRef}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CreateMovieFile'>
<arg const='true' declared_type='FSSpec*' name='fileSpec' type='^{FSSpec=si[64C]}'/>
<arg declared_type='OSType' name='creator' type='L'/>
<arg declared_type='ScriptCode' name='scriptTag' type='s'/>
<arg declared_type='long' name='createMovieFileFlags' type='l'/>
<arg declared_type='short*' name='resRefNum' type='^s'/>
<arg declared_type='Movie*' name='newmovie' type='^^^{MovieType}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CreateMovieStorage'>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='OSType' name='creator' type='L'/>
<arg declared_type='ScriptCode' name='scriptTag' type='s'/>
<arg declared_type='long' name='createMovieFileFlags' type='l'/>
<arg declared_type='DataHandler*' name='outDataHandler' type='^^{ComponentInstanceRecord}'/>
<arg declared_type='Movie*' name='newmovie' type='^^^{MovieType}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CreateShortcutMovieFile'>
<arg const='true' declared_type='FSSpec*' name='fileSpec' type='^{FSSpec=si[64C]}'/>
<arg declared_type='OSType' name='creator' type='L'/>
<arg declared_type='ScriptCode' name='scriptTag' type='s'/>
<arg declared_type='long' name='createMovieFileFlags' type='l'/>
<arg declared_type='Handle' name='targetDataRef' type='^*'/>
<arg declared_type='OSType' name='targetDataRefType' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CurveAddAtomToVectorStream'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='atomType' type='L'/>
<arg declared_type='Size' name='atomSize' type='l'/>
<arg declared_type='void*' name='pAtomData' type='^v'/>
<arg declared_type='Handle' name='vectorStream' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='CurveAddPathAtomToVectorStream'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='pathData' type='^*'/>
<arg declared_type='Handle' name='vectorStream' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='CurveAddZeroAtomToVectorStream'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='vectorStream' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='CurveCountPointsInPath'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='gxPaths*' name='aPath' type='^{gxPaths=l[1{gxPath=l[1l][1{gxPoint=ii}]}]}'/>
<arg declared_type='unsigned long' name='contourIndex' type='L'/>
<arg declared_type='unsigned long*' name='pCount' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='CurveCreateVectorStream'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='pStream' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='CurveGetAtomDataFromVectorStream'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='vectorStream' type='^*'/>
<arg declared_type='long' name='atomType' type='l'/>
<arg declared_type='long*' name='dataSize' type='^l'/>
<arg declared_type='Ptr*' name='dataPtr' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='CurveGetLength'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='gxPaths*' name='target' type='^{gxPaths=l[1{gxPath=l[1l][1{gxPoint=ii}]}]}'/>
<arg declared_type='long' name='index' type='l'/>
<arg declared_type='wide*' name='wideLength' type='^{wide=Ii}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='CurveGetNearestPathPoint'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='gxPaths*' name='aPath' type='^{gxPaths=l[1{gxPath=l[1l][1{gxPoint=ii}]}]}'/>
<arg declared_type='FixedPoint*' name='thePoint' type='^{FixedPoint=ii}'/>
<arg declared_type='unsigned long*' name='contourIndex' type='^L'/>
<arg declared_type='unsigned long*' name='pointIndex' type='^L'/>
<arg declared_type='Fixed*' name='theDelta' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='CurveGetPathPoint'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='gxPaths*' name='aPath' type='^{gxPaths=l[1{gxPath=l[1l][1{gxPoint=ii}]}]}'/>
<arg declared_type='unsigned long' name='contourIndex' type='L'/>
<arg declared_type='unsigned long' name='pointIndex' type='L'/>
<arg declared_type='gxPoint*' name='thePoint' type='^{gxPoint=ii}'/>
<arg declared_type='Boolean*' name='ptIsOnPath' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='CurveInsertPointIntoPath'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='gxPoint*' name='aPoint' type='^{gxPoint=ii}'/>
<arg declared_type='Handle' name='thePath' type='^*'/>
<arg declared_type='unsigned long' name='contourIndex' type='L'/>
<arg declared_type='unsigned long' name='pointIndex' type='L'/>
<arg declared_type='Boolean' name='ptIsOnPath' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='CurveLengthToPoint'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='gxPaths*' name='target' type='^{gxPaths=l[1{gxPath=l[1l][1{gxPoint=ii}]}]}'/>
<arg declared_type='long' name='index' type='l'/>
<arg declared_type='Fixed' name='length' type='l'/>
<arg declared_type='FixedPoint*' name='location' type='^{FixedPoint=ii}'/>
<arg declared_type='FixedPoint*' name='tangent' type='^{FixedPoint=ii}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='CurveNewPath'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='pPath' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='CurvePathPointToLength'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='gxPaths*' name='aPath' type='^{gxPaths=l[1{gxPath=l[1l][1{gxPoint=ii}]}]}'/>
<arg declared_type='Fixed' name='startDist' type='l'/>
<arg declared_type='Fixed' name='endDist' type='l'/>
<arg declared_type='FixedPoint*' name='thePoint' type='^{FixedPoint=ii}'/>
<arg declared_type='Fixed*' name='pLength' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='CurveSetPathPoint'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='gxPaths*' name='aPath' type='^{gxPaths=l[1{gxPath=l[1l][1{gxPoint=ii}]}]}'/>
<arg declared_type='unsigned long' name='contourIndex' type='L'/>
<arg declared_type='unsigned long' name='pointIndex' type='L'/>
<arg declared_type='gxPoint*' name='thePoint' type='^{gxPoint=ii}'/>
<arg declared_type='Boolean' name='ptIsOnPath' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='CutMovieSelection'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='Movie' type='^^{MovieType}'/>
</function>
<function name='DataCodecBeginInterruptSafe'>
<arg declared_type='DataCodecComponent' name='dc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long' name='maxSrcSize' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataCodecCompress'>
<arg declared_type='DataCodecComponent' name='dc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='srcData' type='^v'/>
<arg declared_type='UInt32' name='srcSize' type='L'/>
<arg declared_type='void*' name='dstData' type='^v'/>
<arg declared_type='UInt32' name='dstBufferSize' type='L'/>
<arg declared_type='UInt32*' name='actualDstSize' type='^I'/>
<arg declared_type='UInt32*' name='decompressSlop' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataCodecCompressPartial'>
<arg declared_type='DataCodecComponent' name='dc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void**' name='next_in' type='^^v'/>
<arg declared_type='unsigned long*' name='avail_in' type='^L'/>
<arg declared_type='unsigned long*' name='total_in' type='^L'/>
<arg declared_type='void**' name='next_out' type='^^v'/>
<arg declared_type='unsigned long*' name='avail_out' type='^L'/>
<arg declared_type='unsigned long*' name='total_out' type='^L'/>
<arg declared_type='Boolean' name='tryToFinish' type='B'/>
<arg declared_type='Boolean*' name='didFinish' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataCodecDecompress'>
<arg declared_type='DataCodecComponent' name='dc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='srcData' type='^v'/>
<arg declared_type='UInt32' name='srcSize' type='L'/>
<arg declared_type='void*' name='dstData' type='^v'/>
<arg declared_type='UInt32' name='dstBufferSize' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataCodecDecompressPartial'>
<arg declared_type='DataCodecComponent' name='dc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void**' name='next_in' type='^^v'/>
<arg declared_type='unsigned long*' name='avail_in' type='^L'/>
<arg declared_type='unsigned long*' name='total_in' type='^L'/>
<arg declared_type='void**' name='next_out' type='^^v'/>
<arg declared_type='unsigned long*' name='avail_out' type='^L'/>
<arg declared_type='unsigned long*' name='total_out' type='^L'/>
<arg declared_type='Boolean*' name='didFinish' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataCodecEndInterruptSafe'>
<arg declared_type='DataCodecComponent' name='dc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataCodecGetCompressBufferSize'>
<arg declared_type='DataCodecComponent' name='dc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='srcSize' type='L'/>
<arg declared_type='UInt32*' name='dstSize' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHAddMovie'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='short*' name='id' type='^s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHAppend64'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='wide*' name='fileOffset' type='^{wide=Ii}'/>
<arg declared_type='unsigned long' name='size' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHCanUseDataRef'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='long*' name='useFlags' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHCloseForRead'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHCloseForWrite'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHCompareDataRef'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='Boolean*' name='equal' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHCreateFile'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='creator' type='L'/>
<arg declared_type='Boolean' name='deleteExisting' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHCreateFileWithFlags'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='creator' type='L'/>
<arg declared_type='Boolean' name='deleteExisting' type='B'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHDeleteFile'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHDoesBuffer'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='buffersReads' type='^B'/>
<arg declared_type='Boolean*' name='buffersWrites' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHFinishData'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' name='PlaceToPutDataPtr' type='*'/>
<arg declared_type='Boolean' name='Cancel' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHFlushCache'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHFlushData'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetAvailableFileSize'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='fileSize' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetAvailableFileSize64'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='wide*' name='fileSize' type='^{wide=Ii}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetCacheSizeLimit'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Size*' name='cacheSizeLimit' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetData'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='h' type='^*'/>
<arg declared_type='long' name='hOffset' type='l'/>
<arg declared_type='long' name='offset' type='l'/>
<arg declared_type='long' name='size' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetDataAvailability'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='offset' type='l'/>
<arg declared_type='long' name='len' type='l'/>
<arg declared_type='long*' name='missing_offset' type='^l'/>
<arg declared_type='long*' name='missing_len' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetDataAvailability64'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='wide*' name='offset' type='^{wide=Ii}'/>
<arg declared_type='long' name='len' type='l'/>
<arg declared_type='wide*' name='missing_offset' type='^{wide=Ii}'/>
<arg declared_type='long*' name='missing_len' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetDataInBuffer'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='startOffset' type='l'/>
<arg declared_type='long*' name='size' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetDataRate'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='long*' name='bytesPerSecond' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetDataRef'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='dataRef' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetDataRefAsType'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='requestedType' type='L'/>
<arg declared_type='Handle*' name='dataRef' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetDataRefExtension'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='extension' type='^^*'/>
<arg declared_type='OSType' name='idType' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetDataRefWithAnchor'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='anchorDataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='Handle*' name='dataRef' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetDeviceIndex'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='deviceIndex' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetFileName'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned char*' name='str' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetFileSize'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='fileSize' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetFileSize64'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='wide*' name='fileSize' type='^{wide=Ii}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetFileSizeAsync'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='wide*' name='fileSize' type='^{wide=Ii}'/>
<arg declared_type='DataHCompletionUPP' function_pointer='true' name='completionRtn' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSErr' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='long' name='refCon' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetFileTypeOrdering'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='DataHFileTypeOrderingHandle*' name='orderingListHandle' type='^^^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetFreeSpace'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='freeSize' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetFreeSpace64'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='wide*' name='freeSize' type='^{wide=Ii}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetInfo'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='what' type='L'/>
<arg declared_type='void*' name='info' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetInfoFlags'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32*' name='flags' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetMIMEType'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned char*' name='mimeType' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetMIMETypeAsync'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned char*' name='mimeType' type='*'/>
<arg declared_type='DataHCompletionUPP' function_pointer='true' name='completionRtn' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSErr' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='long' name='refCon' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetMacOSFileType'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType*' name='fileType' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetMovie'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Movie*' name='theMovie' type='^^^{MovieType}'/>
<arg declared_type='short*' name='id' type='^s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetMovieWithFlags'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Movie*' name='theMovie' type='^^^{MovieType}'/>
<arg declared_type='short*' name='id' type='^s'/>
<arg declared_type='short' name='flags' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetPreferredBlockSize'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='blockSize' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetScheduleAheadTime'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='millisecs' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetTemporaryDataRefCapabilities'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='outUnderstoodFlags' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHGetVolumeList'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='DataHVolumeList*' name='volumeList' type='^^^{DataHVolumeListRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHIsStreamingDataHandler'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='yes' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHOpenForRead'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHOpenForWrite'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHPlaybackHints'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='unsigned long' name='minFileOffset' type='L'/>
<arg declared_type='unsigned long' name='maxFileOffset' type='L'/>
<arg declared_type='long' name='bytesPerSecond' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHPlaybackHints64'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg const='true' declared_type='wide*' name='minFileOffset' type='^{wide=Ii}'/>
<arg const='true' declared_type='wide*' name='maxFileOffset' type='^{wide=Ii}'/>
<arg declared_type='long' name='bytesPerSecond' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHPollRead'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='dataPtr' type='^v'/>
<arg declared_type='UInt32*' name='dataSizeSoFar' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHPreextend'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long' name='maxToAdd' type='L'/>
<arg declared_type='unsigned long*' name='spaceAdded' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHPreextend64'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='wide*' name='maxToAdd' type='^{wide=Ii}'/>
<arg declared_type='wide*' name='spaceAdded' type='^{wide=Ii}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHPutData'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='h' type='^*'/>
<arg declared_type='long' name='hOffset' type='l'/>
<arg declared_type='long*' name='offset' type='^l'/>
<arg declared_type='long' name='size' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHReadAsync'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='dataPtr' type='^v'/>
<arg declared_type='UInt32' name='dataSize' type='L'/>
<arg const='true' declared_type='wide*' name='dataOffset' type='^{wide=Ii}'/>
<arg declared_type='DataHCompletionUPP' function_pointer='true' name='completion' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSErr' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='long' name='refCon' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHRenameFile'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='newDataRef' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHResolveDataRef'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='theDataRef' type='^*'/>
<arg declared_type='Boolean*' name='wasChanged' type='^B'/>
<arg declared_type='Boolean' name='userInterfaceAllowed' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHScheduleData'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' name='PlaceToPutDataPtr' type='*'/>
<arg declared_type='long' name='FileOffset' type='l'/>
<arg declared_type='long' name='DataSize' type='l'/>
<arg declared_type='long' name='RefCon' type='l'/>
<arg declared_type='DataHSchedulePtr' name='scheduleRec' type='^{DataHScheduleRecord={TimeRecord={wide=Ii}i^{TimeBaseRecord}}lli}'/>
<arg declared_type='DataHCompletionUPP' function_pointer='true' name='CompletionRtn' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSErr' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHScheduleData64'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' name='PlaceToPutDataPtr' type='*'/>
<arg const='true' declared_type='wide*' name='FileOffset' type='^{wide=Ii}'/>
<arg declared_type='long' name='DataSize' type='l'/>
<arg declared_type='long' name='RefCon' type='l'/>
<arg declared_type='DataHSchedulePtr' name='scheduleRec' type='^{DataHScheduleRecord={TimeRecord={wide=Ii}i^{TimeBaseRecord}}lli}'/>
<arg declared_type='DataHCompletionUPP' function_pointer='true' name='CompletionRtn' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSErr' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHSetCacheSizeLimit'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Size' name='cacheSizeLimit' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHSetDataRef'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHSetDataRefExtension'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='extension' type='^*'/>
<arg declared_type='OSType' name='idType' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHSetDataRefWithAnchor'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='anchorDataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHSetFileSize'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='fileSize' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHSetFileSize64'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='wide*' name='fileSize' type='^{wide=Ii}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHSetIdleManager'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='IdleManager' name='im' type='^{OpaqueIdleManager=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHSetMacOSFileType'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='fileType' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHSetMovieUsageFlags'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHSetTimeBase'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHSetTimeHints'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='long' name='bandwidthPriority' type='l'/>
<arg declared_type='TimeScale' name='scale' type='l'/>
<arg declared_type='TimeValue' name='minTime' type='l'/>
<arg declared_type='TimeValue' name='maxTime' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHTask'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHUpdateMovie'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='short' name='id' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHUseTemporaryDataRef'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='inFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHWrite'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' name='data' type='*'/>
<arg declared_type='long' name='offset' type='l'/>
<arg declared_type='long' name='size' type='l'/>
<arg declared_type='DataHCompletionUPP' function_pointer='true' name='completion' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSErr' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='long' name='refCon' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DataHWrite64'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' name='data' type='*'/>
<arg const='true' declared_type='wide*' name='offset' type='^{wide=Ii}'/>
<arg declared_type='long' name='size' type='l'/>
<arg declared_type='DataHCompletionUPP' function_pointer='true' name='completion' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSErr' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='long' name='refCon' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='DecompressImage'>
<arg declared_type='Ptr' name='data' type='*'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='PixMapHandle' name='dst' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg const='true' declared_type='Rect*' name='dstRect' type='^{Rect=ssss}'/>
<arg declared_type='short' name='mode' type='s'/>
<arg declared_type='RgnHandle' name='mask' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DecompressSequenceBegin'>
<arg declared_type='ImageSequence*' name='seqID' type='^i'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='CGrafPtr' name='port' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='GDHandle' name='gdh' type='^^{GDevice}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='MatrixRecordPtr' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='short' name='mode' type='s'/>
<arg declared_type='RgnHandle' name='mask' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='CodecFlags' name='flags' type='S'/>
<arg declared_type='CodecQ' name='accuracy' type='L'/>
<arg declared_type='DecompressorComponent' name='codec' type='^{ComponentRecord=[1l]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DecompressSequenceBeginS'>
<arg declared_type='ImageSequence*' name='seqID' type='^i'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='Ptr' name='data' type='*'/>
<arg declared_type='long' name='dataSize' type='l'/>
<arg declared_type='CGrafPtr' name='port' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='GDHandle' name='gdh' type='^^{GDevice}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='MatrixRecordPtr' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='short' name='mode' type='s'/>
<arg declared_type='RgnHandle' name='mask' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='CodecFlags' name='flags' type='S'/>
<arg declared_type='CodecQ' name='accuracy' type='L'/>
<arg declared_type='DecompressorComponent' name='codec' type='^{ComponentRecord=[1l]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DecompressSequenceFrame'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='Ptr' name='data' type='*'/>
<arg declared_type='CodecFlags' name='inFlags' type='S'/>
<arg declared_type='CodecFlags*' name='outFlags' type='^S'/>
<arg declared_type='ICMCompletionProcRecordPtr' name='asyncCompletionProc' type='^{ICMCompletionProcRecord=^?l}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DecompressSequenceFrameS'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='Ptr' name='data' type='*'/>
<arg declared_type='long' name='dataSize' type='l'/>
<arg declared_type='CodecFlags' name='inFlags' type='S'/>
<arg declared_type='CodecFlags*' name='outFlags' type='^S'/>
<arg declared_type='ICMCompletionProcRecordPtr' name='asyncCompletionProc' type='^{ICMCompletionProcRecord=^?l}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DecompressSequenceFrameWhen'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='Ptr' name='data' type='*'/>
<arg declared_type='long' name='dataSize' type='l'/>
<arg declared_type='CodecFlags' name='inFlags' type='S'/>
<arg declared_type='CodecFlags*' name='outFlags' type='^S'/>
<arg declared_type='ICMCompletionProcRecordPtr' name='asyncCompletionProc' type='^{ICMCompletionProcRecord=^?l}'/>
<arg const='true' declared_type='ICMFrameTimeRecord*' name='frameTime' type='^{ICMFrameTimeRecord={wide=Ii}l^vlilll{wide=Ii}lq}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DeleteMovieFile'>
<arg const='true' declared_type='FSSpec*' name='fileSpec' type='^{FSSpec=si[64C]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DeleteMovieSegment'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeValue' name='startTime' type='l'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DeleteMovieStorage'>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DeleteTrackReference'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='OSType' name='refType' type='L'/>
<arg declared_type='long' name='index' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DeleteTrackSegment'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='TimeValue' name='startTime' type='l'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DetachMovieFromCurrentThread'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DetachTimeBaseFromCurrentThread'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DisposeActionsUPP'>
<arg declared_type='ActionsUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Track' type='^^{TrackType}'/>
<arg declared_type='long' type='l'/>
<arg declared_type='QTEventRecordPtr' type='^{QTEventRecord=lI{Point=ss}lllll}'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeAllSprites'>
<arg declared_type='SpriteWorld' name='theSpriteWorld' type='^{SpriteWorldRecord=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeCDataHandlerUPP'>
<arg declared_type='CDataHandlerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeCallBack'>
<arg declared_type='QTCallBack' name='cb' type='^{QTCallBackHeader=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeCharDataHandlerUPP'>
<arg declared_type='CharDataHandlerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeCodecNameList'>
<arg declared_type='CodecNameSpecListPtr' name='list' type='^{CodecNameSpecList=s[1{CodecNameSpec=^{ComponentRecord}I[32C]^*}]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DisposeCommentHandlerUPP'>
<arg declared_type='CommentHandlerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeDataHCompletionUPP'>
<arg declared_type='DataHCompletionUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSErr' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeDoMCActionUPP'>
<arg declared_type='DoMCActionUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Boolean*' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeEndDocumentHandlerUPP'>
<arg declared_type='EndDocumentHandlerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeEndElementHandlerUPP'>
<arg declared_type='EndElementHandlerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeGetMovieUPP'>
<arg declared_type='GetMovieUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeICMAlignmentUPP'>
<arg declared_type='ICMAlignmentUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeICMCompletionUPP'>
<arg declared_type='ICMCompletionUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeICMConvertDataFormatUPP'>
<arg declared_type='ICMConvertDataFormatUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='void**' type='^^v'/>
<arg declared_type='long*' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeICMCursorShieldedUPP'>
<arg declared_type='ICMCursorShieldedUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeICMDataUPP'>
<arg declared_type='ICMDataUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Ptr*' type='^*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeICMFlushUPP'>
<arg declared_type='ICMFlushUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeICMMemoryDisposedUPP'>
<arg declared_type='ICMMemoryDisposedUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeICMProgressUPP'>
<arg declared_type='ICMProgressUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='Fixed' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeImageCodecDrawBandCompleteUPP'>
<arg declared_type='ImageCodecDrawBandCompleteUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ComponentResult' type='l'/>
<arg declared_type='UInt32' type='L'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeImageCodecMPDrawBandUPP'>
<arg declared_type='ImageCodecMPDrawBandUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ImageSubCodecDecompressRecord*' type='^{ImageSubCodecDecompressRecord=*l*{ICMProgressProcRecord=^?l}{ICMDataProcRecord=^?l}^vCB[2C][2l]^?^v^vll}'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeImageCodecTimeTriggerUPP'>
<arg declared_type='ImageCodecTimeTriggerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeMCActionFilterUPP'>
<arg declared_type='MCActionFilterUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='MovieController' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeMCActionFilterWithRefConUPP'>
<arg declared_type='MCActionFilterWithRefConUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='MovieController' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeMCActionNotificationUPP'>
<arg declared_type='MCActionNotificationUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='MovieController' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeMatte'>
<arg declared_type='PixMapHandle' name='theMatte' type='^^{PixMap}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeMovie'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeMovieController'>
<arg declared_type='ComponentInstance' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeMovieDrawingCompleteUPP'>
<arg declared_type='MovieDrawingCompleteUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeMovieEditState'>
<arg declared_type='MovieEditState' name='state' type='^^{MovieStateRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DisposeMovieExecuteWiredActionsUPP'>
<arg declared_type='MovieExecuteWiredActionsUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='QTAtomContainer' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeMovieExportGetDataUPP'>
<arg declared_type='MovieExportGetDataUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='MovieExportGetDataParams*' type='^{MovieExportGetDataParams=lliii*l^^{SampleDescription}Illlil}'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeMovieExportGetPropertyUPP'>
<arg declared_type='MovieExportGetPropertyUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeMovieExportStageReachedCallbackUPP'>
<arg declared_type='MovieExportStageReachedCallbackUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='OSType' type='L'/>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeMoviePrePrerollCompleteUPP'>
<arg declared_type='MoviePrePrerollCompleteUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeMoviePreviewCallOutUPP'>
<arg declared_type='MoviePreviewCallOutUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeMovieProgressUPP'>
<arg declared_type='MovieProgressUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Fixed' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeMovieRgnCoverUPP'>
<arg declared_type='MovieRgnCoverUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeMovieTrack'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeMoviesErrorUPP'>
<arg declared_type='MoviesErrorUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeMusicMIDISendUPP'>
<arg declared_type='MusicMIDISendUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' type='l'/>
<arg declared_type='MusicMIDIPacket*' type='^{MusicMIDIPacket=SL[249C]}'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeMusicOfflineDataUPP'>
<arg declared_type='MusicOfflineDataUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposePrePrerollCompleteUPP'>
<arg declared_type='PrePrerollCompleteUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='MediaHandler' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposePreprocessInstructionHandlerUPP'>
<arg declared_type='PreprocessInstructionHandlerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char **' type='^*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDPixUPP'>
<arg declared_type='QDPixUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='PixMap*' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='PixMap*' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQTBandwidthNotificationUPP'>
<arg declared_type='QTBandwidthNotificationUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='long' type='l'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQTCallBackUPP'>
<arg declared_type='QTCallBackUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='QTCallBack' type='^{QTCallBackHeader=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQTComponentPropertyListenerFilterUPP'>
<arg declared_type='QTComponentPropertyListenerFilterUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='QTComponentPropertyListenersRef' type='@'/>
<arg const='true' declared_type='QTComponentPropertyListenerCollectionContext*' type='^{QTComponentPropertyListenerCollectionContext=I^?^v}'/>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' type='L'/>
<arg declared_type='ComponentPropertyID' type='L'/>
<arg declared_type='QTComponentPropertyListenerUPP' function_pointer='true' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' type='L'/>
<arg declared_type='ComponentPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg const='true' declared_type='void*' type='^v'/>
<arg const='true' declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQTComponentPropertyListenerUPP'>
<arg declared_type='QTComponentPropertyListenerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' type='L'/>
<arg declared_type='ComponentPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQTEffectListFilterUPP'>
<arg declared_type='QTEffectListFilterUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Component' type='^{ComponentRecord=[1l]}'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQTMoviePropertyListenerUPP'>
<arg declared_type='QTMoviePropertyListenerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='QTPropertyClass' type='L'/>
<arg declared_type='QTPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQTNextTaskNeededSoonerCallbackUPP'>
<arg declared_type='QTNextTaskNeededSoonerCallbackUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='TimeValue' type='l'/>
<arg declared_type='unsigned long' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQTSModalFilterUPP'>
<arg declared_type='QTSModalFilterUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='DialogPtr' type='^{OpaqueDialogPtr=}'/>
<arg const='true' declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='SInt16*' type='^s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQTSNotificationUPP'>
<arg declared_type='QTSNotificationUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='ComponentResult' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQTSPanelFilterUPP'>
<arg declared_type='QTSPanelFilterUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='QTSPanelFilterParams*' type='^{QTSPanelFilterParams=i^{QTSStreamRecord}II{QTAtomSpec=^*i}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQTSyncTaskUPP'>
<arg declared_type='QTSyncTaskUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQTTrackPropertyListenerUPP'>
<arg declared_type='QTTrackPropertyListenerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Track' type='^^{TrackType}'/>
<arg declared_type='QTPropertyClass' type='L'/>
<arg declared_type='QTPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQTVRBackBufferImagingUPP'>
<arg declared_type='QTVRBackBufferImagingUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQTVREnteringNodeUPP'>
<arg declared_type='QTVREnteringNodeUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQTVRImagingCompleteUPP'>
<arg declared_type='QTVRImagingCompleteUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQTVRInterceptUPP'>
<arg declared_type='QTVRInterceptUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRInterceptPtr' type='^{QTVRInterceptRecord=iiiii[6^v]}'/>
<arg declared_type='SInt32' type='l'/>
<arg declared_type='Boolean*' type='^B'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQTVRLeavingNodeUPP'>
<arg declared_type='QTVRLeavingNodeUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='Boolean*' type='^B'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQTVRMouseOverHotSpotUPP'>
<arg declared_type='QTVRMouseOverHotSpotUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeRTPMPDataReleaseUPP'>
<arg declared_type='RTPMPDataReleaseUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='UInt8*' type='*'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeRTPPBCallbackUPP'>
<arg declared_type='RTPPBCallbackUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeSCModalFilterUPP'>
<arg declared_type='SCModalFilterUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeSCModalHookUPP'>
<arg declared_type='SCModalHookUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<retval declared_type='short' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeSGAddFrameBottleUPP'>
<arg declared_type='SGAddFrameBottleUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='TimeValue' type='l'/>
<arg declared_type='TimeScale' type='l'/>
<arg const='true' declared_type='SGCompressInfo*' type='^{SGCompressInfo=*LCC}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeSGCompressBottleUPP'>
<arg declared_type='SGCompressBottleUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeSGCompressCompleteBottleUPP'>
<arg declared_type='SGCompressCompleteBottleUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Boolean*' type='^B'/>
<arg declared_type='SGCompressInfo*' type='^{SGCompressInfo=*LCC}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeSGDataUPP'>
<arg declared_type='SGDataUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long*' type='^l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='TimeValue' type='l'/>
<arg declared_type='short' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeSGDisplayBottleUPP'>
<arg declared_type='SGDisplayBottleUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeSGDisplayCompressBottleUPP'>
<arg declared_type='SGDisplayCompressBottleUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='ImageDescriptionHandle' type='^^{ImageDescription}'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeSGGrabBottleUPP'>
<arg declared_type='SGGrabBottleUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeSGGrabCompleteBottleUPP'>
<arg declared_type='SGGrabCompleteBottleUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Boolean*' type='^B'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeSGGrabCompressCompleteBottleUPP'>
<arg declared_type='SGGrabCompressCompleteBottleUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt8*' type='*'/>
<arg declared_type='SGCompressInfo*' type='^{SGCompressInfo=*LCC}'/>
<arg declared_type='TimeRecord*' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeSGModalFilterUPP'>
<arg declared_type='SGModalFilterUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg const='true' declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeSGTransferFrameBottleUPP'>
<arg declared_type='SGTransferFrameBottleUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeSprite'>
<arg declared_type='Sprite' name='theSprite' type='^{SpriteRecord=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeSpriteWorld'>
<arg declared_type='SpriteWorld' name='theSpriteWorld' type='^{SpriteWorldRecord=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeStartDocumentHandlerUPP'>
<arg declared_type='StartDocumentHandlerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeStartElementHandlerUPP'>
<arg declared_type='StartElementHandlerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char**' type='^*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeStdPixUPP'>
<arg declared_type='StdPixUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='PixMap*' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='PixMap*' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeTextMediaUPP'>
<arg declared_type='TextMediaUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeTimeBase'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeTrackEditState'>
<arg declared_type='TrackEditState' name='state' type='^^{TrackStateRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DisposeTrackMedia'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeTrackTransferUPP'>
<arg declared_type='TrackTransferUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Track' type='^^{TrackType}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeTuneCallBackUPP'>
<arg declared_type='TuneCallBackUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='TuneStatus*' type='^{TuneStatus=^L^Lissi[3l]}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeTunePlayCallBackUPP'>
<arg declared_type='TunePlayCallBackUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='unsigned long*' type='^L'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeTweenerDataUPP'>
<arg declared_type='TweenerDataUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='TweenRecord*' type='^{TweenRecord=l^*iii^?^v^v}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='ICMCompletionProcRecordPtr' type='^{ICMCompletionProcRecord=^?l}'/>
<arg declared_type='UniversalProcPtr' function_pointer='true' type='^?'>
<retval declared_type='long' type='l'/>
</arg>
<arg declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeUserData'>
<arg declared_type='UserData' name='theUserData' type='^^{UserDataRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DisposeVdigIntUPP'>
<arg declared_type='VdigIntUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DragAlignedGrayRgn'>
<arg declared_type='RgnHandle' name='theRgn' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='Point' name='startPt' type='{Point=ss}'/>
<arg declared_type='Rect*' name='boundsRect' type='^{Rect=ssss}'/>
<arg declared_type='Rect*' name='slopRect' type='^{Rect=ssss}'/>
<arg declared_type='short' name='axis' type='s'/>
<arg declared_type='UniversalProcPtr' function_pointer='true' name='actionProc' type='^?'>
<retval declared_type='long' type='l'/>
</arg>
<arg declared_type='Rect*' name='alignmentRect' type='^{Rect=ssss}'/>
<arg declared_type='ICMAlignmentProcRecordPtr' name='alignmentProc' type='^{ICMAlignmentProcRecord=^?l}'/>
<retval declared_type='long' type='l'/>
</function>
<function name='DragAlignedWindow'>
<arg declared_type='WindowRef' name='wp' type='^{OpaqueWindowPtr=}'/>
<arg declared_type='Point' name='startPt' type='{Point=ss}'/>
<arg declared_type='Rect*' name='boundsRect' type='^{Rect=ssss}'/>
<arg declared_type='Rect*' name='alignmentRect' type='^{Rect=ssss}'/>
<arg declared_type='ICMAlignmentProcRecordPtr' name='alignmentProc' type='^{ICMAlignmentProcRecord=^?l}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='DrawPictureFile'>
<arg declared_type='short' name='refNum' type='s'/>
<arg const='true' declared_type='Rect*' name='frame' type='^{Rect=ssss}'/>
<arg declared_type='ICMProgressProcRecordPtr' name='progressProc' type='^{ICMProgressProcRecord=^?l}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DrawTrimmedPicture'>
<arg declared_type='PicHandle' name='srcPicture' type='^^{Picture}'/>
<arg const='true' declared_type='Rect*' name='frame' type='^{Rect=ssss}'/>
<arg declared_type='RgnHandle' name='trimMask' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='short' name='doDither' type='s'/>
<arg declared_type='ICMProgressProcRecordPtr' name='progressProc' type='^{ICMProgressProcRecord=^?l}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DrawTrimmedPictureFile'>
<arg declared_type='short' name='srcRefnum' type='s'/>
<arg const='true' declared_type='Rect*' name='frame' type='^{Rect=ssss}'/>
<arg declared_type='RgnHandle' name='trimMask' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='short' name='doDither' type='s'/>
<arg declared_type='ICMProgressProcRecordPtr' name='progressProc' type='^{ICMProgressProcRecord=^?l}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='EndFullScreen'>
<arg declared_type='Ptr' name='fullState' type='*'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='EndMediaEdits'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='EnterMovies'>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='EnterMoviesOnThread'>
<arg declared_type='UInt32' name='inFlags' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='EqualMatrix'>
<arg const='true' declared_type='MatrixRecord*' name='m1' type='^{MatrixRecord=[3[3l]]}'/>
<arg const='true' declared_type='MatrixRecord*' name='m2' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='ExecuteCallBack'>
<arg declared_type='QTCallBack' name='cb' type='^{QTCallBackHeader=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ExitMovies'>
<retval declared_type='void' type='v'/>
</function>
<function name='ExitMoviesOnThread'>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ExtendMediaDecodeDurationToDisplayEndTime'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='Boolean*' name='mediaChanged' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='FCompressImage'>
<arg declared_type='PixMapHandle' name='src' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='short' name='colorDepth' type='s'/>
<arg declared_type='CodecQ' name='quality' type='L'/>
<arg declared_type='CodecType' name='cType' type='L'/>
<arg declared_type='CompressorComponent' name='codec' type='^{ComponentRecord=[1l]}'/>
<arg declared_type='CTabHandle' name='ctable' type='^^{ColorTable}'/>
<arg declared_type='CodecFlags' name='flags' type='S'/>
<arg declared_type='long' name='bufferSize' type='l'/>
<arg declared_type='ICMFlushProcRecordPtr' name='flushProc' type='^{ICMFlushProcRecord=^?l}'/>
<arg declared_type='ICMProgressProcRecordPtr' name='progressProc' type='^{ICMProgressProcRecord=^?l}'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='Ptr' name='data' type='*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='FCompressPicture'>
<arg declared_type='PicHandle' name='srcPicture' type='^^{Picture}'/>
<arg declared_type='PicHandle' name='dstPicture' type='^^{Picture}'/>
<arg declared_type='short' name='colorDepth' type='s'/>
<arg declared_type='CTabHandle' name='ctable' type='^^{ColorTable}'/>
<arg declared_type='CodecQ' name='quality' type='L'/>
<arg declared_type='short' name='doDither' type='s'/>
<arg declared_type='short' name='compressAgain' type='s'/>
<arg declared_type='ICMProgressProcRecordPtr' name='progressProc' type='^{ICMProgressProcRecord=^?l}'/>
<arg declared_type='CodecType' name='cType' type='L'/>
<arg declared_type='CompressorComponent' name='codec' type='^{ComponentRecord=[1l]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='FCompressPictureFile'>
<arg declared_type='short' name='srcRefNum' type='s'/>
<arg declared_type='short' name='dstRefNum' type='s'/>
<arg declared_type='short' name='colorDepth' type='s'/>
<arg declared_type='CTabHandle' name='ctable' type='^^{ColorTable}'/>
<arg declared_type='CodecQ' name='quality' type='L'/>
<arg declared_type='short' name='doDither' type='s'/>
<arg declared_type='short' name='compressAgain' type='s'/>
<arg declared_type='ICMProgressProcRecordPtr' name='progressProc' type='^{ICMProgressProcRecord=^?l}'/>
<arg declared_type='CodecType' name='cType' type='L'/>
<arg declared_type='CompressorComponent' name='codec' type='^{ComponentRecord=[1l]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='FDecompressImage'>
<arg declared_type='Ptr' name='data' type='*'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='PixMapHandle' name='dst' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='MatrixRecordPtr' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='short' name='mode' type='s'/>
<arg declared_type='RgnHandle' name='mask' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='PixMapHandle' name='matte' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='matteRect' type='^{Rect=ssss}'/>
<arg declared_type='CodecQ' name='accuracy' type='L'/>
<arg declared_type='DecompressorComponent' name='codec' type='^{ComponentRecord=[1l]}'/>
<arg declared_type='long' name='bufferSize' type='l'/>
<arg declared_type='ICMDataProcRecordPtr' name='dataProc' type='^{ICMDataProcRecord=^?l}'/>
<arg declared_type='ICMProgressProcRecordPtr' name='progressProc' type='^{ICMProgressProcRecord=^?l}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='FindCodec'>
<arg declared_type='CodecType' name='cType' type='L'/>
<arg declared_type='CodecComponent' name='specCodec' type='^{ComponentRecord=[1l]}'/>
<arg declared_type='CompressorComponent*' name='compressor' type='^^{ComponentRecord}'/>
<arg declared_type='DecompressorComponent*' name='decompressor' type='^^{ComponentRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='FixExp2'>
<arg declared_type='Fixed' name='src' type='l'/>
<retval declared_type='Fixed' type='l'/>
</function>
<function name='FixLog2'>
<arg declared_type='Fixed' name='src' type='l'/>
<retval declared_type='Fixed' type='l'/>
</function>
<function name='FixMulDiv'>
<arg declared_type='Fixed' name='src' type='l'/>
<arg declared_type='Fixed' name='mul' type='l'/>
<arg declared_type='Fixed' name='divisor' type='l'/>
<retval declared_type='Fixed' type='l'/>
</function>
<function name='FixPow'>
<arg declared_type='Fixed' name='base' type='l'/>
<arg declared_type='Fixed' name='exp' type='l'/>
<retval declared_type='Fixed' type='l'/>
</function>
<function name='FlashMediaDoButtonActions'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='char*' name='path' type='*'/>
<arg declared_type='long' name='buttonID' type='l'/>
<arg declared_type='long' name='transition' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='FlashMediaFrameLabelToMovieTime'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' name='theLabel' type='*'/>
<arg declared_type='TimeValue*' name='movieTime' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='FlashMediaFrameNumberToMovieTime'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='flashFrameNumber' type='l'/>
<arg declared_type='TimeValue*' name='movieTime' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='FlashMediaGetDisplayedFrameNumber'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='flashFrameNumber' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='FlashMediaGetFlashVariable'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='char*' name='path' type='*'/>
<arg declared_type='char*' name='name' type='*'/>
<arg declared_type='Handle*' name='theVariableCStringOut' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='FlashMediaGetRefConBounds'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='long*' name='left' type='^l'/>
<arg declared_type='long*' name='top' type='^l'/>
<arg declared_type='long*' name='right' type='^l'/>
<arg declared_type='long*' name='bottom' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='FlashMediaGetRefConID'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='long*' name='refConID' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='FlashMediaGetSupportedSwfVersion'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned char*' name='swfVersion' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='FlashMediaIDToRefCon'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='refConID' type='l'/>
<arg declared_type='long*' name='refCon' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='FlashMediaSetFlashVariable'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='char*' name='path' type='*'/>
<arg declared_type='char*' name='name' type='*'/>
<arg declared_type='char*' name='value' type='*'/>
<arg declared_type='Boolean' name='updateFocus' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='FlashMediaSetPan'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='xPercent' type='s'/>
<arg declared_type='short' name='yPercent' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='FlashMediaSetZoom'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='factor' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='FlashMediaSetZoomRect'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='left' type='l'/>
<arg declared_type='long' name='top' type='l'/>
<arg declared_type='long' name='right' type='l'/>
<arg declared_type='long' name='bottom' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='FlattenMovie'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='long' name='movieFlattenFlags' type='l'/>
<arg const='true' declared_type='FSSpec*' name='theFile' type='^{FSSpec=si[64C]}'/>
<arg declared_type='OSType' name='creator' type='L'/>
<arg declared_type='ScriptCode' name='scriptTag' type='s'/>
<arg declared_type='long' name='createMovieFileFlags' type='l'/>
<arg declared_type='short*' name='resId' type='^s'/>
<arg declared_type='ConstStr255Param' name='resName' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='FlattenMovieData'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='long' name='movieFlattenFlags' type='l'/>
<arg const='true' declared_type='FSSpec*' name='theFile' type='^{FSSpec=si[64C]}'/>
<arg declared_type='OSType' name='creator' type='L'/>
<arg declared_type='ScriptCode' name='scriptTag' type='s'/>
<arg declared_type='long' name='createMovieFileFlags' type='l'/>
<retval declared_type='Movie' type='^^{MovieType}'/>
</function>
<function name='FlattenMovieDataToDataRef'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='long' name='movieFlattenFlags' type='l'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='OSType' name='creator' type='L'/>
<arg declared_type='ScriptCode' name='scriptTag' type='s'/>
<arg declared_type='long' name='createMovieFileFlags' type='l'/>
<retval declared_type='Movie' type='^^{MovieType}'/>
</function>
<function name='FracSinCos'>
<arg declared_type='Fixed' name='degree' type='l'/>
<arg declared_type='Fract*' name='cosOut' type='^i'/>
<retval declared_type='Fract' type='l'/>
</function>
<function name='GDGetScale'>
<arg declared_type='GDHandle' name='gdh' type='^^{GDevice}'/>
<arg declared_type='Fixed*' name='scale' type='^i'/>
<arg declared_type='short*' name='flags' type='^s'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GDHasScale'>
<arg declared_type='GDHandle' name='gdh' type='^^{GDevice}'/>
<arg declared_type='short' name='depth' type='s'/>
<arg declared_type='Fixed*' name='scale' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GDSetScale'>
<arg declared_type='GDHandle' name='gdh' type='^^{GDevice}'/>
<arg declared_type='Fixed' name='scale' type='l'/>
<arg declared_type='short' name='flags' type='s'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GenerateMovieApertureModeDimensions'>
<arg declared_type='Movie' name='movie' type='^^{MovieType}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GenerateTrackApertureModeDimensions'>
<arg declared_type='Track' name='track' type='^^{TrackType}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetBestDeviceRect'>
<arg declared_type='GDHandle*' name='gdh' type='^^^{GDevice}'/>
<arg declared_type='Rect*' name='rp' type='^{Rect=ssss}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetCSequenceDataRateParams'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='DataRateParamsPtr' name='params' type='^{DataRateParams=llllII}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetCSequenceFrameNumber'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='long*' name='frameNumber' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetCSequenceKeyFrameRate'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='long*' name='keyFrameRate' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetCSequenceMaxCompressionSize'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='PixMapHandle' name='src' type='^^{PixMap}'/>
<arg declared_type='long*' name='size' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetCSequencePrevBuffer'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='GWorldPtr*' name='gworld' type='^^{OpaqueGrafPtr}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetCallBackTimeBase'>
<arg declared_type='QTCallBack' name='cb' type='^{QTCallBackHeader=}'/>
<retval declared_type='TimeBase' type='^{TimeBaseRecord=}'/>
</function>
<function name='GetCallBackType'>
<arg declared_type='QTCallBack' name='cb' type='^{QTCallBackHeader=}'/>
<retval declared_type='short' type='s'/>
</function>
<function name='GetCodecInfo'>
<arg declared_type='CodecInfo*' name='info' type='^{CodecInfo=[32C]ssllllCCSSCCssssl}'/>
<arg declared_type='CodecType' name='cType' type='L'/>
<arg declared_type='CodecComponent' name='codec' type='^{ComponentRecord=[1l]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetCodecNameList'>
<arg declared_type='CodecNameSpecListPtr*' name='list' type='^^{CodecNameSpecList}'/>
<arg declared_type='short' name='showAll' type='s'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetCompressedImageSize'>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='Ptr' name='data' type='*'/>
<arg declared_type='long' name='bufferSize' type='l'/>
<arg declared_type='ICMDataProcRecordPtr' name='dataProc' type='^{ICMDataProcRecord=^?l}'/>
<arg declared_type='long*' name='dataSize' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetCompressedPixMapInfo'>
<arg declared_type='PixMapPtr' name='pix' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='ImageDescriptionHandle*' name='desc' type='^^^{ImageDescription}'/>
<arg declared_type='Ptr*' name='data' type='^*'/>
<arg declared_type='long*' name='bufferSize' type='^l'/>
<arg declared_type='ICMDataProcRecord*' name='dataProc' type='^{ICMDataProcRecord=^?l}'/>
<arg declared_type='ICMProgressProcRecord*' name='progressProc' type='^{ICMProgressProcRecord=^?l}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetCompressionTime'>
<arg declared_type='PixMapHandle' name='src' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='short' name='colorDepth' type='s'/>
<arg declared_type='CodecType' name='cType' type='L'/>
<arg declared_type='CompressorComponent' name='codec' type='^{ComponentRecord=[1l]}'/>
<arg declared_type='CodecQ*' name='spatialQuality' type='^I'/>
<arg declared_type='CodecQ*' name='temporalQuality' type='^I'/>
<arg declared_type='unsigned long*' name='compressTime' type='^L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetDSequenceImageBuffer'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='GWorldPtr*' name='gworld' type='^^{OpaqueGrafPtr}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetDSequenceMatrix'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='MatrixRecordPtr' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetDSequenceNonScheduledDisplayDirection'>
<arg declared_type='ImageSequence' name='sequence' type='l'/>
<arg declared_type='Fixed*' name='rate' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetDSequenceNonScheduledDisplayTime'>
<arg declared_type='ImageSequence' name='sequence' type='l'/>
<arg declared_type='TimeValue64*' name='displayTime' type='^q'/>
<arg declared_type='TimeScale*' name='displayTimeScale' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetDSequenceScreenBuffer'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='GWorldPtr*' name='gworld' type='^^{OpaqueGrafPtr}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetDataHandler'>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataHandlerSubType' type='L'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='Component' type='^{ComponentRecord=[1l]}'/>
</function>
<function name='GetFirstCallBack'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<retval declared_type='QTCallBack' type='^{QTCallBackHeader=}'/>
</function>
<function name='GetGraphicsImporterForDataRef'>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='ComponentInstance*' name='gi' type='^^{ComponentInstanceRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetGraphicsImporterForDataRefWithFlags'>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='ComponentInstance*' name='gi' type='^^{ComponentInstanceRecord}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetGraphicsImporterForFile'>
<arg const='true' declared_type='FSSpec*' name='theFile' type='^{FSSpec=si[64C]}'/>
<arg declared_type='ComponentInstance*' name='gi' type='^^{ComponentInstanceRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetGraphicsImporterForFileWithFlags'>
<arg const='true' declared_type='FSSpec*' name='theFile' type='^{FSSpec=si[64C]}'/>
<arg declared_type='ComponentInstance*' name='gi' type='^^{ComponentInstanceRecord}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetImageDescriptionCTable'>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='CTabHandle*' name='ctable' type='^^^{ColorTable}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetImageDescriptionExtension'>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='Handle*' name='extension' type='^^*'/>
<arg declared_type='long' name='idType' type='l'/>
<arg declared_type='long' name='index' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMatrixType'>
<arg const='true' declared_type='MatrixRecord*' name='m' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='short' type='s'/>
</function>
<function name='GetMaxCompressionSize'>
<arg declared_type='PixMapHandle' name='src' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='short' name='colorDepth' type='s'/>
<arg declared_type='CodecQ' name='quality' type='L'/>
<arg declared_type='CodecType' name='cType' type='L'/>
<arg declared_type='CompressorComponent' name='codec' type='^{ComponentRecord=[1l]}'/>
<arg declared_type='long*' name='size' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMaxLoadedTimeInMovie'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeValue*' name='time' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMediaAdvanceDecodeTime'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='TimeValue64' type='q'/>
</function>
<function name='GetMediaCreationTime'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='unsigned long' type='L'/>
</function>
<function name='GetMediaDataHandler'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='short' name='index' type='s'/>
<retval declared_type='DataHandler' type='^{ComponentInstanceRecord=[1l]}'/>
</function>
<function name='GetMediaDataHandlerDescription'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='short' name='index' type='s'/>
<arg declared_type='OSType*' name='dhType' type='^I'/>
<arg declared_type='unsigned char*' name='creatorName' type='*'/>
<arg declared_type='OSType*' name='creatorManufacturer' type='^I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetMediaDataRef'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='short' name='index' type='s'/>
<arg declared_type='Handle*' name='dataRef' type='^^*'/>
<arg declared_type='OSType*' name='dataRefType' type='^I'/>
<arg declared_type='long*' name='dataRefAttributes' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMediaDataRefCount'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='short*' name='count' type='^s'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMediaDataSize'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='TimeValue' name='startTime' type='l'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<retval declared_type='long' type='l'/>
</function>
<function name='GetMediaDataSize64'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='TimeValue' name='startTime' type='l'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<arg declared_type='wide*' name='dataSize' type='^{wide=Ii}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMediaDataSizeTime64'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='TimeValue64' name='startDisplayTime' type='q'/>
<arg declared_type='TimeValue64' name='displayDuration' type='q'/>
<arg declared_type='SInt64*' name='dataSize' type='^q'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMediaDecodeDuration'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='TimeValue64' type='q'/>
</function>
<function name='GetMediaDisplayDuration'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='TimeValue64' type='q'/>
</function>
<function name='GetMediaDisplayEndTime'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='TimeValue64' type='q'/>
</function>
<function name='GetMediaDisplayStartTime'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='TimeValue64' type='q'/>
</function>
<function name='GetMediaDuration'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='TimeValue' type='l'/>
</function>
<function name='GetMediaHandler'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='MediaHandler' type='^{ComponentInstanceRecord=[1l]}'/>
</function>
<function name='GetMediaHandlerDescription'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='OSType*' name='mediaType' type='^I'/>
<arg declared_type='unsigned char*' name='creatorName' type='*'/>
<arg declared_type='OSType*' name='creatorManufacturer' type='^I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetMediaInputMap'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='QTAtomContainer*' name='inputMap' type='^^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMediaLanguage'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='short' type='s'/>
</function>
<function name='GetMediaModificationTime'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='unsigned long' type='L'/>
</function>
<function name='GetMediaNextInterestingDecodeTime'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='short' name='interestingTimeFlags' type='s'/>
<arg declared_type='TimeValue64' name='decodeTime' type='q'/>
<arg declared_type='Fixed' name='rate' type='l'/>
<arg declared_type='TimeValue64*' name='interestingDecodeTime' type='^q'/>
<arg declared_type='TimeValue64*' name='interestingDecodeDuration' type='^q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetMediaNextInterestingDisplayTime'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='short' name='interestingTimeFlags' type='s'/>
<arg declared_type='TimeValue64' name='displayTime' type='q'/>
<arg declared_type='Fixed' name='rate' type='l'/>
<arg declared_type='TimeValue64*' name='interestingDisplayTime' type='^q'/>
<arg declared_type='TimeValue64*' name='interestingDisplayDuration' type='^q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetMediaNextInterestingTime'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='short' name='interestingTimeFlags' type='s'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<arg declared_type='Fixed' name='rate' type='l'/>
<arg declared_type='TimeValue*' name='interestingTime' type='^i'/>
<arg declared_type='TimeValue*' name='interestingDuration' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetMediaPlayHints'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='long*' name='flags' type='^l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetMediaPreferredChunkSize'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='long*' name='maxChunkSize' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMediaPropertyAtom'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='QTAtomContainer*' name='propertyAtom' type='^^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMediaQuality'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='short' type='s'/>
</function>
<function name='GetMediaSample'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='Handle' name='dataOut' type='^*'/>
<arg declared_type='long' name='maxSizeToGrow' type='l'/>
<arg declared_type='long*' name='size' type='^l'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<arg declared_type='TimeValue*' name='sampleTime' type='^i'/>
<arg declared_type='TimeValue*' name='durationPerSample' type='^i'/>
<arg declared_type='SampleDescriptionHandle' name='sampleDescriptionH' type='^^{SampleDescription}'/>
<arg declared_type='long*' name='sampleDescriptionIndex' type='^l'/>
<arg declared_type='long' name='maxNumberOfSample' type='l'/>
<arg declared_type='long*' name='numberOfSamples' type='^l'/>
<arg declared_type='short*' name='sampleFlags' type='^s'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMediaSample2'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='UInt8*' name='dataOut' type='*'/>
<arg declared_type='ByteCount' name='maxDataSize' type='L'/>
<arg declared_type='ByteCount*' name='size' type='^I'/>
<arg declared_type='TimeValue64' name='decodeTime' type='q'/>
<arg declared_type='TimeValue64*' name='sampleDecodeTime' type='^q'/>
<arg declared_type='TimeValue64*' name='decodeDurationPerSample' type='^q'/>
<arg declared_type='TimeValue64*' name='displayOffset' type='^q'/>
<arg declared_type='SampleDescriptionHandle' name='sampleDescriptionH' type='^^{SampleDescription}'/>
<arg declared_type='ItemCount*' name='sampleDescriptionIndex' type='^I'/>
<arg declared_type='ItemCount' name='maxNumberOfSamples' type='L'/>
<arg declared_type='ItemCount*' name='numberOfSamples' type='^I'/>
<arg declared_type='MediaSampleFlags*' name='sampleFlags' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMediaSampleCount'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='long' type='l'/>
</function>
<function name='GetMediaSampleDescription'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='long' name='index' type='l'/>
<arg declared_type='SampleDescriptionHandle' name='descH' type='^^{SampleDescription}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetMediaSampleDescriptionCount'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='long' type='l'/>
</function>
<function name='GetMediaSampleReference'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='long*' name='dataOffset' type='^l'/>
<arg declared_type='long*' name='size' type='^l'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<arg declared_type='TimeValue*' name='sampleTime' type='^i'/>
<arg declared_type='TimeValue*' name='durationPerSample' type='^i'/>
<arg declared_type='SampleDescriptionHandle' name='sampleDescriptionH' type='^^{SampleDescription}'/>
<arg declared_type='long*' name='sampleDescriptionIndex' type='^l'/>
<arg declared_type='long' name='maxNumberOfSamples' type='l'/>
<arg declared_type='long*' name='numberOfSamples' type='^l'/>
<arg declared_type='short*' name='sampleFlags' type='^s'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMediaSampleReferences'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<arg declared_type='TimeValue*' name='sampleTime' type='^i'/>
<arg declared_type='SampleDescriptionHandle' name='sampleDescriptionH' type='^^{SampleDescription}'/>
<arg declared_type='long*' name='sampleDescriptionIndex' type='^l'/>
<arg declared_type='long' name='maxNumberOfEntries' type='l'/>
<arg declared_type='long*' name='actualNumberofEntries' type='^l'/>
<arg declared_type='SampleReferencePtr' name='sampleRefs' type='^{SampleReferenceRecord=llils}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMediaSampleReferences64'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<arg declared_type='TimeValue*' name='sampleTime' type='^i'/>
<arg declared_type='SampleDescriptionHandle' name='sampleDescriptionH' type='^^{SampleDescription}'/>
<arg declared_type='long*' name='sampleDescriptionIndex' type='^l'/>
<arg declared_type='long' name='maxNumberOfEntries' type='l'/>
<arg declared_type='long*' name='actualNumberofEntries' type='^l'/>
<arg declared_type='SampleReference64Ptr' name='sampleRefs' type='^{SampleReference64Record={wide=Ii}LiLs}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMediaShadowSync'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='long' name='frameDiffSampleNum' type='l'/>
<arg declared_type='long*' name='syncSampleNum' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMediaSyncSampleCount'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='long' type='l'/>
</function>
<function name='GetMediaTimeScale'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='TimeScale' type='l'/>
</function>
<function name='GetMediaTrack'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='Track' type='^^{TrackType}'/>
</function>
<function name='GetMediaUserData'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='UserData' type='^^{UserDataRecord}'/>
</function>
<function name='GetMovieActive'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='GetMovieActiveSegment'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeValue*' name='startTime' type='^i'/>
<arg declared_type='TimeValue*' name='duration' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetMovieAnchorDataRef'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Handle*' name='dataRef' type='^^*'/>
<arg declared_type='OSType*' name='dataRefType' type='^I'/>
<arg declared_type='long*' name='outFlags' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMovieAudioBalance'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<arg declared_type='Float32*' name='leftRight' type='^f'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='GetMovieAudioContext'>
<arg declared_type='Movie' name='movie' type='^^{MovieType}'/>
<arg declared_type='QTAudioContextRef*' name='audioContext' type='^^{QTAudioContextRefType}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='GetMovieAudioFrequencyLevels'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<arg declared_type='FourCharCode' name='whatMixToMeter' type='L'/>
<arg declared_type='QTAudioFrequencyLevels*' name='pAveragePowerLevels' type='^{QTAudioFrequencyLevels=II[1f]}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='GetMovieAudioFrequencyMeteringBandFrequencies'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<arg declared_type='FourCharCode' name='whatMixToMeter' type='L'/>
<arg declared_type='UInt32' name='numBands' type='L'/>
<arg declared_type='Float32*' name='outBandFrequencies' type='^f'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='GetMovieAudioFrequencyMeteringNumBands'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<arg declared_type='FourCharCode' name='whatMixToMeter' type='L'/>
<arg declared_type='UInt32*' name='outNumBands' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='GetMovieAudioGain'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<arg declared_type='Float32*' name='gain' type='^f'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='GetMovieAudioMute'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<arg declared_type='Boolean*' name='muted' type='^B'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='GetMovieAudioVolumeLevels'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<arg declared_type='FourCharCode' name='whatMixToMeter' type='L'/>
<arg declared_type='QTAudioVolumeLevels*' name='pAveragePowerLevels' type='^{QTAudioVolumeLevels=I[1f]}'/>
<arg declared_type='QTAudioVolumeLevels*' name='pPeakHoldLevels' type='^{QTAudioVolumeLevels=I[1f]}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='GetMovieAudioVolumeMeteringEnabled'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<arg declared_type='FourCharCode' name='whatMixToMeter' type='L'/>
<arg declared_type='Boolean*' name='enabled' type='^B'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='GetMovieBoundsRgn'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
</function>
<function name='GetMovieBox'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Rect*' name='boxRect' type='^{Rect=ssss}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetMovieClipRgn'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
</function>
<function name='GetMovieColorTable'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='CTabHandle*' name='ctab' type='^^^{ColorTable}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMovieCoverProcs'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='MovieRgnCoverUPP*' name='uncoverProc' type='^^?'/>
<arg declared_type='MovieRgnCoverUPP*' name='coverProc' type='^^?'/>
<arg declared_type='long*' name='refcon' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMovieCreationTime'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='unsigned long' type='L'/>
</function>
<function name='GetMovieDataSize'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeValue' name='startTime' type='l'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<retval declared_type='long' type='l'/>
</function>
<function name='GetMovieDataSize64'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeValue' name='startTime' type='l'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<arg declared_type='wide*' name='dataSize' type='^{wide=Ii}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMovieDefaultDataRef'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Handle*' name='dataRef' type='^^*'/>
<arg declared_type='OSType*' name='dataRefType' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMovieDisplayBoundsRgn'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
</function>
<function name='GetMovieDisplayClipRgn'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
</function>
<function name='GetMovieDuration'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='TimeValue' type='l'/>
</function>
<function name='GetMovieGWorld'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='CGrafPtr*' name='port' type='^^{OpaqueGrafPtr}'/>
<arg declared_type='GDHandle*' name='gdh' type='^^^{GDevice}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetMovieImporterForDataRef'>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='Component*' name='importer' type='^^{ComponentRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMovieIndTrack'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='long' name='index' type='l'/>
<retval declared_type='Track' type='^^{TrackType}'/>
</function>
<function name='GetMovieIndTrackType'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='long' name='index' type='l'/>
<arg declared_type='OSType' name='trackType' type='L'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='Track' type='^^{TrackType}'/>
</function>
<function name='GetMovieLoadState'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='long' type='l'/>
</function>
<function name='GetMovieMatrix'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='MatrixRecord*' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetMovieModificationTime'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='unsigned long' type='L'/>
</function>
<function name='GetMovieNaturalBoundsRect'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Rect*' name='naturalBounds' type='^{Rect=ssss}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetMovieNextInterestingTime'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='short' name='interestingTimeFlags' type='s'/>
<arg declared_type='short' name='numMediaTypes' type='s'/>
<arg const='true' declared_type='OSType*' name='whichMediaTypes' type='^I'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<arg declared_type='Fixed' name='rate' type='l'/>
<arg declared_type='TimeValue*' name='interestingTime' type='^i'/>
<arg declared_type='TimeValue*' name='interestingDuration' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetMoviePict'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<retval declared_type='PicHandle' type='^^{Picture}'/>
</function>
<function name='GetMoviePosterPict'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='PicHandle' type='^^{Picture}'/>
</function>
<function name='GetMoviePosterTime'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='TimeValue' type='l'/>
</function>
<function name='GetMoviePreferredRate'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='Fixed' type='l'/>
</function>
<function name='GetMoviePreferredVolume'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='short' type='s'/>
</function>
<function name='GetMoviePreviewMode'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='GetMoviePreviewTime'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeValue*' name='previewTime' type='^i'/>
<arg declared_type='TimeValue*' name='previewDuration' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetMovieProgressProc'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='MovieProgressUPP*' name='p' type='^^?'/>
<arg declared_type='long*' name='refcon' type='^l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetMoviePropertyAtom'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='QTAtomContainer*' name='propertyAtom' type='^^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMovieRate'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='Fixed' type='l'/>
</function>
<function name='GetMovieRateChangeConstraints'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeRecord*' name='minimumDelay' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<arg declared_type='TimeRecord*' name='maximumDelay' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMovieSegmentDisplayBoundsRgn'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<retval declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
</function>
<function name='GetMovieSelection'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeValue*' name='selectionTime' type='^i'/>
<arg declared_type='TimeValue*' name='selectionDuration' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetMovieStatus'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Track*' name='firstProblemTrack' type='^^^{TrackType}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GetMovieThreadAttachState'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<arg declared_type='Boolean*' name='outAttachedToCurrentThread' type='^B'/>
<arg declared_type='Boolean*' name='outAttachedToAnyThread' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMovieTime'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeRecord*' name='currentTime' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='TimeValue' type='l'/>
</function>
<function name='GetMovieTimeBase'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='TimeBase' type='^{TimeBaseRecord=}'/>
</function>
<function name='GetMovieTimeScale'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='TimeScale' type='l'/>
</function>
<function name='GetMovieTrack'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='long' name='trackID' type='l'/>
<retval declared_type='Track' type='^^{TrackType}'/>
</function>
<function name='GetMovieTrackCount'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='long' type='l'/>
</function>
<function name='GetMovieUserData'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='UserData' type='^^{UserDataRecord}'/>
</function>
<function name='GetMovieVisualBrightness'>
<arg declared_type='Movie' name='movie' type='^^{MovieType}'/>
<arg declared_type='Float32*' name='brightnessOut' type='^f'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='GetMovieVisualContext'>
<arg declared_type='Movie' name='movie' type='^^{MovieType}'/>
<arg declared_type='QTVisualContextRef*' name='visualContext' type='^^{OpaqueQTVisualContext}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='GetMovieVisualContrast'>
<arg declared_type='Movie' name='movie' type='^^{MovieType}'/>
<arg declared_type='Float32*' name='contrastOut' type='^f'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='GetMovieVisualHue'>
<arg declared_type='Movie' name='movie' type='^^{MovieType}'/>
<arg declared_type='Float32*' name='hueOut' type='^f'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='GetMovieVisualSaturation'>
<arg declared_type='Movie' name='movie' type='^^{MovieType}'/>
<arg declared_type='Float32*' name='saturationOut' type='^f'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='GetMovieVolume'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='short' type='s'/>
</function>
<function name='GetMoviesError'>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetMoviesStickyError'>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetNextCallBack'>
<arg declared_type='QTCallBack' name='cb' type='^{QTCallBackHeader=}'/>
<retval declared_type='QTCallBack' type='^{QTCallBackHeader=}'/>
</function>
<function name='GetNextImageDescriptionExtensionType'>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='long*' name='idType' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetNextTrackForCompositing'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='Track' type='^^{TrackType}'/>
</function>
<function name='GetNextTrackReferenceType'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='OSType' name='refType' type='L'/>
<retval declared_type='OSType' type='L'/>
</function>
<function name='GetNextUserDataType'>
<arg declared_type='UserData' name='theUserData' type='^^{UserDataRecord}'/>
<arg declared_type='OSType' name='udType' type='L'/>
<retval declared_type='long' type='l'/>
</function>
<function name='GetPictureFileHeader'>
<arg declared_type='short' name='refNum' type='s'/>
<arg declared_type='Rect*' name='frame' type='^{Rect=ssss}'/>
<arg declared_type='OpenCPicParams*' name='header' type='^{OpenCPicParams={Rect=ssss}iissi}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetPosterBox'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Rect*' name='boxRect' type='^{Rect=ssss}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetPrevTrackForCompositing'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='Track' type='^^{TrackType}'/>
</function>
<function name='GetQuickTimePreference'>
<arg declared_type='OSType' name='preferenceType' type='L'/>
<arg declared_type='QTAtomContainer*' name='preferenceAtom' type='^^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetSimilarity'>
<arg declared_type='PixMapHandle' name='src' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='Ptr' name='data' type='*'/>
<arg declared_type='Fixed*' name='similarity' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetSoundDescriptionExtension'>
<arg declared_type='SoundDescriptionHandle' name='desc' type='^^{SoundDescription}'/>
<arg declared_type='Handle*' name='extension' type='^^*'/>
<arg declared_type='OSType' name='idType' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetSpriteProperty'>
<arg declared_type='Sprite' name='theSprite' type='^{SpriteRecord=}'/>
<arg declared_type='long' name='propertyType' type='l'/>
<arg declared_type='void*' name='propertyValue' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetTimeBaseEffectiveRate'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<retval declared_type='Fixed' type='l'/>
</function>
<function name='GetTimeBaseFlags'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<retval declared_type='long' type='l'/>
</function>
<function name='GetTimeBaseMasterClock'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<retval declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
</function>
<function name='GetTimeBaseMasterOffsetTimeBase'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<retval declared_type='TimeBase' type='^{TimeBaseRecord=}'/>
</function>
<function name='GetTimeBaseMasterTimeBase'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<retval declared_type='TimeBase' type='^{TimeBaseRecord=}'/>
</function>
<function name='GetTimeBaseRate'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<retval declared_type='Fixed' type='l'/>
</function>
<function name='GetTimeBaseRateChangeStatus'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<arg declared_type='TimeScale' name='scale' type='l'/>
<arg declared_type='Fixed*' name='ratedChangedTo' type='^i'/>
<arg declared_type='TimeBaseStatus*' name='flags' type='^I'/>
<arg declared_type='TimeRecord*' name='rateChangeTimeBaseTime' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<arg declared_type='TimeRecord*' name='rateChangeClockTime' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<arg declared_type='TimeRecord*' name='currentClockTime' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetTimeBaseStartTime'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<arg declared_type='TimeScale' name='s' type='l'/>
<arg declared_type='TimeRecord*' name='tr' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='TimeValue' type='l'/>
</function>
<function name='GetTimeBaseStatus'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<arg declared_type='TimeRecord*' name='unpinnedTime' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='long' type='l'/>
</function>
<function name='GetTimeBaseStopTime'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<arg declared_type='TimeScale' name='s' type='l'/>
<arg declared_type='TimeRecord*' name='tr' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='TimeValue' type='l'/>
</function>
<function name='GetTimeBaseThreadAttachState'>
<arg declared_type='TimeBase' name='inTimeBase' type='^{TimeBaseRecord=}'/>
<arg declared_type='Boolean*' name='outAttachedToCurrentThread' type='^B'/>
<arg declared_type='Boolean*' name='outAttachedToAnyThread' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetTimeBaseTime'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<arg declared_type='TimeScale' name='s' type='l'/>
<arg declared_type='TimeRecord*' name='tr' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='TimeValue' type='l'/>
</function>
<function name='GetTrackAlternate'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='Track' type='^^{TrackType}'/>
</function>
<function name='GetTrackAudioGain'>
<arg declared_type='Track' name='t' type='^^{TrackType}'/>
<arg declared_type='Float32*' name='gain' type='^f'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='GetTrackAudioMute'>
<arg declared_type='Track' name='t' type='^^{TrackType}'/>
<arg declared_type='Boolean*' name='muted' type='^B'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='GetTrackAudioVolumeLevels'>
<arg declared_type='Track' name='t' type='^^{TrackType}'/>
<arg declared_type='QTAudioVolumeLevels*' name='pAveragePowerLevels' type='^{QTAudioVolumeLevels=I[1f]}'/>
<arg declared_type='QTAudioVolumeLevels*' name='pPeakHoldLevels' type='^{QTAudioVolumeLevels=I[1f]}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='GetTrackAudioVolumeMeteringEnabled'>
<arg declared_type='Track' name='t' type='^^{TrackType}'/>
<arg declared_type='Boolean*' name='enabled' type='^B'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='GetTrackBoundsRgn'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
</function>
<function name='GetTrackClipRgn'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
</function>
<function name='GetTrackCreationTime'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='unsigned long' type='L'/>
</function>
<function name='GetTrackDataSize'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='TimeValue' name='startTime' type='l'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<retval declared_type='long' type='l'/>
</function>
<function name='GetTrackDataSize64'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='TimeValue' name='startTime' type='l'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<arg declared_type='wide*' name='dataSize' type='^{wide=Ii}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetTrackDimensions'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='Fixed*' name='width' type='^i'/>
<arg declared_type='Fixed*' name='height' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetTrackDisplayBoundsRgn'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
</function>
<function name='GetTrackDisplayMatrix'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='MatrixRecord*' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetTrackDuration'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='TimeValue' type='l'/>
</function>
<function name='GetTrackEditRate'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='TimeValue' name='atTime' type='l'/>
<retval declared_type='Fixed' type='l'/>
</function>
<function name='GetTrackEditRate64'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='TimeValue64' name='atTime' type='q'/>
<retval declared_type='Fixed' type='l'/>
</function>
<function name='GetTrackEnabled'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='GetTrackID'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='long' type='l'/>
</function>
<function name='GetTrackLayer'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='short' type='s'/>
</function>
<function name='GetTrackLoadSettings'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='TimeValue*' name='preloadTime' type='^i'/>
<arg declared_type='TimeValue*' name='preloadDuration' type='^i'/>
<arg declared_type='long*' name='preloadFlags' type='^l'/>
<arg declared_type='long*' name='defaultHints' type='^l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetTrackMatrix'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='MatrixRecord*' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetTrackMatte'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='PixMapHandle' type='^^{PixMap}'/>
</function>
<function name='GetTrackMedia'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='Media' type='^^{MediaType}'/>
</function>
<function name='GetTrackModificationTime'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='unsigned long' type='L'/>
</function>
<function name='GetTrackMovie'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='Movie' type='^^{MovieType}'/>
</function>
<function name='GetTrackMovieBoundsRgn'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
</function>
<function name='GetTrackNextInterestingTime'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='short' name='interestingTimeFlags' type='s'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<arg declared_type='Fixed' name='rate' type='l'/>
<arg declared_type='TimeValue*' name='interestingTime' type='^i'/>
<arg declared_type='TimeValue*' name='interestingDuration' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GetTrackOffset'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='TimeValue' type='l'/>
</function>
<function name='GetTrackPict'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<retval declared_type='PicHandle' type='^^{Picture}'/>
</function>
<function name='GetTrackReference'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='OSType' name='refType' type='L'/>
<arg declared_type='long' name='index' type='l'/>
<retval declared_type='Track' type='^^{TrackType}'/>
</function>
<function name='GetTrackReferenceCount'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='OSType' name='refType' type='L'/>
<retval declared_type='long' type='l'/>
</function>
<function name='GetTrackSegmentDisplayBoundsRgn'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<retval declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
</function>
<function name='GetTrackSoundLocalizationSettings'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='Handle*' name='settings' type='^^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetTrackStatus'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GetTrackUsage'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='long' type='l'/>
</function>
<function name='GetTrackUserData'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='UserData' type='^^{UserDataRecord}'/>
</function>
<function name='GetTrackVolume'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='short' type='s'/>
</function>
<function name='GetUserData'>
<arg declared_type='UserData' name='theUserData' type='^^{UserDataRecord}'/>
<arg declared_type='Handle' name='data' type='^*'/>
<arg declared_type='OSType' name='udType' type='L'/>
<arg declared_type='long' name='index' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetUserDataItem'>
<arg declared_type='UserData' name='theUserData' type='^^{UserDataRecord}'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='long' name='size' type='l'/>
<arg declared_type='OSType' name='udType' type='L'/>
<arg declared_type='long' name='index' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetUserDataText'>
<arg declared_type='UserData' name='theUserData' type='^^{UserDataRecord}'/>
<arg declared_type='Handle' name='data' type='^*'/>
<arg declared_type='OSType' name='udType' type='L'/>
<arg declared_type='long' name='index' type='l'/>
<arg declared_type='short' name='itlRegionTag' type='s'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GoToBeginningOfMovie'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GoToEndOfMovie'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='GraphicsExportCanTranscode'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='canTranscode' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportCanUseCompressor'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='canUseCompressor' type='^B'/>
<arg declared_type='void*' name='codecSettingsAtomContainerPtr' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportDoExport'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='actualSizeWritten' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportDoStandaloneExport'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportDoTranscode'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportDoUseCompressor'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='codecSettingsAtomContainer' type='^v'/>
<arg declared_type='ImageDescriptionHandle*' name='outDesc' type='^^^{ImageDescription}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportDrawInputImage'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CGrafPtr' name='gw' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='GDHandle' name='gd' type='^^{GDevice}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg const='true' declared_type='Rect*' name='dstRect' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetColorSyncProfile'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='colorSyncProfile' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetCompressionMethod'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='compressionMethod' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetCompressionQuality'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CodecQ*' name='spatialQuality' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetDefaultFileNameExtension'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType*' name='fileNameExtension' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetDefaultFileTypeAndCreator'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType*' name='fileType' type='^I'/>
<arg declared_type='OSType*' name='fileCreator' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetDepth'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='depth' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetDontRecompress'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='dontRecompress' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetExifEnabled'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='exifEnabled' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetFlags'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32*' name='flagsOut' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetInputCGBitmapContext'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CGContextRef*' name='bitmapContextRefOut' type='^^{CGContext}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetInputCGImage'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CGImageRef*' name='imageRefOut' type='^^{CGImage}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetInputDataReference'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='dataRef' type='^^*'/>
<arg declared_type='OSType*' name='dataRefType' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetInputDataSize'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='size' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetInputFile'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='FSSpec*' name='theFile' type='^{FSSpec=si[64C]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetInputGWorld'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='GWorldPtr*' name='gworld' type='^^{OpaqueGrafPtr}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetInputGraphicsImporter'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='GraphicsImportComponent*' name='grip' type='^^{ComponentInstanceRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetInputHandle'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='h' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetInputImageDepth'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='inputDepth' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetInputImageDescription'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ImageDescriptionHandle*' name='desc' type='^^^{ImageDescription}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetInputImageDimensions'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Rect*' name='dimensions' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetInputOffsetAndLimit'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='offset' type='^L'/>
<arg declared_type='unsigned long*' name='limit' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetInputPicture'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PicHandle*' name='picture' type='^^^{Picture}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetInputPixmap'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PixMapHandle*' name='pixmap' type='^^^{PixMap}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetInputPtr'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr*' name='p' type='^*'/>
<arg declared_type='unsigned long*' name='size' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetInterlaceStyle'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='interlaceStyle' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetMIMETypeList'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='qtAtomContainerPtr' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetMetaData'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='userData' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetOutputDataReference'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='dataRef' type='^^*'/>
<arg declared_type='OSType*' name='dataRefType' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetOutputFile'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='FSSpec*' name='theFile' type='^{FSSpec=si[64C]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetOutputFileTypeAndCreator'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType*' name='fileType' type='^I'/>
<arg declared_type='OSType*' name='fileCreator' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetOutputHandle'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='h' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetOutputMark'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='mark' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetOutputOffsetAndMaxSize'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='offset' type='^L'/>
<arg declared_type='unsigned long*' name='maxSize' type='^L'/>
<arg declared_type='Boolean*' name='truncateFile' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetProgressProc'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ICMProgressProcRecordPtr' name='progressProc' type='^{ICMProgressProcRecord=^?l}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetResolution'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Fixed*' name='horizontalResolution' type='^i'/>
<arg declared_type='Fixed*' name='verticalResolution' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetSettingsAsAtomContainer'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='qtAtomContainerPtr' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetSettingsAsText'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='theText' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetTargetDataSize'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='targetDataSize' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportGetThumbnailEnabled'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='thumbnailEnabled' type='^B'/>
<arg declared_type='long*' name='maxThumbnailWidth' type='^l'/>
<arg declared_type='long*' name='maxThumbnailHeight' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportMayExporterReadInputData'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='mayReadInputData' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportReadInputData'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='dataPtr' type='^v'/>
<arg declared_type='unsigned long' name='dataOffset' type='L'/>
<arg declared_type='unsigned long' name='dataSize' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportReadOutputData'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='dataPtr' type='^v'/>
<arg declared_type='unsigned long' name='dataOffset' type='L'/>
<arg declared_type='unsigned long' name='dataSize' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportRequestSettings'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ModalFilterYDUPP' function_pointer='true' name='filterProc' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='void*' name='yourDataProc' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetColorSyncProfile'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='colorSyncProfile' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetCompressionMethod'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='compressionMethod' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetCompressionQuality'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CodecQ' name='spatialQuality' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetDepth'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='depth' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetDontRecompress'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean' name='dontRecompress' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetExifEnabled'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean' name='enableExif' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetFlags'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetInputCGBitmapContext'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CGContextRef' name='bitmapContextRef' type='^{CGContext=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetInputCGImage'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CGImageRef' name='imageRef' type='^{CGImage=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetInputDataReference'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetInputFile'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='FSSpec*' name='theFile' type='^{FSSpec=si[64C]}'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetInputGWorld'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='GWorldPtr' name='gworld' type='^{OpaqueGrafPtr=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetInputGraphicsImporter'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='GraphicsImportComponent' name='grip' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetInputHandle'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='h' type='^*'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetInputOffsetAndLimit'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long' name='offset' type='L'/>
<arg declared_type='unsigned long' name='limit' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetInputPicture'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PicHandle' name='picture' type='^^{Picture}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetInputPixmap'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PixMapHandle' name='pixmap' type='^^{PixMap}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetInputPtr'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' name='p' type='*'/>
<arg declared_type='unsigned long' name='size' type='L'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetInterlaceStyle'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long' name='interlaceStyle' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetMetaData'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='userData' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetOutputDataReference'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetOutputFile'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='FSSpec*' name='theFile' type='^{FSSpec=si[64C]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetOutputFileTypeAndCreator'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='fileType' type='L'/>
<arg declared_type='OSType' name='fileCreator' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetOutputHandle'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='h' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetOutputMark'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long' name='mark' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetOutputOffsetAndMaxSize'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long' name='offset' type='L'/>
<arg declared_type='unsigned long' name='maxSize' type='L'/>
<arg declared_type='Boolean' name='truncateFile' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetProgressProc'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ICMProgressProcRecordPtr' name='progressProc' type='^{ICMProgressProcRecord=^?l}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetResolution'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Fixed' name='horizontalResolution' type='l'/>
<arg declared_type='Fixed' name='verticalResolution' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetSettingsFromAtomContainer'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='qtAtomContainer' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetTargetDataSize'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long' name='targetDataSize' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportSetThumbnailEnabled'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean' name='enableThumbnail' type='B'/>
<arg declared_type='long' name='maxThumbnailWidth' type='l'/>
<arg declared_type='long' name='maxThumbnailHeight' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsExportWriteOutputData'>
<arg declared_type='GraphicsExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='void*' name='dataPtr' type='^v'/>
<arg declared_type='unsigned long' name='dataSize' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImageImportGetSequenceEnabled'>
<arg declared_type='GraphicImageMovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='enable' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImageImportSetSequenceEnabled'>
<arg declared_type='GraphicImageMovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean' name='enable' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportCreateCGImage'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CGImageRef*' name='imageRefOut' type='^^{CGImage}'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportDoExportImageFileDialog'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='FSSpec*' name='inDefaultSpec' type='^{FSSpec=si[64C]}'/>
<arg declared_type='StringPtr' name='prompt' type='*'/>
<arg declared_type='ModalFilterYDUPP' function_pointer='true' name='filterProc' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='OSType*' name='outExportedType' type='^I'/>
<arg declared_type='FSSpec*' name='outExportedSpec' type='^{FSSpec=si[64C]}'/>
<arg declared_type='ScriptCode*' name='outScriptTag' type='^s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportDoExportImageFileToDataRefDialog'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='inDataRef' type='^*'/>
<arg declared_type='OSType' name='inDataRefType' type='L'/>
<arg declared_type='CFStringRef' name='prompt' type='^{__CFString=}'/>
<arg declared_type='ModalFilterYDUPP' function_pointer='true' name='filterProc' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='OSType*' name='outExportedType' type='^I'/>
<arg declared_type='Handle*' name='outDataRef' type='^^*'/>
<arg declared_type='OSType*' name='outDataRefType' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportDoesDrawAllPixels'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' name='drawsAllPixels' type='^s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportDraw'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportExportImageFile'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='fileType' type='L'/>
<arg declared_type='OSType' name='fileCreator' type='L'/>
<arg const='true' declared_type='FSSpec*' name='fss' type='^{FSSpec=si[64C]}'/>
<arg declared_type='ScriptCode' name='scriptTag' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportExportImageFileToDataRef'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='fileType' type='L'/>
<arg declared_type='OSType' name='fileCreator' type='L'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetAliasedDataReference'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='dataRef' type='^^*'/>
<arg declared_type='OSType*' name='dataRefType' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetAsPicture'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PicHandle*' name='picture' type='^^^{Picture}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetBaseDataOffsetAndSize64'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='wide*' name='offset' type='^{wide=Ii}'/>
<arg declared_type='wide*' name='size' type='^{wide=Ii}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetBoundsRect'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Rect*' name='bounds' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetClip'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RgnHandle*' name='clipRgn' type='^^{OpaqueRgnHandle}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetColorSyncProfile'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='profile' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetDataFile'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='FSSpec*' name='theFile' type='^{FSSpec=si[64C]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetDataHandle'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='h' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetDataOffsetAndSize'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='offset' type='^L'/>
<arg declared_type='unsigned long*' name='size' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetDataOffsetAndSize64'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='wide*' name='offset' type='^{wide=Ii}'/>
<arg declared_type='wide*' name='size' type='^{wide=Ii}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetDataReference'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='dataRef' type='^^*'/>
<arg declared_type='OSType*' name='dataReType' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetDataReferenceOffsetAndLimit'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='offset' type='^L'/>
<arg declared_type='unsigned long*' name='limit' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetDataReferenceOffsetAndLimit64'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='wide*' name='offset' type='^{wide=Ii}'/>
<arg declared_type='wide*' name='limit' type='^{wide=Ii}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetDefaultClip'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RgnHandle*' name='defaultRgn' type='^^{OpaqueRgnHandle}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetDefaultGraphicsMode'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='defaultGraphicsMode' type='^l'/>
<arg declared_type='RGBColor*' name='defaultOpColor' type='^{RGBColor=SSS}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetDefaultMatrix'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='MatrixRecord*' name='defaultMatrix' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetDefaultSourceRect'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Rect*' name='defaultSourceRect' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetDestRect'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Rect*' name='destRect' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetDestinationColorSyncProfileRef'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CMProfileRef*' name='destinationProfileRef' type='^^{OpaqueCMProfileRef}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetExportImageTypeList'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='qtAtomContainerPtr' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetExportSettingsAsAtomContainer'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='qtAtomContainerPtr' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetFlags'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='flags' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetGWorld'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CGrafPtr*' name='port' type='^^{OpaqueGrafPtr}'/>
<arg declared_type='GDHandle*' name='gd' type='^^^{GDevice}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetGenericColorSyncProfile'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='pixelFormat' type='L'/>
<arg declared_type='void*' name='reservedSetToNULL' type='^v'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<arg declared_type='Handle*' name='genericColorSyncProfileOut' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetGraphicsMode'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='graphicsMode' type='^l'/>
<arg declared_type='RGBColor*' name='opColor' type='^{RGBColor=SSS}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetImageCount'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='imageCount' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetImageDescription'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ImageDescriptionHandle*' name='desc' type='^^^{ImageDescription}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetImageIndex'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='imageIndex' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetMIMETypeList'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='qtAtomContainerPtr' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetMatrix'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='MatrixRecord*' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetMetaData'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='userData' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetNaturalBounds'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Rect*' name='naturalBounds' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetOverrideSourceColorSyncProfileRef'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CMProfileRef*' name='outOverrideSourceProfileRef' type='^^{OpaqueCMProfileRef}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetProgressProc'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ICMProgressProcRecordPtr' name='progressProc' type='^{ICMProgressProcRecord=^?l}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetQuality'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CodecQ*' name='quality' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetReturnGenericColorSyncProfile'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='returnGenericProfilesUnlessDontMatchFlagSet' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportGetSourceRect'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Rect*' name='sourceRect' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportReadData'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='dataPtr' type='^v'/>
<arg declared_type='unsigned long' name='dataOffset' type='L'/>
<arg declared_type='unsigned long' name='dataSize' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportReadData64'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='dataPtr' type='^v'/>
<arg const='true' declared_type='wide*' name='dataOffset' type='^{wide=Ii}'/>
<arg declared_type='unsigned long' name='dataSize' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSaveAsPicture'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='FSSpec*' name='fss' type='^{FSSpec=si[64C]}'/>
<arg declared_type='ScriptCode' name='scriptTag' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSaveAsPictureToDataRef'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSaveAsQuickTimeImageFile'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='FSSpec*' name='fss' type='^{FSSpec=si[64C]}'/>
<arg declared_type='ScriptCode' name='scriptTag' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSaveAsQuickTimeImageFileToDataRef'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetBoundsRect'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='Rect*' name='bounds' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetClip'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RgnHandle' name='clipRgn' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetDataFile'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='FSSpec*' name='theFile' type='^{FSSpec=si[64C]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetDataHandle'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='h' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetDataReference'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataReType' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetDataReferenceOffsetAndLimit'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long' name='offset' type='L'/>
<arg declared_type='unsigned long' name='limit' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetDataReferenceOffsetAndLimit64'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='wide*' name='offset' type='^{wide=Ii}'/>
<arg const='true' declared_type='wide*' name='limit' type='^{wide=Ii}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetDestRect'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='Rect*' name='destRect' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetDestinationColorSyncProfileRef'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CMProfileRef' name='newDestinationProfileRef' type='^{OpaqueCMProfileRef=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetExportSettingsFromAtomContainer'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='qtAtomContainer' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetFlags'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetGWorld'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CGrafPtr' name='port' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='GDHandle' name='gd' type='^^{GDevice}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetGraphicsMode'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='graphicsMode' type='l'/>
<arg const='true' declared_type='RGBColor*' name='opColor' type='^{RGBColor=SSS}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetImageIndex'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long' name='imageIndex' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetImageIndexToThumbnail'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetMatrix'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='MatrixRecord*' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetOverrideSourceColorSyncProfileRef'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CMProfileRef' name='newOverrideSourceProfileRef' type='^{OpaqueCMProfileRef=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetProgressProc'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ICMProgressProcRecordPtr' name='progressProc' type='^{ICMProgressProcRecord=^?l}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetQuality'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CodecQ' name='quality' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetReturnGenericColorSyncProfile'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean' name='returnGenericProfilesUnlessDontMatchFlagSet' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportSetSourceRect'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='Rect*' name='sourceRect' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportValidate'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='valid' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='GraphicsImportWillUseColorMatching'>
<arg declared_type='GraphicsImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='outWillMatch' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='HIMovieViewChangeAttributes'>
<arg declared_type='HIViewRef' name='inView' type='^{OpaqueControlRef=}'/>
<arg declared_type='OptionBits' name='inAttributesToSet' type='L'/>
<arg declared_type='OptionBits' name='inAttributesToClear' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='HIMovieViewCreate'>
<arg declared_type='Movie' name='inMovie' type='^^{MovieType}'/>
<arg declared_type='OptionBits' name='inAttributes' type='L'/>
<arg declared_type='HIViewRef*' name='outMovieView' type='^^{OpaqueControlRef}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='HIMovieViewGetAttributes'>
<arg declared_type='HIViewRef' name='inView' type='^{OpaqueControlRef=}'/>
<retval declared_type='OptionBits' type='L'/>
</function>
<function name='HIMovieViewGetControllerBarSize'>
<arg declared_type='HIViewRef' name='inView' type='^{OpaqueControlRef=}'/>
<retval declared_type='HISize' type='{CGSize=ff}'/>
</function>
<function name='HIMovieViewGetMovie'>
<arg declared_type='HIViewRef' name='inView' type='^{OpaqueControlRef=}'/>
<retval declared_type='Movie' type='^^{MovieType}'/>
</function>
<function name='HIMovieViewGetMovieController'>
<arg declared_type='HIViewRef' name='inView' type='^{OpaqueControlRef=}'/>
<retval declared_type='MovieController' type='^{ComponentInstanceRecord=[1l]}'/>
</function>
<function name='HIMovieViewPause'>
<arg declared_type='HIViewRef' name='movieView' type='^{OpaqueControlRef=}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='HIMovieViewPlay'>
<arg declared_type='HIViewRef' name='movieView' type='^{OpaqueControlRef=}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='HIMovieViewSetMovie'>
<arg declared_type='HIViewRef' name='inView' type='^{OpaqueControlRef=}'/>
<arg declared_type='Movie' name='inMovie' type='^^{MovieType}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='HasMovieChanged'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='HitTestDSequenceData'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='Size' name='dataSize' type='l'/>
<arg declared_type='Point' name='where' type='{Point=ss}'/>
<arg declared_type='long*' name='hit' type='^l'/>
<arg declared_type='long' name='hitFlags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ICMCompressionFrameOptionsCreate'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='ICMCompressionSessionRef' name='session' type='^{OpaqueICMCompressionSession=}'/>
<arg declared_type='ICMCompressionFrameOptionsRef*' name='options' type='^^{OpaqueICMCompressionFrameOptions}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionFrameOptionsCreateCopy'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='ICMCompressionFrameOptionsRef' name='originalOptions' type='^{OpaqueICMCompressionFrameOptions=}'/>
<arg declared_type='ICMCompressionFrameOptionsRef*' name='copiedOptions' type='^^{OpaqueICMCompressionFrameOptions}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionFrameOptionsGetForceKeyFrame'>
<arg declared_type='ICMCompressionFrameOptionsRef' name='options' type='^{OpaqueICMCompressionFrameOptions=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='ICMCompressionFrameOptionsGetFrameType'>
<arg declared_type='ICMCompressionFrameOptionsRef' name='options' type='^{OpaqueICMCompressionFrameOptions=}'/>
<retval declared_type='ICMFrameType' type='S'/>
</function>
<function name='ICMCompressionFrameOptionsGetProperty'>
<arg declared_type='ICMCompressionFrameOptionsRef' name='options' type='^{OpaqueICMCompressionFrameOptions=}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ComponentValuePtr' name='outPropValueAddress' type='^v'/>
<arg declared_type='ByteCount*' name='outPropValueSizeUsed' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionFrameOptionsGetPropertyInfo'>
<arg declared_type='ICMCompressionFrameOptionsRef' name='options' type='^{OpaqueICMCompressionFrameOptions=}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ComponentValueType*' name='outPropType' type='^I'/>
<arg declared_type='ByteCount*' name='outPropValueSize' type='^I'/>
<arg declared_type='UInt32*' name='outPropertyFlags' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionFrameOptionsGetTypeID'>
<retval declared_type='CFTypeID' type='L'/>
</function>
<function name='ICMCompressionFrameOptionsRelease'>
<arg declared_type='ICMCompressionFrameOptionsRef' name='options' type='^{OpaqueICMCompressionFrameOptions=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ICMCompressionFrameOptionsRetain'>
<arg declared_type='ICMCompressionFrameOptionsRef' name='options' type='^{OpaqueICMCompressionFrameOptions=}'/>
<retval declared_type='ICMCompressionFrameOptionsRef' type='^{OpaqueICMCompressionFrameOptions=}'/>
</function>
<function name='ICMCompressionFrameOptionsSetForceKeyFrame'>
<arg declared_type='ICMCompressionFrameOptionsRef' name='options' type='^{OpaqueICMCompressionFrameOptions=}'/>
<arg declared_type='Boolean' name='forceKeyFrame' type='B'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionFrameOptionsSetFrameType'>
<arg declared_type='ICMCompressionFrameOptionsRef' name='options' type='^{OpaqueICMCompressionFrameOptions=}'/>
<arg declared_type='ICMFrameType' name='frameType' type='S'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionFrameOptionsSetProperty'>
<arg declared_type='ICMCompressionFrameOptionsRef' name='options' type='^{OpaqueICMCompressionFrameOptions=}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ConstComponentValuePtr' name='inPropValueAddress' type='^v'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionBeginPass'>
<arg declared_type='ICMCompressionSessionRef' name='session' type='^{OpaqueICMCompressionSession=}'/>
<arg declared_type='ICMCompressionPassModeFlags' name='passModeFlags' type='L'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionCompleteFrames'>
<arg declared_type='ICMCompressionSessionRef' name='session' type='^{OpaqueICMCompressionSession=}'/>
<arg declared_type='Boolean' name='completeAllFrames' type='B'/>
<arg declared_type='TimeValue64' name='completeUntilDisplayTimeStamp' type='q'/>
<arg declared_type='TimeValue64' name='nextDisplayTimeStamp' type='q'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionCreate'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='int' name='width' type='i'/>
<arg declared_type='int' name='height' type='i'/>
<arg declared_type='CodecType' name='cType' type='L'/>
<arg declared_type='TimeScale' name='timescale' type='l'/>
<arg declared_type='ICMCompressionSessionOptionsRef' name='compressionOptions' type='^{OpaqueICMCompressionSessionOptions=}'/>
<arg declared_type='CFDictionaryRef' name='sourcePixelBufferAttributes' type='^{__CFDictionary=}'/>
<arg declared_type='ICMEncodedFrameOutputRecord*' name='encodedFrameOutputRecord' type='^{ICMEncodedFrameOutputRecord=^?^v^{__CFAllocator}}'/>
<arg declared_type='ICMCompressionSessionRef*' name='compressionSessionOut' type='^^{OpaqueICMCompressionSession}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionEncodeFrame'>
<arg declared_type='ICMCompressionSessionRef' name='session' type='^{OpaqueICMCompressionSession=}'/>
<arg declared_type='CVPixelBufferRef' name='pixelBuffer' type='^{__CVBuffer=}'/>
<arg declared_type='TimeValue64' name='displayTimeStamp' type='q'/>
<arg declared_type='TimeValue64' name='displayDuration' type='q'/>
<arg declared_type='ICMValidTimeFlags' name='validTimeFlags' type='L'/>
<arg declared_type='ICMCompressionFrameOptionsRef' name='frameOptions' type='^{OpaqueICMCompressionFrameOptions=}'/>
<arg declared_type='ICMSourceTrackingCallbackRecord*' name='sourceTrackingCallback' type='^{ICMSourceTrackingCallbackRecord=^?^v}'/>
<arg declared_type='void*' name='sourceFrameRefCon' type='^v'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionEndPass'>
<arg declared_type='ICMCompressionSessionRef' name='session' type='^{OpaqueICMCompressionSession=}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionGetImageDescription'>
<arg declared_type='ICMCompressionSessionRef' name='session' type='^{OpaqueICMCompressionSession=}'/>
<arg declared_type='ImageDescriptionHandle*' name='imageDescOut' type='^^^{ImageDescription}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionGetPixelBufferPool'>
<arg declared_type='ICMCompressionSessionRef' name='session' type='^{OpaqueICMCompressionSession=}'/>
<retval declared_type='CVPixelBufferPoolRef' type='^{__CVPixelBufferPool=}'/>
</function>
<function name='ICMCompressionSessionGetProperty'>
<arg declared_type='ICMCompressionSessionRef' name='session' type='^{OpaqueICMCompressionSession=}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ComponentValuePtr' name='outPropValueAddress' type='^v'/>
<arg declared_type='ByteCount*' name='outPropValueSizeUsed' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionGetPropertyInfo'>
<arg declared_type='ICMCompressionSessionRef' name='session' type='^{OpaqueICMCompressionSession=}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ComponentValueType*' name='outPropType' type='^I'/>
<arg declared_type='ByteCount*' name='outPropValueSize' type='^I'/>
<arg declared_type='UInt32*' name='outPropertyFlags' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionGetTimeScale'>
<arg declared_type='ICMCompressionSessionRef' name='session' type='^{OpaqueICMCompressionSession=}'/>
<retval declared_type='TimeScale' type='l'/>
</function>
<function name='ICMCompressionSessionGetTypeID'>
<retval declared_type='CFTypeID' type='L'/>
</function>
<function name='ICMCompressionSessionOptionsCreate'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='ICMCompressionSessionOptionsRef*' name='options' type='^^{OpaqueICMCompressionSessionOptions}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionOptionsCreateCopy'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='ICMCompressionSessionOptionsRef' name='originalOptions' type='^{OpaqueICMCompressionSessionOptions=}'/>
<arg declared_type='ICMCompressionSessionOptionsRef*' name='copiedOptions' type='^^{OpaqueICMCompressionSessionOptions}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionOptionsGetAllowFrameReordering'>
<arg declared_type='ICMCompressionSessionOptionsRef' name='options' type='^{OpaqueICMCompressionSessionOptions=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='ICMCompressionSessionOptionsGetAllowFrameTimeChanges'>
<arg declared_type='ICMCompressionSessionOptionsRef' name='options' type='^{OpaqueICMCompressionSessionOptions=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='ICMCompressionSessionOptionsGetAllowTemporalCompression'>
<arg declared_type='ICMCompressionSessionOptionsRef' name='options' type='^{OpaqueICMCompressionSessionOptions=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='ICMCompressionSessionOptionsGetDurationsNeeded'>
<arg declared_type='ICMCompressionSessionOptionsRef' name='options' type='^{OpaqueICMCompressionSessionOptions=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='ICMCompressionSessionOptionsGetMaxKeyFrameInterval'>
<arg declared_type='ICMCompressionSessionOptionsRef' name='options' type='^{OpaqueICMCompressionSessionOptions=}'/>
<retval declared_type='SInt32' type='l'/>
</function>
<function name='ICMCompressionSessionOptionsGetProperty'>
<arg declared_type='ICMCompressionSessionOptionsRef' name='options' type='^{OpaqueICMCompressionSessionOptions=}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ComponentValuePtr' name='outPropValueAddress' type='^v'/>
<arg declared_type='ByteCount*' name='outPropValueSizeUsed' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionOptionsGetPropertyInfo'>
<arg declared_type='ICMCompressionSessionOptionsRef' name='options' type='^{OpaqueICMCompressionSessionOptions=}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ComponentValueType*' name='outPropType' type='^I'/>
<arg declared_type='ByteCount*' name='outPropValueSize' type='^I'/>
<arg declared_type='UInt32*' name='outPropertyFlags' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionOptionsGetTypeID'>
<retval declared_type='CFTypeID' type='L'/>
</function>
<function name='ICMCompressionSessionOptionsRelease'>
<arg declared_type='ICMCompressionSessionOptionsRef' name='options' type='^{OpaqueICMCompressionSessionOptions=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ICMCompressionSessionOptionsRetain'>
<arg declared_type='ICMCompressionSessionOptionsRef' name='options' type='^{OpaqueICMCompressionSessionOptions=}'/>
<retval declared_type='ICMCompressionSessionOptionsRef' type='^{OpaqueICMCompressionSessionOptions=}'/>
</function>
<function name='ICMCompressionSessionOptionsSetAllowFrameReordering'>
<arg declared_type='ICMCompressionSessionOptionsRef' name='options' type='^{OpaqueICMCompressionSessionOptions=}'/>
<arg declared_type='Boolean' name='allowFrameReordering' type='B'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionOptionsSetAllowFrameTimeChanges'>
<arg declared_type='ICMCompressionSessionOptionsRef' name='options' type='^{OpaqueICMCompressionSessionOptions=}'/>
<arg declared_type='Boolean' name='allowFrameTimeChanges' type='B'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionOptionsSetAllowTemporalCompression'>
<arg declared_type='ICMCompressionSessionOptionsRef' name='options' type='^{OpaqueICMCompressionSessionOptions=}'/>
<arg declared_type='Boolean' name='allowTemporalCompression' type='B'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionOptionsSetDurationsNeeded'>
<arg declared_type='ICMCompressionSessionOptionsRef' name='options' type='^{OpaqueICMCompressionSessionOptions=}'/>
<arg declared_type='Boolean' name='decodeDurationsNeeded' type='B'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionOptionsSetMaxKeyFrameInterval'>
<arg declared_type='ICMCompressionSessionOptionsRef' name='options' type='^{OpaqueICMCompressionSessionOptions=}'/>
<arg declared_type='SInt32' name='maxKeyFrameInterval' type='l'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionOptionsSetProperty'>
<arg declared_type='ICMCompressionSessionOptionsRef' name='options' type='^{OpaqueICMCompressionSessionOptions=}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ConstComponentValuePtr' name='inPropValueAddress' type='^v'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionProcessBetweenPasses'>
<arg declared_type='ICMCompressionSessionRef' name='session' type='^{OpaqueICMCompressionSession=}'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<arg declared_type='Boolean*' name='interpassProcessingDoneOut' type='^B'/>
<arg declared_type='ICMCompressionPassModeFlags*' name='requestedNextPassModeFlagsOut' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionRelease'>
<arg declared_type='ICMCompressionSessionRef' name='session' type='^{OpaqueICMCompressionSession=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ICMCompressionSessionRetain'>
<arg declared_type='ICMCompressionSessionRef' name='session' type='^{OpaqueICMCompressionSession=}'/>
<retval declared_type='ICMCompressionSessionRef' type='^{OpaqueICMCompressionSession=}'/>
</function>
<function name='ICMCompressionSessionSetProperty'>
<arg declared_type='ICMCompressionSessionRef' name='session' type='^{OpaqueICMCompressionSession=}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ConstComponentValuePtr' name='inPropValueAddress' type='^v'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressionSessionSupportsMultiPassEncoding'>
<arg declared_type='ICMCompressionSessionRef' name='session' type='^{OpaqueICMCompressionSession=}'/>
<arg declared_type='UInt32' name='multiPassStyleFlags' type='L'/>
<arg declared_type='ICMCompressionPassModeFlags*' name='firstPassModeFlagsOut' type='^I'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='ICMCompressorSessionDropFrame'>
<arg declared_type='ICMCompressorSessionRef' name='session' type='^{OpaqueICMCompressorSession=}'/>
<arg declared_type='ICMCompressorSourceFrameRef' name='sourceFrame' type='^{OpaqueICMCompressorSourceFrame=}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressorSessionEmitEncodedFrame'>
<arg declared_type='ICMCompressorSessionRef' name='session' type='^{OpaqueICMCompressorSession=}'/>
<arg declared_type='ICMMutableEncodedFrameRef' name='encodedFrame' type='^{OpaqueICMEncodedFrame=}'/>
<arg declared_type='long' name='numberOfSourceFrames' type='l'/>
<arg declared_type='ICMCompressorSourceFrameRef*' name='sourceFrames' type='^^{OpaqueICMCompressorSourceFrame}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressorSourceFrameDetachPixelBuffer'>
<arg declared_type='ICMCompressorSourceFrameRef' name='sourceFrame' type='^{OpaqueICMCompressorSourceFrame=}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressorSourceFrameGetDisplayNumber'>
<arg declared_type='ICMCompressorSourceFrameRef' name='sourceFrame' type='^{OpaqueICMCompressorSourceFrame=}'/>
<retval declared_type='long' type='l'/>
</function>
<function name='ICMCompressorSourceFrameGetDisplayTimeStampAndDuration'>
<arg declared_type='ICMCompressorSourceFrameRef' name='sourceFrame' type='^{OpaqueICMCompressorSourceFrame=}'/>
<arg declared_type='TimeValue64*' name='displayTimeStampOut' type='^q'/>
<arg declared_type='TimeValue64*' name='displayDurationOut' type='^q'/>
<arg declared_type='TimeScale*' name='timeScaleOut' type='^i'/>
<arg declared_type='ICMValidTimeFlags*' name='validTimeFlagsOut' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMCompressorSourceFrameGetFrameOptions'>
<arg declared_type='ICMCompressorSourceFrameRef' name='sourceFrame' type='^{OpaqueICMCompressorSourceFrame=}'/>
<retval declared_type='ICMCompressionFrameOptionsRef' type='^{OpaqueICMCompressionFrameOptions=}'/>
</function>
<function name='ICMCompressorSourceFrameGetPixelBuffer'>
<arg declared_type='ICMCompressorSourceFrameRef' name='sourceFrame' type='^{OpaqueICMCompressorSourceFrame=}'/>
<retval declared_type='CVPixelBufferRef' type='^{__CVBuffer=}'/>
</function>
<function name='ICMCompressorSourceFrameGetTypeID'>
<retval declared_type='CFTypeID' type='L'/>
</function>
<function name='ICMCompressorSourceFrameRelease'>
<arg declared_type='ICMCompressorSourceFrameRef' name='sourceFrame' type='^{OpaqueICMCompressorSourceFrame=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ICMCompressorSourceFrameRetain'>
<arg declared_type='ICMCompressorSourceFrameRef' name='sourceFrame' type='^{OpaqueICMCompressorSourceFrame=}'/>
<retval declared_type='ICMCompressorSourceFrameRef' type='^{OpaqueICMCompressorSourceFrame=}'/>
</function>
<function name='ICMDecompressComplete'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='OSErr' name='err' type='s'/>
<arg declared_type='short' name='flag' type='s'/>
<arg declared_type='ICMCompletionProcRecordPtr' name='completionRtn' type='^{ICMCompletionProcRecord=^?l}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ICMDecompressCompleteS'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='OSErr' name='err' type='s'/>
<arg declared_type='short' name='flag' type='s'/>
<arg declared_type='ICMCompletionProcRecordPtr' name='completionRtn' type='^{ICMCompletionProcRecord=^?l}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ICMDecompressionFrameOptionsCreate'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='ICMDecompressionFrameOptionsRef*' name='options' type='^^{OpaqueICMDecompressionFrameOptions}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMDecompressionFrameOptionsCreateCopy'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='ICMDecompressionFrameOptionsRef' name='originalOptions' type='^{OpaqueICMDecompressionFrameOptions=}'/>
<arg declared_type='ICMDecompressionFrameOptionsRef*' name='copiedOptions' type='^^{OpaqueICMDecompressionFrameOptions}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMDecompressionFrameOptionsGetProperty'>
<arg declared_type='ICMDecompressionFrameOptionsRef' name='options' type='^{OpaqueICMDecompressionFrameOptions=}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ComponentValuePtr' name='outPropValueAddress' type='^v'/>
<arg declared_type='ByteCount*' name='outPropValueSizeUsed' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMDecompressionFrameOptionsGetPropertyInfo'>
<arg declared_type='ICMDecompressionFrameOptionsRef' name='options' type='^{OpaqueICMDecompressionFrameOptions=}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ComponentValueType*' name='outPropType' type='^I'/>
<arg declared_type='ByteCount*' name='outPropValueSize' type='^I'/>
<arg declared_type='UInt32*' name='outPropertyFlags' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMDecompressionFrameOptionsGetTypeID'>
<retval declared_type='CFTypeID' type='L'/>
</function>
<function name='ICMDecompressionFrameOptionsRelease'>
<arg declared_type='ICMDecompressionFrameOptionsRef' name='options' type='^{OpaqueICMDecompressionFrameOptions=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ICMDecompressionFrameOptionsRetain'>
<arg declared_type='ICMDecompressionFrameOptionsRef' name='options' type='^{OpaqueICMDecompressionFrameOptions=}'/>
<retval declared_type='ICMDecompressionFrameOptionsRef' type='^{OpaqueICMDecompressionFrameOptions=}'/>
</function>
<function name='ICMDecompressionFrameOptionsSetProperty'>
<arg declared_type='ICMDecompressionFrameOptionsRef' name='options' type='^{OpaqueICMDecompressionFrameOptions=}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ConstComponentValuePtr' name='inPropValueAddress' type='^v'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMDecompressionSessionCreate'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='ICMDecompressionSessionOptionsRef' name='decompressionOptions' type='^{OpaqueICMDecompressionSessionOptions=}'/>
<arg declared_type='CFDictionaryRef' name='destinationPixelBufferAttributes' type='^{__CFDictionary=}'/>
<arg declared_type='ICMDecompressionTrackingCallbackRecord*' name='trackingCallback' type='^{ICMDecompressionTrackingCallbackRecord=^?^v}'/>
<arg declared_type='ICMDecompressionSessionRef*' name='decompressionSessionOut' type='^^{OpaqueICMDecompressionSession}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMDecompressionSessionCreateForVisualContext'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='ICMDecompressionSessionOptionsRef' name='decompressionOptions' type='^{OpaqueICMDecompressionSessionOptions=}'/>
<arg declared_type='QTVisualContextRef' name='visualContext' type='^{OpaqueQTVisualContext=}'/>
<arg declared_type='ICMDecompressionTrackingCallbackRecord*' name='trackingCallback' type='^{ICMDecompressionTrackingCallbackRecord=^?^v}'/>
<arg declared_type='ICMDecompressionSessionRef*' name='decompressionSessionOut' type='^^{OpaqueICMDecompressionSession}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMDecompressionSessionDecodeFrame'>
<arg declared_type='ICMDecompressionSessionRef' name='session' type='^{OpaqueICMDecompressionSession=}'/>
<arg const='true' declared_type='UInt8*' name='data' type='*'/>
<arg declared_type='ByteCount' name='dataSize' type='L'/>
<arg declared_type='ICMDecompressionFrameOptionsRef' name='frameOptions' type='^{OpaqueICMDecompressionFrameOptions=}'/>
<arg const='true' declared_type='ICMFrameTimeRecord*' name='frameTime' type='^{ICMFrameTimeRecord={wide=Ii}l^vlilll{wide=Ii}lq}'/>
<arg declared_type='void*' name='sourceFrameRefCon' type='^v'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMDecompressionSessionFlush'>
<arg declared_type='ICMDecompressionSessionRef' name='session' type='^{OpaqueICMDecompressionSession=}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMDecompressionSessionGetProperty'>
<arg declared_type='ICMDecompressionSessionRef' name='session' type='^{OpaqueICMDecompressionSession=}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ComponentValuePtr' name='outPropValueAddress' type='^v'/>
<arg declared_type='ByteCount*' name='outPropValueSizeUsed' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMDecompressionSessionGetPropertyInfo'>
<arg declared_type='ICMDecompressionSessionRef' name='session' type='^{OpaqueICMDecompressionSession=}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ComponentValueType*' name='outPropType' type='^I'/>
<arg declared_type='ByteCount*' name='outPropValueSize' type='^I'/>
<arg declared_type='UInt32*' name='outPropertyFlags' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMDecompressionSessionGetTypeID'>
<retval declared_type='CFTypeID' type='L'/>
</function>
<function name='ICMDecompressionSessionOptionsCreate'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='ICMDecompressionSessionOptionsRef*' name='options' type='^^{OpaqueICMDecompressionSessionOptions}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMDecompressionSessionOptionsCreateCopy'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='ICMDecompressionSessionOptionsRef' name='originalOptions' type='^{OpaqueICMDecompressionSessionOptions=}'/>
<arg declared_type='ICMDecompressionSessionOptionsRef*' name='copiedOptions' type='^^{OpaqueICMDecompressionSessionOptions}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMDecompressionSessionOptionsGetProperty'>
<arg declared_type='ICMDecompressionSessionOptionsRef' name='options' type='^{OpaqueICMDecompressionSessionOptions=}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ComponentValuePtr' name='outPropValueAddress' type='^v'/>
<arg declared_type='ByteCount*' name='outPropValueSizeUsed' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMDecompressionSessionOptionsGetPropertyInfo'>
<arg declared_type='ICMDecompressionSessionOptionsRef' name='options' type='^{OpaqueICMDecompressionSessionOptions=}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ComponentValueType*' name='outPropType' type='^I'/>
<arg declared_type='ByteCount*' name='outPropValueSize' type='^I'/>
<arg declared_type='UInt32*' name='outPropertyFlags' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMDecompressionSessionOptionsGetTypeID'>
<retval declared_type='CFTypeID' type='L'/>
</function>
<function name='ICMDecompressionSessionOptionsRelease'>
<arg declared_type='ICMDecompressionSessionOptionsRef' name='options' type='^{OpaqueICMDecompressionSessionOptions=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ICMDecompressionSessionOptionsRetain'>
<arg declared_type='ICMDecompressionSessionOptionsRef' name='options' type='^{OpaqueICMDecompressionSessionOptions=}'/>
<retval declared_type='ICMDecompressionSessionOptionsRef' type='^{OpaqueICMDecompressionSessionOptions=}'/>
</function>
<function name='ICMDecompressionSessionOptionsSetProperty'>
<arg declared_type='ICMDecompressionSessionOptionsRef' name='options' type='^{OpaqueICMDecompressionSessionOptions=}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ConstComponentValuePtr' name='inPropValueAddress' type='^v'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMDecompressionSessionRelease'>
<arg declared_type='ICMDecompressionSessionRef' name='session' type='^{OpaqueICMDecompressionSession=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ICMDecompressionSessionRetain'>
<arg declared_type='ICMDecompressionSessionRef' name='session' type='^{OpaqueICMDecompressionSession=}'/>
<retval declared_type='ICMDecompressionSessionRef' type='^{OpaqueICMDecompressionSession=}'/>
</function>
<function name='ICMDecompressionSessionSetNonScheduledDisplayDirection'>
<arg declared_type='ICMDecompressionSessionRef' name='session' type='^{OpaqueICMDecompressionSession=}'/>
<arg declared_type='Fixed' name='rate' type='l'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMDecompressionSessionSetNonScheduledDisplayTime'>
<arg declared_type='ICMDecompressionSessionRef' name='session' type='^{OpaqueICMDecompressionSession=}'/>
<arg declared_type='TimeValue64' name='displayTime' type='q'/>
<arg declared_type='TimeScale' name='displayTimeScale' type='l'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMDecompressionSessionSetProperty'>
<arg declared_type='ICMDecompressionSessionRef' name='session' type='^{OpaqueICMDecompressionSession=}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ConstComponentValuePtr' name='inPropValueAddress' type='^v'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMEncodedFrameCreateMutable'>
<arg declared_type='ICMCompressorSessionRef' name='session' type='^{OpaqueICMCompressorSession=}'/>
<arg declared_type='ICMCompressorSourceFrameRef' name='sourceFrame' type='^{OpaqueICMCompressorSourceFrame=}'/>
<arg declared_type='ByteCount' name='bufferSize' type='L'/>
<arg declared_type='ICMMutableEncodedFrameRef*' name='frameOut' type='^^{OpaqueICMEncodedFrame}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMEncodedFrameGetBufferSize'>
<arg declared_type='ICMEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<retval declared_type='ByteCount' type='L'/>
</function>
<function name='ICMEncodedFrameGetDataPtr'>
<arg declared_type='ICMEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<retval declared_type='UInt8*' type='*'/>
</function>
<function name='ICMEncodedFrameGetDataSize'>
<arg declared_type='ICMEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<retval declared_type='ByteCount' type='L'/>
</function>
<function name='ICMEncodedFrameGetDecodeDuration'>
<arg declared_type='ICMEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<retval declared_type='TimeValue64' type='q'/>
</function>
<function name='ICMEncodedFrameGetDecodeNumber'>
<arg declared_type='ICMEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<retval declared_type='UInt32' type='L'/>
</function>
<function name='ICMEncodedFrameGetDecodeTimeStamp'>
<arg declared_type='ICMEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<retval declared_type='TimeValue64' type='q'/>
</function>
<function name='ICMEncodedFrameGetDisplayDuration'>
<arg declared_type='ICMEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<retval declared_type='TimeValue64' type='q'/>
</function>
<function name='ICMEncodedFrameGetDisplayOffset'>
<arg declared_type='ICMEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<retval declared_type='TimeValue64' type='q'/>
</function>
<function name='ICMEncodedFrameGetDisplayTimeStamp'>
<arg declared_type='ICMEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<retval declared_type='TimeValue64' type='q'/>
</function>
<function name='ICMEncodedFrameGetFrameType'>
<arg declared_type='ICMEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<retval declared_type='ICMFrameType' type='S'/>
</function>
<function name='ICMEncodedFrameGetImageDescription'>
<arg declared_type='ICMEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<arg declared_type='ImageDescriptionHandle*' name='imageDescOut' type='^^^{ImageDescription}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMEncodedFrameGetMediaSampleFlags'>
<arg declared_type='ICMEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<retval declared_type='MediaSampleFlags' type='L'/>
</function>
<function name='ICMEncodedFrameGetSimilarity'>
<arg declared_type='ICMEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<retval declared_type='Float32' type='f'/>
</function>
<function name='ICMEncodedFrameGetSourceFrameRefCon'>
<arg declared_type='ICMEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='ICMEncodedFrameGetTimeScale'>
<arg declared_type='ICMEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<retval declared_type='TimeScale' type='l'/>
</function>
<function name='ICMEncodedFrameGetTypeID'>
<retval declared_type='CFTypeID' type='L'/>
</function>
<function name='ICMEncodedFrameGetValidTimeFlags'>
<arg declared_type='ICMEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<retval declared_type='ICMValidTimeFlags' type='L'/>
</function>
<function name='ICMEncodedFrameRelease'>
<arg declared_type='ICMEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ICMEncodedFrameRetain'>
<arg declared_type='ICMEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<retval declared_type='ICMEncodedFrameRef' type='^{OpaqueICMEncodedFrame=}'/>
</function>
<function name='ICMEncodedFrameSetDataSize'>
<arg declared_type='ICMMutableEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<arg declared_type='ByteCount' name='dataSize' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMEncodedFrameSetDecodeDuration'>
<arg declared_type='ICMMutableEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<arg declared_type='TimeValue64' name='decodeDuration' type='q'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMEncodedFrameSetDecodeTimeStamp'>
<arg declared_type='ICMMutableEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<arg declared_type='TimeValue64' name='decodeTimeStamp' type='q'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMEncodedFrameSetDisplayDuration'>
<arg declared_type='ICMMutableEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<arg declared_type='TimeValue64' name='displayDuration' type='q'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMEncodedFrameSetDisplayTimeStamp'>
<arg declared_type='ICMMutableEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<arg declared_type='TimeValue64' name='displayTimeStamp' type='q'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMEncodedFrameSetFrameType'>
<arg declared_type='ICMMutableEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<arg declared_type='ICMFrameType' name='frameType' type='S'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMEncodedFrameSetMediaSampleFlags'>
<arg declared_type='ICMMutableEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<arg declared_type='MediaSampleFlags' name='mediaSampleFlags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMEncodedFrameSetSimilarity'>
<arg declared_type='ICMMutableEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<arg declared_type='Float32' name='similarity' type='f'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMEncodedFrameSetValidTimeFlags'>
<arg declared_type='ICMMutableEncodedFrameRef' name='frame' type='^{OpaqueICMEncodedFrame=}'/>
<arg declared_type='ICMValidTimeFlags' name='validTimeFlags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMGetPixelFormatInfo'>
<arg declared_type='OSType' name='PixelFormat' type='L'/>
<arg declared_type='ICMPixelFormatInfoPtr' name='theInfo' type='^{ICMPixelFormatInfo=lL[14s]i[14s][14s]ss}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ICMImageDescriptionGetProperty'>
<arg declared_type='ImageDescriptionHandle' name='inDesc' type='^^{ImageDescription}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ComponentValuePtr' name='outPropValueAddress' type='^v'/>
<arg declared_type='ByteCount*' name='outPropValueSizeUsed' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMImageDescriptionGetPropertyInfo'>
<arg declared_type='ImageDescriptionHandle' name='inDesc' type='^^{ImageDescription}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ComponentValueType*' name='outPropType' type='^I'/>
<arg declared_type='ByteCount*' name='outPropValueSize' type='^I'/>
<arg declared_type='UInt32*' name='outPropertyFlags' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMImageDescriptionSetProperty'>
<arg declared_type='ImageDescriptionHandle' name='inDesc' type='^^{ImageDescription}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ConstComponentValuePtr' name='inPropValueAddress' type='^v'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMMultiPassStorageCopyDataAtTimeStamp'>
<arg declared_type='ICMMultiPassStorageRef' name='multiPassStorage' type='^{OpaqueICMMultiPassStorage=}'/>
<arg declared_type='TimeValue64' name='timeStamp' type='q'/>
<arg declared_type='long' name='index' type='l'/>
<arg declared_type='CFMutableDataRef*' name='dataOut' type='^^{__CFData}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMMultiPassStorageCreateWithCallbacks'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='ICMMultiPassStorageCallbacks*' name='callbacks' type='^{ICMMultiPassStorageCallbacks=I^v^?^?^?^?}'/>
<arg declared_type='ICMMultiPassStorageRef*' name='multiPassStorageOut' type='^^{OpaqueICMMultiPassStorage}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMMultiPassStorageCreateWithTemporaryFile'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='FSRef*' name='directoryRef' type='^{FSRef=[80C]}'/>
<arg declared_type='CFStringRef' name='fileName' type='^{__CFString=}'/>
<arg declared_type='ICMMultiPassStorageCreationFlags' name='flags' type='L'/>
<arg declared_type='ICMMultiPassStorageRef*' name='multiPassStorageOut' type='^^{OpaqueICMMultiPassStorage}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMMultiPassStorageGetTimeStamp'>
<arg declared_type='ICMMultiPassStorageRef' name='multiPassStorage' type='^{OpaqueICMMultiPassStorage=}'/>
<arg declared_type='TimeValue64' name='fromTimeStamp' type='q'/>
<arg declared_type='ICMMultiPassStorageStep' name='step' type='L'/>
<arg declared_type='TimeValue64*' name='timeStampOut' type='^q'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMMultiPassStorageGetTypeID'>
<retval declared_type='CFTypeID' type='L'/>
</function>
<function name='ICMMultiPassStorageRelease'>
<arg declared_type='ICMMultiPassStorageRef' name='multiPassStorage' type='^{OpaqueICMMultiPassStorage=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ICMMultiPassStorageRetain'>
<arg declared_type='ICMMultiPassStorageRef' name='multiPassStorage' type='^{OpaqueICMMultiPassStorage=}'/>
<retval declared_type='ICMMultiPassStorageRef' type='^{OpaqueICMMultiPassStorage=}'/>
</function>
<function name='ICMMultiPassStorageSetDataAtTimeStamp'>
<arg declared_type='ICMMultiPassStorageRef' name='multiPassStorage' type='^{OpaqueICMMultiPassStorage=}'/>
<arg declared_type='TimeValue64' name='timeStamp' type='q'/>
<arg declared_type='long' name='index' type='l'/>
<arg declared_type='CFDataRef' name='data' type='^{__CFData=}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='ICMSequenceGetChainMember'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='ImageSequence*' name='retSeqID' type='^i'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ICMSequenceGetInfo'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='OSType' name='which' type='L'/>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ICMSequenceLockBits'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='PixMapPtr' name='dst' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ICMSequenceSetInfo'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='OSType' name='which' type='L'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='Size' name='dataSize' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ICMSequenceUnlockBits'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ICMSetPixelFormatInfo'>
<arg declared_type='OSType' name='PixelFormat' type='L'/>
<arg declared_type='ICMPixelFormatInfoPtr' name='theInfo' type='^{ICMPixelFormatInfo=lL[14s]i[14s][14s]ss}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ICMShieldSequenceCursor'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ITextAddString'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='parentAtom' type='l'/>
<arg declared_type='RegionCode' name='theRegionCode' type='s'/>
<arg declared_type='ConstStr255Param' name='theString' type='*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ITextGetString'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='parentAtom' type='l'/>
<arg declared_type='RegionCode' name='requestedRegion' type='s'/>
<arg declared_type='RegionCode*' name='foundRegion' type='^s'/>
<arg declared_type='StringPtr' name='theString' type='*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ITextRemoveString'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='parentAtom' type='l'/>
<arg declared_type='RegionCode' name='theRegionCode' type='s'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ImageCodecBandCompress'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CodecCompressParams*' name='params' type='^{CodecCompressParams=i^^{ImageDescription}*lllllS^{CodecCapabilities}{ICMProgressProcRecord=^?l}{ICMCompletionProcRecord=^?l}{ICMFlushProcRecord=^?l}{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}IIi^{DataRateParams}lSS^{CDSequenceDataSource}lllIlII}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecBandDecompress'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CodecDecompressParams*' name='params' type='^{CodecDecompressParams=i^^{ImageDescription}*lllllS^{CodecCapabilities}{ICMProgressProcRecord=^?l}{ICMCompletionProcRecord=^?l}{ICMDataProcRecord=^?l}^{OpaqueGrafPtr}{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}^{BitMap}^{PixMap}{Rect=ssss}^{MatrixRecord}Is^{ICMFrameTimeRecord}[1l]cc{Rect=ssss}SS^{CDSequenceDataSource}^{OpaqueRgnHandle}^^Ills^{ICMFrameTimeInfo}BBBBl^{OpaqueGrafPtr}ll{Rect=ssss}BB[2B]iIIBCCB{QTUUID=ISS[8C]}CC[2C]lIl^v^v^v^v}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecBeginBand'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CodecDecompressParams*' name='params' type='^{CodecDecompressParams=i^^{ImageDescription}*lllllS^{CodecCapabilities}{ICMProgressProcRecord=^?l}{ICMCompletionProcRecord=^?l}{ICMDataProcRecord=^?l}^{OpaqueGrafPtr}{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}^{BitMap}^{PixMap}{Rect=ssss}^{MatrixRecord}Is^{ICMFrameTimeRecord}[1l]cc{Rect=ssss}SS^{CDSequenceDataSource}^{OpaqueRgnHandle}^^Ills^{ICMFrameTimeInfo}BBBBl^{OpaqueGrafPtr}ll{Rect=ssss}BB[2B]iIIBCCB{QTUUID=ISS[8C]}CC[2C]lIl^v^v^v^v}'/>
<arg declared_type='ImageSubCodecDecompressRecord*' name='drp' type='^{ImageSubCodecDecompressRecord=*l*{ICMProgressProcRecord=^?l}{ICMDataProcRecord=^?l}^vCB[2C][2l]^?^v^vll}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecBeginPass'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ICMCompressionPassModeFlags' name='passModeFlags' type='L'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<arg declared_type='ICMMultiPassStorageRef' name='multiPassStorage' type='^{OpaqueICMMultiPassStorage=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecBusy'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ImageSequence' name='seq' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecCancelTrigger'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecCompleteFrame'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ICMCompressorSourceFrameRef' name='sourceFrame' type='^{OpaqueICMCompressorSourceFrame=}'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecCreateStandardParameterDialog'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer' name='parameterDescription' type='^*'/>
<arg declared_type='QTAtomContainer' name='parameters' type='^*'/>
<arg declared_type='QTParameterDialogOptions' name='dialogOptions' type='l'/>
<arg declared_type='DialogPtr' name='existingDialog' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='short' name='existingUserItem' type='s'/>
<arg declared_type='QTParameterDialog*' name='createdDialog' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecDITLEvent'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='DialogRef' name='d' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='short' name='itemOffset' type='s'/>
<arg const='true' declared_type='EventRecord*' name='theEvent' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='short*' name='itemHit' type='^s'/>
<arg declared_type='Boolean*' name='handled' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecDITLInstall'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='DialogRef' name='d' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='short' name='itemOffset' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecDITLItem'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='DialogRef' name='d' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='short' name='itemOffset' type='s'/>
<arg declared_type='short' name='itemNum' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecDITLRemove'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='DialogRef' name='d' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='short' name='itemOffset' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecDITLValidateInput'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='ok' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecDecodeBand'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ImageSubCodecDecompressRecord*' name='drp' type='^{ImageSubCodecDecompressRecord=*l*{ICMProgressProcRecord=^?l}{ICMDataProcRecord=^?l}^vCB[2C][2l]^?^v^vll}'/>
<arg declared_type='unsigned long' name='flags' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecDismissStandardParameterDialog'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTParameterDialog' name='createdDialog' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecDisposeImageGWorld'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='GWorldPtr' name='theGW' type='^{OpaqueGrafPtr=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecDisposeMemory'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' name='data' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecDrawBand'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ImageSubCodecDecompressRecord*' name='drp' type='^{ImageSubCodecDecompressRecord=*l*{ICMProgressProcRecord=^?l}{ICMDataProcRecord=^?l}^vCB[2C][2l]^?^v^vll}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecDroppingFrame'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='ImageSubCodecDecompressRecord*' name='drp' type='^{ImageSubCodecDecompressRecord=*l*{ICMProgressProcRecord=^?l}{ICMDataProcRecord=^?l}^vCB[2C][2l]^?^v^vll}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecEffectBegin'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CodecDecompressParams*' name='p' type='^{CodecDecompressParams=i^^{ImageDescription}*lllllS^{CodecCapabilities}{ICMProgressProcRecord=^?l}{ICMCompletionProcRecord=^?l}{ICMDataProcRecord=^?l}^{OpaqueGrafPtr}{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}^{BitMap}^{PixMap}{Rect=ssss}^{MatrixRecord}Is^{ICMFrameTimeRecord}[1l]cc{Rect=ssss}SS^{CDSequenceDataSource}^{OpaqueRgnHandle}^^Ills^{ICMFrameTimeInfo}BBBBl^{OpaqueGrafPtr}ll{Rect=ssss}BB[2B]iIIBCCB{QTUUID=ISS[8C]}CC[2C]lIl^v^v^v^v}'/>
<arg declared_type='EffectsFrameParamsPtr' name='ePtr' type='^{EffectsFrameParams={ICMFrameTimeRecord_QT3={wide=Ii}l^vlilll{wide=Ii}l}lB[3C]^{EffectSource}^v}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecEffectCancel'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='EffectsFrameParamsPtr' name='p' type='^{EffectsFrameParams={ICMFrameTimeRecord_QT3={wide=Ii}l^vlilll{wide=Ii}l}lB[3C]^{EffectSource}^v}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecEffectConvertEffectSourceToFormat'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='EffectSourcePtr' name='sourceToConvert' type='^{EffectSource=l*(SourceData=^{CDSequenceDataSource}^{EffectSource})^{EffectSource}iii}'/>
<arg declared_type='ImageDescriptionHandle' name='requestedDesc' type='^^{ImageDescription}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecEffectDisposeSMPTEFrame'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SMPTEFrameReference' name='frameRef' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecEffectGetSpeed'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer' name='parameters' type='^*'/>
<arg declared_type='Fixed*' name='pFPS' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecEffectPrepareSMPTEFrame'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PixMapPtr' name='destPixMap' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='SMPTEFrameReference*' name='returnValue' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecEffectRenderFrame'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='EffectsFrameParamsPtr' name='p' type='^{EffectsFrameParams={ICMFrameTimeRecord_QT3={wide=Ii}l^vlilll{wide=Ii}l}lB[3C]^{EffectSource}^v}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecEffectRenderSMPTEFrame'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PixMapPtr' name='destPixMap' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='SMPTEFrameReference' name='frameRef' type='l'/>
<arg declared_type='Fixed' name='effectPercentageEven' type='l'/>
<arg declared_type='Fixed' name='effectPercentageOdd' type='l'/>
<arg declared_type='Rect*' name='pSourceRect' type='^{Rect=ssss}'/>
<arg declared_type='MatrixRecord*' name='matrixP' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='SMPTEWipeType' name='effectNumber' type='L'/>
<arg declared_type='long' name='xRepeat' type='l'/>
<arg declared_type='long' name='yRepeat' type='l'/>
<arg declared_type='SMPTEFlags' name='flags' type='l'/>
<arg declared_type='Fixed' name='penWidth' type='l'/>
<arg declared_type='long' name='strokeValue' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecEffectSetup'>
<arg declared_type='ComponentInstance' name='effect' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CodecDecompressParams*' name='p' type='^{CodecDecompressParams=i^^{ImageDescription}*lllllS^{CodecCapabilities}{ICMProgressProcRecord=^?l}{ICMCompletionProcRecord=^?l}{ICMDataProcRecord=^?l}^{OpaqueGrafPtr}{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}^{BitMap}^{PixMap}{Rect=ssss}^{MatrixRecord}Is^{ICMFrameTimeRecord}[1l]cc{Rect=ssss}SS^{CDSequenceDataSource}^{OpaqueRgnHandle}^^Ills^{ICMFrameTimeInfo}BBBBl^{OpaqueGrafPtr}ll{Rect=ssss}BB[2B]iIIBCCB{QTUUID=ISS[8C]}CC[2C]lIl^v^v^v^v}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecEncodeFrame'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ICMCompressorSourceFrameRef' name='sourceFrame' type='^{OpaqueICMCompressorSourceFrame=}'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecEndBand'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ImageSubCodecDecompressRecord*' name='drp' type='^{ImageSubCodecDecompressRecord=*l*{ICMProgressProcRecord=^?l}{ICMDataProcRecord=^?l}^vCB[2C][2l]^?^v^vll}'/>
<arg declared_type='OSErr' name='result' type='s'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecEndPass'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecExtractAndCombineFields'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='fieldFlags' type='l'/>
<arg declared_type='void*' name='data1' type='^v'/>
<arg declared_type='long' name='dataSize1' type='l'/>
<arg declared_type='ImageDescriptionHandle' name='desc1' type='^^{ImageDescription}'/>
<arg declared_type='void*' name='data2' type='^v'/>
<arg declared_type='long' name='dataSize2' type='l'/>
<arg declared_type='ImageDescriptionHandle' name='desc2' type='^^{ImageDescription}'/>
<arg declared_type='void*' name='outputData' type='^v'/>
<arg declared_type='long*' name='outDataSize' type='^l'/>
<arg declared_type='ImageDescriptionHandle' name='descOut' type='^^{ImageDescription}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecFlush'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecFlushFrame'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecGetBaseMPWorkFunction'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentMPWorkFunctionUPP*' name='workFunction' type='^^?'/>
<arg declared_type='void**' name='refCon' type='^^v'/>
<arg declared_type='ImageCodecMPDrawBandUPP' function_pointer='true' name='drawProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ImageSubCodecDecompressRecord*' type='^{ImageSubCodecDecompressRecord=*l*{ICMProgressProcRecord=^?l}{ICMDataProcRecord=^?l}^vCB[2C][2l]^?^v^vll}'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<arg declared_type='void*' name='drawProcRefCon' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecGetCodecInfo'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CodecInfo*' name='info' type='^{CodecInfo=[32C]ssllllCCSSCCssssl}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecGetCompressedImageSize'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='Ptr' name='data' type='*'/>
<arg declared_type='long' name='bufferSize' type='l'/>
<arg declared_type='ICMDataProcRecordPtr' name='dataProc' type='^{ICMDataProcRecord=^?l}'/>
<arg declared_type='long*' name='dataSize' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecGetCompressionTime'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PixMapHandle' name='src' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='short' name='depth' type='s'/>
<arg declared_type='CodecQ*' name='spatialQuality' type='^I'/>
<arg declared_type='CodecQ*' name='temporalQuality' type='^I'/>
<arg declared_type='unsigned long*' name='time' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecGetDITLForSize'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='ditl' type='^^*'/>
<arg declared_type='Point*' name='requestedSize' type='^{Point=ss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecGetDecompressLatency'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeRecord*' name='latency' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecGetMaxCompressionSize'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PixMapHandle' name='src' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='short' name='depth' type='s'/>
<arg declared_type='CodecQ' name='quality' type='L'/>
<arg declared_type='long*' name='size' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecGetMaxCompressionSizeWithSources'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PixMapHandle' name='src' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='short' name='depth' type='s'/>
<arg declared_type='CodecQ' name='quality' type='L'/>
<arg declared_type='CDSequenceDataSourcePtr' name='sourceData' type='^{CDSequenceDataSource=l^viiIl^v^*l^?^vl^{QHdr}^vl^*l}'/>
<arg declared_type='long*' name='size' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecGetParameterList'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer*' name='parameterDescription' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecGetParameterListHandle'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='parameterDescriptionHandle' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecGetPreferredChunkSizeAndAlignment'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='Fixed' name='frameRate' type='l'/>
<arg declared_type='UInt32' name='dataRate' type='L'/>
<arg declared_type='long*' name='bytesPerChunk' type='^l'/>
<arg declared_type='long*' name='alignment' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecGetSettings'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='settings' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecGetSettingsAsText'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='text' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecGetSimilarity'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PixMapHandle' name='src' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='Ptr' name='data' type='*'/>
<arg declared_type='Fixed*' name='similarity' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecGetSourceDataGammaLevel'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Fixed*' name='sourceDataGammaLevel' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecHitTestData'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='Size' name='dataSize' type='l'/>
<arg declared_type='Point' name='where' type='{Point=ss}'/>
<arg declared_type='Boolean*' name='hit' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecHitTestDataWithFlags'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='Size' name='dataSize' type='l'/>
<arg declared_type='Point' name='where' type='{Point=ss}'/>
<arg declared_type='long*' name='hit' type='^l'/>
<arg declared_type='long' name='hitFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecInitialize'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ImageSubCodecDecompressCapabilities*' name='cap' type='^{ImageSubCodecDecompressCapabilities=llBCSBBB[1C]BC[1C]BBBBB[2C]BB[4C]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecIsImageDescriptionEquivalent'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ImageDescriptionHandle' name='newDesc' type='^^{ImageDescription}'/>
<arg declared_type='Boolean*' name='equivalent' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecIsStandardParameterDialogEvent'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='EventRecord*' name='pEvent' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='QTParameterDialog' name='createdDialog' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecLockBits'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CGrafPtr' name='port' type='^{OpaqueGrafPtr=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecMergeFloatingImageOntoWindow'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecNewImageBufferMemory'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CodecDecompressParams*' name='params' type='^{CodecDecompressParams=i^^{ImageDescription}*lllllS^{CodecCapabilities}{ICMProgressProcRecord=^?l}{ICMCompletionProcRecord=^?l}{ICMDataProcRecord=^?l}^{OpaqueGrafPtr}{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}^{BitMap}^{PixMap}{Rect=ssss}^{MatrixRecord}Is^{ICMFrameTimeRecord}[1l]cc{Rect=ssss}SS^{CDSequenceDataSource}^{OpaqueRgnHandle}^^Ills^{ICMFrameTimeInfo}BBBBl^{OpaqueGrafPtr}ll{Rect=ssss}BB[2B]iIIBCCB{QTUUID=ISS[8C]}CC[2C]lIl^v^v^v^v}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='ICMMemoryDisposedUPP' function_pointer='true' name='memoryGoneProc' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecNewImageGWorld'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CodecDecompressParams*' name='params' type='^{CodecDecompressParams=i^^{ImageDescription}*lllllS^{CodecCapabilities}{ICMProgressProcRecord=^?l}{ICMCompletionProcRecord=^?l}{ICMDataProcRecord=^?l}^{OpaqueGrafPtr}{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}^{BitMap}^{PixMap}{Rect=ssss}^{MatrixRecord}Is^{ICMFrameTimeRecord}[1l]cc{Rect=ssss}SS^{CDSequenceDataSource}^{OpaqueRgnHandle}^^Ills^{ICMFrameTimeInfo}BBBBl^{OpaqueGrafPtr}ll{Rect=ssss}BB[2B]iIIBCCB{QTUUID=ISS[8C]}CC[2C]lIl^v^v^v^v}'/>
<arg declared_type='GWorldPtr*' name='newGW' type='^^{OpaqueGrafPtr}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecNewMemory'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr*' name='data' type='^*'/>
<arg declared_type='Size' name='dataSize' type='l'/>
<arg declared_type='long' name='dataUse' type='l'/>
<arg declared_type='ICMMemoryDisposedUPP' function_pointer='true' name='memoryGoneProc' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecPreCompress'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CodecCompressParams*' name='params' type='^{CodecCompressParams=i^^{ImageDescription}*lllllS^{CodecCapabilities}{ICMProgressProcRecord=^?l}{ICMCompletionProcRecord=^?l}{ICMFlushProcRecord=^?l}{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}IIi^{DataRateParams}lSS^{CDSequenceDataSource}lllIlII}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecPreDecompress'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CodecDecompressParams*' name='params' type='^{CodecDecompressParams=i^^{ImageDescription}*lllllS^{CodecCapabilities}{ICMProgressProcRecord=^?l}{ICMCompletionProcRecord=^?l}{ICMDataProcRecord=^?l}^{OpaqueGrafPtr}{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}^{BitMap}^{PixMap}{Rect=ssss}^{MatrixRecord}Is^{ICMFrameTimeRecord}[1l]cc{Rect=ssss}SS^{CDSequenceDataSource}^{OpaqueRgnHandle}^^Ills^{ICMFrameTimeInfo}BBBBl^{OpaqueGrafPtr}ll{Rect=ssss}BB[2B]iIIBCCB{QTUUID=ISS[8C]}CC[2C]lIl^v^v^v^v}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecPreflight'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CodecDecompressParams*' name='params' type='^{CodecDecompressParams=i^^{ImageDescription}*lllllS^{CodecCapabilities}{ICMProgressProcRecord=^?l}{ICMCompletionProcRecord=^?l}{ICMDataProcRecord=^?l}^{OpaqueGrafPtr}{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}^{BitMap}^{PixMap}{Rect=ssss}^{MatrixRecord}Is^{ICMFrameTimeRecord}[1l]cc{Rect=ssss}SS^{CDSequenceDataSource}^{OpaqueRgnHandle}^^Ills^{ICMFrameTimeInfo}BBBBl^{OpaqueGrafPtr}ll{Rect=ssss}BB[2B]iIIBCCB{QTUUID=ISS[8C]}CC[2C]lIl^v^v^v^v}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecPrepareToCompressFrames'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ICMCompressorSessionRef' name='session' type='^{OpaqueICMCompressorSession=}'/>
<arg declared_type='ICMCompressionSessionOptionsRef' name='compressionSessionOptions' type='^{OpaqueICMCompressionSessionOptions=}'/>
<arg declared_type='ImageDescriptionHandle' name='imageDescription' type='^^{ImageDescription}'/>
<arg declared_type='void*' name='reserved' type='^v'/>
<arg declared_type='CFDictionaryRef*' name='compressorPixelBufferAttributesOut' type='^^{__CFDictionary}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecProcessBetweenPasses'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ICMMultiPassStorageRef' name='multiPassStorage' type='^{OpaqueICMMultiPassStorage=}'/>
<arg declared_type='Boolean*' name='interpassProcessingDoneOut' type='^B'/>
<arg declared_type='ICMCompressionPassModeFlags*' name='requestedNextPassModeFlagsOut' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecQueueStarting'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecQueueStopping'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecRemoveFloatingImage'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecRequestGammaLevel'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Fixed' name='srcGammaLevel' type='l'/>
<arg declared_type='Fixed' name='dstGammaLevel' type='l'/>
<arg declared_type='long*' name='codecCanMatch' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecRequestSettings'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='settings' type='^*'/>
<arg declared_type='Rect*' name='rp' type='^{Rect=ssss}'/>
<arg declared_type='ModalFilterUPP' function_pointer='true' name='filterProc' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='DialogItemIndex*' type='^s'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecScheduleFrame'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='ImageSubCodecDecompressRecord*' name='drp' type='^{ImageSubCodecDecompressRecord=*l*{ICMProgressProcRecord=^?l}{ICMDataProcRecord=^?l}^vCB[2C][2l]^?^v^vll}'/>
<arg declared_type='ImageCodecTimeTriggerUPP' function_pointer='true' name='triggerProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='triggerProcRefCon' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecSetSettings'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='settings' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecSetTimeBase'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='base' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecSetTimeCode'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='timeCodeFormat' type='^v'/>
<arg declared_type='void*' name='timeCodeTime' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecSourceChanged'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='majorSourceChangeSeed' type='L'/>
<arg declared_type='UInt32' name='minorSourceChangeSeed' type='L'/>
<arg declared_type='CDSequenceDataSourcePtr' name='sourceData' type='^{CDSequenceDataSource=l^viiIl^v^*l^?^vl^{QHdr}^vl^*l}'/>
<arg declared_type='long*' name='flagsOut' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecStandardParameterDialogDoAction'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTParameterDialog' name='createdDialog' type='l'/>
<arg declared_type='long' name='action' type='l'/>
<arg declared_type='void*' name='params' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecTrimImage'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ImageDescriptionHandle' name='Desc' type='^^{ImageDescription}'/>
<arg declared_type='Ptr' name='inData' type='*'/>
<arg declared_type='long' name='inBufferSize' type='l'/>
<arg declared_type='ICMDataProcRecordPtr' name='dataProc' type='^{ICMDataProcRecord=^?l}'/>
<arg declared_type='Ptr' name='outData' type='*'/>
<arg declared_type='long' name='outBufferSize' type='l'/>
<arg declared_type='ICMFlushProcRecordPtr' name='flushProc' type='^{ICMFlushProcRecord=^?l}'/>
<arg declared_type='Rect*' name='trimRect' type='^{Rect=ssss}'/>
<arg declared_type='ICMProgressProcRecordPtr' name='progressProc' type='^{ICMProgressProcRecord=^?l}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecUnlockBits'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CGrafPtr' name='port' type='^{OpaqueGrafPtr=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageCodecValidateParameters'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer' name='parameters' type='^*'/>
<arg declared_type='QTParameterValidationOptions' name='validationFlags' type='l'/>
<arg declared_type='StringPtr' name='errorString' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageFieldSequenceBegin'>
<arg declared_type='ImageFieldSequence*' name='ifs' type='^i'/>
<arg declared_type='ImageDescriptionHandle' name='desc1' type='^^{ImageDescription}'/>
<arg declared_type='ImageDescriptionHandle' name='desc2' type='^^{ImageDescription}'/>
<arg declared_type='ImageDescriptionHandle' name='descOut' type='^^{ImageDescription}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ImageFieldSequenceEnd'>
<arg declared_type='ImageFieldSequence' name='ifs' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ImageFieldSequenceExtractCombine'>
<arg declared_type='ImageFieldSequence' name='ifs' type='l'/>
<arg declared_type='long' name='fieldFlags' type='l'/>
<arg declared_type='void*' name='data1' type='^v'/>
<arg declared_type='long' name='dataSize1' type='l'/>
<arg declared_type='void*' name='data2' type='^v'/>
<arg declared_type='long' name='dataSize2' type='l'/>
<arg declared_type='void*' name='outputData' type='^v'/>
<arg declared_type='long*' name='outDataSize' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ImageTranscodeDisposeFrameData'>
<arg declared_type='ImageTranscodeSequence' name='its' type='l'/>
<arg declared_type='void*' name='dstData' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ImageTranscodeFrame'>
<arg declared_type='ImageTranscodeSequence' name='its' type='l'/>
<arg declared_type='void*' name='srcData' type='^v'/>
<arg declared_type='long' name='srcDataSize' type='l'/>
<arg declared_type='void**' name='dstData' type='^^v'/>
<arg declared_type='long*' name='dstDataSize' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ImageTranscodeSequenceBegin'>
<arg declared_type='ImageTranscodeSequence*' name='its' type='^i'/>
<arg declared_type='ImageDescriptionHandle' name='srcDesc' type='^^{ImageDescription}'/>
<arg declared_type='OSType' name='destType' type='L'/>
<arg declared_type='ImageDescriptionHandle*' name='dstDesc' type='^^^{ImageDescription}'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='long' name='dataSize' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ImageTranscodeSequenceEnd'>
<arg declared_type='ImageTranscodeSequence' name='its' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ImageTranscoderBeginSequence'>
<arg declared_type='ImageTranscoderComponent' name='itc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ImageDescriptionHandle' name='srcDesc' type='^^{ImageDescription}'/>
<arg declared_type='ImageDescriptionHandle*' name='dstDesc' type='^^^{ImageDescription}'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='long' name='dataSize' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageTranscoderConvert'>
<arg declared_type='ImageTranscoderComponent' name='itc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='srcData' type='^v'/>
<arg declared_type='long' name='srcDataSize' type='l'/>
<arg declared_type='void**' name='dstData' type='^^v'/>
<arg declared_type='long*' name='dstDataSize' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageTranscoderDisposeData'>
<arg declared_type='ImageTranscoderComponent' name='itc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='dstData' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='ImageTranscoderEndSequence'>
<arg declared_type='ImageTranscoderComponent' name='itc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InitializeQTS'>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InsertEmptyMovieSegment'>
<arg declared_type='Movie' name='dstMovie' type='^^{MovieType}'/>
<arg declared_type='TimeValue' name='dstIn' type='l'/>
<arg declared_type='TimeValue' name='dstDuration' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InsertEmptyTrackSegment'>
<arg declared_type='Track' name='dstTrack' type='^^{TrackType}'/>
<arg declared_type='TimeValue' name='dstIn' type='l'/>
<arg declared_type='TimeValue' name='dstDuration' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InsertMediaIntoTrack'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='TimeValue' name='trackStart' type='l'/>
<arg declared_type='TimeValue' name='mediaTime' type='l'/>
<arg declared_type='TimeValue' name='mediaDuration' type='l'/>
<arg declared_type='Fixed' name='mediaRate' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InsertMovieSegment'>
<arg declared_type='Movie' name='srcMovie' type='^^{MovieType}'/>
<arg declared_type='Movie' name='dstMovie' type='^^{MovieType}'/>
<arg declared_type='TimeValue' name='srcIn' type='l'/>
<arg declared_type='TimeValue' name='srcDuration' type='l'/>
<arg declared_type='TimeValue' name='dstIn' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InsertTrackSegment'>
<arg declared_type='Track' name='srcTrack' type='^^{TrackType}'/>
<arg declared_type='Track' name='dstTrack' type='^^{TrackType}'/>
<arg declared_type='TimeValue' name='srcIn' type='l'/>
<arg declared_type='TimeValue' name='srcDuration' type='l'/>
<arg declared_type='TimeValue' name='dstIn' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvalidateMovieRegion'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='RgnHandle' name='invalidRgn' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvalidateSprite'>
<arg declared_type='Sprite' name='theSprite' type='^{SpriteRecord=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='InvalidateSpriteWorld'>
<arg declared_type='SpriteWorld' name='theSpriteWorld' type='^{SpriteWorldRecord=}'/>
<arg declared_type='Rect*' name='invalidArea' type='^{Rect=ssss}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InverseMatrix'>
<arg const='true' declared_type='MatrixRecord*' name='m' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='MatrixRecord*' name='im' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='InvokeActionsUPP'>
<arg declared_type='void*' name='refcon' type='^v'/>
<arg declared_type='Track' name='targetTrack' type='^^{TrackType}'/>
<arg declared_type='long' name='targetRefCon' type='l'/>
<arg declared_type='QTEventRecordPtr' name='theEvent' type='^{QTEventRecord=lI{Point=ss}lllll}'/>
<arg declared_type='ActionsUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Track' type='^^{TrackType}'/>
<arg declared_type='long' type='l'/>
<arg declared_type='QTEventRecordPtr' type='^{QTEventRecord=lI{Point=ss}lllll}'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeCDataHandlerUPP'>
<arg const='true' declared_type='char*' name='cdata' type='*'/>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='CDataHandlerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeCharDataHandlerUPP'>
<arg const='true' declared_type='char*' name='charData' type='*'/>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='CharDataHandlerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeCommentHandlerUPP'>
<arg const='true' declared_type='char*' name='comment' type='*'/>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='CommentHandlerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeDataHCompletionUPP'>
<arg declared_type='Ptr' name='request' type='*'/>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='OSErr' name='err' type='s'/>
<arg declared_type='DataHCompletionUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSErr' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeDoMCActionUPP'>
<arg declared_type='void*' name='refcon' type='^v'/>
<arg declared_type='short' name='action' type='s'/>
<arg declared_type='void*' name='params' type='^v'/>
<arg declared_type='Boolean*' name='handled' type='^B'/>
<arg declared_type='DoMCActionUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Boolean*' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeEndDocumentHandlerUPP'>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='EndDocumentHandlerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeEndElementHandlerUPP'>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='EndElementHandlerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeGetMovieUPP'>
<arg declared_type='long' name='offset' type='l'/>
<arg declared_type='long' name='size' type='l'/>
<arg declared_type='void*' name='dataPtr' type='^v'/>
<arg declared_type='void*' name='refCon' type='^v'/>
<arg declared_type='GetMovieUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeICMAlignmentUPP'>
<arg declared_type='Rect*' name='rp' type='^{Rect=ssss}'/>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='ICMAlignmentUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeICMCompletionUPP'>
<arg declared_type='OSErr' name='result' type='s'/>
<arg declared_type='short' name='flags' type='s'/>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='ICMCompletionUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeICMConvertDataFormatUPP'>
<arg declared_type='void*' name='refCon' type='^v'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='Handle' name='desiredFormat' type='^*'/>
<arg declared_type='Handle' name='sourceDataFormat' type='^*'/>
<arg declared_type='void*' name='srcData' type='^v'/>
<arg declared_type='long' name='srcDataSize' type='l'/>
<arg declared_type='void**' name='dstData' type='^^v'/>
<arg declared_type='long*' name='dstDataSize' type='^l'/>
<arg declared_type='ICMConvertDataFormatUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='void**' type='^^v'/>
<arg declared_type='long*' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeICMCursorShieldedUPP'>
<arg const='true' declared_type='Rect*' name='r' type='^{Rect=ssss}'/>
<arg declared_type='void*' name='refcon' type='^v'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='ICMCursorShieldedUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeICMDataUPP'>
<arg declared_type='Ptr*' name='dataP' type='^*'/>
<arg declared_type='long' name='bytesNeeded' type='l'/>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='ICMDataUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Ptr*' type='^*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeICMFlushUPP'>
<arg declared_type='Ptr' name='data' type='*'/>
<arg declared_type='long' name='bytesAdded' type='l'/>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='ICMFlushUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeICMMemoryDisposedUPP'>
<arg declared_type='Ptr' name='memoryBlock' type='*'/>
<arg declared_type='void*' name='refcon' type='^v'/>
<arg declared_type='ICMMemoryDisposedUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeICMProgressUPP'>
<arg declared_type='short' name='message' type='s'/>
<arg declared_type='Fixed' name='completeness' type='l'/>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='ICMProgressUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='Fixed' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeImageCodecDrawBandCompleteUPP'>
<arg declared_type='void*' name='refcon' type='^v'/>
<arg declared_type='ComponentResult' name='drawBandResult' type='l'/>
<arg declared_type='UInt32' name='drawBandCompleteFlags' type='L'/>
<arg declared_type='ImageCodecDrawBandCompleteUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ComponentResult' type='l'/>
<arg declared_type='UInt32' type='L'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeImageCodecMPDrawBandUPP'>
<arg declared_type='void*' name='refcon' type='^v'/>
<arg declared_type='ImageSubCodecDecompressRecord*' name='drp' type='^{ImageSubCodecDecompressRecord=*l*{ICMProgressProcRecord=^?l}{ICMDataProcRecord=^?l}^vCB[2C][2l]^?^v^vll}'/>
<arg declared_type='ImageCodecMPDrawBandUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ImageSubCodecDecompressRecord*' type='^{ImageSubCodecDecompressRecord=*l*{ICMProgressProcRecord=^?l}{ICMDataProcRecord=^?l}^vCB[2C][2l]^?^v^vll}'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeImageCodecTimeTriggerUPP'>
<arg declared_type='void*' name='refcon' type='^v'/>
<arg declared_type='ImageCodecTimeTriggerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeMCActionFilterUPP'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' name='action' type='^s'/>
<arg declared_type='void*' name='params' type='^v'/>
<arg declared_type='MCActionFilterUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='MovieController' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='InvokeMCActionFilterWithRefConUPP'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='action' type='s'/>
<arg declared_type='void*' name='params' type='^v'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='MCActionFilterWithRefConUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='MovieController' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='InvokeMCActionNotificationUPP'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='action' type='s'/>
<arg declared_type='void*' name='params' type='^v'/>
<arg declared_type='UInt32' name='inFlags' type='L'/>
<arg declared_type='UInt32*' name='outFlags' type='^I'/>
<arg declared_type='void*' name='refCon' type='^v'/>
<arg declared_type='MCActionNotificationUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='MovieController' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='InvokeMovieDrawingCompleteUPP'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='MovieDrawingCompleteUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeMovieExecuteWiredActionsUPP'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='void*' name='refcon' type='^v'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='QTAtomContainer' name='wiredActions' type='^*'/>
<arg declared_type='MovieExecuteWiredActionsUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='QTAtomContainer' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeMovieExportGetDataUPP'>
<arg declared_type='void*' name='refCon' type='^v'/>
<arg declared_type='MovieExportGetDataParams*' name='params' type='^{MovieExportGetDataParams=lliii*l^^{SampleDescription}Illlil}'/>
<arg declared_type='MovieExportGetDataUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='MovieExportGetDataParams*' type='^{MovieExportGetDataParams=lliii*l^^{SampleDescription}Illlil}'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeMovieExportGetPropertyUPP'>
<arg declared_type='void*' name='refcon' type='^v'/>
<arg declared_type='long' name='trackID' type='l'/>
<arg declared_type='OSType' name='propertyType' type='L'/>
<arg declared_type='void*' name='propertyValue' type='^v'/>
<arg declared_type='MovieExportGetPropertyUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeMovieExportStageReachedCallbackUPP'>
<arg declared_type='OSType' name='inStage' type='L'/>
<arg declared_type='Movie' name='inMovie' type='^^{MovieType}'/>
<arg declared_type='ComponentInstance' name='inDataHandler' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='inDataRef' type='^*'/>
<arg declared_type='OSType' name='inDataRefType' type='L'/>
<arg declared_type='void*' name='refCon' type='^v'/>
<arg declared_type='MovieExportStageReachedCallbackUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='OSType' type='L'/>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeMoviePrePrerollCompleteUPP'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='OSErr' name='prerollErr' type='s'/>
<arg declared_type='void*' name='refcon' type='^v'/>
<arg declared_type='MoviePrePrerollCompleteUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeMoviePreviewCallOutUPP'>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='MoviePreviewCallOutUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='InvokeMovieProgressUPP'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='short' name='message' type='s'/>
<arg declared_type='short' name='whatOperation' type='s'/>
<arg declared_type='Fixed' name='percentDone' type='l'/>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='MovieProgressUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Fixed' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeMovieRgnCoverUPP'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='RgnHandle' name='changedRgn' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='MovieRgnCoverUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeMoviesErrorUPP'>
<arg declared_type='OSErr' name='theErr' type='s'/>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='MoviesErrorUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeMusicMIDISendUPP'>
<arg declared_type='ComponentInstance' name='self' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='MusicMIDIPacket*' name='mmp' type='^{MusicMIDIPacket=SL[249C]}'/>
<arg declared_type='MusicMIDISendUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' type='l'/>
<arg declared_type='MusicMIDIPacket*' type='^{MusicMIDIPacket=SL[249C]}'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeMusicOfflineDataUPP'>
<arg declared_type='Ptr' name='SoundData' type='*'/>
<arg declared_type='long' name='numBytes' type='l'/>
<arg declared_type='long' name='myRefCon' type='l'/>
<arg declared_type='MusicOfflineDataUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokePrePrerollCompleteUPP'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSErr' name='err' type='s'/>
<arg declared_type='void*' name='refcon' type='^v'/>
<arg declared_type='PrePrerollCompleteUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='MediaHandler' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokePreprocessInstructionHandlerUPP'>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg const='true' declared_type='char **' name='atts' type='^*'/>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='PreprocessInstructionHandlerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char **' type='^*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeQDPixUPP'>
<arg declared_type='PixMap*' name='src' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='MatrixRecord*' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='short' name='mode' type='s'/>
<arg declared_type='RgnHandle' name='mask' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='PixMap*' name='matte' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Rect*' name='matteRect' type='^{Rect=ssss}'/>
<arg declared_type='short' name='flags' type='s'/>
<arg declared_type='QDPixUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='PixMap*' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='PixMap*' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQTBandwidthNotificationUPP'>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='void*' name='reserved' type='^v'/>
<arg declared_type='void*' name='refcon' type='^v'/>
<arg declared_type='QTBandwidthNotificationUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='long' type='l'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeQTCallBackUPP'>
<arg declared_type='QTCallBack' name='cb' type='^{QTCallBackHeader=}'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='QTCallBackUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='QTCallBack' type='^{QTCallBackHeader=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQTComponentPropertyListenerFilterUPP'>
<arg declared_type='QTComponentPropertyListenersRef' name='inCollection' type='@'/>
<arg const='true' declared_type='QTComponentPropertyListenerCollectionContext*' name='inCollectionContext' type='^{QTComponentPropertyListenerCollectionContext=I^?^v}'/>
<arg declared_type='ComponentInstance' name='inNotifier' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='QTComponentPropertyListenerUPP' function_pointer='true' name='inListenerCallbackProc' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' type='L'/>
<arg declared_type='ComponentPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg const='true' declared_type='void*' name='inListenerProcRefCon' type='^v'/>
<arg const='true' declared_type='void*' name='inFilterProcRefCon' type='^v'/>
<arg declared_type='QTComponentPropertyListenerFilterUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='QTComponentPropertyListenersRef' type='@'/>
<arg const='true' declared_type='QTComponentPropertyListenerCollectionContext*' type='^{QTComponentPropertyListenerCollectionContext=I^?^v}'/>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' type='L'/>
<arg declared_type='ComponentPropertyID' type='L'/>
<arg declared_type='QTComponentPropertyListenerUPP' function_pointer='true' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' type='L'/>
<arg declared_type='ComponentPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg const='true' declared_type='void*' type='^v'/>
<arg const='true' declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='InvokeQTComponentPropertyListenerUPP'>
<arg declared_type='ComponentInstance' name='inComponent' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='void*' name='inUserData' type='^v'/>
<arg declared_type='QTComponentPropertyListenerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' type='L'/>
<arg declared_type='ComponentPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQTEffectListFilterUPP'>
<arg declared_type='Component' name='effect' type='^{ComponentRecord=[1l]}'/>
<arg declared_type='long' name='effectMinSource' type='l'/>
<arg declared_type='long' name='effectMaxSource' type='l'/>
<arg declared_type='OSType' name='majorClass' type='L'/>
<arg declared_type='OSType' name='minorClass' type='L'/>
<arg declared_type='void*' name='refcon' type='^v'/>
<arg declared_type='QTEffectListFilterUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Component' type='^{ComponentRecord=[1l]}'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='InvokeQTMoviePropertyListenerUPP'>
<arg declared_type='Movie' name='inMovie' type='^^{MovieType}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='void*' name='inUserData' type='^v'/>
<arg declared_type='QTMoviePropertyListenerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='QTPropertyClass' type='L'/>
<arg declared_type='QTPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQTNextTaskNeededSoonerCallbackUPP'>
<arg declared_type='TimeValue' name='duration' type='l'/>
<arg declared_type='unsigned long' name='flags' type='L'/>
<arg declared_type='void*' name='refcon' type='^v'/>
<arg declared_type='QTNextTaskNeededSoonerCallbackUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='TimeValue' type='l'/>
<arg declared_type='unsigned long' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQTSModalFilterUPP'>
<arg declared_type='DialogPtr' name='inDialog' type='^{OpaqueDialogPtr=}'/>
<arg const='true' declared_type='EventRecord*' name='inEvent' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='SInt16*' name='ioItemHit' type='^s'/>
<arg declared_type='void*' name='inRefCon' type='^v'/>
<arg declared_type='QTSModalFilterUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='DialogPtr' type='^{OpaqueDialogPtr=}'/>
<arg const='true' declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='SInt16*' type='^s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='InvokeQTSNotificationUPP'>
<arg declared_type='ComponentResult' name='inErr' type='l'/>
<arg declared_type='OSType' name='inNotificationType' type='L'/>
<arg declared_type='void*' name='inNotificationParams' type='^v'/>
<arg declared_type='void*' name='inRefCon' type='^v'/>
<arg declared_type='QTSNotificationUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='ComponentResult' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeQTSPanelFilterUPP'>
<arg declared_type='QTSPanelFilterParams*' name='inParams' type='^{QTSPanelFilterParams=i^{QTSStreamRecord}II{QTAtomSpec=^*i}}'/>
<arg declared_type='void*' name='inRefCon' type='^v'/>
<arg declared_type='QTSPanelFilterUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='QTSPanelFilterParams*' type='^{QTSPanelFilterParams=i^{QTSStreamRecord}II{QTAtomSpec=^*i}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='InvokeQTSyncTaskUPP'>
<arg declared_type='void*' name='task' type='^v'/>
<arg declared_type='QTSyncTaskUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQTTrackPropertyListenerUPP'>
<arg declared_type='Track' name='inTrack' type='^^{TrackType}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='void*' name='inUserData' type='^v'/>
<arg declared_type='QTTrackPropertyListenerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Track' type='^^{TrackType}'/>
<arg declared_type='QTPropertyClass' type='L'/>
<arg declared_type='QTPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQTVRBackBufferImagingUPP'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Rect*' name='drawRect' type='^{Rect=ssss}'/>
<arg declared_type='UInt16' name='areaIndex' type='S'/>
<arg declared_type='UInt32' name='flagsIn' type='L'/>
<arg declared_type='UInt32*' name='flagsOut' type='^I'/>
<arg declared_type='SInt32' name='refCon' type='l'/>
<arg declared_type='QTVRBackBufferImagingUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeQTVREnteringNodeUPP'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' name='nodeID' type='L'/>
<arg declared_type='SInt32' name='refCon' type='l'/>
<arg declared_type='QTVREnteringNodeUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeQTVRImagingCompleteUPP'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='SInt32' name='refCon' type='l'/>
<arg declared_type='QTVRImagingCompleteUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeQTVRInterceptUPP'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRInterceptPtr' name='qtvrMsg' type='^{QTVRInterceptRecord=iiiii[6^v]}'/>
<arg declared_type='SInt32' name='refCon' type='l'/>
<arg declared_type='Boolean*' name='cancel' type='^B'/>
<arg declared_type='QTVRInterceptUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRInterceptPtr' type='^{QTVRInterceptRecord=iiiii[6^v]}'/>
<arg declared_type='SInt32' type='l'/>
<arg declared_type='Boolean*' type='^B'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQTVRLeavingNodeUPP'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' name='fromNodeID' type='L'/>
<arg declared_type='UInt32' name='toNodeID' type='L'/>
<arg declared_type='Boolean*' name='cancel' type='^B'/>
<arg declared_type='SInt32' name='refCon' type='l'/>
<arg declared_type='QTVRLeavingNodeUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='Boolean*' type='^B'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeQTVRMouseOverHotSpotUPP'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' name='hotSpotID' type='L'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<arg declared_type='SInt32' name='refCon' type='l'/>
<arg declared_type='QTVRMouseOverHotSpotUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeRTPMPDataReleaseUPP'>
<arg declared_type='UInt8*' name='inData' type='*'/>
<arg declared_type='void*' name='inRefCon' type='^v'/>
<arg declared_type='RTPMPDataReleaseUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='UInt8*' type='*'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeRTPPBCallbackUPP'>
<arg declared_type='OSType' name='inSelector' type='L'/>
<arg declared_type='void*' name='ioParams' type='^v'/>
<arg declared_type='void*' name='inRefCon' type='^v'/>
<arg declared_type='RTPPBCallbackUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeSCModalFilterUPP'>
<arg declared_type='DialogRef' name='theDialog' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='EventRecord*' name='theEvent' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='short*' name='itemHit' type='^s'/>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='SCModalFilterUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='InvokeSCModalHookUPP'>
<arg declared_type='DialogRef' name='theDialog' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='short' name='itemHit' type='s'/>
<arg declared_type='void*' name='params' type='^v'/>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='SCModalHookUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<retval declared_type='short' type='s'/>
</arg>
<retval declared_type='short' type='s'/>
</function>
<function name='InvokeSGAddFrameBottleUPP'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='bufferNum' type='s'/>
<arg declared_type='TimeValue' name='atTime' type='l'/>
<arg declared_type='TimeScale' name='scale' type='l'/>
<arg const='true' declared_type='SGCompressInfo*' name='ci' type='^{SGCompressInfo=*LCC}'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='SGAddFrameBottleUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='TimeValue' type='l'/>
<arg declared_type='TimeScale' type='l'/>
<arg const='true' declared_type='SGCompressInfo*' type='^{SGCompressInfo=*LCC}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeSGCompressBottleUPP'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='bufferNum' type='s'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='SGCompressBottleUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeSGCompressCompleteBottleUPP'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='bufferNum' type='s'/>
<arg declared_type='Boolean*' name='done' type='^B'/>
<arg declared_type='SGCompressInfo*' name='ci' type='^{SGCompressInfo=*LCC}'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='SGCompressCompleteBottleUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Boolean*' type='^B'/>
<arg declared_type='SGCompressInfo*' type='^{SGCompressInfo=*LCC}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeSGDataUPP'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' name='p' type='*'/>
<arg declared_type='long' name='len' type='l'/>
<arg declared_type='long*' name='offset' type='^l'/>
<arg declared_type='long' name='chRefCon' type='l'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<arg declared_type='short' name='writeType' type='s'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='SGDataUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long*' type='^l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='TimeValue' type='l'/>
<arg declared_type='short' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeSGDisplayBottleUPP'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='bufferNum' type='s'/>
<arg declared_type='MatrixRecord*' name='mp' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' name='clipRgn' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='SGDisplayBottleUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeSGDisplayCompressBottleUPP'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' name='dataPtr' type='*'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='MatrixRecord*' name='mp' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' name='clipRgn' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='SGDisplayCompressBottleUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='ImageDescriptionHandle' type='^^{ImageDescription}'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeSGGrabBottleUPP'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='bufferNum' type='s'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='SGGrabBottleUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeSGGrabCompleteBottleUPP'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='bufferNum' type='s'/>
<arg declared_type='Boolean*' name='done' type='^B'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='SGGrabCompleteBottleUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Boolean*' type='^B'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeSGGrabCompressCompleteBottleUPP'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt8*' name='queuedFrameCount' type='*'/>
<arg declared_type='SGCompressInfo*' name='ci' type='^{SGCompressInfo=*LCC}'/>
<arg declared_type='TimeRecord*' name='t' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='SGGrabCompressCompleteBottleUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt8*' type='*'/>
<arg declared_type='SGCompressInfo*' type='^{SGCompressInfo=*LCC}'/>
<arg declared_type='TimeRecord*' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeSGModalFilterUPP'>
<arg declared_type='DialogRef' name='theDialog' type='^{OpaqueDialogPtr=}'/>
<arg const='true' declared_type='EventRecord*' name='theEvent' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='short*' name='itemHit' type='^s'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='SGModalFilterUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg const='true' declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='InvokeSGTransferFrameBottleUPP'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='bufferNum' type='s'/>
<arg declared_type='MatrixRecord*' name='mp' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' name='clipRgn' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='SGTransferFrameBottleUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeStartDocumentHandlerUPP'>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='StartDocumentHandlerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeStartElementHandlerUPP'>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg const='true' declared_type='char**' name='atts' type='^*'/>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='StartElementHandlerUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char**' type='^*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeStdPixUPP'>
<arg declared_type='PixMap*' name='src' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='MatrixRecord*' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='short' name='mode' type='s'/>
<arg declared_type='RgnHandle' name='mask' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='PixMap*' name='matte' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Rect*' name='matteRect' type='^{Rect=ssss}'/>
<arg declared_type='short' name='flags' type='s'/>
<arg declared_type='StdPixUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='PixMap*' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='PixMap*' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeTextMediaUPP'>
<arg declared_type='Handle' name='theText' type='^*'/>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='short*' name='displayFlag' type='^s'/>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='TextMediaUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeTrackTransferUPP'>
<arg declared_type='Track' name='t' type='^^{TrackType}'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='TrackTransferUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Track' type='^^{TrackType}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeTuneCallBackUPP'>
<arg const='true' declared_type='TuneStatus*' name='status' type='^{TuneStatus=^L^Lissi[3l]}'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='TuneCallBackUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='TuneStatus*' type='^{TuneStatus=^L^Lissi[3l]}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeTunePlayCallBackUPP'>
<arg declared_type='unsigned long*' name='event' type='^L'/>
<arg declared_type='long' name='seed' type='l'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='TunePlayCallBackUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='unsigned long*' type='^L'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeTweenerDataUPP'>
<arg declared_type='TweenRecord*' name='tr' type='^{TweenRecord=l^*iii^?^v^v}'/>
<arg declared_type='void*' name='tweenData' type='^v'/>
<arg declared_type='long' name='tweenDataSize' type='l'/>
<arg declared_type='long' name='dataDescriptionSeed' type='l'/>
<arg declared_type='Handle' name='dataDescription' type='^*'/>
<arg declared_type='ICMCompletionProcRecordPtr' name='asyncCompletionProc' type='^{ICMCompletionProcRecord=^?l}'/>
<arg declared_type='UniversalProcPtr' function_pointer='true' name='transferProc' type='^?'>
<retval declared_type='long' type='l'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<arg declared_type='TweenerDataUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='TweenRecord*' type='^{TweenRecord=l^*iii^?^v^v}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='ICMCompletionProcRecordPtr' type='^{ICMCompletionProcRecord=^?l}'/>
<arg declared_type='UniversalProcPtr' function_pointer='true' type='^?'>
<retval declared_type='long' type='l'/>
</arg>
<arg declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='InvokeVdigIntUPP'>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='VdigIntUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='IsMovieDone'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='IsScrapMovie'>
<arg declared_type='Track' name='targetTrack' type='^^{TrackType}'/>
<retval declared_type='Component' type='^{ComponentRecord=[1l]}'/>
</function>
<function name='LoadMediaIntoRam'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='LoadMovieIntoRam'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='LoadTrackIntoRam'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='MCActivate'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='WindowRef' name='w' type='^{OpaqueWindowPtr=}'/>
<arg declared_type='Boolean' name='activate' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCAddMovieSegment'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Movie' name='srcMovie' type='^^{MovieType}'/>
<arg declared_type='Boolean' name='scaled' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCAdjustCursor'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='WindowRef' name='w' type='^{OpaqueWindowPtr=}'/>
<arg declared_type='Point' name='where' type='{Point=ss}'/>
<arg declared_type='long' name='modifiers' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCClear'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCClick'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='WindowRef' name='w' type='^{OpaqueWindowPtr=}'/>
<arg declared_type='Point' name='where' type='{Point=ss}'/>
<arg declared_type='long' name='when' type='l'/>
<arg declared_type='long' name='modifiers' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCCopy'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='Movie' type='^^{MovieType}'/>
</function>
<function name='MCCut'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='Movie' type='^^{MovieType}'/>
</function>
<function name='MCDoAction'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='action' type='s'/>
<arg declared_type='void*' name='params' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCDraw'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='WindowRef' name='w' type='^{OpaqueWindowPtr=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCDrawBadge'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RgnHandle' name='movieRgn' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='RgnHandle*' name='badgeRgn' type='^^{OpaqueRgnHandle}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCEnableEditing'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean' name='enabled' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCGetClip'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RgnHandle*' name='theClip' type='^^{OpaqueRgnHandle}'/>
<arg declared_type='RgnHandle*' name='movieClip' type='^^{OpaqueRgnHandle}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCGetControllerBoundsRect'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Rect*' name='bounds' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCGetControllerBoundsRgn'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
</function>
<function name='MCGetControllerInfo'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='someFlags' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCGetControllerPort'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='CGrafPtr' type='^{OpaqueGrafPtr=}'/>
</function>
<function name='MCGetCurrentTime'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeScale*' name='scale' type='^i'/>
<retval declared_type='TimeValue' type='l'/>
</function>
<function name='MCGetDoActionsProc'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='DoMCActionUPP*' name='doMCActionProc' type='^^?'/>
<arg declared_type='long*' name='doMCActionRefCon' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCGetIndMovie'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='index' type='s'/>
<retval declared_type='Movie' type='^^{MovieType}'/>
</function>
<function name='MCGetInterfaceElement'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='MCInterfaceElement' name='whichElement' type='L'/>
<arg declared_type='void*' name='element' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCGetMenuString'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='modifiers' type='l'/>
<arg declared_type='short' name='item' type='s'/>
<arg declared_type='unsigned char*' name='aString' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCGetVisible'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCGetWindowRgn'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='WindowRef' name='w' type='^{OpaqueWindowPtr=}'/>
<retval declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
</function>
<function name='MCIdle'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCInvalidate'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='WindowRef' name='w' type='^{OpaqueWindowPtr=}'/>
<arg declared_type='RgnHandle' name='invalidRgn' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCIsControllerAttached'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCIsEditingEnabled'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='long' type='l'/>
</function>
<function name='MCIsPlayerEvent'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='EventRecord*' name='e' type='^{EventRecord=SLI{Point=ss}S}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCKey'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt8' name='key' type='c'/>
<arg declared_type='long' name='modifiers' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCMovieChanged'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCNewAttachedController'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='WindowRef' name='w' type='^{OpaqueWindowPtr=}'/>
<arg declared_type='Point' name='where' type='{Point=ss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCPaste'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Movie' name='srcMovie' type='^^{MovieType}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCPositionController'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='Rect*' name='movieRect' type='^{Rect=ssss}'/>
<arg const='true' declared_type='Rect*' name='controllerRect' type='^{Rect=ssss}'/>
<arg declared_type='long' name='someFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCPtInController'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Point' name='thePt' type='{Point=ss}'/>
<arg declared_type='Boolean*' name='inController' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCRemoveAMovie'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCRemoveAllMovies'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCRemoveMovie'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCSetActionFilter'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='MCActionFilterUPP' function_pointer='true' name='blob' type='^?'>
<arg declared_type='MovieController' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCSetActionFilterWithRefCon'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='MCActionFilterWithRefConUPP' function_pointer='true' name='blob' type='^?'>
<arg declared_type='MovieController' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='long' name='refCon' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCSetClip'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RgnHandle' name='theClip' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='RgnHandle' name='movieClip' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCSetControllerAttached'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean' name='attach' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCSetControllerBoundsRect'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='Rect*' name='bounds' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCSetControllerCapabilities'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='long' name='flagsMask' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCSetControllerPort'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CGrafPtr' name='gp' type='^{OpaqueGrafPtr=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCSetDuration'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCSetIdleManager'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='IdleManager' name='im' type='^{OpaqueIdleManager=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCSetMovie'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='WindowRef' name='movieWindow' type='^{OpaqueWindowPtr=}'/>
<arg declared_type='Point' name='where' type='{Point=ss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCSetUpEditMenu'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='modifiers' type='l'/>
<arg declared_type='MenuRef' name='mh' type='^{OpaqueMenuRef=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCSetVisible'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean' name='visible' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCTrimMovieSegment'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MCUndo'>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MIDIImportGetSettings'>
<arg declared_type='TextExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='setting' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MIDIImportSetSettings'>
<arg declared_type='TextExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='setting' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MakeFilePreview'>
<arg declared_type='short' name='resRefNum' type='s'/>
<arg declared_type='ICMProgressProcRecordPtr' name='progress' type='^{ICMProgressProcRecord=^?l}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='MakeImageDescriptionForEffect'>
<arg declared_type='OSType' name='effectType' type='L'/>
<arg declared_type='ImageDescriptionHandle*' name='idh' type='^^^{ImageDescription}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='MakeImageDescriptionForPixMap'>
<arg declared_type='PixMapHandle' name='pixmap' type='^^{PixMap}'/>
<arg declared_type='ImageDescriptionHandle*' name='idh' type='^^^{ImageDescription}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='MakeMediaTimeTable'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='long**' name='offsets' type='^^l'/>
<arg declared_type='TimeValue' name='startTime' type='l'/>
<arg declared_type='TimeValue' name='endTime' type='l'/>
<arg declared_type='TimeValue' name='timeIncrement' type='l'/>
<arg declared_type='short' name='firstDataRefIndex' type='s'/>
<arg declared_type='short' name='lastDataRefIndex' type='s'/>
<arg declared_type='long*' name='retdataRefSkew' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='MakeThumbnailFromPicture'>
<arg declared_type='PicHandle' name='picture' type='^^{Picture}'/>
<arg declared_type='short' name='colorDepth' type='s'/>
<arg declared_type='PicHandle' name='thumbnail' type='^^{Picture}'/>
<arg declared_type='ICMProgressProcRecordPtr' name='progressProc' type='^{ICMProgressProcRecord=^?l}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='MakeThumbnailFromPictureFile'>
<arg declared_type='short' name='refNum' type='s'/>
<arg declared_type='short' name='colorDepth' type='s'/>
<arg declared_type='PicHandle' name='thumbnail' type='^^{Picture}'/>
<arg declared_type='ICMProgressProcRecordPtr' name='progressProc' type='^{ICMProgressProcRecord=^?l}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='MakeThumbnailFromPixMap'>
<arg declared_type='PixMapHandle' name='src' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='short' name='colorDepth' type='s'/>
<arg declared_type='PicHandle' name='thumbnail' type='^^{Picture}'/>
<arg declared_type='ICMProgressProcRecordPtr' name='progressProc' type='^{ICMProgressProcRecord=^?l}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='MakeTrackTimeTable'>
<arg declared_type='Track' name='trackH' type='^^{TrackType}'/>
<arg declared_type='long**' name='offsets' type='^^l'/>
<arg declared_type='TimeValue' name='startTime' type='l'/>
<arg declared_type='TimeValue' name='endTime' type='l'/>
<arg declared_type='TimeValue' name='timeIncrement' type='l'/>
<arg declared_type='short' name='firstDataRefIndex' type='s'/>
<arg declared_type='short' name='lastDataRefIndex' type='s'/>
<arg declared_type='long*' name='retdataRefSkew' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='MapMatrix'>
<arg declared_type='MatrixRecord*' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<arg const='true' declared_type='Rect*' name='fromRect' type='^{Rect=ssss}'/>
<arg const='true' declared_type='Rect*' name='toRect' type='^{Rect=ssss}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Media3DGetCameraAngleAspect'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTFloatSingle*' name='fov' type='^f'/>
<arg declared_type='QTFloatSingle*' name='aspectRatioXToY' type='^f'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='Media3DGetCameraData'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='cameraData' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='Media3DGetCameraRange'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='tQ3CameraRange' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='Media3DGetCurrentGroup'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='group' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='Media3DGetNamedObjectList'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer*' name='objectList' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='Media3DGetRendererList'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer*' name='rendererList' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='Media3DGetViewObject'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='tq3viewObject' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='Media3DRotateNamedObjectTo'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='char*' name='objectName' type='*'/>
<arg declared_type='Fixed' name='xDegrees' type='l'/>
<arg declared_type='Fixed' name='yDegrees' type='l'/>
<arg declared_type='Fixed' name='zDegrees' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='Media3DScaleNamedObjectTo'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='char*' name='objectName' type='*'/>
<arg declared_type='Fixed' name='xScale' type='l'/>
<arg declared_type='Fixed' name='yScale' type='l'/>
<arg declared_type='Fixed' name='zScale' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='Media3DSetCameraAngleAspect'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTFloatSingle' name='fov' type='f'/>
<arg declared_type='QTFloatSingle' name='aspectRatioXToY' type='f'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='Media3DSetCameraData'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='cameraData' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='Media3DSetCameraRange'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='tQ3CameraRange' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='Media3DTranslateNamedObjectTo'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='char*' name='objectName' type='*'/>
<arg declared_type='Fixed' name='x' type='l'/>
<arg declared_type='Fixed' name='y' type='l'/>
<arg declared_type='Fixed' name='z' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaChangedNonPrimarySource'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='inputIndex' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaCompare'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='isOK' type='^B'/>
<arg declared_type='Media' name='srcMedia' type='^^{MediaType}'/>
<arg declared_type='ComponentInstance' name='srcMediaComponent' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaContainsDisplayOffsets'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='MediaCurrentMediaQueuedData'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='milliSecs' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaDecodeTimeToSampleNum'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='TimeValue64' name='decodeTime' type='q'/>
<arg declared_type='SInt64*' name='sampleNum' type='^q'/>
<arg declared_type='TimeValue64*' name='sampleDecodeTime' type='^q'/>
<arg declared_type='TimeValue64*' name='sampleDecodeDuration' type='^q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='MediaDisplayTimeToSampleNum'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='TimeValue64' name='displayTime' type='q'/>
<arg declared_type='SInt64*' name='sampleNum' type='^q'/>
<arg declared_type='TimeValue64*' name='sampleDisplayTime' type='^q'/>
<arg declared_type='TimeValue64*' name='sampleDisplayDuration' type='^q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='MediaDisposeTargetRefCon'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='targetRefCon' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaDoIdleActions'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaEmptyAllPurgeableChunks'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaEmptySampleCache'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='sampleNum' type='l'/>
<arg declared_type='long' name='sampleCount' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaEnterEmptyEdit'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaFlushNonPrimarySourceData'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='inputIndex' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaForceUpdate'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='forceUpdateFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGGetIdleManager'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='IdleManager*' name='pim' type='^^{OpaqueIdleManager}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGGetLatency'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeRecord*' name='latency' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGGetStatus'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentResult*' name='statusErr' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGSetActiveSegment'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeValue' name='activeStart' type='l'/>
<arg declared_type='TimeValue' name='activeDuration' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGSetIdleManager'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='IdleManager' name='im' type='^{OpaqueIdleManager=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGSetVolume'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='volume' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGenerateApertureModeDimensions'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetActionsForQTEvent'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTEventRecordPtr' name='event' type='^{QTEventRecord=lI{Point=ss}lllll}'/>
<arg declared_type='long' name='targetRefCon' type='l'/>
<arg declared_type='QTAtomContainer*' name='container' type='^^*'/>
<arg declared_type='QTAtom*' name='atom' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetApertureModeClipRectForSampleDescriptionIndex'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='sampleDescIndex' type='l'/>
<arg declared_type='FixedRect*' name='clipFixedRectOut' type='^{FixedRect=iiii}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetApertureModeMatrixForSampleDescriptionIndex'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='sampleDescIndex' type='l'/>
<arg declared_type='MatrixRecord*' name='matrixOut' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetChunkManagementFlags'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32*' name='flags' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetClock'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentInstance*' name='clock' type='^^{ComponentInstanceRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetDrawingRgn'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RgnHandle*' name='partialRgn' type='^^{OpaqueRgnHandle}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetEffectiveSoundBalance'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' name='balance' type='^s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetEffectiveVolume'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' name='volume' type='^s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetErrorString'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentResult' name='theError' type='l'/>
<arg declared_type='unsigned char*' name='errorString' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetGraphicsMode'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='mode' type='^l'/>
<arg declared_type='RGBColor*' name='opColor' type='^{RGBColor=SSS}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetInvalidRegion'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RgnHandle' name='rgn' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetMediaInfo'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='h' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetMediaLoadState'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='mediaLoadState' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetName'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned char*' name='name' type='*'/>
<arg declared_type='long' name='requestedLanguage' type='l'/>
<arg declared_type='long*' name='actualLanguage' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetNextBoundsChange'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeValue*' name='when' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetNextStepTime'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='flags' type='s'/>
<arg declared_type='TimeValue' name='mediaTimeIn' type='l'/>
<arg declared_type='TimeValue*' name='mediaTimeOut' type='^i'/>
<arg declared_type='Fixed' name='rate' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetOffscreenBufferSize'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Rect*' name='bounds' type='^{Rect=ssss}'/>
<arg declared_type='short' name='depth' type='s'/>
<arg declared_type='CTabHandle' name='ctab' type='^^{ColorTable}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetPublicInfo'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='infoSelector' type='L'/>
<arg declared_type='void*' name='infoDataPtr' type='^v'/>
<arg declared_type='Size*' name='ioDataSize' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetPurgeableChunkMemoryAllowance'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Size*' name='allowance' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetSampleDataPointer'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='sampleNum' type='l'/>
<arg declared_type='Ptr*' name='dataPtr' type='^*'/>
<arg declared_type='long*' name='dataSize' type='^l'/>
<arg declared_type='long*' name='sampleDescIndex' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetSoundBalance'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' name='balance' type='^s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetSoundBassAndTreble'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' name='bass' type='^s'/>
<arg declared_type='short*' name='treble' type='^s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetSoundEqualizerBandLevels'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt8*' name='bandLevels' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetSoundEqualizerBands'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='MediaEQSpectrumBandsRecordPtr' name='spectrumInfo' type='^{MediaEQSpectrumBandsRecord=s^I}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetSoundLevelMeterInfo'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='LevelMeterInfoPtr' name='levelInfo' type='^{LevelMeterInfo=sCC}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetSoundLevelMeteringEnabled'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='enabled' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetSoundOutputComponent'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Component*' name='outputComponent' type='^^{ComponentRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetSrcRgn'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RgnHandle' name='rgn' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='TimeValue' name='atMediaTime' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetTrackOpaque'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='trackIsOpaque' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetURLLink'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Point' name='displayWhere' type='{Point=ss}'/>
<arg declared_type='Handle*' name='urlLink' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetUserPreferredCodecs'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CodecComponentHandle*' name='userPreferredCodecs' type='^^^^{ComponentRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaGetVideoParam'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='whichParam' type='l'/>
<arg declared_type='unsigned short*' name='value' type='^S'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaHasCharacteristic'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='characteristic' type='L'/>
<arg declared_type='Boolean*' name='hasIt' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaHitTestForTargetRefCon'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='Point' name='loc' type='{Point=ss}'/>
<arg declared_type='long*' name='targetRefCon' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaHitTestTargetRefCon'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='targetRefCon' type='l'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='Point' name='loc' type='{Point=ss}'/>
<arg declared_type='Boolean*' name='wasHit' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaIdle'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeValue' name='atMediaTime' type='l'/>
<arg declared_type='long' name='flagsIn' type='l'/>
<arg declared_type='long*' name='flagsOut' type='^l'/>
<arg const='true' declared_type='TimeRecord*' name='movieTime' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaInitialize'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='GetMovieCompleteParams*' name='gmc' type='^{GetMovieCompleteParams=s^^{MovieType}^^{TrackType}^^{MediaType}iiiiii^{TimeBaseRecord}sii{MatrixRecord=[3[3l]]}^{OpaqueGrafPtr}^^{GDevice}^^{PixMap}^*{QTUUID=ISS[8C]}}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaInvalidateRegion'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RgnHandle' name='invalRgn' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaMCIsPlayerEvent'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='EventRecord*' name='e' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='Boolean*' name='handledIt' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaMakeMediaTimeTable'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long**' name='offsets' type='^^l'/>
<arg declared_type='TimeValue' name='startTime' type='l'/>
<arg declared_type='TimeValue' name='endTime' type='l'/>
<arg declared_type='TimeValue' name='timeIncrement' type='l'/>
<arg declared_type='short' name='firstDataRefIndex' type='s'/>
<arg declared_type='short' name='lastDataRefIndex' type='s'/>
<arg declared_type='long*' name='retDataRefSkew' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaNavigateTargetRefCon'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='navigation' type='l'/>
<arg declared_type='long*' name='refCon' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaPrePrerollBegin'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<arg declared_type='Fixed' name='rate' type='l'/>
<arg declared_type='PrePrerollCompleteUPP' function_pointer='true' name='completeProc' type='^?'>
<arg declared_type='MediaHandler' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='refcon' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaPrePrerollCancel'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='refcon' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaPreroll'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<arg declared_type='Fixed' name='rate' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaPutMediaInfo'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='h' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaQueueNonPrimarySourceData'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='inputIndex' type='l'/>
<arg declared_type='long' name='dataDescriptionSeed' type='l'/>
<arg declared_type='Handle' name='dataDescription' type='^*'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='long' name='dataSize' type='l'/>
<arg declared_type='ICMCompletionProcRecordPtr' name='asyncCompletionProc' type='^{ICMCompletionProcRecord=^?l}'/>
<arg const='true' declared_type='ICMFrameTimeRecord*' name='frameTime' type='^{ICMFrameTimeRecord={wide=Ii}l^vlilll{wide=Ii}lq}'/>
<arg declared_type='ICMConvertDataFormatUPP' function_pointer='true' name='transferProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='void**' type='^^v'/>
<arg declared_type='long*' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaRefConGetProperty'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='long' name='propertyType' type='l'/>
<arg declared_type='void*' name='propertyValue' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaRefConSetProperty'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='long' name='propertyType' type='l'/>
<arg declared_type='void*' name='propertyValue' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaReleaseSampleDataPointer'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='sampleNum' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaResolveTargetRefCon'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='atom' type='l'/>
<arg declared_type='long*' name='targetRefCon' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSampleDescriptionB2N'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SampleDescriptionHandle' name='sampleDescriptionH' type='^^{SampleDescription}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSampleDescriptionChanged'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='index' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSampleDescriptionN2B'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SampleDescriptionHandle' name='sampleDescriptionH' type='^^{SampleDescription}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetActionsCallback'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ActionsUPP' function_pointer='true' name='actionsCallbackProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Track' type='^^{TrackType}'/>
<arg declared_type='long' type='l'/>
<arg declared_type='QTEventRecordPtr' type='^{QTEventRecord=lI{Point=ss}lllll}'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='void*' name='refcon' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetActive'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean' name='enableMedia' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetChunkManagementFlags'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<arg declared_type='UInt32' name='flagsMask' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetClip'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RgnHandle' name='theClip' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetDimensions'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Fixed' name='width' type='l'/>
<arg declared_type='Fixed' name='height' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetDoMCActionCallback'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='DoMCActionUPP' function_pointer='true' name='doMCActionCallbackProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Boolean*' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='void*' name='refcon' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetGWorld'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CGrafPtr' name='aPort' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='GDHandle' name='aGD' type='^^{GDevice}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetGraphicsMode'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='mode' type='l'/>
<arg const='true' declared_type='RGBColor*' name='opColor' type='^{RGBColor=SSS}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetHandlerCapabilities'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='long' name='flagsMask' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetHints'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='hints' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetMatrix'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='MatrixRecord*' name='trackMovieMatrix' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetMediaTimeScale'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeScale' name='newTimeScale' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetMovieTimeScale'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeScale' name='newTimeScale' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetNonPrimarySourceData'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='inputIndex' type='l'/>
<arg declared_type='long' name='dataDescriptionSeed' type='l'/>
<arg declared_type='Handle' name='dataDescription' type='^*'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='long' name='dataSize' type='l'/>
<arg declared_type='ICMCompletionProcRecordPtr' name='asyncCompletionProc' type='^{ICMCompletionProcRecord=^?l}'/>
<arg declared_type='ICMConvertDataFormatUPP' function_pointer='true' name='transferProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='void**' type='^^v'/>
<arg declared_type='long*' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetPublicInfo'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='infoSelector' type='L'/>
<arg declared_type='void*' name='infoDataPtr' type='^v'/>
<arg declared_type='Size' name='dataSize' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetPurgeableChunkMemoryAllowance'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Size' name='allowance' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetRate'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Fixed' name='rate' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetScreenLock'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean' name='lockIt' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetSoundBalance'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='balance' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetSoundBassAndTreble'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='bass' type='s'/>
<arg declared_type='short' name='treble' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetSoundEqualizerBands'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='MediaEQSpectrumBandsRecordPtr' name='spectrumInfo' type='^{MediaEQSpectrumBandsRecord=s^I}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetSoundLevelMeteringEnabled'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean' name='enable' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetSoundLocalizationData'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='data' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetSoundOutputComponent'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Component' name='outputComponent' type='^{ComponentRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetTrackApertureModeDimensionsUsingSampleDescription'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SampleDescriptionHandle' name='sampleDesc' type='^^{SampleDescription}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetTrackInputMapReference'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer' name='inputMap' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetUserPreferredCodecs'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CodecComponentHandle' name='userPreferredCodecs' type='^^^{ComponentRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaSetVideoParam'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='whichParam' type='l'/>
<arg declared_type='unsigned short*' name='value' type='^S'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaTargetRefConsEqual'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='firstRefCon' type='l'/>
<arg declared_type='long' name='secondRefCon' type='l'/>
<arg declared_type='Boolean*' name='equal' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaTimeBaseChanged'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaTimeToSampleNum'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<arg declared_type='long*' name='sampleNum' type='^l'/>
<arg declared_type='TimeValue*' name='sampleTime' type='^i'/>
<arg declared_type='TimeValue*' name='sampleDuration' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='MediaTrackEdited'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaTrackPropertyAtomChanged'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaTrackReferencesChanged'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MediaVideoOutputChanged'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentInstance' name='vout' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieAudioExtractionBegin'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<arg declared_type='MovieAudioExtractionRef*' name='outSession' type='^^{MovieAudioExtractionRefRecord}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='MovieAudioExtractionEnd'>
<arg declared_type='MovieAudioExtractionRef' name='session' type='^{MovieAudioExtractionRefRecord=}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='MovieAudioExtractionFillBuffer'>
<arg declared_type='MovieAudioExtractionRef' name='session' type='^{MovieAudioExtractionRefRecord=}'/>
<arg declared_type='UInt32*' name='ioNumFrames' type='^I'/>
<arg declared_type='AudioBufferList*' name='ioData' type='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<arg declared_type='UInt32*' name='outFlags' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='MovieAudioExtractionGetProperty'>
<arg declared_type='MovieAudioExtractionRef' name='session' type='^{MovieAudioExtractionRefRecord=}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='QTPropertyValuePtr' name='outPropValueAddress' type='^v'/>
<arg declared_type='ByteCount*' name='outPropValueSizeUsed' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='MovieAudioExtractionGetPropertyInfo'>
<arg declared_type='MovieAudioExtractionRef' name='session' type='^{MovieAudioExtractionRefRecord=}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='QTPropertyValueType*' name='outPropType' type='^I'/>
<arg declared_type='ByteCount*' name='outPropValueSize' type='^I'/>
<arg declared_type='UInt32*' name='outPropertyFlags' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='MovieAudioExtractionSetProperty'>
<arg declared_type='MovieAudioExtractionRef' name='session' type='^{MovieAudioExtractionRefRecord=}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ConstQTPropertyValuePtr' name='inPropValueAddress' type='^v'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='MovieExecuteWiredActions'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='QTAtomContainer' name='actions' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='MovieExportAddDataSource'>
<arg declared_type='MovieExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='trackType' type='L'/>
<arg declared_type='TimeScale' name='scale' type='l'/>
<arg declared_type='long*' name='trackID' type='^l'/>
<arg declared_type='MovieExportGetPropertyUPP' function_pointer='true' name='getPropertyProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='MovieExportGetDataUPP' function_pointer='true' name='getDataProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='MovieExportGetDataParams*' type='^{MovieExportGetDataParams=lliii*l^^{SampleDescription}Illlil}'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieExportDisposeGetDataAndPropertiesProcs'>
<arg declared_type='MovieExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='MovieExportGetPropertyUPP' function_pointer='true' name='getPropertyProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='MovieExportGetDataUPP' function_pointer='true' name='getDataProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='MovieExportGetDataParams*' type='^{MovieExportGetDataParams=lliii*l^^{SampleDescription}Illlil}'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieExportDoUserDialog'>
<arg declared_type='MovieExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Track' name='onlyThisTrack' type='^^{TrackType}'/>
<arg declared_type='TimeValue' name='startTime' type='l'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<arg declared_type='Boolean*' name='canceled' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieExportFromProceduresToDataRef'>
<arg declared_type='MovieExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieExportGetAuxiliaryData'>
<arg declared_type='MovieExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataH' type='^*'/>
<arg declared_type='OSType*' name='handleType' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieExportGetCreatorType'>
<arg declared_type='MovieExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType*' name='creator' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieExportGetFileNameExtension'>
<arg declared_type='MovieExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType*' name='extension' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieExportGetSettingsAsAtomContainer'>
<arg declared_type='MovieExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer*' name='settings' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieExportGetShortFileTypeString'>
<arg declared_type='MovieExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned char*' name='typeString' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieExportGetSourceMediaType'>
<arg declared_type='MovieExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType*' name='mediaType' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieExportNewGetDataAndPropertiesProcs'>
<arg declared_type='MovieExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='trackType' type='L'/>
<arg declared_type='TimeScale*' name='scale' type='^i'/>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='TimeValue' name='startTime' type='l'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<arg declared_type='MovieExportGetPropertyUPP*' name='getPropertyProc' type='^^?'/>
<arg declared_type='MovieExportGetDataUPP*' name='getDataProc' type='^^?'/>
<arg declared_type='void**' name='refCon' type='^^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieExportSetGetMoviePropertyProc'>
<arg declared_type='MovieExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='MovieExportGetPropertyUPP' function_pointer='true' name='getPropertyProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieExportSetProgressProc'>
<arg declared_type='MovieExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='MovieProgressUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Fixed' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='long' name='refcon' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieExportSetSampleDescription'>
<arg declared_type='MovieExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SampleDescriptionHandle' name='desc' type='^^{SampleDescription}'/>
<arg declared_type='OSType' name='mediaType' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieExportSetSettingsFromAtomContainer'>
<arg declared_type='MovieExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer' name='settings' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieExportToDataRef'>
<arg declared_type='MovieExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Track' name='onlyThisTrack' type='^^{TrackType}'/>
<arg declared_type='TimeValue' name='startTime' type='l'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieExportToFile'>
<arg declared_type='MovieExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='FSSpec*' name='theFile' type='^{FSSpec=si[64C]}'/>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Track' name='onlyThisTrack' type='^^{TrackType}'/>
<arg declared_type='TimeValue' name='startTime' type='l'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieExportToHandle'>
<arg declared_type='MovieExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataH' type='^*'/>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Track' name='onlyThisTrack' type='^^{TrackType}'/>
<arg declared_type='TimeValue' name='startTime' type='l'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieExportValidate'>
<arg declared_type='MovieExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Track' name='onlyThisTrack' type='^^{TrackType}'/>
<arg declared_type='Boolean*' name='valid' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportDataRef'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Track' name='targetTrack' type='^^{TrackType}'/>
<arg declared_type='Track*' name='usedTrack' type='^^^{TrackType}'/>
<arg declared_type='TimeValue' name='atTime' type='l'/>
<arg declared_type='TimeValue*' name='addedDuration' type='^i'/>
<arg declared_type='long' name='inFlags' type='l'/>
<arg declared_type='long*' name='outFlags' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportDoUserDialog'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='FSSpec*' name='theFile' type='^{FSSpec=si[64C]}'/>
<arg declared_type='Handle' name='theData' type='^*'/>
<arg declared_type='Boolean*' name='canceled' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportDoUserDialogDataRef'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='Boolean*' name='canceled' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportEstimateCompletionTime'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeRecord*' name='time' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportFile'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='FSSpec*' name='theFile' type='^{FSSpec=si[64C]}'/>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Track' name='targetTrack' type='^^{TrackType}'/>
<arg declared_type='Track*' name='usedTrack' type='^^^{TrackType}'/>
<arg declared_type='TimeValue' name='atTime' type='l'/>
<arg declared_type='TimeValue*' name='addedDuration' type='^i'/>
<arg declared_type='long' name='inFlags' type='l'/>
<arg declared_type='long*' name='outFlags' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportGetAuxiliaryDataType'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType*' name='auxType' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportGetDestinationMediaType'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType*' name='mediaType' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportGetDontBlock'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='willBlock' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportGetFileType'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType*' name='fileType' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportGetLoadState'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='importerLoadState' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportGetMIMETypeList'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer*' name='mimeInfo' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportGetMaxLoadedTime'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeValue*' name='time' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportGetSampleDescription'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SampleDescriptionHandle*' name='desc' type='^^^{SampleDescription}'/>
<arg declared_type='OSType*' name='mediaType' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportGetSettingsAsAtomContainer'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer*' name='settings' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportHandle'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataH' type='^*'/>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Track' name='targetTrack' type='^^{TrackType}'/>
<arg declared_type='Track*' name='usedTrack' type='^^^{TrackType}'/>
<arg declared_type='TimeValue' name='atTime' type='l'/>
<arg declared_type='TimeValue*' name='addedDuration' type='^i'/>
<arg declared_type='long' name='inFlags' type='l'/>
<arg declared_type='long*' name='outFlags' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportIdle'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='inFlags' type='l'/>
<arg declared_type='long*' name='outFlags' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportSetAuxiliaryData'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='data' type='^*'/>
<arg declared_type='OSType' name='handleType' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportSetChunkSize'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='chunkSize' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportSetDimensions'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Fixed' name='width' type='l'/>
<arg declared_type='Fixed' name='height' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportSetDontBlock'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean' name='dontBlock' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportSetDuration'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportSetFromScrap'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean' name='fromScrap' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportSetIdleManager'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='IdleManager' name='im' type='^{OpaqueIdleManager=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportSetMediaDataRef'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportSetMediaFile'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='AliasHandle' name='alias' type='^^{AliasRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportSetNewMovieFlags'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='newMovieFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportSetOffsetAndLimit'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long' name='offset' type='L'/>
<arg declared_type='unsigned long' name='limit' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportSetOffsetAndLimit64'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='wide*' name='offset' type='^{wide=Ii}'/>
<arg const='true' declared_type='wide*' name='limit' type='^{wide=Ii}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportSetProgressProc'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='MovieProgressUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Fixed' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='long' name='refcon' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportSetSampleDescription'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SampleDescriptionHandle' name='desc' type='^^{SampleDescription}'/>
<arg declared_type='OSType' name='mediaType' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportSetSampleDuration'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<arg declared_type='TimeScale' name='scale' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportSetSettingsFromAtomContainer'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer' name='settings' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportValidate'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='FSSpec*' name='theFile' type='^{FSSpec=si[64C]}'/>
<arg declared_type='Handle' name='theData' type='^*'/>
<arg declared_type='Boolean*' name='valid' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieImportValidateDataRef'>
<arg declared_type='MovieImportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='UInt8*' name='valid' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieMediaGetChildDoMCActionCallback'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='DoMCActionUPP*' name='doMCActionCallbackProc' type='^^?'/>
<arg declared_type='long*' name='refcon' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieMediaGetChildMovieDataReference'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomID' name='dataRefID' type='l'/>
<arg declared_type='short' name='dataRefIndex' type='s'/>
<arg declared_type='OSType*' name='dataRefType' type='^I'/>
<arg declared_type='Handle*' name='dataRef' type='^^*'/>
<arg declared_type='QTAtomID*' name='dataRefIDOut' type='^i'/>
<arg declared_type='short*' name='dataRefIndexOut' type='^s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieMediaGetCurrentMovieProperty'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='whichProperty' type='L'/>
<arg declared_type='void*' name='value' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieMediaGetCurrentTrackProperty'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='trackID' type='l'/>
<arg declared_type='OSType' name='whichProperty' type='L'/>
<arg declared_type='void*' name='value' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieMediaGetDoMCActionCallback'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='DoMCActionUPP*' name='doMCActionCallbackProc' type='^^?'/>
<arg declared_type='long*' name='refcon' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieMediaLoadChildMovieFromDataReference'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomID' name='dataRefID' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieMediaSetChildMovieDataReference'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomID' name='dataRefID' type='l'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MovieSearchText'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Ptr' name='text' type='*'/>
<arg declared_type='long' name='size' type='l'/>
<arg declared_type='long' name='searchFlags' type='l'/>
<arg declared_type='Track*' name='searchTrack' type='^^^{TrackType}'/>
<arg declared_type='TimeValue*' name='searchTime' type='^i'/>
<arg declared_type='long*' name='searchOffset' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='MoviesTask'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='long' name='maxMilliSecToUse' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='MusicDerivedCloseResFile'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='resRefNum' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicDerivedMIDISend'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='MusicMIDIPacket*' name='packet' type='^{MusicMIDIPacket=SL[249C]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicDerivedOpenResFile'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicDerivedSetInstrument'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='partNumber' type='l'/>
<arg declared_type='GCPart*' name='p' type='^{GCPart=l[128s]lll{GCInstrumentData={ToneDescription={BigEndianOSType=I}[32C][32C]{BigEndianLong=l}{BigEndianLong=l}}l[1l]}}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicDerivedSetKnob'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='knobType' type='l'/>
<arg declared_type='long' name='knobNumber' type='l'/>
<arg declared_type='long' name='knobValue' type='l'/>
<arg declared_type='long' name='partNumber' type='l'/>
<arg declared_type='GCPart*' name='p' type='^{GCPart=l[128s]lll{GCInstrumentData={ToneDescription={BigEndianOSType=I}[32C][32C]{BigEndianLong=l}{BigEndianLong=l}}l[1l]}}'/>
<arg declared_type='GenericKnobDescription*' name='gkd' type='^{GenericKnobDescription={KnobDescription=[64C]lllll}llll}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicDerivedSetMIDI'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='MusicMIDISendUPP' function_pointer='true' name='midiProc' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' type='l'/>
<arg declared_type='MusicMIDIPacket*' type='^{MusicMIDIPacket=SL[249C]}'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='long' name='midiChannel' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicDerivedSetPart'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='partNumber' type='l'/>
<arg declared_type='GCPart*' name='p' type='^{GCPart=l[128s]lll{GCInstrumentData={ToneDescription={BigEndianOSType=I}[32C][32C]{BigEndianLong=l}{BigEndianLong=l}}l[1l]}}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicDerivedSetPartInstrumentNumber'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='partNumber' type='l'/>
<arg declared_type='GCPart*' name='p' type='^{GCPart=l[128s]lll{GCInstrumentData={ToneDescription={BigEndianOSType=I}[32C][32C]{BigEndianLong=l}{BigEndianLong=l}}l[1l]}}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicDerivedStorePartInstrument'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='partNumber' type='l'/>
<arg declared_type='GCPart*' name='p' type='^{GCPart=l[128s]lll{GCInstrumentData={ToneDescription={BigEndianOSType=I}[32C][32C]{BigEndianLong=l}{BigEndianLong=l}}l[1l]}}'/>
<arg declared_type='long' name='instrumentNumber' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicFindTone'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ToneDescription*' name='td' type='^{ToneDescription={BigEndianOSType=I}[32C][32C]{BigEndianLong=l}{BigEndianLong=l}}'/>
<arg declared_type='long*' name='libraryIndexOut' type='^l'/>
<arg declared_type='unsigned long*' name='fit' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGenericConfigure'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='mode' type='l'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='long' name='baseResID' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGenericGetKnobList'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='knobType' type='l'/>
<arg declared_type='GenericKnobDescriptionListHandle*' name='gkdlH' type='^^^{GenericKnobDescriptionList}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGenericGetPart'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='partNumber' type='l'/>
<arg declared_type='GCPart**' name='part' type='^^{GCPart}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGenericSetResourceNumbers'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='resourceIDH' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetDescription'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SynthesizerDescription*' name='sd' type='^{SynthesizerDescription=I[32C]LLLLLLLLLLLL[4L][4L][4L]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetDeviceConnection'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='index' type='l'/>
<arg declared_type='long*' name='id1' type='^l'/>
<arg declared_type='long*' name='id2' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetDrumKnobDescription'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='knobIndex' type='l'/>
<arg declared_type='KnobDescription*' name='mkd' type='^{KnobDescription=[64C]lllll}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetDrumNames'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='modifiableInstruments' type='l'/>
<arg declared_type='Handle*' name='instrumentNumbers' type='^^*'/>
<arg declared_type='Handle*' name='instrumentNames' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetInfoText'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='selector' type='l'/>
<arg declared_type='Handle*' name='textH' type='^^*'/>
<arg declared_type='Handle*' name='styleH' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetInstrumentAboutInfo'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='part' type='l'/>
<arg declared_type='InstrumentAboutInfo*' name='iai' type='^{InstrumentAboutInfo=^^{Picture}[256C][256C][256C]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetInstrumentInfo'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='getInstrumentInfoFlags' type='l'/>
<arg declared_type='InstrumentInfoListHandle*' name='infoListH' type='^^^{InstrumentInfoList}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetInstrumentKnobDescription'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='knobIndex' type='l'/>
<arg declared_type='KnobDescription*' name='mkd' type='^{KnobDescription=[64C]lllll}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetInstrumentNames'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='modifiableInstruments' type='l'/>
<arg declared_type='Handle*' name='instrumentNames' type='^^*'/>
<arg declared_type='Handle*' name='instrumentCategoryLasts' type='^^*'/>
<arg declared_type='Handle*' name='instrumentCategoryNames' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetKnob'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='knobID' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetKnobDescription'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='knobIndex' type='l'/>
<arg declared_type='KnobDescription*' name='mkd' type='^{KnobDescription=[64C]lllll}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetKnobSettingStrings'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='knobIndex' type='l'/>
<arg declared_type='long' name='isGlobal' type='l'/>
<arg declared_type='Handle*' name='settingsNames' type='^^*'/>
<arg declared_type='Handle*' name='settingsCategoryLasts' type='^^*'/>
<arg declared_type='Handle*' name='settingsCategoryNames' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetMIDIPorts'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='inputPortCount' type='^l'/>
<arg declared_type='long*' name='outputPortCount' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetMIDIProc'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='MusicMIDISendUPP*' name='midiSendProc' type='^^?'/>
<arg declared_type='long*' name='refCon' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetMasterTune'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetPart'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='part' type='l'/>
<arg declared_type='long*' name='midiChannel' type='^l'/>
<arg declared_type='long*' name='polyphony' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetPartAtomicInstrument'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='part' type='l'/>
<arg declared_type='AtomicInstrument*' name='ai' type='^^*'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetPartController'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='part' type='l'/>
<arg declared_type='MusicController' name='controllerNumber' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetPartInstrumentNumber'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='part' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetPartKnob'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='part' type='l'/>
<arg declared_type='long' name='knobID' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicGetPartName'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='part' type='l'/>
<arg declared_type='StringPtr' name='name' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicMediaGetIndexedTunePlayer'>
<arg declared_type='ComponentInstance' name='ti' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='sampleDescIndex' type='l'/>
<arg declared_type='ComponentInstance*' name='tp' type='^^{ComponentInstanceRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicPlayNote'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='part' type='l'/>
<arg declared_type='long' name='pitch' type='l'/>
<arg declared_type='long' name='velocity' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicResetPart'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='part' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicSendMIDI'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='portIndex' type='l'/>
<arg declared_type='MusicMIDIPacket*' name='mp' type='^{MusicMIDIPacket=SL[249C]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicSetKnob'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='knobID' type='l'/>
<arg declared_type='long' name='knobValue' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicSetMIDIProc'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='MusicMIDISendUPP' function_pointer='true' name='midiSendProc' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' type='l'/>
<arg declared_type='MusicMIDIPacket*' type='^{MusicMIDIPacket=SL[249C]}'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<arg declared_type='long' name='refCon' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicSetMasterTune'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='masterTune' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicSetOfflineTimeTo'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='newTimeStamp' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicSetPart'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='part' type='l'/>
<arg declared_type='long' name='midiChannel' type='l'/>
<arg declared_type='long' name='polyphony' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicSetPartAtomicInstrument'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='part' type='l'/>
<arg declared_type='AtomicInstrumentPtr' name='aiP' type='*'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicSetPartController'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='part' type='l'/>
<arg declared_type='MusicController' name='controllerNumber' type='l'/>
<arg declared_type='long' name='controllerValue' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicSetPartInstrumentNumber'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='part' type='l'/>
<arg declared_type='long' name='instrumentNumber' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicSetPartInstrumentNumberInterruptSafe'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='part' type='l'/>
<arg declared_type='long' name='instrumentNumber' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicSetPartKnob'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='part' type='l'/>
<arg declared_type='long' name='knobID' type='l'/>
<arg declared_type='long' name='knobValue' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicSetPartName'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='part' type='l'/>
<arg declared_type='StringPtr' name='name' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicSetPartSoundLocalization'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='part' type='l'/>
<arg declared_type='Handle' name='data' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicStartOffline'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='numChannels' type='^L'/>
<arg declared_type='UnsignedFixed*' name='sampleRate' type='^I'/>
<arg declared_type='unsigned short*' name='sampleSize' type='^S'/>
<arg declared_type='MusicOfflineDataUPP' function_pointer='true' name='dataProc' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<arg declared_type='long' name='dataProcRefCon' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicStorePartInstrument'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='part' type='l'/>
<arg declared_type='long' name='instrumentNumber' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicTask'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='MusicUseDeviceConnection'>
<arg declared_type='MusicComponent' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='id1' type='l'/>
<arg declared_type='long' name='id2' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NACopyrightDialog'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PicHandle' name='p' type='^^{Picture}'/>
<arg declared_type='StringPtr' name='author' type='*'/>
<arg declared_type='StringPtr' name='copyright' type='*'/>
<arg declared_type='StringPtr' name='other' type='*'/>
<arg declared_type='StringPtr' name='title' type='*'/>
<arg declared_type='ModalFilterUPP' function_pointer='true' name='filterProc' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='DialogItemIndex*' type='^s'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='long' name='refCon' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NADisposeNoteChannel'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='NoteChannel' name='noteChannel' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NAFindNoteChannelTone'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='NoteChannel' name='noteChannel' type='l'/>
<arg declared_type='ToneDescription*' name='td' type='^{ToneDescription={BigEndianOSType=I}[32C][32C]{BigEndianLong=l}{BigEndianLong=l}}'/>
<arg declared_type='long*' name='instrumentNumber' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NAGetController'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='NoteChannel' name='noteChannel' type='l'/>
<arg declared_type='long' name='controllerNumber' type='l'/>
<arg declared_type='long*' name='controllerValue' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NAGetIndNoteChannel'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='index' type='l'/>
<arg declared_type='NoteChannel*' name='nc' type='^i'/>
<arg declared_type='long*' name='seed' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NAGetKnob'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='NoteChannel' name='noteChannel' type='l'/>
<arg declared_type='long' name='knobNumber' type='l'/>
<arg declared_type='long*' name='knobValue' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NAGetMIDIPorts'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTMIDIPortListHandle*' name='inputPorts' type='^^^{QTMIDIPortList}'/>
<arg declared_type='QTMIDIPortListHandle*' name='outputPorts' type='^^^{QTMIDIPortList}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NAGetNoteChannelInfo'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='NoteChannel' name='noteChannel' type='l'/>
<arg declared_type='long*' name='index' type='^l'/>
<arg declared_type='long*' name='part' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NAGetNoteRequest'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='NoteChannel' name='noteChannel' type='l'/>
<arg declared_type='NoteRequest*' name='nrOut' type='^{NoteRequest={NoteRequestInfo=CC{BigEndianShort=s}{BigEndianFixed=i}}{ToneDescription={BigEndianOSType=I}[32C][32C]{BigEndianLong=l}{BigEndianLong=l}}}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NAGetRegisteredMusicDevice'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='index' type='l'/>
<arg declared_type='OSType*' name='synthType' type='^I'/>
<arg declared_type='unsigned char*' name='name' type='*'/>
<arg declared_type='SynthesizerConnections*' name='connections' type='^{SynthesizerConnections=IIIlll^{FSSpec}l}'/>
<arg declared_type='MusicComponent*' name='mc' type='^^{ComponentInstanceRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NANewNoteChannel'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='NoteRequest*' name='noteRequest' type='^{NoteRequest={NoteRequestInfo=CC{BigEndianShort=s}{BigEndianFixed=i}}{ToneDescription={BigEndianOSType=I}[32C][32C]{BigEndianLong=l}{BigEndianLong=l}}}'/>
<arg declared_type='NoteChannel*' name='outChannel' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NANewNoteChannelFromAtomicInstrument'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='AtomicInstrumentPtr' name='instrument' type='*'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='NoteChannel*' name='outChannel' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NAPickArrangement'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ModalFilterUPP' function_pointer='true' name='filterProc' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='DialogItemIndex*' type='^s'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='StringPtr' name='prompt' type='*'/>
<arg declared_type='long' name='zero1' type='l'/>
<arg declared_type='long' name='zero2' type='l'/>
<arg declared_type='Track' name='t' type='^^{TrackType}'/>
<arg declared_type='StringPtr' name='songName' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NAPickEditInstrument'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ModalFilterUPP' function_pointer='true' name='filterProc' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='DialogItemIndex*' type='^s'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='StringPtr' name='prompt' type='*'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='NoteChannel' name='nc' type='l'/>
<arg declared_type='AtomicInstrument' name='ai' type='^*'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NAPickInstrument'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ModalFilterUPP' function_pointer='true' name='filterProc' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='DialogItemIndex*' type='^s'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='StringPtr' name='prompt' type='*'/>
<arg declared_type='ToneDescription*' name='sd' type='^{ToneDescription={BigEndianOSType=I}[32C][32C]{BigEndianLong=l}{BigEndianLong=l}}'/>
<arg declared_type='unsigned long' name='flags' type='L'/>
<arg declared_type='long' name='refCon' type='l'/>
<arg declared_type='long' name='reserved1' type='l'/>
<arg declared_type='long' name='reserved2' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NAPlayNote'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='NoteChannel' name='noteChannel' type='l'/>
<arg declared_type='long' name='pitch' type='l'/>
<arg declared_type='long' name='velocity' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NAPrerollNoteChannel'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='NoteChannel' name='noteChannel' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NARegisterMusicDevice'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='synthType' type='L'/>
<arg declared_type='unsigned char*' name='name' type='*'/>
<arg declared_type='SynthesizerConnections*' name='connections' type='^{SynthesizerConnections=IIIlll^{FSSpec}l}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NAResetNoteChannel'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='NoteChannel' name='noteChannel' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NASaveMusicConfiguration'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NASendMIDI'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='NoteChannel' name='noteChannel' type='l'/>
<arg declared_type='MusicMIDIPacket*' name='mp' type='^{MusicMIDIPacket=SL[249C]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NASetAtomicInstrument'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='NoteChannel' name='noteChannel' type='l'/>
<arg declared_type='AtomicInstrumentPtr' name='instrument' type='*'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NASetController'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='NoteChannel' name='noteChannel' type='l'/>
<arg declared_type='long' name='controllerNumber' type='l'/>
<arg declared_type='long' name='controllerValue' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NASetInstrumentNumber'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='NoteChannel' name='noteChannel' type='l'/>
<arg declared_type='long' name='instrumentNumber' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NASetInstrumentNumberInterruptSafe'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='NoteChannel' name='noteChannel' type='l'/>
<arg declared_type='long' name='instrumentNumber' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NASetKnob'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='NoteChannel' name='noteChannel' type='l'/>
<arg declared_type='long' name='knobNumber' type='l'/>
<arg declared_type='long' name='knobValue' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NASetNoteChannelBalance'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='NoteChannel' name='noteChannel' type='l'/>
<arg declared_type='long' name='balance' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NASetNoteChannelSoundLocalization'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='NoteChannel' name='noteChannel' type='l'/>
<arg declared_type='Handle' name='data' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NASetNoteChannelVolume'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='NoteChannel' name='noteChannel' type='l'/>
<arg declared_type='Fixed' name='volume' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NAStuffToneDescription'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='gmNumber' type='l'/>
<arg declared_type='ToneDescription*' name='td' type='^{ToneDescription={BigEndianOSType=I}[32C][32C]{BigEndianLong=l}{BigEndianLong=l}}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NATask'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NAUnregisterMusicDevice'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='index' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NAUnrollNoteChannel'>
<arg declared_type='NoteAllocator' name='na' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='NoteChannel' name='noteChannel' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='NewActionsUPP'>
<arg declared_type='ActionsProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Track' type='^^{TrackType}'/>
<arg declared_type='long' type='l'/>
<arg declared_type='QTEventRecordPtr' type='^{QTEventRecord=lI{Point=ss}lllll}'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='ActionsUPP' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Track' type='^^{TrackType}'/>
<arg declared_type='long' type='l'/>
<arg declared_type='QTEventRecordPtr' type='^{QTEventRecord=lI{Point=ss}lllll}'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewCDataHandlerUPP'>
<arg declared_type='CDataHandler' function_pointer='true' name='userRoutine' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='CDataHandlerUPP' function_pointer='true' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewCallBack'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<arg declared_type='short' name='cbType' type='s'/>
<retval declared_type='QTCallBack' type='^{QTCallBackHeader=}'/>
</function>
<function name='NewCharDataHandlerUPP'>
<arg declared_type='CharDataHandler' function_pointer='true' name='userRoutine' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='CharDataHandlerUPP' function_pointer='true' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewCommentHandlerUPP'>
<arg declared_type='CommentHandler' function_pointer='true' name='userRoutine' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='CommentHandlerUPP' function_pointer='true' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewDataHCompletionUPP'>
<arg declared_type='DataHCompletionProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSErr' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='DataHCompletionUPP' function_pointer='true' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSErr' type='s'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewDoMCActionUPP'>
<arg declared_type='DoMCActionProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Boolean*' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='DoMCActionUPP' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Boolean*' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewEndDocumentHandlerUPP'>
<arg declared_type='EndDocumentHandler' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='EndDocumentHandlerUPP' function_pointer='true' type='^?'>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewEndElementHandlerUPP'>
<arg declared_type='EndElementHandler' function_pointer='true' name='userRoutine' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='EndElementHandlerUPP' function_pointer='true' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewGetMovieUPP'>
<arg declared_type='GetMovieProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='GetMovieUPP' function_pointer='true' type='^?'>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewICMAlignmentUPP'>
<arg declared_type='ICMAlignmentProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='ICMAlignmentUPP' function_pointer='true' type='^?'>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewICMCompletionUPP'>
<arg declared_type='ICMCompletionProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='ICMCompletionUPP' function_pointer='true' type='^?'>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewICMConvertDataFormatUPP'>
<arg declared_type='ICMConvertDataFormatProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='void**' type='^^v'/>
<arg declared_type='long*' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='ICMConvertDataFormatUPP' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='void**' type='^^v'/>
<arg declared_type='long*' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewICMCursorShieldedUPP'>
<arg declared_type='ICMCursorShieldedProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='ICMCursorShieldedUPP' function_pointer='true' type='^?'>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewICMDataUPP'>
<arg declared_type='ICMDataProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='Ptr*' type='^*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='ICMDataUPP' function_pointer='true' type='^?'>
<arg declared_type='Ptr*' type='^*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewICMFlushUPP'>
<arg declared_type='ICMFlushProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='ICMFlushUPP' function_pointer='true' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewICMMemoryDisposedUPP'>
<arg declared_type='ICMMemoryDisposedProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='ICMMemoryDisposedUPP' function_pointer='true' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewICMProgressUPP'>
<arg declared_type='ICMProgressProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='Fixed' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='ICMProgressUPP' function_pointer='true' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='Fixed' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewImageCodecDrawBandCompleteUPP'>
<arg declared_type='ImageCodecDrawBandCompleteProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ComponentResult' type='l'/>
<arg declared_type='UInt32' type='L'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='ImageCodecDrawBandCompleteUPP' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ComponentResult' type='l'/>
<arg declared_type='UInt32' type='L'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewImageCodecMPDrawBandUPP'>
<arg declared_type='ImageCodecMPDrawBandProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ImageSubCodecDecompressRecord*' type='^{ImageSubCodecDecompressRecord=*l*{ICMProgressProcRecord=^?l}{ICMDataProcRecord=^?l}^vCB[2C][2l]^?^v^vll}'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ImageCodecMPDrawBandUPP' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ImageSubCodecDecompressRecord*' type='^{ImageSubCodecDecompressRecord=*l*{ICMProgressProcRecord=^?l}{ICMDataProcRecord=^?l}^vCB[2C][2l]^?^v^vll}'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewImageCodecTimeTriggerUPP'>
<arg declared_type='ImageCodecTimeTriggerProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='ImageCodecTimeTriggerUPP' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewImageGWorld'>
<arg declared_type='GWorldPtr*' name='gworld' type='^^{OpaqueGrafPtr}'/>
<arg declared_type='ImageDescriptionHandle' name='idh' type='^^{ImageDescription}'/>
<arg declared_type='GWorldFlags' name='flags' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='NewMCActionFilterUPP'>
<arg declared_type='MCActionFilterProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='MovieController' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='MCActionFilterUPP' function_pointer='true' type='^?'>
<arg declared_type='MovieController' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</retval>
</function>
<function name='NewMCActionFilterWithRefConUPP'>
<arg declared_type='MCActionFilterWithRefConProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='MovieController' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='MCActionFilterWithRefConUPP' function_pointer='true' type='^?'>
<arg declared_type='MovieController' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</retval>
</function>
<function name='NewMCActionNotificationUPP'>
<arg declared_type='MCActionNotificationProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='MovieController' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='MCActionNotificationUPP' function_pointer='true' type='^?'>
<arg declared_type='MovieController' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</retval>
</function>
<function name='NewMovie'>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='Movie' type='^^{MovieType}'/>
</function>
<function name='NewMovieController'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg const='true' declared_type='Rect*' name='movieRect' type='^{Rect=ssss}'/>
<arg declared_type='long' name='someFlags' type='l'/>
<retval declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
</function>
<function name='NewMovieDrawingCompleteUPP'>
<arg declared_type='MovieDrawingCompleteProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='MovieDrawingCompleteUPP' function_pointer='true' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewMovieEditState'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='MovieEditState' type='^^{MovieStateRecord}'/>
</function>
<function name='NewMovieExecuteWiredActionsUPP'>
<arg declared_type='MovieExecuteWiredActionsProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='QTAtomContainer' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='MovieExecuteWiredActionsUPP' function_pointer='true' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='QTAtomContainer' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewMovieExportGetDataUPP'>
<arg declared_type='MovieExportGetDataProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='MovieExportGetDataParams*' type='^{MovieExportGetDataParams=lliii*l^^{SampleDescription}Illlil}'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='MovieExportGetDataUPP' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='MovieExportGetDataParams*' type='^{MovieExportGetDataParams=lliii*l^^{SampleDescription}Illlil}'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewMovieExportGetPropertyUPP'>
<arg declared_type='MovieExportGetPropertyProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='MovieExportGetPropertyUPP' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewMovieExportStageReachedCallbackUPP'>
<arg declared_type='MovieExportStageReachedCallbackProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='OSType' type='L'/>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='MovieExportStageReachedCallbackUPP' function_pointer='true' type='^?'>
<arg declared_type='OSType' type='L'/>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewMovieForDataRefFromHandle'>
<arg declared_type='Movie*' name='theMovie' type='^^^{MovieType}'/>
<arg declared_type='Handle' name='h' type='^*'/>
<arg declared_type='short' name='newMovieFlags' type='s'/>
<arg declared_type='Boolean*' name='dataRefWasChanged' type='^B'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='NewMovieFromDataFork'>
<arg declared_type='Movie*' name='theMovie' type='^^^{MovieType}'/>
<arg declared_type='short' name='fRefNum' type='s'/>
<arg declared_type='long' name='fileOffset' type='l'/>
<arg declared_type='short' name='newMovieFlags' type='s'/>
<arg declared_type='Boolean*' name='dataRefWasChanged' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='NewMovieFromDataFork64'>
<arg declared_type='Movie*' name='theMovie' type='^^^{MovieType}'/>
<arg declared_type='long' name='fRefNum' type='l'/>
<arg const='true' declared_type='wide*' name='fileOffset' type='^{wide=Ii}'/>
<arg declared_type='short' name='newMovieFlags' type='s'/>
<arg declared_type='Boolean*' name='dataRefWasChanged' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='NewMovieFromDataRef'>
<arg declared_type='Movie*' name='m' type='^^^{MovieType}'/>
<arg declared_type='short' name='flags' type='s'/>
<arg declared_type='short*' name='id' type='^s'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='NewMovieFromFile'>
<arg declared_type='Movie*' name='theMovie' type='^^^{MovieType}'/>
<arg declared_type='short' name='resRefNum' type='s'/>
<arg declared_type='short*' name='resId' type='^s'/>
<arg declared_type='StringPtr' name='resName' type='*'/>
<arg declared_type='short' name='newMovieFlags' type='s'/>
<arg declared_type='Boolean*' name='dataRefWasChanged' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='NewMovieFromHandle'>
<arg declared_type='Movie*' name='theMovie' type='^^^{MovieType}'/>
<arg declared_type='Handle' name='h' type='^*'/>
<arg declared_type='short' name='newMovieFlags' type='s'/>
<arg declared_type='Boolean*' name='dataRefWasChanged' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='NewMovieFromProperties'>
<arg declared_type='ItemCount' name='inputPropertyCount' type='L'/>
<arg declared_type='QTNewMoviePropertyElement*' name='inputProperties' type='^{QTNewMoviePropertyElement=III^vi}'/>
<arg declared_type='ItemCount' name='outputPropertyCount' type='L'/>
<arg declared_type='QTNewMoviePropertyElement*' name='outputProperties' type='^{QTNewMoviePropertyElement=III^vi}'/>
<arg declared_type='Movie*' name='theMovie' type='^^^{MovieType}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='NewMovieFromScrap'>
<arg declared_type='long' name='newMovieFlags' type='l'/>
<retval declared_type='Movie' type='^^{MovieType}'/>
</function>
<function name='NewMovieFromStorageOffset'>
<arg declared_type='Movie*' name='theMovie' type='^^^{MovieType}'/>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='wide*' name='fileOffset' type='^{wide=Ii}'/>
<arg declared_type='short' name='newMovieFlags' type='s'/>
<arg declared_type='Boolean*' name='dataRefWasChanged' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='NewMovieFromUserProc'>
<arg declared_type='Movie*' name='m' type='^^^{MovieType}'/>
<arg declared_type='short' name='flags' type='s'/>
<arg declared_type='Boolean*' name='dataRefWasChanged' type='^B'/>
<arg declared_type='GetMovieUPP' function_pointer='true' name='getProc' type='^?'>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<arg declared_type='Handle' name='defaultDataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='NewMoviePrePrerollCompleteUPP'>
<arg declared_type='MoviePrePrerollCompleteProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='MoviePrePrerollCompleteUPP' function_pointer='true' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewMoviePreviewCallOutUPP'>
<arg declared_type='MoviePreviewCallOutProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='MoviePreviewCallOutUPP' function_pointer='true' type='^?'>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</retval>
</function>
<function name='NewMovieProgressUPP'>
<arg declared_type='MovieProgressProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Fixed' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='MovieProgressUPP' function_pointer='true' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Fixed' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewMovieRgnCoverUPP'>
<arg declared_type='MovieRgnCoverProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='MovieRgnCoverUPP' function_pointer='true' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewMovieTrack'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Fixed' name='width' type='l'/>
<arg declared_type='Fixed' name='height' type='l'/>
<arg declared_type='short' name='trackVolume' type='s'/>
<retval declared_type='Track' type='^^{TrackType}'/>
</function>
<function name='NewMoviesErrorUPP'>
<arg declared_type='MoviesErrorProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='MoviesErrorUPP' function_pointer='true' type='^?'>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewMusicMIDISendUPP'>
<arg declared_type='MusicMIDISendProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' type='l'/>
<arg declared_type='MusicMIDIPacket*' type='^{MusicMIDIPacket=SL[249C]}'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='MusicMIDISendUPP' function_pointer='true' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' type='l'/>
<arg declared_type='MusicMIDIPacket*' type='^{MusicMIDIPacket=SL[249C]}'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewMusicOfflineDataUPP'>
<arg declared_type='MusicOfflineDataProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='MusicOfflineDataUPP' function_pointer='true' type='^?'>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewPrePrerollCompleteUPP'>
<arg declared_type='PrePrerollCompleteProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='MediaHandler' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='PrePrerollCompleteUPP' function_pointer='true' type='^?'>
<arg declared_type='MediaHandler' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewPreprocessInstructionHandlerUPP'>
<arg declared_type='PreprocessInstructionHandler' function_pointer='true' name='userRoutine' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char **' type='^*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='PreprocessInstructionHandlerUPP' function_pointer='true' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char **' type='^*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewQDPixUPP'>
<arg declared_type='QDPixProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='PixMap*' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='PixMap*' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QDPixUPP' function_pointer='true' type='^?'>
<arg declared_type='PixMap*' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='PixMap*' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQTBandwidthNotificationUPP'>
<arg declared_type='QTBandwidthNotificationProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='long' type='l'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='QTBandwidthNotificationUPP' function_pointer='true' type='^?'>
<arg declared_type='long' type='l'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewQTCallBackUPP'>
<arg declared_type='QTCallBackProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='QTCallBack' type='^{QTCallBackHeader=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QTCallBackUPP' function_pointer='true' type='^?'>
<arg declared_type='QTCallBack' type='^{QTCallBackHeader=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQTComponentPropertyListenerFilterUPP'>
<arg declared_type='QTComponentPropertyListenerFilterProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='QTComponentPropertyListenersRef' type='@'/>
<arg const='true' declared_type='QTComponentPropertyListenerCollectionContext*' type='^{QTComponentPropertyListenerCollectionContext=I^?^v}'/>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' type='L'/>
<arg declared_type='ComponentPropertyID' type='L'/>
<arg declared_type='QTComponentPropertyListenerUPP' function_pointer='true' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' type='L'/>
<arg declared_type='ComponentPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg const='true' declared_type='void*' type='^v'/>
<arg const='true' declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='QTComponentPropertyListenerFilterUPP' function_pointer='true' type='^?'>
<arg declared_type='QTComponentPropertyListenersRef' type='@'/>
<arg const='true' declared_type='QTComponentPropertyListenerCollectionContext*' type='^{QTComponentPropertyListenerCollectionContext=I^?^v}'/>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' type='L'/>
<arg declared_type='ComponentPropertyID' type='L'/>
<arg declared_type='QTComponentPropertyListenerUPP' function_pointer='true' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' type='L'/>
<arg declared_type='ComponentPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg const='true' declared_type='void*' type='^v'/>
<arg const='true' declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</retval>
</function>
<function name='NewQTComponentPropertyListenerUPP'>
<arg declared_type='QTComponentPropertyListenerProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' type='L'/>
<arg declared_type='ComponentPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QTComponentPropertyListenerUPP' function_pointer='true' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' type='L'/>
<arg declared_type='ComponentPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQTEffectListFilterUPP'>
<arg declared_type='QTEffectListFilterProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='Component' type='^{ComponentRecord=[1l]}'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='QTEffectListFilterUPP' function_pointer='true' type='^?'>
<arg declared_type='Component' type='^{ComponentRecord=[1l]}'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</retval>
</function>
<function name='NewQTMoviePropertyListenerUPP'>
<arg declared_type='QTMoviePropertyListenerProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='QTPropertyClass' type='L'/>
<arg declared_type='QTPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QTMoviePropertyListenerUPP' function_pointer='true' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='QTPropertyClass' type='L'/>
<arg declared_type='QTPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQTNextTaskNeededSoonerCallbackUPP'>
<arg declared_type='QTNextTaskNeededSoonerCallbackProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='TimeValue' type='l'/>
<arg declared_type='unsigned long' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QTNextTaskNeededSoonerCallbackUPP' function_pointer='true' type='^?'>
<arg declared_type='TimeValue' type='l'/>
<arg declared_type='unsigned long' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQTSModalFilterUPP'>
<arg declared_type='QTSModalFilterProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='DialogPtr' type='^{OpaqueDialogPtr=}'/>
<arg const='true' declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='SInt16*' type='^s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='QTSModalFilterUPP' function_pointer='true' type='^?'>
<arg declared_type='DialogPtr' type='^{OpaqueDialogPtr=}'/>
<arg const='true' declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='SInt16*' type='^s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</retval>
</function>
<function name='NewQTSNotificationUPP'>
<arg declared_type='QTSNotificationProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='ComponentResult' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='QTSNotificationUPP' function_pointer='true' type='^?'>
<arg declared_type='ComponentResult' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewQTSPanelFilterUPP'>
<arg declared_type='QTSPanelFilterProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='QTSPanelFilterParams*' type='^{QTSPanelFilterParams=i^{QTSStreamRecord}II{QTAtomSpec=^*i}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='QTSPanelFilterUPP' function_pointer='true' type='^?'>
<arg declared_type='QTSPanelFilterParams*' type='^{QTSPanelFilterParams=i^{QTSStreamRecord}II{QTAtomSpec=^*i}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</retval>
</function>
<function name='NewQTSyncTaskUPP'>
<arg declared_type='QTSyncTaskProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QTSyncTaskUPP' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQTTrackPropertyListenerUPP'>
<arg declared_type='QTTrackPropertyListenerProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='Track' type='^^{TrackType}'/>
<arg declared_type='QTPropertyClass' type='L'/>
<arg declared_type='QTPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QTTrackPropertyListenerUPP' function_pointer='true' type='^?'>
<arg declared_type='Track' type='^^{TrackType}'/>
<arg declared_type='QTPropertyClass' type='L'/>
<arg declared_type='QTPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQTVRBackBufferImagingUPP'>
<arg declared_type='QTVRBackBufferImagingProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='QTVRBackBufferImagingUPP' function_pointer='true' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewQTVREnteringNodeUPP'>
<arg declared_type='QTVREnteringNodeProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='QTVREnteringNodeUPP' function_pointer='true' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewQTVRImagingCompleteUPP'>
<arg declared_type='QTVRImagingCompleteProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='QTVRImagingCompleteUPP' function_pointer='true' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewQTVRInterceptUPP'>
<arg declared_type='QTVRInterceptProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRInterceptPtr' type='^{QTVRInterceptRecord=iiiii[6^v]}'/>
<arg declared_type='SInt32' type='l'/>
<arg declared_type='Boolean*' type='^B'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QTVRInterceptUPP' function_pointer='true' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRInterceptPtr' type='^{QTVRInterceptRecord=iiiii[6^v]}'/>
<arg declared_type='SInt32' type='l'/>
<arg declared_type='Boolean*' type='^B'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQTVRLeavingNodeUPP'>
<arg declared_type='QTVRLeavingNodeProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='Boolean*' type='^B'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='QTVRLeavingNodeUPP' function_pointer='true' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='Boolean*' type='^B'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewQTVRMouseOverHotSpotUPP'>
<arg declared_type='QTVRMouseOverHotSpotProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='QTVRMouseOverHotSpotUPP' function_pointer='true' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewRTPMPDataReleaseUPP'>
<arg declared_type='RTPMPDataReleaseProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='UInt8*' type='*'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='RTPMPDataReleaseUPP' function_pointer='true' type='^?'>
<arg declared_type='UInt8*' type='*'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewRTPPBCallbackUPP'>
<arg declared_type='RTPPBCallbackProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='RTPPBCallbackUPP' function_pointer='true' type='^?'>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewSCModalFilterUPP'>
<arg declared_type='SCModalFilterProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='SCModalFilterUPP' function_pointer='true' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</retval>
</function>
<function name='NewSCModalHookUPP'>
<arg declared_type='SCModalHookProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<retval declared_type='short' type='s'/>
</arg>
<retval declared_type='SCModalHookUPP' function_pointer='true' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<retval declared_type='short' type='s'/>
</retval>
</function>
<function name='NewSGAddFrameBottleUPP'>
<arg declared_type='SGAddFrameBottleProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='TimeValue' type='l'/>
<arg declared_type='TimeScale' type='l'/>
<arg const='true' declared_type='SGCompressInfo*' type='^{SGCompressInfo=*LCC}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='SGAddFrameBottleUPP' function_pointer='true' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='TimeValue' type='l'/>
<arg declared_type='TimeScale' type='l'/>
<arg const='true' declared_type='SGCompressInfo*' type='^{SGCompressInfo=*LCC}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewSGCompressBottleUPP'>
<arg declared_type='SGCompressBottleProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='SGCompressBottleUPP' function_pointer='true' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewSGCompressCompleteBottleUPP'>
<arg declared_type='SGCompressCompleteBottleProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Boolean*' type='^B'/>
<arg declared_type='SGCompressInfo*' type='^{SGCompressInfo=*LCC}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='SGCompressCompleteBottleUPP' function_pointer='true' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Boolean*' type='^B'/>
<arg declared_type='SGCompressInfo*' type='^{SGCompressInfo=*LCC}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewSGDataUPP'>
<arg declared_type='SGDataProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long*' type='^l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='TimeValue' type='l'/>
<arg declared_type='short' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='SGDataUPP' function_pointer='true' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long*' type='^l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='TimeValue' type='l'/>
<arg declared_type='short' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewSGDisplayBottleUPP'>
<arg declared_type='SGDisplayBottleProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='SGDisplayBottleUPP' function_pointer='true' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewSGDisplayCompressBottleUPP'>
<arg declared_type='SGDisplayCompressBottleProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='ImageDescriptionHandle' type='^^{ImageDescription}'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='SGDisplayCompressBottleUPP' function_pointer='true' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='ImageDescriptionHandle' type='^^{ImageDescription}'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewSGGrabBottleUPP'>
<arg declared_type='SGGrabBottleProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='SGGrabBottleUPP' function_pointer='true' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewSGGrabCompleteBottleUPP'>
<arg declared_type='SGGrabCompleteBottleProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Boolean*' type='^B'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='SGGrabCompleteBottleUPP' function_pointer='true' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Boolean*' type='^B'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewSGGrabCompressCompleteBottleUPP'>
<arg declared_type='SGGrabCompressCompleteBottleProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt8*' type='*'/>
<arg declared_type='SGCompressInfo*' type='^{SGCompressInfo=*LCC}'/>
<arg declared_type='TimeRecord*' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='SGGrabCompressCompleteBottleUPP' function_pointer='true' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt8*' type='*'/>
<arg declared_type='SGCompressInfo*' type='^{SGCompressInfo=*LCC}'/>
<arg declared_type='TimeRecord*' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewSGModalFilterUPP'>
<arg declared_type='SGModalFilterProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg const='true' declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='SGModalFilterUPP' function_pointer='true' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg const='true' declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</retval>
</function>
<function name='NewSGTransferFrameBottleUPP'>
<arg declared_type='SGTransferFrameBottleProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='SGTransferFrameBottleUPP' function_pointer='true' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewSprite'>
<arg declared_type='Sprite*' name='newSprite' type='^^{SpriteRecord}'/>
<arg declared_type='SpriteWorld' name='itsSpriteWorld' type='^{SpriteWorldRecord=}'/>
<arg declared_type='ImageDescriptionHandle' name='idh' type='^^{ImageDescription}'/>
<arg declared_type='Ptr' name='imageDataPtr' type='*'/>
<arg declared_type='MatrixRecord*' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='Boolean' name='visible' type='B'/>
<arg declared_type='short' name='layer' type='s'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='NewSpriteWorld'>
<arg declared_type='SpriteWorld*' name='newSpriteWorld' type='^^{SpriteWorldRecord}'/>
<arg declared_type='GWorldPtr' name='destination' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='GWorldPtr' name='spriteLayer' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='RGBColor*' name='backgroundColor' type='^{RGBColor=SSS}'/>
<arg declared_type='GWorldPtr' name='background' type='^{OpaqueGrafPtr=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='NewStartDocumentHandlerUPP'>
<arg declared_type='StartDocumentHandler' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='StartDocumentHandlerUPP' function_pointer='true' type='^?'>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewStartElementHandlerUPP'>
<arg declared_type='StartElementHandler' function_pointer='true' name='userRoutine' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char**' type='^*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='StartElementHandlerUPP' function_pointer='true' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char**' type='^*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewStdPixUPP'>
<arg declared_type='StdPixProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='PixMap*' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='PixMap*' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='StdPixUPP' function_pointer='true' type='^?'>
<arg declared_type='PixMap*' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='MatrixRecord*' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='PixMap*' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewTextMediaUPP'>
<arg declared_type='TextMediaProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='TextMediaUPP' function_pointer='true' type='^?'>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewTimeBase'>
<retval declared_type='TimeBase' type='^{TimeBaseRecord=}'/>
</function>
<function name='NewTrackEditState'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='TrackEditState' type='^^{TrackStateRecord}'/>
</function>
<function name='NewTrackMedia'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='OSType' name='mediaType' type='L'/>
<arg declared_type='TimeScale' name='timeScale' type='l'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<retval declared_type='Media' type='^^{MediaType}'/>
</function>
<function name='NewTrackTransferUPP'>
<arg declared_type='TrackTransferProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='Track' type='^^{TrackType}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='TrackTransferUPP' function_pointer='true' type='^?'>
<arg declared_type='Track' type='^^{TrackType}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewTuneCallBackUPP'>
<arg declared_type='TuneCallBackProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg const='true' declared_type='TuneStatus*' type='^{TuneStatus=^L^Lissi[3l]}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='TuneCallBackUPP' function_pointer='true' type='^?'>
<arg const='true' declared_type='TuneStatus*' type='^{TuneStatus=^L^Lissi[3l]}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewTunePlayCallBackUPP'>
<arg declared_type='TunePlayCallBackProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='unsigned long*' type='^L'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='TunePlayCallBackUPP' function_pointer='true' type='^?'>
<arg declared_type='unsigned long*' type='^L'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewTweenerDataUPP'>
<arg declared_type='TweenerDataProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='TweenRecord*' type='^{TweenRecord=l^*iii^?^v^v}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='ICMCompletionProcRecordPtr' type='^{ICMCompletionProcRecord=^?l}'/>
<arg declared_type='UniversalProcPtr' function_pointer='true' type='^?'>
<retval declared_type='long' type='l'/>
</arg>
<arg declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='TweenerDataUPP' function_pointer='true' type='^?'>
<arg declared_type='TweenRecord*' type='^{TweenRecord=l^*iii^?^v^v}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='ICMCompletionProcRecordPtr' type='^{ICMCompletionProcRecord=^?l}'/>
<arg declared_type='UniversalProcPtr' function_pointer='true' type='^?'>
<retval declared_type='long' type='l'/>
</arg>
<arg declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</retval>
</function>
<function name='NewUserData'>
<arg declared_type='UserData*' name='theUserData' type='^^^{UserDataRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='NewUserDataFromHandle'>
<arg declared_type='Handle' name='h' type='^*'/>
<arg declared_type='UserData*' name='theUserData' type='^^^{UserDataRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='NewVdigIntUPP'>
<arg declared_type='VdigIntProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='VdigIntUPP' function_pointer='true' type='^?'>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='OpenADataHandler'>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataHandlerSubType' type='L'/>
<arg declared_type='Handle' name='anchorDataRef' type='^*'/>
<arg declared_type='OSType' name='anchorDataRefType' type='L'/>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='ComponentInstance*' name='dh' type='^^{ComponentInstanceRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='OpenMovieFile'>
<arg const='true' declared_type='FSSpec*' name='fileSpec' type='^{FSSpec=si[64C]}'/>
<arg declared_type='short*' name='resRefNum' type='^s'/>
<arg declared_type='SInt8' name='permission' type='c'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='OpenMovieStorage'>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='DataHandler*' name='outDataHandler' type='^^{ComponentInstanceRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='PasteHandleIntoMovie'>
<arg declared_type='Handle' name='h' type='^*'/>
<arg declared_type='OSType' name='handleType' type='L'/>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='ComponentInstance' name='userComp' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='PasteMovieSelection'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Movie' name='src' type='^^{MovieType}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='PlayMoviePreview'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='MoviePreviewCallOutUPP' function_pointer='true' name='callOutProc' type='^?'>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='long' name='refcon' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='PrePrerollMovie'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<arg declared_type='Fixed' name='rate' type='l'/>
<arg declared_type='MoviePrePrerollCompleteUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='refcon' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='PrerollMovie'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<arg declared_type='Fixed' name='Rate' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='PreviewEvent'>
<arg declared_type='pnotComponent' name='p' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='EventRecord*' name='e' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='Boolean*' name='handledEvent' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='PreviewMakePreview'>
<arg declared_type='pnotComponent' name='p' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType*' name='previewType' type='^I'/>
<arg declared_type='Handle*' name='previewResult' type='^^*'/>
<arg const='true' declared_type='FSSpec*' name='sourceFile' type='^{FSSpec=si[64C]}'/>
<arg declared_type='ICMProgressProcRecordPtr' name='progress' type='^{ICMProgressProcRecord=^?l}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='PreviewMakePreviewReference'>
<arg declared_type='pnotComponent' name='p' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType*' name='previewType' type='^I'/>
<arg declared_type='short*' name='resID' type='^s'/>
<arg const='true' declared_type='FSSpec*' name='sourceFile' type='^{FSSpec=si[64C]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='PreviewShowData'>
<arg declared_type='pnotComponent' name='p' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='dataType' type='L'/>
<arg declared_type='Handle' name='data' type='^*'/>
<arg const='true' declared_type='Rect*' name='inHere' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='PtInDSequenceData'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='Size' name='dataSize' type='l'/>
<arg declared_type='Point' name='where' type='{Point=ss}'/>
<arg declared_type='Boolean*' name='hit' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='PtInMovie'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Point' name='pt' type='{Point=ss}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='PtInTrack'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='Point' name='pt' type='{Point=ss}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='PutMovieForDataRefIntoHandle'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='Handle' name='publicMovie' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='PutMovieIntoDataFork'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='short' name='fRefNum' type='s'/>
<arg declared_type='long' name='offset' type='l'/>
<arg declared_type='long' name='maxSize' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='PutMovieIntoDataFork64'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='long' name='fRefNum' type='l'/>
<arg const='true' declared_type='wide*' name='offset' type='^{wide=Ii}'/>
<arg declared_type='unsigned long' name='maxSize' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='PutMovieIntoHandle'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Handle' name='publicMovie' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='PutMovieIntoStorage'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='wide*' name='offset' type='^{wide=Ii}'/>
<arg declared_type='unsigned long' name='maxSize' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='PutMovieIntoTypedHandle'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Track' name='targetTrack' type='^^{TrackType}'/>
<arg declared_type='OSType' name='handleType' type='L'/>
<arg declared_type='Handle' name='publicMovie' type='^*'/>
<arg declared_type='TimeValue' name='start' type='l'/>
<arg declared_type='TimeValue' name='dur' type='l'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='ComponentInstance' name='userComp' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='PutMovieOnScrap'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='long' name='movieScrapFlags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='PutUserDataIntoHandle'>
<arg declared_type='UserData' name='theUserData' type='^^{UserDataRecord}'/>
<arg declared_type='Handle' name='h' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTAddComponentPropertyListener'>
<arg declared_type='ComponentInstance' name='inComponent' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='QTComponentPropertyListenerUPP' function_pointer='true' name='inDispatchProc' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' type='L'/>
<arg declared_type='ComponentPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='inUserData' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTAddMovieError'>
<arg declared_type='Movie' name='movieH' type='^^{MovieType}'/>
<arg declared_type='Component' name='c' type='^{ComponentRecord=[1l]}'/>
<arg declared_type='long' name='errorCode' type='l'/>
<arg declared_type='QTErrorReplacementPtr' name='stringReplacements' type='^{QTErrorReplacementRecord=l[1*]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTAddMoviePropertyListener'>
<arg declared_type='Movie' name='inMovie' type='^^{MovieType}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='QTMoviePropertyListenerUPP' function_pointer='true' name='inListenerProc' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='QTPropertyClass' type='L'/>
<arg declared_type='QTPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='inUserData' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTAddTrackPropertyListener'>
<arg declared_type='Track' name='inTrack' type='^^{TrackType}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='QTTrackPropertyListenerUPP' function_pointer='true' name='inListenerProc' type='^?'>
<arg declared_type='Track' type='^^{TrackType}'/>
<arg declared_type='QTPropertyClass' type='L'/>
<arg declared_type='QTPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='inUserData' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTAudioContextCreateForAudioDevice'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='CFStringRef' name='audioDeviceUID' type='^{__CFString=}'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<arg declared_type='QTAudioContextRef*' name='newAudioContextOut' type='^^{QTAudioContextRefType}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTAudioContextRegisterInsert'>
<arg declared_type='QTAudioContextRef' name='inAudioContext' type='^{QTAudioContextRefType=}'/>
<arg declared_type='UInt32' name='inRegistryInfoSize' type='L'/>
<arg declared_type='QTAudioContextInsertRegistryInfoRef' name='inRegistryInfo' type='^{QTAudioContextInsertRegistryInfo=^vI^{AudioChannelLayout}I^{AudioChannelLayout}^?^?^?}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTAudioContextRelease'>
<arg declared_type='QTAudioContextRef' name='audioContext' type='^{QTAudioContextRefType=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='QTAudioContextRetain'>
<arg declared_type='QTAudioContextRef' name='audioContext' type='^{QTAudioContextRefType=}'/>
<retval declared_type='QTAudioContextRef' type='^{QTAudioContextRefType=}'/>
</function>
<function name='QTBandwidthRelease'>
<arg declared_type='QTBandwidthReference' name='bwRef' type='^^{QTBandwidthUsageRecord}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTBandwidthRequest'>
<arg declared_type='long' name='priority' type='l'/>
<arg declared_type='QTBandwidthNotificationUPP' function_pointer='true' name='callback' type='^?'>
<arg declared_type='long' type='l'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg const='true' declared_type='void*' name='refcon' type='^v'/>
<arg declared_type='QTBandwidthReference*' name='bwRef' type='^^^{QTBandwidthUsageRecord}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTBandwidthRequestForTimeBase'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<arg declared_type='long' name='priority' type='l'/>
<arg declared_type='QTBandwidthNotificationUPP' function_pointer='true' name='callback' type='^?'>
<arg declared_type='long' type='l'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg const='true' declared_type='void*' name='refcon' type='^v'/>
<arg declared_type='QTBandwidthReference*' name='bwRef' type='^^^{QTBandwidthUsageRecord}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTComponentPropertyListenerCollectionAddListener'>
<arg declared_type='QTComponentPropertyListenersRef' name='inCollection' type='@'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='QTComponentPropertyListenerUPP' function_pointer='true' name='inListenerProc' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' type='L'/>
<arg declared_type='ComponentPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg const='true' declared_type='void*' name='inListenerProcRefCon' type='^v'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTComponentPropertyListenerCollectionCreate'>
<arg declared_type='CFAllocatorRef' name='inAllocator' type='^{__CFAllocator=}'/>
<arg const='true' declared_type='QTComponentPropertyListenerCollectionContext*' name='inContext' type='^{QTComponentPropertyListenerCollectionContext=I^?^v}'/>
<arg declared_type='QTComponentPropertyListenersRef*' name='outCollection' type='^^v'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTComponentPropertyListenerCollectionHasListenersForProperty'>
<arg declared_type='QTComponentPropertyListenersRef' name='inCollection' type='@'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='QTComponentPropertyListenerCollectionIsEmpty'>
<arg declared_type='QTComponentPropertyListenersRef' name='inCollection' type='@'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='QTComponentPropertyListenerCollectionNotifyListeners'>
<arg declared_type='QTComponentPropertyListenersRef' name='inCollection' type='@'/>
<arg declared_type='ComponentInstance' name='inNotifier' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg const='true' declared_type='void*' name='inFilterProcRefCon' type='^v'/>
<arg declared_type='UInt32' name='inFlags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTComponentPropertyListenerCollectionRemoveListener'>
<arg declared_type='QTComponentPropertyListenersRef' name='inCollection' type='@'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='QTComponentPropertyListenerUPP' function_pointer='true' name='inListenerProc' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' type='L'/>
<arg declared_type='ComponentPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg const='true' declared_type='void*' name='inListenerProcRefCon' type='^v'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTCopyAtom'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='atom' type='l'/>
<arg declared_type='QTAtomContainer*' name='targetContainer' type='^^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTCopyAtomDataToHandle'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='atom' type='l'/>
<arg declared_type='Handle' name='targetHandle' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTCopyAtomDataToPtr'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='atom' type='l'/>
<arg declared_type='Boolean' name='sizeOrLessOK' type='B'/>
<arg declared_type='long' name='size' type='l'/>
<arg declared_type='void*' name='targetPtr' type='^v'/>
<arg declared_type='long*' name='actualSize' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTCopyMediaMetaData'>
<arg declared_type='Media' name='inMedia' type='^^{MediaType}'/>
<arg declared_type='QTMetaDataRef*' name='outMetaData' type='^^{OpaqueQTMetaDataRef}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTCopyMovieMetaData'>
<arg declared_type='Movie' name='inMovie' type='^^{MovieType}'/>
<arg declared_type='QTMetaDataRef*' name='outMetaData' type='^^{OpaqueQTMetaDataRef}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTCopyTrackMetaData'>
<arg declared_type='Track' name='inTrack' type='^^{TrackType}'/>
<arg declared_type='QTMetaDataRef*' name='outMetaData' type='^^{OpaqueQTMetaDataRef}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTCountChildrenOfType'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='parentAtom' type='l'/>
<arg declared_type='QTAtomType' name='childType' type='l'/>
<retval declared_type='short' type='s'/>
</function>
<function name='QTCreateStandardParameterDialog'>
<arg declared_type='QTAtomContainer' name='effectList' type='^*'/>
<arg declared_type='QTAtomContainer' name='parameters' type='^*'/>
<arg declared_type='QTParameterDialogOptions' name='dialogOptions' type='l'/>
<arg declared_type='QTParameterDialog*' name='createdDialog' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTCreateUUID'>
<arg declared_type='QTUUID*' name='outUUID' type='^{QTUUID=ISS[8C]}'/>
<arg declared_type='long' name='creationFlags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTDismissStandardParameterDialog'>
<arg declared_type='QTParameterDialog' name='createdDialog' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTDisposeAtomContainer'>
<arg declared_type='QTAtomContainer' name='atomData' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTDisposeTween'>
<arg declared_type='QTTweener' name='tween' type='^{QTTweenerRecord=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTDoTween'>
<arg declared_type='QTTweener' name='tween' type='^{QTTweenerRecord=}'/>
<arg declared_type='TimeValue' name='atTime' type='l'/>
<arg declared_type='Handle' name='result' type='^*'/>
<arg declared_type='long*' name='resultSize' type='^l'/>
<arg declared_type='TweenerDataUPP' function_pointer='true' name='tweenDataProc' type='^?'>
<arg declared_type='TweenRecord*' type='^{TweenRecord=l^*iii^?^v^v}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='ICMCompletionProcRecordPtr' type='^{ICMCompletionProcRecord=^?l}'/>
<arg declared_type='UniversalProcPtr' function_pointer='true' type='^?'>
<retval declared_type='long' type='l'/>
</arg>
<arg declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<arg declared_type='void*' name='tweenDataRefCon' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTDoTweenPtr'>
<arg declared_type='QTTweener' name='tween' type='^{QTTweenerRecord=}'/>
<arg declared_type='TimeValue' name='atTime' type='l'/>
<arg declared_type='Ptr' name='result' type='*'/>
<arg declared_type='long' name='resultSize' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTEqualUUIDs'>
<arg const='true' declared_type='QTUUID*' name='uuid1' type='^{QTUUID=ISS[8C]}'/>
<arg const='true' declared_type='QTUUID*' name='uuid2' type='^{QTUUID=ISS[8C]}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='QTFindChildByID'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='parentAtom' type='l'/>
<arg declared_type='QTAtomType' name='atomType' type='l'/>
<arg declared_type='QTAtomID' name='id' type='l'/>
<arg declared_type='short*' name='index' type='^s'/>
<retval declared_type='QTAtom' type='l'/>
</function>
<function name='QTFindChildByIndex'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='parentAtom' type='l'/>
<arg declared_type='QTAtomType' name='atomType' type='l'/>
<arg declared_type='short' name='index' type='s'/>
<arg declared_type='QTAtomID*' name='id' type='^i'/>
<retval declared_type='QTAtom' type='l'/>
</function>
<function name='QTGetAccessKeys'>
<arg declared_type='unsigned char*' name='accessKeyType' type='*'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='QTAtomContainer*' name='keys' type='^^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetAtomDataPtr'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='atom' type='l'/>
<arg declared_type='long*' name='dataSize' type='^l'/>
<arg declared_type='Ptr*' name='atomData' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetAtomParent'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='childAtom' type='l'/>
<retval declared_type='QTAtom' type='l'/>
</function>
<function name='QTGetAtomTypeAndID'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='atom' type='l'/>
<arg declared_type='QTAtomType*' name='atomType' type='^i'/>
<arg declared_type='QTAtomID*' name='id' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetComponentProperty'>
<arg declared_type='ComponentInstance' name='inComponent' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ComponentValuePtr' name='outPropValueAddress' type='^v'/>
<arg declared_type='ByteCount*' name='outPropValueSizeUsed' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTGetComponentPropertyInfo'>
<arg declared_type='ComponentInstance' name='inComponent' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ComponentValueType*' name='outPropType' type='^I'/>
<arg declared_type='ByteCount*' name='outPropValueSize' type='^I'/>
<arg declared_type='UInt32*' name='outPropertyFlags' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTGetConnectionSpeedFromPrefs'>
<arg declared_type='long*' name='pConnectionSpeed' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetDataHandlerDirectoryDataReference'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<arg declared_type='Handle*' name='outDataRef' type='^^*'/>
<arg declared_type='OSType*' name='outDataRefType' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetDataHandlerFullPathCFString'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTPathStyle' name='style' type='L'/>
<arg declared_type='CFStringRef*' name='outPath' type='^^{__CFString}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetDataHandlerTargetNameCFString'>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CFStringRef*' name='fileName' type='^^{__CFString}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetDataRefMaxFileOffset'>
<arg declared_type='Movie' name='movieH' type='^^{MovieType}'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='long*' name='offset' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetDataReferenceDirectoryDataReference'>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<arg declared_type='Handle*' name='outDataRef' type='^^*'/>
<arg declared_type='OSType*' name='outDataRefType' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetDataReferenceFullPathCFString'>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='QTPathStyle' name='style' type='L'/>
<arg declared_type='CFStringRef*' name='outPath' type='^^{__CFString}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetDataReferenceTargetNameCFString'>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='CFStringRef*' name='name' type='^^{__CFString}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetEffectSpeed'>
<arg declared_type='QTAtomContainer' name='parameters' type='^*'/>
<arg declared_type='Fixed*' name='pFPS' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetEffectsList'>
<arg declared_type='QTAtomContainer*' name='returnedList' type='^^*'/>
<arg declared_type='long' name='minSources' type='l'/>
<arg declared_type='long' name='maxSources' type='l'/>
<arg declared_type='QTEffectListOptions' name='getOptions' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetEffectsListExtended'>
<arg declared_type='QTAtomContainer*' name='returnedList' type='^^*'/>
<arg declared_type='long' name='minSources' type='l'/>
<arg declared_type='long' name='maxSources' type='l'/>
<arg declared_type='QTEffectListOptions' name='getOptions' type='l'/>
<arg declared_type='OSType' name='majorClass' type='L'/>
<arg declared_type='OSType' name='minorClass' type='L'/>
<arg declared_type='QTEffectListFilterUPP' function_pointer='true' name='filterProc' type='^?'>
<arg declared_type='Component' type='^{ComponentRecord=[1l]}'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='void*' name='filterRefCon' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetFileNameExtension'>
<arg declared_type='ConstStrFileNameParam' name='fileName' type='*'/>
<arg declared_type='OSType' name='fileType' type='L'/>
<arg declared_type='OSType*' name='extension' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetMIMETypeInfo'>
<arg const='true' declared_type='char*' name='mimeStringStart' type='*'/>
<arg declared_type='short' name='mimeStringLength' type='s'/>
<arg declared_type='OSType' name='infoSelector' type='L'/>
<arg declared_type='void*' name='infoDataPtr' type='^v'/>
<arg declared_type='long*' name='infoDataSize' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetMovieProperty'>
<arg declared_type='Movie' name='inMovie' type='^^{MovieType}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='QTPropertyValuePtr' name='outPropValueAddress' type='^v'/>
<arg declared_type='ByteCount*' name='outPropValueSizeUsed' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetMoviePropertyInfo'>
<arg declared_type='Movie' name='inMovie' type='^^{MovieType}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='QTPropertyValueType*' name='outPropType' type='^I'/>
<arg declared_type='ByteCount*' name='outPropValueSize' type='^I'/>
<arg declared_type='UInt32*' name='outPropertyFlags' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetMovieRestrictions'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='QTRestrictionSet*' name='outRestrictionSet' type='^^^{QTRestrictionSetRecord}'/>
<arg declared_type='UInt32*' name='outSeed' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetNextChildType'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='parentAtom' type='l'/>
<arg declared_type='QTAtomType' name='currentChildType' type='l'/>
<retval declared_type='QTAtomType' type='l'/>
</function>
<function name='QTGetPixMapHandleGammaLevel'>
<arg declared_type='PixMapHandle' name='pm' type='^^{PixMap}'/>
<retval declared_type='Fixed' type='l'/>
</function>
<function name='QTGetPixMapHandleRequestedGammaLevel'>
<arg declared_type='PixMapHandle' name='pm' type='^^{PixMap}'/>
<retval declared_type='Fixed' type='l'/>
</function>
<function name='QTGetPixMapHandleRowBytes'>
<arg declared_type='PixMapHandle' name='pm' type='^^{PixMap}'/>
<retval declared_type='long' type='l'/>
</function>
<function name='QTGetPixMapPtrGammaLevel'>
<arg declared_type='PixMapPtr' name='pm' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<retval declared_type='Fixed' type='l'/>
</function>
<function name='QTGetPixMapPtrRequestedGammaLevel'>
<arg declared_type='PixMapPtr' name='pm' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<retval declared_type='Fixed' type='l'/>
</function>
<function name='QTGetPixMapPtrRowBytes'>
<arg declared_type='PixMapPtr' name='pm' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<retval declared_type='long' type='l'/>
</function>
<function name='QTGetPixelFormatDepthForImageDescription'>
<arg declared_type='OSType' name='PixelFormat' type='L'/>
<retval declared_type='short' type='s'/>
</function>
<function name='QTGetPixelSize'>
<arg declared_type='OSType' name='PixelFormat' type='L'/>
<retval declared_type='short' type='s'/>
</function>
<function name='QTGetSupportedRestrictions'>
<arg declared_type='OSType' name='inRestrictionClass' type='L'/>
<arg declared_type='UInt32*' name='outRestrictionIDs' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetTimeUntilNextTask'>
<arg declared_type='long*' name='duration' type='^l'/>
<arg declared_type='long' name='scale' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetTrackProperty'>
<arg declared_type='Track' name='inTrack' type='^^{TrackType}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='QTPropertyValuePtr' name='outPropValueAddress' type='^v'/>
<arg declared_type='ByteCount*' name='outPropValueSizeUsed' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetTrackPropertyInfo'>
<arg declared_type='Track' name='inTrack' type='^^{TrackType}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='QTPropertyValueType*' name='outPropType' type='^I'/>
<arg declared_type='ByteCount*' name='outPropValueSize' type='^I'/>
<arg declared_type='UInt32*' name='outPropertyFlags' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTGetWallClockTimeBase'>
<arg declared_type='TimeBase*' name='wallClockTimeBase' type='^^{TimeBaseRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTIdleManagerClose'>
<arg declared_type='IdleManager' name='im' type='^{OpaqueIdleManager=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTIdleManagerGetNextIdleTime'>
<arg declared_type='IdleManager' name='im' type='^{OpaqueIdleManager=}'/>
<arg declared_type='TimeRecord*' name='nextIdle' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTIdleManagerNeedsAnIdle'>
<arg declared_type='IdleManager' name='im' type='^{OpaqueIdleManager=}'/>
<arg declared_type='Boolean*' name='needsOne' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTIdleManagerOpen'>
<retval declared_type='IdleManager' type='^{OpaqueIdleManager=}'/>
</function>
<function name='QTIdleManagerSetNextIdleTime'>
<arg declared_type='IdleManager' name='im' type='^{OpaqueIdleManager=}'/>
<arg declared_type='TimeRecord*' name='nextIdle' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTIdleManagerSetNextIdleTimeDelta'>
<arg declared_type='IdleManager' name='im' type='^{OpaqueIdleManager=}'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<arg declared_type='TimeScale' name='scale' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTIdleManagerSetNextIdleTimeNever'>
<arg declared_type='IdleManager' name='im' type='^{OpaqueIdleManager=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTIdleManagerSetNextIdleTimeNow'>
<arg declared_type='IdleManager' name='im' type='^{OpaqueIdleManager=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTIdleManagerSetParent'>
<arg declared_type='IdleManager' name='im' type='^{OpaqueIdleManager=}'/>
<arg declared_type='IdleManager' name='parent' type='^{OpaqueIdleManager=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTInsertChild'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='parentAtom' type='l'/>
<arg declared_type='QTAtomType' name='atomType' type='l'/>
<arg declared_type='QTAtomID' name='id' type='l'/>
<arg declared_type='short' name='index' type='s'/>
<arg declared_type='long' name='dataSize' type='l'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='QTAtom*' name='newAtom' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTInsertChildren'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='parentAtom' type='l'/>
<arg declared_type='QTAtomContainer' name='childrenContainer' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTInstallNextTaskNeededSoonerCallback'>
<arg declared_type='QTNextTaskNeededSoonerCallbackUPP' function_pointer='true' name='callbackProc' type='^?'>
<arg declared_type='TimeValue' type='l'/>
<arg declared_type='unsigned long' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='TimeScale' name='scale' type='l'/>
<arg declared_type='unsigned long' name='flags' type='L'/>
<arg declared_type='void*' name='refcon' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTIsStandardParameterDialogEvent'>
<arg declared_type='EventRecord*' name='pEvent' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='QTParameterDialog' name='createdDialog' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTLockContainer'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTMIDIGetMIDIPorts'>
<arg declared_type='QTMIDIComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTMIDIPortListHandle*' name='inputPorts' type='^^^{QTMIDIPortList}'/>
<arg declared_type='QTMIDIPortListHandle*' name='outputPorts' type='^^^{QTMIDIPortList}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTMIDISendMIDI'>
<arg declared_type='QTMIDIComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='portIndex' type='l'/>
<arg declared_type='MusicMIDIPacket*' name='mp' type='^{MusicMIDIPacket=SL[249C]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTMIDIUseSendPort'>
<arg declared_type='QTMIDIComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='portIndex' type='l'/>
<arg declared_type='long' name='inUse' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTMLCreateMutex'>
<retval declared_type='QTMLMutex' type='^{OpaqueQTMLMutex=}'/>
</function>
<function name='QTMLDestroyMutex'>
<arg declared_type='QTMLMutex' name='mu' type='^{OpaqueQTMLMutex=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='QTMLGrabMutex'>
<arg declared_type='QTMLMutex' name='mu' type='^{OpaqueQTMLMutex=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='QTMLReturnMutex'>
<arg declared_type='QTMLMutex' name='mu' type='^{OpaqueQTMLMutex=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='QTMLTryGrabMutex'>
<arg declared_type='QTMLMutex' name='mu' type='^{OpaqueQTMLMutex=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='QTMLYieldCPU'>
<retval declared_type='void' type='v'/>
</function>
<function name='QTMLYieldCPUTime'>
<arg declared_type='long' name='milliSeconds' type='l'/>
<arg declared_type='unsigned long' name='flags' type='L'/>
<retval declared_type='void' type='v'/>
</function>
<function name='QTMetaDataAddItem'>
<arg declared_type='QTMetaDataRef' name='inMetaData' type='^{OpaqueQTMetaDataRef=}'/>
<arg declared_type='QTMetaDataStorageFormat' name='inMetaDataFormat' type='L'/>
<arg declared_type='QTMetaDataKeyFormat' name='inKeyFormat' type='L'/>
<arg const='true' declared_type='UInt8*' name='inKeyPtr' type='*'/>
<arg declared_type='ByteCount' name='inKeySize' type='L'/>
<arg const='true' declared_type='UInt8*' name='inValuePtr' type='*'/>
<arg declared_type='ByteCount' name='inValueSize' type='L'/>
<arg declared_type='UInt32' name='inDataType' type='L'/>
<arg declared_type='QTMetaDataItem*' name='outItem' type='^Q'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTMetaDataCreateFromBuffer'>
<arg const='true' declared_type='UInt8*' name='inBufferPtr' type='*'/>
<arg declared_type='ByteCount' name='inBufferSize' type='L'/>
<arg declared_type='QTMetaDataRef*' name='outMetaData' type='^^{OpaqueQTMetaDataRef}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTMetaDataGetBytes'>
<arg declared_type='QTMetaDataRef' name='inMetaData' type='^{OpaqueQTMetaDataRef=}'/>
<arg declared_type='ByteCount' name='inBufferSize' type='L'/>
<arg declared_type='UInt8*' name='inBufferPtr' type='*'/>
<arg declared_type='ByteCount*' name='outBufferSizeNeeded' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTMetaDataGetItemCountWithKey'>
<arg declared_type='QTMetaDataRef' name='inMetaData' type='^{OpaqueQTMetaDataRef=}'/>
<arg declared_type='QTMetaDataStorageFormat' name='inMetaDataFormat' type='L'/>
<arg declared_type='QTMetaDataKeyFormat' name='inKeyFormat' type='L'/>
<arg const='true' declared_type='UInt8*' name='inKeyPtr' type='*'/>
<arg declared_type='ByteCount' name='inKeySize' type='L'/>
<arg declared_type='ItemCount*' name='outCount' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTMetaDataGetItemProperty'>
<arg declared_type='QTMetaDataRef' name='inMetaData' type='^{OpaqueQTMetaDataRef=}'/>
<arg declared_type='QTMetaDataItem' name='inItem' type='Q'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='QTPropertyValuePtr' name='outPropValueAddress' type='^v'/>
<arg declared_type='ByteCount*' name='outPropValueSizeUsed' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTMetaDataGetItemPropertyInfo'>
<arg declared_type='QTMetaDataRef' name='inMetaData' type='^{OpaqueQTMetaDataRef=}'/>
<arg declared_type='QTMetaDataItem' name='inItem' type='Q'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='QTPropertyValueType*' name='outPropType' type='^I'/>
<arg declared_type='ByteCount*' name='outPropValueSize' type='^I'/>
<arg declared_type='UInt32*' name='outPropFlags' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTMetaDataGetItemValue'>
<arg declared_type='QTMetaDataRef' name='inMetaData' type='^{OpaqueQTMetaDataRef=}'/>
<arg declared_type='QTMetaDataItem' name='inItem' type='Q'/>
<arg declared_type='UInt8*' name='outValuePtr' type='*'/>
<arg declared_type='ByteCount' name='inValueSize' type='L'/>
<arg declared_type='ByteCount*' name='outActualSize' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTMetaDataGetNextItem'>
<arg declared_type='QTMetaDataRef' name='inMetaData' type='^{OpaqueQTMetaDataRef=}'/>
<arg declared_type='QTMetaDataStorageFormat' name='inMetaDataFormat' type='L'/>
<arg declared_type='QTMetaDataItem' name='inCurrentItem' type='Q'/>
<arg declared_type='QTMetaDataKeyFormat' name='inKeyFormat' type='L'/>
<arg const='true' declared_type='UInt8*' name='inKeyPtr' type='*'/>
<arg declared_type='ByteCount' name='inKeySize' type='L'/>
<arg declared_type='QTMetaDataItem*' name='outNextItem' type='^Q'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTMetaDataGetProperty'>
<arg declared_type='QTMetaDataRef' name='inMetaData' type='^{OpaqueQTMetaDataRef=}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='QTPropertyValuePtr' name='outPropValueAddress' type='^v'/>
<arg declared_type='ByteCount*' name='outPropValueSizeUsed' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTMetaDataGetPropertyInfo'>
<arg declared_type='QTMetaDataRef' name='inMetaData' type='^{OpaqueQTMetaDataRef=}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='QTPropertyValueType*' name='outPropType' type='^I'/>
<arg declared_type='ByteCount*' name='outPropValueSize' type='^I'/>
<arg declared_type='UInt32*' name='outPropFlags' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTMetaDataRelease'>
<arg declared_type='QTMetaDataRef' name='inMetaData' type='^{OpaqueQTMetaDataRef=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='QTMetaDataRemoveItem'>
<arg declared_type='QTMetaDataRef' name='inMetaData' type='^{OpaqueQTMetaDataRef=}'/>
<arg declared_type='QTMetaDataItem' name='inItem' type='Q'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTMetaDataRemoveItemsWithKey'>
<arg declared_type='QTMetaDataRef' name='inMetaData' type='^{OpaqueQTMetaDataRef=}'/>
<arg declared_type='QTMetaDataStorageFormat' name='inMetaDataFormat' type='L'/>
<arg declared_type='QTMetaDataKeyFormat' name='inKeyFormat' type='L'/>
<arg const='true' declared_type='UInt8*' name='inKeyPtr' type='*'/>
<arg declared_type='ByteCount' name='inKeySize' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTMetaDataRetain'>
<arg declared_type='QTMetaDataRef' name='inMetaData' type='^{OpaqueQTMetaDataRef=}'/>
<retval declared_type='QTMetaDataRef' type='^{OpaqueQTMetaDataRef=}'/>
</function>
<function name='QTMetaDataSetItem'>
<arg declared_type='QTMetaDataRef' name='inMetaData' type='^{OpaqueQTMetaDataRef=}'/>
<arg declared_type='QTMetaDataItem' name='inItem' type='Q'/>
<arg declared_type='UInt8*' name='inValuePtr' type='*'/>
<arg declared_type='ByteCount' name='inValueSize' type='L'/>
<arg declared_type='UInt32' name='inDataType' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTMetaDataSetItemProperty'>
<arg declared_type='QTMetaDataRef' name='inMetaData' type='^{OpaqueQTMetaDataRef=}'/>
<arg declared_type='QTMetaDataItem' name='inItem' type='Q'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ConstQTPropertyValuePtr' name='inPropValueAddress' type='^v'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTMetaDataSetProperty'>
<arg declared_type='QTMetaDataRef' name='inMetaData' type='^{OpaqueQTMetaDataRef=}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ConstQTPropertyValuePtr' name='inPropValueAddress' type='^v'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTMovieNeedsTimeTable'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Boolean*' name='needsTimeTable' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTNewAlias'>
<arg const='true' declared_type='FSSpec*' name='fss' type='^{FSSpec=si[64C]}'/>
<arg declared_type='AliasHandle*' name='alias' type='^^^{AliasRecord}'/>
<arg declared_type='Boolean' name='minimal' type='B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTNewAtomContainer'>
<arg declared_type='QTAtomContainer*' name='atomData' type='^^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTNewDataReferenceFromCFURL'>
<arg declared_type='CFURLRef' name='url' type='^{__CFURL=}'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<arg declared_type='Handle*' name='outDataRef' type='^^*'/>
<arg declared_type='OSType*' name='outDataRefType' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTNewDataReferenceFromFSRef'>
<arg const='true' declared_type='FSRef*' name='fileRef' type='^{FSRef=[80C]}'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<arg declared_type='Handle*' name='outDataRef' type='^^*'/>
<arg declared_type='OSType*' name='outDataRefType' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTNewDataReferenceFromFSRefCFString'>
<arg const='true' declared_type='FSRef*' name='directoryRef' type='^{FSRef=[80C]}'/>
<arg declared_type='CFStringRef' name='fileName' type='^{__CFString=}'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<arg declared_type='Handle*' name='outDataRef' type='^^*'/>
<arg declared_type='OSType*' name='outDataRefType' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTNewDataReferenceFromFSSpec'>
<arg const='true' declared_type='FSSpec*' name='fsspec' type='^{FSSpec=si[64C]}'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<arg declared_type='Handle*' name='outDataRef' type='^^*'/>
<arg declared_type='OSType*' name='outDataRefType' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTNewDataReferenceFromFullPathCFString'>
<arg declared_type='CFStringRef' name='filePath' type='^{__CFString=}'/>
<arg declared_type='QTPathStyle' name='pathStyle' type='L'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<arg declared_type='Handle*' name='outDataRef' type='^^*'/>
<arg declared_type='OSType*' name='outDataRefType' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTNewDataReferenceFromURLCFString'>
<arg declared_type='CFStringRef' name='urlString' type='^{__CFString=}'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<arg declared_type='Handle*' name='outDataRef' type='^^*'/>
<arg declared_type='OSType*' name='outDataRefType' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTNewDataReferenceWithDirectoryCFString'>
<arg declared_type='Handle' name='inDataRef' type='^*'/>
<arg declared_type='OSType' name='inDataRefType' type='L'/>
<arg declared_type='CFStringRef' name='targetName' type='^{__CFString=}'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<arg declared_type='Handle*' name='outDataRef' type='^^*'/>
<arg declared_type='OSType*' name='outDataRefType' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTNewGWorld'>
<arg declared_type='GWorldPtr*' name='offscreenGWorld' type='^^{OpaqueGrafPtr}'/>
<arg declared_type='OSType' name='PixelFormat' type='L'/>
<arg const='true' declared_type='Rect*' name='boundsRect' type='^{Rect=ssss}'/>
<arg declared_type='CTabHandle' name='cTable' type='^^{ColorTable}'/>
<arg declared_type='GDHandle' name='aGDevice' type='^^{GDevice}'/>
<arg declared_type='GWorldFlags' name='flags' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTNewGWorldFromPtr'>
<arg declared_type='GWorldPtr*' name='gw' type='^^{OpaqueGrafPtr}'/>
<arg declared_type='OSType' name='pixelFormat' type='L'/>
<arg const='true' declared_type='Rect*' name='boundsRect' type='^{Rect=ssss}'/>
<arg declared_type='CTabHandle' name='cTable' type='^^{ColorTable}'/>
<arg declared_type='GDHandle' name='aGDevice' type='^^{GDevice}'/>
<arg declared_type='GWorldFlags' name='flags' type='L'/>
<arg declared_type='void*' name='baseAddr' type='^v'/>
<arg declared_type='long' name='rowBytes' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTNewTween'>
<arg declared_type='QTTweener*' name='tween' type='^^{QTTweenerRecord}'/>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='tweenAtom' type='l'/>
<arg declared_type='TimeValue' name='maxTime' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTNextChildAnyType'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='parentAtom' type='l'/>
<arg declared_type='QTAtom' name='currentChild' type='l'/>
<arg declared_type='QTAtom*' name='nextChild' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTOpenGLTextureContextCreate'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='CGLContextObj' name='cglContext' type='^{_CGLContextObject=}'/>
<arg declared_type='CGLPixelFormatObj' name='cglPixelFormat' type='^{_CGLPixelFormatObject=}'/>
<arg declared_type='CFDictionaryRef' name='attributes' type='^{__CFDictionary=}'/>
<arg declared_type='QTVisualContextRef*' name='newTextureContext' type='^^{OpaqueQTVisualContext}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTParseTextHREF'>
<arg declared_type='char*' name='href' type='*'/>
<arg declared_type='SInt32' name='hrefLen' type='l'/>
<arg declared_type='QTAtomContainer' name='inContainer' type='^*'/>
<arg declared_type='QTAtomContainer*' name='outContainer' type='^^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTPhotoDefineHuffmanTable'>
<arg declared_type='ComponentInstance' name='codec' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='componentNumber' type='s'/>
<arg declared_type='Boolean' name='isDC' type='B'/>
<arg declared_type='unsigned char*' name='lengthCounts' type='*'/>
<arg declared_type='unsigned char*' name='values' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTPhotoDefineQuantizationTable'>
<arg declared_type='ComponentInstance' name='codec' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='componentNumber' type='s'/>
<arg declared_type='unsigned char*' name='table' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTPhotoSetRestartInterval'>
<arg declared_type='ComponentInstance' name='codec' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned short' name='restartInterval' type='S'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTPhotoSetSampling'>
<arg declared_type='ComponentInstance' name='codec' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='yH' type='s'/>
<arg declared_type='short' name='yV' type='s'/>
<arg declared_type='short' name='cbH' type='s'/>
<arg declared_type='short' name='cbV' type='s'/>
<arg declared_type='short' name='crH' type='s'/>
<arg declared_type='short' name='crV' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTPixelBufferContextCreate'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='CFDictionaryRef' name='attributes' type='^{__CFDictionary=}'/>
<arg declared_type='QTVisualContextRef*' name='newPixelBufferContext' type='^^{OpaqueQTVisualContext}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTRegisterAccessKey'>
<arg declared_type='unsigned char*' name='accessKeyType' type='*'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='Handle' name='accessKey' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTRemoveAtom'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='atom' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTRemoveChildren'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='atom' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTRemoveComponentPropertyListener'>
<arg declared_type='ComponentInstance' name='inComponent' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='QTComponentPropertyListenerUPP' function_pointer='true' name='inDispatchProc' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' type='L'/>
<arg declared_type='ComponentPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='inUserData' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTRemoveMoviePropertyListener'>
<arg declared_type='Movie' name='inMovie' type='^^{MovieType}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='QTMoviePropertyListenerUPP' function_pointer='true' name='inListenerProc' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='QTPropertyClass' type='L'/>
<arg declared_type='QTPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='inUserData' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTRemoveTrackPropertyListener'>
<arg declared_type='Track' name='inTrack' type='^^{TrackType}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='QTTrackPropertyListenerUPP' function_pointer='true' name='inListenerProc' type='^?'>
<arg declared_type='Track' type='^^{TrackType}'/>
<arg declared_type='QTPropertyClass' type='L'/>
<arg declared_type='QTPropertyID' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='inUserData' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTReplaceAtom'>
<arg declared_type='QTAtomContainer' name='targetContainer' type='^*'/>
<arg declared_type='QTAtom' name='targetAtom' type='l'/>
<arg declared_type='QTAtomContainer' name='replacementContainer' type='^*'/>
<arg declared_type='QTAtom' name='replacementAtom' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTRestrictionsGetIndClass'>
<arg declared_type='QTRestrictionSet' name='inRestrictionSet' type='^^{QTRestrictionSetRecord}'/>
<arg declared_type='long' name='inIndex' type='l'/>
<arg declared_type='OSType*' name='outClass' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTRestrictionsGetInfo'>
<arg declared_type='QTRestrictionSet' name='inRestrictionSet' type='^^{QTRestrictionSetRecord}'/>
<arg declared_type='long*' name='outRestrictionClassCount' type='^l'/>
<arg declared_type='long*' name='outSeed' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTRestrictionsGetItem'>
<arg declared_type='QTRestrictionSet' name='inRestrictionSet' type='^^{QTRestrictionSetRecord}'/>
<arg declared_type='OSType' name='inRestrictionClass' type='L'/>
<arg declared_type='UInt32*' name='outRestrictions' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSAllocBuffer'>
<arg declared_type='SInt32' name='inSize' type='l'/>
<retval declared_type='QTSStreamBuffer*' type='^{QTSStreamBuffer=^{QTSStreamBuffer}^{QTSStreamBuffer}^{QTSStreamBuffer}**i[4L]illl[8L]}'/>
</function>
<function name='QTSAllocMemPtr'>
<arg declared_type='UInt32' name='inByteCount' type='L'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='QTSMemPtr' type='^{OpaqueQTSMemPtr=}'/>
</function>
<function name='QTSCopyMessage'>
<arg declared_type='QTSStreamBuffer*' name='inMessage' type='^{QTSStreamBuffer=^{QTSStreamBuffer}^{QTSStreamBuffer}^{QTSStreamBuffer}**i[4L]illl[8L]}'/>
<retval declared_type='QTSStreamBuffer*' type='^{QTSStreamBuffer=^{QTSStreamBuffer}^{QTSStreamBuffer}^{QTSStreamBuffer}**i[4L]illl[8L]}'/>
</function>
<function name='QTSDisposePresentation'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSDisposeStatHelper'>
<arg declared_type='QTSStatHelper' name='inStatHelper' type='^{QTSStatHelperRecord=[1l]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSDisposeStream'>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSDupMessage'>
<arg declared_type='QTSStreamBuffer*' name='inMessage' type='^{QTSStreamBuffer=^{QTSStreamBuffer}^{QTSStreamBuffer}^{QTSStreamBuffer}**i[4L]illl[8L]}'/>
<retval declared_type='QTSStreamBuffer*' type='^{QTSStreamBuffer=^{QTSStreamBuffer}^{QTSStreamBuffer}^{QTSStreamBuffer}**i[4L]illl[8L]}'/>
</function>
<function name='QTSDuplicateMessage'>
<arg declared_type='QTSStreamBuffer*' name='inMessage' type='^{QTSStreamBuffer=^{QTSStreamBuffer}^{QTSStreamBuffer}^{QTSStreamBuffer}**i[4L]illl[8L]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='QTSStreamBuffer**' name='outDuplicatedMessage' type='^^{QTSStreamBuffer}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSFindMediaPacketizer'>
<arg declared_type='MediaPacketizerRequirementsPtr' name='inPacketizerinfo' type='^{MediaPacketizerRequirements=IIICCCC}'/>
<arg declared_type='SampleDescriptionHandle' name='inSampleDescription' type='^^{SampleDescription}'/>
<arg declared_type='RTPPayloadSortRequestPtr' name='inSortInfo' type='^{RTPPayloadSortRequest=l[1{RTPPayloadCharacteristic=Il}]}'/>
<arg declared_type='QTAtomContainer*' name='outPacketizerList' type='^^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSFindMediaPacketizerForPayloadID'>
<arg declared_type='long' name='payloadID' type='l'/>
<arg declared_type='RTPPayloadSortRequestPtr' name='inSortInfo' type='^{RTPPayloadSortRequest=l[1{RTPPayloadCharacteristic=Il}]}'/>
<arg declared_type='QTAtomContainer*' name='outPacketizerList' type='^^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSFindMediaPacketizerForPayloadName'>
<arg const='true' declared_type='char*' name='payloadName' type='*'/>
<arg declared_type='RTPPayloadSortRequestPtr' name='inSortInfo' type='^{RTPPayloadSortRequest=l[1{RTPPayloadCharacteristic=Il}]}'/>
<arg declared_type='QTAtomContainer*' name='outPacketizerList' type='^^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSFindMediaPacketizerForTrack'>
<arg declared_type='Track' name='inTrack' type='^^{TrackType}'/>
<arg declared_type='long' name='inSampleDescriptionIndex' type='l'/>
<arg declared_type='RTPPayloadSortRequestPtr' name='inSortInfo' type='^{RTPPayloadSortRequest=l[1{RTPPayloadCharacteristic=Il}]}'/>
<arg declared_type='QTAtomContainer*' name='outPacketizerList' type='^^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSFindReassemblerForPayloadID'>
<arg declared_type='UInt8' name='inPayloadID' type='C'/>
<arg declared_type='RTPPayloadSortRequest*' name='inSortInfo' type='^{RTPPayloadSortRequest=l[1{RTPPayloadCharacteristic=Il}]}'/>
<arg declared_type='QTAtomContainer*' name='outReassemblerList' type='^^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSFindReassemblerForPayloadName'>
<arg const='true' declared_type='char*' name='inPayloadName' type='*'/>
<arg declared_type='RTPPayloadSortRequest*' name='inSortInfo' type='^{RTPPayloadSortRequest=l[1{RTPPayloadCharacteristic=Il}]}'/>
<arg declared_type='QTAtomContainer*' name='outReassemblerList' type='^^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSFlattenMessage'>
<arg declared_type='QTSStreamBuffer*' name='inMessage' type='^{QTSStreamBuffer=^{QTSStreamBuffer}^{QTSStreamBuffer}^{QTSStreamBuffer}**i[4L]illl[8L]}'/>
<retval declared_type='QTSStreamBuffer*' type='^{QTSStreamBuffer=^{QTSStreamBuffer}^{QTSStreamBuffer}^{QTSStreamBuffer}**i[4L]illl[8L]}'/>
</function>
<function name='QTSFreeMessage'>
<arg declared_type='QTSStreamBuffer*' name='inMessage' type='^{QTSStreamBuffer=^{QTSStreamBuffer}^{QTSStreamBuffer}^{QTSStreamBuffer}**i[4L]illl[8L]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='QTSGetErrorString'>
<arg declared_type='SInt32' name='inErrorCode' type='l'/>
<arg declared_type='UInt32' name='inMaxErrorStringLength' type='L'/>
<arg declared_type='char*' name='outErrorString' type='*'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='QTSGetNetworkAppName'>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='char**' name='outCStringPtr' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSGetOrMakeStatAtomForStream'>
<arg declared_type='QTAtomContainer' name='inContainer' type='^*'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='QTAtom*' name='outParentAtom' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSGetStreamPresentation'>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<retval declared_type='QTSPresentation' type='^{QTSPresentationRecord=[1l]}'/>
</function>
<function name='QTSInitializeMediaParams'>
<arg declared_type='QTSMediaParams*' name='inMediaParams' type='^{QTSMediaParams={QTSVideoParams=ii{MatrixRecord=[3[3l]]}^{OpaqueGrafPtr}^^{GDevice}^{OpaqueRgnHandle}s{RGBColor=SSS}}{QTSAudioParams=sssss^vB}}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSInsertStatistic'>
<arg declared_type='QTAtomContainer' name='inContainer' type='^*'/>
<arg declared_type='QTAtom' name='inParentAtom' type='l'/>
<arg declared_type='OSType' name='inStatType' type='L'/>
<arg declared_type='void*' name='inStatData' type='^v'/>
<arg declared_type='UInt32' name='inStatDataLength' type='L'/>
<arg declared_type='OSType' name='inStatDataFormat' type='L'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSInsertStatisticName'>
<arg declared_type='QTAtomContainer' name='inContainer' type='^*'/>
<arg declared_type='QTAtom' name='inParentAtom' type='l'/>
<arg declared_type='OSType' name='inStatType' type='L'/>
<arg const='true' declared_type='char*' name='inStatName' type='*'/>
<arg declared_type='UInt32' name='inStatNameLength' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSInsertStatisticUnits'>
<arg declared_type='QTAtomContainer' name='inContainer' type='^*'/>
<arg declared_type='QTAtom' name='inParentAtom' type='l'/>
<arg declared_type='OSType' name='inStatType' type='L'/>
<arg declared_type='OSType' name='inUnitsType' type='L'/>
<arg const='true' declared_type='char*' name='inUnitsName' type='*'/>
<arg declared_type='UInt32' name='inUnitsNameLength' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSMediaGetIndStreamInfo'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inIndex' type='l'/>
<arg declared_type='OSType' name='inSelector' type='L'/>
<arg declared_type='void*' name='ioParams' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTSMediaGetInfo'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='inSelector' type='L'/>
<arg declared_type='void*' name='ioParams' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTSMediaSetIndStreamInfo'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inIndex' type='l'/>
<arg declared_type='OSType' name='inSelector' type='L'/>
<arg declared_type='void*' name='ioParams' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTSMediaSetInfo'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='inSelector' type='L'/>
<arg declared_type='void*' name='ioParams' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTSMessageLength'>
<arg declared_type='QTSStreamBuffer*' name='inMessage' type='^{QTSStreamBuffer=^{QTSStreamBuffer}^{QTSStreamBuffer}^{QTSStreamBuffer}**i[4L]illl[8L]}'/>
<retval declared_type='UInt32' type='L'/>
</function>
<function name='QTSNewHandle'>
<arg declared_type='UInt32' name='inByteCount' type='L'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='SInt32*' name='outFlags' type='^i'/>
<retval declared_type='Handle' type='^*'/>
</function>
<function name='QTSNewPresentation'>
<arg const='true' declared_type='QTSNewPresentationParams*' name='inParams' type='^{QTSNewPresentationParams=I^vI^^{QTSEditList}ii^{QTSMediaParams}^?^v}'/>
<arg declared_type='QTSPresentation*' name='outPresentation' type='^^{QTSPresentationRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSNewPresentationFromData'>
<arg declared_type='OSType' name='inDataType' type='L'/>
<arg const='true' declared_type='void*' name='inData' type='^v'/>
<arg const='true' declared_type='SInt64*' name='inDataLength' type='^q'/>
<arg const='true' declared_type='QTSPresParams*' name='inPresParams' type='^{QTSPresParams=I^^{QTSEditList}ii^{QTSMediaParams}^?^v}'/>
<arg declared_type='QTSPresentation*' name='outPresentation' type='^^{QTSPresentationRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSNewPresentationFromDataRef'>
<arg declared_type='Handle' name='inDataRef' type='^*'/>
<arg declared_type='OSType' name='inDataRefType' type='L'/>
<arg const='true' declared_type='QTSPresParams*' name='inPresParams' type='^{QTSPresParams=I^^{QTSEditList}ii^{QTSMediaParams}^?^v}'/>
<arg declared_type='QTSPresentation*' name='outPresentation' type='^^{QTSPresentationRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSNewPresentationFromFile'>
<arg const='true' declared_type='FSSpec*' name='inFileSpec' type='^{FSSpec=si[64C]}'/>
<arg const='true' declared_type='QTSPresParams*' name='inPresParams' type='^{QTSPresParams=I^^{QTSEditList}ii^{QTSMediaParams}^?^v}'/>
<arg declared_type='QTSPresentation*' name='outPresentation' type='^^{QTSPresentationRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSNewPtr'>
<arg declared_type='UInt32' name='inByteCount' type='L'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='SInt32*' name='outFlags' type='^i'/>
<retval declared_type='Ptr' type='*'/>
</function>
<function name='QTSNewSourcer'>
<arg declared_type='void*' name='params' type='^v'/>
<arg const='true' declared_type='QTSSourcerInitParams*' name='inInitParams' type='^{QTSSourcerInitParams=iiI^vI}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='ComponentInstance*' name='outSourcer' type='^^{ComponentInstanceRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSNewStatHelper'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='OSType' name='inStatType' type='L'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='QTSStatHelper*' name='outStatHelper' type='^^{QTSStatHelperRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSNewStreamBuffer'>
<arg declared_type='UInt32' name='inDataSize' type='L'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='QTSStreamBuffer**' name='outStreamBuffer' type='^^{QTSStreamBuffer}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPrefsAddConnectionSetting'>
<arg declared_type='OSType' name='protocol' type='L'/>
<arg declared_type='SInt32' name='portID' type='l'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<arg declared_type='UInt32' name='seed' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPrefsAddProxySetting'>
<arg declared_type='OSType' name='proxyType' type='L'/>
<arg declared_type='SInt32' name='portID' type='l'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<arg declared_type='UInt32' name='seed' type='L'/>
<arg declared_type='unsigned char*' name='srvrURL' type='*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPrefsAddProxyUserInfo'>
<arg declared_type='OSType' name='proxyType' type='L'/>
<arg declared_type='SInt32' name='flags' type='l'/>
<arg declared_type='SInt32' name='flagsMask' type='l'/>
<arg declared_type='StringPtr' name='username' type='*'/>
<arg declared_type='StringPtr' name='password' type='*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPrefsFindConnectionByType'>
<arg declared_type='OSType' name='protocol' type='L'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<arg declared_type='UInt32' name='flagsMask' type='L'/>
<arg declared_type='QTSTransportPref**' name='connectionHndl' type='^^{QTSTransportPref}'/>
<arg declared_type='SInt16*' name='count' type='^s'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPrefsFindProxyByType'>
<arg declared_type='OSType' name='proxyType' type='L'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<arg declared_type='UInt32' name='flagsMask' type='L'/>
<arg declared_type='QTSProxyPref**' name='proxyHndl' type='^^{QTSProxyPref}'/>
<arg declared_type='SInt16*' name='count' type='^s'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPrefsFindProxyUserInfoByType'>
<arg declared_type='OSType' name='proxyType' type='L'/>
<arg declared_type='SInt32' name='flags' type='l'/>
<arg declared_type='SInt32' name='flagsMask' type='l'/>
<arg declared_type='StringPtr' name='username' type='*'/>
<arg declared_type='StringPtr' name='password' type='*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPrefsGetActiveConnection'>
<arg declared_type='OSType' name='protocol' type='L'/>
<arg declared_type='QTSTransportPref*' name='connectInfo' type='^{QTSTransportPref=IiII}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPrefsGetInstantOnSettings'>
<arg declared_type='QTSInstantOnPref*' name='outPref' type='^{QTSInstantOnPref=ii}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPrefsGetNoProxyURLs'>
<arg declared_type='QTSNoProxyPref**' name='noProxyHndl' type='^^{QTSNoProxyPref}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPrefsSetInstantOnSettings'>
<arg declared_type='QTSInstantOnPref*' name='inPref' type='^{QTSInstantOnPref=ii}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPrefsSetNoProxyURLs'>
<arg declared_type='char*' name='urls' type='*'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<arg declared_type='UInt32' name='seed' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresAddSourcer'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='ComponentInstance' name='inSourcer' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresExport'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='QTSExportParams*' name='inExportParams' type='^{QTSExportParams=iI^vI^v^vii^?^v^{ComponentRecord}}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetActiveSegment'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='TimeValue64*' name='outStartTime' type='^q'/>
<arg declared_type='TimeValue64*' name='outDuration' type='^q'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetClip'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='RgnHandle*' name='outClip' type='^^{OpaqueRgnHandle}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetDimensions'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='Fixed*' name='outWidth' type='^i'/>
<arg declared_type='Fixed*' name='outHeight' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetEnable'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='Boolean*' name='outEnableMode' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetFlags'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='SInt32*' name='outFlags' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetGWorld'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='CGrafPtr*' name='outGWorld' type='^^{OpaqueGrafPtr}'/>
<arg declared_type='GDHandle*' name='outGDHandle' type='^^^{GDevice}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetGraphicsMode'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='short*' name='outMode' type='^s'/>
<arg declared_type='RGBColor*' name='outOpColor' type='^{RGBColor=SSS}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetIndSourcer'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='UInt32' name='inIndex' type='L'/>
<arg declared_type='ComponentInstance*' name='outSourcer' type='^^{ComponentInstanceRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetIndStream'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='UInt32' name='inIndex' type='L'/>
<retval declared_type='QTSStream' type='^{QTSStreamRecord=[1l]}'/>
</function>
<function name='QTSPresGetInfo'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='OSType' name='inSelector' type='L'/>
<arg declared_type='void*' name='ioParam' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetMatrix'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='MatrixRecord*' name='outMatrix' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetNotificationProc'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSNotificationUPP*' name='outNotificationProc' type='^^?'/>
<arg declared_type='void**' name='outRefCon' type='^^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetNumSourcers'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<retval declared_type='UInt32' type='L'/>
</function>
<function name='QTSPresGetNumStreams'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<retval declared_type='UInt32' type='L'/>
</function>
<function name='QTSPresGetPicture'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='PicHandle*' name='outPicture' type='^^^{Picture}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetPlayHints'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='SInt32*' name='outFlags' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetPreferredRate'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='Fixed*' name='outRate' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetPresenting'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='Boolean*' name='outPresentingMode' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetSettings'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='QTAtomContainer*' name='outSettings' type='^^*'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetSettingsAsText'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='OSType' name='inSettingsType' type='L'/>
<arg declared_type='Handle*' name='outText' type='^^*'/>
<arg declared_type='QTSPanelFilterUPP' function_pointer='true' name='inPanelFilterProc' type='^?'>
<arg declared_type='QTSPanelFilterParams*' type='^{QTSPanelFilterParams=i^{QTSStreamRecord}II{QTAtomSpec=^*i}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='void*' name='inPanelFilterProcRefCon' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetTimeBase'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='TimeBase*' name='outTimeBase' type='^^{TimeBaseRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetTimeScale'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='TimeScale*' name='outTimeScale' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetVisualContext'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='QTVisualContextRef*' name='outVisualContext' type='^^{OpaqueQTVisualContext}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresGetVolumes'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='short*' name='outLeftVolume' type='^s'/>
<arg declared_type='short*' name='outRightVolume' type='^s'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresHasCharacteristic'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='OSType' name='inCharacteristic' type='L'/>
<arg declared_type='Boolean*' name='outHasIt' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresIdle'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSPresIdleParams*' name='ioParams' type='^{QTSPresIdleParams=^{QTSStreamRecord}qii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='QTSPresInvalidateRegion'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='RgnHandle' name='inRegion' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresNewStream'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='OSType' name='inDataType' type='L'/>
<arg const='true' declared_type='void*' name='inData' type='^v'/>
<arg declared_type='UInt32' name='inDataLength' type='L'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='QTSStream*' name='outStream' type='^^{QTSStreamRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresPreroll'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='UInt32' name='inTimeValue' type='L'/>
<arg declared_type='Fixed' name='inRate' type='l'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresPreroll64'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg const='true' declared_type='TimeValue64*' name='inPrerollTime' type='^q'/>
<arg declared_type='Fixed' name='inRate' type='l'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresPreview'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg const='true' declared_type='TimeValue64*' name='inTimeValue' type='^q'/>
<arg declared_type='Fixed' name='inRate' type='l'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresRemoveSourcer'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='ComponentInstance' name='inSourcer' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresSetActiveSegment'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg const='true' declared_type='TimeValue64*' name='inStartTime' type='^q'/>
<arg const='true' declared_type='TimeValue64*' name='inDuration' type='^q'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresSetClip'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='RgnHandle' name='inClip' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresSetDimensions'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='Fixed' name='inWidth' type='l'/>
<arg declared_type='Fixed' name='inHeight' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresSetEnable'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='Boolean' name='inEnableMode' type='B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresSetFlags'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='SInt32' name='inFlagsMask' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresSetGWorld'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='CGrafPtr' name='inGWorld' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='GDHandle' name='inGDHandle' type='^^{GDevice}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresSetGraphicsMode'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='short' name='inMode' type='s'/>
<arg const='true' declared_type='RGBColor*' name='inOpColor' type='^{RGBColor=SSS}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresSetInfo'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='OSType' name='inSelector' type='L'/>
<arg declared_type='void*' name='ioParam' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresSetMatrix'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg const='true' declared_type='MatrixRecord*' name='inMatrix' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresSetNotificationProc'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSNotificationUPP' function_pointer='true' name='inNotificationProc' type='^?'>
<arg declared_type='ComponentResult' type='l'/>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<arg declared_type='void*' name='inRefCon' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresSetPlayHints'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='SInt32' name='inFlagsMask' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresSetPreferredRate'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='Fixed' name='inRate' type='l'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresSetPresenting'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='Boolean' name='inPresentingMode' type='B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresSetSettings'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='QTAtomSpecPtr' name='inSettings' type='^{QTAtomSpec=^*i}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresSetVisualContext'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='QTVisualContextRef' name='inVisualContext' type='^{OpaqueQTVisualContext=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresSetVolumes'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='short' name='inLeftVolume' type='s'/>
<arg declared_type='short' name='inRightVolume' type='s'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresSettingsDialog'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='QTSModalFilterUPP' function_pointer='true' name='inFilterProc' type='^?'>
<arg declared_type='DialogPtr' type='^{OpaqueDialogPtr=}'/>
<arg const='true' declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='SInt16*' type='^s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='void*' name='inFilterProcRefCon' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresSettingsDialogWithFilters'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='QTSModalFilterUPP' function_pointer='true' name='inFilterProc' type='^?'>
<arg declared_type='DialogPtr' type='^{OpaqueDialogPtr=}'/>
<arg const='true' declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='SInt16*' type='^s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='void*' name='inFilterProcRefCon' type='^v'/>
<arg declared_type='QTSPanelFilterUPP' function_pointer='true' name='inPanelFilterProc' type='^?'>
<arg declared_type='QTSPanelFilterParams*' type='^{QTSPanelFilterParams=i^{QTSStreamRecord}II{QTAtomSpec=^*i}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='void*' name='inPanelFilterProcRefCon' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresSkipTo'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='UInt32' name='inTimeValue' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresSkipTo64'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg const='true' declared_type='TimeValue64*' name='inTimeValue' type='^q'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresStart'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSPresStop'>
<arg declared_type='QTSPresentation' name='inPresentation' type='^{QTSPresentationRecord=[1l]}'/>
<arg declared_type='QTSStream' name='inStream' type='^{QTSStreamRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSReleaseMemPtr'>
<arg declared_type='QTSMemPtr' name='inMemPtr' type='^{OpaqueQTSMemPtr=}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='QTSSetNetworkAppName'>
<arg const='true' declared_type='char*' name='inAppName' type='*'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSSourcerGetEnable'>
<arg declared_type='QTSSourcer' name='inSourcer' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='outEnableMode' type='^B'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTSSourcerGetInfo'>
<arg declared_type='QTSSourcer' name='inSourcer' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='inSelector' type='L'/>
<arg declared_type='void*' name='ioParams' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTSSourcerGetTimeScale'>
<arg declared_type='QTSSourcer' name='inSourcer' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeScale*' name='outTimeScale' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTSSourcerIdle'>
<arg declared_type='QTSSourcer' name='inSourcer' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='TimeValue64*' name='inTime' type='^q'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='SInt32*' name='outFlags' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTSSourcerInitialize'>
<arg declared_type='QTSSourcer' name='inSourcer' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='QTSSourcerInitParams*' name='inInitParams' type='^{QTSSourcerInitParams=iiI^vI}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTSSourcerSetEnable'>
<arg declared_type='QTSSourcer' name='inSourcer' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean' name='inEnableMode' type='B'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTSSourcerSetInfo'>
<arg declared_type='QTSSourcer' name='inSourcer' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='inSelector' type='L'/>
<arg declared_type='void*' name='ioParams' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTSSourcerSetTimeScale'>
<arg declared_type='QTSSourcer' name='inSourcer' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeScale' name='inTimeScale' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTSStatHelperGetNumStats'>
<arg declared_type='QTSStatHelper' name='inStatHelper' type='^{QTSStatHelperRecord=[1l]}'/>
<retval declared_type='UInt32' type='L'/>
</function>
<function name='QTSStatHelperGetStats'>
<arg declared_type='QTSStatHelper' name='inStatHelper' type='^{QTSStatHelperRecord=[1l]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSStatHelperNext'>
<arg declared_type='QTSStatHelper' name='inStatHelper' type='^{QTSStatHelperRecord=[1l]}'/>
<arg declared_type='QTSStatHelperNextParams*' name='ioParams' type='^{QTSStatHelperNextParams=iI^{QTSStreamRecord}I*I*I*}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='QTSStatHelperResetIter'>
<arg declared_type='QTSStatHelper' name='inStatHelper' type='^{QTSStatHelperRecord=[1l]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSStreamBufferDataInfo'>
<arg declared_type='QTSStreamBuffer*' name='inStreamBuffer' type='^{QTSStreamBuffer=^{QTSStreamBuffer}^{QTSStreamBuffer}^{QTSStreamBuffer}**i[4L]illl[8L]}'/>
<arg declared_type='unsigned char**' name='outDataStart' type='^*'/>
<arg declared_type='UInt32*' name='outDataMaxLength' type='^I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='QTSampleTableAddSampleDescription'>
<arg declared_type='QTMutableSampleTableRef' name='sampleTable' type='^{OpaqueQTSampleTable=}'/>
<arg declared_type='SampleDescriptionHandle' name='sampleDescriptionH' type='^^{SampleDescription}'/>
<arg declared_type='long' name='mediaSampleDescriptionIndex' type='l'/>
<arg declared_type='QTSampleDescriptionID*' name='sampleDescriptionIDOut' type='^i'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTSampleTableAddSampleReferences'>
<arg declared_type='QTMutableSampleTableRef' name='sampleTable' type='^{OpaqueQTSampleTable=}'/>
<arg declared_type='SInt64' name='dataOffset' type='q'/>
<arg declared_type='ByteCount' name='dataSizePerSample' type='L'/>
<arg declared_type='TimeValue64' name='decodeDurationPerSample' type='q'/>
<arg declared_type='TimeValue64' name='displayOffset' type='q'/>
<arg declared_type='SInt64' name='numberOfSamples' type='q'/>
<arg declared_type='MediaSampleFlags' name='sampleFlags' type='L'/>
<arg declared_type='QTSampleDescriptionID' name='sampleDescriptionID' type='l'/>
<arg declared_type='SInt64*' name='newSampleNumOut' type='^q'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTSampleTableCopySampleDescription'>
<arg declared_type='QTSampleTableRef' name='sampleTable' type='^{OpaqueQTSampleTable=}'/>
<arg declared_type='QTSampleDescriptionID' name='sampleDescriptionID' type='l'/>
<arg declared_type='long*' name='mediaSampleDescriptionIndexOut' type='^l'/>
<arg declared_type='SampleDescriptionHandle*' name='sampleDescriptionHOut' type='^^^{SampleDescription}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTSampleTableCreateMutable'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='TimeScale' name='timescale' type='l'/>
<arg declared_type='void*' name='hints' type='^v'/>
<arg declared_type='QTMutableSampleTableRef*' name='newSampleTable' type='^^{OpaqueQTSampleTable}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTSampleTableCreateMutableCopy'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='QTSampleTableRef' name='sampleTable' type='^{OpaqueQTSampleTable=}'/>
<arg declared_type='void*' name='hints' type='^v'/>
<arg declared_type='QTMutableSampleTableRef*' name='newSampleTable' type='^^{OpaqueQTSampleTable}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTSampleTableGetDataOffset'>
<arg declared_type='QTSampleTableRef' name='sampleTable' type='^{OpaqueQTSampleTable=}'/>
<arg declared_type='SInt64' name='sampleNum' type='q'/>
<retval declared_type='SInt64' type='q'/>
</function>
<function name='QTSampleTableGetDataSizePerSample'>
<arg declared_type='QTSampleTableRef' name='sampleTable' type='^{OpaqueQTSampleTable=}'/>
<arg declared_type='SInt64' name='sampleNum' type='q'/>
<retval declared_type='ByteCount' type='L'/>
</function>
<function name='QTSampleTableGetDecodeDuration'>
<arg declared_type='QTSampleTableRef' name='sampleTable' type='^{OpaqueQTSampleTable=}'/>
<arg declared_type='SInt64' name='sampleNum' type='q'/>
<retval declared_type='TimeValue64' type='q'/>
</function>
<function name='QTSampleTableGetDisplayOffset'>
<arg declared_type='QTSampleTableRef' name='sampleTable' type='^{OpaqueQTSampleTable=}'/>
<arg declared_type='SInt64' name='sampleNum' type='q'/>
<retval declared_type='TimeValue64' type='q'/>
</function>
<function name='QTSampleTableGetNextAttributeChange'>
<arg declared_type='QTSampleTableRef' name='sampleTable' type='^{OpaqueQTSampleTable=}'/>
<arg declared_type='SInt64' name='startSampleNum' type='q'/>
<arg declared_type='QTSampleTableAttribute' name='attributeMask' type='L'/>
<arg declared_type='SInt64*' name='sampleNumOut' type='^q'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTSampleTableGetNumberOfSamples'>
<arg declared_type='QTSampleTableRef' name='sampleTable' type='^{OpaqueQTSampleTable=}'/>
<retval declared_type='SInt64' type='q'/>
</function>
<function name='QTSampleTableGetProperty'>
<arg declared_type='QTSampleTableRef' name='sampleTable' type='^{OpaqueQTSampleTable=}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='QTPropertyValuePtr' name='outPropValueAddress' type='^v'/>
<arg declared_type='ByteCount*' name='outPropValueSizeUsed' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTSampleTableGetPropertyInfo'>
<arg declared_type='QTSampleTableRef' name='sampleTable' type='^{OpaqueQTSampleTable=}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='QTPropertyValueType*' name='outPropType' type='^I'/>
<arg declared_type='ByteCount*' name='outPropValueSize' type='^I'/>
<arg declared_type='UInt32*' name='outPropertyFlags' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTSampleTableGetSampleDescriptionID'>
<arg declared_type='QTSampleTableRef' name='sampleTable' type='^{OpaqueQTSampleTable=}'/>
<arg declared_type='SInt64' name='sampleNum' type='q'/>
<retval declared_type='QTSampleDescriptionID' type='l'/>
</function>
<function name='QTSampleTableGetSampleFlags'>
<arg declared_type='QTSampleTableRef' name='sampleTable' type='^{OpaqueQTSampleTable=}'/>
<arg declared_type='SInt64' name='sampleNum' type='q'/>
<retval declared_type='MediaSampleFlags' type='L'/>
</function>
<function name='QTSampleTableGetTimeScale'>
<arg declared_type='QTSampleTableRef' name='sampleTable' type='^{OpaqueQTSampleTable=}'/>
<retval declared_type='TimeScale' type='l'/>
</function>
<function name='QTSampleTableGetTypeID'>
<retval declared_type='CFTypeID' type='L'/>
</function>
<function name='QTSampleTableRelease'>
<arg declared_type='QTSampleTableRef' name='sampleTable' type='^{OpaqueQTSampleTable=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='QTSampleTableReplaceRange'>
<arg declared_type='QTMutableSampleTableRef' name='destSampleTable' type='^{OpaqueQTSampleTable=}'/>
<arg declared_type='SInt64' name='destStartingSampleNum' type='q'/>
<arg declared_type='SInt64' name='destSampleCount' type='q'/>
<arg declared_type='QTSampleTableRef' name='sourceSampleTable' type='^{OpaqueQTSampleTable=}'/>
<arg declared_type='SInt64' name='sourceStartingSampleNum' type='q'/>
<arg declared_type='SInt64' name='sourceSampleCount' type='q'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTSampleTableRetain'>
<arg declared_type='QTSampleTableRef' name='sampleTable' type='^{OpaqueQTSampleTable=}'/>
<retval declared_type='QTSampleTableRef' type='^{OpaqueQTSampleTable=}'/>
</function>
<function name='QTSampleTableSetProperty'>
<arg declared_type='QTSampleTableRef' name='sampleTable' type='^{OpaqueQTSampleTable=}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ConstQTPropertyValuePtr' name='inPropValueAddress' type='^v'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTSampleTableSetTimeScale'>
<arg declared_type='QTMutableSampleTableRef' name='sampleTable' type='^{OpaqueQTSampleTable=}'/>
<arg declared_type='TimeScale' name='newTimeScale' type='l'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTScheduledBandwidthRelease'>
<arg declared_type='QTScheduledBandwidthReference' name='sbwRef' type='^^{QTScheduledBandwidthUsageRecord}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTScheduledBandwidthRequest'>
<arg declared_type='QTScheduledBandwidthPtr' name='scheduleRec' type='^{QTScheduledBandwidthRecord=lll{wide=Ii}{wide=Ii}{wide=Ii}i^{TimeBaseRecord}}'/>
<arg declared_type='QTBandwidthNotificationUPP' function_pointer='true' name='notificationCallback' type='^?'>
<arg declared_type='long' type='l'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='void*' name='refcon' type='^v'/>
<arg declared_type='QTScheduledBandwidthReference*' name='sbwRef' type='^^^{QTScheduledBandwidthUsageRecord}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSetAtomData'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='atom' type='l'/>
<arg declared_type='long' name='dataSize' type='l'/>
<arg declared_type='void*' name='atomData' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSetAtomID'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='atom' type='l'/>
<arg declared_type='QTAtomID' name='newID' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSetComponentProperty'>
<arg declared_type='ComponentInstance' name='inComponent' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='ComponentPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ConstComponentValuePtr' name='inPropValueAddress' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTSetMovieProperty'>
<arg declared_type='Movie' name='inMovie' type='^^{MovieType}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ConstQTPropertyValuePtr' name='inPropValueAddress' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSetPixMapHandleGammaLevel'>
<arg declared_type='PixMapHandle' name='pm' type='^^{PixMap}'/>
<arg declared_type='Fixed' name='gammaLevel' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSetPixMapHandleRequestedGammaLevel'>
<arg declared_type='PixMapHandle' name='pm' type='^^{PixMap}'/>
<arg declared_type='Fixed' name='requestedGammaLevel' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSetPixMapHandleRowBytes'>
<arg declared_type='PixMapHandle' name='pm' type='^^{PixMap}'/>
<arg declared_type='long' name='rowBytes' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSetPixMapPtrGammaLevel'>
<arg declared_type='PixMapPtr' name='pm' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Fixed' name='gammaLevel' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSetPixMapPtrRequestedGammaLevel'>
<arg declared_type='PixMapPtr' name='pm' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='Fixed' name='requestedGammaLevel' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSetPixMapPtrRowBytes'>
<arg declared_type='PixMapPtr' name='pm' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='long' name='rowBytes' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSetTrackProperty'>
<arg declared_type='Track' name='inTrack' type='^^{TrackType}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ConstQTPropertyValuePtr' name='inPropValueAddress' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSoundDescriptionConvert'>
<arg declared_type='QTSoundDescriptionKind' name='fromKind' type='L'/>
<arg declared_type='SoundDescriptionHandle' name='fromDescription' type='^^{SoundDescription}'/>
<arg declared_type='QTSoundDescriptionKind' name='toKind' type='L'/>
<arg declared_type='SoundDescriptionHandle*' name='toDescription' type='^^^{SoundDescription}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTSoundDescriptionCreate'>
<arg declared_type='AudioStreamBasicDescription*' name='inASBD' type='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg declared_type='AudioChannelLayout*' name='inLayout' type='^{AudioChannelLayout=III[1{AudioChannelDescription=II[3f]}]}'/>
<arg declared_type='ByteCount' name='inLayoutSize' type='L'/>
<arg declared_type='void*' name='inMagicCookie' type='^v'/>
<arg declared_type='ByteCount' name='inMagicCookieSize' type='L'/>
<arg declared_type='QTSoundDescriptionKind' name='inRequestedKind' type='L'/>
<arg declared_type='SoundDescriptionHandle*' name='outSoundDesc' type='^^^{SoundDescription}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTSoundDescriptionGetProperty'>
<arg declared_type='SoundDescriptionHandle' name='inDesc' type='^^{SoundDescription}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='QTPropertyValuePtr' name='outPropValueAddress' type='^v'/>
<arg declared_type='ByteCount*' name='outPropValueSizeUsed' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTSoundDescriptionGetPropertyInfo'>
<arg declared_type='SoundDescriptionHandle' name='inDesc' type='^^{SoundDescription}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='QTPropertyValueType*' name='outPropType' type='^I'/>
<arg declared_type='ByteCount*' name='outPropValueSize' type='^I'/>
<arg declared_type='UInt32*' name='outPropertyFlags' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTSoundDescriptionSetProperty'>
<arg declared_type='SoundDescriptionHandle' name='inDesc' type='^^{SoundDescription}'/>
<arg declared_type='QTPropertyClass' name='inPropClass' type='L'/>
<arg declared_type='QTPropertyID' name='inPropID' type='L'/>
<arg declared_type='ByteCount' name='inPropValueSize' type='L'/>
<arg declared_type='ConstQTPropertyValuePtr' name='inPropValueAddress' type='^v'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTStandardParameterDialogDoAction'>
<arg declared_type='QTParameterDialog' name='createdDialog' type='l'/>
<arg declared_type='long' name='action' type='l'/>
<arg declared_type='void*' name='params' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTSwapAtoms'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='atom1' type='l'/>
<arg declared_type='QTAtom' name='atom2' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTTextToNativeText'>
<arg declared_type='Handle' name='theText' type='^*'/>
<arg declared_type='long' name='encoding' type='l'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTUninstallNextTaskNeededSoonerCallback'>
<arg declared_type='QTNextTaskNeededSoonerCallbackUPP' function_pointer='true' name='callbackProc' type='^?'>
<arg declared_type='TimeValue' type='l'/>
<arg declared_type='unsigned long' type='L'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='refcon' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTUnlockContainer'>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTUnregisterAccessKey'>
<arg declared_type='unsigned char*' name='accessKeyType' type='*'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='Handle' name='accessKey' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTUpdateGWorld'>
<arg declared_type='GWorldPtr*' name='offscreenGWorld' type='^^{OpaqueGrafPtr}'/>
<arg declared_type='OSType' name='PixelFormat' type='L'/>
<arg const='true' declared_type='Rect*' name='boundsRect' type='^{Rect=ssss}'/>
<arg declared_type='CTabHandle' name='cTable' type='^^{ColorTable}'/>
<arg declared_type='GDHandle' name='aGDevice' type='^^{GDevice}'/>
<arg declared_type='GWorldFlags' name='flags' type='L'/>
<retval declared_type='GWorldFlags' type='L'/>
</function>
<function name='QTVRAnglesToCoord'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='float' name='panAngle' type='f'/>
<arg declared_type='float' name='tiltAngle' type='f'/>
<arg declared_type='QTVRFloatPoint*' name='coord' type='^{QTVRFloatPoint=ff}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRBeginUpdateStream'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRImagingMode' name='imagingMode' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRCallInterceptedProc'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRInterceptRecord*' name='qtvrMsg' type='^{QTVRInterceptRecord=iiiii[6^v]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRColumnToPan'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='short' name='column' type='s'/>
<retval declared_type='float' type='f'/>
</function>
<function name='QTVRCoordToAngles'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRFloatPoint*' name='coord' type='^{QTVRFloatPoint=ff}'/>
<arg declared_type='float*' name='panAngle' type='^f'/>
<arg declared_type='float*' name='tiltAngle' type='^f'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVREnableFrameAnimation'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Boolean' name='enable' type='B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVREnableHotSpot'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' name='enableFlag' type='L'/>
<arg declared_type='UInt32' name='hotSpotValue' type='L'/>
<arg declared_type='Boolean' name='enable' type='B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVREnableTransition'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' name='transitionType' type='L'/>
<arg declared_type='Boolean' name='enable' type='B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVREnableViewAnimation'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Boolean' name='enable' type='B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVREndUpdateStream'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRGetAngularUnits'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<retval declared_type='QTVRAngularUnits' type='L'/>
</function>
<function name='QTVRGetAnimationSetting'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRObjectAnimationSetting' name='setting' type='L'/>
<arg declared_type='Boolean*' name='enable' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRGetAvailableResolutions'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt16*' name='resolutionsMask' type='^S'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRGetBackBufferMemInfo'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' name='geometry' type='L'/>
<arg declared_type='UInt16' name='resolution' type='S'/>
<arg declared_type='UInt32' name='cachePixelFormat' type='L'/>
<arg declared_type='SInt32*' name='minCacheBytes' type='^i'/>
<arg declared_type='SInt32*' name='suggestedCacheBytes' type='^i'/>
<arg declared_type='SInt32*' name='fullCacheBytes' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRGetBackBufferSettings'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32*' name='geometry' type='^I'/>
<arg declared_type='UInt16*' name='resolution' type='^S'/>
<arg declared_type='UInt32*' name='cachePixelFormat' type='^I'/>
<arg declared_type='SInt16*' name='cacheSize' type='^s'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRGetConstraintStatus'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<retval declared_type='UInt32' type='L'/>
</function>
<function name='QTVRGetConstraints'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt16' name='kind' type='S'/>
<arg declared_type='float*' name='minValue' type='^f'/>
<arg declared_type='float*' name='maxValue' type='^f'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRGetControlSetting'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRControlSetting' name='setting' type='L'/>
<arg declared_type='Boolean*' name='enable' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRGetCurrentMouseMode'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<retval declared_type='UInt32' type='L'/>
</function>
<function name='QTVRGetCurrentNodeID'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<retval declared_type='UInt32' type='L'/>
</function>
<function name='QTVRGetCurrentViewDuration'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<retval declared_type='TimeValue' type='l'/>
</function>
<function name='QTVRGetFieldOfView'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<retval declared_type='float' type='f'/>
</function>
<function name='QTVRGetFrameAnimation'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='QTVRGetFrameRate'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<retval declared_type='float' type='f'/>
</function>
<function name='QTVRGetHotSpotRegion'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' name='hotSpotID' type='L'/>
<arg declared_type='RgnHandle' name='hotSpotRegion' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRGetHotSpotType'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' name='hotSpotID' type='L'/>
<arg declared_type='OSType*' name='hotSpotType' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRGetImagingProperty'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRImagingMode' name='imagingMode' type='L'/>
<arg declared_type='UInt32' name='imagingProperty' type='L'/>
<arg declared_type='SInt32*' name='propertyValue' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRGetInteractionProperty'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' name='property' type='L'/>
<arg declared_type='void*' name='value' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRGetMouseDownTracking'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='QTVRGetMouseOverTracking'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='QTVRGetNodeInfo'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' name='nodeID' type='L'/>
<arg declared_type='QTAtomContainer*' name='nodeInfo' type='^^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRGetNodeType'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' name='nodeID' type='L'/>
<retval declared_type='OSType' type='L'/>
</function>
<function name='QTVRGetPanAngle'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<retval declared_type='float' type='f'/>
</function>
<function name='QTVRGetQTVRInstance'>
<arg declared_type='QTVRInstance*' name='qtvr' type='^^{OpaqueQTVRInstance}'/>
<arg declared_type='Track' name='qtvrTrack' type='^^{TrackType}'/>
<arg declared_type='MovieController' name='mc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRGetQTVRTrack'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='SInt32' name='index' type='l'/>
<retval declared_type='Track' type='^^{TrackType}'/>
</function>
<function name='QTVRGetTiltAngle'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<retval declared_type='float' type='f'/>
</function>
<function name='QTVRGetVRWorld'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTAtomContainer*' name='VRWorld' type='^^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRGetViewAnimation'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='QTVRGetViewCenter'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRFloatPoint*' name='viewCenter' type='^{QTVRFloatPoint=ff}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRGetViewCurrentTime'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<retval declared_type='TimeValue' type='l'/>
</function>
<function name='QTVRGetViewParameter'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' name='viewParameter' type='L'/>
<arg declared_type='void*' name='value' type='^v'/>
<arg declared_type='UInt32' name='flagsIn' type='L'/>
<arg declared_type='UInt32*' name='flagsOut' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRGetViewRate'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<retval declared_type='float' type='f'/>
</function>
<function name='QTVRGetViewState'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRViewStateType' name='viewStateType' type='L'/>
<arg declared_type='UInt16*' name='state' type='^S'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRGetViewStateCount'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<retval declared_type='UInt16' type='S'/>
</function>
<function name='QTVRGetViewingLimits'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt16' name='kind' type='S'/>
<arg declared_type='float*' name='minValue' type='^f'/>
<arg declared_type='float*' name='maxValue' type='^f'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRGetVisible'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='QTVRGetVisibleHotSpots'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Handle' name='hotSpots' type='^*'/>
<retval declared_type='UInt32' type='L'/>
</function>
<function name='QTVRGoToNodeID'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' name='nodeID' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRInstallInterceptProc'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRProcSelector' name='selector' type='L'/>
<arg declared_type='QTVRInterceptUPP' function_pointer='true' name='interceptProc' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRInterceptPtr' type='^{QTVRInterceptRecord=iiiii[6^v]}'/>
<arg declared_type='SInt32' type='l'/>
<arg declared_type='Boolean*' type='^B'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='SInt32' name='refCon' type='l'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRInteractionNudge'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRNudgeControl' name='direction' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRMouseDown'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Point' name='pt' type='{Point=ss}'/>
<arg declared_type='UInt32' name='when' type='L'/>
<arg declared_type='UInt16' name='modifiers' type='S'/>
<arg declared_type='UInt32*' name='hotSpotID' type='^I'/>
<arg declared_type='WindowRef' name='w' type='^{OpaqueWindowPtr=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRMouseEnter'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Point' name='pt' type='{Point=ss}'/>
<arg declared_type='UInt32*' name='hotSpotID' type='^I'/>
<arg declared_type='WindowRef' name='w' type='^{OpaqueWindowPtr=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRMouseLeave'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Point' name='pt' type='{Point=ss}'/>
<arg declared_type='WindowRef' name='w' type='^{OpaqueWindowPtr=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRMouseStillDown'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Point' name='pt' type='{Point=ss}'/>
<arg declared_type='UInt32*' name='hotSpotID' type='^I'/>
<arg declared_type='WindowRef' name='w' type='^{OpaqueWindowPtr=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRMouseStillDownExtended'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Point' name='pt' type='{Point=ss}'/>
<arg declared_type='UInt32*' name='hotSpotID' type='^I'/>
<arg declared_type='WindowRef' name='w' type='^{OpaqueWindowPtr=}'/>
<arg declared_type='UInt32' name='when' type='L'/>
<arg declared_type='UInt16' name='modifiers' type='S'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRMouseUp'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Point' name='pt' type='{Point=ss}'/>
<arg declared_type='UInt32*' name='hotSpotID' type='^I'/>
<arg declared_type='WindowRef' name='w' type='^{OpaqueWindowPtr=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRMouseUpExtended'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Point' name='pt' type='{Point=ss}'/>
<arg declared_type='UInt32*' name='hotSpotID' type='^I'/>
<arg declared_type='WindowRef' name='w' type='^{OpaqueWindowPtr=}'/>
<arg declared_type='UInt32' name='when' type='L'/>
<arg declared_type='UInt16' name='modifiers' type='S'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRMouseWithin'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Point' name='pt' type='{Point=ss}'/>
<arg declared_type='UInt32*' name='hotSpotID' type='^I'/>
<arg declared_type='WindowRef' name='w' type='^{OpaqueWindowPtr=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRNudge'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRNudgeControl' name='direction' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRPanToColumn'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='float' name='panAngle' type='f'/>
<retval declared_type='short' type='s'/>
</function>
<function name='QTVRPtToAngles'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Point' name='pt' type='{Point=ss}'/>
<arg declared_type='float*' name='panAngle' type='^f'/>
<arg declared_type='float*' name='tiltAngle' type='^f'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRPtToHotSpotID'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Point' name='pt' type='{Point=ss}'/>
<arg declared_type='UInt32*' name='hotSpotID' type='^I'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRRefreshBackBuffer'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRReplaceCursor'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRCursorRecord*' name='cursRecord' type='^{QTVRCursorRecord=Ss^*}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRRowToTilt'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='short' name='row' type='s'/>
<retval declared_type='float' type='f'/>
</function>
<function name='QTVRSetAngularUnits'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRAngularUnits' name='units' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetAnimationSetting'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRObjectAnimationSetting' name='setting' type='L'/>
<arg declared_type='Boolean' name='enable' type='B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetBackBufferImagingProc'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRBackBufferImagingUPP' function_pointer='true' name='backBufferImagingProc' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='UInt16' name='numAreas' type='S'/>
<arg declared_type='QTVRAreaOfInterest*' name='areasOfInterest' type='^{QTVRAreaOfInterest=ffffI}'/>
<arg declared_type='SInt32' name='refCon' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetBackBufferPrefs'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' name='geometry' type='L'/>
<arg declared_type='UInt16' name='resolution' type='S'/>
<arg declared_type='UInt32' name='cachePixelFormat' type='L'/>
<arg declared_type='SInt16' name='cacheSize' type='s'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetConstraints'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt16' name='kind' type='S'/>
<arg declared_type='float' name='minValue' type='f'/>
<arg declared_type='float' name='maxValue' type='f'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetControlSetting'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRControlSetting' name='setting' type='L'/>
<arg declared_type='Boolean' name='enable' type='B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetEnteringNodeProc'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVREnteringNodeUPP' function_pointer='true' name='enteringNodeProc' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='SInt32' name='refCon' type='l'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetFieldOfView'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='float' name='fieldOfView' type='f'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetFrameRate'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='float' name='rate' type='f'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetImagingProperty'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRImagingMode' name='imagingMode' type='L'/>
<arg declared_type='UInt32' name='imagingProperty' type='L'/>
<arg declared_type='SInt32' name='propertyValue' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetInteractionProperty'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' name='property' type='L'/>
<arg declared_type='void*' name='value' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetLeavingNodeProc'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRLeavingNodeUPP' function_pointer='true' name='leavingNodeProc' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='Boolean*' type='^B'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='SInt32' name='refCon' type='l'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetMouseDownTracking'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Boolean' name='enable' type='B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetMouseOverHotSpotProc'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRMouseOverHotSpotUPP' function_pointer='true' name='mouseOverHotSpotProc' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='UInt32' type='L'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='SInt32' name='refCon' type='l'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetMouseOverTracking'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Boolean' name='enable' type='B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetPanAngle'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='float' name='panAngle' type='f'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetPrescreenImagingCompleteProc'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRImagingCompleteUPP' function_pointer='true' name='imagingCompleteProc' type='^?'>
<arg declared_type='QTVRInstance' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='SInt32' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='SInt32' name='refCon' type='l'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetTiltAngle'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='float' name='tiltAngle' type='f'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetTransitionProperty'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' name='transitionType' type='L'/>
<arg declared_type='UInt32' name='transitionProperty' type='L'/>
<arg declared_type='SInt32' name='transitionValue' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetViewCenter'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg const='true' declared_type='QTVRFloatPoint*' name='viewCenter' type='^{QTVRFloatPoint=ff}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetViewCurrentTime'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetViewParameter'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' name='viewParameter' type='L'/>
<arg declared_type='void*' name='value' type='^v'/>
<arg declared_type='UInt32' name='flagsIn' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetViewRate'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='float' name='rate' type='f'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetViewState'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRViewStateType' name='viewStateType' type='L'/>
<arg declared_type='UInt16' name='state' type='S'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRSetVisible'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='Boolean' name='visible' type='B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRShowDefaultView'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRTiltToRow'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='float' name='tiltAngle' type='f'/>
<retval declared_type='short' type='s'/>
</function>
<function name='QTVRTriggerHotSpot'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='UInt32' name='hotSpotID' type='L'/>
<arg declared_type='QTAtomContainer' name='nodeInfo' type='^*'/>
<arg declared_type='QTAtom' name='selectedAtom' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRUpdate'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='QTVRImagingMode' name='imagingMode' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVRWrapAndConstrain'>
<arg declared_type='QTVRInstance' name='qtvr' type='^{OpaqueQTVRInstance=}'/>
<arg declared_type='short' name='kind' type='s'/>
<arg declared_type='float' name='value' type='f'/>
<arg declared_type='float*' name='result' type='^f'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='QTVideoOutputBaseSetEchoPort'>
<arg declared_type='QTVideoOutputComponent' name='vo' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CGrafPtr' name='echoPort' type='^{OpaqueGrafPtr=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTVideoOutputBegin'>
<arg declared_type='QTVideoOutputComponent' name='vo' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTVideoOutputCopyIndAudioOutputDeviceUID'>
<arg declared_type='QTVideoOutputComponent' name='vo' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='index' type='l'/>
<arg declared_type='CFStringRef*' name='audioDeviceUID' type='^^{__CFString}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTVideoOutputCustomConfigureDisplay'>
<arg declared_type='QTVideoOutputComponent' name='vo' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ModalFilterUPP' function_pointer='true' name='filter' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='DialogItemIndex*' type='^s'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTVideoOutputEnd'>
<arg declared_type='QTVideoOutputComponent' name='vo' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTVideoOutputGetClientName'>
<arg declared_type='QTVideoOutputComponent' name='vo' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned char*' name='str' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTVideoOutputGetClock'>
<arg declared_type='QTVideoOutputComponent' name='vo' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentInstance*' name='clock' type='^^{ComponentInstanceRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTVideoOutputGetCurrentClientName'>
<arg declared_type='QTVideoOutputComponent' name='vo' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned char*' name='str' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTVideoOutputGetDisplayMode'>
<arg declared_type='QTVideoOutputComponent' name='vo' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='displayModeID' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTVideoOutputGetDisplayModeList'>
<arg declared_type='QTVideoOutputComponent' name='vo' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer*' name='outputs' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTVideoOutputGetGWorld'>
<arg declared_type='QTVideoOutputComponent' name='vo' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='GWorldPtr*' name='gw' type='^^{OpaqueGrafPtr}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTVideoOutputGetGWorldParameters'>
<arg declared_type='QTVideoOutputComponent' name='vo' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr*' name='baseAddr' type='^*'/>
<arg declared_type='long*' name='rowBytes' type='^l'/>
<arg declared_type='CTabHandle*' name='colorTable' type='^^^{ColorTable}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTVideoOutputGetIndImageDecompressor'>
<arg declared_type='QTVideoOutputComponent' name='vo' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='index' type='l'/>
<arg declared_type='Component*' name='codec' type='^^{ComponentRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTVideoOutputGetIndSoundOutput'>
<arg declared_type='QTVideoOutputComponent' name='vo' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='index' type='l'/>
<arg declared_type='Component*' name='outputComponent' type='^^{ComponentRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTVideoOutputRestoreState'>
<arg declared_type='QTVideoOutputComponent' name='vo' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer' name='state' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTVideoOutputSaveState'>
<arg declared_type='QTVideoOutputComponent' name='vo' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer*' name='state' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTVideoOutputSetClientName'>
<arg declared_type='QTVideoOutputComponent' name='vo' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ConstStr255Param' name='str' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTVideoOutputSetDisplayMode'>
<arg declared_type='QTVideoOutputComponent' name='vo' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='displayModeID' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTVideoOutputSetEchoPort'>
<arg declared_type='QTVideoOutputComponent' name='vo' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CGrafPtr' name='echoPort' type='^{OpaqueGrafPtr=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='QTVisualContextCopyImageForTime'>
<arg declared_type='QTVisualContextRef' name='visualContext' type='^{OpaqueQTVisualContext=}'/>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg const='true' declared_type='CVTimeStamp*' name='timeStamp' type='^{_CVTimeStamp=IiqQdq{CVSMPTETime=ssIIIssss}QQ}'/>
<arg declared_type='CVImageBufferRef*' name='newImage' type='^^{__CVBuffer}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTVisualContextGetAttribute'>
<arg declared_type='QTVisualContextRef' name='visualContext' type='^{OpaqueQTVisualContext=}'/>
<arg declared_type='CFStringRef' name='attributeKey' type='^{__CFString=}'/>
<arg declared_type='CFTypeRef*' name='attributeValueOut' type='^^v'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTVisualContextGetTypeID'>
<retval declared_type='CFTypeID' type='L'/>
</function>
<function name='QTVisualContextIsNewImageAvailable'>
<arg declared_type='QTVisualContextRef' name='visualContext' type='^{OpaqueQTVisualContext=}'/>
<arg const='true' declared_type='CVTimeStamp*' name='timeStamp' type='^{_CVTimeStamp=IiqQdq{CVSMPTETime=ssIIIssss}QQ}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='QTVisualContextRelease'>
<arg declared_type='QTVisualContextRef' name='visualContext' type='^{OpaqueQTVisualContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='QTVisualContextRetain'>
<arg declared_type='QTVisualContextRef' name='visualContext' type='^{OpaqueQTVisualContext=}'/>
<retval declared_type='QTVisualContextRef' type='^{OpaqueQTVisualContext=}'/>
</function>
<function name='QTVisualContextSetAttribute'>
<arg declared_type='QTVisualContextRef' name='visualContext' type='^{OpaqueQTVisualContext=}'/>
<arg declared_type='CFStringRef' name='attributeKey' type='^{__CFString=}'/>
<arg declared_type='CFTypeRef' name='attributeValue' type='@'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTVisualContextSetImageAvailableCallback'>
<arg declared_type='QTVisualContextRef' name='visualContext' type='^{OpaqueQTVisualContext=}'/>
<arg declared_type='QTVisualContextImageAvailableCallback' function_pointer='true' name='imageAvailableCallback' type='^?'>
<arg declared_type='QTVisualContextRef' type='^{OpaqueQTVisualContext=}'/>
<arg const='true' declared_type='CVTimeStamp*' type='^{_CVTimeStamp=IiqQdq{CVSMPTETime=ssIIIssss}QQ}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='QTVisualContextTask'>
<arg declared_type='QTVisualContextRef' name='visualContext' type='^{OpaqueQTVisualContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='QuadToQuadMatrix'>
<arg const='true' declared_type='Fixed*' name='source' type='^i'/>
<arg const='true' declared_type='Fixed*' name='dest' type='^i'/>
<arg declared_type='MatrixRecord*' name='map' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='RTPMPDoUserDialog'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ModalFilterUPP' function_pointer='true' name='inFilterUPP' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='DialogItemIndex*' type='^s'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='Boolean*' name='canceled' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPFlush'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='SInt32*' name='outFlags' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPGetInfo'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='inSelector' type='L'/>
<arg declared_type='void*' name='ioParams' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPGetMaxPacketDuration'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32*' name='outMaxPacketDuration' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPGetMaxPacketSize'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32*' name='outMaxPacketSize' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPGetMediaType'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType*' name='outMediaType' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPGetPacketBuilder'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentInstance*' name='outPacketBuilder' type='^^{ComponentInstanceRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPGetSettings'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer*' name='outSettings' type='^^*'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPGetSettingsAsText'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='text' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPGetSettingsIntoAtomContainerAtAtom'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer' name='inOutContainer' type='^*'/>
<arg declared_type='QTAtom' name='inParentAtom' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPGetTimeBase'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeBase*' name='outTimeBase' type='^^{TimeBaseRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPGetTimeScale'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeScale*' name='outTimeScale' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPHasCharacteristic'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='inSelector' type='L'/>
<arg declared_type='Boolean*' name='outHasIt' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPIdle'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='SInt32*' name='outFlags' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPInitialize'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPPreflightMedia'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='inMediaType' type='L'/>
<arg declared_type='SampleDescriptionHandle' name='inSampleDescription' type='^^{SampleDescription}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPReset'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPSetInfo'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='inSelector' type='L'/>
<arg const='true' declared_type='void*' name='ioParams' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPSetMaxPacketDuration'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='inMaxPacketDuration' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPSetMaxPacketSize'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='inMaxPacketSize' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPSetMediaType'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='inMediaType' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPSetPacketBuilder'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentInstance' name='inPacketBuilder' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPSetSampleData'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='RTPMPSampleDataParams*' name='inSampleData' type='^{RTPMPSampleDataParams=IIIIiiI^*II*^?^v}'/>
<arg declared_type='SInt32*' name='outFlags' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPSetSettings'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomSpecPtr' name='inSettings' type='^{QTAtomSpec=^*i}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPSetSettingsFromAtomContainerAtAtom'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer' name='inContainer' type='^*'/>
<arg declared_type='QTAtom' name='inParentAtom' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPSetTimeBase'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeBase' name='inTimeBase' type='^{TimeBaseRecord=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPMPSetTimeScale'>
<arg declared_type='RTPMediaPacketizer' name='rtpm' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeScale' name='inTimeScale' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPPBAddPacketLiteralData'>
<arg declared_type='RTPPacketBuilder' name='rtpb' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='RTPPacketGroupRef' name='inPacketGroup' type='^{OpaqueRTPPacketGroupRef=}'/>
<arg declared_type='RTPPacketRef' name='inPacket' type='^{OpaqueRTPPacketRef=}'/>
<arg declared_type='UInt8*' name='inData' type='*'/>
<arg declared_type='UInt32' name='inDataLength' type='L'/>
<arg declared_type='RTPPacketRepeatedDataRef*' name='outDataRef' type='^^{OpaqueRTPPacketRepeatedDataRef}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPPBAddPacketRepeatedData'>
<arg declared_type='RTPPacketBuilder' name='rtpb' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='RTPPacketGroupRef' name='inPacketGroup' type='^{OpaqueRTPPacketGroupRef=}'/>
<arg declared_type='RTPPacketRef' name='inPacket' type='^{OpaqueRTPPacketRef=}'/>
<arg declared_type='RTPPacketRepeatedDataRef' name='inDataRef' type='^{OpaqueRTPPacketRepeatedDataRef=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPPBAddPacketSampleData'>
<arg declared_type='RTPPacketBuilder' name='rtpb' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='RTPPacketGroupRef' name='inPacketGroup' type='^{OpaqueRTPPacketGroupRef=}'/>
<arg declared_type='RTPPacketRef' name='inPacket' type='^{OpaqueRTPPacketRef=}'/>
<arg declared_type='RTPMPSampleDataParams*' name='inSampleDataParams' type='^{RTPMPSampleDataParams=IIIIiiI^*II*^?^v}'/>
<arg declared_type='UInt32' name='inSampleOffset' type='L'/>
<arg declared_type='UInt32' name='inSampleDataLength' type='L'/>
<arg declared_type='RTPPacketRepeatedDataRef*' name='outDataRef' type='^^{OpaqueRTPPacketRepeatedDataRef}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPPBAddPacketSampleData64'>
<arg declared_type='RTPPacketBuilder' name='rtpb' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='RTPPacketGroupRef' name='inPacketGroup' type='^{OpaqueRTPPacketGroupRef=}'/>
<arg declared_type='RTPPacketRef' name='inPacket' type='^{OpaqueRTPPacketRef=}'/>
<arg declared_type='RTPMPSampleDataParams*' name='inSampleDataParams' type='^{RTPMPSampleDataParams=IIIIiiI^*II*^?^v}'/>
<arg const='true' declared_type='UInt64*' name='inSampleOffset' type='^Q'/>
<arg declared_type='UInt32' name='inSampleDataLength' type='L'/>
<arg declared_type='RTPPacketRepeatedDataRef*' name='outDataRef' type='^^{OpaqueRTPPacketRepeatedDataRef}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPPBAddRepeatPacket'>
<arg declared_type='RTPPacketBuilder' name='rtpb' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='RTPPacketGroupRef' name='inPacketGroup' type='^{OpaqueRTPPacketGroupRef=}'/>
<arg declared_type='RTPPacketRef' name='inPacket' type='^{OpaqueRTPPacketRef=}'/>
<arg declared_type='TimeValue' name='inTransmissionOffset' type='l'/>
<arg declared_type='UInt32' name='inSequenceNumber' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPPBBeginPacket'>
<arg declared_type='RTPPacketBuilder' name='rtpb' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='RTPPacketGroupRef' name='inPacketGroup' type='^{OpaqueRTPPacketGroupRef=}'/>
<arg declared_type='UInt32' name='inPacketMediaDataLength' type='L'/>
<arg declared_type='RTPPacketRef*' name='outPacket' type='^^{OpaqueRTPPacketRef}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPPBBeginPacketGroup'>
<arg declared_type='RTPPacketBuilder' name='rtpb' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='UInt32' name='inTimeStamp' type='L'/>
<arg declared_type='RTPPacketGroupRef*' name='outPacketGroup' type='^^{OpaqueRTPPacketGroupRef}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPPBEndPacket'>
<arg declared_type='RTPPacketBuilder' name='rtpb' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='RTPPacketGroupRef' name='inPacketGroup' type='^{OpaqueRTPPacketGroupRef=}'/>
<arg declared_type='RTPPacketRef' name='inPacket' type='^{OpaqueRTPPacketRef=}'/>
<arg declared_type='UInt32' name='inTransmissionTimeOffset' type='L'/>
<arg declared_type='UInt32' name='inDuration' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPPBEndPacketGroup'>
<arg declared_type='RTPPacketBuilder' name='rtpb' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='RTPPacketGroupRef' name='inPacketGroup' type='^{OpaqueRTPPacketGroupRef=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPPBGetCallback'>
<arg declared_type='RTPPacketBuilder' name='rtpb' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RTPPBCallbackUPP*' name='outCallback' type='^^?'/>
<arg declared_type='void**' name='outRefCon' type='^^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPPBGetInfo'>
<arg declared_type='RTPPacketBuilder' name='rtpb' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='inSelector' type='L'/>
<arg declared_type='void*' name='ioParams' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPPBGetPacketSequenceNumber'>
<arg declared_type='RTPPacketBuilder' name='rtpb' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='RTPPacketGroupRef' name='inPacketGroup' type='^{OpaqueRTPPacketGroupRef=}'/>
<arg declared_type='RTPPacketRef' name='inPacket' type='^{OpaqueRTPPacketRef=}'/>
<arg declared_type='UInt32*' name='outSequenceNumber' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPPBGetPacketTimeStampOffset'>
<arg declared_type='RTPPacketBuilder' name='rtpb' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='RTPPacketGroupRef' name='inPacketGroup' type='^{OpaqueRTPPacketGroupRef=}'/>
<arg declared_type='RTPPacketRef' name='inPacket' type='^{OpaqueRTPPacketRef=}'/>
<arg declared_type='SInt32*' name='outTimeStampOffset' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPPBGetSampleData'>
<arg declared_type='RTPPacketBuilder' name='rtpb' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RTPMPSampleDataParams*' name='inParams' type='^{RTPMPSampleDataParams=IIIIiiI^*II*^?^v}'/>
<arg const='true' declared_type='UInt64*' name='inStartOffset' type='^Q'/>
<arg declared_type='UInt8*' name='outDataBuffer' type='*'/>
<arg declared_type='UInt32' name='inBytesToRead' type='L'/>
<arg declared_type='UInt32*' name='outBytesRead' type='^I'/>
<arg declared_type='SInt32*' name='outFlags' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPPBReleaseRepeatedData'>
<arg declared_type='RTPPacketBuilder' name='rtpb' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RTPPacketRepeatedDataRef' name='inDataRef' type='^{OpaqueRTPPacketRepeatedDataRef=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPPBSetCallback'>
<arg declared_type='RTPPacketBuilder' name='rtpb' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RTPPBCallbackUPP' function_pointer='true' name='inCallback' type='^?'>
<arg declared_type='OSType' type='L'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='void*' name='inRefCon' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPPBSetInfo'>
<arg declared_type='RTPPacketBuilder' name='rtpb' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='inSelector' type='L'/>
<arg declared_type='void*' name='ioParams' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPPBSetPacketSequenceNumber'>
<arg declared_type='RTPPacketBuilder' name='rtpb' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='RTPPacketGroupRef' name='inPacketGroup' type='^{OpaqueRTPPacketGroupRef=}'/>
<arg declared_type='RTPPacketRef' name='inPacket' type='^{OpaqueRTPPacketRef=}'/>
<arg declared_type='UInt32' name='inSequenceNumber' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPPBSetPacketTimeStampOffset'>
<arg declared_type='RTPPacketBuilder' name='rtpb' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='RTPPacketGroupRef' name='inPacketGroup' type='^{OpaqueRTPPacketGroupRef=}'/>
<arg declared_type='RTPPacketRef' name='inPacket' type='^{OpaqueRTPPacketRef=}'/>
<arg declared_type='SInt32' name='inTimeStampOffset' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmAdjustPacketParams'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RTPRssmPacket*' name='inPacket' type='^{RTPRssmPacket=^{RTPRssmPacket}^{RTPRssmPacket}^{QTSStreamBuffer}BCSIII{SHServerEditParameters=Iiqq}qii}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmClearCachedPackets'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmComputeChunkSize'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RTPRssmPacket*' name='inPacketListHead' type='^{RTPRssmPacket=^{RTPRssmPacket}^{RTPRssmPacket}^{QTSStreamBuffer}BCSIII{SHServerEditParameters=Iiqq}qii}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='UInt32*' name='outChunkDataSize' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmCopyDataToChunk'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RTPRssmPacket*' name='inPacketListHead' type='^{RTPRssmPacket=^{RTPRssmPacket}^{RTPRssmPacket}^{QTSStreamBuffer}BCSIII{SHServerEditParameters=Iiqq}qii}'/>
<arg declared_type='UInt32' name='inMaxChunkDataSize' type='L'/>
<arg declared_type='SHChunkRecord*' name='inChunk' type='^{SHChunkRecord=IliI*llqll^{SHServerEditParameters}ll}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmDecrChunkRefCount'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SHChunkRecord*' name='inChunk' type='^{SHChunkRecord=IliI*llqll^{SHServerEditParameters}ll}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmFillPacketListParams'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RTPRssmPacket*' name='inPacketListHead' type='^{RTPRssmPacket=^{RTPRssmPacket}^{RTPRssmPacket}^{QTSStreamBuffer}BCSIII{SHServerEditParameters=Iiqq}qii}'/>
<arg declared_type='SInt32' name='inNumWraparounds' type='l'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmGetCapabilities'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32*' name='outFlags' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmGetChunkAndIncrRefCount'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='inChunkDataSize' type='L'/>
<arg const='true' declared_type='TimeValue64*' name='inChunkPresentationTime' type='^q'/>
<arg declared_type='SHChunkRecord**' name='outChunk' type='^^{SHChunkRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmGetExtChunkAndIncrRefCount'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='inChunkDataSize' type='L'/>
<arg const='true' declared_type='TimeValue64*' name='inChunkPresentationTime' type='^q'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='SHExtendedChunkRecord**' name='outChunk' type='^^{SHExtendedChunkRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmGetInfo'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='inSelector' type='L'/>
<arg declared_type='void*' name='ioParams' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmGetPayloadHeaderLength'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32*' name='outPayloadHeaderLength' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmGetStreamHandler'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentInstance*' name='outStreamHandler' type='^^{ComponentInstanceRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmGetTimeScale'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeScale*' name='outSHTimeScale' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmGetTimeScaleFromPacket'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTSStreamBuffer*' name='inStreamBuffer' type='^{QTSStreamBuffer=^{QTSStreamBuffer}^{QTSStreamBuffer}^{QTSStreamBuffer}**i[4L]illl[8L]}'/>
<arg declared_type='TimeScale*' name='outTimeScale' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmHandleNewPacket'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTSStreamBuffer*' name='inStreamBuffer' type='^{QTSStreamBuffer=^{QTSStreamBuffer}^{QTSStreamBuffer}^{QTSStreamBuffer}**i[4L]illl[8L]}'/>
<arg declared_type='SInt32' name='inNumWraparounds' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmHasCharacteristic'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='inCharacteristic' type='L'/>
<arg declared_type='Boolean*' name='outHasIt' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmIncrChunkRefCount'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SHChunkRecord*' name='inChunk' type='^{SHChunkRecord=IliI*llqll^{SHServerEditParameters}ll}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmInitialize'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RTPRssmInitParams*' name='inInitParams' type='^{RTPRssmInitParams=ICCCC^{TimeBaseRecord}i}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmNewStreamHandler'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='inSHType' type='L'/>
<arg declared_type='SampleDescriptionHandle' name='inSampleDescription' type='^^{SampleDescription}'/>
<arg declared_type='TimeScale' name='inSHTimeScale' type='l'/>
<arg declared_type='ComponentInstance*' name='outHandler' type='^^{ComponentInstanceRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmReleasePacketList'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RTPRssmPacket*' name='inPacketListHead' type='^{RTPRssmPacket=^{RTPRssmPacket}^{RTPRssmPacket}^{QTSStreamBuffer}BCSIII{SHServerEditParameters=Iiqq}qii}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmReset'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmSendChunkAndDecrRefCount'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SHChunkRecord*' name='inChunk' type='^{SHChunkRecord=IliI*llqll^{SHServerEditParameters}ll}'/>
<arg const='true' declared_type='SHServerEditParameters*' name='inServerEdit' type='^{SHServerEditParameters=Iiqq}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmSendLostChunk'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='TimeValue64*' name='inChunkPresentationTime' type='^q'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmSendPacketList'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RTPRssmPacket*' name='inPacketListHead' type='^{RTPRssmPacket=^{RTPRssmPacket}^{RTPRssmPacket}^{QTSStreamBuffer}BCSIII{SHServerEditParameters=Iiqq}qii}'/>
<arg const='true' declared_type='TimeValue64*' name='inLastChunkPresentationTime' type='^q'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmSendStreamBufferRange'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RTPSendStreamBufferRangeParams*' name='inParams' type='^{RTPSendStreamBufferRangeParams=^{QTSStreamBuffer}qIIii^{SHServerEditParameters}}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmSendStreamHandlerChanged'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmSetCapabilities'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt32' name='inFlags' type='l'/>
<arg declared_type='SInt32' name='inFlagsMask' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmSetInfo'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='inSelector' type='L'/>
<arg declared_type='void*' name='ioParams' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmSetPayloadHeaderLength'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='inPayloadHeaderLength' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmSetSampleDescription'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SampleDescriptionHandle' name='inSampleDescription' type='^^{SampleDescription}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmSetStreamHandler'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentInstance' name='inStreamHandler' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RTPRssmSetTimeScale'>
<arg declared_type='RTPReassembler' name='rtpr' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeScale' name='inSHTimeScale' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='RectMatrix'>
<arg declared_type='MatrixRecord*' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg const='true' declared_type='Rect*' name='dstRect' type='^{Rect=ssss}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='RemoveCallBackFromTimeBase'>
<arg declared_type='QTCallBack' name='cb' type='^{QTCallBackHeader=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='RemoveImageDescriptionExtension'>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='long' name='idType' type='l'/>
<arg declared_type='long' name='index' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='RemoveMovieApertureModeDimensions'>
<arg declared_type='Movie' name='movie' type='^^{MovieType}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='RemoveMovieExecuteWiredActionsProc'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='MovieExecuteWiredActionsUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<arg declared_type='QTAtomContainer' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='RemoveMovieResource'>
<arg declared_type='short' name='resRefNum' type='s'/>
<arg declared_type='short' name='resId' type='s'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='RemoveSoundDescriptionExtension'>
<arg declared_type='SoundDescriptionHandle' name='desc' type='^^{SoundDescription}'/>
<arg declared_type='OSType' name='idType' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='RemoveTrackApertureModeDimensions'>
<arg declared_type='Track' name='track' type='^^{TrackType}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='RemoveUserData'>
<arg declared_type='UserData' name='theUserData' type='^^{UserDataRecord}'/>
<arg declared_type='OSType' name='udType' type='L'/>
<arg declared_type='long' name='index' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='RemoveUserDataText'>
<arg declared_type='UserData' name='theUserData' type='^^{UserDataRecord}'/>
<arg declared_type='OSType' name='udType' type='L'/>
<arg declared_type='long' name='index' type='l'/>
<arg declared_type='short' name='itlRegionTag' type='s'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ReplaceDSequenceImageDescription'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='ImageDescriptionHandle' name='newDesc' type='^^{ImageDescription}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='RotateMatrix'>
<arg declared_type='MatrixRecord*' name='m' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='Fixed' name='degrees' type='l'/>
<arg declared_type='Fixed' name='aboutX' type='l'/>
<arg declared_type='Fixed' name='aboutY' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SCAsyncIdle'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCAudioFillBuffer'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SCAudioInputDataProc' function_pointer='true' name='inInputDataProc' type='^?'>
<arg declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32*' type='^I'/>
<arg declared_type='AudioBufferList*' type='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<arg declared_type='AudioStreamPacketDescription**' type='^^{AudioStreamPacketDescription}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<arg declared_type='void*' name='inInputDataProcRefCon' type='^v'/>
<arg declared_type='UInt32*' name='ioOutputDataPacketSize' type='^I'/>
<arg declared_type='AudioBufferList*' name='outOutputData' type='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<arg declared_type='AudioStreamPacketDescription*' name='outPacketDescription' type='^{AudioStreamPacketDescription=qII}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCAudioInvokeLegacyCodecOptionsDialog'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCAudioReset'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCCompressImage'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PixMapHandle' name='src' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='ImageDescriptionHandle*' name='desc' type='^^^{ImageDescription}'/>
<arg declared_type='Handle*' name='data' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCCompressPicture'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PicHandle' name='srcPicture' type='^^{Picture}'/>
<arg declared_type='PicHandle' name='dstPicture' type='^^{Picture}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCCompressPictureFile'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='srcRefNum' type='s'/>
<arg declared_type='short' name='dstRefNum' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCCompressSequenceBegin'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PixMapHandle' name='src' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='ImageDescriptionHandle*' name='desc' type='^^^{ImageDescription}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCCompressSequenceEnd'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCCompressSequenceFrame'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PixMapHandle' name='src' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='Handle*' name='data' type='^^*'/>
<arg declared_type='long*' name='dataSize' type='^l'/>
<arg declared_type='short*' name='notSyncFlag' type='^s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCCompressSequenceFrameAsync'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PixMapHandle' name='src' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='Handle*' name='data' type='^^*'/>
<arg declared_type='long*' name='dataSize' type='^l'/>
<arg declared_type='short*' name='notSyncFlag' type='^s'/>
<arg declared_type='ICMCompletionProcRecordPtr' name='asyncCompletionProc' type='^{ICMCompletionProcRecord=^?l}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCCopyCompressionSessionOptions'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ICMCompressionSessionOptionsRef*' name='outOptions' type='^^{OpaqueICMCompressionSessionOptions}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCDefaultPictFileSettings'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='srcRef' type='s'/>
<arg declared_type='short' name='motion' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCDefaultPictHandleSettings'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PicHandle' name='srcPicture' type='^^{Picture}'/>
<arg declared_type='short' name='motion' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCDefaultPixMapSettings'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PixMapHandle' name='src' type='^^{PixMap}'/>
<arg declared_type='short' name='motion' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCGetBestDeviceRect'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Rect*' name='r' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCGetCompressFlags'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='flags' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCGetCompressionExtended'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SCParams*' name='params' type='^{SCParams=lI^{ComponentRecord}IIsilll}'/>
<arg declared_type='Point' name='where' type='{Point=ss}'/>
<arg declared_type='SCModalFilterUPP' function_pointer='true' name='filterProc' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='SCModalHookUPP' function_pointer='true' name='hookProc' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='long' type='l'/>
<retval declared_type='short' type='s'/>
</arg>
<arg declared_type='long' name='refcon' type='l'/>
<arg declared_type='StringPtr' name='customName' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCGetInfo'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='infoType' type='L'/>
<arg declared_type='void*' name='info' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCGetSettingsAsAtomContainer'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer*' name='settings' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCGetSettingsAsText'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='text' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCNewGWorld'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='GWorldPtr*' name='gwp' type='^^{OpaqueGrafPtr}'/>
<arg declared_type='Rect*' name='rp' type='^{Rect=ssss}'/>
<arg declared_type='GWorldFlags' name='flags' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCPositionDialog'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='id' type='s'/>
<arg declared_type='Point*' name='where' type='^{Point=ss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCPositionRect'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Rect*' name='rp' type='^{Rect=ssss}'/>
<arg declared_type='Point*' name='where' type='^{Point=ss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCRequestImageSettings'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCRequestSequenceSettings'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCSetCompressFlags'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCSetInfo'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='infoType' type='L'/>
<arg declared_type='void*' name='info' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCSetSettingsFromAtomContainer'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer' name='settings' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCSetTestImagePictFile'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='testFileRef' type='s'/>
<arg declared_type='Rect*' name='testRect' type='^{Rect=ssss}'/>
<arg declared_type='short' name='testFlags' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCSetTestImagePictHandle'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PicHandle' name='testPict' type='^^{Picture}'/>
<arg declared_type='Rect*' name='testRect' type='^{Rect=ssss}'/>
<arg declared_type='short' name='testFlags' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SCSetTestImagePixMap'>
<arg declared_type='ComponentInstance' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PixMapHandle' name='testPixMap' type='^^{PixMap}'/>
<arg declared_type='Rect*' name='testRect' type='^{Rect=ssss}'/>
<arg declared_type='short' name='testFlags' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGAddExtendedFrameReference'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SeqGrabExtendedFrameInfoPtr' name='frameInfo' type='^{SeqGrabExtendedFrameInfo={wide=Ii}ll^{ComponentInstanceRecord}l^{SGOutputRecord}}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGAddExtendedMovieData'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' name='p' type='*'/>
<arg declared_type='long' name='len' type='l'/>
<arg declared_type='wide*' name='offset' type='^{wide=Ii}'/>
<arg declared_type='long' name='chRefCon' type='l'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<arg declared_type='short' name='writeType' type='s'/>
<arg declared_type='SGOutput*' name='whichOutput' type='^^{SGOutputRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGAddFrame'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='bufferNum' type='s'/>
<arg declared_type='TimeValue' name='atTime' type='l'/>
<arg declared_type='TimeScale' name='scale' type='l'/>
<arg const='true' declared_type='SGCompressInfo*' name='ci' type='^{SGCompressInfo=*LCC}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGAddFrameReference'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SeqGrabFrameInfoPtr' name='frameInfo' type='^{SeqGrabFrameInfo=lll^{ComponentInstanceRecord}l}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGAddMovieData'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' name='p' type='*'/>
<arg declared_type='long' name='len' type='l'/>
<arg declared_type='long*' name='offset' type='^l'/>
<arg declared_type='long' name='chRefCon' type='l'/>
<arg declared_type='TimeValue' name='time' type='l'/>
<arg declared_type='short' name='writeType' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGAddOutputDataRefToMedia'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGOutput' name='sgOut' type='^{SGOutputRecord=[1l]}'/>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='SampleDescriptionHandle' name='desc' type='^^{SampleDescription}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGAlignChannelRect'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Rect*' name='r' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGAppendDeviceListToMenu'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGDeviceList' name='list' type='^^{SGDeviceListRecord}'/>
<arg declared_type='MenuRef' name='mh' type='^{OpaqueMenuRef=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGChangedSource'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGChannelGetCodecSettings'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='settings' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGChannelGetDataSourceName'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned char*' name='name' type='*'/>
<arg declared_type='ScriptCode*' name='scriptTag' type='^s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGChannelGetRequestedDataRate'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='bytesPerSecond' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGChannelPutPicture'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGChannelSetCodecSettings'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='settings' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGChannelSetDataSourceName'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ConstStr255Param' name='name' type='*'/>
<arg declared_type='ScriptCode' name='scriptTag' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGChannelSetRequestedDataRate'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='bytesPerSecond' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGCompressFrame'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='bufferNum' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGCompressFrameComplete'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='bufferNum' type='s'/>
<arg declared_type='Boolean*' name='done' type='^B'/>
<arg declared_type='SGCompressInfo*' name='ci' type='^{SGCompressInfo=*LCC}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGDisplayCompress'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' name='dataPtr' type='*'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='MatrixRecord*' name='mp' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' name='clipRgn' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGDisplayFrame'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='bufferNum' type='s'/>
<arg const='true' declared_type='MatrixRecord*' name='mp' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' name='clipRgn' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGDisposeChannel'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGDisposeDeviceList'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGDeviceList' name='list' type='^^{SGDeviceListRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGDisposeOutput'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGOutput' name='sgOut' type='^{SGOutputRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetAdditionalSoundRates'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='rates' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetAlignmentProc'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ICMAlignmentProcRecordPtr' name='alignmentProc' type='^{ICMAlignmentProcRecord=^?l}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetBufferInfo'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='bufferNum' type='s'/>
<arg declared_type='PixMapHandle*' name='bufferPM' type='^^^{PixMap}'/>
<arg declared_type='Rect*' name='bufferRect' type='^{Rect=ssss}'/>
<arg declared_type='GWorldPtr*' name='compressBuffer' type='^^{OpaqueGrafPtr}'/>
<arg declared_type='Rect*' name='compressBufferRect' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetChannelBounds'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Rect*' name='bounds' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetChannelClip'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RgnHandle*' name='theClip' type='^^{OpaqueRgnHandle}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetChannelDeviceAndInputNames'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned char*' name='outDeviceName' type='*'/>
<arg declared_type='unsigned char*' name='outInputName' type='*'/>
<arg declared_type='short*' name='outInputNumber' type='^s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetChannelDeviceList'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='selectionFlags' type='l'/>
<arg declared_type='SGDeviceList*' name='list' type='^^^{SGDeviceListRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetChannelInfo'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='channelInfo' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetChannelMatrix'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='MatrixRecord*' name='m' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetChannelMaxFrames'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='frameCount' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetChannelPlayFlags'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='playFlags' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetChannelRefCon'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='refCon' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetChannelSampleDescription'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='sampleDesc' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetChannelSettings'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UserData*' name='ud' type='^^^{UserDataRecord}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetChannelTimeBase'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeBase*' name='tb' type='^^{TimeBaseRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetChannelTimeScale'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeScale*' name='scale' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetChannelUsage'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='usage' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetChannelVolume'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' name='volume' type='^s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetCompressBuffer'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' name='depth' type='^s'/>
<arg declared_type='Rect*' name='compressSize' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetDataOutput'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='FSSpec*' name='movieFile' type='^{FSSpec=si[64C]}'/>
<arg declared_type='long*' name='whereFlags' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetDataOutputStorageSpaceRemaining'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGOutput' name='sgOut' type='^{SGOutputRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='space' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetDataOutputStorageSpaceRemaining64'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGOutput' name='sgOut' type='^{SGOutputRecord=[1l]}'/>
<arg declared_type='wide*' name='space' type='^{wide=Ii}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetDataRate'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='bytesPerSecond' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetDataRef'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='dataRef' type='^^*'/>
<arg declared_type='OSType*' name='dataRefType' type='^I'/>
<arg declared_type='long*' name='whereFlags' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetFlags'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='sgFlags' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetFrameRate'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Fixed*' name='frameRate' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetGWorld'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CGrafPtr*' name='gp' type='^^{OpaqueGrafPtr}'/>
<arg declared_type='GDHandle*' name='gd' type='^^^{GDevice}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetIndChannel'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='index' type='s'/>
<arg declared_type='SGChannel*' name='ref' type='^^{ComponentInstanceRecord}'/>
<arg declared_type='OSType*' name='chanType' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetInstrument'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ToneDescription*' name='td' type='^{ToneDescription={BigEndianOSType=I}[32C][32C]{BigEndianLong=l}{BigEndianLong=l}}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetLastMovieResID'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' name='resID' type='^s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetMaximumRecordTime'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='ticks' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetMode'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='previewMode' type='^B'/>
<arg declared_type='Boolean*' name='recordMode' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetMovie'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='Movie' type='^^{MovieType}'/>
</function>
<function name='SGGetNextExtendedFrameReference'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SeqGrabExtendedFrameInfoPtr' name='frameInfo' type='^{SeqGrabExtendedFrameInfo={wide=Ii}ll^{ComponentInstanceRecord}l^{SGOutputRecord}}'/>
<arg declared_type='TimeValue*' name='frameDuration' type='^i'/>
<arg declared_type='long*' name='frameNumber' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetNextFrameReference'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SeqGrabFrameInfoPtr' name='frameInfo' type='^{SeqGrabFrameInfo=lll^{ComponentInstanceRecord}l}'/>
<arg declared_type='TimeValue*' name='frameDuration' type='^i'/>
<arg declared_type='long*' name='frameNumber' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetOutputDataReference'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGOutput' name='sgOut' type='^{SGOutputRecord=[1l]}'/>
<arg declared_type='Handle*' name='dataRef' type='^^*'/>
<arg declared_type='OSType*' name='dataRefType' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetOutputMaximumOffset'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGOutput' name='sgOut' type='^{SGOutputRecord=[1l]}'/>
<arg declared_type='wide*' name='maxOffset' type='^{wide=Ii}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetOutputNextOutput'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGOutput' name='sgOut' type='^{SGOutputRecord=[1l]}'/>
<arg declared_type='SGOutput*' name='nextOut' type='^^{SGOutputRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetPause'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Byte*' name='paused' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetPreferredPacketSize'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='preferredPacketSizeInBytes' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetSettings'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UserData*' name='ud' type='^^^{UserDataRecord}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetSoundInputDriver'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='long' type='l'/>
</function>
<function name='SGGetSoundInputParameters'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' name='sampleSize' type='^s'/>
<arg declared_type='short*' name='numChannels' type='^s'/>
<arg declared_type='OSType*' name='compressionType' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetSoundInputRate'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='Fixed' type='l'/>
</function>
<function name='SGGetSoundRecordChunkSize'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='long' type='l'/>
</function>
<function name='SGGetSrcVideoBounds'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Rect*' name='r' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetStorageSpaceRemaining'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='bytes' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetStorageSpaceRemaining64'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='wide*' name='bytes' type='^{wide=Ii}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetTextReturnToSpaceValue'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' name='rettospace' type='^s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetTimeBase'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeBase*' name='tb' type='^^{TimeBaseRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetTimeRemaining'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='ticksLeft' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetUseScreenBuffer'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='useScreenBuffer' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetUserVideoCompressorList'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='compressorTypes' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetVideoBottlenecks'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='VideoBottles*' name='vb' type='^{VideoBottles=s^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetVideoCompressor'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' name='depth' type='^s'/>
<arg declared_type='CompressorComponent*' name='compressor' type='^^{ComponentRecord}'/>
<arg declared_type='CodecQ*' name='spatialQuality' type='^I'/>
<arg declared_type='CodecQ*' name='temporalQuality' type='^I'/>
<arg declared_type='long*' name='keyFrameRate' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetVideoCompressorType'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType*' name='compressorType' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGetVideoDigitizerComponent'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentInstance' type='^{ComponentInstanceRecord=[1l]}'/>
</function>
<function name='SGGetVideoRect'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Rect*' name='r' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGrabCompressComplete'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt8*' name='queuedFrameCount' type='*'/>
<arg declared_type='SGCompressInfo*' name='ci' type='^{SGCompressInfo=*LCC}'/>
<arg declared_type='TimeRecord*' name='tr' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGrabFrame'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='bufferNum' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGrabFrameComplete'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='bufferNum' type='s'/>
<arg declared_type='Boolean*' name='done' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGGrabPict'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PicHandle*' name='p' type='^^^{Picture}'/>
<arg const='true' declared_type='Rect*' name='bounds' type='^{Rect=ssss}'/>
<arg declared_type='short' name='offscreenDepth' type='s'/>
<arg declared_type='long' name='grabPictFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGHandleUpdateEvent'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='EventRecord*' name='event' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='Boolean*' name='handled' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGIdle'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGInitChannel'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SeqGrabComponent' name='owner' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGInitialize'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGNewChannel'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='channelType' type='L'/>
<arg declared_type='SGChannel*' name='ref' type='^^{ComponentInstanceRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGNewChannelFromComponent'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGChannel*' name='newChannel' type='^^{ComponentInstanceRecord}'/>
<arg declared_type='Component' name='sgChannelComponent' type='^{ComponentRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGNewOutput'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='long' name='whereFlags' type='l'/>
<arg declared_type='SGOutput*' name='sgOut' type='^^{SGOutputRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGPanelCanRun'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGPanelEvent'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='DialogRef' name='d' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='short' name='itemOffset' type='s'/>
<arg const='true' declared_type='EventRecord*' name='theEvent' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='short*' name='itemHit' type='^s'/>
<arg declared_type='Boolean*' name='handled' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGPanelGetDITLForSize'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='ditl' type='^^*'/>
<arg declared_type='Point*' name='requestedSize' type='^{Point=ss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGPanelGetDitl'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle*' name='ditl' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGPanelGetSettings'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UserData*' name='ud' type='^^^{UserDataRecord}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGPanelGetTitle'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned char*' name='title' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGPanelInstall'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='DialogRef' name='d' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='short' name='itemOffset' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGPanelItem'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='DialogRef' name='d' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='short' name='itemOffset' type='s'/>
<arg declared_type='short' name='itemNum' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGPanelRemove'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='DialogRef' name='d' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='short' name='itemOffset' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGPanelSetEventFilter'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGModalFilterUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg const='true' declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='long' name='refCon' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGPanelSetGrabber'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SeqGrabComponent' name='sg' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGPanelSetResFile'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='resRef' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGPanelSetSettings'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UserData' name='ud' type='^^{UserDataRecord}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGPanelValidateInput'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean*' name='ok' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGPause'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Byte' name='pause' type='C'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGPrepare'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean' name='prepareForPreview' type='B'/>
<arg declared_type='Boolean' name='prepareForRecord' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGRelease'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetAdditionalSoundRates'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='rates' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetChannelBounds'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='Rect*' name='bounds' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetChannelClip'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RgnHandle' name='theClip' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetChannelDevice'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='StringPtr' name='name' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetChannelDeviceInput'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='inInputNumber' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetChannelMatrix'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='MatrixRecord*' name='m' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetChannelMaxFrames'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='frameCount' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetChannelOutput'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGOutput' name='sgOut' type='^{SGOutputRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetChannelPlayFlags'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='playFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetChannelRefCon'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='refCon' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetChannelSettings'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UserData' name='ud' type='^^{UserDataRecord}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetChannelSettingsStateChanging'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='inFlags' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetChannelUsage'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='usage' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetChannelVolume'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='volume' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetCompressBuffer'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='depth' type='s'/>
<arg const='true' declared_type='Rect*' name='compressSize' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetDataOutput'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='FSSpec*' name='movieFile' type='^{FSSpec=si[64C]}'/>
<arg declared_type='long' name='whereFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetDataProc'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGDataUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='SGChannel' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' type='*'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long*' type='^l'/>
<arg declared_type='long' type='l'/>
<arg declared_type='TimeValue' type='l'/>
<arg declared_type='short' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='long' name='refCon' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetDataRef'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='long' name='whereFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetFlags'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='sgFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetFontName'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='StringPtr' name='pstr' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetFontSize'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='fontSize' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetFrameRate'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Fixed' name='frameRate' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetGWorld'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CGrafPtr' name='gp' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='GDHandle' name='gd' type='^^{GDevice}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetInstrument'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ToneDescription*' name='td' type='^{ToneDescription={BigEndianOSType=I}[32C][32C]{BigEndianLong=l}{BigEndianLong=l}}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetJustification'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='just' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetMaximumRecordTime'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long' name='ticks' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetOutputFlags'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGOutput' name='sgOut' type='^{SGOutputRecord=[1l]}'/>
<arg declared_type='long' name='whereFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetOutputMaximumOffset'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGOutput' name='sgOut' type='^{SGOutputRecord=[1l]}'/>
<arg const='true' declared_type='wide*' name='maxOffset' type='^{wide=Ii}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetOutputNextOutput'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGOutput' name='sgOut' type='^{SGOutputRecord=[1l]}'/>
<arg declared_type='SGOutput' name='nextOut' type='^{SGOutputRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetPreferredPacketSize'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='preferredPacketSizeInBytes' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetSettings'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UserData' name='ud' type='^^{UserDataRecord}'/>
<arg declared_type='long' name='flags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetSettingsSummary'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='summaryText' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetSoundInputDriver'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ConstStr255Param' name='driverName' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetSoundInputParameters'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='sampleSize' type='s'/>
<arg declared_type='short' name='numChannels' type='s'/>
<arg declared_type='OSType' name='compressionType' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetSoundInputRate'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Fixed' name='rate' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetSoundRecordChunkSize'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='seconds' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetTextBackColor'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RGBColor*' name='theColor' type='^{RGBColor=SSS}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetTextForeColor'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RGBColor*' name='theColor' type='^{RGBColor=SSS}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetTextReturnToSpaceValue'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='rettospace' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetUseScreenBuffer'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean' name='useScreenBuffer' type='B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetUserVideoCompressorList'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='compressorTypes' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetVideoBottlenecks'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='VideoBottles*' name='vb' type='^{VideoBottles=s^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetVideoCompressor'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='depth' type='s'/>
<arg declared_type='CompressorComponent' name='compressor' type='^{ComponentRecord=[1l]}'/>
<arg declared_type='CodecQ' name='spatialQuality' type='L'/>
<arg declared_type='CodecQ' name='temporalQuality' type='L'/>
<arg declared_type='long' name='keyFrameRate' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetVideoCompressorType'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='compressorType' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetVideoDigitizerComponent'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ComponentInstance' name='vdig' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSetVideoRect'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='Rect*' name='r' type='^{Rect=ssss}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSettingsDialog'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='numPanels' type='s'/>
<arg declared_type='ConstComponentListPtr' name='panelList' type='^^{ComponentRecord}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='SGModalFilterUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg const='true' declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='long' name='procRefNum' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSortDeviceList'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGDeviceList' name='list' type='^^{SGDeviceListRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGSoundInputDriverChanged'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGStartPreview'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGStartRecord'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGStop'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGTransferFrameForCompress'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='bufferNum' type='s'/>
<arg const='true' declared_type='MatrixRecord*' name='mp' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' name='clipRgn' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGUpdate'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RgnHandle' name='updateRgn' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGVideoDigitizerChanged'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGWriteExtendedMovieData'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' name='p' type='*'/>
<arg declared_type='long' name='len' type='l'/>
<arg declared_type='wide*' name='offset' type='^{wide=Ii}'/>
<arg declared_type='SGOutput*' name='sgOut' type='^^{SGOutputRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGWriteMovieData'>
<arg declared_type='SeqGrabComponent' name='s' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' name='p' type='*'/>
<arg declared_type='long' name='len' type='l'/>
<arg declared_type='long*' name='offset' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SGWriteSamples'>
<arg declared_type='SGChannel' name='c' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<arg declared_type='AliasHandle' name='theFile' type='^^{AliasRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SampleNumToMediaDecodeTime'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='SInt64' name='logicalSampleNum' type='q'/>
<arg declared_type='TimeValue64*' name='sampleDecodeTime' type='^q'/>
<arg declared_type='TimeValue64*' name='sampleDecodeDuration' type='^q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SampleNumToMediaDisplayTime'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='SInt64' name='logicalSampleNum' type='q'/>
<arg declared_type='TimeValue64*' name='sampleDisplayTime' type='^q'/>
<arg declared_type='TimeValue64*' name='sampleDisplayDuration' type='^q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SampleNumToMediaTime'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='long' name='logicalSampleNum' type='l'/>
<arg declared_type='TimeValue*' name='sampleTime' type='^i'/>
<arg declared_type='TimeValue*' name='sampleDuration' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ScaleMatrix'>
<arg declared_type='MatrixRecord*' name='m' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='Fixed' name='scaleX' type='l'/>
<arg declared_type='Fixed' name='scaleY' type='l'/>
<arg declared_type='Fixed' name='aboutX' type='l'/>
<arg declared_type='Fixed' name='aboutY' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ScaleMovieSegment'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeValue' name='startTime' type='l'/>
<arg declared_type='TimeValue' name='oldDuration' type='l'/>
<arg declared_type='TimeValue' name='newDuration' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ScaleTrackSegment'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='TimeValue' name='startTime' type='l'/>
<arg declared_type='TimeValue' name='oldDuration' type='l'/>
<arg declared_type='TimeValue' name='newDuration' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SelectMovieAlternates'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetAutoTrackAlternatesEnabled'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Boolean' name='enable' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetCSequenceDataRateParams'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='DataRateParamsPtr' name='params' type='^{DataRateParams=llllII}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetCSequenceFlushProc'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='ICMFlushProcRecordPtr' name='flushProc' type='^{ICMFlushProcRecord=^?l}'/>
<arg declared_type='long' name='bufferSize' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetCSequenceFrameNumber'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='long' name='frameNumber' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetCSequenceKeyFrameRate'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='long' name='keyFrameRate' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetCSequencePreferredPacketSize'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='long' name='preferredPacketSizeInBytes' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetCSequencePrev'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='PixMapHandle' name='prev' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='prevRect' type='^{Rect=ssss}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetCSequenceQuality'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='CodecQ' name='spatialQuality' type='L'/>
<arg declared_type='CodecQ' name='temporalQuality' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetCompressedPixMapInfo'>
<arg declared_type='PixMapPtr' name='pix' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='Ptr' name='data' type='*'/>
<arg declared_type='long' name='bufferSize' type='l'/>
<arg declared_type='ICMDataProcRecordPtr' name='dataProc' type='^{ICMDataProcRecord=^?l}'/>
<arg declared_type='ICMProgressProcRecordPtr' name='progressProc' type='^{ICMProgressProcRecord=^?l}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetDSequenceAccuracy'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='CodecQ' name='accuracy' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetDSequenceDataProc'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='ICMDataProcRecordPtr' name='dataProc' type='^{ICMDataProcRecord=^?l}'/>
<arg declared_type='long' name='bufferSize' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetDSequenceFlags'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='long' name='flagsMask' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetDSequenceMask'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='RgnHandle' name='mask' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetDSequenceMatrix'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='MatrixRecordPtr' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetDSequenceMatte'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='PixMapHandle' name='matte' type='^^{PixMap}'/>
<arg const='true' declared_type='Rect*' name='matteRect' type='^{Rect=ssss}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetDSequenceNonScheduledDisplayDirection'>
<arg declared_type='ImageSequence' name='sequence' type='l'/>
<arg declared_type='Fixed' name='rate' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetDSequenceNonScheduledDisplayTime'>
<arg declared_type='ImageSequence' name='sequence' type='l'/>
<arg declared_type='TimeValue64' name='displayTime' type='q'/>
<arg declared_type='TimeScale' name='displayTimeScale' type='l'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetDSequenceSrcRect'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetDSequenceTimeCode'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='void*' name='timeCodeFormat' type='^v'/>
<arg declared_type='void*' name='timeCodeTime' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetDSequenceTransferMode'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='short' name='mode' type='s'/>
<arg const='true' declared_type='RGBColor*' name='opColor' type='^{RGBColor=SSS}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetIdentityMatrix'>
<arg declared_type='MatrixRecord*' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetImageDescriptionCTable'>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='CTabHandle' name='ctable' type='^^{ColorTable}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetMediaDataHandler'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='short' name='index' type='s'/>
<arg declared_type='DataHandlerComponent' name='dataHandler' type='^{ComponentRecord=[1l]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetMediaDataRef'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='short' name='index' type='s'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetMediaDataRefAttributes'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='short' name='index' type='s'/>
<arg declared_type='long' name='dataRefAttributes' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetMediaDefaultDataRefIndex'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='short' name='index' type='s'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetMediaHandler'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='MediaHandlerComponent' name='mH' type='^{ComponentRecord=[1l]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetMediaInputMap'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='QTAtomContainer' name='inputMap' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetMediaLanguage'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='short' name='language' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMediaPlayHints'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='long' name='flagsMask' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMediaPreferredChunkSize'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='long' name='maxChunkSize' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetMediaPropertyAtom'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='QTAtomContainer' name='propertyAtom' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetMediaQuality'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='short' name='quality' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMediaSampleDescription'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='long' name='index' type='l'/>
<arg declared_type='SampleDescriptionHandle' name='descH' type='^^{SampleDescription}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetMediaShadowSync'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='long' name='frameDiffSampleNum' type='l'/>
<arg declared_type='long' name='syncSampleNum' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetMediaTimeScale'>
<arg declared_type='Media' name='theMedia' type='^^{MediaType}'/>
<arg declared_type='TimeScale' name='timeScale' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMovieActive'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Boolean' name='active' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMovieActiveSegment'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeValue' name='startTime' type='l'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMovieAnchorDataRef'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetMovieAudioBalance'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<arg declared_type='Float32' name='leftRight' type='f'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='SetMovieAudioContext'>
<arg declared_type='Movie' name='movie' type='^^{MovieType}'/>
<arg declared_type='QTAudioContextRef' name='audioContext' type='^{QTAudioContextRefType=}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='SetMovieAudioFrequencyMeteringNumBands'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<arg declared_type='FourCharCode' name='whatMixToMeter' type='L'/>
<arg declared_type='UInt32*' name='ioNumBands' type='^I'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='SetMovieAudioGain'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<arg declared_type='Float32' name='gain' type='f'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='SetMovieAudioMute'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<arg declared_type='Boolean' name='muted' type='B'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='SetMovieAudioVolumeMeteringEnabled'>
<arg declared_type='Movie' name='m' type='^^{MovieType}'/>
<arg declared_type='FourCharCode' name='whatMixToMeter' type='L'/>
<arg declared_type='Boolean' name='enabled' type='B'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='SetMovieBox'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg const='true' declared_type='Rect*' name='boxRect' type='^{Rect=ssss}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMovieClipRgn'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='RgnHandle' name='theClip' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMovieColorTable'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='CTabHandle' name='ctab' type='^^{ColorTable}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetMovieCoverProcs'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='MovieRgnCoverUPP' function_pointer='true' name='uncoverProc' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='MovieRgnCoverUPP' function_pointer='true' name='coverProc' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='long' name='refcon' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMovieDefaultDataRef'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetMovieDisplayClipRgn'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='RgnHandle' name='theClip' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMovieDrawingCompleteProc'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='MovieDrawingCompleteUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='long' name='refCon' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMovieGWorld'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='CGrafPtr' name='port' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='GDHandle' name='gdh' type='^^{GDevice}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMovieLanguage'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='long' name='language' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMovieMasterClock'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Component' name='clockMeister' type='^{ComponentRecord=[1l]}'/>
<arg const='true' declared_type='TimeRecord*' name='slaveZero' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMovieMasterTimeBase'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<arg const='true' declared_type='TimeRecord*' name='slaveZero' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMovieMatrix'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg const='true' declared_type='MatrixRecord*' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMoviePlayHints'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='long' name='flagsMask' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMoviePosterTime'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeValue' name='posterTime' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMoviePreferredRate'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Fixed' name='rate' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMoviePreferredVolume'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='short' name='volume' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMoviePreviewMode'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Boolean' name='usePreview' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMoviePreviewTime'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeValue' name='previewTime' type='l'/>
<arg declared_type='TimeValue' name='previewDuration' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMovieProgressProc'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='MovieProgressUPP' function_pointer='true' name='p' type='^?'>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Fixed' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='long' name='refcon' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMoviePropertyAtom'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='QTAtomContainer' name='propertyAtom' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetMovieRate'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='Fixed' name='rate' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMovieSelection'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeValue' name='selectionTime' type='l'/>
<arg declared_type='TimeValue' name='selectionDuration' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMovieTime'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg const='true' declared_type='TimeRecord*' name='newtime' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMovieTimeScale'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeScale' name='timeScale' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMovieTimeValue'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='TimeValue' name='newtime' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMovieVideoOutput'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='ComponentInstance' name='vout' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMovieVisualBrightness'>
<arg declared_type='Movie' name='movie' type='^^{MovieType}'/>
<arg declared_type='Float32' name='brightness' type='f'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='SetMovieVisualContext'>
<arg declared_type='Movie' name='movie' type='^^{MovieType}'/>
<arg declared_type='QTVisualContextRef' name='visualContext' type='^{OpaqueQTVisualContext=}'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='SetMovieVisualContrast'>
<arg declared_type='Movie' name='movie' type='^^{MovieType}'/>
<arg declared_type='Float32' name='contrast' type='f'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='SetMovieVisualHue'>
<arg declared_type='Movie' name='movie' type='^^{MovieType}'/>
<arg declared_type='Float32' name='hue' type='f'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='SetMovieVisualSaturation'>
<arg declared_type='Movie' name='movie' type='^^{MovieType}'/>
<arg declared_type='Float32' name='saturation' type='f'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='SetMovieVolume'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='short' name='volume' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetMoviesErrorProc'>
<arg declared_type='MoviesErrorUPP' function_pointer='true' name='errProc' type='^?'>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='long' name='refcon' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetPosterBox'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg const='true' declared_type='Rect*' name='boxRect' type='^{Rect=ssss}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetQuickTimePreference'>
<arg declared_type='OSType' name='preferenceType' type='L'/>
<arg declared_type='QTAtomContainer' name='preferenceAtom' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetSequenceProgressProc'>
<arg declared_type='ImageSequence' name='seqID' type='l'/>
<arg declared_type='ICMProgressProcRecord*' name='progressProc' type='^{ICMProgressProcRecord=^?l}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetSpriteProperty'>
<arg declared_type='Sprite' name='theSprite' type='^{SpriteRecord=}'/>
<arg declared_type='long' name='propertyType' type='l'/>
<arg declared_type='void*' name='propertyValue' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetSpriteWorldClip'>
<arg declared_type='SpriteWorld' name='theSpriteWorld' type='^{SpriteWorldRecord=}'/>
<arg declared_type='RgnHandle' name='clipRgn' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetSpriteWorldFlags'>
<arg declared_type='SpriteWorld' name='spriteWorld' type='^{SpriteWorldRecord=}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='long' name='flagsMask' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetSpriteWorldGraphicsMode'>
<arg declared_type='SpriteWorld' name='theSpriteWorld' type='^{SpriteWorldRecord=}'/>
<arg declared_type='long' name='mode' type='l'/>
<arg const='true' declared_type='RGBColor*' name='opColor' type='^{RGBColor=SSS}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetSpriteWorldMatrix'>
<arg declared_type='SpriteWorld' name='theSpriteWorld' type='^{SpriteWorldRecord=}'/>
<arg const='true' declared_type='MatrixRecord*' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetTimeBaseFlags'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<arg declared_type='long' name='timeBaseFlags' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetTimeBaseMasterClock'>
<arg declared_type='TimeBase' name='slave' type='^{TimeBaseRecord=}'/>
<arg declared_type='Component' name='clockMeister' type='^{ComponentRecord=[1l]}'/>
<arg const='true' declared_type='TimeRecord*' name='slaveZero' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetTimeBaseMasterTimeBase'>
<arg declared_type='TimeBase' name='slave' type='^{TimeBaseRecord=}'/>
<arg declared_type='TimeBase' name='master' type='^{TimeBaseRecord=}'/>
<arg const='true' declared_type='TimeRecord*' name='slaveZero' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetTimeBaseOffsetTimeBase'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<arg declared_type='TimeBase' name='offsettb' type='^{TimeBaseRecord=}'/>
<arg const='true' declared_type='TimeRecord*' name='offsetZero' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetTimeBaseRate'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<arg declared_type='Fixed' name='r' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetTimeBaseStartTime'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<arg const='true' declared_type='TimeRecord*' name='tr' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetTimeBaseStopTime'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<arg const='true' declared_type='TimeRecord*' name='tr' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetTimeBaseTime'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<arg const='true' declared_type='TimeRecord*' name='tr' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetTimeBaseValue'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<arg declared_type='TimeValue' name='t' type='l'/>
<arg declared_type='TimeScale' name='s' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetTimeBaseZero'>
<arg declared_type='TimeBase' name='tb' type='^{TimeBaseRecord=}'/>
<arg declared_type='TimeRecord*' name='zero' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetTrackAlternate'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='Track' name='alternateT' type='^^{TrackType}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetTrackApertureModeDimensionsUsingSampleDescription'>
<arg declared_type='Track' name='track' type='^^{TrackType}'/>
<arg declared_type='SampleDescriptionHandle' name='sampleDesc' type='^^{SampleDescription}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetTrackAudioGain'>
<arg declared_type='Track' name='t' type='^^{TrackType}'/>
<arg declared_type='Float32' name='gain' type='f'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='SetTrackAudioMute'>
<arg declared_type='Track' name='t' type='^^{TrackType}'/>
<arg declared_type='Boolean' name='muted' type='B'/>
<arg declared_type='UInt32' name='flags' type='L'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='SetTrackAudioVolumeMeteringEnabled'>
<arg declared_type='Track' name='t' type='^^{TrackType}'/>
<arg declared_type='Boolean' name='enabled' type='B'/>
<retval declared_type='OSStatus' type='l'/>
</function>
<function name='SetTrackClipRgn'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='RgnHandle' name='theClip' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetTrackDimensions'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='Fixed' name='width' type='l'/>
<arg declared_type='Fixed' name='height' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetTrackEnabled'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='Boolean' name='isEnabled' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetTrackGWorld'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='CGrafPtr' name='port' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='GDHandle' name='gdh' type='^^{GDevice}'/>
<arg declared_type='TrackTransferUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='Track' type='^^{TrackType}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='long' name='refCon' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetTrackLayer'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='short' name='layer' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetTrackLoadSettings'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='TimeValue' name='preloadTime' type='l'/>
<arg declared_type='TimeValue' name='preloadDuration' type='l'/>
<arg declared_type='long' name='preloadFlags' type='l'/>
<arg declared_type='long' name='defaultHints' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetTrackMatrix'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg const='true' declared_type='MatrixRecord*' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetTrackMatte'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='PixMapHandle' name='theMatte' type='^^{PixMap}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetTrackOffset'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='TimeValue' name='movieOffsetTime' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetTrackReference'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='Track' name='refTrack' type='^^{TrackType}'/>
<arg declared_type='OSType' name='refType' type='L'/>
<arg declared_type='long' name='index' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetTrackSoundLocalizationSettings'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='Handle' name='settings' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetTrackUsage'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='long' name='usage' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetTrackVolume'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='short' name='volume' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SetUserDataItem'>
<arg declared_type='UserData' name='theUserData' type='^^{UserDataRecord}'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='long' name='size' type='l'/>
<arg declared_type='OSType' name='udType' type='L'/>
<arg declared_type='long' name='index' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ShowMovieInformation'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='ModalFilterUPP' function_pointer='true' name='filterProc' type='^?'>
<arg declared_type='DialogRef' type='^{OpaqueDialogPtr=}'/>
<arg declared_type='EventRecord*' type='^{EventRecord=SLI{Point=ss}S}'/>
<arg declared_type='DialogItemIndex*' type='^s'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='long' name='refCon' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ShowMoviePoster'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SkewMatrix'>
<arg declared_type='MatrixRecord*' name='m' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='Fixed' name='skewX' type='l'/>
<arg declared_type='Fixed' name='skewY' type='l'/>
<arg declared_type='Fixed' name='aboutX' type='l'/>
<arg declared_type='Fixed' name='aboutY' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SpriteHitTest'>
<arg declared_type='Sprite' name='theSprite' type='^{SpriteRecord=}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='Point' name='loc' type='{Point=ss}'/>
<arg declared_type='Boolean*' name='wasHit' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SpriteMediaCountImages'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' name='numImages' type='^s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaCountSprites'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' name='numSprites' type='^s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaDisposeImage'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='imageIndex' type='s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaDisposeSprite'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomID' name='spriteID' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaGetActionVariable'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomID' name='variableID' type='l'/>
<arg declared_type='float*' name='value' type='^f'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaGetActionVariableAsString'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomID' name='variableID' type='l'/>
<arg declared_type='Handle*' name='theCString' type='^^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaGetDisplayedSampleNumber'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='sampleNum' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaGetImageName'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='imageIndex' type='s'/>
<arg declared_type='unsigned char*' name='imageName' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaGetIndImageDescription'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='imageIndex' type='s'/>
<arg declared_type='ImageDescriptionHandle' name='imageDescription' type='^^{ImageDescription}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaGetIndImageProperty'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='imageIndex' type='s'/>
<arg declared_type='long' name='imagePropertyType' type='l'/>
<arg declared_type='void*' name='imagePropertyValue' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaGetProperty'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='spriteIndex' type='s'/>
<arg declared_type='long' name='propertyType' type='l'/>
<arg declared_type='void*' name='propertyValue' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaGetSpriteActionsForQTEvent'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTEventRecordPtr' name='event' type='^{QTEventRecord=lI{Point=ss}lllll}'/>
<arg declared_type='QTAtomID' name='spriteID' type='l'/>
<arg declared_type='QTAtomContainer*' name='container' type='^^*'/>
<arg declared_type='QTAtom*' name='atom' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaGetSpriteName'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomID' name='spriteID' type='l'/>
<arg declared_type='unsigned char*' name='spriteName' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaGetSpriteProperty'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomID' name='spriteID' type='l'/>
<arg declared_type='long' name='propertyType' type='l'/>
<arg declared_type='void*' name='propertyValue' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaHitTestAllSprites'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='Point' name='loc' type='{Point=ss}'/>
<arg declared_type='QTAtomID*' name='spriteHitID' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaHitTestOneSprite'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomID' name='spriteID' type='l'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='Point' name='loc' type='{Point=ss}'/>
<arg declared_type='Boolean*' name='wasHit' type='^B'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaHitTestSprites'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='Point' name='loc' type='{Point=ss}'/>
<arg declared_type='short*' name='spriteHitIndex' type='^s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaImageIDToIndex'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomID' name='imageID' type='l'/>
<arg declared_type='short*' name='imageIndex' type='^s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaImageIndexToID'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='imageIndex' type='s'/>
<arg declared_type='QTAtomID*' name='imageID' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaNewImage'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='QTAtomID' name='desiredID' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaNewSprite'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTRuntimeSpriteDescPtr' name='newSpriteDesc' type='^{QTRuntimeSpriteDescStruct=lis{MatrixRecord=[3[3l]]}ss{ModifierTrackGraphicsModeRecord=l{RGBColor=SSS}}i}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaSetActionVariable'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomID' name='variableID' type='l'/>
<arg const='true' declared_type='float*' name='value' type='^f'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaSetActionVariableToString'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomID' name='variableID' type='l'/>
<arg declared_type='Ptr' name='theCString' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaSetProperty'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='spriteIndex' type='s'/>
<arg declared_type='long' name='propertyType' type='l'/>
<arg declared_type='void*' name='propertyValue' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaSetSpriteProperty'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomID' name='spriteID' type='l'/>
<arg declared_type='long' name='propertyType' type='l'/>
<arg declared_type='void*' name='propertyValue' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaSpriteIDToIndex'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomID' name='spriteID' type='l'/>
<arg declared_type='short*' name='spriteIndex' type='^s'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteMediaSpriteIndexToID'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='spriteIndex' type='s'/>
<arg declared_type='QTAtomID*' name='spriteID' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='SpriteWorldHitTest'>
<arg declared_type='SpriteWorld' name='theSpriteWorld' type='^{SpriteWorldRecord=}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='Point' name='loc' type='{Point=ss}'/>
<arg declared_type='Sprite*' name='spriteHit' type='^^{SpriteRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SpriteWorldIdle'>
<arg declared_type='SpriteWorld' name='theSpriteWorld' type='^{SpriteWorldRecord=}'/>
<arg declared_type='long' name='flagsIn' type='l'/>
<arg declared_type='long*' name='flagsOut' type='^l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='StartMovie'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='StdPix'>
<arg declared_type='PixMapPtr' name='src' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='MatrixRecordPtr' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='short' name='mode' type='s'/>
<arg declared_type='RgnHandle' name='mask' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='PixMapPtr' name='matte' type='^{PixMap=*s{Rect=ssss}ssiiissssI^^{ColorTable}^v}'/>
<arg const='true' declared_type='Rect*' name='matteRect' type='^{Rect=ssss}'/>
<arg declared_type='short' name='flags' type='s'/>
<retval declared_type='void' type='v'/>
</function>
<function name='StopMovie'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='SubtractTime'>
<arg declared_type='TimeRecord*' name='dst' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<arg const='true' declared_type='TimeRecord*' name='src' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TCFrameNumberToTimeCode'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='frameNumber' type='l'/>
<arg declared_type='TimeCodeDef*' name='tcdef' type='^{TimeCodeDef=iiiCC}'/>
<arg declared_type='TimeCodeRecord*' name='tcrec' type='^(TimeCodeRecord={TimeCodeTime=CCCC}{TimeCodeCounter=l})'/>
<retval declared_type='HandlerError' type='l'/>
</function>
<function name='TCFrameNumberToTimeCodeCounter'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='SInt64*' name='frameNumber' type='^q'/>
<arg const='true' declared_type='TimeCodeDef*' name='tCDef' type='^{TimeCodeDef=iiiCC}'/>
<arg declared_type='TimeCode64Counter*' name='outTCCounter' type='^q'/>
<retval declared_type='HandlerError' type='l'/>
</function>
<function name='TCFrameNumberToTimeCodeTime'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='SInt64*' name='frameNumber' type='^q'/>
<arg const='true' declared_type='TimeCodeDef*' name='tCDef' type='^{TimeCodeDef=iiiCC}'/>
<arg declared_type='SMPTETime*' name='outTCTime' type='^{SMPTETime=ssIIIssss}'/>
<retval declared_type='HandlerError' type='l'/>
</function>
<function name='TCGetCurrentFrameAndTimeCodeDef'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='SInt64*' name='outFrameNum' type='^q'/>
<arg declared_type='TimeCodeDef*' name='outTCDef' type='^{TimeCodeDef=iiiCC}'/>
<retval declared_type='HandlerError' type='l'/>
</function>
<function name='TCGetCurrentTimeCode'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='frameNum' type='^l'/>
<arg declared_type='TimeCodeDef*' name='tcdef' type='^{TimeCodeDef=iiiCC}'/>
<arg declared_type='TimeCodeRecord*' name='tcrec' type='^(TimeCodeRecord={TimeCodeTime=CCCC}{TimeCodeCounter=l})'/>
<arg declared_type='UserData*' name='srcRefH' type='^^^{UserDataRecord}'/>
<retval declared_type='HandlerError' type='l'/>
</function>
<function name='TCGetDisplayOptions'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TCTextOptionsPtr' name='textOptions' type='^{TCTextOptions=ssss{RGBColor=SSS}{RGBColor=SSS}}'/>
<retval declared_type='HandlerError' type='l'/>
</function>
<function name='TCGetFrameAndTimeCodeDefAtTime'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='TimeValue64*' name='mediaTime' type='^q'/>
<arg declared_type='SInt64*' name='outFrameNum' type='^q'/>
<arg declared_type='TimeCodeDef*' name='outTCDef' type='^{TimeCodeDef=iiiCC}'/>
<retval declared_type='HandlerError' type='l'/>
</function>
<function name='TCGetSourceRef'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeCodeDescriptionHandle' name='tcdH' type='^^{TimeCodeDescription}'/>
<arg declared_type='UserData*' name='srefH' type='^^^{UserDataRecord}'/>
<retval declared_type='HandlerError' type='l'/>
</function>
<function name='TCGetTimeCodeAtTime'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeValue' name='mediaTime' type='l'/>
<arg declared_type='long*' name='frameNum' type='^l'/>
<arg declared_type='TimeCodeDef*' name='tcdef' type='^{TimeCodeDef=iiiCC}'/>
<arg declared_type='TimeCodeRecord*' name='tcdata' type='^(TimeCodeRecord={TimeCodeTime=CCCC}{TimeCodeCounter=l})'/>
<arg declared_type='UserData*' name='srcRefH' type='^^^{UserDataRecord}'/>
<retval declared_type='HandlerError' type='l'/>
</function>
<function name='TCGetTimeCodeFlags'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='flags' type='^l'/>
<retval declared_type='HandlerError' type='l'/>
</function>
<function name='TCSetDisplayOptions'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TCTextOptionsPtr' name='textOptions' type='^{TCTextOptions=ssss{RGBColor=SSS}{RGBColor=SSS}}'/>
<retval declared_type='HandlerError' type='l'/>
</function>
<function name='TCSetSourceRef'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeCodeDescriptionHandle' name='tcdH' type='^^{TimeCodeDescription}'/>
<arg declared_type='UserData' name='srefH' type='^^{UserDataRecord}'/>
<retval declared_type='HandlerError' type='l'/>
</function>
<function name='TCSetTimeCodeFlags'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='long' name='flagsMask' type='l'/>
<retval declared_type='HandlerError' type='l'/>
</function>
<function name='TCTimeCodeCounterToFrameNumber'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='TimeCodeDef*' name='tCDef' type='^{TimeCodeDef=iiiCC}'/>
<arg const='true' declared_type='TimeCode64Counter*' name='tCCounter' type='^q'/>
<arg declared_type='SInt64*' name='outFrameNum' type='^q'/>
<retval declared_type='HandlerError' type='l'/>
</function>
<function name='TCTimeCodeCounterToString'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='TimeCodeDef*' name='tCDef' type='^{TimeCodeDef=iiiCC}'/>
<arg const='true' declared_type='TimeCode64Counter*' name='tCCounter' type='^q'/>
<arg declared_type='CFStringRef*' name='outTCStr' type='^^{__CFString}'/>
<retval declared_type='HandlerError' type='l'/>
</function>
<function name='TCTimeCodeTimeToFrameNumber'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='TimeCodeDef*' name='tCDef' type='^{TimeCodeDef=iiiCC}'/>
<arg const='true' declared_type='SMPTETime*' name='tCTime' type='^{SMPTETime=ssIIIssss}'/>
<arg declared_type='SInt64*' name='outFrameNum' type='^q'/>
<retval declared_type='HandlerError' type='l'/>
</function>
<function name='TCTimeCodeTimeToString'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='TimeCodeDef*' name='tCDef' type='^{TimeCodeDef=iiiCC}'/>
<arg const='true' declared_type='SMPTETime*' name='tCTime' type='^{SMPTETime=ssIIIssss}'/>
<arg declared_type='CFStringRef*' name='outTCStr' type='^^{__CFString}'/>
<retval declared_type='HandlerError' type='l'/>
</function>
<function name='TCTimeCodeToFrameNumber'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeCodeDef*' name='tcdef' type='^{TimeCodeDef=iiiCC}'/>
<arg declared_type='TimeCodeRecord*' name='tcrec' type='^(TimeCodeRecord={TimeCodeTime=CCCC}{TimeCodeCounter=l})'/>
<arg declared_type='long*' name='frameNumber' type='^l'/>
<retval declared_type='HandlerError' type='l'/>
</function>
<function name='TCTimeCodeToString'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeCodeDef*' name='tcdef' type='^{TimeCodeDef=iiiCC}'/>
<arg declared_type='TimeCodeRecord*' name='tcrec' type='^(TimeCodeRecord={TimeCodeTime=CCCC}{TimeCodeCounter=l})'/>
<arg declared_type='StringPtr' name='tcStr' type='*'/>
<retval declared_type='HandlerError' type='l'/>
</function>
<function name='TerminateQTS'>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='TextExportGetDisplayData'>
<arg declared_type='TextExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TextDisplayData*' name='textDisplay' type='^{TextDisplayData=ll{RGBColor=SSS}{Rect=ssss}ss{RGBColor=SSS}Bci{Point=ss}s}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TextExportGetSettings'>
<arg declared_type='TextExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='setting' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TextExportGetTimeFraction'>
<arg declared_type='TextExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='movieTimeFraction' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TextExportSetSettings'>
<arg declared_type='TextExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='setting' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TextExportSetTimeFraction'>
<arg declared_type='TextExportComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='movieTimeFraction' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TextMediaAddHiliteSample'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='hiliteStart' type='s'/>
<arg declared_type='short' name='hiliteEnd' type='s'/>
<arg declared_type='RGBColor*' name='rgbHiliteColor' type='^{RGBColor=SSS}'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<arg declared_type='TimeValue*' name='sampleTime' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TextMediaAddTESample'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TEHandle' name='hTE' type='^^{TERec}'/>
<arg declared_type='RGBColor*' name='backColor' type='^{RGBColor=SSS}'/>
<arg declared_type='short' name='textJustification' type='s'/>
<arg declared_type='Rect*' name='textBox' type='^{Rect=ssss}'/>
<arg declared_type='long' name='displayFlags' type='l'/>
<arg declared_type='TimeValue' name='scrollDelay' type='l'/>
<arg declared_type='short' name='hiliteStart' type='s'/>
<arg declared_type='short' name='hiliteEnd' type='s'/>
<arg declared_type='RGBColor*' name='rgbHiliteColor' type='^{RGBColor=SSS}'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<arg declared_type='TimeValue*' name='sampleTime' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TextMediaAddTextSample'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' name='text' type='*'/>
<arg declared_type='unsigned long' name='size' type='L'/>
<arg declared_type='short' name='fontNumber' type='s'/>
<arg declared_type='short' name='fontSize' type='s'/>
<arg declared_type='Style' name='textFace' type='C'/>
<arg declared_type='RGBColor*' name='textColor' type='^{RGBColor=SSS}'/>
<arg declared_type='RGBColor*' name='backColor' type='^{RGBColor=SSS}'/>
<arg declared_type='short' name='textJustification' type='s'/>
<arg declared_type='Rect*' name='textBox' type='^{Rect=ssss}'/>
<arg declared_type='long' name='displayFlags' type='l'/>
<arg declared_type='TimeValue' name='scrollDelay' type='l'/>
<arg declared_type='short' name='hiliteStart' type='s'/>
<arg declared_type='short' name='hiliteEnd' type='s'/>
<arg declared_type='RGBColor*' name='rgbHiliteColor' type='^{RGBColor=SSS}'/>
<arg declared_type='TimeValue' name='duration' type='l'/>
<arg declared_type='TimeValue*' name='sampleTime' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TextMediaDrawRaw'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='GWorldPtr' name='gw' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='GDHandle' name='gd' type='^^{GDevice}'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='long' name='dataSize' type='l'/>
<arg declared_type='TextDescriptionHandle' name='tdh' type='^^{TextDescription}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TextMediaFindNextText'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' name='text' type='*'/>
<arg declared_type='long' name='size' type='l'/>
<arg declared_type='short' name='findFlags' type='s'/>
<arg declared_type='TimeValue' name='startTime' type='l'/>
<arg declared_type='TimeValue*' name='foundTime' type='^i'/>
<arg declared_type='TimeValue*' name='foundDuration' type='^i'/>
<arg declared_type='long*' name='offset' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TextMediaGetTextProperty'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeValue' name='atMediaTime' type='l'/>
<arg declared_type='long' name='propertyType' type='l'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='long' name='dataSize' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TextMediaHiliteTextSample'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeValue' name='sampleTime' type='l'/>
<arg declared_type='short' name='hiliteStart' type='s'/>
<arg declared_type='short' name='hiliteEnd' type='s'/>
<arg declared_type='RGBColor*' name='rgbHiliteColor' type='^{RGBColor=SSS}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TextMediaRawIdle'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='GWorldPtr' name='gw' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='GDHandle' name='gd' type='^^{GDevice}'/>
<arg declared_type='TimeValue' name='sampleTime' type='l'/>
<arg declared_type='long' name='flagsIn' type='l'/>
<arg declared_type='long*' name='flagsOut' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TextMediaRawSetup'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='GWorldPtr' name='gw' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='GDHandle' name='gd' type='^^{GDevice}'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='long' name='dataSize' type='l'/>
<arg declared_type='TextDescriptionHandle' name='tdh' type='^^{TextDescription}'/>
<arg declared_type='TimeValue' name='sampleDuration' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TextMediaSetTextProc'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TextMediaUPP' function_pointer='true' name='TextProc' type='^?'>
<arg declared_type='Handle' type='^*'/>
<arg declared_type='Movie' type='^^{MovieType}'/>
<arg declared_type='short*' type='^s'/>
<arg declared_type='long' type='l'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='long' name='refcon' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TextMediaSetTextProperty'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeValue' name='atMediaTime' type='l'/>
<arg declared_type='long' name='propertyType' type='l'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='long' name='dataSize' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TextMediaSetTextSampleData'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='OSType' name='dataType' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TrackTimeToMediaDisplayTime'>
<arg declared_type='TimeValue64' name='value' type='q'/>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='TimeValue64' type='q'/>
</function>
<function name='TrackTimeToMediaTime'>
<arg declared_type='TimeValue' name='value' type='l'/>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<retval declared_type='TimeValue' type='l'/>
</function>
<function name='TransformFixedPoints'>
<arg const='true' declared_type='MatrixRecord*' name='m' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='FixedPoint*' name='fpt' type='^{FixedPoint=ii}'/>
<arg declared_type='long' name='count' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='TransformFixedRect'>
<arg const='true' declared_type='MatrixRecord*' name='m' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='FixedRect*' name='fr' type='^{FixedRect=iiii}'/>
<arg declared_type='FixedPoint*' name='fpp' type='^{FixedPoint=ii}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='TransformPoints'>
<arg const='true' declared_type='MatrixRecord*' name='mp' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='Point*' name='pt1' type='^{Point=ss}'/>
<arg declared_type='long' name='count' type='l'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='TransformRect'>
<arg const='true' declared_type='MatrixRecord*' name='m' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='Rect*' name='r' type='^{Rect=ssss}'/>
<arg declared_type='FixedPoint*' name='fpp' type='^{FixedPoint=ii}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='TransformRgn'>
<arg declared_type='MatrixRecordPtr' name='matrix' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' name='rgn' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='TranslateMatrix'>
<arg declared_type='MatrixRecord*' name='m' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='Fixed' name='deltaH' type='l'/>
<arg declared_type='Fixed' name='deltaV' type='l'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TrimImage'>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<arg declared_type='Ptr' name='inData' type='*'/>
<arg declared_type='long' name='inBufferSize' type='l'/>
<arg declared_type='ICMDataProcRecordPtr' name='dataProc' type='^{ICMDataProcRecord=^?l}'/>
<arg declared_type='Ptr' name='outData' type='*'/>
<arg declared_type='long' name='outBufferSize' type='l'/>
<arg declared_type='ICMFlushProcRecordPtr' name='flushProc' type='^{ICMFlushProcRecord=^?l}'/>
<arg declared_type='Rect*' name='trimRect' type='^{Rect=ssss}'/>
<arg declared_type='ICMProgressProcRecordPtr' name='progressProc' type='^{ICMProgressProcRecord=^?l}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='TuneGetIndexedNoteChannel'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='i' type='l'/>
<arg declared_type='NoteChannel*' name='nc' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TuneGetNoteAllocator'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='NoteAllocator' type='^{ComponentInstanceRecord=[1l]}'/>
</function>
<function name='TuneGetPartMix'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long' name='partNumber' type='L'/>
<arg declared_type='long*' name='volumeOut' type='^l'/>
<arg declared_type='long*' name='balanceOut' type='^l'/>
<arg declared_type='long*' name='mixFlagsOut' type='^l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TuneGetStatus'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TuneStatus*' name='status' type='^{TuneStatus=^L^Lissi[3l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TuneGetTimeBase'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeBase*' name='tb' type='^^{TimeBaseRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TuneGetTimeScale'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeScale*' name='scale' type='^i'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TuneGetVolume'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TuneInstant'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='tune' type='^L'/>
<arg declared_type='unsigned long' name='tunePosition' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TunePreroll'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TuneQueue'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='tune' type='^L'/>
<arg declared_type='Fixed' name='tuneRate' type='l'/>
<arg declared_type='unsigned long' name='tuneStartPosition' type='L'/>
<arg declared_type='unsigned long' name='tuneStopPosition' type='L'/>
<arg declared_type='unsigned long' name='queueFlags' type='L'/>
<arg declared_type='TuneCallBackUPP' function_pointer='true' name='callBackProc' type='^?'>
<arg const='true' declared_type='TuneStatus*' type='^{TuneStatus=^L^Lissi[3l]}'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='long' name='refCon' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TuneSetBalance'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='balance' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TuneSetHeader'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='header' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TuneSetHeaderWithSize'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='header' type='^L'/>
<arg declared_type='unsigned long' name='size' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TuneSetNoteChannels'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long' name='count' type='L'/>
<arg declared_type='NoteChannel*' name='noteChannelList' type='^i'/>
<arg declared_type='TunePlayCallBackUPP' function_pointer='true' name='playCallBackProc' type='^?'>
<arg declared_type='unsigned long*' type='^L'/>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='long' name='refCon' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TuneSetPartMix'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long' name='partNumber' type='L'/>
<arg declared_type='long' name='volume' type='l'/>
<arg declared_type='long' name='balance' type='l'/>
<arg declared_type='long' name='mixFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TuneSetPartTranspose'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long' name='part' type='L'/>
<arg declared_type='long' name='transpose' type='l'/>
<arg declared_type='long' name='velocityShift' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TuneSetSofter'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='softer' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TuneSetSoundLocalization'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='data' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TuneSetTimeScale'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeScale' name='scale' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TuneSetVolume'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Fixed' name='volume' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TuneStop'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='stopFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TuneTask'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TuneUnroll'>
<arg declared_type='TunePlayer' name='tp' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TweenerDoTween'>
<arg declared_type='TweenerComponent' name='tc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TweenRecord*' name='tr' type='^{TweenRecord=l^*iii^?^v^v}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TweenerInitialize'>
<arg declared_type='TweenerComponent' name='tc' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<arg declared_type='QTAtom' name='tweenAtom' type='l'/>
<arg declared_type='QTAtom' name='dataAtom' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='TweenerReset'>
<arg declared_type='TweenerComponent' name='tc' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='UnsignedFixMulDiv'>
<arg declared_type='Fixed' name='src' type='l'/>
<arg declared_type='Fixed' name='mul' type='l'/>
<arg declared_type='Fixed' name='divisor' type='l'/>
<retval declared_type='Fixed' type='l'/>
</function>
<function name='UpdateMovie'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='UpdateMovieInStorage'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='DataHandler' name='dh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='UpdateMovieResource'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='short' name='resRefNum' type='s'/>
<arg declared_type='short' name='resId' type='s'/>
<arg declared_type='ConstStr255Param' name='resName' type='*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='UseMovieEditState'>
<arg declared_type='Movie' name='theMovie' type='^^{MovieType}'/>
<arg declared_type='MovieEditState' name='toState' type='^^{MovieStateRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='UseTrackEditState'>
<arg declared_type='Track' name='theTrack' type='^^{TrackType}'/>
<arg declared_type='TrackEditState' name='state' type='^^{TrackStateRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='VDAddKeyColor'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='index' type='^l'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDCaptureStateChanging'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='inStateFlags' type='L'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDClearClipRgn'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RgnHandle' name='clipRegion' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDCompressDone'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt8*' name='queuedFrameCount' type='*'/>
<arg declared_type='Ptr*' name='theData' type='^*'/>
<arg declared_type='long*' name='dataSize' type='^l'/>
<arg declared_type='UInt8*' name='similarity' type='*'/>
<arg declared_type='TimeRecord*' name='t' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDCompressOneFrameAsync'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDCopyPreferredAudioDevice'>
<arg declared_type='ComponentInstance' name='vdig' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CFStringRef*' name='outAudioDeviceUID' type='^^{__CFString}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='VDDone'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='buffer' type='s'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetActiveSrcRect'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='inputStd' type='s'/>
<arg declared_type='Rect*' name='activeSrcRect' type='^{Rect=ssss}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetBlackLevelValue'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned short*' name='blackLevel' type='^S'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetBrightness'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned short*' name='brightness' type='^S'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetCLUTInUse'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CTabHandle*' name='colorTableHandle' type='^^^{ColorTable}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetClipState'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' name='clipEnable' type='^s'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetCompressionTime'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='compressionType' type='L'/>
<arg declared_type='short' name='depth' type='s'/>
<arg declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg declared_type='CodecQ*' name='spatialQuality' type='^I'/>
<arg declared_type='CodecQ*' name='temporalQuality' type='^I'/>
<arg declared_type='unsigned long*' name='compressTime' type='^L'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetCompressionTypes'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='VDCompressionListHandle' name='h' type='^^{VDCompressionList}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetContrast'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned short*' name='contrast' type='^S'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetCurrentFlags'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='inputCurrentFlag' type='^l'/>
<arg declared_type='long*' name='outputCurrentFlag' type='^l'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetDMADepths'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='depthArray' type='^l'/>
<arg declared_type='long*' name='preferredDepth' type='^l'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetDataRate'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='milliSecPerFrame' type='^l'/>
<arg declared_type='Fixed*' name='framesPerSecond' type='^i'/>
<arg declared_type='long*' name='bytesPerSecond' type='^l'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetDeviceNameAndFlags'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned char*' name='outName' type='*'/>
<arg declared_type='UInt32*' name='outNameFlags' type='^I'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetDigitizerInfo'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='DigitizerInfo*' name='info' type='^{DigitizerInfo=slllls^^{GDevice}^^{GDevice}sssssl}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetDigitizerRect'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Rect*' name='digitizerRect' type='^{Rect=ssss}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetFieldPreference'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' name='fieldFlag' type='^s'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetHue'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned short*' name='hue' type='^S'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetImageDescription'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ImageDescriptionHandle' name='desc' type='^^{ImageDescription}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetInput'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' name='input' type='^s'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetInputColorSpaceMode'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' name='colorSpaceMode' type='^s'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetInputFormat'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='input' type='s'/>
<arg declared_type='short*' name='format' type='^s'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetInputGammaRecord'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='VDGamRecPtr*' name='inputGammaPtr' type='^^{VDGammaRecord}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetInputGammaValue'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Fixed*' name='channel1' type='^i'/>
<arg declared_type='Fixed*' name='channel2' type='^i'/>
<arg declared_type='Fixed*' name='channel3' type='^i'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetInputName'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='videoInput' type='l'/>
<arg declared_type='unsigned char*' name='name' type='*'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetKeyColor'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='index' type='^l'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetKeyColorRange'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RGBColor*' name='minRGB' type='^{RGBColor=SSS}'/>
<arg declared_type='RGBColor*' name='maxRGB' type='^{RGBColor=SSS}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetMaskPixMap'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PixMapHandle' name='maskPixMap' type='^^{PixMap}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetMaskandValue'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned short' name='blendLevel' type='S'/>
<arg declared_type='long*' name='mask' type='^l'/>
<arg declared_type='long*' name='value' type='^l'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetMaxAuxBuffer'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PixMapHandle*' name='pm' type='^^^{PixMap}'/>
<arg declared_type='Rect*' name='r' type='^{Rect=ssss}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetMaxSrcRect'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='inputStd' type='s'/>
<arg declared_type='Rect*' name='maxSrcRect' type='^{Rect=ssss}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetNextKeyColor'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='index' type='l'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetNumberOfInputs'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' name='inputs' type='^s'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetPLLFilterType'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short*' name='pllType' type='^s'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetPlayThruDestination'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PixMapHandle*' name='dest' type='^^^{PixMap}'/>
<arg declared_type='Rect*' name='destRect' type='^{Rect=ssss}'/>
<arg declared_type='MatrixRecord*' name='m' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle*' name='mask' type='^^{OpaqueRgnHandle}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetPreferredImageDimensions'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='width' type='^l'/>
<arg declared_type='long*' name='height' type='^l'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetPreferredTimeScale'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeScale*' name='preferred' type='^i'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetSaturation'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned short*' name='saturation' type='^S'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetSharpness'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned short*' name='sharpness' type='^S'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetSoundInputDriver'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned char*' name='soundDriverName' type='*'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetSoundInputSource'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='videoInput' type='l'/>
<arg declared_type='long*' name='soundInput' type='^l'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetTimeCode'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeRecord*' name='atTime' type='^{TimeRecord={wide=Ii}i^{TimeBaseRecord}}'/>
<arg declared_type='void*' name='timeCodeFormat' type='^v'/>
<arg declared_type='void*' name='timeCodeTime' type='^v'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetUniqueIDs'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt64*' name='outDeviceID' type='^Q'/>
<arg declared_type='UInt64*' name='outInputID' type='^Q'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetVBlankRect'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='inputStd' type='s'/>
<arg declared_type='Rect*' name='vBlankRect' type='^{Rect=ssss}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetVideoDefaults'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned short*' name='blackLevel' type='^S'/>
<arg declared_type='unsigned short*' name='whiteLevel' type='^S'/>
<arg declared_type='unsigned short*' name='brightness' type='^S'/>
<arg declared_type='unsigned short*' name='hue' type='^S'/>
<arg declared_type='unsigned short*' name='saturation' type='^S'/>
<arg declared_type='unsigned short*' name='contrast' type='^S'/>
<arg declared_type='unsigned short*' name='sharpness' type='^S'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGetWhiteLevelValue'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned short*' name='whiteLevel' type='^S'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGrabOneFrame'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDGrabOneFrameAsync'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='buffer' type='s'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDIIDCGetCSRData'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean' name='offsetFromUnitBase' type='B'/>
<arg declared_type='UInt32' name='offset' type='L'/>
<arg declared_type='UInt32*' name='data' type='^I'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDIIDCGetDefaultFeatures'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer*' name='container' type='^^*'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDIIDCGetFeatures'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer*' name='container' type='^^*'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDIIDCGetFeaturesForSpecifier'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='specifier' type='L'/>
<arg declared_type='QTAtomContainer*' name='container' type='^^*'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDIIDCSetCSRData'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean' name='offsetFromUnitBase' type='B'/>
<arg declared_type='UInt32' name='offset' type='L'/>
<arg declared_type='UInt32' name='data' type='L'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDIIDCSetFeatures'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='QTAtomContainer' name='container' type='^*'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDPreflightDestination'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Rect*' name='digitizerRect' type='^{Rect=ssss}'/>
<arg declared_type='PixMap**' name='dest' type='^^{PixMap}'/>
<arg declared_type='RectPtr' name='destRect' type='^{Rect=ssss}'/>
<arg declared_type='MatrixRecordPtr' name='m' type='^{MatrixRecord=[3[3l]]}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDPreflightGlobalRect'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='GrafPtr' name='theWindow' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='Rect*' name='globalRect' type='^{Rect=ssss}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDReleaseAsyncBuffers'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDReleaseCompressBuffer'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Ptr' name='bufferAddr' type='*'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDResetCompressSequence'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSelectUniqueIDs'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg const='true' declared_type='UInt64*' name='inDeviceID' type='^Q'/>
<arg const='true' declared_type='UInt64*' name='inInputID' type='^Q'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetBlackLevelValue'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned short*' name='blackLevel' type='^S'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetBrightness'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned short*' name='brightness' type='^S'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetClipRgn'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RgnHandle' name='clipRegion' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetClipState'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='clipEnable' type='s'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetCompression'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='OSType' name='compressType' type='L'/>
<arg declared_type='short' name='depth' type='s'/>
<arg declared_type='Rect*' name='bounds' type='^{Rect=ssss}'/>
<arg declared_type='CodecQ' name='spatialQuality' type='L'/>
<arg declared_type='CodecQ' name='temporalQuality' type='L'/>
<arg declared_type='long' name='keyFrameRate' type='l'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetCompressionOnOff'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean' name='state' type='B'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetContrast'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned short*' name='contrast' type='^S'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetDataRate'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='bytesPerSecond' type='l'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetDestinationPort'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CGrafPtr' name='destPort' type='^{OpaqueGrafPtr=}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetDigitizerRect'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Rect*' name='digitizerRect' type='^{Rect=ssss}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetDigitizerUserInterrupt'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='flags' type='l'/>
<arg declared_type='VdigIntUPP' function_pointer='true' name='userInterruptProc' type='^?'>
<arg declared_type='long' type='l'/>
<arg declared_type='long' type='l'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='long' name='refcon' type='l'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetFieldPreference'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='fieldFlag' type='s'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetFrameRate'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Fixed' name='framesPerSecond' type='l'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetHue'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned short*' name='hue' type='^S'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetInput'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='input' type='s'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetInputColorSpaceMode'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='colorSpaceMode' type='s'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetInputGammaRecord'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='VDGamRecPtr' name='inputGammaPtr' type='^{VDGammaRecord=*}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetInputGammaValue'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Fixed' name='channel1' type='l'/>
<arg declared_type='Fixed' name='channel2' type='l'/>
<arg declared_type='Fixed' name='channel3' type='l'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetInputStandard'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='inputStandard' type='s'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetKeyColor'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='index' type='l'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetKeyColorRange'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='RGBColor*' name='minRGB' type='^{RGBColor=SSS}'/>
<arg declared_type='RGBColor*' name='maxRGB' type='^{RGBColor=SSS}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetMasterBlendLevel'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned short*' name='blendLevel' type='^S'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetPLLFilterType'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='pllType' type='s'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetPlayThruDestination'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PixMapHandle' name='dest' type='^^{PixMap}'/>
<arg declared_type='RectPtr' name='destRect' type='^{Rect=ssss}'/>
<arg declared_type='MatrixRecordPtr' name='m' type='^{MatrixRecord=[3[3l]]}'/>
<arg declared_type='RgnHandle' name='mask' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetPlayThruGlobalRect'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='GrafPtr' name='theWindow' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='Rect*' name='globalRect' type='^{Rect=ssss}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetPlayThruOnOff'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='short' name='state' type='s'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetPreferredImageDimensions'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='width' type='l'/>
<arg declared_type='long' name='height' type='l'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetPreferredPacketSize'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='preferredPacketSizeInBytes' type='l'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetSaturation'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned short*' name='saturation' type='^S'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetSharpness'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned short*' name='sharpness' type='^S'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetTimeBase'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='TimeBase' name='t' type='^{TimeBaseRecord=}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetWhiteLevelValue'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned short*' name='whiteLevel' type='^S'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDSetupBuffers'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='VdigBufferRecListHandle' name='bufferList' type='^^{VdigBufferRecList}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDUseSafeBuffers'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Boolean' name='useSafeBuffers' type='B'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VDUseThisCLUT'>
<arg declared_type='VideoDigitizerComponent' name='ci' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CTabHandle' name='colorTableHandle' type='^^{ColorTable}'/>
<retval declared_type='VideoDigitizerError' type='l'/>
</function>
<function name='VideoMediaGetCodecParameter'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CodecType' name='cType' type='L'/>
<arg declared_type='OSType' name='parameterID' type='L'/>
<arg declared_type='Handle' name='outParameterData' type='^*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='VideoMediaGetStallCount'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='unsigned long*' name='stalls' type='^L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='VideoMediaGetStatistics'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='VideoMediaResetStatistics'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='VideoMediaSetCodecParameter'>
<arg declared_type='MediaHandler' name='mh' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CodecType' name='cType' type='L'/>
<arg declared_type='OSType' name='parameterID' type='L'/>
<arg declared_type='long' name='parameterChangeSeed' type='l'/>
<arg declared_type='void*' name='dataPtr' type='^v'/>
<arg declared_type='long' name='dataSize' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseAddAttribute'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='elementID' type='L'/>
<arg declared_type='UInt32' name='nameSpaceID' type='L'/>
<arg declared_type='char*' name='attributeName' type='*'/>
<arg declared_type='UInt32*' name='attributeID' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseAddAttributeAndValue'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='elementID' type='L'/>
<arg declared_type='UInt32' name='nameSpaceID' type='L'/>
<arg declared_type='char*' name='attributeName' type='*'/>
<arg declared_type='UInt32*' name='attributeID' type='^I'/>
<arg declared_type='UInt32' name='attributeValueKind' type='L'/>
<arg declared_type='void*' name='attributeValueKindInfo' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseAddAttributeValueKind'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='elementID' type='L'/>
<arg declared_type='UInt32' name='attributeID' type='L'/>
<arg declared_type='UInt32' name='attributeValueKind' type='L'/>
<arg declared_type='void*' name='attributeValueKindInfo' type='^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseAddElement'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='char*' name='elementName' type='*'/>
<arg declared_type='UInt32' name='nameSpaceID' type='L'/>
<arg declared_type='UInt32*' name='elementID' type='^I'/>
<arg declared_type='long' name='elementFlags' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseAddMultipleAttributes'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='elementID' type='L'/>
<arg declared_type='UInt32*' name='nameSpaceIDs' type='^I'/>
<arg declared_type='char*' name='attributeNames' type='*'/>
<arg declared_type='UInt32*' name='attributeIDs' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseAddMultipleAttributesAndValues'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='elementID' type='L'/>
<arg declared_type='UInt32*' name='nameSpaceIDs' type='^I'/>
<arg declared_type='char*' name='attributeNames' type='*'/>
<arg declared_type='UInt32*' name='attributeIDs' type='^I'/>
<arg declared_type='UInt32*' name='attributeValueKinds' type='^I'/>
<arg declared_type='void**' name='attributeValueKindInfos' type='^^v'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseAddNameSpace'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='char*' name='nameSpaceURL' type='*'/>
<arg declared_type='UInt32*' name='nameSpaceID' type='^I'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseDataRef'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='Handle' name='dataRef' type='^*'/>
<arg declared_type='OSType' name='dataRefType' type='L'/>
<arg declared_type='long' name='parseFlags' type='l'/>
<arg declared_type='XMLDoc*' name='document' type='^^{XMLDocRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseDisposeXMLDoc'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='XMLDoc' name='document' type='^{XMLDocRecord=^v{XMLElement=I*^{XMLAttribute}^{XMLContent}}}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseFile'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='ConstFSSpecPtr' name='fileSpec' type='^{FSSpec=si[64C]}'/>
<arg declared_type='long' name='parseFlags' type='l'/>
<arg declared_type='XMLDoc*' name='document' type='^^{XMLDocRecord}'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseGetDetailedParseError'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long*' name='errorLine' type='^l'/>
<arg declared_type='StringPtr' name='errDesc' type='*'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseSetCDataHandler'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CDataHandlerUPP' function_pointer='true' name='cdata' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseSetCharDataHandler'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CharDataHandlerUPP' function_pointer='true' name='charData' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseSetCommentHandler'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='CommentHandlerUPP' function_pointer='true' name='comment' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseSetEndDocumentHandler'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='EndDocumentHandlerUPP' function_pointer='true' name='endDocument' type='^?'>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseSetEndElementHandler'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='EndElementHandlerUPP' function_pointer='true' name='endElement' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseSetEventParseRefCon'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='long' name='refcon' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseSetOffsetAndLimit'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='UInt32' name='offset' type='L'/>
<arg declared_type='UInt32' name='limit' type='L'/>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseSetPreprocessInstructionHandler'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='PreprocessInstructionHandlerUPP' function_pointer='true' name='preprocessInstruction' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char **' type='^*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseSetStartDocumentHandler'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='StartDocumentHandlerUPP' function_pointer='true' name='startDocument' type='^?'>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
<function name='XMLParseSetStartElementHandler'>
<arg declared_type='ComponentInstance' name='aParser' type='^{ComponentInstanceRecord=[1l]}'/>
<arg declared_type='StartElementHandlerUPP' function_pointer='true' name='startElement' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char**' type='^*'/>
<arg declared_type='long' type='l'/>
<retval declared_type='ComponentResult' type='l'/>
</arg>
<retval declared_type='ComponentResult' type='l'/>
</function>
</signatures>
