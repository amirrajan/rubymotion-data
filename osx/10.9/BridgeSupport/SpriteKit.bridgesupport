<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/IOKit.framework'/>
<depends_on path='/System/Library/Frameworks/QuartzCore.framework'/>
<depends_on path='/System/Library/Frameworks/GLKit.framework'/>
<depends_on path='/System/Library/Frameworks/OpenAL.framework'/>
<depends_on path='/System/Library/Frameworks/AudioToolbox.framework'/>
<depends_on path='/System/Library/Frameworks/JavaScriptCore.framework'/>
<depends_on path='/System/Library/Frameworks/IOSurface.framework'/>
<depends_on path='/System/Library/Frameworks/OpenGL.framework'/>
<depends_on path='/System/Library/Frameworks/AVFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/Foundation.framework'/>
<depends_on path='/System/Library/Frameworks/Cocoa.framework'/>
<depends_on path='/System/Library/Frameworks/CoreText.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/CoreVideo.framework'/>
<depends_on path='/System/Library/Frameworks/AppKit.framework'/>
<depends_on path='/System/Library/Frameworks/ImageIO.framework'/>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/CoreGraphics.framework'/>
<struct name='vector_float2' type64='{_vector_float2=&quot;x&quot;f&quot;y&quot;f}'>
<field declared_type64='float' name='x' type64='f'/>
<field declared_type64='float' name='y' type64='f'/>
</struct>
<struct name='vector_float3' type64='{_vector_float3=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}'>
<field declared_type64='float' name='x' type64='f'/>
<field declared_type64='float' name='y' type64='f'/>
<field declared_type64='float' name='z' type64='f'/>
</struct>
<struct name='vector_float4' type64='{_vector_float4=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f&quot;w&quot;f}'>
<field declared_type64='float' name='x' type64='f'/>
<field declared_type64='float' name='y' type64='f'/>
<field declared_type64='float' name='z' type64='f'/>
<field declared_type64='float' name='w' type64='f'/>
</struct>
<struct name='vector_int2' type64='{_vector_int2=&quot;x&quot;i&quot;y&quot;i}'>
<field declared_type64='int' name='x' type64='i'/>
<field declared_type64='int' name='y' type64='i'/>
</struct>
<struct name='vector_int4' type64='{_vector_int4=&quot;x&quot;i&quot;y&quot;i&quot;z&quot;i&quot;w&quot;i}'>
<field declared_type64='int' name='x' type64='i'/>
<field declared_type64='int' name='y' type64='i'/>
<field declared_type64='int' name='z' type64='i'/>
<field declared_type64='int' name='w' type64='i'/>
</struct>
<struct name='vector_uint2' type64='{_vector_uint2=&quot;x&quot;I&quot;y&quot;I}'>
<field declared_type64='unsigned int' name='x' type64='I'/>
<field declared_type64='unsigned int' name='y' type64='I'/>
</struct>
<struct name='vector_uint3' type64='{_vector_uint3=&quot;x&quot;I&quot;y&quot;I&quot;z&quot;I}'>
<field declared_type64='unsigned int' name='x' type64='I'/>
<field declared_type64='unsigned int' name='y' type64='I'/>
<field declared_type64='unsigned int' name='z' type64='I'/>
</struct>
<enum name='SKActionTimingEaseIn' value64='1'/>
<enum name='SKActionTimingEaseInEaseOut' value64='3'/>
<enum name='SKActionTimingEaseOut' value64='2'/>
<enum name='SKActionTimingLinear' value64='0'/>
<enum name='SKBlendModeAdd' value64='1'/>
<enum name='SKBlendModeAlpha' value64='0'/>
<enum name='SKBlendModeMultiply' value64='3'/>
<enum name='SKBlendModeMultiplyX2' value64='4'/>
<enum name='SKBlendModeReplace' value64='6'/>
<enum name='SKBlendModeScreen' value64='5'/>
<enum name='SKBlendModeSubtract' value64='2'/>
<enum name='SKInterpolationModeLinear' value64='1'/>
<enum name='SKInterpolationModeSpline' value64='2'/>
<enum name='SKInterpolationModeStep' value64='3'/>
<enum name='SKLabelHorizontalAlignmentModeCenter' value64='0'/>
<enum name='SKLabelHorizontalAlignmentModeLeft' value64='1'/>
<enum name='SKLabelHorizontalAlignmentModeRight' value64='2'/>
<enum name='SKLabelVerticalAlignmentModeBaseline' value64='0'/>
<enum name='SKLabelVerticalAlignmentModeBottom' value64='3'/>
<enum name='SKLabelVerticalAlignmentModeCenter' value64='1'/>
<enum name='SKLabelVerticalAlignmentModeTop' value64='2'/>
<enum name='SKRepeatModeClamp' value64='1'/>
<enum name='SKRepeatModeLoop' value64='2'/>
<enum name='SKSceneScaleModeAspectFill' value64='1'/>
<enum name='SKSceneScaleModeAspectFit' value64='2'/>
<enum name='SKSceneScaleModeFill' value64='0'/>
<enum name='SKSceneScaleModeResizeFill' value64='3'/>
<enum name='SKTextureFilteringLinear' value64='1'/>
<enum name='SKTextureFilteringNearest' value64='0'/>
<enum name='SKTransitionDirectionDown' value64='1'/>
<enum name='SKTransitionDirectionLeft' value64='3'/>
<enum name='SKTransitionDirectionRight' value64='2'/>
<enum name='SKTransitionDirectionUp' value64='0'/>
<function_alias name='SK_NONATOMIC_IOSONLY' original='atoi'/>
<class name='NSEvent'>
<method selector='locationInNode:'>
<arg declared_type64='SKNode*' index='0' name='node' type64='@'/>
<retval declared_type64='CGPoint' type64='{CGPoint=dd}'/>
</method>
</class>
<class name='NSObject'>
<method selector='didBeginContact:'>
<arg declared_type64='SKPhysicsContact*' index='0' name='contact' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='didEndContact:'>
<arg declared_type64='SKPhysicsContact*' index='0' name='contact' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='SKAction'>
<method class_method='true' selector='animateWithTextures:timePerFrame:'>
<arg declared_type64='NSArray*' index='0' name='textures' type64='@'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='animateWithTextures:timePerFrame:resize:restore:'>
<arg declared_type64='NSArray*' index='0' name='textures' type64='@'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<arg declared_type64='BOOL' index='2' name='resize' type64='B'/>
<arg declared_type64='BOOL' index='3' name='restore' type64='B'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='colorizeWithColor:colorBlendFactor:duration:'>
<arg declared_type64='NSColor*' index='0' name='color' type64='@'/>
<arg declared_type64='CGFloat' index='1' name='colorBlendFactor' type64='d'/>
<arg declared_type64='NSTimeInterval' index='2' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='colorizeWithColorBlendFactor:duration:'>
<arg declared_type64='CGFloat' index='0' name='colorBlendFactor' type64='d'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='customActionWithDuration:actionBlock:'>
<arg declared_type64='NSTimeInterval' index='0' name='seconds' type64='d'/>
<arg declared_type64='void (^)(SKNode *, CGFloat)' function_pointer='true' index='1' name='block' type64='@?'>
<arg declared_type64='SKNode*' type64='@'/>
<arg declared_type64='CGFloat' type64='d'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method selector='duration'>
<retval declared_type64='NSTimeInterval' type64='d'/>
</method>
<method class_method='true' selector='fadeAlphaBy:duration:'>
<arg declared_type64='CGFloat' index='0' name='factor' type64='d'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='fadeAlphaTo:duration:'>
<arg declared_type64='CGFloat' index='0' name='alpha' type64='d'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='fadeInWithDuration:'>
<arg declared_type64='NSTimeInterval' index='0' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='fadeOutWithDuration:'>
<arg declared_type64='NSTimeInterval' index='0' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='followPath:asOffset:orientToPath:duration:'>
<arg declared_type64='CGPathRef' index='0' name='path' type64='^{CGPath=}'/>
<arg declared_type64='BOOL' index='1' name='offset' type64='B'/>
<arg declared_type64='BOOL' index='2' name='orient' type64='B'/>
<arg declared_type64='NSTimeInterval' index='3' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='followPath:duration:'>
<arg declared_type64='CGPathRef' index='0' name='path' type64='^{CGPath=}'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='group:'>
<arg declared_type64='NSArray*' index='0' name='actions' type64='@'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='moveBy:duration:'>
<arg declared_type64='CGVector' index='0' name='delta' type64='{CGVector=dd}'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='moveByX:y:duration:'>
<arg declared_type64='CGFloat' index='0' name='deltaX' type64='d'/>
<arg declared_type64='CGFloat' index='1' name='deltaY' type64='d'/>
<arg declared_type64='NSTimeInterval' index='2' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='moveTo:duration:'>
<arg declared_type64='CGPoint' index='0' name='location' type64='{CGPoint=dd}'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='moveToX:duration:'>
<arg declared_type64='CGFloat' index='0' name='x' type64='d'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='moveToY:duration:'>
<arg declared_type64='CGFloat' index='0' name='y' type64='d'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='performSelector:onTarget:'>
<arg declared_type64='SEL' index='0' name='selector' type64=':'/>
<arg declared_type64='id' index='1' name='target' type64='@'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='playSoundFileNamed:waitForCompletion:'>
<arg declared_type64='NSString*' index='0' name='soundFile' type64='@'/>
<arg declared_type64='BOOL' index='1' name='wait' type64='B'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='removeFromParent'>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='repeatAction:count:'>
<arg declared_type64='SKAction*' index='0' name='action' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='count' type64='Q'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='repeatActionForever:'>
<arg declared_type64='SKAction*' index='0' name='action' type64='@'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='resizeByWidth:height:duration:'>
<arg declared_type64='CGFloat' index='0' name='width' type64='d'/>
<arg declared_type64='CGFloat' index='1' name='height' type64='d'/>
<arg declared_type64='NSTimeInterval' index='2' name='duration' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='resizeToHeight:duration:'>
<arg declared_type64='CGFloat' index='0' name='height' type64='d'/>
<arg declared_type64='NSTimeInterval' index='1' name='duration' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='resizeToWidth:duration:'>
<arg declared_type64='CGFloat' index='0' name='width' type64='d'/>
<arg declared_type64='NSTimeInterval' index='1' name='duration' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='resizeToWidth:height:duration:'>
<arg declared_type64='CGFloat' index='0' name='width' type64='d'/>
<arg declared_type64='CGFloat' index='1' name='height' type64='d'/>
<arg declared_type64='NSTimeInterval' index='2' name='duration' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method selector='reversedAction'>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='rotateByAngle:duration:'>
<arg declared_type64='CGFloat' index='0' name='radians' type64='d'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='rotateToAngle:duration:'>
<arg declared_type64='CGFloat' index='0' name='radians' type64='d'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='rotateToAngle:duration:shortestUnitArc:'>
<arg declared_type64='CGFloat' index='0' name='radians' type64='d'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<arg declared_type64='BOOL' index='2' name='shortestUnitArc' type64='B'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='runAction:onChildWithName:'>
<arg declared_type64='SKAction*' index='0' name='action' type64='@'/>
<arg declared_type64='NSString*' index='1' name='name' type64='@'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='runBlock:'>
<arg declared_type64='dispatch_block_t' function_pointer='true' index='0' name='block' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='runBlock:queue:'>
<arg declared_type64='dispatch_block_t' function_pointer='true' index='0' name='block' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='dispatch_queue_t' index='1' name='queue' type64='@'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='scaleBy:duration:'>
<arg declared_type64='CGFloat' index='0' name='scale' type64='d'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='scaleTo:duration:'>
<arg declared_type64='CGFloat' index='0' name='scale' type64='d'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='scaleXBy:y:duration:'>
<arg declared_type64='CGFloat' index='0' name='xScale' type64='d'/>
<arg declared_type64='CGFloat' index='1' name='yScale' type64='d'/>
<arg declared_type64='NSTimeInterval' index='2' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='scaleXTo:duration:'>
<arg declared_type64='CGFloat' index='0' name='scale' type64='d'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='scaleXTo:y:duration:'>
<arg declared_type64='CGFloat' index='0' name='xScale' type64='d'/>
<arg declared_type64='CGFloat' index='1' name='yScale' type64='d'/>
<arg declared_type64='NSTimeInterval' index='2' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='scaleYTo:duration:'>
<arg declared_type64='CGFloat' index='0' name='scale' type64='d'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='sequence:'>
<arg declared_type64='NSArray*' index='0' name='actions' type64='@'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method selector='setDuration:'>
<arg declared_type64='NSTimeInterval' index='0' name='duration' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSpeed:'>
<arg declared_type64='CGFloat' index='0' name='speed' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='setTexture:'>
<arg declared_type64='SKTexture*' index='0' name='texture' type64='@'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method selector='setTimingMode:'>
<arg declared_type64='SKActionTimingMode' index='0' name='timingMode' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='speed'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method class_method='true' selector='speedBy:duration:'>
<arg declared_type64='CGFloat' index='0' name='speed' type64='d'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='speedTo:duration:'>
<arg declared_type64='CGFloat' index='0' name='speed' type64='d'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method selector='timingMode'>
<retval declared_type64='SKActionTimingMode' type64='q'/>
</method>
<method class_method='true' selector='waitForDuration:'>
<arg declared_type64='NSTimeInterval' index='0' name='sec' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method class_method='true' selector='waitForDuration:withRange:'>
<arg declared_type64='NSTimeInterval' index='0' name='sec' type64='d'/>
<arg declared_type64='NSTimeInterval' index='1' name='durationRange' type64='d'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
</class>
<class name='SKCropNode'>
<method selector='maskNode'>
<retval declared_type64='SKNode*' type64='@'/>
</method>
<method selector='setMaskNode:'>
<arg declared_type64='SKNode*' index='0' name='maskNode' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='SKEffectNode'>
<method selector='blendMode'>
<retval declared_type64='SKBlendMode' type64='q'/>
</method>
<method selector='filter'>
<retval declared_type64='CIFilter*' type64='@'/>
</method>
<method selector='setBlendMode:'>
<arg declared_type64='SKBlendMode' index='0' name='blendMode' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFilter:'>
<arg declared_type64='CIFilter*' index='0' name='filter' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setShouldCenterFilter:'>
<arg declared_type64='BOOL' index='0' name='shouldCenterFilter' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setShouldEnableEffects:'>
<arg declared_type64='BOOL' index='0' name='shouldEnableEffects' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setShouldRasterize:'>
<arg declared_type64='BOOL' index='0' name='shouldRasterize' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='shouldCenterFilter'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='shouldEnableEffects'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='shouldRasterize'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='SKEmitterNode'>
<method selector='advanceSimulationTime:'>
<arg declared_type64='NSTimeInterval' index='0' name='sec' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='emissionAngle'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='emissionAngleRange'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='numParticlesToEmit'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='particleAction'>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method selector='particleAlpha'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleAlphaRange'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleAlphaSequence'>
<retval declared_type64='SKKeyframeSequence*' type64='@'/>
</method>
<method selector='particleAlphaSpeed'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleBirthRate'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleBlendMode'>
<retval declared_type64='SKBlendMode' type64='q'/>
</method>
<method selector='particleColor'>
<retval declared_type64='NSColor*' type64='@'/>
</method>
<method selector='particleColorAlphaRange'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleColorAlphaSpeed'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleColorBlendFactor'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleColorBlendFactorRange'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleColorBlendFactorSequence'>
<retval declared_type64='SKKeyframeSequence*' type64='@'/>
</method>
<method selector='particleColorBlendFactorSpeed'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleColorBlueRange'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleColorBlueSpeed'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleColorGreenRange'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleColorGreenSpeed'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleColorRedRange'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleColorRedSpeed'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleColorSequence'>
<retval declared_type64='SKKeyframeSequence*' type64='@'/>
</method>
<method selector='particleLifetime'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleLifetimeRange'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particlePosition'>
<retval declared_type64='CGPoint' type64='{CGPoint=dd}'/>
</method>
<method selector='particlePositionRange'>
<retval declared_type64='CGVector' type64='{CGVector=dd}'/>
</method>
<method selector='particleRotation'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleRotationRange'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleRotationSpeed'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleScale'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleScaleRange'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleScaleSequence'>
<retval declared_type64='SKKeyframeSequence*' type64='@'/>
</method>
<method selector='particleScaleSpeed'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleSize'>
<retval declared_type64='CGSize' type64='{CGSize=dd}'/>
</method>
<method selector='particleSpeed'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleSpeedRange'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleTexture'>
<retval declared_type64='SKTexture*' type64='@'/>
</method>
<method selector='particleZPosition'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='particleZPositionRange'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='resetSimulation'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEmissionAngle:'>
<arg declared_type64='CGFloat' index='0' name='emissionAngle' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEmissionAngleRange:'>
<arg declared_type64='CGFloat' index='0' name='emissionAngleRange' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNumParticlesToEmit:'>
<arg declared_type64='NSUInteger' index='0' name='numParticlesToEmit' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleAction:'>
<arg declared_type64='SKAction*' index='0' name='particleAction' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleAlpha:'>
<arg declared_type64='CGFloat' index='0' name='particleAlpha' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleAlphaRange:'>
<arg declared_type64='CGFloat' index='0' name='particleAlphaRange' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleAlphaSequence:'>
<arg declared_type64='SKKeyframeSequence*' index='0' name='particleAlphaSequence' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleAlphaSpeed:'>
<arg declared_type64='CGFloat' index='0' name='particleAlphaSpeed' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleBirthRate:'>
<arg declared_type64='CGFloat' index='0' name='particleBirthRate' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleBlendMode:'>
<arg declared_type64='SKBlendMode' index='0' name='particleBlendMode' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleColor:'>
<arg declared_type64='NSColor*' index='0' name='particleColor' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleColorAlphaRange:'>
<arg declared_type64='CGFloat' index='0' name='particleColorAlphaRange' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleColorAlphaSpeed:'>
<arg declared_type64='CGFloat' index='0' name='particleColorAlphaSpeed' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleColorBlendFactor:'>
<arg declared_type64='CGFloat' index='0' name='particleColorBlendFactor' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleColorBlendFactorRange:'>
<arg declared_type64='CGFloat' index='0' name='particleColorBlendFactorRange' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleColorBlendFactorSequence:'>
<arg declared_type64='SKKeyframeSequence*' index='0' name='particleColorBlendFactorSequence' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleColorBlendFactorSpeed:'>
<arg declared_type64='CGFloat' index='0' name='particleColorBlendFactorSpeed' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleColorBlueRange:'>
<arg declared_type64='CGFloat' index='0' name='particleColorBlueRange' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleColorBlueSpeed:'>
<arg declared_type64='CGFloat' index='0' name='particleColorBlueSpeed' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleColorGreenRange:'>
<arg declared_type64='CGFloat' index='0' name='particleColorGreenRange' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleColorGreenSpeed:'>
<arg declared_type64='CGFloat' index='0' name='particleColorGreenSpeed' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleColorRedRange:'>
<arg declared_type64='CGFloat' index='0' name='particleColorRedRange' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleColorRedSpeed:'>
<arg declared_type64='CGFloat' index='0' name='particleColorRedSpeed' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleColorSequence:'>
<arg declared_type64='SKKeyframeSequence*' index='0' name='particleColorSequence' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleLifetime:'>
<arg declared_type64='CGFloat' index='0' name='particleLifetime' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleLifetimeRange:'>
<arg declared_type64='CGFloat' index='0' name='particleLifetimeRange' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticlePosition:'>
<arg declared_type64='CGPoint' index='0' name='particlePosition' type64='{CGPoint=dd}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticlePositionRange:'>
<arg declared_type64='CGVector' index='0' name='particlePositionRange' type64='{CGVector=dd}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleRotation:'>
<arg declared_type64='CGFloat' index='0' name='particleRotation' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleRotationRange:'>
<arg declared_type64='CGFloat' index='0' name='particleRotationRange' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleRotationSpeed:'>
<arg declared_type64='CGFloat' index='0' name='particleRotationSpeed' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleScale:'>
<arg declared_type64='CGFloat' index='0' name='particleScale' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleScaleRange:'>
<arg declared_type64='CGFloat' index='0' name='particleScaleRange' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleScaleSequence:'>
<arg declared_type64='SKKeyframeSequence*' index='0' name='particleScaleSequence' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleScaleSpeed:'>
<arg declared_type64='CGFloat' index='0' name='particleScaleSpeed' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleSize:'>
<arg declared_type64='CGSize' index='0' name='particleSize' type64='{CGSize=dd}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleSpeed:'>
<arg declared_type64='CGFloat' index='0' name='particleSpeed' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleSpeedRange:'>
<arg declared_type64='CGFloat' index='0' name='particleSpeedRange' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleTexture:'>
<arg declared_type64='SKTexture*' index='0' name='particleTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleZPosition:'>
<arg declared_type64='CGFloat' index='0' name='particleZPosition' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setParticleZPositionRange:'>
<arg declared_type64='CGFloat' index='0' name='particleZPositionRange' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTargetNode:'>
<arg declared_type64='SKNode*' index='0' name='targetNode' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setXAcceleration:'>
<arg declared_type64='CGFloat' index='0' name='xAcceleration' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setYAcceleration:'>
<arg declared_type64='CGFloat' index='0' name='yAcceleration' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='targetNode'>
<retval declared_type64='SKNode*' type64='@'/>
</method>
<method selector='xAcceleration'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='yAcceleration'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
</class>
<class name='SKKeyframeSequence'>
<method selector='addKeyframeValue:time:'>
<arg declared_type64='id' index='0' name='value' type64='@'/>
<arg declared_type64='CGFloat' index='1' name='time' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='count'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='getKeyframeTimeForIndex:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='getKeyframeValueForIndex:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='initWithCapacity:'>
<arg declared_type64='NSUInteger' index='0' name='numItems' type64='Q'/>
<retval declared_type64='instancetype' type64='@'/>
</method>
<method selector='initWithKeyframeValues:times:'>
<arg declared_type64='NSArray*' index='0' name='values' type64='@'/>
<arg declared_type64='NSArray*' index='1' name='times' type64='@'/>
<retval declared_type64='instancetype' type64='@'/>
</method>
<method selector='interpolationMode'>
<retval declared_type64='SKInterpolationMode' type64='q'/>
</method>
<method selector='removeKeyframeAtIndex:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='removeLastKeyframe'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='repeatMode'>
<retval declared_type64='SKRepeatMode' type64='q'/>
</method>
<method selector='sampleAtTime:'>
<arg declared_type64='CGFloat' index='0' name='time' type64='d'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='setInterpolationMode:'>
<arg declared_type64='SKInterpolationMode' index='0' name='interpolationMode' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setKeyframeTime:forIndex:'>
<arg declared_type64='CGFloat' index='0' name='time' type64='d'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setKeyframeValue:forIndex:'>
<arg declared_type64='id' index='0' name='value' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setKeyframeValue:time:forIndex:'>
<arg declared_type64='id' index='0' name='value' type64='@'/>
<arg declared_type64='CGFloat' index='1' name='time' type64='d'/>
<arg declared_type64='NSUInteger' index='2' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRepeatMode:'>
<arg declared_type64='SKRepeatMode' index='0' name='repeatMode' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='SKLabelNode'>
<method selector='blendMode'>
<retval declared_type64='SKBlendMode' type64='q'/>
</method>
<method selector='color'>
<retval declared_type64='NSColor*' type64='@'/>
</method>
<method selector='colorBlendFactor'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='fontColor'>
<retval declared_type64='NSColor*' type64='@'/>
</method>
<method selector='fontName'>
<retval declared_type64='NSString*' type64='@'/>
</method>
<method selector='fontSize'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='horizontalAlignmentMode'>
<retval declared_type64='SKLabelHorizontalAlignmentMode' type64='q'/>
</method>
<method selector='initWithFontNamed:'>
<arg declared_type64='NSString*' index='0' name='fontName' type64='@'/>
<retval declared_type64='instancetype' type64='@'/>
</method>
<method class_method='true' selector='labelNodeWithFontNamed:'>
<arg declared_type64='NSString*' index='0' name='fontName' type64='@'/>
<retval declared_type64='instancetype' type64='@'/>
</method>
<method selector='setBlendMode:'>
<arg declared_type64='SKBlendMode' index='0' name='blendMode' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setColor:'>
<arg declared_type64='NSColor*' index='0' name='color' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setColorBlendFactor:'>
<arg declared_type64='CGFloat' index='0' name='colorBlendFactor' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFontColor:'>
<arg declared_type64='NSColor*' index='0' name='fontColor' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFontName:'>
<arg declared_type64='NSString*' index='0' name='fontName' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFontSize:'>
<arg declared_type64='CGFloat' index='0' name='fontSize' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setHorizontalAlignmentMode:'>
<arg declared_type64='SKLabelHorizontalAlignmentMode' index='0' name='horizontalAlignmentMode' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setText:'>
<arg declared_type64='NSString*' index='0' name='text' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVerticalAlignmentMode:'>
<arg declared_type64='SKLabelVerticalAlignmentMode' index='0' name='verticalAlignmentMode' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='text'>
<retval declared_type64='NSString*' type64='@'/>
</method>
<method selector='verticalAlignmentMode'>
<retval declared_type64='SKLabelVerticalAlignmentMode' type64='q'/>
</method>
</class>
<class name='SKNode'>
<method selector='actionForKey:'>
<arg declared_type64='NSString*' index='0' name='key' type64='@'/>
<retval declared_type64='SKAction*' type64='@'/>
</method>
<method selector='addChild:'>
<arg declared_type64='SKNode*' index='0' name='node' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='alpha'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='calculateAccumulatedFrame'>
<retval declared_type64='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</method>
<method selector='childNodeWithName:'>
<arg declared_type64='NSString*' index='0' name='name' type64='@'/>
<retval declared_type64='SKNode*' type64='@'/>
</method>
<method selector='children'>
<retval declared_type64='NSArray*' type64='@'/>
</method>
<method selector='containsPoint:'>
<arg declared_type64='CGPoint' index='0' name='p' type64='{CGPoint=dd}'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='convertPoint:fromNode:'>
<arg declared_type64='CGPoint' index='0' name='point' type64='{CGPoint=dd}'/>
<arg declared_type64='SKNode*' index='1' name='node' type64='@'/>
<retval declared_type64='CGPoint' type64='{CGPoint=dd}'/>
</method>
<method selector='convertPoint:toNode:'>
<arg declared_type64='CGPoint' index='0' name='point' type64='{CGPoint=dd}'/>
<arg declared_type64='SKNode*' index='1' name='node' type64='@'/>
<retval declared_type64='CGPoint' type64='{CGPoint=dd}'/>
</method>
<method selector='enumerateChildNodesWithName:usingBlock:'>
<arg declared_type64='NSString*' index='0' name='name' type64='@'/>
<arg declared_type64='void (^)(SKNode *, BOOL *)' function_pointer='true' index='1' name='block' type64='@?'>
<arg declared_type64='SKNode*' type64='@'/>
<arg declared_type64='BOOL*' type64='^B'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='frame'>
<retval declared_type64='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</method>
<method selector='hasActions'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='inParentHierarchy:'>
<arg declared_type64='SKNode*' index='0' name='parent' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='insertChild:atIndex:'>
<arg declared_type64='SKNode*' index='0' name='node' type64='@'/>
<arg declared_type64='NSInteger' index='1' name='index' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='intersectsNode:'>
<arg declared_type64='SKNode*' index='0' name='node' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isHidden'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isPaused'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isUserInteractionEnabled'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='name'>
<retval declared_type64='NSString*' type64='@'/>
</method>
<method class_method='true' selector='node'>
<retval declared_type64='instancetype' type64='@'/>
</method>
<method selector='nodeAtPoint:'>
<arg declared_type64='CGPoint' index='0' name='p' type64='{CGPoint=dd}'/>
<retval declared_type64='SKNode*' type64='@'/>
</method>
<method selector='nodesAtPoint:'>
<arg declared_type64='CGPoint' index='0' name='p' type64='{CGPoint=dd}'/>
<retval declared_type64='NSArray*' type64='@'/>
</method>
<method selector='parent'>
<retval declared_type64='SKNode*' type64='@'/>
</method>
<method selector='physicsBody'>
<retval declared_type64='SKPhysicsBody*' type64='@'/>
</method>
<method selector='position'>
<retval declared_type64='CGPoint' type64='{CGPoint=dd}'/>
</method>
<method selector='removeActionForKey:'>
<arg declared_type64='NSString*' index='0' name='key' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='removeAllActions'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='removeAllChildren'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='removeChildrenInArray:'>
<arg declared_type64='NSArray*' index='0' name='nodes' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='removeFromParent'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='runAction:'>
<arg declared_type64='SKAction*' index='0' name='action' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='runAction:completion:'>
<arg declared_type64='SKAction*' index='0' name='action' type64='@'/>
<arg declared_type64='void (^)()' function_pointer='true' index='1' name='block' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='runAction:withKey:'>
<arg declared_type64='SKAction*' index='0' name='action' type64='@'/>
<arg declared_type64='NSString*' index='1' name='key' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='scene'>
<retval declared_type64='SKScene*' type64='@'/>
</method>
<method selector='setAlpha:'>
<arg declared_type64='CGFloat' index='0' name='alpha' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setHidden:'>
<arg declared_type64='BOOL' index='0' name='hidden' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setName:'>
<arg declared_type64='NSString*' index='0' name='name' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPaused:'>
<arg declared_type64='BOOL' index='0' name='paused' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPhysicsBody:'>
<arg declared_type64='SKPhysicsBody*' index='0' name='physicsBody' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPosition:'>
<arg declared_type64='CGPoint' index='0' name='position' type64='{CGPoint=dd}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setScale:'>
<arg declared_type64='CGFloat' index='0' name='scale' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSpeed:'>
<arg declared_type64='CGFloat' index='0' name='speed' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUserData:'>
<arg declared_type64='NSMutableDictionary*' index='0' name='userData' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUserInteractionEnabled:'>
<arg declared_type64='BOOL' index='0' name='userInteractionEnabled' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setXScale:'>
<arg declared_type64='CGFloat' index='0' name='xScale' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setYScale:'>
<arg declared_type64='CGFloat' index='0' name='yScale' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setZPosition:'>
<arg declared_type64='CGFloat' index='0' name='zPosition' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setZRotation:'>
<arg declared_type64='CGFloat' index='0' name='zRotation' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='speed'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='userData'>
<retval declared_type64='NSMutableDictionary*' type64='@'/>
</method>
<method selector='xScale'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='yScale'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='zPosition'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='zRotation'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
</class>
<class name='SKPhysicsBody'>
<method selector='affectedByGravity'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='allContactedBodies'>
<retval declared_type64='NSArray*' type64='@'/>
</method>
<method selector='allowsRotation'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='angularDamping'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='angularVelocity'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='applyAngularImpulse:'>
<arg declared_type64='CGFloat' index='0' name='impulse' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='applyForce:'>
<arg declared_type64='CGVector' index='0' name='force' type64='{CGVector=dd}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='applyForce:atPoint:'>
<arg declared_type64='CGVector' index='0' name='force' type64='{CGVector=dd}'/>
<arg declared_type64='CGPoint' index='1' name='point' type64='{CGPoint=dd}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='applyImpulse:'>
<arg declared_type64='CGVector' index='0' name='impulse' type64='{CGVector=dd}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='applyImpulse:atPoint:'>
<arg declared_type64='CGVector' index='0' name='impulse' type64='{CGVector=dd}'/>
<arg declared_type64='CGPoint' index='1' name='point' type64='{CGPoint=dd}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='applyTorque:'>
<arg declared_type64='CGFloat' index='0' name='torque' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='area'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method class_method='true' selector='bodyWithCircleOfRadius:'>
<arg declared_type64='CGFloat' index='0' name='r' type64='d'/>
<retval declared_type64='SKPhysicsBody*' type64='@'/>
</method>
<method class_method='true' selector='bodyWithEdgeChainFromPath:'>
<arg declared_type64='CGPathRef' index='0' name='path' type64='^{CGPath=}'/>
<retval declared_type64='SKPhysicsBody*' type64='@'/>
</method>
<method class_method='true' selector='bodyWithEdgeFromPoint:toPoint:'>
<arg declared_type64='CGPoint' index='0' name='p1' type64='{CGPoint=dd}'/>
<arg declared_type64='CGPoint' index='1' name='p2' type64='{CGPoint=dd}'/>
<retval declared_type64='SKPhysicsBody*' type64='@'/>
</method>
<method class_method='true' selector='bodyWithEdgeLoopFromPath:'>
<arg declared_type64='CGPathRef' index='0' name='path' type64='^{CGPath=}'/>
<retval declared_type64='SKPhysicsBody*' type64='@'/>
</method>
<method class_method='true' selector='bodyWithEdgeLoopFromRect:'>
<arg declared_type64='CGRect' index='0' name='rect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type64='SKPhysicsBody*' type64='@'/>
</method>
<method class_method='true' selector='bodyWithPolygonFromPath:'>
<arg declared_type64='CGPathRef' index='0' name='path' type64='^{CGPath=}'/>
<retval declared_type64='SKPhysicsBody*' type64='@'/>
</method>
<method class_method='true' selector='bodyWithRectangleOfSize:'>
<arg declared_type64='CGSize' index='0' name='s' type64='{CGSize=dd}'/>
<retval declared_type64='SKPhysicsBody*' type64='@'/>
</method>
<method selector='categoryBitMask'>
<retval declared_type64='uint32_t' type64='I'/>
</method>
<method selector='collisionBitMask'>
<retval declared_type64='uint32_t' type64='I'/>
</method>
<method selector='contactTestBitMask'>
<retval declared_type64='uint32_t' type64='I'/>
</method>
<method selector='density'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='friction'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='isDynamic'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isResting'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='joints'>
<retval declared_type64='NSArray*' type64='@'/>
</method>
<method selector='linearDamping'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='mass'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='node'>
<retval declared_type64='SKNode*' type64='@'/>
</method>
<method selector='restitution'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='setAffectedByGravity:'>
<arg declared_type64='BOOL' index='0' name='affectedByGravity' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setAllowsRotation:'>
<arg declared_type64='BOOL' index='0' name='allowsRotation' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setAngularDamping:'>
<arg declared_type64='CGFloat' index='0' name='angularDamping' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setAngularVelocity:'>
<arg declared_type64='CGFloat' index='0' name='angularVelocity' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCategoryBitMask:'>
<arg declared_type64='uint32_t' index='0' name='categoryBitMask' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCollisionBitMask:'>
<arg declared_type64='uint32_t' index='0' name='collisionBitMask' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setContactTestBitMask:'>
<arg declared_type64='uint32_t' index='0' name='contactTestBitMask' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDensity:'>
<arg declared_type64='CGFloat' index='0' name='density' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDynamic:'>
<arg declared_type64='BOOL' index='0' name='dynamic' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFriction:'>
<arg declared_type64='CGFloat' index='0' name='friction' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLinearDamping:'>
<arg declared_type64='CGFloat' index='0' name='linearDamping' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMass:'>
<arg declared_type64='CGFloat' index='0' name='mass' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setResting:'>
<arg declared_type64='BOOL' index='0' name='resting' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRestitution:'>
<arg declared_type64='CGFloat' index='0' name='restitution' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUsesPreciseCollisionDetection:'>
<arg declared_type64='BOOL' index='0' name='usesPreciseCollisionDetection' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVelocity:'>
<arg declared_type64='CGVector' index='0' name='velocity' type64='{CGVector=dd}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='usesPreciseCollisionDetection'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='velocity'>
<retval declared_type64='CGVector' type64='{CGVector=dd}'/>
</method>
</class>
<class name='SKPhysicsContact'>
<method selector='bodyA'>
<retval declared_type64='SKPhysicsBody*' type64='@'/>
</method>
<method selector='bodyB'>
<retval declared_type64='SKPhysicsBody*' type64='@'/>
</method>
<method selector='collisionImpulse'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='contactPoint'>
<retval declared_type64='CGPoint' type64='{CGPoint=dd}'/>
</method>
</class>
<class name='SKPhysicsJoint'>
<method selector='bodyA'>
<retval declared_type64='SKPhysicsBody*' type64='@'/>
</method>
<method selector='bodyB'>
<retval declared_type64='SKPhysicsBody*' type64='@'/>
</method>
<method selector='setBodyA:'>
<arg declared_type64='SKPhysicsBody*' index='0' name='bodyA' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBodyB:'>
<arg declared_type64='SKPhysicsBody*' index='0' name='bodyB' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='SKPhysicsJointFixed'>
<method class_method='true' selector='jointWithBodyA:bodyB:anchor:'>
<arg declared_type64='SKPhysicsBody*' index='0' name='bodyA' type64='@'/>
<arg declared_type64='SKPhysicsBody*' index='1' name='bodyB' type64='@'/>
<arg declared_type64='CGPoint' index='2' name='anchor' type64='{CGPoint=dd}'/>
<retval declared_type64='SKPhysicsJointFixed*' type64='@'/>
</method>
</class>
<class name='SKPhysicsJointLimit'>
<method class_method='true' selector='jointWithBodyA:bodyB:anchorA:anchorB:'>
<arg declared_type64='SKPhysicsBody*' index='0' name='bodyA' type64='@'/>
<arg declared_type64='SKPhysicsBody*' index='1' name='bodyB' type64='@'/>
<arg declared_type64='CGPoint' index='2' name='anchorA' type64='{CGPoint=dd}'/>
<arg declared_type64='CGPoint' index='3' name='anchorB' type64='{CGPoint=dd}'/>
<retval declared_type64='SKPhysicsJointLimit*' type64='@'/>
</method>
<method selector='maxLength'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='setMaxLength:'>
<arg declared_type64='CGFloat' index='0' name='maxLength' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='SKPhysicsJointPin'>
<method selector='frictionTorque'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method class_method='true' selector='jointWithBodyA:bodyB:anchor:'>
<arg declared_type64='SKPhysicsBody*' index='0' name='bodyA' type64='@'/>
<arg declared_type64='SKPhysicsBody*' index='1' name='bodyB' type64='@'/>
<arg declared_type64='CGPoint' index='2' name='anchor' type64='{CGPoint=dd}'/>
<retval declared_type64='SKPhysicsJointPin*' type64='@'/>
</method>
<method selector='lowerAngleLimit'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='setFrictionTorque:'>
<arg declared_type64='CGFloat' index='0' name='frictionTorque' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLowerAngleLimit:'>
<arg declared_type64='CGFloat' index='0' name='lowerAngleLimit' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setShouldEnableLimits:'>
<arg declared_type64='BOOL' index='0' name='shouldEnableLimits' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUpperAngleLimit:'>
<arg declared_type64='CGFloat' index='0' name='upperAngleLimit' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='shouldEnableLimits'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='upperAngleLimit'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
</class>
<class name='SKPhysicsJointSliding'>
<method class_method='true' selector='jointWithBodyA:bodyB:anchor:axis:'>
<arg declared_type64='SKPhysicsBody*' index='0' name='bodyA' type64='@'/>
<arg declared_type64='SKPhysicsBody*' index='1' name='bodyB' type64='@'/>
<arg declared_type64='CGPoint' index='2' name='anchor' type64='{CGPoint=dd}'/>
<arg declared_type64='CGVector' index='3' name='axis' type64='{CGVector=dd}'/>
<retval declared_type64='SKPhysicsJointSliding*' type64='@'/>
</method>
<method selector='lowerDistanceLimit'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='setLowerDistanceLimit:'>
<arg declared_type64='CGFloat' index='0' name='lowerDistanceLimit' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setShouldEnableLimits:'>
<arg declared_type64='BOOL' index='0' name='shouldEnableLimits' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUpperDistanceLimit:'>
<arg declared_type64='CGFloat' index='0' name='upperDistanceLimit' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='shouldEnableLimits'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='upperDistanceLimit'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
</class>
<class name='SKPhysicsJointSpring'>
<method selector='damping'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='frequency'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method class_method='true' selector='jointWithBodyA:bodyB:anchorA:anchorB:'>
<arg declared_type64='SKPhysicsBody*' index='0' name='bodyA' type64='@'/>
<arg declared_type64='SKPhysicsBody*' index='1' name='bodyB' type64='@'/>
<arg declared_type64='CGPoint' index='2' name='anchorA' type64='{CGPoint=dd}'/>
<arg declared_type64='CGPoint' index='3' name='anchorB' type64='{CGPoint=dd}'/>
<retval declared_type64='SKPhysicsJointSpring*' type64='@'/>
</method>
<method selector='setDamping:'>
<arg declared_type64='CGFloat' index='0' name='damping' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFrequency:'>
<arg declared_type64='CGFloat' index='0' name='frequency' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='SKPhysicsWorld'>
<method selector='addJoint:'>
<arg declared_type64='SKPhysicsJoint*' index='0' name='joint' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='bodyAlongRayStart:end:'>
<arg declared_type64='CGPoint' index='0' name='start' type64='{CGPoint=dd}'/>
<arg declared_type64='CGPoint' index='1' name='end' type64='{CGPoint=dd}'/>
<retval declared_type64='SKPhysicsBody*' type64='@'/>
</method>
<method selector='bodyAtPoint:'>
<arg declared_type64='CGPoint' index='0' name='point' type64='{CGPoint=dd}'/>
<retval declared_type64='SKPhysicsBody*' type64='@'/>
</method>
<method selector='bodyInRect:'>
<arg declared_type64='CGRect' index='0' name='rect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type64='SKPhysicsBody*' type64='@'/>
</method>
<method selector='contactDelegate'>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='enumerateBodiesAlongRayStart:end:usingBlock:'>
<arg declared_type64='CGPoint' index='0' name='start' type64='{CGPoint=dd}'/>
<arg declared_type64='CGPoint' index='1' name='end' type64='{CGPoint=dd}'/>
<arg declared_type64='void (^)(SKPhysicsBody *, CGPoint, CGVector, BOOL *)' function_pointer='true' index='2' name='block' type64='@?'>
<arg declared_type64='SKPhysicsBody*' type64='@'/>
<arg declared_type64='CGPoint' type64='{CGPoint=dd}'/>
<arg declared_type64='CGVector' type64='{CGVector=dd}'/>
<arg declared_type64='BOOL*' type64='^B'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='enumerateBodiesAtPoint:usingBlock:'>
<arg declared_type64='CGPoint' index='0' name='point' type64='{CGPoint=dd}'/>
<arg declared_type64='void (^)(SKPhysicsBody *, BOOL *)' function_pointer='true' index='1' name='block' type64='@?'>
<arg declared_type64='SKPhysicsBody*' type64='@'/>
<arg declared_type64='BOOL*' type64='^B'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='enumerateBodiesInRect:usingBlock:'>
<arg declared_type64='CGRect' index='0' name='rect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type64='void (^)(SKPhysicsBody *, BOOL *)' function_pointer='true' index='1' name='block' type64='@?'>
<arg declared_type64='SKPhysicsBody*' type64='@'/>
<arg declared_type64='BOOL*' type64='^B'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='gravity'>
<retval declared_type64='CGVector' type64='{CGVector=dd}'/>
</method>
<method selector='removeAllJoints'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='removeJoint:'>
<arg declared_type64='SKPhysicsJoint*' index='0' name='joint' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setContactDelegate:'>
<arg declared_type64='id' index='0' name='contactDelegate' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setGravity:'>
<arg declared_type64='CGVector' index='0' name='gravity' type64='{CGVector=dd}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSpeed:'>
<arg declared_type64='CGFloat' index='0' name='speed' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='speed'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
</class>
<class name='SKScene'>
<method selector='anchorPoint'>
<retval declared_type64='CGPoint' type64='{CGPoint=dd}'/>
</method>
<method selector='backgroundColor'>
<retval declared_type64='NSColor*' type64='@'/>
</method>
<method selector='convertPointFromView:'>
<arg declared_type64='CGPoint' index='0' name='point' type64='{CGPoint=dd}'/>
<retval declared_type64='CGPoint' type64='{CGPoint=dd}'/>
</method>
<method selector='convertPointToView:'>
<arg declared_type64='CGPoint' index='0' name='point' type64='{CGPoint=dd}'/>
<retval declared_type64='CGPoint' type64='{CGPoint=dd}'/>
</method>
<method selector='didChangeSize:'>
<arg declared_type64='CGSize' index='0' name='oldSize' type64='{CGSize=dd}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='didEvaluateActions'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='didMoveToView:'>
<arg declared_type64='SKView*' index='0' name='view' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='didSimulatePhysics'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithSize:'>
<arg declared_type64='CGSize' index='0' name='size' type64='{CGSize=dd}'/>
<retval declared_type64='instancetype' type64='@'/>
</method>
<method selector='physicsWorld'>
<retval declared_type64='SKPhysicsWorld*' type64='@'/>
</method>
<method selector='scaleMode'>
<retval declared_type64='SKSceneScaleMode' type64='q'/>
</method>
<method class_method='true' selector='sceneWithSize:'>
<arg declared_type64='CGSize' index='0' name='size' type64='{CGSize=dd}'/>
<retval declared_type64='instancetype' type64='@'/>
</method>
<method selector='setAnchorPoint:'>
<arg declared_type64='CGPoint' index='0' name='anchorPoint' type64='{CGPoint=dd}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBackgroundColor:'>
<arg declared_type64='NSColor*' index='0' name='backgroundColor' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setScaleMode:'>
<arg declared_type64='SKSceneScaleMode' index='0' name='scaleMode' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSize:'>
<arg declared_type64='CGSize' index='0' name='size' type64='{CGSize=dd}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='size'>
<retval declared_type64='CGSize' type64='{CGSize=dd}'/>
</method>
<method selector='update:'>
<arg declared_type64='NSTimeInterval' index='0' name='currentTime' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='view'>
<retval declared_type64='SKView*' type64='@'/>
</method>
<method selector='willMoveFromView:'>
<arg declared_type64='SKView*' index='0' name='view' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='SKShapeNode'>
<method selector='blendMode'>
<retval declared_type64='SKBlendMode' type64='q'/>
</method>
<method selector='fillColor'>
<retval declared_type64='NSColor*' type64='@'/>
</method>
<method selector='glowWidth'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='isAntialiased'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='lineWidth'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='path'>
<retval declared_type64='CGPathRef' type64='^{CGPath=}'/>
</method>
<method selector='setAntialiased:'>
<arg declared_type64='BOOL' index='0' name='antialiased' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBlendMode:'>
<arg declared_type64='SKBlendMode' index='0' name='blendMode' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFillColor:'>
<arg declared_type64='NSColor*' index='0' name='fillColor' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setGlowWidth:'>
<arg declared_type64='CGFloat' index='0' name='glowWidth' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLineWidth:'>
<arg declared_type64='CGFloat' index='0' name='lineWidth' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPath:'>
<arg declared_type64='CGPathRef' index='0' name='path' type64='^{CGPath=}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStrokeColor:'>
<arg declared_type64='NSColor*' index='0' name='strokeColor' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='strokeColor'>
<retval declared_type64='NSColor*' type64='@'/>
</method>
</class>
<class name='SKSpriteNode'>
<method selector='anchorPoint'>
<retval declared_type64='CGPoint' type64='{CGPoint=dd}'/>
</method>
<method selector='blendMode'>
<retval declared_type64='SKBlendMode' type64='q'/>
</method>
<method selector='centerRect'>
<retval declared_type64='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</method>
<method selector='color'>
<retval declared_type64='NSColor*' type64='@'/>
</method>
<method selector='colorBlendFactor'>
<retval declared_type64='CGFloat' type64='d'/>
</method>
<method selector='initWithColor:size:'>
<arg declared_type64='NSColor*' index='0' name='color' type64='@'/>
<arg declared_type64='CGSize' index='1' name='size' type64='{CGSize=dd}'/>
<retval declared_type64='instancetype' type64='@'/>
</method>
<method selector='initWithImageNamed:'>
<arg declared_type64='NSString*' index='0' name='name' type64='@'/>
<retval declared_type64='instancetype' type64='@'/>
</method>
<method selector='initWithTexture:'>
<arg declared_type64='SKTexture*' index='0' name='texture' type64='@'/>
<retval declared_type64='instancetype' type64='@'/>
</method>
<method selector='initWithTexture:color:size:'>
<arg declared_type64='SKTexture*' index='0' name='texture' type64='@'/>
<arg declared_type64='NSColor*' index='1' name='color' type64='@'/>
<arg declared_type64='CGSize' index='2' name='size' type64='{CGSize=dd}'/>
<retval declared_type64='instancetype' type64='@'/>
</method>
<method selector='setAnchorPoint:'>
<arg declared_type64='CGPoint' index='0' name='anchorPoint' type64='{CGPoint=dd}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBlendMode:'>
<arg declared_type64='SKBlendMode' index='0' name='blendMode' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCenterRect:'>
<arg declared_type64='CGRect' index='0' name='centerRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setColor:'>
<arg declared_type64='NSColor*' index='0' name='color' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setColorBlendFactor:'>
<arg declared_type64='CGFloat' index='0' name='colorBlendFactor' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSize:'>
<arg declared_type64='CGSize' index='0' name='size' type64='{CGSize=dd}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTexture:'>
<arg declared_type64='SKTexture*' index='0' name='texture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='size'>
<retval declared_type64='CGSize' type64='{CGSize=dd}'/>
</method>
<method class_method='true' selector='spriteNodeWithColor:size:'>
<arg declared_type64='NSColor*' index='0' name='color' type64='@'/>
<arg declared_type64='CGSize' index='1' name='size' type64='{CGSize=dd}'/>
<retval declared_type64='instancetype' type64='@'/>
</method>
<method class_method='true' selector='spriteNodeWithImageNamed:'>
<arg declared_type64='NSString*' index='0' name='name' type64='@'/>
<retval declared_type64='instancetype' type64='@'/>
</method>
<method class_method='true' selector='spriteNodeWithTexture:'>
<arg declared_type64='SKTexture*' index='0' name='texture' type64='@'/>
<retval declared_type64='instancetype' type64='@'/>
</method>
<method class_method='true' selector='spriteNodeWithTexture:size:'>
<arg declared_type64='SKTexture*' index='0' name='texture' type64='@'/>
<arg declared_type64='CGSize' index='1' name='size' type64='{CGSize=dd}'/>
<retval declared_type64='instancetype' type64='@'/>
</method>
<method selector='texture'>
<retval declared_type64='SKTexture*' type64='@'/>
</method>
</class>
<class name='SKTexture'>
<method selector='filteringMode'>
<retval declared_type64='SKTextureFilteringMode' type64='q'/>
</method>
<method class_method='true' selector='preloadTextures:withCompletionHandler:'>
<arg declared_type64='NSArray*' index='0' name='textures' type64='@'/>
<arg declared_type64='void (^)(void)' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='preloadWithCompletionHandler:'>
<arg declared_type64='void (^)(void)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFilteringMode:'>
<arg declared_type64='SKTextureFilteringMode' index='0' name='filteringMode' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUsesMipmaps:'>
<arg declared_type64='BOOL' index='0' name='usesMipmaps' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='size'>
<retval declared_type64='CGSize' type64='{CGSize=dd}'/>
</method>
<method selector='textureByApplyingCIFilter:'>
<arg declared_type64='CIFilter*' index='0' name='filter' type64='@'/>
<retval declared_type64='SKTexture*' type64='@'/>
</method>
<method selector='textureRect'>
<retval declared_type64='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</method>
<method class_method='true' selector='textureWithCGImage:'>
<arg declared_type64='CGImageRef' index='0' name='image' type64='^{CGImage=}'/>
<retval declared_type64='SKTexture*' type64='@'/>
</method>
<method class_method='true' selector='textureWithData:size:'>
<arg declared_type64='NSData*' index='0' name='pixelData' type64='@'/>
<arg declared_type64='CGSize' index='1' name='size' type64='{CGSize=dd}'/>
<retval declared_type64='SKTexture*' type64='@'/>
</method>
<method class_method='true' selector='textureWithData:size:rowLength:alignment:'>
<arg declared_type64='NSData*' index='0' name='pixelData' type64='@'/>
<arg declared_type64='CGSize' index='1' name='size' type64='{CGSize=dd}'/>
<arg declared_type64='unsigned int' index='2' name='rowLength' type64='I'/>
<arg declared_type64='unsigned int' index='3' name='alignment' type64='I'/>
<retval declared_type64='SKTexture*' type64='@'/>
</method>
<method class_method='true' selector='textureWithImage:'>
<arg declared_type64='NSImage*' index='0' name='image' type64='@'/>
<retval declared_type64='SKTexture*' type64='@'/>
</method>
<method class_method='true' selector='textureWithImageNamed:'>
<arg declared_type64='NSString*' index='0' name='name' type64='@'/>
<retval declared_type64='SKTexture*' type64='@'/>
</method>
<method class_method='true' selector='textureWithRect:inTexture:'>
<arg declared_type64='CGRect' index='0' name='rect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type64='SKTexture*' index='1' name='texture' type64='@'/>
<retval declared_type64='SKTexture*' type64='@'/>
</method>
<method selector='usesMipmaps'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='SKTextureAtlas'>
<method class_method='true' selector='atlasNamed:'>
<arg declared_type64='NSString*' index='0' name='name' type64='@'/>
<retval declared_type64='SKTextureAtlas*' type64='@'/>
</method>
<method class_method='true' selector='preloadTextureAtlases:withCompletionHandler:'>
<arg declared_type64='NSArray*' index='0' name='textureAtlases' type64='@'/>
<arg declared_type64='void (^)(void)' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='preloadWithCompletionHandler:'>
<arg declared_type64='void (^)(void)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='textureNamed:'>
<arg declared_type64='NSString*' index='0' name='name' type64='@'/>
<retval declared_type64='SKTexture*' type64='@'/>
</method>
<method selector='textureNames'>
<retval declared_type64='NSArray*' type64='@'/>
</method>
</class>
<class name='SKTransition'>
<method class_method='true' selector='crossFadeWithDuration:'>
<arg declared_type64='NSTimeInterval' index='0' name='sec' type64='d'/>
<retval declared_type64='SKTransition*' type64='@'/>
</method>
<method class_method='true' selector='doorsCloseHorizontalWithDuration:'>
<arg declared_type64='NSTimeInterval' index='0' name='sec' type64='d'/>
<retval declared_type64='SKTransition*' type64='@'/>
</method>
<method class_method='true' selector='doorsCloseVerticalWithDuration:'>
<arg declared_type64='NSTimeInterval' index='0' name='sec' type64='d'/>
<retval declared_type64='SKTransition*' type64='@'/>
</method>
<method class_method='true' selector='doorsOpenHorizontalWithDuration:'>
<arg declared_type64='NSTimeInterval' index='0' name='sec' type64='d'/>
<retval declared_type64='SKTransition*' type64='@'/>
</method>
<method class_method='true' selector='doorsOpenVerticalWithDuration:'>
<arg declared_type64='NSTimeInterval' index='0' name='sec' type64='d'/>
<retval declared_type64='SKTransition*' type64='@'/>
</method>
<method class_method='true' selector='doorwayWithDuration:'>
<arg declared_type64='NSTimeInterval' index='0' name='sec' type64='d'/>
<retval declared_type64='SKTransition*' type64='@'/>
</method>
<method class_method='true' selector='fadeWithColor:duration:'>
<arg declared_type64='NSColor*' index='0' name='color' type64='@'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKTransition*' type64='@'/>
</method>
<method class_method='true' selector='fadeWithDuration:'>
<arg declared_type64='NSTimeInterval' index='0' name='sec' type64='d'/>
<retval declared_type64='SKTransition*' type64='@'/>
</method>
<method class_method='true' selector='flipHorizontalWithDuration:'>
<arg declared_type64='NSTimeInterval' index='0' name='sec' type64='d'/>
<retval declared_type64='SKTransition*' type64='@'/>
</method>
<method class_method='true' selector='flipVerticalWithDuration:'>
<arg declared_type64='NSTimeInterval' index='0' name='sec' type64='d'/>
<retval declared_type64='SKTransition*' type64='@'/>
</method>
<method class_method='true' selector='moveInWithDirection:duration:'>
<arg declared_type64='SKTransitionDirection' index='0' name='direction' type64='q'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKTransition*' type64='@'/>
</method>
<method selector='pausesIncomingScene'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='pausesOutgoingScene'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method class_method='true' selector='pushWithDirection:duration:'>
<arg declared_type64='SKTransitionDirection' index='0' name='direction' type64='q'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKTransition*' type64='@'/>
</method>
<method class_method='true' selector='revealWithDirection:duration:'>
<arg declared_type64='SKTransitionDirection' index='0' name='direction' type64='q'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKTransition*' type64='@'/>
</method>
<method selector='setPausesIncomingScene:'>
<arg declared_type64='BOOL' index='0' name='pausesIncomingScene' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPausesOutgoingScene:'>
<arg declared_type64='BOOL' index='0' name='pausesOutgoingScene' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='transitionWithCIFilter:duration:'>
<arg declared_type64='CIFilter*' index='0' name='filter' type64='@'/>
<arg declared_type64='NSTimeInterval' index='1' name='sec' type64='d'/>
<retval declared_type64='SKTransition*' type64='@'/>
</method>
</class>
<class name='SKVideoNode'>
<method selector='anchorPoint'>
<retval declared_type64='CGPoint' type64='{CGPoint=dd}'/>
</method>
<method selector='initWithAVPlayer:'>
<arg declared_type64='AVPlayer*' index='0' name='player' type64='@'/>
<retval declared_type64='instancetype' type64='@'/>
</method>
<method selector='initWithVideoFileNamed:'>
<arg declared_type64='NSString*' index='0' name='videoFile' type64='@'/>
<retval declared_type64='instancetype' type64='@'/>
</method>
<method selector='initWithVideoURL:'>
<arg declared_type64='NSURL*' index='0' name='url' type64='@'/>
<retval declared_type64='instancetype' type64='@'/>
</method>
<method selector='pause'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='play'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setAnchorPoint:'>
<arg declared_type64='CGPoint' index='0' name='anchorPoint' type64='{CGPoint=dd}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSize:'>
<arg declared_type64='CGSize' index='0' name='size' type64='{CGSize=dd}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='size'>
<retval declared_type64='CGSize' type64='{CGSize=dd}'/>
</method>
<method class_method='true' selector='videoNodeWithAVPlayer:'>
<arg declared_type64='AVPlayer*' index='0' name='player' type64='@'/>
<retval declared_type64='SKVideoNode*' type64='@'/>
</method>
<method class_method='true' selector='videoNodeWithVideoFileNamed:'>
<arg declared_type64='NSString*' index='0' name='videoFile' type64='@'/>
<retval declared_type64='SKVideoNode*' type64='@'/>
</method>
<method class_method='true' selector='videoNodeWithVideoURL:'>
<arg declared_type64='NSURL*' index='0' name='videoURL' type64='@'/>
<retval declared_type64='SKVideoNode*' type64='@'/>
</method>
</class>
<class name='SKView'>
<method selector='convertPoint:fromScene:'>
<arg declared_type64='CGPoint' index='0' name='point' type64='{CGPoint=dd}'/>
<arg declared_type64='SKScene*' index='1' name='scene' type64='@'/>
<retval declared_type64='CGPoint' type64='{CGPoint=dd}'/>
</method>
<method selector='convertPoint:toScene:'>
<arg declared_type64='CGPoint' index='0' name='point' type64='{CGPoint=dd}'/>
<arg declared_type64='SKScene*' index='1' name='scene' type64='@'/>
<retval declared_type64='CGPoint' type64='{CGPoint=dd}'/>
</method>
<method selector='frameInterval'>
<retval declared_type64='NSInteger' type64='q'/>
</method>
<method selector='ignoresSiblingOrder'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isAsynchronous'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isPaused'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='presentScene:'>
<arg declared_type64='SKScene*' index='0' name='scene' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='presentScene:transition:'>
<arg declared_type64='SKScene*' index='0' name='scene' type64='@'/>
<arg declared_type64='SKTransition*' index='1' name='transition' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='scene'>
<retval declared_type64='SKScene*' type64='@'/>
</method>
<method selector='setAsynchronous:'>
<arg declared_type64='BOOL' index='0' name='asynchronous' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFrameInterval:'>
<arg declared_type64='NSInteger' index='0' name='frameInterval' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIgnoresSiblingOrder:'>
<arg declared_type64='BOOL' index='0' name='ignoresSiblingOrder' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPaused:'>
<arg declared_type64='BOOL' index='0' name='paused' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setShowsDrawCount:'>
<arg declared_type64='BOOL' index='0' name='showsDrawCount' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setShowsFPS:'>
<arg declared_type64='BOOL' index='0' name='showsFPS' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setShowsNodeCount:'>
<arg declared_type64='BOOL' index='0' name='showsNodeCount' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='showsDrawCount'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='showsFPS'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='showsNodeCount'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='textureFromNode:'>
<arg declared_type64='SKNode*' index='0' name='node' type64='@'/>
<retval declared_type64='SKTexture*' type64='@'/>
</method>
</class>
<informal_protocol name='SKPhysicsContactDelegate'>
<method selector='didBeginContact:' type64='v24@0:8@16'>
<arg declared_type64='SKPhysicsContact*' index='0' name='contact' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='didEndContact:' type64='v24@0:8@16'>
<arg declared_type64='SKPhysicsContact*' index='0' name='contact' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</informal_protocol>
</signatures>
