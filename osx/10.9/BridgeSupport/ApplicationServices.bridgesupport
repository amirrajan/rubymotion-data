<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/CoreGraphics.framework'/>
<depends_on path='/System/Library/Frameworks/CoreText.framework'/>
<depends_on path='/System/Library/Frameworks/ImageIO.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework'/>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/LangAnalysis.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/PrintCore.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/SpeechSynthesis.framework'/>
<depends_on path='/System/Library/Frameworks/CoreGraphics.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/IOKit.framework'/>
<struct name='ATSFSSpec' type='{FSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}' type64='{ATSFSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}'>
<field declared_type='FSVolumeRefNum' name='vRefNum' type='s'/>
<field declared_type='SInt32' name='parID' type='l' type64='i'/>
<field declared_type='StrFileName' name='name' type='[64C]'/>
</struct>
<struct name='ATSFontFilter' type='{ATSFontFilter=&quot;version&quot;I&quot;filterSelector&quot;i&quot;filter&quot;(?=&quot;generationFilter&quot;I&quot;fontFamilyFilter&quot;I&quot;fontFamilyApplierFunctionFilter&quot;^?&quot;fontApplierFunctionFilter&quot;^?&quot;fontFileRefFilter&quot;^{FSRef})}'>
<field declared_type='UInt32' name='version' type='L' type64='I'/>
<field declared_type='ATSFontFilterSelector' name='filterSelector' type='i'/>
<field declared_type='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/System/Library/Frameworks/ApplicationServices.framework/Frameworks/ATS.framework/Headers/ATSFont.h:121:3)' name='filter' type='(?=&quot;generationFilter&quot;I&quot;fontFamilyFilter&quot;I&quot;fontFamilyApplierFunctionFilter&quot;^?&quot;fontApplierFunctionFilter&quot;^?&quot;fontFileRefFilter&quot;^{FSRef})'/>
</struct>
<struct name='ATSFontMetrics' type='{ATSFontMetrics=&quot;version&quot;I&quot;ascent&quot;f&quot;descent&quot;f&quot;leading&quot;f&quot;avgAdvanceWidth&quot;f&quot;maxAdvanceWidth&quot;f&quot;minLeftSideBearing&quot;f&quot;minRightSideBearing&quot;f&quot;stemWidth&quot;f&quot;stemHeight&quot;f&quot;capHeight&quot;f&quot;xHeight&quot;f&quot;italicAngle&quot;f&quot;underlinePosition&quot;f&quot;underlineThickness&quot;f}' type64='{ATSFontMetrics=&quot;version&quot;I&quot;ascent&quot;d&quot;descent&quot;d&quot;leading&quot;d&quot;avgAdvanceWidth&quot;d&quot;maxAdvanceWidth&quot;d&quot;minLeftSideBearing&quot;d&quot;minRightSideBearing&quot;d&quot;stemWidth&quot;d&quot;stemHeight&quot;d&quot;capHeight&quot;d&quot;xHeight&quot;d&quot;italicAngle&quot;d&quot;underlinePosition&quot;d&quot;underlineThickness&quot;d}'>
<field declared_type='UInt32' name='version' type='L' type64='I'/>
<field declared_type='CGFloat' name='ascent' type='f' type64='d'/>
<field declared_type='CGFloat' name='descent' type='f' type64='d'/>
<field declared_type='CGFloat' name='leading' type='f' type64='d'/>
<field declared_type='CGFloat' name='avgAdvanceWidth' type='f' type64='d'/>
<field declared_type='CGFloat' name='maxAdvanceWidth' type='f' type64='d'/>
<field declared_type='CGFloat' name='minLeftSideBearing' type='f' type64='d'/>
<field declared_type='CGFloat' name='minRightSideBearing' type='f' type64='d'/>
<field declared_type='CGFloat' name='stemWidth' type='f' type64='d'/>
<field declared_type='CGFloat' name='stemHeight' type='f' type64='d'/>
<field declared_type='CGFloat' name='capHeight' type='f' type64='d'/>
<field declared_type='CGFloat' name='xHeight' type='f' type64='d'/>
<field declared_type='CGFloat' name='italicAngle' type='f' type64='d'/>
<field declared_type='CGFloat' name='underlinePosition' type='f' type64='d'/>
<field declared_type='CGFloat' name='underlineThickness' type='f' type64='d'/>
</struct>
<struct name='ATSFontQuerySourceContext' type='{ATSFontQuerySourceContext=&quot;version&quot;I&quot;refCon&quot;^v&quot;retain&quot;^?&quot;release&quot;^?}'>
<field declared_type='UInt32' name='version' type='L' type64='I'/>
<field declared_type='void*' name='refCon' type='^v'/>
<field declared_type='CFAllocatorRetainCallBack' function_pointer='true' name='retain' type='^?'>
<arg const='true' declared_type='void*' type='^v'/>
<retval const='true' declared_type='void*' type='^v'/>
</field>
<field declared_type='CFAllocatorReleaseCallBack' function_pointer='true' name='release' type='^?'>
<arg const='true' declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='ATSGlyphIdealMetrics' type='{ATSGlyphIdealMetrics=&quot;advance&quot;{Float32Point=&quot;x&quot;f&quot;y&quot;f}&quot;sideBearing&quot;{Float32Point=&quot;x&quot;f&quot;y&quot;f}&quot;otherSideBearing&quot;{Float32Point=&quot;x&quot;f&quot;y&quot;f}}' type64='{ATSGlyphIdealMetrics=&quot;advance&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;sideBearing&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;otherSideBearing&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}}'>
<field declared_type='ATSPoint' name='advance' type='{Float32Point=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='ATSPoint' name='sideBearing' type='{Float32Point=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='ATSPoint' name='otherSideBearing' type='{Float32Point=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
</struct>
<struct name='ATSGlyphScreenMetrics' type='{ATSGlyphScreenMetrics=&quot;deviceAdvance&quot;{Float32Point=&quot;x&quot;f&quot;y&quot;f}&quot;topLeft&quot;{Float32Point=&quot;x&quot;f&quot;y&quot;f}&quot;height&quot;I&quot;width&quot;I&quot;sideBearing&quot;{Float32Point=&quot;x&quot;f&quot;y&quot;f}&quot;otherSideBearing&quot;{Float32Point=&quot;x&quot;f&quot;y&quot;f}}' type64='{ATSGlyphScreenMetrics=&quot;deviceAdvance&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;topLeft&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;height&quot;I&quot;width&quot;I&quot;sideBearing&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}&quot;otherSideBearing&quot;{CGPoint=&quot;x&quot;d&quot;y&quot;d}}'>
<field declared_type='ATSPoint' name='deviceAdvance' type='{Float32Point=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='ATSPoint' name='topLeft' type='{Float32Point=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='UInt32' name='height' type='L' type64='I'/>
<field declared_type='UInt32' name='width' type='L' type64='I'/>
<field declared_type='ATSPoint' name='sideBearing' type='{Float32Point=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
<field declared_type='ATSPoint' name='otherSideBearing' type='{Float32Point=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'/>
</struct>
<struct name='ATSJustWidthDeltaEntryOverride' type='{ATSJustWidthDeltaEntryOverride=&quot;beforeGrowLimit&quot;i&quot;beforeShrinkLimit&quot;i&quot;afterGrowLimit&quot;i&quot;afterShrinkLimit&quot;i&quot;growFlags&quot;S&quot;shrinkFlags&quot;S}'>
<field declared_type='Fixed' name='beforeGrowLimit' type='l' type64='i'/>
<field declared_type='Fixed' name='beforeShrinkLimit' type='l' type64='i'/>
<field declared_type='Fixed' name='afterGrowLimit' type='l' type64='i'/>
<field declared_type='Fixed' name='afterShrinkLimit' type='l' type64='i'/>
<field declared_type='JustificationFlags' name='growFlags' type='S'/>
<field declared_type='JustificationFlags' name='shrinkFlags' type='S'/>
</struct>
<struct name='ATSLayoutRecord' type='{ATSLayoutRecord=&quot;glyphID&quot;S&quot;flags&quot;I&quot;originalOffset&quot;I&quot;realPos&quot;i}' type64='{ATSLayoutRecord=&quot;glyphID&quot;S&quot;flags&quot;I&quot;originalOffset&quot;Q&quot;realPos&quot;i}'>
<field declared_type='ATSGlyphRef' name='glyphID' type='S'/>
<field declared_type='ATSGlyphInfoFlags' name='flags' type='L' type64='I'/>
<field declared_type='ByteCount' name='originalOffset' type='L' type64='Q'/>
<field declared_type='Fixed' name='realPos' type='l' type64='i'/>
</struct>
<struct name='ATSPoint' type='{Float32Point=&quot;x&quot;f&quot;y&quot;f}' type64='{CGPoint=&quot;x&quot;d&quot;y&quot;d}'>
<field declared_type='Float32' declared_type64='CGFloat' name='x' type='f' type64='d'/>
<field declared_type='Float32' declared_type64='CGFloat' name='y' type='f' type64='d'/>
</struct>
<struct name='ATSTrapezoid' type='{ATSTrapezoid=&quot;upperLeft&quot;{FixedPoint=&quot;x&quot;i&quot;y&quot;i}&quot;upperRight&quot;{FixedPoint=&quot;x&quot;i&quot;y&quot;i}&quot;lowerRight&quot;{FixedPoint=&quot;x&quot;i&quot;y&quot;i}&quot;lowerLeft&quot;{FixedPoint=&quot;x&quot;i&quot;y&quot;i}}'>
<field declared_type='FixedPoint' name='upperLeft' type='{FixedPoint=&quot;x&quot;i&quot;y&quot;i}'/>
<field declared_type='FixedPoint' name='upperRight' type='{FixedPoint=&quot;x&quot;i&quot;y&quot;i}'/>
<field declared_type='FixedPoint' name='lowerRight' type='{FixedPoint=&quot;x&quot;i&quot;y&quot;i}'/>
<field declared_type='FixedPoint' name='lowerLeft' type='{FixedPoint=&quot;x&quot;i&quot;y&quot;i}'/>
</struct>
<struct name='ATSUCurvePath' type='{ATSUCurvePath=&quot;vectors&quot;I&quot;controlBits&quot;[1L]&quot;vector&quot;[1{Float32Point=&quot;x&quot;f&quot;y&quot;f}]}' type64='{ATSUCurvePath=&quot;vectors&quot;I&quot;controlBits&quot;[1I]&quot;vector&quot;[1{CGPoint=&quot;x&quot;d&quot;y&quot;d}]}'>
<field declared_type='UInt32' name='vectors' type='L' type64='I'/>
<field declared_type='UInt32*' name='controlBits' type='[1L]' type64='[1I]'/>
<field declared_type='ATSPoint*' name='vector' type='[1{Float32Point=&quot;x&quot;f&quot;y&quot;f}]' type64='[1{CGPoint=&quot;x&quot;d&quot;y&quot;d}]'/>
</struct>
<struct name='ATSUCurvePaths' type='{ATSUCurvePaths=&quot;contours&quot;I&quot;contour&quot;[1{ATSUCurvePath=&quot;vectors&quot;I&quot;controlBits&quot;[1L]&quot;vector&quot;[1{Float32Point=&quot;x&quot;f&quot;y&quot;f}]}]}' type64='{ATSUCurvePaths=&quot;contours&quot;I&quot;contour&quot;[1{ATSUCurvePath=&quot;vectors&quot;I&quot;controlBits&quot;[1I]&quot;vector&quot;[1{CGPoint=&quot;x&quot;d&quot;y&quot;d}]}]}'>
<field declared_type='UInt32' name='contours' type='L' type64='I'/>
<field declared_type='ATSUCurvePath*' name='contour' type='[1{ATSUCurvePath=&quot;vectors&quot;I&quot;controlBits&quot;[1L]&quot;vector&quot;[1{Float32Point=&quot;x&quot;f&quot;y&quot;f}]}]' type64='[1{ATSUCurvePath=&quot;vectors&quot;I&quot;controlBits&quot;[1I]&quot;vector&quot;[1{CGPoint=&quot;x&quot;d&quot;y&quot;d}]}]'/>
</struct>
<struct name='ATSULayoutOperationOverrideSpecifier' type='{ATSULayoutOperationOverrideSpecifier=&quot;operationSelector&quot;I&quot;overrideUPP&quot;^?}'>
<field declared_type='ATSULayoutOperationSelector' name='operationSelector' type='L' type64='I'/>
<field declared_type='ATSUDirectLayoutOperationOverrideUPP' function_pointer='true' name='overrideUPP' type='^?'>
<arg declared_type='ATSULayoutOperationSelector' type='L' type64='I'/>
<arg declared_type='ATSULineRef' type='^{ATSGlyphVector=}'/>
<arg declared_type='URefCon' type='L' type64='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ATSULayoutOperationCallbackStatus*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</field>
</struct>
<struct name='FMFilter' type='{FMFilter=&quot;format&quot;I&quot;selector&quot;I&quot;filter&quot;(?=&quot;fontTechnologyFilter&quot;I&quot;fontContainerFilter&quot;{FSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}&quot;generationFilter&quot;I&quot;fontFamilyCallbackFilter&quot;^?&quot;fontCallbackFilter&quot;^?&quot;fontDirectoryFilter&quot;{FMFontDirectoryFilter=&quot;fontFolderDomain&quot;s&quot;reserved&quot;[2L]}&quot;fontFileRefFilter&quot;^{FSRef})}' type64='{FMFilter=&quot;format&quot;I&quot;selector&quot;I&quot;filter&quot;(?=&quot;fontTechnologyFilter&quot;I&quot;fontContainerFilter&quot;{ATSFSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}&quot;generationFilter&quot;I&quot;fontFamilyCallbackFilter&quot;^?&quot;fontCallbackFilter&quot;^?&quot;fontDirectoryFilter&quot;{FMFontDirectoryFilter=&quot;fontFolderDomain&quot;s&quot;reserved&quot;[2I]}&quot;fontFileRefFilter&quot;^{FSRef})}'>
<field declared_type='UInt32' name='format' type='L' type64='I'/>
<field declared_type='FMFilterSelector' name='selector' type='L' type64='I'/>
<field declared_type='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/System/Library/Frameworks/ApplicationServices.framework/Frameworks/ATS.framework/Headers/ATSTypes.h:244:3)' name='filter' type='(?=&quot;fontTechnologyFilter&quot;I&quot;fontContainerFilter&quot;{FSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}&quot;generationFilter&quot;I&quot;fontFamilyCallbackFilter&quot;^?&quot;fontCallbackFilter&quot;^?&quot;fontDirectoryFilter&quot;{FMFontDirectoryFilter=&quot;fontFolderDomain&quot;s&quot;reserved&quot;[2L]}&quot;fontFileRefFilter&quot;^{FSRef})' type64='(?=&quot;fontTechnologyFilter&quot;I&quot;fontContainerFilter&quot;{ATSFSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}&quot;generationFilter&quot;I&quot;fontFamilyCallbackFilter&quot;^?&quot;fontCallbackFilter&quot;^?&quot;fontDirectoryFilter&quot;{FMFontDirectoryFilter=&quot;fontFolderDomain&quot;s&quot;reserved&quot;[2I]}&quot;fontFileRefFilter&quot;^{FSRef})'/>
</struct>
<struct name='FMFontDirectoryFilter' type='{FMFontDirectoryFilter=&quot;fontFolderDomain&quot;s&quot;reserved&quot;[2L]}' type64='{FMFontDirectoryFilter=&quot;fontFolderDomain&quot;s&quot;reserved&quot;[2I]}'>
<field declared_type='SInt16' name='fontFolderDomain' type='s'/>
<field declared_type='UInt32*' name='reserved' type='[2L]' type64='[2I]'/>
</struct>
<struct name='FMFontFamilyInstance' type='{FMFontFamilyInstance=&quot;fontFamily&quot;s&quot;fontStyle&quot;s}'>
<field declared_type='FMFontFamily' name='fontFamily' type='s'/>
<field declared_type='FMFontStyle' name='fontStyle' type='s'/>
</struct>
<struct name='FMFontFamilyInstanceIterator' type='{FMFontFamilyInstanceIterator=&quot;reserved&quot;[16L]}' type64='{FMFontFamilyInstanceIterator=&quot;reserved&quot;[16I]}'>
<field declared_type='UInt32*' name='reserved' type='[16L]' type64='[16I]'/>
</struct>
<struct name='FMFontFamilyIterator' type='{FMFontFamilyIterator=&quot;reserved&quot;[16L]}' type64='{FMFontFamilyIterator=&quot;reserved&quot;[16I]}'>
<field declared_type='UInt32*' name='reserved' type='[16L]' type64='[16I]'/>
</struct>
<struct name='FMFontIterator' type='{FMFontIterator=&quot;reserved&quot;[16L]}' type64='{FMFontIterator=&quot;reserved&quot;[16I]}'>
<field declared_type='UInt32*' name='reserved' type='[16L]' type64='[16I]'/>
</struct>
<cftype name='ATSFontFamilyIterator' type='^{ATSFontFamilyIterator_=}'/>
<cftype name='ATSFontIterator' type='^{ATSFontIterator_=}'/>
<cftype name='ATSFontNotificationInfoRef' type='^{ATSFontNotificationInfoRef_=}'/>
<cftype name='ATSFontNotificationRef' type='^{ATSFontNotificationRef_=}'/>
<cftype name='ATSULineRef' type='^{ATSGlyphVector=}'/>
<string_constant name='kATSFontNameTableBytes' nsstring='true' value='font name table bytes'/>
<string_constant name='kATSFontNameTableCode' nsstring='true' value='font name code'/>
<string_constant name='kATSFontNameTableLanguage' nsstring='true' value='font language code'/>
<string_constant name='kATSFontNameTablePlatform' nsstring='true' value='font platform code'/>
<string_constant name='kATSFontNameTableScript' nsstring='true' value='font script code'/>
<string_constant name='kATSQueryClientPID' nsstring='true' value='ATS client pid'/>
<string_constant name='kATSQueryFontName' nsstring='true' value='font name'/>
<string_constant name='kATSQueryFontNameTableEntries' nsstring='true' value='font name table entries'/>
<string_constant name='kATSQueryFontPostScriptName' nsstring='true' value='font PS name'/>
<string_constant name='kATSQueryQDFamilyName' nsstring='true' value='font family name'/>
<enum name='ATSFONTREF_DEFINED' value='1'/>
<enum name='kATSBoldQDStretch' value='98304'/>
<enum name='kATSCubicCurveType' value='1'/>
<enum name='kATSDeletedGlyphcode' value='65535'/>
<enum name='kATSFileReferenceFilterSelector' value='10'/>
<enum name='kATSFontAutoActivationAsk' value='4'/>
<enum name='kATSFontAutoActivationDefault' value='0'/>
<enum name='kATSFontAutoActivationDisabled' value='1'/>
<enum name='kATSFontAutoActivationEnabled' value='2'/>
<enum name='kATSFontContainerRefUnspecified' value='0'/>
<enum name='kATSFontContextGlobal' value='1'/>
<enum name='kATSFontContextLocal' value='2'/>
<enum name='kATSFontContextUnspecified' value='0'/>
<enum name='kATSFontFamilyRefUnspecified' value='0'/>
<enum name='kATSFontFilterCurrentVersion' value='0'/>
<enum name='kATSFontFilterSelectorFontApplierFunction' value='9'/>
<enum name='kATSFontFilterSelectorFontFamily' value='7'/>
<enum name='kATSFontFilterSelectorFontFamilyApplierFunction' value='8'/>
<enum name='kATSFontFilterSelectorGeneration' value='3'/>
<enum name='kATSFontFilterSelectorUnspecified' value='0'/>
<enum name='kATSFontFormatUnspecified' value='0'/>
<enum name='kATSFontNotifyActionDirectoriesChanged' value='2'/>
<enum name='kATSFontNotifyActionFontsChanged' value='1'/>
<enum name='kATSFontNotifyOptionDefault' value='0'/>
<enum name='kATSFontNotifyOptionReceiveWhileSuspended' value='1'/>
<enum name='kATSFontRefUnspecified' value='0'/>
<enum name='kATSGenerationUnspecified' value='0'/>
<enum name='kATSGlyphInfoAppleReserved' value='536608744'/>
<enum name='kATSGlyphInfoByteSizeMask' value='7'/>
<enum name='kATSGlyphInfoHasImposedWidth' value='16'/>
<enum name='kATSGlyphInfoIsAttachment' value='2147483648'/>
<enum name='kATSGlyphInfoIsLTHanger' value='1073741824'/>
<enum name='kATSGlyphInfoIsRBHanger' value='536870912'/>
<enum name='kATSGlyphInfoIsWhiteSpace' value='262144'/>
<enum name='kATSGlyphInfoTerminatorGlyph' value='524288'/>
<enum name='kATSInvalidFontAccess' value='-982'/>
<enum name='kATSInvalidFontContainerAccess' value='-985'/>
<enum name='kATSInvalidFontFamilyAccess' value='-981'/>
<enum name='kATSInvalidFontTableAccess' value='-984'/>
<enum name='kATSInvalidGlyphAccess' value='-986'/>
<enum name='kATSItalicQDSkew' value='16384'/>
<enum name='kATSIterationCompleted' value='-980'/>
<enum name='kATSIterationScopeModified' value='-983'/>
<enum name='kATSLineAppleReserved' value='4242538496'/>
<enum name='kATSLineApplyAntiAliasing' value='2048'/>
<enum name='kATSLineBreakToNearestCharacter' value='33554432'/>
<enum name='kATSLineDisableAllBaselineAdjustments' value='524288'/>
<enum name='kATSLineDisableAllGlyphMorphing' value='131072'/>
<enum name='kATSLineDisableAllJustification' value='65536'/>
<enum name='kATSLineDisableAllKerningAdjustments' value='262144'/>
<enum name='kATSLineDisableAllLayoutOperations' value='2031616'/>
<enum name='kATSLineDisableAllTrackingAdjustments' value='1048576'/>
<enum name='kATSLineDisableAutoAdjustDisplayPos' value='16384'/>
<enum name='kATSLineDisableNegativeJustification' value='8192'/>
<enum name='kATSLineFillOutToWidth' value='256'/>
<enum name='kATSLineFractDisable' value='64'/>
<enum name='kATSLineHasNoHangers' value='2'/>
<enum name='kATSLineHasNoOpticalAlignment' value='4'/>
<enum name='kATSLineIgnoreFontLeading' value='1024'/>
<enum name='kATSLineImposeNoAngleForEnds' value='128'/>
<enum name='kATSLineIsDisplayOnly' value='1'/>
<enum name='kATSLineKeepSpacesOutOfMargin' value='8'/>
<enum name='kATSLineLastNoJustification' value='32'/>
<enum name='kATSLineNoAntiAliasing' value='4096'/>
<enum name='kATSLineNoLayoutOptions' value='0'/>
<enum name='kATSLineNoSpecialJustification' value='16'/>
<enum name='kATSLineTabAdjustEnabled' value='512'/>
<enum name='kATSLineUseDeviceMetrics' value='16777216'/>
<enum name='kATSLineUseQDRendering' value='32768'/>
<enum name='kATSNoTracking' value='-2147483648'/>
<enum name='kATSOptionFlagsActivateDisabled' value='32'/>
<enum name='kATSOptionFlagsComposeFontPostScriptName' value='1'/>
<enum name='kATSOptionFlagsDefault' value='0'/>
<enum name='kATSOptionFlagsDefaultScope' value='0'/>
<enum name='kATSOptionFlagsDoNotNotify' value='128'/>
<enum name='kATSOptionFlagsIncludeDisabledMask' value='128'/>
<enum name='kATSOptionFlagsIterateByPrecedenceMask' value='32'/>
<enum name='kATSOptionFlagsIterationScopeMask' value='28672'/>
<enum name='kATSOptionFlagsProcessSubdirectories' value='64'/>
<enum name='kATSOptionFlagsRecordPersistently' value='262144'/>
<enum name='kATSOptionFlagsRestrictedScope' value='8192'/>
<enum name='kATSOptionFlagsUnRestrictedScope' value='4096'/>
<enum name='kATSOptionFlagsUseDataFork' value='768'/>
<enum name='kATSOptionFlagsUseDataForkAsResourceFork' value='256'/>
<enum name='kATSOptionFlagsUseResourceFork' value='512'/>
<enum name='kATSOtherCurveType' value='3'/>
<enum name='kATSQuadCurveType' value='2'/>
<enum name='kATSQueryActivateFontMessage' value='1635021665'/>
<enum name='kATSRadiansFactor' value='1144'/>
<enum name='kATSStyleAppleReserved' value='4294967288'/>
<enum name='kATSStyleApplyAntiAliasing' value='2'/>
<enum name='kATSStyleApplyHints' value='0'/>
<enum name='kATSStyleNoAntiAliasing' value='4'/>
<enum name='kATSStyleNoHinting' value='1'/>
<enum name='kATSStyleNoOptions' value='0'/>
<enum name='kATSULayoutOperationAppleReserved' value='4294967232'/>
<enum name='kATSULayoutOperationBaselineAdjustment' value='8'/>
<enum name='kATSULayoutOperationCallbackStatusContinue' value='1'/>
<enum name='kATSULayoutOperationCallbackStatusHandled' value='0'/>
<enum name='kATSULayoutOperationJustification' value='1'/>
<enum name='kATSULayoutOperationKerningAdjustment' value='4'/>
<enum name='kATSULayoutOperationMorph' value='2'/>
<enum name='kATSULayoutOperationNone' value='0'/>
<enum name='kATSULayoutOperationPostLayoutAdjustment' value='32'/>
<enum name='kATSULayoutOperationTrackingAdjustment' value='16'/>
<enum name='kATSUseCaretOrigins' value='0'/>
<enum name='kATSUseDeviceOrigins' value='1'/>
<enum name='kATSUseFractionalOrigins' value='2'/>
<enum name='kATSUseGlyphAdvance' value='2147483647'/>
<enum name='kATSUseLineHeight' value='2147483647'/>
<enum name='kATSUseOriginFlags' value='3'/>
<enum name='kFMCurrentFilterFormat' value='0'/>
<enum name='kFMFontCallbackFilterSelector' value='5'/>
<enum name='kFMFontContainerFilterSelector' value='2'/>
<enum name='kFMFontDirectoryFilterSelector' value='6'/>
<enum name='kFMFontFamilyCallbackFilterSelector' value='4'/>
<enum name='kFMFontFileRefFilterSelector' value='10'/>
<enum name='kFMFontTechnologyFilterSelector' value='1'/>
<enum name='kFMGenerationFilterSelector' value='3'/>
<enum name='kFMPostScriptFontTechnology' value='1954115633'/>
<enum name='kFMTrueTypeFontTechnology' value='1953658213'/>
<enum name='kFontNoLanguage' value='4294967295'/>
<enum name='kFontNoName' value='4294967295'/>
<enum name='kFontNoPlatform' value='4294967295'/>
<enum name='kFontNoScript' value='4294967295'/>
<enum name='kInvalidFont' value='0'/>
<enum name='kInvalidFontFamily' value='-1'/>
<enum name='kInvalidGeneration' value='0'/>
<function name='ATSCreateFontQueryRunLoopSource'>
<arg declared_type='CFIndex' name='queryOrder' type='l' type64='q'/>
<arg declared_type='CFIndex' name='sourceOrder' type='l' type64='q'/>
<arg declared_type='ATSFontQueryCallback' function_pointer='true' name='callout' type='^?'>
<arg declared_type='ATSFontQueryMessageID' type='i'/>
<arg declared_type='CFPropertyListRef' type='@'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='CFPropertyListRef' type='@'/>
</arg>
<arg const='true' declared_type='ATSFontQuerySourceContext*' name='context' type='^{ATSFontQuerySourceContext=I^v^?^?}'/>
<retval already_retained='true' declared_type='CFRunLoopSourceRef' type='^{__CFRunLoopSource=}'/>
</function>
<function name='ATSFontActivateFromFileReference'>
<arg const='true' declared_type='FSRef*' name='iFile' type='^{FSRef=[80C]}'/>
<arg declared_type='ATSFontContext' name='iContext' type='L' type64='I'/>
<arg declared_type='ATSFontFormat' name='iFormat' type='L' type64='I'/>
<arg declared_type='void*' name='iRefCon' type='^v'/>
<arg declared_type='ATSOptionFlags' name='iOptions' type='L' type64='I'/>
<arg declared_type='ATSFontContainerRef*' name='oContainer' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontActivateFromMemory'>
<arg declared_type='LogicalAddress' name='iData' type='^v'/>
<arg declared_type='ByteCount' name='iLength' type='L' type64='Q'/>
<arg declared_type='ATSFontContext' name='iContext' type='L' type64='I'/>
<arg declared_type='ATSFontFormat' name='iFormat' type='L' type64='I'/>
<arg declared_type='void*' name='iReserved' type='^v'/>
<arg declared_type='ATSOptionFlags' name='iOptions' type='L' type64='I'/>
<arg declared_type='ATSFontContainerRef*' name='oContainer' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontApplyFunction'>
<arg declared_type='ATSFontApplierFunction' function_pointer='true' name='iFunction' type='^?'>
<arg declared_type='ATSFontRef' type='L' type64='I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg declared_type='void*' name='iRefCon' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontDeactivate'>
<arg declared_type='ATSFontContainerRef' name='iContainer' type='L' type64='I'/>
<arg declared_type='void*' name='iRefCon' type='^v'/>
<arg declared_type='ATSOptionFlags' name='iOptions' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontFamilyApplyFunction'>
<arg declared_type='ATSFontFamilyApplierFunction' function_pointer='true' name='iFunction' type='^?'>
<arg declared_type='ATSFontFamilyRef' type='L' type64='I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg declared_type='void*' name='iRefCon' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontFamilyFindFromName'>
<arg declared_type='CFStringRef' name='iName' type='^{__CFString=}'/>
<arg declared_type='ATSOptionFlags' name='iOptions' type='L' type64='I'/>
<retval declared_type='ATSFontFamilyRef' type='L' type64='I'/>
</function>
<function name='ATSFontFamilyFindFromQuickDrawName'>
<arg declared_type='ConstStr255Param' name='iName' type='*'/>
<retval declared_type='ATSFontFamilyRef' type='L' type64='I'/>
</function>
<function name='ATSFontFamilyGetEncoding'>
<arg declared_type='ATSFontFamilyRef' name='iFamily' type='L' type64='I'/>
<retval declared_type='TextEncoding' type='L' type64='I'/>
</function>
<function name='ATSFontFamilyGetGeneration'>
<arg declared_type='ATSFontFamilyRef' name='iFamily' type='L' type64='I'/>
<retval declared_type='ATSGeneration' type='L' type64='I'/>
</function>
<function name='ATSFontFamilyGetName'>
<arg declared_type='ATSFontFamilyRef' name='iFamily' type='L' type64='I'/>
<arg declared_type='ATSOptionFlags' name='iOptions' type='L' type64='I'/>
<arg declared_type='CFStringRef*' name='oName' type='^^{__CFString}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontFamilyGetQuickDrawName'>
<arg declared_type='ATSFontFamilyRef' name='iFamily' type='L' type64='I'/>
<arg declared_type='unsigned char*' name='oName' type='*'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontFamilyIteratorCreate'>
<arg declared_type='ATSFontContext' name='iContext' type='L' type64='I'/>
<arg const='true' declared_type='ATSFontFilter*' name='iFilter' type='^{ATSFontFilter=Ii(?=II^?^?^{FSRef})}'/>
<arg declared_type='void*' name='iRefCon' type='^v'/>
<arg declared_type='ATSOptionFlags' name='iOptions' type='L' type64='I'/>
<arg declared_type='ATSFontFamilyIterator*' name='ioIterator' type='^^{ATSFontFamilyIterator_}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontFamilyIteratorNext'>
<arg declared_type='ATSFontFamilyIterator' name='iIterator' type='^{ATSFontFamilyIterator_=}'/>
<arg declared_type='ATSFontFamilyRef*' name='oFamily' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontFamilyIteratorRelease'>
<arg declared_type='ATSFontFamilyIterator*' name='ioIterator' type='^^{ATSFontFamilyIterator_}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontFamilyIteratorReset'>
<arg declared_type='ATSFontContext' name='iContext' type='L' type64='I'/>
<arg const='true' declared_type='ATSFontFilter*' name='iFilter' type='^{ATSFontFilter=Ii(?=II^?^?^{FSRef})}'/>
<arg declared_type='void*' name='iRefCon' type='^v'/>
<arg declared_type='ATSOptionFlags' name='iOptions' type='L' type64='I'/>
<arg declared_type='ATSFontFamilyIterator*' name='ioIterator' type='^^{ATSFontFamilyIterator_}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontFindFromContainer'>
<arg declared_type='ATSFontContainerRef' name='iContainer' type='L' type64='I'/>
<arg declared_type='ATSOptionFlags' name='iOptions' type='L' type64='I'/>
<arg declared_type='ItemCount' name='iCount' type='L' type64='Q'/>
<arg declared_type='ATSFontRef*' name='ioArray' type='^I'/>
<arg declared_type='ItemCount*' name='oCount' type='^I' type64='^Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontFindFromName'>
<arg declared_type='CFStringRef' name='iName' type='^{__CFString=}'/>
<arg declared_type='ATSOptionFlags' name='iOptions' type='L' type64='I'/>
<retval declared_type='ATSFontRef' type='L' type64='I'/>
</function>
<function name='ATSFontFindFromPostScriptName'>
<arg declared_type='CFStringRef' name='iName' type='^{__CFString=}'/>
<arg declared_type='ATSOptionFlags' name='iOptions' type='L' type64='I'/>
<retval declared_type='ATSFontRef' type='L' type64='I'/>
</function>
<function name='ATSFontGetAutoActivationSettingForApplication'>
<arg declared_type='CFURLRef' name='iApplicationFileURL' type='^{__CFURL=}'/>
<retval declared_type='ATSFontAutoActivationSetting' type='L' type64='I'/>
</function>
<function name='ATSFontGetContainer'>
<arg declared_type='ATSFontRef' name='iFont' type='L' type64='I'/>
<arg declared_type='ATSOptionFlags' name='iOptions' type='L' type64='I'/>
<arg declared_type='ATSFontContainerRef*' name='oContainer' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontGetContainerFromFileReference'>
<arg const='true' declared_type='FSRef*' name='iFile' type='^{FSRef=[80C]}'/>
<arg declared_type='ATSFontContext' name='iContext' type='L' type64='I'/>
<arg declared_type='ATSOptionFlags' name='iOptions' type='L' type64='I'/>
<arg declared_type='ATSFontContainerRef*' name='oContainer' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontGetFileReference'>
<arg declared_type='ATSFontRef' name='iFont' type='L' type64='I'/>
<arg declared_type='FSRef*' name='oFile' type='^{FSRef=[80C]}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontGetFontFamilyResource'>
<arg declared_type='ATSFontRef' name='iFont' type='L' type64='I'/>
<arg declared_type='ByteCount' name='iBufferSize' type='L' type64='Q'/>
<arg declared_type='void*' name='ioBuffer' type='^v'/>
<arg declared_type='ByteCount*' name='oSize' type='^I' type64='^Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontGetGeneration'>
<arg declared_type='ATSFontRef' name='iFont' type='L' type64='I'/>
<retval declared_type='ATSGeneration' type='L' type64='I'/>
</function>
<function name='ATSFontGetGlobalAutoActivationSetting'>
<retval declared_type='ATSFontAutoActivationSetting' type='L' type64='I'/>
</function>
<function name='ATSFontGetHorizontalMetrics'>
<arg declared_type='ATSFontRef' name='iFont' type='L' type64='I'/>
<arg declared_type='ATSOptionFlags' name='iOptions' type='L' type64='I'/>
<arg declared_type='ATSFontMetrics*' name='oMetrics' type='^{ATSFontMetrics=Iffffffffffffff}' type64='^{ATSFontMetrics=Idddddddddddddd}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontGetName'>
<arg declared_type='ATSFontRef' name='iFont' type='L' type64='I'/>
<arg declared_type='ATSOptionFlags' name='iOptions' type='L' type64='I'/>
<arg declared_type='CFStringRef*' name='oName' type='^^{__CFString}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontGetPostScriptName'>
<arg declared_type='ATSFontRef' name='iFont' type='L' type64='I'/>
<arg declared_type='ATSOptionFlags' name='iOptions' type='L' type64='I'/>
<arg declared_type='CFStringRef*' name='oName' type='^^{__CFString}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontGetTable'>
<arg declared_type='ATSFontRef' name='iFont' type='L' type64='I'/>
<arg declared_type='FourCharCode' name='iTag' type='L' type64='I'/>
<arg declared_type='ByteOffset' name='iOffset' type='L' type64='Q'/>
<arg declared_type='ByteCount' name='iBufferSize' type='L' type64='Q'/>
<arg declared_type='void*' name='ioBuffer' type='^v'/>
<arg declared_type='ByteCount*' name='oSize' type='^I' type64='^Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontGetTableDirectory'>
<arg declared_type='ATSFontRef' name='iFont' type='L' type64='I'/>
<arg declared_type='ByteCount' name='iBufferSize' type='L' type64='Q'/>
<arg declared_type='void*' name='ioBuffer' type='^v'/>
<arg declared_type='ByteCount*' name='oSize' type='^I' type64='^Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontGetVerticalMetrics'>
<arg declared_type='ATSFontRef' name='iFont' type='L' type64='I'/>
<arg declared_type='ATSOptionFlags' name='iOptions' type='L' type64='I'/>
<arg declared_type='ATSFontMetrics*' name='oMetrics' type='^{ATSFontMetrics=Iffffffffffffff}' type64='^{ATSFontMetrics=Idddddddddddddd}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontIsEnabled'>
<arg declared_type='ATSFontRef' name='iFont' type='L' type64='I'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='ATSFontIteratorCreate'>
<arg declared_type='ATSFontContext' name='iContext' type='L' type64='I'/>
<arg const='true' declared_type='ATSFontFilter*' name='iFilter' type='^{ATSFontFilter=Ii(?=II^?^?^{FSRef})}'/>
<arg declared_type='void*' name='iRefCon' type='^v'/>
<arg declared_type='ATSOptionFlags' name='iOptions' type='L' type64='I'/>
<arg declared_type='ATSFontIterator*' name='ioIterator' type='^^{ATSFontIterator_}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontIteratorNext'>
<arg declared_type='ATSFontIterator' name='iIterator' type='^{ATSFontIterator_=}'/>
<arg declared_type='ATSFontRef*' name='oFont' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontIteratorRelease'>
<arg declared_type='ATSFontIterator*' name='ioIterator' type='^^{ATSFontIterator_}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontIteratorReset'>
<arg declared_type='ATSFontContext' name='iContext' type='L' type64='I'/>
<arg const='true' declared_type='ATSFontFilter*' name='iFilter' type='^{ATSFontFilter=Ii(?=II^?^?^{FSRef})}'/>
<arg declared_type='void*' name='iRefCon' type='^v'/>
<arg declared_type='ATSOptionFlags' name='iOptions' type='L' type64='I'/>
<arg declared_type='ATSFontIterator*' name='ioIterator' type='^^{ATSFontIterator_}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontNotificationSubscribe'>
<arg declared_type='ATSNotificationCallback' function_pointer='true' name='callback' type='^?'>
<arg declared_type='ATSFontNotificationInfoRef' type='^{ATSFontNotificationInfoRef_=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ATSFontNotifyOption' name='options' type='i'/>
<arg declared_type='void*' name='iRefcon' type='^v'/>
<arg declared_type='ATSFontNotificationRef*' name='oNotificationRef' type='^^{ATSFontNotificationRef_}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontNotificationUnsubscribe'>
<arg declared_type='ATSFontNotificationRef' name='notificationRef' type='^{ATSFontNotificationRef_=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontNotify'>
<arg declared_type='ATSFontNotifyAction' name='action' type='i'/>
<arg declared_type='void*' name='info' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontSetAutoActivationSettingForApplication'>
<arg declared_type='ATSFontAutoActivationSetting' name='iSetting' type='L' type64='I'/>
<arg declared_type='CFURLRef' name='iApplicationFileURL' type='^{__CFURL=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontSetEnabled'>
<arg declared_type='ATSFontRef' name='iFont' type='L' type64='I'/>
<arg declared_type='ATSOptionFlags' name='iOptions' type='L' type64='I'/>
<arg declared_type='Boolean' name='iEnabled' type='B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSFontSetGlobalAutoActivationSetting'>
<arg declared_type='ATSFontAutoActivationSetting' name='iSetting' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSGetGeneration'>
<retval declared_type='ATSGeneration' type='L' type64='I'/>
</function>
<function name='DisposeATSUDirectLayoutOperationOverrideUPP'>
<arg declared_type='ATSUDirectLayoutOperationOverrideUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='ATSULayoutOperationSelector' type='L' type64='I'/>
<arg declared_type='ATSULineRef' type='^{ATSGlyphVector=}'/>
<arg declared_type='URefCon' type='L' type64='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ATSULayoutOperationCallbackStatus*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeFMFontCallbackFilterUPP'>
<arg declared_type='FMFontCallbackFilterUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='FMFont' type='L' type64='I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeFMFontFamilyCallbackFilterUPP'>
<arg declared_type='FMFontFamilyCallbackFilterUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='FMFontFamily' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeATSUDirectLayoutOperationOverrideUPP'>
<arg declared_type='ATSULayoutOperationSelector' name='iCurrentOperation' type='L' type64='I'/>
<arg declared_type='ATSULineRef' name='iLineRef' type='^{ATSGlyphVector=}'/>
<arg declared_type='URefCon' name='iRefCon' type='L' type64='^v'/>
<arg declared_type='void*' name='iOperationCallbackParameterPtr' type='^v'/>
<arg declared_type='ATSULayoutOperationCallbackStatus*' name='oCallbackStatus' type='^I'/>
<arg declared_type='ATSUDirectLayoutOperationOverrideUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='ATSULayoutOperationSelector' type='L' type64='I'/>
<arg declared_type='ATSULineRef' type='^{ATSGlyphVector=}'/>
<arg declared_type='URefCon' type='L' type64='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ATSULayoutOperationCallbackStatus*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeFMFontCallbackFilterUPP'>
<arg declared_type='FMFont' name='iFont' type='L' type64='I'/>
<arg declared_type='void*' name='iRefCon' type='^v'/>
<arg declared_type='FMFontCallbackFilterUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='FMFont' type='L' type64='I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeFMFontFamilyCallbackFilterUPP'>
<arg declared_type='FMFontFamily' name='iFontFamily' type='s'/>
<arg declared_type='void*' name='iRefCon' type='^v'/>
<arg declared_type='FMFontFamilyCallbackFilterUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='FMFontFamily' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='NewATSUDirectLayoutOperationOverrideUPP'>
<arg declared_type='ATSUDirectLayoutOperationOverrideProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='ATSULayoutOperationSelector' type='L' type64='I'/>
<arg declared_type='ATSULineRef' type='^{ATSGlyphVector=}'/>
<arg declared_type='URefCon' type='L' type64='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ATSULayoutOperationCallbackStatus*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='ATSUDirectLayoutOperationOverrideUPP' function_pointer='true' type='^?'>
<arg declared_type='ATSULayoutOperationSelector' type='L' type64='I'/>
<arg declared_type='ATSULineRef' type='^{ATSGlyphVector=}'/>
<arg declared_type='URefCon' type='L' type64='^v'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ATSULayoutOperationCallbackStatus*' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewFMFontCallbackFilterUPP'>
<arg declared_type='FMFontCallbackFilterProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='FMFont' type='L' type64='I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='FMFontCallbackFilterUPP' function_pointer='true' type='^?'>
<arg declared_type='FMFont' type='L' type64='I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewFMFontFamilyCallbackFilterUPP'>
<arg declared_type='FMFontFamilyCallbackFilterProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='FMFontFamily' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='FMFontFamilyCallbackFilterUPP' function_pointer='true' type='^?'>
<arg declared_type='FMFontFamily' type='s'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/CoreGraphics.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/IOKit.framework'/>
<struct name='ColorSyncMD5' type='{_ColorSyncMD5=&quot;digest&quot;[16C]}'>
<field declared_type='uint8_t*' name='digest' type='[16C]'/>
</struct>
<cftype gettypeid_func='ColorSyncCMMGetTypeID' name='ColorSyncCMMRef' type='^{ColorSyncCMM=}'/>
<cftype gettypeid_func='ColorSyncProfileGetTypeID' name='ColorSyncMutableProfileRef' type='^{ColorSyncProfile=}'/>
<cftype gettypeid_func='ColorSyncProfileGetTypeID' name='ColorSyncProfileRef' type='^{ColorSyncProfile=}'/>
<cftype gettypeid_func='ColorSyncTransformGetTypeID' name='ColorSyncTransformRef' type='^{ColorSyncTransform=}'/>
<constant declared_type='CFStringRef' name='kCMMApplyTransformProcName' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kCMMCreateTransformPropertyProcName' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kCMMInitializeLinkProfileProcName' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kCMMInitializeTransformProcName' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncAdobeRGB1998Profile' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncBestQuality' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncBlackPointCompensation' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncCameraDeviceClass' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncConversion1DLut' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncConversion3DLut' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncConversionBPC' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncConversionChannelID' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncConversionGridPoints' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncConversionInpChan' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncConversionMatrix' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncConversionNDLut' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncConversionOutChan' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncConversionParamCurve0' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncConversionParamCurve1' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncConversionParamCurve2' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncConversionParamCurve3' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncConversionParamCurve4' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncConvertQuality' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncConvertThreadCount' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncConvertUseVectorUnit' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncCustomProfiles' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncDeviceClass' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncDeviceDefaultProfileID' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncDeviceDescription' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncDeviceDescriptions' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncDeviceHostScope' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncDeviceID' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncDeviceModeDescription' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncDeviceModeDescriptions' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncDeviceProfileID' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncDeviceProfileIsCurrent' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncDeviceProfileIsDefault' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncDeviceProfileIsFactory' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncDeviceProfileURL' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncDeviceProfilesNotification' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncDeviceRegisteredNotification' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncDeviceUnregisteredNotification' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncDeviceUserScope' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncDisplayDeviceClass' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncDisplayDeviceProfilesNotification' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncDraftQuality' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncFactoryProfiles' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncFixedPointRange' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncGenericCMYKProfile' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncGenericGrayGamma22Profile' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncGenericGrayProfile' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncGenericLabProfile' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncGenericRGBProfile' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncGenericXYZProfile' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncNormalQuality' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncPreferredCMM' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncPrinterDeviceClass' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncProfile' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncProfileClass' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncProfileColorSpace' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncProfileDescription' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncProfileHeader' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncProfileHostScope' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncProfileMD5Digest' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncProfilePCS' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncProfileURL' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncProfileUserScope' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncRenderingIntent' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncRenderingIntentAbsolute' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncRenderingIntentPerceptual' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncRenderingIntentRelative' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncRenderingIntentSaturation' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncRenderingIntentUseProfileHeader' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSRGBProfile' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncScannerDeviceClass' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigAToB0Tag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigAToB1Tag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigAToB2Tag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigAbstractClass' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigBToA0Tag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigBToA1Tag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigBToA2Tag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigBlueColorantTag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigBlueTRCTag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigCmykData' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigColorSpaceClass' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigCopyrightTag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigDeviceMfgDescTag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigDeviceModelDescTag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigDisplayClass' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigGamutTag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigGrayData' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigGrayTRCTag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigGreenColorantTag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigGreenTRCTag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigInputClass' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigLabData' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigLinkClass' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigMediaBlackPointTag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigMediaWhitePointTag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigNamedColor2Tag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigNamedColorClass' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigOutputClass' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigPreview0Tag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigPreview1Tag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigPreview2Tag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigProfileDescriptionTag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigProfileSequenceDescTag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigRedColorantTag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigRedTRCTag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigRgbData' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigTechnologyTag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigViewingCondDescTag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigViewingConditionsTag' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncSigXYZData' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncTranformInfo' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncTransformCreator' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncTransformDeviceToDevice' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncTransformDeviceToPCS' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncTransformDstSpace' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncTransformFullConversionData' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncTransformGamutCheck' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncTransformPCSToDevice' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncTransformPCSToPCS' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncTransformParametricConversionData' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncTransformSimplifiedConversionData' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncTransformSrcSpace' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kColorSyncTransformTag' type='^{__CFString=}'/>
<enum name='COLORSYNC_MD5_LENGTH' value='16'/>
<enum name='kColorSync16BitFloat' value='4'/>
<enum name='kColorSync16BitInteger' value='3'/>
<enum name='kColorSync1BitGamut' value='1'/>
<enum name='kColorSync32BitFloat' value='7'/>
<enum name='kColorSync32BitInteger' value='5'/>
<enum name='kColorSync32BitNamedColorIndex' value='6'/>
<enum name='kColorSync8BitInteger' value='2'/>
<enum name='kColorSyncAlphaFirst' value='4'/>
<enum name='kColorSyncAlphaInfoMask' value='31'/>
<enum name='kColorSyncAlphaLast' value='3'/>
<enum name='kColorSyncAlphaNone' value='0'/>
<enum name='kColorSyncAlphaNoneSkipFirst' value='6'/>
<enum name='kColorSyncAlphaNoneSkipLast' value='5'/>
<enum name='kColorSyncAlphaPremultipliedFirst' value='2'/>
<enum name='kColorSyncAlphaPremultipliedLast' value='1'/>
<enum name='kColorSyncByteOrder16Big' value='12288'/>
<enum name='kColorSyncByteOrder16Little' value='4096'/>
<enum name='kColorSyncByteOrder32Big' value='16384'/>
<enum name='kColorSyncByteOrder32Little' value='8192'/>
<enum name='kColorSyncByteOrderDefault' value='0'/>
<enum name='kColorSyncByteOrderMask' value='28672'/>
<function name='CGDisplayCreateUUIDFromDisplayID'>
<arg declared_type='uint32_t' name='displayID' type='I'/>
<retval already_retained='true' declared_type='CFUUIDRef' type='^{__CFUUID=}'/>
</function>
<function name='CGDisplayGetDisplayIDFromUUID'>
<arg declared_type='CFUUIDRef' name='uuid' type='^{__CFUUID=}'/>
<retval declared_type='uint32_t' type='I'/>
</function>
<function name='ColorSyncCMMCopyCMMIdentifier'>
<arg declared_type='ColorSyncCMMRef' type='^{ColorSyncCMM=}'/>
<retval already_retained='true' declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='ColorSyncCMMCopyLocalizedName'>
<arg declared_type='ColorSyncCMMRef' type='^{ColorSyncCMM=}'/>
<retval already_retained='true' declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='ColorSyncCMMCreate'>
<arg declared_type='CFBundleRef' name='cmmBundle' type='^{__CFBundle=}'/>
<retval already_retained='true' declared_type='ColorSyncCMMRef' type='^{ColorSyncCMM=}'/>
</function>
<function name='ColorSyncCMMGetBundle'>
<arg declared_type='ColorSyncCMMRef' type='^{ColorSyncCMM=}'/>
<retval declared_type='CFBundleRef' type='^{__CFBundle=}'/>
</function>
<function name='ColorSyncCMMGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='ColorSyncDeviceCopyDeviceInfo'>
<arg declared_type='CFStringRef' name='deviceClass' type='^{__CFString=}'/>
<arg declared_type='CFUUIDRef' name='devID' type='^{__CFUUID=}'/>
<retval already_retained='true' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
</function>
<function name='ColorSyncDeviceSetCustomProfiles'>
<arg declared_type='CFStringRef' name='deviceClass' type='^{__CFString=}'/>
<arg declared_type='CFUUIDRef' name='deviceID' type='^{__CFUUID=}'/>
<arg declared_type='CFDictionaryRef' name='profileInfo' type='^{__CFDictionary=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='ColorSyncIterateDeviceProfiles'>
<arg declared_type='ColorSyncDeviceProfileIterateCallback' function_pointer='true' name='callBack' type='^?'>
<arg declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='_Bool' type='B'/>
</arg>
<arg declared_type='void*' name='userInfo' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ColorSyncIterateInstalledCMMs'>
<arg declared_type='ColorSyncCMMIterateCallback' function_pointer='true' name='callBack' type='^?'>
<arg declared_type='ColorSyncCMMRef' type='^{ColorSyncCMM=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='_Bool' type='B'/>
</arg>
<arg declared_type='void*' name='userInfo' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ColorSyncIterateInstalledProfiles'>
<arg declared_type='ColorSyncProfileIterateCallback' function_pointer='true' name='callBack' type='^?'>
<arg declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='_Bool' type='B'/>
</arg>
<arg declared_type='uint32_t*' name='seed' type='^I'/>
<arg declared_type='void*' name='userInfo' type='^v'/>
<arg declared_type='CFErrorRef*' name='error' type='^^{__CFError}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ColorSyncProfileContainsTag'>
<arg declared_type='ColorSyncProfileRef' name='prof' type='^{ColorSyncProfile=}'/>
<arg declared_type='CFStringRef' name='signature' type='^{__CFString=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='ColorSyncProfileCopyData'>
<arg declared_type='ColorSyncProfileRef' name='prof' type='^{ColorSyncProfile=}'/>
<arg declared_type='CFErrorRef*' name='error' type='^^{__CFError}'/>
<retval already_retained='true' declared_type='CFDataRef' type='^{__CFData=}'/>
</function>
<function name='ColorSyncProfileCopyDescriptionString'>
<arg declared_type='ColorSyncProfileRef' name='prof' type='^{ColorSyncProfile=}'/>
<retval already_retained='true' declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='ColorSyncProfileCopyHeader'>
<arg declared_type='ColorSyncProfileRef' name='prof' type='^{ColorSyncProfile=}'/>
<retval already_retained='true' declared_type='CFDataRef' type='^{__CFData=}'/>
</function>
<function name='ColorSyncProfileCopyTag'>
<arg declared_type='ColorSyncProfileRef' name='prof' type='^{ColorSyncProfile=}'/>
<arg declared_type='CFStringRef' name='signature' type='^{__CFString=}'/>
<retval already_retained='true' declared_type='CFDataRef' type='^{__CFData=}'/>
</function>
<function name='ColorSyncProfileCopyTagSignatures'>
<arg declared_type='ColorSyncProfileRef' name='prof' type='^{ColorSyncProfile=}'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='ColorSyncProfileCreate'>
<arg declared_type='CFDataRef' name='data' type='^{__CFData=}'/>
<arg declared_type='CFErrorRef*' name='error' type='^^{__CFError}'/>
<retval already_retained='true' declared_type='ColorSyncProfileRef' type='^{ColorSyncProfile=}'/>
</function>
<function name='ColorSyncProfileCreateDeviceProfile'>
<arg declared_type='CFStringRef' name='deviceClass' type='^{__CFString=}'/>
<arg declared_type='CFUUIDRef' name='deviceID' type='^{__CFUUID=}'/>
<arg declared_type='CFTypeRef' name='profileID' type='@'/>
<retval already_retained='true' declared_type='ColorSyncProfileRef' type='^{ColorSyncProfile=}'/>
</function>
<function name='ColorSyncProfileCreateDisplayTransferTablesFromVCGT'>
<arg declared_type='ColorSyncProfileRef' name='profile' type='^{ColorSyncProfile=}'/>
<arg declared_type='size_t*' name='nSamplesPerChannel' type='^I' type64='^Q'/>
<retval already_retained='true' declared_type='CFDataRef' type='^{__CFData=}'/>
</function>
<function name='ColorSyncProfileCreateLink'>
<arg declared_type='CFArrayRef' name='profileInfo' type='^{__CFArray=}'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='ColorSyncProfileRef' type='^{ColorSyncProfile=}'/>
</function>
<function name='ColorSyncProfileCreateMutable'>
<retval already_retained='true' declared_type='ColorSyncMutableProfileRef' type='^{ColorSyncProfile=}'/>
</function>
<function name='ColorSyncProfileCreateMutableCopy'>
<arg declared_type='ColorSyncProfileRef' name='prof' type='^{ColorSyncProfile=}'/>
<retval already_retained='true' declared_type='ColorSyncMutableProfileRef' type='^{ColorSyncProfile=}'/>
</function>
<function name='ColorSyncProfileCreateWithDisplayID'>
<arg declared_type='uint32_t' name='displayID' type='I'/>
<retval already_retained='true' declared_type='ColorSyncProfileRef' type='^{ColorSyncProfile=}'/>
</function>
<function name='ColorSyncProfileCreateWithName'>
<arg declared_type='CFStringRef' name='name' type='^{__CFString=}'/>
<retval already_retained='true' declared_type='ColorSyncProfileRef' type='^{ColorSyncProfile=}'/>
</function>
<function name='ColorSyncProfileCreateWithURL'>
<arg declared_type='CFURLRef' name='url' type='^{__CFURL=}'/>
<arg declared_type='CFErrorRef*' name='error' type='^^{__CFError}'/>
<retval already_retained='true' declared_type='ColorSyncProfileRef' type='^{ColorSyncProfile=}'/>
</function>
<function name='ColorSyncProfileEstimateGamma'>
<arg declared_type='ColorSyncProfileRef' name='prof' type='^{ColorSyncProfile=}'/>
<arg declared_type='CFErrorRef*' name='error' type='^^{__CFError}'/>
<retval declared_type='float' type='f'/>
</function>
<function name='ColorSyncProfileEstimateGammaWithDisplayID'>
<arg const='true' declared_type='int32_t' name='displayID' type='i'/>
<arg declared_type='CFErrorRef*' name='error' type='^^{__CFError}'/>
<retval declared_type='float' type='f'/>
</function>
<function name='ColorSyncProfileGetDisplayTransferFormulaFromVCGT'>
<arg declared_type='ColorSyncProfileRef' name='profile' type='^{ColorSyncProfile=}'/>
<arg declared_type='float*' name='redMin' type='^f'/>
<arg declared_type='float*' name='redMax' type='^f'/>
<arg declared_type='float*' name='redGamma' type='^f'/>
<arg declared_type='float*' name='greenMin' type='^f'/>
<arg declared_type='float*' name='greenMax' type='^f'/>
<arg declared_type='float*' name='greenGamma' type='^f'/>
<arg declared_type='float*' name='blueMin' type='^f'/>
<arg declared_type='float*' name='blueMax' type='^f'/>
<arg declared_type='float*' name='blueGamma' type='^f'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='ColorSyncProfileGetMD5'>
<arg declared_type='ColorSyncProfileRef' name='prof' type='^{ColorSyncProfile=}'/>
<retval declared_type='ColorSyncMD5' type='{_ColorSyncMD5=[16C]}'/>
</function>
<function name='ColorSyncProfileGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='ColorSyncProfileGetURL'>
<arg declared_type='ColorSyncProfileRef' name='prof' type='^{ColorSyncProfile=}'/>
<arg declared_type='CFErrorRef*' name='error' type='^^{__CFError}'/>
<retval declared_type='CFURLRef' type='^{__CFURL=}'/>
</function>
<function name='ColorSyncProfileRemoveTag'>
<arg declared_type='ColorSyncMutableProfileRef' name='prof' type='^{ColorSyncProfile=}'/>
<arg declared_type='CFStringRef' name='signature' type='^{__CFString=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ColorSyncProfileSetHeader'>
<arg declared_type='ColorSyncMutableProfileRef' name='prof' type='^{ColorSyncProfile=}'/>
<arg declared_type='CFDataRef' name='header' type='^{__CFData=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ColorSyncProfileSetTag'>
<arg declared_type='ColorSyncMutableProfileRef' name='prof' type='^{ColorSyncProfile=}'/>
<arg declared_type='CFStringRef' name='signature' type='^{__CFString=}'/>
<arg declared_type='CFDataRef' name='data' type='^{__CFData=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ColorSyncProfileVerify'>
<arg declared_type='ColorSyncProfileRef' name='prof' type='^{ColorSyncProfile=}'/>
<arg declared_type='CFErrorRef*' name='errors' type='^^{__CFError}'/>
<arg declared_type='CFErrorRef*' name='warnings' type='^^{__CFError}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='ColorSyncRegisterDevice'>
<arg declared_type='CFStringRef' name='deviceClass' type='^{__CFString=}'/>
<arg declared_type='CFUUIDRef' name='deviceID' type='^{__CFUUID=}'/>
<arg declared_type='CFDictionaryRef' name='deviceInfo' type='^{__CFDictionary=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='ColorSyncTransformConvert'>
<arg declared_type='ColorSyncTransformRef' name='transform' type='^{ColorSyncTransform=}'/>
<arg declared_type='size_t' name='width' type='L' type64='Q'/>
<arg declared_type='size_t' name='height' type='L' type64='Q'/>
<arg declared_type='void*' name='dst' type='^v'/>
<arg declared_type='ColorSyncDataDepth' name='dstDepth' type='i'/>
<arg declared_type='ColorSyncDataLayout' name='dstLayout' type='I'/>
<arg declared_type='size_t' name='dstBytesPerRow' type='L' type64='Q'/>
<arg const='true' declared_type='void*' name='src' type='^v'/>
<arg declared_type='ColorSyncDataDepth' name='srcDepth' type='i'/>
<arg declared_type='ColorSyncDataLayout' name='srcLayout' type='I'/>
<arg declared_type='size_t' name='srcBytesPerRow' type='L' type64='Q'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='ColorSyncTransformCopyProperty'>
<arg declared_type='ColorSyncTransformRef' name='transform' type='^{ColorSyncTransform=}'/>
<arg declared_type='CFTypeRef' name='key' type='@'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CFTypeRef' type='@'/>
</function>
<function name='ColorSyncTransformCreate'>
<arg declared_type='CFArrayRef' name='profileSequence' type='^{__CFArray=}'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='ColorSyncTransformRef' type='^{ColorSyncTransform=}'/>
</function>
<function name='ColorSyncTransformGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='ColorSyncTransformSetProperty'>
<arg declared_type='ColorSyncTransformRef' name='transform' type='^{ColorSyncTransform=}'/>
<arg declared_type='CFTypeRef' name='key' type='@'/>
<arg declared_type='CFTypeRef' name='property' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='ColorSyncUnregisterDevice'>
<arg declared_type='CFStringRef' name='deviceClass' type='^{__CFString=}'/>
<arg declared_type='CFUUIDRef' name='deviceID' type='^{__CFUUID=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<depends_on path='/System/Library/Frameworks/Accelerate.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/CoreGraphics.framework'/>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/Foundation.framework'/>
<depends_on path='/System/Library/Frameworks/ImageIO.framework'/>
<struct name='ALMXGlyphEntry' type='{ALMXGlyphEntry=&quot;GlyphIndexOffset&quot;s&quot;HorizontalAdvance&quot;s&quot;XOffsetToHOrigin&quot;s&quot;VerticalAdvance&quot;s&quot;YOffsetToVOrigin&quot;s}'>
<field declared_type='SInt16' name='GlyphIndexOffset' type='s'/>
<field declared_type='SInt16' name='HorizontalAdvance' type='s'/>
<field declared_type='SInt16' name='XOffsetToHOrigin' type='s'/>
<field declared_type='SInt16' name='VerticalAdvance' type='s'/>
<field declared_type='SInt16' name='YOffsetToVOrigin' type='s'/>
</struct>
<struct name='ALMXHeader' type='{ALMXHeader=&quot;Version&quot;i&quot;Flags&quot;S&quot;NMasters&quot;S&quot;FirstGlyph&quot;S&quot;LastGlyph&quot;S&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}}'>
<field declared_type='Fixed' name='Version' type='l' type64='i'/>
<field declared_type='UInt16' name='Flags' type='S'/>
<field declared_type='UInt16' name='NMasters' type='S'/>
<field declared_type='UInt16' name='FirstGlyph' type='S'/>
<field declared_type='UInt16' name='LastGlyph' type='S'/>
<field declared_type='SFNTLookupTable' name='lookup' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}'/>
</struct>
<struct name='AnchorPoint' type='{AnchorPoint=&quot;x&quot;s&quot;y&quot;s}'>
<field declared_type='SInt16' name='x' type='s'/>
<field declared_type='SInt16' name='y' type='s'/>
</struct>
<struct name='AnchorPointTable' type='{AnchorPointTable=&quot;nPoints&quot;I&quot;points&quot;[1{AnchorPoint=&quot;x&quot;s&quot;y&quot;s}]}'>
<field declared_type='UInt32' name='nPoints' type='L' type64='I'/>
<field declared_type='AnchorPoint*' name='points' type='[1{AnchorPoint=&quot;x&quot;s&quot;y&quot;s}]'/>
</struct>
<struct name='AnkrTable' type='{AnkrTable=&quot;version&quot;S&quot;flags&quot;S&quot;lookupTableOffset&quot;I&quot;anchorPointTableOffset&quot;I}'>
<field declared_type='UInt16' name='version' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
<field declared_type='UInt32' name='lookupTableOffset' type='L' type64='I'/>
<field declared_type='UInt32' name='anchorPointTableOffset' type='L' type64='I'/>
</struct>
<struct name='BslnFormat0Part' type='{BslnFormat0Part=&quot;deltas&quot;[32s]}'>
<field declared_type='SInt16*' name='deltas' type='[32s]'/>
</struct>
<struct name='BslnFormat1Part' type='{BslnFormat1Part=&quot;deltas&quot;[32s]&quot;mappingData&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}}'>
<field declared_type='SInt16*' name='deltas' type='[32s]'/>
<field declared_type='SFNTLookupTable' name='mappingData' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}'/>
</struct>
<struct name='BslnFormat2Part' type='{BslnFormat2Part=&quot;stdGlyph&quot;S&quot;ctlPoints&quot;[32s]}'>
<field declared_type='UInt16' name='stdGlyph' type='S'/>
<field declared_type='SInt16*' name='ctlPoints' type='[32s]'/>
</struct>
<struct name='BslnFormat3Part' type='{BslnFormat3Part=&quot;stdGlyph&quot;S&quot;ctlPoints&quot;[32s]&quot;mappingData&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}}'>
<field declared_type='UInt16' name='stdGlyph' type='S'/>
<field declared_type='SInt16*' name='ctlPoints' type='[32s]'/>
<field declared_type='SFNTLookupTable' name='mappingData' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}'/>
</struct>
<struct name='BslnTable' type='{BslnTable=&quot;version&quot;i&quot;format&quot;S&quot;defaultBaseline&quot;S&quot;parts&quot;(BslnFormatUnion=&quot;fmt0Part&quot;{BslnFormat0Part=&quot;deltas&quot;[32s]}&quot;fmt1Part&quot;{BslnFormat1Part=&quot;deltas&quot;[32s]&quot;mappingData&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}}&quot;fmt2Part&quot;{BslnFormat2Part=&quot;stdGlyph&quot;S&quot;ctlPoints&quot;[32s]}&quot;fmt3Part&quot;{BslnFormat3Part=&quot;stdGlyph&quot;S&quot;ctlPoints&quot;[32s]&quot;mappingData&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}})}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='BslnTableFormat' name='format' type='S'/>
<field declared_type='UInt16' name='defaultBaseline' type='S'/>
<field declared_type='BslnFormatUnion' name='parts' type='(BslnFormatUnion=&quot;fmt0Part&quot;{BslnFormat0Part=&quot;deltas&quot;[32s]}&quot;fmt1Part&quot;{BslnFormat1Part=&quot;deltas&quot;[32s]&quot;mappingData&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}}&quot;fmt2Part&quot;{BslnFormat2Part=&quot;stdGlyph&quot;S&quot;ctlPoints&quot;[32s]}&quot;fmt3Part&quot;{BslnFormat3Part=&quot;stdGlyph&quot;S&quot;ctlPoints&quot;[32s]&quot;mappingData&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}})'/>
</struct>
<struct name='CTParagraphStyleSetting' type='{CTParagraphStyleSetting=&quot;spec&quot;I&quot;valueSize&quot;I&quot;value&quot;^v}' type64='{CTParagraphStyleSetting=&quot;spec&quot;I&quot;valueSize&quot;Q&quot;value&quot;^v}'>
<field declared_type='CTParagraphStyleSpecifier' name='spec' type='I'/>
<field declared_type='size_t' name='valueSize' type='L' type64='Q'/>
<field const='true' declared_type='void*' name='value' type='^v'/>
</struct>
<struct name='CTRunDelegateCallbacks' type='{_CTRunDelegateCallbacks=&quot;version&quot;i&quot;dealloc&quot;^?&quot;getAscent&quot;^?&quot;getDescent&quot;^?&quot;getWidth&quot;^?}' type64='{_CTRunDelegateCallbacks=&quot;version&quot;q&quot;dealloc&quot;^?&quot;getAscent&quot;^?&quot;getDescent&quot;^?&quot;getWidth&quot;^?}'>
<field declared_type='CFIndex' name='version' type='l' type64='q'/>
<field declared_type='CTRunDelegateDeallocateCallback' function_pointer='true' name='dealloc' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='CTRunDelegateGetAscentCallback' function_pointer='true' name='getAscent' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</field>
<field declared_type='CTRunDelegateGetDescentCallback' function_pointer='true' name='getDescent' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</field>
<field declared_type='CTRunDelegateGetWidthCallback' function_pointer='true' name='getWidth' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</field>
</struct>
<struct name='FontVariation' type='{FontVariation=&quot;name&quot;I&quot;value&quot;i}'>
<field declared_type='FourCharCode' name='name' type='L' type64='I'/>
<field declared_type='Fixed' name='value' type='l' type64='i'/>
</struct>
<struct name='JustDirectionTable' type='{JustDirectionTable=&quot;justClass&quot;S&quot;widthDeltaClusters&quot;S&quot;postcomp&quot;S&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}}'>
<field declared_type='UInt16' name='justClass' type='S'/>
<field declared_type='UInt16' name='widthDeltaClusters' type='S'/>
<field declared_type='UInt16' name='postcomp' type='S'/>
<field declared_type='SFNTLookupTable' name='lookup' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}'/>
</struct>
<struct name='JustPCAction' type='{JustPCAction=&quot;actionCount&quot;I&quot;actions&quot;[1{JustPCActionSubrecord=&quot;theClass&quot;S&quot;theType&quot;S&quot;length&quot;I&quot;data&quot;I}]}'>
<field declared_type='UInt32' name='actionCount' type='L' type64='I'/>
<field declared_type='JustPCActionSubrecord*' name='actions' type='[1{JustPCActionSubrecord=&quot;theClass&quot;S&quot;theType&quot;S&quot;length&quot;I&quot;data&quot;I}]'/>
</struct>
<struct name='JustPCActionSubrecord' type='{JustPCActionSubrecord=&quot;theClass&quot;S&quot;theType&quot;S&quot;length&quot;I&quot;data&quot;I}'>
<field declared_type='UInt16' name='theClass' type='S'/>
<field declared_type='JustPCActionType' name='theType' type='S'/>
<field declared_type='UInt32' name='length' type='L' type64='I'/>
<field declared_type='UInt32' name='data' type='L' type64='I'/>
</struct>
<struct name='JustPCConditionalAddAction' type='{JustPCConditionalAddAction=&quot;substThreshold&quot;i&quot;addGlyph&quot;S&quot;substGlyph&quot;S}'>
<field declared_type='Fixed' name='substThreshold' type='l' type64='i'/>
<field declared_type='UInt16' name='addGlyph' type='S'/>
<field declared_type='UInt16' name='substGlyph' type='S'/>
</struct>
<struct name='JustPCDecompositionAction' type='{JustPCDecompositionAction=&quot;lowerLimit&quot;i&quot;upperLimit&quot;i&quot;order&quot;S&quot;count&quot;S&quot;glyphs&quot;[1S]}'>
<field declared_type='Fixed' name='lowerLimit' type='l' type64='i'/>
<field declared_type='Fixed' name='upperLimit' type='l' type64='i'/>
<field declared_type='UInt16' name='order' type='S'/>
<field declared_type='UInt16' name='count' type='S'/>
<field declared_type='UInt16*' name='glyphs' type='[1S]'/>
</struct>
<struct name='JustPCDuctilityAction' type='{JustPCDuctilityAction=&quot;ductilityAxis&quot;I&quot;minimumLimit&quot;i&quot;noStretchValue&quot;i&quot;maximumLimit&quot;i}'>
<field declared_type='UInt32' name='ductilityAxis' type='L' type64='I'/>
<field declared_type='Fixed' name='minimumLimit' type='l' type64='i'/>
<field declared_type='Fixed' name='noStretchValue' type='l' type64='i'/>
<field declared_type='Fixed' name='maximumLimit' type='l' type64='i'/>
</struct>
<struct name='JustPCGlyphRepeatAddAction' type='{JustPCGlyphRepeatAddAction=&quot;flags&quot;S&quot;glyph&quot;S}'>
<field declared_type='UInt16' name='flags' type='S'/>
<field declared_type='UInt16' name='glyph' type='S'/>
</struct>
<struct name='JustPostcompTable' type='{JustPostcompTable=&quot;lookupTable&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}}'>
<field declared_type='SFNTLookupTable' name='lookupTable' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}'/>
</struct>
<struct name='JustTable' type='{JustTable=&quot;version&quot;i&quot;format&quot;S&quot;horizHeaderOffset&quot;S&quot;vertHeaderOffset&quot;S}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='UInt16' name='format' type='S'/>
<field declared_type='UInt16' name='horizHeaderOffset' type='S'/>
<field declared_type='UInt16' name='vertHeaderOffset' type='S'/>
</struct>
<struct name='JustWidthDeltaEntry' type='{JustWidthDeltaEntry=&quot;justClass&quot;I&quot;beforeGrowLimit&quot;i&quot;beforeShrinkLimit&quot;i&quot;afterGrowLimit&quot;i&quot;afterShrinkLimit&quot;i&quot;growFlags&quot;S&quot;shrinkFlags&quot;S}'>
<field declared_type='UInt32' name='justClass' type='L' type64='I'/>
<field declared_type='Fixed' name='beforeGrowLimit' type='l' type64='i'/>
<field declared_type='Fixed' name='beforeShrinkLimit' type='l' type64='i'/>
<field declared_type='Fixed' name='afterGrowLimit' type='l' type64='i'/>
<field declared_type='Fixed' name='afterShrinkLimit' type='l' type64='i'/>
<field declared_type='JustificationFlags' name='growFlags' type='S'/>
<field declared_type='JustificationFlags' name='shrinkFlags' type='S'/>
</struct>
<struct name='JustWidthDeltaGroup' type='{JustWidthDeltaGroup=&quot;count&quot;I&quot;entries&quot;[1{JustWidthDeltaEntry=&quot;justClass&quot;I&quot;beforeGrowLimit&quot;i&quot;beforeShrinkLimit&quot;i&quot;afterGrowLimit&quot;i&quot;afterShrinkLimit&quot;i&quot;growFlags&quot;S&quot;shrinkFlags&quot;S}]}'>
<field declared_type='UInt32' name='count' type='L' type64='I'/>
<field declared_type='JustWidthDeltaEntry*' name='entries' type='[1{JustWidthDeltaEntry=&quot;justClass&quot;I&quot;beforeGrowLimit&quot;i&quot;beforeShrinkLimit&quot;i&quot;afterGrowLimit&quot;i&quot;afterShrinkLimit&quot;i&quot;growFlags&quot;S&quot;shrinkFlags&quot;S}]'/>
</struct>
<struct name='KernIndexArrayHeader' type='{KernIndexArrayHeader=&quot;glyphCount&quot;S&quot;kernValueCount&quot;C&quot;leftClassCount&quot;C&quot;rightClassCount&quot;C&quot;flags&quot;C&quot;kernValue&quot;[1s]&quot;leftClass&quot;[1C]&quot;rightClass&quot;[1C]&quot;kernIndex&quot;[1C]}'>
<field declared_type='UInt16' name='glyphCount' type='S'/>
<field declared_type='UInt8' name='kernValueCount' type='C'/>
<field declared_type='UInt8' name='leftClassCount' type='C'/>
<field declared_type='UInt8' name='rightClassCount' type='C'/>
<field declared_type='UInt8' name='flags' type='C'/>
<field declared_type='SInt16*' name='kernValue' type='[1s]'/>
<field declared_type='UInt8*' name='leftClass' type='[1C]'/>
<field declared_type='UInt8*' name='rightClass' type='[1C]'/>
<field declared_type='UInt8*' name='kernIndex' type='[1C]'/>
</struct>
<struct name='KernKerningPair' type='{KernKerningPair=&quot;left&quot;S&quot;right&quot;S}'>
<field declared_type='UInt16' name='left' type='S'/>
<field declared_type='UInt16' name='right' type='S'/>
</struct>
<struct name='KernOffsetTable' type='{KernOffsetTable=&quot;firstGlyph&quot;S&quot;nGlyphs&quot;S&quot;offsetTable&quot;[1S]}'>
<field declared_type='UInt16' name='firstGlyph' type='S'/>
<field declared_type='UInt16' name='nGlyphs' type='S'/>
<field declared_type='KernArrayOffset*' name='offsetTable' type='[1S]'/>
</struct>
<struct name='KernOrderedListEntry' type='{KernOrderedListEntry=&quot;pair&quot;{KernKerningPair=&quot;left&quot;S&quot;right&quot;S}&quot;value&quot;s}'>
<field declared_type='KernKerningPair' name='pair' type='{KernKerningPair=&quot;left&quot;S&quot;right&quot;S}'/>
<field declared_type='KernKerningValue' name='value' type='s'/>
</struct>
<struct name='KernOrderedListHeader' type='{KernOrderedListHeader=&quot;nPairs&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S&quot;table&quot;[1S]}'>
<field declared_type='UInt16' name='nPairs' type='S'/>
<field declared_type='UInt16' name='searchRange' type='S'/>
<field declared_type='UInt16' name='entrySelector' type='S'/>
<field declared_type='UInt16' name='rangeShift' type='S'/>
<field declared_type='UInt16*' name='table' type='[1S]'/>
</struct>
<struct name='KernSimpleArrayHeader' type='{KernSimpleArrayHeader=&quot;rowWidth&quot;S&quot;leftOffsetTable&quot;S&quot;rightOffsetTable&quot;S&quot;theArray&quot;S&quot;firstTable&quot;[1S]}'>
<field declared_type='UInt16' name='rowWidth' type='S'/>
<field declared_type='UInt16' name='leftOffsetTable' type='S'/>
<field declared_type='UInt16' name='rightOffsetTable' type='S'/>
<field declared_type='KernArrayOffset' name='theArray' type='S'/>
<field declared_type='UInt16*' name='firstTable' type='[1S]'/>
</struct>
<struct name='KernStateEntry' type='{KernStateEntry=&quot;newState&quot;S&quot;flags&quot;S}'>
<field declared_type='UInt16' name='newState' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
</struct>
<struct name='KernStateHeader' type='{KernStateHeader=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;valueTable&quot;S&quot;firstTable&quot;[1C]}'>
<field declared_type='STHeader' name='header' type='{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}'/>
<field declared_type='UInt16' name='valueTable' type='S'/>
<field declared_type='UInt8*' name='firstTable' type='[1C]'/>
</struct>
<struct name='KernSubtableHeader' type='{KernSubtableHeader=&quot;length&quot;i&quot;stInfo&quot;S&quot;tupleIndex&quot;s&quot;fsHeader&quot;(KernFormatSpecificHeader=&quot;orderedList&quot;{KernOrderedListHeader=&quot;nPairs&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S&quot;table&quot;[1S]}&quot;stateTable&quot;{KernStateHeader=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;valueTable&quot;S&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KernSimpleArrayHeader=&quot;rowWidth&quot;S&quot;leftOffsetTable&quot;S&quot;rightOffsetTable&quot;S&quot;theArray&quot;S&quot;firstTable&quot;[1S]}&quot;indexArray&quot;{KernIndexArrayHeader=&quot;glyphCount&quot;S&quot;kernValueCount&quot;C&quot;leftClassCount&quot;C&quot;rightClassCount&quot;C&quot;flags&quot;C&quot;kernValue&quot;[1s]&quot;leftClass&quot;[1C]&quot;rightClass&quot;[1C]&quot;kernIndex&quot;[1C]})}'>
<field declared_type='SInt32' name='length' type='l' type64='i'/>
<field declared_type='KernSubtableInfo' name='stInfo' type='S'/>
<field declared_type='SInt16' name='tupleIndex' type='s'/>
<field declared_type='KernFormatSpecificHeader' name='fsHeader' type='(KernFormatSpecificHeader=&quot;orderedList&quot;{KernOrderedListHeader=&quot;nPairs&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S&quot;table&quot;[1S]}&quot;stateTable&quot;{KernStateHeader=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;valueTable&quot;S&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KernSimpleArrayHeader=&quot;rowWidth&quot;S&quot;leftOffsetTable&quot;S&quot;rightOffsetTable&quot;S&quot;theArray&quot;S&quot;firstTable&quot;[1S]}&quot;indexArray&quot;{KernIndexArrayHeader=&quot;glyphCount&quot;S&quot;kernValueCount&quot;C&quot;leftClassCount&quot;C&quot;rightClassCount&quot;C&quot;flags&quot;C&quot;kernValue&quot;[1s]&quot;leftClass&quot;[1C]&quot;rightClass&quot;[1C]&quot;kernIndex&quot;[1C]})'/>
</struct>
<struct name='KernTableHeader' type='{KernTableHeader=&quot;version&quot;i&quot;nTables&quot;i&quot;firstSubtable&quot;[1S]}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='SInt32' name='nTables' type='l' type64='i'/>
<field declared_type='UInt16*' name='firstSubtable' type='[1S]'/>
</struct>
<struct name='KernVersion0Header' type='{KernVersion0Header=&quot;version&quot;S&quot;nTables&quot;S&quot;firstSubtable&quot;[1S]}'>
<field declared_type='UInt16' name='version' type='S'/>
<field declared_type='UInt16' name='nTables' type='S'/>
<field declared_type='UInt16*' name='firstSubtable' type='[1S]'/>
</struct>
<struct name='KernVersion0SubtableHeader' type='{KernVersion0SubtableHeader=&quot;version&quot;S&quot;length&quot;S&quot;stInfo&quot;S&quot;fsHeader&quot;(KernFormatSpecificHeader=&quot;orderedList&quot;{KernOrderedListHeader=&quot;nPairs&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S&quot;table&quot;[1S]}&quot;stateTable&quot;{KernStateHeader=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;valueTable&quot;S&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KernSimpleArrayHeader=&quot;rowWidth&quot;S&quot;leftOffsetTable&quot;S&quot;rightOffsetTable&quot;S&quot;theArray&quot;S&quot;firstTable&quot;[1S]}&quot;indexArray&quot;{KernIndexArrayHeader=&quot;glyphCount&quot;S&quot;kernValueCount&quot;C&quot;leftClassCount&quot;C&quot;rightClassCount&quot;C&quot;flags&quot;C&quot;kernValue&quot;[1s]&quot;leftClass&quot;[1C]&quot;rightClass&quot;[1C]&quot;kernIndex&quot;[1C]})}'>
<field declared_type='UInt16' name='version' type='S'/>
<field declared_type='UInt16' name='length' type='S'/>
<field declared_type='KernSubtableInfo' name='stInfo' type='S'/>
<field declared_type='KernFormatSpecificHeader' name='fsHeader' type='(KernFormatSpecificHeader=&quot;orderedList&quot;{KernOrderedListHeader=&quot;nPairs&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S&quot;table&quot;[1S]}&quot;stateTable&quot;{KernStateHeader=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;valueTable&quot;S&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KernSimpleArrayHeader=&quot;rowWidth&quot;S&quot;leftOffsetTable&quot;S&quot;rightOffsetTable&quot;S&quot;theArray&quot;S&quot;firstTable&quot;[1S]}&quot;indexArray&quot;{KernIndexArrayHeader=&quot;glyphCount&quot;S&quot;kernValueCount&quot;C&quot;leftClassCount&quot;C&quot;rightClassCount&quot;C&quot;flags&quot;C&quot;kernValue&quot;[1s]&quot;leftClass&quot;[1C]&quot;rightClass&quot;[1C]&quot;kernIndex&quot;[1C]})'/>
</struct>
<struct name='KerxAnchorPointAction' type='{KerxAnchorPointAction=&quot;markAnchorPoint&quot;S&quot;currAnchorPoint&quot;S}'>
<field declared_type='UInt16' name='markAnchorPoint' type='S'/>
<field declared_type='UInt16' name='currAnchorPoint' type='S'/>
</struct>
<struct name='KerxControlPointAction' type='{KerxControlPointAction=&quot;markControlPoint&quot;S&quot;currControlPoint&quot;S}'>
<field declared_type='UInt16' name='markControlPoint' type='S'/>
<field declared_type='UInt16' name='currControlPoint' type='S'/>
</struct>
<struct name='KerxControlPointEntry' type='{KerxControlPointEntry=&quot;newState&quot;S&quot;flags&quot;S&quot;actionIndex&quot;S}'>
<field declared_type='UInt16' name='newState' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
<field declared_type='UInt16' name='actionIndex' type='S'/>
</struct>
<struct name='KerxControlPointHeader' type='{KerxControlPointHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;flags&quot;I&quot;firstTable&quot;[1C]}'>
<field declared_type='STXHeader' name='header' type='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'/>
<field declared_type='UInt32' name='flags' type='L' type64='I'/>
<field declared_type='UInt8*' name='firstTable' type='[1C]'/>
</struct>
<struct name='KerxCoordinateAction' type='{KerxCoordinateAction=&quot;markX&quot;S&quot;markY&quot;S&quot;currX&quot;S&quot;currY&quot;S}'>
<field declared_type='UInt16' name='markX' type='S'/>
<field declared_type='UInt16' name='markY' type='S'/>
<field declared_type='UInt16' name='currX' type='S'/>
<field declared_type='UInt16' name='currY' type='S'/>
</struct>
<struct name='KerxIndexArrayHeader' type='{KerxIndexArrayHeader=&quot;glyphCount&quot;S&quot;kernValueCount&quot;S&quot;leftClassCount&quot;S&quot;rightClassCount&quot;S&quot;flags&quot;S&quot;kernValue&quot;[1s]&quot;leftClass&quot;[1S]&quot;rightClass&quot;[1S]&quot;kernIndex&quot;[1S]}'>
<field declared_type='UInt16' name='glyphCount' type='S'/>
<field declared_type='UInt16' name='kernValueCount' type='S'/>
<field declared_type='UInt16' name='leftClassCount' type='S'/>
<field declared_type='UInt16' name='rightClassCount' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
<field declared_type='SInt16*' name='kernValue' type='[1s]'/>
<field declared_type='UInt16*' name='leftClass' type='[1S]'/>
<field declared_type='UInt16*' name='rightClass' type='[1S]'/>
<field declared_type='UInt16*' name='kernIndex' type='[1S]'/>
</struct>
<struct name='KerxKerningPair' type='{KerxKerningPair=&quot;left&quot;S&quot;right&quot;S}'>
<field declared_type='UInt16' name='left' type='S'/>
<field declared_type='UInt16' name='right' type='S'/>
</struct>
<struct name='KerxOrderedListEntry' type='{KerxOrderedListEntry=&quot;pair&quot;{KerxKerningPair=&quot;left&quot;S&quot;right&quot;S}&quot;value&quot;s}'>
<field declared_type='KerxKerningPair' name='pair' type='{KerxKerningPair=&quot;left&quot;S&quot;right&quot;S}'/>
<field declared_type='KernKerningValue' name='value' type='s'/>
</struct>
<struct name='KerxOrderedListHeader' type='{KerxOrderedListHeader=&quot;nPairs&quot;I&quot;searchRange&quot;I&quot;entrySelector&quot;I&quot;rangeShift&quot;I&quot;table&quot;[1L]}' type64='{KerxOrderedListHeader=&quot;nPairs&quot;I&quot;searchRange&quot;I&quot;entrySelector&quot;I&quot;rangeShift&quot;I&quot;table&quot;[1I]}'>
<field declared_type='UInt32' name='nPairs' type='L' type64='I'/>
<field declared_type='UInt32' name='searchRange' type='L' type64='I'/>
<field declared_type='UInt32' name='entrySelector' type='L' type64='I'/>
<field declared_type='UInt32' name='rangeShift' type='L' type64='I'/>
<field declared_type='UInt32*' name='table' type='[1L]' type64='[1I]'/>
</struct>
<struct name='KerxSimpleArrayHeader' type='{KerxSimpleArrayHeader=&quot;rowWidth&quot;I&quot;leftOffsetTable&quot;I&quot;rightOffsetTable&quot;I&quot;theArray&quot;I&quot;firstTable&quot;[1L]}' type64='{KerxSimpleArrayHeader=&quot;rowWidth&quot;I&quot;leftOffsetTable&quot;I&quot;rightOffsetTable&quot;I&quot;theArray&quot;I&quot;firstTable&quot;[1I]}'>
<field declared_type='UInt32' name='rowWidth' type='L' type64='I'/>
<field declared_type='UInt32' name='leftOffsetTable' type='L' type64='I'/>
<field declared_type='UInt32' name='rightOffsetTable' type='L' type64='I'/>
<field declared_type='KerxArrayOffset' name='theArray' type='L' type64='I'/>
<field declared_type='UInt32*' name='firstTable' type='[1L]' type64='[1I]'/>
</struct>
<struct name='KerxStateEntry' type='{KerxStateEntry=&quot;newState&quot;S&quot;flags&quot;S&quot;valueIndex&quot;S}'>
<field declared_type='UInt16' name='newState' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
<field declared_type='UInt16' name='valueIndex' type='S'/>
</struct>
<struct name='KerxStateHeader' type='{KerxStateHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;valueTable&quot;I&quot;firstTable&quot;[1C]}'>
<field declared_type='STXHeader' name='header' type='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'/>
<field declared_type='UInt32' name='valueTable' type='L' type64='I'/>
<field declared_type='UInt8*' name='firstTable' type='[1C]'/>
</struct>
<struct name='KerxSubtableHeader' type='{KerxSubtableHeader=&quot;length&quot;I&quot;stInfo&quot;I&quot;tupleIndex&quot;I&quot;fsHeader&quot;(KerxFormatSpecificHeader=&quot;orderedList&quot;{KerxOrderedListHeader=&quot;nPairs&quot;I&quot;searchRange&quot;I&quot;entrySelector&quot;I&quot;rangeShift&quot;I&quot;table&quot;[1L]}&quot;stateTable&quot;{KerxStateHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;valueTable&quot;I&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KerxSimpleArrayHeader=&quot;rowWidth&quot;I&quot;leftOffsetTable&quot;I&quot;rightOffsetTable&quot;I&quot;theArray&quot;I&quot;firstTable&quot;[1L]}&quot;indexArray&quot;{KerxIndexArrayHeader=&quot;glyphCount&quot;S&quot;kernValueCount&quot;S&quot;leftClassCount&quot;S&quot;rightClassCount&quot;S&quot;flags&quot;S&quot;kernValue&quot;[1s]&quot;leftClass&quot;[1S]&quot;rightClass&quot;[1S]&quot;kernIndex&quot;[1S]}&quot;controlPoint&quot;{KerxControlPointHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;flags&quot;I&quot;firstTable&quot;[1C]})}' type64='{KerxSubtableHeader=&quot;length&quot;I&quot;stInfo&quot;I&quot;tupleIndex&quot;I&quot;fsHeader&quot;(KerxFormatSpecificHeader=&quot;orderedList&quot;{KerxOrderedListHeader=&quot;nPairs&quot;I&quot;searchRange&quot;I&quot;entrySelector&quot;I&quot;rangeShift&quot;I&quot;table&quot;[1I]}&quot;stateTable&quot;{KerxStateHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;valueTable&quot;I&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KerxSimpleArrayHeader=&quot;rowWidth&quot;I&quot;leftOffsetTable&quot;I&quot;rightOffsetTable&quot;I&quot;theArray&quot;I&quot;firstTable&quot;[1I]}&quot;indexArray&quot;{KerxIndexArrayHeader=&quot;glyphCount&quot;S&quot;kernValueCount&quot;S&quot;leftClassCount&quot;S&quot;rightClassCount&quot;S&quot;flags&quot;S&quot;kernValue&quot;[1s]&quot;leftClass&quot;[1S]&quot;rightClass&quot;[1S]&quot;kernIndex&quot;[1S]}&quot;controlPoint&quot;{KerxControlPointHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;flags&quot;I&quot;firstTable&quot;[1C]})}'>
<field declared_type='UInt32' name='length' type='L' type64='I'/>
<field declared_type='KerxSubtableCoverage' name='stInfo' type='L' type64='I'/>
<field declared_type='UInt32' name='tupleIndex' type='L' type64='I'/>
<field declared_type='KerxFormatSpecificHeader' name='fsHeader' type='(KerxFormatSpecificHeader=&quot;orderedList&quot;{KerxOrderedListHeader=&quot;nPairs&quot;I&quot;searchRange&quot;I&quot;entrySelector&quot;I&quot;rangeShift&quot;I&quot;table&quot;[1L]}&quot;stateTable&quot;{KerxStateHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;valueTable&quot;I&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KerxSimpleArrayHeader=&quot;rowWidth&quot;I&quot;leftOffsetTable&quot;I&quot;rightOffsetTable&quot;I&quot;theArray&quot;I&quot;firstTable&quot;[1L]}&quot;indexArray&quot;{KerxIndexArrayHeader=&quot;glyphCount&quot;S&quot;kernValueCount&quot;S&quot;leftClassCount&quot;S&quot;rightClassCount&quot;S&quot;flags&quot;S&quot;kernValue&quot;[1s]&quot;leftClass&quot;[1S]&quot;rightClass&quot;[1S]&quot;kernIndex&quot;[1S]}&quot;controlPoint&quot;{KerxControlPointHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;flags&quot;I&quot;firstTable&quot;[1C]})' type64='(KerxFormatSpecificHeader=&quot;orderedList&quot;{KerxOrderedListHeader=&quot;nPairs&quot;I&quot;searchRange&quot;I&quot;entrySelector&quot;I&quot;rangeShift&quot;I&quot;table&quot;[1I]}&quot;stateTable&quot;{KerxStateHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;valueTable&quot;I&quot;firstTable&quot;[1C]}&quot;simpleArray&quot;{KerxSimpleArrayHeader=&quot;rowWidth&quot;I&quot;leftOffsetTable&quot;I&quot;rightOffsetTable&quot;I&quot;theArray&quot;I&quot;firstTable&quot;[1I]}&quot;indexArray&quot;{KerxIndexArrayHeader=&quot;glyphCount&quot;S&quot;kernValueCount&quot;S&quot;leftClassCount&quot;S&quot;rightClassCount&quot;S&quot;flags&quot;S&quot;kernValue&quot;[1s]&quot;leftClass&quot;[1S]&quot;rightClass&quot;[1S]&quot;kernIndex&quot;[1S]}&quot;controlPoint&quot;{KerxControlPointHeader=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;flags&quot;I&quot;firstTable&quot;[1C]})'/>
</struct>
<struct name='KerxTableHeader' type='{KerxTableHeader=&quot;version&quot;i&quot;nTables&quot;I&quot;firstSubtable&quot;[1L]}' type64='{KerxTableHeader=&quot;version&quot;i&quot;nTables&quot;I&quot;firstSubtable&quot;[1I]}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='UInt32' name='nTables' type='L' type64='I'/>
<field declared_type='UInt32*' name='firstSubtable' type='[1L]' type64='[1I]'/>
</struct>
<struct name='LcarCaretClassEntry' type='{LcarCaretClassEntry=&quot;count&quot;S&quot;partials&quot;[1S]}'>
<field declared_type='UInt16' name='count' type='S'/>
<field declared_type='UInt16*' name='partials' type='[1S]'/>
</struct>
<struct name='LcarCaretTable' type='{LcarCaretTable=&quot;version&quot;i&quot;format&quot;S&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='UInt16' name='format' type='S'/>
<field declared_type='SFNTLookupTable' name='lookup' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}'/>
</struct>
<struct name='LtagStringRange' type='{LtagStringRange=&quot;offset&quot;S&quot;length&quot;S}'>
<field declared_type='UInt16' name='offset' type='S'/>
<field declared_type='UInt16' name='length' type='S'/>
</struct>
<struct name='LtagTable' type='{LtagTable=&quot;version&quot;I&quot;flags&quot;I&quot;numTags&quot;I&quot;tagRange&quot;[1{LtagStringRange=&quot;offset&quot;S&quot;length&quot;S}]}'>
<field declared_type='UInt32' name='version' type='L' type64='I'/>
<field declared_type='UInt32' name='flags' type='L' type64='I'/>
<field declared_type='UInt32' name='numTags' type='L' type64='I'/>
<field declared_type='LtagStringRange*' name='tagRange' type='[1{LtagStringRange=&quot;offset&quot;S&quot;length&quot;S}]'/>
</struct>
<struct name='MortChain' type='{MortChain=&quot;defaultFlags&quot;I&quot;length&quot;I&quot;nFeatures&quot;S&quot;nSubtables&quot;S&quot;featureEntries&quot;[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]}'>
<field declared_type='MortSubtableMaskFlags' name='defaultFlags' type='L' type64='I'/>
<field declared_type='UInt32' name='length' type='L' type64='I'/>
<field declared_type='UInt16' name='nFeatures' type='S'/>
<field declared_type='UInt16' name='nSubtables' type='S'/>
<field declared_type='MortFeatureEntry*' name='featureEntries' type='[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]'/>
</struct>
<struct name='MortContextualSubtable' type='{MortContextualSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;substitutionTableOffset&quot;S}'>
<field declared_type='STHeader' name='header' type='{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}'/>
<field declared_type='UInt16' name='substitutionTableOffset' type='S'/>
</struct>
<struct name='MortFeatureEntry' type='{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}'>
<field declared_type='UInt16' name='featureType' type='S'/>
<field declared_type='UInt16' name='featureSelector' type='S'/>
<field declared_type='MortSubtableMaskFlags' name='enableFlags' type='L' type64='I'/>
<field declared_type='MortSubtableMaskFlags' name='disableFlags' type='L' type64='I'/>
</struct>
<struct name='MortInsertionSubtable' type='{MortInsertionSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}}'>
<field declared_type='STHeader' name='header' type='{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}'/>
</struct>
<struct name='MortLigatureSubtable' type='{MortLigatureSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;ligatureActionTableOffset&quot;S&quot;componentTableOffset&quot;S&quot;ligatureTableOffset&quot;S}'>
<field declared_type='STHeader' name='header' type='{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}'/>
<field declared_type='UInt16' name='ligatureActionTableOffset' type='S'/>
<field declared_type='UInt16' name='componentTableOffset' type='S'/>
<field declared_type='UInt16' name='ligatureTableOffset' type='S'/>
</struct>
<struct name='MortRearrangementSubtable' type='{MortRearrangementSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}}'>
<field declared_type='STHeader' name='header' type='{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}'/>
</struct>
<struct name='MortSubtable' type='{MortSubtable=&quot;length&quot;S&quot;coverage&quot;S&quot;flags&quot;I&quot;u&quot;(MortSpecificSubtable=&quot;rearrangement&quot;{MortRearrangementSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}}&quot;contextual&quot;{MortContextualSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;substitutionTableOffset&quot;S}&quot;ligature&quot;{MortLigatureSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;ligatureActionTableOffset&quot;S&quot;componentTableOffset&quot;S&quot;ligatureTableOffset&quot;S}&quot;swash&quot;{MortSwashSubtable=&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}}&quot;insertion&quot;{MortInsertionSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}})}'>
<field declared_type='UInt16' name='length' type='S'/>
<field declared_type='UInt16' name='coverage' type='S'/>
<field declared_type='MortSubtableMaskFlags' name='flags' type='L' type64='I'/>
<field declared_type='MortSpecificSubtable' name='u' type='(MortSpecificSubtable=&quot;rearrangement&quot;{MortRearrangementSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}}&quot;contextual&quot;{MortContextualSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;substitutionTableOffset&quot;S}&quot;ligature&quot;{MortLigatureSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}&quot;ligatureActionTableOffset&quot;S&quot;componentTableOffset&quot;S&quot;ligatureTableOffset&quot;S}&quot;swash&quot;{MortSwashSubtable=&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}}&quot;insertion&quot;{MortInsertionSubtable=&quot;header&quot;{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}})'/>
</struct>
<struct name='MortSwashSubtable' type='{MortSwashSubtable=&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}}'>
<field declared_type='SFNTLookupTable' name='lookup' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}'/>
</struct>
<struct name='MortTable' type='{MortTable=&quot;version&quot;i&quot;nChains&quot;I&quot;chains&quot;[1{MortChain=&quot;defaultFlags&quot;I&quot;length&quot;I&quot;nFeatures&quot;S&quot;nSubtables&quot;S&quot;featureEntries&quot;[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]}]}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='UInt32' name='nChains' type='L' type64='I'/>
<field declared_type='MortChain*' name='chains' type='[1{MortChain=&quot;defaultFlags&quot;I&quot;length&quot;I&quot;nFeatures&quot;S&quot;nSubtables&quot;S&quot;featureEntries&quot;[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]}]'/>
</struct>
<struct name='MorxChain' type='{MorxChain=&quot;defaultFlags&quot;I&quot;length&quot;I&quot;nFeatures&quot;I&quot;nSubtables&quot;I&quot;featureEntries&quot;[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]}'>
<field declared_type='MortSubtableMaskFlags' name='defaultFlags' type='L' type64='I'/>
<field declared_type='UInt32' name='length' type='L' type64='I'/>
<field declared_type='UInt32' name='nFeatures' type='L' type64='I'/>
<field declared_type='UInt32' name='nSubtables' type='L' type64='I'/>
<field declared_type='MortFeatureEntry*' name='featureEntries' type='[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]'/>
</struct>
<struct name='MorxContextualSubtable' type='{MorxContextualSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;substitutionTableOffset&quot;I}'>
<field declared_type='STXHeader' name='header' type='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'/>
<field declared_type='UInt32' name='substitutionTableOffset' type='L' type64='I'/>
</struct>
<struct name='MorxInsertionSubtable' type='{MorxInsertionSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;insertionGlyphTableOffset&quot;I}'>
<field declared_type='STXHeader' name='header' type='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'/>
<field declared_type='UInt32' name='insertionGlyphTableOffset' type='L' type64='I'/>
</struct>
<struct name='MorxLigatureSubtable' type='{MorxLigatureSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;ligatureActionTableOffset&quot;I&quot;componentTableOffset&quot;I&quot;ligatureTableOffset&quot;I}'>
<field declared_type='STXHeader' name='header' type='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'/>
<field declared_type='UInt32' name='ligatureActionTableOffset' type='L' type64='I'/>
<field declared_type='UInt32' name='componentTableOffset' type='L' type64='I'/>
<field declared_type='UInt32' name='ligatureTableOffset' type='L' type64='I'/>
</struct>
<struct name='MorxRearrangementSubtable' type='{MorxRearrangementSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}}'>
<field declared_type='STXHeader' name='header' type='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'/>
</struct>
<struct name='MorxSubtable' type='{MorxSubtable=&quot;length&quot;I&quot;coverage&quot;I&quot;flags&quot;I&quot;u&quot;(MorxSpecificSubtable=&quot;rearrangement&quot;{MorxRearrangementSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}}&quot;contextual&quot;{MorxContextualSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;substitutionTableOffset&quot;I}&quot;ligature&quot;{MorxLigatureSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;ligatureActionTableOffset&quot;I&quot;componentTableOffset&quot;I&quot;ligatureTableOffset&quot;I}&quot;swash&quot;{MortSwashSubtable=&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}}&quot;insertion&quot;{MorxInsertionSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;insertionGlyphTableOffset&quot;I})}'>
<field declared_type='UInt32' name='length' type='L' type64='I'/>
<field declared_type='UInt32' name='coverage' type='L' type64='I'/>
<field declared_type='MortSubtableMaskFlags' name='flags' type='L' type64='I'/>
<field declared_type='MorxSpecificSubtable' name='u' type='(MorxSpecificSubtable=&quot;rearrangement&quot;{MorxRearrangementSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}}&quot;contextual&quot;{MorxContextualSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;substitutionTableOffset&quot;I}&quot;ligature&quot;{MorxLigatureSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;ligatureActionTableOffset&quot;I&quot;componentTableOffset&quot;I&quot;ligatureTableOffset&quot;I}&quot;swash&quot;{MortSwashSubtable=&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}}&quot;insertion&quot;{MorxInsertionSubtable=&quot;header&quot;{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}&quot;insertionGlyphTableOffset&quot;I})'/>
</struct>
<struct name='MorxTable' type='{MorxTable=&quot;version&quot;i&quot;nChains&quot;I&quot;chains&quot;[1{MorxChain=&quot;defaultFlags&quot;I&quot;length&quot;I&quot;nFeatures&quot;I&quot;nSubtables&quot;I&quot;featureEntries&quot;[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]}]}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='UInt32' name='nChains' type='L' type64='I'/>
<field declared_type='MorxChain*' name='chains' type='[1{MorxChain=&quot;defaultFlags&quot;I&quot;length&quot;I&quot;nFeatures&quot;I&quot;nSubtables&quot;I&quot;featureEntries&quot;[1{MortFeatureEntry=&quot;featureType&quot;S&quot;featureSelector&quot;S&quot;enableFlags&quot;I&quot;disableFlags&quot;I}]}]'/>
</struct>
<struct name='OpbdSideValues' type='{OpbdSideValues=&quot;leftSideShift&quot;s&quot;topSideShift&quot;s&quot;rightSideShift&quot;s&quot;bottomSideShift&quot;s}'>
<field declared_type='SInt16' name='leftSideShift' type='s'/>
<field declared_type='SInt16' name='topSideShift' type='s'/>
<field declared_type='SInt16' name='rightSideShift' type='s'/>
<field declared_type='SInt16' name='bottomSideShift' type='s'/>
</struct>
<struct name='OpbdTable' type='{OpbdTable=&quot;version&quot;i&quot;format&quot;S&quot;lookupTable&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='OpbdTableFormat' name='format' type='S'/>
<field declared_type='SFNTLookupTable' name='lookupTable' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}'/>
</struct>
<struct name='PropLookupSegment' type='{PropLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;S}'>
<field declared_type='UInt16' name='lastGlyph' type='S'/>
<field declared_type='UInt16' name='firstGlyph' type='S'/>
<field declared_type='UInt16' name='value' type='S'/>
</struct>
<struct name='PropLookupSingle' type='{PropLookupSingle=&quot;glyph&quot;S&quot;props&quot;S}'>
<field declared_type='UInt16' name='glyph' type='S'/>
<field declared_type='PropCharProperties' name='props' type='S'/>
</struct>
<struct name='PropTable' type='{PropTable=&quot;version&quot;i&quot;format&quot;S&quot;defaultProps&quot;S&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='UInt16' name='format' type='S'/>
<field declared_type='PropCharProperties' name='defaultProps' type='S'/>
<field declared_type='SFNTLookupTable' name='lookup' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}'/>
</struct>
<struct name='ROTAGlyphEntry' type='{ROTAGlyphEntry=&quot;GlyphIndexOffset&quot;s&quot;HBaselineOffset&quot;s&quot;VBaselineOffset&quot;s}'>
<field declared_type='SInt16' name='GlyphIndexOffset' type='s'/>
<field declared_type='SInt16' name='HBaselineOffset' type='s'/>
<field declared_type='SInt16' name='VBaselineOffset' type='s'/>
</struct>
<struct name='ROTAHeader' type='{ROTAHeader=&quot;Version&quot;i&quot;Flags&quot;S&quot;NMasters&quot;S&quot;FirstGlyph&quot;S&quot;LastGlyph&quot;S&quot;lookup&quot;{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}}'>
<field declared_type='Fixed' name='Version' type='l' type64='i'/>
<field declared_type='UInt16' name='Flags' type='S'/>
<field declared_type='UInt16' name='NMasters' type='S'/>
<field declared_type='UInt16' name='FirstGlyph' type='S'/>
<field declared_type='UInt16' name='LastGlyph' type='S'/>
<field declared_type='SFNTLookupTable' name='lookup' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}'/>
</struct>
<struct name='SFNTLookupArrayHeader' type='{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}'>
<field declared_type='SFNTLookupValue*' name='lookupValues' type='[1S]'/>
</struct>
<struct name='SFNTLookupBinarySearchHeader' type='{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}'>
<field declared_type='UInt16' name='unitSize' type='S'/>
<field declared_type='UInt16' name='nUnits' type='S'/>
<field declared_type='UInt16' name='searchRange' type='S'/>
<field declared_type='UInt16' name='entrySelector' type='S'/>
<field declared_type='UInt16' name='rangeShift' type='S'/>
</struct>
<struct name='SFNTLookupSegment' type='{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}'>
<field declared_type='UInt16' name='lastGlyph' type='S'/>
<field declared_type='UInt16' name='firstGlyph' type='S'/>
<field declared_type='UInt16*' name='value' type='[1S]'/>
</struct>
<struct name='SFNTLookupSegmentHeader' type='{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}'>
<field declared_type='SFNTLookupBinarySearchHeader' name='binSearch' type='{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}'/>
<field declared_type='SFNTLookupSegment*' name='segments' type='[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]'/>
</struct>
<struct name='SFNTLookupSingle' type='{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}'>
<field declared_type='UInt16' name='glyph' type='S'/>
<field declared_type='UInt16*' name='value' type='[1S]'/>
</struct>
<struct name='SFNTLookupSingleHeader' type='{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}'>
<field declared_type='SFNTLookupBinarySearchHeader' name='binSearch' type='{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}'/>
<field declared_type='SFNTLookupSingle*' name='entries' type='[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]'/>
</struct>
<struct name='SFNTLookupTable' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}'>
<field declared_type='SFNTLookupTableFormat' name='format' type='S'/>
<field declared_type='SFNTLookupFormatSpecificHeader' name='fsHeader' type='(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})'/>
</struct>
<struct name='SFNTLookupTrimmedArrayHeader' type='{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]}'>
<field declared_type='UInt16' name='firstGlyph' type='S'/>
<field declared_type='UInt16' name='count' type='S'/>
<field declared_type='SFNTLookupValue*' name='valueArray' type='[1S]'/>
</struct>
<struct name='STClassTable' type='{STClassTable=&quot;firstGlyph&quot;S&quot;nGlyphs&quot;S&quot;classes&quot;[1C]}'>
<field declared_type='UInt16' name='firstGlyph' type='S'/>
<field declared_type='UInt16' name='nGlyphs' type='S'/>
<field declared_type='STClass*' name='classes' type='[1C]'/>
</struct>
<struct name='STEntryOne' type='{STEntryOne=&quot;newState&quot;S&quot;flags&quot;S&quot;offset1&quot;S}'>
<field declared_type='UInt16' name='newState' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
<field declared_type='UInt16' name='offset1' type='S'/>
</struct>
<struct name='STEntryTwo' type='{STEntryTwo=&quot;newState&quot;S&quot;flags&quot;S&quot;offset1&quot;S&quot;offset2&quot;S}'>
<field declared_type='UInt16' name='newState' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
<field declared_type='UInt16' name='offset1' type='S'/>
<field declared_type='UInt16' name='offset2' type='S'/>
</struct>
<struct name='STEntryZero' type='{STEntryZero=&quot;newState&quot;S&quot;flags&quot;S}'>
<field declared_type='UInt16' name='newState' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
</struct>
<struct name='STHeader' type='{STHeader=&quot;filler&quot;C&quot;nClasses&quot;C&quot;classTableOffset&quot;S&quot;stateArrayOffset&quot;S&quot;entryTableOffset&quot;S}'>
<field declared_type='UInt8' name='filler' type='C'/>
<field declared_type='STClass' name='nClasses' type='C'/>
<field declared_type='UInt16' name='classTableOffset' type='S'/>
<field declared_type='UInt16' name='stateArrayOffset' type='S'/>
<field declared_type='UInt16' name='entryTableOffset' type='S'/>
</struct>
<struct name='STXClassTable' type='{SFNTLookupTable=&quot;format&quot;S&quot;fsHeader&quot;(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})}'>
<field declared_type='SFNTLookupTableFormat' name='format' type='S'/>
<field declared_type='SFNTLookupFormatSpecificHeader' name='fsHeader' type='(SFNTLookupFormatSpecificHeader=&quot;theArray&quot;{SFNTLookupArrayHeader=&quot;lookupValues&quot;[1S]}&quot;segment&quot;{SFNTLookupSegmentHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;segments&quot;[1{SFNTLookupSegment=&quot;lastGlyph&quot;S&quot;firstGlyph&quot;S&quot;value&quot;[1S]}]}&quot;single&quot;{SFNTLookupSingleHeader=&quot;binSearch&quot;{SFNTLookupBinarySearchHeader=&quot;unitSize&quot;S&quot;nUnits&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S}&quot;entries&quot;[1{SFNTLookupSingle=&quot;glyph&quot;S&quot;value&quot;[1S]}]}&quot;trimmedArray&quot;{SFNTLookupTrimmedArrayHeader=&quot;firstGlyph&quot;S&quot;count&quot;S&quot;valueArray&quot;[1S]})'/>
</struct>
<struct name='STXEntryOne' type='{STXEntryOne=&quot;newState&quot;S&quot;flags&quot;S&quot;index1&quot;S}'>
<field declared_type='STXStateIndex' name='newState' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
<field declared_type='UInt16' name='index1' type='S'/>
</struct>
<struct name='STXEntryTwo' type='{STXEntryTwo=&quot;newState&quot;S&quot;flags&quot;S&quot;index1&quot;S&quot;index2&quot;S}'>
<field declared_type='STXStateIndex' name='newState' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
<field declared_type='UInt16' name='index1' type='S'/>
<field declared_type='UInt16' name='index2' type='S'/>
</struct>
<struct name='STXEntryZero' type='{STXEntryZero=&quot;newState&quot;S&quot;flags&quot;S}'>
<field declared_type='STXStateIndex' name='newState' type='S'/>
<field declared_type='UInt16' name='flags' type='S'/>
</struct>
<struct name='STXHeader' type='{STXHeader=&quot;nClasses&quot;I&quot;classTableOffset&quot;I&quot;stateArrayOffset&quot;I&quot;entryTableOffset&quot;I}'>
<field declared_type='UInt32' name='nClasses' type='L' type64='I'/>
<field declared_type='UInt32' name='classTableOffset' type='L' type64='I'/>
<field declared_type='UInt32' name='stateArrayOffset' type='L' type64='I'/>
<field declared_type='UInt32' name='entryTableOffset' type='L' type64='I'/>
</struct>
<struct name='TrakTable' type='{TrakTable=&quot;version&quot;i&quot;format&quot;S&quot;horizOffset&quot;S&quot;vertOffset&quot;S}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='UInt16' name='format' type='S'/>
<field declared_type='UInt16' name='horizOffset' type='S'/>
<field declared_type='UInt16' name='vertOffset' type='S'/>
</struct>
<struct name='TrakTableData' type='{TrakTableData=&quot;nTracks&quot;S&quot;nSizes&quot;S&quot;sizeTableOffset&quot;I&quot;trakTable&quot;[1{TrakTableEntry=&quot;track&quot;i&quot;nameTableIndex&quot;S&quot;sizesOffset&quot;S}]}'>
<field declared_type='UInt16' name='nTracks' type='S'/>
<field declared_type='UInt16' name='nSizes' type='S'/>
<field declared_type='UInt32' name='sizeTableOffset' type='L' type64='I'/>
<field declared_type='TrakTableEntry*' name='trakTable' type='[1{TrakTableEntry=&quot;track&quot;i&quot;nameTableIndex&quot;S&quot;sizesOffset&quot;S}]'/>
</struct>
<struct name='TrakTableEntry' type='{TrakTableEntry=&quot;track&quot;i&quot;nameTableIndex&quot;S&quot;sizesOffset&quot;S}'>
<field declared_type='Fixed' name='track' type='l' type64='i'/>
<field declared_type='UInt16' name='nameTableIndex' type='S'/>
<field declared_type='UInt16' name='sizesOffset' type='S'/>
</struct>
<struct name='sfntCMapEncoding' type='{sfntCMapEncoding=&quot;platformID&quot;S&quot;scriptID&quot;S&quot;offset&quot;I}'>
<field declared_type='UInt16' name='platformID' type='S'/>
<field declared_type='UInt16' name='scriptID' type='S'/>
<field declared_type='UInt32' name='offset' type='L' type64='I'/>
</struct>
<struct name='sfntCMapExtendedSubHeader' type='{sfntCMapExtendedSubHeader=&quot;format&quot;S&quot;reserved&quot;S&quot;length&quot;I&quot;language&quot;I}'>
<field declared_type='UInt16' name='format' type='S'/>
<field declared_type='UInt16' name='reserved' type='S'/>
<field declared_type='UInt32' name='length' type='L' type64='I'/>
<field declared_type='UInt32' name='language' type='L' type64='I'/>
</struct>
<struct name='sfntCMapHeader' type='{sfntCMapHeader=&quot;version&quot;S&quot;numTables&quot;S&quot;encoding&quot;[1{sfntCMapEncoding=&quot;platformID&quot;S&quot;scriptID&quot;S&quot;offset&quot;I}]}'>
<field declared_type='UInt16' name='version' type='S'/>
<field declared_type='UInt16' name='numTables' type='S'/>
<field declared_type='sfntCMapEncoding*' name='encoding' type='[1{sfntCMapEncoding=&quot;platformID&quot;S&quot;scriptID&quot;S&quot;offset&quot;I}]'/>
</struct>
<struct name='sfntCMapSubHeader' type='{sfntCMapSubHeader=&quot;format&quot;S&quot;length&quot;S&quot;languageID&quot;S}'>
<field declared_type='UInt16' name='format' type='S'/>
<field declared_type='UInt16' name='length' type='S'/>
<field declared_type='UInt16' name='languageID' type='S'/>
</struct>
<struct name='sfntDescriptorHeader' type='{sfntDescriptorHeader=&quot;version&quot;i&quot;descriptorCount&quot;i&quot;descriptor&quot;[1{sfntFontDescriptor=&quot;name&quot;I&quot;value&quot;i}]}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='SInt32' name='descriptorCount' type='l' type64='i'/>
<field declared_type='sfntFontDescriptor*' name='descriptor' type='[1{sfntFontDescriptor=&quot;name&quot;I&quot;value&quot;i}]'/>
</struct>
<struct name='sfntDirectory' type='{sfntDirectory=&quot;format&quot;I&quot;numOffsets&quot;S&quot;searchRange&quot;S&quot;entrySelector&quot;S&quot;rangeShift&quot;S&quot;table&quot;[1{sfntDirectoryEntry=&quot;tableTag&quot;I&quot;checkSum&quot;I&quot;offset&quot;I&quot;length&quot;I}]}'>
<field declared_type='FourCharCode' name='format' type='L' type64='I'/>
<field declared_type='UInt16' name='numOffsets' type='S'/>
<field declared_type='UInt16' name='searchRange' type='S'/>
<field declared_type='UInt16' name='entrySelector' type='S'/>
<field declared_type='UInt16' name='rangeShift' type='S'/>
<field declared_type='sfntDirectoryEntry*' name='table' type='[1{sfntDirectoryEntry=&quot;tableTag&quot;I&quot;checkSum&quot;I&quot;offset&quot;I&quot;length&quot;I}]'/>
</struct>
<struct name='sfntDirectoryEntry' type='{sfntDirectoryEntry=&quot;tableTag&quot;I&quot;checkSum&quot;I&quot;offset&quot;I&quot;length&quot;I}'>
<field declared_type='FourCharCode' name='tableTag' type='L' type64='I'/>
<field declared_type='UInt32' name='checkSum' type='L' type64='I'/>
<field declared_type='UInt32' name='offset' type='L' type64='I'/>
<field declared_type='UInt32' name='length' type='L' type64='I'/>
</struct>
<struct name='sfntFeatureHeader' type='{sfntFeatureHeader=&quot;version&quot;i&quot;featureNameCount&quot;S&quot;featureSetCount&quot;S&quot;reserved&quot;i&quot;names&quot;[1{sfntFeatureName=&quot;featureType&quot;S&quot;settingCount&quot;S&quot;offsetToSettings&quot;i&quot;featureFlags&quot;S&quot;nameID&quot;s}]&quot;settings&quot;[1{sfntFontFeatureSetting=&quot;setting&quot;S&quot;nameID&quot;s}]&quot;runs&quot;[1{sfntFontRunFeature=&quot;featureType&quot;S&quot;setting&quot;S}]}'>
<field declared_type='SInt32' name='version' type='l' type64='i'/>
<field declared_type='UInt16' name='featureNameCount' type='S'/>
<field declared_type='UInt16' name='featureSetCount' type='S'/>
<field declared_type='SInt32' name='reserved' type='l' type64='i'/>
<field declared_type='sfntFeatureName*' name='names' type='[1{sfntFeatureName=&quot;featureType&quot;S&quot;settingCount&quot;S&quot;offsetToSettings&quot;i&quot;featureFlags&quot;S&quot;nameID&quot;s}]'/>
<field declared_type='sfntFontFeatureSetting*' name='settings' type='[1{sfntFontFeatureSetting=&quot;setting&quot;S&quot;nameID&quot;s}]'/>
<field declared_type='sfntFontRunFeature*' name='runs' type='[1{sfntFontRunFeature=&quot;featureType&quot;S&quot;setting&quot;S}]'/>
</struct>
<struct name='sfntFeatureName' type='{sfntFeatureName=&quot;featureType&quot;S&quot;settingCount&quot;S&quot;offsetToSettings&quot;i&quot;featureFlags&quot;S&quot;nameID&quot;s}'>
<field declared_type='UInt16' name='featureType' type='S'/>
<field declared_type='UInt16' name='settingCount' type='S'/>
<field declared_type='SInt32' name='offsetToSettings' type='l' type64='i'/>
<field declared_type='UInt16' name='featureFlags' type='S'/>
<field declared_type='SInt16' name='nameID' type='s'/>
</struct>
<struct name='sfntFontDescriptor' type='{sfntFontDescriptor=&quot;name&quot;I&quot;value&quot;i}'>
<field declared_type='FourCharCode' name='name' type='L' type64='I'/>
<field declared_type='Fixed' name='value' type='l' type64='i'/>
</struct>
<struct name='sfntFontFeatureSetting' type='{sfntFontFeatureSetting=&quot;setting&quot;S&quot;nameID&quot;s}'>
<field declared_type='UInt16' name='setting' type='S'/>
<field declared_type='SInt16' name='nameID' type='s'/>
</struct>
<struct name='sfntFontRunFeature' type='{sfntFontRunFeature=&quot;featureType&quot;S&quot;setting&quot;S}'>
<field declared_type='UInt16' name='featureType' type='S'/>
<field declared_type='UInt16' name='setting' type='S'/>
</struct>
<struct name='sfntInstance' type='{sfntInstance=&quot;nameID&quot;s&quot;flags&quot;s&quot;coord&quot;[1l]}' type64='{sfntInstance=&quot;nameID&quot;s&quot;flags&quot;s&quot;coord&quot;[1i]}'>
<field declared_type='SInt16' name='nameID' type='s'/>
<field declared_type='SInt16' name='flags' type='s'/>
<field declared_type='Fixed*' name='coord' type='[1l]' type64='[1i]'/>
</struct>
<struct name='sfntNameHeader' type='{sfntNameHeader=&quot;format&quot;S&quot;count&quot;S&quot;stringOffset&quot;S&quot;rec&quot;[1{sfntNameRecord=&quot;platformID&quot;S&quot;scriptID&quot;S&quot;languageID&quot;S&quot;nameID&quot;S&quot;length&quot;S&quot;offset&quot;S}]}'>
<field declared_type='UInt16' name='format' type='S'/>
<field declared_type='UInt16' name='count' type='S'/>
<field declared_type='UInt16' name='stringOffset' type='S'/>
<field declared_type='sfntNameRecord*' name='rec' type='[1{sfntNameRecord=&quot;platformID&quot;S&quot;scriptID&quot;S&quot;languageID&quot;S&quot;nameID&quot;S&quot;length&quot;S&quot;offset&quot;S}]'/>
</struct>
<struct name='sfntNameRecord' type='{sfntNameRecord=&quot;platformID&quot;S&quot;scriptID&quot;S&quot;languageID&quot;S&quot;nameID&quot;S&quot;length&quot;S&quot;offset&quot;S}'>
<field declared_type='UInt16' name='platformID' type='S'/>
<field declared_type='UInt16' name='scriptID' type='S'/>
<field declared_type='UInt16' name='languageID' type='S'/>
<field declared_type='UInt16' name='nameID' type='S'/>
<field declared_type='UInt16' name='length' type='S'/>
<field declared_type='UInt16' name='offset' type='S'/>
</struct>
<struct name='sfntVariationAxis' type='{sfntVariationAxis=&quot;axisTag&quot;I&quot;minValue&quot;i&quot;defaultValue&quot;i&quot;maxValue&quot;i&quot;flags&quot;s&quot;nameID&quot;s}'>
<field declared_type='FourCharCode' name='axisTag' type='L' type64='I'/>
<field declared_type='Fixed' name='minValue' type='l' type64='i'/>
<field declared_type='Fixed' name='defaultValue' type='l' type64='i'/>
<field declared_type='Fixed' name='maxValue' type='l' type64='i'/>
<field declared_type='SInt16' name='flags' type='s'/>
<field declared_type='SInt16' name='nameID' type='s'/>
</struct>
<struct name='sfntVariationHeader' type='{sfntVariationHeader=&quot;version&quot;i&quot;offsetToData&quot;S&quot;countSizePairs&quot;S&quot;axisCount&quot;S&quot;axisSize&quot;S&quot;instanceCount&quot;S&quot;instanceSize&quot;S&quot;axis&quot;[1{sfntVariationAxis=&quot;axisTag&quot;I&quot;minValue&quot;i&quot;defaultValue&quot;i&quot;maxValue&quot;i&quot;flags&quot;s&quot;nameID&quot;s}]&quot;instance&quot;[1{sfntInstance=&quot;nameID&quot;s&quot;flags&quot;s&quot;coord&quot;[1l]}]}' type64='{sfntVariationHeader=&quot;version&quot;i&quot;offsetToData&quot;S&quot;countSizePairs&quot;S&quot;axisCount&quot;S&quot;axisSize&quot;S&quot;instanceCount&quot;S&quot;instanceSize&quot;S&quot;axis&quot;[1{sfntVariationAxis=&quot;axisTag&quot;I&quot;minValue&quot;i&quot;defaultValue&quot;i&quot;maxValue&quot;i&quot;flags&quot;s&quot;nameID&quot;s}]&quot;instance&quot;[1{sfntInstance=&quot;nameID&quot;s&quot;flags&quot;s&quot;coord&quot;[1i]}]}'>
<field declared_type='Fixed' name='version' type='l' type64='i'/>
<field declared_type='UInt16' name='offsetToData' type='S'/>
<field declared_type='UInt16' name='countSizePairs' type='S'/>
<field declared_type='UInt16' name='axisCount' type='S'/>
<field declared_type='UInt16' name='axisSize' type='S'/>
<field declared_type='UInt16' name='instanceCount' type='S'/>
<field declared_type='UInt16' name='instanceSize' type='S'/>
<field declared_type='sfntVariationAxis*' name='axis' type='[1{sfntVariationAxis=&quot;axisTag&quot;I&quot;minValue&quot;i&quot;defaultValue&quot;i&quot;maxValue&quot;i&quot;flags&quot;s&quot;nameID&quot;s}]'/>
<field declared_type='sfntInstance*' name='instance' type='[1{sfntInstance=&quot;nameID&quot;s&quot;flags&quot;s&quot;coord&quot;[1l]}]' type64='[1{sfntInstance=&quot;nameID&quot;s&quot;flags&quot;s&quot;coord&quot;[1i]}]'/>
</struct>
<cftype gettypeid_func='CTFontCollectionGetTypeID' name='CTFontCollectionRef' type='^{__CTFontCollection=}'/>
<cftype gettypeid_func='CTFontDescriptorGetTypeID' name='CTFontDescriptorRef' type='^{__CTFontDescriptor=}'/>
<cftype gettypeid_func='CTFontGetTypeID' name='CTFontRef' type='^{__CTFont=}'/>
<cftype gettypeid_func='CTFrameGetTypeID' name='CTFrameRef' type='^{__CTFrame=}'/>
<cftype gettypeid_func='CTFramesetterGetTypeID' name='CTFramesetterRef' type='^{__CTFramesetter=}'/>
<cftype gettypeid_func='CTGlyphInfoGetTypeID' name='CTGlyphInfoRef' type='^{__CTGlyphInfo=}'/>
<cftype gettypeid_func='CTLineGetTypeID' name='CTLineRef' type='^{__CTLine=}'/>
<cftype gettypeid_func='CTFontCollectionGetTypeID' name='CTMutableFontCollectionRef' type='^{__CTFontCollection=}'/>
<cftype gettypeid_func='CTParagraphStyleGetTypeID' name='CTParagraphStyleRef' type='^{__CTParagraphStyle=}'/>
<cftype gettypeid_func='CTRunDelegateGetTypeID' name='CTRunDelegateRef' type='^{__CTRunDelegate=}'/>
<cftype gettypeid_func='CTRunGetTypeID' name='CTRunRef' type='^{__CTRun=}'/>
<cftype gettypeid_func='CTTextTabGetTypeID' name='CTTextTabRef' type='^{__CTTextTab=}'/>
<cftype gettypeid_func='CTTypesetterGetTypeID' name='CTTypesetterRef' type='^{__CTTypesetter=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTBaselineClassAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTBaselineClassHanging' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTBaselineClassIdeographicCentered' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTBaselineClassIdeographicHigh' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTBaselineClassIdeographicLow' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTBaselineClassMath' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTBaselineClassRoman' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTBaselineInfoAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTBaselineOriginalFont' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTBaselineReferenceFont' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTBaselineReferenceInfoAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTCharacterShapeAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontBaselineAdjustAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontCascadeListAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontCharacterSetAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontCollectionDisallowAutoActivationOption' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontCollectionIncludeDisabledFontsOption' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontCollectionRemoveDuplicatesOption' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontCopyrightNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontDescriptionNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontDescriptorMatchingCurrentAssetSize' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontDescriptorMatchingDescriptors' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontDescriptorMatchingError' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontDescriptorMatchingPercentage' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontDescriptorMatchingResult' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontDescriptorMatchingSourceDescriptor' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontDescriptorMatchingTotalAssetSize' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontDescriptorMatchingTotalDownloadedSize' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontDesignerNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontDesignerURLNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontDisplayNameAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontDownloadableAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontEnabledAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontFamilyNameAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontFamilyNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontFeatureSelectorDefaultKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontFeatureSelectorIdentifierKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontFeatureSelectorNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontFeatureSelectorSettingKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontFeatureSettingsAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontFeatureTypeExclusiveKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontFeatureTypeIdentifierKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontFeatureTypeNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontFeatureTypeSelectorsKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontFeaturesAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontFixedAdvanceAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontFormatAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontFullNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontLanguagesAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontLicenseNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontLicenseURLNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontMacintoshEncodingsAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontManagerBundleIdentifier' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontManagerErrorDomain' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontManagerErrorFontURLsKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontManagerRegisteredFontsChangedNotification' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontManufacturerNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontMatrixAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontNameAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontOrientationAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontPostScriptCIDNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontPostScriptNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontPriorityAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontRegistrationScopeAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontSampleTextNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontSizeAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontSlantTrait' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontStyleNameAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontStyleNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontSubFamilyNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontSymbolicTrait' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontTrademarkNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontTraitsAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontURLAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontUniqueNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontVariationAttribute' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontVariationAxisDefaultValueKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontVariationAxisIdentifierKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontVariationAxisMaximumValueKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontVariationAxisMinimumValueKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontVariationAxisNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontVendorURLNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontVersionNameKey' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontWeightTrait' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFontWidthTrait' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTForegroundColorAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTForegroundColorFromContextAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFrameClippingPathsAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFramePathClippingPathAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFramePathFillRuleAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFramePathWidthAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTFrameProgressionAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTGlyphInfoAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTKernAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTLanguageAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTLigatureAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTParagraphStyleAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTRunDelegateAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTStrokeColorAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTStrokeWidthAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTSuperscriptAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTTabColumnTerminatorsAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTTypesetterOptionDisableBidiProcessing' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTTypesetterOptionForcedEmbeddingLevel' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTUnderlineColorAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTUnderlineStyleAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTVerticalFormsAttributeName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCTWritingDirectionAttributeName' type='^{__CFString=}'/>
<enum name='cmapFontTableTag' value='1668112752'/>
<enum name='descriptorFontTableTag' value='1717859171'/>
<enum name='featureFontTableTag' value='1717920116'/>
<enum name='kANKRCurrentVersion' value='0'/>
<enum name='kAbbrevSquaredLigaturesOffSelector' value='15'/>
<enum name='kAbbrevSquaredLigaturesOnSelector' value='14'/>
<enum name='kAllCapsSelector' value='1'/>
<enum name='kAllLowerCaseSelector' value='2'/>
<enum name='kAllTypeFeaturesOffSelector' value='1'/>
<enum name='kAllTypeFeaturesOnSelector' value='0'/>
<enum name='kAllTypographicFeaturesType' value='0'/>
<enum name='kAltHalfWidthTextSelector' value='6'/>
<enum name='kAltProportionalTextSelector' value='5'/>
<enum name='kAlternateHorizKanaOffSelector' value='1'/>
<enum name='kAlternateHorizKanaOnSelector' value='0'/>
<enum name='kAlternateKanaType' value='34'/>
<enum name='kAlternateVertKanaOffSelector' value='3'/>
<enum name='kAlternateVertKanaOnSelector' value='2'/>
<enum name='kAnnotationType' value='24'/>
<enum name='kAsteriskToMultiplyOffSelector' value='3'/>
<enum name='kAsteriskToMultiplyOnSelector' value='2'/>
<enum name='kBSLNControlPointFormatNoMap' value='2'/>
<enum name='kBSLNControlPointFormatWithMap' value='3'/>
<enum name='kBSLNCurrentVersion' value='65536'/>
<enum name='kBSLNDistanceFormatNoMap' value='0'/>
<enum name='kBSLNDistanceFormatWithMap' value='1'/>
<enum name='kBSLNHangingBaseline' value='3'/>
<enum name='kBSLNIdeographicCenterBaseline' value='1'/>
<enum name='kBSLNIdeographicHighBaseline' value='5'/>
<enum name='kBSLNIdeographicLowBaseline' value='2'/>
<enum name='kBSLNLastBaseline' value='31'/>
<enum name='kBSLNMathBaseline' value='4'/>
<enum name='kBSLNNoBaseline' value='255'/>
<enum name='kBSLNNoBaselineOverride' value='255'/>
<enum name='kBSLNNumBaselineClasses' value='32'/>
<enum name='kBSLNRomanBaseline' value='0'/>
<enum name='kBSLNTag' value='1651731566'/>
<enum name='kBoxAnnotationSelector' value='1'/>
<enum name='kCJKItalicRomanOffSelector' value='3'/>
<enum name='kCJKItalicRomanOnSelector' value='2'/>
<enum name='kCJKItalicRomanSelector' value='1'/>
<enum name='kCJKRomanSpacingType' value='103'/>
<enum name='kCJKSymbolAltFiveSelector' value='5'/>
<enum name='kCJKSymbolAltFourSelector' value='4'/>
<enum name='kCJKSymbolAltOneSelector' value='1'/>
<enum name='kCJKSymbolAltThreeSelector' value='3'/>
<enum name='kCJKSymbolAltTwoSelector' value='2'/>
<enum name='kCJKSymbolAlternativesType' value='29'/>
<enum name='kCJKVerticalRomanCenteredSelector' value='0'/>
<enum name='kCJKVerticalRomanHBaselineSelector' value='1'/>
<enum name='kCJKVerticalRomanPlacementType' value='31'/>
<enum name='kCTAdobeCNS1CharacterCollection' value='1'/>
<enum name='kCTAdobeGB1CharacterCollection' value='2'/>
<enum name='kCTAdobeJapan1CharacterCollection' value='3'/>
<enum name='kCTAdobeJapan2CharacterCollection' value='4'/>
<enum name='kCTAdobeKorea1CharacterCollection' value='5'/>
<enum name='kCTCenterTextAlignment' value='2'/>
<enum name='kCTCharacterCollectionAdobeCNS1' value='1'/>
<enum name='kCTCharacterCollectionAdobeGB1' value='2'/>
<enum name='kCTCharacterCollectionAdobeJapan1' value='3'/>
<enum name='kCTCharacterCollectionAdobeJapan2' value='4'/>
<enum name='kCTCharacterCollectionAdobeKorea1' value='5'/>
<enum name='kCTCharacterCollectionIdentityMapping' value='0'/>
<enum name='kCTFontAlertHeaderFontType' value='18'/>
<enum name='kCTFontApplicationFontType' value='9'/>
<enum name='kCTFontBoldTrait' value='2'/>
<enum name='kCTFontClarendonSerifsClass' value='1073741824'/>
<enum name='kCTFontClassClarendonSerifs' value='1073741824'/>
<enum name='kCTFontClassFreeformSerifs' value='1879048192'/>
<enum name='kCTFontClassMaskShift' value='28'/>
<enum name='kCTFontClassMaskTrait' value='4026531840'/>
<enum name='kCTFontClassModernSerifs' value='805306368'/>
<enum name='kCTFontClassOldStyleSerifs' value='268435456'/>
<enum name='kCTFontClassOrnamentals' value='2415919104'/>
<enum name='kCTFontClassSansSerif' value='2147483648'/>
<enum name='kCTFontClassScripts' value='2684354560'/>
<enum name='kCTFontClassSlabSerifs' value='1342177280'/>
<enum name='kCTFontClassSymbolic' value='3221225472'/>
<enum name='kCTFontClassTransitionalSerifs' value='536870912'/>
<enum name='kCTFontClassUnknown' value='0'/>
<enum name='kCTFontCollectionCopyDefaultOptions' value='0'/>
<enum name='kCTFontCollectionCopyStandardSort' value='2'/>
<enum name='kCTFontCollectionCopyUnique' value='1'/>
<enum name='kCTFontColorGlyphsTrait' value='8192'/>
<enum name='kCTFontCompositeTrait' value='16384'/>
<enum name='kCTFontCondensedTrait' value='64'/>
<enum name='kCTFontControlContentFontType' value='26'/>
<enum name='kCTFontDefaultOrientation' value='0'/>
<enum name='kCTFontDescriptorMatchingDidBegin' value='0'/>
<enum name='kCTFontDescriptorMatchingDidFailWithError' value='8'/>
<enum name='kCTFontDescriptorMatchingDidFinish' value='1'/>
<enum name='kCTFontDescriptorMatchingDidFinishDownloading' value='6'/>
<enum name='kCTFontDescriptorMatchingDidMatch' value='7'/>
<enum name='kCTFontDescriptorMatchingDownloading' value='5'/>
<enum name='kCTFontDescriptorMatchingStalled' value='3'/>
<enum name='kCTFontDescriptorMatchingWillBeginDownloading' value='4'/>
<enum name='kCTFontDescriptorMatchingWillBeginQuerying' value='2'/>
<enum name='kCTFontEmphasizedSystemDetailFontType' value='20'/>
<enum name='kCTFontEmphasizedSystemFontType' value='3'/>
<enum name='kCTFontExpandedTrait' value='32'/>
<enum name='kCTFontFormatBitmap' value='5'/>
<enum name='kCTFontFormatOpenTypePostScript' value='1'/>
<enum name='kCTFontFormatOpenTypeTrueType' value='2'/>
<enum name='kCTFontFormatPostScript' value='4'/>
<enum name='kCTFontFormatTrueType' value='3'/>
<enum name='kCTFontFormatUnrecognized' value='0'/>
<enum name='kCTFontFreeformSerifsClass' value='1879048192'/>
<enum name='kCTFontHorizontalOrientation' value='1'/>
<enum name='kCTFontItalicTrait' value='1'/>
<enum name='kCTFontLabelFontType' value='10'/>
<enum name='kCTFontManagerAutoActivationDefault' value='0'/>
<enum name='kCTFontManagerAutoActivationDisabled' value='1'/>
<enum name='kCTFontManagerAutoActivationEnabled' value='2'/>
<enum name='kCTFontManagerAutoActivationPromptUser' value='3'/>
<enum name='kCTFontManagerErrorAlreadyRegistered' value='105'/>
<enum name='kCTFontManagerErrorFileNotFound' value='101'/>
<enum name='kCTFontManagerErrorInUse' value='202'/>
<enum name='kCTFontManagerErrorInsufficientPermissions' value='102'/>
<enum name='kCTFontManagerErrorInvalidFontData' value='104'/>
<enum name='kCTFontManagerErrorNotRegistered' value='201'/>
<enum name='kCTFontManagerErrorSystemRequired' value='202'/>
<enum name='kCTFontManagerErrorUnrecognizedFormat' value='103'/>
<enum name='kCTFontManagerScopeNone' value='0'/>
<enum name='kCTFontManagerScopeProcess' value='1'/>
<enum name='kCTFontManagerScopeSession' value='3'/>
<enum name='kCTFontManagerScopeUser' value='2'/>
<enum name='kCTFontMenuItemCmdKeyFontType' value='14'/>
<enum name='kCTFontMenuItemFontType' value='12'/>
<enum name='kCTFontMenuItemMarkFontType' value='13'/>
<enum name='kCTFontMenuTitleFontType' value='11'/>
<enum name='kCTFontMessageFontType' value='23'/>
<enum name='kCTFontMiniEmphasizedSystemFontType' value='7'/>
<enum name='kCTFontMiniSystemFontType' value='6'/>
<enum name='kCTFontModernSerifsClass' value='805306368'/>
<enum name='kCTFontMonoSpaceTrait' value='1024'/>
<enum name='kCTFontNoFontType' value='4294967295'/>
<enum name='kCTFontOldStyleSerifsClass' value='268435456'/>
<enum name='kCTFontOptionsDefault' value='0'/>
<enum name='kCTFontOptionsPreferSystemFont' value='4'/>
<enum name='kCTFontOptionsPreventAutoActivation' value='1'/>
<enum name='kCTFontOrientationDefault' value='0'/>
<enum name='kCTFontOrientationHorizontal' value='1'/>
<enum name='kCTFontOrientationVertical' value='2'/>
<enum name='kCTFontOrnamentalsClass' value='2415919104'/>
<enum name='kCTFontPaletteFontType' value='24'/>
<enum name='kCTFontPriorityComputer' value='30000'/>
<enum name='kCTFontPriorityDynamic' value='50000'/>
<enum name='kCTFontPriorityNetwork' value='20000'/>
<enum name='kCTFontPriorityProcess' value='60000'/>
<enum name='kCTFontPrioritySystem' value='10000'/>
<enum name='kCTFontPriorityUser' value='40000'/>
<enum name='kCTFontPushButtonFontType' value='16'/>
<enum name='kCTFontSansSerifClass' value='2147483648'/>
<enum name='kCTFontScriptsClass' value='2684354560'/>
<enum name='kCTFontSlabSerifsClass' value='1342177280'/>
<enum name='kCTFontSmallEmphasizedSystemFontType' value='5'/>
<enum name='kCTFontSmallSystemFontType' value='4'/>
<enum name='kCTFontSmallToolbarFontType' value='22'/>
<enum name='kCTFontSymbolicClass' value='3221225472'/>
<enum name='kCTFontSystemDetailFontType' value='19'/>
<enum name='kCTFontSystemFontType' value='2'/>
<enum name='kCTFontTableAcnt' value='1633906292'/>
<enum name='kCTFontTableAnkr' value='1634626418'/>
<enum name='kCTFontTableAvar' value='1635148146'/>
<enum name='kCTFontTableBASE' value='1111577413'/>
<enum name='kCTFontTableBdat' value='1650745716'/>
<enum name='kCTFontTableBhed' value='1651008868'/>
<enum name='kCTFontTableBloc' value='1651273571'/>
<enum name='kCTFontTableBsln' value='1651731566'/>
<enum name='kCTFontTableCFF' value='1128678944'/>
<enum name='kCTFontTableCmap' value='1668112752'/>
<enum name='kCTFontTableCvar' value='1668702578'/>
<enum name='kCTFontTableCvt' value='1668707360'/>
<enum name='kCTFontTableDSIG' value='1146308935'/>
<enum name='kCTFontTableEBDT' value='1161970772'/>
<enum name='kCTFontTableEBLC' value='1161972803'/>
<enum name='kCTFontTableEBSC' value='1161974595'/>
<enum name='kCTFontTableFdsc' value='1717859171'/>
<enum name='kCTFontTableFeat' value='1717920116'/>
<enum name='kCTFontTableFmtx' value='1718449272'/>
<enum name='kCTFontTableFpgm' value='1718642541'/>
<enum name='kCTFontTableFvar' value='1719034226'/>
<enum name='kCTFontTableGDEF' value='1195656518'/>
<enum name='kCTFontTableGPOS' value='1196445523'/>
<enum name='kCTFontTableGSUB' value='1196643650'/>
<enum name='kCTFontTableGasp' value='1734439792'/>
<enum name='kCTFontTableGlyf' value='1735162214'/>
<enum name='kCTFontTableGvar' value='1735811442'/>
<enum name='kCTFontTableHdmx' value='1751412088'/>
<enum name='kCTFontTableHead' value='1751474532'/>
<enum name='kCTFontTableHhea' value='1751672161'/>
<enum name='kCTFontTableHmtx' value='1752003704'/>
<enum name='kCTFontTableHsty' value='1752396921'/>
<enum name='kCTFontTableJSTF' value='1246975046'/>
<enum name='kCTFontTableJust' value='1786082164'/>
<enum name='kCTFontTableKern' value='1801810542'/>
<enum name='kCTFontTableKerx' value='1801810552'/>
<enum name='kCTFontTableLTSH' value='1280594760'/>
<enum name='kCTFontTableLcar' value='1818452338'/>
<enum name='kCTFontTableLoca' value='1819239265'/>
<enum name='kCTFontTableLtag' value='1819566439'/>
<enum name='kCTFontTableMaxp' value='1835104368'/>
<enum name='kCTFontTableMort' value='1836020340'/>
<enum name='kCTFontTableMorx' value='1836020344'/>
<enum name='kCTFontTableName' value='1851878757'/>
<enum name='kCTFontTableOS2' value='1330851634'/>
<enum name='kCTFontTableOpbd' value='1869636196'/>
<enum name='kCTFontTableOptionExcludeSynthetic' value='1'/>
<enum name='kCTFontTableOptionNoOptions' value='0'/>
<enum name='kCTFontTablePCLT' value='1346587732'/>
<enum name='kCTFontTablePost' value='1886352244'/>
<enum name='kCTFontTablePrep' value='1886545264'/>
<enum name='kCTFontTableProp' value='1886547824'/>
<enum name='kCTFontTableSbit' value='1935829364'/>
<enum name='kCTFontTableSbix' value='1935829368'/>
<enum name='kCTFontTableTrak' value='1953653099'/>
<enum name='kCTFontTableVDMX' value='1447316824'/>
<enum name='kCTFontTableVORG' value='1448038983'/>
<enum name='kCTFontTableVhea' value='1986553185'/>
<enum name='kCTFontTableVmtx' value='1986884728'/>
<enum name='kCTFontTableZapf' value='1516335206'/>
<enum name='kCTFontToolTipFontType' value='25'/>
<enum name='kCTFontToolbarFontType' value='21'/>
<enum name='kCTFontTraitBold' value='2'/>
<enum name='kCTFontTraitClassMask' value='4026531840'/>
<enum name='kCTFontTraitColorGlyphs' value='8192'/>
<enum name='kCTFontTraitComposite' value='16384'/>
<enum name='kCTFontTraitCondensed' value='64'/>
<enum name='kCTFontTraitExpanded' value='32'/>
<enum name='kCTFontTraitItalic' value='1'/>
<enum name='kCTFontTraitMonoSpace' value='1024'/>
<enum name='kCTFontTraitUIOptimized' value='4096'/>
<enum name='kCTFontTraitVertical' value='2048'/>
<enum name='kCTFontTransitionalSerifsClass' value='536870912'/>
<enum name='kCTFontUIFontAlertHeader' value='18'/>
<enum name='kCTFontUIFontApplication' value='9'/>
<enum name='kCTFontUIFontControlContent' value='26'/>
<enum name='kCTFontUIFontEmphasizedSystem' value='3'/>
<enum name='kCTFontUIFontEmphasizedSystemDetail' value='20'/>
<enum name='kCTFontUIFontLabel' value='10'/>
<enum name='kCTFontUIFontMenuItem' value='12'/>
<enum name='kCTFontUIFontMenuItemCmdKey' value='14'/>
<enum name='kCTFontUIFontMenuItemMark' value='13'/>
<enum name='kCTFontUIFontMenuTitle' value='11'/>
<enum name='kCTFontUIFontMessage' value='23'/>
<enum name='kCTFontUIFontMiniEmphasizedSystem' value='7'/>
<enum name='kCTFontUIFontMiniSystem' value='6'/>
<enum name='kCTFontUIFontNone' value='4294967295'/>
<enum name='kCTFontUIFontPalette' value='24'/>
<enum name='kCTFontUIFontPushButton' value='16'/>
<enum name='kCTFontUIFontSmallEmphasizedSystem' value='5'/>
<enum name='kCTFontUIFontSmallSystem' value='4'/>
<enum name='kCTFontUIFontSmallToolbar' value='22'/>
<enum name='kCTFontUIFontSystem' value='2'/>
<enum name='kCTFontUIFontSystemDetail' value='19'/>
<enum name='kCTFontUIFontToolTip' value='25'/>
<enum name='kCTFontUIFontToolbar' value='21'/>
<enum name='kCTFontUIFontUser' value='0'/>
<enum name='kCTFontUIFontUserFixedPitch' value='1'/>
<enum name='kCTFontUIFontUtilityWindowTitle' value='17'/>
<enum name='kCTFontUIFontViews' value='8'/>
<enum name='kCTFontUIFontWindowTitle' value='15'/>
<enum name='kCTFontUIOptimizedTrait' value='4096'/>
<enum name='kCTFontUnknownClass' value='0'/>
<enum name='kCTFontUserFixedPitchFontType' value='1'/>
<enum name='kCTFontUserFontType' value='0'/>
<enum name='kCTFontUtilityWindowTitleFontType' value='17'/>
<enum name='kCTFontVerticalOrientation' value='2'/>
<enum name='kCTFontVerticalTrait' value='2048'/>
<enum name='kCTFontViewsFontType' value='8'/>
<enum name='kCTFontWindowTitleFontType' value='15'/>
<enum name='kCTFramePathFillEvenOdd' value='0'/>
<enum name='kCTFramePathFillWindingNumber' value='1'/>
<enum name='kCTFrameProgressionLeftToRight' value='2'/>
<enum name='kCTFrameProgressionRightToLeft' value='1'/>
<enum name='kCTFrameProgressionTopToBottom' value='0'/>
<enum name='kCTIdentityMappingCharacterCollection' value='0'/>
<enum name='kCTJustifiedTextAlignment' value='3'/>
<enum name='kCTLeftTextAlignment' value='0'/>
<enum name='kCTLineBoundsExcludeTypographicLeading' value='1'/>
<enum name='kCTLineBoundsExcludeTypographicShifts' value='2'/>
<enum name='kCTLineBoundsUseGlyphPathBounds' value='8'/>
<enum name='kCTLineBoundsUseHangingPunctuation' value='4'/>
<enum name='kCTLineBoundsUseOpticalBounds' value='16'/>
<enum name='kCTLineBreakByCharWrapping' value='1'/>
<enum name='kCTLineBreakByClipping' value='2'/>
<enum name='kCTLineBreakByTruncatingHead' value='3'/>
<enum name='kCTLineBreakByTruncatingMiddle' value='5'/>
<enum name='kCTLineBreakByTruncatingTail' value='4'/>
<enum name='kCTLineBreakByWordWrapping' value='0'/>
<enum name='kCTLineTruncationEnd' value='1'/>
<enum name='kCTLineTruncationMiddle' value='2'/>
<enum name='kCTLineTruncationStart' value='0'/>
<enum name='kCTNaturalTextAlignment' value='4'/>
<enum name='kCTParagraphStyleSpecifierAlignment' value='0'/>
<enum name='kCTParagraphStyleSpecifierBaseWritingDirection' value='13'/>
<enum name='kCTParagraphStyleSpecifierCount' value='18'/>
<enum name='kCTParagraphStyleSpecifierDefaultTabInterval' value='5'/>
<enum name='kCTParagraphStyleSpecifierFirstLineHeadIndent' value='1'/>
<enum name='kCTParagraphStyleSpecifierHeadIndent' value='2'/>
<enum name='kCTParagraphStyleSpecifierLineBoundsOptions' value='17'/>
<enum name='kCTParagraphStyleSpecifierLineBreakMode' value='6'/>
<enum name='kCTParagraphStyleSpecifierLineHeightMultiple' value='7'/>
<enum name='kCTParagraphStyleSpecifierLineSpacing' value='10'/>
<enum name='kCTParagraphStyleSpecifierLineSpacingAdjustment' value='16'/>
<enum name='kCTParagraphStyleSpecifierMaximumLineHeight' value='8'/>
<enum name='kCTParagraphStyleSpecifierMaximumLineSpacing' value='14'/>
<enum name='kCTParagraphStyleSpecifierMinimumLineHeight' value='9'/>
<enum name='kCTParagraphStyleSpecifierMinimumLineSpacing' value='15'/>
<enum name='kCTParagraphStyleSpecifierParagraphSpacing' value='11'/>
<enum name='kCTParagraphStyleSpecifierParagraphSpacingBefore' value='12'/>
<enum name='kCTParagraphStyleSpecifierTabStops' value='4'/>
<enum name='kCTParagraphStyleSpecifierTailIndent' value='3'/>
<enum name='kCTRightTextAlignment' value='1'/>
<enum name='kCTRunDelegateCurrentVersion' value='1'/>
<enum name='kCTRunDelegateVersion1' value='1'/>
<enum name='kCTRunStatusHasNonIdentityMatrix' value='4'/>
<enum name='kCTRunStatusNoStatus' value='0'/>
<enum name='kCTRunStatusNonMonotonic' value='2'/>
<enum name='kCTRunStatusRightToLeft' value='1'/>
<enum name='kCTTextAlignmentCenter' value='2'/>
<enum name='kCTTextAlignmentJustified' value='3'/>
<enum name='kCTTextAlignmentLeft' value='0'/>
<enum name='kCTTextAlignmentNatural' value='4'/>
<enum name='kCTTextAlignmentRight' value='1'/>
<enum name='kCTUnderlinePatternDash' value='512'/>
<enum name='kCTUnderlinePatternDashDot' value='768'/>
<enum name='kCTUnderlinePatternDashDotDot' value='1024'/>
<enum name='kCTUnderlinePatternDot' value='256'/>
<enum name='kCTUnderlinePatternSolid' value='0'/>
<enum name='kCTUnderlineStyleDouble' value='9'/>
<enum name='kCTUnderlineStyleNone' value='0'/>
<enum name='kCTUnderlineStyleSingle' value='1'/>
<enum name='kCTUnderlineStyleThick' value='2'/>
<enum name='kCTVersionNumber10_5' value='131072'/>
<enum name='kCTVersionNumber10_5_2' value='131073'/>
<enum name='kCTVersionNumber10_5_3' value='131074'/>
<enum name='kCTVersionNumber10_5_5' value='131075'/>
<enum name='kCTVersionNumber10_6' value='196608'/>
<enum name='kCTVersionNumber10_7' value='262144'/>
<enum name='kCTVersionNumber10_8' value='327680'/>
<enum name='kCTVersionNumber10_9' value='393216'/>
<enum name='kCTWritingDirectionEmbedding' value='0'/>
<enum name='kCTWritingDirectionLeftToRight' value='0'/>
<enum name='kCTWritingDirectionNatural' value='-1'/>
<enum name='kCTWritingDirectionOverride' value='2'/>
<enum name='kCTWritingDirectionRightToLeft' value='1'/>
<enum name='kCanonicalCompositionOffSelector' value='1'/>
<enum name='kCanonicalCompositionOnSelector' value='0'/>
<enum name='kCaseSensitiveLayoutOffSelector' value='1'/>
<enum name='kCaseSensitiveLayoutOnSelector' value='0'/>
<enum name='kCaseSensitiveLayoutType' value='33'/>
<enum name='kCaseSensitiveSpacingOffSelector' value='3'/>
<enum name='kCaseSensitiveSpacingOnSelector' value='2'/>
<enum name='kCharacterAlternativesType' value='17'/>
<enum name='kCharacterShapeType' value='20'/>
<enum name='kCircleAnnotationSelector' value='3'/>
<enum name='kCommonLigaturesOffSelector' value='3'/>
<enum name='kCommonLigaturesOnSelector' value='2'/>
<enum name='kCompatibilityCompositionOffSelector' value='3'/>
<enum name='kCompatibilityCompositionOnSelector' value='2'/>
<enum name='kContextualAlternatesOffSelector' value='1'/>
<enum name='kContextualAlternatesOnSelector' value='0'/>
<enum name='kContextualAlternatesType' value='36'/>
<enum name='kContextualLigaturesOffSelector' value='19'/>
<enum name='kContextualLigaturesOnSelector' value='18'/>
<enum name='kContextualSwashAlternatesOffSelector' value='5'/>
<enum name='kContextualSwashAlternatesOnSelector' value='4'/>
<enum name='kCursiveConnectionType' value='2'/>
<enum name='kCursiveSelector' value='2'/>
<enum name='kDecomposeDiacriticsSelector' value='2'/>
<enum name='kDecorativeBordersSelector' value='4'/>
<enum name='kDefaultCJKRomanSelector' value='2'/>
<enum name='kDefaultLowerCaseSelector' value='0'/>
<enum name='kDefaultUpperCaseSelector' value='0'/>
<enum name='kDesignComplexityType' value='18'/>
<enum name='kDesignLevel1Selector' value='0'/>
<enum name='kDesignLevel2Selector' value='1'/>
<enum name='kDesignLevel3Selector' value='2'/>
<enum name='kDesignLevel4Selector' value='3'/>
<enum name='kDesignLevel5Selector' value='4'/>
<enum name='kDiacriticsType' value='9'/>
<enum name='kDiagonalFractionsSelector' value='2'/>
<enum name='kDiamondAnnotationSelector' value='8'/>
<enum name='kDingbatsSelector' value='1'/>
<enum name='kDiphthongLigaturesOffSelector' value='11'/>
<enum name='kDiphthongLigaturesOnSelector' value='10'/>
<enum name='kDisplayTextSelector' value='1'/>
<enum name='kEngravedTextSelector' value='2'/>
<enum name='kExpertCharactersSelector' value='10'/>
<enum name='kExponentsOffSelector' value='9'/>
<enum name='kExponentsOnSelector' value='8'/>
<enum name='kFleuronsSelector' value='3'/>
<enum name='kFontAlbanianLanguage' value='36'/>
<enum name='kFontAmharicLanguage' value='85'/>
<enum name='kFontAmharicScript' value='28'/>
<enum name='kFontArabicLanguage' value='12'/>
<enum name='kFontArabicScript' value='4'/>
<enum name='kFontArmenianLanguage' value='51'/>
<enum name='kFontArmenianScript' value='24'/>
<enum name='kFontAssameseLanguage' value='68'/>
<enum name='kFontAymaraLanguage' value='134'/>
<enum name='kFontAzerbaijanArLanguage' value='50'/>
<enum name='kFontAzerbaijaniLanguage' value='49'/>
<enum name='kFontBasqueLanguage' value='129'/>
<enum name='kFontBengaliLanguage' value='67'/>
<enum name='kFontBengaliScript' value='13'/>
<enum name='kFontBulgarianLanguage' value='44'/>
<enum name='kFontBurmeseLanguage' value='77'/>
<enum name='kFontBurmeseScript' value='19'/>
<enum name='kFontByelorussianLanguage' value='46'/>
<enum name='kFontCatalanLanguage' value='130'/>
<enum name='kFontChewaLanguage' value='92'/>
<enum name='kFontChineseScript' value='2'/>
<enum name='kFontCopyrightName' value='0'/>
<enum name='kFontCroatianLanguage' value='18'/>
<enum name='kFontCustom16BitScript' value='2'/>
<enum name='kFontCustom816BitScript' value='1'/>
<enum name='kFontCustom8BitScript' value='0'/>
<enum name='kFontCustomPlatform' value='4'/>
<enum name='kFontCyrillicScript' value='7'/>
<enum name='kFontCzechLanguage' value='38'/>
<enum name='kFontDanishLanguage' value='7'/>
<enum name='kFontDescriptionName' value='10'/>
<enum name='kFontDesignerName' value='9'/>
<enum name='kFontDesignerURLName' value='12'/>
<enum name='kFontDevanagariScript' value='9'/>
<enum name='kFontDutchLanguage' value='4'/>
<enum name='kFontDzongkhaLanguage' value='137'/>
<enum name='kFontEastEuropeanRomanScript' value='29'/>
<enum name='kFontEnglishLanguage' value='0'/>
<enum name='kFontEsperantoLanguage' value='94'/>
<enum name='kFontEstonianLanguage' value='27'/>
<enum name='kFontEthiopicScript' value='28'/>
<enum name='kFontExtendedArabicScript' value='31'/>
<enum name='kFontFaeroeseLanguage' value='30'/>
<enum name='kFontFamilyName' value='1'/>
<enum name='kFontFarsiLanguage' value='31'/>
<enum name='kFontFinnishLanguage' value='13'/>
<enum name='kFontFlemishLanguage' value='34'/>
<enum name='kFontFrenchLanguage' value='1'/>
<enum name='kFontFullName' value='4'/>
<enum name='kFontGallaLanguage' value='87'/>
<enum name='kFontGeezScript' value='28'/>
<enum name='kFontGeorgianLanguage' value='52'/>
<enum name='kFontGeorgianScript' value='23'/>
<enum name='kFontGermanLanguage' value='2'/>
<enum name='kFontGreekLanguage' value='14'/>
<enum name='kFontGreekScript' value='6'/>
<enum name='kFontGuaraniLanguage' value='133'/>
<enum name='kFontGujaratiLanguage' value='69'/>
<enum name='kFontGujaratiScript' value='11'/>
<enum name='kFontGurmukhiScript' value='10'/>
<enum name='kFontHebrewLanguage' value='10'/>
<enum name='kFontHebrewScript' value='5'/>
<enum name='kFontHindiLanguage' value='21'/>
<enum name='kFontHungarianLanguage' value='26'/>
<enum name='kFontISO10646_1993Semantics' value='2'/>
<enum name='kFontIcelandicLanguage' value='15'/>
<enum name='kFontIndonesianLanguage' value='81'/>
<enum name='kFontIrishLanguage' value='35'/>
<enum name='kFontItalianLanguage' value='3'/>
<enum name='kFontJapaneseLanguage' value='11'/>
<enum name='kFontJapaneseScript' value='1'/>
<enum name='kFontJavaneseRomLanguage' value='138'/>
<enum name='kFontKannadaLanguage' value='73'/>
<enum name='kFontKannadaScript' value='16'/>
<enum name='kFontKashmiriLanguage' value='61'/>
<enum name='kFontKazakhLanguage' value='48'/>
<enum name='kFontKhmerLanguage' value='78'/>
<enum name='kFontKhmerScript' value='20'/>
<enum name='kFontKirghizLanguage' value='54'/>
<enum name='kFontKoreanLanguage' value='23'/>
<enum name='kFontKoreanScript' value='3'/>
<enum name='kFontKurdishLanguage' value='60'/>
<enum name='kFontLaoLanguage' value='79'/>
<enum name='kFontLaotianScript' value='22'/>
<enum name='kFontLappishLanguage' value='29'/>
<enum name='kFontLastReservedName' value='255'/>
<enum name='kFontLatinLanguage' value='131'/>
<enum name='kFontLatvianLanguage' value='28'/>
<enum name='kFontLettishLanguage' value='28'/>
<enum name='kFontLicenseDescriptionName' value='13'/>
<enum name='kFontLicenseInfoURLName' value='14'/>
<enum name='kFontLithuanianLanguage' value='24'/>
<enum name='kFontMacCompatibleFullName' value='18'/>
<enum name='kFontMacedonianLanguage' value='43'/>
<enum name='kFontMacintoshPlatform' value='1'/>
<enum name='kFontMalagasyLanguage' value='93'/>
<enum name='kFontMalayArabicLanguage' value='84'/>
<enum name='kFontMalayRomanLanguage' value='83'/>
<enum name='kFontMalayalamLanguage' value='72'/>
<enum name='kFontMalayalamScript' value='17'/>
<enum name='kFontMalteseLanguage' value='16'/>
<enum name='kFontManufacturerName' value='8'/>
<enum name='kFontMarathiLanguage' value='66'/>
<enum name='kFontMicrosoftPlatform' value='3'/>
<enum name='kFontMicrosoftStandardScript' value='1'/>
<enum name='kFontMicrosoftSymbolScript' value='0'/>
<enum name='kFontMicrosoftUCS4Script' value='10'/>
<enum name='kFontMoldavianLanguage' value='53'/>
<enum name='kFontMongolianCyrLanguage' value='58'/>
<enum name='kFontMongolianLanguage' value='57'/>
<enum name='kFontMongolianScript' value='27'/>
<enum name='kFontNepaliLanguage' value='64'/>
<enum name='kFontNoLanguageCode' value='4294967295'/>
<enum name='kFontNoNameCode' value='4294967295'/>
<enum name='kFontNoPlatformCode' value='4294967295'/>
<enum name='kFontNoScriptCode' value='4294967295'/>
<enum name='kFontNorwegianLanguage' value='9'/>
<enum name='kFontOriyaLanguage' value='71'/>
<enum name='kFontOriyaScript' value='12'/>
<enum name='kFontOromoLanguage' value='87'/>
<enum name='kFontPashtoLanguage' value='59'/>
<enum name='kFontPersianLanguage' value='31'/>
<enum name='kFontPolishLanguage' value='25'/>
<enum name='kFontPortugueseLanguage' value='8'/>
<enum name='kFontPostScriptCIDName' value='20'/>
<enum name='kFontPostscriptName' value='6'/>
<enum name='kFontPreferredFamilyName' value='16'/>
<enum name='kFontPreferredSubfamilyName' value='17'/>
<enum name='kFontPunjabiLanguage' value='70'/>
<enum name='kFontQuechuaLanguage' value='132'/>
<enum name='kFontRSymbolScript' value='8'/>
<enum name='kFontReservedPlatform' value='2'/>
<enum name='kFontRomanScript' value='0'/>
<enum name='kFontRomanianLanguage' value='37'/>
<enum name='kFontRuandaLanguage' value='90'/>
<enum name='kFontRundiLanguage' value='91'/>
<enum name='kFontRussian' value='7'/>
<enum name='kFontRussianLanguage' value='32'/>
<enum name='kFontSaamiskLanguage' value='29'/>
<enum name='kFontSampleTextName' value='19'/>
<enum name='kFontSanskritLanguage' value='65'/>
<enum name='kFontSerbianLanguage' value='42'/>
<enum name='kFontSimpChineseLanguage' value='33'/>
<enum name='kFontSimpleChineseScript' value='25'/>
<enum name='kFontSindhiLanguage' value='62'/>
<enum name='kFontSindhiScript' value='31'/>
<enum name='kFontSinhaleseLanguage' value='76'/>
<enum name='kFontSinhaleseScript' value='18'/>
<enum name='kFontSlavicScript' value='29'/>
<enum name='kFontSlovakLanguage' value='39'/>
<enum name='kFontSlovenianLanguage' value='40'/>
<enum name='kFontSomaliLanguage' value='88'/>
<enum name='kFontSpanishLanguage' value='6'/>
<enum name='kFontStyleName' value='2'/>
<enum name='kFontSundaneseRomLanguage' value='139'/>
<enum name='kFontSwahiliLanguage' value='89'/>
<enum name='kFontSwedishLanguage' value='5'/>
<enum name='kFontTagalogLanguage' value='82'/>
<enum name='kFontTajikiLanguage' value='55'/>
<enum name='kFontTamilLanguage' value='74'/>
<enum name='kFontTamilScript' value='14'/>
<enum name='kFontTatarLanguage' value='135'/>
<enum name='kFontTeluguLanguage' value='75'/>
<enum name='kFontTeluguScript' value='15'/>
<enum name='kFontThaiLanguage' value='22'/>
<enum name='kFontThaiScript' value='21'/>
<enum name='kFontTibetanLanguage' value='63'/>
<enum name='kFontTibetanScript' value='26'/>
<enum name='kFontTigrinyaLanguage' value='86'/>
<enum name='kFontTradChineseLanguage' value='19'/>
<enum name='kFontTrademarkName' value='7'/>
<enum name='kFontTraditionalChineseScript' value='2'/>
<enum name='kFontTurkishLanguage' value='17'/>
<enum name='kFontTurkmenLanguage' value='56'/>
<enum name='kFontUighurLanguage' value='136'/>
<enum name='kFontUkrainianLanguage' value='45'/>
<enum name='kFontUnicodeDefaultSemantics' value='0'/>
<enum name='kFontUnicodePlatform' value='0'/>
<enum name='kFontUnicodeV1_1Semantics' value='1'/>
<enum name='kFontUnicodeV2_0BMPOnlySemantics' value='3'/>
<enum name='kFontUnicodeV2_0FullCoverageSemantics' value='4'/>
<enum name='kFontUnicodeV4_0VariationSequenceSemantics' value='5'/>
<enum name='kFontUnicode_FullRepertoire' value='6'/>
<enum name='kFontUninterpretedScript' value='32'/>
<enum name='kFontUniqueName' value='3'/>
<enum name='kFontUrduLanguage' value='20'/>
<enum name='kFontUzbekLanguage' value='47'/>
<enum name='kFontVendorURLName' value='11'/>
<enum name='kFontVersionName' value='5'/>
<enum name='kFontVietnameseLanguage' value='80'/>
<enum name='kFontVietnameseScript' value='30'/>
<enum name='kFontWelshLanguage' value='128'/>
<enum name='kFontYiddishLanguage' value='41'/>
<enum name='kFormInterrobangOffSelector' value='7'/>
<enum name='kFormInterrobangOnSelector' value='6'/>
<enum name='kFractionsType' value='11'/>
<enum name='kFullWidthCJKRomanSelector' value='3'/>
<enum name='kFullWidthIdeographsSelector' value='0'/>
<enum name='kFullWidthKanaSelector' value='0'/>
<enum name='kHalfWidthCJKRomanSelector' value='0'/>
<enum name='kHalfWidthIdeographsSelector' value='2'/>
<enum name='kHalfWidthTextSelector' value='2'/>
<enum name='kHanjaToHangulAltOneSelector' value='7'/>
<enum name='kHanjaToHangulAltThreeSelector' value='9'/>
<enum name='kHanjaToHangulAltTwoSelector' value='8'/>
<enum name='kHanjaToHangulSelector' value='1'/>
<enum name='kHideDiacriticsSelector' value='1'/>
<enum name='kHiraganaToKatakanaSelector' value='2'/>
<enum name='kHistoricalLigaturesOffSelector' value='21'/>
<enum name='kHistoricalLigaturesOnSelector' value='20'/>
<enum name='kHojoCharactersSelector' value='12'/>
<enum name='kHyphenToEnDashOffSelector' value='3'/>
<enum name='kHyphenToEnDashOnSelector' value='2'/>
<enum name='kHyphenToMinusOffSelector' value='1'/>
<enum name='kHyphenToMinusOnSelector' value='0'/>
<enum name='kHyphensToEmDashOffSelector' value='1'/>
<enum name='kHyphensToEmDashOnSelector' value='0'/>
<enum name='kIdeographicAltFiveSelector' value='5'/>
<enum name='kIdeographicAltFourSelector' value='4'/>
<enum name='kIdeographicAltOneSelector' value='1'/>
<enum name='kIdeographicAltThreeSelector' value='3'/>
<enum name='kIdeographicAltTwoSelector' value='2'/>
<enum name='kIdeographicAlternativesType' value='30'/>
<enum name='kIdeographicSpacingType' value='26'/>
<enum name='kIlluminatedCapsSelector' value='3'/>
<enum name='kInequalityLigaturesOffSelector' value='7'/>
<enum name='kInequalityLigaturesOnSelector' value='6'/>
<enum name='kInferiorsSelector' value='2'/>
<enum name='kInitialCapsAndSmallCapsSelector' value='5'/>
<enum name='kInitialCapsSelector' value='4'/>
<enum name='kInternationalSymbolsSelector' value='5'/>
<enum name='kInvertedBoxAnnotationSelector' value='9'/>
<enum name='kInvertedCircleAnnotationSelector' value='4'/>
<enum name='kInvertedRoundedBoxAnnotationSelector' value='10'/>
<enum name='kItalicCJKRomanType' value='32'/>
<enum name='kJIS1978CharactersSelector' value='2'/>
<enum name='kJIS1983CharactersSelector' value='3'/>
<enum name='kJIS1990CharactersSelector' value='4'/>
<enum name='kJIS2004CharactersSelector' value='11'/>
<enum name='kJUSTCurrentVersion' value='65536'/>
<enum name='kJUSTKashidaPriority' value='0'/>
<enum name='kJUSTLetterPriority' value='2'/>
<enum name='kJUSTNullPriority' value='3'/>
<enum name='kJUSTOverrideLimits' value='16384'/>
<enum name='kJUSTOverridePriority' value='32768'/>
<enum name='kJUSTOverrideUnlimited' value='8192'/>
<enum name='kJUSTPriorityCount' value='4'/>
<enum name='kJUSTPriorityMask' value='3'/>
<enum name='kJUSTSpacePriority' value='1'/>
<enum name='kJUSTStandardFormat' value='0'/>
<enum name='kJUSTTag' value='1786082164'/>
<enum name='kJUSTUnlimited' value='4096'/>
<enum name='kJUSTnoGlyphcode' value='65535'/>
<enum name='kJUSTpcConditionalAddAction' value='2'/>
<enum name='kJUSTpcDecompositionAction' value='0'/>
<enum name='kJUSTpcDuctilityAction' value='4'/>
<enum name='kJUSTpcGlyphRepeatAddAction' value='5'/>
<enum name='kJUSTpcGlyphStretchAction' value='3'/>
<enum name='kJUSTpcUnconditionalAddAction' value='1'/>
<enum name='kKERNCrossStream' value='16384'/>
<enum name='kKERNCrossStreamResetNote' value='2'/>
<enum name='kKERNCurrentVersion' value='65536'/>
<enum name='kKERNFormatMask' value='255'/>
<enum name='kKERNIndexArray' value='3'/>
<enum name='kKERNLineEndKerning' value='2'/>
<enum name='kKERNLineStart' value='1'/>
<enum name='kKERNNoCrossKerning' value='4'/>
<enum name='kKERNNoStakeNote' value='1'/>
<enum name='kKERNNotApplied' value='1'/>
<enum name='kKERNNotesRequested' value='8'/>
<enum name='kKERNOrderedList' value='0'/>
<enum name='kKERNResetCrossStream' value='32768'/>
<enum name='kKERNSimpleArray' value='2'/>
<enum name='kKERNStateTable' value='1'/>
<enum name='kKERNTag' value='1801810542'/>
<enum name='kKERNUnusedBits' value='7936'/>
<enum name='kKERNVariation' value='8192'/>
<enum name='kKERNVertical' value='32768'/>
<enum name='kKERXActionOffsetMask' value='16777215'/>
<enum name='kKERXActionTypeAnchorPoints' value='1073741824'/>
<enum name='kKERXActionTypeControlPoints' value='0'/>
<enum name='kKERXActionTypeCoordinates' value='2147483648'/>
<enum name='kKERXActionTypeMask' value='3221225472'/>
<enum name='kKERXControlPoint' value='4'/>
<enum name='kKERXCrossStream' value='1073741824'/>
<enum name='kKERXCrossStreamResetNote' value='2'/>
<enum name='kKERXCurrentVersion' value='131072'/>
<enum name='kKERXFormatMask' value='255'/>
<enum name='kKERXIndexArray' value='3'/>
<enum name='kKERXLineEndKerning' value='2'/>
<enum name='kKERXLineStart' value='1'/>
<enum name='kKERXNoCrossKerning' value='4'/>
<enum name='kKERXNoStakeNote' value='1'/>
<enum name='kKERXNotApplied' value='1'/>
<enum name='kKERXNotesRequested' value='8'/>
<enum name='kKERXOrderedList' value='0'/>
<enum name='kKERXResetCrossStream' value='32768'/>
<enum name='kKERXSimpleArray' value='2'/>
<enum name='kKERXStateTable' value='1'/>
<enum name='kKERXTag' value='1801810552'/>
<enum name='kKERXUnusedBits' value='536870656'/>
<enum name='kKERXUnusedFlags' value='1056964608'/>
<enum name='kKERXVariation' value='536870912'/>
<enum name='kKERXVertical' value='-2147483648'/>
<enum name='kKanaSpacingType' value='25'/>
<enum name='kKanaToRomanizationSelector' value='4'/>
<enum name='kKatakanaToHiraganaSelector' value='3'/>
<enum name='kLCARCtlPointFormat' value='1'/>
<enum name='kLCARCurrentVersion' value='65536'/>
<enum name='kLCARLinearFormat' value='0'/>
<enum name='kLCARTag' value='1818452338'/>
<enum name='kLTAGCurrentVersion' value='1'/>
<enum name='kLanguageTagType' value='39'/>
<enum name='kLastFeatureType' value='-1'/>
<enum name='kLetterCaseType' value='3'/>
<enum name='kLigaturesType' value='1'/>
<enum name='kLineFinalSwashesOffSelector' value='7'/>
<enum name='kLineFinalSwashesOnSelector' value='6'/>
<enum name='kLineInitialSwashesOffSelector' value='5'/>
<enum name='kLineInitialSwashesOnSelector' value='4'/>
<enum name='kLinguisticRearrangementOffSelector' value='1'/>
<enum name='kLinguisticRearrangementOnSelector' value='0'/>
<enum name='kLinguisticRearrangementType' value='5'/>
<enum name='kLogosOffSelector' value='7'/>
<enum name='kLogosOnSelector' value='6'/>
<enum name='kLowerCaseNumbersSelector' value='0'/>
<enum name='kLowerCasePetiteCapsSelector' value='2'/>
<enum name='kLowerCaseSmallCapsSelector' value='1'/>
<enum name='kLowerCaseType' value='37'/>
<enum name='kMORTContextualType' value='1'/>
<enum name='kMORTCoverDescending' value='16384'/>
<enum name='kMORTCoverIgnoreVertical' value='8192'/>
<enum name='kMORTCoverTypeMask' value='15'/>
<enum name='kMORTCoverVertical' value='32768'/>
<enum name='kMORTCurrInsertBefore' value='2048'/>
<enum name='kMORTCurrInsertCountMask' value='992'/>
<enum name='kMORTCurrInsertCountShift' value='5'/>
<enum name='kMORTCurrInsertKashidaLike' value='8192'/>
<enum name='kMORTCurrJustTableCountMask' value='127'/>
<enum name='kMORTCurrJustTableCountShift' value='0'/>
<enum name='kMORTCurrentVersion' value='65536'/>
<enum name='kMORTDoInsertionsBefore' value='128'/>
<enum name='kMORTInsertionType' value='5'/>
<enum name='kMORTInsertionsCountMask' value='63'/>
<enum name='kMORTIsSplitVowelPiece' value='64'/>
<enum name='kMORTLigFormOffsetMask' value='1073741823'/>
<enum name='kMORTLigFormOffsetShift' value='2'/>
<enum name='kMORTLigLastAction' value='-2147483648'/>
<enum name='kMORTLigStoreLigature' value='1073741824'/>
<enum name='kMORTLigatureType' value='2'/>
<enum name='kMORTMarkInsertBefore' value='1024'/>
<enum name='kMORTMarkInsertCountMask' value='31'/>
<enum name='kMORTMarkInsertCountShift' value='0'/>
<enum name='kMORTMarkInsertKashidaLike' value='4096'/>
<enum name='kMORTMarkJustTableCountMask' value='16256'/>
<enum name='kMORTMarkJustTableCountShift' value='7'/>
<enum name='kMORTRearrangementType' value='0'/>
<enum name='kMORTSwashType' value='4'/>
<enum name='kMORTTag' value='1836020340'/>
<enum name='kMORTraCDx' value='6'/>
<enum name='kMORTraCDxA' value='8'/>
<enum name='kMORTraCDxAB' value='12'/>
<enum name='kMORTraCDxBA' value='13'/>
<enum name='kMORTraDCx' value='7'/>
<enum name='kMORTraDCxA' value='9'/>
<enum name='kMORTraDCxAB' value='14'/>
<enum name='kMORTraDCxBA' value='15'/>
<enum name='kMORTraDx' value='2'/>
<enum name='kMORTraDxA' value='3'/>
<enum name='kMORTraDxAB' value='10'/>
<enum name='kMORTraDxBA' value='11'/>
<enum name='kMORTraNoAction' value='0'/>
<enum name='kMORTraxA' value='1'/>
<enum name='kMORTraxAB' value='4'/>
<enum name='kMORTraxBA' value='5'/>
<enum name='kMORXCoverDescending' value='1073741824'/>
<enum name='kMORXCoverIgnoreVertical' value='536870912'/>
<enum name='kMORXCoverTypeMask' value='255'/>
<enum name='kMORXCoverVertical' value='-2147483648'/>
<enum name='kMORXCurrentVersion' value='131072'/>
<enum name='kMORXTag' value='1836020344'/>
<enum name='kMathSymbolsSelector' value='6'/>
<enum name='kMathematicalExtrasType' value='15'/>
<enum name='kMathematicalGreekOffSelector' value='11'/>
<enum name='kMathematicalGreekOnSelector' value='10'/>
<enum name='kMonospacedNumbersSelector' value='0'/>
<enum name='kMonospacedTextSelector' value='1'/>
<enum name='kNLCCharactersSelector' value='13'/>
<enum name='kNoAlternatesSelector' value='0'/>
<enum name='kNoAnnotationSelector' value='0'/>
<enum name='kNoCJKItalicRomanSelector' value='0'/>
<enum name='kNoCJKSymbolAlternativesSelector' value='0'/>
<enum name='kNoFractionsSelector' value='0'/>
<enum name='kNoIdeographicAlternativesSelector' value='0'/>
<enum name='kNoOrnamentsSelector' value='0'/>
<enum name='kNoRubyKanaSelector' value='0'/>
<enum name='kNoStyleOptionsSelector' value='0'/>
<enum name='kNoStylisticAlternatesSelector' value='0'/>
<enum name='kNoTransliterationSelector' value='0'/>
<enum name='kNonFinalSwashesOffSelector' value='9'/>
<enum name='kNonFinalSwashesOnSelector' value='8'/>
<enum name='kNormalPositionSelector' value='0'/>
<enum name='kNumberCaseType' value='21'/>
<enum name='kNumberSpacingType' value='6'/>
<enum name='kOPBDControlPointFormat' value='1'/>
<enum name='kOPBDCurrentVersion' value='65536'/>
<enum name='kOPBDDistanceFormat' value='0'/>
<enum name='kOPBDTag' value='1869636196'/>
<enum name='kOrdinalsSelector' value='3'/>
<enum name='kOrnamentSetsType' value='16'/>
<enum name='kOverlappingCharactersType' value='13'/>
<enum name='kPROPALDirectionClass' value='2'/>
<enum name='kPROPANDirectionClass' value='6'/>
<enum name='kPROPBNDirectionClass' value='19'/>
<enum name='kPROPCSDirectionClass' value='7'/>
<enum name='kPROPCanHangLTMask' value='16384'/>
<enum name='kPROPCanHangRBMask' value='8192'/>
<enum name='kPROPCurrentVersion' value='196608'/>
<enum name='kPROPDirectionMask' value='31'/>
<enum name='kPROPENDirectionClass' value='3'/>
<enum name='kPROPESDirectionClass' value='4'/>
<enum name='kPROPETDirectionClass' value='5'/>
<enum name='kPROPIsFloaterMask' value='32768'/>
<enum name='kPROPLDirectionClass' value='0'/>
<enum name='kPROPLREDirectionClass' value='13'/>
<enum name='kPROPLRODirectionClass' value='14'/>
<enum name='kPROPNSMDirectionClass' value='18'/>
<enum name='kPROPNumDirectionClasses' value='20'/>
<enum name='kPROPONDirectionClass' value='11'/>
<enum name='kPROPPDFDirectionClass' value='17'/>
<enum name='kPROPPSDirectionClass' value='8'/>
<enum name='kPROPPairOffsetMask' value='3840'/>
<enum name='kPROPPairOffsetShift' value='8'/>
<enum name='kPROPPairOffsetSign' value='7'/>
<enum name='kPROPRDirectionClass' value='1'/>
<enum name='kPROPRLEDirectionClass' value='15'/>
<enum name='kPROPRLODirectionClass' value='16'/>
<enum name='kPROPRightConnectMask' value='128'/>
<enum name='kPROPSDirectionClass' value='9'/>
<enum name='kPROPSENDirectionClass' value='12'/>
<enum name='kPROPTag' value='1886547824'/>
<enum name='kPROPUseRLPairMask' value='4096'/>
<enum name='kPROPWSDirectionClass' value='10'/>
<enum name='kPROPZeroReserved' value='96'/>
<enum name='kParenthesisAnnotationSelector' value='5'/>
<enum name='kPartiallyConnectedSelector' value='1'/>
<enum name='kPeriodAnnotationSelector' value='6'/>
<enum name='kPeriodsToEllipsisOffSelector' value='11'/>
<enum name='kPeriodsToEllipsisOnSelector' value='10'/>
<enum name='kPiCharactersSelector' value='2'/>
<enum name='kPreventOverlapOffSelector' value='1'/>
<enum name='kPreventOverlapOnSelector' value='0'/>
<enum name='kProportionalCJKRomanSelector' value='1'/>
<enum name='kProportionalIdeographsSelector' value='1'/>
<enum name='kProportionalKanaSelector' value='1'/>
<enum name='kProportionalNumbersSelector' value='1'/>
<enum name='kProportionalTextSelector' value='0'/>
<enum name='kQuarterWidthNumbersSelector' value='3'/>
<enum name='kQuarterWidthTextSelector' value='4'/>
<enum name='kRareLigaturesOffSelector' value='5'/>
<enum name='kRareLigaturesOnSelector' value='4'/>
<enum name='kRebusPicturesOffSelector' value='9'/>
<enum name='kRebusPicturesOnSelector' value='8'/>
<enum name='kRequiredLigaturesOffSelector' value='1'/>
<enum name='kRequiredLigaturesOnSelector' value='0'/>
<enum name='kRomanNumeralAnnotationSelector' value='7'/>
<enum name='kRomanizationToHiraganaSelector' value='5'/>
<enum name='kRomanizationToKatakanaSelector' value='6'/>
<enum name='kRoundedBoxAnnotationSelector' value='2'/>
<enum name='kRubyKanaOffSelector' value='3'/>
<enum name='kRubyKanaOnSelector' value='2'/>
<enum name='kRubyKanaSelector' value='1'/>
<enum name='kRubyKanaType' value='28'/>
<enum name='kSFNTLookupSegmentArray' value='4'/>
<enum name='kSFNTLookupSegmentSingle' value='2'/>
<enum name='kSFNTLookupSimpleArray' value='0'/>
<enum name='kSFNTLookupSingleTable' value='6'/>
<enum name='kSFNTLookupTrimmedArray' value='8'/>
<enum name='kSTClassDeletedGlyph' value='2'/>
<enum name='kSTClassEndOfLine' value='3'/>
<enum name='kSTClassEndOfText' value='0'/>
<enum name='kSTClassOutOfBounds' value='1'/>
<enum name='kSTLigActionMask' value='16383'/>
<enum name='kSTMarkEnd' value='8192'/>
<enum name='kSTNoAdvance' value='16384'/>
<enum name='kSTRearrVerbMask' value='15'/>
<enum name='kSTSetMark' value='32768'/>
<enum name='kSTXHasLigAction' value='8192'/>
<enum name='kScientificInferiorsSelector' value='4'/>
<enum name='kShowDiacriticsSelector' value='0'/>
<enum name='kSimplifiedCharactersSelector' value='1'/>
<enum name='kSlashToDivideOffSelector' value='5'/>
<enum name='kSlashToDivideOnSelector' value='4'/>
<enum name='kSlashedZeroOffSelector' value='5'/>
<enum name='kSlashedZeroOnSelector' value='4'/>
<enum name='kSmallCapsSelector' value='3'/>
<enum name='kSmartQuotesOffSelector' value='9'/>
<enum name='kSmartQuotesOnSelector' value='8'/>
<enum name='kSmartSwashType' value='8'/>
<enum name='kSquaredLigaturesOffSelector' value='13'/>
<enum name='kSquaredLigaturesOnSelector' value='12'/>
<enum name='kStyleOptionsType' value='19'/>
<enum name='kStylisticAltEightOffSelector' value='17'/>
<enum name='kStylisticAltEightOnSelector' value='16'/>
<enum name='kStylisticAltEighteenOffSelector' value='37'/>
<enum name='kStylisticAltEighteenOnSelector' value='36'/>
<enum name='kStylisticAltElevenOffSelector' value='23'/>
<enum name='kStylisticAltElevenOnSelector' value='22'/>
<enum name='kStylisticAltFifteenOffSelector' value='31'/>
<enum name='kStylisticAltFifteenOnSelector' value='30'/>
<enum name='kStylisticAltFiveOffSelector' value='11'/>
<enum name='kStylisticAltFiveOnSelector' value='10'/>
<enum name='kStylisticAltFourOffSelector' value='9'/>
<enum name='kStylisticAltFourOnSelector' value='8'/>
<enum name='kStylisticAltFourteenOffSelector' value='29'/>
<enum name='kStylisticAltFourteenOnSelector' value='28'/>
<enum name='kStylisticAltNineOffSelector' value='19'/>
<enum name='kStylisticAltNineOnSelector' value='18'/>
<enum name='kStylisticAltNineteenOffSelector' value='39'/>
<enum name='kStylisticAltNineteenOnSelector' value='38'/>
<enum name='kStylisticAltOneOffSelector' value='3'/>
<enum name='kStylisticAltOneOnSelector' value='2'/>
<enum name='kStylisticAltSevenOffSelector' value='15'/>
<enum name='kStylisticAltSevenOnSelector' value='14'/>
<enum name='kStylisticAltSeventeenOffSelector' value='35'/>
<enum name='kStylisticAltSeventeenOnSelector' value='34'/>
<enum name='kStylisticAltSixOffSelector' value='13'/>
<enum name='kStylisticAltSixOnSelector' value='12'/>
<enum name='kStylisticAltSixteenOffSelector' value='33'/>
<enum name='kStylisticAltSixteenOnSelector' value='32'/>
<enum name='kStylisticAltTenOffSelector' value='21'/>
<enum name='kStylisticAltTenOnSelector' value='20'/>
<enum name='kStylisticAltThirteenOffSelector' value='27'/>
<enum name='kStylisticAltThirteenOnSelector' value='26'/>
<enum name='kStylisticAltThreeOffSelector' value='7'/>
<enum name='kStylisticAltThreeOnSelector' value='6'/>
<enum name='kStylisticAltTwelveOffSelector' value='25'/>
<enum name='kStylisticAltTwelveOnSelector' value='24'/>
<enum name='kStylisticAltTwentyOffSelector' value='41'/>
<enum name='kStylisticAltTwentyOnSelector' value='40'/>
<enum name='kStylisticAltTwoOffSelector' value='5'/>
<enum name='kStylisticAltTwoOnSelector' value='4'/>
<enum name='kStylisticAlternativesType' value='35'/>
<enum name='kSubstituteVerticalFormsOffSelector' value='1'/>
<enum name='kSubstituteVerticalFormsOnSelector' value='0'/>
<enum name='kSuperiorsSelector' value='1'/>
<enum name='kSwashAlternatesOffSelector' value='3'/>
<enum name='kSwashAlternatesOnSelector' value='2'/>
<enum name='kSymbolLigaturesOffSelector' value='17'/>
<enum name='kSymbolLigaturesOnSelector' value='16'/>
<enum name='kTRAKCurrentVersion' value='65536'/>
<enum name='kTRAKTag' value='1953653099'/>
<enum name='kTRAKUniformFormat' value='0'/>
<enum name='kTallCapsSelector' value='5'/>
<enum name='kTextSpacingType' value='22'/>
<enum name='kThirdWidthNumbersSelector' value='2'/>
<enum name='kThirdWidthTextSelector' value='3'/>
<enum name='kTitlingCapsSelector' value='4'/>
<enum name='kTraditionalAltFiveSelector' value='9'/>
<enum name='kTraditionalAltFourSelector' value='8'/>
<enum name='kTraditionalAltOneSelector' value='5'/>
<enum name='kTraditionalAltThreeSelector' value='7'/>
<enum name='kTraditionalAltTwoSelector' value='6'/>
<enum name='kTraditionalCharactersSelector' value='0'/>
<enum name='kTraditionalNamesCharactersSelector' value='14'/>
<enum name='kTranscodingCompositionOffSelector' value='5'/>
<enum name='kTranscodingCompositionOnSelector' value='4'/>
<enum name='kTransliterationType' value='23'/>
<enum name='kTypographicExtrasType' value='14'/>
<enum name='kUnconnectedSelector' value='0'/>
<enum name='kUnicodeDecompositionType' value='27'/>
<enum name='kUpperAndLowerCaseSelector' value='0'/>
<enum name='kUpperCaseNumbersSelector' value='1'/>
<enum name='kUpperCasePetiteCapsSelector' value='2'/>
<enum name='kUpperCaseSmallCapsSelector' value='1'/>
<enum name='kUpperCaseType' value='38'/>
<enum name='kVerticalFractionsSelector' value='1'/>
<enum name='kVerticalPositionType' value='10'/>
<enum name='kVerticalSubstitutionType' value='4'/>
<enum name='kWordFinalSwashesOffSelector' value='3'/>
<enum name='kWordFinalSwashesOnSelector' value='2'/>
<enum name='kWordInitialSwashesOffSelector' value='1'/>
<enum name='kWordInitialSwashesOnSelector' value='0'/>
<enum name='nameFontTableTag' value='1851878757'/>
<enum name='nonGlyphID' value='65535'/>
<enum name='os2FontTableTag' value='1330851634'/>
<enum name='sizeof_sfntCMapEncoding' value='8'/>
<enum name='sizeof_sfntCMapExtendedSubHeader' value='12'/>
<enum name='sizeof_sfntCMapHeader' value='4'/>
<enum name='sizeof_sfntCMapSubHeader' value='6'/>
<enum name='sizeof_sfntDescriptorHeader' value='8'/>
<enum name='sizeof_sfntDirectory' value='12'/>
<enum name='sizeof_sfntInstance' value='4'/>
<enum name='sizeof_sfntNameHeader' value='6'/>
<enum name='sizeof_sfntNameRecord' value='12'/>
<enum name='sizeof_sfntVariationAxis' value='20'/>
<enum name='sizeof_sfntVariationHeader' value='16'/>
<enum name='variationFontTableTag' value='1719034226'/>
<function name='CTFontCollectionCopyExclusionDescriptors'>
<arg declared_type='CTFontCollectionRef' name='collection' type='^{__CTFontCollection=}'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTFontCollectionCopyFontAttribute'>
<arg declared_type='CTFontCollectionRef' name='collection' type='^{__CTFontCollection=}'/>
<arg declared_type='CFStringRef' name='attributeName' type='^{__CFString=}'/>
<arg declared_type='CTFontCollectionCopyOptions' name='options' type='I'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTFontCollectionCopyFontAttributes'>
<arg declared_type='CTFontCollectionRef' name='collection' type='^{__CTFontCollection=}'/>
<arg declared_type='CFSetRef' name='attributeNames' type='^{__CFSet=}'/>
<arg declared_type='CTFontCollectionCopyOptions' name='options' type='I'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTFontCollectionCopyQueryDescriptors'>
<arg declared_type='CTFontCollectionRef' name='collection' type='^{__CTFontCollection=}'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTFontCollectionCreateCopyWithFontDescriptors'>
<arg declared_type='CTFontCollectionRef' name='original' type='^{__CTFontCollection=}'/>
<arg declared_type='CFArrayRef' name='queryDescriptors' type='^{__CFArray=}'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CTFontCollectionRef' type='^{__CTFontCollection=}'/>
</function>
<function name='CTFontCollectionCreateFromAvailableFonts'>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CTFontCollectionRef' type='^{__CTFontCollection=}'/>
</function>
<function name='CTFontCollectionCreateMatchingFontDescriptors'>
<arg declared_type='CTFontCollectionRef' name='collection' type='^{__CTFontCollection=}'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTFontCollectionCreateMatchingFontDescriptorsForFamily'>
<arg declared_type='CTFontCollectionRef' name='collection' type='^{__CTFontCollection=}'/>
<arg declared_type='CFStringRef' name='familyName' type='^{__CFString=}'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTFontCollectionCreateMatchingFontDescriptorsSortedWithCallback'>
<arg declared_type='CTFontCollectionRef' name='collection' type='^{__CTFontCollection=}'/>
<arg declared_type='CTFontCollectionSortDescriptorsCallback' function_pointer='true' name='sortCallback' type='^?'>
<arg declared_type='CTFontDescriptorRef' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CTFontDescriptorRef' type='^{__CTFontDescriptor=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='CFComparisonResult' type='l' type64='q'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTFontCollectionCreateMatchingFontDescriptorsWithOptions'>
<arg declared_type='CTFontCollectionRef' name='collection' type='^{__CTFontCollection=}'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTFontCollectionCreateMutableCopy'>
<arg declared_type='CTFontCollectionRef' name='original' type='^{__CTFontCollection=}'/>
<retval already_retained='true' declared_type='CTMutableFontCollectionRef' type='^{__CTFontCollection=}'/>
</function>
<function name='CTFontCollectionCreateWithFontDescriptors'>
<arg declared_type='CFArrayRef' name='queryDescriptors' type='^{__CFArray=}'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CTFontCollectionRef' type='^{__CTFontCollection=}'/>
</function>
<function name='CTFontCollectionGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTFontCollectionSetExclusionDescriptors'>
<arg declared_type='CTMutableFontCollectionRef' name='collection' type='^{__CTFontCollection=}'/>
<arg declared_type='CFArrayRef' name='descriptors' type='^{__CFArray=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTFontCollectionSetQueryDescriptors'>
<arg declared_type='CTMutableFontCollectionRef' name='collection' type='^{__CTFontCollection=}'/>
<arg declared_type='CFArrayRef' name='descriptors' type='^{__CFArray=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTFontCopyAttribute'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg declared_type='CFStringRef' name='attribute' type='^{__CFString=}'/>
<retval already_retained='true' declared_type='CFTypeRef' type='@'/>
</function>
<function name='CTFontCopyAvailableTables'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg declared_type='CTFontTableOptions' name='options' type='I'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTFontCopyCharacterSet'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval already_retained='true' declared_type='CFCharacterSetRef' type='^{__CFCharacterSet=}'/>
</function>
<function name='CTFontCopyDefaultCascadeListForLanguages'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg declared_type='CFArrayRef' name='languagePrefList' type='^{__CFArray=}'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTFontCopyDisplayName'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval already_retained='true' declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CTFontCopyFamilyName'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval already_retained='true' declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CTFontCopyFeatureSettings'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTFontCopyFeatures'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTFontCopyFontDescriptor'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval already_retained='true' declared_type='CTFontDescriptorRef' type='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontCopyFullName'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval already_retained='true' declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CTFontCopyGraphicsFont'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg declared_type='CTFontDescriptorRef*' name='attributes' type='^^{__CTFontDescriptor}'/>
<retval already_retained='true' declared_type='CGFontRef' type='^{CGFont=}'/>
</function>
<function name='CTFontCopyLocalizedName'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg declared_type='CFStringRef' name='nameKey' type='^{__CFString=}'/>
<arg declared_type='CFStringRef*' name='actualLanguage' type='^^{__CFString}'/>
<retval already_retained='true' declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CTFontCopyName'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg declared_type='CFStringRef' name='nameKey' type='^{__CFString=}'/>
<retval already_retained='true' declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CTFontCopyPostScriptName'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval already_retained='true' declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CTFontCopySupportedLanguages'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTFontCopyTable'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg declared_type='CTFontTableTag' name='table' type='L' type64='I'/>
<arg declared_type='CTFontTableOptions' name='options' type='I'/>
<retval already_retained='true' declared_type='CFDataRef' type='^{__CFData=}'/>
</function>
<function name='CTFontCopyTraits'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval already_retained='true' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
</function>
<function name='CTFontCopyVariation'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval already_retained='true' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
</function>
<function name='CTFontCopyVariationAxes'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTFontCreateCopyWithAttributes'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<arg const='true' declared_type='CGAffineTransform*' name='matrix' type='^{CGAffineTransform=ffffff}' type64='^{CGAffineTransform=dddddd}'/>
<arg declared_type='CTFontDescriptorRef' name='attributes' type='^{__CTFontDescriptor=}'/>
<retval already_retained='true' declared_type='CTFontRef' type='^{__CTFont=}'/>
</function>
<function name='CTFontCreateCopyWithFamily'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<arg const='true' declared_type='CGAffineTransform*' name='matrix' type='^{CGAffineTransform=ffffff}' type64='^{CGAffineTransform=dddddd}'/>
<arg declared_type='CFStringRef' name='family' type='^{__CFString=}'/>
<retval already_retained='true' declared_type='CTFontRef' type='^{__CTFont=}'/>
</function>
<function name='CTFontCreateCopyWithSymbolicTraits'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<arg const='true' declared_type='CGAffineTransform*' name='matrix' type='^{CGAffineTransform=ffffff}' type64='^{CGAffineTransform=dddddd}'/>
<arg declared_type='CTFontSymbolicTraits' name='symTraitValue' type='I'/>
<arg declared_type='CTFontSymbolicTraits' name='symTraitMask' type='I'/>
<retval already_retained='true' declared_type='CTFontRef' type='^{__CTFont=}'/>
</function>
<function name='CTFontCreateForString'>
<arg declared_type='CTFontRef' name='currentFont' type='^{__CTFont=}'/>
<arg declared_type='CFStringRef' name='string' type='^{__CFString=}'/>
<arg declared_type='CFRange' name='range' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<retval already_retained='true' declared_type='CTFontRef' type='^{__CTFont=}'/>
</function>
<function name='CTFontCreatePathForGlyph'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg declared_type='CGGlyph' name='glyph' type='S'/>
<arg const='true' declared_type='CGAffineTransform*' name='transform' type='^{CGAffineTransform=ffffff}' type64='^{CGAffineTransform=dddddd}'/>
<retval already_retained='true' declared_type='CGPathRef' type='^{CGPath=}'/>
</function>
<function name='CTFontCreateUIFontForLanguage'>
<arg declared_type='CTFontUIFontType' name='uiType' type='I'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<arg declared_type='CFStringRef' name='language' type='^{__CFString=}'/>
<retval already_retained='true' declared_type='CTFontRef' type='^{__CTFont=}'/>
</function>
<function name='CTFontCreateWithFontDescriptor'>
<arg declared_type='CTFontDescriptorRef' name='descriptor' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<arg const='true' declared_type='CGAffineTransform*' name='matrix' type='^{CGAffineTransform=ffffff}' type64='^{CGAffineTransform=dddddd}'/>
<retval already_retained='true' declared_type='CTFontRef' type='^{__CTFont=}'/>
</function>
<function name='CTFontCreateWithFontDescriptorAndOptions'>
<arg declared_type='CTFontDescriptorRef' name='descriptor' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<arg const='true' declared_type='CGAffineTransform*' name='matrix' type='^{CGAffineTransform=ffffff}' type64='^{CGAffineTransform=dddddd}'/>
<arg declared_type='CTFontOptions' name='options' type='L' type64='Q'/>
<retval already_retained='true' declared_type='CTFontRef' type='^{__CTFont=}'/>
</function>
<function name='CTFontCreateWithGraphicsFont'>
<arg declared_type='CGFontRef' name='graphicsFont' type='^{CGFont=}'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<arg const='true' declared_type='CGAffineTransform*' name='matrix' type='^{CGAffineTransform=ffffff}' type64='^{CGAffineTransform=dddddd}'/>
<arg declared_type='CTFontDescriptorRef' name='attributes' type='^{__CTFontDescriptor=}'/>
<retval already_retained='true' declared_type='CTFontRef' type='^{__CTFont=}'/>
</function>
<function name='CTFontCreateWithName'>
<arg declared_type='CFStringRef' name='name' type='^{__CFString=}'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<arg const='true' declared_type='CGAffineTransform*' name='matrix' type='^{CGAffineTransform=ffffff}' type64='^{CGAffineTransform=dddddd}'/>
<retval already_retained='true' declared_type='CTFontRef' type='^{__CTFont=}'/>
</function>
<function name='CTFontCreateWithNameAndOptions'>
<arg declared_type='CFStringRef' name='name' type='^{__CFString=}'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<arg const='true' declared_type='CGAffineTransform*' name='matrix' type='^{CGAffineTransform=ffffff}' type64='^{CGAffineTransform=dddddd}'/>
<arg declared_type='CTFontOptions' name='options' type='L' type64='Q'/>
<retval already_retained='true' declared_type='CTFontRef' type='^{__CTFont=}'/>
</function>
<function name='CTFontCreateWithPlatformFont'>
<arg declared_type='ATSFontRef' name='platformFont' type='L' type64='I'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<arg const='true' declared_type='CGAffineTransform*' name='matrix' type='^{CGAffineTransform=ffffff}' type64='^{CGAffineTransform=dddddd}'/>
<arg declared_type='CTFontDescriptorRef' name='attributes' type='^{__CTFontDescriptor=}'/>
<retval already_retained='true' declared_type='CTFontRef' type='^{__CTFont=}'/>
</function>
<function name='CTFontCreateWithQuickdrawInstance'>
<arg declared_type='ConstStr255Param' name='name' type='*'/>
<arg declared_type='int16_t' name='identifier' type='s'/>
<arg declared_type='uint8_t' name='style' type='C'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<retval already_retained='true' declared_type='CTFontRef' type='^{__CTFont=}'/>
</function>
<function name='CTFontDescriptorCopyAttribute'>
<arg declared_type='CTFontDescriptorRef' name='descriptor' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CFStringRef' name='attribute' type='^{__CFString=}'/>
<retval already_retained='true' declared_type='CFTypeRef' type='@'/>
</function>
<function name='CTFontDescriptorCopyAttributes'>
<arg declared_type='CTFontDescriptorRef' name='descriptor' type='^{__CTFontDescriptor=}'/>
<retval already_retained='true' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
</function>
<function name='CTFontDescriptorCopyLocalizedAttribute'>
<arg declared_type='CTFontDescriptorRef' name='descriptor' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CFStringRef' name='attribute' type='^{__CFString=}'/>
<arg declared_type='CFStringRef*' name='language' type='^^{__CFString}'/>
<retval already_retained='true' declared_type='CFTypeRef' type='@'/>
</function>
<function name='CTFontDescriptorCreateCopyWithAttributes'>
<arg declared_type='CTFontDescriptorRef' name='original' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CFDictionaryRef' name='attributes' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CTFontDescriptorRef' type='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateCopyWithFamily'>
<arg declared_type='CTFontDescriptorRef' name='original' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CFStringRef' name='family' type='^{__CFString=}'/>
<retval already_retained='true' declared_type='CTFontDescriptorRef' type='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateCopyWithFeature'>
<arg declared_type='CTFontDescriptorRef' name='original' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CFNumberRef' name='featureTypeIdentifier' type='^{__CFNumber=}'/>
<arg declared_type='CFNumberRef' name='featureSelectorIdentifier' type='^{__CFNumber=}'/>
<retval already_retained='true' declared_type='CTFontDescriptorRef' type='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateCopyWithSymbolicTraits'>
<arg declared_type='CTFontDescriptorRef' name='original' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CTFontSymbolicTraits' name='symTraitValue' type='I'/>
<arg declared_type='CTFontSymbolicTraits' name='symTraitMask' type='I'/>
<retval already_retained='true' declared_type='CTFontDescriptorRef' type='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateCopyWithVariation'>
<arg declared_type='CTFontDescriptorRef' name='original' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CFNumberRef' name='variationIdentifier' type='^{__CFNumber=}'/>
<arg declared_type='CGFloat' name='variationValue' type='f' type64='d'/>
<retval already_retained='true' declared_type='CTFontDescriptorRef' type='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateMatchingFontDescriptor'>
<arg declared_type='CTFontDescriptorRef' name='descriptor' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CFSetRef' name='mandatoryAttributes' type='^{__CFSet=}'/>
<retval already_retained='true' declared_type='CTFontDescriptorRef' type='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateMatchingFontDescriptors'>
<arg declared_type='CTFontDescriptorRef' name='descriptor' type='^{__CTFontDescriptor=}'/>
<arg declared_type='CFSetRef' name='mandatoryAttributes' type='^{__CFSet=}'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTFontDescriptorCreateWithAttributes'>
<arg declared_type='CFDictionaryRef' name='attributes' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CTFontDescriptorRef' type='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorCreateWithNameAndSize'>
<arg declared_type='CFStringRef' name='name' type='^{__CFString=}'/>
<arg declared_type='CGFloat' name='size' type='f' type64='d'/>
<retval already_retained='true' declared_type='CTFontDescriptorRef' type='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontDescriptorGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTFontDescriptorMatchFontDescriptorsWithProgressHandler'>
<arg declared_type='CFArrayRef' name='descriptors' type='^{__CFArray=}'/>
<arg declared_type='CFSetRef' name='mandatoryAttributes' type='^{__CFSet=}'/>
<arg declared_type='CTFontDescriptorProgressHandler' function_pointer='true' name='progressBlock' type='@?'>
<arg declared_type='CTFontDescriptorMatchingState' type='I'/>
<arg declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<retval declared_type='_Bool' type='B'/>
</arg>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CTFontDrawGlyphs'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg const='true' declared_type='CGGlyph*' name='glyphs' type='^S'/>
<arg const='true' declared_type='CGPoint*' name='positions' type='^{CGPoint=ff}' type64='^{CGPoint=dd}'/>
<arg declared_type='size_t' name='count' type='L' type64='Q'/>
<arg declared_type='CGContextRef' name='context' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTFontGetAdvancesForGlyphs'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg declared_type='CTFontOrientation' name='orientation' type='I'/>
<arg const='true' declared_type='CGGlyph*' name='glyphs' type='^S'/>
<arg declared_type='CGSize*' name='advances' type='^{CGSize=ff}' type64='^{CGSize=dd}'/>
<arg declared_type='CFIndex' name='count' type='l' type64='q'/>
<retval declared_type='double' type='d'/>
</function>
<function name='CTFontGetAscent'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTFontGetBoundingBox'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='CTFontGetBoundingRectsForGlyphs'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg declared_type='CTFontOrientation' name='orientation' type='I'/>
<arg const='true' declared_type='CGGlyph*' name='glyphs' type='^S'/>
<arg declared_type='CGRect*' name='boundingRects' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type='CFIndex' name='count' type='l' type64='q'/>
<retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='CTFontGetCapHeight'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTFontGetDescent'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTFontGetGlyphCount'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<function name='CTFontGetGlyphWithName'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg declared_type='CFStringRef' name='glyphName' type='^{__CFString=}'/>
<retval declared_type='CGGlyph' type='S'/>
</function>
<function name='CTFontGetGlyphsForCharacters'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg const='true' declared_type='UniChar*' name='characters' type='^S'/>
<arg declared_type='CGGlyph*' name='glyphs' type='^S'/>
<arg declared_type='CFIndex' name='count' type='l' type64='q'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CTFontGetLeading'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTFontGetLigatureCaretPositions'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg declared_type='CGGlyph' name='glyph' type='S'/>
<arg declared_type='CGFloat*' name='positions' type='^f' type64='^d'/>
<arg declared_type='CFIndex' name='maxPositions' type='l' type64='q'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<function name='CTFontGetMatrix'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}' type64='{CGAffineTransform=dddddd}'/>
</function>
<function name='CTFontGetOpticalBoundsForGlyphs'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg const='true' declared_type='CGGlyph*' name='glyphs' type='^S'/>
<arg declared_type='CGRect*' name='boundingRects' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type='CFIndex' name='count' type='l' type64='q'/>
<arg declared_type='CFOptionFlags' name='options' type='L' type64='Q'/>
<retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='CTFontGetPlatformFont'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg declared_type='CTFontDescriptorRef*' name='attributes' type='^^{__CTFontDescriptor}'/>
<retval declared_type='ATSFontRef' type='L' type64='I'/>
</function>
<function name='CTFontGetSize'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTFontGetSlantAngle'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTFontGetStringEncoding'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval declared_type='CFStringEncoding' type='L' type64='I'/>
</function>
<function name='CTFontGetSymbolicTraits'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval declared_type='CTFontSymbolicTraits' type='I'/>
</function>
<function name='CTFontGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTFontGetUnderlinePosition'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTFontGetUnderlineThickness'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTFontGetUnitsPerEm'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval declared_type='unsigned int' type='I'/>
</function>
<function name='CTFontGetVerticalTranslationsForGlyphs'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg const='true' declared_type='CGGlyph*' name='glyphs' type='^S'/>
<arg declared_type='CGSize*' name='translations' type='^{CGSize=ff}' type64='^{CGSize=dd}'/>
<arg declared_type='CFIndex' name='count' type='l' type64='q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTFontGetXHeight'>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTFontManagerCompareFontFamilyNames'>
<arg const='true' declared_type='void*' name='family1' type='^v'/>
<arg const='true' declared_type='void*' name='family2' type='^v'/>
<arg declared_type='void*' name='context' type='^v'/>
<retval declared_type='CFComparisonResult' type='l' type64='q'/>
</function>
<function name='CTFontManagerCopyAvailableFontFamilyNames'>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTFontManagerCopyAvailableFontURLs'>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTFontManagerCopyAvailablePostScriptNames'>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTFontManagerCreateFontDescriptorFromData'>
<arg declared_type='CFDataRef' name='data' type='^{__CFData=}'/>
<retval already_retained='true' declared_type='CTFontDescriptorRef' type='^{__CTFontDescriptor=}'/>
</function>
<function name='CTFontManagerCreateFontDescriptorsFromURL'>
<arg declared_type='CFURLRef' name='fileURL' type='^{__CFURL=}'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTFontManagerCreateFontRequestRunLoopSource'>
<arg declared_type='CFIndex' name='sourceOrder' type='l' type64='q'/>
<arg declared_type='CFArrayRef (^)(CFDictionaryRef, pid_t)' function_pointer='true' name='createMatchesCallback' type='@?'>
<arg declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<arg declared_type='pid_t' type='i'/>
<retval declared_type='CFArrayRef' type='^{__CFArray=}'/>
</arg>
<retval already_retained='true' declared_type='CFRunLoopSourceRef' type='^{__CFRunLoopSource=}'/>
</function>
<function name='CTFontManagerEnableFontDescriptors'>
<arg declared_type='CFArrayRef' name='descriptors' type='^{__CFArray=}'/>
<arg declared_type='_Bool' name='enable' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTFontManagerGetAutoActivationSetting'>
<arg declared_type='CFStringRef' name='bundleIdentifier' type='^{__CFString=}'/>
<retval declared_type='CTFontManagerAutoActivationSetting' type='I'/>
</function>
<function name='CTFontManagerGetScopeForURL'>
<arg declared_type='CFURLRef' name='fontURL' type='^{__CFURL=}'/>
<retval declared_type='CTFontManagerScope' type='I'/>
</function>
<function name='CTFontManagerIsSupportedFont'>
<arg declared_type='CFURLRef' name='fontURL' type='^{__CFURL=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CTFontManagerRegisterFontsForURL'>
<arg declared_type='CFURLRef' name='fontURL' type='^{__CFURL=}'/>
<arg declared_type='CTFontManagerScope' name='scope' type='I'/>
<arg declared_type='CFErrorRef*' name='error' type='^^{__CFError}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CTFontManagerRegisterFontsForURLs'>
<arg declared_type='CFArrayRef' name='fontURLs' type='^{__CFArray=}'/>
<arg declared_type='CTFontManagerScope' name='scope' type='I'/>
<arg declared_type='CFArrayRef*' name='errors' type='^^{__CFArray}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CTFontManagerRegisterGraphicsFont'>
<arg declared_type='CGFontRef' name='font' type='^{CGFont=}'/>
<arg declared_type='CFErrorRef*' name='error' type='^^{__CFError}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CTFontManagerSetAutoActivationSetting'>
<arg declared_type='CFStringRef' name='bundleIdentifier' type='^{__CFString=}'/>
<arg declared_type='CTFontManagerAutoActivationSetting' name='setting' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTFontManagerUnregisterFontsForURL'>
<arg declared_type='CFURLRef' name='fontURL' type='^{__CFURL=}'/>
<arg declared_type='CTFontManagerScope' name='scope' type='I'/>
<arg declared_type='CFErrorRef*' name='error' type='^^{__CFError}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CTFontManagerUnregisterFontsForURLs'>
<arg declared_type='CFArrayRef' name='fontURLs' type='^{__CFArray=}'/>
<arg declared_type='CTFontManagerScope' name='scope' type='I'/>
<arg declared_type='CFArrayRef*' name='errors' type='^^{__CFArray}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CTFontManagerUnregisterGraphicsFont'>
<arg declared_type='CGFontRef' name='font' type='^{CGFont=}'/>
<arg declared_type='CFErrorRef*' name='error' type='^^{__CFError}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CTFrameDraw'>
<arg declared_type='CTFrameRef' name='frame' type='^{__CTFrame=}'/>
<arg declared_type='CGContextRef' name='context' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTFrameGetFrameAttributes'>
<arg declared_type='CTFrameRef' name='frame' type='^{__CTFrame=}'/>
<retval declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
</function>
<function name='CTFrameGetLineOrigins'>
<arg declared_type='CTFrameRef' name='frame' type='^{__CTFrame=}'/>
<arg declared_type='CFRange' name='range' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<arg declared_type='CGPoint*' name='origins' type='^{CGPoint=ff}' type64='^{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTFrameGetLines'>
<arg declared_type='CTFrameRef' name='frame' type='^{__CTFrame=}'/>
<retval declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTFrameGetPath'>
<arg declared_type='CTFrameRef' name='frame' type='^{__CTFrame=}'/>
<retval declared_type='CGPathRef' type='^{CGPath=}'/>
</function>
<function name='CTFrameGetStringRange'>
<arg declared_type='CTFrameRef' name='frame' type='^{__CTFrame=}'/>
<retval declared_type='CFRange' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
</function>
<function name='CTFrameGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTFrameGetVisibleStringRange'>
<arg declared_type='CTFrameRef' name='frame' type='^{__CTFrame=}'/>
<retval declared_type='CFRange' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
</function>
<function name='CTFramesetterCreateFrame'>
<arg declared_type='CTFramesetterRef' name='framesetter' type='^{__CTFramesetter=}'/>
<arg declared_type='CFRange' name='stringRange' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<arg declared_type='CGPathRef' name='path' type='^{CGPath=}'/>
<arg declared_type='CFDictionaryRef' name='frameAttributes' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CTFrameRef' type='^{__CTFrame=}'/>
</function>
<function name='CTFramesetterCreateWithAttributedString'>
<arg declared_type='CFAttributedStringRef' name='string' type='^{__CFAttributedString=}'/>
<retval already_retained='true' declared_type='CTFramesetterRef' type='^{__CTFramesetter=}'/>
</function>
<function name='CTFramesetterGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTFramesetterGetTypesetter'>
<arg declared_type='CTFramesetterRef' name='framesetter' type='^{__CTFramesetter=}'/>
<retval declared_type='CTTypesetterRef' type='^{__CTTypesetter=}'/>
</function>
<function name='CTFramesetterSuggestFrameSizeWithConstraints'>
<arg declared_type='CTFramesetterRef' name='framesetter' type='^{__CTFramesetter=}'/>
<arg declared_type='CFRange' name='stringRange' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<arg declared_type='CFDictionaryRef' name='frameAttributes' type='^{__CFDictionary=}'/>
<arg declared_type='CGSize' name='constraints' type='{CGSize=ff}' type64='{CGSize=dd}'/>
<arg declared_type='CFRange*' name='fitRange' type='^{_CFRange=ii}' type64='^{_CFRange=qq}'/>
<retval declared_type='CGSize' type='{CGSize=ff}' type64='{CGSize=dd}'/>
</function>
<function name='CTGetCoreTextVersion'>
<retval declared_type='uint32_t' type='I'/>
</function>
<function name='CTGlyphInfoCreateWithCharacterIdentifier'>
<arg declared_type='CGFontIndex' name='cid' type='S'/>
<arg declared_type='CTCharacterCollection' name='collection' type='S'/>
<arg declared_type='CFStringRef' name='baseString' type='^{__CFString=}'/>
<retval already_retained='true' declared_type='CTGlyphInfoRef' type='^{__CTGlyphInfo=}'/>
</function>
<function name='CTGlyphInfoCreateWithGlyph'>
<arg declared_type='CGGlyph' name='glyph' type='S'/>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg declared_type='CFStringRef' name='baseString' type='^{__CFString=}'/>
<retval already_retained='true' declared_type='CTGlyphInfoRef' type='^{__CTGlyphInfo=}'/>
</function>
<function name='CTGlyphInfoCreateWithGlyphName'>
<arg declared_type='CFStringRef' name='glyphName' type='^{__CFString=}'/>
<arg declared_type='CTFontRef' name='font' type='^{__CTFont=}'/>
<arg declared_type='CFStringRef' name='baseString' type='^{__CFString=}'/>
<retval already_retained='true' declared_type='CTGlyphInfoRef' type='^{__CTGlyphInfo=}'/>
</function>
<function name='CTGlyphInfoGetCharacterCollection'>
<arg declared_type='CTGlyphInfoRef' name='glyphInfo' type='^{__CTGlyphInfo=}'/>
<retval declared_type='CTCharacterCollection' type='S'/>
</function>
<function name='CTGlyphInfoGetCharacterIdentifier'>
<arg declared_type='CTGlyphInfoRef' name='glyphInfo' type='^{__CTGlyphInfo=}'/>
<retval declared_type='CGFontIndex' type='S'/>
</function>
<function name='CTGlyphInfoGetGlyphName'>
<arg declared_type='CTGlyphInfoRef' name='glyphInfo' type='^{__CTGlyphInfo=}'/>
<retval declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CTGlyphInfoGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTLineCreateJustifiedLine'>
<arg declared_type='CTLineRef' name='line' type='^{__CTLine=}'/>
<arg declared_type='CGFloat' name='justificationFactor' type='f' type64='d'/>
<arg declared_type='double' name='justificationWidth' type='d'/>
<retval already_retained='true' declared_type='CTLineRef' type='^{__CTLine=}'/>
</function>
<function name='CTLineCreateTruncatedLine'>
<arg declared_type='CTLineRef' name='line' type='^{__CTLine=}'/>
<arg declared_type='double' name='width' type='d'/>
<arg declared_type='CTLineTruncationType' name='truncationType' type='I'/>
<arg declared_type='CTLineRef' name='truncationToken' type='^{__CTLine=}'/>
<retval already_retained='true' declared_type='CTLineRef' type='^{__CTLine=}'/>
</function>
<function name='CTLineCreateWithAttributedString'>
<arg declared_type='CFAttributedStringRef' name='string' type='^{__CFAttributedString=}'/>
<retval already_retained='true' declared_type='CTLineRef' type='^{__CTLine=}'/>
</function>
<function name='CTLineDraw'>
<arg declared_type='CTLineRef' name='line' type='^{__CTLine=}'/>
<arg declared_type='CGContextRef' name='context' type='^{CGContext=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTLineGetBoundsWithOptions'>
<arg declared_type='CTLineRef' name='line' type='^{__CTLine=}'/>
<arg declared_type='CTLineBoundsOptions' name='options' type='L' type64='Q'/>
<retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='CTLineGetGlyphCount'>
<arg declared_type='CTLineRef' name='line' type='^{__CTLine=}'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<function name='CTLineGetGlyphRuns'>
<arg declared_type='CTLineRef' name='line' type='^{__CTLine=}'/>
<retval declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CTLineGetImageBounds'>
<arg declared_type='CTLineRef' name='line' type='^{__CTLine=}'/>
<arg declared_type='CGContextRef' name='context' type='^{CGContext=}'/>
<retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='CTLineGetOffsetForStringIndex'>
<arg declared_type='CTLineRef' name='line' type='^{__CTLine=}'/>
<arg declared_type='CFIndex' name='charIndex' type='l' type64='q'/>
<arg declared_type='CGFloat*' name='secondaryOffset' type='^f' type64='^d'/>
<retval declared_type='CGFloat' type='f' type64='d'/>
</function>
<function name='CTLineGetPenOffsetForFlush'>
<arg declared_type='CTLineRef' name='line' type='^{__CTLine=}'/>
<arg declared_type='CGFloat' name='flushFactor' type='f' type64='d'/>
<arg declared_type='double' name='flushWidth' type='d'/>
<retval declared_type='double' type='d'/>
</function>
<function name='CTLineGetStringIndexForPosition'>
<arg declared_type='CTLineRef' name='line' type='^{__CTLine=}'/>
<arg declared_type='CGPoint' name='position' type='{CGPoint=ff}' type64='{CGPoint=dd}'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<function name='CTLineGetStringRange'>
<arg declared_type='CTLineRef' name='line' type='^{__CTLine=}'/>
<retval declared_type='CFRange' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
</function>
<function name='CTLineGetTrailingWhitespaceWidth'>
<arg declared_type='CTLineRef' name='line' type='^{__CTLine=}'/>
<retval declared_type='double' type='d'/>
</function>
<function name='CTLineGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTLineGetTypographicBounds'>
<arg declared_type='CTLineRef' name='line' type='^{__CTLine=}'/>
<arg declared_type='CGFloat*' name='ascent' type='^f' type64='^d'/>
<arg declared_type='CGFloat*' name='descent' type='^f' type64='^d'/>
<arg declared_type='CGFloat*' name='leading' type='^f' type64='^d'/>
<retval declared_type='double' type='d'/>
</function>
<function name='CTParagraphStyleCreate'>
<arg const='true' declared_type='CTParagraphStyleSetting*' name='settings' type='^{CTParagraphStyleSetting=II^v}' type64='^{CTParagraphStyleSetting=IQ^v}'/>
<arg declared_type='size_t' name='settingCount' type='L' type64='Q'/>
<retval already_retained='true' declared_type='CTParagraphStyleRef' type='^{__CTParagraphStyle=}'/>
</function>
<function name='CTParagraphStyleCreateCopy'>
<arg declared_type='CTParagraphStyleRef' name='paragraphStyle' type='^{__CTParagraphStyle=}'/>
<retval already_retained='true' declared_type='CTParagraphStyleRef' type='^{__CTParagraphStyle=}'/>
</function>
<function name='CTParagraphStyleGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTParagraphStyleGetValueForSpecifier'>
<arg declared_type='CTParagraphStyleRef' name='paragraphStyle' type='^{__CTParagraphStyle=}'/>
<arg declared_type='CTParagraphStyleSpecifier' name='spec' type='I'/>
<arg declared_type='size_t' name='valueBufferSize' type='L' type64='Q'/>
<arg declared_type='void*' name='valueBuffer' type='^v'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CTRunDelegateCreate'>
<arg const='true' declared_type='CTRunDelegateCallbacks*' name='callbacks' type='^{_CTRunDelegateCallbacks=i^?^?^?^?}' type64='^{_CTRunDelegateCallbacks=q^?^?^?^?}'/>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval already_retained='true' declared_type='CTRunDelegateRef' type='^{__CTRunDelegate=}'/>
</function>
<function name='CTRunDelegateGetRefCon'>
<arg declared_type='CTRunDelegateRef' name='runDelegate' type='^{__CTRunDelegate=}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='CTRunDelegateGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTRunDraw'>
<arg declared_type='CTRunRef' name='run' type='^{__CTRun=}'/>
<arg declared_type='CGContextRef' name='context' type='^{CGContext=}'/>
<arg declared_type='CFRange' name='range' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTRunGetAdvances'>
<arg declared_type='CTRunRef' name='run' type='^{__CTRun=}'/>
<arg declared_type='CFRange' name='range' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<arg declared_type='CGSize*' name='buffer' type='^{CGSize=ff}' type64='^{CGSize=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTRunGetAdvancesPtr'>
<arg declared_type='CTRunRef' name='run' type='^{__CTRun=}'/>
<retval const='true' declared_type='CGSize*' type='^{CGSize=ff}' type64='^{CGSize=dd}'/>
</function>
<function name='CTRunGetAttributes'>
<arg declared_type='CTRunRef' name='run' type='^{__CTRun=}'/>
<retval declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
</function>
<function name='CTRunGetGlyphCount'>
<arg declared_type='CTRunRef' name='run' type='^{__CTRun=}'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<function name='CTRunGetGlyphs'>
<arg declared_type='CTRunRef' name='run' type='^{__CTRun=}'/>
<arg declared_type='CFRange' name='range' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<arg declared_type='CGGlyph*' name='buffer' type='^S'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTRunGetGlyphsPtr'>
<arg declared_type='CTRunRef' name='run' type='^{__CTRun=}'/>
<retval const='true' declared_type='CGGlyph*' type='^S'/>
</function>
<function name='CTRunGetImageBounds'>
<arg declared_type='CTRunRef' name='run' type='^{__CTRun=}'/>
<arg declared_type='CGContextRef' name='context' type='^{CGContext=}'/>
<arg declared_type='CFRange' name='range' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<retval declared_type='CGRect' type='{CGRect={CGPoint=ff}{CGSize=ff}}' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='CTRunGetPositions'>
<arg declared_type='CTRunRef' name='run' type='^{__CTRun=}'/>
<arg declared_type='CFRange' name='range' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<arg declared_type='CGPoint*' name='buffer' type='^{CGPoint=ff}' type64='^{CGPoint=dd}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTRunGetPositionsPtr'>
<arg declared_type='CTRunRef' name='run' type='^{__CTRun=}'/>
<retval const='true' declared_type='CGPoint*' type='^{CGPoint=ff}' type64='^{CGPoint=dd}'/>
</function>
<function name='CTRunGetStatus'>
<arg declared_type='CTRunRef' name='run' type='^{__CTRun=}'/>
<retval declared_type='CTRunStatus' type='I'/>
</function>
<function name='CTRunGetStringIndices'>
<arg declared_type='CTRunRef' name='run' type='^{__CTRun=}'/>
<arg declared_type='CFRange' name='range' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<arg declared_type='CFIndex*' name='buffer' type='^i' type64='^q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CTRunGetStringIndicesPtr'>
<arg declared_type='CTRunRef' name='run' type='^{__CTRun=}'/>
<retval const='true' declared_type='CFIndex*' type='^i' type64='^q'/>
</function>
<function name='CTRunGetStringRange'>
<arg declared_type='CTRunRef' name='run' type='^{__CTRun=}'/>
<retval declared_type='CFRange' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
</function>
<function name='CTRunGetTextMatrix'>
<arg declared_type='CTRunRef' name='run' type='^{__CTRun=}'/>
<retval declared_type='CGAffineTransform' type='{CGAffineTransform=ffffff}' type64='{CGAffineTransform=dddddd}'/>
</function>
<function name='CTRunGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTRunGetTypographicBounds'>
<arg declared_type='CTRunRef' name='run' type='^{__CTRun=}'/>
<arg declared_type='CFRange' name='range' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<arg declared_type='CGFloat*' name='ascent' type='^f' type64='^d'/>
<arg declared_type='CGFloat*' name='descent' type='^f' type64='^d'/>
<arg declared_type='CGFloat*' name='leading' type='^f' type64='^d'/>
<retval declared_type='double' type='d'/>
</function>
<function name='CTTextTabCreate'>
<arg declared_type='CTTextAlignment' name='alignment' type='C'/>
<arg declared_type='double' name='location' type='d'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CTTextTabRef' type='^{__CTTextTab=}'/>
</function>
<function name='CTTextTabGetAlignment'>
<arg declared_type='CTTextTabRef' name='tab' type='^{__CTTextTab=}'/>
<retval declared_type='CTTextAlignment' type='C'/>
</function>
<function name='CTTextTabGetLocation'>
<arg declared_type='CTTextTabRef' name='tab' type='^{__CTTextTab=}'/>
<retval declared_type='double' type='d'/>
</function>
<function name='CTTextTabGetOptions'>
<arg declared_type='CTTextTabRef' name='tab' type='^{__CTTextTab=}'/>
<retval declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
</function>
<function name='CTTextTabGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTTypesetterCreateLine'>
<arg declared_type='CTTypesetterRef' name='typesetter' type='^{__CTTypesetter=}'/>
<arg declared_type='CFRange' name='stringRange' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<retval already_retained='true' declared_type='CTLineRef' type='^{__CTLine=}'/>
</function>
<function name='CTTypesetterCreateLineWithOffset'>
<arg declared_type='CTTypesetterRef' name='typesetter' type='^{__CTTypesetter=}'/>
<arg declared_type='CFRange' name='stringRange' type='{_CFRange=ii}' type64='{_CFRange=qq}'/>
<arg declared_type='double' name='offset' type='d'/>
<retval already_retained='true' declared_type='CTLineRef' type='^{__CTLine=}'/>
</function>
<function name='CTTypesetterCreateWithAttributedString'>
<arg declared_type='CFAttributedStringRef' name='string' type='^{__CFAttributedString=}'/>
<retval already_retained='true' declared_type='CTTypesetterRef' type='^{__CTTypesetter=}'/>
</function>
<function name='CTTypesetterCreateWithAttributedStringAndOptions'>
<arg declared_type='CFAttributedStringRef' name='string' type='^{__CFAttributedString=}'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CTTypesetterRef' type='^{__CTTypesetter=}'/>
</function>
<function name='CTTypesetterGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CTTypesetterSuggestClusterBreak'>
<arg declared_type='CTTypesetterRef' name='typesetter' type='^{__CTTypesetter=}'/>
<arg declared_type='CFIndex' name='startIndex' type='l' type64='q'/>
<arg declared_type='double' name='width' type='d'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<function name='CTTypesetterSuggestClusterBreakWithOffset'>
<arg declared_type='CTTypesetterRef' name='typesetter' type='^{__CTTypesetter=}'/>
<arg declared_type='CFIndex' name='startIndex' type='l' type64='q'/>
<arg declared_type='double' name='width' type='d'/>
<arg declared_type='double' name='offset' type='d'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<function name='CTTypesetterSuggestLineBreak'>
<arg declared_type='CTTypesetterRef' name='typesetter' type='^{__CTTypesetter=}'/>
<arg declared_type='CFIndex' name='startIndex' type='l' type64='q'/>
<arg declared_type='double' name='width' type='d'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<function name='CTTypesetterSuggestLineBreakWithOffset'>
<arg declared_type='CTTypesetterRef' name='typesetter' type='^{__CTTypesetter=}'/>
<arg declared_type='CFIndex' name='startIndex' type='l' type64='q'/>
<arg declared_type='double' name='width' type='d'/>
<arg declared_type='double' name='offset' type='d'/>
<retval declared_type='CFIndex' type='l' type64='q'/>
</function>
<depends_on path='/System/Library/Frameworks/Security.framework'/>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/CoreGraphics.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/QD.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework'/>
<depends_on path='/System/Library/Frameworks/SystemConfiguration.framework'/>
<depends_on path='/System/Library/Frameworks/IOKit.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework'/>
<depends_on path='/System/Library/Frameworks/Accelerate.framework'/>
<depends_on path='/System/Library/Frameworks/ImageIO.framework'/>
<depends_on path='/System/Library/Frameworks/Foundation.framework'/>
<struct name='AppParameters' type='{AppParameters=&quot;theMsgEvent&quot;{?=&quot;what&quot;S&quot;message&quot;I&quot;when&quot;I&quot;where&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;modifiers&quot;S}&quot;eventRefCon&quot;I&quot;messageLength&quot;I}'>
<field declared_type='struct (anonymous struct at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/Processes.h:57:3)' name='theMsgEvent' type='{_structanonymousstructatApplicationsXcodeappContentsDeveloperPlatformsMacOSXplatformDeveloperSDKsMacOSX109sdkSystemLibraryFrameworksApplicationServicesframeworkFrameworksHIServicesframeworkHeadersProcessesh573=&quot;what&quot;S&quot;message&quot;I&quot;when&quot;I&quot;where&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;modifiers&quot;S}'/>
<field declared_type='UInt32' name='eventRefCon' type='L' type64='I'/>
<field declared_type='UInt32' name='messageLength' type='L' type64='I'/>
</struct>
<struct name='ICAppSpec' type='{ICAppSpec=&quot;fCreator&quot;I&quot;name&quot;[64C]}'>
<field declared_type='OSType' name='fCreator' type='L' type64='I'/>
<field declared_type='Str63' name='name' type='[64C]'/>
</struct>
<struct name='ICAppSpecList' type='{ICAppSpecList=&quot;numberOfItems&quot;s&quot;appSpecs&quot;[1{ICAppSpec=&quot;fCreator&quot;I&quot;name&quot;[64C]}]}'>
<field declared_type='SInt16' name='numberOfItems' type='s'/>
<field declared_type='ICAppSpec*' name='appSpecs' type='[1{ICAppSpec=&quot;fCreator&quot;I&quot;name&quot;[64C]}]'/>
</struct>
<struct name='ICCharTable' type='{ICCharTable=&quot;netToMac&quot;[256C]&quot;macToNet&quot;[256C]}'>
<field declared_type='unsigned char*' name='netToMac' type='[256C]'/>
<field declared_type='unsigned char*' name='macToNet' type='[256C]'/>
</struct>
<struct name='ICFileSpec' type='{ICFileSpec=&quot;volName&quot;[32C]&quot;volCreationDate&quot;i&quot;fss&quot;{FSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}&quot;alias&quot;{AliasRecord=&quot;hidden&quot;[6C]}}' type64='{ICFileSpec=&quot;volName&quot;[32C]&quot;volCreationDate&quot;i&quot;fss&quot;{FSSpec=&quot;hidden&quot;[70C]}&quot;alias&quot;{AliasRecord=&quot;hidden&quot;[6C]}}'>
<field declared_type='Str31' name='volName' type='[32C]'/>
<field declared_type='SInt32' name='volCreationDate' type='l' type64='i'/>
<field declared_type='FSSpec' name='fss' type='{FSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}' type64='{FSSpec=&quot;hidden&quot;[70C]}'/>
<field declared_type='AliasRecord' name='alias' type='{AliasRecord=&quot;hidden&quot;[6C]}'/>
</struct>
<struct name='ICFontRecord' type='{ICFontRecord=&quot;size&quot;s&quot;face&quot;C&quot;pad&quot;c&quot;font&quot;[256C]}'>
<field declared_type='SInt16' name='size' type='s'/>
<field declared_type='Style' name='face' type='C'/>
<field declared_type='char' name='pad' type='c'/>
<field declared_type='Str255' name='font' type='[256C]'/>
</struct>
<struct name='ICMapEntry' type='{ICMapEntry=&quot;totalLength&quot;s&quot;fixedLength&quot;s&quot;version&quot;s&quot;fileType&quot;I&quot;fileCreator&quot;I&quot;postCreator&quot;I&quot;flags&quot;i&quot;extension&quot;[256C]&quot;creatorAppName&quot;[256C]&quot;postAppName&quot;[256C]&quot;MIMEType&quot;[256C]&quot;entryName&quot;[256C]}'>
<field declared_type='SInt16' name='totalLength' type='s'/>
<field declared_type='ICFixedLength' name='fixedLength' type='s'/>
<field declared_type='SInt16' name='version' type='s'/>
<field declared_type='OSType' name='fileType' type='L' type64='I'/>
<field declared_type='OSType' name='fileCreator' type='L' type64='I'/>
<field declared_type='OSType' name='postCreator' type='L' type64='I'/>
<field declared_type='ICMapEntryFlags' name='flags' type='l' type64='i'/>
<field declared_type='Str255' name='extension' type='[256C]'/>
<field declared_type='Str255' name='creatorAppName' type='[256C]'/>
<field declared_type='Str255' name='postAppName' type='[256C]'/>
<field declared_type='Str255' name='MIMEType' type='[256C]'/>
<field declared_type='Str255' name='entryName' type='[256C]'/>
</struct>
<struct name='ICServiceEntry' type='{ICServiceEntry=&quot;name&quot;[256C]&quot;port&quot;s&quot;flags&quot;s}'>
<field declared_type='Str255' name='name' type='[256C]'/>
<field declared_type='SInt16' name='port' type='s'/>
<field declared_type='ICServiceEntryFlags' name='flags' type='s'/>
</struct>
<struct name='ICServices' type='{ICServices=&quot;count&quot;s&quot;services&quot;[1{ICServiceEntry=&quot;name&quot;[256C]&quot;port&quot;s&quot;flags&quot;s}]}'>
<field declared_type='SInt16' name='count' type='s'/>
<field declared_type='ICServiceEntry*' name='services' type='[1{ICServiceEntry=&quot;name&quot;[256C]&quot;port&quot;s&quot;flags&quot;s}]'/>
</struct>
<struct name='LaunchParamBlockRec' type='{LaunchParamBlockRec=&quot;reserved1&quot;I&quot;reserved2&quot;S&quot;launchBlockID&quot;S&quot;launchEPBLength&quot;I&quot;launchFileFlags&quot;S&quot;launchControlFlags&quot;S&quot;launchAppSpec&quot;^{FSSpec}&quot;launchProcessSN&quot;{ProcessSerialNumber=&quot;highLongOfPSN&quot;I&quot;lowLongOfPSN&quot;I}&quot;launchPreferredSize&quot;I&quot;launchMinimumSize&quot;I&quot;launchAvailableSize&quot;I&quot;launchAppParameters&quot;^{AppParameters}}' type64='{LaunchParamBlockRec=&quot;reserved1&quot;I&quot;reserved2&quot;S&quot;launchBlockID&quot;S&quot;launchEPBLength&quot;I&quot;launchFileFlags&quot;S&quot;launchControlFlags&quot;S&quot;launchAppRef&quot;^{FSRef}&quot;launchProcessSN&quot;{ProcessSerialNumber=&quot;highLongOfPSN&quot;I&quot;lowLongOfPSN&quot;I}&quot;launchPreferredSize&quot;I&quot;launchMinimumSize&quot;I&quot;launchAvailableSize&quot;I&quot;launchAppParameters&quot;^{AppParameters}}'>
<field declared_type='UInt32' name='reserved1' type='L' type64='I'/>
<field declared_type='UInt16' name='reserved2' type='S'/>
<field declared_type='UInt16' name='launchBlockID' type='S'/>
<field declared_type='UInt32' name='launchEPBLength' type='L' type64='I'/>
<field declared_type='UInt16' name='launchFileFlags' type='S'/>
<field declared_type='LaunchFlags' name='launchControlFlags' type='S'/>
<field declared_type='FSSpecPtr' declared_type64='FSRefPtr' name='launchAppRef' type='^{FSSpec=si[64C]}' type64='^{FSRef=[80C]}'/>
<field declared_type='ProcessSerialNumber' name='launchProcessSN' type='{ProcessSerialNumber=&quot;highLongOfPSN&quot;I&quot;lowLongOfPSN&quot;I}'/>
<field declared_type='UInt32' name='launchPreferredSize' type='L' type64='I'/>
<field declared_type='UInt32' name='launchMinimumSize' type='L' type64='I'/>
<field declared_type='UInt32' name='launchAvailableSize' type='L' type64='I'/>
<field declared_type='AppParametersPtr' name='launchAppParameters' type='^{AppParameters={?=SII{Point=ss}S}II}'/>
</struct>
<struct name='ProcessInfoExtendedRec' type='{ProcessInfoExtendedRec=&quot;processInfoLength&quot;I&quot;processName&quot;*&quot;processNumber&quot;{ProcessSerialNumber=&quot;highLongOfPSN&quot;I&quot;lowLongOfPSN&quot;I}&quot;processType&quot;I&quot;processSignature&quot;I&quot;processMode&quot;I&quot;processLocation&quot;*&quot;processSize&quot;I&quot;processFreeMem&quot;I&quot;processLauncher&quot;{ProcessSerialNumber=&quot;highLongOfPSN&quot;I&quot;lowLongOfPSN&quot;I}&quot;processLaunchDate&quot;I&quot;processActiveTime&quot;I&quot;processAppSpec&quot;^{FSSpec}&quot;processTempMemTotal&quot;I&quot;processPurgeableTempMemTotal&quot;I}' type64='{ProcessInfoExtendedRec=&quot;processInfoLength&quot;I&quot;processName&quot;*&quot;processNumber&quot;{ProcessSerialNumber=&quot;highLongOfPSN&quot;I&quot;lowLongOfPSN&quot;I}&quot;processType&quot;I&quot;processSignature&quot;I&quot;processMode&quot;I&quot;processLocation&quot;*&quot;processSize&quot;I&quot;processFreeMem&quot;I&quot;processLauncher&quot;{ProcessSerialNumber=&quot;highLongOfPSN&quot;I&quot;lowLongOfPSN&quot;I}&quot;processLaunchDate&quot;I&quot;processActiveTime&quot;I&quot;processAppRef&quot;^{FSRef}&quot;processTempMemTotal&quot;I&quot;processPurgeableTempMemTotal&quot;I}'>
<field declared_type='UInt32' name='processInfoLength' type='L' type64='I'/>
<field declared_type='StringPtr' name='processName' type='*'/>
<field declared_type='ProcessSerialNumber' name='processNumber' type='{ProcessSerialNumber=&quot;highLongOfPSN&quot;I&quot;lowLongOfPSN&quot;I}'/>
<field declared_type='UInt32' name='processType' type='L' type64='I'/>
<field declared_type='OSType' name='processSignature' type='L' type64='I'/>
<field declared_type='UInt32' name='processMode' type='L' type64='I'/>
<field declared_type='Ptr' name='processLocation' type='*'/>
<field declared_type='UInt32' name='processSize' type='L' type64='I'/>
<field declared_type='UInt32' name='processFreeMem' type='L' type64='I'/>
<field declared_type='ProcessSerialNumber' name='processLauncher' type='{ProcessSerialNumber=&quot;highLongOfPSN&quot;I&quot;lowLongOfPSN&quot;I}'/>
<field declared_type='UInt32' name='processLaunchDate' type='L' type64='I'/>
<field declared_type='UInt32' name='processActiveTime' type='L' type64='I'/>
<field declared_type='FSSpecPtr' declared_type64='FSRefPtr' name='processAppRef' type='^{FSSpec=si[64C]}' type64='^{FSRef=[80C]}'/>
<field declared_type='UInt32' name='processTempMemTotal' type='L' type64='I'/>
<field declared_type='UInt32' name='processPurgeableTempMemTotal' type='L' type64='I'/>
</struct>
<struct name='ProcessInfoRec' type='{ProcessInfoRec=&quot;processInfoLength&quot;I&quot;processName&quot;*&quot;processNumber&quot;{ProcessSerialNumber=&quot;highLongOfPSN&quot;I&quot;lowLongOfPSN&quot;I}&quot;processType&quot;I&quot;processSignature&quot;I&quot;processMode&quot;I&quot;processLocation&quot;*&quot;processSize&quot;I&quot;processFreeMem&quot;I&quot;processLauncher&quot;{ProcessSerialNumber=&quot;highLongOfPSN&quot;I&quot;lowLongOfPSN&quot;I}&quot;processLaunchDate&quot;I&quot;processActiveTime&quot;I&quot;processAppSpec&quot;^{FSSpec}}' type64='{ProcessInfoRec=&quot;processInfoLength&quot;I&quot;processName&quot;*&quot;processNumber&quot;{ProcessSerialNumber=&quot;highLongOfPSN&quot;I&quot;lowLongOfPSN&quot;I}&quot;processType&quot;I&quot;processSignature&quot;I&quot;processMode&quot;I&quot;processLocation&quot;*&quot;processSize&quot;I&quot;processFreeMem&quot;I&quot;processLauncher&quot;{ProcessSerialNumber=&quot;highLongOfPSN&quot;I&quot;lowLongOfPSN&quot;I}&quot;processLaunchDate&quot;I&quot;processActiveTime&quot;I&quot;processAppRef&quot;^{FSRef}}'>
<field declared_type='UInt32' name='processInfoLength' type='L' type64='I'/>
<field declared_type='StringPtr' name='processName' type='*'/>
<field declared_type='ProcessSerialNumber' name='processNumber' type='{ProcessSerialNumber=&quot;highLongOfPSN&quot;I&quot;lowLongOfPSN&quot;I}'/>
<field declared_type='UInt32' name='processType' type='L' type64='I'/>
<field declared_type='OSType' name='processSignature' type='L' type64='I'/>
<field declared_type='UInt32' name='processMode' type='L' type64='I'/>
<field declared_type='Ptr' name='processLocation' type='*'/>
<field declared_type='UInt32' name='processSize' type='L' type64='I'/>
<field declared_type='UInt32' name='processFreeMem' type='L' type64='I'/>
<field declared_type='ProcessSerialNumber' name='processLauncher' type='{ProcessSerialNumber=&quot;highLongOfPSN&quot;I&quot;lowLongOfPSN&quot;I}'/>
<field declared_type='UInt32' name='processLaunchDate' type='L' type64='I'/>
<field declared_type='UInt32' name='processActiveTime' type='L' type64='I'/>
<field declared_type='FSSpecPtr' declared_type64='FSRefPtr' name='processAppRef' type='^{FSSpec=si[64C]}' type64='^{FSRef=[80C]}'/>
</struct>
<struct name='SizeResourceRec' type='{SizeResourceRec=&quot;flags&quot;S&quot;preferredHeapSize&quot;I&quot;minimumHeapSize&quot;I}'>
<field declared_type='UInt16' name='flags' type='S'/>
<field declared_type='UInt32' name='preferredHeapSize' type='L' type64='I'/>
<field declared_type='UInt32' name='minimumHeapSize' type='L' type64='I'/>
</struct>
<cftype gettypeid_func='AXObserverGetTypeID' name='AXObserverRef' type='^{__AXObserver=}'/>
<cftype gettypeid_func='AXUIElementGetTypeID' name='AXUIElementRef' type='^{__AXUIElement=}'/>
<cftype gettypeid_func='AXValueGetTypeID' name='AXValueRef' type='^{__AXValue=}'/>
<cftype gettypeid_func='HIShapeGetTypeID' name='HIMutableShapeRef' type='^{__HIShape=}'/>
<cftype gettypeid_func='HIShapeGetTypeID' name='HIShapeRef' type='^{__HIShape=}'/>
<cftype gettypeid_func='PasteboardGetTypeID' name='PasteboardRef' type='^{OpaquePasteboardRef=}'/>
<cftype gettypeid_func='TranslationGetTypeID' name='TranslationRef' type='^{OpaqueTranslationRef=}'/>
<cftype name='ICInstance' type='^{OpaqueICInstance=}'/>
<constant declared_type='CFStringRef' name='kAXAttachmentTextAttribute' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXAutocorrectedTextAttribute' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXBackgroundColorTextAttribute' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXFontFamilyKey' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXFontNameKey' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXFontSizeKey' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXFontTextAttribute' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXForegoundColorTextAttribute' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXForegroundColorTextAttribute' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXLinkTextAttribute' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXMarkedMisspelledTextAttribute' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXMisspelledTextAttribute' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXNaturalLanguageTextAttribute' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXReplacementStringTextAttribute' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXShadowTextAttribute' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXStrikethroughColorTextAttribute' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXStrikethroughTextAttribute' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXSuperscriptTextAttribute' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXTrustedCheckOptionPrompt' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXUnderlineColorTextAttribute' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXUnderlineTextAttribute' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kAXVisibleNameKey' type='^{__CFString=}'/>
<string_constant name='kAXAMPMFieldAttribute' nsstring='true' value='AXAMPMField'/>
<string_constant name='kAXAllowedValuesAttribute' nsstring='true' value='AXAllowedValues'/>
<string_constant name='kAXAnnouncementKey' nsstring='true' value='AXAnnouncementKey'/>
<string_constant name='kAXAnnouncementRequestedNotification' nsstring='true' value='AXAnnouncementRequested'/>
<string_constant name='kAXApplicationActivatedNotification' nsstring='true' value='AXApplicationActivated'/>
<string_constant name='kAXApplicationDeactivatedNotification' nsstring='true' value='AXApplicationDeactivated'/>
<string_constant name='kAXApplicationDockItemSubrole' nsstring='true' value='AXApplicationDockItem'/>
<string_constant name='kAXApplicationHiddenNotification' nsstring='true' value='AXApplicationHidden'/>
<string_constant name='kAXApplicationRole' nsstring='true' value='AXApplication'/>
<string_constant name='kAXApplicationShownNotification' nsstring='true' value='AXApplicationShown'/>
<string_constant name='kAXAscendingSortDirectionValue' nsstring='true' value='AXAscendingSortDirection'/>
<string_constant name='kAXAttributedStringForRangeParameterizedAttribute' nsstring='true' value='AXAttributedStringForRange'/>
<string_constant name='kAXBoundsForRangeParameterizedAttribute' nsstring='true' value='AXBoundsForRange'/>
<string_constant name='kAXBrowserRole' nsstring='true' value='AXBrowser'/>
<string_constant name='kAXBusyIndicatorRole' nsstring='true' value='AXBusyIndicator'/>
<string_constant name='kAXButtonRole' nsstring='true' value='AXButton'/>
<string_constant name='kAXCancelAction' nsstring='true' value='AXCancel'/>
<string_constant name='kAXCancelButtonAttribute' nsstring='true' value='AXCancelButton'/>
<string_constant name='kAXCellForColumnAndRowParameterizedAttribute' nsstring='true' value='AXCellForColumnAndRow'/>
<string_constant name='kAXCellRole' nsstring='true' value='AXCell'/>
<string_constant name='kAXCheckBoxRole' nsstring='true' value='AXCheckBox'/>
<string_constant name='kAXChildrenAttribute' nsstring='true' value='AXChildren'/>
<string_constant name='kAXClearButtonAttribute' nsstring='true' value='AXClearButton'/>
<string_constant name='kAXCloseButtonAttribute' nsstring='true' value='AXCloseButton'/>
<string_constant name='kAXCloseButtonSubrole' nsstring='true' value='AXCloseButton'/>
<string_constant name='kAXColorWellRole' nsstring='true' value='AXColorWell'/>
<string_constant name='kAXColumnCountAttribute' nsstring='true' value='AXColumnCount'/>
<string_constant name='kAXColumnHeaderUIElementsAttribute' nsstring='true' value='AXColumnHeaderUIElements'/>
<string_constant name='kAXColumnIndexRangeAttribute' nsstring='true' value='AXColumnIndexRange'/>
<string_constant name='kAXColumnRole' nsstring='true' value='AXColumn'/>
<string_constant name='kAXColumnTitleAttribute' nsstring='true' value='AXColumnTitles'/>
<string_constant name='kAXColumnTitlesAttribute' nsstring='true' value='AXColumnTitles'/>
<string_constant name='kAXColumnsAttribute' nsstring='true' value='AXColumns'/>
<string_constant name='kAXComboBoxRole' nsstring='true' value='AXComboBox'/>
<string_constant name='kAXConfirmAction' nsstring='true' value='AXConfirm'/>
<string_constant name='kAXContentListSubrole' nsstring='true' value='AXContentList'/>
<string_constant name='kAXContentsAttribute' nsstring='true' value='AXContents'/>
<string_constant name='kAXCreatedNotification' nsstring='true' value='AXCreated'/>
<string_constant name='kAXCriticalValueAttribute' nsstring='true' value='AXCriticalValue'/>
<string_constant name='kAXDateFieldRole' nsstring='true' value='AXDateField'/>
<string_constant name='kAXDayFieldAttribute' nsstring='true' value='AXDayField'/>
<string_constant name='kAXDecrementAction' nsstring='true' value='AXDecrement'/>
<string_constant name='kAXDecrementArrowSubrole' nsstring='true' value='AXDecrementArrow'/>
<string_constant name='kAXDecrementButtonAttribute' nsstring='true' value='AXDecrementButton'/>
<string_constant name='kAXDecrementPageSubrole' nsstring='true' value='AXDecrementPage'/>
<string_constant name='kAXDefaultButtonAttribute' nsstring='true' value='AXDefaultButton'/>
<string_constant name='kAXDefinitionListSubrole' nsstring='true' value='AXDefinitionList'/>
<string_constant name='kAXDescendingSortDirectionValue' nsstring='true' value='AXDescendingSortDirection'/>
<string_constant name='kAXDescription' nsstring='true' value='AXDescription'/>
<string_constant name='kAXDescriptionAttribute' nsstring='true' value='AXDescription'/>
<string_constant name='kAXDescriptionListSubrole' nsstring='true' value='AXDescriptionList'/>
<string_constant name='kAXDialogSubrole' nsstring='true' value='AXDialog'/>
<string_constant name='kAXDisclosedByRowAttribute' nsstring='true' value='AXDisclosedByRow'/>
<string_constant name='kAXDisclosedRowsAttribute' nsstring='true' value='AXDisclosedRows'/>
<string_constant name='kAXDisclosingAttribute' nsstring='true' value='AXDisclosing'/>
<string_constant name='kAXDisclosureLevelAttribute' nsstring='true' value='AXDisclosureLevel'/>
<string_constant name='kAXDisclosureTriangleRole' nsstring='true' value='AXDisclosureTriangle'/>
<string_constant name='kAXDockExtraDockItemSubrole' nsstring='true' value='AXDockExtraDockItem'/>
<string_constant name='kAXDockItemRole' nsstring='true' value='AXDockItem'/>
<string_constant name='kAXDocumentAttribute' nsstring='true' value='AXDocument'/>
<string_constant name='kAXDocumentDockItemSubrole' nsstring='true' value='AXDocumentDockItem'/>
<string_constant name='kAXDrawerCreatedNotification' nsstring='true' value='AXDrawerCreated'/>
<string_constant name='kAXDrawerRole' nsstring='true' value='AXDrawer'/>
<string_constant name='kAXEditedAttribute' nsstring='true' value='AXEdited'/>
<string_constant name='kAXEnabledAttribute' nsstring='true' value='AXEnabled'/>
<string_constant name='kAXExpandedAttribute' nsstring='true' value='AXExpanded'/>
<string_constant name='kAXExtrasMenuBarAttribute' nsstring='true' value='AXExtrasMenuBar'/>
<string_constant name='kAXFilenameAttribute' nsstring='true' value='AXFilename'/>
<string_constant name='kAXFloatingWindowSubrole' nsstring='true' value='AXFloatingWindow'/>
<string_constant name='kAXFocusedApplicationAttribute' nsstring='true' value='AXFocusedApplication'/>
<string_constant name='kAXFocusedAttribute' nsstring='true' value='AXFocused'/>
<string_constant name='kAXFocusedUIElementAttribute' nsstring='true' value='AXFocusedUIElement'/>
<string_constant name='kAXFocusedUIElementChangedNotification' nsstring='true' value='AXFocusedUIElementChanged'/>
<string_constant name='kAXFocusedWindowAttribute' nsstring='true' value='AXFocusedWindow'/>
<string_constant name='kAXFocusedWindowChangedNotification' nsstring='true' value='AXFocusedWindowChanged'/>
<string_constant name='kAXFolderDockItemSubrole' nsstring='true' value='AXFolderDockItem'/>
<string_constant name='kAXFrontmostAttribute' nsstring='true' value='AXFrontmost'/>
<string_constant name='kAXFullScreenButtonAttribute' nsstring='true' value='AXFullScreenButton'/>
<string_constant name='kAXFullScreenButtonSubrole' nsstring='true' value='AXFullScreenButton'/>
<string_constant name='kAXGridRole' nsstring='true' value='AXGrid'/>
<string_constant name='kAXGroupRole' nsstring='true' value='AXGroup'/>
<string_constant name='kAXGrowAreaAttribute' nsstring='true' value='AXGrowArea'/>
<string_constant name='kAXGrowAreaRole' nsstring='true' value='AXGrowArea'/>
<string_constant name='kAXHandleRole' nsstring='true' value='AXHandle'/>
<string_constant name='kAXHandlesAttribute' nsstring='true' value='AXHandles'/>
<string_constant name='kAXHeaderAttribute' nsstring='true' value='AXHeader'/>
<string_constant name='kAXHelpAttribute' nsstring='true' value='AXHelp'/>
<string_constant name='kAXHelpTagCreatedNotification' nsstring='true' value='AXHelpTagCreated'/>
<string_constant name='kAXHelpTagRole' nsstring='true' value='AXHelpTag'/>
<string_constant name='kAXHiddenAttribute' nsstring='true' value='AXHidden'/>
<string_constant name='kAXHorizontalOrientationValue' nsstring='true' value='AXHorizontalOrientation'/>
<string_constant name='kAXHorizontalScrollBarAttribute' nsstring='true' value='AXHorizontalScrollBar'/>
<string_constant name='kAXHorizontalUnitDescriptionAttribute' nsstring='true' value='AXHorizontalUnitDescription'/>
<string_constant name='kAXHorizontalUnitsAttribute' nsstring='true' value='AXHorizontalUnits'/>
<string_constant name='kAXHourFieldAttribute' nsstring='true' value='AXHourField'/>
<string_constant name='kAXIdentifierAttribute' nsstring='true' value='AXIdentifier'/>
<string_constant name='kAXImageRole' nsstring='true' value='AXImage'/>
<string_constant name='kAXIncrementAction' nsstring='true' value='AXIncrement'/>
<string_constant name='kAXIncrementArrowSubrole' nsstring='true' value='AXIncrementArrow'/>
<string_constant name='kAXIncrementButtonAttribute' nsstring='true' value='AXIncrementButton'/>
<string_constant name='kAXIncrementPageSubrole' nsstring='true' value='AXIncrementPage'/>
<string_constant name='kAXIncrementorAttribute' nsstring='true' value='AXIncrementor'/>
<string_constant name='kAXIncrementorRole' nsstring='true' value='AXIncrementor'/>
<string_constant name='kAXIndexAttribute' nsstring='true' value='AXIndex'/>
<string_constant name='kAXInsertionPointLineNumberAttribute' nsstring='true' value='AXInsertionPointLineNumber'/>
<string_constant name='kAXIsApplicationRunningAttribute' nsstring='true' value='AXIsApplicationRunning'/>
<string_constant name='kAXIsEditableAttribute' nsstring='true' value='AXIsEditable'/>
<string_constant name='kAXLabelUIElementsAttribute' nsstring='true' value='AXLabelUIElements'/>
<string_constant name='kAXLabelValueAttribute' nsstring='true' value='AXLabelValue'/>
<string_constant name='kAXLayoutAreaRole' nsstring='true' value='AXLayoutArea'/>
<string_constant name='kAXLayoutChangedNotification' nsstring='true' value='AXLayoutChanged'/>
<string_constant name='kAXLayoutItemRole' nsstring='true' value='AXLayoutItem'/>
<string_constant name='kAXLayoutPointForScreenPointParameterizedAttribute' nsstring='true' value='AXLayoutPointForScreenPoint'/>
<string_constant name='kAXLayoutSizeForScreenSizeParameterizedAttribute' nsstring='true' value='AXLayoutSizeForScreenSize'/>
<string_constant name='kAXLevelIndicatorRole' nsstring='true' value='AXLevelIndicator'/>
<string_constant name='kAXLineForIndexParameterizedAttribute' nsstring='true' value='AXLineForIndex'/>
<string_constant name='kAXLinkedUIElementsAttribute' nsstring='true' value='AXLinkedUIElements'/>
<string_constant name='kAXListRole' nsstring='true' value='AXList'/>
<string_constant name='kAXMainAttribute' nsstring='true' value='AXMain'/>
<string_constant name='kAXMainWindowAttribute' nsstring='true' value='AXMainWindow'/>
<string_constant name='kAXMainWindowChangedNotification' nsstring='true' value='AXMainWindowChanged'/>
<string_constant name='kAXMarkerTypeAttribute' nsstring='true' value='AXMarkerType'/>
<string_constant name='kAXMarkerTypeDescriptionAttribute' nsstring='true' value='AXMarkerTypeDescription'/>
<string_constant name='kAXMarkerUIElementsAttribute' nsstring='true' value='AXMarkerUIElements'/>
<string_constant name='kAXMatteContentUIElementAttribute' nsstring='true' value='AXMatteContentUIElement'/>
<string_constant name='kAXMatteHoleAttribute' nsstring='true' value='AXMatteHole'/>
<string_constant name='kAXMatteRole' nsstring='true' value='AXMatteRole'/>
<string_constant name='kAXMaxValueAttribute' nsstring='true' value='AXMaxValue'/>
<string_constant name='kAXMenuBarAttribute' nsstring='true' value='AXMenuBar'/>
<string_constant name='kAXMenuBarItemRole' nsstring='true' value='AXMenuBarItem'/>
<string_constant name='kAXMenuBarRole' nsstring='true' value='AXMenuBar'/>
<string_constant name='kAXMenuButtonRole' nsstring='true' value='AXMenuButton'/>
<string_constant name='kAXMenuClosedNotification' nsstring='true' value='AXMenuClosed'/>
<string_constant name='kAXMenuItemCmdCharAttribute' nsstring='true' value='AXMenuItemCmdChar'/>
<string_constant name='kAXMenuItemCmdGlyphAttribute' nsstring='true' value='AXMenuItemCmdGlyph'/>
<string_constant name='kAXMenuItemCmdModifiersAttribute' nsstring='true' value='AXMenuItemCmdModifiers'/>
<string_constant name='kAXMenuItemCmdVirtualKeyAttribute' nsstring='true' value='AXMenuItemCmdVirtualKey'/>
<string_constant name='kAXMenuItemMarkCharAttribute' nsstring='true' value='AXMenuItemMarkChar'/>
<string_constant name='kAXMenuItemPrimaryUIElementAttribute' nsstring='true' value='AXMenuItemPrimaryUIElement'/>
<string_constant name='kAXMenuItemRole' nsstring='true' value='AXMenuItem'/>
<string_constant name='kAXMenuItemSelectedNotification' nsstring='true' value='AXMenuItemSelected'/>
<string_constant name='kAXMenuOpenedNotification' nsstring='true' value='AXMenuOpened'/>
<string_constant name='kAXMenuRole' nsstring='true' value='AXMenu'/>
<string_constant name='kAXMinValueAttribute' nsstring='true' value='AXMinValue'/>
<string_constant name='kAXMinimizeButtonAttribute' nsstring='true' value='AXMinimizeButton'/>
<string_constant name='kAXMinimizeButtonSubrole' nsstring='true' value='AXMinimizeButton'/>
<string_constant name='kAXMinimizedAttribute' nsstring='true' value='AXMinimized'/>
<string_constant name='kAXMinimizedWindowDockItemSubrole' nsstring='true' value='AXMinimizedWindowDockItem'/>
<string_constant name='kAXMinuteFieldAttribute' nsstring='true' value='AXMinuteField'/>
<string_constant name='kAXModalAttribute' nsstring='true' value='AXModal'/>
<string_constant name='kAXMonthFieldAttribute' nsstring='true' value='AXMonthField'/>
<string_constant name='kAXMovedNotification' nsstring='true' value='AXMoved'/>
<string_constant name='kAXNextContentsAttribute' nsstring='true' value='AXNextContents'/>
<string_constant name='kAXNumberOfCharactersAttribute' nsstring='true' value='AXNumberOfCharacters'/>
<string_constant name='kAXOrderedByRowAttribute' nsstring='true' value='AXOrderedByRow'/>
<string_constant name='kAXOrientationAttribute' nsstring='true' value='AXOrientation'/>
<string_constant name='kAXOutlineRole' nsstring='true' value='AXOutline'/>
<string_constant name='kAXOutlineRowSubrole' nsstring='true' value='AXOutlineRow'/>
<string_constant name='kAXOverflowButtonAttribute' nsstring='true' value='AXOverflowButton'/>
<string_constant name='kAXParentAttribute' nsstring='true' value='AXParent'/>
<string_constant name='kAXPickAction' nsstring='true' value='AXPick'/>
<string_constant name='kAXPlaceholderValueAttribute' nsstring='true' value='AXPlaceholderValue'/>
<string_constant name='kAXPopUpButtonRole' nsstring='true' value='AXPopUpButton'/>
<string_constant name='kAXPopoverRole' nsstring='true' value='AXPopover'/>
<string_constant name='kAXPositionAttribute' nsstring='true' value='AXPosition'/>
<string_constant name='kAXPressAction' nsstring='true' value='AXPress'/>
<string_constant name='kAXPreviousContentsAttribute' nsstring='true' value='AXPreviousContents'/>
<string_constant name='kAXPriorityKey' nsstring='true' value='AXPriorityKey'/>
<string_constant name='kAXProcessSwitcherListSubrole' nsstring='true' value='AXProcessSwitcherList'/>
<string_constant name='kAXProgressIndicatorRole' nsstring='true' value='AXProgressIndicator'/>
<string_constant name='kAXProxyAttribute' nsstring='true' value='AXProxy'/>
<string_constant name='kAXRTFForRangeParameterizedAttribute' nsstring='true' value='AXRTFForRange'/>
<string_constant name='kAXRadioButtonRole' nsstring='true' value='AXRadioButton'/>
<string_constant name='kAXRadioGroupRole' nsstring='true' value='AXRadioGroup'/>
<string_constant name='kAXRaiseAction' nsstring='true' value='AXRaise'/>
<string_constant name='kAXRangeForIndexParameterizedAttribute' nsstring='true' value='AXRangeForIndex'/>
<string_constant name='kAXRangeForLineParameterizedAttribute' nsstring='true' value='AXRangeForLine'/>
<string_constant name='kAXRangeForPositionParameterizedAttribute' nsstring='true' value='AXRangeForPosition'/>
<string_constant name='kAXRatingIndicatorSubrole' nsstring='true' value='AXRatingIndicator'/>
<string_constant name='kAXRelevanceIndicatorRole' nsstring='true' value='AXRelevanceIndicator'/>
<string_constant name='kAXResizedNotification' nsstring='true' value='AXResized'/>
<string_constant name='kAXRoleAttribute' nsstring='true' value='AXRole'/>
<string_constant name='kAXRoleDescriptionAttribute' nsstring='true' value='AXRoleDescription'/>
<string_constant name='kAXRowCollapsedNotification' nsstring='true' value='AXRowCollapsed'/>
<string_constant name='kAXRowCountAttribute' nsstring='true' value='AXRowCount'/>
<string_constant name='kAXRowCountChangedNotification' nsstring='true' value='AXRowCountChanged'/>
<string_constant name='kAXRowExpandedNotification' nsstring='true' value='AXRowExpanded'/>
<string_constant name='kAXRowHeaderUIElementsAttribute' nsstring='true' value='AXRowHeaderUIElements'/>
<string_constant name='kAXRowIndexRangeAttribute' nsstring='true' value='AXRowIndexRange'/>
<string_constant name='kAXRowRole' nsstring='true' value='AXRow'/>
<string_constant name='kAXRowsAttribute' nsstring='true' value='AXRows'/>
<string_constant name='kAXRulerMarkerRole' nsstring='true' value='AXRulerMarker'/>
<string_constant name='kAXRulerRole' nsstring='true' value='AXRuler'/>
<string_constant name='kAXScreenPointForLayoutPointParameterizedAttribute' nsstring='true' value='AXScreenPointForLayoutPoint'/>
<string_constant name='kAXScreenSizeForLayoutSizeParameterizedAttribute' nsstring='true' value='AXScreenSizeForLayoutSize'/>
<string_constant name='kAXScrollAreaRole' nsstring='true' value='AXScrollArea'/>
<string_constant name='kAXScrollBarRole' nsstring='true' value='AXScrollBar'/>
<string_constant name='kAXSearchButtonAttribute' nsstring='true' value='AXSearchButton'/>
<string_constant name='kAXSearchFieldSubrole' nsstring='true' value='AXSearchField'/>
<string_constant name='kAXSecondFieldAttribute' nsstring='true' value='AXSecondField'/>
<string_constant name='kAXSecureTextFieldSubrole' nsstring='true' value='AXSecureTextField'/>
<string_constant name='kAXSelectedAttribute' nsstring='true' value='AXSelected'/>
<string_constant name='kAXSelectedCellsAttribute' nsstring='true' value='AXSelectedCells'/>
<string_constant name='kAXSelectedCellsChangedNotification' nsstring='true' value='AXSelectedCellsChanged'/>
<string_constant name='kAXSelectedChildrenAttribute' nsstring='true' value='AXSelectedChildren'/>
<string_constant name='kAXSelectedChildrenChangedNotification' nsstring='true' value='AXSelectedChildrenChanged'/>
<string_constant name='kAXSelectedChildrenMovedNotification' nsstring='true' value='AXSelectedChildrenMoved'/>
<string_constant name='kAXSelectedColumnsAttribute' nsstring='true' value='AXSelectedColumns'/>
<string_constant name='kAXSelectedColumnsChangedNotification' nsstring='true' value='AXSelectedColumnsChanged'/>
<string_constant name='kAXSelectedRowsAttribute' nsstring='true' value='AXSelectedRows'/>
<string_constant name='kAXSelectedRowsChangedNotification' nsstring='true' value='AXSelectedRowsChanged'/>
<string_constant name='kAXSelectedTextAttribute' nsstring='true' value='AXSelectedText'/>
<string_constant name='kAXSelectedTextChangedNotification' nsstring='true' value='AXSelectedTextChanged'/>
<string_constant name='kAXSelectedTextRangeAttribute' nsstring='true' value='AXSelectedTextRange'/>
<string_constant name='kAXSelectedTextRangesAttribute' nsstring='true' value='AXSelectedTextRanges'/>
<string_constant name='kAXSeparatorDockItemSubrole' nsstring='true' value='AXSeparatorDockItem'/>
<string_constant name='kAXServesAsTitleForUIElementsAttribute' nsstring='true' value='AXServesAsTitleForUIElements'/>
<string_constant name='kAXSharedCharacterRangeAttribute' nsstring='true' value='AXSharedCharacterRange'/>
<string_constant name='kAXSharedTextUIElementsAttribute' nsstring='true' value='AXSharedTextUIElements'/>
<string_constant name='kAXSheetCreatedNotification' nsstring='true' value='AXSheetCreated'/>
<string_constant name='kAXSheetRole' nsstring='true' value='AXSheet'/>
<string_constant name='kAXShowAlternateUIAction' nsstring='true' value='AXShowAlternateUI'/>
<string_constant name='kAXShowDefaultUIAction' nsstring='true' value='AXShowDefaultUI'/>
<string_constant name='kAXShowMenuAction' nsstring='true' value='AXShowMenu'/>
<string_constant name='kAXShownMenuUIElementAttribute' nsstring='true' value='AXShownMenuUIElement'/>
<string_constant name='kAXSizeAttribute' nsstring='true' value='AXSize'/>
<string_constant name='kAXSliderRole' nsstring='true' value='AXSlider'/>
<string_constant name='kAXSortButtonSubrole' nsstring='true' value='AXSortButton'/>
<string_constant name='kAXSortDirectionAttribute' nsstring='true' value='AXSortDirection'/>
<string_constant name='kAXSplitGroupRole' nsstring='true' value='AXSplitGroup'/>
<string_constant name='kAXSplitterRole' nsstring='true' value='AXSplitter'/>
<string_constant name='kAXSplittersAttribute' nsstring='true' value='AXSplitters'/>
<string_constant name='kAXStandardWindowSubrole' nsstring='true' value='AXStandardWindow'/>
<string_constant name='kAXStaticTextRole' nsstring='true' value='AXStaticText'/>
<string_constant name='kAXStringForRangeParameterizedAttribute' nsstring='true' value='AXStringForRange'/>
<string_constant name='kAXStyleRangeForIndexParameterizedAttribute' nsstring='true' value='AXStyleRangeForIndex'/>
<string_constant name='kAXSubroleAttribute' nsstring='true' value='AXSubrole'/>
<string_constant name='kAXSwitchSubrole' nsstring='true' value='AXSwitch'/>
<string_constant name='kAXSystemDialogSubrole' nsstring='true' value='AXSystemDialog'/>
<string_constant name='kAXSystemFloatingWindowSubrole' nsstring='true' value='AXSystemFloatingWindow'/>
<string_constant name='kAXSystemWideRole' nsstring='true' value='AXSystemWide'/>
<string_constant name='kAXTabGroupRole' nsstring='true' value='AXTabGroup'/>
<string_constant name='kAXTableRole' nsstring='true' value='AXTable'/>
<string_constant name='kAXTableRowSubrole' nsstring='true' value='AXTableRow'/>
<string_constant name='kAXTabsAttribute' nsstring='true' value='AXTabs'/>
<string_constant name='kAXTextAreaRole' nsstring='true' value='AXTextArea'/>
<string_constant name='kAXTextAttribute' nsstring='true' value='AXText'/>
<string_constant name='kAXTextFieldRole' nsstring='true' value='AXTextField'/>
<string_constant name='kAXTimeFieldRole' nsstring='true' value='AXTimeField'/>
<string_constant name='kAXTimelineSubrole' nsstring='true' value='AXTimeline'/>
<string_constant name='kAXTitleAttribute' nsstring='true' value='AXTitle'/>
<string_constant name='kAXTitleChangedNotification' nsstring='true' value='AXTitleChanged'/>
<string_constant name='kAXTitleUIElementAttribute' nsstring='true' value='AXTitleUIElement'/>
<string_constant name='kAXToggleSubrole' nsstring='true' value='AXToggle'/>
<string_constant name='kAXToolbarButtonAttribute' nsstring='true' value='AXToolbarButton'/>
<string_constant name='kAXToolbarButtonSubrole' nsstring='true' value='AXToolbarButton'/>
<string_constant name='kAXToolbarRole' nsstring='true' value='AXToolbar'/>
<string_constant name='kAXTopLevelUIElementAttribute' nsstring='true' value='AXTopLevelUIElement'/>
<string_constant name='kAXTrashDockItemSubrole' nsstring='true' value='AXTrashDockItem'/>
<string_constant name='kAXUIElementDestroyedNotification' nsstring='true' value='AXUIElementDestroyed'/>
<string_constant name='kAXUIElementsKey' nsstring='true' value='AXUIElementsKey'/>
<string_constant name='kAXURLAttribute' nsstring='true' value='AXURL'/>
<string_constant name='kAXURLDockItemSubrole' nsstring='true' value='AXURLDockItem'/>
<string_constant name='kAXUnitDescriptionAttribute' nsstring='true' value='AXUnitDescription'/>
<string_constant name='kAXUnitsAttribute' nsstring='true' value='AXUnits'/>
<string_constant name='kAXUnitsChangedNotification' nsstring='true' value='AXUnitsChanged'/>
<string_constant name='kAXUnknownOrientationValue' nsstring='true' value='AXUnknownOrientation'/>
<string_constant name='kAXUnknownRole' nsstring='true' value='AXUnknown'/>
<string_constant name='kAXUnknownSortDirectionValue' nsstring='true' value='AXUnknownSortDirection'/>
<string_constant name='kAXUnknownSubrole' nsstring='true' value='AXUnknown'/>
<string_constant name='kAXValueAttribute' nsstring='true' value='AXValue'/>
<string_constant name='kAXValueChangedNotification' nsstring='true' value='AXValueChanged'/>
<string_constant name='kAXValueDescriptionAttribute' nsstring='true' value='AXValueDescription'/>
<string_constant name='kAXValueIncrementAttribute' nsstring='true' value='AXValueIncrement'/>
<string_constant name='kAXValueIndicatorRole' nsstring='true' value='AXValueIndicator'/>
<string_constant name='kAXValueWrapsAttribute' nsstring='true' value='AXValueWraps'/>
<string_constant name='kAXVerticalOrientationValue' nsstring='true' value='AXVerticalOrientation'/>
<string_constant name='kAXVerticalScrollBarAttribute' nsstring='true' value='AXVerticalScrollBar'/>
<string_constant name='kAXVerticalUnitDescriptionAttribute' nsstring='true' value='AXVerticalUnitDescription'/>
<string_constant name='kAXVerticalUnitsAttribute' nsstring='true' value='AXVerticalUnits'/>
<string_constant name='kAXVisibleCellsAttribute' nsstring='true' value='AXVisibleCells'/>
<string_constant name='kAXVisibleCharacterRangeAttribute' nsstring='true' value='AXVisibleCharacterRange'/>
<string_constant name='kAXVisibleChildrenAttribute' nsstring='true' value='AXVisibleChildren'/>
<string_constant name='kAXVisibleColumnsAttribute' nsstring='true' value='AXVisibleColumns'/>
<string_constant name='kAXVisibleRowsAttribute' nsstring='true' value='AXVisibleRows'/>
<string_constant name='kAXVisibleTextAttribute' nsstring='true' value='AXVisibleText'/>
<string_constant name='kAXWarningValueAttribute' nsstring='true' value='AXWarningValue'/>
<string_constant name='kAXWindowAttribute' nsstring='true' value='AXWindow'/>
<string_constant name='kAXWindowCreatedNotification' nsstring='true' value='AXWindowCreated'/>
<string_constant name='kAXWindowDeminiaturizedNotification' nsstring='true' value='AXWindowDeminiaturized'/>
<string_constant name='kAXWindowMiniaturizedNotification' nsstring='true' value='AXWindowMiniaturized'/>
<string_constant name='kAXWindowMovedNotification' nsstring='true' value='AXWindowMoved'/>
<string_constant name='kAXWindowResizedNotification' nsstring='true' value='AXWindowResized'/>
<string_constant name='kAXWindowRole' nsstring='true' value='AXWindow'/>
<string_constant name='kAXWindowsAttribute' nsstring='true' value='AXWindows'/>
<string_constant name='kAXYearFieldAttribute' nsstring='true' value='AXYearField'/>
<string_constant name='kAXZoomButtonAttribute' nsstring='true' value='AXZoomButton'/>
<string_constant name='kAXZoomButtonSubrole' nsstring='true' value='AXZoomButton'/>
<string_constant name='kICArchieAll' value='pArchieAll'/>
<string_constant name='kICArchiePreferred' value='pArchiePreferred'/>
<string_constant name='kICCharacterSet' value='pCharacterSet'/>
<string_constant name='kICDocumentFont' value='pDocumentFont'/>
<string_constant name='kICDownloadFolder' value='pDownloadFolder'/>
<string_constant name='kICEmail' value='pEmail'/>
<string_constant name='kICFTPHost' value='pFTPHost'/>
<string_constant name='kICFTPProxyAccount' value='pFTPProxyAccount'/>
<string_constant name='kICFTPProxyHost' value='pFTPProxyHost'/>
<string_constant name='kICFTPProxyPassword' value='pFTPProxyPassword'/>
<string_constant name='kICFTPProxyUser' value='pFTPProxyUser'/>
<string_constant name='kICFingerHost' value='pFingerHost'/>
<string_constant name='kICGopherHost' value='pGopherHost'/>
<string_constant name='kICGopherProxy' value='pGopherProxy'/>
<string_constant name='kICHTTPProxyHost' value='pHTTPProxyHost'/>
<string_constant name='kICHelper' value='pHelper•'/>
<string_constant name='kICHelperDesc' value='pHelperDesc•'/>
<string_constant name='kICHelperList' value='pHelperList•'/>
<string_constant name='kICIRCHost' value='pIRCHost'/>
<string_constant name='kICInfoMacAll' value='pInfoMacAll'/>
<string_constant name='kICInfoMacPreferred' value='pInfoMacPreferred'/>
<string_constant name='kICLDAPSearchbase' value='pLDAPSearchbase'/>
<string_constant name='kICLDAPServer' value='pLDAPServer'/>
<string_constant name='kICListFont' value='pListFont'/>
<string_constant name='kICMacSearchHost' value='pMacSearchHost'/>
<string_constant name='kICMailAccount' value='pMailAccount'/>
<string_constant name='kICMailHeaders' value='pMailHeaders'/>
<string_constant name='kICMailPassword' value='pMailPassword'/>
<string_constant name='kICMapping' value='pMapping'/>
<string_constant name='kICNNTPHost' value='pNNTPHost'/>
<string_constant name='kICNTPHost' value='pNTPHost'/>
<string_constant name='kICNewMailDialog' value='pNewMailDialog'/>
<string_constant name='kICNewMailFlashIcon' value='pNewMailFlashIcon'/>
<string_constant name='kICNewMailPlaySound' value='pNewMailPlaySound'/>
<string_constant name='kICNewMailSoundName' value='pNewMailSoundName'/>
<string_constant name='kICNewsAuthPassword' value='pNewsAuthPassword'/>
<string_constant name='kICNewsAuthUsername' value='pNewsAuthUsername'/>
<string_constant name='kICNewsHeaders' value='pNewsHeaders'/>
<string_constant name='kICNoProxyDomains' value='pNoProxyDomains'/>
<string_constant name='kICOrganization' value='pOrganization'/>
<string_constant name='kICPhHost' value='pPhHost'/>
<string_constant name='kICPlan' value='pPlan'/>
<string_constant name='kICPrinterFont' value='pPrinterFont'/>
<string_constant name='kICQuotingString' value='pQuotingString'/>
<string_constant name='kICRTSPProxyHost' value='pRTSPProxyHost'/>
<string_constant name='kICRealName' value='pRealName'/>
<string_constant name='kICReservedKey' value='pkICReservedKey'/>
<string_constant name='kICSMTPHost' value='pSMTPHost'/>
<string_constant name='kICScreenFont' value='pScreenFont'/>
<string_constant name='kICServices' value='pServices'/>
<string_constant name='kICSignature' value='pSignature'/>
<string_constant name='kICSnailMailAddress' value='pSnailMailAddress'/>
<string_constant name='kICSocksHost' value='pSocksHost'/>
<string_constant name='kICTelnetHost' value='pTelnetHost'/>
<string_constant name='kICUMichAll' value='pUMichAll'/>
<string_constant name='kICUMichPreferred' value='pUMichPreferred'/>
<string_constant name='kICUseFTPProxy' value='pUseFTPProxy'/>
<string_constant name='kICUseGopherProxy' value='pUseGopherProxy'/>
<string_constant name='kICUseHTTPProxy' value='pUseHTTPProxy'/>
<string_constant name='kICUsePassiveFTP' value='pUsePassiveFTP'/>
<string_constant name='kICUseRTSPProxy' value='pUseRTSPProxy'/>
<string_constant name='kICUseSocks' value='pUseSocks'/>
<string_constant name='kICWAISGateway' value='pWAISGateway'/>
<string_constant name='kICWWWHomePage' value='pWWWHomePage'/>
<string_constant name='kICWebBackgroundColour' value='pWebBackgroundColour'/>
<string_constant name='kICWebReadColor' value='p646F6777•WebReadColor'/>
<string_constant name='kICWebSearchPagePrefs' value='pWebSearchPagePrefs'/>
<string_constant name='kICWebTextColor' value='pWebTextColor'/>
<string_constant name='kICWebUnderlineLinks' value='p646F6777•WebUnderlineLinks'/>
<string_constant name='kICWebUnreadColor' value='p646F6777•WebUnreadColor'/>
<string_constant name='kICWhoisHost' value='pWhoisHost'/>
<string_constant name='kPasteboardClipboard' nsstring='true' value='com.apple.pasteboard.clipboard'/>
<string_constant name='kPasteboardFind' nsstring='true' value='com.apple.pasteboard.find'/>
<string_constant name='kPasteboardTypeFilePromiseContent' nsstring='true' value='com.apple.pasteboard.promised-file-content-type'/>
<string_constant name='kPasteboardTypeFileURLPromise' nsstring='true' value='com.apple.pasteboard.promised-file-url'/>
<enum name='AX_ALLOW_OLD_SECURITY_METHOD' value='0'/>
<enum name='activDev' value='5'/>
<enum name='atAbsoluteCenter' value='5'/>
<enum name='atBottom' value='3'/>
<enum name='atBottomLeft' value='11'/>
<enum name='atBottomRight' value='15'/>
<enum name='atCenterBottom' value='7'/>
<enum name='atCenterLeft' value='9'/>
<enum name='atCenterRight' value='13'/>
<enum name='atCenterTop' value='6'/>
<enum name='atHorizontalCenter' value='4'/>
<enum name='atLeft' value='8'/>
<enum name='atNone' value='0'/>
<enum name='atRight' value='12'/>
<enum name='atTop' value='2'/>
<enum name='atTopLeft' value='10'/>
<enum name='atTopRight' value='14'/>
<enum name='atVerticalCenter' value='1'/>
<enum name='badPasteboardFlavorErr' value='-25133'/>
<enum name='badPasteboardIndexErr' value='-25131'/>
<enum name='badPasteboardItemErr' value='-25132'/>
<enum name='badPasteboardSyncErr' value='-25130'/>
<enum name='badTranslationRefErr' value='-3031'/>
<enum name='cdevGenErr' value='-1'/>
<enum name='cdevMemErr' value='0'/>
<enum name='cdevResErr' value='1'/>
<enum name='cdevUnset' value='3'/>
<enum name='clearDev' value='13'/>
<enum name='closeDev' value='2'/>
<enum name='copyDev' value='11'/>
<enum name='cursorDev' value='14'/>
<enum name='cutDev' value='10'/>
<enum name='deactivDev' value='6'/>
<enum name='duplicatePasteboardFlavorErr' value='-25134'/>
<enum name='extendedBlock' value='19523'/>
<enum name='extendedBlockLen' value='32' value64='40'/>
<enum name='hitDev' value='1'/>
<enum name='icConfigInappropriateErr' value='-675'/>
<enum name='icConfigNotFoundErr' value='-674'/>
<enum name='icInternalErr' value='-669'/>
<enum name='icNoMoreWritersErr' value='-671'/>
<enum name='icNoPerm' value='0'/>
<enum name='icNoURLErr' value='-673'/>
<enum name='icNothingToOverrideErr' value='-672'/>
<enum name='icPermErr' value='-667'/>
<enum name='icPrefDataErr' value='-668'/>
<enum name='icPrefNotFoundErr' value='-666'/>
<enum name='icProfileNotFoundErr' value='-676'/>
<enum name='icReadOnlyPerm' value='1'/>
<enum name='icReadWritePerm' value='2'/>
<enum name='icTooManyProfilesErr' value='-677'/>
<enum name='icTruncatedErr' value='-670'/>
<enum name='initDev' value='0'/>
<enum name='kAEFetchURL' value='1179996748'/>
<enum name='kAEGetURL' value='1196773964'/>
<enum name='kAXCopyMultipleAttributeOptionStopOnError' value='1'/>
<enum name='kAXErrorAPIDisabled' value='-25211'/>
<enum name='kAXErrorActionUnsupported' value='-25206'/>
<enum name='kAXErrorAttributeUnsupported' value='-25205'/>
<enum name='kAXErrorCannotComplete' value='-25204'/>
<enum name='kAXErrorFailure' value='-25200'/>
<enum name='kAXErrorIllegalArgument' value='-25201'/>
<enum name='kAXErrorInvalidUIElement' value='-25202'/>
<enum name='kAXErrorInvalidUIElementObserver' value='-25203'/>
<enum name='kAXErrorNoValue' value='-25212'/>
<enum name='kAXErrorNotEnoughPrecision' value='-25214'/>
<enum name='kAXErrorNotImplemented' value='-25208'/>
<enum name='kAXErrorNotificationAlreadyRegistered' value='-25209'/>
<enum name='kAXErrorNotificationNotRegistered' value='-25210'/>
<enum name='kAXErrorNotificationUnsupported' value='-25207'/>
<enum name='kAXErrorParameterizedAttributeUnsupported' value='-25213'/>
<enum name='kAXErrorSuccess' value='0'/>
<enum name='kAXMenuItemModifierControl' value='4'/>
<enum name='kAXMenuItemModifierNoCommand' value='8'/>
<enum name='kAXMenuItemModifierNone' value='0'/>
<enum name='kAXMenuItemModifierOption' value='2'/>
<enum name='kAXMenuItemModifierShift' value='1'/>
<enum name='kAXPriorityHigh' value='90'/>
<enum name='kAXPriorityLow' value='10'/>
<enum name='kAXPriorityMedium' value='50'/>
<enum name='kAXUnderlineStyleDouble' value='9'/>
<enum name='kAXUnderlineStyleNone' value='0'/>
<enum name='kAXUnderlineStyleSingle' value='1'/>
<enum name='kAXUnderlineStyleThick' value='2'/>
<enum name='kAXValueAXErrorType' value='5'/>
<enum name='kAXValueCFRangeType' value='4'/>
<enum name='kAXValueCGPointType' value='1'/>
<enum name='kAXValueCGRectType' value='3'/>
<enum name='kAXValueCGSizeType' value='2'/>
<enum name='kAXValueIllegalType' value='0'/>
<enum name='kAlignAbsoluteCenter' value='5'/>
<enum name='kAlignBottom' value='3'/>
<enum name='kAlignBottomLeft' value='11'/>
<enum name='kAlignBottomRight' value='15'/>
<enum name='kAlignCenterBottom' value='7'/>
<enum name='kAlignCenterLeft' value='9'/>
<enum name='kAlignCenterRight' value='13'/>
<enum name='kAlignCenterTop' value='6'/>
<enum name='kAlignHorizontalCenter' value='4'/>
<enum name='kAlignLeft' value='8'/>
<enum name='kAlignNone' value='0'/>
<enum name='kAlignRight' value='12'/>
<enum name='kAlignTop' value='2'/>
<enum name='kAlignTopLeft' value='10'/>
<enum name='kAlignTopRight' value='14'/>
<enum name='kAlignVerticalCenter' value='1'/>
<enum name='kCurrentProcess' value='2'/>
<enum name='kHIShapeEnumerateInit' value='1'/>
<enum name='kHIShapeEnumerateRect' value='2'/>
<enum name='kHIShapeEnumerateTerminate' value='3'/>
<enum name='kHIShapeParseFromBottom' value='1'/>
<enum name='kHIShapeParseFromBottomRight' value='3'/>
<enum name='kHIShapeParseFromLeft' value='0'/>
<enum name='kHIShapeParseFromRight' value='2'/>
<enum name='kHIShapeParseFromTop' value='0'/>
<enum name='kHIShapeParseFromTopLeft' value='0'/>
<enum name='kICAttrLockedBit' value='0'/>
<enum name='kICAttrLockedMask' value='1'/>
<enum name='kICAttrNoChange' value='4294967295'/>
<enum name='kICAttrVolatileBit' value='1'/>
<enum name='kICAttrVolatileMask' value='2'/>
<enum name='kICComponentInterfaceVersion' value='262144'/>
<enum name='kICComponentInterfaceVersion0' value='0'/>
<enum name='kICComponentInterfaceVersion1' value='65536'/>
<enum name='kICComponentInterfaceVersion2' value='131072'/>
<enum name='kICComponentInterfaceVersion3' value='196608'/>
<enum name='kICComponentInterfaceVersion4' value='262144'/>
<enum name='kICComponentVersion' value='0'/>
<enum name='kICCreator' value='1229144432'/>
<enum name='kICEditPreferenceEvent' value='1229144432'/>
<enum name='kICEditPreferenceEventClass' value='1229144432'/>
<enum name='kICFileSpecHeaderSize' value='106'/>
<enum name='kICFileType' value='1229144432'/>
<enum name='kICMapBinaryBit' value='0'/>
<enum name='kICMapBinaryMask' value='1'/>
<enum name='kICMapDataForkBit' value='2'/>
<enum name='kICMapDataForkMask' value='4'/>
<enum name='kICMapFixedLength' value='22'/>
<enum name='kICMapNotIncomingBit' value='4'/>
<enum name='kICMapNotIncomingMask' value='16'/>
<enum name='kICMapNotOutgoingBit' value='5'/>
<enum name='kICMapNotOutgoingMask' value='32'/>
<enum name='kICMapPostBit' value='3'/>
<enum name='kICMapPostMask' value='8'/>
<enum name='kICMapResourceForkBit' value='1'/>
<enum name='kICMapResourceForkMask' value='2'/>
<enum name='kICNilProfileID' value='0'/>
<enum name='kICNoUserInteractionBit' value='0'/>
<enum name='kICNoUserInteractionMask' value='1'/>
<enum name='kICNumVersion' value='1'/>
<enum name='kICServicesTCPBit' value='0'/>
<enum name='kICServicesTCPMask' value='1'/>
<enum name='kICServicesUDPBit' value='1'/>
<enum name='kICServicesUDPMask' value='2'/>
<enum name='kInternetEventClass' value='1196773964'/>
<enum name='kNoProcess' value='0'/>
<enum name='kPasteboardClientIsOwner' value='2'/>
<enum name='kPasteboardFlavorNoFlags' value='0'/>
<enum name='kPasteboardFlavorNotSaved' value='4'/>
<enum name='kPasteboardFlavorPromised' value='512'/>
<enum name='kPasteboardFlavorRequestOnly' value='8'/>
<enum name='kPasteboardFlavorSenderOnly' value='1'/>
<enum name='kPasteboardFlavorSenderTranslated' value='2'/>
<enum name='kPasteboardFlavorSystemTranslated' value='256'/>
<enum name='kPasteboardModified' value='1'/>
<enum name='kPasteboardStandardLocationTrash' value='1953657704'/>
<enum name='kPasteboardStandardLocationUnknown' value='1970170734'/>
<enum name='kPlotIconRefNoImage' value='2'/>
<enum name='kPlotIconRefNoMask' value='4'/>
<enum name='kPlotIconRefNormalFlags' value='0'/>
<enum name='kProcessDictionaryIncludeAllInformationMask' value='-1'/>
<enum name='kProcessTransformToBackgroundApplication' value='2'/>
<enum name='kProcessTransformToForegroundApplication' value='1'/>
<enum name='kProcessTransformToUIElementApplication' value='4'/>
<enum name='kQuitAtNormalTimeMask' value='2'/>
<enum name='kQuitBeforeFBAsQuitMask' value='4'/>
<enum name='kQuitBeforeNormalTimeMask' value='1'/>
<enum name='kQuitBeforeShellQuitsMask' value='8'/>
<enum name='kQuitBeforeTerminatorAppQuitsMask' value='16'/>
<enum name='kQuitNeverMask' value='32'/>
<enum name='kQuitNotQuitDuringInstallMask' value='256'/>
<enum name='kQuitNotQuitDuringLogoutMask' value='512'/>
<enum name='kQuitOptionsMask' value='127'/>
<enum name='kSelectorAll1BitData' value='16843009'/>
<enum name='kSelectorAll32BitData' value='134219784'/>
<enum name='kSelectorAll4BitData' value='33686018'/>
<enum name='kSelectorAll8BitData' value='67372036'/>
<enum name='kSelectorAllAvailableData' value='4294967295'/>
<enum name='kSelectorAllHugeData' value='4278190080'/>
<enum name='kSelectorAllLargeData' value='255'/>
<enum name='kSelectorAllMiniData' value='16711680'/>
<enum name='kSelectorAllSmallData' value='65280'/>
<enum name='kSelectorHuge1Bit' value='16777216'/>
<enum name='kSelectorHuge32Bit' value='134217728'/>
<enum name='kSelectorHuge4Bit' value='33554432'/>
<enum name='kSelectorHuge8Bit' value='67108864'/>
<enum name='kSelectorHuge8BitMask' value='268435456'/>
<enum name='kSelectorLarge1Bit' value='1'/>
<enum name='kSelectorLarge32Bit' value='8'/>
<enum name='kSelectorLarge4Bit' value='2'/>
<enum name='kSelectorLarge8Bit' value='4'/>
<enum name='kSelectorLarge8BitMask' value='16'/>
<enum name='kSelectorMini1Bit' value='65536'/>
<enum name='kSelectorMini4Bit' value='131072'/>
<enum name='kSelectorMini8Bit' value='262144'/>
<enum name='kSelectorSmall1Bit' value='256'/>
<enum name='kSelectorSmall32Bit' value='2048'/>
<enum name='kSelectorSmall4Bit' value='512'/>
<enum name='kSelectorSmall8Bit' value='1024'/>
<enum name='kSelectorSmall8BitMask' value='4096'/>
<enum name='kSetFrontProcessCausedByUser' value='2'/>
<enum name='kSetFrontProcessFrontWindowOnly' value='1'/>
<enum name='kSystemProcess' value='1'/>
<enum name='kTransformDisabled' value='1'/>
<enum name='kTransformLabel1' value='256'/>
<enum name='kTransformLabel2' value='512'/>
<enum name='kTransformLabel3' value='768'/>
<enum name='kTransformLabel4' value='1024'/>
<enum name='kTransformLabel5' value='1280'/>
<enum name='kTransformLabel6' value='1536'/>
<enum name='kTransformLabel7' value='1792'/>
<enum name='kTransformNone' value='0'/>
<enum name='kTransformOffline' value='2'/>
<enum name='kTransformOpen' value='3'/>
<enum name='kTransformSelected' value='16384'/>
<enum name='kTransformSelectedDisabled' value='16385'/>
<enum name='kTransformSelectedOffline' value='16386'/>
<enum name='kTransformSelectedOpen' value='16387'/>
<enum name='kTranslationDataTranslation' value='1'/>
<enum name='kTranslationFileTranslation' value='2'/>
<enum name='kUAZoomFocusTypeInsertionPoint' value='1'/>
<enum name='kUAZoomFocusTypeOther' value='0'/>
<enum name='keyAEAttaching' value='1098146664'/>
<enum name='keyEvtDev' value='7'/>
<enum name='keyICEditPreferenceDestination' value='1684370292'/>
<enum name='launchAllow24Bit' value='256'/>
<enum name='launchContinue' value='16384'/>
<enum name='launchDontSwitch' value='512'/>
<enum name='launchInhibitDaemon' value='128'/>
<enum name='launchNoFileFlags' value='2048'/>
<enum name='launchUseMinimum' value='1024'/>
<enum name='macDev' value='8'/>
<enum name='mode32BitCompatible' value='128'/>
<enum name='modeCanBackground' value='4096'/>
<enum name='modeControlPanel' value='524288'/>
<enum name='modeDeskAccessory' value='131072'/>
<enum name='modeDisplayManagerAware' value='4'/>
<enum name='modeDoesActivateOnFGSwitch' value='2048'/>
<enum name='modeGetAppDiedMsg' value='256'/>
<enum name='modeGetFrontClicks' value='512'/>
<enum name='modeHighLevelEventAware' value='64'/>
<enum name='modeLaunchDontSwitch' value='262144'/>
<enum name='modeLocalAndRemoteHLEvents' value='32'/>
<enum name='modeMultiLaunch' value='65536'/>
<enum name='modeNeedSuspendResume' value='16384'/>
<enum name='modeOnlyBackground' value='1024'/>
<enum name='modeReserved' value='16777216'/>
<enum name='modeStationeryAware' value='16'/>
<enum name='modeUseTextEditServices' value='8'/>
<enum name='noPasteboardPromiseKeeperErr' value='-25136'/>
<enum name='notPasteboardOwnerErr' value='-25135'/>
<enum name='nulDev' value='3'/>
<enum name='pasteDev' value='12'/>
<enum name='svAll1BitData' value='16843009'/>
<enum name='svAll4BitData' value='33686018'/>
<enum name='svAll8BitData' value='67372036'/>
<enum name='svAllAvailableData' value='4294967295'/>
<enum name='svAllLargeData' value='255'/>
<enum name='svAllMiniData' value='16711680'/>
<enum name='svAllSmallData' value='65280'/>
<enum name='svLarge1Bit' value='1'/>
<enum name='svLarge4Bit' value='2'/>
<enum name='svLarge8Bit' value='4'/>
<enum name='svMini1Bit' value='65536'/>
<enum name='svMini4Bit' value='131072'/>
<enum name='svMini8Bit' value='262144'/>
<enum name='svSmall1Bit' value='256'/>
<enum name='svSmall4Bit' value='512'/>
<enum name='svSmall8Bit' value='1024'/>
<enum name='ttDisabled' value='1'/>
<enum name='ttLabel1' value='256'/>
<enum name='ttLabel2' value='512'/>
<enum name='ttLabel3' value='768'/>
<enum name='ttLabel4' value='1024'/>
<enum name='ttLabel5' value='1280'/>
<enum name='ttLabel6' value='1536'/>
<enum name='ttLabel7' value='1792'/>
<enum name='ttNone' value='0'/>
<enum name='ttOffline' value='2'/>
<enum name='ttOpen' value='3'/>
<enum name='ttSelected' value='16384'/>
<enum name='ttSelectedDisabled' value='16385'/>
<enum name='ttSelectedOffline' value='16386'/>
<enum name='ttSelectedOpen' value='16387'/>
<enum name='undoDev' value='9'/>
<enum name='updateDev' value='4'/>
<function name='AXAPIEnabled'>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='AXIsProcessTrusted'>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='AXIsProcessTrustedWithOptions'>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='AXMakeProcessTrusted'>
<arg declared_type='CFStringRef' name='executablePath' type='^{__CFString=}'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXObserverAddNotification'>
<arg declared_type='AXObserverRef' name='observer' type='^{__AXObserver=}'/>
<arg declared_type='AXUIElementRef' name='element' type='^{__AXUIElement=}'/>
<arg declared_type='CFStringRef' name='notification' type='^{__CFString=}'/>
<arg declared_type='void*' name='refcon' type='^v'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXObserverCreate'>
<arg declared_type='pid_t' name='application' type='i'/>
<arg declared_type='AXObserverCallback' function_pointer='true' name='callback' type='^?'>
<arg declared_type='AXObserverRef' type='^{__AXObserver=}'/>
<arg declared_type='AXUIElementRef' type='^{__AXUIElement=}'/>
<arg declared_type='CFStringRef' type='^{__CFString=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='AXObserverRef*' name='outObserver' type='^^{__AXObserver}'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXObserverCreateWithInfoCallback'>
<arg declared_type='pid_t' name='application' type='i'/>
<arg declared_type='AXObserverCallbackWithInfo' function_pointer='true' name='callback' type='^?'>
<arg declared_type='AXObserverRef' type='^{__AXObserver=}'/>
<arg declared_type='AXUIElementRef' type='^{__AXUIElement=}'/>
<arg declared_type='CFStringRef' type='^{__CFString=}'/>
<arg declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='AXObserverRef*' name='outObserver' type='^^{__AXObserver}'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXObserverGetRunLoopSource'>
<arg declared_type='AXObserverRef' name='observer' type='^{__AXObserver=}'/>
<retval declared_type='CFRunLoopSourceRef' type='^{__CFRunLoopSource=}'/>
</function>
<function name='AXObserverGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='AXObserverRemoveNotification'>
<arg declared_type='AXObserverRef' name='observer' type='^{__AXObserver=}'/>
<arg declared_type='AXUIElementRef' name='element' type='^{__AXUIElement=}'/>
<arg declared_type='CFStringRef' name='notification' type='^{__CFString=}'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXUIElementCopyActionDescription'>
<arg declared_type='AXUIElementRef' name='element' type='^{__AXUIElement=}'/>
<arg declared_type='CFStringRef' name='action' type='^{__CFString=}'/>
<arg declared_type='CFStringRef*' name='description' type='^^{__CFString}'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXUIElementCopyActionNames'>
<arg declared_type='AXUIElementRef' name='element' type='^{__AXUIElement=}'/>
<arg declared_type='CFArrayRef*' name='names' type='^^{__CFArray}'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXUIElementCopyAttributeNames'>
<arg declared_type='AXUIElementRef' name='element' type='^{__AXUIElement=}'/>
<arg declared_type='CFArrayRef*' name='names' type='^^{__CFArray}'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXUIElementCopyAttributeValue'>
<arg declared_type='AXUIElementRef' name='element' type='^{__AXUIElement=}'/>
<arg declared_type='CFStringRef' name='attribute' type='^{__CFString=}'/>
<arg declared_type='CFTypeRef*' name='value' type='^^v'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXUIElementCopyAttributeValues'>
<arg declared_type='AXUIElementRef' name='element' type='^{__AXUIElement=}'/>
<arg declared_type='CFStringRef' name='attribute' type='^{__CFString=}'/>
<arg declared_type='CFIndex' name='index' type='l' type64='q'/>
<arg declared_type='CFIndex' name='maxValues' type='l' type64='q'/>
<arg declared_type='CFArrayRef*' name='values' type='^^{__CFArray}'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXUIElementCopyElementAtPosition'>
<arg declared_type='AXUIElementRef' name='application' type='^{__AXUIElement=}'/>
<arg declared_type='float' name='x' type='f'/>
<arg declared_type='float' name='y' type='f'/>
<arg declared_type='AXUIElementRef*' name='element' type='^^{__AXUIElement}'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXUIElementCopyMultipleAttributeValues'>
<arg declared_type='AXUIElementRef' name='element' type='^{__AXUIElement=}'/>
<arg declared_type='CFArrayRef' name='attributes' type='^{__CFArray=}'/>
<arg declared_type='AXCopyMultipleAttributeOptions' name='options' type='L' type64='I'/>
<arg declared_type='CFArrayRef*' name='values' type='^^{__CFArray}'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXUIElementCopyParameterizedAttributeNames'>
<arg declared_type='AXUIElementRef' name='element' type='^{__AXUIElement=}'/>
<arg declared_type='CFArrayRef*' name='names' type='^^{__CFArray}'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXUIElementCopyParameterizedAttributeValue'>
<arg declared_type='AXUIElementRef' name='element' type='^{__AXUIElement=}'/>
<arg declared_type='CFStringRef' name='parameterizedAttribute' type='^{__CFString=}'/>
<arg declared_type='CFTypeRef' name='parameter' type='@'/>
<arg declared_type='CFTypeRef*' name='result' type='^^v'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXUIElementCreateApplication'>
<arg declared_type='pid_t' name='pid' type='i'/>
<retval already_retained='true' declared_type='AXUIElementRef' type='^{__AXUIElement=}'/>
</function>
<function name='AXUIElementCreateSystemWide'>
<retval already_retained='true' declared_type='AXUIElementRef' type='^{__AXUIElement=}'/>
</function>
<function name='AXUIElementGetAttributeValueCount'>
<arg declared_type='AXUIElementRef' name='element' type='^{__AXUIElement=}'/>
<arg declared_type='CFStringRef' name='attribute' type='^{__CFString=}'/>
<arg declared_type='CFIndex*' name='count' type='^i' type64='^q'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXUIElementGetPid'>
<arg declared_type='AXUIElementRef' name='element' type='^{__AXUIElement=}'/>
<arg declared_type='pid_t*' name='pid' type='^i'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXUIElementGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='AXUIElementIsAttributeSettable'>
<arg declared_type='AXUIElementRef' name='element' type='^{__AXUIElement=}'/>
<arg declared_type='CFStringRef' name='attribute' type='^{__CFString=}'/>
<arg declared_type='Boolean*' name='settable' type='^B'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXUIElementPerformAction'>
<arg declared_type='AXUIElementRef' name='element' type='^{__AXUIElement=}'/>
<arg declared_type='CFStringRef' name='action' type='^{__CFString=}'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXUIElementPostKeyboardEvent'>
<arg declared_type='AXUIElementRef' name='application' type='^{__AXUIElement=}'/>
<arg declared_type='CGCharCode' name='keyChar' type='S'/>
<arg declared_type='CGKeyCode' name='virtualKey' type='S'/>
<arg declared_type='Boolean' name='keyDown' type='B'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXUIElementSetAttributeValue'>
<arg declared_type='AXUIElementRef' name='element' type='^{__AXUIElement=}'/>
<arg declared_type='CFStringRef' name='attribute' type='^{__CFString=}'/>
<arg declared_type='CFTypeRef' name='value' type='@'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXUIElementSetMessagingTimeout'>
<arg declared_type='AXUIElementRef' name='element' type='^{__AXUIElement=}'/>
<arg declared_type='float' name='timeoutInSeconds' type='f'/>
<retval declared_type='AXError' type='l' type64='i'/>
</function>
<function name='AXValueCreate'>
<arg declared_type='AXValueType' name='theType' type='i'/>
<arg const='true' declared_type='void*' name='valuePtr' type='^v'/>
<retval already_retained='true' declared_type='AXValueRef' type='^{__AXValue=}'/>
</function>
<function name='AXValueGetType'>
<arg declared_type='AXValueRef' name='value' type='^{__AXValue=}'/>
<retval declared_type='AXValueType' type='i'/>
</function>
<function name='AXValueGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='AXValueGetValue'>
<arg declared_type='AXValueRef' name='value' type='^{__AXValue=}'/>
<arg declared_type='AXValueType' name='theType' type='i'/>
<arg declared_type='void*' name='valuePtr' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='CopyProcessName'>
<arg const='true' declared_type='ProcessSerialNumber*' name='psn' type='^{ProcessSerialNumber=II}'/>
<arg declared_type='CFStringRef*' name='name' type='^^{__CFString}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='DisposeIconActionUPP'>
<arg declared_type='IconActionUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='ResType' type='L' type64='I'/>
<arg declared_type='Handle*' type='^^*'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeIconGetterUPP'>
<arg declared_type='IconGetterUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='ResType' type='L' type64='I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Handle' type='^*'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='ExitToShell'>
<retval declared_type='void' type='v'/>
</function>
<function name='GetCurrentProcess'>
<arg declared_type='ProcessSerialNumber*' name='PSN' type='^{ProcessSerialNumber=II}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetFrontProcess'>
<arg declared_type='ProcessSerialNumber*' name='PSN' type='^{ProcessSerialNumber=II}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetIconFamilyData'>
<arg declared_type='IconFamilyHandle' name='iconFamily' type='^^{IconFamilyResource}'/>
<arg declared_type='OSType' name='iconType' type='L' type64='I'/>
<arg declared_type='Handle' name='h' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetIconRefVariant'>
<arg declared_type='IconRef' name='inIconRef' type='^{OpaqueIconRef=}'/>
<arg declared_type='OSType' name='inVariant' type='L' type64='I'/>
<arg declared_type='IconTransformType*' name='outTransform' type='^s'/>
<retval declared_type='IconRef' type='^{OpaqueIconRef=}'/>
</function>
<function name='GetNextProcess'>
<arg declared_type='ProcessSerialNumber*' name='PSN' type='^{ProcessSerialNumber=II}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetProcessBundleLocation'>
<arg const='true' declared_type='ProcessSerialNumber*' name='psn' type='^{ProcessSerialNumber=II}'/>
<arg declared_type='FSRef*' name='location' type='^{FSRef=[80C]}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='GetProcessForPID'>
<arg declared_type='pid_t' name='pid' type='i'/>
<arg declared_type='ProcessSerialNumber*' name='psn' type='^{ProcessSerialNumber=II}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='GetProcessInformation'>
<arg const='true' declared_type='ProcessSerialNumber*' name='PSN' type='^{ProcessSerialNumber=II}'/>
<arg declared_type='ProcessInfoRec*' name='info' type='^{ProcessInfoRec=I*{ProcessSerialNumber=II}III*II{ProcessSerialNumber=II}II^{FSSpec}}' type64='^{ProcessInfoRec=I*{ProcessSerialNumber=II}III*II{ProcessSerialNumber=II}II^{FSRef}}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetProcessPID'>
<arg const='true' declared_type='ProcessSerialNumber*' name='psn' type='^{ProcessSerialNumber=II}'/>
<arg declared_type='pid_t*' name='pid' type='^i'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='HIShapeContainsPoint'>
<arg declared_type='HIShapeRef' name='inShape' type='^{__HIShape=}'/>
<arg const='true' declared_type='CGPoint*' name='inPoint' type='^{CGPoint=ff}' type64='^{CGPoint=dd}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='HIShapeCreateCopy'>
<arg declared_type='HIShapeRef' name='inShape' type='^{__HIShape=}'/>
<retval already_retained='true' declared_type='HIShapeRef' type='^{__HIShape=}'/>
</function>
<function name='HIShapeCreateDifference'>
<arg declared_type='HIShapeRef' name='inShape1' type='^{__HIShape=}'/>
<arg declared_type='HIShapeRef' name='inShape2' type='^{__HIShape=}'/>
<retval already_retained='true' declared_type='HIShapeRef' type='^{__HIShape=}'/>
</function>
<function name='HIShapeCreateEmpty'>
<retval already_retained='true' declared_type='HIShapeRef' type='^{__HIShape=}'/>
</function>
<function name='HIShapeCreateIntersection'>
<arg declared_type='HIShapeRef' name='inShape1' type='^{__HIShape=}'/>
<arg declared_type='HIShapeRef' name='inShape2' type='^{__HIShape=}'/>
<retval already_retained='true' declared_type='HIShapeRef' type='^{__HIShape=}'/>
</function>
<function name='HIShapeCreateMutable'>
<retval already_retained='true' declared_type='HIMutableShapeRef' type='^{__HIShape=}'/>
</function>
<function name='HIShapeCreateMutableCopy'>
<arg declared_type='HIShapeRef' name='inOrig' type='^{__HIShape=}'/>
<retval already_retained='true' declared_type='HIMutableShapeRef' type='^{__HIShape=}'/>
</function>
<function name='HIShapeCreateMutableWithRect'>
<arg const='true' declared_type='CGRect*' name='inRect' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval already_retained='true' declared_type='HIMutableShapeRef' type='^{__HIShape=}'/>
</function>
<function name='HIShapeCreateUnion'>
<arg declared_type='HIShapeRef' name='inShape1' type='^{__HIShape=}'/>
<arg declared_type='HIShapeRef' name='inShape2' type='^{__HIShape=}'/>
<retval already_retained='true' declared_type='HIShapeRef' type='^{__HIShape=}'/>
</function>
<function name='HIShapeCreateWithQDRgn'>
<arg declared_type='RgnHandle' name='inRgn' type='^{OpaqueRgnHandle=}'/>
<retval already_retained='true' declared_type='HIShapeRef' type='^{__HIShape=}'/>
</function>
<function name='HIShapeCreateWithRect'>
<arg const='true' declared_type='CGRect*' name='inRect' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval already_retained='true' declared_type='HIShapeRef' type='^{__HIShape=}'/>
</function>
<function name='HIShapeCreateXor'>
<arg declared_type='HIShapeRef' name='inShape1' type='^{__HIShape=}'/>
<arg declared_type='HIShapeRef' name='inShape2' type='^{__HIShape=}'/>
<retval already_retained='true' declared_type='HIShapeRef' type='^{__HIShape=}'/>
</function>
<function name='HIShapeDifference'>
<arg declared_type='HIShapeRef' name='inShape1' type='^{__HIShape=}'/>
<arg declared_type='HIShapeRef' name='inShape2' type='^{__HIShape=}'/>
<arg declared_type='HIMutableShapeRef' name='outResult' type='^{__HIShape=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='HIShapeEnumerate'>
<arg declared_type='HIShapeRef' name='inShape' type='^{__HIShape=}'/>
<arg declared_type='OptionBits' name='inOptions' type='L' type64='I'/>
<arg declared_type='HIShapeEnumerateProcPtr' function_pointer='true' name='inProc' type='^?'>
<arg declared_type='int' type='i'/>
<arg declared_type='HIShapeRef' type='^{__HIShape=}'/>
<arg const='true' declared_type='CGRect*' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg declared_type='void*' name='inRefcon' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='HIShapeGetAsQDRgn'>
<arg declared_type='HIShapeRef' name='inShape' type='^{__HIShape=}'/>
<arg declared_type='RgnHandle' name='outRgn' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='HIShapeGetBounds'>
<arg declared_type='HIShapeRef' name='inShape' type='^{__HIShape=}'/>
<arg declared_type='CGRect*' name='outRect' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type='CGRect*' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='HIShapeGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='HIShapeInset'>
<arg declared_type='HIMutableShapeRef' name='inShape' type='^{__HIShape=}'/>
<arg declared_type='CGFloat' name='inDX' type='f' type64='d'/>
<arg declared_type='CGFloat' name='inDY' type='f' type64='d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='HIShapeIntersect'>
<arg declared_type='HIShapeRef' name='inShape1' type='^{__HIShape=}'/>
<arg declared_type='HIShapeRef' name='inShape2' type='^{__HIShape=}'/>
<arg declared_type='HIMutableShapeRef' name='outResult' type='^{__HIShape=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='HIShapeIntersectsRect'>
<arg declared_type='HIShapeRef' name='inShape' type='^{__HIShape=}'/>
<arg const='true' declared_type='CGRect*' name='inRect' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='HIShapeIsEmpty'>
<arg declared_type='HIShapeRef' name='inShape' type='^{__HIShape=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='HIShapeIsRectangular'>
<arg declared_type='HIShapeRef' name='inShape' type='^{__HIShape=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='HIShapeOffset'>
<arg declared_type='HIMutableShapeRef' name='inShape' type='^{__HIShape=}'/>
<arg declared_type='CGFloat' name='inDX' type='f' type64='d'/>
<arg declared_type='CGFloat' name='inDY' type='f' type64='d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='HIShapeReplacePathInCGContext'>
<arg declared_type='HIShapeRef' name='inShape' type='^{__HIShape=}'/>
<arg declared_type='CGContextRef' name='inContext' type='^{CGContext=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='HIShapeSetEmpty'>
<arg declared_type='HIMutableShapeRef' name='inShape' type='^{__HIShape=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='HIShapeSetWithShape'>
<arg declared_type='HIMutableShapeRef' name='inDestShape' type='^{__HIShape=}'/>
<arg declared_type='HIShapeRef' name='inSrcShape' type='^{__HIShape=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='HIShapeUnion'>
<arg declared_type='HIShapeRef' name='inShape1' type='^{__HIShape=}'/>
<arg declared_type='HIShapeRef' name='inShape2' type='^{__HIShape=}'/>
<arg declared_type='HIMutableShapeRef' name='outResult' type='^{__HIShape=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='HIShapeUnionWithRect'>
<arg declared_type='HIMutableShapeRef' name='inShape' type='^{__HIShape=}'/>
<arg const='true' declared_type='CGRect*' name='inRect' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='HIShapeXor'>
<arg declared_type='HIShapeRef' name='inShape1' type='^{__HIShape=}'/>
<arg declared_type='HIShapeRef' name='inShape2' type='^{__HIShape=}'/>
<arg declared_type='HIMutableShapeRef' name='outResult' type='^{__HIShape=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICAddMapEntry'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='Handle' name='entries' type='^*'/>
<arg const='true' declared_type='ICMapEntry*' name='entry' type='^{ICMapEntry=sssIIIi[256C][256C][256C][256C][256C]}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICAddProfile'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='ICProfileID' name='prototypeID' type='l' type64='i'/>
<arg declared_type='ICProfileID*' name='newID' type='^i'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICBegin'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='ICPerm' name='perm' type='C'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICCountMapEntries'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='Handle' name='entries' type='^*'/>
<arg declared_type='long*' name='count' type='^l' type64='^q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICCountPref'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='long*' name='count' type='^l' type64='^q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICCountProfiles'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='long*' name='count' type='^l' type64='^q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICCreateGURLEvent'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='OSType' name='helperCreator' type='L' type64='I'/>
<arg declared_type='Handle' name='urlH' type='^*'/>
<arg declared_type='AppleEvent*' name='theEvent' type='^{AEDesc=I^^{OpaqueAEDataStorageType}}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICDeleteMapEntry'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='Handle' name='entries' type='^*'/>
<arg declared_type='long' name='pos' type='l' type64='q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICDeletePref'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='ConstStr255Param' name='key' type='*'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICDeleteProfile'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='ICProfileID' name='thisID' type='l' type64='i'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICEditPreferences'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='ConstStr255Param' name='key' type='*'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICEnd'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICFindPrefHandle'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='ConstStr255Param' name='key' type='*'/>
<arg declared_type='ICAttr*' name='attr' type='^I'/>
<arg declared_type='Handle' name='prefh' type='^*'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICGetConfigName'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='Boolean' name='longname' type='B'/>
<arg declared_type='unsigned char*' name='name' type='*'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICGetCurrentProfile'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='ICProfileID*' name='currentID' type='^i'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICGetDefaultPref'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='ConstStr255Param' name='key' type='*'/>
<arg declared_type='Handle' name='prefH' type='^*'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICGetIndMapEntry'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='Handle' name='entries' type='^*'/>
<arg declared_type='long' name='index' type='l' type64='q'/>
<arg declared_type='long*' name='pos' type='^l' type64='^q'/>
<arg declared_type='ICMapEntry*' name='entry' type='^{ICMapEntry=sssIIIi[256C][256C][256C][256C][256C]}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICGetIndPref'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='long' name='index' type='l' type64='q'/>
<arg declared_type='unsigned char*' name='key' type='*'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICGetIndProfile'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='long' name='index' type='l' type64='q'/>
<arg declared_type='ICProfileID*' name='thisID' type='^i'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICGetMapEntry'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='Handle' name='entries' type='^*'/>
<arg declared_type='long' name='pos' type='l' type64='q'/>
<arg declared_type='ICMapEntry*' name='entry' type='^{ICMapEntry=sssIIIi[256C][256C][256C][256C][256C]}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICGetPerm'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='ICPerm*' name='perm' type='*'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICGetPref'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='ConstStr255Param' name='key' type='*'/>
<arg declared_type='ICAttr*' name='attr' type='^I'/>
<arg declared_type='void*' name='buf' type='^v'/>
<arg declared_type='long*' name='size' type='^l' type64='^q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICGetPrefHandle'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='ConstStr255Param' name='key' type='*'/>
<arg declared_type='ICAttr*' name='attr' type='^I'/>
<arg declared_type='Handle*' name='prefh' type='^^*'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICGetProfileName'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='ICProfileID' name='thisID' type='l' type64='i'/>
<arg declared_type='unsigned char*' name='name' type='*'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICGetSeed'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='long*' name='seed' type='^l' type64='^q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICGetVersion'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='long' name='whichVersion' type='l' type64='q'/>
<arg declared_type='UInt32*' name='version' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICLaunchURL'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='ConstStr255Param' name='hint' type='*'/>
<arg const='true' declared_type='void*' name='data' type='^v'/>
<arg declared_type='long' name='len' type='l' type64='q'/>
<arg declared_type='long*' name='selStart' type='^l' type64='^q'/>
<arg declared_type='long*' name='selEnd' type='^l' type64='^q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICMapEntriesFilename'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='Handle' name='entries' type='^*'/>
<arg declared_type='ConstStr255Param' name='filename' type='*'/>
<arg declared_type='ICMapEntry*' name='entry' type='^{ICMapEntry=sssIIIi[256C][256C][256C][256C][256C]}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICMapEntriesTypeCreator'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='Handle' name='entries' type='^*'/>
<arg declared_type='OSType' name='fType' type='L' type64='I'/>
<arg declared_type='OSType' name='fCreator' type='L' type64='I'/>
<arg declared_type='ConstStr255Param' name='filename' type='*'/>
<arg declared_type='ICMapEntry*' name='entry' type='^{ICMapEntry=sssIIIi[256C][256C][256C][256C][256C]}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICMapFilename'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='ConstStr255Param' name='filename' type='*'/>
<arg declared_type='ICMapEntry*' name='entry' type='^{ICMapEntry=sssIIIi[256C][256C][256C][256C][256C]}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICMapTypeCreator'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='OSType' name='fType' type='L' type64='I'/>
<arg declared_type='OSType' name='fCreator' type='L' type64='I'/>
<arg declared_type='ConstStr255Param' name='filename' type='*'/>
<arg declared_type='ICMapEntry*' name='entry' type='^{ICMapEntry=sssIIIi[256C][256C][256C][256C][256C]}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICParseURL'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='ConstStr255Param' name='hint' type='*'/>
<arg const='true' declared_type='void*' name='data' type='^v'/>
<arg declared_type='long' name='len' type='l' type64='q'/>
<arg declared_type='long*' name='selStart' type='^l' type64='^q'/>
<arg declared_type='long*' name='selEnd' type='^l' type64='^q'/>
<arg declared_type='Handle' name='url' type='^*'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICSendGURLEvent'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='AppleEvent*' name='theEvent' type='^{AEDesc=I^^{OpaqueAEDataStorageType}}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICSetCurrentProfile'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='ICProfileID' name='newID' type='l' type64='i'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICSetMapEntry'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='Handle' name='entries' type='^*'/>
<arg declared_type='long' name='pos' type='l' type64='q'/>
<arg const='true' declared_type='ICMapEntry*' name='entry' type='^{ICMapEntry=sssIIIi[256C][256C][256C][256C][256C]}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICSetPref'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='ConstStr255Param' name='key' type='*'/>
<arg declared_type='ICAttr' name='attr' type='L' type64='I'/>
<arg const='true' declared_type='void*' name='buf' type='^v'/>
<arg declared_type='long' name='size' type='l' type64='q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICSetPrefHandle'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='ConstStr255Param' name='key' type='*'/>
<arg declared_type='ICAttr' name='attr' type='L' type64='I'/>
<arg declared_type='Handle' name='prefh' type='^*'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICSetProfileName'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<arg declared_type='ICProfileID' name='thisID' type='l' type64='i'/>
<arg declared_type='ConstStr255Param' name='name' type='*'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICStart'>
<arg declared_type='ICInstance*' name='inst' type='^^{OpaqueICInstance}'/>
<arg declared_type='OSType' name='signature' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ICStop'>
<arg declared_type='ICInstance' name='inst' type='^{OpaqueICInstance=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='IconRefContainsCGPoint'>
<arg const='true' declared_type='CGPoint*' name='testPt' type='^{CGPoint=ff}' type64='^{CGPoint=dd}'/>
<arg const='true' declared_type='CGRect*' name='iconRect' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type='IconAlignmentType' name='align' type='s'/>
<arg declared_type='IconServicesUsageFlags' name='iconServicesUsageFlags' type='L' type64='I'/>
<arg declared_type='IconRef' name='theIconRef' type='^{OpaqueIconRef=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='IconRefIntersectsCGRect'>
<arg const='true' declared_type='CGRect*' name='testRect' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg const='true' declared_type='CGRect*' name='iconRect' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type='IconAlignmentType' name='align' type='s'/>
<arg declared_type='IconServicesUsageFlags' name='iconServicesUsageFlags' type='L' type64='I'/>
<arg declared_type='IconRef' name='theIconRef' type='^{OpaqueIconRef=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='IconRefToHIShape'>
<arg const='true' declared_type='CGRect*' name='iconRect' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type='IconAlignmentType' name='align' type='s'/>
<arg declared_type='IconServicesUsageFlags' name='iconServicesUsageFlags' type='L' type64='I'/>
<arg declared_type='IconRef' name='theIconRef' type='^{OpaqueIconRef=}'/>
<retval declared_type='HIShapeRef' type='^{__HIShape=}'/>
</function>
<function name='IconRefToIconFamily'>
<arg declared_type='IconRef' name='theIconRef' type='^{OpaqueIconRef=}'/>
<arg declared_type='IconSelectorValue' name='whichIcons' type='L' type64='I'/>
<arg declared_type='IconFamilyHandle*' name='iconFamily' type='^^^{IconFamilyResource}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeIconActionUPP'>
<arg declared_type='ResType' name='theType' type='L' type64='I'/>
<arg declared_type='Handle*' name='theIcon' type='^^*'/>
<arg declared_type='void*' name='yourDataPtr' type='^v'/>
<arg declared_type='IconActionUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='ResType' type='L' type64='I'/>
<arg declared_type='Handle*' type='^^*'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeIconGetterUPP'>
<arg declared_type='ResType' name='theType' type='L' type64='I'/>
<arg declared_type='void*' name='yourDataPtr' type='^v'/>
<arg declared_type='IconGetterUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='ResType' type='L' type64='I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Handle' type='^*'/>
</arg>
<retval declared_type='Handle' type='^*'/>
</function>
<function name='IsIconRefMaskEmpty'>
<arg declared_type='IconRef' name='iconRef' type='^{OpaqueIconRef=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='IsProcessVisible'>
<arg const='true' declared_type='ProcessSerialNumber*' name='psn' type='^{ProcessSerialNumber=II}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='KillProcess'>
<arg const='true' declared_type='ProcessSerialNumber*' name='inProcess' type='^{ProcessSerialNumber=II}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='LaunchApplication'>
<arg declared_type='LaunchPBPtr' name='LaunchParams' type='^{LaunchParamBlockRec=ISSISS^{FSSpec}{ProcessSerialNumber=II}III^{AppParameters}}' type64='^{LaunchParamBlockRec=ISSISS^{FSRef}{ProcessSerialNumber=II}III^{AppParameters}}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='NewIconActionUPP'>
<arg declared_type='IconActionProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='ResType' type='L' type64='I'/>
<arg declared_type='Handle*' type='^^*'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='IconActionUPP' function_pointer='true' type='^?'>
<arg declared_type='ResType' type='L' type64='I'/>
<arg declared_type='Handle*' type='^^*'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewIconGetterUPP'>
<arg declared_type='IconGetterProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='ResType' type='L' type64='I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Handle' type='^*'/>
</arg>
<retval declared_type='IconGetterUPP' function_pointer='true' type='^?'>
<arg declared_type='ResType' type='L' type64='I'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Handle' type='^*'/>
</retval>
</function>
<function name='PasteboardClear'>
<arg declared_type='PasteboardRef' name='inPasteboard' type='^{OpaquePasteboardRef=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PasteboardCopyItemFlavorData'>
<arg declared_type='PasteboardRef' name='inPasteboard' type='^{OpaquePasteboardRef=}'/>
<arg declared_type='PasteboardItemID' name='inItem' type='^v'/>
<arg declared_type='CFStringRef' name='inFlavorType' type='^{__CFString=}'/>
<arg declared_type='CFDataRef*' name='outData' type='^^{__CFData}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PasteboardCopyItemFlavors'>
<arg declared_type='PasteboardRef' name='inPasteboard' type='^{OpaquePasteboardRef=}'/>
<arg declared_type='PasteboardItemID' name='inItem' type='^v'/>
<arg declared_type='CFArrayRef*' name='outFlavorTypes' type='^^{__CFArray}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PasteboardCopyName'>
<arg declared_type='PasteboardRef' name='inPasteboard' type='^{OpaquePasteboardRef=}'/>
<arg declared_type='CFStringRef*' name='outName' type='^^{__CFString}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PasteboardCopyPasteLocation'>
<arg declared_type='PasteboardRef' name='inPasteboard' type='^{OpaquePasteboardRef=}'/>
<arg declared_type='CFURLRef*' name='outPasteLocation' type='^^{__CFURL}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PasteboardCreate'>
<arg declared_type='CFStringRef' name='inName' type='^{__CFString=}'/>
<arg declared_type='PasteboardRef*' name='outPasteboard' type='^^{OpaquePasteboardRef}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PasteboardGetItemCount'>
<arg declared_type='PasteboardRef' name='inPasteboard' type='^{OpaquePasteboardRef=}'/>
<arg declared_type='ItemCount*' name='outItemCount' type='^I' type64='^Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PasteboardGetItemFlavorFlags'>
<arg declared_type='PasteboardRef' name='inPasteboard' type='^{OpaquePasteboardRef=}'/>
<arg declared_type='PasteboardItemID' name='inItem' type='^v'/>
<arg declared_type='CFStringRef' name='inFlavorType' type='^{__CFString=}'/>
<arg declared_type='PasteboardFlavorFlags*' name='outFlags' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PasteboardGetItemIdentifier'>
<arg declared_type='PasteboardRef' name='inPasteboard' type='^{OpaquePasteboardRef=}'/>
<arg declared_type='CFIndex' name='inIndex' type='l' type64='q'/>
<arg declared_type='PasteboardItemID*' name='outItem' type='^^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PasteboardGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='PasteboardPutItemFlavor'>
<arg declared_type='PasteboardRef' name='inPasteboard' type='^{OpaquePasteboardRef=}'/>
<arg declared_type='PasteboardItemID' name='inItem' type='^v'/>
<arg declared_type='CFStringRef' name='inFlavorType' type='^{__CFString=}'/>
<arg declared_type='CFDataRef' name='inData' type='^{__CFData=}'/>
<arg declared_type='PasteboardFlavorFlags' name='inFlags' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PasteboardResolvePromises'>
<arg declared_type='PasteboardRef' name='inPasteboard' type='^{OpaquePasteboardRef=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PasteboardSetPasteLocation'>
<arg declared_type='PasteboardRef' name='inPasteboard' type='^{OpaquePasteboardRef=}'/>
<arg declared_type='CFURLRef' name='inPasteLocation' type='^{__CFURL=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PasteboardSetPromiseKeeper'>
<arg declared_type='PasteboardRef' name='inPasteboard' type='^{OpaquePasteboardRef=}'/>
<arg declared_type='PasteboardPromiseKeeperProcPtr' function_pointer='true' name='inPromiseKeeper' type='^?'>
<arg declared_type='PasteboardRef' type='^{OpaquePasteboardRef=}'/>
<arg declared_type='PasteboardItemID' type='^v'/>
<arg declared_type='CFStringRef' type='^{__CFString=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<arg declared_type='void*' name='inContext' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PasteboardSynchronize'>
<arg declared_type='PasteboardRef' name='inPasteboard' type='^{OpaquePasteboardRef=}'/>
<retval declared_type='PasteboardSyncFlags' type='L' type64='I'/>
</function>
<function name='PlotIconRefInContext'>
<arg declared_type='CGContextRef' name='inContext' type='^{CGContext=}'/>
<arg const='true' declared_type='CGRect*' name='inRect' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type='IconAlignmentType' name='inAlign' type='s'/>
<arg declared_type='IconTransformType' name='inTransform' type='s'/>
<arg const='true' declared_type='RGBColor*' name='inLabelColor' type='^{RGBColor=SSS}'/>
<arg declared_type='PlotIconRefFlags' name='inFlags' type='L' type64='I'/>
<arg declared_type='IconRef' name='inIconRef' type='^{OpaqueIconRef=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ProcessInformationCopyDictionary'>
<arg const='true' declared_type='ProcessSerialNumber*' name='PSN' type='^{ProcessSerialNumber=II}'/>
<arg declared_type='UInt32' name='infoToReturn' type='L' type64='I'/>
<retval already_retained='true' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
</function>
<function name='SameProcess'>
<arg const='true' declared_type='ProcessSerialNumber*' name='PSN1' type='^{ProcessSerialNumber=II}'/>
<arg const='true' declared_type='ProcessSerialNumber*' name='PSN2' type='^{ProcessSerialNumber=II}'/>
<arg declared_type='Boolean*' name='result' type='^B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetFrontProcess'>
<arg const='true' declared_type='ProcessSerialNumber*' name='PSN' type='^{ProcessSerialNumber=II}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetFrontProcessWithOptions'>
<arg const='true' declared_type='ProcessSerialNumber*' name='inProcess' type='^{ProcessSerialNumber=II}'/>
<arg declared_type='OptionBits' name='inOptions' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='SetIconFamilyData'>
<arg declared_type='IconFamilyHandle' name='iconFamily' type='^^{IconFamilyResource}'/>
<arg declared_type='OSType' name='iconType' type='L' type64='I'/>
<arg declared_type='Handle' name='h' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='ShowHideProcess'>
<arg const='true' declared_type='ProcessSerialNumber*' name='psn' type='^{ProcessSerialNumber=II}'/>
<arg declared_type='Boolean' name='visible' type='B'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='TransformProcessType'>
<arg const='true' declared_type='ProcessSerialNumber*' name='psn' type='^{ProcessSerialNumber=II}'/>
<arg declared_type='ProcessApplicationTransformState' name='transformState' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='TranslationCopyDestinationType'>
<arg declared_type='TranslationRef' name='inTranslation' type='^{OpaqueTranslationRef=}'/>
<arg declared_type='CFStringRef*' name='outDestinationType' type='^^{__CFString}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='TranslationCopySourceType'>
<arg declared_type='TranslationRef' name='inTranslation' type='^{OpaqueTranslationRef=}'/>
<arg declared_type='CFStringRef*' name='outSourceType' type='^^{__CFString}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='TranslationCreate'>
<arg declared_type='CFStringRef' name='inSourceType' type='^{__CFString=}'/>
<arg declared_type='CFStringRef' name='inDestinationType' type='^{__CFString=}'/>
<arg declared_type='TranslationFlags' name='inTranslationFlags' type='L' type64='I'/>
<arg declared_type='TranslationRef*' name='outTranslation' type='^^{OpaqueTranslationRef}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='TranslationCreateWithSourceArray'>
<arg declared_type='CFArrayRef' name='inSourceTypes' type='^{__CFArray=}'/>
<arg declared_type='TranslationFlags' name='inTranslationFlags' type='L' type64='I'/>
<arg declared_type='CFArrayRef*' name='outDestinationTypes' type='^^{__CFArray}'/>
<arg declared_type='CFDictionaryRef*' name='outTranslations' type='^^{__CFDictionary}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='TranslationGetTranslationFlags'>
<arg declared_type='TranslationRef' name='inTranslation' type='^{OpaqueTranslationRef=}'/>
<arg declared_type='TranslationFlags*' name='outTranslationFlags' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='TranslationGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='TranslationPerformForData'>
<arg declared_type='TranslationRef' name='inTranslation' type='^{OpaqueTranslationRef=}'/>
<arg declared_type='CFDataRef' name='inSourceData' type='^{__CFData=}'/>
<arg declared_type='CFDataRef*' name='outDestinationData' type='^^{__CFData}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='TranslationPerformForFile'>
<arg declared_type='TranslationRef' name='inTranslation' type='^{OpaqueTranslationRef=}'/>
<arg const='true' declared_type='FSRef*' name='inSourceFile' type='^{FSRef=[80C]}'/>
<arg const='true' declared_type='FSRef*' name='inDestinationDirectory' type='^{FSRef=[80C]}'/>
<arg declared_type='CFStringRef' name='inDestinationName' type='^{__CFString=}'/>
<arg declared_type='FSRef*' name='outTranslatedFile' type='^{FSRef=[80C]}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='TranslationPerformForURL'>
<arg declared_type='TranslationRef' name='inTranslation' type='^{OpaqueTranslationRef=}'/>
<arg declared_type='CFURLRef' name='inSourceURL' type='^{__CFURL=}'/>
<arg declared_type='CFURLRef' name='inDestinationURL' type='^{__CFURL=}'/>
<arg declared_type='CFURLRef*' name='outTranslatedURL' type='^^{__CFURL}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='UAZoomChangeFocus'>
<arg const='true' declared_type='CGRect*' name='inRect' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg const='true' declared_type='CGRect*' name='inHighlightRect' type='^{CGRect={CGPoint=ff}{CGSize=ff}}' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type='UAZoomChangeFocusType' name='inType' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='UAZoomEnabled'>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='WakeUpProcess'>
<arg const='true' declared_type='ProcessSerialNumber*' name='PSN' type='^{ProcessSerialNumber=II}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function_alias name='MacGetCurrentProcess' original='GetCurrentProcess'/>
<depends_on path='/System/Library/Frameworks/Accelerate.framework'/>
<depends_on path='/System/Library/Frameworks/CoreGraphics.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/IOSurface.framework'/>
<cftype gettypeid_func='CGImageDestinationGetTypeID' name='CGImageDestinationRef' type='^{CGImageDestination=}'/>
<cftype gettypeid_func='CGImageMetadataGetTypeID' name='CGImageMetadataRef' type='^{CGImageMetadata=}'/>
<cftype gettypeid_func='CGImageMetadataTagGetTypeID' name='CGImageMetadataTagRef' type='^{CGImageMetadataTag=}'/>
<cftype gettypeid_func='CGImageSourceGetTypeID' name='CGImageSourceRef' type='^{CGImageSource=}'/>
<cftype gettypeid_func='CGImageMetadataGetTypeID' name='CGMutableImageMetadataRef' type='^{CGImageMetadata=}'/>
<constant const='true' declared_type='CFStringRef' name='kCFErrorDomainCGImageMetadata' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageDestinationBackgroundColor' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageDestinationDateTime' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageDestinationLossyCompressionQuality' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageDestinationMergeMetadata' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageDestinationMetadata' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageDestinationOrientation' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageMetadataEnumerateRecursively' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageMetadataNamespaceDublinCore' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageMetadataNamespaceExif' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageMetadataNamespaceExifAux' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageMetadataNamespaceExifEX' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageMetadataNamespaceIPTCCore' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageMetadataNamespacePhotoshop' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageMetadataNamespaceTIFF' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageMetadataNamespaceXMPBasic' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageMetadataNamespaceXMPRights' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageMetadataPrefixDublinCore' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageMetadataPrefixExif' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageMetadataPrefixExifAux' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageMetadataPrefixExifEX' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageMetadataPrefixIPTCCore' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageMetadataPrefixPhotoshop' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageMetadataPrefixTIFF' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageMetadataPrefixXMPBasic' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageMetadataPrefixXMPRights' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageMetadataShouldExcludeXMP' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageProperty8BIMDictionary' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageProperty8BIMLayerNames' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFCameraSerialNumber' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFContinuousDrive' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFDescription' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFDictionary' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFFirmware' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFFlashExposureComp' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFFocusMode' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFImageFileName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFImageName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFImageSerialNumber' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFLensMaxMM' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFLensMinMM' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFLensModel' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFMeasuredEV' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFMeteringMode' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFOwnerName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFRecordID' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFReleaseMethod' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFReleaseTiming' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFSelfTimingTime' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFShootingMode' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyCIFFWhiteBalanceIndex' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyColorModel' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyColorModelCMYK' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyColorModelGray' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyColorModelLab' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyColorModelRGB' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyDNGBackwardVersion' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyDNGCameraSerialNumber' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyDNGDictionary' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyDNGLensInfo' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyDNGLocalizedCameraModel' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyDNGUniqueCameraModel' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyDNGVersion' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyDPIHeight' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyDPIWidth' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyDepth' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifApertureValue' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifAuxDictionary' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifAuxFirmware' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifAuxFlashCompensation' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifAuxImageNumber' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifAuxLensID' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifAuxLensInfo' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifAuxLensModel' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifAuxLensSerialNumber' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifAuxOwnerName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifAuxSerialNumber' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifBodySerialNumber' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifBrightnessValue' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifCFAPattern' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifCameraOwnerName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifColorSpace' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifComponentsConfiguration' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifCompressedBitsPerPixel' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifContrast' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifCustomRendered' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifDateTimeDigitized' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifDateTimeOriginal' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifDeviceSettingDescription' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifDictionary' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifDigitalZoomRatio' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifExposureBiasValue' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifExposureIndex' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifExposureMode' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifExposureProgram' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifExposureTime' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifFNumber' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifFileSource' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifFlash' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifFlashEnergy' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifFlashPixVersion' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifFocalLenIn35mmFilm' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifFocalLength' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifFocalPlaneResolutionUnit' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifFocalPlaneXResolution' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifFocalPlaneYResolution' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifGainControl' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifGamma' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifISOSpeed' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifISOSpeedLatitudeyyy' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifISOSpeedLatitudezzz' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifISOSpeedRatings' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifImageUniqueID' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifLensMake' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifLensModel' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifLensSerialNumber' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifLensSpecification' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifLightSource' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifMakerNote' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifMaxApertureValue' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifMeteringMode' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifOECF' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifPixelXDimension' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifPixelYDimension' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifRecommendedExposureIndex' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifRelatedSoundFile' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifSaturation' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifSceneCaptureType' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifSceneType' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifSensingMethod' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifSensitivityType' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifSharpness' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifShutterSpeedValue' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifSpatialFrequencyResponse' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifSpectralSensitivity' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifStandardOutputSensitivity' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifSubjectArea' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifSubjectDistRange' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifSubjectDistance' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifSubjectLocation' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifSubsecTime' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifSubsecTimeDigitized' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifSubsecTimeOrginal' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifUserComment' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifVersion' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyExifWhiteBalance' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyFileSize' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGIFDelayTime' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGIFDictionary' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGIFHasGlobalColorMap' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGIFImageColorMap' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGIFLoopCount' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGIFUnclampedDelayTime' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSAltitude' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSAltitudeRef' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSAreaInformation' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSDOP' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSDateStamp' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSDestBearing' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSDestBearingRef' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSDestDistance' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSDestDistanceRef' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSDestLatitude' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSDestLatitudeRef' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSDestLongitude' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSDestLongitudeRef' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSDictionary' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSDifferental' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSImgDirection' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSImgDirectionRef' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSLatitude' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSLatitudeRef' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSLongitude' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSLongitudeRef' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSMapDatum' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSMeasureMode' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSProcessingMethod' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSSatellites' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSSpeed' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSSpeedRef' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSStatus' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSTimeStamp' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSTrack' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSTrackRef' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyGPSVersion' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyHasAlpha' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCActionAdvised' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCByline' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCBylineTitle' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCCaptionAbstract' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCCategory' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCCity' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCContact' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCContactInfoAddress' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCContactInfoCity' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCContactInfoCountry' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCContactInfoEmails' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCContactInfoPhones' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCContactInfoPostalCode' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCContactInfoStateProvince' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCContactInfoWebURLs' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCContentLocationCode' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCContentLocationName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCCopyrightNotice' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCCountryPrimaryLocationCode' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCCountryPrimaryLocationName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCCreatorContactInfo' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCCredit' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCDateCreated' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCDictionary' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCDigitalCreationDate' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCDigitalCreationTime' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCEditStatus' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCEditorialUpdate' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCExpirationDate' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCExpirationTime' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCFixtureIdentifier' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCHeadline' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCImageOrientation' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCImageType' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCKeywords' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCLanguageIdentifier' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCObjectAttributeReference' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCObjectCycle' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCObjectName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCObjectTypeReference' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCOriginalTransmissionReference' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCOriginatingProgram' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCProgramVersion' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCProvinceState' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCReferenceDate' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCReferenceNumber' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCReferenceService' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCReleaseDate' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCReleaseTime' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCRightsUsageTerms' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCScene' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCSource' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCSpecialInstructions' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCStarRating' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCSubLocation' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCSubjectReference' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCSupplementalCategory' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCTimeCreated' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCUrgency' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIPTCWriterEditor' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIsFloat' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyIsIndexed' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyJFIFDensityUnit' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyJFIFDictionary' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyJFIFIsProgressive' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyJFIFVersion' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyJFIFXDensity' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyJFIFYDensity' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerCanonAspectRatioInfo' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerCanonCameraSerialNumber' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerCanonContinuousDrive' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerCanonDictionary' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerCanonFirmware' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerCanonFlashExposureComp' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerCanonImageSerialNumber' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerCanonLensModel' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerCanonOwnerName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerFujiDictionary' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerMinoltaDictionary' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerNikonCameraSerialNumber' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerNikonColorMode' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerNikonDictionary' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerNikonDigitalZoom' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerNikonFlashExposureComp' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerNikonFlashSetting' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerNikonFocusDistance' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerNikonFocusMode' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerNikonISOSelection' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerNikonISOSetting' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerNikonImageAdjustment' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerNikonLensAdapter' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerNikonLensInfo' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerNikonLensType' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerNikonQuality' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerNikonSharpenMode' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerNikonShootingMode' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerNikonShutterCount' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerNikonWhiteBalanceMode' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerOlympusDictionary' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyMakerPentaxDictionary' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyOpenEXRAspectRatio' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyOpenEXRDictionary' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyOrientation' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyPNGAuthor' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyPNGChromaticities' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyPNGCopyright' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyPNGCreationTime' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyPNGDescription' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyPNGDictionary' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyPNGGamma' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyPNGInterlaceType' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyPNGModificationTime' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyPNGSoftware' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyPNGTitle' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyPNGXPixelsPerMeter' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyPNGYPixelsPerMeter' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyPNGsRGBIntent' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyPixelHeight' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyPixelWidth' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyProfileName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyRawDictionary' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyTIFFArtist' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyTIFFCompression' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyTIFFCopyright' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyTIFFDateTime' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyTIFFDictionary' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyTIFFDocumentName' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyTIFFHostComputer' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyTIFFImageDescription' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyTIFFMake' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyTIFFModel' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyTIFFOrientation' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyTIFFPhotometricInterpretation' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyTIFFPrimaryChromaticities' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyTIFFResolutionUnit' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyTIFFSoftware' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyTIFFTransferFunction' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyTIFFWhitePoint' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyTIFFXResolution' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImagePropertyTIFFYResolution' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageSourceCreateThumbnailFromImageAlways' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageSourceCreateThumbnailFromImageIfAbsent' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageSourceCreateThumbnailWithTransform' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageSourceShouldAllowFloat' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageSourceShouldCache' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageSourceShouldCacheImmediately' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageSourceThumbnailMaxPixelSize' type='^{__CFString=}'/>
<constant const='true' declared_type='CFStringRef' name='kCGImageSourceTypeIdentifierHint' type='^{__CFString=}'/>
<enum name='kCGImageMetadataErrorBadArgument' value='2'/>
<enum name='kCGImageMetadataErrorConflictingArguments' value='3'/>
<enum name='kCGImageMetadataErrorPrefixConflict' value='4'/>
<enum name='kCGImageMetadataErrorUnknown' value='0'/>
<enum name='kCGImageMetadataErrorUnsupportedFormat' value='1'/>
<enum name='kCGImageMetadataTypeAlternateArray' value='4'/>
<enum name='kCGImageMetadataTypeAlternateText' value='5'/>
<enum name='kCGImageMetadataTypeArrayOrdered' value='3'/>
<enum name='kCGImageMetadataTypeArrayUnordered' value='2'/>
<enum name='kCGImageMetadataTypeDefault' value='0'/>
<enum name='kCGImageMetadataTypeInvalid' value='-1'/>
<enum name='kCGImageMetadataTypeString' value='1'/>
<enum name='kCGImageMetadataTypeStructure' value='6'/>
<enum name='kCGImageStatusComplete' value='0'/>
<enum name='kCGImageStatusIncomplete' value='-1'/>
<enum name='kCGImageStatusInvalidData' value='-4'/>
<enum name='kCGImageStatusReadingHeader' value='-2'/>
<enum name='kCGImageStatusUnexpectedEOF' value='-5'/>
<enum name='kCGImageStatusUnknownType' value='-3'/>
<function name='CGImageDestinationAddImage'>
<arg declared_type='CGImageDestinationRef' name='idst' type='^{CGImageDestination=}'/>
<arg declared_type='CGImageRef' name='image' type='^{CGImage=}'/>
<arg declared_type='CFDictionaryRef' name='properties' type='^{__CFDictionary=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGImageDestinationAddImageAndMetadata'>
<arg declared_type='CGImageDestinationRef' name='idst' type='^{CGImageDestination=}'/>
<arg declared_type='CGImageRef' name='image' type='^{CGImage=}'/>
<arg declared_type='CGImageMetadataRef' name='metadata' type='^{CGImageMetadata=}'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGImageDestinationAddImageFromSource'>
<arg declared_type='CGImageDestinationRef' name='idst' type='^{CGImageDestination=}'/>
<arg declared_type='CGImageSourceRef' name='isrc' type='^{CGImageSource=}'/>
<arg declared_type='size_t' name='index' type='L' type64='Q'/>
<arg declared_type='CFDictionaryRef' name='properties' type='^{__CFDictionary=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGImageDestinationCopyImageSource'>
<arg declared_type='CGImageDestinationRef' name='idst' type='^{CGImageDestination=}'/>
<arg declared_type='CGImageSourceRef' name='isrc' type='^{CGImageSource=}'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<arg declared_type='CFErrorRef*' name='err' type='^^{__CFError}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGImageDestinationCopyTypeIdentifiers'>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CGImageDestinationCreateWithData'>
<arg declared_type='CFMutableDataRef' name='data' type='^{__CFData=}'/>
<arg declared_type='CFStringRef' name='type' type='^{__CFString=}'/>
<arg declared_type='size_t' name='count' type='L' type64='Q'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CGImageDestinationRef' type='^{CGImageDestination=}'/>
</function>
<function name='CGImageDestinationCreateWithDataConsumer'>
<arg declared_type='CGDataConsumerRef' name='consumer' type='^{CGDataConsumer=}'/>
<arg declared_type='CFStringRef' name='type' type='^{__CFString=}'/>
<arg declared_type='size_t' name='count' type='L' type64='Q'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CGImageDestinationRef' type='^{CGImageDestination=}'/>
</function>
<function name='CGImageDestinationCreateWithURL'>
<arg declared_type='CFURLRef' name='url' type='^{__CFURL=}'/>
<arg declared_type='CFStringRef' name='type' type='^{__CFString=}'/>
<arg declared_type='size_t' name='count' type='L' type64='Q'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CGImageDestinationRef' type='^{CGImageDestination=}'/>
</function>
<function name='CGImageDestinationFinalize'>
<arg declared_type='CGImageDestinationRef' name='idst' type='^{CGImageDestination=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGImageDestinationGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CGImageDestinationSetProperties'>
<arg declared_type='CGImageDestinationRef' name='idst' type='^{CGImageDestination=}'/>
<arg declared_type='CFDictionaryRef' name='properties' type='^{__CFDictionary=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGImageMetadataCopyStringValueWithPath'>
<arg declared_type='CGImageMetadataRef' name='metadata' type='^{CGImageMetadata=}'/>
<arg declared_type='CGImageMetadataTagRef' name='parent' type='^{CGImageMetadataTag=}'/>
<arg declared_type='CFStringRef' name='path' type='^{__CFString=}'/>
<retval already_retained='true' declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CGImageMetadataCopyTagMatchingImageProperty'>
<arg declared_type='CGImageMetadataRef' name='metadata' type='^{CGImageMetadata=}'/>
<arg declared_type='CFStringRef' name='dictionaryName' type='^{__CFString=}'/>
<arg declared_type='CFStringRef' name='propertyName' type='^{__CFString=}'/>
<retval already_retained='true' declared_type='CGImageMetadataTagRef' type='^{CGImageMetadataTag=}'/>
</function>
<function name='CGImageMetadataCopyTagWithPath'>
<arg declared_type='CGImageMetadataRef' name='metadata' type='^{CGImageMetadata=}'/>
<arg declared_type='CGImageMetadataTagRef' name='parent' type='^{CGImageMetadataTag=}'/>
<arg declared_type='CFStringRef' name='path' type='^{__CFString=}'/>
<retval already_retained='true' declared_type='CGImageMetadataTagRef' type='^{CGImageMetadataTag=}'/>
</function>
<function name='CGImageMetadataCopyTags'>
<arg declared_type='CGImageMetadataRef' name='metadata' type='^{CGImageMetadata=}'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CGImageMetadataCreateFromXMPData'>
<arg declared_type='CFDataRef' name='data' type='^{__CFData=}'/>
<retval already_retained='true' declared_type='CGImageMetadataRef' type='^{CGImageMetadata=}'/>
</function>
<function name='CGImageMetadataCreateMutable'>
<retval already_retained='true' declared_type='CGMutableImageMetadataRef' type='^{CGImageMetadata=}'/>
</function>
<function name='CGImageMetadataCreateMutableCopy'>
<arg declared_type='CGImageMetadataRef' name='metadata' type='^{CGImageMetadata=}'/>
<retval already_retained='true' declared_type='CGMutableImageMetadataRef' type='^{CGImageMetadata=}'/>
</function>
<function name='CGImageMetadataCreateXMPData'>
<arg declared_type='CGImageMetadataRef' name='metadata' type='^{CGImageMetadata=}'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CFDataRef' type='^{__CFData=}'/>
</function>
<function name='CGImageMetadataEnumerateTagsUsingBlock'>
<arg declared_type='CGImageMetadataRef' name='metadata' type='^{CGImageMetadata=}'/>
<arg declared_type='CFStringRef' name='rootPath' type='^{__CFString=}'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<arg declared_type='CGImageMetadataTagBlock' function_pointer='true' name='block' type='@?'>
<arg declared_type='CFStringRef' type='^{__CFString=}'/>
<arg declared_type='CGImageMetadataTagRef' type='^{CGImageMetadataTag=}'/>
<retval declared_type='_Bool' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='CGImageMetadataGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CGImageMetadataRegisterNamespaceForPrefix'>
<arg declared_type='CGMutableImageMetadataRef' name='metadata' type='^{CGImageMetadata=}'/>
<arg declared_type='CFStringRef' name='xmlns' type='^{__CFString=}'/>
<arg declared_type='CFStringRef' name='prefix' type='^{__CFString=}'/>
<arg declared_type='CFErrorRef*' name='err' type='^^{__CFError}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGImageMetadataRemoveTagWithPath'>
<arg declared_type='CGMutableImageMetadataRef' name='metadata' type='^{CGImageMetadata=}'/>
<arg declared_type='CGImageMetadataTagRef' name='parent' type='^{CGImageMetadataTag=}'/>
<arg declared_type='CFStringRef' name='path' type='^{__CFString=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGImageMetadataSetTagWithPath'>
<arg declared_type='CGMutableImageMetadataRef' name='metadata' type='^{CGImageMetadata=}'/>
<arg declared_type='CGImageMetadataTagRef' name='parent' type='^{CGImageMetadataTag=}'/>
<arg declared_type='CFStringRef' name='path' type='^{__CFString=}'/>
<arg declared_type='CGImageMetadataTagRef' name='tag' type='^{CGImageMetadataTag=}'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGImageMetadataSetValueMatchingImageProperty'>
<arg declared_type='CGMutableImageMetadataRef' name='metadata' type='^{CGImageMetadata=}'/>
<arg declared_type='CFStringRef' name='dictionaryName' type='^{__CFString=}'/>
<arg declared_type='CFStringRef' name='propertyName' type='^{__CFString=}'/>
<arg declared_type='CFTypeRef' name='value' type='@'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGImageMetadataSetValueWithPath'>
<arg declared_type='CGMutableImageMetadataRef' name='metadata' type='^{CGImageMetadata=}'/>
<arg declared_type='CGImageMetadataTagRef' name='parent' type='^{CGImageMetadataTag=}'/>
<arg declared_type='CFStringRef' name='path' type='^{__CFString=}'/>
<arg declared_type='CFTypeRef' name='value' type='@'/>
<retval declared_type='_Bool' type='B'/>
</function>
<function name='CGImageMetadataTagCopyName'>
<arg declared_type='CGImageMetadataTagRef' name='tag' type='^{CGImageMetadataTag=}'/>
<retval already_retained='true' declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CGImageMetadataTagCopyNamespace'>
<arg declared_type='CGImageMetadataTagRef' name='tag' type='^{CGImageMetadataTag=}'/>
<retval already_retained='true' declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CGImageMetadataTagCopyPrefix'>
<arg declared_type='CGImageMetadataTagRef' name='tag' type='^{CGImageMetadataTag=}'/>
<retval already_retained='true' declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CGImageMetadataTagCopyQualifiers'>
<arg declared_type='CGImageMetadataTagRef' name='tag' type='^{CGImageMetadataTag=}'/>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CGImageMetadataTagCopyValue'>
<arg declared_type='CGImageMetadataTagRef' name='tag' type='^{CGImageMetadataTag=}'/>
<retval already_retained='true' declared_type='CFTypeRef' type='@'/>
</function>
<function name='CGImageMetadataTagCreate'>
<arg declared_type='CFStringRef' name='xmlns' type='^{__CFString=}'/>
<arg declared_type='CFStringRef' name='prefix' type='^{__CFString=}'/>
<arg declared_type='CFStringRef' name='name' type='^{__CFString=}'/>
<arg declared_type='CGImageMetadataType' name='type' type='i'/>
<arg declared_type='CFTypeRef' name='value' type='@'/>
<retval already_retained='true' declared_type='CGImageMetadataTagRef' type='^{CGImageMetadataTag=}'/>
</function>
<function name='CGImageMetadataTagGetType'>
<arg declared_type='CGImageMetadataTagRef' name='tag' type='^{CGImageMetadataTag=}'/>
<retval declared_type='CGImageMetadataType' type='i'/>
</function>
<function name='CGImageMetadataTagGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CGImageSourceCopyMetadataAtIndex'>
<arg declared_type='CGImageSourceRef' name='isrc' type='^{CGImageSource=}'/>
<arg declared_type='size_t' name='index' type='L' type64='Q'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CGImageMetadataRef' type='^{CGImageMetadata=}'/>
</function>
<function name='CGImageSourceCopyProperties'>
<arg declared_type='CGImageSourceRef' name='isrc' type='^{CGImageSource=}'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
</function>
<function name='CGImageSourceCopyPropertiesAtIndex'>
<arg declared_type='CGImageSourceRef' name='isrc' type='^{CGImageSource=}'/>
<arg declared_type='size_t' name='index' type='L' type64='Q'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CFDictionaryRef' type='^{__CFDictionary=}'/>
</function>
<function name='CGImageSourceCopyTypeIdentifiers'>
<retval already_retained='true' declared_type='CFArrayRef' type='^{__CFArray=}'/>
</function>
<function name='CGImageSourceCreateImageAtIndex'>
<arg declared_type='CGImageSourceRef' name='isrc' type='^{CGImageSource=}'/>
<arg declared_type='size_t' name='index' type='L' type64='Q'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CGImageRef' type='^{CGImage=}'/>
</function>
<function name='CGImageSourceCreateIncremental'>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CGImageSourceRef' type='^{CGImageSource=}'/>
</function>
<function name='CGImageSourceCreateThumbnailAtIndex'>
<arg declared_type='CGImageSourceRef' name='isrc' type='^{CGImageSource=}'/>
<arg declared_type='size_t' name='index' type='L' type64='Q'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CGImageRef' type='^{CGImage=}'/>
</function>
<function name='CGImageSourceCreateWithData'>
<arg declared_type='CFDataRef' name='data' type='^{__CFData=}'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CGImageSourceRef' type='^{CGImageSource=}'/>
</function>
<function name='CGImageSourceCreateWithDataProvider'>
<arg declared_type='CGDataProviderRef' name='provider' type='^{CGDataProvider=}'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CGImageSourceRef' type='^{CGImageSource=}'/>
</function>
<function name='CGImageSourceCreateWithURL'>
<arg declared_type='CFURLRef' name='url' type='^{__CFURL=}'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval already_retained='true' declared_type='CGImageSourceRef' type='^{CGImageSource=}'/>
</function>
<function name='CGImageSourceGetCount'>
<arg declared_type='CGImageSourceRef' name='isrc' type='^{CGImageSource=}'/>
<retval declared_type='size_t' type='L' type64='Q'/>
</function>
<function name='CGImageSourceGetStatus'>
<arg declared_type='CGImageSourceRef' name='isrc' type='^{CGImageSource=}'/>
<retval declared_type='CGImageSourceStatus' type='i'/>
</function>
<function name='CGImageSourceGetStatusAtIndex'>
<arg declared_type='CGImageSourceRef' name='isrc' type='^{CGImageSource=}'/>
<arg declared_type='size_t' name='index' type='L' type64='Q'/>
<retval declared_type='CGImageSourceStatus' type='i'/>
</function>
<function name='CGImageSourceGetType'>
<arg declared_type='CGImageSourceRef' name='isrc' type='^{CGImageSource=}'/>
<retval declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='CGImageSourceGetTypeID'>
<retval declared_type='CFTypeID' type='L' type64='Q'/>
</function>
<function name='CGImageSourceRemoveCacheAtIndex'>
<arg declared_type='CGImageSourceRef' name='isrc' type='^{CGImageSource=}'/>
<arg declared_type='size_t' name='index' type='L' type64='Q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGImageSourceUpdateData'>
<arg declared_type='CGImageSourceRef' name='isrc' type='^{CGImageSource=}'/>
<arg declared_type='CFDataRef' name='data' type='^{__CFData=}'/>
<arg declared_type='_Bool' name='final' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CGImageSourceUpdateDataProvider'>
<arg declared_type='CGImageSourceRef' name='isrc' type='^{CGImageSource=}'/>
<arg declared_type='CGDataProviderRef' name='provider' type='^{CGDataProvider=}'/>
<arg declared_type='_Bool' name='final' type='B'/>
<retval declared_type='void' type='v'/>
</function>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/CoreGraphics.framework'/>
<depends_on path='/System/Library/Frameworks/SystemConfiguration.framework'/>
<depends_on path='/System/Library/Frameworks/CoreText.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework'/>
<struct name='DCMDictionaryHeader' type='{DCMDictionaryHeader=&quot;headerSignature&quot;I&quot;headerVersion&quot;I&quot;headerSize&quot;I&quot;accessMethod&quot;[64C]}'>
<field declared_type='FourCharCode' name='headerSignature' type='L' type64='I'/>
<field declared_type='UInt32' name='headerVersion' type='L' type64='I'/>
<field declared_type='UInt32' name='headerSize' type='L' type64='I'/>
<field declared_type='Str63' name='accessMethod' type='[64C]'/>
</struct>
<struct name='HomographDicInfoRec' type='{HomographDicInfoRec=&quot;dictionaryID&quot;^{OpaqueDCMObjectID}&quot;uniqueID&quot;I}'>
<field declared_type='DCMDictionaryID' name='dictionaryID' type='^{OpaqueDCMObjectID=}'/>
<field declared_type='DCMUniqueID' name='uniqueID' type='L' type64='I'/>
</struct>
<struct name='LAHomograph' type='{AEDesc=&quot;descriptorType&quot;I&quot;dataHandle&quot;^^{OpaqueAEDataStorageType}}'>
<field declared_type='DescType' name='descriptorType' type='L' type64='I'/>
<field declared_type='AEDataStorage' name='dataHandle' type='^^{OpaqueAEDataStorageType}'/>
</struct>
<struct name='LAMorpheme' type='{AEDesc=&quot;descriptorType&quot;I&quot;dataHandle&quot;^^{OpaqueAEDataStorageType}}'>
<field declared_type='DescType' name='descriptorType' type='L' type64='I'/>
<field declared_type='AEDataStorage' name='dataHandle' type='^^{OpaqueAEDataStorageType}'/>
</struct>
<struct name='LAMorphemeBundle' type='{AEDesc=&quot;descriptorType&quot;I&quot;dataHandle&quot;^^{OpaqueAEDataStorageType}}'>
<field declared_type='DescType' name='descriptorType' type='L' type64='I'/>
<field declared_type='AEDataStorage' name='dataHandle' type='^^{OpaqueAEDataStorageType}'/>
</struct>
<struct name='LAMorphemePath' type='{AEDesc=&quot;descriptorType&quot;I&quot;dataHandle&quot;^^{OpaqueAEDataStorageType}}'>
<field declared_type='DescType' name='descriptorType' type='L' type64='I'/>
<field declared_type='AEDataStorage' name='dataHandle' type='^^{OpaqueAEDataStorageType}'/>
</struct>
<struct name='LAMorphemeRec' type='{LAMorphemeRec=&quot;sourceTextLength&quot;I&quot;sourceTextPtr&quot;^v&quot;morphemeTextLength&quot;I&quot;morphemeTextPtr&quot;^v&quot;partOfSpeech&quot;I}'>
<field declared_type='UInt32' name='sourceTextLength' type='L' type64='I'/>
<field declared_type='LogicalAddress' name='sourceTextPtr' type='^v'/>
<field declared_type='UInt32' name='morphemeTextLength' type='L' type64='I'/>
<field declared_type='LogicalAddress' name='morphemeTextPtr' type='^v'/>
<field declared_type='UInt32' name='partOfSpeech' type='L' type64='I'/>
</struct>
<struct name='LAMorphemesArray' type='{LAMorphemesArray=&quot;morphemesCount&quot;I&quot;processedTextLength&quot;I&quot;morphemesTextLength&quot;I&quot;morphemes&quot;[1{LAMorphemeRec=&quot;sourceTextLength&quot;I&quot;sourceTextPtr&quot;^v&quot;morphemeTextLength&quot;I&quot;morphemeTextPtr&quot;^v&quot;partOfSpeech&quot;I}]}' type64='{LAMorphemesArray=&quot;morphemesCount&quot;Q&quot;processedTextLength&quot;I&quot;morphemesTextLength&quot;I&quot;morphemes&quot;[1{LAMorphemeRec=&quot;sourceTextLength&quot;I&quot;sourceTextPtr&quot;^v&quot;morphemeTextLength&quot;I&quot;morphemeTextPtr&quot;^v&quot;partOfSpeech&quot;I}]}'>
<field declared_type='ItemCount' name='morphemesCount' type='L' type64='Q'/>
<field declared_type='UInt32' name='processedTextLength' type='L' type64='I'/>
<field declared_type='UInt32' name='morphemesTextLength' type='L' type64='I'/>
<field declared_type='LAMorphemeRec*' name='morphemes' type='[1{LAMorphemeRec=&quot;sourceTextLength&quot;I&quot;sourceTextPtr&quot;^v&quot;morphemeTextLength&quot;I&quot;morphemeTextPtr&quot;^v&quot;partOfSpeech&quot;I}]'/>
</struct>
<struct name='MorphemeTextRange' type='{MorphemeTextRange=&quot;sourceOffset&quot;I&quot;length&quot;I}'>
<field declared_type='UInt32' name='sourceOffset' type='L' type64='I'/>
<field declared_type='UInt32' name='length' type='L' type64='I'/>
</struct>
<cftype name='DCMFoundRecordIterator' type='^{OpaqueDCMFoundRecordIterator=}'/>
<cftype name='DCMObjectID' type='^{OpaqueDCMObjectID=}'/>
<cftype name='DCMObjectIterator' type='^{OpaqueDCMObjectIterator=}'/>
<cftype name='DCMObjectRef' type='^{OpaqueDCMObjectRef=}'/>
<cftype name='LAContextRef' type='^{OpaqueLAContextRef=}'/>
<cftype name='LAEnvironmentRef' type='^{OpaqueLAEnvironmentRef=}'/>
<string_constant name='kAppleJapaneseDefaultAccessMethodName' value='pDAM:Apple Backward Trie Access Method'/>
<string_constant name='kLAJapaneseKanaKanjiEnvironment' value='pKanaKanjiConversion'/>
<string_constant name='kLAJapaneseMorphemeAnalysisEnvironment' value='pJapaneseMorphemeAnalysis'/>
<string_constant name='kLAJapaneseTTSEnvironment' value='pJapaneseTextToSpeech'/>
<enum name='kAppleJapaneseDictionarySignature' value='1785487726'/>
<enum name='kDCMAllowListing' value='0'/>
<enum name='kDCMAnyFieldTag' value='707406378'/>
<enum name='kDCMAnyFieldType' value='707406378'/>
<enum name='kDCMBasicDictionaryClass' value='2'/>
<enum name='kDCMCanAddDictionaryFieldMask' value='64'/>
<enum name='kDCMCanCreateDictionaryMask' value='32'/>
<enum name='kDCMCanHaveMultipleIndexMask' value='8'/>
<enum name='kDCMCanModifyDictionaryMask' value='16'/>
<enum name='kDCMCanStreamDictionaryMask' value='4'/>
<enum name='kDCMCanUseFileDictionaryMask' value='1'/>
<enum name='kDCMCanUseMemoryDictionaryMask' value='2'/>
<enum name='kDCMCanUseTransactionMask' value='128'/>
<enum name='kDCMDictionaryHeaderSignature' value='1684628340'/>
<enum name='kDCMDictionaryHeaderVersion' value='2'/>
<enum name='kDCMFindMethodBackwardTrie' value='1651798633'/>
<enum name='kDCMFindMethodBeginningMatch' value='1650947956'/>
<enum name='kDCMFindMethodContainsMatch' value='1668247156'/>
<enum name='kDCMFindMethodEndingMatch' value='1701733491'/>
<enum name='kDCMFindMethodExactMatch' value='1025515552'/>
<enum name='kDCMFindMethodForwardTrie' value='1718907497'/>
<enum name='kDCMFixedSizeFieldMask' value='8'/>
<enum name='kDCMHiddenFieldMask' value='-2147483648'/>
<enum name='kDCMIdentifyFieldMask' value='4'/>
<enum name='kDCMIndexedFieldMask' value='1'/>
<enum name='kDCMJapaneseAccentTag' value='1633906292'/>
<enum name='kDCMJapaneseAccentType' value='1652126821'/>
<enum name='kDCMJapaneseFukugouInfoTag' value='1718971253'/>
<enum name='kDCMJapaneseFukugouInfoType' value='1718971253'/>
<enum name='kDCMJapaneseHinshiTag' value='1751740019'/>
<enum name='kDCMJapaneseHinshiType' value='1751740019'/>
<enum name='kDCMJapaneseHyokiTag' value='1752788843'/>
<enum name='kDCMJapaneseHyokiType' value='1970567284'/>
<enum name='kDCMJapaneseOnKunReadingTag' value='1332628334'/>
<enum name='kDCMJapaneseOnKunReadingType' value='1970567284'/>
<enum name='kDCMJapanesePhoneticTag' value='1752461166'/>
<enum name='kDCMJapanesePhoneticType' value='1970567284'/>
<enum name='kDCMJapaneseWeightTag' value='1751740004'/>
<enum name='kDCMJapaneseWeightType' value='1936224114'/>
<enum name='kDCMJapaneseYomiTag' value='2037345641'/>
<enum name='kDCMJapaneseYomiType' value='1970567284'/>
<enum name='kDCMProhibitListing' value='1'/>
<enum name='kDCMReadOnlyDictionary' value='0'/>
<enum name='kDCMReadWriteDictionary' value='1'/>
<enum name='kDCMRequiredFieldMask' value='2'/>
<enum name='kDCMSpecificDictionaryClass' value='1'/>
<enum name='kDCMUserDictionaryClass' value='0'/>
<enum name='kDictionaryFileType' value='1684628340'/>
<enum name='kLAAllMorphemes' value='0'/>
<enum name='kLADefaultEdge' value='0'/>
<enum name='kLAEndOfSourceTextMask' value='1'/>
<enum name='kLAFreeEdge' value='1'/>
<enum name='kLAIncompleteEdge' value='2'/>
<enum name='kLAMorphemesArrayVersion' value='0'/>
<enum name='kLASpeechBagyouGodan' value='20608'/>
<enum name='kLASpeechChimei' value='512'/>
<enum name='kLASpeechChimeiSetsubigo' value='37376'/>
<enum name='kLASpeechDokuritsugo' value='41728'/>
<enum name='kLASpeechDoushi' value='20480'/>
<enum name='kLASpeechFukushi' value='8192'/>
<enum name='kLASpeechFutsuuMeishi' value='0'/>
<enum name='kLASpeechGagyouGodan' value='20592'/>
<enum name='kLASpeechGodanDoushi' value='20480'/>
<enum name='kLASpeechIchidanDoushi' value='20736'/>
<enum name='kLASpeechJinmei' value='256'/>
<enum name='kLASpeechJinmeiMei' value='288'/>
<enum name='kLASpeechJinmeiSei' value='272'/>
<enum name='kLASpeechJinmeiSetsubigo' value='37120'/>
<enum name='kLASpeechJodoushi' value='45056'/>
<enum name='kLASpeechJoshi' value='49152'/>
<enum name='kLASpeechKagyouGodan' value='20480'/>
<enum name='kLASpeechKahenDoushi' value='20992'/>
<enum name='kLASpeechKandoushi' value='16384'/>
<enum name='kLASpeechKatsuyouGokan' value='1'/>
<enum name='kLASpeechKatsuyouKatei' value='6'/>
<enum name='kLASpeechKatsuyouMask' value='15'/>
<enum name='kLASpeechKatsuyouMeirei' value='7'/>
<enum name='kLASpeechKatsuyouMizen' value='2'/>
<enum name='kLASpeechKatsuyouRentai' value='5'/>
<enum name='kLASpeechKatsuyouRenyou' value='3'/>
<enum name='kLASpeechKatsuyouSyuushi' value='4'/>
<enum name='kLASpeechKeidouMeishi' value='1536'/>
<enum name='kLASpeechKeiyoudoushi' value='28672'/>
<enum name='kLASpeechKeiyoushi' value='24576'/>
<enum name='kLASpeechKigou' value='41216'/>
<enum name='kLASpeechKoyuuMeishi' value='1024'/>
<enum name='kLASpeechKuten' value='41232'/>
<enum name='kLASpeechMagyouGodan' value='20544'/>
<enum name='kLASpeechMediumClassMask' value='65280'/>
<enum name='kLASpeechMeishi' value='0'/>
<enum name='kLASpeechMuhinshi' value='40960'/>
<enum name='kLASpeechNagyouGodan' value='20528'/>
<enum name='kLASpeechRagyouGodan' value='20560'/>
<enum name='kLASpeechRentaishi' value='4096'/>
<enum name='kLASpeechRoughClassMask' value='61440'/>
<enum name='kLASpeechSagyouGodan' value='20496'/>
<enum name='kLASpeechSahenDoushi' value='21248'/>
<enum name='kLASpeechSahenMeishi' value='1280'/>
<enum name='kLASpeechSeiku' value='41984'/>
<enum name='kLASpeechSetsubiChimei' value='528'/>
<enum name='kLASpeechSetsubigo' value='36864'/>
<enum name='kLASpeechSetsuzokushi' value='12288'/>
<enum name='kLASpeechSettougo' value='32768'/>
<enum name='kLASpeechSoshikimei' value='768'/>
<enum name='kLASpeechSoshikimeiSetsubigo' value='37632'/>
<enum name='kLASpeechStrictClassMask' value='65520'/>
<enum name='kLASpeechSuujiSetsubigo' value='37888'/>
<enum name='kLASpeechSuujiSettougo' value='33024'/>
<enum name='kLASpeechSuushi' value='41472'/>
<enum name='kLASpeechTagyouGodan' value='20512'/>
<enum name='kLASpeechTankanji' value='40960'/>
<enum name='kLASpeechTouten' value='41248'/>
<enum name='kLASpeechWagyouGodan' value='20576'/>
<enum name='kLASpeechZahenDoushi' value='21504'/>
<enum name='kMaxInputLengthOfAppleJapaneseEngine' value='200'/>
<enum name='kMaxKanjiLengthInAppleJapaneseDictionary' value='64'/>
<enum name='kMaxYomiLengthInAppleJapaneseDictionary' value='40'/>
<enum name='keyAEHomographAccent' value='1818323041'/>
<enum name='keyAEHomographDicInfo' value='1818323044'/>
<enum name='keyAEHomographWeight' value='1818323063'/>
<enum name='keyAELAHomograph' value='1819108968'/>
<enum name='keyAELAMorpheme' value='1819108974'/>
<enum name='keyAELAMorphemeBundle' value='1819108962'/>
<enum name='keyAELAMorphemePath' value='1819108976'/>
<enum name='keyAEMorphemePartOfSpeechCode' value='1818324323'/>
<enum name='keyAEMorphemeTextRange' value='1818324340'/>
<enum name='keyDCMFieldAttributes' value='1717662834'/>
<enum name='keyDCMFieldDefaultData' value='1717855590'/>
<enum name='keyDCMFieldFindMethods' value='1717988964'/>
<enum name='keyDCMFieldName' value='1718509933'/>
<enum name='keyDCMFieldTag' value='1718903143'/>
<enum name='keyDCMFieldType' value='1718909296'/>
<enum name='keyDCMMaxRecordSize' value='1836217210'/>
<enum name='pDCMAccessMethod' value='1634563172'/>
<enum name='pDCMClass' value='1885564019'/>
<enum name='pDCMCopyright' value='1768842863'/>
<enum name='pDCMListing' value='1818850164'/>
<enum name='pDCMLocale' value='1819239276'/>
<enum name='pDCMMaintenance' value='1836346979'/>
<enum name='pDCMPermission' value='1885696621'/>
<enum name='typeAEHomographAccent' value='1818323041'/>
<enum name='typeAEHomographDicInfo' value='1818323044'/>
<enum name='typeAEHomographWeight' value='1936224114'/>
<enum name='typeAEMorphemePartOfSpeechCode' value='1818324323'/>
<enum name='typeAEMorphemeTextRange' value='1818324340'/>
<enum name='typeDCMFieldAttributes' value='1717662834'/>
<enum name='typeDCMFindMethod' value='1718449256'/>
<enum name='typeLAHomograph' value='1818850164'/>
<enum name='typeLAMorpheme' value='1818850164'/>
<enum name='typeLAMorphemeBundle' value='1919247215'/>
<enum name='typeLAMorphemePath' value='1919247215'/>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework'/>
<depends_on path='/System/Library/Frameworks/CoreGraphics.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/Security.framework'/>
<depends_on path='/System/Library/Frameworks/SystemConfiguration.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework'/>
<depends_on path='/System/Library/Frameworks/Foundation.framework'/>
<depends_on path='/System/Library/Frameworks/CFNetwork.framework'/>
<struct name='PMLanguageInfo' type='{PMLanguageInfo=&quot;level&quot;[33C]&quot;version&quot;[33C]&quot;release&quot;[33C]}'>
<field declared_type='Str32' name='level' type='[33C]'/>
<field declared_type='Str32' name='version' type='[33C]'/>
<field declared_type='Str32' name='release' type='[33C]'/>
</struct>
<struct name='PMPaperMargins' type='{PMRect=&quot;top&quot;d&quot;left&quot;d&quot;bottom&quot;d&quot;right&quot;d}'>
<field declared_type='double' name='top' type='d'/>
<field declared_type='double' name='left' type='d'/>
<field declared_type='double' name='bottom' type='d'/>
<field declared_type='double' name='right' type='d'/>
</struct>
<struct name='PMRect' type='{PMRect=&quot;top&quot;d&quot;left&quot;d&quot;bottom&quot;d&quot;right&quot;d}'>
<field declared_type='double' name='top' type='d'/>
<field declared_type='double' name='left' type='d'/>
<field declared_type='double' name='bottom' type='d'/>
<field declared_type='double' name='right' type='d'/>
</struct>
<struct name='PMResolution' type='{PMResolution=&quot;hRes&quot;d&quot;vRes&quot;d}'>
<field declared_type='double' name='hRes' type='d'/>
<field declared_type='double' name='vRes' type='d'/>
</struct>
<cftype name='PMPageFormat' type='^{OpaquePMPageFormat=}'/>
<cftype name='PMPaper' type='^{OpaquePMPaper=}'/>
<cftype name='PMPreset' type='^{OpaquePMPreset=}'/>
<cftype name='PMPrintSession' type='^{OpaquePMPrintSession=}'/>
<cftype name='PMPrintSettings' type='^{OpaquePMPrintSettings=}'/>
<cftype name='PMPrinter' type='^{OpaquePMPrinter=}'/>
<cftype name='PMServer' type='^{OpaquePMServer=}'/>
<string_constant name='SUMMARY_DISPLAY_ORDER' nsstring='true' value='Summary Display Order'/>
<string_constant name='kAppPageSetupDialogTypeIDStr' nsstring='true' value='B9A0DA98-E57F-11D3-9E83-0050E4603277'/>
<string_constant name='kAppPrintDialogTypeIDStr' nsstring='true' value='BCB07250-E57F-11D3-8CA6-0050E4603277'/>
<string_constant name='kAppPrintThumbnailTypeIDStr' nsstring='true' value='9320FE03-B5D5-11D5-84D1-003065D6135E'/>
<string_constant name='kDialogExtensionIntfIDStr' nsstring='true' value='A996FD7E-B738-11D3-8519-0050E4603277'/>
<string_constant name='kGeneralPageSetupDialogTypeIDStr' nsstring='true' value='6E6ED964-B738-11D3-952F-0050E4603277'/>
<string_constant name='kGeneralPrintDialogTypeIDStr' nsstring='true' value='C1BF838E-B72A-11D3-9644-0050E4603277'/>
<string_constant name='kPDFWorkFlowItemURLKey' nsstring='true' value='itemURL'/>
<string_constant name='kPDFWorkflowDisplayNameKey' nsstring='true' value='displayName'/>
<string_constant name='kPDFWorkflowFolderURLKey' nsstring='true' value='folderURL'/>
<string_constant name='kPDFWorkflowItemsKey' nsstring='true' value='items'/>
<string_constant name='kPMApplicationColorMatching' nsstring='true' value='AP_ApplicationColorMatching'/>
<string_constant name='kPMApplicationColorMatchingStr' value='AP_ApplicationColorMatching'/>
<string_constant name='kPMBorderKey' nsstring='true' value='com.apple.print.PrintSettings.PMBorder'/>
<string_constant name='kPMBorderStr' value='com.apple.print.PrintSettings.PMBorder'/>
<string_constant name='kPMBorderTypeKey' nsstring='true' value='com.apple.print.PrintSettings.PMBorderType'/>
<string_constant name='kPMBorderTypeStr' value='com.apple.print.PrintSettings.PMBorderType'/>
<string_constant name='kPMCollateAEProp' value='collating'/>
<string_constant name='kPMColorMatchingModeKey' nsstring='true' value='AP_ColorMatchingMode'/>
<string_constant name='kPMColorMatchingModeStr' value='AP_ColorMatchingMode'/>
<string_constant name='kPMColorMatchingPDEKindID' nsstring='true' value='com.apple.print.pde.ColorMatchingKind'/>
<string_constant name='kPMColorPDEKindID' nsstring='true' value='com.apple.print.pde.ColorKind'/>
<string_constant name='kPMColorSyncProfileIDKey' nsstring='true' value='com.apple.print.PrintSettings.PMColorSyncProfileID'/>
<string_constant name='kPMColorSyncProfileIDStr' value='com.apple.print.PrintSettings.PMColorSyncProfileID'/>
<string_constant name='kPMCopiesAEProp' value='copies'/>
<string_constant name='kPMCopiesAndPagesPDEKindID' nsstring='true' value='com.apple.print.pde.CopiesAndPagesKind'/>
<string_constant name='kPMCopiesKey' nsstring='true' value='com.apple.print.PrintSettings.PMCopies'/>
<string_constant name='kPMCopiesStr' value='com.apple.print.PrintSettings.PMCopies'/>
<string_constant name='kPMCopyCollateKey' nsstring='true' value='com.apple.print.PrintSettings.PMCopyCollate'/>
<string_constant name='kPMCopyCollateStr' value='com.apple.print.PrintSettings.PMCopyCollate'/>
<string_constant name='kPMCoverPageKey' nsstring='true' value='com.apple.print.PrintSettings.PMCoverPage'/>
<string_constant name='kPMCoverPagePDEKindID' nsstring='true' value='com.apple.print.pde.CoverPageKind'/>
<string_constant name='kPMCoverPageSourceKey' nsstring='true' value='com.apple.print.PrintSettings.PMCoverPageSource'/>
<string_constant name='kPMCoverPageSourceStr' value='com.apple.print.PrintSettings.PMCoverPageSource'/>
<string_constant name='kPMCoverPageStr' value='com.apple.print.PrintSettings.PMCoverPage'/>
<string_constant name='kPMCustomPaperSizePDEKindID' nsstring='true' value='com.apple.print.pde.CustomPaperSizeKind'/>
<string_constant name='kPMCustomProfilePathKey' nsstring='true' value='PMCustomProfilePath'/>
<string_constant name='kPMCustomProfilePathStr' value='PMCustomProfilePath'/>
<string_constant name='kPMDestinationPrinterIDKey' nsstring='true' value='DestinationPrinterID'/>
<string_constant name='kPMDestinationPrinterIDStr' value='DestinationPrinterID'/>
<string_constant name='kPMDestinationTypeKey' nsstring='true' value='com.apple.print.PrintSettings.PMDestinationType'/>
<string_constant name='kPMDestinationTypeStr' value='com.apple.print.PrintSettings.PMDestinationType'/>
<string_constant name='kPMDocumentFormatDefault' nsstring='true' value='com.apple.documentformat.default'/>
<string_constant name='kPMDocumentFormatPDF' nsstring='true' value='application/pdf'/>
<string_constant name='kPMDocumentFormatPostScript' nsstring='true' value='application/postscript'/>
<string_constant name='kPMDuplexPDEKindID' nsstring='true' value='com.apple.print.pde.DuplexKind'/>
<string_constant name='kPMDuplexingKey' nsstring='true' value='com.apple.print.PrintSettings.PMDuplexing'/>
<string_constant name='kPMDuplexingStr' value='com.apple.print.PrintSettings.PMDuplexing'/>
<string_constant name='kPMErrorHandlingAEProp' value='error handling'/>
<string_constant name='kPMErrorHandlingPDEKindID' nsstring='true' value='com.apple.print.pde.ErrorHandlingKind'/>
<string_constant name='kPMFaxAddressesPDEKindID' nsstring='true' value='com.apple.print.pde.FaxAddressesKind'/>
<string_constant name='kPMFaxCoverPagePDEKindID' nsstring='true' value='com.apple.print.pde.FaxCoverPageKind'/>
<string_constant name='kPMFaxCoverSheetKey' nsstring='true' value='faxCoverSheet'/>
<string_constant name='kPMFaxCoverSheetMessageKey' nsstring='true' value='faxCoverSheetMessage'/>
<string_constant name='kPMFaxCoverSheetMessageStr' value='faxCoverSheetMessage'/>
<string_constant name='kPMFaxCoverSheetStr' value='faxCoverSheet'/>
<string_constant name='kPMFaxDateLabelKey' nsstring='true' value='faxDateLabel'/>
<string_constant name='kPMFaxDateLabelStr' value='faxDateLabel'/>
<string_constant name='kPMFaxFromLabelKey' nsstring='true' value='faxFromLabel'/>
<string_constant name='kPMFaxFromLabelStr' value='faxFromLabel'/>
<string_constant name='kPMFaxModemPDEKindID' nsstring='true' value='com.apple.print.pde.FaxModemKind'/>
<string_constant name='kPMFaxNumberAEProp' value='fax number'/>
<string_constant name='kPMFaxNumberKey' nsstring='true' value='phone'/>
<string_constant name='kPMFaxNumberStr' value='phone'/>
<string_constant name='kPMFaxPrefixKey' nsstring='true' value='faxPrefix'/>
<string_constant name='kPMFaxPrefixStr' value='faxPrefix'/>
<string_constant name='kPMFaxSheetsLabelKey' nsstring='true' value='faxSheetsLabel'/>
<string_constant name='kPMFaxSheetsLabelStr' value='faxSheetsLabel'/>
<string_constant name='kPMFaxSubjectKey' nsstring='true' value='faxSubject'/>
<string_constant name='kPMFaxSubjectLabelKey' nsstring='true' value='faxSubjectLabel'/>
<string_constant name='kPMFaxSubjectLabelStr' value='faxSubjectLabel'/>
<string_constant name='kPMFaxSubjectStr' value='faxSubject'/>
<string_constant name='kPMFaxToKey' nsstring='true' value='faxTo'/>
<string_constant name='kPMFaxToLabelKey' nsstring='true' value='faxToLabel'/>
<string_constant name='kPMFaxToLabelStr' value='faxToLabel'/>
<string_constant name='kPMFaxToStr' value='faxTo'/>
<string_constant name='kPMFaxToneDialingKey' nsstring='true' value='faxToneDialing'/>
<string_constant name='kPMFaxToneDialingStr' value='faxToneDialing'/>
<string_constant name='kPMFaxUseSoundKey' nsstring='true' value='faxUseSound'/>
<string_constant name='kPMFaxUseSoundStr' value='faxUseSound'/>
<string_constant name='kPMFaxWaitForDialToneKey' nsstring='true' value='faxWaitForDialTone'/>
<string_constant name='kPMFaxWaitForDialToneStr' value='faxWaitForDialTone'/>
<string_constant name='kPMFeatureAEProp' value='printer features'/>
<string_constant name='kPMFirstPageAEProp' value='starting page'/>
<string_constant name='kPMFitToPageKey' nsstring='true' value='fit-to-page'/>
<string_constant name='kPMFitToPageStr' value='fit-to-page'/>
<string_constant name='kPMGraphicsContextCoreGraphics' nsstring='true' value='com.apple.graphicscontext.coregraphics'/>
<string_constant name='kPMGraphicsContextDefault' nsstring='true' value='com.apple.graphicscontext.default'/>
<string_constant name='kPMImagingOptionsPDEKindID' nsstring='true' value='com.apple.print.pde.ImagingOptionsKind'/>
<string_constant name='kPMInkPDEKindID' nsstring='true' value='com.apple.print.pde.InkKind'/>
<string_constant name='kPMInlineWorkflowKey' nsstring='true' value='inlineWorkflow'/>
<string_constant name='kPMInlineWorkflowStr' value='inlineWorkflow'/>
<string_constant name='kPMJobHoldUntilTimeKey' nsstring='true' value='com.apple.print.PrintSettings.PMJobHoldUntilTime'/>
<string_constant name='kPMJobHoldUntilTimeStr' value='com.apple.print.PrintSettings.PMJobHoldUntilTime'/>
<string_constant name='kPMJobPINPDEKindID' nsstring='true' value='com.apple.print.pde.jobPIN'/>
<string_constant name='kPMJobPriorityKey' nsstring='true' value='com.apple.print.PrintSettings.PMJobPriority'/>
<string_constant name='kPMJobPriorityStr' value='com.apple.print.PrintSettings.PMJobPriority'/>
<string_constant name='kPMJobStateKey' nsstring='true' value='com.apple.print.PrintSettings.PMJobState'/>
<string_constant name='kPMJobStateStr' value='com.apple.print.PrintSettings.PMJobState'/>
<string_constant name='kPMLastPageAEProp' value='ending page'/>
<string_constant name='kPMLayoutAcrossAEProp' value='pages across'/>
<string_constant name='kPMLayoutColumnsKey' nsstring='true' value='com.apple.print.PrintSettings.PMLayoutColumns'/>
<string_constant name='kPMLayoutColumnsStr' value='com.apple.print.PrintSettings.PMLayoutColumns'/>
<string_constant name='kPMLayoutDirectionKey' nsstring='true' value='com.apple.print.PrintSettings.PMLayoutDirection'/>
<string_constant name='kPMLayoutDirectionStr' value='com.apple.print.PrintSettings.PMLayoutDirection'/>
<string_constant name='kPMLayoutDownAEProp' value='pages down'/>
<string_constant name='kPMLayoutNUpKey' nsstring='true' value='com.apple.print.PrintSettings.PMLayoutNUp'/>
<string_constant name='kPMLayoutNUpStr' value='com.apple.print.PrintSettings.PMLayoutNUp'/>
<string_constant name='kPMLayoutPDEKindID' nsstring='true' value='com.apple.print.pde.LayoutUserOptionKind'/>
<string_constant name='kPMLayoutRowsKey' nsstring='true' value='com.apple.print.PrintSettings.PMLayoutRows'/>
<string_constant name='kPMLayoutRowsStr' value='com.apple.print.PrintSettings.PMLayoutRows'/>
<string_constant name='kPMLayoutTileOrientationKey' nsstring='true' value='com.apple.print.PrintSettings.PMLayoutTileOrientation'/>
<string_constant name='kPMLayoutTileOrientationStr' value='com.apple.print.PrintSettings.PMLayoutTileOrientation'/>
<string_constant name='kPMMediaQualityPDEKindID' nsstring='true' value='com.apple.print.pde.MediaQualityPDEKind'/>
<string_constant name='kPMMirrorKey' nsstring='true' value='mirror'/>
<string_constant name='kPMMirrorStr' value='mirror'/>
<string_constant name='kPMOutputFilenameKey' nsstring='true' value='com.apple.print.PrintSettings.PMOutputFilename'/>
<string_constant name='kPMOutputFilenameStr' value='com.apple.print.PrintSettings.PMOutputFilename'/>
<string_constant name='kPMOutputOptionsPDEKindID' nsstring='true' value='com.apple.print.pde.OutputOptionsKind'/>
<string_constant name='kPMOutputOrderKey' nsstring='true' value='OutputOrder'/>
<string_constant name='kPMOutputOrderStr' value='OutputOrder'/>
<string_constant name='kPMPDFEffectsPDEKindID' nsstring='true' value='com.apple.print.pde.PDFEffects'/>
<string_constant name='kPMPDFWorkFlowAEProp' value='PDF work flow'/>
<string_constant name='kPMPPDDescriptionType' nsstring='true' value='PMPPDDescriptionType'/>
<string_constant name='kPMPSErrorHandlerKey' nsstring='true' value='com.apple.print.PrintSettings.PMPSErrorHandler'/>
<string_constant name='kPMPSErrorHandlerStr' value='com.apple.print.PrintSettings.PMPSErrorHandler'/>
<string_constant name='kPMPSTraySwitchKey' nsstring='true' value='com.apple.print.PrintSettings.PMPSTraySwitch'/>
<string_constant name='kPMPSTraySwitchStr' value='com.apple.print.PrintSettings.PMPSTraySwitch'/>
<string_constant name='kPMPageAttributesKindID' nsstring='true' value='com.apple.print.pde.PageAttributesKind'/>
<string_constant name='kPMPageSetKey' nsstring='true' value='page-set'/>
<string_constant name='kPMPageSetStr' value='page-set'/>
<string_constant name='kPMPageToPaperMappingAllowScalingUpKey' nsstring='true' value='com.apple.print.PageToPaperMappingAllowScalingUp'/>
<string_constant name='kPMPageToPaperMappingAllowScalingUpStr' value='com.apple.print.PageToPaperMappingAllowScalingUp'/>
<string_constant name='kPMPageToPaperMappingTypeKey' nsstring='true' value='com.apple.print.PageToPaperMappingType'/>
<string_constant name='kPMPageToPaperMappingTypeStr' value='com.apple.print.PageToPaperMappingType'/>
<string_constant name='kPMPageToPaperMediaNameKey' nsstring='true' value='com.apple.print.PageToPaperMappingMediaName'/>
<string_constant name='kPMPageToPaperMediaNameStr' value='com.apple.print.PageToPaperMappingMediaName'/>
<string_constant name='kPMPaperFeedPDEKindID' nsstring='true' value='com.apple.print.pde.PaperFeedKind'/>
<string_constant name='kPMPaperHandlingPDEKindID' nsstring='true' value='com.apple.print.pde.PaperHandlingKind'/>
<string_constant name='kPMPaperSourcePDEKindID' nsstring='true' value='com.apple.print.pde.PaperSourceKind'/>
<string_constant name='kPMPresetAEProp' value='preset'/>
<string_constant name='kPMPresetGraphicsTypeAll' nsstring='true' value='All'/>
<string_constant name='kPMPresetGraphicsTypeGeneral' nsstring='true' value='General'/>
<string_constant name='kPMPresetGraphicsTypeKey' nsstring='true' value='com.apple.print.preset.graphicsType'/>
<string_constant name='kPMPresetGraphicsTypeNone' nsstring='true' value='None'/>
<string_constant name='kPMPresetGraphicsTypePhoto' nsstring='true' value='Photo'/>
<string_constant name='kPMPrimaryPaperFeedKey' nsstring='true' value='com.apple.print.PrintSettings.PMPrimaryPaperFeed'/>
<string_constant name='kPMPrimaryPaperFeedStr' value='com.apple.print.PrintSettings.PMPrimaryPaperFeed'/>
<string_constant name='kPMPrintSelectionOnlyKey' nsstring='true' value='com.apple.print.PrintSettings.PMPrintSelectionOnly'/>
<string_constant name='kPMPrintSelectionOnlyStr' value='com.apple.print.PrintSettings.PMPrintSelectionOnly'/>
<string_constant name='kPMPrintSelectionTitleKey' nsstring='true' value='com.apple.printSelection.title'/>
<string_constant name='kPMPrintTimeAEProp' value='requested print time'/>
<string_constant name='kPMPrinterFeaturesPDEKindID' nsstring='true' value='com.apple.print.pde.PrinterFeaturesKind'/>
<string_constant name='kPMPriorityPDEKindID' nsstring='true' value='com.apple.print.pde.PriorityKind'/>
<string_constant name='kPMRotationScalingPDEKindID' nsstring='true' value='com.apple.print.pde.RotationScalingKind'/>
<string_constant name='kPMSandboxCompatiblePDEs' nsstring='true' value='PMSandboxCompatiblePDEs'/>
<string_constant name='kPMSaveAsPDFAEProp' value='save as PDF'/>
<string_constant name='kPMSaveAsPSAEProp' value='save as PS'/>
<string_constant name='kPMSchedulerPDEKindID' nsstring='true' value='com.apple.print.pde.SchedulerKind'/>
<string_constant name='kPMSecondaryPaperFeedKey' nsstring='true' value='com.apple.print.PrintSettings.PMSecondaryPaperFeed'/>
<string_constant name='kPMSecondaryPaperFeedStr' value='com.apple.print.PrintSettings.PMSecondaryPaperFeed'/>
<string_constant name='kPMSummaryPanelKindID' nsstring='true' value='com.apple.print.pde.SummaryKind'/>
<string_constant name='kPMTargetPrinterAEProp' value='target printer'/>
<string_constant name='kPMTotalBeginPagesKey' nsstring='true' value='com.apple.print.PrintSettings.PMTotalBeginPages'/>
<string_constant name='kPMTotalBeginPagesStr' value='com.apple.print.PrintSettings.PMTotalBeginPages'/>
<string_constant name='kPMTotalSidesImagedKey' nsstring='true' value='com.apple.print.PrintSettings.PMTotalSidesImaged'/>
<string_constant name='kPMTotalSidesImagedStr' value='com.apple.print.PrintSettings.PMTotalSidesImaged'/>
<string_constant name='kPMUniPrinterPDEKindID' nsstring='true' value='com.apple.print.pde.UniPrinterKind'/>
<string_constant name='kPMUnsupportedPDEKindID' nsstring='true' value='com.apple.print.pde.UnsupportedPDEKind'/>
<string_constant name='kPMUseOptionalPINKey' nsstring='true' value='com.apple.print.PrintSettings.PMUseOptionalPIN'/>
<string_constant name='kPMUseOptionalPINStr' value='com.apple.print.PrintSettings.PMUseOptionalPIN'/>
<string_constant name='kPMVendorColorMatching' nsstring='true' value='AP_VendorColorMatching'/>
<string_constant name='kPMVendorColorMatchingStr' value='AP_VendorColorMatching'/>
<string_constant name='kPrinterModuleTypeIDStr' nsstring='true' value='BDB091F4-E57F-11D3-B5CC-0050E4603277'/>
<enum name='kAllPPDDomains' value='1'/>
<enum name='kCUPSPPDDomain' value='6'/>
<enum name='kLocalPPDDomain' value='3'/>
<enum name='kNetworkPPDDomain' value='4'/>
<enum name='kPMAllocationFailure' value='-108'/>
<enum name='kPMBorderDoubleHairline' value='2'/>
<enum name='kPMBorderDoubleThickline' value='4'/>
<enum name='kPMBorderSingleHairline' value='1'/>
<enum name='kPMBorderSingleThickline' value='3'/>
<enum name='kPMCMYKColorSpaceModel' value='3'/>
<enum name='kPMCVMSymbolNotFound' value='-9662'/>
<enum name='kPMCancel' value='128'/>
<enum name='kPMCloseFailed' value='-9785'/>
<enum name='kPMCollateAEKey' value='1819763564'/>
<enum name='kPMCollateAEType' value='1651470188'/>
<enum name='kPMColorSpaceModelCount' value='4'/>
<enum name='kPMCopieAEType' value='1819242087'/>
<enum name='kPMCopiesAEKey' value='1819763568'/>
<enum name='kPMCoverPageAfter' value='3'/>
<enum name='kPMCoverPageBefore' value='2'/>
<enum name='kPMCoverPageDefault' value='1'/>
<enum name='kPMCoverPageNone' value='1'/>
<enum name='kPMCreateMessageFailed' value='-9620'/>
<enum name='kPMDataFormatXMLCompressed' value='2'/>
<enum name='kPMDataFormatXMLDefault' value='0'/>
<enum name='kPMDataFormatXMLMinimal' value='1'/>
<enum name='kPMDeleteSubTicketFailed' value='-9585'/>
<enum name='kPMDestinationFax' value='3'/>
<enum name='kPMDestinationFile' value='2'/>
<enum name='kPMDestinationInvalid' value='0'/>
<enum name='kPMDestinationPreview' value='4'/>
<enum name='kPMDestinationPrinter' value='1'/>
<enum name='kPMDestinationProcessPDF' value='5'/>
<enum name='kPMDestinationTypeDefault' value='1'/>
<enum name='kPMDevNColorSpaceModel' value='4'/>
<enum name='kPMDocumentNotFound' value='-9644'/>
<enum name='kPMDontSwitchPDEError' value='-9531'/>
<enum name='kPMDuplexDefault' value='1'/>
<enum name='kPMDuplexNoTumble' value='2'/>
<enum name='kPMDuplexNone' value='1'/>
<enum name='kPMDuplexTumble' value='3'/>
<enum name='kPMEditRequestFailed' value='-9544'/>
<enum name='kPMErrorHandlingAEKey' value='1819764072'/>
<enum name='kPMErrorHandlingAEType' value='1701737837'/>
<enum name='kPMErrorHandlingDetailedEnum' value='1819763828'/>
<enum name='kPMErrorHandlingStandardEnum' value='1819767668'/>
<enum name='kPMFaxNumberAEKey' value='1717663854'/>
<enum name='kPMFaxNumberAEType' value='1413830740'/>
<enum name='kPMFeatureAEKey' value='1819766886'/>
<enum name='kPMFeatureAEType' value='1818850164'/>
<enum name='kPMFeatureNotInstalled' value='-9533'/>
<enum name='kPMFileOrDirOperationFailed' value='-9634'/>
<enum name='kPMFirstPageAEKey' value='1819764336'/>
<enum name='kPMFirstPageAEType' value='1819242087'/>
<enum name='kPMFontNameTooLong' value='-9704'/>
<enum name='kPMFontNotFound' value='-9703'/>
<enum name='kPMGeneralCGError' value='-9705'/>
<enum name='kPMGeneralError' value='-30870'/>
<enum name='kPMGrayColorSpaceModel' value='1'/>
<enum name='kPMHideInlineItems' value='0'/>
<enum name='kPMIOAttrNotAvailable' value='-9787'/>
<enum name='kPMIOMSymbolNotFound' value='-9661'/>
<enum name='kPMInternalError' value='-30870'/>
<enum name='kPMInvalidAllocator' value='-30890'/>
<enum name='kPMInvalidCVMContext' value='-9665'/>
<enum name='kPMInvalidCalibrationTarget' value='-30898'/>
<enum name='kPMInvalidConnection' value='-30887'/>
<enum name='kPMInvalidFileType' value='-30895'/>
<enum name='kPMInvalidIOMContext' value='-9664'/>
<enum name='kPMInvalidIndex' value='-30882'/>
<enum name='kPMInvalidItem' value='-30892'/>
<enum name='kPMInvalidJobID' value='-9666'/>
<enum name='kPMInvalidJobTemplate' value='-30885'/>
<enum name='kPMInvalidKey' value='-30888'/>
<enum name='kPMInvalidLookupSpec' value='-9542'/>
<enum name='kPMInvalidObject' value='-30896'/>
<enum name='kPMInvalidPBMRef' value='-9540'/>
<enum name='kPMInvalidPDEContext' value='-9530'/>
<enum name='kPMInvalidPMContext' value='-9663'/>
<enum name='kPMInvalidPageFormat' value='-30876'/>
<enum name='kPMInvalidPaper' value='-30897'/>
<enum name='kPMInvalidParameter' value='-50'/>
<enum name='kPMInvalidPreset' value='-30899'/>
<enum name='kPMInvalidPrintSession' value='-30879'/>
<enum name='kPMInvalidPrintSettings' value='-30875'/>
<enum name='kPMInvalidPrinter' value='-30880'/>
<enum name='kPMInvalidPrinterAddress' value='-9780'/>
<enum name='kPMInvalidPrinterInfo' value='-30886'/>
<enum name='kPMInvalidReply' value='-30894'/>
<enum name='kPMInvalidState' value='-9706'/>
<enum name='kPMInvalidSubTicket' value='-9584'/>
<enum name='kPMInvalidTicket' value='-30891'/>
<enum name='kPMInvalidType' value='-30893'/>
<enum name='kPMInvalidValue' value='-30889'/>
<enum name='kPMItemIsLocked' value='-9586'/>
<enum name='kPMJobBusy' value='-9642'/>
<enum name='kPMJobCanceled' value='-9643'/>
<enum name='kPMJobGetTicketBadFormatError' value='-9672'/>
<enum name='kPMJobGetTicketReadError' value='-9673'/>
<enum name='kPMJobManagerAborted' value='-9671'/>
<enum name='kPMJobNotFound' value='-9641'/>
<enum name='kPMJobStreamEndError' value='-9670'/>
<enum name='kPMJobStreamOpenFailed' value='-9668'/>
<enum name='kPMJobStreamReadFailed' value='-9669'/>
<enum name='kPMKeyNotFound' value='-9589'/>
<enum name='kPMKeyNotUnique' value='-9590'/>
<enum name='kPMKeyOrValueNotFound' value='-9623'/>
<enum name='kPMLandscape' value='2'/>
<enum name='kPMLastErrorCodeToMakeMaintenanceOfThisListEasier' value='-9799'/>
<enum name='kPMLastPageAEKey' value='1819765872'/>
<enum name='kPMLastPageAEType' value='1819242087'/>
<enum name='kPMLayoutAcrossAEKey' value='1819765857'/>
<enum name='kPMLayoutAcrossAEType' value='1819242087'/>
<enum name='kPMLayoutBottomTopLeftRight' value='7'/>
<enum name='kPMLayoutBottomTopRightLeft' value='8'/>
<enum name='kPMLayoutDownAEKey' value='1819765860'/>
<enum name='kPMLayoutDownAEType' value='1819242087'/>
<enum name='kPMLayoutLeftRightBottomTop' value='2'/>
<enum name='kPMLayoutLeftRightTopBottom' value='1'/>
<enum name='kPMLayoutRightLeftBottomTop' value='4'/>
<enum name='kPMLayoutRightLeftTopBottom' value='3'/>
<enum name='kPMLayoutTopBottomLeftRight' value='5'/>
<enum name='kPMLayoutTopBottomRightLeft' value='6'/>
<enum name='kPMLockIgnored' value='-30878'/>
<enum name='kPMMessagingError' value='-9624'/>
<enum name='kPMNoDefaultItem' value='-9500'/>
<enum name='kPMNoDefaultPrinter' value='-30872'/>
<enum name='kPMNoDefaultSettings' value='-9501'/>
<enum name='kPMNoError' value='0'/>
<enum name='kPMNoPrinterJobID' value='-9667'/>
<enum name='kPMNoSelectedPrinters' value='-9541'/>
<enum name='kPMNoSuchEntry' value='-30874'/>
<enum name='kPMNotImplemented' value='-30873'/>
<enum name='kPMObjectInUse' value='-30881'/>
<enum name='kPMOpenFailed' value='-9781'/>
<enum name='kPMOutOfScope' value='-30871'/>
<enum name='kPMPDFWorkFlowAEKey' value='2003987302'/>
<enum name='kPMPDFWorkFlowAEType' value='1970562616'/>
<enum name='kPMPMSymbolNotFound' value='-9660'/>
<enum name='kPMPageToPaperMappingNone' value='1'/>
<enum name='kPMPageToPaperMappingScaleToFit' value='2'/>
<enum name='kPMPaperTypeCoated' value='2'/>
<enum name='kPMPaperTypeGlossy' value='4'/>
<enum name='kPMPaperTypePlain' value='1'/>
<enum name='kPMPaperTypePremium' value='3'/>
<enum name='kPMPaperTypeTShirt' value='6'/>
<enum name='kPMPaperTypeTransparency' value='5'/>
<enum name='kPMPaperTypeUnknown' value='0'/>
<enum name='kPMPermissionError' value='-9636'/>
<enum name='kPMPluginNotFound' value='-9701'/>
<enum name='kPMPluginRegisterationFailed' value='-9702'/>
<enum name='kPMPortrait' value='1'/>
<enum name='kPMPrBrowserNoUI' value='-9545'/>
<enum name='kPMPresetAEKey' value='1886548852'/>
<enum name='kPMPresetAEType' value='1970562616'/>
<enum name='kPMPrintAllPages' value='-1'/>
<enum name='kPMPrintSettingsAEType' value='1886610804'/>
<enum name='kPMPrintTimeAEKey' value='1819767156'/>
<enum name='kPMPrintTimeAEType' value='1818522656'/>
<enum name='kPMPrinterAEType' value='1953656946'/>
<enum name='kPMPrinterIdle' value='3'/>
<enum name='kPMPrinterProcessing' value='4'/>
<enum name='kPMPrinterStopped' value='5'/>
<enum name='kPMQualityBest' value='13'/>
<enum name='kPMQualityDraft' value='4'/>
<enum name='kPMQualityHighest' value='15'/>
<enum name='kPMQualityInkSaver' value='1'/>
<enum name='kPMQualityLowest' value='0'/>
<enum name='kPMQualityNormal' value='8'/>
<enum name='kPMQualityPhoto' value='11'/>
<enum name='kPMQueueAlreadyExists' value='-9639'/>
<enum name='kPMQueueJobFailed' value='-9640'/>
<enum name='kPMQueueNotFound' value='-9638'/>
<enum name='kPMRGBColorSpaceModel' value='2'/>
<enum name='kPMReadFailed' value='-9782'/>
<enum name='kPMReadGotZeroData' value='-9788'/>
<enum name='kPMReverseLandscape' value='4'/>
<enum name='kPMReversePortrait' value='3'/>
<enum name='kPMSaveAsPDFAEKey' value='1936745574'/>
<enum name='kPMSaveAsPDFAEType' value='1718973036'/>
<enum name='kPMSaveAsPSAEKey' value='1936749344'/>
<enum name='kPMSaveAsPSAEType' value='1718973036'/>
<enum name='kPMScalingCenterOnImgArea' value='6'/>
<enum name='kPMScalingCenterOnPaper' value='5'/>
<enum name='kPMScalingPinBottomLeft' value='3'/>
<enum name='kPMScalingPinBottomRight' value='4'/>
<enum name='kPMScalingPinTopLeft' value='1'/>
<enum name='kPMScalingPinTopRight' value='2'/>
<enum name='kPMServerAlreadyRunning' value='-9631'/>
<enum name='kPMServerAttributeRestricted' value='-9633'/>
<enum name='kPMServerCommunicationFailed' value='-9621'/>
<enum name='kPMServerNotFound' value='-9630'/>
<enum name='kPMServerSuspended' value='-9632'/>
<enum name='kPMShowDefaultInlineItems' value='32768'/>
<enum name='kPMShowInlineCopies' value='1'/>
<enum name='kPMShowInlineOrientation' value='8'/>
<enum name='kPMShowInlinePageRange' value='2'/>
<enum name='kPMShowInlinePageRangeWithSelection' value='64'/>
<enum name='kPMShowInlinePaperSize' value='4'/>
<enum name='kPMShowInlineScale' value='128'/>
<enum name='kPMShowPageAttributesPDE' value='256'/>
<enum name='kPMShowPrintDialogAEType' value='1885629543'/>
<enum name='kPMSimplexTumble' value='4'/>
<enum name='kPMStatusFailed' value='-9784'/>
<enum name='kPMStringConversionFailure' value='-30883'/>
<enum name='kPMSubTicketNotFound' value='-9583'/>
<enum name='kPMSyncRequestFailed' value='-9543'/>
<enum name='kPMTargetPrinterAEKey' value='1953656946'/>
<enum name='kPMTargetPrinterAEType' value='1413830740'/>
<enum name='kPMTemplateIsLocked' value='-9588'/>
<enum name='kPMTicketIsLocked' value='-9587'/>
<enum name='kPMTicketTypeNotFound' value='-9580'/>
<enum name='kPMUnableToFindProcess' value='-9532'/>
<enum name='kPMUnexpectedImagingError' value='-9707'/>
<enum name='kPMUnknownColorSpaceModel' value='0'/>
<enum name='kPMUnknownDataType' value='-9591'/>
<enum name='kPMUnknownMessage' value='-9637'/>
<enum name='kPMUnlocked' value='0'/>
<enum name='kPMUnsupportedConnection' value='-9786'/>
<enum name='kPMUpdateTicketFailed' value='-9581'/>
<enum name='kPMUserOrGroupNotFound' value='-9635'/>
<enum name='kPMValidateTicketFailed' value='-9582'/>
<enum name='kPMValueOutOfRange' value='-30877'/>
<enum name='kPMWriteFailed' value='-9783'/>
<enum name='kPMXMLParseError' value='-30884'/>
<enum name='kSystemPPDDomain' value='2'/>
<enum name='kUserPPDDomain' value='5'/>
<function name='PMCGImageCreateWithEPSDataProvider'>
<arg declared_type='CGDataProviderRef' name='epsDataProvider' type='^{CGDataProvider=}'/>
<arg declared_type='CGImageRef' name='epsPreview' type='^{CGImage=}'/>
<retval already_retained='true' declared_type='CGImageRef' type='^{CGImage=}'/>
</function>
<function name='PMCopyAvailablePPDs'>
<arg declared_type='PMPPDDomain' name='domain' type='S'/>
<arg declared_type='CFArrayRef*' name='ppds' type='^^{__CFArray}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMCopyLocalizedPPD'>
<arg declared_type='CFURLRef' name='ppd' type='^{__CFURL=}'/>
<arg declared_type='CFURLRef*' name='localizedPPD' type='^^{__CFURL}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMCopyPPDData'>
<arg declared_type='CFURLRef' name='ppd' type='^{__CFURL=}'/>
<arg declared_type='CFDataRef*' name='data' type='^^{__CFData}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMCopyPageFormat'>
<arg declared_type='PMPageFormat' name='formatSrc' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='PMPageFormat' name='formatDest' type='^{OpaquePMPageFormat=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMCopyPrintSettings'>
<arg declared_type='PMPrintSettings' name='settingSrc' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='PMPrintSettings' name='settingDest' type='^{OpaquePMPrintSettings=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMCreateGenericPrinter'>
<arg declared_type='PMPrinter*' name='printer' type='^^{OpaquePMPrinter}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMCreatePageFormat'>
<arg declared_type='PMPageFormat*' name='pageFormat' type='^^{OpaquePMPageFormat}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMCreatePageFormatWithPMPaper'>
<arg declared_type='PMPageFormat*' name='pageFormat' type='^^{OpaquePMPageFormat}'/>
<arg declared_type='PMPaper' name='paper' type='^{OpaquePMPaper=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMCreatePrintSettings'>
<arg declared_type='PMPrintSettings*' name='printSettings' type='^^{OpaquePMPrintSettings}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMCreateSession'>
<arg declared_type='PMPrintSession*' name='printSession' type='^^{OpaquePMPrintSession}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMFlattenPageFormatToCFData'>
<arg declared_type='PMPageFormat' name='pageFormat' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='CFDataRef*' name='flatFormat' type='^^{__CFData}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMFlattenPageFormatToURL'>
<arg declared_type='PMPageFormat' name='pageFormat' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='CFURLRef' name='flattenFileURL' type='^{__CFURL=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMFlattenPrintSettingsToCFData'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='CFDataRef*' name='flatSetting' type='^^{__CFData}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMFlattenPrintSettingsToURL'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='CFURLRef' name='flattenFileURL' type='^{__CFURL=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMGetAdjustedPageRect'>
<arg declared_type='PMPageFormat' name='pageFormat' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='PMRect*' name='pageRect' type='^{PMRect=dddd}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMGetAdjustedPaperRect'>
<arg declared_type='PMPageFormat' name='pageFormat' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='PMRect*' name='paperRect' type='^{PMRect=dddd}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMGetCollate'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='Boolean*' name='collate' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMGetCopies'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='UInt32*' name='copies' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMGetDuplex'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='PMDuplexMode*' name='duplexSetting' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMGetFirstPage'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='UInt32*' name='first' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMGetLastPage'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='UInt32*' name='last' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMGetOrientation'>
<arg declared_type='PMPageFormat' name='pageFormat' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='PMOrientation*' name='orientation' type='^S'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMGetPageFormatExtendedData'>
<arg declared_type='PMPageFormat' name='pageFormat' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='OSType' name='dataID' type='L' type64='I'/>
<arg declared_type='UInt32*' name='size' type='^I'/>
<arg declared_type='void*' name='extendedData' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMGetPageFormatPaper'>
<arg declared_type='PMPageFormat' name='format' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='PMPaper*' name='paper' type='^^{OpaquePMPaper}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMGetPageRange'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='UInt32*' name='minPage' type='^I'/>
<arg declared_type='UInt32*' name='maxPage' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMGetPrintSettingsExtendedData'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='OSType' name='dataID' type='L' type64='I'/>
<arg declared_type='UInt32*' name='size' type='^I'/>
<arg declared_type='void*' name='extendedData' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMGetScale'>
<arg declared_type='PMPageFormat' name='pageFormat' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='double*' name='scale' type='^d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMGetUnadjustedPageRect'>
<arg declared_type='PMPageFormat' name='pageFormat' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='PMRect*' name='pageRect' type='^{PMRect=dddd}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMGetUnadjustedPaperRect'>
<arg declared_type='PMPageFormat' name='pageFormat' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='PMRect*' name='paperRect' type='^{PMRect=dddd}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPageFormatCreateDataRepresentation'>
<arg declared_type='PMPageFormat' name='pageFormat' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='CFDataRef*' name='data' type='^^{__CFData}'/>
<arg declared_type='PMDataFormat' name='format' type='i'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPageFormatCreateWithDataRepresentation'>
<arg declared_type='CFDataRef' name='data' type='^{__CFData=}'/>
<arg declared_type='PMPageFormat*' name='pageFormat' type='^^{OpaquePMPageFormat}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPageFormatGetPrinterID'>
<arg declared_type='PMPageFormat' name='pageFormat' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='CFStringRef*' name='printerID' type='^^{__CFString}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPaperCreateCustom'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='CFStringRef' name='id' type='^{__CFString=}'/>
<arg declared_type='CFStringRef' name='name' type='^{__CFString=}'/>
<arg declared_type='double' name='width' type='d'/>
<arg declared_type='double' name='height' type='d'/>
<arg const='true' declared_type='PMPaperMargins*' name='margins' type='^{PMRect=dddd}'/>
<arg declared_type='PMPaper*' name='paperP' type='^^{OpaquePMPaper}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPaperCreateLocalizedName'>
<arg declared_type='PMPaper' name='paper' type='^{OpaquePMPaper=}'/>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='CFStringRef*' name='paperName' type='^^{__CFString}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPaperGetHeight'>
<arg declared_type='PMPaper' name='paper' type='^{OpaquePMPaper=}'/>
<arg declared_type='double*' name='paperHeight' type='^d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPaperGetID'>
<arg declared_type='PMPaper' name='paper' type='^{OpaquePMPaper=}'/>
<arg declared_type='CFStringRef*' name='paperID' type='^^{__CFString}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPaperGetMargins'>
<arg declared_type='PMPaper' name='paper' type='^{OpaquePMPaper=}'/>
<arg declared_type='PMPaperMargins*' name='paperMargins' type='^{PMRect=dddd}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPaperGetName'>
<arg declared_type='PMPaper' name='paper' type='^{OpaquePMPaper=}'/>
<arg declared_type='CFStringRef*' name='paperName' type='^^{__CFString}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPaperGetPPDPaperName'>
<arg declared_type='PMPaper' name='paper' type='^{OpaquePMPaper=}'/>
<arg declared_type='CFStringRef*' name='paperName' type='^^{__CFString}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPaperGetPrinterID'>
<arg declared_type='PMPaper' name='paper' type='^{OpaquePMPaper=}'/>
<arg declared_type='CFStringRef*' name='printerID' type='^^{__CFString}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPaperGetWidth'>
<arg declared_type='PMPaper' name='paper' type='^{OpaquePMPaper=}'/>
<arg declared_type='double*' name='paperWidth' type='^d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPaperIsCustom'>
<arg declared_type='PMPaper' name='paper' type='^{OpaquePMPaper=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='PMPresetCopyName'>
<arg declared_type='PMPreset' name='preset' type='^{OpaquePMPreset=}'/>
<arg declared_type='CFStringRef*' name='name' type='^^{__CFString}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPresetCreatePrintSettings'>
<arg declared_type='PMPreset' name='preset' type='^{OpaquePMPreset=}'/>
<arg declared_type='PMPrintSession' name='session' type='^{OpaquePMPrintSession=}'/>
<arg declared_type='PMPrintSettings*' name='printSettings' type='^^{OpaquePMPrintSettings}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPresetGetAttributes'>
<arg declared_type='PMPreset' name='preset' type='^{OpaquePMPreset=}'/>
<arg declared_type='CFDictionaryRef*' name='attributes' type='^^{__CFDictionary}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrintSettingsCopyAsDictionary'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='CFDictionaryRef*' name='settingsDictionary' type='^^{__CFDictionary}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrintSettingsCopyKeys'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='CFArrayRef*' name='settingsKeys' type='^^{__CFArray}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrintSettingsCreateDataRepresentation'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='CFDataRef*' name='data' type='^^{__CFData}'/>
<arg declared_type='PMDataFormat' name='format' type='i'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrintSettingsCreateWithDataRepresentation'>
<arg declared_type='CFDataRef' name='data' type='^{__CFData=}'/>
<arg declared_type='PMPrintSettings*' name='printSettings' type='^^{OpaquePMPrintSettings}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrintSettingsGetJobName'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='CFStringRef*' name='name' type='^^{__CFString}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrintSettingsGetValue'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='CFStringRef' name='key' type='^{__CFString=}'/>
<arg declared_type='CFTypeRef*' name='value' type='^^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrintSettingsSetJobName'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='CFStringRef' name='name' type='^{__CFString=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrintSettingsSetValue'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='CFStringRef' name='key' type='^{__CFString=}'/>
<arg declared_type='CFTypeRef' name='value' type='@'/>
<arg declared_type='Boolean' name='locked' type='B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrintSettingsToOptions'>
<arg declared_type='PMPrintSettings' name='settings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='char**' name='options' type='^*'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrintSettingsToOptionsWithPrinterAndPageFormat'>
<arg declared_type='PMPrintSettings' name='settings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='PMPageFormat' name='pageFormat' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='char**' name='options' type='^*'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterCopyDescriptionURL'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='CFStringRef' name='descriptionType' type='^{__CFString=}'/>
<arg declared_type='CFURLRef*' name='fileURL' type='^^{__CFURL}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterCopyDeviceURI'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='CFURLRef*' name='deviceURI' type='^^{__CFURL}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterCopyHostName'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='CFStringRef*' name='hostNameP' type='^^{__CFString}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterCopyPresets'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='CFArrayRef*' name='presetList' type='^^{__CFArray}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterCopyState'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='CFDictionaryRef*' name='stateDict' type='^^{__CFDictionary}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterCreateFromPrinterID'>
<arg declared_type='CFStringRef' name='printerID' type='^{__CFString=}'/>
<retval declared_type='PMPrinter' type='^{OpaquePMPrinter=}'/>
</function>
<function name='PMPrinterCreatePaperInfoListForMenu'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='PMPageFormat' name='pageFormat' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='CFArrayRef*' name='paperInfoList' type='^^{__CFArray}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterGetCommInfo'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='Boolean*' name='supportsControlCharRangeP' type='^B'/>
<arg declared_type='Boolean*' name='supportsEightBitP' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterGetDriverCreator'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='OSType*' name='creator' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterGetDriverReleaseInfo'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='VersRec*' name='release' type='^{VersRec={NumVersion=CCCC}s[256C][256C]}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterGetID'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<retval declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='PMPrinterGetIndexedPrinterResolution'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='UInt32' name='index' type='L' type64='I'/>
<arg declared_type='PMResolution*' name='resolutionP' type='^{PMResolution=dd}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterGetLanguageInfo'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='PMLanguageInfo*' name='info' type='^{PMLanguageInfo=[33C][33C][33C]}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterGetLocation'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<retval declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='PMPrinterGetMakeAndModelName'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='CFStringRef*' name='makeAndModel' type='^^{__CFString}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterGetMimeTypes'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='PMPrintSettings' name='settings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='CFArrayRef*' name='mimeTypes' type='^^{__CFArray}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterGetName'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<retval declared_type='CFStringRef' type='^{__CFString=}'/>
</function>
<function name='PMPrinterGetOutputResolution'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='PMResolution*' name='resolutionP' type='^{PMResolution=dd}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterGetPaperList'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='CFArrayRef*' name='paperList' type='^^{__CFArray}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterGetPrinterResolutionCount'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='UInt32*' name='countP' type='^I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterGetState'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='PMPrinterState*' name='state' type='^S'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterIsDefault'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='PMPrinterIsFavorite'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='PMPrinterIsPostScriptCapable'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='PMPrinterIsPostScriptPrinter'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='Boolean*' name='isPSPrinter' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterIsRemote'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='Boolean*' name='isRemoteP' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterPrintWithFile'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='PMPrintSettings' name='settings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='PMPageFormat' name='format' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='CFStringRef' name='mimeType' type='^{__CFString=}'/>
<arg declared_type='CFURLRef' name='fileURL' type='^{__CFURL=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterPrintWithProvider'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='PMPrintSettings' name='settings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='PMPageFormat' name='format' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='CFStringRef' name='mimeType' type='^{__CFString=}'/>
<arg declared_type='CGDataProviderRef' name='provider' type='^{CGDataProvider=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterSendCommand'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='CFStringRef' name='commandString' type='^{__CFString=}'/>
<arg declared_type='CFStringRef' name='jobTitle' type='^{__CFString=}'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterSetDefault'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterSetOutputResolution'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg const='true' declared_type='PMResolution*' name='resolutionP' type='^{PMResolution=dd}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMPrinterWritePostScriptToURL'>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='PMPrintSettings' name='settings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='PMPageFormat' name='format' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='CFStringRef' name='mimeType' type='^{__CFString=}'/>
<arg declared_type='CFURLRef' name='sourceFileURL' type='^{__CFURL=}'/>
<arg declared_type='CFURLRef' name='destinationFileURL' type='^{__CFURL=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMRelease'>
<arg declared_type='PMObject' name='object' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMRetain'>
<arg declared_type='PMObject' name='object' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMServerCreatePrinterList'>
<arg declared_type='PMServer' name='server' type='^{OpaquePMServer=}'/>
<arg declared_type='CFArrayRef*' name='printerList' type='^^{__CFArray}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMServerLaunchPrinterBrowser'>
<arg declared_type='PMServer' name='server' type='^{OpaquePMServer=}'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionBeginCGDocumentNoDialog'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='PMPageFormat' name='pageFormat' type='^{OpaquePMPageFormat=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionBeginPageNoDialog'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<arg declared_type='PMPageFormat' name='pageFormat' type='^{OpaquePMPageFormat=}'/>
<arg const='true' declared_type='PMRect*' name='pageFrame' type='^{PMRect=dddd}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionCopyDestinationFormat'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='CFStringRef*' name='destFormatP' type='^^{__CFString}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionCopyDestinationLocation'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='CFURLRef*' name='destLocationP' type='^^{__CFURL}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionCopyOutputFormatList'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<arg declared_type='PMDestinationType' name='destType' type='S'/>
<arg declared_type='CFArrayRef*' name='documentFormatP' type='^^{__CFArray}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionCreatePageFormatList'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<arg declared_type='CFArrayRef*' name='pageFormatList' type='^^{__CFArray}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionCreatePrinterList'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<arg declared_type='CFArrayRef*' name='printerList' type='^^{__CFArray}'/>
<arg declared_type='CFIndex*' name='currentIndex' type='^i' type64='^q'/>
<arg declared_type='PMPrinter*' name='currentPrinter' type='^^{OpaquePMPrinter}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionDefaultPageFormat'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<arg declared_type='PMPageFormat' name='pageFormat' type='^{OpaquePMPageFormat=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionDefaultPrintSettings'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionEndDocumentNoDialog'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionEndPageNoDialog'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionError'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionGetCGGraphicsContext'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<arg declared_type='CGContextRef*' name='context' type='^^{CGContext}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionGetCurrentPrinter'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<arg declared_type='PMPrinter*' name='currentPrinter' type='^^{OpaquePMPrinter}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionGetDataFromSession'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<arg declared_type='CFStringRef' name='key' type='^{__CFString=}'/>
<arg declared_type='CFTypeRef*' name='data' type='^^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionGetDestinationType'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='PMDestinationType*' name='destTypeP' type='^S'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionSetCurrentPMPrinter'>
<arg declared_type='PMPrintSession' name='session' type='^{OpaquePMPrintSession=}'/>
<arg declared_type='PMPrinter' name='printer' type='^{OpaquePMPrinter=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionSetDataInSession'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<arg declared_type='CFStringRef' name='key' type='^{__CFString=}'/>
<arg declared_type='CFTypeRef' name='data' type='@'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionSetDestination'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='PMDestinationType' name='destType' type='S'/>
<arg declared_type='CFStringRef' name='destFormat' type='^{__CFString=}'/>
<arg declared_type='CFURLRef' name='destLocation' type='^{__CFURL=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionSetError'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<arg declared_type='OSStatus' name='printError' type='l' type64='i'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionValidatePageFormat'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<arg declared_type='PMPageFormat' name='pageFormat' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='Boolean*' name='result' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSessionValidatePrintSettings'>
<arg declared_type='PMPrintSession' name='printSession' type='^{OpaquePMPrintSession=}'/>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='Boolean*' name='result' type='^B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSetCollate'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='Boolean' name='collate' type='B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSetCopies'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='UInt32' name='copies' type='L' type64='I'/>
<arg declared_type='Boolean' name='lock' type='B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSetDuplex'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='PMDuplexMode' name='duplexSetting' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSetFirstPage'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='UInt32' name='first' type='L' type64='I'/>
<arg declared_type='Boolean' name='lock' type='B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSetLastPage'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='UInt32' name='last' type='L' type64='I'/>
<arg declared_type='Boolean' name='lock' type='B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSetOrientation'>
<arg declared_type='PMPageFormat' name='pageFormat' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='PMOrientation' name='orientation' type='S'/>
<arg declared_type='Boolean' name='lock' type='B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSetPageFormatExtendedData'>
<arg declared_type='PMPageFormat' name='pageFormat' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='OSType' name='dataID' type='L' type64='I'/>
<arg declared_type='UInt32' name='size' type='L' type64='I'/>
<arg declared_type='void*' name='extendedData' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSetPageRange'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='UInt32' name='minPage' type='L' type64='I'/>
<arg declared_type='UInt32' name='maxPage' type='L' type64='I'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSetPrintSettingsExtendedData'>
<arg declared_type='PMPrintSettings' name='printSettings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='OSType' name='dataID' type='L' type64='I'/>
<arg declared_type='UInt32' name='size' type='L' type64='I'/>
<arg declared_type='void*' name='extendedData' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMSetScale'>
<arg declared_type='PMPageFormat' name='pageFormat' type='^{OpaquePMPageFormat=}'/>
<arg declared_type='double' name='scale' type='d'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMUnflattenPageFormatWithCFData'>
<arg declared_type='CFDataRef' name='flattenCFData' type='^{__CFData=}'/>
<arg declared_type='PMPageFormat*' name='pageFormat' type='^^{OpaquePMPageFormat}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMUnflattenPageFormatWithURL'>
<arg declared_type='CFURLRef' name='flattenFileURL' type='^{__CFURL=}'/>
<arg declared_type='PMPageFormat*' name='pageFormat' type='^^{OpaquePMPageFormat}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMUnflattenPrintSettingsWithCFData'>
<arg declared_type='CFDataRef' name='flattenCFData' type='^{__CFData=}'/>
<arg declared_type='PMPrintSettings*' name='printSettings' type='^^{OpaquePMPrintSettings}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMUnflattenPrintSettingsWithURL'>
<arg declared_type='CFURLRef' name='flattenFileURL' type='^{__CFURL=}'/>
<arg declared_type='PMPrintSettings*' name='printSettings' type='^^{OpaquePMPrintSettings}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMWorkflowCopyItems'>
<arg declared_type='CFArrayRef*' name='workflowItems' type='^^{__CFArray}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMWorkflowSubmitPDFWithOptions'>
<arg declared_type='CFURLRef' name='workflowItem' type='^{__CFURL=}'/>
<arg declared_type='CFStringRef' name='title' type='^{__CFString=}'/>
<arg const='true' declared_type='char*' name='options' type='*'/>
<arg declared_type='CFURLRef' name='pdfFile' type='^{__CFURL=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='PMWorkflowSubmitPDFWithSettings'>
<arg declared_type='CFURLRef' name='workflowItem' type='^{__CFURL=}'/>
<arg declared_type='PMPrintSettings' name='settings' type='^{OpaquePMPrintSettings=}'/>
<arg declared_type='CFURLRef' name='pdfFile' type='^{__CFURL=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<class name='NSObject'>
<method selector='PDEPanelsForType:withHostInfo:'>
<arg declared_type='NSString*' index='0' name='pdeType' type='@'/>
<arg declared_type='id' index='1' name='host' type='@'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='PMPrinter'>
<retval declared_type='PMPrinter' type='^{OpaquePMPrinter=}'/>
</method>
<method selector='PPDOptionKeyValueDidChange:ppdChoice:'>
<arg declared_type='NSString*' index='0' name='option' type='@'/>
<arg declared_type='NSString*' index='1' name='choice' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='initWithBundle:'>
<arg declared_type='NSBundle*' index='0' name='theBundle' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='pageFormat'>
<retval declared_type='PMPageFormat' type='^{OpaquePMPageFormat=}'/>
</method>
<method selector='panelKind'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='panelName'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='panelView'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='panelViewDidResize'>
<retval declared_type='void' type='v'/>
</method>
<method selector='ppdFile'>
<retval declared_type='ppd_file_t*' type='^{ppd_file_s=iiiiiiiiii*i^{ppd_emul_s}***********i^{ppd_group_s}i^{ppd_size_s}[2f][2f][4f]i^{ppd_const_s}i^*i^{ppd_profile_s}i^*i**ii^^{ppd_attr_s}^{_cups_array_s}^{_cups_array_s}^{_cups_array_s}^{_cups_array_s}^{_cups_array_s}^{_ppd_cache_s}}'/>
</method>
<method selector='printSession'>
<retval declared_type='PMPrintSession' type='^{OpaquePMPrintSession=}'/>
</method>
<method selector='printSettings'>
<retval declared_type='PMPrintSettings' type='^{OpaquePMPrintSettings=}'/>
</method>
<method selector='printWindowWillClose:'>
<arg declared_type='BOOL' index='0' name='userCanceled' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='restoreValuesAndReturnError:'>
<arg declared_type='NSError**' index='0' name='error' type='^@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='saveValuesAndReturnError:'>
<arg declared_type='NSError**' index='0' name='error' type='^@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='shouldHide'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='shouldPrint'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='shouldShowHelp'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='summaryInfo'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='supportedPPDOptionKeys'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='willChangePPDOptionKeyValue:ppdChoice:'>
<arg declared_type='NSString*' index='0' name='option' type='@'/>
<arg declared_type='NSString*' index='1' name='choice' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='willShow'>
<retval declared_type='void' type='v'/>
</method>
</class>
<informal_protocol name='PDEPanel'>
<method selector='PPDOptionKeyValueDidChange:ppdChoice:' type='v16@0:4@8@12' type64='v32@0:8@16@24'>
<arg declared_type='NSString*' index='0' name='option' type='@'/>
<arg declared_type='NSString*' index='1' name='choice' type='@'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='panelKind' type='@8@0:4' type64='@16@0:8'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='panelName' type='@8@0:4' type64='@16@0:8'>
<retval declared_type='NSString*' type='@'/>
</method>
<method selector='panelView' type='@8@0:4' type64='@16@0:8'>
<retval declared_type='NSView*' type='@'/>
</method>
<method selector='printWindowWillClose:' type='v12@0:4B8' type64='v20@0:8B16'>
<arg declared_type='BOOL' index='0' name='userCanceled' type='B'/>
<retval declared_type='void' type='v'/>
</method>
<method selector='restoreValuesAndReturnError:' type='B12@0:4^@8' type64='B24@0:8^@16'>
<arg declared_type='NSError**' index='0' name='error' type='^@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='saveValuesAndReturnError:' type='B12@0:4^@8' type64='B24@0:8^@16'>
<arg declared_type='NSError**' index='0' name='error' type='^@'/>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='shouldHide' type='B8@0:4' type64='B16@0:8'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='shouldPrint' type='B8@0:4' type64='B16@0:8'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='shouldShowHelp' type='B8@0:4' type64='B16@0:8'>
<retval declared_type='BOOL' type='B'/>
</method>
<method selector='summaryInfo' type='@8@0:4' type64='@16@0:8'>
<retval declared_type='NSDictionary*' type='@'/>
</method>
<method selector='supportedPPDOptionKeys' type='@8@0:4' type64='@16@0:8'>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='willShow' type='v8@0:4' type64='v16@0:8'>
<retval declared_type='void' type='v'/>
</method>
</informal_protocol>
<informal_protocol name='PDEPlugIn'>
<method selector='PDEPanelsForType:withHostInfo:' type='@16@0:4@8@12' type64='@32@0:8@16@24'>
<arg declared_type='NSString*' index='0' name='pdeType' type='@'/>
<arg declared_type='id' index='1' name='host' type='@'/>
<retval declared_type='NSArray*' type='@'/>
</method>
<method selector='initWithBundle:' type='B12@0:4@8' type64='B24@0:8@16'>
<arg declared_type='NSBundle*' index='0' name='theBundle' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<informal_protocol name='PDEPlugInCallbackProtocol'>
<method selector='PMPrinter' type='^{OpaquePMPrinter=}8@0:4' type64='^{OpaquePMPrinter=}16@0:8'>
<retval declared_type='PMPrinter' type='^{OpaquePMPrinter=}'/>
</method>
<method selector='pageFormat' type='^{OpaquePMPageFormat=}8@0:4' type64='^{OpaquePMPageFormat=}16@0:8'>
<retval declared_type='PMPageFormat' type='^{OpaquePMPageFormat=}'/>
</method>
<method selector='panelViewDidResize' type='v8@0:4' type64='v16@0:8'>
<retval declared_type='void' type='v'/>
</method>
<method selector='ppdFile' type='^{ppd_file_s=iiiiiiiiii*i^{ppd_emul_s}***********i^{ppd_group_s}i^{ppd_size_s}[2f][2f][4f]i^{ppd_const_s}i^*i^{ppd_profile_s}i^*i**ii^^{ppd_attr_s}^{_cups_array_s}^{_cups_array_s}^{_cups_array_s}^{_cups_array_s}^{_cups_array_s}^{_ppd_cache_s}}8@0:4' type64='^{ppd_file_s=iiiiiiiiii*i^{ppd_emul_s}***********i^{ppd_group_s}i^{ppd_size_s}[2f][2f][4f]i^{ppd_const_s}i^*i^{ppd_profile_s}i^*i**ii^^{ppd_attr_s}^{_cups_array_s}^{_cups_array_s}^{_cups_array_s}^{_cups_array_s}^{_cups_array_s}^{_ppd_cache_s}}16@0:8'>
<retval declared_type='ppd_file_t*' type='^{ppd_file_s=iiiiiiiiii*i^{ppd_emul_s}***********i^{ppd_group_s}i^{ppd_size_s}[2f][2f][4f]i^{ppd_const_s}i^*i^{ppd_profile_s}i^*i**ii^^{ppd_attr_s}^{_cups_array_s}^{_cups_array_s}^{_cups_array_s}^{_cups_array_s}^{_cups_array_s}^{_ppd_cache_s}}'/>
</method>
<method selector='printSession' type='^{OpaquePMPrintSession=}8@0:4' type64='^{OpaquePMPrintSession=}16@0:8'>
<retval declared_type='PMPrintSession' type='^{OpaquePMPrintSession=}'/>
</method>
<method selector='printSettings' type='^{OpaquePMPrintSettings=}8@0:4' type64='^{OpaquePMPrintSettings=}16@0:8'>
<retval declared_type='PMPrintSettings' type='^{OpaquePMPrintSettings=}'/>
</method>
<method selector='willChangePPDOptionKeyValue:ppdChoice:' type='B16@0:4@8@12' type64='B32@0:8@16@24'>
<arg declared_type='NSString*' index='0' name='option' type='@'/>
<arg declared_type='NSString*' index='1' name='choice' type='@'/>
<retval declared_type='BOOL' type='B'/>
</method>
</informal_protocol>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ATS.framework'/>
<depends_on path='/System/Library/Frameworks/CoreText.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/ColorSync.framework'/>
<depends_on path='/System/Library/Frameworks/CoreGraphics.framework'/>
<depends_on path='/System/Library/Frameworks/IOKit.framework'/>
<struct name='ATSFlatDataFontNameDataHeader' type='{ATSFlatDataFontNameDataHeader=&quot;nameSpecifierType&quot;I&quot;nameSpecifierSize&quot;I}'>
<field declared_type='ATSFlatDataFontSpeciferType' name='nameSpecifierType' type='L' type64='I'/>
<field declared_type='UInt32' name='nameSpecifierSize' type='L' type64='I'/>
</struct>
<struct name='ATSFlatDataFontSpecRawNameData' type='{ATSFlatDataFontSpecRawNameData=&quot;fontNameType&quot;I&quot;fontNamePlatform&quot;I&quot;fontNameScript&quot;I&quot;fontNameLanguage&quot;I&quot;fontNameLength&quot;I}'>
<field declared_type='FontNameCode' name='fontNameType' type='L' type64='I'/>
<field declared_type='FontPlatformCode' name='fontNamePlatform' type='L' type64='I'/>
<field declared_type='FontScriptCode' name='fontNameScript' type='L' type64='I'/>
<field declared_type='FontLanguageCode' name='fontNameLanguage' type='L' type64='I'/>
<field declared_type='UInt32' name='fontNameLength' type='L' type64='I'/>
</struct>
<struct name='ATSFlatDataFontSpecRawNameDataHeader' type='{ATSFlatDataFontSpecRawNameDataHeader=&quot;numberOfFlattenedNames&quot;I&quot;nameDataArray&quot;[1{ATSFlatDataFontSpecRawNameData=&quot;fontNameType&quot;I&quot;fontNamePlatform&quot;I&quot;fontNameScript&quot;I&quot;fontNameLanguage&quot;I&quot;fontNameLength&quot;I}]}'>
<field declared_type='UInt32' name='numberOfFlattenedNames' type='L' type64='I'/>
<field declared_type='ATSFlatDataFontSpecRawNameData*' name='nameDataArray' type='[1{ATSFlatDataFontSpecRawNameData=&quot;fontNameType&quot;I&quot;fontNamePlatform&quot;I&quot;fontNameScript&quot;I&quot;fontNameLanguage&quot;I&quot;fontNameLength&quot;I}]'/>
</struct>
<struct name='ATSFlatDataLayoutControlsDataHeader' type='{ATSFlatDataLayoutControlsDataHeader=&quot;numberOfLayoutControls&quot;I&quot;controlArray&quot;[1{ATSUAttributeInfo=&quot;fTag&quot;I&quot;fValueSize&quot;I}]}' type64='{ATSFlatDataLayoutControlsDataHeader=&quot;numberOfLayoutControls&quot;I&quot;controlArray&quot;[1{ATSUAttributeInfo=&quot;fTag&quot;I&quot;fValueSize&quot;Q}]}'>
<field declared_type='UInt32' name='numberOfLayoutControls' type='L' type64='I'/>
<field declared_type='ATSUAttributeInfo*' name='controlArray' type='[1{ATSUAttributeInfo=&quot;fTag&quot;I&quot;fValueSize&quot;I}]' type64='[1{ATSUAttributeInfo=&quot;fTag&quot;I&quot;fValueSize&quot;Q}]'/>
</struct>
<struct name='ATSFlatDataLineInfoData' type='{ATSFlatDataLineInfoData=&quot;lineLength&quot;I&quot;numberOfLineControls&quot;I}'>
<field declared_type='UInt32' name='lineLength' type='L' type64='I'/>
<field declared_type='UInt32' name='numberOfLineControls' type='L' type64='I'/>
</struct>
<struct name='ATSFlatDataLineInfoHeader' type='{ATSFlatDataLineInfoHeader=&quot;numberOfLines&quot;I&quot;lineInfoArray&quot;[1{ATSFlatDataLineInfoData=&quot;lineLength&quot;I&quot;numberOfLineControls&quot;I}]}'>
<field declared_type='UInt32' name='numberOfLines' type='L' type64='I'/>
<field declared_type='ATSFlatDataLineInfoData*' name='lineInfoArray' type='[1{ATSFlatDataLineInfoData=&quot;lineLength&quot;I&quot;numberOfLineControls&quot;I}]'/>
</struct>
<struct name='ATSFlatDataMainHeaderBlock' type='{ATSFlatDataMainHeaderBlock=&quot;version&quot;I&quot;sizeOfDataBlock&quot;I&quot;offsetToTextLayouts&quot;I&quot;offsetToStyleRuns&quot;I&quot;offsetToStyleList&quot;I}'>
<field declared_type='UInt32' name='version' type='L' type64='I'/>
<field declared_type='UInt32' name='sizeOfDataBlock' type='L' type64='I'/>
<field declared_type='UInt32' name='offsetToTextLayouts' type='L' type64='I'/>
<field declared_type='UInt32' name='offsetToStyleRuns' type='L' type64='I'/>
<field declared_type='UInt32' name='offsetToStyleList' type='L' type64='I'/>
</struct>
<struct name='ATSFlatDataStyleListFeatureData' type='{ATSFlatDataStyleListFeatureData=&quot;theFeatureType&quot;S&quot;theFeatureSelector&quot;S}'>
<field declared_type='ATSUFontFeatureType' name='theFeatureType' type='S'/>
<field declared_type='ATSUFontFeatureSelector' name='theFeatureSelector' type='S'/>
</struct>
<struct name='ATSFlatDataStyleListHeader' type='{ATSFlatDataStyleListHeader=&quot;numberOfStyles&quot;I&quot;styleDataArray&quot;[1{ATSFlatDataStyleListStyleDataHeader=&quot;sizeOfStyleInfo&quot;I&quot;numberOfSetAttributes&quot;I&quot;numberOfSetFeatures&quot;I&quot;numberOfSetVariations&quot;I}]}'>
<field declared_type='UInt32' name='numberOfStyles' type='L' type64='I'/>
<field declared_type='ATSFlatDataStyleListStyleDataHeader*' name='styleDataArray' type='[1{ATSFlatDataStyleListStyleDataHeader=&quot;sizeOfStyleInfo&quot;I&quot;numberOfSetAttributes&quot;I&quot;numberOfSetFeatures&quot;I&quot;numberOfSetVariations&quot;I}]'/>
</struct>
<struct name='ATSFlatDataStyleListStyleDataHeader' type='{ATSFlatDataStyleListStyleDataHeader=&quot;sizeOfStyleInfo&quot;I&quot;numberOfSetAttributes&quot;I&quot;numberOfSetFeatures&quot;I&quot;numberOfSetVariations&quot;I}'>
<field declared_type='UInt32' name='sizeOfStyleInfo' type='L' type64='I'/>
<field declared_type='UInt32' name='numberOfSetAttributes' type='L' type64='I'/>
<field declared_type='UInt32' name='numberOfSetFeatures' type='L' type64='I'/>
<field declared_type='UInt32' name='numberOfSetVariations' type='L' type64='I'/>
</struct>
<struct name='ATSFlatDataStyleListVariationData' type='{ATSFlatDataStyleListVariationData=&quot;theVariationAxis&quot;I&quot;theVariationValue&quot;i}'>
<field declared_type='ATSUFontVariationAxis' name='theVariationAxis' type='L' type64='I'/>
<field declared_type='ATSUFontVariationValue' name='theVariationValue' type='l' type64='i'/>
</struct>
<struct name='ATSFlatDataStyleRunDataHeader' type='{ATSFlatDataStyleRunDataHeader=&quot;numberOfStyleRuns&quot;I&quot;styleRunArray&quot;[1{ATSUStyleRunInfo=&quot;runLength&quot;I&quot;styleObjectIndex&quot;I}]}'>
<field declared_type='UInt32' name='numberOfStyleRuns' type='L' type64='I'/>
<field declared_type='ATSUStyleRunInfo*' name='styleRunArray' type='[1{ATSUStyleRunInfo=&quot;runLength&quot;I&quot;styleObjectIndex&quot;I}]'/>
</struct>
<struct name='ATSFlatDataTextLayoutDataHeader' type='{ATSFlatDataTextLayoutDataHeader=&quot;sizeOfLayoutData&quot;I&quot;textLayoutLength&quot;I&quot;offsetToLayoutControls&quot;I&quot;offsetToLineInfo&quot;I}'>
<field declared_type='UInt32' name='sizeOfLayoutData' type='L' type64='I'/>
<field declared_type='UInt32' name='textLayoutLength' type='L' type64='I'/>
<field declared_type='UInt32' name='offsetToLayoutControls' type='L' type64='I'/>
<field declared_type='UInt32' name='offsetToLineInfo' type='L' type64='I'/>
</struct>
<struct name='ATSFlatDataTextLayoutHeader' type='{ATSFlatDataTextLayoutHeader=&quot;numFlattenedTextLayouts&quot;I&quot;flattenedTextLayouts&quot;[1{ATSFlatDataTextLayoutDataHeader=&quot;sizeOfLayoutData&quot;I&quot;textLayoutLength&quot;I&quot;offsetToLayoutControls&quot;I&quot;offsetToLineInfo&quot;I}]}'>
<field declared_type='UInt32' name='numFlattenedTextLayouts' type='L' type64='I'/>
<field declared_type='ATSFlatDataTextLayoutDataHeader*' name='flattenedTextLayouts' type='[1{ATSFlatDataTextLayoutDataHeader=&quot;sizeOfLayoutData&quot;I&quot;textLayoutLength&quot;I&quot;offsetToLayoutControls&quot;I&quot;offsetToLineInfo&quot;I}]'/>
</struct>
<struct name='ATSUAttributeInfo' type='{ATSUAttributeInfo=&quot;fTag&quot;I&quot;fValueSize&quot;I}' type64='{ATSUAttributeInfo=&quot;fTag&quot;I&quot;fValueSize&quot;Q}'>
<field declared_type='ATSUAttributeTag' name='fTag' type='L' type64='I'/>
<field declared_type='ByteCount' name='fValueSize' type='L' type64='Q'/>
</struct>
<struct name='ATSUBackgroundColor' type='{ATSURGBAlphaColor=&quot;red&quot;f&quot;green&quot;f&quot;blue&quot;f&quot;alpha&quot;f}'>
<field declared_type='float' name='red' type='f'/>
<field declared_type='float' name='green' type='f'/>
<field declared_type='float' name='blue' type='f'/>
<field declared_type='float' name='alpha' type='f'/>
</struct>
<struct name='ATSUCaret' type='{ATSUCaret=&quot;fX&quot;i&quot;fY&quot;i&quot;fDeltaX&quot;i&quot;fDeltaY&quot;i}'>
<field declared_type='Fixed' name='fX' type='l' type64='i'/>
<field declared_type='Fixed' name='fY' type='l' type64='i'/>
<field declared_type='Fixed' name='fDeltaX' type='l' type64='i'/>
<field declared_type='Fixed' name='fDeltaY' type='l' type64='i'/>
</struct>
<struct name='ATSUGlyphInfo' type='{ATSUGlyphInfo=&quot;glyphID&quot;S&quot;reserved&quot;S&quot;layoutFlags&quot;I&quot;charIndex&quot;I&quot;style&quot;^{OpaqueATSUStyle}&quot;deltaY&quot;f&quot;idealX&quot;f&quot;screenX&quot;s&quot;caretX&quot;s}' type64='{ATSUGlyphInfo=&quot;glyphID&quot;S&quot;reserved&quot;S&quot;layoutFlags&quot;I&quot;charIndex&quot;Q&quot;style&quot;^{OpaqueATSUStyle}&quot;deltaY&quot;f&quot;idealX&quot;f&quot;screenX&quot;s&quot;caretX&quot;s}'>
<field declared_type='GlyphID' name='glyphID' type='S'/>
<field declared_type='UInt16' name='reserved' type='S'/>
<field declared_type='UInt32' name='layoutFlags' type='L' type64='I'/>
<field declared_type='UniCharArrayOffset' name='charIndex' type='L' type64='Q'/>
<field declared_type='ATSUStyle' name='style' type='^{OpaqueATSUStyle=}'/>
<field declared_type='Float32' name='deltaY' type='f'/>
<field declared_type='Float32' name='idealX' type='f'/>
<field declared_type='SInt16' name='screenX' type='s'/>
<field declared_type='SInt16' name='caretX' type='s'/>
</struct>
<struct name='ATSUGlyphInfoArray' type='{ATSUGlyphInfoArray=&quot;layout&quot;^{OpaqueATSUTextLayout}&quot;numGlyphs&quot;I&quot;glyphs&quot;[1{ATSUGlyphInfo=&quot;glyphID&quot;S&quot;reserved&quot;S&quot;layoutFlags&quot;I&quot;charIndex&quot;I&quot;style&quot;^{OpaqueATSUStyle}&quot;deltaY&quot;f&quot;idealX&quot;f&quot;screenX&quot;s&quot;caretX&quot;s}]}' type64='{ATSUGlyphInfoArray=&quot;layout&quot;^{OpaqueATSUTextLayout}&quot;numGlyphs&quot;Q&quot;glyphs&quot;[1{ATSUGlyphInfo=&quot;glyphID&quot;S&quot;reserved&quot;S&quot;layoutFlags&quot;I&quot;charIndex&quot;Q&quot;style&quot;^{OpaqueATSUStyle}&quot;deltaY&quot;f&quot;idealX&quot;f&quot;screenX&quot;s&quot;caretX&quot;s}]}'>
<field declared_type='ATSUTextLayout' name='layout' type='^{OpaqueATSUTextLayout=}'/>
<field declared_type='ItemCount' name='numGlyphs' type='L' type64='Q'/>
<field declared_type='ATSUGlyphInfo*' name='glyphs' type='[1{ATSUGlyphInfo=&quot;glyphID&quot;S&quot;reserved&quot;S&quot;layoutFlags&quot;I&quot;charIndex&quot;I&quot;style&quot;^{OpaqueATSUStyle}&quot;deltaY&quot;f&quot;idealX&quot;f&quot;screenX&quot;s&quot;caretX&quot;s}]' type64='[1{ATSUGlyphInfo=&quot;glyphID&quot;S&quot;reserved&quot;S&quot;layoutFlags&quot;I&quot;charIndex&quot;Q&quot;style&quot;^{OpaqueATSUStyle}&quot;deltaY&quot;f&quot;idealX&quot;f&quot;screenX&quot;s&quot;caretX&quot;s}]'/>
</struct>
<struct name='ATSUGlyphSelector' type='{ATSUGlyphSelector=&quot;collection&quot;S&quot;glyphID&quot;S}'>
<field declared_type='GlyphCollection' name='collection' type='S'/>
<field declared_type='GlyphID' name='glyphID' type='S'/>
</struct>
<struct name='ATSURGBAlphaColor' type='{ATSURGBAlphaColor=&quot;red&quot;f&quot;green&quot;f&quot;blue&quot;f&quot;alpha&quot;f}'>
<field declared_type='float' name='red' type='f'/>
<field declared_type='float' name='green' type='f'/>
<field declared_type='float' name='blue' type='f'/>
<field declared_type='float' name='alpha' type='f'/>
</struct>
<struct name='ATSUStyleRunInfo' type='{ATSUStyleRunInfo=&quot;runLength&quot;I&quot;styleObjectIndex&quot;I}'>
<field declared_type='UInt32' name='runLength' type='L' type64='I'/>
<field declared_type='UInt32' name='styleObjectIndex' type='L' type64='I'/>
</struct>
<struct name='ATSUTab' type='{ATSUTab=&quot;tabPosition&quot;i&quot;tabType&quot;S}'>
<field declared_type='ATSUTextMeasurement' name='tabPosition' type='l' type64='i'/>
<field declared_type='ATSUTabType' name='tabType' type='S'/>
</struct>
<struct name='ATSUUnhighlightData' type='{ATSUUnhighlightData=&quot;dataType&quot;I&quot;unhighlightData&quot;(ATSUBackgroundData=&quot;backgroundColor&quot;{ATSURGBAlphaColor=&quot;red&quot;f&quot;green&quot;f&quot;blue&quot;f&quot;alpha&quot;f}&quot;backgroundUPP&quot;^?)}'>
<field declared_type='ATSUBackgroundDataType' name='dataType' type='L' type64='I'/>
<field declared_type='ATSUBackgroundData' name='unhighlightData' type='(ATSUBackgroundData=&quot;backgroundColor&quot;{ATSURGBAlphaColor=&quot;red&quot;f&quot;green&quot;f&quot;blue&quot;f&quot;alpha&quot;f}&quot;backgroundUPP&quot;^?)'/>
</struct>
<struct name='AsscEntry' type='{AsscEntry=&quot;fontSize&quot;s&quot;fontStyle&quot;s&quot;fontID&quot;s}'>
<field declared_type='SInt16' name='fontSize' type='s'/>
<field declared_type='SInt16' name='fontStyle' type='s'/>
<field declared_type='SInt16' name='fontID' type='s'/>
</struct>
<struct name='BitMap' type='{BitMap=&quot;baseAddr&quot;*&quot;rowBytes&quot;s&quot;bounds&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}}'>
<field declared_type='Ptr' name='baseAddr' type='*'/>
<field declared_type='short' name='rowBytes' type='s'/>
<field declared_type='Rect' name='bounds' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
</struct>
<struct name='CGrafPort' type='{GrafPort=&quot;whatever&quot;[87s]}'>
<field declared_type='short*' name='whatever' type='[87s]'/>
</struct>
<struct name='CM2Header' type='{CM2Header=&quot;size&quot;I&quot;CMMType&quot;I&quot;profileVersion&quot;I&quot;profileClass&quot;I&quot;dataColorSpace&quot;I&quot;profileConnectionSpace&quot;I&quot;dateTime&quot;{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}&quot;CS2profileSignature&quot;I&quot;platform&quot;I&quot;flags&quot;I&quot;deviceManufacturer&quot;I&quot;deviceModel&quot;I&quot;deviceAttributes&quot;[2L]&quot;renderingIntent&quot;I&quot;white&quot;{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}&quot;creator&quot;I&quot;reserved&quot;[44c]}' type64='{CM2Header=&quot;size&quot;I&quot;CMMType&quot;I&quot;profileVersion&quot;I&quot;profileClass&quot;I&quot;dataColorSpace&quot;I&quot;profileConnectionSpace&quot;I&quot;dateTime&quot;{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}&quot;CS2profileSignature&quot;I&quot;platform&quot;I&quot;flags&quot;I&quot;deviceManufacturer&quot;I&quot;deviceModel&quot;I&quot;deviceAttributes&quot;[2I]&quot;renderingIntent&quot;I&quot;white&quot;{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}&quot;creator&quot;I&quot;reserved&quot;[44c]}'>
<field declared_type='UInt32' name='size' type='L' type64='I'/>
<field declared_type='OSType' name='CMMType' type='L' type64='I'/>
<field declared_type='UInt32' name='profileVersion' type='L' type64='I'/>
<field declared_type='OSType' name='profileClass' type='L' type64='I'/>
<field declared_type='OSType' name='dataColorSpace' type='L' type64='I'/>
<field declared_type='OSType' name='profileConnectionSpace' type='L' type64='I'/>
<field declared_type='CMDateTime' name='dateTime' type='{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}'/>
<field declared_type='OSType' name='CS2profileSignature' type='L' type64='I'/>
<field declared_type='OSType' name='platform' type='L' type64='I'/>
<field declared_type='UInt32' name='flags' type='L' type64='I'/>
<field declared_type='OSType' name='deviceManufacturer' type='L' type64='I'/>
<field declared_type='UInt32' name='deviceModel' type='L' type64='I'/>
<field declared_type='UInt32*' name='deviceAttributes' type='[2L]' type64='[2I]'/>
<field declared_type='UInt32' name='renderingIntent' type='L' type64='I'/>
<field declared_type='CMFixedXYZColor' name='white' type='{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}'/>
<field declared_type='OSType' name='creator' type='L' type64='I'/>
<field declared_type='char*' name='reserved' type='[44c]'/>
</struct>
<struct name='CM2Profile' type='{CM2Profile=&quot;header&quot;{CM2Header=&quot;size&quot;I&quot;CMMType&quot;I&quot;profileVersion&quot;I&quot;profileClass&quot;I&quot;dataColorSpace&quot;I&quot;profileConnectionSpace&quot;I&quot;dateTime&quot;{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}&quot;CS2profileSignature&quot;I&quot;platform&quot;I&quot;flags&quot;I&quot;deviceManufacturer&quot;I&quot;deviceModel&quot;I&quot;deviceAttributes&quot;[2L]&quot;renderingIntent&quot;I&quot;white&quot;{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}&quot;creator&quot;I&quot;reserved&quot;[44c]}&quot;tagTable&quot;{CMTagElemTable=&quot;count&quot;I&quot;tagList&quot;[1{CMTagRecord=&quot;tag&quot;I&quot;elementOffset&quot;I&quot;elementSize&quot;I}]}&quot;elemData&quot;[1c]}' type64='{CM2Profile=&quot;header&quot;{CM2Header=&quot;size&quot;I&quot;CMMType&quot;I&quot;profileVersion&quot;I&quot;profileClass&quot;I&quot;dataColorSpace&quot;I&quot;profileConnectionSpace&quot;I&quot;dateTime&quot;{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}&quot;CS2profileSignature&quot;I&quot;platform&quot;I&quot;flags&quot;I&quot;deviceManufacturer&quot;I&quot;deviceModel&quot;I&quot;deviceAttributes&quot;[2I]&quot;renderingIntent&quot;I&quot;white&quot;{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}&quot;creator&quot;I&quot;reserved&quot;[44c]}&quot;tagTable&quot;{CMTagElemTable=&quot;count&quot;I&quot;tagList&quot;[1{CMTagRecord=&quot;tag&quot;I&quot;elementOffset&quot;I&quot;elementSize&quot;I}]}&quot;elemData&quot;[1c]}'>
<field declared_type='CM2Header' name='header' type='{CM2Header=&quot;size&quot;I&quot;CMMType&quot;I&quot;profileVersion&quot;I&quot;profileClass&quot;I&quot;dataColorSpace&quot;I&quot;profileConnectionSpace&quot;I&quot;dateTime&quot;{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}&quot;CS2profileSignature&quot;I&quot;platform&quot;I&quot;flags&quot;I&quot;deviceManufacturer&quot;I&quot;deviceModel&quot;I&quot;deviceAttributes&quot;[2L]&quot;renderingIntent&quot;I&quot;white&quot;{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}&quot;creator&quot;I&quot;reserved&quot;[44c]}' type64='{CM2Header=&quot;size&quot;I&quot;CMMType&quot;I&quot;profileVersion&quot;I&quot;profileClass&quot;I&quot;dataColorSpace&quot;I&quot;profileConnectionSpace&quot;I&quot;dateTime&quot;{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}&quot;CS2profileSignature&quot;I&quot;platform&quot;I&quot;flags&quot;I&quot;deviceManufacturer&quot;I&quot;deviceModel&quot;I&quot;deviceAttributes&quot;[2I]&quot;renderingIntent&quot;I&quot;white&quot;{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}&quot;creator&quot;I&quot;reserved&quot;[44c]}'/>
<field declared_type='CMTagElemTable' name='tagTable' type='{CMTagElemTable=&quot;count&quot;I&quot;tagList&quot;[1{CMTagRecord=&quot;tag&quot;I&quot;elementOffset&quot;I&quot;elementSize&quot;I}]}'/>
<field declared_type='char*' name='elemData' type='[1c]'/>
</struct>
<struct name='CM2ProfilePtr' type='{CM2Profile=&quot;header&quot;{CM2Header=&quot;size&quot;I&quot;CMMType&quot;I&quot;profileVersion&quot;I&quot;profileClass&quot;I&quot;dataColorSpace&quot;I&quot;profileConnectionSpace&quot;I&quot;dateTime&quot;{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}&quot;CS2profileSignature&quot;I&quot;platform&quot;I&quot;flags&quot;I&quot;deviceManufacturer&quot;I&quot;deviceModel&quot;I&quot;deviceAttributes&quot;[2L]&quot;renderingIntent&quot;I&quot;white&quot;{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}&quot;creator&quot;I&quot;reserved&quot;[44c]}&quot;tagTable&quot;{CMTagElemTable=&quot;count&quot;I&quot;tagList&quot;[1{CMTagRecord=&quot;tag&quot;I&quot;elementOffset&quot;I&quot;elementSize&quot;I}]}&quot;elemData&quot;[1c]}' type64='{CM2Profile=&quot;header&quot;{CM2Header=&quot;size&quot;I&quot;CMMType&quot;I&quot;profileVersion&quot;I&quot;profileClass&quot;I&quot;dataColorSpace&quot;I&quot;profileConnectionSpace&quot;I&quot;dateTime&quot;{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}&quot;CS2profileSignature&quot;I&quot;platform&quot;I&quot;flags&quot;I&quot;deviceManufacturer&quot;I&quot;deviceModel&quot;I&quot;deviceAttributes&quot;[2I]&quot;renderingIntent&quot;I&quot;white&quot;{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}&quot;creator&quot;I&quot;reserved&quot;[44c]}&quot;tagTable&quot;{CMTagElemTable=&quot;count&quot;I&quot;tagList&quot;[1{CMTagRecord=&quot;tag&quot;I&quot;elementOffset&quot;I&quot;elementSize&quot;I}]}&quot;elemData&quot;[1c]}'>
<field declared_type='CM2Header' name='header' type='{CM2Header=&quot;size&quot;I&quot;CMMType&quot;I&quot;profileVersion&quot;I&quot;profileClass&quot;I&quot;dataColorSpace&quot;I&quot;profileConnectionSpace&quot;I&quot;dateTime&quot;{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}&quot;CS2profileSignature&quot;I&quot;platform&quot;I&quot;flags&quot;I&quot;deviceManufacturer&quot;I&quot;deviceModel&quot;I&quot;deviceAttributes&quot;[2L]&quot;renderingIntent&quot;I&quot;white&quot;{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}&quot;creator&quot;I&quot;reserved&quot;[44c]}' type64='{CM2Header=&quot;size&quot;I&quot;CMMType&quot;I&quot;profileVersion&quot;I&quot;profileClass&quot;I&quot;dataColorSpace&quot;I&quot;profileConnectionSpace&quot;I&quot;dateTime&quot;{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}&quot;CS2profileSignature&quot;I&quot;platform&quot;I&quot;flags&quot;I&quot;deviceManufacturer&quot;I&quot;deviceModel&quot;I&quot;deviceAttributes&quot;[2I]&quot;renderingIntent&quot;I&quot;white&quot;{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}&quot;creator&quot;I&quot;reserved&quot;[44c]}'/>
<field declared_type='CMTagElemTable' name='tagTable' type='{CMTagElemTable=&quot;count&quot;I&quot;tagList&quot;[1{CMTagRecord=&quot;tag&quot;I&quot;elementOffset&quot;I&quot;elementSize&quot;I}]}'/>
<field declared_type='char*' name='elemData' type='[1c]'/>
</struct>
<struct name='CM4Header' type='{CM4Header=&quot;size&quot;I&quot;CMMType&quot;I&quot;profileVersion&quot;I&quot;profileClass&quot;I&quot;dataColorSpace&quot;I&quot;profileConnectionSpace&quot;I&quot;dateTime&quot;{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}&quot;CS2profileSignature&quot;I&quot;platform&quot;I&quot;flags&quot;I&quot;deviceManufacturer&quot;I&quot;deviceModel&quot;I&quot;deviceAttributes&quot;[2L]&quot;renderingIntent&quot;I&quot;white&quot;{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}&quot;creator&quot;I&quot;digest&quot;[16C]&quot;reserved&quot;[28c]}' type64='{CM4Header=&quot;size&quot;I&quot;CMMType&quot;I&quot;profileVersion&quot;I&quot;profileClass&quot;I&quot;dataColorSpace&quot;I&quot;profileConnectionSpace&quot;I&quot;dateTime&quot;{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}&quot;CS2profileSignature&quot;I&quot;platform&quot;I&quot;flags&quot;I&quot;deviceManufacturer&quot;I&quot;deviceModel&quot;I&quot;deviceAttributes&quot;[2I]&quot;renderingIntent&quot;I&quot;white&quot;{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}&quot;creator&quot;I&quot;digest&quot;[16C]&quot;reserved&quot;[28c]}'>
<field declared_type='UInt32' name='size' type='L' type64='I'/>
<field declared_type='OSType' name='CMMType' type='L' type64='I'/>
<field declared_type='UInt32' name='profileVersion' type='L' type64='I'/>
<field declared_type='OSType' name='profileClass' type='L' type64='I'/>
<field declared_type='OSType' name='dataColorSpace' type='L' type64='I'/>
<field declared_type='OSType' name='profileConnectionSpace' type='L' type64='I'/>
<field declared_type='CMDateTime' name='dateTime' type='{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}'/>
<field declared_type='OSType' name='CS2profileSignature' type='L' type64='I'/>
<field declared_type='OSType' name='platform' type='L' type64='I'/>
<field declared_type='UInt32' name='flags' type='L' type64='I'/>
<field declared_type='OSType' name='deviceManufacturer' type='L' type64='I'/>
<field declared_type='UInt32' name='deviceModel' type='L' type64='I'/>
<field declared_type='UInt32*' name='deviceAttributes' type='[2L]' type64='[2I]'/>
<field declared_type='UInt32' name='renderingIntent' type='L' type64='I'/>
<field declared_type='CMFixedXYZColor' name='white' type='{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}'/>
<field declared_type='OSType' name='creator' type='L' type64='I'/>
<field declared_type='CMProfileMD5' name='digest' type='[16C]'/>
<field declared_type='char*' name='reserved' type='[28c]'/>
</struct>
<struct name='CMAdaptationMatrixType' type='{CMAdaptationMatrixType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;adaptationMatrix&quot;[9l]}' type64='{CMAdaptationMatrixType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;adaptationMatrix&quot;[9i]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='Fixed*' name='adaptationMatrix' type='[9l]' type64='[9i]'/>
</struct>
<struct name='CMBitmap' type='{CMBitmap=&quot;image&quot;*&quot;width&quot;I&quot;height&quot;I&quot;rowBytes&quot;I&quot;pixelSize&quot;I&quot;space&quot;I&quot;user1&quot;I&quot;user2&quot;I}' type64='{CMBitmap=&quot;image&quot;*&quot;width&quot;Q&quot;height&quot;Q&quot;rowBytes&quot;Q&quot;pixelSize&quot;Q&quot;space&quot;I&quot;user1&quot;I&quot;user2&quot;I}'>
<field declared_type='char*' name='image' type='*'/>
<field declared_type='size_t' name='width' type='L' type64='Q'/>
<field declared_type='size_t' name='height' type='L' type64='Q'/>
<field declared_type='size_t' name='rowBytes' type='L' type64='Q'/>
<field declared_type='size_t' name='pixelSize' type='L' type64='Q'/>
<field declared_type='CMBitmapColorSpace' name='space' type='L' type64='I'/>
<field declared_type='UInt32' name='user1' type='L' type64='I'/>
<field declared_type='UInt32' name='user2' type='L' type64='I'/>
</struct>
<struct name='CMBufferLocation' type='{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I}'>
<field declared_type='void*' name='buffer' type='^v'/>
<field declared_type='UInt32' name='size' type='L' type64='I'/>
</struct>
<struct name='CMCMYColor' type='{CMCMYColor=&quot;cyan&quot;S&quot;magenta&quot;S&quot;yellow&quot;S}'>
<field declared_type='UInt16' name='cyan' type='S'/>
<field declared_type='UInt16' name='magenta' type='S'/>
<field declared_type='UInt16' name='yellow' type='S'/>
</struct>
<struct name='CMCMYKColor' type='{CMCMYKColor=&quot;cyan&quot;S&quot;magenta&quot;S&quot;yellow&quot;S&quot;black&quot;S}'>
<field declared_type='UInt16' name='cyan' type='S'/>
<field declared_type='UInt16' name='magenta' type='S'/>
<field declared_type='UInt16' name='yellow' type='S'/>
<field declared_type='UInt16' name='black' type='S'/>
</struct>
<struct name='CMConcatProfileSet' type='{CMConcatProfileSet=&quot;keyIndex&quot;S&quot;count&quot;S&quot;profileSet&quot;[1^{OpaqueCMProfileRef}]}'>
<field declared_type='UInt16' name='keyIndex' type='S'/>
<field declared_type='UInt16' name='count' type='S'/>
<field declared_type='CMProfileRef*' name='profileSet' type='[1^{OpaqueCMProfileRef}]'/>
</struct>
<struct name='CMCurveType' type='{CMCurveType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;countValue&quot;I&quot;data&quot;[1S]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt32' name='countValue' type='L' type64='I'/>
<field declared_type='UInt16*' name='data' type='[1S]'/>
</struct>
<struct name='CMDataType' type='{CMDataType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;dataFlag&quot;I&quot;data&quot;[1c]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt32' name='dataFlag' type='L' type64='I'/>
<field declared_type='char*' name='data' type='[1c]'/>
</struct>
<struct name='CMDateTime' type='{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}'>
<field declared_type='UInt16' name='year' type='S'/>
<field declared_type='UInt16' name='month' type='S'/>
<field declared_type='UInt16' name='dayOfTheMonth' type='S'/>
<field declared_type='UInt16' name='hours' type='S'/>
<field declared_type='UInt16' name='minutes' type='S'/>
<field declared_type='UInt16' name='seconds' type='S'/>
</struct>
<struct name='CMDateTimeType' type='{CMDateTimeType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;dateTime&quot;{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='CMDateTime' name='dateTime' type='{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}'/>
</struct>
<struct name='CMDeviceInfo' type='{CMDeviceInfo=&quot;dataVersion&quot;I&quot;deviceClass&quot;I&quot;deviceID&quot;I&quot;deviceScope&quot;{CMDeviceScope=&quot;deviceUser&quot;^{__CFString}&quot;deviceHost&quot;^{__CFString}}&quot;deviceState&quot;I&quot;defaultProfileID&quot;I&quot;deviceName&quot;^^{__CFDictionary}&quot;profileCount&quot;I&quot;reserved&quot;I}'>
<field declared_type='UInt32' name='dataVersion' type='L' type64='I'/>
<field declared_type='CMDeviceClass' name='deviceClass' type='L' type64='I'/>
<field declared_type='CMDeviceID' name='deviceID' type='L' type64='I'/>
<field declared_type='CMDeviceScope' name='deviceScope' type='{CMDeviceScope=&quot;deviceUser&quot;^{__CFString}&quot;deviceHost&quot;^{__CFString}}'/>
<field declared_type='CMDeviceState' name='deviceState' type='L' type64='I'/>
<field declared_type='CMDeviceProfileID' name='defaultProfileID' type='L' type64='I'/>
<field declared_type='CFDictionaryRef*' name='deviceName' type='^^{__CFDictionary}'/>
<field declared_type='UInt32' name='profileCount' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
</struct>
<struct name='CMDeviceInfoPtr' type='{CMDeviceInfo=&quot;dataVersion&quot;I&quot;deviceClass&quot;I&quot;deviceID&quot;I&quot;deviceScope&quot;{CMDeviceScope=&quot;deviceUser&quot;^{__CFString}&quot;deviceHost&quot;^{__CFString}}&quot;deviceState&quot;I&quot;defaultProfileID&quot;I&quot;deviceName&quot;^^{__CFDictionary}&quot;profileCount&quot;I&quot;reserved&quot;I}'>
<field declared_type='UInt32' name='dataVersion' type='L' type64='I'/>
<field declared_type='CMDeviceClass' name='deviceClass' type='L' type64='I'/>
<field declared_type='CMDeviceID' name='deviceID' type='L' type64='I'/>
<field declared_type='CMDeviceScope' name='deviceScope' type='{CMDeviceScope=&quot;deviceUser&quot;^{__CFString}&quot;deviceHost&quot;^{__CFString}}'/>
<field declared_type='CMDeviceState' name='deviceState' type='L' type64='I'/>
<field declared_type='CMDeviceProfileID' name='defaultProfileID' type='L' type64='I'/>
<field declared_type='CFDictionaryRef*' name='deviceName' type='^^{__CFDictionary}'/>
<field declared_type='UInt32' name='profileCount' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
</struct>
<struct name='CMDeviceProfileArray' type='{CMDeviceProfileArray=&quot;profileCount&quot;I&quot;profiles&quot;[1{CMDeviceProfileInfo=&quot;dataVersion&quot;I&quot;profileID&quot;I&quot;profileLoc&quot;{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;fileLoc&quot;{CMFileLocation=&quot;spec&quot;{FSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}}&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;ptrLoc&quot;{CMPtrLocation=&quot;p&quot;*}&quot;procLoc&quot;{CMProcedureLocation=&quot;proc&quot;^?&quot;refCon&quot;^v}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[256c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}&quot;profileName&quot;^{__CFDictionary}&quot;reserved&quot;I}]}' type64='{CMDeviceProfileArray=&quot;profileCount&quot;I&quot;profiles&quot;[1{CMDeviceProfileInfo=&quot;dataVersion&quot;I&quot;profileID&quot;I&quot;profileLoc&quot;{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[1024c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}&quot;profileName&quot;^{__CFDictionary}&quot;reserved&quot;I}]}'>
<field declared_type='UInt32' name='profileCount' type='L' type64='I'/>
<field declared_type='CMDeviceProfileInfo*' name='profiles' type='[1{CMDeviceProfileInfo=&quot;dataVersion&quot;I&quot;profileID&quot;I&quot;profileLoc&quot;{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;fileLoc&quot;{CMFileLocation=&quot;spec&quot;{FSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}}&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;ptrLoc&quot;{CMPtrLocation=&quot;p&quot;*}&quot;procLoc&quot;{CMProcedureLocation=&quot;proc&quot;^?&quot;refCon&quot;^v}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[256c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}&quot;profileName&quot;^{__CFDictionary}&quot;reserved&quot;I}]' type64='[1{CMDeviceProfileInfo=&quot;dataVersion&quot;I&quot;profileID&quot;I&quot;profileLoc&quot;{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[1024c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}&quot;profileName&quot;^{__CFDictionary}&quot;reserved&quot;I}]'/>
</struct>
<struct name='CMDeviceProfileArrayPtr' type='{CMDeviceProfileArray=&quot;profileCount&quot;I&quot;profiles&quot;[1{CMDeviceProfileInfo=&quot;dataVersion&quot;I&quot;profileID&quot;I&quot;profileLoc&quot;{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;fileLoc&quot;{CMFileLocation=&quot;spec&quot;{FSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}}&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;ptrLoc&quot;{CMPtrLocation=&quot;p&quot;*}&quot;procLoc&quot;{CMProcedureLocation=&quot;proc&quot;^?&quot;refCon&quot;^v}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[256c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}&quot;profileName&quot;^{__CFDictionary}&quot;reserved&quot;I}]}' type64='{CMDeviceProfileArray=&quot;profileCount&quot;I&quot;profiles&quot;[1{CMDeviceProfileInfo=&quot;dataVersion&quot;I&quot;profileID&quot;I&quot;profileLoc&quot;{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[1024c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}&quot;profileName&quot;^{__CFDictionary}&quot;reserved&quot;I}]}'>
<field declared_type='UInt32' name='profileCount' type='L' type64='I'/>
<field declared_type='CMDeviceProfileInfo*' name='profiles' type='[1{CMDeviceProfileInfo=&quot;dataVersion&quot;I&quot;profileID&quot;I&quot;profileLoc&quot;{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;fileLoc&quot;{CMFileLocation=&quot;spec&quot;{FSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}}&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;ptrLoc&quot;{CMPtrLocation=&quot;p&quot;*}&quot;procLoc&quot;{CMProcedureLocation=&quot;proc&quot;^?&quot;refCon&quot;^v}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[256c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}&quot;profileName&quot;^{__CFDictionary}&quot;reserved&quot;I}]' type64='[1{CMDeviceProfileInfo=&quot;dataVersion&quot;I&quot;profileID&quot;I&quot;profileLoc&quot;{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[1024c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}&quot;profileName&quot;^{__CFDictionary}&quot;reserved&quot;I}]'/>
</struct>
<struct name='CMDeviceProfileInfo' type='{CMDeviceProfileInfo=&quot;dataVersion&quot;I&quot;profileID&quot;I&quot;profileLoc&quot;{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;fileLoc&quot;{CMFileLocation=&quot;spec&quot;{FSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}}&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;ptrLoc&quot;{CMPtrLocation=&quot;p&quot;*}&quot;procLoc&quot;{CMProcedureLocation=&quot;proc&quot;^?&quot;refCon&quot;^v}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[256c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}&quot;profileName&quot;^{__CFDictionary}&quot;reserved&quot;I}' type64='{CMDeviceProfileInfo=&quot;dataVersion&quot;I&quot;profileID&quot;I&quot;profileLoc&quot;{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[1024c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}&quot;profileName&quot;^{__CFDictionary}&quot;reserved&quot;I}'>
<field declared_type='UInt32' name='dataVersion' type='L' type64='I'/>
<field declared_type='CMDeviceProfileID' name='profileID' type='L' type64='I'/>
<field declared_type='CMProfileLocation' name='profileLoc' type='{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;fileLoc&quot;{CMFileLocation=&quot;spec&quot;{FSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}}&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;ptrLoc&quot;{CMPtrLocation=&quot;p&quot;*}&quot;procLoc&quot;{CMProcedureLocation=&quot;proc&quot;^?&quot;refCon&quot;^v}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[256c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}' type64='{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[1024c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}'/>
<field declared_type='CFDictionaryRef' name='profileName' type='^{__CFDictionary=}'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
</struct>
<struct name='CMDeviceProfileScope' type='{CMDeviceScope=&quot;deviceUser&quot;^{__CFString}&quot;deviceHost&quot;^{__CFString}}'>
<field declared_type='CFStringRef' name='deviceUser' type='^{__CFString=}'/>
<field declared_type='CFStringRef' name='deviceHost' type='^{__CFString=}'/>
</struct>
<struct name='CMDeviceScope' type='{CMDeviceScope=&quot;deviceUser&quot;^{__CFString}&quot;deviceHost&quot;^{__CFString}}'>
<field declared_type='CFStringRef' name='deviceUser' type='^{__CFString=}'/>
<field declared_type='CFStringRef' name='deviceHost' type='^{__CFString=}'/>
</struct>
<struct name='CMFixedXYColor' type='{CMFixedXYColor=&quot;x&quot;i&quot;y&quot;i}'>
<field declared_type='Fixed' name='x' type='l' type64='i'/>
<field declared_type='Fixed' name='y' type='l' type64='i'/>
</struct>
<struct name='CMFixedXYZColor' type='{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}'>
<field declared_type='Fixed' name='X' type='l' type64='i'/>
<field declared_type='Fixed' name='Y' type='l' type64='i'/>
<field declared_type='Fixed' name='Z' type='l' type64='i'/>
</struct>
<struct name='CMFloatBitmap' type='{CMFloatBitmap=&quot;version&quot;L&quot;buffers&quot;[16^f]&quot;height&quot;I&quot;width&quot;I&quot;rowStride&quot;i&quot;colStride&quot;i&quot;space&quot;I&quot;flags&quot;i}' type64='{CMFloatBitmap=&quot;version&quot;Q&quot;buffers&quot;[16^f]&quot;height&quot;Q&quot;width&quot;Q&quot;rowStride&quot;q&quot;colStride&quot;q&quot;space&quot;I&quot;flags&quot;i}'>
<field declared_type='unsigned long' name='version' type='L' type64='Q'/>
<field declared_type='float**' name='buffers' type='[16^f]'/>
<field declared_type='size_t' name='height' type='L' type64='Q'/>
<field declared_type='size_t' name='width' type='L' type64='Q'/>
<field declared_type='ptrdiff_t' name='rowStride' type='i' type64='q'/>
<field declared_type='ptrdiff_t' name='colStride' type='i' type64='q'/>
<field declared_type='OSType' name='space' type='L' type64='I'/>
<field declared_type='CMFloatBitmapFlags' name='flags' type='i'/>
</struct>
<struct name='CMGrayColor' type='{CMGrayColor=&quot;gray&quot;S}'>
<field declared_type='UInt16' name='gray' type='S'/>
</struct>
<struct name='CMHLSColor' type='{CMHLSColor=&quot;hue&quot;S&quot;lightness&quot;S&quot;saturation&quot;S}'>
<field declared_type='UInt16' name='hue' type='S'/>
<field declared_type='UInt16' name='lightness' type='S'/>
<field declared_type='UInt16' name='saturation' type='S'/>
</struct>
<struct name='CMHSVColor' type='{CMHSVColor=&quot;hue&quot;S&quot;saturation&quot;S&quot;value&quot;S}'>
<field declared_type='UInt16' name='hue' type='S'/>
<field declared_type='UInt16' name='saturation' type='S'/>
<field declared_type='UInt16' name='value' type='S'/>
</struct>
<struct name='CMHandleLocation' type='{CMHandleLocation=&quot;h&quot;^*}'>
<field declared_type='Handle' name='h' type='^*'/>
</struct>
<struct name='CMIntentCRDVMSize' type='{CMIntentCRDVMSize=&quot;renderingIntent&quot;I&quot;VMSize&quot;I}'>
<field declared_type='UInt32' name='renderingIntent' type='L' type64='I'/>
<field declared_type='UInt32' name='VMSize' type='L' type64='I'/>
</struct>
<struct name='CMLabColor' type='{CMLabColor=&quot;L&quot;S&quot;a&quot;S&quot;b&quot;S}'>
<field declared_type='UInt16' name='L' type='S'/>
<field declared_type='UInt16' name='a' type='S'/>
<field declared_type='UInt16' name='b' type='S'/>
</struct>
<struct name='CMLut16Type' type='{CMLut16Type=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;inputChannels&quot;C&quot;outputChannels&quot;C&quot;gridPoints&quot;C&quot;reserved2&quot;C&quot;matrix&quot;[3[3l]]&quot;inputTableEntries&quot;S&quot;outputTableEntries&quot;S&quot;inputTable&quot;[1S]}' type64='{CMLut16Type=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;inputChannels&quot;C&quot;outputChannels&quot;C&quot;gridPoints&quot;C&quot;reserved2&quot;C&quot;matrix&quot;[3[3i]]&quot;inputTableEntries&quot;S&quot;outputTableEntries&quot;S&quot;inputTable&quot;[1S]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt8' name='inputChannels' type='C'/>
<field declared_type='UInt8' name='outputChannels' type='C'/>
<field declared_type='UInt8' name='gridPoints' type='C'/>
<field declared_type='UInt8' name='reserved2' type='C'/>
<field declared_type='Fixed**' name='matrix' type='[3[3l]]' type64='[3[3i]]'/>
<field declared_type='UInt16' name='inputTableEntries' type='S'/>
<field declared_type='UInt16' name='outputTableEntries' type='S'/>
<field declared_type='UInt16*' name='inputTable' type='[1S]'/>
</struct>
<struct name='CMLut8Type' type='{CMLut8Type=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;inputChannels&quot;C&quot;outputChannels&quot;C&quot;gridPoints&quot;C&quot;reserved2&quot;C&quot;matrix&quot;[3[3l]]&quot;inputTable&quot;[1C]}' type64='{CMLut8Type=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;inputChannels&quot;C&quot;outputChannels&quot;C&quot;gridPoints&quot;C&quot;reserved2&quot;C&quot;matrix&quot;[3[3i]]&quot;inputTable&quot;[1C]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt8' name='inputChannels' type='C'/>
<field declared_type='UInt8' name='outputChannels' type='C'/>
<field declared_type='UInt8' name='gridPoints' type='C'/>
<field declared_type='UInt8' name='reserved2' type='C'/>
<field declared_type='Fixed**' name='matrix' type='[3[3l]]' type64='[3[3i]]'/>
<field declared_type='UInt8*' name='inputTable' type='[1C]'/>
</struct>
<struct name='CMLuvColor' type='{CMLuvColor=&quot;L&quot;S&quot;u&quot;S&quot;v&quot;S}'>
<field declared_type='UInt16' name='L' type='S'/>
<field declared_type='UInt16' name='u' type='S'/>
<field declared_type='UInt16' name='v' type='S'/>
</struct>
<struct name='CMMInfo' type='{CMMInfo=&quot;dataSize&quot;I&quot;CMMType&quot;I&quot;CMMMfr&quot;I&quot;CMMVersion&quot;I&quot;ASCIIName&quot;[32C]&quot;ASCIIDesc&quot;[256C]&quot;UniCodeNameCount&quot;I&quot;UniCodeName&quot;[32S]&quot;UniCodeDescCount&quot;I&quot;UniCodeDesc&quot;[256S]}' type64='{CMMInfo=&quot;dataSize&quot;Q&quot;CMMType&quot;I&quot;CMMMfr&quot;I&quot;CMMVersion&quot;I&quot;ASCIIName&quot;[32C]&quot;ASCIIDesc&quot;[256C]&quot;UniCodeNameCount&quot;Q&quot;UniCodeName&quot;[32S]&quot;UniCodeDescCount&quot;Q&quot;UniCodeDesc&quot;[256S]}'>
<field declared_type='size_t' name='dataSize' type='L' type64='Q'/>
<field declared_type='OSType' name='CMMType' type='L' type64='I'/>
<field declared_type='OSType' name='CMMMfr' type='L' type64='I'/>
<field declared_type='UInt32' name='CMMVersion' type='L' type64='I'/>
<field declared_type='unsigned char*' name='ASCIIName' type='[32C]'/>
<field declared_type='unsigned char*' name='ASCIIDesc' type='[256C]'/>
<field declared_type='UniCharCount' name='UniCodeNameCount' type='L' type64='Q'/>
<field declared_type='UniChar*' name='UniCodeName' type='[32S]'/>
<field declared_type='UniCharCount' name='UniCodeDescCount' type='L' type64='Q'/>
<field declared_type='UniChar*' name='UniCodeDesc' type='[256S]'/>
</struct>
<struct name='CMMakeAndModel' type='{CMMakeAndModel=&quot;manufacturer&quot;I&quot;model&quot;I&quot;serialNumber&quot;I&quot;manufactureDate&quot;I&quot;reserved1&quot;I&quot;reserved2&quot;I&quot;reserved3&quot;I&quot;reserved4&quot;I}'>
<field declared_type='OSType' name='manufacturer' type='L' type64='I'/>
<field declared_type='UInt32' name='model' type='L' type64='I'/>
<field declared_type='UInt32' name='serialNumber' type='L' type64='I'/>
<field declared_type='UInt32' name='manufactureDate' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved1' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved2' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved3' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved4' type='L' type64='I'/>
</struct>
<struct name='CMMakeAndModelType' type='{CMMakeAndModelType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;makeAndModel&quot;{CMMakeAndModel=&quot;manufacturer&quot;I&quot;model&quot;I&quot;serialNumber&quot;I&quot;manufactureDate&quot;I&quot;reserved1&quot;I&quot;reserved2&quot;I&quot;reserved3&quot;I&quot;reserved4&quot;I}}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='CMMakeAndModel' name='makeAndModel' type='{CMMakeAndModel=&quot;manufacturer&quot;I&quot;model&quot;I&quot;serialNumber&quot;I&quot;manufactureDate&quot;I&quot;reserved1&quot;I&quot;reserved2&quot;I&quot;reserved3&quot;I&quot;reserved4&quot;I}'/>
</struct>
<struct name='CMMeasurementType' type='{CMMeasurementType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;standardObserver&quot;I&quot;backingXYZ&quot;{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}&quot;geometry&quot;I&quot;flare&quot;I&quot;illuminant&quot;I}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt32' name='standardObserver' type='L' type64='I'/>
<field declared_type='CMFixedXYZColor' name='backingXYZ' type='{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}'/>
<field declared_type='UInt32' name='geometry' type='L' type64='I'/>
<field declared_type='UInt32' name='flare' type='L' type64='I'/>
<field declared_type='UInt32' name='illuminant' type='L' type64='I'/>
</struct>
<struct name='CMMultiFunctCLUTType' type='{CMMultiFunctCLUTType=&quot;gridPoints&quot;[16C]&quot;entrySize&quot;C&quot;reserved&quot;[3C]&quot;data&quot;[2C]}'>
<field declared_type='UInt8*' name='gridPoints' type='[16C]'/>
<field declared_type='UInt8' name='entrySize' type='C'/>
<field declared_type='UInt8*' name='reserved' type='[3C]'/>
<field declared_type='UInt8*' name='data' type='[2C]'/>
</struct>
<struct name='CMMultiFunctLutA2BType' type='{CMMultiFunctLutType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;inputChannels&quot;C&quot;outputChannels&quot;C&quot;reserved2&quot;S&quot;offsetBcurves&quot;I&quot;offsetMatrix&quot;I&quot;offsetMcurves&quot;I&quot;offsetCLUT&quot;I&quot;offsetAcurves&quot;I&quot;data&quot;[1C]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt8' name='inputChannels' type='C'/>
<field declared_type='UInt8' name='outputChannels' type='C'/>
<field declared_type='UInt16' name='reserved2' type='S'/>
<field declared_type='UInt32' name='offsetBcurves' type='L' type64='I'/>
<field declared_type='UInt32' name='offsetMatrix' type='L' type64='I'/>
<field declared_type='UInt32' name='offsetMcurves' type='L' type64='I'/>
<field declared_type='UInt32' name='offsetCLUT' type='L' type64='I'/>
<field declared_type='UInt32' name='offsetAcurves' type='L' type64='I'/>
<field declared_type='UInt8*' name='data' type='[1C]'/>
</struct>
<struct name='CMMultiFunctLutB2AType' type='{CMMultiFunctLutType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;inputChannels&quot;C&quot;outputChannels&quot;C&quot;reserved2&quot;S&quot;offsetBcurves&quot;I&quot;offsetMatrix&quot;I&quot;offsetMcurves&quot;I&quot;offsetCLUT&quot;I&quot;offsetAcurves&quot;I&quot;data&quot;[1C]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt8' name='inputChannels' type='C'/>
<field declared_type='UInt8' name='outputChannels' type='C'/>
<field declared_type='UInt16' name='reserved2' type='S'/>
<field declared_type='UInt32' name='offsetBcurves' type='L' type64='I'/>
<field declared_type='UInt32' name='offsetMatrix' type='L' type64='I'/>
<field declared_type='UInt32' name='offsetMcurves' type='L' type64='I'/>
<field declared_type='UInt32' name='offsetCLUT' type='L' type64='I'/>
<field declared_type='UInt32' name='offsetAcurves' type='L' type64='I'/>
<field declared_type='UInt8*' name='data' type='[1C]'/>
</struct>
<struct name='CMMultiFunctLutType' type='{CMMultiFunctLutType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;inputChannels&quot;C&quot;outputChannels&quot;C&quot;reserved2&quot;S&quot;offsetBcurves&quot;I&quot;offsetMatrix&quot;I&quot;offsetMcurves&quot;I&quot;offsetCLUT&quot;I&quot;offsetAcurves&quot;I&quot;data&quot;[1C]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt8' name='inputChannels' type='C'/>
<field declared_type='UInt8' name='outputChannels' type='C'/>
<field declared_type='UInt16' name='reserved2' type='S'/>
<field declared_type='UInt32' name='offsetBcurves' type='L' type64='I'/>
<field declared_type='UInt32' name='offsetMatrix' type='L' type64='I'/>
<field declared_type='UInt32' name='offsetMcurves' type='L' type64='I'/>
<field declared_type='UInt32' name='offsetCLUT' type='L' type64='I'/>
<field declared_type='UInt32' name='offsetAcurves' type='L' type64='I'/>
<field declared_type='UInt8*' name='data' type='[1C]'/>
</struct>
<struct name='CMMultiLocalizedUniCodeEntryRec' type='{CMMultiLocalizedUniCodeEntryRec=&quot;languageCode&quot;[2c]&quot;regionCode&quot;[2c]&quot;textLength&quot;I&quot;textOffset&quot;I}'>
<field declared_type='char*' name='languageCode' type='[2c]'/>
<field declared_type='char*' name='regionCode' type='[2c]'/>
<field declared_type='UInt32' name='textLength' type='L' type64='I'/>
<field declared_type='UInt32' name='textOffset' type='L' type64='I'/>
</struct>
<struct name='CMMultiLocalizedUniCodeType' type='{CMMultiLocalizedUniCodeType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;entryCount&quot;I&quot;entrySize&quot;I}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt32' name='entryCount' type='L' type64='I'/>
<field declared_type='UInt32' name='entrySize' type='L' type64='I'/>
</struct>
<struct name='CMMultichannel5Color' type='{CMMultichannel5Color=&quot;components&quot;[5C]}'>
<field declared_type='UInt8*' name='components' type='[5C]'/>
</struct>
<struct name='CMMultichannel6Color' type='{CMMultichannel6Color=&quot;components&quot;[6C]}'>
<field declared_type='UInt8*' name='components' type='[6C]'/>
</struct>
<struct name='CMMultichannel7Color' type='{CMMultichannel7Color=&quot;components&quot;[7C]}'>
<field declared_type='UInt8*' name='components' type='[7C]'/>
</struct>
<struct name='CMMultichannel8Color' type='{CMMultichannel8Color=&quot;components&quot;[8C]}'>
<field declared_type='UInt8*' name='components' type='[8C]'/>
</struct>
<struct name='CMNamedColor' type='{CMNamedColor=&quot;namedColorIndex&quot;I}'>
<field declared_type='UInt32' name='namedColorIndex' type='L' type64='I'/>
</struct>
<struct name='CMNamedColor2EntryType' type='{CMNamedColor2EntryType=&quot;rootName&quot;[32C]&quot;PCSColorCoords&quot;[3S]&quot;DeviceColorCoords&quot;[1S]}'>
<field declared_type='UInt8*' name='rootName' type='[32C]'/>
<field declared_type='UInt16*' name='PCSColorCoords' type='[3S]'/>
<field declared_type='UInt16*' name='DeviceColorCoords' type='[1S]'/>
</struct>
<struct name='CMNamedColor2Type' type='{CMNamedColor2Type=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;vendorFlag&quot;I&quot;count&quot;I&quot;deviceChannelCount&quot;I&quot;prefixName&quot;[32C]&quot;suffixName&quot;[32C]&quot;data&quot;[1c]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt32' name='vendorFlag' type='L' type64='I'/>
<field declared_type='UInt32' name='count' type='L' type64='I'/>
<field declared_type='UInt32' name='deviceChannelCount' type='L' type64='I'/>
<field declared_type='UInt8*' name='prefixName' type='[32C]'/>
<field declared_type='UInt8*' name='suffixName' type='[32C]'/>
<field declared_type='char*' name='data' type='[1c]'/>
</struct>
<struct name='CMNamedColorType' type='{CMNamedColorType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;vendorFlag&quot;I&quot;count&quot;I&quot;prefixName&quot;[1C]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt32' name='vendorFlag' type='L' type64='I'/>
<field declared_type='UInt32' name='count' type='L' type64='I'/>
<field declared_type='UInt8*' name='prefixName' type='[1C]'/>
</struct>
<struct name='CMNativeDisplayInfo' type='{CMNativeDisplayInfo=&quot;dataSize&quot;I&quot;redPhosphor&quot;{CMFixedXYColor=&quot;x&quot;i&quot;y&quot;i}&quot;greenPhosphor&quot;{CMFixedXYColor=&quot;x&quot;i&quot;y&quot;i}&quot;bluePhosphor&quot;{CMFixedXYColor=&quot;x&quot;i&quot;y&quot;i}&quot;whitePoint&quot;{CMFixedXYColor=&quot;x&quot;i&quot;y&quot;i}&quot;redGammaValue&quot;i&quot;greenGammaValue&quot;i&quot;blueGammaValue&quot;i&quot;gammaChannels&quot;S&quot;gammaEntryCount&quot;S&quot;gammaEntrySize&quot;S&quot;gammaData&quot;[1c]}'>
<field declared_type='UInt32' name='dataSize' type='L' type64='I'/>
<field declared_type='CMFixedXYColor' name='redPhosphor' type='{CMFixedXYColor=&quot;x&quot;i&quot;y&quot;i}'/>
<field declared_type='CMFixedXYColor' name='greenPhosphor' type='{CMFixedXYColor=&quot;x&quot;i&quot;y&quot;i}'/>
<field declared_type='CMFixedXYColor' name='bluePhosphor' type='{CMFixedXYColor=&quot;x&quot;i&quot;y&quot;i}'/>
<field declared_type='CMFixedXYColor' name='whitePoint' type='{CMFixedXYColor=&quot;x&quot;i&quot;y&quot;i}'/>
<field declared_type='Fixed' name='redGammaValue' type='l' type64='i'/>
<field declared_type='Fixed' name='greenGammaValue' type='l' type64='i'/>
<field declared_type='Fixed' name='blueGammaValue' type='l' type64='i'/>
<field declared_type='UInt16' name='gammaChannels' type='S'/>
<field declared_type='UInt16' name='gammaEntryCount' type='S'/>
<field declared_type='UInt16' name='gammaEntrySize' type='S'/>
<field declared_type='char*' name='gammaData' type='[1c]'/>
</struct>
<struct name='CMNativeDisplayInfoType' type='{CMNativeDisplayInfoType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;nativeDisplayInfo&quot;{CMNativeDisplayInfo=&quot;dataSize&quot;I&quot;redPhosphor&quot;{CMFixedXYColor=&quot;x&quot;i&quot;y&quot;i}&quot;greenPhosphor&quot;{CMFixedXYColor=&quot;x&quot;i&quot;y&quot;i}&quot;bluePhosphor&quot;{CMFixedXYColor=&quot;x&quot;i&quot;y&quot;i}&quot;whitePoint&quot;{CMFixedXYColor=&quot;x&quot;i&quot;y&quot;i}&quot;redGammaValue&quot;i&quot;greenGammaValue&quot;i&quot;blueGammaValue&quot;i&quot;gammaChannels&quot;S&quot;gammaEntryCount&quot;S&quot;gammaEntrySize&quot;S&quot;gammaData&quot;[1c]}}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='CMNativeDisplayInfo' name='nativeDisplayInfo' type='{CMNativeDisplayInfo=&quot;dataSize&quot;I&quot;redPhosphor&quot;{CMFixedXYColor=&quot;x&quot;i&quot;y&quot;i}&quot;greenPhosphor&quot;{CMFixedXYColor=&quot;x&quot;i&quot;y&quot;i}&quot;bluePhosphor&quot;{CMFixedXYColor=&quot;x&quot;i&quot;y&quot;i}&quot;whitePoint&quot;{CMFixedXYColor=&quot;x&quot;i&quot;y&quot;i}&quot;redGammaValue&quot;i&quot;greenGammaValue&quot;i&quot;blueGammaValue&quot;i&quot;gammaChannels&quot;S&quot;gammaEntryCount&quot;S&quot;gammaEntrySize&quot;S&quot;gammaData&quot;[1c]}'/>
</struct>
<struct name='CMPS2CRDVMSizeType' type='{CMPS2CRDVMSizeType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;count&quot;I&quot;intentCRD&quot;[1{CMIntentCRDVMSize=&quot;renderingIntent&quot;I&quot;VMSize&quot;I}]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt32' name='count' type='L' type64='I'/>
<field declared_type='CMIntentCRDVMSize*' name='intentCRD' type='[1{CMIntentCRDVMSize=&quot;renderingIntent&quot;I&quot;VMSize&quot;I}]'/>
</struct>
<struct name='CMParametricCurveType' type='{CMParametricCurveType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;functionType&quot;S&quot;reserved2&quot;S&quot;value&quot;[1l]}' type64='{CMParametricCurveType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;functionType&quot;S&quot;reserved2&quot;S&quot;value&quot;[1i]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt16' name='functionType' type='S'/>
<field declared_type='UInt16' name='reserved2' type='S'/>
<field declared_type='Fixed*' name='value' type='[1l]' type64='[1i]'/>
</struct>
<struct name='CMPathLocation' type='{CMPathLocation=&quot;path&quot;[256c]}' type64='{CMPathLocation=&quot;path&quot;[1024c]}'>
<field declared_type='char*' name='path' type='[256c]' type64='[1024c]'/>
</struct>
<struct name='CMProfileIterateData' type='{CMProfileIterateData=&quot;dataVersion&quot;I&quot;header&quot;{CM2Header=&quot;size&quot;I&quot;CMMType&quot;I&quot;profileVersion&quot;I&quot;profileClass&quot;I&quot;dataColorSpace&quot;I&quot;profileConnectionSpace&quot;I&quot;dateTime&quot;{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}&quot;CS2profileSignature&quot;I&quot;platform&quot;I&quot;flags&quot;I&quot;deviceManufacturer&quot;I&quot;deviceModel&quot;I&quot;deviceAttributes&quot;[2L]&quot;renderingIntent&quot;I&quot;white&quot;{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}&quot;creator&quot;I&quot;reserved&quot;[44c]}&quot;code&quot;s&quot;name&quot;[256C]&quot;location&quot;{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;fileLoc&quot;{CMFileLocation=&quot;spec&quot;{FSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}}&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;ptrLoc&quot;{CMPtrLocation=&quot;p&quot;*}&quot;procLoc&quot;{CMProcedureLocation=&quot;proc&quot;^?&quot;refCon&quot;^v}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[256c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}&quot;uniCodeNameCount&quot;I&quot;uniCodeName&quot;^S&quot;asciiName&quot;*&quot;makeAndModel&quot;^{CMMakeAndModel}&quot;digest&quot;^[16C]}' type64='{CMProfileIterateData=&quot;dataVersion&quot;I&quot;header&quot;{CM2Header=&quot;size&quot;I&quot;CMMType&quot;I&quot;profileVersion&quot;I&quot;profileClass&quot;I&quot;dataColorSpace&quot;I&quot;profileConnectionSpace&quot;I&quot;dateTime&quot;{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}&quot;CS2profileSignature&quot;I&quot;platform&quot;I&quot;flags&quot;I&quot;deviceManufacturer&quot;I&quot;deviceModel&quot;I&quot;deviceAttributes&quot;[2I]&quot;renderingIntent&quot;I&quot;white&quot;{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}&quot;creator&quot;I&quot;reserved&quot;[44c]}&quot;code&quot;s&quot;name&quot;[256C]&quot;location&quot;{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[1024c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}&quot;uniCodeNameCount&quot;Q&quot;uniCodeName&quot;^S&quot;asciiName&quot;*&quot;makeAndModel&quot;^{CMMakeAndModel}&quot;digest&quot;^[16C]}'>
<field declared_type='UInt32' name='dataVersion' type='L' type64='I'/>
<field declared_type='CM2Header' name='header' type='{CM2Header=&quot;size&quot;I&quot;CMMType&quot;I&quot;profileVersion&quot;I&quot;profileClass&quot;I&quot;dataColorSpace&quot;I&quot;profileConnectionSpace&quot;I&quot;dateTime&quot;{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}&quot;CS2profileSignature&quot;I&quot;platform&quot;I&quot;flags&quot;I&quot;deviceManufacturer&quot;I&quot;deviceModel&quot;I&quot;deviceAttributes&quot;[2L]&quot;renderingIntent&quot;I&quot;white&quot;{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}&quot;creator&quot;I&quot;reserved&quot;[44c]}' type64='{CM2Header=&quot;size&quot;I&quot;CMMType&quot;I&quot;profileVersion&quot;I&quot;profileClass&quot;I&quot;dataColorSpace&quot;I&quot;profileConnectionSpace&quot;I&quot;dateTime&quot;{CMDateTime=&quot;year&quot;S&quot;month&quot;S&quot;dayOfTheMonth&quot;S&quot;hours&quot;S&quot;minutes&quot;S&quot;seconds&quot;S}&quot;CS2profileSignature&quot;I&quot;platform&quot;I&quot;flags&quot;I&quot;deviceManufacturer&quot;I&quot;deviceModel&quot;I&quot;deviceAttributes&quot;[2I]&quot;renderingIntent&quot;I&quot;white&quot;{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}&quot;creator&quot;I&quot;reserved&quot;[44c]}'/>
<field declared_type='ScriptCode' name='code' type='s'/>
<field declared_type='Str255' name='name' type='[256C]'/>
<field declared_type='CMProfileLocation' name='location' type='{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;fileLoc&quot;{CMFileLocation=&quot;spec&quot;{FSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}}&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;ptrLoc&quot;{CMPtrLocation=&quot;p&quot;*}&quot;procLoc&quot;{CMProcedureLocation=&quot;proc&quot;^?&quot;refCon&quot;^v}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[256c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}' type64='{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[1024c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}'/>
<field declared_type='UniCharCount' name='uniCodeNameCount' type='L' type64='Q'/>
<field declared_type='UniChar*' name='uniCodeName' type='^S'/>
<field declared_type='unsigned char*' name='asciiName' type='*'/>
<field declared_type='CMMakeAndModel*' name='makeAndModel' type='^{CMMakeAndModel=IIIIIIII}'/>
<field declared_type='CMProfileMD5*' name='digest' type='^[16C]'/>
</struct>
<struct name='CMProfileLocation' type='{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;fileLoc&quot;{CMFileLocation=&quot;spec&quot;{FSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}}&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;ptrLoc&quot;{CMPtrLocation=&quot;p&quot;*}&quot;procLoc&quot;{CMProcedureLocation=&quot;proc&quot;^?&quot;refCon&quot;^v}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[256c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}' type64='{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[1024c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}'>
<field declared_type='short' name='locType' type='s'/>
<field declared_type='CMProfLoc' name='u' type='(CMProfLoc=&quot;fileLoc&quot;{CMFileLocation=&quot;spec&quot;{FSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}}&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;ptrLoc&quot;{CMPtrLocation=&quot;p&quot;*}&quot;procLoc&quot;{CMProcedureLocation=&quot;proc&quot;^?&quot;refCon&quot;^v}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[256c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})' type64='(CMProfLoc=&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[1024c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})'/>
</struct>
<struct name='CMProfileSequenceDescType' type='{CMProfileSequenceDescType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;count&quot;I&quot;data&quot;[1c]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt32' name='count' type='L' type64='I'/>
<field declared_type='char*' name='data' type='[1c]'/>
</struct>
<struct name='CMRGBColor' type='{CMRGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'>
<field declared_type='UInt16' name='red' type='S'/>
<field declared_type='UInt16' name='green' type='S'/>
<field declared_type='UInt16' name='blue' type='S'/>
</struct>
<struct name='CMS15Fixed16ArrayType' type='{CMS15Fixed16ArrayType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;value&quot;[1l]}' type64='{CMS15Fixed16ArrayType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;value&quot;[1i]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='Fixed*' name='value' type='[1l]' type64='[1i]'/>
</struct>
<struct name='CMScreeningChannelRec' type='{CMScreeningChannelRec=&quot;frequency&quot;i&quot;angle&quot;i&quot;spotFunction&quot;I}'>
<field declared_type='Fixed' name='frequency' type='l' type64='i'/>
<field declared_type='Fixed' name='angle' type='l' type64='i'/>
<field declared_type='UInt32' name='spotFunction' type='L' type64='I'/>
</struct>
<struct name='CMScreeningType' type='{CMScreeningType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;screeningFlag&quot;I&quot;channelCount&quot;I&quot;channelInfo&quot;[1{CMScreeningChannelRec=&quot;frequency&quot;i&quot;angle&quot;i&quot;spotFunction&quot;I}]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt32' name='screeningFlag' type='L' type64='I'/>
<field declared_type='UInt32' name='channelCount' type='L' type64='I'/>
<field declared_type='CMScreeningChannelRec*' name='channelInfo' type='[1{CMScreeningChannelRec=&quot;frequency&quot;i&quot;angle&quot;i&quot;spotFunction&quot;I}]'/>
</struct>
<struct name='CMSignatureType' type='{CMSignatureType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;signature&quot;I}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='OSType' name='signature' type='L' type64='I'/>
</struct>
<struct name='CMTagElemTable' type='{CMTagElemTable=&quot;count&quot;I&quot;tagList&quot;[1{CMTagRecord=&quot;tag&quot;I&quot;elementOffset&quot;I&quot;elementSize&quot;I}]}'>
<field declared_type='UInt32' name='count' type='L' type64='I'/>
<field declared_type='CMTagRecord*' name='tagList' type='[1{CMTagRecord=&quot;tag&quot;I&quot;elementOffset&quot;I&quot;elementSize&quot;I}]'/>
</struct>
<struct name='CMTagRecord' type='{CMTagRecord=&quot;tag&quot;I&quot;elementOffset&quot;I&quot;elementSize&quot;I}'>
<field declared_type='OSType' name='tag' type='L' type64='I'/>
<field declared_type='UInt32' name='elementOffset' type='L' type64='I'/>
<field declared_type='UInt32' name='elementSize' type='L' type64='I'/>
</struct>
<struct name='CMTextDescriptionType' type='{CMTextDescriptionType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;ASCIICount&quot;I&quot;ASCIIName&quot;[2C]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt32' name='ASCIICount' type='L' type64='I'/>
<field declared_type='UInt8*' name='ASCIIName' type='[2C]'/>
</struct>
<struct name='CMTextType' type='{CMTextType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;text&quot;[1C]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt8*' name='text' type='[1C]'/>
</struct>
<struct name='CMU16Fixed16ArrayType' type='{CMU16Fixed16ArrayType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;value&quot;[1L]}' type64='{CMU16Fixed16ArrayType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;value&quot;[1I]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt32*' name='value' type='[1L]' type64='[1I]'/>
</struct>
<struct name='CMUInt16ArrayType' type='{CMUInt16ArrayType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;value&quot;[1S]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt16*' name='value' type='[1S]'/>
</struct>
<struct name='CMUInt32ArrayType' type='{CMUInt32ArrayType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;value&quot;[1L]}' type64='{CMUInt32ArrayType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;value&quot;[1I]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt32*' name='value' type='[1L]' type64='[1I]'/>
</struct>
<struct name='CMUInt64ArrayType' type='{CMUInt64ArrayType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;value&quot;[1L]}' type64='{CMUInt64ArrayType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;value&quot;[1I]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt32*' name='value' type='[1L]' type64='[1I]'/>
</struct>
<struct name='CMUInt8ArrayType' type='{CMUInt8ArrayType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;value&quot;[1C]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt8*' name='value' type='[1C]'/>
</struct>
<struct name='CMUcrBgType' type='{CMUcrBgType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;ucrCount&quot;I&quot;ucrValues&quot;[1S]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UInt32' name='ucrCount' type='L' type64='I'/>
<field declared_type='UInt16*' name='ucrValues' type='[1S]'/>
</struct>
<struct name='CMUnicodeTextType' type='{CMUnicodeTextType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;text&quot;[1S]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='UniChar*' name='text' type='[1S]'/>
</struct>
<struct name='CMVideoCardGamma' type='{CMVideoCardGamma=&quot;tagType&quot;I&quot;u&quot;(?=&quot;table&quot;{CMVideoCardGammaTable=&quot;channels&quot;S&quot;entryCount&quot;S&quot;entrySize&quot;S&quot;data&quot;[1c]}&quot;formula&quot;{CMVideoCardGammaFormula=&quot;redGamma&quot;i&quot;redMin&quot;i&quot;redMax&quot;i&quot;greenGamma&quot;i&quot;greenMin&quot;i&quot;greenMax&quot;i&quot;blueGamma&quot;i&quot;blueMin&quot;i&quot;blueMax&quot;i})}'>
<field declared_type='UInt32' name='tagType' type='L' type64='I'/>
<field declared_type='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.9.sdk/System/Library/Frameworks/ApplicationServices.framework/Frameworks/QD.framework/Headers/ColorSyncDeprecated.h:858:3)' name='u' type='(?=&quot;table&quot;{CMVideoCardGammaTable=&quot;channels&quot;S&quot;entryCount&quot;S&quot;entrySize&quot;S&quot;data&quot;[1c]}&quot;formula&quot;{CMVideoCardGammaFormula=&quot;redGamma&quot;i&quot;redMin&quot;i&quot;redMax&quot;i&quot;greenGamma&quot;i&quot;greenMin&quot;i&quot;greenMax&quot;i&quot;blueGamma&quot;i&quot;blueMin&quot;i&quot;blueMax&quot;i})'/>
</struct>
<struct name='CMVideoCardGammaFormula' type='{CMVideoCardGammaFormula=&quot;redGamma&quot;i&quot;redMin&quot;i&quot;redMax&quot;i&quot;greenGamma&quot;i&quot;greenMin&quot;i&quot;greenMax&quot;i&quot;blueGamma&quot;i&quot;blueMin&quot;i&quot;blueMax&quot;i}'>
<field declared_type='Fixed' name='redGamma' type='l' type64='i'/>
<field declared_type='Fixed' name='redMin' type='l' type64='i'/>
<field declared_type='Fixed' name='redMax' type='l' type64='i'/>
<field declared_type='Fixed' name='greenGamma' type='l' type64='i'/>
<field declared_type='Fixed' name='greenMin' type='l' type64='i'/>
<field declared_type='Fixed' name='greenMax' type='l' type64='i'/>
<field declared_type='Fixed' name='blueGamma' type='l' type64='i'/>
<field declared_type='Fixed' name='blueMin' type='l' type64='i'/>
<field declared_type='Fixed' name='blueMax' type='l' type64='i'/>
</struct>
<struct name='CMVideoCardGammaTable' type='{CMVideoCardGammaTable=&quot;channels&quot;S&quot;entryCount&quot;S&quot;entrySize&quot;S&quot;data&quot;[1c]}'>
<field declared_type='UInt16' name='channels' type='S'/>
<field declared_type='UInt16' name='entryCount' type='S'/>
<field declared_type='UInt16' name='entrySize' type='S'/>
<field declared_type='char*' name='data' type='[1c]'/>
</struct>
<struct name='CMVideoCardGammaType' type='{CMVideoCardGammaType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;gamma&quot;{CMVideoCardGamma=&quot;tagType&quot;I&quot;u&quot;(?=&quot;table&quot;{CMVideoCardGammaTable=&quot;channels&quot;S&quot;entryCount&quot;S&quot;entrySize&quot;S&quot;data&quot;[1c]}&quot;formula&quot;{CMVideoCardGammaFormula=&quot;redGamma&quot;i&quot;redMin&quot;i&quot;redMax&quot;i&quot;greenGamma&quot;i&quot;greenMin&quot;i&quot;greenMax&quot;i&quot;blueGamma&quot;i&quot;blueMin&quot;i&quot;blueMax&quot;i})}}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='CMVideoCardGamma' name='gamma' type='{CMVideoCardGamma=&quot;tagType&quot;I&quot;u&quot;(?=&quot;table&quot;{CMVideoCardGammaTable=&quot;channels&quot;S&quot;entryCount&quot;S&quot;entrySize&quot;S&quot;data&quot;[1c]}&quot;formula&quot;{CMVideoCardGammaFormula=&quot;redGamma&quot;i&quot;redMin&quot;i&quot;redMax&quot;i&quot;greenGamma&quot;i&quot;greenMin&quot;i&quot;greenMax&quot;i&quot;blueGamma&quot;i&quot;blueMin&quot;i&quot;blueMax&quot;i})}'/>
</struct>
<struct name='CMViewingConditionsType' type='{CMViewingConditionsType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;illuminant&quot;{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}&quot;surround&quot;{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}&quot;stdIlluminant&quot;I}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='CMFixedXYZColor' name='illuminant' type='{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}'/>
<field declared_type='CMFixedXYZColor' name='surround' type='{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}'/>
<field declared_type='UInt32' name='stdIlluminant' type='L' type64='I'/>
</struct>
<struct name='CMXYZColor' type='{CMXYZColor=&quot;X&quot;S&quot;Y&quot;S&quot;Z&quot;S}'>
<field declared_type='CMXYZComponent' name='X' type='S'/>
<field declared_type='CMXYZComponent' name='Y' type='S'/>
<field declared_type='CMXYZComponent' name='Z' type='S'/>
</struct>
<struct name='CMXYZType' type='{CMXYZType=&quot;typeDescriptor&quot;I&quot;reserved&quot;I&quot;XYZ&quot;[1{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}]}'>
<field declared_type='OSType' name='typeDescriptor' type='L' type64='I'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
<field declared_type='CMFixedXYZColor*' name='XYZ' type='[1{CMFixedXYZColor=&quot;X&quot;i&quot;Y&quot;i&quot;Z&quot;i}]'/>
</struct>
<struct name='CMYxyColor' type='{CMYxyColor=&quot;capY&quot;S&quot;x&quot;S&quot;y&quot;S}'>
<field declared_type='UInt16' name='capY' type='S'/>
<field declared_type='UInt16' name='x' type='S'/>
<field declared_type='UInt16' name='y' type='S'/>
</struct>
<struct name='CQDProcs' type='{CQDProcs=&quot;textProc&quot;^?&quot;lineProc&quot;^?&quot;rectProc&quot;^?&quot;rRectProc&quot;^?&quot;ovalProc&quot;^?&quot;arcProc&quot;^?&quot;polyProc&quot;^?&quot;rgnProc&quot;^?&quot;bitsProc&quot;^?&quot;commentProc&quot;^?&quot;txMeasProc&quot;^?&quot;getPicProc&quot;^?&quot;putPicProc&quot;^?&quot;opcodeProc&quot;^?&quot;newProc1&quot;^?&quot;glyphsProc&quot;^?&quot;printerStatusProc&quot;^?&quot;newProc4&quot;^?&quot;newProc5&quot;^?&quot;newProc6&quot;^?}'>
<field declared_type='QDTextUPP' function_pointer='true' name='textProc' type='^?'>
<arg declared_type='short' type='s'/>
<arg const='true' declared_type='void*' type='^v'/>
<arg declared_type='Point' type='{Point=ss}'/>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='QDLineUPP' function_pointer='true' name='lineProc' type='^?'>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='QDRectUPP' function_pointer='true' name='rectProc' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='QDRRectUPP' function_pointer='true' name='rRectProc' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='QDOvalUPP' function_pointer='true' name='ovalProc' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='QDArcUPP' function_pointer='true' name='arcProc' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='QDPolyUPP' function_pointer='true' name='polyProc' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='PolyHandle' type='^^{MacPolygon}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='QDRgnUPP' function_pointer='true' name='rgnProc' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='QDBitsUPP' function_pointer='true' name='bitsProc' type='^?'>
<arg const='true' declared_type='BitMap*' type='^{BitMap=*s{Rect=ssss}}'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='QDCommentUPP' function_pointer='true' name='commentProc' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Handle' type='^*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='QDTxMeasUPP' function_pointer='true' name='txMeasProc' type='^?'>
<arg declared_type='short' type='s'/>
<arg const='true' declared_type='void*' type='^v'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='FontInfo*' type='^{FontInfo=ssss}'/>
<retval declared_type='short' type='s'/>
</field>
<field declared_type='QDGetPicUPP' function_pointer='true' name='getPicProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='QDPutPicUPP' function_pointer='true' name='putPicProc' type='^?'>
<arg const='true' declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='QDOpcodeUPP' function_pointer='true' name='opcodeProc' type='^?'>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='SInt16' type='s'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='UniversalProcPtr' function_pointer='true' name='newProc1' type='^?'>
<retval declared_type='long' type='l' type64='q'/>
</field>
<field declared_type='QDStdGlyphsUPP' function_pointer='true' name='glyphsProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ByteCount' type='L' type64='Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</field>
<field declared_type='QDPrinterStatusUPP' function_pointer='true' name='printerStatusProc' type='^?'>
<arg declared_type='PrinterStatusOpcode' type='l' type64='i'/>
<arg declared_type='CGrafPtr' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</field>
<field declared_type='UniversalProcPtr' function_pointer='true' name='newProc4' type='^?'>
<retval declared_type='long' type='l' type64='q'/>
</field>
<field declared_type='UniversalProcPtr' function_pointer='true' name='newProc5' type='^?'>
<retval declared_type='long' type='l' type64='q'/>
</field>
<field declared_type='UniversalProcPtr' function_pointer='true' name='newProc6' type='^?'>
<retval declared_type='long' type='l' type64='q'/>
</field>
</struct>
<struct name='ColorSpec' type='{ColorSpec=&quot;value&quot;s&quot;rgb&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}}'>
<field declared_type='short' name='value' type='s'/>
<field declared_type='RGBColor' name='rgb' type='{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'/>
</struct>
<struct name='ColorTable' type='{ColorTable=&quot;ctSeed&quot;i&quot;ctFlags&quot;s&quot;ctSize&quot;s&quot;ctTable&quot;[1{ColorSpec=&quot;value&quot;s&quot;rgb&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}}]}'>
<field declared_type='SInt32' name='ctSeed' type='l' type64='i'/>
<field declared_type='short' name='ctFlags' type='s'/>
<field declared_type='short' name='ctSize' type='s'/>
<field declared_type='CSpecArray' name='ctTable' type='[1{ColorSpec=&quot;value&quot;s&quot;rgb&quot;{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}}]'/>
</struct>
<struct name='FMInput' type='{FMInput=&quot;family&quot;s&quot;size&quot;s&quot;face&quot;C&quot;needBits&quot;B&quot;device&quot;s&quot;numer&quot;{Point=&quot;v&quot;s&quot;h&quot;s}&quot;denom&quot;{Point=&quot;v&quot;s&quot;h&quot;s}}'>
<field declared_type='short' name='family' type='s'/>
<field declared_type='short' name='size' type='s'/>
<field declared_type='Style' name='face' type='C'/>
<field declared_type='Boolean' name='needBits' type='B'/>
<field declared_type='short' name='device' type='s'/>
<field declared_type='Point' name='numer' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
<field declared_type='Point' name='denom' type='{Point=&quot;v&quot;s&quot;h&quot;s}'/>
</struct>
<struct name='FamRec' type='{FamRec=&quot;ffFlags&quot;s&quot;ffFamID&quot;s&quot;ffFirstChar&quot;s&quot;ffLastChar&quot;s&quot;ffAscent&quot;s&quot;ffDescent&quot;s&quot;ffLeading&quot;s&quot;ffWidMax&quot;s&quot;ffWTabOff&quot;i&quot;ffKernOff&quot;i&quot;ffStylOff&quot;i&quot;ffProperty&quot;[9s]&quot;ffIntl&quot;[2s]&quot;ffVersion&quot;s}'>
<field declared_type='SInt16' name='ffFlags' type='s'/>
<field declared_type='SInt16' name='ffFamID' type='s'/>
<field declared_type='SInt16' name='ffFirstChar' type='s'/>
<field declared_type='SInt16' name='ffLastChar' type='s'/>
<field declared_type='SInt16' name='ffAscent' type='s'/>
<field declared_type='SInt16' name='ffDescent' type='s'/>
<field declared_type='SInt16' name='ffLeading' type='s'/>
<field declared_type='SInt16' name='ffWidMax' type='s'/>
<field declared_type='SInt32' name='ffWTabOff' type='l' type64='i'/>
<field declared_type='SInt32' name='ffKernOff' type='l' type64='i'/>
<field declared_type='SInt32' name='ffStylOff' type='l' type64='i'/>
<field declared_type='SInt16*' name='ffProperty' type='[9s]'/>
<field declared_type='SInt16*' name='ffIntl' type='[2s]'/>
<field declared_type='SInt16' name='ffVersion' type='s'/>
</struct>
<struct name='FontAssoc' type='{FontAssoc=&quot;numAssoc&quot;s}'>
<field declared_type='SInt16' name='numAssoc' type='s'/>
</struct>
<struct name='FontInfo' type='{FontInfo=&quot;ascent&quot;s&quot;descent&quot;s&quot;widMax&quot;s&quot;leading&quot;s}'>
<field declared_type='short' name='ascent' type='s'/>
<field declared_type='short' name='descent' type='s'/>
<field declared_type='short' name='widMax' type='s'/>
<field declared_type='short' name='leading' type='s'/>
</struct>
<struct name='FontRec' type='{FontRec=&quot;fontType&quot;s&quot;firstChar&quot;s&quot;lastChar&quot;s&quot;widMax&quot;s&quot;kernMax&quot;s&quot;nDescent&quot;s&quot;fRectWidth&quot;s&quot;fRectHeight&quot;s&quot;owTLoc&quot;S&quot;ascent&quot;s&quot;descent&quot;s&quot;leading&quot;s&quot;rowWords&quot;s}'>
<field declared_type='SInt16' name='fontType' type='s'/>
<field declared_type='SInt16' name='firstChar' type='s'/>
<field declared_type='SInt16' name='lastChar' type='s'/>
<field declared_type='SInt16' name='widMax' type='s'/>
<field declared_type='SInt16' name='kernMax' type='s'/>
<field declared_type='SInt16' name='nDescent' type='s'/>
<field declared_type='SInt16' name='fRectWidth' type='s'/>
<field declared_type='SInt16' name='fRectHeight' type='s'/>
<field declared_type='UInt16' name='owTLoc' type='S'/>
<field declared_type='SInt16' name='ascent' type='s'/>
<field declared_type='SInt16' name='descent' type='s'/>
<field declared_type='SInt16' name='leading' type='s'/>
<field declared_type='SInt16' name='rowWords' type='s'/>
</struct>
<struct name='GDevice' type='{GDevice=&quot;gdRefNum&quot;s&quot;gdID&quot;s&quot;gdType&quot;s&quot;gdITable&quot;^*&quot;gdResPref&quot;s&quot;gdSearchProc&quot;^*&quot;gdCompProc&quot;^*&quot;gdFlags&quot;s&quot;gdPMap&quot;^^{PixMap}&quot;gdRefCon&quot;i&quot;gdNextGD&quot;^^{GDevice}&quot;gdRect&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;gdMode&quot;i&quot;gdCCBytes&quot;s&quot;gdCCDepth&quot;s&quot;gdCCXData&quot;^*&quot;gdCCXMask&quot;^*&quot;gdExt&quot;^*}'>
<field declared_type='short' name='gdRefNum' type='s'/>
<field declared_type='short' name='gdID' type='s'/>
<field declared_type='short' name='gdType' type='s'/>
<field declared_type='Handle' name='gdITable' type='^*'/>
<field declared_type='short' name='gdResPref' type='s'/>
<field declared_type='Handle' name='gdSearchProc' type='^*'/>
<field declared_type='Handle' name='gdCompProc' type='^*'/>
<field declared_type='short' name='gdFlags' type='s'/>
<field declared_type='PixMapHandle' name='gdPMap' type='^^{PixMap}'/>
<field declared_type='SInt32' name='gdRefCon' type='l' type64='i'/>
<field declared_type='GDHandle' name='gdNextGD' type='^^{GDevice}'/>
<field declared_type='Rect' name='gdRect' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field declared_type='SInt32' name='gdMode' type='l' type64='i'/>
<field declared_type='short' name='gdCCBytes' type='s'/>
<field declared_type='short' name='gdCCDepth' type='s'/>
<field declared_type='Handle' name='gdCCXData' type='^*'/>
<field declared_type='Handle' name='gdCCXMask' type='^*'/>
<field declared_type='Handle' name='gdExt' type='^*'/>
</struct>
<struct name='GrafPort' type='{GrafPort=&quot;whatever&quot;[87s]}'>
<field declared_type='short*' name='whatever' type='[87s]'/>
</struct>
<struct name='KernEntry' type='{KernEntry=&quot;kernStyle&quot;s&quot;kernLength&quot;s}'>
<field declared_type='SInt16' name='kernStyle' type='s'/>
<field declared_type='SInt16' name='kernLength' type='s'/>
</struct>
<struct name='KernPair' type='{KernPair=&quot;kernFirst&quot;c&quot;kernSecond&quot;c&quot;kernWidth&quot;s}'>
<field declared_type='char' name='kernFirst' type='c'/>
<field declared_type='char' name='kernSecond' type='c'/>
<field declared_type='SInt16' name='kernWidth' type='s'/>
</struct>
<struct name='KernTable' type='{KernTable=&quot;numKerns&quot;s}'>
<field declared_type='SInt16' name='numKerns' type='s'/>
</struct>
<struct name='MacPolygon' type='{MacPolygon=&quot;polySize&quot;s&quot;polyBBox&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;polyPoints&quot;[1{Point=&quot;v&quot;s&quot;h&quot;s}]}'>
<field declared_type='short' name='polySize' type='s'/>
<field declared_type='Rect' name='polyBBox' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field declared_type='Point*' name='polyPoints' type='[1{Point=&quot;v&quot;s&quot;h&quot;s}]'/>
</struct>
<struct name='NCMConcatProfileSet' type='{NCMConcatProfileSet=&quot;cmm&quot;I&quot;flags&quot;I&quot;flagsMask&quot;I&quot;profileCount&quot;I&quot;profileSpecs&quot;[1{NCMConcatProfileSpec=&quot;renderingIntent&quot;I&quot;transformTag&quot;I&quot;profile&quot;^{OpaqueCMProfileRef}}]}'>
<field declared_type='OSType' name='cmm' type='L' type64='I'/>
<field declared_type='UInt32' name='flags' type='L' type64='I'/>
<field declared_type='UInt32' name='flagsMask' type='L' type64='I'/>
<field declared_type='UInt32' name='profileCount' type='L' type64='I'/>
<field declared_type='NCMConcatProfileSpec*' name='profileSpecs' type='[1{NCMConcatProfileSpec=&quot;renderingIntent&quot;I&quot;transformTag&quot;I&quot;profile&quot;^{OpaqueCMProfileRef}}]'/>
</struct>
<struct name='NCMConcatProfileSpec' type='{NCMConcatProfileSpec=&quot;renderingIntent&quot;I&quot;transformTag&quot;I&quot;profile&quot;^{OpaqueCMProfileRef}}'>
<field declared_type='UInt32' name='renderingIntent' type='L' type64='I'/>
<field declared_type='UInt32' name='transformTag' type='L' type64='I'/>
<field declared_type='CMProfileRef' name='profile' type='^{OpaqueCMProfileRef=}'/>
</struct>
<struct name='NCMDeviceProfileInfo' type='{NCMDeviceProfileInfo=&quot;dataVersion&quot;I&quot;profileID&quot;I&quot;profileLoc&quot;{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;fileLoc&quot;{CMFileLocation=&quot;spec&quot;{FSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}}&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;ptrLoc&quot;{CMPtrLocation=&quot;p&quot;*}&quot;procLoc&quot;{CMProcedureLocation=&quot;proc&quot;^?&quot;refCon&quot;^v}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[256c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}&quot;profileName&quot;^{__CFDictionary}&quot;profileScope&quot;{CMDeviceScope=&quot;deviceUser&quot;^{__CFString}&quot;deviceHost&quot;^{__CFString}}&quot;reserved&quot;I}' type64='{NCMDeviceProfileInfo=&quot;dataVersion&quot;I&quot;profileID&quot;I&quot;profileLoc&quot;{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[1024c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}&quot;profileName&quot;^{__CFDictionary}&quot;profileScope&quot;{CMDeviceScope=&quot;deviceUser&quot;^{__CFString}&quot;deviceHost&quot;^{__CFString}}&quot;reserved&quot;I}'>
<field declared_type='UInt32' name='dataVersion' type='L' type64='I'/>
<field declared_type='CMDeviceProfileID' name='profileID' type='L' type64='I'/>
<field declared_type='CMProfileLocation' name='profileLoc' type='{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;fileLoc&quot;{CMFileLocation=&quot;spec&quot;{FSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}}&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;ptrLoc&quot;{CMPtrLocation=&quot;p&quot;*}&quot;procLoc&quot;{CMProcedureLocation=&quot;proc&quot;^?&quot;refCon&quot;^v}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[256c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}' type64='{CMProfileLocation=&quot;locType&quot;s&quot;u&quot;(CMProfLoc=&quot;handleLoc&quot;{CMHandleLocation=&quot;h&quot;^*}&quot;pathLoc&quot;{CMPathLocation=&quot;path&quot;[1024c]}&quot;bufferLoc&quot;{CMBufferLocation=&quot;buffer&quot;^v&quot;size&quot;I})}'/>
<field declared_type='CFDictionaryRef' name='profileName' type='^{__CFDictionary=}'/>
<field declared_type='CMDeviceProfileScope' name='profileScope' type='{CMDeviceScope=&quot;deviceUser&quot;^{__CFString}&quot;deviceHost&quot;^{__CFString}}'/>
<field declared_type='UInt32' name='reserved' type='L' type64='I'/>
</struct>
<struct name='NameTable' type='{NameTable=&quot;stringCount&quot;s&quot;baseFontName&quot;[256C]}'>
<field declared_type='SInt16' name='stringCount' type='s'/>
<field declared_type='Str255' name='baseFontName' type='[256C]'/>
</struct>
<struct name='OpenCPicParams' type='{OpenCPicParams=&quot;srcRect&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;hRes&quot;i&quot;vRes&quot;i&quot;version&quot;s&quot;reserved1&quot;s&quot;reserved2&quot;i}'>
<field declared_type='Rect' name='srcRect' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field declared_type='Fixed' name='hRes' type='l' type64='i'/>
<field declared_type='Fixed' name='vRes' type='l' type64='i'/>
<field declared_type='short' name='version' type='s'/>
<field declared_type='short' name='reserved1' type='s'/>
<field declared_type='SInt32' name='reserved2' type='l' type64='i'/>
</struct>
<struct name='Pattern' type='{Pattern=&quot;pat&quot;[8C]}'>
<field declared_type='UInt8*' name='pat' type='[8C]'/>
</struct>
<struct name='Picture' type='{Picture=&quot;picSize&quot;s&quot;picFrame&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}}'>
<field declared_type='short' name='picSize' type='s'/>
<field declared_type='Rect' name='picFrame' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
</struct>
<struct name='PixMap' type='{PixMap=&quot;baseAddr&quot;*&quot;rowBytes&quot;s&quot;bounds&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;pmVersion&quot;s&quot;packType&quot;s&quot;packSize&quot;i&quot;hRes&quot;i&quot;vRes&quot;i&quot;pixelType&quot;s&quot;pixelSize&quot;s&quot;cmpCount&quot;s&quot;cmpSize&quot;s&quot;pixelFormat&quot;I&quot;pmTable&quot;^^{ColorTable}&quot;pmExt&quot;^v}'>
<field declared_type='Ptr' name='baseAddr' type='*'/>
<field declared_type='short' name='rowBytes' type='s'/>
<field declared_type='Rect' name='bounds' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field declared_type='short' name='pmVersion' type='s'/>
<field declared_type='short' name='packType' type='s'/>
<field declared_type='SInt32' name='packSize' type='l' type64='i'/>
<field declared_type='Fixed' name='hRes' type='l' type64='i'/>
<field declared_type='Fixed' name='vRes' type='l' type64='i'/>
<field declared_type='short' name='pixelType' type='s'/>
<field declared_type='short' name='pixelSize' type='s'/>
<field declared_type='short' name='cmpCount' type='s'/>
<field declared_type='short' name='cmpSize' type='s'/>
<field declared_type='OSType' name='pixelFormat' type='L' type64='I'/>
<field declared_type='CTabHandle' name='pmTable' type='^^{ColorTable}'/>
<field declared_type='void*' name='pmExt' type='^v'/>
</struct>
<struct name='PixPat' type='{PixPat=&quot;patType&quot;s&quot;patMap&quot;^^{PixMap}&quot;patData&quot;^*&quot;patXData&quot;^*&quot;patXValid&quot;s&quot;patXMap&quot;^*&quot;pat1Data&quot;{Pattern=&quot;pat&quot;[8C]}}'>
<field declared_type='short' name='patType' type='s'/>
<field declared_type='PixMapHandle' name='patMap' type='^^{PixMap}'/>
<field declared_type='Handle' name='patData' type='^*'/>
<field declared_type='Handle' name='patXData' type='^*'/>
<field declared_type='short' name='patXValid' type='s'/>
<field declared_type='Handle' name='patXMap' type='^*'/>
<field declared_type='Pattern' name='pat1Data' type='{Pattern=&quot;pat&quot;[8C]}'/>
</struct>
<struct name='Polygon' type='{MacPolygon=&quot;polySize&quot;s&quot;polyBBox&quot;{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}&quot;polyPoints&quot;[1{Point=&quot;v&quot;s&quot;h&quot;s}]}'>
<field declared_type='short' name='polySize' type='s'/>
<field declared_type='Rect' name='polyBBox' type='{Rect=&quot;top&quot;s&quot;left&quot;s&quot;bottom&quot;s&quot;right&quot;s}'/>
<field declared_type='Point*' name='polyPoints' type='[1{Point=&quot;v&quot;s&quot;h&quot;s}]'/>
</struct>
<struct name='RGBColor' type='{RGBColor=&quot;red&quot;S&quot;green&quot;S&quot;blue&quot;S}'>
<field declared_type='unsigned short' name='red' type='S'/>
<field declared_type='unsigned short' name='green' type='S'/>
<field declared_type='unsigned short' name='blue' type='S'/>
</struct>
<struct name='StyleTable' type='{StyleTable=&quot;fontClass&quot;s&quot;offset&quot;i&quot;reserved&quot;i&quot;indexes&quot;[48c]}'>
<field declared_type='SInt16' name='fontClass' type='s'/>
<field declared_type='SInt32' name='offset' type='l' type64='i'/>
<field declared_type='SInt32' name='reserved' type='l' type64='i'/>
<field declared_type='char*' name='indexes' type='[48c]'/>
</struct>
<struct name='VDGammaRecord' type='{VDGammaRecord=&quot;csGTable&quot;*}'>
<field declared_type='Ptr' name='csGTable' type='*'/>
</struct>
<cftype name='ATSUFontFallbacks' type='^{OpaqueATSUFontFallbacks=}'/>
<cftype name='ATSUStyle' type='^{OpaqueATSUStyle=}'/>
<cftype name='ATSUStyleSettingRef' type='^{LLCStyleInfo=}'/>
<cftype name='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<cftype name='CMProfileRef' type='^{OpaqueCMProfileRef=}'/>
<cftype name='CMWorldRef' type='^{OpaqueCMWorldRef=}'/>
<cftype name='DialogPtr' type='^{OpaqueDialogPtr=}'/>
<cftype name='GrafPtr' type='^{OpaqueGrafPtr=}'/>
<cftype name='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<cftype name='WindowPtr' type='^{OpaqueWindowPtr=}'/>
<constant const='true' declared_type='float*' name='kCMIlluminantD50' type='[3f]'/>
<constant const='true' declared_type='float*' name='kCMIlluminantD65' type='[3f]'/>
<string_constant name='kCMDefaultDeviceNotification' nsstring='true' value='CMDefaultDeviceNotification'/>
<string_constant name='kCMDefaultDeviceProfileNotification' nsstring='true' value='CMDefaultDeviceProfileNotification'/>
<string_constant name='kCMDeviceOfflineNotification' nsstring='true' value='CMDeviceOfflineNotification'/>
<string_constant name='kCMDeviceOnlineNotification' nsstring='true' value='CMDeviceOnlineNotification'/>
<string_constant name='kCMDeviceProfilesNotification' nsstring='true' value='CMDeviceProfilesNotification'/>
<string_constant name='kCMDeviceRegisteredNotification' nsstring='true' value='CMDeviceRegisteredNotification'/>
<string_constant name='kCMDeviceStateNotification' nsstring='true' value='CMDeviceStateNotification'/>
<string_constant name='kCMDeviceUnregisteredNotification' nsstring='true' value='CMDeviceUnregisteredNotification'/>
<string_constant name='kCMDisplayDeviceProfilesNotification' nsstring='true' value='CMDisplayDeviceProfilesNotification'/>
<string_constant name='kCMPrefsChangedNotification' nsstring='true' value='AppleColorSyncPreferencesChangedNotification'/>
<enum name='CMBITMAPCALLBACKPROCPTR_DEFINED' value='1'/>
<enum name='CS_MAX_PATH' value='256' value64='1024'/>
<enum name='QD_HEADERS_ARE_PRIVATE' value='1'/>
<enum name='cm10CLRData' value='1094929490'/>
<enum name='cm11CLRData' value='1111706706'/>
<enum name='cm12CLRData' value='1128483922'/>
<enum name='cm13CLRData' value='1145261138'/>
<enum name='cm14CLRData' value='1162038354'/>
<enum name='cm15CLRData' value='1178815570'/>
<enum name='cm16_8ColorPacking' value='8192'/>
<enum name='cm24_8ColorPacking' value='8448'/>
<enum name='cm32_16ColorPacking' value='9728'/>
<enum name='cm32_32ColorPacking' value='9984'/>
<enum name='cm32_8ColorPacking' value='2048'/>
<enum name='cm3CLRData' value='860048466'/>
<enum name='cm40_8ColorPacking' value='8704'/>
<enum name='cm48_16ColorPacking' value='10496'/>
<enum name='cm48_8ColorPacking' value='8960'/>
<enum name='cm4CLRData' value='876825682'/>
<enum name='cm56_8ColorPacking' value='9216'/>
<enum name='cm5CLRData' value='893602898'/>
<enum name='cm64_16ColorPacking' value='10752'/>
<enum name='cm64_8ColorPacking' value='9472'/>
<enum name='cm6CLRData' value='910380114'/>
<enum name='cm7CLRData' value='927157330'/>
<enum name='cm8CLRData' value='943934546'/>
<enum name='cm8_8ColorPacking' value='10240'/>
<enum name='cm9CLRData' value='960711762'/>
<enum name='cmARGB32PmulSpace' value='6337'/>
<enum name='cmARGB32Space' value='6273'/>
<enum name='cmARGB64LPmulSpace' value='31425'/>
<enum name='cmARGB64LSpace' value='31361'/>
<enum name='cmARGB64PmulSpace' value='15041'/>
<enum name='cmARGB64Space' value='14977'/>
<enum name='cmAToB0Tag' value='1093812784'/>
<enum name='cmAToB1Tag' value='1093812785'/>
<enum name='cmAToB2Tag' value='1093812786'/>
<enum name='cmAbortWriteAccess' value='7'/>
<enum name='cmAbsoluteColorimetric' value='3'/>
<enum name='cmAbstractClass' value='1633842036'/>
<enum name='cmAlphaFirstPacking' value='4096'/>
<enum name='cmAlphaLastPacking' value='0'/>
<enum name='cmAlphaPmulSpace' value='64'/>
<enum name='cmAlphaSpace' value='128'/>
<enum name='cmAsciiData' value='0'/>
<enum name='cmBToA0Tag' value='1110589744'/>
<enum name='cmBToA1Tag' value='1110589745'/>
<enum name='cmBToA2Tag' value='1110589746'/>
<enum name='cmBeginAccess' value='8'/>
<enum name='cmBestMode' value='2'/>
<enum name='cmBinaryData' value='1'/>
<enum name='cmBlackPointCompensation' value='1'/>
<enum name='cmBlackPointCompensationMask' value='4'/>
<enum name='cmBlueColorantTag' value='1649957210'/>
<enum name='cmBlueTRCTag' value='1649693251'/>
<enum name='cmBradfordChromaticAdaptation' value='3'/>
<enum name='cmBufferBasedProfile' value='6'/>
<enum name='cmCMSReservedFlagsMask' value='-65536'/>
<enum name='cmCMYData' value='1129142560'/>
<enum name='cmCMYK32Space' value='2050'/>
<enum name='cmCMYK64LSpace' value='27138'/>
<enum name='cmCMYK64Space' value='10754'/>
<enum name='cmCMYKData' value='1129142603'/>
<enum name='cmCMYKSpace' value='2'/>
<enum name='cmCS1ChromTag' value='1667789421'/>
<enum name='cmCS1CustTag' value='1668641652'/>
<enum name='cmCS1NameTag' value='1851878757'/>
<enum name='cmCS1ProfileVersion' value='256'/>
<enum name='cmCS1TRCTag' value='1953653536'/>
<enum name='cmCS2ProfileVersion' value='33554432'/>
<enum name='cmCalibrationDateTimeTag' value='1667329140'/>
<enum name='cmCameraDeviceClass' value='1668117089'/>
<enum name='cmCharTargetTag' value='1952543335'/>
<enum name='cmChromaticAdaptationTag' value='1667785060'/>
<enum name='cmCloseAccess' value='5'/>
<enum name='cmCloseSpool' value='5'/>
<enum name='cmColorSpaceAlphaMask' value='128'/>
<enum name='cmColorSpaceClass' value='1936744803'/>
<enum name='cmColorSpaceEncodingMask' value='983040'/>
<enum name='cmColorSpacePackingMask' value='65280'/>
<enum name='cmColorSpacePremulAlphaMask' value='64'/>
<enum name='cmColorSpaceReservedMask' value='-1048576'/>
<enum name='cmColorSpaceSpaceAndAlphaMask' value='255'/>
<enum name='cmColorSpaceSpaceMask' value='63'/>
<enum name='cmCopyrightTag' value='1668313716'/>
<enum name='cmCreateNewAccess' value='6'/>
<enum name='cmCurrentDeviceInfoVersion' value='65536'/>
<enum name='cmCurrentProfileInfoVersion' value='65536'/>
<enum name='cmCurrentProfileLocationSize' value='258' value64='1032'/>
<enum name='cmCurrentProfileMajorVersion' value='33554432'/>
<enum name='cmDefaultDeviceID' value='0'/>
<enum name='cmDefaultProfileID' value='0'/>
<enum name='cmDeviceAlreadyRegistered' value='-4228'/>
<enum name='cmDeviceDBNotFoundErr' value='-4227'/>
<enum name='cmDeviceInfoVersion1' value='65536'/>
<enum name='cmDeviceMfgDescTag' value='1684893284'/>
<enum name='cmDeviceModelDescTag' value='1684890724'/>
<enum name='cmDeviceNotRegistered' value='-4229'/>
<enum name='cmDeviceProfileInfoVersion1' value='65536'/>
<enum name='cmDeviceProfileInfoVersion2' value='131072'/>
<enum name='cmDeviceProfilesNotFound' value='-4230'/>
<enum name='cmDeviceStateAppleRsvdBits' value='-16711681'/>
<enum name='cmDeviceStateBusy' value='2'/>
<enum name='cmDeviceStateDefault' value='0'/>
<enum name='cmDeviceStateDeviceRsvdBits' value='16711680'/>
<enum name='cmDeviceStateForceNotify' value='-2147483648'/>
<enum name='cmDeviceStateOffline' value='1'/>
<enum name='cmDisplayClass' value='1835955314'/>
<enum name='cmDisplayDeviceClass' value='1835955314'/>
<enum name='cmDisplayUse' value='1685089401'/>
<enum name='cmDraftMode' value='1'/>
<enum name='cmEmbeddedMask' value='1'/>
<enum name='cmEmbeddedProfile' value='0'/>
<enum name='cmEmbeddedUse' value='1'/>
<enum name='cmEmbeddedUseMask' value='2'/>
<enum name='cmEndAccess' value='9'/>
<enum name='cmFlare0' value='0'/>
<enum name='cmFlare100' value='1'/>
<enum name='cmGamutCheckingMask' value='524288'/>
<enum name='cmGamutResult1Space' value='2828'/>
<enum name='cmGamutResultSpace' value='12'/>
<enum name='cmGamutTag' value='1734438260'/>
<enum name='cmGeometry045or450' value='1'/>
<enum name='cmGeometry0dord0' value='2'/>
<enum name='cmGeometryUnknown' value='0'/>
<enum name='cmGlossy' value='1'/>
<enum name='cmGlossyMatteMask' value='2'/>
<enum name='cmGray16LSpace' value='16394'/>
<enum name='cmGray16Space' value='10'/>
<enum name='cmGray8Space' value='10250'/>
<enum name='cmGrayA16PmulSpace' value='8394'/>
<enum name='cmGrayA16Space' value='8330'/>
<enum name='cmGrayA32LPmulSpace' value='16586'/>
<enum name='cmGrayA32LSpace' value='16522'/>
<enum name='cmGrayA32PmulSpace' value='202'/>
<enum name='cmGrayA32Space' value='138'/>
<enum name='cmGrayAPmulSpace' value='202'/>
<enum name='cmGrayASpace' value='138'/>
<enum name='cmGrayData' value='1196573017'/>
<enum name='cmGraySpace' value='10'/>
<enum name='cmGrayTRCTag' value='1800688195'/>
<enum name='cmGreenColorantTag' value='1733843290'/>
<enum name='cmGreenTRCTag' value='1733579331'/>
<enum name='cmHLS32Space' value='2564'/>
<enum name='cmHLSData' value='1212961568'/>
<enum name='cmHLSSpace' value='4'/>
<enum name='cmHSV32Space' value='2563'/>
<enum name='cmHSVData' value='1213421088'/>
<enum name='cmHSVSpace' value='3'/>
<enum name='cmICCProfileVersion2' value='33554432'/>
<enum name='cmICCProfileVersion21' value='34603008'/>
<enum name='cmICCProfileVersion4' value='67108864'/>
<enum name='cmICCReservedFlagsMask' value='65535'/>
<enum name='cmIlluminantA' value='6'/>
<enum name='cmIlluminantD50' value='1'/>
<enum name='cmIlluminantD55' value='5'/>
<enum name='cmIlluminantD65' value='2'/>
<enum name='cmIlluminantD93' value='3'/>
<enum name='cmIlluminantEquiPower' value='7'/>
<enum name='cmIlluminantF2' value='4'/>
<enum name='cmIlluminantF8' value='8'/>
<enum name='cmIlluminantUnknown' value='0'/>
<enum name='cmInputClass' value='1935896178'/>
<enum name='cmInputUse' value='1768845428'/>
<enum name='cmInternalCFErr' value='-4231'/>
<enum name='cmInterpolationMask' value='262144'/>
<enum name='cmIterateAllDeviceProfiles' value='4'/>
<enum name='cmIterateCurrentDeviceProfiles' value='3'/>
<enum name='cmIterateCustomDeviceProfiles' value='2'/>
<enum name='cmIterateDeviceProfilesMask' value='15'/>
<enum name='cmIterateFactoryDeviceProfiles' value='1'/>
<enum name='cmLAB24Space' value='8456'/>
<enum name='cmLAB32Space' value='2568'/>
<enum name='cmLAB48LSpace' value='26888'/>
<enum name='cmLAB48Space' value='10504'/>
<enum name='cmLABSpace' value='8'/>
<enum name='cmLUV32Space' value='2567'/>
<enum name='cmLUVSpace' value='7'/>
<enum name='cmLabData' value='1281450528'/>
<enum name='cmLinearChromaticAdaptation' value='1'/>
<enum name='cmLinesPer' value='1'/>
<enum name='cmLinkClass' value='1818848875'/>
<enum name='cmLittleEndianPacking' value='16384'/>
<enum name='cmLong10ColorPacking' value='2560'/>
<enum name='cmLong8ColorPacking' value='2048'/>
<enum name='cmLuminanceTag' value='1819635049'/>
<enum name='cmLuvData' value='1282766368'/>
<enum name='cmMCEight8Space' value='9492'/>
<enum name='cmMCEightSpace' value='20'/>
<enum name='cmMCFive8Space' value='8721'/>
<enum name='cmMCFiveSpace' value='17'/>
<enum name='cmMCH5Data' value='1296255029'/>
<enum name='cmMCH6Data' value='1296255030'/>
<enum name='cmMCH7Data' value='1296255031'/>
<enum name='cmMCH8Data' value='1296255032'/>
<enum name='cmMCSeven8Space' value='9235'/>
<enum name='cmMCSevenSpace' value='19'/>
<enum name='cmMCSix8Space' value='8978'/>
<enum name='cmMCSixSpace' value='18'/>
<enum name='cmMacintosh' value='1095782476'/>
<enum name='cmMagicNumber' value='1633907568'/>
<enum name='cmMakeAndModelTag' value='1835888484'/>
<enum name='cmMeasurementTag' value='1835360627'/>
<enum name='cmMediaBlackPointTag' value='1651208308'/>
<enum name='cmMediaWhitePointTag' value='2004119668'/>
<enum name='cmMicrosoft' value='1297303124'/>
<enum name='cmNamedColor2Tag' value='1852009522'/>
<enum name='cmNamedColorClass' value='1852662636'/>
<enum name='cmNamedColorTag' value='1852010348'/>
<enum name='cmNamedData' value='1312902469'/>
<enum name='cmNamedIndexed32LSpace' value='26384'/>
<enum name='cmNamedIndexed32Space' value='10000'/>
<enum name='cmNamedIndexedSpace' value='16'/>
<enum name='cmNativeDisplayInfoTag' value='1852074350'/>
<enum name='cmNoColorPacking' value='0'/>
<enum name='cmNoProfileBase' value='0'/>
<enum name='cmNoSpace' value='0'/>
<enum name='cmNormalMode' value='0'/>
<enum name='cmNumHeaderElements' value='10'/>
<enum name='cmOneBitDirectPacking' value='2816'/>
<enum name='cmOpenReadAccess' value='1'/>
<enum name='cmOpenReadSpool' value='1'/>
<enum name='cmOpenWriteAccess' value='2'/>
<enum name='cmOpenWriteSpool' value='2'/>
<enum name='cmOriginalProfileLocationSize' value='72'/>
<enum name='cmOutputClass' value='1886549106'/>
<enum name='cmOutputUse' value='1869968496'/>
<enum name='cmPS2CRD0Tag' value='1886610480'/>
<enum name='cmPS2CRD1Tag' value='1886610481'/>
<enum name='cmPS2CRD2Tag' value='1886610482'/>
<enum name='cmPS2CRD3Tag' value='1886610483'/>
<enum name='cmPS2CRDVMSizeTag' value='1886615149'/>
<enum name='cmPS2CSATag' value='1886597747'/>
<enum name='cmPS2RenderingIntentTag' value='1886597737'/>
<enum name='cmPS7bit' value='1'/>
<enum name='cmPS8bit' value='2'/>
<enum name='cmParametricType0' value='0'/>
<enum name='cmParametricType1' value='1'/>
<enum name='cmParametricType2' value='2'/>
<enum name='cmParametricType3' value='3'/>
<enum name='cmParametricType4' value='4'/>
<enum name='cmPathBasedProfile' value='5'/>
<enum name='cmPerceptual' value='0'/>
<enum name='cmPrefsSynchError' value='-4232'/>
<enum name='cmPreview0Tag' value='1886545200'/>
<enum name='cmPreview1Tag' value='1886545201'/>
<enum name='cmPreview2Tag' value='1886545202'/>
<enum name='cmPrinterDeviceClass' value='1886549106'/>
<enum name='cmProfileDescriptionMLTag' value='1685283693'/>
<enum name='cmProfileDescriptionTag' value='1684370275'/>
<enum name='cmProfileIterateDataVersion1' value='65536'/>
<enum name='cmProfileIterateDataVersion2' value='131072'/>
<enum name='cmProfileIterateDataVersion3' value='196608'/>
<enum name='cmProfileIterateDataVersion4' value='262144'/>
<enum name='cmProfileMajorVersionMask' value='-16777216'/>
<enum name='cmProfileSequenceDescTag' value='1886610801'/>
<enum name='cmProofDeviceClass' value='1886549350'/>
<enum name='cmProofUse' value='1886549350'/>
<enum name='cmPrtrDefaultScreens' value='0'/>
<enum name='cmQualityMask' value='196608'/>
<enum name='cmRGB16LSpace' value='17665'/>
<enum name='cmRGB16Space' value='1281'/>
<enum name='cmRGB24Space' value='8449'/>
<enum name='cmRGB32Space' value='2049'/>
<enum name='cmRGB48LSpace' value='26881'/>
<enum name='cmRGB48Space' value='10497'/>
<enum name='cmRGB565LSpace' value='17921'/>
<enum name='cmRGB565Space' value='1537'/>
<enum name='cmRGBA32PmulSpace' value='2241'/>
<enum name='cmRGBA32Space' value='2177'/>
<enum name='cmRGBA64LPmulSpace' value='27329'/>
<enum name='cmRGBA64LSpace' value='27265'/>
<enum name='cmRGBA64PmulSpace' value='10945'/>
<enum name='cmRGBA64Space' value='10881'/>
<enum name='cmRGBAPmulSpace' value='193'/>
<enum name='cmRGBASpace' value='129'/>
<enum name='cmRGBData' value='1380401696'/>
<enum name='cmRGBSpace' value='1'/>
<enum name='cmReadAccess' value='3'/>
<enum name='cmReadSpool' value='3'/>
<enum name='cmRedColorantTag' value='1918392666'/>
<enum name='cmRedTRCTag' value='1918128707'/>
<enum name='cmReflective' value='0'/>
<enum name='cmReflectiveTransparentMask' value='1'/>
<enum name='cmRelativeColorimetric' value='1'/>
<enum name='cmReservedSpace1' value='9'/>
<enum name='cmReservedSpace2' value='11'/>
<enum name='cmReverseChannelPacking' value='32768'/>
<enum name='cmSRGB16ChannelEncoding' value='65536'/>
<enum name='cmSRGBData' value='1934772034'/>
<enum name='cmSaturation' value='2'/>
<enum name='cmScannerDeviceClass' value='1935896178'/>
<enum name='cmScreeningDescTag' value='1935897188'/>
<enum name='cmScreeningTag' value='1935897198'/>
<enum name='cmSigCrdInfoType' value='1668441193'/>
<enum name='cmSigCurveType' value='1668641398'/>
<enum name='cmSigDataType' value='1684108385'/>
<enum name='cmSigDateTimeType' value='1685350765'/>
<enum name='cmSigLut16Type' value='1835430962'/>
<enum name='cmSigLut8Type' value='1835430961'/>
<enum name='cmSigMakeAndModelType' value='1835888484'/>
<enum name='cmSigMeasurementType' value='1835360627'/>
<enum name='cmSigMultiFunctA2BType' value='1832993312'/>
<enum name='cmSigMultiFunctB2AType' value='1833058592'/>
<enum name='cmSigMultiLocalizedUniCodeType' value='1835824483'/>
<enum name='cmSigNamedColor2Type' value='1852009522'/>
<enum name='cmSigNamedColorType' value='1852010348'/>
<enum name='cmSigNativeDisplayInfoType' value='1852074350'/>
<enum name='cmSigPS2CRDVMSizeType' value='1886615149'/>
<enum name='cmSigParametricCurveType' value='1885434465'/>
<enum name='cmSigProfileDescriptionType' value='1684370275'/>
<enum name='cmSigProfileSequenceDescType' value='1886610801'/>
<enum name='cmSigS15Fixed16Type' value='1936077618'/>
<enum name='cmSigScreeningType' value='1935897198'/>
<enum name='cmSigSignatureType' value='1936287520'/>
<enum name='cmSigTextType' value='1952807028'/>
<enum name='cmSigU16Fixed16Type' value='1969632050'/>
<enum name='cmSigU1Fixed15Type' value='1969631542'/>
<enum name='cmSigUInt16Type' value='1969828150'/>
<enum name='cmSigUInt32Type' value='1969828658'/>
<enum name='cmSigUInt64Type' value='1969829428'/>
<enum name='cmSigUInt8Type' value='1969827896'/>
<enum name='cmSigUcrBgType' value='1650877472'/>
<enum name='cmSigUnicodeTextType' value='1970567284'/>
<enum name='cmSigVideoCardGammaType' value='1986226036'/>
<enum name='cmSigViewingConditionsType' value='1986618743'/>
<enum name='cmSigXYZType' value='1482250784'/>
<enum name='cmSiliconGraphics' value='1397180704'/>
<enum name='cmSolaris' value='1398099543'/>
<enum name='cmSpotFunctionCross' value='7'/>
<enum name='cmSpotFunctionDefault' value='1'/>
<enum name='cmSpotFunctionDiamond' value='3'/>
<enum name='cmSpotFunctionEllipse' value='4'/>
<enum name='cmSpotFunctionLine' value='5'/>
<enum name='cmSpotFunctionRound' value='2'/>
<enum name='cmSpotFunctionSquare' value='6'/>
<enum name='cmSpotFunctionUnknown' value='0'/>
<enum name='cmStdobs1931TwoDegrees' value='1'/>
<enum name='cmStdobs1964TenDegrees' value='2'/>
<enum name='cmStdobsUnknown' value='0'/>
<enum name='cmTaligent' value='1413959252'/>
<enum name='cmTechnologyAMDisplay' value='1095582752'/>
<enum name='cmTechnologyCRTDisplay' value='1129468960'/>
<enum name='cmTechnologyDigitalCamera' value='1684234605'/>
<enum name='cmTechnologyDyeSublimationPrinter' value='1685288290'/>
<enum name='cmTechnologyElectrophotographicPrinter' value='1701865583'/>
<enum name='cmTechnologyElectrostaticPrinter' value='1702065249'/>
<enum name='cmTechnologyFilmScanner' value='1718838126'/>
<enum name='cmTechnologyFilmWriter' value='1718645358'/>
<enum name='cmTechnologyFlexography' value='1718379896'/>
<enum name='cmTechnologyGravure' value='1735549302'/>
<enum name='cmTechnologyInkJetPrinter' value='1768580468'/>
<enum name='cmTechnologyOffsetLithography' value='1868981875'/>
<enum name='cmTechnologyPMDisplay' value='1347240992'/>
<enum name='cmTechnologyPhotoCD' value='1263551300'/>
<enum name='cmTechnologyPhotoImageSetter' value='1768777587'/>
<enum name='cmTechnologyPhotographicPaperPrinter' value='1919969391'/>
<enum name='cmTechnologyProjectionTelevision' value='1886024822'/>
<enum name='cmTechnologyReflectiveScanner' value='1920164718'/>
<enum name='cmTechnologySilkscreen' value='1936288875'/>
<enum name='cmTechnologyTag' value='1952801640'/>
<enum name='cmTechnologyThermalWaxPrinter' value='1953980792'/>
<enum name='cmTechnologyVideoCamera' value='1986618467'/>
<enum name='cmTechnologyVideoMonitor' value='1986618477'/>
<enum name='cmTextureRGBtoRGBX16' value='1'/>
<enum name='cmTextureRGBtoRGBX8' value='0'/>
<enum name='cmTextureRGBtoRGBXFloat32' value='2'/>
<enum name='cmUcrBgTag' value='1650877472'/>
<enum name='cmUseDefaultChromaticAdaptation' value='0'/>
<enum name='cmVideoCardGammaFormulaType' value='1'/>
<enum name='cmVideoCardGammaTableType' value='0'/>
<enum name='cmVideoCardGammaTag' value='1986226036'/>
<enum name='cmViewingConditionsDescTag' value='1987405156'/>
<enum name='cmViewingConditionsTag' value='1986618743'/>
<enum name='cmVonKriesChromaticAdaptation' value='2'/>
<enum name='cmWord565ColorPacking' value='1536'/>
<enum name='cmWord5ColorPacking' value='1280'/>
<enum name='cmWriteAccess' value='4'/>
<enum name='cmWriteSpool' value='4'/>
<enum name='cmXYZ24Space' value='8454'/>
<enum name='cmXYZ32Space' value='2566'/>
<enum name='cmXYZ48LSpace' value='26886'/>
<enum name='cmXYZ48Space' value='10502'/>
<enum name='cmXYZData' value='1482250784'/>
<enum name='cmXYZSpace' value='6'/>
<enum name='cmYCbCrData' value='1497588338'/>
<enum name='cmYXY32Space' value='2565'/>
<enum name='cmYXYSpace' value='5'/>
<enum name='cmYxyData' value='1501067552'/>
<enum name='k16BE555PixelFormat' value='16'/>
<enum name='k16BE565PixelFormat' value='1110783541'/>
<enum name='k16LE5551PixelFormat' value='892679473'/>
<enum name='k16LE555PixelFormat' value='1278555445'/>
<enum name='k16LE565PixelFormat' value='1278555701'/>
<enum name='k1IndexedGrayPixelFormat' value='33'/>
<enum name='k1MonochromePixelFormat' value='1'/>
<enum name='k24BGRPixelFormat' value='842285639'/>
<enum name='k24RGBPixelFormat' value='24'/>
<enum name='k2IndexedGrayPixelFormat' value='34'/>
<enum name='k2IndexedPixelFormat' value='2'/>
<enum name='k2vuyPixelFormat' value='846624121'/>
<enum name='k32ABGRPixelFormat' value='1094862674'/>
<enum name='k32ARGBPixelFormat' value='32'/>
<enum name='k32BGRAPixelFormat' value='1111970369'/>
<enum name='k32RGBAPixelFormat' value='1380401729'/>
<enum name='k4IndexedGrayPixelFormat' value='36'/>
<enum name='k4IndexedPixelFormat' value='4'/>
<enum name='k8IndexedGrayPixelFormat' value='40'/>
<enum name='k8IndexedPixelFormat' value='8'/>
<enum name='kATSFlatDataUstlCurrentVersion' value='2'/>
<enum name='kATSFlatDataUstlVersion0' value='0'/>
<enum name='kATSFlatDataUstlVersion1' value='1'/>
<enum name='kATSFlatDataUstlVersion2' value='2'/>
<enum name='kATSFlattenedFontSpecifierRawNameData' value='1851878756'/>
<enum name='kATSUAfterWithStreamShiftTag' value='268'/>
<enum name='kATSUAscentTag' value='284'/>
<enum name='kATSUBackgroundCallback' value='1'/>
<enum name='kATSUBackgroundColor' value='0'/>
<enum name='kATSUBaselineClassTag' value='274'/>
<enum name='kATSUBeforeWithStreamShiftTag' value='267'/>
<enum name='kATSUByCharacter' value='0'/>
<enum name='kATSUByCharacterCluster' value='3'/>
<enum name='kATSUByCluster' value='1'/>
<enum name='kATSUByTypographicCluster' value='1'/>
<enum name='kATSUByWord' value='2'/>
<enum name='kATSUCGContextTag' value='32767'/>
<enum name='kATSUCenterAlignment' value='536870912'/>
<enum name='kATSUCenterTab' value='1'/>
<enum name='kATSUClearAll' value='4294967295'/>
<enum name='kATSUColorTag' value='263'/>
<enum name='kATSUCrossStreamShiftTag' value='269'/>
<enum name='kATSUDataStreamUnicodeStyledText' value='1970500716'/>
<enum name='kATSUDecimalTab' value='3'/>
<enum name='kATSUDecompositionFactorTag' value='273'/>
<enum name='kATSUDefaultFontFallbacks' value='0'/>
<enum name='kATSUDescentTag' value='285'/>
<enum name='kATSUDirectDataAdvanceDeltaFixedArray' value='0'/>
<enum name='kATSUDirectDataBaselineDeltaFixedArray' value='1'/>
<enum name='kATSUDirectDataDeviceDeltaSInt16Array' value='2'/>
<enum name='kATSUDirectDataLayoutRecordATSLayoutRecordCurrent' value='100'/>
<enum name='kATSUDirectDataLayoutRecordATSLayoutRecordVersion1' value='100'/>
<enum name='kATSUDirectDataStyleIndexUInt16Array' value='3'/>
<enum name='kATSUDirectDataStyleSettingATSUStyleSettingRefArray' value='4'/>
<enum name='kATSUEndAlignment' value='1073741824'/>
<enum name='kATSUFlattenOptionNoOptionsMask' value='0'/>
<enum name='kATSUFontMatrixTag' value='289'/>
<enum name='kATSUFontTag' value='261'/>
<enum name='kATSUForceHangingTag' value='280'/>
<enum name='kATSUFromFollowingLayout' value='4294967293'/>
<enum name='kATSUFromPreviousLayout' value='4294967294'/>
<enum name='kATSUFromTextBeginning' value='4294967295'/>
<enum name='kATSUFullJustification' value='1073741824'/>
<enum name='kATSUGlyphSelectorTag' value='287'/>
<enum name='kATSUHangingInhibitFactorTag' value='271'/>
<enum name='kATSUImposeWidthTag' value='266'/>
<enum name='kATSUInvalidFontID' value='0'/>
<enum name='kATSUKerningInhibitFactorTag' value='272'/>
<enum name='kATSULangRegionTag' value='264'/>
<enum name='kATSULanguageTag' value='264'/>
<enum name='kATSULastResortOnlyFallback' value='1'/>
<enum name='kATSULayoutOperationOverrideTag' value='15'/>
<enum name='kATSULeadingTag' value='286'/>
<enum name='kATSULeftTab' value='0'/>
<enum name='kATSULeftToRightBaseDirection' value='0'/>
<enum name='kATSULineAscentTag' value='8'/>
<enum name='kATSULineBaselineValuesTag' value='6'/>
<enum name='kATSULineDecimalTabCharacterTag' value='14'/>
<enum name='kATSULineDescentTag' value='9'/>
<enum name='kATSULineDirectionTag' value='3'/>
<enum name='kATSULineFlushFactorTag' value='5'/>
<enum name='kATSULineFontFallbacksTag' value='13'/>
<enum name='kATSULineHighlightCGColorTag' value='17'/>
<enum name='kATSULineJustificationFactorTag' value='4'/>
<enum name='kATSULineLangRegionTag' value='10'/>
<enum name='kATSULineLanguageTag' value='10'/>
<enum name='kATSULineLayoutOptionsTag' value='7'/>
<enum name='kATSULineRotationTag' value='2'/>
<enum name='kATSULineTextLocatorTag' value='11'/>
<enum name='kATSULineTruncationTag' value='12'/>
<enum name='kATSULineWidthTag' value='1'/>
<enum name='kATSUMaxATSUITagValue' value='65535'/>
<enum name='kATSUMaxLineTag' value='18'/>
<enum name='kATSUMaxStyleTag' value='299'/>
<enum name='kATSUNoCaretAngleTag' value='277'/>
<enum name='kATSUNoJustification' value='0'/>
<enum name='kATSUNoLigatureSplitTag' value='276'/>
<enum name='kATSUNoOpticalAlignmentTag' value='279'/>
<enum name='kATSUNoSelector' value='65535'/>
<enum name='kATSUNoSpecialJustificationTag' value='281'/>
<enum name='kATSUNumberTabTypes' value='4'/>
<enum name='kATSUPriorityJustOverrideTag' value='275'/>
<enum name='kATSUQDBoldfaceTag' value='256'/>
<enum name='kATSUQDCondensedTag' value='259'/>
<enum name='kATSUQDExtendedTag' value='260'/>
<enum name='kATSUQDItalicTag' value='257'/>
<enum name='kATSUQDUnderlineTag' value='258'/>
<enum name='kATSURGBAlphaColorTag' value='288'/>
<enum name='kATSURightTab' value='2'/>
<enum name='kATSURightToLeftBaseDirection' value='1'/>
<enum name='kATSUSequentialFallbacksExclusive' value='3'/>
<enum name='kATSUSequentialFallbacksPreferred' value='2'/>
<enum name='kATSUSizeTag' value='262'/>
<enum name='kATSUStartAlignment' value='0'/>
<enum name='kATSUStronglyHorizontal' value='0'/>
<enum name='kATSUStronglyVertical' value='1'/>
<enum name='kATSUStyleContainedBy' value='3'/>
<enum name='kATSUStyleContains' value='1'/>
<enum name='kATSUStyleDoubleLineCount' value='2'/>
<enum name='kATSUStyleDropShadowBlurOptionTag' value='296'/>
<enum name='kATSUStyleDropShadowColorOptionTag' value='298'/>
<enum name='kATSUStyleDropShadowOffsetOptionTag' value='297'/>
<enum name='kATSUStyleDropShadowTag' value='295'/>
<enum name='kATSUStyleEquals' value='2'/>
<enum name='kATSUStyleRenderingOptionsTag' value='283'/>
<enum name='kATSUStyleSingleLineCount' value='1'/>
<enum name='kATSUStyleStrikeThroughColorOptionTag' value='294'/>
<enum name='kATSUStyleStrikeThroughCountOptionTag' value='293'/>
<enum name='kATSUStyleStrikeThroughTag' value='292'/>
<enum name='kATSUStyleTextLocatorTag' value='282'/>
<enum name='kATSUStyleUnderlineColorOptionTag' value='291'/>
<enum name='kATSUStyleUnderlineCountOptionTag' value='290'/>
<enum name='kATSUStyleUnequal' value='0'/>
<enum name='kATSUSuppressCrossKerningTag' value='278'/>
<enum name='kATSUToTextEnd' value='4294967295'/>
<enum name='kATSUTrackingTag' value='270'/>
<enum name='kATSUTruncFeatNoSquishing' value='8'/>
<enum name='kATSUTruncateEnd' value='2'/>
<enum name='kATSUTruncateMiddle' value='3'/>
<enum name='kATSUTruncateNone' value='0'/>
<enum name='kATSUTruncateSpecificationMask' value='7'/>
<enum name='kATSUTruncateStart' value='1'/>
<enum name='kATSUUnFlattenOptionNoOptionsMask' value='0'/>
<enum name='kATSUUseGrafPortPenLoc' value='4294967295'/>
<enum name='kATSUUseLineControlWidth' value='2147483647'/>
<enum name='kATSUVerticalCharacterTag' value='265'/>
<enum name='kCMFloatBitmapFlagsAlpha' value='1'/>
<enum name='kCMFloatBitmapFlagsAlphaPremul' value='2'/>
<enum name='kCMFloatBitmapFlagsNone' value='0'/>
<enum name='kCMFloatBitmapFlagsRangeClipped' value='4'/>
<enum name='kDefaultCMMSignature' value='1634758764'/>
<enum name='kDeviceToPCS' value='1'/>
<enum name='kGlyphCollectionAdobeCNS1' value='1'/>
<enum name='kGlyphCollectionAdobeGB1' value='2'/>
<enum name='kGlyphCollectionAdobeJapan1' value='3'/>
<enum name='kGlyphCollectionAdobeJapan2' value='4'/>
<enum name='kGlyphCollectionAdobeKorea1' value='5'/>
<enum name='kGlyphCollectionGID' value='0'/>
<enum name='kGlyphCollectionUnspecified' value='255'/>
<enum name='kHorizontalConstraint' value='2'/>
<enum name='kInvertHighlighting' value='0'/>
<enum name='kNoConstraint' value='0'/>
<enum name='kNoTransform' value='0'/>
<enum name='kPCSToDevice' value='2'/>
<enum name='kPCSToPCS' value='3'/>
<enum name='kRedrawHighlighting' value='1'/>
<enum name='kUYVY422PixelFormat' value='1431918169'/>
<enum name='kUseAtoB' value='1'/>
<enum name='kUseBtoA' value='2'/>
<enum name='kUseBtoB' value='3'/>
<enum name='kUseProfileIntent' value='-1'/>
<enum name='kVerticalConstraint' value='1'/>
<enum name='kYUV211PixelFormat' value='1496461617'/>
<enum name='kYUV411PixelFormat' value='1496592689'/>
<enum name='kYUVSPixelFormat' value='2037741171'/>
<enum name='kYUVUPixelFormat' value='2037741173'/>
<enum name='kYVU9PixelFormat' value='1498830137'/>
<enum name='kYVYU422PixelFormat' value='1498831189'/>
<enum name='srcCopy' value='0'/>
<function name='ATSUClearLayoutCache'>
<arg declared_type='ATSUTextLayout' name='iTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg declared_type='UniCharArrayOffset' name='iLineStart' type='L' type64='Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUCreateStyle'>
<arg declared_type='ATSUStyle*' name='oStyle' type='^^{OpaqueATSUStyle}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUCreateTextLayoutWithTextPtr'>
<arg declared_type='ConstUniCharArrayPtr' name='iText' type='^S'/>
<arg declared_type='UniCharArrayOffset' name='iTextOffset' type='L' type64='Q'/>
<arg declared_type='UniCharCount' name='iTextLength' type='L' type64='Q'/>
<arg declared_type='UniCharCount' name='iTextTotalLength' type='L' type64='Q'/>
<arg declared_type='ItemCount' name='iNumberOfRuns' type='L' type64='Q'/>
<arg const='true' declared_type='UniCharCount*' name='iRunLengths' type='^I' type64='^Q'/>
<arg declared_type='ATSUStyle*' name='iStyles' type='^^{OpaqueATSUStyle}'/>
<arg declared_type='ATSUTextLayout*' name='oTextLayout' type='^^{OpaqueATSUTextLayout}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUDirectGetLayoutDataArrayPtrFromLineRef'>
<arg declared_type='ATSULineRef' name='iLineRef' type='^{ATSGlyphVector=}'/>
<arg declared_type='ATSUDirectDataSelector' name='iDataSelector' type='L' type64='I'/>
<arg declared_type='Boolean' name='iCreate' type='B'/>
<arg declared_type='void**' name='oLayoutDataArrayPtr' type='^^v'/>
<arg declared_type='ItemCount*' name='oLayoutDataCount' type='^I' type64='^Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUDirectReleaseLayoutDataArrayPtr'>
<arg declared_type='ATSULineRef' name='iLineRef' type='^{ATSGlyphVector=}'/>
<arg declared_type='ATSUDirectDataSelector' name='iDataSelector' type='L' type64='I'/>
<arg declared_type='void**' name='iLayoutDataArrayPtr' type='^^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUDisposeStyle'>
<arg declared_type='ATSUStyle' name='iStyle' type='^{OpaqueATSUStyle=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUDisposeTextLayout'>
<arg declared_type='ATSUTextLayout' name='iTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUDrawText'>
<arg declared_type='ATSUTextLayout' name='iTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg declared_type='UniCharArrayOffset' name='iLineOffset' type='L' type64='Q'/>
<arg declared_type='UniCharCount' name='iLineLength' type='L' type64='Q'/>
<arg declared_type='ATSUTextMeasurement' name='iLocationX' type='l' type64='i'/>
<arg declared_type='ATSUTextMeasurement' name='iLocationY' type='l' type64='i'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUGetGlyphBounds'>
<arg declared_type='ATSUTextLayout' name='iTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg declared_type='ATSUTextMeasurement' name='iTextBasePointX' type='l' type64='i'/>
<arg declared_type='ATSUTextMeasurement' name='iTextBasePointY' type='l' type64='i'/>
<arg declared_type='UniCharArrayOffset' name='iBoundsCharStart' type='L' type64='Q'/>
<arg declared_type='UniCharCount' name='iBoundsCharLength' type='L' type64='Q'/>
<arg declared_type='UInt16' name='iTypeOfBounds' type='S'/>
<arg declared_type='ItemCount' name='iMaxNumberOfBounds' type='L' type64='Q'/>
<arg declared_type='ATSTrapezoid*' name='oGlyphBounds' type='^{ATSTrapezoid={FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}}'/>
<arg declared_type='ItemCount*' name='oActualNumberOfBounds' type='^I' type64='^Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUMatchFontsToText'>
<arg declared_type='ATSUTextLayout' name='iTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg declared_type='UniCharArrayOffset' name='iTextStart' type='L' type64='Q'/>
<arg declared_type='UniCharCount' name='iTextLength' type='L' type64='Q'/>
<arg declared_type='ATSUFontID*' name='oFontID' type='^I'/>
<arg declared_type='UniCharArrayOffset*' name='oChangedOffset' type='^I' type64='^Q'/>
<arg declared_type='UniCharCount*' name='oChangedLength' type='^I' type64='^Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUPositionToOffset'>
<arg declared_type='ATSUTextLayout' name='iTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg declared_type='ATSUTextMeasurement' name='iLocationX' type='l' type64='i'/>
<arg declared_type='ATSUTextMeasurement' name='iLocationY' type='l' type64='i'/>
<arg declared_type='UniCharArrayOffset*' name='ioPrimaryOffset' type='^I' type64='^Q'/>
<arg declared_type='Boolean*' name='oIsLeading' type='^B'/>
<arg declared_type='UniCharArrayOffset*' name='oSecondaryOffset' type='^I' type64='^Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUSetAttributes'>
<arg declared_type='ATSUStyle' name='iStyle' type='^{OpaqueATSUStyle=}'/>
<arg declared_type='ItemCount' name='iAttributeCount' type='L' type64='Q'/>
<arg const='true' declared_type='ATSUAttributeTag*' name='iTag' type='^I'/>
<arg const='true' declared_type='ByteCount*' name='iValueSize' type='^I' type64='^Q'/>
<arg const='true' declared_type='ATSUAttributeValuePtr*' name='iValue' type='^^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUSetFontFeatures'>
<arg declared_type='ATSUStyle' name='iStyle' type='^{OpaqueATSUStyle=}'/>
<arg declared_type='ItemCount' name='iFeatureCount' type='L' type64='Q'/>
<arg const='true' declared_type='ATSUFontFeatureType*' name='iType' type='^S'/>
<arg const='true' declared_type='ATSUFontFeatureSelector*' name='iSelector' type='^S'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUSetLayoutControls'>
<arg declared_type='ATSUTextLayout' name='iTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg declared_type='ItemCount' name='iAttributeCount' type='L' type64='Q'/>
<arg const='true' declared_type='ATSUAttributeTag*' name='iTag' type='^I'/>
<arg const='true' declared_type='ByteCount*' name='iValueSize' type='^I' type64='^Q'/>
<arg const='true' declared_type='ATSUAttributeValuePtr*' name='iValue' type='^^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUSetRunStyle'>
<arg declared_type='ATSUTextLayout' name='iTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg declared_type='ATSUStyle' name='iStyle' type='^{OpaqueATSUStyle=}'/>
<arg declared_type='UniCharArrayOffset' name='iRunStart' type='L' type64='Q'/>
<arg declared_type='UniCharCount' name='iRunLength' type='L' type64='Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUSetTextLayoutRefCon'>
<arg declared_type='ATSUTextLayout' name='iTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg declared_type='URefCon' name='iRefCon' type='L' type64='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUSetTransientFontMatching'>
<arg declared_type='ATSUTextLayout' name='iTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg declared_type='Boolean' name='iTransientFontMatching' type='B'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='ATSUTextMoved'>
<arg declared_type='ATSUTextLayout' name='iTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg declared_type='ConstUniCharArrayPtr' name='iNewLocation' type='^S'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='CMCloneProfileRef'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMCloseProfile'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMConvertRGBFloatBitmap'>
<arg const='true' declared_type='CMFloatBitmap*' name='src' type='^{CMFloatBitmap=L[16^f]IIiiIi}' type64='^{CMFloatBitmap=Q[16^f]QQqqIi}'/>
<arg declared_type='CMFloatBitmap*' name='dst' type='^{CMFloatBitmap=L[16^f]IIiiIi}' type64='^{CMFloatBitmap=Q[16^f]QQqqIi}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMConvertXYZFloatBitmap'>
<arg const='true' declared_type='CMFloatBitmap*' name='src' type='^{CMFloatBitmap=L[16^f]IIiiIi}' type64='^{CMFloatBitmap=Q[16^f]QQqqIi}'/>
<arg const='true' declared_type='float*' name='srcIlluminantXYZ' type='^f'/>
<arg declared_type='CMFloatBitmap*' name='dst' type='^{CMFloatBitmap=L[16^f]IIiiIi}' type64='^{CMFloatBitmap=Q[16^f]QQqqIi}'/>
<arg const='true' declared_type='float*' name='dstIlluminantXYZ' type='^f'/>
<arg declared_type='CMChromaticAdaptation' name='method' type='L' type64='I'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMCopyProfile'>
<arg declared_type='CMProfileRef*' name='targetProf' type='^^{OpaqueCMProfileRef}'/>
<arg const='true' declared_type='CMProfileLocation*' name='targetLocation' type='^{CMProfileLocation=s(CMProfLoc={CMFileLocation={FSSpec=si[64C]}}{CMHandleLocation=^*}{CMPtrLocation=*}{CMProcedureLocation=^?^v}{CMPathLocation=[256c]}{CMBufferLocation=^vI})}' type64='^{CMProfileLocation=s(CMProfLoc={CMHandleLocation=^*}{CMPathLocation=[1024c]}{CMBufferLocation=^vI})}'/>
<arg declared_type='CMProfileRef' name='srcProf' type='^{OpaqueCMProfileRef=}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMCopyProfileDescriptionString'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='CFStringRef*' name='str' type='^^{__CFString}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMCopyProfileLocalizedString'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='OSType' name='tag' type='L' type64='I'/>
<arg declared_type='CFStringRef' name='reqLocale' type='^{__CFString=}'/>
<arg declared_type='CFStringRef*' name='locale' type='^^{__CFString}'/>
<arg declared_type='CFStringRef*' name='str' type='^^{__CFString}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMCopyProfileLocalizedStringDictionary'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='OSType' name='tag' type='L' type64='I'/>
<arg declared_type='CFDictionaryRef*' name='theDict' type='^^{__CFDictionary}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMCountProfileElements'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='UInt32*' name='elementCount' type='^I'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMFloatBitmapMakeChunky'>
<arg declared_type='float*' name='buffer' type='^f'/>
<arg declared_type='size_t' name='height' type='L' type64='Q'/>
<arg declared_type='size_t' name='width' type='L' type64='Q'/>
<arg declared_type='OSType' name='space' type='L' type64='I'/>
<retval declared_type='CMFloatBitmap' type='{CMFloatBitmap=L[16^f]IIiiIi}' type64='{CMFloatBitmap=Q[16^f]QQqqIi}'/>
</function>
<function name='CMGetColorSyncVersion'>
<arg declared_type='UInt32*' name='version' type='^I'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetDefaultDevice'>
<arg declared_type='CMDeviceClass' name='deviceClass' type='L' type64='I'/>
<arg declared_type='CMDeviceID*' name='deviceID' type='^I'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetDefaultProfileBySpace'>
<arg declared_type='OSType' name='dataColorSpace' type='L' type64='I'/>
<arg declared_type='CMProfileRef*' name='prof' type='^^{OpaqueCMProfileRef}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetDefaultProfileByUse'>
<arg declared_type='OSType' name='use' type='L' type64='I'/>
<arg declared_type='CMProfileRef*' name='prof' type='^^{OpaqueCMProfileRef}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetDeviceDefaultProfileID'>
<arg declared_type='CMDeviceClass' name='deviceClass' type='L' type64='I'/>
<arg declared_type='CMDeviceID' name='deviceID' type='L' type64='I'/>
<arg declared_type='CMDeviceProfileID*' name='defaultProfID' type='^I'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetDeviceFactoryProfiles'>
<arg declared_type='CMDeviceClass' name='deviceClass' type='L' type64='I'/>
<arg declared_type='CMDeviceID' name='deviceID' type='L' type64='I'/>
<arg declared_type='CMDeviceProfileID*' name='defaultProfID' type='^I'/>
<arg declared_type='UInt32*' name='arraySize' type='^I'/>
<arg declared_type='CMDeviceProfileArray*' name='deviceProfiles' type='^{CMDeviceProfileArray=I[1{CMDeviceProfileInfo=II{CMProfileLocation=s(CMProfLoc={CMFileLocation={FSSpec=si[64C]}}{CMHandleLocation=^*}{CMPtrLocation=*}{CMProcedureLocation=^?^v}{CMPathLocation=[256c]}{CMBufferLocation=^vI})}^{__CFDictionary}I}]}' type64='^{CMDeviceProfileArray=I[1{CMDeviceProfileInfo=II{CMProfileLocation=s(CMProfLoc={CMHandleLocation=^*}{CMPathLocation=[1024c]}{CMBufferLocation=^vI})}^{__CFDictionary}I}]}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetDeviceInfo'>
<arg declared_type='CMDeviceClass' name='deviceClass' type='L' type64='I'/>
<arg declared_type='CMDeviceID' name='deviceID' type='L' type64='I'/>
<arg declared_type='CMDeviceInfo*' name='deviceInfo' type='^{CMDeviceInfo=III{CMDeviceScope=^{__CFString}^{__CFString}}II^^{__CFDictionary}II}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetDeviceProfile'>
<arg declared_type='CMDeviceClass' name='deviceClass' type='L' type64='I'/>
<arg declared_type='CMDeviceID' name='deviceID' type='L' type64='I'/>
<arg declared_type='CMDeviceProfileID' name='profileID' type='L' type64='I'/>
<arg declared_type='CMProfileLocation*' name='profileLoc' type='^{CMProfileLocation=s(CMProfLoc={CMFileLocation={FSSpec=si[64C]}}{CMHandleLocation=^*}{CMPtrLocation=*}{CMProcedureLocation=^?^v}{CMPathLocation=[256c]}{CMBufferLocation=^vI})}' type64='^{CMProfileLocation=s(CMProfLoc={CMHandleLocation=^*}{CMPathLocation=[1024c]}{CMBufferLocation=^vI})}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetDeviceState'>
<arg declared_type='CMDeviceClass' name='deviceClass' type='L' type64='I'/>
<arg declared_type='CMDeviceID' name='deviceID' type='L' type64='I'/>
<arg declared_type='CMDeviceState*' name='deviceState' type='^I'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetGammaByAVID'>
<arg declared_type='CMDisplayIDType' name='theID' type='L' type64='I'/>
<arg declared_type='CMVideoCardGamma*' name='gamma' type='^{CMVideoCardGamma=I(?={CMVideoCardGammaTable=SSS[1c]}{CMVideoCardGammaFormula=iiiiiiiii})}'/>
<arg declared_type='UInt32*' name='size' type='^I'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetIndNamedColorValue'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='UInt32' name='index' type='L' type64='I'/>
<arg declared_type='CMColor*' name='deviceColor' type='^(CMColor={CMRGBColor=SSS}{CMHSVColor=SSS}{CMHLSColor=SSS}{CMXYZColor=SSS}{CMLabColor=SSS}{CMLuvColor=SSS}{CMYxyColor=SSS}{CMCMYKColor=SSSS}{CMCMYColor=SSS}{CMGrayColor=S}{CMMultichannel5Color=[5C]}{CMMultichannel6Color=[6C]}{CMMultichannel7Color=[7C]}{CMMultichannel8Color=[8C]}{CMNamedColor=I})'/>
<arg declared_type='CMColor*' name='PCSColor' type='^(CMColor={CMRGBColor=SSS}{CMHSVColor=SSS}{CMHLSColor=SSS}{CMXYZColor=SSS}{CMLabColor=SSS}{CMLuvColor=SSS}{CMYxyColor=SSS}{CMCMYKColor=SSSS}{CMCMYColor=SSS}{CMGrayColor=S}{CMMultichannel5Color=[5C]}{CMMultichannel6Color=[6C]}{CMMultichannel7Color=[7C]}{CMMultichannel8Color=[8C]}{CMNamedColor=I})'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetIndProfileElement'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='UInt32' name='index' type='L' type64='I'/>
<arg declared_type='UInt32*' name='elementSize' type='^I'/>
<arg declared_type='void*' name='elementData' type='^v'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetIndProfileElementInfo'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='UInt32' name='index' type='L' type64='I'/>
<arg declared_type='OSType*' name='tag' type='^I'/>
<arg declared_type='UInt32*' name='elementSize' type='^I'/>
<arg declared_type='Boolean*' name='refs' type='^B'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetNamedColorIndex'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='StringPtr' name='name' type='*'/>
<arg declared_type='UInt32*' name='index' type='^I'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetNamedColorInfo'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='UInt32*' name='deviceChannels' type='^I'/>
<arg declared_type='OSType*' name='deviceColorSpace' type='^I'/>
<arg declared_type='OSType*' name='PCSColorSpace' type='^I'/>
<arg declared_type='UInt32*' name='count' type='^I'/>
<arg declared_type='StringPtr' name='prefix' type='*'/>
<arg declared_type='StringPtr' name='suffix' type='*'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetNamedColorName'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='UInt32' name='index' type='L' type64='I'/>
<arg declared_type='StringPtr' name='name' type='*'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetNamedColorValue'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='StringPtr' name='name' type='*'/>
<arg declared_type='CMColor*' name='deviceColor' type='^(CMColor={CMRGBColor=SSS}{CMHSVColor=SSS}{CMHLSColor=SSS}{CMXYZColor=SSS}{CMLabColor=SSS}{CMLuvColor=SSS}{CMYxyColor=SSS}{CMCMYKColor=SSSS}{CMCMYColor=SSS}{CMGrayColor=S}{CMMultichannel5Color=[5C]}{CMMultichannel6Color=[6C]}{CMMultichannel7Color=[7C]}{CMMultichannel8Color=[8C]}{CMNamedColor=I})'/>
<arg declared_type='CMColor*' name='PCSColor' type='^(CMColor={CMRGBColor=SSS}{CMHSVColor=SSS}{CMHLSColor=SSS}{CMXYZColor=SSS}{CMLabColor=SSS}{CMLuvColor=SSS}{CMYxyColor=SSS}{CMCMYKColor=SSSS}{CMCMYColor=SSS}{CMGrayColor=S}{CMMultichannel5Color=[5C]}{CMMultichannel6Color=[6C]}{CMMultichannel7Color=[7C]}{CMMultichannel8Color=[8C]}{CMNamedColor=I})'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetPS2ColorRendering'>
<arg declared_type='CMProfileRef' name='srcProf' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='CMProfileRef' name='dstProf' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='UInt32' name='flags' type='L' type64='I'/>
<arg declared_type='CMFlattenUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='long*' type='^l' type64='^q'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<arg declared_type='Boolean*' name='preferredCMMnotfound' type='^B'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetPS2ColorRenderingIntent'>
<arg declared_type='CMProfileRef' name='srcProf' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='UInt32' name='flags' type='L' type64='I'/>
<arg declared_type='CMFlattenUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='long*' type='^l' type64='^q'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<arg declared_type='Boolean*' name='preferredCMMnotfound' type='^B'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetPS2ColorRenderingVMSize'>
<arg declared_type='CMProfileRef' name='srcProf' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='CMProfileRef' name='dstProf' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='UInt32*' name='vmSize' type='^I'/>
<arg declared_type='Boolean*' name='preferredCMMnotfound' type='^B'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetPS2ColorSpace'>
<arg declared_type='CMProfileRef' name='srcProf' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='UInt32' name='flags' type='L' type64='I'/>
<arg declared_type='CMFlattenUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='long*' type='^l' type64='^q'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<arg declared_type='Boolean*' name='preferredCMMnotfound' type='^B'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetPartialProfileElement'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='OSType' name='tag' type='L' type64='I'/>
<arg declared_type='UInt32' name='offset' type='L' type64='I'/>
<arg declared_type='UInt32*' name='byteCount' type='^I'/>
<arg declared_type='void*' name='elementData' type='^v'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetProfileByAVID'>
<arg declared_type='CMDisplayIDType' name='theID' type='L' type64='I'/>
<arg declared_type='CMProfileRef*' name='prof' type='^^{OpaqueCMProfileRef}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetProfileDescriptions'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='char*' name='aName' type='*'/>
<arg declared_type='UInt32*' name='aCount' type='^I'/>
<arg declared_type='unsigned char*' name='mName' type='*'/>
<arg declared_type='ScriptCode*' name='mCode' type='^s'/>
<arg declared_type='UniChar*' name='uName' type='^S'/>
<arg declared_type='UniCharCount*' name='uCount' type='^I' type64='^Q'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetProfileElement'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='OSType' name='tag' type='L' type64='I'/>
<arg declared_type='UInt32*' name='elementSize' type='^I'/>
<arg declared_type='void*' name='elementData' type='^v'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetProfileHeader'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='CMAppleProfileHeader*' name='header' type='^(CMAppleProfileHeader={CMHeader=IIIIIII[2L]IIII{CMXYZColor=SSS}{CMXYZColor=SSS}}{CM2Header=IIIIII{CMDateTime=SSSSSS}IIIII[2L]I{CMFixedXYZColor=iii}I[44c]}{CM4Header=IIIIII{CMDateTime=SSSSSS}IIIII[2L]I{CMFixedXYZColor=iii}I[16C][28c]})' type64='^(CMAppleProfileHeader={CM2Header=IIIIII{CMDateTime=SSSSSS}IIIII[2I]I{CMFixedXYZColor=iii}I[44c]}{CM4Header=IIIIII{CMDateTime=SSSSSS}IIIII[2I]I{CMFixedXYZColor=iii}I[16C][28c]})'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetProfileMD5'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='unsigned char*' name='digest' type='*'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetProfileRefCount'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='long*' name='count' type='^l' type64='^q'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMGetSystemProfile'>
<arg declared_type='CMProfileRef*' name='prof' type='^^{OpaqueCMProfileRef}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMIterateCMMInfo'>
<arg declared_type='CMMIterateUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='CMMInfo*' type='^{CMMInfo=IIII[32C][256C]I[32S]I[256S]}' type64='^{CMMInfo=QIII[32C][256C]Q[32S]Q[256S]}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='UInt32*' name='count' type='^I'/>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMIterateColorDevices'>
<arg declared_type='CMIterateDeviceInfoProcPtr' function_pointer='true' name='proc' type='^?'>
<arg const='true' declared_type='CMDeviceInfo*' type='^{CMDeviceInfo=III{CMDeviceScope=^{__CFString}^{__CFString}}II^^{__CFDictionary}II}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='UInt32*' name='seed' type='^I'/>
<arg declared_type='UInt32*' name='count' type='^I'/>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMIterateColorSyncFolder'>
<arg declared_type='CMProfileIterateUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='CMProfileIterateData*' type='^{CMProfileIterateData=I{CM2Header=IIIIII{CMDateTime=SSSSSS}IIIII[2L]I{CMFixedXYZColor=iii}I[44c]}s[256C]{CMProfileLocation=s(CMProfLoc={CMFileLocation={FSSpec=si[64C]}}{CMHandleLocation=^*}{CMPtrLocation=*}{CMProcedureLocation=^?^v}{CMPathLocation=[256c]}{CMBufferLocation=^vI})}I^S*^{CMMakeAndModel}^[16C]}' type64='^{CMProfileIterateData=I{CM2Header=IIIIII{CMDateTime=SSSSSS}IIIII[2I]I{CMFixedXYZColor=iii}I[44c]}s[256C]{CMProfileLocation=s(CMProfLoc={CMHandleLocation=^*}{CMPathLocation=[1024c]}{CMBufferLocation=^vI})}Q^S*^{CMMakeAndModel}^[16C]}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='UInt32*' name='seed' type='^I'/>
<arg declared_type='UInt32*' name='count' type='^I'/>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMIterateDeviceProfiles'>
<arg declared_type='CMIterateDeviceProfileProcPtr' function_pointer='true' name='proc' type='^?'>
<arg const='true' declared_type='CMDeviceInfo*' type='^{CMDeviceInfo=III{CMDeviceScope=^{__CFString}^{__CFString}}II^^{__CFDictionary}II}'/>
<arg const='true' declared_type='NCMDeviceProfileInfo*' type='^{NCMDeviceProfileInfo=II{CMProfileLocation=s(CMProfLoc={CMFileLocation={FSSpec=si[64C]}}{CMHandleLocation=^*}{CMPtrLocation=*}{CMProcedureLocation=^?^v}{CMPathLocation=[256c]}{CMBufferLocation=^vI})}^{__CFDictionary}{CMDeviceScope=^{__CFString}^{__CFString}}I}' type64='^{NCMDeviceProfileInfo=II{CMProfileLocation=s(CMProfLoc={CMHandleLocation=^*}{CMPathLocation=[1024c]}{CMBufferLocation=^vI})}^{__CFDictionary}{CMDeviceScope=^{__CFString}^{__CFString}}I}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<arg declared_type='UInt32*' name='seed' type='^I'/>
<arg declared_type='UInt32*' name='count' type='^I'/>
<arg declared_type='UInt32' name='flags' type='L' type64='I'/>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMLaunchControlPanel'>
<arg declared_type='UInt32' name='flags' type='L' type64='I'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMM_CheckBitmap'>
<arg declared_type='CMWorldRef' name='cw' type='^{OpaqueCMWorldRef=}'/>
<arg const='true' declared_type='CMBitmap*' name='bitmap' type='^{CMBitmap=*IIIIIII}' type64='^{CMBitmap=*QQQQIII}'/>
<arg declared_type='CMBitmapCallBackUPP' function_pointer='true' name='progressProc' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<arg declared_type='CMBitmap*' name='resultBitmap' type='^{CMBitmap=*IIIIIII}' type64='^{CMBitmap=*QQQQIII}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMM_CheckColors'>
<arg declared_type='CMWorldRef' name='cw' type='^{OpaqueCMWorldRef=}'/>
<arg declared_type='CMColor*' name='colors' type='^(CMColor={CMRGBColor=SSS}{CMHSVColor=SSS}{CMHLSColor=SSS}{CMXYZColor=SSS}{CMLabColor=SSS}{CMLuvColor=SSS}{CMYxyColor=SSS}{CMCMYKColor=SSSS}{CMCMYColor=SSS}{CMGrayColor=S}{CMMultichannel5Color=[5C]}{CMMultichannel6Color=[6C]}{CMMultichannel7Color=[7C]}{CMMultichannel8Color=[8C]}{CMNamedColor=I})'/>
<arg declared_type='UInt32' name='count' type='L' type64='I'/>
<arg declared_type='UInt8*' name='result' type='*'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMM_ConcatColorWorld'>
<arg declared_type='CMWorldRef' name='cw' type='^{OpaqueCMWorldRef=}'/>
<arg declared_type='NCMConcatProfileSet*' name='profileSet' type='^{NCMConcatProfileSet=IIII[1{NCMConcatProfileSpec=II^{OpaqueCMProfileRef}}]}'/>
<arg declared_type='CMConcatCallBackUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMM_CreateLinkProfile'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='NCMConcatProfileSet*' name='profileSet' type='^{NCMConcatProfileSet=IIII[1{NCMConcatProfileSpec=II^{OpaqueCMProfileRef}}]}'/>
<arg declared_type='CMConcatCallBackUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMM_GetProperty'>
<arg declared_type='CMWorldRef' name='cw' type='^{OpaqueCMWorldRef=}'/>
<arg declared_type='CFStringRef' name='requestedKey' type='^{__CFString=}'/>
<retval declared_type='CFTypeRef' type='@'/>
</function>
<function name='CMM_MatchBitmap'>
<arg declared_type='CMWorldRef' name='cw' type='^{OpaqueCMWorldRef=}'/>
<arg declared_type='CMBitmap*' name='bitmap' type='^{CMBitmap=*IIIIIII}' type64='^{CMBitmap=*QQQQIII}'/>
<arg declared_type='CMBitmapCallBackUPP' function_pointer='true' name='progressProc' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<arg declared_type='CMBitmap*' name='matchedBitmap' type='^{CMBitmap=*IIIIIII}' type64='^{CMBitmap=*QQQQIII}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMM_MatchColors'>
<arg declared_type='CMWorldRef' name='cw' type='^{OpaqueCMWorldRef=}'/>
<arg declared_type='CMColor*' name='colors' type='^(CMColor={CMRGBColor=SSS}{CMHSVColor=SSS}{CMHLSColor=SSS}{CMXYZColor=SSS}{CMLabColor=SSS}{CMLuvColor=SSS}{CMYxyColor=SSS}{CMCMYKColor=SSSS}{CMCMYColor=SSS}{CMGrayColor=S}{CMMultichannel5Color=[5C]}{CMMultichannel6Color=[6C]}{CMMultichannel7Color=[7C]}{CMMultichannel8Color=[8C]}{CMNamedColor=I})'/>
<arg declared_type='UInt32' name='count' type='L' type64='I'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMM_MatchFloatBitmap'>
<arg declared_type='CMWorldRef' name='cw' type='^{OpaqueCMWorldRef=}'/>
<arg const='true' declared_type='CMFloatBitmap*' name='bitmap' type='^{CMFloatBitmap=L[16^f]IIiiIi}' type64='^{CMFloatBitmap=Q[16^f]QQqqIi}'/>
<arg declared_type='CMFloatBitmap*' name='resultBitmap' type='^{CMFloatBitmap=L[16^f]IIiiIi}' type64='^{CMFloatBitmap=Q[16^f]QQqqIi}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMM_ValidateProfile'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='Boolean*' name='valid' type='^B'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMMakeProfile'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='CFDictionaryRef' name='spec' type='^{__CFDictionary=}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMMatchFloatBitmap'>
<arg declared_type='CMWorldRef' name='cw' type='^{OpaqueCMWorldRef=}'/>
<arg const='true' declared_type='CMFloatBitmap*' name='src' type='^{CMFloatBitmap=L[16^f]IIiiIi}' type64='^{CMFloatBitmap=Q[16^f]QQqqIi}'/>
<arg declared_type='CMFloatBitmap*' name='dst' type='^{CMFloatBitmap=L[16^f]IIiiIi}' type64='^{CMFloatBitmap=Q[16^f]QQqqIi}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMNewProfile'>
<arg declared_type='CMProfileRef*' name='prof' type='^^{OpaqueCMProfileRef}'/>
<arg const='true' declared_type='CMProfileLocation*' name='theProfile' type='^{CMProfileLocation=s(CMProfLoc={CMFileLocation={FSSpec=si[64C]}}{CMHandleLocation=^*}{CMPtrLocation=*}{CMProcedureLocation=^?^v}{CMPathLocation=[256c]}{CMBufferLocation=^vI})}' type64='^{CMProfileLocation=s(CMProfLoc={CMHandleLocation=^*}{CMPathLocation=[1024c]}{CMBufferLocation=^vI})}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMOpenProfile'>
<arg declared_type='CMProfileRef*' name='prof' type='^^{OpaqueCMProfileRef}'/>
<arg const='true' declared_type='CMProfileLocation*' name='theProfile' type='^{CMProfileLocation=s(CMProfLoc={CMFileLocation={FSSpec=si[64C]}}{CMHandleLocation=^*}{CMPtrLocation=*}{CMProcedureLocation=^?^v}{CMPathLocation=[256c]}{CMBufferLocation=^vI})}' type64='^{CMProfileLocation=s(CMProfLoc={CMHandleLocation=^*}{CMPathLocation=[1024c]}{CMBufferLocation=^vI})}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMProfileCopyICCData'>
<arg declared_type='CFAllocatorRef' name='allocator' type='^{__CFAllocator=}'/>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<retval already_retained='true' declared_type='CFDataRef' type='^{__CFData=}'/>
</function>
<function name='CMProfileElementExists'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='OSType' name='tag' type='L' type64='I'/>
<arg declared_type='Boolean*' name='found' type='^B'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMProfileModified'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='Boolean*' name='modified' type='^B'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMRegisterColorDevice'>
<arg declared_type='CMDeviceClass' name='deviceClass' type='L' type64='I'/>
<arg declared_type='CMDeviceID' name='deviceID' type='L' type64='I'/>
<arg declared_type='CFDictionaryRef' name='deviceName' type='^{__CFDictionary=}'/>
<arg const='true' declared_type='CMDeviceScope*' name='deviceScope' type='^{CMDeviceScope=^{__CFString}^{__CFString}}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMRemoveProfileElement'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='OSType' name='tag' type='L' type64='I'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMSetDefaultDevice'>
<arg declared_type='CMDeviceClass' name='deviceClass' type='L' type64='I'/>
<arg declared_type='CMDeviceID' name='deviceID' type='L' type64='I'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMSetDeviceDefaultProfileID'>
<arg declared_type='CMDeviceClass' name='deviceClass' type='L' type64='I'/>
<arg declared_type='CMDeviceID' name='deviceID' type='L' type64='I'/>
<arg declared_type='CMDeviceProfileID' name='defaultProfID' type='L' type64='I'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMSetDeviceFactoryProfiles'>
<arg declared_type='CMDeviceClass' name='deviceClass' type='L' type64='I'/>
<arg declared_type='CMDeviceID' name='deviceID' type='L' type64='I'/>
<arg declared_type='CMDeviceProfileID' name='defaultProfID' type='L' type64='I'/>
<arg const='true' declared_type='CMDeviceProfileArray*' name='deviceProfiles' type='^{CMDeviceProfileArray=I[1{CMDeviceProfileInfo=II{CMProfileLocation=s(CMProfLoc={CMFileLocation={FSSpec=si[64C]}}{CMHandleLocation=^*}{CMPtrLocation=*}{CMProcedureLocation=^?^v}{CMPathLocation=[256c]}{CMBufferLocation=^vI})}^{__CFDictionary}I}]}' type64='^{CMDeviceProfileArray=I[1{CMDeviceProfileInfo=II{CMProfileLocation=s(CMProfLoc={CMHandleLocation=^*}{CMPathLocation=[1024c]}{CMBufferLocation=^vI})}^{__CFDictionary}I}]}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMSetDeviceProfile'>
<arg declared_type='CMDeviceClass' name='deviceClass' type='L' type64='I'/>
<arg declared_type='CMDeviceID' name='deviceID' type='L' type64='I'/>
<arg const='true' declared_type='CMDeviceProfileScope*' name='profileScope' type='^{CMDeviceScope=^{__CFString}^{__CFString}}'/>
<arg declared_type='CMDeviceProfileID' name='profileID' type='L' type64='I'/>
<arg const='true' declared_type='CMProfileLocation*' name='profileLoc' type='^{CMProfileLocation=s(CMProfLoc={CMFileLocation={FSSpec=si[64C]}}{CMHandleLocation=^*}{CMPtrLocation=*}{CMProcedureLocation=^?^v}{CMPathLocation=[256c]}{CMBufferLocation=^vI})}' type64='^{CMProfileLocation=s(CMProfLoc={CMHandleLocation=^*}{CMPathLocation=[1024c]}{CMBufferLocation=^vI})}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMSetDeviceState'>
<arg declared_type='CMDeviceClass' name='deviceClass' type='L' type64='I'/>
<arg declared_type='CMDeviceID' name='deviceID' type='L' type64='I'/>
<arg declared_type='CMDeviceState' name='deviceState' type='L' type64='I'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMSetGammaByAVID'>
<arg declared_type='CMDisplayIDType' name='theID' type='L' type64='I'/>
<arg declared_type='CMVideoCardGamma*' name='gamma' type='^{CMVideoCardGamma=I(?={CMVideoCardGammaTable=SSS[1c]}{CMVideoCardGammaFormula=iiiiiiiii})}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMSetPartialProfileElement'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='OSType' name='tag' type='L' type64='I'/>
<arg declared_type='UInt32' name='offset' type='L' type64='I'/>
<arg declared_type='UInt32' name='byteCount' type='L' type64='I'/>
<arg const='true' declared_type='void*' name='elementData' type='^v'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMSetProfileByAVID'>
<arg declared_type='CMDisplayIDType' name='theID' type='L' type64='I'/>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMSetProfileDescriptions'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg const='true' declared_type='char*' name='aName' type='*'/>
<arg declared_type='UInt32' name='aCount' type='L' type64='I'/>
<arg declared_type='ConstStr255Param' name='mName' type='*'/>
<arg declared_type='ScriptCode' name='mCode' type='s'/>
<arg const='true' declared_type='UniChar*' name='uName' type='^S'/>
<arg declared_type='UniCharCount' name='uCount' type='L' type64='Q'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMSetProfileElement'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='OSType' name='tag' type='L' type64='I'/>
<arg declared_type='UInt32' name='elementSize' type='L' type64='I'/>
<arg const='true' declared_type='void*' name='elementData' type='^v'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMSetProfileElementReference'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='OSType' name='elementTag' type='L' type64='I'/>
<arg declared_type='OSType' name='referenceTag' type='L' type64='I'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMSetProfileElementSize'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='OSType' name='tag' type='L' type64='I'/>
<arg declared_type='UInt32' name='elementSize' type='L' type64='I'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMSetProfileHeader'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg const='true' declared_type='CMAppleProfileHeader*' name='header' type='^(CMAppleProfileHeader={CMHeader=IIIIIII[2L]IIII{CMXYZColor=SSS}{CMXYZColor=SSS}}{CM2Header=IIIIII{CMDateTime=SSSSSS}IIIII[2L]I{CMFixedXYZColor=iii}I[44c]}{CM4Header=IIIIII{CMDateTime=SSSSSS}IIIII[2L]I{CMFixedXYZColor=iii}I[16C][28c]})' type64='^(CMAppleProfileHeader={CM2Header=IIIIII{CMDateTime=SSSSSS}IIIII[2I]I{CMFixedXYZColor=iii}I[44c]}{CM4Header=IIIIII{CMDateTime=SSSSSS}IIIII[2I]I{CMFixedXYZColor=iii}I[16C][28c]})'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMSetProfileLocalizedStringDictionary'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='OSType' name='tag' type='L' type64='I'/>
<arg declared_type='CFDictionaryRef' name='theDict' type='^{__CFDictionary=}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMUnregisterColorDevice'>
<arg declared_type='CMDeviceClass' name='deviceClass' type='L' type64='I'/>
<arg declared_type='CMDeviceID' name='deviceID' type='L' type64='I'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMUpdateProfile'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CMValidateProfile'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='Boolean*' name='valid' type='^B'/>
<arg declared_type='Boolean*' name='preferredCMMnotfound' type='^B'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CWCheckBitmap'>
<arg declared_type='CMWorldRef' name='cw' type='^{OpaqueCMWorldRef=}'/>
<arg const='true' declared_type='CMBitmap*' name='bitmap' type='^{CMBitmap=*IIIIIII}' type64='^{CMBitmap=*QQQQIII}'/>
<arg declared_type='CMBitmapCallBackUPP' function_pointer='true' name='progressProc' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<arg declared_type='CMBitmap*' name='resultBitmap' type='^{CMBitmap=*IIIIIII}' type64='^{CMBitmap=*QQQQIII}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CWCheckColors'>
<arg declared_type='CMWorldRef' name='cw' type='^{OpaqueCMWorldRef=}'/>
<arg declared_type='CMColor*' name='myColors' type='^(CMColor={CMRGBColor=SSS}{CMHSVColor=SSS}{CMHLSColor=SSS}{CMXYZColor=SSS}{CMLabColor=SSS}{CMLuvColor=SSS}{CMYxyColor=SSS}{CMCMYKColor=SSSS}{CMCMYColor=SSS}{CMGrayColor=S}{CMMultichannel5Color=[5C]}{CMMultichannel6Color=[6C]}{CMMultichannel7Color=[7C]}{CMMultichannel8Color=[8C]}{CMNamedColor=I})'/>
<arg declared_type='size_t' name='count' type='L' type64='Q'/>
<arg declared_type='UInt8*' name='result' type='*'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CWColorWorldGetProperty'>
<arg declared_type='CMWorldRef' name='cw' type='^{OpaqueCMWorldRef=}'/>
<arg declared_type='CFStringRef' name='key' type='^{__CFString=}'/>
<retval const='true' declared_type='void*' type='^v'/>
</function>
<function name='CWColorWorldSetProperty'>
<arg declared_type='CMWorldRef' name='cw' type='^{OpaqueCMWorldRef=}'/>
<arg declared_type='CFStringRef' name='key' type='^{__CFString=}'/>
<arg declared_type='CFTypeRef' name='value' type='@'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CWDisposeColorWorld'>
<arg declared_type='CMWorldRef' name='cw' type='^{OpaqueCMWorldRef=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='CWFillLookupTexture'>
<arg declared_type='CMWorldRef' name='cw' type='^{OpaqueCMWorldRef=}'/>
<arg declared_type='UInt32' name='gridPoints' type='L' type64='I'/>
<arg declared_type='UInt32' name='format' type='L' type64='I'/>
<arg declared_type='UInt32' name='dataSize' type='L' type64='I'/>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CWGetCMMSignature'>
<arg declared_type='CMWorldRef' name='cw' type='^{OpaqueCMWorldRef=}'/>
<retval declared_type='UInt32' type='L' type64='I'/>
</function>
<function name='CWMatchBitmap'>
<arg declared_type='CMWorldRef' name='cw' type='^{OpaqueCMWorldRef=}'/>
<arg declared_type='CMBitmap*' name='bitmap' type='^{CMBitmap=*IIIIIII}' type64='^{CMBitmap=*QQQQIII}'/>
<arg declared_type='CMBitmapCallBackUPP' function_pointer='true' name='progressProc' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<arg declared_type='CMBitmap*' name='matchedBitmap' type='^{CMBitmap=*IIIIIII}' type64='^{CMBitmap=*QQQQIII}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='CWMatchColors'>
<arg declared_type='CMWorldRef' name='cw' type='^{OpaqueCMWorldRef=}'/>
<arg declared_type='CMColor*' name='myColors' type='^(CMColor={CMRGBColor=SSS}{CMHSVColor=SSS}{CMHLSColor=SSS}{CMXYZColor=SSS}{CMLabColor=SSS}{CMLuvColor=SSS}{CMYxyColor=SSS}{CMCMYKColor=SSSS}{CMCMYColor=SSS}{CMGrayColor=S}{CMMultichannel5Color=[5C]}{CMMultichannel6Color=[6C]}{CMMultichannel7Color=[7C]}{CMMultichannel8Color=[8C]}{CMNamedColor=I})'/>
<arg declared_type='size_t' name='count' type='L' type64='Q'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='DisposeATSCubicClosePathUPP'>
<arg declared_type='ATSCubicClosePathUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeATSCubicCurveToUPP'>
<arg declared_type='ATSCubicCurveToUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeATSCubicLineToUPP'>
<arg declared_type='ATSCubicLineToUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeATSCubicMoveToUPP'>
<arg declared_type='ATSCubicMoveToUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeATSQuadraticClosePathUPP'>
<arg declared_type='ATSQuadraticClosePathUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeATSQuadraticCurveUPP'>
<arg declared_type='ATSQuadraticCurveUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeATSQuadraticLineUPP'>
<arg declared_type='ATSQuadraticLineUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeATSQuadraticNewPathUPP'>
<arg declared_type='ATSQuadraticNewPathUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='DisposeCMBitmapCallBackUPP'>
<arg declared_type='CMBitmapCallBackUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='DisposeCMConcatCallBackUPP'>
<arg declared_type='CMConcatCallBackUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='DisposeCMFlattenUPP'>
<arg declared_type='CMFlattenUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='long*' type='^l' type64='^q'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='DisposeCMMIterateUPP'>
<arg declared_type='CMMIterateUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='CMMInfo*' type='^{CMMInfo=IIII[32C][256C]I[32S]I[256S]}' type64='^{CMMInfo=QIII[32C][256C]Q[32S]Q[256S]}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function inline='true' name='DisposeCMProfileIterateUPP'>
<arg declared_type='CMProfileIterateUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='CMProfileIterateData*' type='^{CMProfileIterateData=I{CM2Header=IIIIII{CMDateTime=SSSSSS}IIIII[2L]I{CMFixedXYZColor=iii}I[44c]}s[256C]{CMProfileLocation=s(CMProfLoc={CMFileLocation={FSSpec=si[64C]}}{CMHandleLocation=^*}{CMPtrLocation=*}{CMProcedureLocation=^?^v}{CMPathLocation=[256c]}{CMBufferLocation=^vI})}I^S*^{CMMakeAndModel}^[16C]}' type64='^{CMProfileIterateData=I{CM2Header=IIIIII{CMDateTime=SSSSSS}IIIII[2I]I{CMFixedXYZColor=iii}I[44c]}s[256C]{CMProfileLocation=s(CMProfLoc={CMHandleLocation=^*}{CMPathLocation=[1024c]}{CMBufferLocation=^vI})}Q^S*^{CMMakeAndModel}^[16C]}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeColorComplementUPP'>
<arg declared_type='ColorComplementUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeColorSearchUPP'>
<arg declared_type='ColorSearchUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<arg declared_type='long*' type='^l' type64='^q'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeDragGrayRgnUPP'>
<arg declared_type='DragGrayRgnUPP' function_pointer='true' name='userUPP' type='^?'>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDArcUPP'>
<arg declared_type='QDArcUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDBitsUPP'>
<arg declared_type='QDBitsUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='BitMap*' type='^{BitMap=*s{Rect=ssss}}'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDCommentUPP'>
<arg declared_type='QDCommentUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Handle' type='^*'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDGetPicUPP'>
<arg declared_type='QDGetPicUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDJShieldCursorUPP'>
<arg declared_type='QDJShieldCursorUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDLineUPP'>
<arg declared_type='QDLineUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDOpcodeUPP'>
<arg declared_type='QDOpcodeUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='SInt16' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDOvalUPP'>
<arg declared_type='QDOvalUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDPolyUPP'>
<arg declared_type='QDPolyUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='PolyHandle' type='^^{MacPolygon}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDPrinterStatusUPP'>
<arg declared_type='QDPrinterStatusUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='PrinterStatusOpcode' type='l' type64='i'/>
<arg declared_type='CGrafPtr' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDPutPicUPP'>
<arg declared_type='QDPutPicUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDRRectUPP'>
<arg declared_type='QDRRectUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDRectUPP'>
<arg declared_type='QDRectUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDRgnUPP'>
<arg declared_type='QDRgnUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDStdGlyphsUPP'>
<arg declared_type='QDStdGlyphsUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ByteCount' type='L' type64='Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDTextUPP'>
<arg declared_type='QDTextUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg const='true' declared_type='void*' type='^v'/>
<arg declared_type='Point' type='{Point=ss}'/>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeQDTxMeasUPP'>
<arg declared_type='QDTxMeasUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg const='true' declared_type='void*' type='^v'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='FontInfo*' type='^{FontInfo=ssss}'/>
<retval declared_type='short' type='s'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeRedrawBackgroundUPP'>
<arg declared_type='RedrawBackgroundUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg declared_type='UniCharArrayOffset' type='L' type64='Q'/>
<arg declared_type='UniCharCount' type='L' type64='Q'/>
<arg declared_type='ATSTrapezoid*' type='^{ATSTrapezoid={FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}}'/>
<arg declared_type='ItemCount' type='L' type64='Q'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeRegionToRectsUPP'>
<arg declared_type='RegionToRectsUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeATSCubicClosePathUPP'>
<arg declared_type='void*' name='callBackDataPtr' type='^v'/>
<arg declared_type='ATSCubicClosePathUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeATSCubicCurveToUPP'>
<arg const='true' declared_type='Float32Point*' name='pt1' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' name='pt2' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' name='pt3' type='^{Float32Point=ff}'/>
<arg declared_type='void*' name='callBackDataPtr' type='^v'/>
<arg declared_type='ATSCubicCurveToUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeATSCubicLineToUPP'>
<arg const='true' declared_type='Float32Point*' name='pt' type='^{Float32Point=ff}'/>
<arg declared_type='void*' name='callBackDataPtr' type='^v'/>
<arg declared_type='ATSCubicLineToUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeATSCubicMoveToUPP'>
<arg const='true' declared_type='Float32Point*' name='pt' type='^{Float32Point=ff}'/>
<arg declared_type='void*' name='callBackDataPtr' type='^v'/>
<arg declared_type='ATSCubicMoveToUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeATSQuadraticClosePathUPP'>
<arg declared_type='void*' name='callBackDataPtr' type='^v'/>
<arg declared_type='ATSQuadraticClosePathUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeATSQuadraticCurveUPP'>
<arg const='true' declared_type='Float32Point*' name='pt1' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' name='controlPt' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' name='pt2' type='^{Float32Point=ff}'/>
<arg declared_type='void*' name='callBackDataPtr' type='^v'/>
<arg declared_type='ATSQuadraticCurveUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeATSQuadraticLineUPP'>
<arg const='true' declared_type='Float32Point*' name='pt1' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' name='pt2' type='^{Float32Point=ff}'/>
<arg declared_type='void*' name='callBackDataPtr' type='^v'/>
<arg declared_type='ATSQuadraticLineUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeATSQuadraticNewPathUPP'>
<arg declared_type='void*' name='callBackDataPtr' type='^v'/>
<arg declared_type='ATSQuadraticNewPathUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function inline='true' name='InvokeCMBitmapCallBackUPP'>
<arg declared_type='SInt32' name='progress' type='l' type64='i'/>
<arg declared_type='void*' name='refCon' type='^v'/>
<arg declared_type='CMBitmapCallBackUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='Boolean' type='B'/>
</function>
<function inline='true' name='InvokeCMConcatCallBackUPP'>
<arg declared_type='SInt32' name='progress' type='l' type64='i'/>
<arg declared_type='void*' name='refCon' type='^v'/>
<arg declared_type='CMConcatCallBackUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='Boolean' type='B'/>
</function>
<function inline='true' name='InvokeCMFlattenUPP'>
<arg declared_type='SInt32' name='command' type='l' type64='i'/>
<arg declared_type='long*' name='size' type='^l' type64='^q'/>
<arg declared_type='void*' name='data' type='^v'/>
<arg declared_type='void*' name='refCon' type='^v'/>
<arg declared_type='CMFlattenUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='long*' type='^l' type64='^q'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function inline='true' name='InvokeCMMIterateUPP'>
<arg declared_type='CMMInfo*' name='iterateData' type='^{CMMInfo=IIII[32C][256C]I[32S]I[256S]}' type64='^{CMMInfo=QIII[32C][256C]Q[32S]Q[256S]}'/>
<arg declared_type='void*' name='refCon' type='^v'/>
<arg declared_type='CMMIterateUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='CMMInfo*' type='^{CMMInfo=IIII[32C][256C]I[32S]I[256S]}' type64='^{CMMInfo=QIII[32C][256C]Q[32S]Q[256S]}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function inline='true' name='InvokeCMProfileIterateUPP'>
<arg declared_type='CMProfileIterateData*' name='iterateData' type='^{CMProfileIterateData=I{CM2Header=IIIIII{CMDateTime=SSSSSS}IIIII[2L]I{CMFixedXYZColor=iii}I[44c]}s[256C]{CMProfileLocation=s(CMProfLoc={CMFileLocation={FSSpec=si[64C]}}{CMHandleLocation=^*}{CMPtrLocation=*}{CMProcedureLocation=^?^v}{CMPathLocation=[256c]}{CMBufferLocation=^vI})}I^S*^{CMMakeAndModel}^[16C]}' type64='^{CMProfileIterateData=I{CM2Header=IIIIII{CMDateTime=SSSSSS}IIIII[2I]I{CMFixedXYZColor=iii}I[44c]}s[256C]{CMProfileLocation=s(CMProfLoc={CMHandleLocation=^*}{CMPathLocation=[1024c]}{CMBufferLocation=^vI})}Q^S*^{CMMakeAndModel}^[16C]}'/>
<arg declared_type='void*' name='refCon' type='^v'/>
<arg declared_type='CMProfileIterateUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='CMProfileIterateData*' type='^{CMProfileIterateData=I{CM2Header=IIIIII{CMDateTime=SSSSSS}IIIII[2L]I{CMFixedXYZColor=iii}I[44c]}s[256C]{CMProfileLocation=s(CMProfLoc={CMFileLocation={FSSpec=si[64C]}}{CMHandleLocation=^*}{CMPtrLocation=*}{CMProcedureLocation=^?^v}{CMPathLocation=[256c]}{CMBufferLocation=^vI})}I^S*^{CMMakeAndModel}^[16C]}' type64='^{CMProfileIterateData=I{CM2Header=IIIIII{CMDateTime=SSSSSS}IIIII[2I]I{CMFixedXYZColor=iii}I[44c]}s[256C]{CMProfileLocation=s(CMProfLoc={CMHandleLocation=^*}{CMPathLocation=[1024c]}{CMBufferLocation=^vI})}Q^S*^{CMMakeAndModel}^[16C]}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeColorComplementUPP'>
<arg declared_type='RGBColor*' name='rgb' type='^{RGBColor=SSS}'/>
<arg declared_type='ColorComplementUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='InvokeColorSearchUPP'>
<arg declared_type='RGBColor*' name='rgb' type='^{RGBColor=SSS}'/>
<arg declared_type='long*' name='position' type='^l' type64='^q'/>
<arg declared_type='ColorSearchUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<arg declared_type='long*' type='^l' type64='^q'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='InvokeDragGrayRgnUPP'>
<arg declared_type='DragGrayRgnUPP' function_pointer='true' name='userUPP' type='^?'>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDArcUPP'>
<arg declared_type='GrafVerb' name='verb' type='c'/>
<arg const='true' declared_type='Rect*' name='r' type='^{Rect=ssss}'/>
<arg declared_type='short' name='startAngle' type='s'/>
<arg declared_type='short' name='arcAngle' type='s'/>
<arg declared_type='QDArcUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDBitsUPP'>
<arg const='true' declared_type='BitMap*' name='srcBits' type='^{BitMap=*s{Rect=ssss}}'/>
<arg const='true' declared_type='Rect*' name='srcRect' type='^{Rect=ssss}'/>
<arg const='true' declared_type='Rect*' name='dstRect' type='^{Rect=ssss}'/>
<arg declared_type='short' name='mode' type='s'/>
<arg declared_type='RgnHandle' name='maskRgn' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='QDBitsUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='BitMap*' type='^{BitMap=*s{Rect=ssss}}'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDCommentUPP'>
<arg declared_type='short' name='kind' type='s'/>
<arg declared_type='short' name='dataSize' type='s'/>
<arg declared_type='Handle' name='dataHandle' type='^*'/>
<arg declared_type='QDCommentUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Handle' type='^*'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDGetPicUPP'>
<arg declared_type='void*' name='dataPtr' type='^v'/>
<arg declared_type='short' name='byteCount' type='s'/>
<arg declared_type='QDGetPicUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDJShieldCursorUPP'>
<arg declared_type='short' name='left' type='s'/>
<arg declared_type='short' name='top' type='s'/>
<arg declared_type='short' name='right' type='s'/>
<arg declared_type='short' name='bottom' type='s'/>
<arg declared_type='QDJShieldCursorUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDLineUPP'>
<arg declared_type='Point' name='newPt' type='{Point=ss}'/>
<arg declared_type='QDLineUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDOpcodeUPP'>
<arg const='true' declared_type='Rect*' name='fromRect' type='^{Rect=ssss}'/>
<arg const='true' declared_type='Rect*' name='toRect' type='^{Rect=ssss}'/>
<arg declared_type='UInt16' name='opcode' type='S'/>
<arg declared_type='SInt16' name='version' type='s'/>
<arg declared_type='QDOpcodeUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='SInt16' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDOvalUPP'>
<arg declared_type='GrafVerb' name='verb' type='c'/>
<arg const='true' declared_type='Rect*' name='r' type='^{Rect=ssss}'/>
<arg declared_type='QDOvalUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDPolyUPP'>
<arg declared_type='GrafVerb' name='verb' type='c'/>
<arg declared_type='PolyHandle' name='poly' type='^^{MacPolygon}'/>
<arg declared_type='QDPolyUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='PolyHandle' type='^^{MacPolygon}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDPrinterStatusUPP'>
<arg declared_type='PrinterStatusOpcode' name='opcode' type='l' type64='i'/>
<arg declared_type='CGrafPtr' name='currentPort' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='void*' name='printerStatus' type='^v'/>
<arg declared_type='QDPrinterStatusUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='PrinterStatusOpcode' type='l' type64='i'/>
<arg declared_type='CGrafPtr' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeQDPutPicUPP'>
<arg const='true' declared_type='void*' name='dataPtr' type='^v'/>
<arg declared_type='short' name='byteCount' type='s'/>
<arg declared_type='QDPutPicUPP' function_pointer='true' name='userUPP' type='^?'>
<arg const='true' declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDRRectUPP'>
<arg declared_type='GrafVerb' name='verb' type='c'/>
<arg const='true' declared_type='Rect*' name='r' type='^{Rect=ssss}'/>
<arg declared_type='short' name='ovalWidth' type='s'/>
<arg declared_type='short' name='ovalHeight' type='s'/>
<arg declared_type='QDRRectUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDRectUPP'>
<arg declared_type='GrafVerb' name='verb' type='c'/>
<arg const='true' declared_type='Rect*' name='r' type='^{Rect=ssss}'/>
<arg declared_type='QDRectUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDRgnUPP'>
<arg declared_type='GrafVerb' name='verb' type='c'/>
<arg declared_type='RgnHandle' name='rgn' type='^{OpaqueRgnHandle=}'/>
<arg declared_type='QDRgnUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDStdGlyphsUPP'>
<arg declared_type='void*' name='dataStream' type='^v'/>
<arg declared_type='ByteCount' name='size' type='L' type64='Q'/>
<arg declared_type='QDStdGlyphsUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ByteCount' type='L' type64='Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='InvokeQDTextUPP'>
<arg declared_type='short' name='byteCount' type='s'/>
<arg const='true' declared_type='void*' name='textBuf' type='^v'/>
<arg declared_type='Point' name='numer' type='{Point=ss}'/>
<arg declared_type='Point' name='denom' type='{Point=ss}'/>
<arg declared_type='QDTextUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg const='true' declared_type='void*' type='^v'/>
<arg declared_type='Point' type='{Point=ss}'/>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeQDTxMeasUPP'>
<arg declared_type='short' name='byteCount' type='s'/>
<arg const='true' declared_type='void*' name='textAddr' type='^v'/>
<arg declared_type='Point*' name='numer' type='^{Point=ss}'/>
<arg declared_type='Point*' name='denom' type='^{Point=ss}'/>
<arg declared_type='FontInfo*' name='info' type='^{FontInfo=ssss}'/>
<arg declared_type='QDTxMeasUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='short' type='s'/>
<arg const='true' declared_type='void*' type='^v'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='FontInfo*' type='^{FontInfo=ssss}'/>
<retval declared_type='short' type='s'/>
</arg>
<retval declared_type='short' type='s'/>
</function>
<function name='InvokeRedrawBackgroundUPP'>
<arg declared_type='ATSUTextLayout' name='iLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg declared_type='UniCharArrayOffset' name='iTextOffset' type='L' type64='Q'/>
<arg declared_type='UniCharCount' name='iTextLength' type='L' type64='Q'/>
<arg declared_type='ATSTrapezoid*' name='iUnhighlightArea' type='^{ATSTrapezoid={FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}}'/>
<arg declared_type='ItemCount' name='iTrapezoidCount' type='L' type64='Q'/>
<arg declared_type='RedrawBackgroundUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg declared_type='UniCharArrayOffset' type='L' type64='Q'/>
<arg declared_type='UniCharCount' type='L' type64='Q'/>
<arg declared_type='ATSTrapezoid*' type='^{ATSTrapezoid={FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}}'/>
<arg declared_type='ItemCount' type='L' type64='Q'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='Boolean' type='B'/>
</function>
<function name='InvokeRegionToRectsUPP'>
<arg declared_type='UInt16' name='message' type='S'/>
<arg declared_type='RgnHandle' name='rgn' type='^{OpaqueRgnHandle=}'/>
<arg const='true' declared_type='Rect*' name='rect' type='^{Rect=ssss}'/>
<arg declared_type='void*' name='refCon' type='^v'/>
<arg declared_type='RegionToRectsUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='OSStatus' type='l' type64='i'/>
</function>
<function name='NCMGetProfileLocation'>
<arg declared_type='CMProfileRef' name='prof' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='CMProfileLocation*' name='theProfile' type='^{CMProfileLocation=s(CMProfLoc={CMFileLocation={FSSpec=si[64C]}}{CMHandleLocation=^*}{CMPtrLocation=*}{CMProcedureLocation=^?^v}{CMPathLocation=[256c]}{CMBufferLocation=^vI})}' type64='^{CMProfileLocation=s(CMProfLoc={CMHandleLocation=^*}{CMPathLocation=[1024c]}{CMBufferLocation=^vI})}'/>
<arg declared_type='UInt32*' name='locationSize' type='^I'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='NCWConcatColorWorld'>
<arg declared_type='CMWorldRef*' name='cw' type='^^{OpaqueCMWorldRef}'/>
<arg declared_type='NCMConcatProfileSet*' name='profileSet' type='^{NCMConcatProfileSet=IIII[1{NCMConcatProfileSpec=II^{OpaqueCMProfileRef}}]}'/>
<arg declared_type='CMConcatCallBackUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='NCWNewColorWorld'>
<arg declared_type='CMWorldRef*' name='cw' type='^^{OpaqueCMWorldRef}'/>
<arg declared_type='CMProfileRef' name='src' type='^{OpaqueCMProfileRef=}'/>
<arg declared_type='CMProfileRef' name='dst' type='^{OpaqueCMProfileRef=}'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='NCWNewLinkProfile'>
<arg declared_type='CMProfileRef*' name='prof' type='^^{OpaqueCMProfileRef}'/>
<arg const='true' declared_type='CMProfileLocation*' name='targetLocation' type='^{CMProfileLocation=s(CMProfLoc={CMFileLocation={FSSpec=si[64C]}}{CMHandleLocation=^*}{CMPtrLocation=*}{CMProcedureLocation=^?^v}{CMPathLocation=[256c]}{CMBufferLocation=^vI})}' type64='^{CMProfileLocation=s(CMProfLoc={CMHandleLocation=^*}{CMPathLocation=[1024c]}{CMBufferLocation=^vI})}'/>
<arg declared_type='NCMConcatProfileSet*' name='profileSet' type='^{NCMConcatProfileSet=IIII[1{NCMConcatProfileSpec=II^{OpaqueCMProfileRef}}]}'/>
<arg declared_type='CMConcatCallBackUPP' function_pointer='true' name='proc' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<arg declared_type='void*' name='refCon' type='^v'/>
<retval declared_type='CMError' type='l' type64='i'/>
</function>
<function name='NewATSCubicClosePathUPP'>
<arg declared_type='ATSCubicClosePathProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='ATSCubicClosePathUPP' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewATSCubicCurveToUPP'>
<arg declared_type='ATSCubicCurveToProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='ATSCubicCurveToUPP' function_pointer='true' type='^?'>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewATSCubicLineToUPP'>
<arg declared_type='ATSCubicLineToProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='ATSCubicLineToUPP' function_pointer='true' type='^?'>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewATSCubicMoveToUPP'>
<arg declared_type='ATSCubicMoveToProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='ATSCubicMoveToUPP' function_pointer='true' type='^?'>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewATSQuadraticClosePathUPP'>
<arg declared_type='ATSQuadraticClosePathProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='ATSQuadraticClosePathUPP' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewATSQuadraticCurveUPP'>
<arg declared_type='ATSQuadraticCurveProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='ATSQuadraticCurveUPP' function_pointer='true' type='^?'>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewATSQuadraticLineUPP'>
<arg declared_type='ATSQuadraticLineProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='ATSQuadraticLineUPP' function_pointer='true' type='^?'>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg const='true' declared_type='Float32Point*' type='^{Float32Point=ff}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewATSQuadraticNewPathUPP'>
<arg declared_type='ATSQuadraticNewPathProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='ATSQuadraticNewPathUPP' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function inline='true' name='NewCMBitmapCallBackUPP'>
<arg declared_type='CMBitmapCallBackProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='CMBitmapCallBackUPP' function_pointer='true' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</retval>
</function>
<function inline='true' name='NewCMConcatCallBackUPP'>
<arg declared_type='CMConcatCallBackProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='CMConcatCallBackUPP' function_pointer='true' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Boolean' type='B'/>
</retval>
</function>
<function inline='true' name='NewCMFlattenUPP'>
<arg declared_type='CMFlattenProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='long*' type='^l' type64='^q'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='CMFlattenUPP' function_pointer='true' type='^?'>
<arg declared_type='SInt32' type='l' type64='i'/>
<arg declared_type='long*' type='^l' type64='^q'/>
<arg declared_type='void*' type='^v'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function inline='true' name='NewCMMIterateUPP'>
<arg declared_type='CMMIterateProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='CMMInfo*' type='^{CMMInfo=IIII[32C][256C]I[32S]I[256S]}' type64='^{CMMInfo=QIII[32C][256C]Q[32S]Q[256S]}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='CMMIterateUPP' function_pointer='true' type='^?'>
<arg declared_type='CMMInfo*' type='^{CMMInfo=IIII[32C][256C]I[32S]I[256S]}' type64='^{CMMInfo=QIII[32C][256C]Q[32S]Q[256S]}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function inline='true' name='NewCMProfileIterateUPP'>
<arg declared_type='CMProfileIterateProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='CMProfileIterateData*' type='^{CMProfileIterateData=I{CM2Header=IIIIII{CMDateTime=SSSSSS}IIIII[2L]I{CMFixedXYZColor=iii}I[44c]}s[256C]{CMProfileLocation=s(CMProfLoc={CMFileLocation={FSSpec=si[64C]}}{CMHandleLocation=^*}{CMPtrLocation=*}{CMProcedureLocation=^?^v}{CMPathLocation=[256c]}{CMBufferLocation=^vI})}I^S*^{CMMakeAndModel}^[16C]}' type64='^{CMProfileIterateData=I{CM2Header=IIIIII{CMDateTime=SSSSSS}IIIII[2I]I{CMFixedXYZColor=iii}I[44c]}s[256C]{CMProfileLocation=s(CMProfLoc={CMHandleLocation=^*}{CMPathLocation=[1024c]}{CMBufferLocation=^vI})}Q^S*^{CMMakeAndModel}^[16C]}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</arg>
<retval declared_type='CMProfileIterateUPP' function_pointer='true' type='^?'>
<arg declared_type='CMProfileIterateData*' type='^{CMProfileIterateData=I{CM2Header=IIIIII{CMDateTime=SSSSSS}IIIII[2L]I{CMFixedXYZColor=iii}I[44c]}s[256C]{CMProfileLocation=s(CMProfLoc={CMFileLocation={FSSpec=si[64C]}}{CMHandleLocation=^*}{CMPtrLocation=*}{CMProcedureLocation=^?^v}{CMPathLocation=[256c]}{CMBufferLocation=^vI})}I^S*^{CMMakeAndModel}^[16C]}' type64='^{CMProfileIterateData=I{CM2Header=IIIIII{CMDateTime=SSSSSS}IIIII[2I]I{CMFixedXYZColor=iii}I[44c]}s[256C]{CMProfileLocation=s(CMProfLoc={CMHandleLocation=^*}{CMPathLocation=[1024c]}{CMBufferLocation=^vI})}Q^S*^{CMMakeAndModel}^[16C]}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</retval>
</function>
<function name='NewColorComplementUPP'>
<arg declared_type='ColorComplementProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='ColorComplementUPP' function_pointer='true' type='^?'>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<retval declared_type='Boolean' type='B'/>
</retval>
</function>
<function name='NewColorSearchUPP'>
<arg declared_type='ColorSearchProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<arg declared_type='long*' type='^l' type64='^q'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='ColorSearchUPP' function_pointer='true' type='^?'>
<arg declared_type='RGBColor*' type='^{RGBColor=SSS}'/>
<arg declared_type='long*' type='^l' type64='^q'/>
<retval declared_type='Boolean' type='B'/>
</retval>
</function>
<function name='NewDragGrayRgnUPP'>
<arg declared_type='DragGrayRgnProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='DragGrayRgnUPP' function_pointer='true' type='^?'>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDArcUPP'>
<arg declared_type='QDArcProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QDArcUPP' function_pointer='true' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDBitsUPP'>
<arg declared_type='QDBitsProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg const='true' declared_type='BitMap*' type='^{BitMap=*s{Rect=ssss}}'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QDBitsUPP' function_pointer='true' type='^?'>
<arg const='true' declared_type='BitMap*' type='^{BitMap=*s{Rect=ssss}}'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDCommentUPP'>
<arg declared_type='QDCommentProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Handle' type='^*'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QDCommentUPP' function_pointer='true' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='Handle' type='^*'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDGetPicUPP'>
<arg declared_type='QDGetPicProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QDGetPicUPP' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDJShieldCursorUPP'>
<arg declared_type='QDJShieldCursorProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QDJShieldCursorUPP' function_pointer='true' type='^?'>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDLineUPP'>
<arg declared_type='QDLineProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QDLineUPP' function_pointer='true' type='^?'>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDOpcodeUPP'>
<arg declared_type='QDOpcodeProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='SInt16' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QDOpcodeUPP' function_pointer='true' type='^?'>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='SInt16' type='s'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDOvalUPP'>
<arg declared_type='QDOvalProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QDOvalUPP' function_pointer='true' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDPolyUPP'>
<arg declared_type='QDPolyProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='PolyHandle' type='^^{MacPolygon}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QDPolyUPP' function_pointer='true' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='PolyHandle' type='^^{MacPolygon}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDPrinterStatusUPP'>
<arg declared_type='QDPrinterStatusProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='PrinterStatusOpcode' type='l' type64='i'/>
<arg declared_type='CGrafPtr' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='QDPrinterStatusUPP' function_pointer='true' type='^?'>
<arg declared_type='PrinterStatusOpcode' type='l' type64='i'/>
<arg declared_type='CGrafPtr' type='^{OpaqueGrafPtr=}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewQDPutPicUPP'>
<arg declared_type='QDPutPicProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg const='true' declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QDPutPicUPP' function_pointer='true' type='^?'>
<arg const='true' declared_type='void*' type='^v'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDRRectUPP'>
<arg declared_type='QDRRectProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QDRRectUPP' function_pointer='true' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='short' type='s'/>
<arg declared_type='short' type='s'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDRectUPP'>
<arg declared_type='QDRectProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QDRectUPP' function_pointer='true' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDRgnUPP'>
<arg declared_type='QDRgnProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QDRgnUPP' function_pointer='true' type='^?'>
<arg declared_type='GrafVerb' type='c'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDStdGlyphsUPP'>
<arg declared_type='QDStdGlyphsProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ByteCount' type='L' type64='Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='QDStdGlyphsUPP' function_pointer='true' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='ByteCount' type='L' type64='Q'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<function name='NewQDTextUPP'>
<arg declared_type='QDTextProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='short' type='s'/>
<arg const='true' declared_type='void*' type='^v'/>
<arg declared_type='Point' type='{Point=ss}'/>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='QDTextUPP' function_pointer='true' type='^?'>
<arg declared_type='short' type='s'/>
<arg const='true' declared_type='void*' type='^v'/>
<arg declared_type='Point' type='{Point=ss}'/>
<arg declared_type='Point' type='{Point=ss}'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewQDTxMeasUPP'>
<arg declared_type='QDTxMeasProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='short' type='s'/>
<arg const='true' declared_type='void*' type='^v'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='FontInfo*' type='^{FontInfo=ssss}'/>
<retval declared_type='short' type='s'/>
</arg>
<retval declared_type='QDTxMeasUPP' function_pointer='true' type='^?'>
<arg declared_type='short' type='s'/>
<arg const='true' declared_type='void*' type='^v'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='Point*' type='^{Point=ss}'/>
<arg declared_type='FontInfo*' type='^{FontInfo=ssss}'/>
<retval declared_type='short' type='s'/>
</retval>
</function>
<function name='NewRedrawBackgroundUPP'>
<arg declared_type='RedrawBackgroundProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg declared_type='UniCharArrayOffset' type='L' type64='Q'/>
<arg declared_type='UniCharCount' type='L' type64='Q'/>
<arg declared_type='ATSTrapezoid*' type='^{ATSTrapezoid={FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}}'/>
<arg declared_type='ItemCount' type='L' type64='Q'/>
<retval declared_type='Boolean' type='B'/>
</arg>
<retval declared_type='RedrawBackgroundUPP' function_pointer='true' type='^?'>
<arg declared_type='ATSUTextLayout' type='^{OpaqueATSUTextLayout=}'/>
<arg declared_type='UniCharArrayOffset' type='L' type64='Q'/>
<arg declared_type='UniCharCount' type='L' type64='Q'/>
<arg declared_type='ATSTrapezoid*' type='^{ATSTrapezoid={FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}{FixedPoint=ii}}'/>
<arg declared_type='ItemCount' type='L' type64='Q'/>
<retval declared_type='Boolean' type='B'/>
</retval>
</function>
<function name='NewRegionToRectsUPP'>
<arg declared_type='RegionToRectsProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</arg>
<retval declared_type='RegionToRectsUPP' function_pointer='true' type='^?'>
<arg declared_type='UInt16' type='S'/>
<arg declared_type='RgnHandle' type='^{OpaqueRgnHandle=}'/>
<arg const='true' declared_type='Rect*' type='^{Rect=ssss}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='OSStatus' type='l' type64='i'/>
</retval>
</function>
<depends_on path='/System/Library/Frameworks/CoreAudio.framework'/>
<depends_on path='/System/Library/Frameworks/AudioToolbox.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework/Versions/A/Frameworks/HIServices.framework'/>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/CoreGraphics.framework'/>
<struct name='DelimiterInfo' type='{DelimiterInfo=&quot;startDelimiter&quot;[2C]&quot;endDelimiter&quot;[2C]}'>
<field declared_type='Byte*' name='startDelimiter' type='[2C]'/>
<field declared_type='Byte*' name='endDelimiter' type='[2C]'/>
</struct>
<struct name='PhonemeDescriptor' type='{PhonemeDescriptor=&quot;phonemeCount&quot;s&quot;thePhonemes&quot;[1{PhonemeInfo=&quot;opcode&quot;s&quot;phStr&quot;[16C]&quot;exampleStr&quot;[32C]&quot;hiliteStart&quot;s&quot;hiliteEnd&quot;s}]}'>
<field declared_type='SInt16' name='phonemeCount' type='s'/>
<field declared_type='PhonemeInfo*' name='thePhonemes' type='[1{PhonemeInfo=&quot;opcode&quot;s&quot;phStr&quot;[16C]&quot;exampleStr&quot;[32C]&quot;hiliteStart&quot;s&quot;hiliteEnd&quot;s}]'/>
</struct>
<struct name='PhonemeInfo' type='{PhonemeInfo=&quot;opcode&quot;s&quot;phStr&quot;[16C]&quot;exampleStr&quot;[32C]&quot;hiliteStart&quot;s&quot;hiliteEnd&quot;s}'>
<field declared_type='SInt16' name='opcode' type='s'/>
<field declared_type='Str15' name='phStr' type='[16C]'/>
<field declared_type='Str31' name='exampleStr' type='[32C]'/>
<field declared_type='SInt16' name='hiliteStart' type='s'/>
<field declared_type='SInt16' name='hiliteEnd' type='s'/>
</struct>
<struct name='SpeechChannelRecord' type='{SpeechChannelRecord=&quot;data&quot;[1l]}' type64='{SpeechChannelRecord=&quot;data&quot;[1q]}'>
<field declared_type='long*' name='data' type='[1l]' type64='[1q]'/>
</struct>
<struct name='SpeechErrorInfo' type='{SpeechErrorInfo=&quot;count&quot;s&quot;oldest&quot;s&quot;oldPos&quot;l&quot;newest&quot;s&quot;newPos&quot;l}' type64='{SpeechErrorInfo=&quot;count&quot;s&quot;oldest&quot;s&quot;oldPos&quot;q&quot;newest&quot;s&quot;newPos&quot;q}'>
<field declared_type='SInt16' name='count' type='s'/>
<field declared_type='OSErr' name='oldest' type='s'/>
<field declared_type='long' name='oldPos' type='l' type64='q'/>
<field declared_type='OSErr' name='newest' type='s'/>
<field declared_type='long' name='newPos' type='l' type64='q'/>
</struct>
<struct name='SpeechStatusInfo' type='{SpeechStatusInfo=&quot;outputBusy&quot;B&quot;outputPaused&quot;B&quot;inputBytesLeft&quot;l&quot;phonemeCode&quot;s}' type64='{SpeechStatusInfo=&quot;outputBusy&quot;B&quot;outputPaused&quot;B&quot;inputBytesLeft&quot;q&quot;phonemeCode&quot;s}'>
<field declared_type='Boolean' name='outputBusy' type='B'/>
<field declared_type='Boolean' name='outputPaused' type='B'/>
<field declared_type='long' name='inputBytesLeft' type='l' type64='q'/>
<field declared_type='SInt16' name='phonemeCode' type='s'/>
</struct>
<struct name='SpeechVersionInfo' type='{SpeechVersionInfo=&quot;synthType&quot;I&quot;synthSubType&quot;I&quot;synthManufacturer&quot;I&quot;synthFlags&quot;i&quot;synthVersion&quot;{NumVersion=&quot;nonRelRev&quot;C&quot;stage&quot;C&quot;minorAndBugRev&quot;C&quot;majorRev&quot;C}}'>
<field declared_type='OSType' name='synthType' type='L' type64='I'/>
<field declared_type='OSType' name='synthSubType' type='L' type64='I'/>
<field declared_type='OSType' name='synthManufacturer' type='L' type64='I'/>
<field declared_type='SInt32' name='synthFlags' type='l' type64='i'/>
<field declared_type='NumVersion' name='synthVersion' type='{NumVersion=&quot;nonRelRev&quot;C&quot;stage&quot;C&quot;minorAndBugRev&quot;C&quot;majorRev&quot;C}'/>
</struct>
<struct name='SpeechXtndData' type='{SpeechXtndData=&quot;synthCreator&quot;I&quot;synthData&quot;[2C]}'>
<field declared_type='OSType' name='synthCreator' type='L' type64='I'/>
<field declared_type='Byte*' name='synthData' type='[2C]'/>
</struct>
<struct name='VoiceDescription' type='{VoiceDescription=&quot;length&quot;i&quot;voice&quot;{VoiceSpec=&quot;creator&quot;I&quot;id&quot;I}&quot;version&quot;i&quot;name&quot;[64C]&quot;comment&quot;[256C]&quot;gender&quot;s&quot;age&quot;s&quot;script&quot;s&quot;language&quot;s&quot;region&quot;s&quot;reserved&quot;[4l]}' type64='{VoiceDescription=&quot;length&quot;i&quot;voice&quot;{VoiceSpec=&quot;creator&quot;I&quot;id&quot;I}&quot;version&quot;i&quot;name&quot;[64C]&quot;comment&quot;[256C]&quot;gender&quot;s&quot;age&quot;s&quot;script&quot;s&quot;language&quot;s&quot;region&quot;s&quot;reserved&quot;[4i]}'>
<field declared_type='SInt32' name='length' type='l' type64='i'/>
<field declared_type='VoiceSpec' name='voice' type='{VoiceSpec=&quot;creator&quot;I&quot;id&quot;I}'/>
<field declared_type='SInt32' name='version' type='l' type64='i'/>
<field declared_type='Str63' name='name' type='[64C]'/>
<field declared_type='Str255' name='comment' type='[256C]'/>
<field declared_type='SInt16' name='gender' type='s'/>
<field declared_type='SInt16' name='age' type='s'/>
<field declared_type='SInt16' name='script' type='s'/>
<field declared_type='SInt16' name='language' type='s'/>
<field declared_type='SInt16' name='region' type='s'/>
<field declared_type='SInt32*' name='reserved' type='[4l]' type64='[4i]'/>
</struct>
<struct name='VoiceFileInfo' type='{VoiceFileInfo=&quot;fileSpec&quot;{FSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}&quot;resID&quot;s}' type64='{VoiceFileInfo=&quot;fileSpec&quot;{FSSpec=&quot;hidden&quot;[70C]}&quot;resID&quot;s}'>
<field declared_type='FSSpec' name='fileSpec' type='{FSSpec=&quot;vRefNum&quot;s&quot;parID&quot;i&quot;name&quot;[64C]}' type64='{FSSpec=&quot;hidden&quot;[70C]}'/>
<field declared_type='SInt16' name='resID' type='s'/>
</struct>
<struct name='VoiceSpec' type='{VoiceSpec=&quot;creator&quot;I&quot;id&quot;I}'>
<field declared_type='OSType' name='creator' type='L' type64='I'/>
<field declared_type='OSType' name='id' type='L' type64='I'/>
</struct>
<constant declared_type='CFStringRef' name='kSpeechAudioGraphProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechAudioOutputFormatProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechAudioUnitProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechCharacterModeProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechCommandDelimiterProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechCommandPrefix' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechCommandSuffix' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechCurrentVoiceProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechDictionaryAbbreviations' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechDictionaryEntryPhonemes' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechDictionaryEntrySpelling' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechDictionaryLocaleIdentifier' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechDictionaryModificationDate' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechDictionaryPronunciations' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechErrorCFCallBack' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechErrorCallbackCharacterOffset' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechErrorCallbackSpokenString' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechErrorCount' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechErrorNewest' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechErrorNewestCharacterOffset' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechErrorOldest' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechErrorOldestCharacterOffset' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechErrorsProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechInputModeProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechModeLiteral' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechModeNormal' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechModePhoneme' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechModeText' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechModeTune' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechNoEndingProsody' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechNoSpeechInterrupt' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechNumberModeProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechOutputChannelMapProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechOutputToAudioDeviceProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechOutputToExtAudioFileProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechOutputToFileDescriptorProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechOutputToFileURLProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechPhonemeCallBack' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechPhonemeInfoExample' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechPhonemeInfoHiliteEnd' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechPhonemeInfoHiliteStart' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechPhonemeInfoOpcode' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechPhonemeInfoSymbol' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechPhonemeOptionsProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechPhonemeSymbolsProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechPitchBaseProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechPitchModProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechPreflightThenPause' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechRateProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechRecentSyncProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechRefConProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechResetProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechSpeechDoneCallBack' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechStatusNumberOfCharactersLeft' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechStatusOutputBusy' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechStatusOutputPaused' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechStatusPhonemeCode' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechStatusProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechSyncCallBack' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechSynthExtensionProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechSynthesizerInfoIdentifier' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechSynthesizerInfoManufacturer' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechSynthesizerInfoProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechSynthesizerInfoVersion' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechTextDoneCallBack' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechVoiceCreator' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechVoiceID' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechVolumeProperty' type='^{__CFString=}'/>
<constant declared_type='CFStringRef' name='kSpeechWordCFCallBack' type='^{__CFString=}'/>
<enum name='kAudioUnitProperty_SpeechChannel' value='3331'/>
<enum name='kAudioUnitProperty_Voice' value='3330'/>
<enum name='kAudioUnitSubType_SpeechSynthesis' value='1953788784'/>
<enum name='kEndOfSentence' value='2'/>
<enum name='kEndOfWord' value='1'/>
<enum name='kFemale' value='2'/>
<enum name='kImmediate' value='0'/>
<enum name='kMale' value='1'/>
<enum name='kNeuter' value='0'/>
<enum name='kNoEndingProsody' value='1'/>
<enum name='kNoSpeechInterrupt' value='2'/>
<enum name='kPreflightThenPause' value='4'/>
<enum name='kSpeechGenerateTune' value='1'/>
<enum name='kSpeechRelativeDuration' value='4'/>
<enum name='kSpeechRelativePitch' value='2'/>
<enum name='kSpeechShowSyllables' value='8'/>
<enum name='kTextToSpeechSynthType' value='1953788771'/>
<enum name='kTextToSpeechVoiceBundleType' value='1953789538'/>
<enum name='kTextToSpeechVoiceFileType' value='1953789542'/>
<enum name='kTextToSpeechVoiceType' value='1953789540'/>
<enum name='modeLiteral' value='1280594508'/>
<enum name='modeNormal' value='1313821261'/>
<enum name='modePhonemes' value='1346916174'/>
<enum name='modeText' value='1413830740'/>
<enum name='modeTune' value='1414876741'/>
<enum name='soCharacterMode' value='1667785074'/>
<enum name='soCommandDelimiter' value='1684826477'/>
<enum name='soCurrentA5' value='1836663093'/>
<enum name='soCurrentVoice' value='1668706168'/>
<enum name='soErrorCallBack' value='1701995362'/>
<enum name='soErrors' value='1701999215'/>
<enum name='soInputMode' value='1768845428'/>
<enum name='soNumberMode' value='1852662386'/>
<enum name='soOutputToAudioDevice' value='1869635940'/>
<enum name='soOutputToExtAudioFile' value='1869635960'/>
<enum name='soOutputToFileWithCFURL' value='1869635942'/>
<enum name='soPhonemeCallBack' value='1885889378'/>
<enum name='soPhonemeOptions' value='1886351476'/>
<enum name='soPhonemeSymbols' value='1885893497'/>
<enum name='soPitchBase' value='1885495667'/>
<enum name='soPitchMod' value='1886220132'/>
<enum name='soRate' value='1918989413'/>
<enum name='soRecentSync' value='1937337955'/>
<enum name='soRefCon' value='1919247971'/>
<enum name='soReset' value='1920165236'/>
<enum name='soSoundOutput' value='1936614511'/>
<enum name='soSpeechDoneCallBack' value='1935958882'/>
<enum name='soStatus' value='1937006964'/>
<enum name='soSyncCallBack' value='1937335138'/>
<enum name='soSynthExtension' value='2020896356'/>
<enum name='soSynthType' value='1986359923'/>
<enum name='soTextDoneCallBack' value='1952736098'/>
<enum name='soVoiceDescription' value='1768842863'/>
<enum name='soVoiceFile' value='1718773094'/>
<enum name='soVolume' value='1987013741'/>
<enum name='soWordCallBack' value='2003067746'/>
<function name='ContinueSpeech'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CopyPhonemesFromText'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='CFStringRef' name='text' type='^{__CFString=}'/>
<arg declared_type='CFStringRef*' name='phonemes' type='^^{__CFString}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CopySpeechProperty'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='CFStringRef' name='property' type='^{__CFString=}'/>
<arg declared_type='CFTypeRef*' name='object' type='^^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='CountVoices'>
<arg declared_type='SInt16*' name='numVoices' type='^s'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DisposeSpeechChannel'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='DisposeSpeechDoneUPP'>
<arg declared_type='SpeechDoneUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeSpeechErrorUPP'>
<arg declared_type='SpeechErrorUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='long' type='l' type64='q'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeSpeechPhonemeUPP'>
<arg declared_type='SpeechPhonemeUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<arg declared_type='SInt16' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeSpeechSyncUPP'>
<arg declared_type='SpeechSyncUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<arg declared_type='OSType' type='L' type64='I'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeSpeechTextDoneUPP'>
<arg declared_type='SpeechTextDoneUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<arg const='true' declared_type='void**' type='^^v'/>
<arg declared_type='unsigned long*' type='^L' type64='^Q'/>
<arg declared_type='SInt32*' type='^i'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='DisposeSpeechWordUPP'>
<arg declared_type='SpeechWordUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<arg declared_type='unsigned long' type='L' type64='Q'/>
<arg declared_type='UInt16' type='S'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='GetIndVoice'>
<arg declared_type='SInt16' name='index' type='s'/>
<arg declared_type='VoiceSpec*' name='voice' type='^{VoiceSpec=II}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetSpeechInfo'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='OSType' name='selector' type='L' type64='I'/>
<arg declared_type='void*' name='speechInfo' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetSpeechPitch'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='Fixed*' name='pitch' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetSpeechRate'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='Fixed*' name='rate' type='^i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetVoiceDescription'>
<arg const='true' declared_type='VoiceSpec*' name='voice' type='^{VoiceSpec=II}'/>
<arg declared_type='VoiceDescription*' name='info' type='^{VoiceDescription=i{VoiceSpec=II}i[64C][256C]sssss[4l]}' type64='^{VoiceDescription=i{VoiceSpec=II}i[64C][256C]sssss[4i]}'/>
<arg declared_type='long' name='infoLength' type='l' type64='q'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='GetVoiceInfo'>
<arg const='true' declared_type='VoiceSpec*' name='voice' type='^{VoiceSpec=II}'/>
<arg declared_type='OSType' name='selector' type='L' type64='I'/>
<arg declared_type='void*' name='voiceInfo' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='InvokeSpeechDoneUPP'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' name='refCon' type='l' type64='^v'/>
<arg declared_type='SpeechDoneUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeSpeechErrorUPP'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' name='refCon' type='l' type64='^v'/>
<arg declared_type='OSErr' name='theError' type='s'/>
<arg declared_type='long' name='bytePos' type='l' type64='q'/>
<arg declared_type='SpeechErrorUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='long' type='l' type64='q'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeSpeechPhonemeUPP'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' name='refCon' type='l' type64='^v'/>
<arg declared_type='SInt16' name='phonemeOpcode' type='s'/>
<arg declared_type='SpeechPhonemeUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<arg declared_type='SInt16' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeSpeechSyncUPP'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' name='refCon' type='l' type64='^v'/>
<arg declared_type='OSType' name='syncMessage' type='L' type64='I'/>
<arg declared_type='SpeechSyncUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<arg declared_type='OSType' type='L' type64='I'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeSpeechTextDoneUPP'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' name='refCon' type='l' type64='^v'/>
<arg const='true' declared_type='void**' name='nextBuf' type='^^v'/>
<arg declared_type='unsigned long*' name='byteLen' type='^L' type64='^Q'/>
<arg declared_type='SInt32*' name='controlFlags' type='^i'/>
<arg declared_type='SpeechTextDoneUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<arg const='true' declared_type='void**' type='^^v'/>
<arg declared_type='unsigned long*' type='^L' type64='^Q'/>
<arg declared_type='SInt32*' type='^i'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='InvokeSpeechWordUPP'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' name='refCon' type='l' type64='^v'/>
<arg declared_type='unsigned long' name='wordPos' type='L' type64='Q'/>
<arg declared_type='UInt16' name='wordLen' type='S'/>
<arg declared_type='SpeechWordUPP' function_pointer='true' name='userUPP' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<arg declared_type='unsigned long' type='L' type64='Q'/>
<arg declared_type='UInt16' type='S'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='MakeVoiceSpec'>
<arg declared_type='OSType' name='creator' type='L' type64='I'/>
<arg declared_type='OSType' name='id' type='L' type64='I'/>
<arg declared_type='VoiceSpec*' name='voice' type='^{VoiceSpec=II}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='NewSpeechChannel'>
<arg declared_type='VoiceSpec*' name='voice' type='^{VoiceSpec=II}'/>
<arg declared_type='SpeechChannel*' name='chan' type='^^{SpeechChannelRecord}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='NewSpeechDoneUPP'>
<arg declared_type='SpeechDoneProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='SpeechDoneUPP' function_pointer='true' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewSpeechErrorUPP'>
<arg declared_type='SpeechErrorProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='long' type='l' type64='q'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='SpeechErrorUPP' function_pointer='true' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<arg declared_type='OSErr' type='s'/>
<arg declared_type='long' type='l' type64='q'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewSpeechPhonemeUPP'>
<arg declared_type='SpeechPhonemeProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<arg declared_type='SInt16' type='s'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='SpeechPhonemeUPP' function_pointer='true' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<arg declared_type='SInt16' type='s'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewSpeechSyncUPP'>
<arg declared_type='SpeechSyncProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<arg declared_type='OSType' type='L' type64='I'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='SpeechSyncUPP' function_pointer='true' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<arg declared_type='OSType' type='L' type64='I'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewSpeechTextDoneUPP'>
<arg declared_type='SpeechTextDoneProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<arg const='true' declared_type='void**' type='^^v'/>
<arg declared_type='unsigned long*' type='^L' type64='^Q'/>
<arg declared_type='SInt32*' type='^i'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='SpeechTextDoneUPP' function_pointer='true' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<arg const='true' declared_type='void**' type='^^v'/>
<arg declared_type='unsigned long*' type='^L' type64='^Q'/>
<arg declared_type='SInt32*' type='^i'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='NewSpeechWordUPP'>
<arg declared_type='SpeechWordProcPtr' function_pointer='true' name='userRoutine' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<arg declared_type='unsigned long' type='L' type64='Q'/>
<arg declared_type='UInt16' type='S'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='SpeechWordUPP' function_pointer='true' type='^?'>
<arg declared_type='SpeechChannel' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SRefCon' type='l' type64='^v'/>
<arg declared_type='unsigned long' type='L' type64='Q'/>
<arg declared_type='UInt16' type='S'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='PauseSpeechAt'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SInt32' name='whereToPause' type='l' type64='i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetSpeechInfo'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='OSType' name='selector' type='L' type64='I'/>
<arg const='true' declared_type='void*' name='speechInfo' type='^v'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetSpeechPitch'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='Fixed' name='pitch' type='l' type64='i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetSpeechProperty'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='CFStringRef' name='property' type='^{__CFString=}'/>
<arg declared_type='CFTypeRef' name='object' type='@'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SetSpeechRate'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='Fixed' name='rate' type='l' type64='i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SpeakBuffer'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg const='true' declared_type='void*' name='textBuf' type='^v'/>
<arg declared_type='unsigned long' name='textBytes' type='L' type64='Q'/>
<arg declared_type='SInt32' name='controlFlags' type='l' type64='i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SpeakCFString'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='CFStringRef' name='aString' type='^{__CFString=}'/>
<arg declared_type='CFDictionaryRef' name='options' type='^{__CFDictionary=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SpeakString'>
<arg declared_type='ConstStr255Param' name='textToBeSpoken' type='*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SpeakText'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg const='true' declared_type='void*' name='textBuf' type='^v'/>
<arg declared_type='unsigned long' name='textBytes' type='L' type64='Q'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SpeechBusy'>
<retval declared_type='SInt16' type='s'/>
</function>
<function name='SpeechBusySystemWide'>
<retval declared_type='SInt16' type='s'/>
</function>
<function name='SpeechManagerVersion'>
<retval declared_type='NumVersion' type='{NumVersion=CCCC}'/>
</function>
<function name='SpeechSynthesisRegisterModuleURL'>
<arg declared_type='CFURLRef' name='url' type='^{__CFURL=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='SpeechSynthesisUnregisterModuleURL'>
<arg declared_type='CFURLRef' name='url' type='^{__CFURL=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='StopSpeech'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='StopSpeechAt'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='SInt32' name='whereToStop' type='l' type64='i'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='TextToPhonemes'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg const='true' declared_type='void*' name='textBuf' type='^v'/>
<arg declared_type='unsigned long' name='textBytes' type='L' type64='Q'/>
<arg declared_type='Handle' name='phonemeBuf' type='^*'/>
<arg declared_type='long*' name='phonemeBytes' type='^l' type64='^q'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='UseDictionary'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='Handle' name='dictionary' type='^*'/>
<retval declared_type='OSErr' type='s'/>
</function>
<function name='UseSpeechDictionary'>
<arg declared_type='SpeechChannel' name='chan' type='^{SpeechChannelRecord=[1l]}' type64='^{SpeechChannelRecord=[1q]}'/>
<arg declared_type='CFDictionaryRef' name='speechDictionary' type='^{__CFDictionary=}'/>
<retval declared_type='OSErr' type='s'/>
</function>
</signatures>
