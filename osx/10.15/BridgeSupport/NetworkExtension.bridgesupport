<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/Network.framework'/>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/SystemConfiguration.framework'/>
<depends_on path='/System/Library/Frameworks/Foundation.framework'/>
<depends_on path='/System/Library/Frameworks/Security.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='NEAppProxyErrorDomain' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='NEDNSProxyConfigurationDidChangeNotification' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='NEDNSProxyErrorDomain' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='NEFilterConfigurationDidChangeNotification' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='NEFilterErrorDomain' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='NETunnelProviderErrorDomain' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='NEVPNConfigurationChangeNotification' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='NEVPNConnectionStartOptionPassword' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='NEVPNConnectionStartOptionUsername' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='NEVPNErrorDomain' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='NEVPNStatusDidChangeNotification' type64='@'/>
<string_constant name='NEFilterProviderRemediationURLFlowURL' nsstring='true' value='NE_FLOW_URL'/>
<string_constant name='NEFilterProviderRemediationURLFlowURLHostname' nsstring='true' value='NE_FLOW_HOSTNAME'/>
<string_constant name='NEFilterProviderRemediationURLOrganization' nsstring='true' value='NE_ORGANIZATION'/>
<string_constant name='NEFilterProviderRemediationURLUsername' nsstring='true' value='NE_USERNAME'/>
<enum name='NEAppProxyFlowErrorAborted' value64='5'/>
<enum name='NEAppProxyFlowErrorDatagramTooLarge' value64='9'/>
<enum name='NEAppProxyFlowErrorHostUnreachable' value64='3'/>
<enum name='NEAppProxyFlowErrorInternal' value64='8'/>
<enum name='NEAppProxyFlowErrorInvalidArgument' value64='4'/>
<enum name='NEAppProxyFlowErrorNotConnected' value64='1'/>
<enum name='NEAppProxyFlowErrorPeerReset' value64='2'/>
<enum name='NEAppProxyFlowErrorReadAlreadyPending' value64='10'/>
<enum name='NEAppProxyFlowErrorRefused' value64='6'/>
<enum name='NEAppProxyFlowErrorTimedOut' value64='7'/>
<enum name='NEDNSProxyManagerErrorConfigurationCannotBeRemoved' value64='4'/>
<enum name='NEDNSProxyManagerErrorConfigurationDisabled' value64='2'/>
<enum name='NEDNSProxyManagerErrorConfigurationInvalid' value64='1'/>
<enum name='NEDNSProxyManagerErrorConfigurationStale' value64='3'/>
<enum name='NEEvaluateConnectionRuleActionConnectIfNeeded' value64='1'/>
<enum name='NEEvaluateConnectionRuleActionNeverConnect' value64='2'/>
<enum name='NEFilterActionAllow' value64='1'/>
<enum name='NEFilterActionDrop' value64='2'/>
<enum name='NEFilterActionFilterData' value64='4'/>
<enum name='NEFilterActionInvalid' value64='0'/>
<enum name='NEFilterActionRemediate' value64='3'/>
<enum name='NEFilterFlowBytesMax' value64='18446744073709551615'/>
<enum name='NEFilterManagerErrorConfigurationCannotBeRemoved' value64='4'/>
<enum name='NEFilterManagerErrorConfigurationDisabled' value64='2'/>
<enum name='NEFilterManagerErrorConfigurationInternalError' value64='6'/>
<enum name='NEFilterManagerErrorConfigurationInvalid' value64='1'/>
<enum name='NEFilterManagerErrorConfigurationPermissionDenied' value64='5'/>
<enum name='NEFilterManagerErrorConfigurationStale' value64='3'/>
<enum name='NEFilterManagerGradeFirewall' value64='1'/>
<enum name='NEFilterManagerGradeInspector' value64='2'/>
<enum name='NEFilterPacketProviderVerdictAllow' value64='0'/>
<enum name='NEFilterPacketProviderVerdictDelay' value64='2'/>
<enum name='NEFilterPacketProviderVerdictDrop' value64='1'/>
<enum name='NEFilterReportEventDataDecision' value64='2'/>
<enum name='NEFilterReportEventFlowClosed' value64='3'/>
<enum name='NEFilterReportEventNewFlow' value64='1'/>
<enum name='NENetworkRuleProtocolAny' value64='0'/>
<enum name='NENetworkRuleProtocolTCP' value64='1'/>
<enum name='NENetworkRuleProtocolUDP' value64='2'/>
<enum name='NEOnDemandRuleActionConnect' value64='1'/>
<enum name='NEOnDemandRuleActionDisconnect' value64='2'/>
<enum name='NEOnDemandRuleActionEvaluateConnection' value64='3'/>
<enum name='NEOnDemandRuleActionIgnore' value64='4'/>
<enum name='NEOnDemandRuleInterfaceTypeAny' value64='0'/>
<enum name='NEOnDemandRuleInterfaceTypeCellular' value64='3'/>
<enum name='NEOnDemandRuleInterfaceTypeEthernet' value64='1'/>
<enum name='NEOnDemandRuleInterfaceTypeWiFi' value64='2'/>
<enum name='NEProviderStopReasonAppUpdate' value64='16'/>
<enum name='NEProviderStopReasonAuthenticationCanceled' value64='6'/>
<enum name='NEProviderStopReasonConfigurationDisabled' value64='9'/>
<enum name='NEProviderStopReasonConfigurationFailed' value64='7'/>
<enum name='NEProviderStopReasonConfigurationRemoved' value64='10'/>
<enum name='NEProviderStopReasonConnectionFailed' value64='14'/>
<enum name='NEProviderStopReasonIdleTimeout' value64='8'/>
<enum name='NEProviderStopReasonNoNetworkAvailable' value64='3'/>
<enum name='NEProviderStopReasonNone' value64='0'/>
<enum name='NEProviderStopReasonProviderDisabled' value64='5'/>
<enum name='NEProviderStopReasonProviderFailed' value64='2'/>
<enum name='NEProviderStopReasonSleep' value64='15'/>
<enum name='NEProviderStopReasonSuperceded' value64='11'/>
<enum name='NEProviderStopReasonUnrecoverableNetworkChange' value64='4'/>
<enum name='NEProviderStopReasonUserInitiated' value64='1'/>
<enum name='NEProviderStopReasonUserLogout' value64='12'/>
<enum name='NEProviderStopReasonUserSwitch' value64='13'/>
<enum name='NETrafficDirectionAny' value64='0'/>
<enum name='NETrafficDirectionInbound' value64='1'/>
<enum name='NETrafficDirectionOutbound' value64='2'/>
<enum name='NETunnelProviderErrorNetworkSettingsCanceled' value64='2'/>
<enum name='NETunnelProviderErrorNetworkSettingsFailed' value64='3'/>
<enum name='NETunnelProviderErrorNetworkSettingsInvalid' value64='1'/>
<enum name='NETunnelProviderRoutingMethodDestinationIP' value64='1'/>
<enum name='NETunnelProviderRoutingMethodNetworkRule' value64='3'/>
<enum name='NETunnelProviderRoutingMethodSourceApplication' value64='2'/>
<enum name='NEVPNErrorConfigurationDisabled' value64='2'/>
<enum name='NEVPNErrorConfigurationInvalid' value64='1'/>
<enum name='NEVPNErrorConfigurationReadWriteFailed' value64='5'/>
<enum name='NEVPNErrorConfigurationStale' value64='4'/>
<enum name='NEVPNErrorConfigurationUnknown' value64='6'/>
<enum name='NEVPNErrorConnectionFailed' value64='3'/>
<enum name='NEVPNIKEAuthenticationMethodCertificate' value64='1'/>
<enum name='NEVPNIKEAuthenticationMethodNone' value64='0'/>
<enum name='NEVPNIKEAuthenticationMethodSharedSecret' value64='2'/>
<enum name='NEVPNIKEv2CertificateTypeECDSA256' value64='2'/>
<enum name='NEVPNIKEv2CertificateTypeECDSA384' value64='3'/>
<enum name='NEVPNIKEv2CertificateTypeECDSA521' value64='4'/>
<enum name='NEVPNIKEv2CertificateTypeEd25519' value64='5'/>
<enum name='NEVPNIKEv2CertificateTypeRSA' value64='1'/>
<enum name='NEVPNIKEv2DeadPeerDetectionRateHigh' value64='3'/>
<enum name='NEVPNIKEv2DeadPeerDetectionRateLow' value64='1'/>
<enum name='NEVPNIKEv2DeadPeerDetectionRateMedium' value64='2'/>
<enum name='NEVPNIKEv2DeadPeerDetectionRateNone' value64='0'/>
<enum name='NEVPNIKEv2DiffieHellmanGroup1' value64='1'/>
<enum name='NEVPNIKEv2DiffieHellmanGroup14' value64='14'/>
<enum name='NEVPNIKEv2DiffieHellmanGroup15' value64='15'/>
<enum name='NEVPNIKEv2DiffieHellmanGroup16' value64='16'/>
<enum name='NEVPNIKEv2DiffieHellmanGroup17' value64='17'/>
<enum name='NEVPNIKEv2DiffieHellmanGroup18' value64='18'/>
<enum name='NEVPNIKEv2DiffieHellmanGroup19' value64='19'/>
<enum name='NEVPNIKEv2DiffieHellmanGroup2' value64='2'/>
<enum name='NEVPNIKEv2DiffieHellmanGroup20' value64='20'/>
<enum name='NEVPNIKEv2DiffieHellmanGroup21' value64='21'/>
<enum name='NEVPNIKEv2DiffieHellmanGroup31' value64='31'/>
<enum name='NEVPNIKEv2DiffieHellmanGroup5' value64='5'/>
<enum name='NEVPNIKEv2DiffieHellmanGroupInvalid' value64='0'/>
<enum name='NEVPNIKEv2EncryptionAlgorithm3DES' value64='2'/>
<enum name='NEVPNIKEv2EncryptionAlgorithmAES128' value64='3'/>
<enum name='NEVPNIKEv2EncryptionAlgorithmAES128GCM' value64='5'/>
<enum name='NEVPNIKEv2EncryptionAlgorithmAES256' value64='4'/>
<enum name='NEVPNIKEv2EncryptionAlgorithmAES256GCM' value64='6'/>
<enum name='NEVPNIKEv2EncryptionAlgorithmChaCha20Poly1305' value64='7'/>
<enum name='NEVPNIKEv2EncryptionAlgorithmDES' value64='1'/>
<enum name='NEVPNIKEv2IntegrityAlgorithmSHA160' value64='2'/>
<enum name='NEVPNIKEv2IntegrityAlgorithmSHA256' value64='3'/>
<enum name='NEVPNIKEv2IntegrityAlgorithmSHA384' value64='4'/>
<enum name='NEVPNIKEv2IntegrityAlgorithmSHA512' value64='5'/>
<enum name='NEVPNIKEv2IntegrityAlgorithmSHA96' value64='1'/>
<enum name='NEVPNIKEv2TLSVersion1_0' value64='1'/>
<enum name='NEVPNIKEv2TLSVersion1_1' value64='2'/>
<enum name='NEVPNIKEv2TLSVersion1_2' value64='3'/>
<enum name='NEVPNIKEv2TLSVersionDefault' value64='0'/>
<enum name='NEVPNStatusConnected' value64='3'/>
<enum name='NEVPNStatusConnecting' value64='2'/>
<enum name='NEVPNStatusDisconnected' value64='1'/>
<enum name='NEVPNStatusDisconnecting' value64='5'/>
<enum name='NEVPNStatusInvalid' value64='0'/>
<enum name='NEVPNStatusReasserting' value64='4'/>
<enum name='NWPathStatusInvalid' value64='0'/>
<enum name='NWPathStatusSatisfiable' value64='3'/>
<enum name='NWPathStatusSatisfied' value64='1'/>
<enum name='NWPathStatusUnsatisfied' value64='2'/>
<enum name='NWTCPConnectionStateCancelled' value64='5'/>
<enum name='NWTCPConnectionStateConnected' value64='3'/>
<enum name='NWTCPConnectionStateConnecting' value64='1'/>
<enum name='NWTCPConnectionStateDisconnected' value64='4'/>
<enum name='NWTCPConnectionStateInvalid' value64='0'/>
<enum name='NWTCPConnectionStateWaiting' value64='2'/>
<enum name='NWUDPSessionStateCancelled' value64='5'/>
<enum name='NWUDPSessionStateFailed' value64='4'/>
<enum name='NWUDPSessionStateInvalid' value64='0'/>
<enum name='NWUDPSessionStatePreparing' value64='2'/>
<enum name='NWUDPSessionStateReady' value64='3'/>
<enum name='NWUDPSessionStateWaiting' value64='1'/>
<class name='NEAppProxyFlow'>
<method selector='closeReadWithError:'>
<arg declared_type64='NSError * _Nullable' index='0' name='error' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='closeWriteWithError:'>
<arg declared_type64='NSError * _Nullable' index='0' name='error' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='metaData'>
<retval declared_type64='NEFlowMetaData * _Nonnull' type64='@'/>
</method>
<method selector='openWithLocalEndpoint:completionHandler:'>
<arg declared_type64='NWHostEndpoint * _Nullable' index='0' name='localEndpoint' type64='@'/>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NEAppProxyProvider'>
<method selector='cancelProxyWithError:'>
<arg declared_type64='NSError * _Nullable' index='0' name='error' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='handleNewFlow:'>
<arg declared_type64='NEAppProxyFlow * _Nonnull' index='0' name='flow' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='handleNewUDPFlow:initialRemoteEndpoint:'>
<arg declared_type64='NEAppProxyUDPFlow * _Nonnull' index='0' name='flow' type64='@'/>
<arg declared_type64='NWEndpoint * _Nonnull' index='1' name='remoteEndpoint' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='startProxyWithOptions:completionHandler:'>
<arg declared_type64='NSDictionary * _Nullable' index='0' name='options' type64='@'/>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='stopProxyWithReason:completionHandler:'>
<arg declared_type64='NEProviderStopReason' index='0' name='reason' type64='q'/>
<arg declared_type64='void (^ _Nonnull)(void)' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NEAppProxyProviderManager'>
<method class_method='true' selector='loadAllFromPreferencesWithCompletionHandler:'>
<arg declared_type64='void (^ _Nonnull)(NSArray * _Nullable, NSError * _Nullable)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='NSArray * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NEAppProxyTCPFlow'>
<method selector='readDataWithCompletionHandler:'>
<arg declared_type64='void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='NSData * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='remoteEndpoint'>
<retval declared_type64='NWEndpoint * _Nonnull' type64='@'/>
</method>
<method selector='writeData:withCompletionHandler:'>
<arg declared_type64='NSData * _Nonnull' index='0' name='data' type64='@'/>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NEAppProxyUDPFlow'>
<method selector='localEndpoint'>
<retval declared_type64='NWEndpoint * _Nullable' type64='@'/>
</method>
<method selector='readDatagramsWithCompletionHandler:'>
<arg declared_type64='void (^ _Nonnull)(NSArray * _Nullable, NSArray * _Nullable, NSError * _Nullable)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='NSArray * _Nullable' type64='@'/>
<arg declared_type64='NSArray * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='writeDatagrams:sentByEndpoints:completionHandler:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='datagrams' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='remoteEndpoints' type64='@'/>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='2' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NEAppRule'>
<method selector='initWithSigningIdentifier:designatedRequirement:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='signingIdentifier' type64='@'/>
<arg declared_type64='NSString * _Nonnull' index='1' name='designatedRequirement' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='matchDesignatedRequirement'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method selector='matchDomains'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='matchPath'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='matchSigningIdentifier'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method selector='setMatchDomains:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='matchDomains' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMatchPath:'>
<arg declared_type64='NSString * _Nullable' index='0' name='matchPath' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NEDNSProxyManager'>
<method selector='isEnabled'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='loadFromPreferencesWithCompletionHandler:'>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='localizedDescription'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='providerProtocol'>
<retval declared_type64='NEDNSProxyProviderProtocol * _Nullable' type64='@'/>
</method>
<method selector='removeFromPreferencesWithCompletionHandler:'>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='saveToPreferencesWithCompletionHandler:'>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEnabled:'>
<arg declared_type64='BOOL' index='0' name='enabled' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLocalizedDescription:'>
<arg declared_type64='NSString * _Nullable' index='0' name='localizedDescription' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setProviderProtocol:'>
<arg declared_type64='NEDNSProxyProviderProtocol * _Nullable' index='0' name='providerProtocol' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='sharedManager'>
<retval declared_type64='NEDNSProxyManager * _Nonnull' type64='@'/>
</method>
</class>
<class name='NEDNSProxyProvider'>
<method selector='cancelProxyWithError:'>
<arg declared_type64='NSError * _Nullable' index='0' name='error' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='handleNewFlow:'>
<arg declared_type64='NEAppProxyFlow * _Nonnull' index='0' name='flow' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='handleNewUDPFlow:initialRemoteEndpoint:'>
<arg declared_type64='NEAppProxyUDPFlow * _Nonnull' index='0' name='flow' type64='@'/>
<arg declared_type64='NWEndpoint * _Nonnull' index='1' name='remoteEndpoint' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='startProxyWithOptions:completionHandler:'>
<arg declared_type64='NSDictionary * _Nullable' index='0' name='options' type64='@'/>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='stopProxyWithReason:completionHandler:'>
<arg declared_type64='NEProviderStopReason' index='0' name='reason' type64='q'/>
<arg declared_type64='void (^ _Nonnull)(void)' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='systemDNSSettings'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
</class>
<class name='NEDNSProxyProviderProtocol'>
<method selector='providerBundleIdentifier'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='providerConfiguration'>
<retval declared_type64='NSDictionary * _Nullable' type64='@'/>
</method>
<method selector='setProviderBundleIdentifier:'>
<arg declared_type64='NSString * _Nullable' index='0' name='providerBundleIdentifier' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setProviderConfiguration:'>
<arg declared_type64='NSDictionary * _Nullable' index='0' name='providerConfiguration' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NEDNSSettings'>
<method selector='domainName'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='initWithServers:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='servers' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='matchDomains'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='matchDomainsNoSearch'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='searchDomains'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='servers'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='setDomainName:'>
<arg declared_type64='NSString * _Nullable' index='0' name='domainName' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMatchDomains:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='matchDomains' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMatchDomainsNoSearch:'>
<arg declared_type64='BOOL' index='0' name='matchDomainsNoSearch' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSearchDomains:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='searchDomains' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NEEvaluateConnectionRule'>
<method selector='action'>
<retval declared_type64='NEEvaluateConnectionRuleAction' type64='q'/>
</method>
<method selector='initWithMatchDomains:andAction:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='domains' type64='@'/>
<arg declared_type64='NEEvaluateConnectionRuleAction' index='1' name='action' type64='q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='matchDomains'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='probeURL'>
<retval declared_type64='NSURL * _Nullable' type64='@'/>
</method>
<method selector='setProbeURL:'>
<arg declared_type64='NSURL * _Nullable' index='0' name='probeURL' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUseDNSServers:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='useDNSServers' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='useDNSServers'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
</class>
<class name='NEFilterDataProvider'>
<method selector='applySettings:completionHandler:'>
<arg declared_type64='NEFilterSettings * _Nullable' index='0' name='settings' type64='@'/>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='handleInboundDataCompleteForFlow:'>
<arg declared_type64='NEFilterFlow * _Nonnull' index='0' name='flow' type64='@'/>
<retval declared_type64='NEFilterDataVerdict * _Nonnull' type64='@'/>
</method>
<method selector='handleInboundDataFromFlow:readBytesStartOffset:readBytes:'>
<arg declared_type64='NEFilterFlow * _Nonnull' index='0' name='flow' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='offset' type64='Q'/>
<arg declared_type64='NSData * _Nonnull' index='2' name='readBytes' type64='@'/>
<retval declared_type64='NEFilterDataVerdict * _Nonnull' type64='@'/>
</method>
<method selector='handleNewFlow:'>
<arg declared_type64='NEFilterFlow * _Nonnull' index='0' name='flow' type64='@'/>
<retval declared_type64='NEFilterNewFlowVerdict * _Nonnull' type64='@'/>
</method>
<method selector='handleOutboundDataCompleteForFlow:'>
<arg declared_type64='NEFilterFlow * _Nonnull' index='0' name='flow' type64='@'/>
<retval declared_type64='NEFilterDataVerdict * _Nonnull' type64='@'/>
</method>
<method selector='handleOutboundDataFromFlow:readBytesStartOffset:readBytes:'>
<arg declared_type64='NEFilterFlow * _Nonnull' index='0' name='flow' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='offset' type64='Q'/>
<arg declared_type64='NSData * _Nonnull' index='2' name='readBytes' type64='@'/>
<retval declared_type64='NEFilterDataVerdict * _Nonnull' type64='@'/>
</method>
<method selector='resumeFlow:withVerdict:'>
<arg declared_type64='NEFilterFlow * _Nonnull' index='0' name='flow' type64='@'/>
<arg declared_type64='NEFilterVerdict * _Nonnull' index='1' name='verdict' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NEFilterDataVerdict'>
<method class_method='true' selector='allowVerdict'>
<retval declared_type64='NEFilterDataVerdict * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='dataVerdictWithPassBytes:peekBytes:'>
<arg declared_type64='NSUInteger' index='0' name='passBytes' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='peekBytes' type64='Q'/>
<retval declared_type64='NEFilterDataVerdict * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='dropVerdict'>
<retval declared_type64='NEFilterDataVerdict * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='pauseVerdict'>
<retval declared_type64='NEFilterDataVerdict * _Nonnull' type64='@'/>
</method>
</class>
<class name='NEFilterFlow'>
<method selector='URL'>
<retval declared_type64='NSURL * _Nullable' type64='@'/>
</method>
<method selector='direction'>
<retval declared_type64='NETrafficDirection' type64='q'/>
</method>
<method selector='sourceAppAuditToken'>
<retval declared_type64='NSData * _Nullable' type64='@'/>
</method>
</class>
<class name='NEFilterManager'>
<method selector='grade'>
<retval declared_type64='NEFilterManagerGrade' type64='q'/>
</method>
<method selector='isEnabled'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='loadFromPreferencesWithCompletionHandler:'>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='localizedDescription'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='providerConfiguration'>
<retval declared_type64='NEFilterProviderConfiguration * _Nullable' type64='@'/>
</method>
<method selector='removeFromPreferencesWithCompletionHandler:'>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='saveToPreferencesWithCompletionHandler:'>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEnabled:'>
<arg declared_type64='BOOL' index='0' name='enabled' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setGrade:'>
<arg declared_type64='NEFilterManagerGrade' index='0' name='grade' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLocalizedDescription:'>
<arg declared_type64='NSString * _Nullable' index='0' name='localizedDescription' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setProviderConfiguration:'>
<arg declared_type64='NEFilterProviderConfiguration * _Nullable' index='0' name='providerConfiguration' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='sharedManager'>
<retval declared_type64='NEFilterManager * _Nonnull' type64='@'/>
</method>
</class>
<class name='NEFilterNewFlowVerdict'>
<method class_method='true' selector='allowVerdict'>
<retval declared_type64='NEFilterNewFlowVerdict * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='dropVerdict'>
<retval declared_type64='NEFilterNewFlowVerdict * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='filterDataVerdictWithFilterInbound:peekInboundBytes:filterOutbound:peekOutboundBytes:'>
<arg declared_type64='BOOL' index='0' name='filterInbound' type64='B'/>
<arg declared_type64='NSUInteger' index='1' name='peekInboundBytes' type64='Q'/>
<arg declared_type64='BOOL' index='2' name='filterOutbound' type64='B'/>
<arg declared_type64='NSUInteger' index='3' name='peekOutboundBytes' type64='Q'/>
<retval declared_type64='NEFilterNewFlowVerdict * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='pauseVerdict'>
<retval declared_type64='NEFilterNewFlowVerdict * _Nonnull' type64='@'/>
</method>
</class>
<class name='NEFilterPacketProvider'>
<method selector='allowPacket:'>
<arg declared_type64='NEPacket * _Nonnull' index='0' name='packet' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='delayCurrentPacket:'>
<arg declared_type64='NEFilterPacketContext * _Nonnull' index='0' name='context' type64='@'/>
<retval declared_type64='NEPacket * _Nonnull' type64='@'/>
</method>
<method selector='packetHandler'>
<retval declared_type64='NEFilterPacketHandler _Nullable' function_pointer='true' type64='@?'>
<arg declared_type64='NEFilterPacketContext * _Nonnull' type64='@'/>
<arg declared_type64='nw_interface_t _Nonnull' type64='@'/>
<arg declared_type64='NETrafficDirection' type64='q'/>
<arg const='true' declared_type64='void * _Nonnull' type64='^v'/>
<arg const='true' declared_type64='size_t' type64='Q'/>
<retval declared_type64='NEFilterPacketProviderVerdict' type64='q'/>
</retval>
</method>
<method selector='setPacketHandler:'>
<arg declared_type64='NEFilterPacketHandler _Nullable' function_pointer='true' index='0' name='packetHandler' type64='@?'>
<arg declared_type64='NEFilterPacketContext * _Nonnull' type64='@'/>
<arg declared_type64='nw_interface_t _Nonnull' type64='@'/>
<arg declared_type64='NETrafficDirection' type64='q'/>
<arg const='true' declared_type64='void * _Nonnull' type64='^v'/>
<arg const='true' declared_type64='size_t' type64='Q'/>
<retval declared_type64='NEFilterPacketProviderVerdict' type64='q'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NEFilterProvider'>
<method selector='filterConfiguration'>
<retval declared_type64='NEFilterProviderConfiguration * _Nonnull' type64='@'/>
</method>
<method selector='handleReport:'>
<arg declared_type64='NEFilterReport * _Nonnull' index='0' name='report' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='startFilterWithCompletionHandler:'>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='stopFilterWithReason:completionHandler:'>
<arg declared_type64='NEProviderStopReason' index='0' name='reason' type64='q'/>
<arg declared_type64='void (^ _Nonnull)(void)' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NEFilterProviderConfiguration'>
<method selector='filterBrowsers'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='filterDataProviderBundleIdentifier'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='filterPacketProviderBundleIdentifier'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='filterPackets'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='filterSockets'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='identityReference'>
<retval declared_type64='NSData * _Nullable' type64='@'/>
</method>
<method selector='organization'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='passwordReference'>
<retval declared_type64='NSData * _Nullable' type64='@'/>
</method>
<method selector='serverAddress'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='setFilterBrowsers:'>
<arg declared_type64='BOOL' index='0' name='filterBrowsers' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFilterDataProviderBundleIdentifier:'>
<arg declared_type64='NSString * _Nullable' index='0' name='filterDataProviderBundleIdentifier' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFilterPacketProviderBundleIdentifier:'>
<arg declared_type64='NSString * _Nullable' index='0' name='filterPacketProviderBundleIdentifier' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFilterPackets:'>
<arg declared_type64='BOOL' index='0' name='filterPackets' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFilterSockets:'>
<arg declared_type64='BOOL' index='0' name='filterSockets' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIdentityReference:'>
<arg declared_type64='NSData * _Nullable' index='0' name='identityReference' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOrganization:'>
<arg declared_type64='NSString * _Nullable' index='0' name='organization' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPasswordReference:'>
<arg declared_type64='NSData * _Nullable' index='0' name='passwordReference' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setServerAddress:'>
<arg declared_type64='NSString * _Nullable' index='0' name='serverAddress' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUsername:'>
<arg declared_type64='NSString * _Nullable' index='0' name='username' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVendorConfiguration:'>
<arg declared_type64='NSDictionary * _Nullable' index='0' name='vendorConfiguration' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='username'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='vendorConfiguration'>
<retval declared_type64='NSDictionary * _Nullable' type64='@'/>
</method>
</class>
<class name='NEFilterReport'>
<method selector='action'>
<retval declared_type64='NEFilterAction' type64='q'/>
</method>
<method selector='bytesInboundCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='bytesOutboundCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='event'>
<retval declared_type64='NEFilterReportEvent' type64='q'/>
</method>
<method selector='flow'>
<retval declared_type64='NEFilterFlow * _Nullable' type64='@'/>
</method>
</class>
<class name='NEFilterRule'>
<method selector='action'>
<retval declared_type64='NEFilterAction' type64='q'/>
</method>
<method selector='initWithNetworkRule:action:'>
<arg declared_type64='NENetworkRule * _Nonnull' index='0' name='networkRule' type64='@'/>
<arg declared_type64='NEFilterAction' index='1' name='action' type64='q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='networkRule'>
<retval declared_type64='NENetworkRule * _Nonnull' type64='@'/>
</method>
</class>
<class name='NEFilterSettings'>
<method selector='defaultAction'>
<retval declared_type64='NEFilterAction' type64='q'/>
</method>
<method selector='initWithRules:defaultAction:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='rules' type64='@'/>
<arg declared_type64='NEFilterAction' index='1' name='defaultAction' type64='q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='rules'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
</class>
<class name='NEFilterSocketFlow'>
<method selector='localEndpoint'>
<retval declared_type64='NWEndpoint * _Nullable' type64='@'/>
</method>
<method selector='remoteEndpoint'>
<retval declared_type64='NWEndpoint * _Nullable' type64='@'/>
</method>
<method selector='socketFamily'>
<retval declared_type64='int' type64='i'/>
</method>
<method selector='socketProtocol'>
<retval declared_type64='int' type64='i'/>
</method>
<method selector='socketType'>
<retval declared_type64='int' type64='i'/>
</method>
</class>
<class name='NEFilterVerdict'>
<method selector='setShouldReport:'>
<arg declared_type64='BOOL' index='0' name='shouldReport' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='shouldReport'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='NEFlowMetaData'>
<method selector='sourceAppAuditToken'>
<retval declared_type64='NSData * _Nullable' type64='@'/>
</method>
<method selector='sourceAppSigningIdentifier'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method selector='sourceAppUniqueIdentifier'>
<retval declared_type64='NSData * _Nonnull' type64='@'/>
</method>
</class>
<class name='NEIPv4Route'>
<method class_method='true' selector='defaultRoute'>
<retval const='true' declared_type64='NEIPv4Route * _Nonnull' type64='@'/>
</method>
<method selector='destinationAddress'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method selector='destinationSubnetMask'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method selector='gatewayAddress'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='initWithDestinationAddress:subnetMask:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='address' type64='@'/>
<arg declared_type64='NSString * _Nonnull' index='1' name='subnetMask' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setGatewayAddress:'>
<arg declared_type64='NSString * _Nullable' index='0' name='gatewayAddress' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NEIPv4Settings'>
<method selector='addresses'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='excludedRoutes'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='includedRoutes'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='initWithAddresses:subnetMasks:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='addresses' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='subnetMasks' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setExcludedRoutes:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='excludedRoutes' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIncludedRoutes:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='includedRoutes' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='subnetMasks'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
</class>
<class name='NEIPv6Route'>
<method class_method='true' selector='defaultRoute'>
<retval const='true' declared_type64='NEIPv6Route * _Nonnull' type64='@'/>
</method>
<method selector='destinationAddress'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method selector='destinationNetworkPrefixLength'>
<retval declared_type64='NSNumber * _Nonnull' type64='@'/>
</method>
<method selector='gatewayAddress'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='initWithDestinationAddress:networkPrefixLength:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='address' type64='@'/>
<arg declared_type64='NSNumber * _Nonnull' index='1' name='networkPrefixLength' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setGatewayAddress:'>
<arg declared_type64='NSString * _Nullable' index='0' name='gatewayAddress' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NEIPv6Settings'>
<method selector='addresses'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='excludedRoutes'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='includedRoutes'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='initWithAddresses:networkPrefixLengths:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='addresses' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='networkPrefixLengths' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='networkPrefixLengths'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='setExcludedRoutes:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='excludedRoutes' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIncludedRoutes:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='includedRoutes' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NENetworkRule'>
<method selector='initWithDestinationHost:protocol:'>
<arg declared_type64='NWHostEndpoint * _Nonnull' index='0' name='hostEndpoint' type64='@'/>
<arg declared_type64='NENetworkRuleProtocol' index='1' name='protocol' type64='q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDestinationNetwork:prefix:protocol:'>
<arg declared_type64='NWHostEndpoint * _Nonnull' index='0' name='networkEndpoint' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='destinationPrefix' type64='Q'/>
<arg declared_type64='NENetworkRuleProtocol' index='2' name='protocol' type64='q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithRemoteNetwork:remotePrefix:localNetwork:localPrefix:protocol:direction:'>
<arg declared_type64='NWHostEndpoint * _Nullable' index='0' name='remoteNetwork' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='remotePrefix' type64='Q'/>
<arg declared_type64='NWHostEndpoint * _Nullable' index='2' name='localNetwork' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='localPrefix' type64='Q'/>
<arg declared_type64='NENetworkRuleProtocol' index='4' name='protocol' type64='q'/>
<arg declared_type64='NETrafficDirection' index='5' name='direction' type64='q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='matchDirection'>
<retval declared_type64='NETrafficDirection' type64='q'/>
</method>
<method selector='matchLocalNetwork'>
<retval declared_type64='NWHostEndpoint * _Nullable' type64='@'/>
</method>
<method selector='matchLocalPrefix'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='matchProtocol'>
<retval declared_type64='NENetworkRuleProtocol' type64='q'/>
</method>
<method selector='matchRemoteEndpoint'>
<retval declared_type64='NWHostEndpoint * _Nullable' type64='@'/>
</method>
<method selector='matchRemotePrefix'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='NEOnDemandRule'>
<method selector='DNSSearchDomainMatch'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='DNSServerAddressMatch'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='SSIDMatch'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='action'>
<retval declared_type64='NEOnDemandRuleAction' type64='q'/>
</method>
<method selector='interfaceTypeMatch'>
<retval declared_type64='NEOnDemandRuleInterfaceType' type64='q'/>
</method>
<method selector='probeURL'>
<retval declared_type64='NSURL * _Nullable' type64='@'/>
</method>
<method selector='setDNSSearchDomainMatch:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='DNSSearchDomainMatch' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDNSServerAddressMatch:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='DNSServerAddressMatch' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setInterfaceTypeMatch:'>
<arg declared_type64='NEOnDemandRuleInterfaceType' index='0' name='interfaceTypeMatch' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setProbeURL:'>
<arg declared_type64='NSURL * _Nullable' index='0' name='probeURL' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSSIDMatch:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='SSIDMatch' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NEOnDemandRuleEvaluateConnection'>
<method selector='connectionRules'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='setConnectionRules:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='connectionRules' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NEPacket'>
<method selector='data'>
<retval declared_type64='NSData * _Nonnull' type64='@'/>
</method>
<method selector='direction'>
<retval declared_type64='NETrafficDirection' type64='q'/>
</method>
<method selector='initWithData:protocolFamily:'>
<arg declared_type64='NSData * _Nonnull' index='0' name='data' type64='@'/>
<arg declared_type64='sa_family_t' index='1' name='protocolFamily' type64='C'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='metadata'>
<retval declared_type64='NEFlowMetaData * _Nullable' type64='@'/>
</method>
<method selector='protocolFamily'>
<retval declared_type64='sa_family_t' type64='C'/>
</method>
</class>
<class name='NEPacketTunnelFlow'>
<method selector='readPacketObjectsWithCompletionHandler:'>
<arg declared_type64='void (^ _Nonnull)(NSArray * _Nonnull)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='NSArray * _Nonnull' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='readPacketsWithCompletionHandler:'>
<arg declared_type64='void (^ _Nonnull)(NSArray * _Nonnull, NSArray * _Nonnull)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='NSArray * _Nonnull' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='writePacketObjects:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='packets' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='writePackets:withProtocols:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='packets' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='protocols' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='NEPacketTunnelNetworkSettings'>
<method selector='IPv4Settings'>
<retval declared_type64='NEIPv4Settings * _Nullable' type64='@'/>
</method>
<method selector='IPv6Settings'>
<retval declared_type64='NEIPv6Settings * _Nullable' type64='@'/>
</method>
<method selector='MTU'>
<retval declared_type64='NSNumber * _Nullable' type64='@'/>
</method>
<method selector='setIPv4Settings:'>
<arg declared_type64='NEIPv4Settings * _Nullable' index='0' name='IPv4Settings' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIPv6Settings:'>
<arg declared_type64='NEIPv6Settings * _Nullable' index='0' name='IPv6Settings' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMTU:'>
<arg declared_type64='NSNumber * _Nullable' index='0' name='MTU' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTunnelOverheadBytes:'>
<arg declared_type64='NSNumber * _Nullable' index='0' name='tunnelOverheadBytes' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='tunnelOverheadBytes'>
<retval declared_type64='NSNumber * _Nullable' type64='@'/>
</method>
</class>
<class name='NEPacketTunnelProvider'>
<method selector='cancelTunnelWithError:'>
<arg declared_type64='NSError * _Nullable' index='0' name='error' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='createTCPConnectionThroughTunnelToEndpoint:enableTLS:TLSParameters:delegate:'>
<arg declared_type64='NWEndpoint * _Nonnull' index='0' name='remoteEndpoint' type64='@'/>
<arg declared_type64='BOOL' index='1' name='enableTLS' type64='B'/>
<arg declared_type64='NWTLSParameters * _Nullable' index='2' name='TLSParameters' type64='@'/>
<arg declared_type64='id _Nullable' index='3' name='delegate' type64='@'/>
<retval declared_type64='NWTCPConnection * _Nonnull' type64='@'/>
</method>
<method selector='createUDPSessionThroughTunnelToEndpoint:fromEndpoint:'>
<arg declared_type64='NWEndpoint * _Nonnull' index='0' name='remoteEndpoint' type64='@'/>
<arg declared_type64='NWHostEndpoint * _Nullable' index='1' name='localEndpoint' type64='@'/>
<retval declared_type64='NWUDPSession * _Nonnull' type64='@'/>
</method>
<method selector='packetFlow'>
<retval declared_type64='NEPacketTunnelFlow * _Nonnull' type64='@'/>
</method>
<method selector='startTunnelWithOptions:completionHandler:'>
<arg declared_type64='NSDictionary * _Nullable' index='0' name='options' type64='@'/>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='stopTunnelWithReason:completionHandler:'>
<arg declared_type64='NEProviderStopReason' index='0' name='reason' type64='q'/>
<arg declared_type64='void (^ _Nonnull)(void)' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NEProvider'>
<method selector='createTCPConnectionToEndpoint:enableTLS:TLSParameters:delegate:'>
<arg declared_type64='NWEndpoint * _Nonnull' index='0' name='remoteEndpoint' type64='@'/>
<arg declared_type64='BOOL' index='1' name='enableTLS' type64='B'/>
<arg declared_type64='NWTLSParameters * _Nullable' index='2' name='TLSParameters' type64='@'/>
<arg declared_type64='id _Nullable' index='3' name='delegate' type64='@'/>
<retval declared_type64='NWTCPConnection * _Nonnull' type64='@'/>
</method>
<method selector='createUDPSessionToEndpoint:fromEndpoint:'>
<arg declared_type64='NWEndpoint * _Nonnull' index='0' name='remoteEndpoint' type64='@'/>
<arg declared_type64='NWHostEndpoint * _Nullable' index='1' name='localEndpoint' type64='@'/>
<retval declared_type64='NWUDPSession * _Nonnull' type64='@'/>
</method>
<method selector='defaultPath'>
<retval declared_type64='NWPath * _Nullable' type64='@'/>
</method>
<method selector='displayMessage:completionHandler:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='message' type64='@'/>
<arg declared_type64='void (^ _Nonnull)(BOOL)' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<arg declared_type64='BOOL' type64='B'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sleepWithCompletionHandler:'>
<arg declared_type64='void (^ _Nonnull)(void)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='startSystemExtensionMode'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='wake'>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NEProxyServer'>
<method selector='address'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method selector='authenticationRequired'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='initWithAddress:port:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='address' type64='@'/>
<arg declared_type64='NSInteger' index='1' name='port' type64='q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='password'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='port'>
<retval declared_type64='NSInteger' type64='q'/>
</method>
<method selector='setAuthenticationRequired:'>
<arg declared_type64='BOOL' index='0' name='authenticationRequired' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPassword:'>
<arg declared_type64='NSString * _Nullable' index='0' name='password' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUsername:'>
<arg declared_type64='NSString * _Nullable' index='0' name='username' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='username'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
</class>
<class name='NEProxySettings'>
<method selector='HTTPEnabled'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='HTTPSEnabled'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='HTTPSServer'>
<retval declared_type64='NEProxyServer * _Nullable' type64='@'/>
</method>
<method selector='HTTPServer'>
<retval declared_type64='NEProxyServer * _Nullable' type64='@'/>
</method>
<method selector='autoProxyConfigurationEnabled'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='exceptionList'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='excludeSimpleHostnames'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='matchDomains'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='proxyAutoConfigurationJavaScript'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='proxyAutoConfigurationURL'>
<retval declared_type64='NSURL * _Nullable' type64='@'/>
</method>
<method selector='setAutoProxyConfigurationEnabled:'>
<arg declared_type64='BOOL' index='0' name='autoProxyConfigurationEnabled' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setExceptionList:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='exceptionList' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setExcludeSimpleHostnames:'>
<arg declared_type64='BOOL' index='0' name='excludeSimpleHostnames' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setHTTPEnabled:'>
<arg declared_type64='BOOL' index='0' name='HTTPEnabled' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setHTTPSEnabled:'>
<arg declared_type64='BOOL' index='0' name='HTTPSEnabled' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setHTTPSServer:'>
<arg declared_type64='NEProxyServer * _Nullable' index='0' name='HTTPSServer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setHTTPServer:'>
<arg declared_type64='NEProxyServer * _Nullable' index='0' name='HTTPServer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMatchDomains:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='matchDomains' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setProxyAutoConfigurationJavaScript:'>
<arg declared_type64='NSString * _Nullable' index='0' name='proxyAutoConfigurationJavaScript' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setProxyAutoConfigurationURL:'>
<arg declared_type64='NSURL * _Nullable' index='0' name='proxyAutoConfigurationURL' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NETransparentProxyManager'>
<method class_method='true' selector='loadAllFromPreferencesWithCompletionHandler:'>
<arg declared_type64='void (^ _Nonnull)(NSArray * _Nullable, NSError * _Nullable)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='NSArray * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NETransparentProxyNetworkSettings'>
<method selector='excludedNetworkRules'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='includedNetworkRules'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='setExcludedNetworkRules:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='excludedNetworkRules' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIncludedNetworkRules:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='includedNetworkRules' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NETunnelNetworkSettings'>
<method selector='DNSSettings'>
<retval declared_type64='NEDNSSettings * _Nullable' type64='@'/>
</method>
<method selector='initWithTunnelRemoteAddress:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='address' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='proxySettings'>
<retval declared_type64='NEProxySettings * _Nullable' type64='@'/>
</method>
<method selector='setDNSSettings:'>
<arg declared_type64='NEDNSSettings * _Nullable' index='0' name='DNSSettings' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setProxySettings:'>
<arg declared_type64='NEProxySettings * _Nullable' index='0' name='proxySettings' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='tunnelRemoteAddress'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
</class>
<class name='NETunnelProvider'>
<method selector='appRules'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='handleAppMessage:completionHandler:'>
<arg declared_type64='NSData * _Nonnull' index='0' name='messageData' type64='@'/>
<arg declared_type64='void (^ _Nullable)(NSData * _Nullable)' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<arg declared_type64='NSData * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='protocolConfiguration'>
<retval declared_type64='NEVPNProtocol * _Nonnull' type64='@'/>
</method>
<method selector='reasserting'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='routingMethod'>
<retval declared_type64='NETunnelProviderRoutingMethod' type64='q'/>
</method>
<method selector='setReasserting:'>
<arg declared_type64='BOOL' index='0' name='reasserting' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTunnelNetworkSettings:completionHandler:'>
<arg declared_type64='NETunnelNetworkSettings * _Nullable' index='0' name='tunnelNetworkSettings' type64='@'/>
<arg declared_type64='void (^ _Nullable)(NSError * _Nullable)' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NETunnelProviderManager'>
<method selector='copyAppRules'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method class_method='true' selector='loadAllFromPreferencesWithCompletionHandler:'>
<arg declared_type64='void (^ _Nonnull)(NSArray * _Nullable, NSError * _Nullable)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='NSArray * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='routingMethod'>
<retval declared_type64='NETunnelProviderRoutingMethod' type64='q'/>
</method>
</class>
<class name='NETunnelProviderProtocol'>
<method selector='providerBundleIdentifier'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='providerConfiguration'>
<retval declared_type64='NSDictionary * _Nullable' type64='@'/>
</method>
<method selector='setProviderBundleIdentifier:'>
<arg declared_type64='NSString * _Nullable' index='0' name='providerBundleIdentifier' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setProviderConfiguration:'>
<arg declared_type64='NSDictionary * _Nullable' index='0' name='providerConfiguration' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NETunnelProviderSession'>
<method selector='sendProviderMessage:returnError:responseHandler:'>
<arg declared_type64='NSData * _Nonnull' index='0' name='messageData' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='1' name='error' type64='^@'/>
<arg declared_type64='void (^ _Nullable)(NSData * _Nullable)' function_pointer='true' index='2' name='responseHandler' type64='@?'>
<arg declared_type64='NSData * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='startTunnelWithOptions:andReturnError:'>
<arg declared_type64='NSDictionary * _Nullable' index='0' name='options' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='1' name='error' type64='^@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='stopTunnel'>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NEVPNConnection'>
<method selector='connectedDate'>
<retval declared_type64='NSDate * _Nullable' type64='@'/>
</method>
<method selector='manager'>
<retval declared_type64='NEVPNManager * _Nonnull' type64='@'/>
</method>
<method selector='startVPNTunnelAndReturnError:'>
<arg declared_type64='NSError * _Nullable * _Nullable' index='0' name='error' type64='^@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='startVPNTunnelWithOptions:andReturnError:'>
<arg declared_type64='NSDictionary * _Nullable' index='0' name='options' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='1' name='error' type64='^@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='status'>
<retval declared_type64='NEVPNStatus' type64='q'/>
</method>
<method selector='stopVPNTunnel'>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NEVPNIKEv2SecurityAssociationParameters'>
<method selector='diffieHellmanGroup'>
<retval declared_type64='NEVPNIKEv2DiffieHellmanGroup' type64='q'/>
</method>
<method selector='encryptionAlgorithm'>
<retval declared_type64='NEVPNIKEv2EncryptionAlgorithm' type64='q'/>
</method>
<method selector='integrityAlgorithm'>
<retval declared_type64='NEVPNIKEv2IntegrityAlgorithm' type64='q'/>
</method>
<method selector='lifetimeMinutes'>
<retval declared_type64='int32_t' type64='i'/>
</method>
<method selector='setDiffieHellmanGroup:'>
<arg declared_type64='NEVPNIKEv2DiffieHellmanGroup' index='0' name='diffieHellmanGroup' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEncryptionAlgorithm:'>
<arg declared_type64='NEVPNIKEv2EncryptionAlgorithm' index='0' name='encryptionAlgorithm' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIntegrityAlgorithm:'>
<arg declared_type64='NEVPNIKEv2IntegrityAlgorithm' index='0' name='integrityAlgorithm' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLifetimeMinutes:'>
<arg declared_type64='int32_t' index='0' name='lifetimeMinutes' type64='i'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NEVPNManager'>
<method selector='connection'>
<retval declared_type64='NEVPNConnection * _Nonnull' type64='@'/>
</method>
<method selector='isEnabled'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isOnDemandEnabled'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='loadFromPreferencesWithCompletionHandler:'>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='localizedDescription'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='onDemandRules'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='protocol'>
<retval declared_type64='NEVPNProtocol * _Nullable' type64='@'/>
</method>
<method selector='protocolConfiguration'>
<retval declared_type64='NEVPNProtocol * _Nullable' type64='@'/>
</method>
<method selector='removeFromPreferencesWithCompletionHandler:'>
<arg declared_type64='void (^ _Nullable)(NSError * _Nullable)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='saveToPreferencesWithCompletionHandler:'>
<arg declared_type64='void (^ _Nullable)(NSError * _Nullable)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setAuthorization:'>
<arg declared_type64='AuthorizationRef _Nonnull' index='0' name='authorization' type64='^{AuthorizationOpaqueRef=}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEnabled:'>
<arg declared_type64='BOOL' index='0' name='enabled' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLocalizedDescription:'>
<arg declared_type64='NSString * _Nullable' index='0' name='localizedDescription' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOnDemandEnabled:'>
<arg declared_type64='BOOL' index='0' name='onDemandEnabled' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOnDemandRules:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='onDemandRules' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setProtocol:'>
<arg declared_type64='NEVPNProtocol * _Nullable' index='0' name='protocol' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setProtocolConfiguration:'>
<arg declared_type64='NEVPNProtocol * _Nullable' index='0' name='protocolConfiguration' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='sharedManager'>
<retval declared_type64='NEVPNManager * _Nonnull' type64='@'/>
</method>
</class>
<class name='NEVPNProtocol'>
<method selector='disconnectOnSleep'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='excludeLocalNetworks'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='identityData'>
<retval declared_type64='NSData * _Nullable' type64='@'/>
</method>
<method selector='identityDataPassword'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='identityReference'>
<retval declared_type64='NSData * _Nullable' type64='@'/>
</method>
<method selector='includeAllNetworks'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='passwordReference'>
<retval declared_type64='NSData * _Nullable' type64='@'/>
</method>
<method selector='proxySettings'>
<retval declared_type64='NEProxySettings * _Nullable' type64='@'/>
</method>
<method selector='serverAddress'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='setDisconnectOnSleep:'>
<arg declared_type64='BOOL' index='0' name='disconnectOnSleep' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setExcludeLocalNetworks:'>
<arg declared_type64='BOOL' index='0' name='excludeLocalNetworks' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIdentityData:'>
<arg declared_type64='NSData * _Nullable' index='0' name='identityData' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIdentityDataPassword:'>
<arg declared_type64='NSString * _Nullable' index='0' name='identityDataPassword' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIdentityReference:'>
<arg declared_type64='NSData * _Nullable' index='0' name='identityReference' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIncludeAllNetworks:'>
<arg declared_type64='BOOL' index='0' name='includeAllNetworks' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPasswordReference:'>
<arg declared_type64='NSData * _Nullable' index='0' name='passwordReference' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setProxySettings:'>
<arg declared_type64='NEProxySettings * _Nullable' index='0' name='proxySettings' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setServerAddress:'>
<arg declared_type64='NSString * _Nullable' index='0' name='serverAddress' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUsername:'>
<arg declared_type64='NSString * _Nullable' index='0' name='username' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='username'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
</class>
<class name='NEVPNProtocolIKEv2'>
<method selector='IKESecurityAssociationParameters'>
<retval declared_type64='NEVPNIKEv2SecurityAssociationParameters * _Nonnull' type64='@'/>
</method>
<method selector='certificateType'>
<retval declared_type64='NEVPNIKEv2CertificateType' type64='q'/>
</method>
<method selector='childSecurityAssociationParameters'>
<retval declared_type64='NEVPNIKEv2SecurityAssociationParameters * _Nonnull' type64='@'/>
</method>
<method selector='deadPeerDetectionRate'>
<retval declared_type64='NEVPNIKEv2DeadPeerDetectionRate' type64='q'/>
</method>
<method selector='disableMOBIKE'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='disableRedirect'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='enablePFS'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='enableRevocationCheck'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='maximumTLSVersion'>
<retval declared_type64='NEVPNIKEv2TLSVersion' type64='q'/>
</method>
<method selector='minimumTLSVersion'>
<retval declared_type64='NEVPNIKEv2TLSVersion' type64='q'/>
</method>
<method selector='serverCertificateCommonName'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='serverCertificateIssuerCommonName'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='setCertificateType:'>
<arg declared_type64='NEVPNIKEv2CertificateType' index='0' name='certificateType' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDeadPeerDetectionRate:'>
<arg declared_type64='NEVPNIKEv2DeadPeerDetectionRate' index='0' name='deadPeerDetectionRate' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDisableMOBIKE:'>
<arg declared_type64='BOOL' index='0' name='disableMOBIKE' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDisableRedirect:'>
<arg declared_type64='BOOL' index='0' name='disableRedirect' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEnablePFS:'>
<arg declared_type64='BOOL' index='0' name='enablePFS' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEnableRevocationCheck:'>
<arg declared_type64='BOOL' index='0' name='enableRevocationCheck' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaximumTLSVersion:'>
<arg declared_type64='NEVPNIKEv2TLSVersion' index='0' name='maximumTLSVersion' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMinimumTLSVersion:'>
<arg declared_type64='NEVPNIKEv2TLSVersion' index='0' name='minimumTLSVersion' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setServerCertificateCommonName:'>
<arg declared_type64='NSString * _Nullable' index='0' name='serverCertificateCommonName' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setServerCertificateIssuerCommonName:'>
<arg declared_type64='NSString * _Nullable' index='0' name='serverCertificateIssuerCommonName' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStrictRevocationCheck:'>
<arg declared_type64='BOOL' index='0' name='strictRevocationCheck' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUseConfigurationAttributeInternalIPSubnet:'>
<arg declared_type64='BOOL' index='0' name='useConfigurationAttributeInternalIPSubnet' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='strictRevocationCheck'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='useConfigurationAttributeInternalIPSubnet'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='NEVPNProtocolIPSec'>
<method selector='authenticationMethod'>
<retval declared_type64='NEVPNIKEAuthenticationMethod' type64='q'/>
</method>
<method selector='localIdentifier'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='remoteIdentifier'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='setAuthenticationMethod:'>
<arg declared_type64='NEVPNIKEAuthenticationMethod' index='0' name='authenticationMethod' type64='q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLocalIdentifier:'>
<arg declared_type64='NSString * _Nullable' index='0' name='localIdentifier' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRemoteIdentifier:'>
<arg declared_type64='NSString * _Nullable' index='0' name='remoteIdentifier' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSharedSecretReference:'>
<arg declared_type64='NSData * _Nullable' index='0' name='sharedSecretReference' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUseExtendedAuthentication:'>
<arg declared_type64='BOOL' index='0' name='useExtendedAuthentication' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sharedSecretReference'>
<retval declared_type64='NSData * _Nullable' type64='@'/>
</method>
<method selector='useExtendedAuthentication'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='NSObject'>
<method selector='evaluateTrustForConnection:peerCertificateChain:completionHandler:'>
<arg declared_type64='NWTCPConnection * _Nonnull' index='0' name='connection' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='peerCertificateChain' type64='@'/>
<arg declared_type64='void (^ _Nonnull)(SecTrustRef _Nonnull)' function_pointer='true' index='2' name='completion' type64='@?'>
<arg declared_type64='SecTrustRef _Nonnull' type64='^{__SecTrust=}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='provideIdentityForConnection:completionHandler:'>
<arg declared_type64='NWTCPConnection * _Nonnull' index='0' name='connection' type64='@'/>
<arg declared_type64='void (^ _Nonnull)(SecIdentityRef _Nonnull, NSArray * _Nonnull)' function_pointer='true' index='1' name='completion' type64='@?'>
<arg declared_type64='SecIdentityRef _Nonnull' type64='^{__SecIdentity=}'/>
<arg declared_type64='NSArray * _Nonnull' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='shouldEvaluateTrustForConnection:'>
<arg declared_type64='NWTCPConnection * _Nonnull' index='0' name='connection' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='shouldProvideIdentityForConnection:'>
<arg declared_type64='NWTCPConnection * _Nonnull' index='0' name='connection' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='NWBonjourServiceEndpoint'>
<method selector='domain'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='endpointWithName:type:domain:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='name' type64='@'/>
<arg declared_type64='NSString * _Nonnull' index='1' name='type' type64='@'/>
<arg declared_type64='NSString * _Nonnull' index='2' name='domain' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='name'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method selector='type'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
</class>
<class name='NWHostEndpoint'>
<method class_method='true' selector='endpointWithHostname:port:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='hostname' type64='@'/>
<arg declared_type64='NSString * _Nonnull' index='1' name='port' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='hostname'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method selector='port'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
</class>
<class name='NWPath'>
<method selector='isEqualToPath:'>
<arg declared_type64='NWPath * _Nonnull' index='0' name='path' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isExpensive'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='status'>
<retval declared_type64='NWPathStatus' type64='q'/>
</method>
</class>
<class name='NWTCPConnection'>
<method selector='cancel'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='connectedPath'>
<retval declared_type64='NWPath * _Nullable' type64='@'/>
</method>
<method selector='endpoint'>
<retval declared_type64='NWEndpoint * _Nonnull' type64='@'/>
</method>
<method selector='error'>
<retval declared_type64='NSError * _Nullable' type64='@'/>
</method>
<method selector='hasBetterPath'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='initWithUpgradeForConnection:'>
<arg declared_type64='NWTCPConnection * _Nonnull' index='0' name='connection' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='isViable'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='localAddress'>
<retval declared_type64='NWEndpoint * _Nullable' type64='@'/>
</method>
<method selector='readLength:completionHandler:'>
<arg declared_type64='NSUInteger' index='0' name='length' type64='Q'/>
<arg declared_type64='void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable)' function_pointer='true' index='1' name='completion' type64='@?'>
<arg declared_type64='NSData * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='readMinimumLength:maximumLength:completionHandler:'>
<arg declared_type64='NSUInteger' index='0' name='minimum' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='maximum' type64='Q'/>
<arg declared_type64='void (^ _Nonnull)(NSData * _Nullable, NSError * _Nullable)' function_pointer='true' index='2' name='completion' type64='@?'>
<arg declared_type64='NSData * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='remoteAddress'>
<retval declared_type64='NWEndpoint * _Nullable' type64='@'/>
</method>
<method selector='state'>
<retval declared_type64='NWTCPConnectionState' type64='q'/>
</method>
<method selector='txtRecord'>
<retval declared_type64='NSData * _Nullable' type64='@'/>
</method>
<method selector='write:completionHandler:'>
<arg declared_type64='NSData * _Nonnull' index='0' name='data' type64='@'/>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='1' name='completion' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='writeClose'>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NWTLSParameters'>
<method selector='SSLCipherSuites'>
<retval declared_type64='NSSet * _Nullable' type64='@'/>
</method>
<method selector='TLSSessionID'>
<retval declared_type64='NSData * _Nullable' type64='@'/>
</method>
<method selector='maximumSSLProtocolVersion'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='minimumSSLProtocolVersion'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setMaximumSSLProtocolVersion:'>
<arg declared_type64='NSUInteger' index='0' name='maximumSSLProtocolVersion' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMinimumSSLProtocolVersion:'>
<arg declared_type64='NSUInteger' index='0' name='minimumSSLProtocolVersion' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSSLCipherSuites:'>
<arg declared_type64='NSSet * _Nullable' index='0' name='SSLCipherSuites' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTLSSessionID:'>
<arg declared_type64='NSData * _Nullable' index='0' name='TLSSessionID' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NWUDPSession'>
<method selector='cancel'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='currentPath'>
<retval declared_type64='NWPath * _Nullable' type64='@'/>
</method>
<method selector='endpoint'>
<retval declared_type64='NWEndpoint * _Nonnull' type64='@'/>
</method>
<method selector='hasBetterPath'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='initWithUpgradeForSession:'>
<arg declared_type64='NWUDPSession * _Nonnull' index='0' name='session' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='isViable'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='maximumDatagramLength'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='resolvedEndpoint'>
<retval declared_type64='NWEndpoint * _Nullable' type64='@'/>
</method>
<method selector='setReadHandler:maxDatagrams:'>
<arg declared_type64='void (^ _Nonnull)(NSArray * _Nullable, NSError * _Nullable)' function_pointer='true' index='0' name='handler' type64='@?'>
<arg declared_type64='NSArray * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='NSUInteger' index='1' name='maxDatagrams' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='state'>
<retval declared_type64='NWUDPSessionState' type64='q'/>
</method>
<method selector='tryNextResolvedEndpoint'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='writeDatagram:completionHandler:'>
<arg declared_type64='NSData * _Nonnull' index='0' name='datagram' type64='@'/>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='writeMultipleDatagrams:completionHandler:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='datagramArray' type64='@'/>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<informal_protocol name='NWTCPConnectionAuthenticationDelegate'>
<method selector='evaluateTrustForConnection:peerCertificateChain:completionHandler:' type64='v40@0:8@16@24@?32'>
<arg declared_type64='NWTCPConnection * _Nonnull' index='0' name='connection' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='peerCertificateChain' type64='@'/>
<arg declared_type64='void (^ _Nonnull)(SecTrustRef _Nonnull)' function_pointer='true' index='2' name='completion' type64='@?'>
<arg declared_type64='SecTrustRef _Nonnull' type64='^{__SecTrust=}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='provideIdentityForConnection:completionHandler:' type64='v32@0:8@16@?24'>
<arg declared_type64='NWTCPConnection * _Nonnull' index='0' name='connection' type64='@'/>
<arg declared_type64='void (^ _Nonnull)(SecIdentityRef _Nonnull, NSArray * _Nonnull)' function_pointer='true' index='1' name='completion' type64='@?'>
<arg declared_type64='SecIdentityRef _Nonnull' type64='^{__SecIdentity=}'/>
<arg declared_type64='NSArray * _Nonnull' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='shouldEvaluateTrustForConnection:' type64='B24@0:8@16'>
<arg declared_type64='NWTCPConnection * _Nonnull' index='0' name='connection' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='shouldProvideIdentityForConnection:' type64='B24@0:8@16'>
<arg declared_type64='NWTCPConnection * _Nonnull' index='0' name='connection' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
</informal_protocol>
</signatures>
