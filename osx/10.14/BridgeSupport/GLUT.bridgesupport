<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='BitmapCharPtr' type64='{_BitmapCharPtr=&quot;width&quot;i&quot;height&quot;i&quot;xorig&quot;f&quot;yorig&quot;f&quot;advance&quot;f&quot;bitmap&quot;*}'>
<field const='true' declared_type64='GLsizei' name='width' type64='i'/>
<field const='true' declared_type64='GLsizei' name='height' type64='i'/>
<field const='true' declared_type64='GLfloat' name='xorig' type64='f'/>
<field const='true' declared_type64='GLfloat' name='yorig' type64='f'/>
<field const='true' declared_type64='GLfloat' name='advance' type64='f'/>
<field const='true' declared_type64='GLubyte*' name='bitmap' type64='*'/>
</struct>
<struct name='BitmapCharRec' type64='{_BitmapCharRec=&quot;width&quot;i&quot;height&quot;i&quot;xorig&quot;f&quot;yorig&quot;f&quot;advance&quot;f&quot;bitmap&quot;*}'>
<field const='true' declared_type64='GLsizei' name='width' type64='i'/>
<field const='true' declared_type64='GLsizei' name='height' type64='i'/>
<field const='true' declared_type64='GLfloat' name='xorig' type64='f'/>
<field const='true' declared_type64='GLfloat' name='yorig' type64='f'/>
<field const='true' declared_type64='GLfloat' name='advance' type64='f'/>
<field const='true' declared_type64='GLubyte*' name='bitmap' type64='*'/>
</struct>
<struct name='BitmapFontPtr' type64='{_BitmapFontPtr=&quot;name&quot;*&quot;num_chars&quot;i&quot;first&quot;i&quot;ch&quot;^^{?}}'>
<field const='true' declared_type64='char*' name='name' type64='*'/>
<field const='true' declared_type64='int' name='num_chars' type64='i'/>
<field const='true' declared_type64='int' name='first' type64='i'/>
<field const='true' declared_type64='BitmapCharRec **' name='ch' type64='^^{?}'/>
</struct>
<struct name='BitmapFontRec' type64='{_BitmapFontRec=&quot;name&quot;*&quot;num_chars&quot;i&quot;first&quot;i&quot;ch&quot;^^{?}}'>
<field const='true' declared_type64='char*' name='name' type64='*'/>
<field const='true' declared_type64='int' name='num_chars' type64='i'/>
<field const='true' declared_type64='int' name='first' type64='i'/>
<field const='true' declared_type64='BitmapCharRec **' name='ch' type64='^^{?}'/>
</struct>
<struct name='CoordPtr' type64='{_CoordPtr=&quot;x&quot;f&quot;y&quot;f}'>
<field declared_type64='float' name='x' type64='f'/>
<field declared_type64='float' name='y' type64='f'/>
</struct>
<struct name='CoordRec' type64='{_CoordRec=&quot;x&quot;f&quot;y&quot;f}'>
<field declared_type64='float' name='x' type64='f'/>
<field declared_type64='float' name='y' type64='f'/>
</struct>
<struct name='STXY' type64='{_STXY=&quot;s&quot;f&quot;t&quot;f&quot;x&quot;f&quot;y&quot;f}'>
<field declared_type64='GLfloat' name='s' type64='f'/>
<field declared_type64='GLfloat' name='t' type64='f'/>
<field declared_type64='GLfloat' name='x' type64='f'/>
<field declared_type64='GLfloat' name='y' type64='f'/>
</struct>
<struct name='SphereMap' type64='{_SphereMap=&quot;mesh&quot;^{_SphereMapMesh}&quot;smapTexObj&quot;I&quot;viewTexObjs&quot;[6I]&quot;viewTexObj&quot;I&quot;flags&quot;i&quot;viewTexDim&quot;i&quot;smapTexDim&quot;i&quot;viewOrigin&quot;[2i]&quot;smapOrigin&quot;[2i]&quot;eye&quot;[3f]&quot;up&quot;[3f]&quot;obj&quot;[3f]&quot;viewNear&quot;f&quot;viewFar&quot;f&quot;positionLights&quot;^?&quot;drawView&quot;^?&quot;context&quot;^v}'>
<field declared_type64='SphereMapMesh*' name='mesh' type64='^{_SphereMapMesh=iiii^{_STXY}^{_STXY}}'/>
<field declared_type64='GLuint' name='smapTexObj' type64='I'/>
<field declared_type64='GLuint*' name='viewTexObjs' type64='[6I]'/>
<field declared_type64='GLuint' name='viewTexObj' type64='I'/>
<field declared_type64='SphereMapFlags' name='flags' type64='i'/>
<field declared_type64='int' name='viewTexDim' type64='i'/>
<field declared_type64='int' name='smapTexDim' type64='i'/>
<field declared_type64='int*' name='viewOrigin' type64='[2i]'/>
<field declared_type64='int*' name='smapOrigin' type64='[2i]'/>
<field declared_type64='GLfloat*' name='eye' type64='[3f]'/>
<field declared_type64='GLfloat*' name='up' type64='[3f]'/>
<field declared_type64='GLfloat*' name='obj' type64='[3f]'/>
<field declared_type64='GLfloat' name='viewNear' type64='f'/>
<field declared_type64='GLfloat' name='viewFar' type64='f'/>
<field declared_type64='void (*)(int, void *)' function_pointer='true' name='positionLights' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(int, void *)' function_pointer='true' name='drawView' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void*' name='context' type64='^v'/>
</struct>
<struct name='SphereMapMesh' type64='{_SphereMapMesh=&quot;refcnt&quot;i&quot;steps&quot;i&quot;rings&quot;i&quot;edgeExtend&quot;i&quot;face&quot;^{_STXY}&quot;back&quot;^{_STXY}}'>
<field declared_type64='int' name='refcnt' type64='i'/>
<field declared_type64='int' name='steps' type64='i'/>
<field declared_type64='int' name='rings' type64='i'/>
<field declared_type64='int' name='edgeExtend' type64='i'/>
<field declared_type64='STXY*' name='face' type64='^{_STXY=ffff}'/>
<field declared_type64='STXY*' name='back' type64='^{_STXY=ffff}'/>
</struct>
<struct name='StrokeCharPtr' type64='{_StrokeCharPtr=&quot;num_strokes&quot;i&quot;stroke&quot;^{_StrokeRec=&quot;num_coords&quot;i&quot;coord&quot;^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}}&quot;center&quot;f&quot;right&quot;f}'>
<field declared_type64='int' name='num_strokes' type64='i'/>
<field const='true' declared_type64='StrokeRec*' name='stroke' type64='^{_StrokeRec=&quot;num_coords&quot;i&quot;coord&quot;^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}}'/>
<field declared_type64='float' name='center' type64='f'/>
<field declared_type64='float' name='right' type64='f'/>
</struct>
<struct name='StrokeCharRec' type64='{_StrokeCharRec=&quot;num_strokes&quot;i&quot;stroke&quot;^{_StrokeRec=&quot;num_coords&quot;i&quot;coord&quot;^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}}&quot;center&quot;f&quot;right&quot;f}'>
<field declared_type64='int' name='num_strokes' type64='i'/>
<field const='true' declared_type64='StrokeRec*' name='stroke' type64='^{_StrokeRec=&quot;num_coords&quot;i&quot;coord&quot;^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}}'/>
<field declared_type64='float' name='center' type64='f'/>
<field declared_type64='float' name='right' type64='f'/>
</struct>
<struct name='StrokeFontPtr' type64='{_StrokeFontPtr=&quot;name&quot;*&quot;num_chars&quot;i&quot;ch&quot;^{_StrokeCharRec=&quot;num_strokes&quot;i&quot;stroke&quot;^{_StrokeRec=&quot;num_coords&quot;i&quot;coord&quot;^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}}&quot;center&quot;f&quot;right&quot;f}&quot;top&quot;f&quot;bottom&quot;f}'>
<field const='true' declared_type64='char*' name='name' type64='*'/>
<field declared_type64='int' name='num_chars' type64='i'/>
<field const='true' declared_type64='StrokeCharRec*' name='ch' type64='^{_StrokeCharRec=&quot;num_strokes&quot;i&quot;stroke&quot;^{_StrokeRec=&quot;num_coords&quot;i&quot;coord&quot;^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}}&quot;center&quot;f&quot;right&quot;f}'/>
<field declared_type64='float' name='top' type64='f'/>
<field declared_type64='float' name='bottom' type64='f'/>
</struct>
<struct name='StrokeFontRec' type64='{_StrokeFontRec=&quot;name&quot;*&quot;num_chars&quot;i&quot;ch&quot;^{_StrokeCharRec=&quot;num_strokes&quot;i&quot;stroke&quot;^{_StrokeRec=&quot;num_coords&quot;i&quot;coord&quot;^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}}&quot;center&quot;f&quot;right&quot;f}&quot;top&quot;f&quot;bottom&quot;f}'>
<field const='true' declared_type64='char*' name='name' type64='*'/>
<field declared_type64='int' name='num_chars' type64='i'/>
<field const='true' declared_type64='StrokeCharRec*' name='ch' type64='^{_StrokeCharRec=&quot;num_strokes&quot;i&quot;stroke&quot;^{_StrokeRec=&quot;num_coords&quot;i&quot;coord&quot;^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}}&quot;center&quot;f&quot;right&quot;f}'/>
<field declared_type64='float' name='top' type64='f'/>
<field declared_type64='float' name='bottom' type64='f'/>
</struct>
<struct name='StrokePtr' type64='{_StrokePtr=&quot;num_coords&quot;i&quot;coord&quot;^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}}'>
<field declared_type64='int' name='num_coords' type64='i'/>
<field const='true' declared_type64='CoordRec*' name='coord' type64='^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}'/>
</struct>
<struct name='StrokeRec' type64='{_StrokeRec=&quot;num_coords&quot;i&quot;coord&quot;^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}}'>
<field declared_type64='int' name='num_coords' type64='i'/>
<field const='true' declared_type64='CoordRec*' name='coord' type64='^{_CoordRec=&quot;x&quot;f&quot;y&quot;f}'/>
</struct>
<struct name='gleGC' type64='{_gleGC=&quot;bgn_gen_texture&quot;^?&quot;n3f_gen_texture&quot;^?&quot;n3d_gen_texture&quot;^?&quot;v3f_gen_texture&quot;^?&quot;v3d_gen_texture&quot;^?&quot;end_gen_texture&quot;^?&quot;join_style&quot;i&quot;ncp&quot;i&quot;contour&quot;^[2d]&quot;cont_normal&quot;^[2d]&quot;up&quot;^d&quot;npoints&quot;i&quot;point_array&quot;^[3d]&quot;color_array&quot;^[3f]&quot;xform_array&quot;^[2[3d]]&quot;num_vert&quot;i&quot;segment_number&quot;i&quot;segment_length&quot;d&quot;accum_seg_len&quot;d&quot;prev_x&quot;d&quot;prev_y&quot;d&quot;save_bgn_gen_texture&quot;^?&quot;save_n3f_gen_texture&quot;^?&quot;save_n3d_gen_texture&quot;^?&quot;save_v3f_gen_texture&quot;^?&quot;save_v3d_gen_texture&quot;^?&quot;save_end_gen_texture&quot;^?}'>
<field declared_type64='void (*)(int, double)' function_pointer='true' name='bgn_gen_texture' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='double' type64='d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(float *)' function_pointer='true' name='n3f_gen_texture' type64='^?'>
<arg declared_type64='float*' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(double *)' function_pointer='true' name='n3d_gen_texture' type64='^?'>
<arg declared_type64='double*' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(float *, int, int)' function_pointer='true' name='v3f_gen_texture' type64='^?'>
<arg declared_type64='float*' type64='^f'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(double *, int, int)' function_pointer='true' name='v3d_gen_texture' type64='^?'>
<arg declared_type64='double*' type64='^d'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(void)' function_pointer='true' name='end_gen_texture' type64='^?'>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='int' name='join_style' type64='i'/>
<field declared_type64='int' name='ncp' type64='i'/>
<field declared_type64='gleTwoVec*' name='contour' type64='^[2d]'/>
<field declared_type64='gleTwoVec*' name='cont_normal' type64='^[2d]'/>
<field declared_type64='double*' name='up' type64='^d'/>
<field declared_type64='int' name='npoints' type64='i'/>
<field declared_type64='gleVector*' name='point_array' type64='^[3d]'/>
<field declared_type64='gleColor*' name='color_array' type64='^[3f]'/>
<field declared_type64='gleAffine*' name='xform_array' type64='^[2[3d]]'/>
<field declared_type64='int' name='num_vert' type64='i'/>
<field declared_type64='int' name='segment_number' type64='i'/>
<field declared_type64='double' name='segment_length' type64='d'/>
<field declared_type64='double' name='accum_seg_len' type64='d'/>
<field declared_type64='double' name='prev_x' type64='d'/>
<field declared_type64='double' name='prev_y' type64='d'/>
<field declared_type64='void (*)(int, double)' function_pointer='true' name='save_bgn_gen_texture' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='double' type64='d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(float *)' function_pointer='true' name='save_n3f_gen_texture' type64='^?'>
<arg declared_type64='float*' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(double *)' function_pointer='true' name='save_n3d_gen_texture' type64='^?'>
<arg declared_type64='double*' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(float *, int, int)' function_pointer='true' name='save_v3f_gen_texture' type64='^?'>
<arg declared_type64='float*' type64='^f'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(double *, int, int)' function_pointer='true' name='save_v3d_gen_texture' type64='^?'>
<arg declared_type64='double*' type64='^d'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(void)' function_pointer='true' name='save_end_gen_texture' type64='^?'>
<retval declared_type64='void' type64='v'/>
</field>
</struct>
<constant declared_type64='void*' name='glutBitmap8By13' type64='^v'/>
<constant declared_type64='void*' name='glutBitmap9By15' type64='^v'/>
<constant declared_type64='void*' name='glutBitmapHelvetica10' type64='^v'/>
<constant declared_type64='void*' name='glutBitmapHelvetica12' type64='^v'/>
<constant declared_type64='void*' name='glutBitmapHelvetica18' type64='^v'/>
<constant declared_type64='void*' name='glutBitmapTimesRoman10' type64='^v'/>
<constant declared_type64='void*' name='glutBitmapTimesRoman24' type64='^v'/>
<constant declared_type64='void*' name='glutStrokeMonoRoman' type64='^v'/>
<constant declared_type64='void*' name='glutStrokeRoman' type64='^v'/>
<enum name='BACKWARDS_INTERSECT' value64='2'/>
<enum name='BACK_CAP' value64='4'/>
<enum name='DEGENERATE_TOLERANCE' value64='0.000002'/>
<enum name='FILLET' value64='5'/>
<enum name='FRONT' value64='1'/>
<enum name='FRONT_CAP' value64='3'/>
<enum name='GLE_API_VERSION' value64='228'/>
<enum name='GLE_TEXTURE_ENABLE' value64='65536'/>
<enum name='GLE_TEXTURE_NORMAL_CYL' value64='4'/>
<enum name='GLE_TEXTURE_NORMAL_FLAT' value64='2'/>
<enum name='GLE_TEXTURE_NORMAL_MODEL_CYL' value64='10'/>
<enum name='GLE_TEXTURE_NORMAL_MODEL_FLAT' value64='8'/>
<enum name='GLE_TEXTURE_NORMAL_MODEL_SPH' value64='12'/>
<enum name='GLE_TEXTURE_NORMAL_SPH' value64='6'/>
<enum name='GLE_TEXTURE_STYLE_MASK' value64='255'/>
<enum name='GLE_TEXTURE_VERTEX_CYL' value64='3'/>
<enum name='GLE_TEXTURE_VERTEX_FLAT' value64='1'/>
<enum name='GLE_TEXTURE_VERTEX_MODEL_CYL' value64='9'/>
<enum name='GLE_TEXTURE_VERTEX_MODEL_FLAT' value64='7'/>
<enum name='GLE_TEXTURE_VERTEX_MODEL_SPH' value64='11'/>
<enum name='GLE_TEXTURE_VERTEX_SPH' value64='5'/>
<enum name='GLUT_3_2_CORE_PROFILE' value64='2048'/>
<enum name='GLUT_ACCUM' value64='4'/>
<enum name='GLUT_ACTIVE_ALT' value64='4'/>
<enum name='GLUT_ACTIVE_CTRL' value64='2'/>
<enum name='GLUT_ACTIVE_SHIFT' value64='1'/>
<enum name='GLUT_ALPHA' value64='8'/>
<enum name='GLUT_API_VERSION' value64='5'/>
<enum name='GLUT_BLUE' value64='2'/>
<enum name='GLUT_CURSOR_BOTTOM_LEFT_CORNER' value64='19'/>
<enum name='GLUT_CURSOR_BOTTOM_RIGHT_CORNER' value64='18'/>
<enum name='GLUT_CURSOR_BOTTOM_SIDE' value64='13'/>
<enum name='GLUT_CURSOR_CROSSHAIR' value64='9'/>
<enum name='GLUT_CURSOR_CYCLE' value64='5'/>
<enum name='GLUT_CURSOR_DESTROY' value64='3'/>
<enum name='GLUT_CURSOR_FULL_CROSSHAIR' value64='102'/>
<enum name='GLUT_CURSOR_HELP' value64='4'/>
<enum name='GLUT_CURSOR_INFO' value64='2'/>
<enum name='GLUT_CURSOR_INHERIT' value64='100'/>
<enum name='GLUT_CURSOR_LEFT_ARROW' value64='1'/>
<enum name='GLUT_CURSOR_LEFT_RIGHT' value64='11'/>
<enum name='GLUT_CURSOR_LEFT_SIDE' value64='14'/>
<enum name='GLUT_CURSOR_NONE' value64='101'/>
<enum name='GLUT_CURSOR_RIGHT_ARROW' value64='0'/>
<enum name='GLUT_CURSOR_RIGHT_SIDE' value64='15'/>
<enum name='GLUT_CURSOR_SPRAY' value64='6'/>
<enum name='GLUT_CURSOR_TEXT' value64='8'/>
<enum name='GLUT_CURSOR_TOP_LEFT_CORNER' value64='16'/>
<enum name='GLUT_CURSOR_TOP_RIGHT_CORNER' value64='17'/>
<enum name='GLUT_CURSOR_TOP_SIDE' value64='12'/>
<enum name='GLUT_CURSOR_UP_DOWN' value64='10'/>
<enum name='GLUT_CURSOR_WAIT' value64='7'/>
<enum name='GLUT_DEPTH' value64='16'/>
<enum name='GLUT_DEVICE_IGNORE_KEY_REPEAT' value64='610'/>
<enum name='GLUT_DEVICE_KEY_REPEAT' value64='611'/>
<enum name='GLUT_DISPLAY_MODE_POSSIBLE' value64='400'/>
<enum name='GLUT_DOUBLE' value64='2'/>
<enum name='GLUT_DOWN' value64='0'/>
<enum name='GLUT_ELAPSED_TIME' value64='700'/>
<enum name='GLUT_ENTERED' value64='1'/>
<enum name='GLUT_FCB_BUTTON_BOX' value64='12'/>
<enum name='GLUT_FCB_DIALS' value64='13'/>
<enum name='GLUT_FCB_DISPLAY' value64='0'/>
<enum name='GLUT_FCB_ENTRY' value64='5'/>
<enum name='GLUT_FCB_JOYSTICK' value64='19'/>
<enum name='GLUT_FCB_KEYBOARD' value64='6'/>
<enum name='GLUT_FCB_KEYBOARD_UP' value64='7'/>
<enum name='GLUT_FCB_MOTION' value64='3'/>
<enum name='GLUT_FCB_MOUSE' value64='2'/>
<enum name='GLUT_FCB_OVERLAY_DISPLAY' value64='100'/>
<enum name='GLUT_FCB_PASSIVE' value64='4'/>
<enum name='GLUT_FCB_RESHAPE' value64='1'/>
<enum name='GLUT_FCB_SELECT' value64='101'/>
<enum name='GLUT_FCB_SPACE_BUTTON' value64='16'/>
<enum name='GLUT_FCB_SPACE_MOTION' value64='14'/>
<enum name='GLUT_FCB_SPACE_ROTATE' value64='15'/>
<enum name='GLUT_FCB_SPECIAL' value64='10'/>
<enum name='GLUT_FCB_SPECIAL_UP' value64='11'/>
<enum name='GLUT_FCB_TABLET_BUTTON' value64='18'/>
<enum name='GLUT_FCB_TABLET_MOTION' value64='17'/>
<enum name='GLUT_FCB_TIMER' value64='102'/>
<enum name='GLUT_FCB_VISIBILITY' value64='9'/>
<enum name='GLUT_FCB_WINDOW_STATUS' value64='8'/>
<enum name='GLUT_FCB_WMCLOSE' value64='20'/>
<enum name='GLUT_FULLY_COVERED' value64='3'/>
<enum name='GLUT_FULLY_RETAINED' value64='1'/>
<enum name='GLUT_GAME_MODE_ACTIVE' value64='0'/>
<enum name='GLUT_GAME_MODE_DISPLAY_CHANGED' value64='6'/>
<enum name='GLUT_GAME_MODE_HEIGHT' value64='3'/>
<enum name='GLUT_GAME_MODE_PIXEL_DEPTH' value64='4'/>
<enum name='GLUT_GAME_MODE_POSSIBLE' value64='1'/>
<enum name='GLUT_GAME_MODE_REFRESH_RATE' value64='5'/>
<enum name='GLUT_GAME_MODE_WIDTH' value64='2'/>
<enum name='GLUT_GREEN' value64='1'/>
<enum name='GLUT_HAS_DIAL_AND_BUTTON_BOX' value64='603'/>
<enum name='GLUT_HAS_JOYSTICK' value64='612'/>
<enum name='GLUT_HAS_KEYBOARD' value64='600'/>
<enum name='GLUT_HAS_MOUSE' value64='601'/>
<enum name='GLUT_HAS_OVERLAY' value64='802'/>
<enum name='GLUT_HAS_SPACEBALL' value64='602'/>
<enum name='GLUT_HAS_TABLET' value64='604'/>
<enum name='GLUT_HIDDEN' value64='0'/>
<enum name='GLUT_INDEX' value64='1'/>
<enum name='GLUT_INIT_DISPLAY_MODE' value64='504'/>
<enum name='GLUT_INIT_WINDOW_HEIGHT' value64='503'/>
<enum name='GLUT_INIT_WINDOW_WIDTH' value64='502'/>
<enum name='GLUT_INIT_WINDOW_X' value64='500'/>
<enum name='GLUT_INIT_WINDOW_Y' value64='501'/>
<enum name='GLUT_JOYSTICK_AXES' value64='615'/>
<enum name='GLUT_JOYSTICK_BUTTONS' value64='614'/>
<enum name='GLUT_JOYSTICK_BUTTON_A' value64='1'/>
<enum name='GLUT_JOYSTICK_BUTTON_B' value64='2'/>
<enum name='GLUT_JOYSTICK_BUTTON_C' value64='4'/>
<enum name='GLUT_JOYSTICK_BUTTON_D' value64='8'/>
<enum name='GLUT_JOYSTICK_POLL_RATE' value64='616'/>
<enum name='GLUT_KEY_DOWN' value64='103'/>
<enum name='GLUT_KEY_END' value64='107'/>
<enum name='GLUT_KEY_F1' value64='1'/>
<enum name='GLUT_KEY_F10' value64='10'/>
<enum name='GLUT_KEY_F11' value64='11'/>
<enum name='GLUT_KEY_F12' value64='12'/>
<enum name='GLUT_KEY_F2' value64='2'/>
<enum name='GLUT_KEY_F3' value64='3'/>
<enum name='GLUT_KEY_F4' value64='4'/>
<enum name='GLUT_KEY_F5' value64='5'/>
<enum name='GLUT_KEY_F6' value64='6'/>
<enum name='GLUT_KEY_F7' value64='7'/>
<enum name='GLUT_KEY_F8' value64='8'/>
<enum name='GLUT_KEY_F9' value64='9'/>
<enum name='GLUT_KEY_HOME' value64='106'/>
<enum name='GLUT_KEY_INSERT' value64='108'/>
<enum name='GLUT_KEY_LEFT' value64='100'/>
<enum name='GLUT_KEY_PAGE_DOWN' value64='105'/>
<enum name='GLUT_KEY_PAGE_UP' value64='104'/>
<enum name='GLUT_KEY_REPEAT_DEFAULT' value64='2'/>
<enum name='GLUT_KEY_REPEAT_OFF' value64='0'/>
<enum name='GLUT_KEY_REPEAT_ON' value64='1'/>
<enum name='GLUT_KEY_RIGHT' value64='102'/>
<enum name='GLUT_KEY_UP' value64='101'/>
<enum name='GLUT_LAYER_IN_USE' value64='801'/>
<enum name='GLUT_LEFT' value64='0'/>
<enum name='GLUT_LEFT_BUTTON' value64='0'/>
<enum name='GLUT_LUMINANCE' value64='512'/>
<enum name='GLUT_MACOSX_IMPLEMENTATION' value64='4'/>
<enum name='GLUT_MENU_IN_USE' value64='1'/>
<enum name='GLUT_MENU_NOT_IN_USE' value64='0'/>
<enum name='GLUT_MENU_NUM_ITEMS' value64='300'/>
<enum name='GLUT_MIDDLE_BUTTON' value64='1'/>
<enum name='GLUT_MULTISAMPLE' value64='128'/>
<enum name='GLUT_NORMAL' value64='0'/>
<enum name='GLUT_NORMAL_DAMAGED' value64='804'/>
<enum name='GLUT_NOT_VISIBLE' value64='0'/>
<enum name='GLUT_NO_RECOVERY' value64='1024'/>
<enum name='GLUT_NUM_BUTTON_BOX_BUTTONS' value64='607'/>
<enum name='GLUT_NUM_DIALS' value64='608'/>
<enum name='GLUT_NUM_MOUSE_BUTTONS' value64='605'/>
<enum name='GLUT_NUM_SPACEBALL_BUTTONS' value64='606'/>
<enum name='GLUT_NUM_TABLET_BUTTONS' value64='609'/>
<enum name='GLUT_OVERLAY' value64='1'/>
<enum name='GLUT_OVERLAY_DAMAGED' value64='805'/>
<enum name='GLUT_OVERLAY_POSSIBLE' value64='800'/>
<enum name='GLUT_OWNS_JOYSTICK' value64='613'/>
<enum name='GLUT_PARTIALLY_RETAINED' value64='2'/>
<enum name='GLUT_RED' value64='0'/>
<enum name='GLUT_RGB' value64='0'/>
<enum name='GLUT_RGBA' value64='0'/>
<enum name='GLUT_RIGHT_BUTTON' value64='2'/>
<enum name='GLUT_SCREEN_HEIGHT' value64='201'/>
<enum name='GLUT_SCREEN_HEIGHT_MM' value64='203'/>
<enum name='GLUT_SCREEN_WIDTH' value64='200'/>
<enum name='GLUT_SCREEN_WIDTH_MM' value64='202'/>
<enum name='GLUT_SINGLE' value64='0'/>
<enum name='GLUT_STENCIL' value64='32'/>
<enum name='GLUT_STEREO' value64='256'/>
<enum name='GLUT_TRANSPARENT_INDEX' value64='803'/>
<enum name='GLUT_UP' value64='1'/>
<enum name='GLUT_VIDEO_RESIZE_HEIGHT' value64='909'/>
<enum name='GLUT_VIDEO_RESIZE_HEIGHT_DELTA' value64='905'/>
<enum name='GLUT_VIDEO_RESIZE_IN_USE' value64='901'/>
<enum name='GLUT_VIDEO_RESIZE_POSSIBLE' value64='900'/>
<enum name='GLUT_VIDEO_RESIZE_WIDTH' value64='908'/>
<enum name='GLUT_VIDEO_RESIZE_WIDTH_DELTA' value64='904'/>
<enum name='GLUT_VIDEO_RESIZE_X' value64='906'/>
<enum name='GLUT_VIDEO_RESIZE_X_DELTA' value64='902'/>
<enum name='GLUT_VIDEO_RESIZE_Y' value64='907'/>
<enum name='GLUT_VIDEO_RESIZE_Y_DELTA' value64='903'/>
<enum name='GLUT_VISIBLE' value64='1'/>
<enum name='GLUT_WINDOW_ACCUM_ALPHA_SIZE' value64='114'/>
<enum name='GLUT_WINDOW_ACCUM_BLUE_SIZE' value64='113'/>
<enum name='GLUT_WINDOW_ACCUM_GREEN_SIZE' value64='112'/>
<enum name='GLUT_WINDOW_ACCUM_RED_SIZE' value64='111'/>
<enum name='GLUT_WINDOW_ALPHA_SIZE' value64='110'/>
<enum name='GLUT_WINDOW_BLUE_SIZE' value64='109'/>
<enum name='GLUT_WINDOW_BUFFER_SIZE' value64='104'/>
<enum name='GLUT_WINDOW_COLORMAP_SIZE' value64='119'/>
<enum name='GLUT_WINDOW_CURSOR' value64='122'/>
<enum name='GLUT_WINDOW_DEPTH_SIZE' value64='106'/>
<enum name='GLUT_WINDOW_DOUBLEBUFFER' value64='115'/>
<enum name='GLUT_WINDOW_FORMAT_ID' value64='123'/>
<enum name='GLUT_WINDOW_GREEN_SIZE' value64='108'/>
<enum name='GLUT_WINDOW_HEIGHT' value64='103'/>
<enum name='GLUT_WINDOW_NUM_CHILDREN' value64='118'/>
<enum name='GLUT_WINDOW_NUM_SAMPLES' value64='120'/>
<enum name='GLUT_WINDOW_PARENT' value64='117'/>
<enum name='GLUT_WINDOW_RED_SIZE' value64='107'/>
<enum name='GLUT_WINDOW_RGBA' value64='116'/>
<enum name='GLUT_WINDOW_STENCIL_SIZE' value64='105'/>
<enum name='GLUT_WINDOW_STEREO' value64='121'/>
<enum name='GLUT_WINDOW_WIDTH' value64='102'/>
<enum name='GLUT_WINDOW_X' value64='100'/>
<enum name='GLUT_WINDOW_Y' value64='101'/>
<enum name='GLUT_XLIB_IMPLEMENTATION' value64='15'/>
<enum name='SMAP_BACK' value64='5'/>
<enum name='SMAP_BOTTOM' value64='2'/>
<enum name='SMAP_CLEAR_SMAP_TEXTURE' value64='1'/>
<enum name='SMAP_FRONT' value64='0'/>
<enum name='SMAP_GENERATE_MIPMAPS' value64='6'/>
<enum name='SMAP_GENERATE_SMAP_MIPMAPS' value64='4'/>
<enum name='SMAP_GENERATE_VIEW_MIPMAPS' value64='2'/>
<enum name='SMAP_LEFT' value64='3'/>
<enum name='SMAP_RIGHT' value64='4'/>
<enum name='SMAP_TOP' value64='1'/>
<enum name='TUBE_CONTOUR_CLOSED' value64='4096'/>
<enum name='TUBE_JN_ANGLE' value64='2'/>
<enum name='TUBE_JN_CAP' value64='16'/>
<enum name='TUBE_JN_CUT' value64='3'/>
<enum name='TUBE_JN_MASK' value64='15'/>
<enum name='TUBE_JN_RAW' value64='1'/>
<enum name='TUBE_JN_ROUND' value64='4'/>
<enum name='TUBE_NORM_EDGE' value64='512'/>
<enum name='TUBE_NORM_FACET' value64='256'/>
<enum name='TUBE_NORM_MASK' value64='3840'/>
<enum name='TUBE_NORM_PATH_EDGE' value64='1024'/>
<enum name='X' value64='0'/>
<enum name='Y' value64='1'/>
<enum name='Z' value64='2'/>
<function name='bisecting_plane'>
<arg declared_type64='double*' name='n' type64='^d'/>
<arg declared_type64='double*' name='v1' type64='^d'/>
<arg declared_type64='double*' name='v2' type64='^d'/>
<arg declared_type64='double*' name='v3' type64='^d'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='draw_angle_style_back_cap'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double*' name='bi' type64='^d'/>
<arg declared_type64='double (*)*' name='point_array' type64='^[3d]'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='draw_angle_style_front_cap'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double*' name='bi' type64='^d'/>
<arg declared_type64='double (*)*' name='point_array' type64='^[3d]'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='draw_binorm_segment_c_and_edge_n'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double (*)*' name='front_contour' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='back_contour' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='front_norm' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='back_norm' type64='^[3d]'/>
<arg declared_type64='float*' name='color_last' type64='^f'/>
<arg declared_type64='float*' name='color_next' type64='^f'/>
<arg declared_type64='int' name='inext' type64='i'/>
<arg declared_type64='double' name='len' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='draw_binorm_segment_c_and_facet_n'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double (*)*' name='front_contour' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='back_contour' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='front_norm' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='back_norm' type64='^[3d]'/>
<arg declared_type64='float*' name='color_last' type64='^f'/>
<arg declared_type64='float*' name='color_next' type64='^f'/>
<arg declared_type64='int' name='inext' type64='i'/>
<arg declared_type64='double' name='len' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='draw_binorm_segment_edge_n'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double (*)*' name='front_contour' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='back_contour' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='front_norm' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='back_norm' type64='^[3d]'/>
<arg declared_type64='int' name='inext' type64='i'/>
<arg declared_type64='double' name='len' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='draw_binorm_segment_facet_n'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double (*)*' name='front_contour' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='back_contour' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='front_norm' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='back_norm' type64='^[3d]'/>
<arg declared_type64='int' name='inext' type64='i'/>
<arg declared_type64='double' name='len' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='draw_raw_style_end_cap'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double (*)*' name='contour' type64='^[2d]'/>
<arg declared_type64='double' name='zval' type64='d'/>
<arg declared_type64='int' name='frontwards' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='draw_round_style_cap_callback'>
<arg declared_type64='int' name='iloop' type64='i'/>
<arg declared_type64='double (*)*' name='cap' type64='^[3d]'/>
<arg declared_type64='float*' name='face_color' type64='^f'/>
<arg declared_type64='double*' name='cut_vector' type64='^d'/>
<arg declared_type64='double*' name='bisect_vector' type64='^d'/>
<arg declared_type64='double (*)*' name='norms' type64='^[3d]'/>
<arg declared_type64='int' name='frontwards' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='draw_segment_c_and_edge_n'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double (*)*' name='front_contour' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='back_contour' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='norm_cont' type64='^[3d]'/>
<arg declared_type64='float*' name='color_last' type64='^f'/>
<arg declared_type64='float*' name='color_next' type64='^f'/>
<arg declared_type64='int' name='inext' type64='i'/>
<arg declared_type64='double' name='len' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='draw_segment_c_and_facet_n'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double (*)*' name='front_contour' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='back_contour' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='norm_cont' type64='^[3d]'/>
<arg declared_type64='float*' name='color_last' type64='^f'/>
<arg declared_type64='float*' name='color_next' type64='^f'/>
<arg declared_type64='int' name='inext' type64='i'/>
<arg declared_type64='double' name='len' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='draw_segment_color'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double (*)*' name='front_contour' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='back_contour' type64='^[3d]'/>
<arg declared_type64='float*' name='color_last' type64='^f'/>
<arg declared_type64='float*' name='color_next' type64='^f'/>
<arg declared_type64='int' name='inext' type64='i'/>
<arg declared_type64='double' name='len' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='draw_segment_edge_n'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double (*)*' name='front_contour' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='back_contour' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='norm_cont' type64='^[3d]'/>
<arg declared_type64='int' name='inext' type64='i'/>
<arg declared_type64='double' name='len' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='draw_segment_facet_n'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double (*)*' name='front_contour' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='back_contour' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='norm_cont' type64='^[3d]'/>
<arg declared_type64='int' name='inext' type64='i'/>
<arg declared_type64='double' name='len' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='draw_segment_plain'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double (*)*' name='front_contour' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='back_contour' type64='^[3d]'/>
<arg declared_type64='int' name='inext' type64='i'/>
<arg declared_type64='double' name='len' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='extrusion_angle_join'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double (*)*' name='contour' type64='^[2d]'/>
<arg declared_type64='double (*)*' name='cont_normal' type64='^[2d]'/>
<arg declared_type64='double*' name='up' type64='^d'/>
<arg declared_type64='int' name='npoints' type64='i'/>
<arg declared_type64='double (*)*' name='point_array' type64='^[3d]'/>
<arg declared_type64='float (*)*' name='color_array' type64='^[3f]'/>
<arg declared_type64='double (*)**' name='xform_array' type64='^[2[3d]]'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='extrusion_raw_join'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double (*)*' name='contour' type64='^[2d]'/>
<arg declared_type64='double (*)*' name='cont_normal' type64='^[2d]'/>
<arg declared_type64='double*' name='up' type64='^d'/>
<arg declared_type64='int' name='npoints' type64='i'/>
<arg declared_type64='double (*)*' name='point_array' type64='^[3d]'/>
<arg declared_type64='float (*)*' name='color_array' type64='^[3f]'/>
<arg declared_type64='double (*)**' name='xform_array' type64='^[2[3d]]'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='extrusion_round_or_cut_join'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double (*)*' name='contour' type64='^[2d]'/>
<arg declared_type64='double (*)*' name='cont_normal' type64='^[2d]'/>
<arg declared_type64='double*' name='up' type64='^d'/>
<arg declared_type64='int' name='npoints' type64='i'/>
<arg declared_type64='double (*)*' name='point_array' type64='^[3d]'/>
<arg declared_type64='float (*)*' name='color_array' type64='^[3f]'/>
<arg declared_type64='double (*)**' name='xform_array' type64='^[2[3d]]'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='gleCreateGC'>
<retval declared_type64='gleGC*' type64='^{_gleGC=^?^?^?^?^?^?ii^[2d]^[2d]^di^[3d]^[3f]^[2[3d]]iidddd^?^?^?^?^?^?}'/>
</function>
<function name='gleExtrusion'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double (*)*' name='contour' type64='^[2d]'/>
<arg declared_type64='double (*)*' name='cont_normal' type64='^[2d]'/>
<arg declared_type64='double*' name='up' type64='^d'/>
<arg declared_type64='int' name='npoints' type64='i'/>
<arg declared_type64='double (*)*' name='point_array' type64='^[3d]'/>
<arg declared_type64='float (*)*' name='color_array' type64='^[3f]'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='gleGetJoinStyle'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='gleGetNumSlices'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='gleHelicoid'>
<arg declared_type64='double' name='rToroid' type64='d'/>
<arg declared_type64='double' name='startRadius' type64='d'/>
<arg declared_type64='double' name='drdTheta' type64='d'/>
<arg declared_type64='double' name='startZ' type64='d'/>
<arg declared_type64='double' name='dzdTheta' type64='d'/>
<arg declared_type64='double (*)*' name='startXform' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='dXformdTheta' type64='^[3d]'/>
<arg declared_type64='double' name='startTheta' type64='d'/>
<arg declared_type64='double' name='sweepTheta' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='gleLathe'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double (*)*' name='contour' type64='^[2d]'/>
<arg declared_type64='double (*)*' name='cont_normal' type64='^[2d]'/>
<arg declared_type64='double*' name='up' type64='^d'/>
<arg declared_type64='double' name='startRadius' type64='d'/>
<arg declared_type64='double' name='drdTheta' type64='d'/>
<arg declared_type64='double' name='startZ' type64='d'/>
<arg declared_type64='double' name='dzdTheta' type64='d'/>
<arg declared_type64='double (*)*' name='startXform' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='dXformdTheta' type64='^[3d]'/>
<arg declared_type64='double' name='startTheta' type64='d'/>
<arg declared_type64='double' name='sweepTheta' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glePolyCone'>
<arg declared_type64='int' name='npoints' type64='i'/>
<arg declared_type64='double (*)*' name='point_array' type64='^[3d]'/>
<arg declared_type64='float (*)*' name='color_array' type64='^[3f]'/>
<arg declared_type64='double*' name='radius_array' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glePolyCylinder'>
<arg declared_type64='int' name='npoints' type64='i'/>
<arg declared_type64='double (*)*' name='point_array' type64='^[3d]'/>
<arg declared_type64='float (*)*' name='color_array' type64='^[3f]'/>
<arg declared_type64='double' name='radius' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='gleScrew'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double (*)*' name='contour' type64='^[2d]'/>
<arg declared_type64='double (*)*' name='cont_normal' type64='^[2d]'/>
<arg declared_type64='double*' name='up' type64='^d'/>
<arg declared_type64='double' name='startz' type64='d'/>
<arg declared_type64='double' name='endz' type64='d'/>
<arg declared_type64='double' name='twist' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='gleSetJoinStyle'>
<arg declared_type64='int' name='style' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='gleSetNumSlices'>
<arg declared_type64='int' name='slices' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='gleSpiral'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double (*)*' name='contour' type64='^[2d]'/>
<arg declared_type64='double (*)*' name='cont_normal' type64='^[2d]'/>
<arg declared_type64='double*' name='up' type64='^d'/>
<arg declared_type64='double' name='startRadius' type64='d'/>
<arg declared_type64='double' name='drdTheta' type64='d'/>
<arg declared_type64='double' name='startZ' type64='d'/>
<arg declared_type64='double' name='dzdTheta' type64='d'/>
<arg declared_type64='double (*)*' name='startXform' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='dXformdTheta' type64='^[3d]'/>
<arg declared_type64='double' name='startTheta' type64='d'/>
<arg declared_type64='double' name='sweepTheta' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='gleSuperExtrusion'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double (*)*' name='contour' type64='^[2d]'/>
<arg declared_type64='double (*)*' name='cont_normal' type64='^[2d]'/>
<arg declared_type64='double*' name='up' type64='^d'/>
<arg declared_type64='int' name='npoints' type64='i'/>
<arg declared_type64='double (*)*' name='point_array' type64='^[3d]'/>
<arg declared_type64='float (*)*' name='color_array' type64='^[3f]'/>
<arg declared_type64='double (*)**' name='xform_array' type64='^[2[3d]]'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='gleTextureMode'>
<arg declared_type64='int' name='mode' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='gleToroid'>
<arg declared_type64='double' name='rToroid' type64='d'/>
<arg declared_type64='double' name='startRadius' type64='d'/>
<arg declared_type64='double' name='drdTheta' type64='d'/>
<arg declared_type64='double' name='startZ' type64='d'/>
<arg declared_type64='double' name='dzdTheta' type64='d'/>
<arg declared_type64='double (*)*' name='startXform' type64='^[3d]'/>
<arg declared_type64='double (*)*' name='dXformdTheta' type64='^[3d]'/>
<arg declared_type64='double' name='startTheta' type64='d'/>
<arg declared_type64='double' name='sweepTheta' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='gleTwistExtrusion'>
<arg declared_type64='int' name='ncp' type64='i'/>
<arg declared_type64='double (*)*' name='contour' type64='^[2d]'/>
<arg declared_type64='double (*)*' name='cont_normal' type64='^[2d]'/>
<arg declared_type64='double*' name='up' type64='^d'/>
<arg declared_type64='int' name='npoints' type64='i'/>
<arg declared_type64='double (*)*' name='point_array' type64='^[3d]'/>
<arg declared_type64='float (*)*' name='color_array' type64='^[3f]'/>
<arg declared_type64='double*' name='twist_array' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutAddMenuEntry'>
<arg const='true' declared_type64='char*' name='label' type64='*'/>
<arg declared_type64='int' name='value' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutAddSubMenu'>
<arg const='true' declared_type64='char*' name='label' type64='*'/>
<arg declared_type64='int' name='submenu' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutAttachMenu'>
<arg declared_type64='int' name='button' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutBitmapCharacter'>
<arg declared_type64='void*' name='font' type64='^v'/>
<arg declared_type64='int' name='character' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutBitmapLength'>
<arg declared_type64='void*' name='font' type64='^v'/>
<arg const='true' declared_type64='unsigned char*' name='string' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='glutBitmapWidth'>
<arg declared_type64='void*' name='font' type64='^v'/>
<arg declared_type64='int' name='character' type64='i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='glutButtonBoxFunc'>
<arg declared_type64='void (*)(int, int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutChangeToMenuEntry'>
<arg declared_type64='int' name='item' type64='i'/>
<arg const='true' declared_type64='char*' name='label' type64='*'/>
<arg declared_type64='int' name='value' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutChangeToSubMenu'>
<arg declared_type64='int' name='item' type64='i'/>
<arg const='true' declared_type64='char*' name='label' type64='*'/>
<arg declared_type64='int' name='submenu' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutCheckLoop'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutCopyColormap'>
<arg declared_type64='int' name='win' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutCreateMenu'>
<arg declared_type64='void (*)(int)' function_pointer='true' type64='^?'>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='int' type64='i'/>
</function>
<function name='glutCreateSubWindow'>
<arg declared_type64='int' name='win' type64='i'/>
<arg declared_type64='int' name='x' type64='i'/>
<arg declared_type64='int' name='y' type64='i'/>
<arg declared_type64='int' name='width' type64='i'/>
<arg declared_type64='int' name='height' type64='i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='glutCreateWindow'>
<arg const='true' declared_type64='char*' name='title' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='glutDestroyMenu'>
<arg declared_type64='int' name='menu' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutDestroyWindow'>
<arg declared_type64='int' name='win' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutDetachMenu'>
<arg declared_type64='int' name='button' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutDeviceGet'>
<arg declared_type64='GLenum' name='type' type64='I'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='glutDialsFunc'>
<arg declared_type64='void (*)(int, int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutDisplayFunc'>
<arg declared_type64='void (*)(void)' function_pointer='true' name='func' type64='^?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutEnterGameMode'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='glutEntryFunc'>
<arg declared_type64='void (*)(int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutEstablishOverlay'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutExtensionSupported'>
<arg const='true' declared_type64='char*' name='name' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='glutForceJoystickFunc'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutFullScreen'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutGameModeGet'>
<arg declared_type64='GLenum' name='mode' type64='I'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='glutGameModeString'>
<arg const='true' declared_type64='char*' name='string' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutGet'>
<arg declared_type64='GLenum' name='type' type64='I'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='glutGetColor'>
<arg declared_type64='int' name='ndx' type64='i'/>
<arg declared_type64='int' name='component' type64='i'/>
<retval declared_type64='GLfloat' type64='f'/>
</function>
<function name='glutGetMenu'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='glutGetModifiers'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='glutGetProcAddress'>
<arg const='true' declared_type64='char*' name='procName' type64='*'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='glutGetWindow'>
<retval declared_type64='int' type64='i'/>
</function>
<function name='glutHideOverlay'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutHideWindow'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutIconifyWindow'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutIdleFunc'>
<arg declared_type64='void (*)(void)' function_pointer='true' name='func' type64='^?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutIgnoreKeyRepeat'>
<arg declared_type64='int' name='ignore' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutInit'>
<arg declared_type64='int*' name='argcp' type64='^i'/>
<arg declared_type64='char**' name='argv' type64='^*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutInitDisplayMode'>
<arg declared_type64='unsigned int' name='mode' type64='I'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutInitDisplayString'>
<arg const='true' declared_type64='char*' name='string' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutInitWindowPosition'>
<arg declared_type64='int' name='x' type64='i'/>
<arg declared_type64='int' name='y' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutInitWindowSize'>
<arg declared_type64='int' name='width' type64='i'/>
<arg declared_type64='int' name='height' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutJoystickFunc'>
<arg declared_type64='void (*)(unsigned int, int, int, int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='unsigned int' type64='I'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='int' name='pollInterval' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutKeyboardFunc'>
<arg declared_type64='void (*)(unsigned char, int, int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='unsigned char' type64='C'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutKeyboardUpFunc'>
<arg declared_type64='void (*)(unsigned char, int, int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='unsigned char' type64='C'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutLayerGet'>
<arg declared_type64='GLenum' name='type' type64='I'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='glutLeaveGameMode'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutMainLoop'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutMenuStateFunc'>
<arg declared_type64='void (*)(int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutMenuStatusFunc'>
<arg declared_type64='void (*)(int, int, int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutMotionFunc'>
<arg declared_type64='void (*)(int, int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutMouseFunc'>
<arg declared_type64='void (*)(int, int, int, int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutOverlayDisplayFunc'>
<arg declared_type64='void (*)(void)' function_pointer='true' name='func' type64='^?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutPassiveMotionFunc'>
<arg declared_type64='void (*)(int, int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutPopWindow'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutPositionWindow'>
<arg declared_type64='int' name='x' type64='i'/>
<arg declared_type64='int' name='y' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutPostOverlayRedisplay'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutPostRedisplay'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutPostWindowOverlayRedisplay'>
<arg declared_type64='int' name='win' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutPostWindowRedisplay'>
<arg declared_type64='int' name='win' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutPushWindow'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutRemoveMenuItem'>
<arg declared_type64='int' name='item' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutRemoveOverlay'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutReportErrors'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutReshapeFunc'>
<arg declared_type64='void (*)(int, int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutReshapeWindow'>
<arg declared_type64='int' name='width' type64='i'/>
<arg declared_type64='int' name='height' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSetColor'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='GLfloat' name='red' type64='f'/>
<arg declared_type64='GLfloat' name='green' type64='f'/>
<arg declared_type64='GLfloat' name='blue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSetCursor'>
<arg declared_type64='int' name='cursor' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSetIconTitle'>
<arg const='true' declared_type64='char*' name='title' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSetKeyRepeat'>
<arg declared_type64='int' name='repeatMode' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSetMenu'>
<arg declared_type64='int' name='menu' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSetWindow'>
<arg declared_type64='int' name='win' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSetWindowTitle'>
<arg const='true' declared_type64='char*' name='title' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSetupVideoResizing'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutShowOverlay'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutShowWindow'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSolidCone'>
<arg declared_type64='GLdouble' name='base' type64='d'/>
<arg declared_type64='GLdouble' name='height' type64='d'/>
<arg declared_type64='GLint' name='slices' type64='i'/>
<arg declared_type64='GLint' name='stacks' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSolidCube'>
<arg declared_type64='GLdouble' name='size' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSolidDodecahedron'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSolidIcosahedron'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSolidOctahedron'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSolidSphere'>
<arg declared_type64='GLdouble' name='radius' type64='d'/>
<arg declared_type64='GLint' name='slices' type64='i'/>
<arg declared_type64='GLint' name='stacks' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSolidTeapot'>
<arg declared_type64='GLdouble' name='size' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSolidTetrahedron'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSolidTorus'>
<arg declared_type64='GLdouble' name='innerRadius' type64='d'/>
<arg declared_type64='GLdouble' name='outerRadius' type64='d'/>
<arg declared_type64='GLint' name='sides' type64='i'/>
<arg declared_type64='GLint' name='rings' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSpaceballButtonFunc'>
<arg declared_type64='void (*)(int, int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSpaceballMotionFunc'>
<arg declared_type64='void (*)(int, int, int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSpaceballRotateFunc'>
<arg declared_type64='void (*)(int, int, int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSpecialFunc'>
<arg declared_type64='void (*)(int, int, int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSpecialUpFunc'>
<arg declared_type64='void (*)(int, int, int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutStopVideoResizing'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutStrokeCharacter'>
<arg declared_type64='void*' name='font' type64='^v'/>
<arg declared_type64='int' name='character' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutStrokeLength'>
<arg declared_type64='void*' name='font' type64='^v'/>
<arg const='true' declared_type64='unsigned char*' name='string' type64='*'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='glutStrokeWidth'>
<arg declared_type64='void*' name='font' type64='^v'/>
<arg declared_type64='int' name='character' type64='i'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='glutSurfaceTexture'>
<arg declared_type64='GLenum' name='target' type64='I'/>
<arg declared_type64='GLenum' name='internalformat' type64='I'/>
<arg declared_type64='int' name='surfacewin' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutSwapBuffers'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutTabletButtonFunc'>
<arg declared_type64='void (*)(int, int, int, int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutTabletMotionFunc'>
<arg declared_type64='void (*)(int, int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutTimerFunc'>
<arg declared_type64='unsigned int' name='millis' type64='I'/>
<arg declared_type64='void (*)(int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='int' name='value' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutUseLayer'>
<arg declared_type64='GLenum' name='layer' type64='I'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutVideoPan'>
<arg declared_type64='int' name='x' type64='i'/>
<arg declared_type64='int' name='y' type64='i'/>
<arg declared_type64='int' name='width' type64='i'/>
<arg declared_type64='int' name='height' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutVideoResize'>
<arg declared_type64='int' name='x' type64='i'/>
<arg declared_type64='int' name='y' type64='i'/>
<arg declared_type64='int' name='width' type64='i'/>
<arg declared_type64='int' name='height' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutVideoResizeGet'>
<arg declared_type64='GLenum' name='param' type64='I'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='glutVisibilityFunc'>
<arg declared_type64='void (*)(int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutWMCloseFunc'>
<arg declared_type64='void (*)(void)' function_pointer='true' name='func' type64='^?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutWarpPointer'>
<arg declared_type64='int' name='x' type64='i'/>
<arg declared_type64='int' name='y' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutWindowStatusFunc'>
<arg declared_type64='void (*)(int)' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='int' type64='i'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutWireCone'>
<arg declared_type64='GLdouble' name='base' type64='d'/>
<arg declared_type64='GLdouble' name='height' type64='d'/>
<arg declared_type64='GLint' name='slices' type64='i'/>
<arg declared_type64='GLint' name='stacks' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutWireCube'>
<arg declared_type64='GLdouble' name='size' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutWireDodecahedron'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutWireIcosahedron'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutWireOctahedron'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutWireSphere'>
<arg declared_type64='GLdouble' name='radius' type64='d'/>
<arg declared_type64='GLint' name='slices' type64='i'/>
<arg declared_type64='GLint' name='stacks' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutWireTeapot'>
<arg declared_type64='GLdouble' name='size' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutWireTetrahedron'>
<retval declared_type64='void' type64='v'/>
</function>
<function name='glutWireTorus'>
<arg declared_type64='GLdouble' name='innerRadius' type64='d'/>
<arg declared_type64='GLdouble' name='outerRadius' type64='d'/>
<arg declared_type64='GLint' name='sides' type64='i'/>
<arg declared_type64='GLint' name='rings' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='rot_about_axis_d'>
<arg declared_type64='double' name='angle' type64='d'/>
<arg declared_type64='double*' name='axis' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='rot_about_axis_f'>
<arg declared_type64='float' name='angle' type64='f'/>
<arg declared_type64='float*' name='axis' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='rot_axis_d'>
<arg declared_type64='double' name='omega' type64='d'/>
<arg declared_type64='double*' name='axis' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='rot_axis_f'>
<arg declared_type64='float' name='omega' type64='f'/>
<arg declared_type64='float*' name='axis' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='rot_omega_d'>
<arg declared_type64='double*' name='axis' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='rot_omega_f'>
<arg declared_type64='float*' name='axis' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapConfigureSphereMapMesh'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='int' name='steps' type64='i'/>
<arg declared_type64='int' name='rings' type64='i'/>
<arg declared_type64='int' name='edgeExtend' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapCreateSphereMap'>
<arg declared_type64='SphereMap*' name='shareSmap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<retval declared_type64='SphereMap*' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
</function>
<function name='smapDestroySphereMap'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGenSphereMap'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGenSphereMapFromViewTexs'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGenSphereMapWithOneViewTex'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGenViewTex'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='int' name='view' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGenViewTexs'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGetContextData'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='void**' name='context' type64='^^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGetDrawViewFunc'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='void (**)(int, void *)' name='drawView' type64='^^?'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGetEye'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLfloat*' name='eyex' type64='^f'/>
<arg declared_type64='GLfloat*' name='eyey' type64='^f'/>
<arg declared_type64='GLfloat*' name='eyez' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGetEyeVector'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLfloat*' name='eye' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGetFlags'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='SphereMapFlags*' name='flags' type64='^i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGetNearFar'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLfloat*' name='viewNear' type64='^f'/>
<arg declared_type64='GLfloat*' name='viewFar' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGetObject'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLfloat*' name='objx' type64='^f'/>
<arg declared_type64='GLfloat*' name='objy' type64='^f'/>
<arg declared_type64='GLfloat*' name='objz' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGetObjectVector'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLfloat*' name='obj' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGetPositionLightsFunc'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='void (**)(int, void *)' name='positionLights' type64='^^?'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGetSphereMapOrigin'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLint*' name='x' type64='^i'/>
<arg declared_type64='GLint*' name='y' type64='^i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGetSphereMapTexDim'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLsizei*' name='texdim' type64='^i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGetSphereMapTexObj'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLuint*' name='texobj' type64='^I'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGetUp'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLfloat*' name='upx' type64='^f'/>
<arg declared_type64='GLfloat*' name='upy' type64='^f'/>
<arg declared_type64='GLfloat*' name='upz' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGetUpVector'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLfloat*' name='up' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGetViewOrigin'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLint*' name='x' type64='^i'/>
<arg declared_type64='GLint*' name='y' type64='^i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGetViewTexDim'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLsizei*' name='texdim' type64='^i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGetViewTexObj'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLuint*' name='texobj' type64='^I'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapGetViewTexObjs'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLuint*' name='texobjs' type64='^I'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapRvecToSt'>
<arg declared_type64='float*' name='rvec' type64='^f'/>
<arg declared_type64='float*' name='st' type64='^f'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='smapSetContextData'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='void*' name='context' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapSetDrawViewFunc'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='void (*)(int, void *)' function_pointer='true' name='drawView' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapSetEye'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLfloat' name='eyex' type64='f'/>
<arg declared_type64='GLfloat' name='eyey' type64='f'/>
<arg declared_type64='GLfloat' name='eyez' type64='f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapSetEyeVector'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLfloat*' name='eye' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapSetFlags'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='SphereMapFlags' name='flags' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapSetNearFar'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLfloat' name='viewNear' type64='f'/>
<arg declared_type64='GLfloat' name='viewFar' type64='f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapSetObject'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLfloat' name='objx' type64='f'/>
<arg declared_type64='GLfloat' name='objy' type64='f'/>
<arg declared_type64='GLfloat' name='objz' type64='f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapSetObjectVector'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLfloat*' name='obj' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapSetPositionLightsFunc'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='void (*)(int, void *)' function_pointer='true' name='positionLights' type64='^?'>
<arg declared_type64='int' type64='i'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapSetSphereMapOrigin'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLint' name='x' type64='i'/>
<arg declared_type64='GLint' name='y' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapSetSphereMapTexDim'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLsizei' name='texdim' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapSetSphereMapTexObj'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLuint' name='texobj' type64='I'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapSetUp'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLfloat' name='upx' type64='f'/>
<arg declared_type64='GLfloat' name='upy' type64='f'/>
<arg declared_type64='GLfloat' name='upz' type64='f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapSetUpVector'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLfloat*' name='up' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapSetViewOrigin'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLint' name='x' type64='i'/>
<arg declared_type64='GLint' name='y' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapSetViewTexDim'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLsizei' name='texdim' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapSetViewTexObj'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLuint' name='texobj' type64='I'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapSetViewTexObjs'>
<arg declared_type64='SphereMap*' name='smap' type64='^{_SphereMap=^{_SphereMapMesh}I[6I]Iiii[2i][2i][3f][3f][3f]ff^?^?^v}'/>
<arg declared_type64='GLuint*' name='texobjs' type64='^I'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='smapStToRvec'>
<arg declared_type64='float*' name='st' type64='^f'/>
<arg declared_type64='float*' name='rvec' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='up_sanity_check'>
<arg declared_type64='double*' name='up' type64='^d'/>
<arg declared_type64='int' name='npoints' type64='i'/>
<arg declared_type64='double (*)*' name='point_array' type64='^[3d]'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='urot_about_axis_d'>
<arg declared_type64='double (*)*' name='m' type64='^[4d]'/>
<arg declared_type64='double' name='angle' type64='d'/>
<arg declared_type64='double*' name='axis' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='urot_about_axis_f'>
<arg declared_type64='float (*)*' name='m' type64='^[4f]'/>
<arg declared_type64='float' name='angle' type64='f'/>
<arg declared_type64='float*' name='axis' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='urot_axis_d'>
<arg declared_type64='double (*)*' name='m' type64='^[4d]'/>
<arg declared_type64='double' name='omega' type64='d'/>
<arg declared_type64='double*' name='axis' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='urot_axis_f'>
<arg declared_type64='float (*)*' name='m' type64='^[4f]'/>
<arg declared_type64='float' name='omega' type64='f'/>
<arg declared_type64='float*' name='axis' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='urot_omega_d'>
<arg declared_type64='double (*)*' name='m' type64='^[4d]'/>
<arg declared_type64='double*' name='axis' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='urot_omega_f'>
<arg declared_type64='float (*)*' name='m' type64='^[4f]'/>
<arg declared_type64='float*' name='axis' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='uview_direction_d'>
<arg declared_type64='double (*)*' name='m' type64='^[4d]'/>
<arg declared_type64='double*' name='v21' type64='^d'/>
<arg declared_type64='double*' name='up' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='uview_direction_f'>
<arg declared_type64='float (*)*' name='m' type64='^[4f]'/>
<arg declared_type64='float*' name='v21' type64='^f'/>
<arg declared_type64='float*' name='up' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='uviewpoint_d'>
<arg declared_type64='double (*)*' name='m' type64='^[4d]'/>
<arg declared_type64='double*' name='v1' type64='^d'/>
<arg declared_type64='double*' name='v2' type64='^d'/>
<arg declared_type64='double*' name='up' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='uviewpoint_f'>
<arg declared_type64='float (*)*' name='m' type64='^[4f]'/>
<arg declared_type64='float*' name='v1' type64='^f'/>
<arg declared_type64='float*' name='v2' type64='^f'/>
<arg declared_type64='float*' name='up' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</function>
</signatures>
