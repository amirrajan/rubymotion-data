<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='AuthorizationCallbacks' type64='{AuthorizationCallbacks=&quot;version&quot;I&quot;SetResult&quot;^?&quot;RequestInterrupt&quot;^?&quot;DidDeactivate&quot;^?&quot;GetContextValue&quot;^?&quot;SetContextValue&quot;^?&quot;GetHintValue&quot;^?&quot;SetHintValue&quot;^?&quot;GetArguments&quot;^?&quot;GetSessionId&quot;^?&quot;GetImmutableHintValue&quot;^?&quot;GetLAContext&quot;^?&quot;GetTokenIdentities&quot;^?&quot;GetTKTokenWatcher&quot;^?}'>
<field declared_type64='UInt32' name='version' type64='I'/>
<field declared_type64='OSStatus (* _Nonnull)(AuthorizationEngineRef _Nonnull, AuthorizationResult)' function_pointer='true' name='SetResult' type64='^?'>
<arg declared_type64='AuthorizationEngineRef _Nonnull' type64='^{__OpaqueAuthorizationEngine=}'/>
<arg declared_type64='AuthorizationResult' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='OSStatus (* _Nonnull)(AuthorizationEngineRef _Nonnull)' function_pointer='true' name='RequestInterrupt' type64='^?'>
<arg declared_type64='AuthorizationEngineRef _Nonnull' type64='^{__OpaqueAuthorizationEngine=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='OSStatus (* _Nonnull)(AuthorizationEngineRef _Nonnull)' function_pointer='true' name='DidDeactivate' type64='^?'>
<arg declared_type64='AuthorizationEngineRef _Nonnull' type64='^{__OpaqueAuthorizationEngine=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='OSStatus (* _Nonnull)(AuthorizationEngineRef _Nonnull, AuthorizationString _Nonnull, AuthorizationContextFlags * _Nullable, AuthorizationValue * _Nullable * _Nullable)' function_pointer='true' name='GetContextValue' type64='^?'>
<arg declared_type64='AuthorizationEngineRef _Nonnull' type64='^{__OpaqueAuthorizationEngine=}'/>
<arg declared_type64='AuthorizationString _Nonnull' type64='*'/>
<arg declared_type64='AuthorizationContextFlags * _Nullable' type64='^I'/>
<arg const='true' declared_type64='AuthorizationValue * _Nullable * _Nullable' type64='^^{AuthorizationValue}'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='OSStatus (* _Nonnull)(AuthorizationEngineRef _Nonnull, AuthorizationString _Nonnull, AuthorizationContextFlags, AuthorizationValue * _Nonnull)' function_pointer='true' name='SetContextValue' type64='^?'>
<arg declared_type64='AuthorizationEngineRef _Nonnull' type64='^{__OpaqueAuthorizationEngine=}'/>
<arg declared_type64='AuthorizationString _Nonnull' type64='*'/>
<arg declared_type64='AuthorizationContextFlags' type64='I'/>
<arg const='true' declared_type64='AuthorizationValue * _Nonnull' type64='^{AuthorizationValue=Q^v}'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='OSStatus (* _Nonnull)(AuthorizationEngineRef _Nonnull, AuthorizationString _Nonnull, AuthorizationValue * _Nullable * _Nullable)' function_pointer='true' name='GetHintValue' type64='^?'>
<arg declared_type64='AuthorizationEngineRef _Nonnull' type64='^{__OpaqueAuthorizationEngine=}'/>
<arg declared_type64='AuthorizationString _Nonnull' type64='*'/>
<arg const='true' declared_type64='AuthorizationValue * _Nullable * _Nullable' type64='^^{AuthorizationValue}'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='OSStatus (* _Nonnull)(AuthorizationEngineRef _Nonnull, AuthorizationString _Nonnull, AuthorizationValue * _Nonnull)' function_pointer='true' name='SetHintValue' type64='^?'>
<arg declared_type64='AuthorizationEngineRef _Nonnull' type64='^{__OpaqueAuthorizationEngine=}'/>
<arg declared_type64='AuthorizationString _Nonnull' type64='*'/>
<arg const='true' declared_type64='AuthorizationValue * _Nonnull' type64='^{AuthorizationValue=Q^v}'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='OSStatus (* _Nonnull)(AuthorizationEngineRef _Nonnull, AuthorizationValueVector * _Nullable * _Nonnull)' function_pointer='true' name='GetArguments' type64='^?'>
<arg declared_type64='AuthorizationEngineRef _Nonnull' type64='^{__OpaqueAuthorizationEngine=}'/>
<arg const='true' declared_type64='AuthorizationValueVector * _Nullable * _Nonnull' type64='^^{AuthorizationValueVector}'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='OSStatus (* _Nonnull)(AuthorizationEngineRef _Nonnull, AuthorizationSessionId _Nullable * _Nullable)' function_pointer='true' name='GetSessionId' type64='^?'>
<arg declared_type64='AuthorizationEngineRef _Nonnull' type64='^{__OpaqueAuthorizationEngine=}'/>
<arg declared_type64='AuthorizationSessionId _Nullable * _Nullable' type64='^^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='OSStatus (* _Nonnull)(AuthorizationEngineRef _Nonnull, AuthorizationString _Nonnull, AuthorizationValue * _Nullable * _Nullable)' function_pointer='true' name='GetImmutableHintValue' type64='^?'>
<arg declared_type64='AuthorizationEngineRef _Nonnull' type64='^{__OpaqueAuthorizationEngine=}'/>
<arg declared_type64='AuthorizationString _Nonnull' type64='*'/>
<arg const='true' declared_type64='AuthorizationValue * _Nullable * _Nullable' type64='^^{AuthorizationValue}'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='OSStatus (* _Nonnull)(AuthorizationEngineRef _Nonnull, CFTypeRef _Nullable * _Nullable)' function_pointer='true' name='GetLAContext' type64='^?'>
<arg declared_type64='AuthorizationEngineRef _Nonnull' type64='^{__OpaqueAuthorizationEngine=}'/>
<arg declared_type64='CFTypeRef _Nullable * _Nullable' type64='^^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='OSStatus (* _Nonnull)(AuthorizationEngineRef _Nonnull, CFTypeRef _Nonnull, CFArrayRef _Nullable * _Nullable)' function_pointer='true' name='GetTokenIdentities' type64='^?'>
<arg declared_type64='AuthorizationEngineRef _Nonnull' type64='^{__OpaqueAuthorizationEngine=}'/>
<arg declared_type64='CFTypeRef _Nonnull' type64='@'/>
<arg declared_type64='CFArrayRef _Nullable * _Nullable' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='OSStatus (* _Nonnull)(AuthorizationEngineRef _Nonnull, CFTypeRef _Nullable * _Nullable)' function_pointer='true' name='GetTKTokenWatcher' type64='^?'>
<arg declared_type64='AuthorizationEngineRef _Nonnull' type64='^{__OpaqueAuthorizationEngine=}'/>
<arg declared_type64='CFTypeRef _Nullable * _Nullable' type64='^^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
</struct>
<struct name='AuthorizationEnvironment' type64='{_AuthorizationEnvironment=&quot;count&quot;I&quot;items&quot;^{?}}'>
<field declared_type64='UInt32' name='count' type64='I'/>
<field declared_type64='AuthorizationItem * _Nullable' name='items' type64='^{_AuthorizationItem=*Q^vI}'/>
</struct>
<struct name='AuthorizationExternalForm' type64='{_AuthorizationExternalForm=&quot;bytes&quot;[32c]}'>
<field declared_type64='char*' name='bytes' type64='[32c]'/>
</struct>
<struct name='AuthorizationItem' type64='{_AuthorizationItem=&quot;name&quot;*&quot;valueLength&quot;Q&quot;value&quot;^v&quot;flags&quot;I}'>
<field declared_type64='AuthorizationString _Nonnull' name='name' type64='*'/>
<field declared_type64='size_t' name='valueLength' type64='Q'/>
<field declared_type64='void * _Nullable' name='value' type64='^v'/>
<field declared_type64='UInt32' name='flags' type64='I'/>
</struct>
<struct name='AuthorizationItemSet' type64='{_AuthorizationItemSet=&quot;count&quot;I&quot;items&quot;^{?}}'>
<field declared_type64='UInt32' name='count' type64='I'/>
<field declared_type64='AuthorizationItem * _Nullable' name='items' type64='^{_AuthorizationItem=*Q^vI}'/>
</struct>
<struct name='AuthorizationPluginInterface' type64='{AuthorizationPluginInterface=&quot;version&quot;I&quot;PluginDestroy&quot;^?&quot;MechanismCreate&quot;^?&quot;MechanismInvoke&quot;^?&quot;MechanismDeactivate&quot;^?&quot;MechanismDestroy&quot;^?}'>
<field declared_type64='UInt32' name='version' type64='I'/>
<field declared_type64='OSStatus (* _Nonnull)(AuthorizationPluginRef _Nonnull)' function_pointer='true' name='PluginDestroy' type64='^?'>
<arg declared_type64='AuthorizationPluginRef _Nonnull' type64='@'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='OSStatus (* _Nonnull)(AuthorizationPluginRef _Nonnull, AuthorizationEngineRef _Nonnull, AuthorizationMechanismId _Nonnull, AuthorizationMechanismRef _Nullable * _Nonnull)' function_pointer='true' name='MechanismCreate' type64='^?'>
<arg declared_type64='AuthorizationPluginRef _Nonnull' type64='@'/>
<arg declared_type64='AuthorizationEngineRef _Nonnull' type64='^{__OpaqueAuthorizationEngine=}'/>
<arg declared_type64='AuthorizationMechanismId _Nonnull' type64='*'/>
<arg declared_type64='AuthorizationMechanismRef _Nullable * _Nonnull' type64='^^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='OSStatus (* _Nonnull)(AuthorizationMechanismRef _Nonnull)' function_pointer='true' name='MechanismInvoke' type64='^?'>
<arg declared_type64='AuthorizationMechanismRef _Nonnull' type64='@'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='OSStatus (* _Nonnull)(AuthorizationMechanismRef _Nonnull)' function_pointer='true' name='MechanismDeactivate' type64='^?'>
<arg declared_type64='AuthorizationMechanismRef _Nonnull' type64='@'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='OSStatus (* _Nonnull)(AuthorizationMechanismRef _Nonnull)' function_pointer='true' name='MechanismDestroy' type64='^?'>
<arg declared_type64='AuthorizationMechanismRef _Nonnull' type64='@'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
</struct>
<struct name='AuthorizationRights' type64='{_AuthorizationRights=&quot;count&quot;I&quot;items&quot;^{?}}'>
<field declared_type64='UInt32' name='count' type64='I'/>
<field declared_type64='AuthorizationItem * _Nullable' name='items' type64='^{_AuthorizationItem=*Q^vI}'/>
</struct>
<struct name='AuthorizationValue' type64='{AuthorizationValue=&quot;length&quot;Q&quot;data&quot;^v}'>
<field declared_type64='size_t' name='length' type64='Q'/>
<field declared_type64='void * _Nullable' name='data' type64='^v'/>
</struct>
<struct name='AuthorizationValueVector' type64='{AuthorizationValueVector=&quot;count&quot;I&quot;values&quot;^{AuthorizationValue}}'>
<field declared_type64='UInt32' name='count' type64='I'/>
<field declared_type64='AuthorizationValue * _Nonnull' name='values' type64='^{AuthorizationValue=Q^v}'/>
</struct>
<struct name='CE_AccessDescription' type64='{__CE_AccessDescription=&quot;accessMethod&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;accessLocation&quot;{__CE_GeneralName=&quot;nameType&quot;i&quot;berEncoded&quot;i&quot;name&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}'>
<field declared_type64='CSSM_OID' name='accessMethod' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CE_GeneralName' name='accessLocation' type64='{__CE_GeneralName=&quot;nameType&quot;i&quot;berEncoded&quot;i&quot;name&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
</struct>
<struct name='CE_AuthorityInfoAccess' type64='{__CE_AuthorityInfoAccess=&quot;numAccessDescriptions&quot;I&quot;accessDescriptions&quot;^{__CE_AccessDescription}}'>
<field declared_type64='uint32' name='numAccessDescriptions' type64='I'/>
<field declared_type64='CE_AccessDescription*' name='accessDescriptions' type64='^{__CE_AccessDescription={cssm_data=Q*}{__CE_GeneralName=ii{cssm_data=Q*}}}'/>
</struct>
<struct name='CE_AuthorityKeyID' type64='{__CE_AuthorityKeyID=&quot;keyIdentifierPresent&quot;i&quot;keyIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;generalNamesPresent&quot;i&quot;generalNames&quot;^{__CE_GeneralNames}&quot;serialNumberPresent&quot;i&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_BOOL' name='keyIdentifierPresent' type64='i'/>
<field declared_type64='CSSM_DATA' name='keyIdentifier' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_BOOL' name='generalNamesPresent' type64='i'/>
<field declared_type64='CE_GeneralNames*' name='generalNames' type64='^{__CE_GeneralNames=I^{__CE_GeneralName}}'/>
<field declared_type64='CSSM_BOOL' name='serialNumberPresent' type64='i'/>
<field declared_type64='CSSM_DATA' name='serialNumber' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CE_BasicConstraints' type64='{__CE_BasicConstraints=&quot;cA&quot;i&quot;pathLenConstraintPresent&quot;i&quot;pathLenConstraint&quot;I}'>
<field declared_type64='CSSM_BOOL' name='cA' type64='i'/>
<field declared_type64='CSSM_BOOL' name='pathLenConstraintPresent' type64='i'/>
<field declared_type64='uint32' name='pathLenConstraint' type64='I'/>
</struct>
<struct name='CE_CRLDistPointsSyntax' type64='{__CE_CRLDistPointsSyntax=&quot;numDistPoints&quot;I&quot;distPoints&quot;^{__CE_CRLDistributionPoint}}'>
<field declared_type64='uint32' name='numDistPoints' type64='I'/>
<field declared_type64='CE_CRLDistributionPoint*' name='distPoints' type64='^{__CE_CRLDistributionPoint=^{__CE_DistributionPointName}iC^{__CE_GeneralNames}}'/>
</struct>
<struct name='CE_CRLDistributionPoint' type64='{__CE_CRLDistributionPoint=&quot;distPointName&quot;^{__CE_DistributionPointName}&quot;reasonsPresent&quot;i&quot;reasons&quot;C&quot;crlIssuer&quot;^{__CE_GeneralNames}}'>
<field declared_type64='CE_DistributionPointName*' name='distPointName' type64='^{__CE_DistributionPointName=i(?=^{__CE_GeneralNames}^{cssm_x509_rdn})}'/>
<field declared_type64='CSSM_BOOL' name='reasonsPresent' type64='i'/>
<field declared_type64='CE_CrlDistReasonFlags' name='reasons' type64='C'/>
<field declared_type64='CE_GeneralNames*' name='crlIssuer' type64='^{__CE_GeneralNames=I^{__CE_GeneralName}}'/>
</struct>
<struct name='CE_CertPolicies' type64='{__CE_CertPolicies=&quot;numPolicies&quot;I&quot;policies&quot;^{__CE_PolicyInformation}}'>
<field declared_type64='uint32' name='numPolicies' type64='I'/>
<field declared_type64='CE_PolicyInformation*' name='policies' type64='^{__CE_PolicyInformation={cssm_data=Q*}I^{__CE_PolicyQualifierInfo}}'/>
</struct>
<struct name='CE_DataAndType' type64='{__CE_DataAndType=&quot;type&quot;i&quot;extension&quot;(?=&quot;authorityKeyID&quot;{__CE_AuthorityKeyID=&quot;keyIdentifierPresent&quot;i&quot;keyIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;generalNamesPresent&quot;i&quot;generalNames&quot;^{__CE_GeneralNames}&quot;serialNumberPresent&quot;i&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;subjectKeyID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;keyUsage&quot;S&quot;subjectAltName&quot;{__CE_GeneralNames=&quot;numNames&quot;I&quot;generalName&quot;^{__CE_GeneralName}}&quot;issuerAltName&quot;{__CE_GeneralNames=&quot;numNames&quot;I&quot;generalName&quot;^{__CE_GeneralName}}&quot;extendedKeyUsage&quot;{__CE_ExtendedKeyUsage=&quot;numPurposes&quot;I&quot;purposes&quot;^{cssm_data}}&quot;basicConstraints&quot;{__CE_BasicConstraints=&quot;cA&quot;i&quot;pathLenConstraintPresent&quot;i&quot;pathLenConstraint&quot;I}&quot;certPolicies&quot;{__CE_CertPolicies=&quot;numPolicies&quot;I&quot;policies&quot;^{__CE_PolicyInformation}}&quot;netscapeCertType&quot;S&quot;crlNumber&quot;I&quot;deltaCrl&quot;I&quot;crlReason&quot;I&quot;crlDistPoints&quot;{__CE_CRLDistPointsSyntax=&quot;numDistPoints&quot;I&quot;distPoints&quot;^{__CE_CRLDistributionPoint}}&quot;issuingDistPoint&quot;{__CE_IssuingDistributionPoint=&quot;distPointName&quot;^{__CE_DistributionPointName}&quot;onlyUserCertsPresent&quot;i&quot;onlyUserCerts&quot;i&quot;onlyCACertsPresent&quot;i&quot;onlyCACerts&quot;i&quot;onlySomeReasonsPresent&quot;i&quot;onlySomeReasons&quot;C&quot;indirectCrlPresent&quot;i&quot;indirectCrl&quot;i}&quot;authorityInfoAccess&quot;{__CE_AuthorityInfoAccess=&quot;numAccessDescriptions&quot;I&quot;accessDescriptions&quot;^{__CE_AccessDescription}}&quot;qualifiedCertStatements&quot;{__CE_QC_Statements=&quot;numQCStatements&quot;I&quot;qcStatements&quot;^{__CE_QC_Statement}}&quot;nameConstraints&quot;{__CE_NameConstraints=&quot;permitted&quot;^{__CE_GeneralSubtrees}&quot;excluded&quot;^{__CE_GeneralSubtrees}}&quot;policyMappings&quot;{__CE_PolicyMappings=&quot;numPolicyMappings&quot;I&quot;policyMappings&quot;^{__CE_PolicyMapping}}&quot;policyConstraints&quot;{__CE_PolicyConstraints=&quot;requireExplicitPolicyPresent&quot;i&quot;requireExplicitPolicy&quot;I&quot;inhibitPolicyMappingPresent&quot;i&quot;inhibitPolicyMapping&quot;I}&quot;inhibitAnyPolicy&quot;I&quot;rawData&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*})&quot;critical&quot;i}'>
<field declared_type64='CE_DataType' name='type' type64='i'/>
<field declared_type64='CE_Data' name='extension' type64='(?=&quot;authorityKeyID&quot;{__CE_AuthorityKeyID=&quot;keyIdentifierPresent&quot;i&quot;keyIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;generalNamesPresent&quot;i&quot;generalNames&quot;^{__CE_GeneralNames}&quot;serialNumberPresent&quot;i&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;subjectKeyID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;keyUsage&quot;S&quot;subjectAltName&quot;{__CE_GeneralNames=&quot;numNames&quot;I&quot;generalName&quot;^{__CE_GeneralName}}&quot;issuerAltName&quot;{__CE_GeneralNames=&quot;numNames&quot;I&quot;generalName&quot;^{__CE_GeneralName}}&quot;extendedKeyUsage&quot;{__CE_ExtendedKeyUsage=&quot;numPurposes&quot;I&quot;purposes&quot;^{cssm_data}}&quot;basicConstraints&quot;{__CE_BasicConstraints=&quot;cA&quot;i&quot;pathLenConstraintPresent&quot;i&quot;pathLenConstraint&quot;I}&quot;certPolicies&quot;{__CE_CertPolicies=&quot;numPolicies&quot;I&quot;policies&quot;^{__CE_PolicyInformation}}&quot;netscapeCertType&quot;S&quot;crlNumber&quot;I&quot;deltaCrl&quot;I&quot;crlReason&quot;I&quot;crlDistPoints&quot;{__CE_CRLDistPointsSyntax=&quot;numDistPoints&quot;I&quot;distPoints&quot;^{__CE_CRLDistributionPoint}}&quot;issuingDistPoint&quot;{__CE_IssuingDistributionPoint=&quot;distPointName&quot;^{__CE_DistributionPointName}&quot;onlyUserCertsPresent&quot;i&quot;onlyUserCerts&quot;i&quot;onlyCACertsPresent&quot;i&quot;onlyCACerts&quot;i&quot;onlySomeReasonsPresent&quot;i&quot;onlySomeReasons&quot;C&quot;indirectCrlPresent&quot;i&quot;indirectCrl&quot;i}&quot;authorityInfoAccess&quot;{__CE_AuthorityInfoAccess=&quot;numAccessDescriptions&quot;I&quot;accessDescriptions&quot;^{__CE_AccessDescription}}&quot;qualifiedCertStatements&quot;{__CE_QC_Statements=&quot;numQCStatements&quot;I&quot;qcStatements&quot;^{__CE_QC_Statement}}&quot;nameConstraints&quot;{__CE_NameConstraints=&quot;permitted&quot;^{__CE_GeneralSubtrees}&quot;excluded&quot;^{__CE_GeneralSubtrees}}&quot;policyMappings&quot;{__CE_PolicyMappings=&quot;numPolicyMappings&quot;I&quot;policyMappings&quot;^{__CE_PolicyMapping}}&quot;policyConstraints&quot;{__CE_PolicyConstraints=&quot;requireExplicitPolicyPresent&quot;i&quot;requireExplicitPolicy&quot;I&quot;inhibitPolicyMappingPresent&quot;i&quot;inhibitPolicyMapping&quot;I}&quot;inhibitAnyPolicy&quot;I&quot;rawData&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*})'/>
<field declared_type64='CSSM_BOOL' name='critical' type64='i'/>
</struct>
<struct name='CE_DistributionPointName' type64='{__CE_DistributionPointName=&quot;nameType&quot;i&quot;dpn&quot;(?=&quot;fullName&quot;^{__CE_GeneralNames}&quot;rdn&quot;^{cssm_x509_rdn})}'>
<field declared_type64='CE_CrlDistributionPointNameType' name='nameType' type64='i'/>
<field declared_type64='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/Security.framework/Headers/certextensions.h:547:2)' name='dpn' type64='(?=&quot;fullName&quot;^{__CE_GeneralNames}&quot;rdn&quot;^{cssm_x509_rdn})'/>
</struct>
<struct name='CE_ExtendedKeyUsage' type64='{__CE_ExtendedKeyUsage=&quot;numPurposes&quot;I&quot;purposes&quot;^{cssm_data}}'>
<field declared_type64='uint32' name='numPurposes' type64='I'/>
<field declared_type64='CSSM_OID_PTR' name='purposes' type64='^{cssm_data=Q*}'/>
</struct>
<struct name='CE_GeneralName' type64='{__CE_GeneralName=&quot;nameType&quot;i&quot;berEncoded&quot;i&quot;name&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CE_GeneralNameType' name='nameType' type64='i'/>
<field declared_type64='CSSM_BOOL' name='berEncoded' type64='i'/>
<field declared_type64='CSSM_DATA' name='name' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CE_GeneralNames' type64='{__CE_GeneralNames=&quot;numNames&quot;I&quot;generalName&quot;^{__CE_GeneralName}}'>
<field declared_type64='uint32' name='numNames' type64='I'/>
<field declared_type64='CE_GeneralName*' name='generalName' type64='^{__CE_GeneralName=ii{cssm_data=Q*}}'/>
</struct>
<struct name='CE_GeneralSubtree' type64='{__CE_GeneralSubtree=&quot;base&quot;^{__CE_GeneralNames}&quot;minimum&quot;I&quot;maximumPresent&quot;i&quot;maximum&quot;I}'>
<field declared_type64='CE_GeneralNames*' name='base' type64='^{__CE_GeneralNames=I^{__CE_GeneralName}}'/>
<field declared_type64='uint32' name='minimum' type64='I'/>
<field declared_type64='CSSM_BOOL' name='maximumPresent' type64='i'/>
<field declared_type64='uint32' name='maximum' type64='I'/>
</struct>
<struct name='CE_GeneralSubtrees' type64='{__CE_GeneralSubtrees=&quot;numSubtrees&quot;I&quot;subtrees&quot;^{__CE_GeneralSubtree}}'>
<field declared_type64='uint32' name='numSubtrees' type64='I'/>
<field declared_type64='CE_GeneralSubtree*' name='subtrees' type64='^{__CE_GeneralSubtree=^{__CE_GeneralNames}IiI}'/>
</struct>
<struct name='CE_IssuingDistributionPoint' type64='{__CE_IssuingDistributionPoint=&quot;distPointName&quot;^{__CE_DistributionPointName}&quot;onlyUserCertsPresent&quot;i&quot;onlyUserCerts&quot;i&quot;onlyCACertsPresent&quot;i&quot;onlyCACerts&quot;i&quot;onlySomeReasonsPresent&quot;i&quot;onlySomeReasons&quot;C&quot;indirectCrlPresent&quot;i&quot;indirectCrl&quot;i}'>
<field declared_type64='CE_DistributionPointName*' name='distPointName' type64='^{__CE_DistributionPointName=i(?=^{__CE_GeneralNames}^{cssm_x509_rdn})}'/>
<field declared_type64='CSSM_BOOL' name='onlyUserCertsPresent' type64='i'/>
<field declared_type64='CSSM_BOOL' name='onlyUserCerts' type64='i'/>
<field declared_type64='CSSM_BOOL' name='onlyCACertsPresent' type64='i'/>
<field declared_type64='CSSM_BOOL' name='onlyCACerts' type64='i'/>
<field declared_type64='CSSM_BOOL' name='onlySomeReasonsPresent' type64='i'/>
<field declared_type64='CE_CrlDistReasonFlags' name='onlySomeReasons' type64='C'/>
<field declared_type64='CSSM_BOOL' name='indirectCrlPresent' type64='i'/>
<field declared_type64='CSSM_BOOL' name='indirectCrl' type64='i'/>
</struct>
<struct name='CE_NameConstraints' type64='{__CE_NameConstraints=&quot;permitted&quot;^{__CE_GeneralSubtrees}&quot;excluded&quot;^{__CE_GeneralSubtrees}}'>
<field declared_type64='CE_GeneralSubtrees*' name='permitted' type64='^{__CE_GeneralSubtrees=I^{__CE_GeneralSubtree}}'/>
<field declared_type64='CE_GeneralSubtrees*' name='excluded' type64='^{__CE_GeneralSubtrees=I^{__CE_GeneralSubtree}}'/>
</struct>
<struct name='CE_NameRegistrationAuthorities' type64='{__CE_GeneralNames=&quot;numNames&quot;I&quot;generalName&quot;^{__CE_GeneralName}}'>
<field declared_type64='uint32' name='numNames' type64='I'/>
<field declared_type64='CE_GeneralName*' name='generalName' type64='^{__CE_GeneralName=ii{cssm_data=Q*}}'/>
</struct>
<struct name='CE_OtherName' type64='{__CE_OtherName=&quot;typeId&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;value&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_OID' name='typeId' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='value' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CE_PolicyConstraints' type64='{__CE_PolicyConstraints=&quot;requireExplicitPolicyPresent&quot;i&quot;requireExplicitPolicy&quot;I&quot;inhibitPolicyMappingPresent&quot;i&quot;inhibitPolicyMapping&quot;I}'>
<field declared_type64='CSSM_BOOL' name='requireExplicitPolicyPresent' type64='i'/>
<field declared_type64='uint32' name='requireExplicitPolicy' type64='I'/>
<field declared_type64='CSSM_BOOL' name='inhibitPolicyMappingPresent' type64='i'/>
<field declared_type64='uint32' name='inhibitPolicyMapping' type64='I'/>
</struct>
<struct name='CE_PolicyInformation' type64='{__CE_PolicyInformation=&quot;certPolicyId&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;numPolicyQualifiers&quot;I&quot;policyQualifiers&quot;^{__CE_PolicyQualifierInfo}}'>
<field declared_type64='CSSM_OID' name='certPolicyId' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='uint32' name='numPolicyQualifiers' type64='I'/>
<field declared_type64='CE_PolicyQualifierInfo*' name='policyQualifiers' type64='^{__CE_PolicyQualifierInfo={cssm_data=Q*}{cssm_data=Q*}}'/>
</struct>
<struct name='CE_PolicyMapping' type64='{__CE_PolicyMapping=&quot;issuerDomainPolicy&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;subjectDomainPolicy&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_OID' name='issuerDomainPolicy' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_OID' name='subjectDomainPolicy' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CE_PolicyMappings' type64='{__CE_PolicyMappings=&quot;numPolicyMappings&quot;I&quot;policyMappings&quot;^{__CE_PolicyMapping}}'>
<field declared_type64='uint32' name='numPolicyMappings' type64='I'/>
<field declared_type64='CE_PolicyMapping*' name='policyMappings' type64='^{__CE_PolicyMapping={cssm_data=Q*}{cssm_data=Q*}}'/>
</struct>
<struct name='CE_PolicyQualifierInfo' type64='{__CE_PolicyQualifierInfo=&quot;policyQualifierId&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;qualifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_OID' name='policyQualifierId' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='qualifier' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CE_QC_Statement' type64='{__CE_QC_Statement=&quot;statementId&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;semanticsInfo&quot;^{__CE_SemanticsInformation}&quot;otherInfo&quot;^{cssm_data}}'>
<field declared_type64='CSSM_OID' name='statementId' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CE_SemanticsInformation*' name='semanticsInfo' type64='^{__CE_SemanticsInformation=^{cssm_data}^{__CE_GeneralNames}}'/>
<field declared_type64='CSSM_DATA*' name='otherInfo' type64='^{cssm_data=Q*}'/>
</struct>
<struct name='CE_QC_Statements' type64='{__CE_QC_Statements=&quot;numQCStatements&quot;I&quot;qcStatements&quot;^{__CE_QC_Statement}}'>
<field declared_type64='uint32' name='numQCStatements' type64='I'/>
<field declared_type64='CE_QC_Statement*' name='qcStatements' type64='^{__CE_QC_Statement={cssm_data=Q*}^{__CE_SemanticsInformation}^{cssm_data}}'/>
</struct>
<struct name='CE_SemanticsInformation' type64='{__CE_SemanticsInformation=&quot;semanticsIdentifier&quot;^{cssm_data}&quot;nameRegistrationAuthorities&quot;^{__CE_GeneralNames}}'>
<field declared_type64='CSSM_OID*' name='semanticsIdentifier' type64='^{cssm_data=Q*}'/>
<field declared_type64='CE_NameRegistrationAuthorities*' name='nameRegistrationAuthorities' type64='^{__CE_GeneralNames=I^{__CE_GeneralName}}'/>
</struct>
<struct name='CE_SubjectKeyID' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'>
<field declared_type64='CSSM_SIZE' name='Length' type64='Q'/>
<field declared_type64='uint8*' name='Data' type64='*'/>
</struct>
<struct name='CSSM_ACCESS_CREDENTIALS' type64='{cssm_access_credentials=&quot;EntryTag&quot;[68c]&quot;BaseCerts&quot;{cssm_base_certs=&quot;TPHandle&quot;q&quot;CLHandle&quot;q&quot;Certs&quot;{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}}&quot;Samples&quot;{cssm_samplegroup=&quot;NumberOfSamples&quot;I&quot;Samples&quot;^{cssm_sample}}&quot;Callback&quot;^?&quot;CallerCtx&quot;^v}'>
<field declared_type64='CSSM_STRING' name='EntryTag' type64='[68c]'/>
<field declared_type64='CSSM_BASE_CERTS' name='BaseCerts' type64='{cssm_base_certs=&quot;TPHandle&quot;q&quot;CLHandle&quot;q&quot;Certs&quot;{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}}'/>
<field declared_type64='CSSM_SAMPLEGROUP' name='Samples' type64='{cssm_samplegroup=&quot;NumberOfSamples&quot;I&quot;Samples&quot;^{cssm_sample}}'/>
<field declared_type64='CSSM_CHALLENGE_CALLBACK' function_pointer='true' name='Callback' type64='^?'>
<arg const='true' declared_type64='CSSM_LIST*' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg declared_type64='CSSM_SAMPLEGROUP_PTR' type64='^{cssm_samplegroup=I^{cssm_sample}}'/>
<arg declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='CSSM_MEMORY_FUNCS*' type64='^{cssm_memory_funcs=^?^?^?^?^v}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='void*' name='CallerCtx' type64='^v'/>
</struct>
<struct name='CSSM_ACCESS_CREDENTIALS_PTR' type64='{cssm_access_credentials=&quot;EntryTag&quot;[68c]&quot;BaseCerts&quot;{cssm_base_certs=&quot;TPHandle&quot;q&quot;CLHandle&quot;q&quot;Certs&quot;{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}}&quot;Samples&quot;{cssm_samplegroup=&quot;NumberOfSamples&quot;I&quot;Samples&quot;^{cssm_sample}}&quot;Callback&quot;^?&quot;CallerCtx&quot;^v}'>
<field declared_type64='CSSM_STRING' name='EntryTag' type64='[68c]'/>
<field declared_type64='CSSM_BASE_CERTS' name='BaseCerts' type64='{cssm_base_certs=&quot;TPHandle&quot;q&quot;CLHandle&quot;q&quot;Certs&quot;{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}}'/>
<field declared_type64='CSSM_SAMPLEGROUP' name='Samples' type64='{cssm_samplegroup=&quot;NumberOfSamples&quot;I&quot;Samples&quot;^{cssm_sample}}'/>
<field declared_type64='CSSM_CHALLENGE_CALLBACK' function_pointer='true' name='Callback' type64='^?'>
<arg const='true' declared_type64='CSSM_LIST*' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg declared_type64='CSSM_SAMPLEGROUP_PTR' type64='^{cssm_samplegroup=I^{cssm_sample}}'/>
<arg declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='CSSM_MEMORY_FUNCS*' type64='^{cssm_memory_funcs=^?^?^?^?^v}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='void*' name='CallerCtx' type64='^v'/>
</struct>
<struct name='CSSM_ACL_EDIT' type64='{cssm_acl_edit=&quot;EditMode&quot;I&quot;OldEntryHandle&quot;q&quot;NewEntry&quot;^{cssm_acl_entry_input}}'>
<field declared_type64='CSSM_ACL_EDIT_MODE' name='EditMode' type64='I'/>
<field declared_type64='CSSM_ACL_HANDLE' name='OldEntryHandle' type64='q'/>
<field const='true' declared_type64='CSSM_ACL_ENTRY_INPUT*' name='NewEntry' type64='^{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}'/>
</struct>
<struct name='CSSM_ACL_EDIT_PTR' type64='{cssm_acl_edit=&quot;EditMode&quot;I&quot;OldEntryHandle&quot;q&quot;NewEntry&quot;^{cssm_acl_entry_input}}'>
<field declared_type64='CSSM_ACL_EDIT_MODE' name='EditMode' type64='I'/>
<field declared_type64='CSSM_ACL_HANDLE' name='OldEntryHandle' type64='q'/>
<field const='true' declared_type64='CSSM_ACL_ENTRY_INPUT*' name='NewEntry' type64='^{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}'/>
</struct>
<struct name='CSSM_ACL_ENTRY_INFO' type64='{cssm_acl_entry_info=&quot;EntryPublicInfo&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;EntryHandle&quot;q}'>
<field declared_type64='CSSM_ACL_ENTRY_PROTOTYPE' name='EntryPublicInfo' type64='{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}'/>
<field declared_type64='CSSM_ACL_HANDLE' name='EntryHandle' type64='q'/>
</struct>
<struct name='CSSM_ACL_ENTRY_INFO_PTR' type64='{cssm_acl_entry_info=&quot;EntryPublicInfo&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;EntryHandle&quot;q}'>
<field declared_type64='CSSM_ACL_ENTRY_PROTOTYPE' name='EntryPublicInfo' type64='{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}'/>
<field declared_type64='CSSM_ACL_HANDLE' name='EntryHandle' type64='q'/>
</struct>
<struct name='CSSM_ACL_ENTRY_INPUT' type64='{cssm_acl_entry_input=&quot;Prototype&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;Callback&quot;^?&quot;CallerContext&quot;^v}'>
<field declared_type64='CSSM_ACL_ENTRY_PROTOTYPE' name='Prototype' type64='{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}'/>
<field declared_type64='CSSM_ACL_SUBJECT_CALLBACK' function_pointer='true' name='Callback' type64='^?'>
<arg const='true' declared_type64='CSSM_LIST*' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg declared_type64='CSSM_LIST_PTR' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='CSSM_MEMORY_FUNCS*' type64='^{cssm_memory_funcs=^?^?^?^?^v}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='void*' name='CallerContext' type64='^v'/>
</struct>
<struct name='CSSM_ACL_ENTRY_INPUT_PTR' type64='{cssm_acl_entry_input=&quot;Prototype&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;Callback&quot;^?&quot;CallerContext&quot;^v}'>
<field declared_type64='CSSM_ACL_ENTRY_PROTOTYPE' name='Prototype' type64='{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}'/>
<field declared_type64='CSSM_ACL_SUBJECT_CALLBACK' function_pointer='true' name='Callback' type64='^?'>
<arg const='true' declared_type64='CSSM_LIST*' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg declared_type64='CSSM_LIST_PTR' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='CSSM_MEMORY_FUNCS*' type64='^{cssm_memory_funcs=^?^?^?^?^v}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='void*' name='CallerContext' type64='^v'/>
</struct>
<struct name='CSSM_ACL_ENTRY_PROTOTYPE' type64='{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}'>
<field declared_type64='CSSM_LIST' name='TypedSubject' type64='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
<field declared_type64='CSSM_BOOL' name='Delegate' type64='i'/>
<field declared_type64='CSSM_AUTHORIZATIONGROUP' name='Authorization' type64='{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}'/>
<field declared_type64='CSSM_ACL_VALIDITY_PERIOD' name='TimeRange' type64='{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_STRING' name='EntryTag' type64='[68c]'/>
</struct>
<struct name='CSSM_ACL_ENTRY_PROTOTYPE_PTR' type64='{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}'>
<field declared_type64='CSSM_LIST' name='TypedSubject' type64='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
<field declared_type64='CSSM_BOOL' name='Delegate' type64='i'/>
<field declared_type64='CSSM_AUTHORIZATIONGROUP' name='Authorization' type64='{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}'/>
<field declared_type64='CSSM_ACL_VALIDITY_PERIOD' name='TimeRange' type64='{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_STRING' name='EntryTag' type64='[68c]'/>
</struct>
<struct name='CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR' type64='{cssm_acl_keychain_prompt_selector=&quot;version&quot;S&quot;flags&quot;S}'>
<field declared_type64='uint16' name='version' type64='S'/>
<field declared_type64='uint16' name='flags' type64='S'/>
</struct>
<struct name='CSSM_ACL_OWNER_PROTOTYPE' type64='{cssm_acl_owner_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i}'>
<field declared_type64='CSSM_LIST' name='TypedSubject' type64='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
<field declared_type64='CSSM_BOOL' name='Delegate' type64='i'/>
</struct>
<struct name='CSSM_ACL_OWNER_PROTOTYPE_PTR' type64='{cssm_acl_owner_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i}'>
<field declared_type64='CSSM_LIST' name='TypedSubject' type64='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
<field declared_type64='CSSM_BOOL' name='Delegate' type64='i'/>
</struct>
<struct name='CSSM_ACL_PROCESS_SUBJECT_SELECTOR' type64='{cssm_acl_process_subject_selector=&quot;version&quot;S&quot;mask&quot;S&quot;uid&quot;I&quot;gid&quot;I}'>
<field declared_type64='uint16' name='version' type64='S'/>
<field declared_type64='uint16' name='mask' type64='S'/>
<field declared_type64='uint32' name='uid' type64='I'/>
<field declared_type64='uint32' name='gid' type64='I'/>
</struct>
<struct name='CSSM_ACL_VALIDITY_PERIOD' type64='{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_DATA' name='StartDate' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='EndDate' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_ACL_VALIDITY_PERIOD_PTR' type64='{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_DATA' name='StartDate' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='EndDate' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_API_MEMORY_FUNCS' type64='{cssm_memory_funcs=&quot;malloc_func&quot;^?&quot;free_func&quot;^?&quot;realloc_func&quot;^?&quot;calloc_func&quot;^?&quot;AllocRef&quot;^v}'>
<field declared_type64='CSSM_MALLOC' function_pointer='true' name='malloc_func' type64='^?'>
<arg declared_type64='CSSM_SIZE' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CSSM_FREE' function_pointer='true' name='free_func' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CSSM_REALLOC' function_pointer='true' name='realloc_func' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='CSSM_SIZE' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CSSM_CALLOC' function_pointer='true' name='calloc_func' type64='^?'>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_SIZE' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void*' name='AllocRef' type64='^v'/>
</struct>
<struct name='CSSM_APPLECSPDL_DB_CHANGE_PASSWORD_PARAMETERS' type64='{cssm_applecspdl_db_change_password_parameters=&quot;accessCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_ACCESS_CREDENTIALS*' name='accessCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='CSSM_APPLECSPDL_DB_CHANGE_PASSWORD_PARAMETERS_PTR' type64='{cssm_applecspdl_db_change_password_parameters=&quot;accessCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_ACCESS_CREDENTIALS*' name='accessCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='CSSM_APPLECSPDL_DB_IS_LOCKED_PARAMETERS' type64='{cssm_applecspdl_db_is_locked_parameters=&quot;isLocked&quot;C}'>
<field declared_type64='uint8' name='isLocked' type64='C'/>
</struct>
<struct name='CSSM_APPLECSPDL_DB_IS_LOCKED_PARAMETERS_PTR' type64='{cssm_applecspdl_db_is_locked_parameters=&quot;isLocked&quot;C}'>
<field declared_type64='uint8' name='isLocked' type64='C'/>
</struct>
<struct name='CSSM_APPLECSPDL_DB_SETTINGS_PARAMETERS' type64='{cssm_applecspdl_db_settings_parameters=&quot;idleTimeout&quot;I&quot;lockOnSleep&quot;C}'>
<field declared_type64='uint32' name='idleTimeout' type64='I'/>
<field declared_type64='uint8' name='lockOnSleep' type64='C'/>
</struct>
<struct name='CSSM_APPLECSPDL_DB_SETTINGS_PARAMETERS_PTR' type64='{cssm_applecspdl_db_settings_parameters=&quot;idleTimeout&quot;I&quot;lockOnSleep&quot;C}'>
<field declared_type64='uint32' name='idleTimeout' type64='I'/>
<field declared_type64='uint8' name='lockOnSleep' type64='C'/>
</struct>
<struct name='CSSM_APPLEDL_OPEN_PARAMETERS' type64='{cssm_appledl_open_parameters=&quot;length&quot;I&quot;version&quot;I&quot;autoCommit&quot;i&quot;mask&quot;I&quot;mode&quot;S}'>
<field declared_type64='uint32' name='length' type64='I'/>
<field declared_type64='uint32' name='version' type64='I'/>
<field declared_type64='CSSM_BOOL' name='autoCommit' type64='i'/>
<field declared_type64='uint32' name='mask' type64='I'/>
<field declared_type64='mode_t' name='mode' type64='S'/>
</struct>
<struct name='CSSM_APPLEDL_OPEN_PARAMETERS_PTR' type64='{cssm_appledl_open_parameters=&quot;length&quot;I&quot;version&quot;I&quot;autoCommit&quot;i&quot;mask&quot;I&quot;mode&quot;S}'>
<field declared_type64='uint32' name='length' type64='I'/>
<field declared_type64='uint32' name='version' type64='I'/>
<field declared_type64='CSSM_BOOL' name='autoCommit' type64='i'/>
<field declared_type64='uint32' name='mask' type64='I'/>
<field declared_type64='mode_t' name='mode' type64='S'/>
</struct>
<struct name='CSSM_APPLE_CL_CSR_REQUEST' type64='{_CSSM_APPLE_CL_CSR_REQUEST=&quot;subjectNameX509&quot;^{cssm_x509_name}&quot;signatureAlg&quot;I&quot;signatureOid&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;cspHand&quot;q&quot;subjectPublicKey&quot;^{cssm_key}&quot;subjectPrivateKey&quot;^{cssm_key}&quot;challengeString&quot;*}'>
<field declared_type64='CSSM_X509_NAME_PTR' name='subjectNameX509' type64='^{cssm_x509_name=I^{cssm_x509_rdn}}'/>
<field declared_type64='CSSM_ALGORITHMS' name='signatureAlg' type64='I'/>
<field declared_type64='CSSM_OID' name='signatureOid' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_CSP_HANDLE' name='cspHand' type64='q'/>
<field const='true' declared_type64='CSSM_KEY*' name='subjectPublicKey' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<field const='true' declared_type64='CSSM_KEY*' name='subjectPrivateKey' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<field const='true' declared_type64='char*' name='challengeString' type64='*'/>
</struct>
<struct name='CSSM_APPLE_TP_ACTION_DATA' type64='{_CSSM_APPLE_TP_ACTION_DATA=&quot;Version&quot;I&quot;ActionFlags&quot;I}'>
<field declared_type64='uint32' name='Version' type64='I'/>
<field declared_type64='CSSM_APPLE_TP_ACTION_FLAGS' name='ActionFlags' type64='I'/>
</struct>
<struct name='CSSM_APPLE_TP_CERT_REQUEST' type64='{_CSSM_APPLE_TP_CERT_REQUEST=&quot;cspHand&quot;q&quot;clHand&quot;q&quot;serialNumber&quot;I&quot;numSubjectNames&quot;I&quot;subjectNames&quot;^{_CSSM_APPLE_TP_NAME_OID=&quot;string&quot;*&quot;oid&quot;^{cssm_data}}&quot;numIssuerNames&quot;I&quot;issuerNames&quot;^{_CSSM_APPLE_TP_NAME_OID=&quot;string&quot;*&quot;oid&quot;^{cssm_data}}&quot;issuerNameX509&quot;^{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;certPublicKey&quot;^{cssm_key=&quot;KeyHeader&quot;{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}&quot;KeyData&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuerPrivateKey&quot;^{cssm_key=&quot;KeyHeader&quot;{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}&quot;KeyData&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;signatureAlg&quot;I&quot;signatureOid&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;notBefore&quot;I&quot;notAfter&quot;I&quot;numExtensions&quot;I&quot;extensions&quot;^{__CE_DataAndType=&quot;type&quot;i&quot;extension&quot;(?=&quot;authorityKeyID&quot;{__CE_AuthorityKeyID=&quot;keyIdentifierPresent&quot;i&quot;keyIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;generalNamesPresent&quot;i&quot;generalNames&quot;^{__CE_GeneralNames}&quot;serialNumberPresent&quot;i&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;subjectKeyID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;keyUsage&quot;S&quot;subjectAltName&quot;{__CE_GeneralNames=&quot;numNames&quot;I&quot;generalName&quot;^{__CE_GeneralName}}&quot;issuerAltName&quot;{__CE_GeneralNames=&quot;numNames&quot;I&quot;generalName&quot;^{__CE_GeneralName}}&quot;extendedKeyUsage&quot;{__CE_ExtendedKeyUsage=&quot;numPurposes&quot;I&quot;purposes&quot;^{cssm_data}}&quot;basicConstraints&quot;{__CE_BasicConstraints=&quot;cA&quot;i&quot;pathLenConstraintPresent&quot;i&quot;pathLenConstraint&quot;I}&quot;certPolicies&quot;{__CE_CertPolicies=&quot;numPolicies&quot;I&quot;policies&quot;^{__CE_PolicyInformation}}&quot;netscapeCertType&quot;S&quot;crlNumber&quot;I&quot;deltaCrl&quot;I&quot;crlReason&quot;I&quot;crlDistPoints&quot;{__CE_CRLDistPointsSyntax=&quot;numDistPoints&quot;I&quot;distPoints&quot;^{__CE_CRLDistributionPoint}}&quot;issuingDistPoint&quot;{__CE_IssuingDistributionPoint=&quot;distPointName&quot;^{__CE_DistributionPointName}&quot;onlyUserCertsPresent&quot;i&quot;onlyUserCerts&quot;i&quot;onlyCACertsPresent&quot;i&quot;onlyCACerts&quot;i&quot;onlySomeReasonsPresent&quot;i&quot;onlySomeReasons&quot;C&quot;indirectCrlPresent&quot;i&quot;indirectCrl&quot;i}&quot;authorityInfoAccess&quot;{__CE_AuthorityInfoAccess=&quot;numAccessDescriptions&quot;I&quot;accessDescriptions&quot;^{__CE_AccessDescription}}&quot;qualifiedCertStatements&quot;{__CE_QC_Statements=&quot;numQCStatements&quot;I&quot;qcStatements&quot;^{__CE_QC_Statement}}&quot;nameConstraints&quot;{__CE_NameConstraints=&quot;permitted&quot;^{__CE_GeneralSubtrees}&quot;excluded&quot;^{__CE_GeneralSubtrees}}&quot;policyMappings&quot;{__CE_PolicyMappings=&quot;numPolicyMappings&quot;I&quot;policyMappings&quot;^{__CE_PolicyMapping}}&quot;policyConstraints&quot;{__CE_PolicyConstraints=&quot;requireExplicitPolicyPresent&quot;i&quot;requireExplicitPolicy&quot;I&quot;inhibitPolicyMappingPresent&quot;i&quot;inhibitPolicyMapping&quot;I}&quot;inhibitAnyPolicy&quot;I&quot;rawData&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*})&quot;critical&quot;i}&quot;challengeString&quot;*}'>
<field declared_type64='CSSM_CSP_HANDLE' name='cspHand' type64='q'/>
<field declared_type64='CSSM_CL_HANDLE' name='clHand' type64='q'/>
<field declared_type64='uint32' name='serialNumber' type64='I'/>
<field declared_type64='uint32' name='numSubjectNames' type64='I'/>
<field declared_type64='CSSM_APPLE_TP_NAME_OID*' name='subjectNames' type64='^{_CSSM_APPLE_TP_NAME_OID=&quot;string&quot;*&quot;oid&quot;^{cssm_data}}'/>
<field declared_type64='uint32' name='numIssuerNames' type64='I'/>
<field declared_type64='CSSM_APPLE_TP_NAME_OID*' name='issuerNames' type64='^{_CSSM_APPLE_TP_NAME_OID=&quot;string&quot;*&quot;oid&quot;^{cssm_data}}'/>
<field declared_type64='CSSM_X509_NAME_PTR' name='issuerNameX509' type64='^{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'/>
<field const='true' declared_type64='CSSM_KEY*' name='certPublicKey' type64='^{cssm_key=&quot;KeyHeader&quot;{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}&quot;KeyData&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field const='true' declared_type64='CSSM_KEY*' name='issuerPrivateKey' type64='^{cssm_key=&quot;KeyHeader&quot;{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}&quot;KeyData&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_ALGORITHMS' name='signatureAlg' type64='I'/>
<field declared_type64='CSSM_OID' name='signatureOid' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='uint32' name='notBefore' type64='I'/>
<field declared_type64='uint32' name='notAfter' type64='I'/>
<field declared_type64='uint32' name='numExtensions' type64='I'/>
<field declared_type64='CE_DataAndType*' name='extensions' type64='^{__CE_DataAndType=&quot;type&quot;i&quot;extension&quot;(?=&quot;authorityKeyID&quot;{__CE_AuthorityKeyID=&quot;keyIdentifierPresent&quot;i&quot;keyIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;generalNamesPresent&quot;i&quot;generalNames&quot;^{__CE_GeneralNames}&quot;serialNumberPresent&quot;i&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;subjectKeyID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;keyUsage&quot;S&quot;subjectAltName&quot;{__CE_GeneralNames=&quot;numNames&quot;I&quot;generalName&quot;^{__CE_GeneralName}}&quot;issuerAltName&quot;{__CE_GeneralNames=&quot;numNames&quot;I&quot;generalName&quot;^{__CE_GeneralName}}&quot;extendedKeyUsage&quot;{__CE_ExtendedKeyUsage=&quot;numPurposes&quot;I&quot;purposes&quot;^{cssm_data}}&quot;basicConstraints&quot;{__CE_BasicConstraints=&quot;cA&quot;i&quot;pathLenConstraintPresent&quot;i&quot;pathLenConstraint&quot;I}&quot;certPolicies&quot;{__CE_CertPolicies=&quot;numPolicies&quot;I&quot;policies&quot;^{__CE_PolicyInformation}}&quot;netscapeCertType&quot;S&quot;crlNumber&quot;I&quot;deltaCrl&quot;I&quot;crlReason&quot;I&quot;crlDistPoints&quot;{__CE_CRLDistPointsSyntax=&quot;numDistPoints&quot;I&quot;distPoints&quot;^{__CE_CRLDistributionPoint}}&quot;issuingDistPoint&quot;{__CE_IssuingDistributionPoint=&quot;distPointName&quot;^{__CE_DistributionPointName}&quot;onlyUserCertsPresent&quot;i&quot;onlyUserCerts&quot;i&quot;onlyCACertsPresent&quot;i&quot;onlyCACerts&quot;i&quot;onlySomeReasonsPresent&quot;i&quot;onlySomeReasons&quot;C&quot;indirectCrlPresent&quot;i&quot;indirectCrl&quot;i}&quot;authorityInfoAccess&quot;{__CE_AuthorityInfoAccess=&quot;numAccessDescriptions&quot;I&quot;accessDescriptions&quot;^{__CE_AccessDescription}}&quot;qualifiedCertStatements&quot;{__CE_QC_Statements=&quot;numQCStatements&quot;I&quot;qcStatements&quot;^{__CE_QC_Statement}}&quot;nameConstraints&quot;{__CE_NameConstraints=&quot;permitted&quot;^{__CE_GeneralSubtrees}&quot;excluded&quot;^{__CE_GeneralSubtrees}}&quot;policyMappings&quot;{__CE_PolicyMappings=&quot;numPolicyMappings&quot;I&quot;policyMappings&quot;^{__CE_PolicyMapping}}&quot;policyConstraints&quot;{__CE_PolicyConstraints=&quot;requireExplicitPolicyPresent&quot;i&quot;requireExplicitPolicy&quot;I&quot;inhibitPolicyMappingPresent&quot;i&quot;inhibitPolicyMapping&quot;I}&quot;inhibitAnyPolicy&quot;I&quot;rawData&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*})&quot;critical&quot;i}'/>
<field const='true' declared_type64='char*' name='challengeString' type64='*'/>
</struct>
<struct name='CSSM_APPLE_TP_CRL_OPTIONS' type64='{_CSSM_APPLE_TP_CRL_OPTIONS=&quot;Version&quot;I&quot;CrlFlags&quot;I&quot;crlStore&quot;^{cssm_dl_db_handle}}'>
<field declared_type64='uint32' name='Version' type64='I'/>
<field declared_type64='CSSM_APPLE_TP_CRL_OPT_FLAGS' name='CrlFlags' type64='I'/>
<field declared_type64='CSSM_DL_DB_HANDLE_PTR' name='crlStore' type64='^{cssm_dl_db_handle=qq}'/>
</struct>
<struct name='CSSM_APPLE_TP_NAME_OID' type64='{_CSSM_APPLE_TP_NAME_OID=&quot;string&quot;*&quot;oid&quot;^{cssm_data}}'>
<field const='true' declared_type64='char*' name='string' type64='*'/>
<field const='true' declared_type64='CSSM_OID*' name='oid' type64='^{cssm_data=Q*}'/>
</struct>
<struct name='CSSM_APPLE_TP_SMIME_OPTIONS' type64='{_CSSM_APPLE_TP_SMIME_OPTIONS=&quot;Version&quot;I&quot;IntendedUsage&quot;S&quot;SenderEmailLen&quot;I&quot;SenderEmail&quot;*}'>
<field declared_type64='uint32' name='Version' type64='I'/>
<field declared_type64='CE_KeyUsage' name='IntendedUsage' type64='S'/>
<field declared_type64='uint32' name='SenderEmailLen' type64='I'/>
<field const='true' declared_type64='char*' name='SenderEmail' type64='*'/>
</struct>
<struct name='CSSM_APPLE_TP_SSL_OPTIONS' type64='{_CSSM_APPLE_TP_SSL_OPTIONS=&quot;Version&quot;I&quot;ServerNameLen&quot;I&quot;ServerName&quot;*&quot;Flags&quot;I}'>
<field declared_type64='uint32' name='Version' type64='I'/>
<field declared_type64='uint32' name='ServerNameLen' type64='I'/>
<field const='true' declared_type64='char*' name='ServerName' type64='*'/>
<field declared_type64='uint32' name='Flags' type64='I'/>
</struct>
<struct name='CSSM_AUTHORIZATIONGROUP' type64='{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}'>
<field declared_type64='uint32' name='NumberOfAuthTags' type64='I'/>
<field declared_type64='CSSM_ACL_AUTHORIZATION_TAG*' name='AuthTags' type64='^i'/>
</struct>
<struct name='CSSM_AUTHORIZATIONGROUP_PTR' type64='{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}'>
<field declared_type64='uint32' name='NumberOfAuthTags' type64='I'/>
<field declared_type64='CSSM_ACL_AUTHORIZATION_TAG*' name='AuthTags' type64='^i'/>
</struct>
<struct name='CSSM_BASE_CERTS' type64='{cssm_base_certs=&quot;TPHandle&quot;q&quot;CLHandle&quot;q&quot;Certs&quot;{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}}'>
<field declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='CSSM_CERTGROUP' name='Certs' type64='{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}'/>
</struct>
<struct name='CSSM_BASE_CERTS_PTR' type64='{cssm_base_certs=&quot;TPHandle&quot;q&quot;CLHandle&quot;q&quot;Certs&quot;{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}}'>
<field declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='CSSM_CERTGROUP' name='Certs' type64='{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}'/>
</struct>
<struct name='CSSM_CERTGROUP' type64='{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}'>
<field declared_type64='CSSM_CERT_TYPE' name='CertType' type64='I'/>
<field declared_type64='CSSM_CERT_ENCODING' name='CertEncoding' type64='I'/>
<field declared_type64='uint32' name='NumCerts' type64='I'/>
<field declared_type64='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/Security.framework/Headers/cssmtype.h:560:5)' name='GroupList' type64='(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})'/>
<field declared_type64='CSSM_CERTGROUP_TYPE' name='CertGroupType' type64='I'/>
<field declared_type64='void*' name='Reserved' type64='^v'/>
</struct>
<struct name='CSSM_CERTGROUP_PTR' type64='{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}'>
<field declared_type64='CSSM_CERT_TYPE' name='CertType' type64='I'/>
<field declared_type64='CSSM_CERT_ENCODING' name='CertEncoding' type64='I'/>
<field declared_type64='uint32' name='NumCerts' type64='I'/>
<field declared_type64='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/Security.framework/Headers/cssmtype.h:560:5)' name='GroupList' type64='(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})'/>
<field declared_type64='CSSM_CERTGROUP_TYPE' name='CertGroupType' type64='I'/>
<field declared_type64='void*' name='Reserved' type64='^v'/>
</struct>
<struct name='CSSM_CERT_BUNDLE' type64='{cssm_cert_bundle=&quot;BundleHeader&quot;{cssm_cert_bundle_header=&quot;BundleType&quot;I&quot;BundleEncoding&quot;I}&quot;Bundle&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_CERT_BUNDLE_HEADER' name='BundleHeader' type64='{cssm_cert_bundle_header=&quot;BundleType&quot;I&quot;BundleEncoding&quot;I}'/>
<field declared_type64='CSSM_DATA' name='Bundle' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_CERT_BUNDLE_HEADER' type64='{cssm_cert_bundle_header=&quot;BundleType&quot;I&quot;BundleEncoding&quot;I}'>
<field declared_type64='CSSM_CERT_BUNDLE_TYPE' name='BundleType' type64='I'/>
<field declared_type64='CSSM_CERT_BUNDLE_ENCODING' name='BundleEncoding' type64='I'/>
</struct>
<struct name='CSSM_CERT_BUNDLE_HEADER_PTR' type64='{cssm_cert_bundle_header=&quot;BundleType&quot;I&quot;BundleEncoding&quot;I}'>
<field declared_type64='CSSM_CERT_BUNDLE_TYPE' name='BundleType' type64='I'/>
<field declared_type64='CSSM_CERT_BUNDLE_ENCODING' name='BundleEncoding' type64='I'/>
</struct>
<struct name='CSSM_CERT_BUNDLE_PTR' type64='{cssm_cert_bundle=&quot;BundleHeader&quot;{cssm_cert_bundle_header=&quot;BundleType&quot;I&quot;BundleEncoding&quot;I}&quot;Bundle&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_CERT_BUNDLE_HEADER' name='BundleHeader' type64='{cssm_cert_bundle_header=&quot;BundleType&quot;I&quot;BundleEncoding&quot;I}'/>
<field declared_type64='CSSM_DATA' name='Bundle' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_CERT_PAIR' type64='{cssm_cert_pair=&quot;EncodedCert&quot;{cssm_encoded_cert=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;CertBlob&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;ParsedCert&quot;{cssm_parsed_cert=&quot;CertType&quot;I&quot;ParsedCertFormat&quot;I&quot;ParsedCert&quot;^v}}'>
<field declared_type64='CSSM_ENCODED_CERT' name='EncodedCert' type64='{cssm_encoded_cert=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;CertBlob&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_PARSED_CERT' name='ParsedCert' type64='{cssm_parsed_cert=&quot;CertType&quot;I&quot;ParsedCertFormat&quot;I&quot;ParsedCert&quot;^v}'/>
</struct>
<struct name='CSSM_CERT_PAIR_PTR' type64='{cssm_cert_pair=&quot;EncodedCert&quot;{cssm_encoded_cert=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;CertBlob&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;ParsedCert&quot;{cssm_parsed_cert=&quot;CertType&quot;I&quot;ParsedCertFormat&quot;I&quot;ParsedCert&quot;^v}}'>
<field declared_type64='CSSM_ENCODED_CERT' name='EncodedCert' type64='{cssm_encoded_cert=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;CertBlob&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_PARSED_CERT' name='ParsedCert' type64='{cssm_parsed_cert=&quot;CertType&quot;I&quot;ParsedCertFormat&quot;I&quot;ParsedCert&quot;^v}'/>
</struct>
<struct name='CSSM_CONTEXT' type64='{cssm_context=&quot;ContextType&quot;I&quot;AlgorithmType&quot;I&quot;NumberOfAttributes&quot;I&quot;ContextAttributes&quot;^{cssm_context_attribute}&quot;CSPHandle&quot;q&quot;Privileged&quot;i&quot;EncryptionProhibited&quot;I&quot;WorkFactor&quot;I&quot;Reserved&quot;I}'>
<field declared_type64='CSSM_CONTEXT_TYPE' name='ContextType' type64='I'/>
<field declared_type64='CSSM_ALGORITHMS' name='AlgorithmType' type64='I'/>
<field declared_type64='uint32' name='NumberOfAttributes' type64='I'/>
<field declared_type64='CSSM_CONTEXT_ATTRIBUTE_PTR' name='ContextAttributes' type64='^{cssm_context_attribute=II(cssm_context_attribute_value=*I^{cssm_access_credentials}^{cssm_key}^{cssm_data}I^{cssm_date}^{cssm_range}^{cssm_crypto_data}^{cssm_version}^{cssm_dl_db_handle}^{cssm_kr_profile})}'/>
<field declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<field declared_type64='CSSM_BOOL' name='Privileged' type64='i'/>
<field declared_type64='uint32' name='EncryptionProhibited' type64='I'/>
<field declared_type64='uint32' name='WorkFactor' type64='I'/>
<field declared_type64='uint32' name='Reserved' type64='I'/>
</struct>
<struct name='CSSM_CONTEXT_ATTRIBUTE' type64='{cssm_context_attribute=&quot;AttributeType&quot;I&quot;AttributeLength&quot;I&quot;Attribute&quot;(cssm_context_attribute_value=&quot;String&quot;*&quot;Uint32&quot;I&quot;AccessCredentials&quot;^{cssm_access_credentials}&quot;Key&quot;^{cssm_key}&quot;Data&quot;^{cssm_data}&quot;Padding&quot;I&quot;Date&quot;^{cssm_date}&quot;Range&quot;^{cssm_range}&quot;CryptoData&quot;^{cssm_crypto_data}&quot;Version&quot;^{cssm_version}&quot;DLDBHandle&quot;^{cssm_dl_db_handle}&quot;KRProfile&quot;^{cssm_kr_profile})}'>
<field declared_type64='CSSM_ATTRIBUTE_TYPE' name='AttributeType' type64='I'/>
<field declared_type64='uint32' name='AttributeLength' type64='I'/>
<field declared_type64='union cssm_context_attribute_value' name='Attribute' type64='(cssm_context_attribute_value=&quot;String&quot;*&quot;Uint32&quot;I&quot;AccessCredentials&quot;^{cssm_access_credentials}&quot;Key&quot;^{cssm_key}&quot;Data&quot;^{cssm_data}&quot;Padding&quot;I&quot;Date&quot;^{cssm_date}&quot;Range&quot;^{cssm_range}&quot;CryptoData&quot;^{cssm_crypto_data}&quot;Version&quot;^{cssm_version}&quot;DLDBHandle&quot;^{cssm_dl_db_handle}&quot;KRProfile&quot;^{cssm_kr_profile})'/>
</struct>
<struct name='CSSM_CONTEXT_ATTRIBUTE_PTR' type64='{cssm_context_attribute=&quot;AttributeType&quot;I&quot;AttributeLength&quot;I&quot;Attribute&quot;(cssm_context_attribute_value=&quot;String&quot;*&quot;Uint32&quot;I&quot;AccessCredentials&quot;^{cssm_access_credentials}&quot;Key&quot;^{cssm_key}&quot;Data&quot;^{cssm_data}&quot;Padding&quot;I&quot;Date&quot;^{cssm_date}&quot;Range&quot;^{cssm_range}&quot;CryptoData&quot;^{cssm_crypto_data}&quot;Version&quot;^{cssm_version}&quot;DLDBHandle&quot;^{cssm_dl_db_handle}&quot;KRProfile&quot;^{cssm_kr_profile})}'>
<field declared_type64='CSSM_ATTRIBUTE_TYPE' name='AttributeType' type64='I'/>
<field declared_type64='uint32' name='AttributeLength' type64='I'/>
<field declared_type64='union cssm_context_attribute_value' name='Attribute' type64='(cssm_context_attribute_value=&quot;String&quot;*&quot;Uint32&quot;I&quot;AccessCredentials&quot;^{cssm_access_credentials}&quot;Key&quot;^{cssm_key}&quot;Data&quot;^{cssm_data}&quot;Padding&quot;I&quot;Date&quot;^{cssm_date}&quot;Range&quot;^{cssm_range}&quot;CryptoData&quot;^{cssm_crypto_data}&quot;Version&quot;^{cssm_version}&quot;DLDBHandle&quot;^{cssm_dl_db_handle}&quot;KRProfile&quot;^{cssm_kr_profile})'/>
</struct>
<struct name='CSSM_CONTEXT_PTR' type64='{cssm_context=&quot;ContextType&quot;I&quot;AlgorithmType&quot;I&quot;NumberOfAttributes&quot;I&quot;ContextAttributes&quot;^{cssm_context_attribute}&quot;CSPHandle&quot;q&quot;Privileged&quot;i&quot;EncryptionProhibited&quot;I&quot;WorkFactor&quot;I&quot;Reserved&quot;I}'>
<field declared_type64='CSSM_CONTEXT_TYPE' name='ContextType' type64='I'/>
<field declared_type64='CSSM_ALGORITHMS' name='AlgorithmType' type64='I'/>
<field declared_type64='uint32' name='NumberOfAttributes' type64='I'/>
<field declared_type64='CSSM_CONTEXT_ATTRIBUTE_PTR' name='ContextAttributes' type64='^{cssm_context_attribute=II(cssm_context_attribute_value=*I^{cssm_access_credentials}^{cssm_key}^{cssm_data}I^{cssm_date}^{cssm_range}^{cssm_crypto_data}^{cssm_version}^{cssm_dl_db_handle}^{cssm_kr_profile})}'/>
<field declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<field declared_type64='CSSM_BOOL' name='Privileged' type64='i'/>
<field declared_type64='uint32' name='EncryptionProhibited' type64='I'/>
<field declared_type64='uint32' name='WorkFactor' type64='I'/>
<field declared_type64='uint32' name='Reserved' type64='I'/>
</struct>
<struct name='CSSM_CRLGROUP' type64='{cssm_crlgroup=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;NumberOfCrls&quot;I&quot;GroupCrlList&quot;(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})&quot;CrlGroupType&quot;I}'>
<field declared_type64='CSSM_CRL_TYPE' name='CrlType' type64='I'/>
<field declared_type64='CSSM_CRL_ENCODING' name='CrlEncoding' type64='I'/>
<field declared_type64='uint32' name='NumberOfCrls' type64='I'/>
<field declared_type64='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/Security.framework/Headers/cssmtype.h:1401:5)' name='GroupCrlList' type64='(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})'/>
<field declared_type64='CSSM_CRLGROUP_TYPE' name='CrlGroupType' type64='I'/>
</struct>
<struct name='CSSM_CRLGROUP_PTR' type64='{cssm_crlgroup=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;NumberOfCrls&quot;I&quot;GroupCrlList&quot;(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})&quot;CrlGroupType&quot;I}'>
<field declared_type64='CSSM_CRL_TYPE' name='CrlType' type64='I'/>
<field declared_type64='CSSM_CRL_ENCODING' name='CrlEncoding' type64='I'/>
<field declared_type64='uint32' name='NumberOfCrls' type64='I'/>
<field declared_type64='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/Security.framework/Headers/cssmtype.h:1401:5)' name='GroupCrlList' type64='(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})'/>
<field declared_type64='CSSM_CRLGROUP_TYPE' name='CrlGroupType' type64='I'/>
</struct>
<struct name='CSSM_CRL_PAIR' type64='{cssm_crl_pair=&quot;EncodedCrl&quot;{cssm_encoded_crl=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;CrlBlob&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;ParsedCrl&quot;{cssm_parsed_crl=&quot;CrlType&quot;I&quot;ParsedCrlFormat&quot;I&quot;ParsedCrl&quot;^v}}'>
<field declared_type64='CSSM_ENCODED_CRL' name='EncodedCrl' type64='{cssm_encoded_crl=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;CrlBlob&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_PARSED_CRL' name='ParsedCrl' type64='{cssm_parsed_crl=&quot;CrlType&quot;I&quot;ParsedCrlFormat&quot;I&quot;ParsedCrl&quot;^v}'/>
</struct>
<struct name='CSSM_CRL_PAIR_PTR' type64='{cssm_crl_pair=&quot;EncodedCrl&quot;{cssm_encoded_crl=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;CrlBlob&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;ParsedCrl&quot;{cssm_parsed_crl=&quot;CrlType&quot;I&quot;ParsedCrlFormat&quot;I&quot;ParsedCrl&quot;^v}}'>
<field declared_type64='CSSM_ENCODED_CRL' name='EncodedCrl' type64='{cssm_encoded_crl=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;CrlBlob&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_PARSED_CRL' name='ParsedCrl' type64='{cssm_parsed_crl=&quot;CrlType&quot;I&quot;ParsedCrlFormat&quot;I&quot;ParsedCrl&quot;^v}'/>
</struct>
<struct name='CSSM_CRYPTO_DATA' type64='{cssm_crypto_data=&quot;Param&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;Callback&quot;^?&quot;CallerCtx&quot;^v}'>
<field declared_type64='CSSM_DATA' name='Param' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_CALLBACK' function_pointer='true' name='Callback' type64='^?'>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='void*' name='CallerCtx' type64='^v'/>
</struct>
<struct name='CSSM_CRYPTO_DATA_PTR' type64='{cssm_crypto_data=&quot;Param&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;Callback&quot;^?&quot;CallerCtx&quot;^v}'>
<field declared_type64='CSSM_DATA' name='Param' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_CALLBACK' function_pointer='true' name='Callback' type64='^?'>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='void*' name='CallerCtx' type64='^v'/>
</struct>
<struct name='CSSM_CSP_OPERATIONAL_STATISTICS' type64='{cssm_csp_operational_statistics=&quot;UserAuthenticated&quot;i&quot;DeviceFlags&quot;I&quot;TokenMaxSessionCount&quot;I&quot;TokenOpenedSessionCount&quot;I&quot;TokenMaxRWSessionCount&quot;I&quot;TokenOpenedRWSessionCount&quot;I&quot;TokenTotalPublicMem&quot;I&quot;TokenFreePublicMem&quot;I&quot;TokenTotalPrivateMem&quot;I&quot;TokenFreePrivateMem&quot;I}'>
<field declared_type64='CSSM_BOOL' name='UserAuthenticated' type64='i'/>
<field declared_type64='CSSM_CSP_FLAGS' name='DeviceFlags' type64='I'/>
<field declared_type64='uint32' name='TokenMaxSessionCount' type64='I'/>
<field declared_type64='uint32' name='TokenOpenedSessionCount' type64='I'/>
<field declared_type64='uint32' name='TokenMaxRWSessionCount' type64='I'/>
<field declared_type64='uint32' name='TokenOpenedRWSessionCount' type64='I'/>
<field declared_type64='uint32' name='TokenTotalPublicMem' type64='I'/>
<field declared_type64='uint32' name='TokenFreePublicMem' type64='I'/>
<field declared_type64='uint32' name='TokenTotalPrivateMem' type64='I'/>
<field declared_type64='uint32' name='TokenFreePrivateMem' type64='I'/>
</struct>
<struct name='CSSM_CSP_OPERATIONAL_STATISTICS_PTR' type64='{cssm_csp_operational_statistics=&quot;UserAuthenticated&quot;i&quot;DeviceFlags&quot;I&quot;TokenMaxSessionCount&quot;I&quot;TokenOpenedSessionCount&quot;I&quot;TokenMaxRWSessionCount&quot;I&quot;TokenOpenedRWSessionCount&quot;I&quot;TokenTotalPublicMem&quot;I&quot;TokenFreePublicMem&quot;I&quot;TokenTotalPrivateMem&quot;I&quot;TokenFreePrivateMem&quot;I}'>
<field declared_type64='CSSM_BOOL' name='UserAuthenticated' type64='i'/>
<field declared_type64='CSSM_CSP_FLAGS' name='DeviceFlags' type64='I'/>
<field declared_type64='uint32' name='TokenMaxSessionCount' type64='I'/>
<field declared_type64='uint32' name='TokenOpenedSessionCount' type64='I'/>
<field declared_type64='uint32' name='TokenMaxRWSessionCount' type64='I'/>
<field declared_type64='uint32' name='TokenOpenedRWSessionCount' type64='I'/>
<field declared_type64='uint32' name='TokenTotalPublicMem' type64='I'/>
<field declared_type64='uint32' name='TokenFreePublicMem' type64='I'/>
<field declared_type64='uint32' name='TokenTotalPrivateMem' type64='I'/>
<field declared_type64='uint32' name='TokenFreePrivateMem' type64='I'/>
</struct>
<struct name='CSSM_DATA' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'>
<field declared_type64='CSSM_SIZE' name='Length' type64='Q'/>
<field declared_type64='uint8*' name='Data' type64='*'/>
</struct>
<struct name='CSSM_DATA_PTR' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'>
<field declared_type64='CSSM_SIZE' name='Length' type64='Q'/>
<field declared_type64='uint8*' name='Data' type64='*'/>
</struct>
<struct name='CSSM_DATE' type64='{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}'>
<field declared_type64='uint8*' name='Year' type64='[4C]'/>
<field declared_type64='uint8*' name='Month' type64='[2C]'/>
<field declared_type64='uint8*' name='Day' type64='[2C]'/>
</struct>
<struct name='CSSM_DATE_PTR' type64='{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}'>
<field declared_type64='uint8*' name='Year' type64='[4C]'/>
<field declared_type64='uint8*' name='Month' type64='[2C]'/>
<field declared_type64='uint8*' name='Day' type64='[2C]'/>
</struct>
<struct name='CSSM_DBINFO' type64='{cssm_dbinfo=&quot;NumberOfRecordTypes&quot;I&quot;DefaultParsingModules&quot;^{cssm_db_parsing_module_info}&quot;RecordAttributeNames&quot;^{cssm_db_record_attribute_info}&quot;RecordIndexes&quot;^{cssm_db_record_index_info}&quot;IsLocal&quot;i&quot;AccessPath&quot;*&quot;Reserved&quot;^v}'>
<field declared_type64='uint32' name='NumberOfRecordTypes' type64='I'/>
<field declared_type64='CSSM_DB_PARSING_MODULE_INFO_PTR' name='DefaultParsingModules' type64='^{cssm_db_parsing_module_info=I{cssm_subservice_uid={cssm_guid=ISS[8C]}{cssm_version=II}II}}'/>
<field declared_type64='CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR' name='RecordAttributeNames' type64='^{cssm_db_record_attribute_info=II^{cssm_db_attribute_info}}'/>
<field declared_type64='CSSM_DB_RECORD_INDEX_INFO_PTR' name='RecordIndexes' type64='^{cssm_db_record_index_info=II^{cssm_db_index_info}}'/>
<field declared_type64='CSSM_BOOL' name='IsLocal' type64='i'/>
<field declared_type64='char*' name='AccessPath' type64='*'/>
<field declared_type64='void*' name='Reserved' type64='^v'/>
</struct>
<struct name='CSSM_DBINFO_PTR' type64='{cssm_dbinfo=&quot;NumberOfRecordTypes&quot;I&quot;DefaultParsingModules&quot;^{cssm_db_parsing_module_info}&quot;RecordAttributeNames&quot;^{cssm_db_record_attribute_info}&quot;RecordIndexes&quot;^{cssm_db_record_index_info}&quot;IsLocal&quot;i&quot;AccessPath&quot;*&quot;Reserved&quot;^v}'>
<field declared_type64='uint32' name='NumberOfRecordTypes' type64='I'/>
<field declared_type64='CSSM_DB_PARSING_MODULE_INFO_PTR' name='DefaultParsingModules' type64='^{cssm_db_parsing_module_info=I{cssm_subservice_uid={cssm_guid=ISS[8C]}{cssm_version=II}II}}'/>
<field declared_type64='CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR' name='RecordAttributeNames' type64='^{cssm_db_record_attribute_info=II^{cssm_db_attribute_info}}'/>
<field declared_type64='CSSM_DB_RECORD_INDEX_INFO_PTR' name='RecordIndexes' type64='^{cssm_db_record_index_info=II^{cssm_db_index_info}}'/>
<field declared_type64='CSSM_BOOL' name='IsLocal' type64='i'/>
<field declared_type64='char*' name='AccessPath' type64='*'/>
<field declared_type64='void*' name='Reserved' type64='^v'/>
</struct>
<struct name='CSSM_DB_ATTRIBUTE_DATA' type64='{cssm_db_attribute_data=&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}&quot;NumberOfValues&quot;I&quot;Value&quot;^{cssm_data}}'>
<field declared_type64='CSSM_DB_ATTRIBUTE_INFO' name='Info' type64='{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}'/>
<field declared_type64='uint32' name='NumberOfValues' type64='I'/>
<field declared_type64='CSSM_DATA_PTR' name='Value' type64='^{cssm_data=Q*}'/>
</struct>
<struct name='CSSM_DB_ATTRIBUTE_DATA_PTR' type64='{cssm_db_attribute_data=&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}&quot;NumberOfValues&quot;I&quot;Value&quot;^{cssm_data}}'>
<field declared_type64='CSSM_DB_ATTRIBUTE_INFO' name='Info' type64='{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}'/>
<field declared_type64='uint32' name='NumberOfValues' type64='I'/>
<field declared_type64='CSSM_DATA_PTR' name='Value' type64='^{cssm_data=Q*}'/>
</struct>
<struct name='CSSM_DB_ATTRIBUTE_INFO' type64='{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}'>
<field declared_type64='CSSM_DB_ATTRIBUTE_NAME_FORMAT' name='AttributeNameFormat' type64='I'/>
<field declared_type64='union cssm_db_attribute_label' name='Label' type64='(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)'/>
<field declared_type64='CSSM_DB_ATTRIBUTE_FORMAT' name='AttributeFormat' type64='I'/>
</struct>
<struct name='CSSM_DB_ATTRIBUTE_INFO_PTR' type64='{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}'>
<field declared_type64='CSSM_DB_ATTRIBUTE_NAME_FORMAT' name='AttributeNameFormat' type64='I'/>
<field declared_type64='union cssm_db_attribute_label' name='Label' type64='(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)'/>
<field declared_type64='CSSM_DB_ATTRIBUTE_FORMAT' name='AttributeFormat' type64='I'/>
</struct>
<struct name='CSSM_DB_INDEX_INFO' type64='{cssm_db_index_info=&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}}'>
<field declared_type64='CSSM_DB_INDEX_TYPE' name='IndexType' type64='I'/>
<field declared_type64='CSSM_DB_INDEXED_DATA_LOCATION' name='IndexedDataLocation' type64='I'/>
<field declared_type64='CSSM_DB_ATTRIBUTE_INFO' name='Info' type64='{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}'/>
</struct>
<struct name='CSSM_DB_INDEX_INFO_PTR' type64='{cssm_db_index_info=&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}}'>
<field declared_type64='CSSM_DB_INDEX_TYPE' name='IndexType' type64='I'/>
<field declared_type64='CSSM_DB_INDEXED_DATA_LOCATION' name='IndexedDataLocation' type64='I'/>
<field declared_type64='CSSM_DB_ATTRIBUTE_INFO' name='Info' type64='{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}'/>
</struct>
<struct name='CSSM_DB_PARSING_MODULE_INFO' type64='{cssm_db_parsing_module_info=&quot;RecordType&quot;I&quot;ModuleSubserviceUid&quot;{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}}'>
<field declared_type64='CSSM_DB_RECORDTYPE' name='RecordType' type64='I'/>
<field declared_type64='CSSM_SUBSERVICE_UID' name='ModuleSubserviceUid' type64='{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}'/>
</struct>
<struct name='CSSM_DB_PARSING_MODULE_INFO_PTR' type64='{cssm_db_parsing_module_info=&quot;RecordType&quot;I&quot;ModuleSubserviceUid&quot;{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}}'>
<field declared_type64='CSSM_DB_RECORDTYPE' name='RecordType' type64='I'/>
<field declared_type64='CSSM_SUBSERVICE_UID' name='ModuleSubserviceUid' type64='{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}'/>
</struct>
<struct name='CSSM_DB_RECORD_ATTRIBUTE_DATA' type64='{cssm_db_record_attribute_data=&quot;DataRecordType&quot;I&quot;SemanticInformation&quot;I&quot;NumberOfAttributes&quot;I&quot;AttributeData&quot;^{cssm_db_attribute_data}}'>
<field declared_type64='CSSM_DB_RECORDTYPE' name='DataRecordType' type64='I'/>
<field declared_type64='uint32' name='SemanticInformation' type64='I'/>
<field declared_type64='uint32' name='NumberOfAttributes' type64='I'/>
<field declared_type64='CSSM_DB_ATTRIBUTE_DATA_PTR' name='AttributeData' type64='^{cssm_db_attribute_data={cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}I^{cssm_data}}'/>
</struct>
<struct name='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type64='{cssm_db_record_attribute_data=&quot;DataRecordType&quot;I&quot;SemanticInformation&quot;I&quot;NumberOfAttributes&quot;I&quot;AttributeData&quot;^{cssm_db_attribute_data}}'>
<field declared_type64='CSSM_DB_RECORDTYPE' name='DataRecordType' type64='I'/>
<field declared_type64='uint32' name='SemanticInformation' type64='I'/>
<field declared_type64='uint32' name='NumberOfAttributes' type64='I'/>
<field declared_type64='CSSM_DB_ATTRIBUTE_DATA_PTR' name='AttributeData' type64='^{cssm_db_attribute_data={cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}I^{cssm_data}}'/>
</struct>
<struct name='CSSM_DB_RECORD_ATTRIBUTE_INFO' type64='{cssm_db_record_attribute_info=&quot;DataRecordType&quot;I&quot;NumberOfAttributes&quot;I&quot;AttributeInfo&quot;^{cssm_db_attribute_info}}'>
<field declared_type64='CSSM_DB_RECORDTYPE' name='DataRecordType' type64='I'/>
<field declared_type64='uint32' name='NumberOfAttributes' type64='I'/>
<field declared_type64='CSSM_DB_ATTRIBUTE_INFO_PTR' name='AttributeInfo' type64='^{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}'/>
</struct>
<struct name='CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR' type64='{cssm_db_record_attribute_info=&quot;DataRecordType&quot;I&quot;NumberOfAttributes&quot;I&quot;AttributeInfo&quot;^{cssm_db_attribute_info}}'>
<field declared_type64='CSSM_DB_RECORDTYPE' name='DataRecordType' type64='I'/>
<field declared_type64='uint32' name='NumberOfAttributes' type64='I'/>
<field declared_type64='CSSM_DB_ATTRIBUTE_INFO_PTR' name='AttributeInfo' type64='^{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}'/>
</struct>
<struct name='CSSM_DB_RECORD_INDEX_INFO' type64='{cssm_db_record_index_info=&quot;DataRecordType&quot;I&quot;NumberOfIndexes&quot;I&quot;IndexInfo&quot;^{cssm_db_index_info}}'>
<field declared_type64='CSSM_DB_RECORDTYPE' name='DataRecordType' type64='I'/>
<field declared_type64='uint32' name='NumberOfIndexes' type64='I'/>
<field declared_type64='CSSM_DB_INDEX_INFO_PTR' name='IndexInfo' type64='^{cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}'/>
</struct>
<struct name='CSSM_DB_RECORD_INDEX_INFO_PTR' type64='{cssm_db_record_index_info=&quot;DataRecordType&quot;I&quot;NumberOfIndexes&quot;I&quot;IndexInfo&quot;^{cssm_db_index_info}}'>
<field declared_type64='CSSM_DB_RECORDTYPE' name='DataRecordType' type64='I'/>
<field declared_type64='uint32' name='NumberOfIndexes' type64='I'/>
<field declared_type64='CSSM_DB_INDEX_INFO_PTR' name='IndexInfo' type64='^{cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}'/>
</struct>
<struct name='CSSM_DB_SCHEMA_ATTRIBUTE_INFO' type64='{cssm_db_schema_attribute_info=&quot;AttributeId&quot;I&quot;AttributeName&quot;*&quot;AttributeNameID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;DataType&quot;I}'>
<field declared_type64='uint32' name='AttributeId' type64='I'/>
<field declared_type64='char*' name='AttributeName' type64='*'/>
<field declared_type64='CSSM_OID' name='AttributeNameID' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DB_ATTRIBUTE_FORMAT' name='DataType' type64='I'/>
</struct>
<struct name='CSSM_DB_SCHEMA_ATTRIBUTE_INFO_PTR' type64='{cssm_db_schema_attribute_info=&quot;AttributeId&quot;I&quot;AttributeName&quot;*&quot;AttributeNameID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;DataType&quot;I}'>
<field declared_type64='uint32' name='AttributeId' type64='I'/>
<field declared_type64='char*' name='AttributeName' type64='*'/>
<field declared_type64='CSSM_OID' name='AttributeNameID' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DB_ATTRIBUTE_FORMAT' name='DataType' type64='I'/>
</struct>
<struct name='CSSM_DB_SCHEMA_INDEX_INFO' type64='{cssm_db_schema_index_info=&quot;AttributeId&quot;I&quot;IndexId&quot;I&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I}'>
<field declared_type64='uint32' name='AttributeId' type64='I'/>
<field declared_type64='uint32' name='IndexId' type64='I'/>
<field declared_type64='CSSM_DB_INDEX_TYPE' name='IndexType' type64='I'/>
<field declared_type64='CSSM_DB_INDEXED_DATA_LOCATION' name='IndexedDataLocation' type64='I'/>
</struct>
<struct name='CSSM_DB_SCHEMA_INDEX_INFO_PTR' type64='{cssm_db_schema_index_info=&quot;AttributeId&quot;I&quot;IndexId&quot;I&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I}'>
<field declared_type64='uint32' name='AttributeId' type64='I'/>
<field declared_type64='uint32' name='IndexId' type64='I'/>
<field declared_type64='CSSM_DB_INDEX_TYPE' name='IndexType' type64='I'/>
<field declared_type64='CSSM_DB_INDEXED_DATA_LOCATION' name='IndexedDataLocation' type64='I'/>
</struct>
<struct name='CSSM_DB_UNIQUE_RECORD' type64='{cssm_db_unique_record=&quot;RecordLocator&quot;{cssm_db_index_info=&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}}&quot;RecordIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_DB_INDEX_INFO' name='RecordLocator' type64='{cssm_db_index_info=&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}}'/>
<field declared_type64='CSSM_DATA' name='RecordIdentifier' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_DB_UNIQUE_RECORD_PTR' type64='{cssm_db_unique_record=&quot;RecordLocator&quot;{cssm_db_index_info=&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}}&quot;RecordIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_DB_INDEX_INFO' name='RecordLocator' type64='{cssm_db_index_info=&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}}'/>
<field declared_type64='CSSM_DATA' name='RecordIdentifier' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=&quot;DLHandle&quot;q&quot;DBHandle&quot;q}'>
<field declared_type64='CSSM_DL_HANDLE' name='DLHandle' type64='q'/>
<field declared_type64='CSSM_DB_HANDLE' name='DBHandle' type64='q'/>
</struct>
<struct name='CSSM_DL_DB_HANDLE_PTR' type64='{cssm_dl_db_handle=&quot;DLHandle&quot;q&quot;DBHandle&quot;q}'>
<field declared_type64='CSSM_DL_HANDLE' name='DLHandle' type64='q'/>
<field declared_type64='CSSM_DB_HANDLE' name='DBHandle' type64='q'/>
</struct>
<struct name='CSSM_DL_DB_LIST' type64='{cssm_dl_db_list=&quot;NumHandles&quot;I&quot;DLDBHandle&quot;^{cssm_dl_db_handle}}'>
<field declared_type64='uint32' name='NumHandles' type64='I'/>
<field declared_type64='CSSM_DL_DB_HANDLE_PTR' name='DLDBHandle' type64='^{cssm_dl_db_handle=qq}'/>
</struct>
<struct name='CSSM_DL_DB_LIST_PTR' type64='{cssm_dl_db_list=&quot;NumHandles&quot;I&quot;DLDBHandle&quot;^{cssm_dl_db_handle}}'>
<field declared_type64='uint32' name='NumHandles' type64='I'/>
<field declared_type64='CSSM_DL_DB_HANDLE_PTR' name='DLDBHandle' type64='^{cssm_dl_db_handle=qq}'/>
</struct>
<struct name='CSSM_DL_PKCS11_ATTRIBUTE' type64='{cssm_dl_pkcs11_attributes=&quot;DeviceAccessFlags&quot;I}'>
<field declared_type64='uint32' name='DeviceAccessFlags' type64='I'/>
</struct>
<struct name='CSSM_DL_PKCS11_ATTRIBUTE_PTR' type64='{cssm_dl_pkcs11_attributes=&quot;DeviceAccessFlags&quot;I}'>
<field declared_type64='uint32' name='DeviceAccessFlags' type64='I'/>
</struct>
<struct name='CSSM_ENCODED_CERT' type64='{cssm_encoded_cert=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;CertBlob&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_CERT_TYPE' name='CertType' type64='I'/>
<field declared_type64='CSSM_CERT_ENCODING' name='CertEncoding' type64='I'/>
<field declared_type64='CSSM_DATA' name='CertBlob' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_ENCODED_CERT_PTR' type64='{cssm_encoded_cert=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;CertBlob&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_CERT_TYPE' name='CertType' type64='I'/>
<field declared_type64='CSSM_CERT_ENCODING' name='CertEncoding' type64='I'/>
<field declared_type64='CSSM_DATA' name='CertBlob' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_ENCODED_CRL' type64='{cssm_encoded_crl=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;CrlBlob&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_CRL_TYPE' name='CrlType' type64='I'/>
<field declared_type64='CSSM_CRL_ENCODING' name='CrlEncoding' type64='I'/>
<field declared_type64='CSSM_DATA' name='CrlBlob' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_ENCODED_CRL_PTR' type64='{cssm_encoded_crl=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;CrlBlob&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_CRL_TYPE' name='CrlType' type64='I'/>
<field declared_type64='CSSM_CRL_ENCODING' name='CrlEncoding' type64='I'/>
<field declared_type64='CSSM_DATA' name='CrlBlob' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_EVIDENCE' type64='{cssm_evidence=&quot;EvidenceForm&quot;I&quot;Evidence&quot;^v}'>
<field declared_type64='CSSM_EVIDENCE_FORM' name='EvidenceForm' type64='I'/>
<field declared_type64='void*' name='Evidence' type64='^v'/>
</struct>
<struct name='CSSM_EVIDENCE_PTR' type64='{cssm_evidence=&quot;EvidenceForm&quot;I&quot;Evidence&quot;^v}'>
<field declared_type64='CSSM_EVIDENCE_FORM' name='EvidenceForm' type64='I'/>
<field declared_type64='void*' name='Evidence' type64='^v'/>
</struct>
<struct name='CSSM_FIELD' type64='{cssm_field=&quot;FieldOid&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;FieldValue&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_OID' name='FieldOid' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='FieldValue' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_FIELDGROUP' type64='{cssm_fieldgroup=&quot;NumberOfFields&quot;i&quot;Fields&quot;^{cssm_field}}'>
<field declared_type64='int' name='NumberOfFields' type64='i'/>
<field declared_type64='CSSM_FIELD_PTR' name='Fields' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
</struct>
<struct name='CSSM_FIELDGROUP_PTR' type64='{cssm_fieldgroup=&quot;NumberOfFields&quot;i&quot;Fields&quot;^{cssm_field}}'>
<field declared_type64='int' name='NumberOfFields' type64='i'/>
<field declared_type64='CSSM_FIELD_PTR' name='Fields' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
</struct>
<struct name='CSSM_FIELD_PTR' type64='{cssm_field=&quot;FieldOid&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;FieldValue&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_OID' name='FieldOid' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='FieldValue' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_FUNC_NAME_ADDR' type64='{cssm_func_name_addr=&quot;Name&quot;[68c]&quot;Address&quot;^?}'>
<field declared_type64='CSSM_STRING' name='Name' type64='[68c]'/>
<field declared_type64='CSSM_PROC_ADDR' function_pointer='true' name='Address' type64='^?'>
<retval declared_type64='void' type64='v'/>
</field>
</struct>
<struct name='CSSM_FUNC_NAME_ADDR_PTR' type64='{cssm_func_name_addr=&quot;Name&quot;[68c]&quot;Address&quot;^?}'>
<field declared_type64='CSSM_STRING' name='Name' type64='[68c]'/>
<field declared_type64='CSSM_PROC_ADDR' function_pointer='true' name='Address' type64='^?'>
<retval declared_type64='void' type64='v'/>
</field>
</struct>
<struct name='CSSM_GUID' type64='{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}'>
<field declared_type64='uint32' name='Data1' type64='I'/>
<field declared_type64='uint16' name='Data2' type64='S'/>
<field declared_type64='uint16' name='Data3' type64='S'/>
<field declared_type64='uint8*' name='Data4' type64='[8C]'/>
</struct>
<struct name='CSSM_GUID_PTR' type64='{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}'>
<field declared_type64='uint32' name='Data1' type64='I'/>
<field declared_type64='uint16' name='Data2' type64='S'/>
<field declared_type64='uint16' name='Data3' type64='S'/>
<field declared_type64='uint8*' name='Data4' type64='[8C]'/>
</struct>
<struct name='CSSM_KEA_DERIVE_PARAMS' type64='{cssm_kea_derive_params=&quot;Rb&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;Yb&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_DATA' name='Rb' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='Yb' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_KEA_DERIVE_PARAMS_PTR' type64='{cssm_kea_derive_params=&quot;Rb&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;Yb&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_DATA' name='Rb' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='Yb' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_KEY' type64='{cssm_key=&quot;KeyHeader&quot;{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}&quot;KeyData&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_KEYHEADER' name='KeyHeader' type64='{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}'/>
<field declared_type64='CSSM_DATA' name='KeyData' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_KEYHEADER' type64='{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}'>
<field declared_type64='CSSM_HEADERVERSION' name='HeaderVersion' type64='I'/>
<field declared_type64='CSSM_GUID' name='CspId' type64='{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}'/>
<field declared_type64='CSSM_KEYBLOB_TYPE' name='BlobType' type64='I'/>
<field declared_type64='CSSM_KEYBLOB_FORMAT' name='Format' type64='I'/>
<field declared_type64='CSSM_ALGORITHMS' name='AlgorithmId' type64='I'/>
<field declared_type64='CSSM_KEYCLASS' name='KeyClass' type64='I'/>
<field declared_type64='uint32' name='LogicalKeySizeInBits' type64='I'/>
<field declared_type64='CSSM_KEYATTR_FLAGS' name='KeyAttr' type64='I'/>
<field declared_type64='CSSM_KEYUSE' name='KeyUsage' type64='I'/>
<field declared_type64='CSSM_DATE' name='StartDate' type64='{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}'/>
<field declared_type64='CSSM_DATE' name='EndDate' type64='{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}'/>
<field declared_type64='CSSM_ALGORITHMS' name='WrapAlgorithmId' type64='I'/>
<field declared_type64='CSSM_ENCRYPT_MODE' name='WrapMode' type64='I'/>
<field declared_type64='uint32' name='Reserved' type64='I'/>
</struct>
<struct name='CSSM_KEYHEADER_PTR' type64='{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}'>
<field declared_type64='CSSM_HEADERVERSION' name='HeaderVersion' type64='I'/>
<field declared_type64='CSSM_GUID' name='CspId' type64='{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}'/>
<field declared_type64='CSSM_KEYBLOB_TYPE' name='BlobType' type64='I'/>
<field declared_type64='CSSM_KEYBLOB_FORMAT' name='Format' type64='I'/>
<field declared_type64='CSSM_ALGORITHMS' name='AlgorithmId' type64='I'/>
<field declared_type64='CSSM_KEYCLASS' name='KeyClass' type64='I'/>
<field declared_type64='uint32' name='LogicalKeySizeInBits' type64='I'/>
<field declared_type64='CSSM_KEYATTR_FLAGS' name='KeyAttr' type64='I'/>
<field declared_type64='CSSM_KEYUSE' name='KeyUsage' type64='I'/>
<field declared_type64='CSSM_DATE' name='StartDate' type64='{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}'/>
<field declared_type64='CSSM_DATE' name='EndDate' type64='{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}'/>
<field declared_type64='CSSM_ALGORITHMS' name='WrapAlgorithmId' type64='I'/>
<field declared_type64='CSSM_ENCRYPT_MODE' name='WrapMode' type64='I'/>
<field declared_type64='uint32' name='Reserved' type64='I'/>
</struct>
<struct name='CSSM_KEY_PTR' type64='{cssm_key=&quot;KeyHeader&quot;{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}&quot;KeyData&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_KEYHEADER' name='KeyHeader' type64='{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}'/>
<field declared_type64='CSSM_DATA' name='KeyData' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_KEY_SIZE' type64='{cssm_key_size=&quot;LogicalKeySizeInBits&quot;I&quot;EffectiveKeySizeInBits&quot;I}'>
<field declared_type64='uint32' name='LogicalKeySizeInBits' type64='I'/>
<field declared_type64='uint32' name='EffectiveKeySizeInBits' type64='I'/>
</struct>
<struct name='CSSM_KEY_SIZE_PTR' type64='{cssm_key_size=&quot;LogicalKeySizeInBits&quot;I&quot;EffectiveKeySizeInBits&quot;I}'>
<field declared_type64='uint32' name='LogicalKeySizeInBits' type64='I'/>
<field declared_type64='uint32' name='EffectiveKeySizeInBits' type64='I'/>
</struct>
<struct name='CSSM_KRSUBSERVICE' type64='{cssm_krsubservice=&quot;SubServiceId&quot;I&quot;Description&quot;*&quot;WrappedProduct&quot;{cssm_kr_wrappedproductinfo=&quot;StandardVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;StandardDescription&quot;[68c]&quot;ProductVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;ProductDescription&quot;[68c]&quot;ProductVendor&quot;[68c]&quot;ProductFlags&quot;I}}'>
<field declared_type64='uint32' name='SubServiceId' type64='I'/>
<field declared_type64='char*' name='Description' type64='*'/>
<field declared_type64='CSSM_KR_WRAPPEDPRODUCT_INFO' name='WrappedProduct' type64='{cssm_kr_wrappedproductinfo=&quot;StandardVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;StandardDescription&quot;[68c]&quot;ProductVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;ProductDescription&quot;[68c]&quot;ProductVendor&quot;[68c]&quot;ProductFlags&quot;I}'/>
</struct>
<struct name='CSSM_KRSUBSERVICE_PTR' type64='{cssm_krsubservice=&quot;SubServiceId&quot;I&quot;Description&quot;*&quot;WrappedProduct&quot;{cssm_kr_wrappedproductinfo=&quot;StandardVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;StandardDescription&quot;[68c]&quot;ProductVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;ProductDescription&quot;[68c]&quot;ProductVendor&quot;[68c]&quot;ProductFlags&quot;I}}'>
<field declared_type64='uint32' name='SubServiceId' type64='I'/>
<field declared_type64='char*' name='Description' type64='*'/>
<field declared_type64='CSSM_KR_WRAPPEDPRODUCT_INFO' name='WrappedProduct' type64='{cssm_kr_wrappedproductinfo=&quot;StandardVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;StandardDescription&quot;[68c]&quot;ProductVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;ProductDescription&quot;[68c]&quot;ProductVendor&quot;[68c]&quot;ProductFlags&quot;I}'/>
</struct>
<struct name='CSSM_KR_NAME' type64='{cssm_kr_name=&quot;Type&quot;C&quot;Length&quot;C&quot;Name&quot;*}'>
<field declared_type64='uint8' name='Type' type64='C'/>
<field declared_type64='uint8' name='Length' type64='C'/>
<field declared_type64='char*' name='Name' type64='*'/>
</struct>
<struct name='CSSM_KR_POLICY_INFO' type64='{cssm_kr_policy_info=&quot;krbNotAllowed&quot;i&quot;numberOfEntries&quot;I&quot;policyEntry&quot;^{cssm_kr_policy_list_item}}'>
<field declared_type64='CSSM_BOOL' name='krbNotAllowed' type64='i'/>
<field declared_type64='uint32' name='numberOfEntries' type64='I'/>
<field declared_type64='CSSM_KR_POLICY_LIST_ITEM*' name='policyEntry' type64='^{cssm_kr_policy_list_item=^{kr_policy_list_item}IIIICII}'/>
</struct>
<struct name='CSSM_KR_POLICY_INFO_PTR' type64='{cssm_kr_policy_info=&quot;krbNotAllowed&quot;i&quot;numberOfEntries&quot;I&quot;policyEntry&quot;^{cssm_kr_policy_list_item}}'>
<field declared_type64='CSSM_BOOL' name='krbNotAllowed' type64='i'/>
<field declared_type64='uint32' name='numberOfEntries' type64='I'/>
<field declared_type64='CSSM_KR_POLICY_LIST_ITEM*' name='policyEntry' type64='^{cssm_kr_policy_list_item=^{kr_policy_list_item}IIIICII}'/>
</struct>
<struct name='CSSM_KR_POLICY_LIST_ITEM' type64='{cssm_kr_policy_list_item=&quot;next&quot;^{kr_policy_list_item}&quot;AlgorithmId&quot;I&quot;Mode&quot;I&quot;MaxKeyLength&quot;I&quot;MaxRounds&quot;I&quot;WorkFactor&quot;C&quot;PolicyFlags&quot;I&quot;AlgClass&quot;I}'>
<field declared_type64='struct kr_policy_list_item*' name='next' type64='^{kr_policy_list_item=}'/>
<field declared_type64='CSSM_ALGORITHMS' name='AlgorithmId' type64='I'/>
<field declared_type64='CSSM_ENCRYPT_MODE' name='Mode' type64='I'/>
<field declared_type64='uint32' name='MaxKeyLength' type64='I'/>
<field declared_type64='uint32' name='MaxRounds' type64='I'/>
<field declared_type64='uint8' name='WorkFactor' type64='C'/>
<field declared_type64='CSSM_KR_POLICY_FLAGS' name='PolicyFlags' type64='I'/>
<field declared_type64='CSSM_CONTEXT_TYPE' name='AlgClass' type64='I'/>
</struct>
<struct name='CSSM_KR_POLICY_LIST_ITEM_PTR' type64='{cssm_kr_policy_list_item=&quot;next&quot;^{kr_policy_list_item}&quot;AlgorithmId&quot;I&quot;Mode&quot;I&quot;MaxKeyLength&quot;I&quot;MaxRounds&quot;I&quot;WorkFactor&quot;C&quot;PolicyFlags&quot;I&quot;AlgClass&quot;I}'>
<field declared_type64='struct kr_policy_list_item*' name='next' type64='^{kr_policy_list_item=}'/>
<field declared_type64='CSSM_ALGORITHMS' name='AlgorithmId' type64='I'/>
<field declared_type64='CSSM_ENCRYPT_MODE' name='Mode' type64='I'/>
<field declared_type64='uint32' name='MaxKeyLength' type64='I'/>
<field declared_type64='uint32' name='MaxRounds' type64='I'/>
<field declared_type64='uint8' name='WorkFactor' type64='C'/>
<field declared_type64='CSSM_KR_POLICY_FLAGS' name='PolicyFlags' type64='I'/>
<field declared_type64='CSSM_CONTEXT_TYPE' name='AlgClass' type64='I'/>
</struct>
<struct name='CSSM_KR_PROFILE' type64='{cssm_kr_profile=&quot;UserName&quot;{cssm_kr_name=&quot;Type&quot;C&quot;Length&quot;C&quot;Name&quot;*}&quot;UserCertificate&quot;^{cssm_certgroup}&quot;KRSCertChain&quot;^{cssm_certgroup}&quot;LE_KRANum&quot;C&quot;LE_KRACertChainList&quot;^{cssm_certgroup}&quot;ENT_KRANum&quot;C&quot;ENT_KRACertChainList&quot;^{cssm_certgroup}&quot;INDIV_KRANum&quot;C&quot;INDIV_KRACertChainList&quot;^{cssm_certgroup}&quot;INDIV_AuthenticationInfo&quot;^{cssm_data}&quot;KRSPFlags&quot;I&quot;KRSPExtensions&quot;^{cssm_data}}'>
<field declared_type64='CSSM_KR_NAME' name='UserName' type64='{cssm_kr_name=&quot;Type&quot;C&quot;Length&quot;C&quot;Name&quot;*}'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='UserCertificate' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='KRSCertChain' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='uint8' name='LE_KRANum' type64='C'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='LE_KRACertChainList' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='uint8' name='ENT_KRANum' type64='C'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='ENT_KRACertChainList' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='uint8' name='INDIV_KRANum' type64='C'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='INDIV_KRACertChainList' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='CSSM_DATA_PTR' name='INDIV_AuthenticationInfo' type64='^{cssm_data=Q*}'/>
<field declared_type64='uint32' name='KRSPFlags' type64='I'/>
<field declared_type64='CSSM_DATA_PTR' name='KRSPExtensions' type64='^{cssm_data=Q*}'/>
</struct>
<struct name='CSSM_KR_PROFILE_PTR' type64='{cssm_kr_profile=&quot;UserName&quot;{cssm_kr_name=&quot;Type&quot;C&quot;Length&quot;C&quot;Name&quot;*}&quot;UserCertificate&quot;^{cssm_certgroup}&quot;KRSCertChain&quot;^{cssm_certgroup}&quot;LE_KRANum&quot;C&quot;LE_KRACertChainList&quot;^{cssm_certgroup}&quot;ENT_KRANum&quot;C&quot;ENT_KRACertChainList&quot;^{cssm_certgroup}&quot;INDIV_KRANum&quot;C&quot;INDIV_KRACertChainList&quot;^{cssm_certgroup}&quot;INDIV_AuthenticationInfo&quot;^{cssm_data}&quot;KRSPFlags&quot;I&quot;KRSPExtensions&quot;^{cssm_data}}'>
<field declared_type64='CSSM_KR_NAME' name='UserName' type64='{cssm_kr_name=&quot;Type&quot;C&quot;Length&quot;C&quot;Name&quot;*}'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='UserCertificate' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='KRSCertChain' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='uint8' name='LE_KRANum' type64='C'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='LE_KRACertChainList' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='uint8' name='ENT_KRANum' type64='C'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='ENT_KRACertChainList' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='uint8' name='INDIV_KRANum' type64='C'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='INDIV_KRACertChainList' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='CSSM_DATA_PTR' name='INDIV_AuthenticationInfo' type64='^{cssm_data=Q*}'/>
<field declared_type64='uint32' name='KRSPFlags' type64='I'/>
<field declared_type64='CSSM_DATA_PTR' name='KRSPExtensions' type64='^{cssm_data=Q*}'/>
</struct>
<struct name='CSSM_KR_WRAPPEDPRODUCT_INFO' type64='{cssm_kr_wrappedproductinfo=&quot;StandardVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;StandardDescription&quot;[68c]&quot;ProductVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;ProductDescription&quot;[68c]&quot;ProductVendor&quot;[68c]&quot;ProductFlags&quot;I}'>
<field declared_type64='CSSM_VERSION' name='StandardVersion' type64='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'/>
<field declared_type64='CSSM_STRING' name='StandardDescription' type64='[68c]'/>
<field declared_type64='CSSM_VERSION' name='ProductVersion' type64='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'/>
<field declared_type64='CSSM_STRING' name='ProductDescription' type64='[68c]'/>
<field declared_type64='CSSM_STRING' name='ProductVendor' type64='[68c]'/>
<field declared_type64='uint32' name='ProductFlags' type64='I'/>
</struct>
<struct name='CSSM_KR_WRAPPEDPRODUCT_INFO_PTR' type64='{cssm_kr_wrappedproductinfo=&quot;StandardVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;StandardDescription&quot;[68c]&quot;ProductVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;ProductDescription&quot;[68c]&quot;ProductVendor&quot;[68c]&quot;ProductFlags&quot;I}'>
<field declared_type64='CSSM_VERSION' name='StandardVersion' type64='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'/>
<field declared_type64='CSSM_STRING' name='StandardDescription' type64='[68c]'/>
<field declared_type64='CSSM_VERSION' name='ProductVersion' type64='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'/>
<field declared_type64='CSSM_STRING' name='ProductDescription' type64='[68c]'/>
<field declared_type64='CSSM_STRING' name='ProductVendor' type64='[68c]'/>
<field declared_type64='uint32' name='ProductFlags' type64='I'/>
</struct>
<struct name='CSSM_LIST' type64='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'>
<field declared_type64='CSSM_LIST_TYPE' name='ListType' type64='I'/>
<field declared_type64='CSSM_LIST_ELEMENT_PTR' name='Head' type64='^{cssm_list_element=^{cssm_list_element}iI(?={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_data=Q*})}'/>
<field declared_type64='CSSM_LIST_ELEMENT_PTR' name='Tail' type64='^{cssm_list_element=^{cssm_list_element}iI(?={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_data=Q*})}'/>
</struct>
<struct name='CSSM_LIST_ELEMENT' type64='{cssm_list_element=&quot;NextElement&quot;^{cssm_list_element}&quot;WordID&quot;i&quot;ElementType&quot;I&quot;Element&quot;(?=&quot;Sublist&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Word&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*})}'>
<field declared_type64='struct cssm_list_element*' name='NextElement' type64='^{cssm_list_element=^{cssm_list_element}iI(?={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_data=Q*})}'/>
<field declared_type64='CSSM_WORDID_TYPE' name='WordID' type64='i'/>
<field declared_type64='CSSM_LIST_ELEMENT_TYPE' name='ElementType' type64='I'/>
<field declared_type64='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/Security.framework/Headers/cssmtype.h:394:5)' name='Element' type64='(?=&quot;Sublist&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Word&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*})'/>
</struct>
<struct name='CSSM_LIST_ELEMENT_PTR' type64='{cssm_list_element=&quot;NextElement&quot;^{cssm_list_element}&quot;WordID&quot;i&quot;ElementType&quot;I&quot;Element&quot;(?=&quot;Sublist&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Word&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*})}'>
<field declared_type64='struct cssm_list_element*' name='NextElement' type64='^{cssm_list_element=^{cssm_list_element}iI(?={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_data=Q*})}'/>
<field declared_type64='CSSM_WORDID_TYPE' name='WordID' type64='i'/>
<field declared_type64='CSSM_LIST_ELEMENT_TYPE' name='ElementType' type64='I'/>
<field declared_type64='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/Security.framework/Headers/cssmtype.h:394:5)' name='Element' type64='(?=&quot;Sublist&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Word&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*})'/>
</struct>
<struct name='CSSM_LIST_PTR' type64='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'>
<field declared_type64='CSSM_LIST_TYPE' name='ListType' type64='I'/>
<field declared_type64='CSSM_LIST_ELEMENT_PTR' name='Head' type64='^{cssm_list_element=^{cssm_list_element}iI(?={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_data=Q*})}'/>
<field declared_type64='CSSM_LIST_ELEMENT_PTR' name='Tail' type64='^{cssm_list_element=^{cssm_list_element}iI(?={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_data=Q*})}'/>
</struct>
<struct name='CSSM_MANAGER_EVENT_NOTIFICATION' type64='{cssm_manager_event_notification=&quot;DestinationModuleManagerType&quot;I&quot;SourceModuleManagerType&quot;I&quot;Event&quot;I&quot;EventId&quot;I&quot;EventData&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_SERVICE_MASK' name='DestinationModuleManagerType' type64='I'/>
<field declared_type64='CSSM_SERVICE_MASK' name='SourceModuleManagerType' type64='I'/>
<field declared_type64='CSSM_MANAGER_EVENT_TYPES' name='Event' type64='I'/>
<field declared_type64='uint32' name='EventId' type64='I'/>
<field declared_type64='CSSM_DATA' name='EventData' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_MANAGER_EVENT_NOTIFICATION_PTR' type64='{cssm_manager_event_notification=&quot;DestinationModuleManagerType&quot;I&quot;SourceModuleManagerType&quot;I&quot;Event&quot;I&quot;EventId&quot;I&quot;EventData&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_SERVICE_MASK' name='DestinationModuleManagerType' type64='I'/>
<field declared_type64='CSSM_SERVICE_MASK' name='SourceModuleManagerType' type64='I'/>
<field declared_type64='CSSM_MANAGER_EVENT_TYPES' name='Event' type64='I'/>
<field declared_type64='uint32' name='EventId' type64='I'/>
<field declared_type64='CSSM_DATA' name='EventData' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_MANAGER_REGISTRATION_INFO' type64='{cssm_manager_registration_info=&quot;Initialize&quot;^?&quot;Terminate&quot;^?&quot;RegisterDispatchTable&quot;^?&quot;DeregisterDispatchTable&quot;^?&quot;EventNotifyManager&quot;^?&quot;RefreshFunctionTable&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(uint32, uint32)' function_pointer='true' name='Initialize' type64='^?'>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(void)' function_pointer='true' name='Terminate' type64='^?'>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_STATE_FUNCS_PTR)' function_pointer='true' name='RegisterDispatchTable' type64='^?'>
<arg declared_type64='CSSM_STATE_FUNCS_PTR' type64='^{cssm_state_funcs=^?^?^?^?^?^?}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(void)' function_pointer='true' name='DeregisterDispatchTable' type64='^?'>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)( CSSM_MANAGER_EVENT_NOTIFICATION *)' function_pointer='true' name='EventNotifyManager' type64='^?'>
<arg const='true' declared_type64='CSSM_MANAGER_EVENT_NOTIFICATION*' type64='^{cssm_manager_event_notification=IIII{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_FUNC_NAME_ADDR_PTR, uint32)' function_pointer='true' name='RefreshFunctionTable' type64='^?'>
<arg declared_type64='CSSM_FUNC_NAME_ADDR_PTR' type64='^{cssm_func_name_addr=[68c]^?}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='CSSM_MANAGER_REGISTRATION_INFO_PTR' type64='{cssm_manager_registration_info=&quot;Initialize&quot;^?&quot;Terminate&quot;^?&quot;RegisterDispatchTable&quot;^?&quot;DeregisterDispatchTable&quot;^?&quot;EventNotifyManager&quot;^?&quot;RefreshFunctionTable&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(uint32, uint32)' function_pointer='true' name='Initialize' type64='^?'>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(void)' function_pointer='true' name='Terminate' type64='^?'>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_STATE_FUNCS_PTR)' function_pointer='true' name='RegisterDispatchTable' type64='^?'>
<arg declared_type64='CSSM_STATE_FUNCS_PTR' type64='^{cssm_state_funcs=^?^?^?^?^?^?}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(void)' function_pointer='true' name='DeregisterDispatchTable' type64='^?'>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)( CSSM_MANAGER_EVENT_NOTIFICATION *)' function_pointer='true' name='EventNotifyManager' type64='^?'>
<arg const='true' declared_type64='CSSM_MANAGER_EVENT_NOTIFICATION*' type64='^{cssm_manager_event_notification=IIII{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_FUNC_NAME_ADDR_PTR, uint32)' function_pointer='true' name='RefreshFunctionTable' type64='^?'>
<arg declared_type64='CSSM_FUNC_NAME_ADDR_PTR' type64='^{cssm_func_name_addr=[68c]^?}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='CSSM_MEMORY_FUNCS' type64='{cssm_memory_funcs=&quot;malloc_func&quot;^?&quot;free_func&quot;^?&quot;realloc_func&quot;^?&quot;calloc_func&quot;^?&quot;AllocRef&quot;^v}'>
<field declared_type64='CSSM_MALLOC' function_pointer='true' name='malloc_func' type64='^?'>
<arg declared_type64='CSSM_SIZE' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CSSM_FREE' function_pointer='true' name='free_func' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CSSM_REALLOC' function_pointer='true' name='realloc_func' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='CSSM_SIZE' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CSSM_CALLOC' function_pointer='true' name='calloc_func' type64='^?'>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_SIZE' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void*' name='AllocRef' type64='^v'/>
</struct>
<struct name='CSSM_MEMORY_FUNCS_PTR' type64='{cssm_memory_funcs=&quot;malloc_func&quot;^?&quot;free_func&quot;^?&quot;realloc_func&quot;^?&quot;calloc_func&quot;^?&quot;AllocRef&quot;^v}'>
<field declared_type64='CSSM_MALLOC' function_pointer='true' name='malloc_func' type64='^?'>
<arg declared_type64='CSSM_SIZE' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CSSM_FREE' function_pointer='true' name='free_func' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CSSM_REALLOC' function_pointer='true' name='realloc_func' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='CSSM_SIZE' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CSSM_CALLOC' function_pointer='true' name='calloc_func' type64='^?'>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_SIZE' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void*' name='AllocRef' type64='^v'/>
</struct>
<struct name='CSSM_MODULE_FUNCS' type64='{cssm_module_funcs=&quot;ServiceType&quot;I&quot;NumberOfServiceFuncs&quot;I&quot;ServiceFuncs&quot;^^?}'>
<field declared_type64='CSSM_SERVICE_TYPE' name='ServiceType' type64='I'/>
<field declared_type64='uint32' name='NumberOfServiceFuncs' type64='I'/>
<field const='true' declared_type64='CSSM_PROC_ADDR*' name='ServiceFuncs' type64='^^?'/>
</struct>
<struct name='CSSM_MODULE_FUNCS_PTR' type64='{cssm_module_funcs=&quot;ServiceType&quot;I&quot;NumberOfServiceFuncs&quot;I&quot;ServiceFuncs&quot;^^?}'>
<field declared_type64='CSSM_SERVICE_TYPE' name='ServiceType' type64='I'/>
<field declared_type64='uint32' name='NumberOfServiceFuncs' type64='I'/>
<field const='true' declared_type64='CSSM_PROC_ADDR*' name='ServiceFuncs' type64='^^?'/>
</struct>
<struct name='CSSM_NAME_LIST' type64='{cssm_name_list=&quot;NumStrings&quot;I&quot;String&quot;^*}'>
<field declared_type64='uint32' name='NumStrings' type64='I'/>
<field declared_type64='char**' name='String' type64='^*'/>
</struct>
<struct name='CSSM_NAME_LIST_PTR' type64='{cssm_name_list=&quot;NumStrings&quot;I&quot;String&quot;^*}'>
<field declared_type64='uint32' name='NumStrings' type64='I'/>
<field declared_type64='char**' name='String' type64='^*'/>
</struct>
<struct name='CSSM_NET_ADDRESS' type64='{cssm_net_address=&quot;AddressType&quot;I&quot;Address&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_NET_ADDRESS_TYPE' name='AddressType' type64='I'/>
<field declared_type64='CSSM_DATA' name='Address' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_NET_ADDRESS_PTR' type64='{cssm_net_address=&quot;AddressType&quot;I&quot;Address&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_NET_ADDRESS_TYPE' name='AddressType' type64='I'/>
<field declared_type64='CSSM_DATA' name='Address' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_OID' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'>
<field declared_type64='CSSM_SIZE' name='Length' type64='Q'/>
<field declared_type64='uint8*' name='Data' type64='*'/>
</struct>
<struct name='CSSM_PARSED_CERT' type64='{cssm_parsed_cert=&quot;CertType&quot;I&quot;ParsedCertFormat&quot;I&quot;ParsedCert&quot;^v}'>
<field declared_type64='CSSM_CERT_TYPE' name='CertType' type64='I'/>
<field declared_type64='CSSM_CERT_PARSE_FORMAT' name='ParsedCertFormat' type64='I'/>
<field declared_type64='void*' name='ParsedCert' type64='^v'/>
</struct>
<struct name='CSSM_PARSED_CERT_PTR' type64='{cssm_parsed_cert=&quot;CertType&quot;I&quot;ParsedCertFormat&quot;I&quot;ParsedCert&quot;^v}'>
<field declared_type64='CSSM_CERT_TYPE' name='CertType' type64='I'/>
<field declared_type64='CSSM_CERT_PARSE_FORMAT' name='ParsedCertFormat' type64='I'/>
<field declared_type64='void*' name='ParsedCert' type64='^v'/>
</struct>
<struct name='CSSM_PARSED_CRL' type64='{cssm_parsed_crl=&quot;CrlType&quot;I&quot;ParsedCrlFormat&quot;I&quot;ParsedCrl&quot;^v}'>
<field declared_type64='CSSM_CRL_TYPE' name='CrlType' type64='I'/>
<field declared_type64='CSSM_CRL_PARSE_FORMAT' name='ParsedCrlFormat' type64='I'/>
<field declared_type64='void*' name='ParsedCrl' type64='^v'/>
</struct>
<struct name='CSSM_PARSED_CRL_PTR' type64='{cssm_parsed_crl=&quot;CrlType&quot;I&quot;ParsedCrlFormat&quot;I&quot;ParsedCrl&quot;^v}'>
<field declared_type64='CSSM_CRL_TYPE' name='CrlType' type64='I'/>
<field declared_type64='CSSM_CRL_PARSE_FORMAT' name='ParsedCrlFormat' type64='I'/>
<field declared_type64='void*' name='ParsedCrl' type64='^v'/>
</struct>
<struct name='CSSM_PKCS1_OAEP_PARAMS' type64='{cssm_pkcs1_oaep_params=&quot;HashAlgorithm&quot;I&quot;HashParams&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;MGF&quot;I&quot;MGFParams&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;PSource&quot;I&quot;PSourceParams&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='uint32' name='HashAlgorithm' type64='I'/>
<field declared_type64='CSSM_DATA' name='HashParams' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_PKCS_OAEP_MGF' name='MGF' type64='I'/>
<field declared_type64='CSSM_DATA' name='MGFParams' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_PKCS_OAEP_PSOURCE' name='PSource' type64='I'/>
<field declared_type64='CSSM_DATA' name='PSourceParams' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_PKCS1_OAEP_PARAMS_PTR' type64='{cssm_pkcs1_oaep_params=&quot;HashAlgorithm&quot;I&quot;HashParams&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;MGF&quot;I&quot;MGFParams&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;PSource&quot;I&quot;PSourceParams&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='uint32' name='HashAlgorithm' type64='I'/>
<field declared_type64='CSSM_DATA' name='HashParams' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_PKCS_OAEP_MGF' name='MGF' type64='I'/>
<field declared_type64='CSSM_DATA' name='MGFParams' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_PKCS_OAEP_PSOURCE' name='PSource' type64='I'/>
<field declared_type64='CSSM_DATA' name='PSourceParams' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_PKCS5_PBKDF1_PARAMS' type64='{cssm_pkcs5_pbkdf1_params=&quot;Passphrase&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;InitVector&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_DATA' name='Passphrase' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='InitVector' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_PKCS5_PBKDF1_PARAMS_PTR' type64='{cssm_pkcs5_pbkdf1_params=&quot;Passphrase&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;InitVector&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_DATA' name='Passphrase' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='InitVector' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_PKCS5_PBKDF2_PARAMS' type64='{cssm_pkcs5_pbkdf2_params=&quot;Passphrase&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;PseudoRandomFunction&quot;I}'>
<field declared_type64='CSSM_DATA' name='Passphrase' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_PKCS5_PBKDF2_PRF' name='PseudoRandomFunction' type64='I'/>
</struct>
<struct name='CSSM_PKCS5_PBKDF2_PARAMS_PTR' type64='{cssm_pkcs5_pbkdf2_params=&quot;Passphrase&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;PseudoRandomFunction&quot;I}'>
<field declared_type64='CSSM_DATA' name='Passphrase' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_PKCS5_PBKDF2_PRF' name='PseudoRandomFunction' type64='I'/>
</struct>
<struct name='CSSM_QUERY' type64='{cssm_query=&quot;RecordType&quot;I&quot;Conjunctive&quot;I&quot;NumSelectionPredicates&quot;I&quot;SelectionPredicate&quot;^{cssm_selection_predicate}&quot;QueryLimits&quot;{cssm_query_limits=&quot;TimeLimit&quot;I&quot;SizeLimit&quot;I}&quot;QueryFlags&quot;I}'>
<field declared_type64='CSSM_DB_RECORDTYPE' name='RecordType' type64='I'/>
<field declared_type64='CSSM_DB_CONJUNCTIVE' name='Conjunctive' type64='I'/>
<field declared_type64='uint32' name='NumSelectionPredicates' type64='I'/>
<field declared_type64='CSSM_SELECTION_PREDICATE_PTR' name='SelectionPredicate' type64='^{cssm_selection_predicate=I{cssm_db_attribute_data={cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}I^{cssm_data}}}'/>
<field declared_type64='CSSM_QUERY_LIMITS' name='QueryLimits' type64='{cssm_query_limits=&quot;TimeLimit&quot;I&quot;SizeLimit&quot;I}'/>
<field declared_type64='CSSM_QUERY_FLAGS' name='QueryFlags' type64='I'/>
</struct>
<struct name='CSSM_QUERY_LIMITS' type64='{cssm_query_limits=&quot;TimeLimit&quot;I&quot;SizeLimit&quot;I}'>
<field declared_type64='uint32' name='TimeLimit' type64='I'/>
<field declared_type64='uint32' name='SizeLimit' type64='I'/>
</struct>
<struct name='CSSM_QUERY_LIMITS_PTR' type64='{cssm_query_limits=&quot;TimeLimit&quot;I&quot;SizeLimit&quot;I}'>
<field declared_type64='uint32' name='TimeLimit' type64='I'/>
<field declared_type64='uint32' name='SizeLimit' type64='I'/>
</struct>
<struct name='CSSM_QUERY_PTR' type64='{cssm_query=&quot;RecordType&quot;I&quot;Conjunctive&quot;I&quot;NumSelectionPredicates&quot;I&quot;SelectionPredicate&quot;^{cssm_selection_predicate}&quot;QueryLimits&quot;{cssm_query_limits=&quot;TimeLimit&quot;I&quot;SizeLimit&quot;I}&quot;QueryFlags&quot;I}'>
<field declared_type64='CSSM_DB_RECORDTYPE' name='RecordType' type64='I'/>
<field declared_type64='CSSM_DB_CONJUNCTIVE' name='Conjunctive' type64='I'/>
<field declared_type64='uint32' name='NumSelectionPredicates' type64='I'/>
<field declared_type64='CSSM_SELECTION_PREDICATE_PTR' name='SelectionPredicate' type64='^{cssm_selection_predicate=I{cssm_db_attribute_data={cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}I^{cssm_data}}}'/>
<field declared_type64='CSSM_QUERY_LIMITS' name='QueryLimits' type64='{cssm_query_limits=&quot;TimeLimit&quot;I&quot;SizeLimit&quot;I}'/>
<field declared_type64='CSSM_QUERY_FLAGS' name='QueryFlags' type64='I'/>
</struct>
<struct name='CSSM_QUERY_SIZE_DATA' type64='{cssm_query_size_data=&quot;SizeInputBlock&quot;I&quot;SizeOutputBlock&quot;I}'>
<field declared_type64='uint32' name='SizeInputBlock' type64='I'/>
<field declared_type64='uint32' name='SizeOutputBlock' type64='I'/>
</struct>
<struct name='CSSM_QUERY_SIZE_DATA_PTR' type64='{cssm_query_size_data=&quot;SizeInputBlock&quot;I&quot;SizeOutputBlock&quot;I}'>
<field declared_type64='uint32' name='SizeInputBlock' type64='I'/>
<field declared_type64='uint32' name='SizeOutputBlock' type64='I'/>
</struct>
<struct name='CSSM_RANGE' type64='{cssm_range=&quot;Min&quot;I&quot;Max&quot;I}'>
<field declared_type64='uint32' name='Min' type64='I'/>
<field declared_type64='uint32' name='Max' type64='I'/>
</struct>
<struct name='CSSM_RANGE_PTR' type64='{cssm_range=&quot;Min&quot;I&quot;Max&quot;I}'>
<field declared_type64='uint32' name='Min' type64='I'/>
<field declared_type64='uint32' name='Max' type64='I'/>
</struct>
<struct name='CSSM_RESOURCE_CONTROL_CONTEXT' type64='{cssm_resource_control_context=&quot;AccessCred&quot;^{cssm_access_credentials}&quot;InitialAclEntry&quot;{cssm_acl_entry_input=&quot;Prototype&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;Callback&quot;^?&quot;CallerContext&quot;^v}}'>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='AccessCred' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<field declared_type64='CSSM_ACL_ENTRY_INPUT' name='InitialAclEntry' type64='{cssm_acl_entry_input=&quot;Prototype&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;Callback&quot;^?&quot;CallerContext&quot;^v}'/>
</struct>
<struct name='CSSM_RESOURCE_CONTROL_CONTEXT_PTR' type64='{cssm_resource_control_context=&quot;AccessCred&quot;^{cssm_access_credentials}&quot;InitialAclEntry&quot;{cssm_acl_entry_input=&quot;Prototype&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;Callback&quot;^?&quot;CallerContext&quot;^v}}'>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='AccessCred' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<field declared_type64='CSSM_ACL_ENTRY_INPUT' name='InitialAclEntry' type64='{cssm_acl_entry_input=&quot;Prototype&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;Callback&quot;^?&quot;CallerContext&quot;^v}'/>
</struct>
<struct name='CSSM_SAMPLE' type64='{cssm_sample=&quot;TypedSample&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Verifier&quot;^{cssm_subservice_uid}}'>
<field declared_type64='CSSM_LIST' name='TypedSample' type64='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
<field const='true' declared_type64='CSSM_SUBSERVICE_UID*' name='Verifier' type64='^{cssm_subservice_uid={cssm_guid=ISS[8C]}{cssm_version=II}II}'/>
</struct>
<struct name='CSSM_SAMPLEGROUP' type64='{cssm_samplegroup=&quot;NumberOfSamples&quot;I&quot;Samples&quot;^{cssm_sample}}'>
<field declared_type64='uint32' name='NumberOfSamples' type64='I'/>
<field const='true' declared_type64='CSSM_SAMPLE*' name='Samples' type64='^{cssm_sample={cssm_list=I^{cssm_list_element}^{cssm_list_element}}^{cssm_subservice_uid}}'/>
</struct>
<struct name='CSSM_SAMPLEGROUP_PTR' type64='{cssm_samplegroup=&quot;NumberOfSamples&quot;I&quot;Samples&quot;^{cssm_sample}}'>
<field declared_type64='uint32' name='NumberOfSamples' type64='I'/>
<field const='true' declared_type64='CSSM_SAMPLE*' name='Samples' type64='^{cssm_sample={cssm_list=I^{cssm_list_element}^{cssm_list_element}}^{cssm_subservice_uid}}'/>
</struct>
<struct name='CSSM_SAMPLE_PTR' type64='{cssm_sample=&quot;TypedSample&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Verifier&quot;^{cssm_subservice_uid}}'>
<field declared_type64='CSSM_LIST' name='TypedSample' type64='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
<field const='true' declared_type64='CSSM_SUBSERVICE_UID*' name='Verifier' type64='^{cssm_subservice_uid={cssm_guid=ISS[8C]}{cssm_version=II}II}'/>
</struct>
<struct name='CSSM_SELECTION_PREDICATE' type64='{cssm_selection_predicate=&quot;DbOperator&quot;I&quot;Attribute&quot;{cssm_db_attribute_data=&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}&quot;NumberOfValues&quot;I&quot;Value&quot;^{cssm_data}}}'>
<field declared_type64='CSSM_DB_OPERATOR' name='DbOperator' type64='I'/>
<field declared_type64='CSSM_DB_ATTRIBUTE_DATA' name='Attribute' type64='{cssm_db_attribute_data=&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}&quot;NumberOfValues&quot;I&quot;Value&quot;^{cssm_data}}'/>
</struct>
<struct name='CSSM_SELECTION_PREDICATE_PTR' type64='{cssm_selection_predicate=&quot;DbOperator&quot;I&quot;Attribute&quot;{cssm_db_attribute_data=&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}&quot;NumberOfValues&quot;I&quot;Value&quot;^{cssm_data}}}'>
<field declared_type64='CSSM_DB_OPERATOR' name='DbOperator' type64='I'/>
<field declared_type64='CSSM_DB_ATTRIBUTE_DATA' name='Attribute' type64='{cssm_db_attribute_data=&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}&quot;NumberOfValues&quot;I&quot;Value&quot;^{cssm_data}}'/>
</struct>
<struct name='CSSM_SPI_AC_FUNCS' type64='{cssm_spi_ac_funcs=&quot;AuthCompute&quot;^?&quot;PassThrough&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_AC_HANDLE, CSSM_TUPLEGROUP *, CSSM_TUPLEGROUP *, uint32, CSSM_LIST *, CSSM_LIST *, CSSM_LIST *, CSSM_TUPLEGROUP_PTR)' function_pointer='true' name='AuthCompute' type64='^?'>
<arg declared_type64='CSSM_AC_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_TUPLEGROUP*' type64='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
<arg const='true' declared_type64='CSSM_TUPLEGROUP*' type64='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_LIST*' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg const='true' declared_type64='CSSM_LIST*' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg const='true' declared_type64='CSSM_LIST*' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg declared_type64='CSSM_TUPLEGROUP_PTR' type64='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_AC_HANDLE, CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DL_DB_LIST *, uint32, void *, void **)' function_pointer='true' name='PassThrough' type64='^?'>
<arg declared_type64='CSSM_AC_HANDLE' type64='q'/>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DL_DB_LIST*' type64='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='CSSM_SPI_AC_FUNCS_PTR' type64='{cssm_spi_ac_funcs=&quot;AuthCompute&quot;^?&quot;PassThrough&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_AC_HANDLE, CSSM_TUPLEGROUP *, CSSM_TUPLEGROUP *, uint32, CSSM_LIST *, CSSM_LIST *, CSSM_LIST *, CSSM_TUPLEGROUP_PTR)' function_pointer='true' name='AuthCompute' type64='^?'>
<arg declared_type64='CSSM_AC_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_TUPLEGROUP*' type64='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
<arg const='true' declared_type64='CSSM_TUPLEGROUP*' type64='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_LIST*' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg const='true' declared_type64='CSSM_LIST*' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg const='true' declared_type64='CSSM_LIST*' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg declared_type64='CSSM_TUPLEGROUP_PTR' type64='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_AC_HANDLE, CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DL_DB_LIST *, uint32, void *, void **)' function_pointer='true' name='PassThrough' type64='^?'>
<arg declared_type64='CSSM_AC_HANDLE' type64='q'/>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DL_DB_LIST*' type64='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='CSSM_SPI_CL_FUNCS' type64='{cssm_spi_cl_funcs=&quot;CertCreateTemplate&quot;^?&quot;CertGetAllTemplateFields&quot;^?&quot;CertSign&quot;^?&quot;CertVerify&quot;^?&quot;CertVerifyWithKey&quot;^?&quot;CertGetFirstFieldValue&quot;^?&quot;CertGetNextFieldValue&quot;^?&quot;CertAbortQuery&quot;^?&quot;CertGetKeyInfo&quot;^?&quot;CertGetAllFields&quot;^?&quot;FreeFields&quot;^?&quot;FreeFieldValue&quot;^?&quot;CertCache&quot;^?&quot;CertGetFirstCachedFieldValue&quot;^?&quot;CertGetNextCachedFieldValue&quot;^?&quot;CertAbortCache&quot;^?&quot;CertGroupToSignedBundle&quot;^?&quot;CertGroupFromVerifiedBundle&quot;^?&quot;CertDescribeFormat&quot;^?&quot;CrlCreateTemplate&quot;^?&quot;CrlSetFields&quot;^?&quot;CrlAddCert&quot;^?&quot;CrlRemoveCert&quot;^?&quot;CrlSign&quot;^?&quot;CrlVerify&quot;^?&quot;CrlVerifyWithKey&quot;^?&quot;IsCertInCrl&quot;^?&quot;CrlGetFirstFieldValue&quot;^?&quot;CrlGetNextFieldValue&quot;^?&quot;CrlAbortQuery&quot;^?&quot;CrlGetAllFields&quot;^?&quot;CrlCache&quot;^?&quot;IsCertInCachedCrl&quot;^?&quot;CrlGetFirstCachedFieldValue&quot;^?&quot;CrlGetNextCachedFieldValue&quot;^?&quot;CrlGetAllCachedRecordFields&quot;^?&quot;CrlAbortCache&quot;^?&quot;CrlDescribeFormat&quot;^?&quot;PassThrough&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' function_pointer='true' name='CertCreateTemplate' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' function_pointer='true' name='CertGetAllTemplateFields' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_FIELD_PTR*' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_FIELD *, uint32, CSSM_DATA_PTR)' function_pointer='true' name='CertSign' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_FIELD *, uint32)' function_pointer='true' name='CertVerify' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' function_pointer='true' name='CertVerifyWithKey' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' function_pointer='true' name='CertGetFirstFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_OID*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' function_pointer='true' name='CertGetNextFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' function_pointer='true' name='CertAbortQuery' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_KEY_PTR *)' function_pointer='true' name='CertGetKeyInfo' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_KEY_PTR*' type64='^^{cssm_key}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' function_pointer='true' name='CertGetAllFields' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_FIELD_PTR*' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD_PTR *)' function_pointer='true' name='FreeFields' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_FIELD_PTR*' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_OID *, CSSM_DATA_PTR)' function_pointer='true' name='FreeFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_OID*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_HANDLE_PTR)' function_pointer='true' name='CertCache' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' function_pointer='true' name='CertGetFirstCachedFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_OID*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' function_pointer='true' name='CertGetNextCachedFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' function_pointer='true' name='CertAbortCache' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_CERTGROUP *, CSSM_CERT_BUNDLE_HEADER *, CSSM_DATA_PTR)' function_pointer='true' name='CertGroupToSignedBundle' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_CERT_BUNDLE_HEADER*' type64='^{cssm_cert_bundle_header=II}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_CERT_BUNDLE *, CSSM_DATA *, CSSM_CERTGROUP_PTR *)' function_pointer='true' name='CertGroupFromVerifiedBundle' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CERT_BUNDLE*' type64='^{cssm_cert_bundle={cssm_cert_bundle_header=II}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_CERTGROUP_PTR*' type64='^^{cssm_certgroup}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32 *, CSSM_OID_PTR *)' function_pointer='true' name='CertDescribeFormat' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_OID_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' function_pointer='true' name='CrlCreateTemplate' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA *, CSSM_DATA_PTR)' function_pointer='true' name='CrlSetFields' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32, CSSM_FIELD *, CSSM_DATA *, CSSM_DATA_PTR)' function_pointer='true' name='CrlAddCert' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_DATA_PTR)' function_pointer='true' name='CrlRemoveCert' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_FIELD *, uint32, CSSM_DATA_PTR)' function_pointer='true' name='CrlSign' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_FIELD *, uint32)' function_pointer='true' name='CrlVerify' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' function_pointer='true' name='CrlVerifyWithKey' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_BOOL *)' function_pointer='true' name='IsCertInCrl' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_BOOL*' type64='^i'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' function_pointer='true' name='CrlGetFirstFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_OID*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' function_pointer='true' name='CrlGetNextFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' function_pointer='true' name='CrlAbortQuery' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' function_pointer='true' name='CrlGetAllFields' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_FIELD_PTR*' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_HANDLE_PTR)' function_pointer='true' name='CrlCache' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_HANDLE, CSSM_BOOL *, CSSM_DATA_PTR)' function_pointer='true' name='IsCertInCachedCrl' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_BOOL*' type64='^i'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA *, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' function_pointer='true' name='CrlGetFirstCachedFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_OID*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' function_pointer='true' name='CrlGetNextCachedFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' function_pointer='true' name='CrlGetAllCachedRecordFields' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_FIELD_PTR*' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' function_pointer='true' name='CrlAbortCache' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32 *, CSSM_OID_PTR *)' function_pointer='true' name='CrlDescribeFormat' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_OID_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, uint32, void *, void **)' function_pointer='true' name='PassThrough' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='CSSM_SPI_CL_FUNCS_PTR' type64='{cssm_spi_cl_funcs=&quot;CertCreateTemplate&quot;^?&quot;CertGetAllTemplateFields&quot;^?&quot;CertSign&quot;^?&quot;CertVerify&quot;^?&quot;CertVerifyWithKey&quot;^?&quot;CertGetFirstFieldValue&quot;^?&quot;CertGetNextFieldValue&quot;^?&quot;CertAbortQuery&quot;^?&quot;CertGetKeyInfo&quot;^?&quot;CertGetAllFields&quot;^?&quot;FreeFields&quot;^?&quot;FreeFieldValue&quot;^?&quot;CertCache&quot;^?&quot;CertGetFirstCachedFieldValue&quot;^?&quot;CertGetNextCachedFieldValue&quot;^?&quot;CertAbortCache&quot;^?&quot;CertGroupToSignedBundle&quot;^?&quot;CertGroupFromVerifiedBundle&quot;^?&quot;CertDescribeFormat&quot;^?&quot;CrlCreateTemplate&quot;^?&quot;CrlSetFields&quot;^?&quot;CrlAddCert&quot;^?&quot;CrlRemoveCert&quot;^?&quot;CrlSign&quot;^?&quot;CrlVerify&quot;^?&quot;CrlVerifyWithKey&quot;^?&quot;IsCertInCrl&quot;^?&quot;CrlGetFirstFieldValue&quot;^?&quot;CrlGetNextFieldValue&quot;^?&quot;CrlAbortQuery&quot;^?&quot;CrlGetAllFields&quot;^?&quot;CrlCache&quot;^?&quot;IsCertInCachedCrl&quot;^?&quot;CrlGetFirstCachedFieldValue&quot;^?&quot;CrlGetNextCachedFieldValue&quot;^?&quot;CrlGetAllCachedRecordFields&quot;^?&quot;CrlAbortCache&quot;^?&quot;CrlDescribeFormat&quot;^?&quot;PassThrough&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' function_pointer='true' name='CertCreateTemplate' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' function_pointer='true' name='CertGetAllTemplateFields' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_FIELD_PTR*' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_FIELD *, uint32, CSSM_DATA_PTR)' function_pointer='true' name='CertSign' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_FIELD *, uint32)' function_pointer='true' name='CertVerify' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' function_pointer='true' name='CertVerifyWithKey' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' function_pointer='true' name='CertGetFirstFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_OID*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' function_pointer='true' name='CertGetNextFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' function_pointer='true' name='CertAbortQuery' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_KEY_PTR *)' function_pointer='true' name='CertGetKeyInfo' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_KEY_PTR*' type64='^^{cssm_key}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' function_pointer='true' name='CertGetAllFields' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_FIELD_PTR*' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD_PTR *)' function_pointer='true' name='FreeFields' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_FIELD_PTR*' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_OID *, CSSM_DATA_PTR)' function_pointer='true' name='FreeFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_OID*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_HANDLE_PTR)' function_pointer='true' name='CertCache' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' function_pointer='true' name='CertGetFirstCachedFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_OID*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' function_pointer='true' name='CertGetNextCachedFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' function_pointer='true' name='CertAbortCache' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_CERTGROUP *, CSSM_CERT_BUNDLE_HEADER *, CSSM_DATA_PTR)' function_pointer='true' name='CertGroupToSignedBundle' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_CERT_BUNDLE_HEADER*' type64='^{cssm_cert_bundle_header=II}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_CERT_BUNDLE *, CSSM_DATA *, CSSM_CERTGROUP_PTR *)' function_pointer='true' name='CertGroupFromVerifiedBundle' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CERT_BUNDLE*' type64='^{cssm_cert_bundle={cssm_cert_bundle_header=II}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_CERTGROUP_PTR*' type64='^^{cssm_certgroup}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32 *, CSSM_OID_PTR *)' function_pointer='true' name='CertDescribeFormat' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_OID_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' function_pointer='true' name='CrlCreateTemplate' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA *, CSSM_DATA_PTR)' function_pointer='true' name='CrlSetFields' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32, CSSM_FIELD *, CSSM_DATA *, CSSM_DATA_PTR)' function_pointer='true' name='CrlAddCert' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_DATA_PTR)' function_pointer='true' name='CrlRemoveCert' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_FIELD *, uint32, CSSM_DATA_PTR)' function_pointer='true' name='CrlSign' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_FIELD *, uint32)' function_pointer='true' name='CrlVerify' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' function_pointer='true' name='CrlVerifyWithKey' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_BOOL *)' function_pointer='true' name='IsCertInCrl' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_BOOL*' type64='^i'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' function_pointer='true' name='CrlGetFirstFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_OID*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' function_pointer='true' name='CrlGetNextFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' function_pointer='true' name='CrlAbortQuery' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' function_pointer='true' name='CrlGetAllFields' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_FIELD_PTR*' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_HANDLE_PTR)' function_pointer='true' name='CrlCache' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_HANDLE, CSSM_BOOL *, CSSM_DATA_PTR)' function_pointer='true' name='IsCertInCachedCrl' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_BOOL*' type64='^i'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA *, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' function_pointer='true' name='CrlGetFirstCachedFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_OID*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' function_pointer='true' name='CrlGetNextCachedFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' function_pointer='true' name='CrlGetAllCachedRecordFields' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_FIELD_PTR*' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' function_pointer='true' name='CrlAbortCache' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32 *, CSSM_OID_PTR *)' function_pointer='true' name='CrlDescribeFormat' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_OID_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, uint32, void *, void **)' function_pointer='true' name='PassThrough' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='CSSM_SPI_CSP_FUNCS' type64='{cssm_spi_csp_funcs=&quot;EventNotify&quot;^?&quot;QuerySize&quot;^?&quot;SignData&quot;^?&quot;SignDataInit&quot;^?&quot;SignDataUpdate&quot;^?&quot;SignDataFinal&quot;^?&quot;VerifyData&quot;^?&quot;VerifyDataInit&quot;^?&quot;VerifyDataUpdate&quot;^?&quot;VerifyDataFinal&quot;^?&quot;DigestData&quot;^?&quot;DigestDataInit&quot;^?&quot;DigestDataUpdate&quot;^?&quot;DigestDataClone&quot;^?&quot;DigestDataFinal&quot;^?&quot;GenerateMac&quot;^?&quot;GenerateMacInit&quot;^?&quot;GenerateMacUpdate&quot;^?&quot;GenerateMacFinal&quot;^?&quot;VerifyMac&quot;^?&quot;VerifyMacInit&quot;^?&quot;VerifyMacUpdate&quot;^?&quot;VerifyMacFinal&quot;^?&quot;EncryptData&quot;^?&quot;EncryptDataInit&quot;^?&quot;EncryptDataUpdate&quot;^?&quot;EncryptDataFinal&quot;^?&quot;DecryptData&quot;^?&quot;DecryptDataInit&quot;^?&quot;DecryptDataUpdate&quot;^?&quot;DecryptDataFinal&quot;^?&quot;QueryKeySizeInBits&quot;^?&quot;GenerateKey&quot;^?&quot;GenerateKeyPair&quot;^?&quot;GenerateRandom&quot;^?&quot;GenerateAlgorithmParams&quot;^?&quot;WrapKey&quot;^?&quot;UnwrapKey&quot;^?&quot;DeriveKey&quot;^?&quot;FreeKey&quot;^?&quot;PassThrough&quot;^?&quot;Login&quot;^?&quot;Logout&quot;^?&quot;ChangeLoginAcl&quot;^?&quot;ObtainPrivateKeyFromPublicKey&quot;^?&quot;RetrieveUniqueId&quot;^?&quot;RetrieveCounter&quot;^?&quot;VerifyDevice&quot;^?&quot;GetTimeValue&quot;^?&quot;GetOperationalStatistics&quot;^?&quot;GetLoginAcl&quot;^?&quot;GetKeyAcl&quot;^?&quot;ChangeKeyAcl&quot;^?&quot;GetKeyOwner&quot;^?&quot;ChangeKeyOwner&quot;^?&quot;GetLoginOwner&quot;^?&quot;ChangeLoginOwner&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CONTEXT_EVENT, CSSM_CC_HANDLE, CSSM_CONTEXT *)' function_pointer='true' name='EventNotify' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CONTEXT_EVENT' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_BOOL, uint32, CSSM_QUERY_SIZE_DATA_PTR)' function_pointer='true' name='QuerySize' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_BOOL' type64='i'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_QUERY_SIZE_DATA_PTR' type64='^{cssm_query_size_data=II}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_ALGORITHMS, CSSM_DATA_PTR)' function_pointer='true' name='SignData' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_ALGORITHMS' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' function_pointer='true' name='SignDataInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' function_pointer='true' name='SignDataUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='SignDataFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_ALGORITHMS, CSSM_DATA *)' function_pointer='true' name='VerifyData' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_ALGORITHMS' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' function_pointer='true' name='VerifyDataInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' function_pointer='true' name='VerifyDataUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' function_pointer='true' name='VerifyDataFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR)' function_pointer='true' name='DigestData' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' function_pointer='true' name='DigestDataInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' function_pointer='true' name='DigestDataUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CC_HANDLE)' function_pointer='true' name='DigestDataClone' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='DigestDataFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR)' function_pointer='true' name='GenerateMac' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' function_pointer='true' name='GenerateMacInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' function_pointer='true' name='GenerateMacUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='GenerateMacFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA *)' function_pointer='true' name='VerifyMac' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' function_pointer='true' name='VerifyMacInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' function_pointer='true' name='VerifyMacUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' function_pointer='true' name='VerifyMacFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, CSSM_SIZE *, CSSM_DATA_PTR, CSSM_PRIVILEGE)' function_pointer='true' name='EncryptData' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_SIZE*' type64='^Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_PRIVILEGE)' function_pointer='true' name='EncryptDataInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, CSSM_SIZE *)' function_pointer='true' name='EncryptDataUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_SIZE*' type64='^Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='EncryptDataFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, CSSM_SIZE *, CSSM_DATA_PTR, CSSM_PRIVILEGE)' function_pointer='true' name='DecryptData' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_SIZE*' type64='^Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_PRIVILEGE)' function_pointer='true' name='DecryptDataInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, CSSM_SIZE *)' function_pointer='true' name='DecryptDataUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_SIZE*' type64='^Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='DecryptDataFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_KEY *, CSSM_KEY_SIZE_PTR)' function_pointer='true' name='QueryKeySizeInBits' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_KEY_SIZE_PTR' type64='^{cssm_key_size=II}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR, CSSM_PRIVILEGE)' function_pointer='true' name='GenerateKey' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, uint32, CSSM_DATA *, CSSM_KEY_PTR, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR, CSSM_PRIVILEGE)' function_pointer='true' name='GenerateKeyPair' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA_PTR)' function_pointer='true' name='GenerateRandom' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, CSSM_DATA_PTR, uint32 *, CSSM_CONTEXT_ATTRIBUTE_PTR *)' function_pointer='true' name='GenerateAlgorithmParams' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_CONTEXT_ATTRIBUTE_PTR*' type64='^^{cssm_context_attribute}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_ACCESS_CREDENTIALS *, CSSM_KEY *, CSSM_DATA *, CSSM_WRAP_KEY_PTR, CSSM_PRIVILEGE)' function_pointer='true' name='WrapKey' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_WRAP_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_KEY *, CSSM_WRAP_KEY *, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR, CSSM_DATA_PTR, CSSM_PRIVILEGE)' function_pointer='true' name='UnwrapKey' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_WRAP_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA_PTR, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR)' function_pointer='true' name='DeriveKey' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_KEY_PTR, CSSM_BOOL)' function_pointer='true' name='FreeKey' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_BOOL' type64='i'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, void *, void **)' function_pointer='true' name='PassThrough' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_DATA *, void *)' function_pointer='true' name='Login' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE)' function_pointer='true' name='Logout' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_EDIT *)' function_pointer='true' name='ChangeLoginAcl' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_ACL_EDIT*' type64='^{cssm_acl_edit=Iq^{cssm_acl_entry_input}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_KEY *, CSSM_KEY_PTR)' function_pointer='true' name='ObtainPrivateKeyFromPublicKey' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='RetrieveUniqueId' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='RetrieveCounter' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_DATA *)' function_pointer='true' name='VerifyDevice' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ALGORITHMS, CSSM_DATA *)' function_pointer='true' name='GetTimeValue' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_ALGORITHMS' type64='I'/>
<arg declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CSP_OPERATIONAL_STATISTICS *)' function_pointer='true' name='GetOperationalStatistics' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_OPERATIONAL_STATISTICS*' type64='^{cssm_csp_operational_statistics=iIIIIIIIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_STRING *, uint32 *, CSSM_ACL_ENTRY_INFO_PTR *)' function_pointer='true' name='GetLoginAcl' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_STRING*' type64='^[68c]'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_ACL_ENTRY_INFO_PTR*' type64='^^{cssm_acl_entry_info}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_KEY *, CSSM_STRING *, uint32 *, CSSM_ACL_ENTRY_INFO_PTR *)' function_pointer='true' name='GetKeyAcl' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_STRING*' type64='^[68c]'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_ACL_ENTRY_INFO_PTR*' type64='^^{cssm_acl_entry_info}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_EDIT *, CSSM_KEY *)' function_pointer='true' name='ChangeKeyAcl' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_ACL_EDIT*' type64='^{cssm_acl_edit=Iq^{cssm_acl_entry_input}}'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_KEY *, CSSM_ACL_OWNER_PROTOTYPE_PTR)' function_pointer='true' name='GetKeyOwner' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_ACL_OWNER_PROTOTYPE_PTR' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_KEY *, CSSM_ACL_OWNER_PROTOTYPE *)' function_pointer='true' name='ChangeKeyOwner' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_ACL_OWNER_PROTOTYPE*' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACL_OWNER_PROTOTYPE_PTR)' function_pointer='true' name='GetLoginOwner' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_ACL_OWNER_PROTOTYPE_PTR' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_OWNER_PROTOTYPE *)' function_pointer='true' name='ChangeLoginOwner' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_ACL_OWNER_PROTOTYPE*' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='CSSM_SPI_CSP_FUNCS_PTR' type64='{cssm_spi_csp_funcs=&quot;EventNotify&quot;^?&quot;QuerySize&quot;^?&quot;SignData&quot;^?&quot;SignDataInit&quot;^?&quot;SignDataUpdate&quot;^?&quot;SignDataFinal&quot;^?&quot;VerifyData&quot;^?&quot;VerifyDataInit&quot;^?&quot;VerifyDataUpdate&quot;^?&quot;VerifyDataFinal&quot;^?&quot;DigestData&quot;^?&quot;DigestDataInit&quot;^?&quot;DigestDataUpdate&quot;^?&quot;DigestDataClone&quot;^?&quot;DigestDataFinal&quot;^?&quot;GenerateMac&quot;^?&quot;GenerateMacInit&quot;^?&quot;GenerateMacUpdate&quot;^?&quot;GenerateMacFinal&quot;^?&quot;VerifyMac&quot;^?&quot;VerifyMacInit&quot;^?&quot;VerifyMacUpdate&quot;^?&quot;VerifyMacFinal&quot;^?&quot;EncryptData&quot;^?&quot;EncryptDataInit&quot;^?&quot;EncryptDataUpdate&quot;^?&quot;EncryptDataFinal&quot;^?&quot;DecryptData&quot;^?&quot;DecryptDataInit&quot;^?&quot;DecryptDataUpdate&quot;^?&quot;DecryptDataFinal&quot;^?&quot;QueryKeySizeInBits&quot;^?&quot;GenerateKey&quot;^?&quot;GenerateKeyPair&quot;^?&quot;GenerateRandom&quot;^?&quot;GenerateAlgorithmParams&quot;^?&quot;WrapKey&quot;^?&quot;UnwrapKey&quot;^?&quot;DeriveKey&quot;^?&quot;FreeKey&quot;^?&quot;PassThrough&quot;^?&quot;Login&quot;^?&quot;Logout&quot;^?&quot;ChangeLoginAcl&quot;^?&quot;ObtainPrivateKeyFromPublicKey&quot;^?&quot;RetrieveUniqueId&quot;^?&quot;RetrieveCounter&quot;^?&quot;VerifyDevice&quot;^?&quot;GetTimeValue&quot;^?&quot;GetOperationalStatistics&quot;^?&quot;GetLoginAcl&quot;^?&quot;GetKeyAcl&quot;^?&quot;ChangeKeyAcl&quot;^?&quot;GetKeyOwner&quot;^?&quot;ChangeKeyOwner&quot;^?&quot;GetLoginOwner&quot;^?&quot;ChangeLoginOwner&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CONTEXT_EVENT, CSSM_CC_HANDLE, CSSM_CONTEXT *)' function_pointer='true' name='EventNotify' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CONTEXT_EVENT' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_BOOL, uint32, CSSM_QUERY_SIZE_DATA_PTR)' function_pointer='true' name='QuerySize' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_BOOL' type64='i'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_QUERY_SIZE_DATA_PTR' type64='^{cssm_query_size_data=II}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_ALGORITHMS, CSSM_DATA_PTR)' function_pointer='true' name='SignData' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_ALGORITHMS' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' function_pointer='true' name='SignDataInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' function_pointer='true' name='SignDataUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='SignDataFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_ALGORITHMS, CSSM_DATA *)' function_pointer='true' name='VerifyData' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_ALGORITHMS' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' function_pointer='true' name='VerifyDataInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' function_pointer='true' name='VerifyDataUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' function_pointer='true' name='VerifyDataFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR)' function_pointer='true' name='DigestData' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' function_pointer='true' name='DigestDataInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' function_pointer='true' name='DigestDataUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CC_HANDLE)' function_pointer='true' name='DigestDataClone' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='DigestDataFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR)' function_pointer='true' name='GenerateMac' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' function_pointer='true' name='GenerateMacInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' function_pointer='true' name='GenerateMacUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='GenerateMacFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA *)' function_pointer='true' name='VerifyMac' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' function_pointer='true' name='VerifyMacInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' function_pointer='true' name='VerifyMacUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' function_pointer='true' name='VerifyMacFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, CSSM_SIZE *, CSSM_DATA_PTR, CSSM_PRIVILEGE)' function_pointer='true' name='EncryptData' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_SIZE*' type64='^Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_PRIVILEGE)' function_pointer='true' name='EncryptDataInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, CSSM_SIZE *)' function_pointer='true' name='EncryptDataUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_SIZE*' type64='^Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='EncryptDataFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, CSSM_SIZE *, CSSM_DATA_PTR, CSSM_PRIVILEGE)' function_pointer='true' name='DecryptData' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_SIZE*' type64='^Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_PRIVILEGE)' function_pointer='true' name='DecryptDataInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, CSSM_SIZE *)' function_pointer='true' name='DecryptDataUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_SIZE*' type64='^Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='DecryptDataFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_KEY *, CSSM_KEY_SIZE_PTR)' function_pointer='true' name='QueryKeySizeInBits' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_KEY_SIZE_PTR' type64='^{cssm_key_size=II}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR, CSSM_PRIVILEGE)' function_pointer='true' name='GenerateKey' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, uint32, CSSM_DATA *, CSSM_KEY_PTR, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR, CSSM_PRIVILEGE)' function_pointer='true' name='GenerateKeyPair' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA_PTR)' function_pointer='true' name='GenerateRandom' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, CSSM_DATA_PTR, uint32 *, CSSM_CONTEXT_ATTRIBUTE_PTR *)' function_pointer='true' name='GenerateAlgorithmParams' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_CONTEXT_ATTRIBUTE_PTR*' type64='^^{cssm_context_attribute}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_ACCESS_CREDENTIALS *, CSSM_KEY *, CSSM_DATA *, CSSM_WRAP_KEY_PTR, CSSM_PRIVILEGE)' function_pointer='true' name='WrapKey' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_WRAP_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_KEY *, CSSM_WRAP_KEY *, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR, CSSM_DATA_PTR, CSSM_PRIVILEGE)' function_pointer='true' name='UnwrapKey' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_WRAP_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA_PTR, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR)' function_pointer='true' name='DeriveKey' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_KEY_PTR, CSSM_BOOL)' function_pointer='true' name='FreeKey' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_BOOL' type64='i'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, void *, void **)' function_pointer='true' name='PassThrough' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_DATA *, void *)' function_pointer='true' name='Login' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE)' function_pointer='true' name='Logout' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_EDIT *)' function_pointer='true' name='ChangeLoginAcl' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_ACL_EDIT*' type64='^{cssm_acl_edit=Iq^{cssm_acl_entry_input}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_KEY *, CSSM_KEY_PTR)' function_pointer='true' name='ObtainPrivateKeyFromPublicKey' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='RetrieveUniqueId' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='RetrieveCounter' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_DATA *)' function_pointer='true' name='VerifyDevice' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ALGORITHMS, CSSM_DATA *)' function_pointer='true' name='GetTimeValue' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_ALGORITHMS' type64='I'/>
<arg declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CSP_OPERATIONAL_STATISTICS *)' function_pointer='true' name='GetOperationalStatistics' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_OPERATIONAL_STATISTICS*' type64='^{cssm_csp_operational_statistics=iIIIIIIIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_STRING *, uint32 *, CSSM_ACL_ENTRY_INFO_PTR *)' function_pointer='true' name='GetLoginAcl' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_STRING*' type64='^[68c]'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_ACL_ENTRY_INFO_PTR*' type64='^^{cssm_acl_entry_info}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_KEY *, CSSM_STRING *, uint32 *, CSSM_ACL_ENTRY_INFO_PTR *)' function_pointer='true' name='GetKeyAcl' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_STRING*' type64='^[68c]'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_ACL_ENTRY_INFO_PTR*' type64='^^{cssm_acl_entry_info}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_EDIT *, CSSM_KEY *)' function_pointer='true' name='ChangeKeyAcl' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_ACL_EDIT*' type64='^{cssm_acl_edit=Iq^{cssm_acl_entry_input}}'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_KEY *, CSSM_ACL_OWNER_PROTOTYPE_PTR)' function_pointer='true' name='GetKeyOwner' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_ACL_OWNER_PROTOTYPE_PTR' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_KEY *, CSSM_ACL_OWNER_PROTOTYPE *)' function_pointer='true' name='ChangeKeyOwner' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_ACL_OWNER_PROTOTYPE*' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACL_OWNER_PROTOTYPE_PTR)' function_pointer='true' name='GetLoginOwner' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_ACL_OWNER_PROTOTYPE_PTR' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_OWNER_PROTOTYPE *)' function_pointer='true' name='ChangeLoginOwner' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_ACL_OWNER_PROTOTYPE*' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='CSSM_SPI_DL_FUNCS' type64='{cssm_spi_dl_funcs=&quot;DbOpen&quot;^?&quot;DbClose&quot;^?&quot;DbCreate&quot;^?&quot;DbDelete&quot;^?&quot;CreateRelation&quot;^?&quot;DestroyRelation&quot;^?&quot;Authenticate&quot;^?&quot;GetDbAcl&quot;^?&quot;ChangeDbAcl&quot;^?&quot;GetDbOwner&quot;^?&quot;ChangeDbOwner&quot;^?&quot;GetDbNames&quot;^?&quot;GetDbNameFromHandle&quot;^?&quot;FreeNameList&quot;^?&quot;DataInsert&quot;^?&quot;DataDelete&quot;^?&quot;DataModify&quot;^?&quot;DataGetFirst&quot;^?&quot;DataGetNext&quot;^?&quot;DataAbortQuery&quot;^?&quot;DataGetFromUniqueRecordId&quot;^?&quot;FreeUniqueRecord&quot;^?&quot;PassThrough&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_DB_ACCESS_TYPE, CSSM_ACCESS_CREDENTIALS *, void *, CSSM_DB_HANDLE *)' function_pointer='true' name='DbOpen' type64='^?'>
<arg declared_type64='CSSM_DL_HANDLE' type64='q'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='CSSM_NET_ADDRESS*' type64='^{cssm_net_address=I{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DB_ACCESS_TYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='CSSM_DB_HANDLE*' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE)' function_pointer='true' name='DbClose' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_DBINFO *, CSSM_DB_ACCESS_TYPE, CSSM_RESOURCE_CONTROL_CONTEXT *, void *, CSSM_DB_HANDLE *)' function_pointer='true' name='DbCreate' type64='^?'>
<arg declared_type64='CSSM_DL_HANDLE' type64='q'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='CSSM_NET_ADDRESS*' type64='^{cssm_net_address=I{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DBINFO*' type64='^{cssm_dbinfo=I^{cssm_db_parsing_module_info}^{cssm_db_record_attribute_info}^{cssm_db_record_index_info}i*^v}'/>
<arg declared_type64='CSSM_DB_ACCESS_TYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='CSSM_DB_HANDLE*' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_ACCESS_CREDENTIALS *)' function_pointer='true' name='DbDelete' type64='^?'>
<arg declared_type64='CSSM_DL_HANDLE' type64='q'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='CSSM_NET_ADDRESS*' type64='^{cssm_net_address=I{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, char *, uint32, CSSM_DB_SCHEMA_ATTRIBUTE_INFO *, uint32, CSSM_DB_SCHEMA_INDEX_INFO *)' function_pointer='true' name='CreateRelation' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_SCHEMA_ATTRIBUTE_INFO*' type64='^{cssm_db_schema_attribute_info=I*{cssm_data=Q*}I}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_SCHEMA_INDEX_INFO*' type64='^{cssm_db_schema_index_info=IIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE)' function_pointer='true' name='DestroyRelation' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_ACCESS_TYPE, CSSM_ACCESS_CREDENTIALS *)' function_pointer='true' name='Authenticate' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_ACCESS_TYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_STRING *, uint32 *, CSSM_ACL_ENTRY_INFO_PTR *)' function_pointer='true' name='GetDbAcl' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_STRING*' type64='^[68c]'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_ACL_ENTRY_INFO_PTR*' type64='^^{cssm_acl_entry_info}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_EDIT *)' function_pointer='true' name='ChangeDbAcl' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_ACL_EDIT*' type64='^{cssm_acl_edit=Iq^{cssm_acl_entry_input}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_ACL_OWNER_PROTOTYPE_PTR)' function_pointer='true' name='GetDbOwner' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_ACL_OWNER_PROTOTYPE_PTR' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_OWNER_PROTOTYPE *)' function_pointer='true' name='ChangeDbOwner' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_ACL_OWNER_PROTOTYPE*' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_HANDLE, CSSM_NAME_LIST_PTR *)' function_pointer='true' name='GetDbNames' type64='^?'>
<arg declared_type64='CSSM_DL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_NAME_LIST_PTR*' type64='^^{cssm_name_list}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, char **)' function_pointer='true' name='GetDbNameFromHandle' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_HANDLE, CSSM_NAME_LIST_PTR)' function_pointer='true' name='FreeNameList' type64='^?'>
<arg declared_type64='CSSM_DL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_NAME_LIST_PTR' type64='^{cssm_name_list=I^*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_UNIQUE_RECORD_PTR *)' function_pointer='true' name='DataInsert' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *)' function_pointer='true' name='DataDelete' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_DB_UNIQUE_RECORD*' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_UNIQUE_RECORD_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_MODIFY_MODE)' function_pointer='true' name='DataModify' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_MODIFY_MODE' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_QUERY *, CSSM_HANDLE_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' function_pointer='true' name='DataGetFirst' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_QUERY*' type64='^{cssm_query=III^{cssm_selection_predicate}{cssm_query_limits=II}I}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_HANDLE, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' function_pointer='true' name='DataGetNext' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_HANDLE)' function_pointer='true' name='DataAbortQuery' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR)' function_pointer='true' name='DataGetFromUniqueRecordId' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_DB_UNIQUE_RECORD*' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_UNIQUE_RECORD_PTR)' function_pointer='true' name='FreeUniqueRecord' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, uint32, void *, void **)' function_pointer='true' name='PassThrough' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='CSSM_SPI_DL_FUNCS_PTR' type64='{cssm_spi_dl_funcs=&quot;DbOpen&quot;^?&quot;DbClose&quot;^?&quot;DbCreate&quot;^?&quot;DbDelete&quot;^?&quot;CreateRelation&quot;^?&quot;DestroyRelation&quot;^?&quot;Authenticate&quot;^?&quot;GetDbAcl&quot;^?&quot;ChangeDbAcl&quot;^?&quot;GetDbOwner&quot;^?&quot;ChangeDbOwner&quot;^?&quot;GetDbNames&quot;^?&quot;GetDbNameFromHandle&quot;^?&quot;FreeNameList&quot;^?&quot;DataInsert&quot;^?&quot;DataDelete&quot;^?&quot;DataModify&quot;^?&quot;DataGetFirst&quot;^?&quot;DataGetNext&quot;^?&quot;DataAbortQuery&quot;^?&quot;DataGetFromUniqueRecordId&quot;^?&quot;FreeUniqueRecord&quot;^?&quot;PassThrough&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_DB_ACCESS_TYPE, CSSM_ACCESS_CREDENTIALS *, void *, CSSM_DB_HANDLE *)' function_pointer='true' name='DbOpen' type64='^?'>
<arg declared_type64='CSSM_DL_HANDLE' type64='q'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='CSSM_NET_ADDRESS*' type64='^{cssm_net_address=I{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DB_ACCESS_TYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='CSSM_DB_HANDLE*' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE)' function_pointer='true' name='DbClose' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_DBINFO *, CSSM_DB_ACCESS_TYPE, CSSM_RESOURCE_CONTROL_CONTEXT *, void *, CSSM_DB_HANDLE *)' function_pointer='true' name='DbCreate' type64='^?'>
<arg declared_type64='CSSM_DL_HANDLE' type64='q'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='CSSM_NET_ADDRESS*' type64='^{cssm_net_address=I{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DBINFO*' type64='^{cssm_dbinfo=I^{cssm_db_parsing_module_info}^{cssm_db_record_attribute_info}^{cssm_db_record_index_info}i*^v}'/>
<arg declared_type64='CSSM_DB_ACCESS_TYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='CSSM_DB_HANDLE*' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_ACCESS_CREDENTIALS *)' function_pointer='true' name='DbDelete' type64='^?'>
<arg declared_type64='CSSM_DL_HANDLE' type64='q'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='CSSM_NET_ADDRESS*' type64='^{cssm_net_address=I{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, char *, uint32, CSSM_DB_SCHEMA_ATTRIBUTE_INFO *, uint32, CSSM_DB_SCHEMA_INDEX_INFO *)' function_pointer='true' name='CreateRelation' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_SCHEMA_ATTRIBUTE_INFO*' type64='^{cssm_db_schema_attribute_info=I*{cssm_data=Q*}I}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_SCHEMA_INDEX_INFO*' type64='^{cssm_db_schema_index_info=IIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE)' function_pointer='true' name='DestroyRelation' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_ACCESS_TYPE, CSSM_ACCESS_CREDENTIALS *)' function_pointer='true' name='Authenticate' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_ACCESS_TYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_STRING *, uint32 *, CSSM_ACL_ENTRY_INFO_PTR *)' function_pointer='true' name='GetDbAcl' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_STRING*' type64='^[68c]'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_ACL_ENTRY_INFO_PTR*' type64='^^{cssm_acl_entry_info}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_EDIT *)' function_pointer='true' name='ChangeDbAcl' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_ACL_EDIT*' type64='^{cssm_acl_edit=Iq^{cssm_acl_entry_input}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_ACL_OWNER_PROTOTYPE_PTR)' function_pointer='true' name='GetDbOwner' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_ACL_OWNER_PROTOTYPE_PTR' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_OWNER_PROTOTYPE *)' function_pointer='true' name='ChangeDbOwner' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_ACL_OWNER_PROTOTYPE*' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_HANDLE, CSSM_NAME_LIST_PTR *)' function_pointer='true' name='GetDbNames' type64='^?'>
<arg declared_type64='CSSM_DL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_NAME_LIST_PTR*' type64='^^{cssm_name_list}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, char **)' function_pointer='true' name='GetDbNameFromHandle' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_HANDLE, CSSM_NAME_LIST_PTR)' function_pointer='true' name='FreeNameList' type64='^?'>
<arg declared_type64='CSSM_DL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_NAME_LIST_PTR' type64='^{cssm_name_list=I^*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_UNIQUE_RECORD_PTR *)' function_pointer='true' name='DataInsert' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *)' function_pointer='true' name='DataDelete' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_DB_UNIQUE_RECORD*' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_UNIQUE_RECORD_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_MODIFY_MODE)' function_pointer='true' name='DataModify' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_MODIFY_MODE' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_QUERY *, CSSM_HANDLE_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' function_pointer='true' name='DataGetFirst' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_QUERY*' type64='^{cssm_query=III^{cssm_selection_predicate}{cssm_query_limits=II}I}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_HANDLE, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' function_pointer='true' name='DataGetNext' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_HANDLE)' function_pointer='true' name='DataAbortQuery' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR)' function_pointer='true' name='DataGetFromUniqueRecordId' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_DB_UNIQUE_RECORD*' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_UNIQUE_RECORD_PTR)' function_pointer='true' name='FreeUniqueRecord' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, uint32, void *, void **)' function_pointer='true' name='PassThrough' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='CSSM_SPI_KR_FUNCS' type64='{cssm_spi_kr_funcs=&quot;RegistrationRequest&quot;^?&quot;RegistrationRetrieve&quot;^?&quot;GenerateRecoveryFields&quot;^?&quot;ProcessRecoveryFields&quot;^?&quot;RecoveryRequest&quot;^?&quot;RecoveryRetrieve&quot;^?&quot;GetRecoveredObject&quot;^?&quot;RecoveryRequestAbort&quot;^?&quot;PassThrough&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_ACCESS_CREDENTIALS *, CSSM_KR_POLICY_FLAGS, sint32 *, CSSM_HANDLE_PTR)' function_pointer='true' name='RegistrationRequest' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg declared_type64='CSSM_KR_POLICY_FLAGS' type64='I'/>
<arg declared_type64='sint32*' type64='^i'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE, sint32 *, CSSM_KR_PROFILE_PTR)' function_pointer='true' name='RegistrationRetrieve' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='sint32*' type64='^i'/>
<arg declared_type64='CSSM_KR_PROFILE_PTR' type64='^{cssm_kr_profile={cssm_kr_name=CC*}^{cssm_certgroup}^{cssm_certgroup}C^{cssm_certgroup}C^{cssm_certgroup}C^{cssm_certgroup}^{cssm_data}I^{cssm_data}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_KR_POLICY_FLAGS, CSSM_DATA_PTR)' function_pointer='true' name='GenerateRecoveryFields' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_KR_POLICY_FLAGS' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_KR_POLICY_FLAGS, CSSM_DATA *)' function_pointer='true' name='ProcessRecoveryFields' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_KR_POLICY_FLAGS' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_ACCESS_CREDENTIALS *, sint32 *, CSSM_HANDLE_PTR)' function_pointer='true' name='RecoveryRequest' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg declared_type64='sint32*' type64='^i'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE, sint32 *, CSSM_HANDLE_PTR, uint32 *)' function_pointer='true' name='RecoveryRetrieve' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='sint32*' type64='^i'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='uint32*' type64='^I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE, uint32, CSSM_CSP_HANDLE, CSSM_RESOURCE_CONTROL_CONTEXT *, uint32, CSSM_KEY_PTR, CSSM_DATA_PTR)' function_pointer='true' name='GetRecoveredObject' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE)' function_pointer='true' name='RecoveryRequestAbort' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, void *, void **)' function_pointer='true' name='PassThrough' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='CSSM_SPI_KR_FUNCS_PTR' type64='{cssm_spi_kr_funcs=&quot;RegistrationRequest&quot;^?&quot;RegistrationRetrieve&quot;^?&quot;GenerateRecoveryFields&quot;^?&quot;ProcessRecoveryFields&quot;^?&quot;RecoveryRequest&quot;^?&quot;RecoveryRetrieve&quot;^?&quot;GetRecoveredObject&quot;^?&quot;RecoveryRequestAbort&quot;^?&quot;PassThrough&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_ACCESS_CREDENTIALS *, CSSM_KR_POLICY_FLAGS, sint32 *, CSSM_HANDLE_PTR)' function_pointer='true' name='RegistrationRequest' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg declared_type64='CSSM_KR_POLICY_FLAGS' type64='I'/>
<arg declared_type64='sint32*' type64='^i'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE, sint32 *, CSSM_KR_PROFILE_PTR)' function_pointer='true' name='RegistrationRetrieve' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='sint32*' type64='^i'/>
<arg declared_type64='CSSM_KR_PROFILE_PTR' type64='^{cssm_kr_profile={cssm_kr_name=CC*}^{cssm_certgroup}^{cssm_certgroup}C^{cssm_certgroup}C^{cssm_certgroup}C^{cssm_certgroup}^{cssm_data}I^{cssm_data}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_KR_POLICY_FLAGS, CSSM_DATA_PTR)' function_pointer='true' name='GenerateRecoveryFields' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_KR_POLICY_FLAGS' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_KR_POLICY_FLAGS, CSSM_DATA *)' function_pointer='true' name='ProcessRecoveryFields' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_KR_POLICY_FLAGS' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_ACCESS_CREDENTIALS *, sint32 *, CSSM_HANDLE_PTR)' function_pointer='true' name='RecoveryRequest' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg declared_type64='sint32*' type64='^i'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE, sint32 *, CSSM_HANDLE_PTR, uint32 *)' function_pointer='true' name='RecoveryRetrieve' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='sint32*' type64='^i'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='uint32*' type64='^I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE, uint32, CSSM_CSP_HANDLE, CSSM_RESOURCE_CONTROL_CONTEXT *, uint32, CSSM_KEY_PTR, CSSM_DATA_PTR)' function_pointer='true' name='GetRecoveredObject' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE)' function_pointer='true' name='RecoveryRequestAbort' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, void *, void **)' function_pointer='true' name='PassThrough' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='CSSM_SPI_TP_FUNCS' type64='{cssm_spi_tp_funcs=&quot;SubmitCredRequest&quot;^?&quot;RetrieveCredResult&quot;^?&quot;ConfirmCredResult&quot;^?&quot;ReceiveConfirmation&quot;^?&quot;CertReclaimKey&quot;^?&quot;CertReclaimAbort&quot;^?&quot;FormRequest&quot;^?&quot;FormSubmit&quot;^?&quot;CertGroupVerify&quot;^?&quot;CertCreateTemplate&quot;^?&quot;CertGetAllTemplateFields&quot;^?&quot;CertSign&quot;^?&quot;CrlVerify&quot;^?&quot;CrlCreateTemplate&quot;^?&quot;CertRevoke&quot;^?&quot;CertRemoveFromCrlTemplate&quot;^?&quot;CrlSign&quot;^?&quot;ApplyCrlToDb&quot;^?&quot;CertGroupConstruct&quot;^?&quot;CertGroupPrune&quot;^?&quot;CertGroupToTupleGroup&quot;^?&quot;TupleGroupToCertGroup&quot;^?&quot;PassThrough&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_TP_AUTHORITY_ID *, CSSM_TP_AUTHORITY_REQUEST_TYPE, CSSM_TP_REQUEST_SET *, CSSM_TP_CALLERAUTH_CONTEXT *, sint32 *, CSSM_DATA_PTR)' function_pointer='true' name='SubmitCredRequest' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_TP_AUTHORITY_ID*' type64='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}'/>
<arg declared_type64='CSSM_TP_AUTHORITY_REQUEST_TYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_TP_REQUEST_SET*' type64='^{cssm_tp_request_set=I^v}'/>
<arg const='true' declared_type64='CSSM_TP_CALLERAUTH_CONTEXT*' type64='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}'/>
<arg declared_type64='sint32*' type64='^i'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_DATA *, CSSM_TP_CALLERAUTH_CONTEXT *, sint32 *, CSSM_BOOL *, CSSM_TP_RESULT_SET_PTR *)' function_pointer='true' name='RetrieveCredResult' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_TP_CALLERAUTH_CONTEXT*' type64='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}'/>
<arg declared_type64='sint32*' type64='^i'/>
<arg declared_type64='CSSM_BOOL*' type64='^i'/>
<arg declared_type64='CSSM_TP_RESULT_SET_PTR*' type64='^^{cssm_tp_result_set}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_DATA *, CSSM_TP_CALLERAUTH_CONTEXT *, CSSM_TP_CONFIRM_RESPONSE *, CSSM_TP_AUTHORITY_ID *)' function_pointer='true' name='ConfirmCredResult' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_TP_CALLERAUTH_CONTEXT*' type64='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}'/>
<arg const='true' declared_type64='CSSM_TP_CONFIRM_RESPONSE*' type64='^{cssm_tp_confirm_response=I^I}'/>
<arg const='true' declared_type64='CSSM_TP_AUTHORITY_ID*' type64='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_DATA *, CSSM_TP_CONFIRM_RESPONSE_PTR *, sint32 *)' function_pointer='true' name='ReceiveConfirmation' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_TP_CONFIRM_RESPONSE_PTR*' type64='^^{cssm_tp_confirm_response}'/>
<arg declared_type64='sint32*' type64='^i'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CERTGROUP *, uint32, CSSM_LONG_HANDLE, CSSM_CSP_HANDLE, CSSM_RESOURCE_CONTROL_CONTEXT *)' function_pointer='true' name='CertReclaimKey' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_LONG_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_LONG_HANDLE)' function_pointer='true' name='CertReclaimAbort' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_LONG_HANDLE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_TP_AUTHORITY_ID *, CSSM_TP_FORM_TYPE, CSSM_DATA_PTR)' function_pointer='true' name='FormRequest' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_TP_AUTHORITY_ID*' type64='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}'/>
<arg declared_type64='CSSM_TP_FORM_TYPE' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_TP_FORM_TYPE, CSSM_DATA *, CSSM_TP_AUTHORITY_ID *, CSSM_TP_AUTHORITY_ID *, CSSM_ACCESS_CREDENTIALS_PTR)' function_pointer='true' name='FormSubmit' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_TP_FORM_TYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_TP_AUTHORITY_ID*' type64='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}'/>
<arg const='true' declared_type64='CSSM_TP_AUTHORITY_ID*' type64='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}'/>
<arg declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR)' function_pointer='true' name='CertGroupVerify' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' function_pointer='true' name='CertCreateTemplate' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' function_pointer='true' name='CertGetAllTemplateFields' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_FIELD_PTR*' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR)' function_pointer='true' name='CertSign' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_ENCODED_CRL *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR)' function_pointer='true' name='CrlVerify' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ENCODED_CRL*' type64='^{cssm_encoded_crl=II{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' function_pointer='true' name='CrlCreateTemplate' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_DATA *, CSSM_CERTGROUP *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_TP_CERTCHANGE_REASON, CSSM_DATA_PTR)' function_pointer='true' name='CertRevoke' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<arg declared_type64='CSSM_TP_CERTCHANGE_REASON' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_DATA *, CSSM_CERTGROUP *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR)' function_pointer='true' name='CertRemoveFromCrlTemplate' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_ENCODED_CRL *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR)' function_pointer='true' name='CrlSign' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_ENCODED_CRL*' type64='^{cssm_encoded_crl=II{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_ENCODED_CRL *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR)' function_pointer='true' name='ApplyCrlToDb' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ENCODED_CRL*' type64='^{cssm_encoded_crl=II{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_DL_DB_LIST *, void *, CSSM_CERTGROUP *, CSSM_CERTGROUP_PTR *)' function_pointer='true' name='CertGroupConstruct' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DL_DB_LIST*' type64='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg declared_type64='CSSM_CERTGROUP_PTR*' type64='^^{cssm_certgroup}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_DL_DB_LIST *, CSSM_CERTGROUP *, CSSM_CERTGROUP_PTR *)' function_pointer='true' name='CertGroupPrune' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DL_DB_LIST*' type64='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg declared_type64='CSSM_CERTGROUP_PTR*' type64='^^{cssm_certgroup}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CERTGROUP *, CSSM_TUPLEGROUP_PTR *)' function_pointer='true' name='CertGroupToTupleGroup' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg declared_type64='CSSM_TUPLEGROUP_PTR*' type64='^^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_TUPLEGROUP *, CSSM_CERTGROUP_PTR *)' function_pointer='true' name='TupleGroupToCertGroup' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_TUPLEGROUP*' type64='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
<arg declared_type64='CSSM_CERTGROUP_PTR*' type64='^^{cssm_certgroup}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DL_DB_LIST *, uint32, void *, void **)' function_pointer='true' name='PassThrough' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DL_DB_LIST*' type64='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='CSSM_SPI_TP_FUNCS_PTR' type64='{cssm_spi_tp_funcs=&quot;SubmitCredRequest&quot;^?&quot;RetrieveCredResult&quot;^?&quot;ConfirmCredResult&quot;^?&quot;ReceiveConfirmation&quot;^?&quot;CertReclaimKey&quot;^?&quot;CertReclaimAbort&quot;^?&quot;FormRequest&quot;^?&quot;FormSubmit&quot;^?&quot;CertGroupVerify&quot;^?&quot;CertCreateTemplate&quot;^?&quot;CertGetAllTemplateFields&quot;^?&quot;CertSign&quot;^?&quot;CrlVerify&quot;^?&quot;CrlCreateTemplate&quot;^?&quot;CertRevoke&quot;^?&quot;CertRemoveFromCrlTemplate&quot;^?&quot;CrlSign&quot;^?&quot;ApplyCrlToDb&quot;^?&quot;CertGroupConstruct&quot;^?&quot;CertGroupPrune&quot;^?&quot;CertGroupToTupleGroup&quot;^?&quot;TupleGroupToCertGroup&quot;^?&quot;PassThrough&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_TP_AUTHORITY_ID *, CSSM_TP_AUTHORITY_REQUEST_TYPE, CSSM_TP_REQUEST_SET *, CSSM_TP_CALLERAUTH_CONTEXT *, sint32 *, CSSM_DATA_PTR)' function_pointer='true' name='SubmitCredRequest' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_TP_AUTHORITY_ID*' type64='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}'/>
<arg declared_type64='CSSM_TP_AUTHORITY_REQUEST_TYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_TP_REQUEST_SET*' type64='^{cssm_tp_request_set=I^v}'/>
<arg const='true' declared_type64='CSSM_TP_CALLERAUTH_CONTEXT*' type64='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}'/>
<arg declared_type64='sint32*' type64='^i'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_DATA *, CSSM_TP_CALLERAUTH_CONTEXT *, sint32 *, CSSM_BOOL *, CSSM_TP_RESULT_SET_PTR *)' function_pointer='true' name='RetrieveCredResult' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_TP_CALLERAUTH_CONTEXT*' type64='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}'/>
<arg declared_type64='sint32*' type64='^i'/>
<arg declared_type64='CSSM_BOOL*' type64='^i'/>
<arg declared_type64='CSSM_TP_RESULT_SET_PTR*' type64='^^{cssm_tp_result_set}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_DATA *, CSSM_TP_CALLERAUTH_CONTEXT *, CSSM_TP_CONFIRM_RESPONSE *, CSSM_TP_AUTHORITY_ID *)' function_pointer='true' name='ConfirmCredResult' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_TP_CALLERAUTH_CONTEXT*' type64='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}'/>
<arg const='true' declared_type64='CSSM_TP_CONFIRM_RESPONSE*' type64='^{cssm_tp_confirm_response=I^I}'/>
<arg const='true' declared_type64='CSSM_TP_AUTHORITY_ID*' type64='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_DATA *, CSSM_TP_CONFIRM_RESPONSE_PTR *, sint32 *)' function_pointer='true' name='ReceiveConfirmation' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_TP_CONFIRM_RESPONSE_PTR*' type64='^^{cssm_tp_confirm_response}'/>
<arg declared_type64='sint32*' type64='^i'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CERTGROUP *, uint32, CSSM_LONG_HANDLE, CSSM_CSP_HANDLE, CSSM_RESOURCE_CONTROL_CONTEXT *)' function_pointer='true' name='CertReclaimKey' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_LONG_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_LONG_HANDLE)' function_pointer='true' name='CertReclaimAbort' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_LONG_HANDLE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_TP_AUTHORITY_ID *, CSSM_TP_FORM_TYPE, CSSM_DATA_PTR)' function_pointer='true' name='FormRequest' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_TP_AUTHORITY_ID*' type64='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}'/>
<arg declared_type64='CSSM_TP_FORM_TYPE' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_TP_FORM_TYPE, CSSM_DATA *, CSSM_TP_AUTHORITY_ID *, CSSM_TP_AUTHORITY_ID *, CSSM_ACCESS_CREDENTIALS_PTR)' function_pointer='true' name='FormSubmit' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_TP_FORM_TYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_TP_AUTHORITY_ID*' type64='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}'/>
<arg const='true' declared_type64='CSSM_TP_AUTHORITY_ID*' type64='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}'/>
<arg declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR)' function_pointer='true' name='CertGroupVerify' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' function_pointer='true' name='CertCreateTemplate' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' function_pointer='true' name='CertGetAllTemplateFields' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_FIELD_PTR*' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR)' function_pointer='true' name='CertSign' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_ENCODED_CRL *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR)' function_pointer='true' name='CrlVerify' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ENCODED_CRL*' type64='^{cssm_encoded_crl=II{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' function_pointer='true' name='CrlCreateTemplate' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_DATA *, CSSM_CERTGROUP *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_TP_CERTCHANGE_REASON, CSSM_DATA_PTR)' function_pointer='true' name='CertRevoke' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<arg declared_type64='CSSM_TP_CERTCHANGE_REASON' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_DATA *, CSSM_CERTGROUP *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR)' function_pointer='true' name='CertRemoveFromCrlTemplate' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_ENCODED_CRL *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR)' function_pointer='true' name='CrlSign' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_ENCODED_CRL*' type64='^{cssm_encoded_crl=II{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_ENCODED_CRL *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR)' function_pointer='true' name='ApplyCrlToDb' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ENCODED_CRL*' type64='^{cssm_encoded_crl=II{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_DL_DB_LIST *, void *, CSSM_CERTGROUP *, CSSM_CERTGROUP_PTR *)' function_pointer='true' name='CertGroupConstruct' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DL_DB_LIST*' type64='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg declared_type64='CSSM_CERTGROUP_PTR*' type64='^^{cssm_certgroup}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_DL_DB_LIST *, CSSM_CERTGROUP *, CSSM_CERTGROUP_PTR *)' function_pointer='true' name='CertGroupPrune' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DL_DB_LIST*' type64='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg declared_type64='CSSM_CERTGROUP_PTR*' type64='^^{cssm_certgroup}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CERTGROUP *, CSSM_TUPLEGROUP_PTR *)' function_pointer='true' name='CertGroupToTupleGroup' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg declared_type64='CSSM_TUPLEGROUP_PTR*' type64='^^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_TUPLEGROUP *, CSSM_CERTGROUP_PTR *)' function_pointer='true' name='TupleGroupToCertGroup' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_TUPLEGROUP*' type64='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
<arg declared_type64='CSSM_CERTGROUP_PTR*' type64='^^{cssm_certgroup}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DL_DB_LIST *, uint32, void *, void **)' function_pointer='true' name='PassThrough' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DL_DB_LIST*' type64='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='CSSM_STATE_FUNCS' type64='{cssm_state_funcs=&quot;cssm_GetAttachFunctions&quot;^?&quot;cssm_ReleaseAttachFunctions&quot;^?&quot;cssm_GetAppMemoryFunctions&quot;^?&quot;cssm_IsFuncCallValid&quot;^?&quot;cssm_DeregisterManagerServices&quot;^?&quot;cssm_DeliverModuleManagerEvent&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_SERVICE_MASK, void **, CSSM_GUID_PTR, CSSM_BOOL *)' function_pointer='true' name='cssm_GetAttachFunctions' type64='^?'>
<arg declared_type64='CSSM_MODULE_HANDLE' type64='q'/>
<arg declared_type64='CSSM_SERVICE_MASK' type64='I'/>
<arg declared_type64='void**' type64='^^v'/>
<arg declared_type64='CSSM_GUID_PTR' type64='^{cssm_guid=ISS[8C]}'/>
<arg declared_type64='CSSM_BOOL*' type64='^i'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_MODULE_HANDLE)' function_pointer='true' name='cssm_ReleaseAttachFunctions' type64='^?'>
<arg declared_type64='CSSM_MODULE_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_UPCALLS_PTR)' function_pointer='true' name='cssm_GetAppMemoryFunctions' type64='^?'>
<arg declared_type64='CSSM_MODULE_HANDLE' type64='q'/>
<arg declared_type64='CSSM_UPCALLS_PTR' type64='^{cssm_upcalls=^?^?^?^?^?^?}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_PROC_ADDR, CSSM_PROC_ADDR, CSSM_PRIVILEGE, CSSM_PRIVILEGE *, CSSM_BITMASK, CSSM_BOOL *)' function_pointer='true' name='cssm_IsFuncCallValid' type64='^?'>
<arg declared_type64='CSSM_MODULE_HANDLE' type64='q'/>
<arg declared_type64='CSSM_PROC_ADDR' function_pointer='true' type64='^?'>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='CSSM_PROC_ADDR' function_pointer='true' type64='^?'>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<arg declared_type64='CSSM_PRIVILEGE*' type64='^Q'/>
<arg declared_type64='CSSM_BITMASK' type64='I'/>
<arg declared_type64='CSSM_BOOL*' type64='^i'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)( CSSM_GUID *)' function_pointer='true' name='cssm_DeregisterManagerServices' type64='^?'>
<arg const='true' declared_type64='CSSM_GUID*' type64='^{cssm_guid=ISS[8C]}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)( CSSM_MANAGER_EVENT_NOTIFICATION *)' function_pointer='true' name='cssm_DeliverModuleManagerEvent' type64='^?'>
<arg const='true' declared_type64='CSSM_MANAGER_EVENT_NOTIFICATION*' type64='^{cssm_manager_event_notification=IIII{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='CSSM_STATE_FUNCS_PTR' type64='{cssm_state_funcs=&quot;cssm_GetAttachFunctions&quot;^?&quot;cssm_ReleaseAttachFunctions&quot;^?&quot;cssm_GetAppMemoryFunctions&quot;^?&quot;cssm_IsFuncCallValid&quot;^?&quot;cssm_DeregisterManagerServices&quot;^?&quot;cssm_DeliverModuleManagerEvent&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_SERVICE_MASK, void **, CSSM_GUID_PTR, CSSM_BOOL *)' function_pointer='true' name='cssm_GetAttachFunctions' type64='^?'>
<arg declared_type64='CSSM_MODULE_HANDLE' type64='q'/>
<arg declared_type64='CSSM_SERVICE_MASK' type64='I'/>
<arg declared_type64='void**' type64='^^v'/>
<arg declared_type64='CSSM_GUID_PTR' type64='^{cssm_guid=ISS[8C]}'/>
<arg declared_type64='CSSM_BOOL*' type64='^i'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_MODULE_HANDLE)' function_pointer='true' name='cssm_ReleaseAttachFunctions' type64='^?'>
<arg declared_type64='CSSM_MODULE_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_UPCALLS_PTR)' function_pointer='true' name='cssm_GetAppMemoryFunctions' type64='^?'>
<arg declared_type64='CSSM_MODULE_HANDLE' type64='q'/>
<arg declared_type64='CSSM_UPCALLS_PTR' type64='^{cssm_upcalls=^?^?^?^?^?^?}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_PROC_ADDR, CSSM_PROC_ADDR, CSSM_PRIVILEGE, CSSM_PRIVILEGE *, CSSM_BITMASK, CSSM_BOOL *)' function_pointer='true' name='cssm_IsFuncCallValid' type64='^?'>
<arg declared_type64='CSSM_MODULE_HANDLE' type64='q'/>
<arg declared_type64='CSSM_PROC_ADDR' function_pointer='true' type64='^?'>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='CSSM_PROC_ADDR' function_pointer='true' type64='^?'>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<arg declared_type64='CSSM_PRIVILEGE*' type64='^Q'/>
<arg declared_type64='CSSM_BITMASK' type64='I'/>
<arg declared_type64='CSSM_BOOL*' type64='^i'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)( CSSM_GUID *)' function_pointer='true' name='cssm_DeregisterManagerServices' type64='^?'>
<arg const='true' declared_type64='CSSM_GUID*' type64='^{cssm_guid=ISS[8C]}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)( CSSM_MANAGER_EVENT_NOTIFICATION *)' function_pointer='true' name='cssm_DeliverModuleManagerEvent' type64='^?'>
<arg const='true' declared_type64='CSSM_MANAGER_EVENT_NOTIFICATION*' type64='^{cssm_manager_event_notification=IIII{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='CSSM_SUBSERVICE_UID' type64='{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}'>
<field declared_type64='CSSM_GUID' name='Guid' type64='{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}'/>
<field declared_type64='CSSM_VERSION' name='Version' type64='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'/>
<field declared_type64='uint32' name='SubserviceId' type64='I'/>
<field declared_type64='CSSM_SERVICE_TYPE' name='SubserviceType' type64='I'/>
</struct>
<struct name='CSSM_SUBSERVICE_UID_PTR' type64='{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}'>
<field declared_type64='CSSM_GUID' name='Guid' type64='{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}'/>
<field declared_type64='CSSM_VERSION' name='Version' type64='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'/>
<field declared_type64='uint32' name='SubserviceId' type64='I'/>
<field declared_type64='CSSM_SERVICE_TYPE' name='SubserviceType' type64='I'/>
</struct>
<struct name='CSSM_TP_APPLE_EVIDENCE_HEADER' type64='{_CSSM_TP_APPLE_EVIDENCE_HEADER=&quot;Version&quot;I}'>
<field declared_type64='uint32' name='Version' type64='I'/>
</struct>
<struct name='CSSM_TP_APPLE_EVIDENCE_INFO' type64='{_CSSM_TP_APPLE_EVIDENCE_INFO=&quot;StatusBits&quot;I&quot;NumStatusCodes&quot;I&quot;StatusCodes&quot;^i&quot;Index&quot;I&quot;DlDbHandle&quot;{cssm_dl_db_handle=&quot;DLHandle&quot;q&quot;DBHandle&quot;q}&quot;UniqueRecord&quot;^{cssm_db_unique_record}}'>
<field declared_type64='CSSM_TP_APPLE_CERT_STATUS' name='StatusBits' type64='I'/>
<field declared_type64='uint32' name='NumStatusCodes' type64='I'/>
<field declared_type64='CSSM_RETURN*' name='StatusCodes' type64='^i'/>
<field declared_type64='uint32' name='Index' type64='I'/>
<field declared_type64='CSSM_DL_DB_HANDLE' name='DlDbHandle' type64='{cssm_dl_db_handle=&quot;DLHandle&quot;q&quot;DBHandle&quot;q}'/>
<field declared_type64='CSSM_DB_UNIQUE_RECORD_PTR' name='UniqueRecord' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
</struct>
<struct name='CSSM_TP_AUTHORITY_ID' type64='{cssm_tp_authority_id=&quot;AuthorityCert&quot;^{cssm_data}&quot;AuthorityLocation&quot;^{cssm_net_address}}'>
<field declared_type64='CSSM_DATA*' name='AuthorityCert' type64='^{cssm_data=Q*}'/>
<field declared_type64='CSSM_NET_ADDRESS_PTR' name='AuthorityLocation' type64='^{cssm_net_address=I{cssm_data=Q*}}'/>
</struct>
<struct name='CSSM_TP_AUTHORITY_ID_PTR' type64='{cssm_tp_authority_id=&quot;AuthorityCert&quot;^{cssm_data}&quot;AuthorityLocation&quot;^{cssm_net_address}}'>
<field declared_type64='CSSM_DATA*' name='AuthorityCert' type64='^{cssm_data=Q*}'/>
<field declared_type64='CSSM_NET_ADDRESS_PTR' name='AuthorityLocation' type64='^{cssm_net_address=I{cssm_data=Q*}}'/>
</struct>
<struct name='CSSM_TP_CALLERAUTH_CONTEXT' type64='{cssm_tp_callerauth_context=&quot;Policy&quot;{cssm_tp_policyinfo=&quot;NumberOfPolicyIds&quot;I&quot;PolicyIds&quot;^{cssm_field}&quot;PolicyControl&quot;^v}&quot;VerifyTime&quot;*&quot;VerificationAbortOn&quot;I&quot;CallbackWithVerifiedCert&quot;^?&quot;NumberOfAnchorCerts&quot;I&quot;AnchorCerts&quot;^{cssm_data}&quot;DBList&quot;^{cssm_dl_db_list}&quot;CallerCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_TP_POLICYINFO' name='Policy' type64='{cssm_tp_policyinfo=&quot;NumberOfPolicyIds&quot;I&quot;PolicyIds&quot;^{cssm_field}&quot;PolicyControl&quot;^v}'/>
<field declared_type64='CSSM_TIMESTRING' name='VerifyTime' type64='*'/>
<field declared_type64='CSSM_TP_STOP_ON' name='VerificationAbortOn' type64='I'/>
<field declared_type64='CSSM_TP_VERIFICATION_RESULTS_CALLBACK' function_pointer='true' name='CallbackWithVerifiedCert' type64='^?'>
<arg declared_type64='CSSM_MODULE_HANDLE' type64='q'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='uint32' name='NumberOfAnchorCerts' type64='I'/>
<field declared_type64='CSSM_DATA_PTR' name='AnchorCerts' type64='^{cssm_data=Q*}'/>
<field declared_type64='CSSM_DL_DB_LIST_PTR' name='DBList' type64='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='CallerCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='CSSM_TP_CALLERAUTH_CONTEXT_PTR' type64='{cssm_tp_callerauth_context=&quot;Policy&quot;{cssm_tp_policyinfo=&quot;NumberOfPolicyIds&quot;I&quot;PolicyIds&quot;^{cssm_field}&quot;PolicyControl&quot;^v}&quot;VerifyTime&quot;*&quot;VerificationAbortOn&quot;I&quot;CallbackWithVerifiedCert&quot;^?&quot;NumberOfAnchorCerts&quot;I&quot;AnchorCerts&quot;^{cssm_data}&quot;DBList&quot;^{cssm_dl_db_list}&quot;CallerCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_TP_POLICYINFO' name='Policy' type64='{cssm_tp_policyinfo=&quot;NumberOfPolicyIds&quot;I&quot;PolicyIds&quot;^{cssm_field}&quot;PolicyControl&quot;^v}'/>
<field declared_type64='CSSM_TIMESTRING' name='VerifyTime' type64='*'/>
<field declared_type64='CSSM_TP_STOP_ON' name='VerificationAbortOn' type64='I'/>
<field declared_type64='CSSM_TP_VERIFICATION_RESULTS_CALLBACK' function_pointer='true' name='CallbackWithVerifiedCert' type64='^?'>
<arg declared_type64='CSSM_MODULE_HANDLE' type64='q'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='uint32' name='NumberOfAnchorCerts' type64='I'/>
<field declared_type64='CSSM_DATA_PTR' name='AnchorCerts' type64='^{cssm_data=Q*}'/>
<field declared_type64='CSSM_DL_DB_LIST_PTR' name='DBList' type64='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='CallerCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='CSSM_TP_CERTCHANGE_INPUT' type64='{cssm_tp_certchange_input=&quot;Action&quot;I&quot;Reason&quot;I&quot;CLHandle&quot;q&quot;Cert&quot;^{cssm_data}&quot;ChangeInfo&quot;^{cssm_field}&quot;StartTime&quot;*&quot;CallerCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_TP_CERTCHANGE_ACTION' name='Action' type64='I'/>
<field declared_type64='CSSM_TP_CERTCHANGE_REASON' name='Reason' type64='I'/>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='CSSM_DATA_PTR' name='Cert' type64='^{cssm_data=Q*}'/>
<field declared_type64='CSSM_FIELD_PTR' name='ChangeInfo' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_TIMESTRING' name='StartTime' type64='*'/>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='CallerCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='CSSM_TP_CERTCHANGE_INPUT_PTR' type64='{cssm_tp_certchange_input=&quot;Action&quot;I&quot;Reason&quot;I&quot;CLHandle&quot;q&quot;Cert&quot;^{cssm_data}&quot;ChangeInfo&quot;^{cssm_field}&quot;StartTime&quot;*&quot;CallerCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_TP_CERTCHANGE_ACTION' name='Action' type64='I'/>
<field declared_type64='CSSM_TP_CERTCHANGE_REASON' name='Reason' type64='I'/>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='CSSM_DATA_PTR' name='Cert' type64='^{cssm_data=Q*}'/>
<field declared_type64='CSSM_FIELD_PTR' name='ChangeInfo' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_TIMESTRING' name='StartTime' type64='*'/>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='CallerCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='CSSM_TP_CERTCHANGE_OUTPUT' type64='{cssm_tp_certchange_output=&quot;ActionStatus&quot;I&quot;RevokeInfo&quot;{cssm_field=&quot;FieldOid&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;FieldValue&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}'>
<field declared_type64='CSSM_TP_CERTCHANGE_STATUS' name='ActionStatus' type64='I'/>
<field declared_type64='CSSM_FIELD' name='RevokeInfo' type64='{cssm_field=&quot;FieldOid&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;FieldValue&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
</struct>
<struct name='CSSM_TP_CERTCHANGE_OUTPUT_PTR' type64='{cssm_tp_certchange_output=&quot;ActionStatus&quot;I&quot;RevokeInfo&quot;{cssm_field=&quot;FieldOid&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;FieldValue&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}'>
<field declared_type64='CSSM_TP_CERTCHANGE_STATUS' name='ActionStatus' type64='I'/>
<field declared_type64='CSSM_FIELD' name='RevokeInfo' type64='{cssm_field=&quot;FieldOid&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;FieldValue&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
</struct>
<struct name='CSSM_TP_CERTISSUE_INPUT' type64='{cssm_tp_certissue_input=&quot;CSPSubserviceUid&quot;{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}&quot;CLHandle&quot;q&quot;NumberOfTemplateFields&quot;I&quot;SubjectCertFields&quot;^{cssm_field}&quot;MoreServiceRequests&quot;I&quot;NumberOfServiceControls&quot;I&quot;ServiceControls&quot;^{cssm_field}&quot;UserCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_SUBSERVICE_UID' name='CSPSubserviceUid' type64='{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}'/>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='uint32' name='NumberOfTemplateFields' type64='I'/>
<field declared_type64='CSSM_FIELD_PTR' name='SubjectCertFields' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_TP_SERVICES' name='MoreServiceRequests' type64='I'/>
<field declared_type64='uint32' name='NumberOfServiceControls' type64='I'/>
<field declared_type64='CSSM_FIELD_PTR' name='ServiceControls' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='UserCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='CSSM_TP_CERTISSUE_INPUT_PTR' type64='{cssm_tp_certissue_input=&quot;CSPSubserviceUid&quot;{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}&quot;CLHandle&quot;q&quot;NumberOfTemplateFields&quot;I&quot;SubjectCertFields&quot;^{cssm_field}&quot;MoreServiceRequests&quot;I&quot;NumberOfServiceControls&quot;I&quot;ServiceControls&quot;^{cssm_field}&quot;UserCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_SUBSERVICE_UID' name='CSPSubserviceUid' type64='{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}'/>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='uint32' name='NumberOfTemplateFields' type64='I'/>
<field declared_type64='CSSM_FIELD_PTR' name='SubjectCertFields' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_TP_SERVICES' name='MoreServiceRequests' type64='I'/>
<field declared_type64='uint32' name='NumberOfServiceControls' type64='I'/>
<field declared_type64='CSSM_FIELD_PTR' name='ServiceControls' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='UserCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='CSSM_TP_CERTISSUE_OUTPUT' type64='{cssm_tp_certissue_output=&quot;IssueStatus&quot;I&quot;CertGroup&quot;^{cssm_certgroup}&quot;PerformedServiceRequests&quot;I}'>
<field declared_type64='CSSM_TP_CERTISSUE_STATUS' name='IssueStatus' type64='I'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='CertGroup' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='CSSM_TP_SERVICES' name='PerformedServiceRequests' type64='I'/>
</struct>
<struct name='CSSM_TP_CERTISSUE_OUTPUT_PTR' type64='{cssm_tp_certissue_output=&quot;IssueStatus&quot;I&quot;CertGroup&quot;^{cssm_certgroup}&quot;PerformedServiceRequests&quot;I}'>
<field declared_type64='CSSM_TP_CERTISSUE_STATUS' name='IssueStatus' type64='I'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='CertGroup' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='CSSM_TP_SERVICES' name='PerformedServiceRequests' type64='I'/>
</struct>
<struct name='CSSM_TP_CERTNOTARIZE_INPUT' type64='{cssm_tp_certnotarize_input=&quot;CLHandle&quot;q&quot;NumberOfFields&quot;I&quot;MoreFields&quot;^{cssm_field}&quot;SignScope&quot;^{cssm_field}&quot;ScopeSize&quot;I&quot;MoreServiceRequests&quot;I&quot;NumberOfServiceControls&quot;I&quot;ServiceControls&quot;^{cssm_field}&quot;UserCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='uint32' name='NumberOfFields' type64='I'/>
<field declared_type64='CSSM_FIELD_PTR' name='MoreFields' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_FIELD_PTR' name='SignScope' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='uint32' name='ScopeSize' type64='I'/>
<field declared_type64='CSSM_TP_SERVICES' name='MoreServiceRequests' type64='I'/>
<field declared_type64='uint32' name='NumberOfServiceControls' type64='I'/>
<field declared_type64='CSSM_FIELD_PTR' name='ServiceControls' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='UserCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='CSSM_TP_CERTNOTARIZE_INPUT_PTR' type64='{cssm_tp_certnotarize_input=&quot;CLHandle&quot;q&quot;NumberOfFields&quot;I&quot;MoreFields&quot;^{cssm_field}&quot;SignScope&quot;^{cssm_field}&quot;ScopeSize&quot;I&quot;MoreServiceRequests&quot;I&quot;NumberOfServiceControls&quot;I&quot;ServiceControls&quot;^{cssm_field}&quot;UserCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='uint32' name='NumberOfFields' type64='I'/>
<field declared_type64='CSSM_FIELD_PTR' name='MoreFields' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_FIELD_PTR' name='SignScope' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='uint32' name='ScopeSize' type64='I'/>
<field declared_type64='CSSM_TP_SERVICES' name='MoreServiceRequests' type64='I'/>
<field declared_type64='uint32' name='NumberOfServiceControls' type64='I'/>
<field declared_type64='CSSM_FIELD_PTR' name='ServiceControls' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='UserCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='CSSM_TP_CERTNOTARIZE_OUTPUT' type64='{cssm_tp_certnotarize_output=&quot;NotarizeStatus&quot;I&quot;NotarizedCertGroup&quot;^{cssm_certgroup}&quot;PerformedServiceRequests&quot;I}'>
<field declared_type64='CSSM_TP_CERTNOTARIZE_STATUS' name='NotarizeStatus' type64='I'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='NotarizedCertGroup' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='CSSM_TP_SERVICES' name='PerformedServiceRequests' type64='I'/>
</struct>
<struct name='CSSM_TP_CERTNOTARIZE_OUTPUT_PTR' type64='{cssm_tp_certnotarize_output=&quot;NotarizeStatus&quot;I&quot;NotarizedCertGroup&quot;^{cssm_certgroup}&quot;PerformedServiceRequests&quot;I}'>
<field declared_type64='CSSM_TP_CERTNOTARIZE_STATUS' name='NotarizeStatus' type64='I'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='NotarizedCertGroup' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='CSSM_TP_SERVICES' name='PerformedServiceRequests' type64='I'/>
</struct>
<struct name='CSSM_TP_CERTRECLAIM_INPUT' type64='{cssm_tp_certreclaim_input=&quot;CLHandle&quot;q&quot;NumberOfSelectionFields&quot;I&quot;SelectionFields&quot;^{cssm_field}&quot;UserCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='uint32' name='NumberOfSelectionFields' type64='I'/>
<field declared_type64='CSSM_FIELD_PTR' name='SelectionFields' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='UserCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='CSSM_TP_CERTRECLAIM_INPUT_PTR' type64='{cssm_tp_certreclaim_input=&quot;CLHandle&quot;q&quot;NumberOfSelectionFields&quot;I&quot;SelectionFields&quot;^{cssm_field}&quot;UserCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='uint32' name='NumberOfSelectionFields' type64='I'/>
<field declared_type64='CSSM_FIELD_PTR' name='SelectionFields' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='UserCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='CSSM_TP_CERTRECLAIM_OUTPUT' type64='{cssm_tp_certreclaim_output=&quot;ReclaimStatus&quot;I&quot;ReclaimedCertGroup&quot;^{cssm_certgroup}&quot;KeyCacheHandle&quot;Q}'>
<field declared_type64='CSSM_TP_CERTRECLAIM_STATUS' name='ReclaimStatus' type64='I'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='ReclaimedCertGroup' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='CSSM_LONG_HANDLE' name='KeyCacheHandle' type64='Q'/>
</struct>
<struct name='CSSM_TP_CERTRECLAIM_OUTPUT_PTR' type64='{cssm_tp_certreclaim_output=&quot;ReclaimStatus&quot;I&quot;ReclaimedCertGroup&quot;^{cssm_certgroup}&quot;KeyCacheHandle&quot;Q}'>
<field declared_type64='CSSM_TP_CERTRECLAIM_STATUS' name='ReclaimStatus' type64='I'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='ReclaimedCertGroup' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='CSSM_LONG_HANDLE' name='KeyCacheHandle' type64='Q'/>
</struct>
<struct name='CSSM_TP_CERTVERIFY_INPUT' type64='{cssm_tp_certverify_input=&quot;CLHandle&quot;q&quot;Cert&quot;^{cssm_data}&quot;VerifyContext&quot;^{cssm_tp_verify_context}}'>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='CSSM_DATA_PTR' name='Cert' type64='^{cssm_data=Q*}'/>
<field declared_type64='CSSM_TP_VERIFY_CONTEXT_PTR' name='VerifyContext' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
</struct>
<struct name='CSSM_TP_CERTVERIFY_INPUT_PTR' type64='{cssm_tp_certverify_input=&quot;CLHandle&quot;q&quot;Cert&quot;^{cssm_data}&quot;VerifyContext&quot;^{cssm_tp_verify_context}}'>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='CSSM_DATA_PTR' name='Cert' type64='^{cssm_data=Q*}'/>
<field declared_type64='CSSM_TP_VERIFY_CONTEXT_PTR' name='VerifyContext' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
</struct>
<struct name='CSSM_TP_CERTVERIFY_OUTPUT' type64='{cssm_tp_certverify_output=&quot;VerifyStatus&quot;I&quot;NumberOfEvidence&quot;I&quot;Evidence&quot;^{cssm_evidence}}'>
<field declared_type64='CSSM_TP_CERTVERIFY_STATUS' name='VerifyStatus' type64='I'/>
<field declared_type64='uint32' name='NumberOfEvidence' type64='I'/>
<field declared_type64='CSSM_EVIDENCE_PTR' name='Evidence' type64='^{cssm_evidence=I^v}'/>
</struct>
<struct name='CSSM_TP_CERTVERIFY_OUTPUT_PTR' type64='{cssm_tp_certverify_output=&quot;VerifyStatus&quot;I&quot;NumberOfEvidence&quot;I&quot;Evidence&quot;^{cssm_evidence}}'>
<field declared_type64='CSSM_TP_CERTVERIFY_STATUS' name='VerifyStatus' type64='I'/>
<field declared_type64='uint32' name='NumberOfEvidence' type64='I'/>
<field declared_type64='CSSM_EVIDENCE_PTR' name='Evidence' type64='^{cssm_evidence=I^v}'/>
</struct>
<struct name='CSSM_TP_CONFIRM_RESPONSE' type64='{cssm_tp_confirm_response=&quot;NumberOfResponses&quot;I&quot;Responses&quot;^I}'>
<field declared_type64='uint32' name='NumberOfResponses' type64='I'/>
<field declared_type64='CSSM_TP_CONFIRM_STATUS_PTR' name='Responses' type64='^I'/>
</struct>
<struct name='CSSM_TP_CONFIRM_RESPONSE_PTR' type64='{cssm_tp_confirm_response=&quot;NumberOfResponses&quot;I&quot;Responses&quot;^I}'>
<field declared_type64='uint32' name='NumberOfResponses' type64='I'/>
<field declared_type64='CSSM_TP_CONFIRM_STATUS_PTR' name='Responses' type64='^I'/>
</struct>
<struct name='CSSM_TP_CRLISSUE_INPUT' type64='{cssm_tp_crlissue_input=&quot;CLHandle&quot;q&quot;CrlIdentifier&quot;I&quot;CrlThisTime&quot;*&quot;PolicyIdentifier&quot;^{cssm_field}&quot;CallerCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='uint32' name='CrlIdentifier' type64='I'/>
<field declared_type64='CSSM_TIMESTRING' name='CrlThisTime' type64='*'/>
<field declared_type64='CSSM_FIELD_PTR' name='PolicyIdentifier' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='CallerCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='CSSM_TP_CRLISSUE_INPUT_PTR' type64='{cssm_tp_crlissue_input=&quot;CLHandle&quot;q&quot;CrlIdentifier&quot;I&quot;CrlThisTime&quot;*&quot;PolicyIdentifier&quot;^{cssm_field}&quot;CallerCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='uint32' name='CrlIdentifier' type64='I'/>
<field declared_type64='CSSM_TIMESTRING' name='CrlThisTime' type64='*'/>
<field declared_type64='CSSM_FIELD_PTR' name='PolicyIdentifier' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='CallerCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='CSSM_TP_CRLISSUE_OUTPUT' type64='{cssm_tp_crlissue_output=&quot;IssueStatus&quot;I&quot;Crl&quot;^{cssm_encoded_crl}&quot;CrlNextTime&quot;*}'>
<field declared_type64='CSSM_TP_CRLISSUE_STATUS' name='IssueStatus' type64='I'/>
<field declared_type64='CSSM_ENCODED_CRL_PTR' name='Crl' type64='^{cssm_encoded_crl=II{cssm_data=Q*}}'/>
<field declared_type64='CSSM_TIMESTRING' name='CrlNextTime' type64='*'/>
</struct>
<struct name='CSSM_TP_CRLISSUE_OUTPUT_PTR' type64='{cssm_tp_crlissue_output=&quot;IssueStatus&quot;I&quot;Crl&quot;^{cssm_encoded_crl}&quot;CrlNextTime&quot;*}'>
<field declared_type64='CSSM_TP_CRLISSUE_STATUS' name='IssueStatus' type64='I'/>
<field declared_type64='CSSM_ENCODED_CRL_PTR' name='Crl' type64='^{cssm_encoded_crl=II{cssm_data=Q*}}'/>
<field declared_type64='CSSM_TIMESTRING' name='CrlNextTime' type64='*'/>
</struct>
<struct name='CSSM_TP_POLICYINFO' type64='{cssm_tp_policyinfo=&quot;NumberOfPolicyIds&quot;I&quot;PolicyIds&quot;^{cssm_field}&quot;PolicyControl&quot;^v}'>
<field declared_type64='uint32' name='NumberOfPolicyIds' type64='I'/>
<field declared_type64='CSSM_FIELD_PTR' name='PolicyIds' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='void*' name='PolicyControl' type64='^v'/>
</struct>
<struct name='CSSM_TP_POLICYINFO_PTR' type64='{cssm_tp_policyinfo=&quot;NumberOfPolicyIds&quot;I&quot;PolicyIds&quot;^{cssm_field}&quot;PolicyControl&quot;^v}'>
<field declared_type64='uint32' name='NumberOfPolicyIds' type64='I'/>
<field declared_type64='CSSM_FIELD_PTR' name='PolicyIds' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='void*' name='PolicyControl' type64='^v'/>
</struct>
<struct name='CSSM_TP_REQUEST_SET' type64='{cssm_tp_request_set=&quot;NumberOfRequests&quot;I&quot;Requests&quot;^v}'>
<field declared_type64='uint32' name='NumberOfRequests' type64='I'/>
<field declared_type64='void*' name='Requests' type64='^v'/>
</struct>
<struct name='CSSM_TP_REQUEST_SET_PTR' type64='{cssm_tp_request_set=&quot;NumberOfRequests&quot;I&quot;Requests&quot;^v}'>
<field declared_type64='uint32' name='NumberOfRequests' type64='I'/>
<field declared_type64='void*' name='Requests' type64='^v'/>
</struct>
<struct name='CSSM_TP_RESULT_SET' type64='{cssm_tp_result_set=&quot;NumberOfResults&quot;I&quot;Results&quot;^v}'>
<field declared_type64='uint32' name='NumberOfResults' type64='I'/>
<field declared_type64='void*' name='Results' type64='^v'/>
</struct>
<struct name='CSSM_TP_RESULT_SET_PTR' type64='{cssm_tp_result_set=&quot;NumberOfResults&quot;I&quot;Results&quot;^v}'>
<field declared_type64='uint32' name='NumberOfResults' type64='I'/>
<field declared_type64='void*' name='Results' type64='^v'/>
</struct>
<struct name='CSSM_TP_VERIFY_CONTEXT' type64='{cssm_tp_verify_context=&quot;Action&quot;I&quot;ActionData&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;Crls&quot;{cssm_crlgroup=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;NumberOfCrls&quot;I&quot;GroupCrlList&quot;(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})&quot;CrlGroupType&quot;I}&quot;Cred&quot;^{cssm_tp_callerauth_context}}'>
<field declared_type64='CSSM_TP_ACTION' name='Action' type64='I'/>
<field declared_type64='CSSM_DATA' name='ActionData' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_CRLGROUP' name='Crls' type64='{cssm_crlgroup=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;NumberOfCrls&quot;I&quot;GroupCrlList&quot;(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})&quot;CrlGroupType&quot;I}'/>
<field declared_type64='CSSM_TP_CALLERAUTH_CONTEXT_PTR' name='Cred' type64='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}'/>
</struct>
<struct name='CSSM_TP_VERIFY_CONTEXT_PTR' type64='{cssm_tp_verify_context=&quot;Action&quot;I&quot;ActionData&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;Crls&quot;{cssm_crlgroup=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;NumberOfCrls&quot;I&quot;GroupCrlList&quot;(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})&quot;CrlGroupType&quot;I}&quot;Cred&quot;^{cssm_tp_callerauth_context}}'>
<field declared_type64='CSSM_TP_ACTION' name='Action' type64='I'/>
<field declared_type64='CSSM_DATA' name='ActionData' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_CRLGROUP' name='Crls' type64='{cssm_crlgroup=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;NumberOfCrls&quot;I&quot;GroupCrlList&quot;(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})&quot;CrlGroupType&quot;I}'/>
<field declared_type64='CSSM_TP_CALLERAUTH_CONTEXT_PTR' name='Cred' type64='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}'/>
</struct>
<struct name='CSSM_TP_VERIFY_CONTEXT_RESULT' type64='{cssm_tp_verify_context_result=&quot;NumberOfEvidences&quot;I&quot;Evidence&quot;^{cssm_evidence}}'>
<field declared_type64='uint32' name='NumberOfEvidences' type64='I'/>
<field declared_type64='CSSM_EVIDENCE_PTR' name='Evidence' type64='^{cssm_evidence=I^v}'/>
</struct>
<struct name='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='{cssm_tp_verify_context_result=&quot;NumberOfEvidences&quot;I&quot;Evidence&quot;^{cssm_evidence}}'>
<field declared_type64='uint32' name='NumberOfEvidences' type64='I'/>
<field declared_type64='CSSM_EVIDENCE_PTR' name='Evidence' type64='^{cssm_evidence=I^v}'/>
</struct>
<struct name='CSSM_TUPLE' type64='{_CSSM_TUPLE=&quot;Issuer&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Subject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;AuthorizationTag&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;ValidityPeriod&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}}'>
<field declared_type64='CSSM_LIST' name='Issuer' type64='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
<field declared_type64='CSSM_LIST' name='Subject' type64='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
<field declared_type64='CSSM_BOOL' name='Delegate' type64='i'/>
<field declared_type64='CSSM_LIST' name='AuthorizationTag' type64='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
<field declared_type64='CSSM_LIST' name='ValidityPeriod' type64='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
</struct>
<struct name='CSSM_TUPLEGROUP' type64='{cssm_tuplegroup=&quot;NumberOfTuples&quot;I&quot;Tuples&quot;^{_CSSM_TUPLE_PTR=&quot;Issuer&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Subject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;AuthorizationTag&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;ValidityPeriod&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}}}'>
<field declared_type64='uint32' name='NumberOfTuples' type64='I'/>
<field declared_type64='CSSM_TUPLE_PTR' name='Tuples' type64='^{_CSSM_TUPLE_PTR=&quot;Issuer&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Subject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;AuthorizationTag&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;ValidityPeriod&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}}'/>
</struct>
<struct name='CSSM_TUPLEGROUP_PTR' type64='{cssm_tuplegroup=&quot;NumberOfTuples&quot;I&quot;Tuples&quot;^{_CSSM_TUPLE_PTR=&quot;Issuer&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Subject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;AuthorizationTag&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;ValidityPeriod&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}}}'>
<field declared_type64='uint32' name='NumberOfTuples' type64='I'/>
<field declared_type64='CSSM_TUPLE_PTR' name='Tuples' type64='^{_CSSM_TUPLE_PTR=&quot;Issuer&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Subject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;AuthorizationTag&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;ValidityPeriod&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}}'/>
</struct>
<struct name='CSSM_TUPLE_PTR' type64='{_CSSM_TUPLE_PTR=&quot;Issuer&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Subject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;AuthorizationTag&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;ValidityPeriod&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}}'>
<field declared_type64='CSSM_LIST' name='Issuer' type64='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
<field declared_type64='CSSM_LIST' name='Subject' type64='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
<field declared_type64='CSSM_BOOL' name='Delegate' type64='i'/>
<field declared_type64='CSSM_LIST' name='AuthorizationTag' type64='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
<field declared_type64='CSSM_LIST' name='ValidityPeriod' type64='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
</struct>
<struct name='CSSM_UPCALLS' type64='{cssm_upcalls=&quot;malloc_func&quot;^?&quot;free_func&quot;^?&quot;realloc_func&quot;^?&quot;calloc_func&quot;^?&quot;CcToHandle_func&quot;^?&quot;GetModuleInfo_func&quot;^?}'>
<field declared_type64='CSSM_UPCALLS_MALLOC' function_pointer='true' name='malloc_func' type64='^?'>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='size_t' type64='Q'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CSSM_UPCALLS_FREE' function_pointer='true' name='free_func' type64='^?'>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CSSM_UPCALLS_REALLOC' function_pointer='true' name='realloc_func' type64='^?'>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='size_t' type64='Q'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CSSM_UPCALLS_CALLOC' function_pointer='true' name='calloc_func' type64='^?'>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='size_t' type64='Q'/>
<arg declared_type64='size_t' type64='Q'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CC_HANDLE, CSSM_MODULE_HANDLE_PTR)' function_pointer='true' name='CcToHandle_func' type64='^?'>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_MODULE_HANDLE_PTR' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_GUID_PTR, CSSM_VERSION_PTR, uint32 *, CSSM_SERVICE_TYPE *, CSSM_ATTACH_FLAGS *, CSSM_KEY_HIERARCHY *, CSSM_API_MEMORY_FUNCS_PTR, CSSM_FUNC_NAME_ADDR_PTR, uint32)' function_pointer='true' name='GetModuleInfo_func' type64='^?'>
<arg declared_type64='CSSM_MODULE_HANDLE' type64='q'/>
<arg declared_type64='CSSM_GUID_PTR' type64='^{cssm_guid=ISS[8C]}'/>
<arg declared_type64='CSSM_VERSION_PTR' type64='^{cssm_version=II}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_SERVICE_TYPE*' type64='^I'/>
<arg declared_type64='CSSM_ATTACH_FLAGS*' type64='^I'/>
<arg declared_type64='CSSM_KEY_HIERARCHY*' type64='^I'/>
<arg declared_type64='CSSM_API_MEMORY_FUNCS_PTR' type64='^{cssm_memory_funcs=^?^?^?^?^v}'/>
<arg declared_type64='CSSM_FUNC_NAME_ADDR_PTR' type64='^{cssm_func_name_addr=[68c]^?}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='CSSM_UPCALLS_PTR' type64='{cssm_upcalls=&quot;malloc_func&quot;^?&quot;free_func&quot;^?&quot;realloc_func&quot;^?&quot;calloc_func&quot;^?&quot;CcToHandle_func&quot;^?&quot;GetModuleInfo_func&quot;^?}'>
<field declared_type64='CSSM_UPCALLS_MALLOC' function_pointer='true' name='malloc_func' type64='^?'>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='size_t' type64='Q'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CSSM_UPCALLS_FREE' function_pointer='true' name='free_func' type64='^?'>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CSSM_UPCALLS_REALLOC' function_pointer='true' name='realloc_func' type64='^?'>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='size_t' type64='Q'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CSSM_UPCALLS_CALLOC' function_pointer='true' name='calloc_func' type64='^?'>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='size_t' type64='Q'/>
<arg declared_type64='size_t' type64='Q'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CC_HANDLE, CSSM_MODULE_HANDLE_PTR)' function_pointer='true' name='CcToHandle_func' type64='^?'>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_MODULE_HANDLE_PTR' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_GUID_PTR, CSSM_VERSION_PTR, uint32 *, CSSM_SERVICE_TYPE *, CSSM_ATTACH_FLAGS *, CSSM_KEY_HIERARCHY *, CSSM_API_MEMORY_FUNCS_PTR, CSSM_FUNC_NAME_ADDR_PTR, uint32)' function_pointer='true' name='GetModuleInfo_func' type64='^?'>
<arg declared_type64='CSSM_MODULE_HANDLE' type64='q'/>
<arg declared_type64='CSSM_GUID_PTR' type64='^{cssm_guid=ISS[8C]}'/>
<arg declared_type64='CSSM_VERSION_PTR' type64='^{cssm_version=II}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_SERVICE_TYPE*' type64='^I'/>
<arg declared_type64='CSSM_ATTACH_FLAGS*' type64='^I'/>
<arg declared_type64='CSSM_KEY_HIERARCHY*' type64='^I'/>
<arg declared_type64='CSSM_API_MEMORY_FUNCS_PTR' type64='^{cssm_memory_funcs=^?^?^?^?^v}'/>
<arg declared_type64='CSSM_FUNC_NAME_ADDR_PTR' type64='^{cssm_func_name_addr=[68c]^?}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='CSSM_VERSION' type64='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'>
<field declared_type64='uint32' name='Major' type64='I'/>
<field declared_type64='uint32' name='Minor' type64='I'/>
</struct>
<struct name='CSSM_VERSION_PTR' type64='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'>
<field declared_type64='uint32' name='Major' type64='I'/>
<field declared_type64='uint32' name='Minor' type64='I'/>
</struct>
<struct name='CSSM_WRAP_KEY' type64='{cssm_key=&quot;KeyHeader&quot;{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}&quot;KeyData&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_KEYHEADER' name='KeyHeader' type64='{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}'/>
<field declared_type64='CSSM_DATA' name='KeyData' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_X509EXT_BASICCONSTRAINTS' type64='{cssm_x509ext_basicConstraints=&quot;cA&quot;i&quot;pathLenConstraintPresent&quot;i&quot;pathLenConstraint&quot;I}'>
<field declared_type64='CSSM_BOOL' name='cA' type64='i'/>
<field declared_type64='CSSM_X509_OPTION' name='pathLenConstraintPresent' type64='i'/>
<field declared_type64='uint32' name='pathLenConstraint' type64='I'/>
</struct>
<struct name='CSSM_X509EXT_BASICCONSTRAINTS_PTR' type64='{cssm_x509ext_basicConstraints=&quot;cA&quot;i&quot;pathLenConstraintPresent&quot;i&quot;pathLenConstraint&quot;I}'>
<field declared_type64='CSSM_BOOL' name='cA' type64='i'/>
<field declared_type64='CSSM_X509_OPTION' name='pathLenConstraintPresent' type64='i'/>
<field declared_type64='uint32' name='pathLenConstraint' type64='I'/>
</struct>
<struct name='CSSM_X509EXT_PAIR' type64='{cssm_x509ext_pair=&quot;tagAndValue&quot;{cssm_x509_extensionTagAndValue=&quot;type&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;parsedValue&quot;^v}'>
<field declared_type64='CSSM_X509EXT_TAGandVALUE' name='tagAndValue' type64='{cssm_x509_extensionTagAndValue=&quot;type&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='void*' name='parsedValue' type64='^v'/>
</struct>
<struct name='CSSM_X509EXT_PAIR_PTR' type64='{cssm_x509ext_pair=&quot;tagAndValue&quot;{cssm_x509_extensionTagAndValue=&quot;type&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;parsedValue&quot;^v}'>
<field declared_type64='CSSM_X509EXT_TAGandVALUE' name='tagAndValue' type64='{cssm_x509_extensionTagAndValue=&quot;type&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='void*' name='parsedValue' type64='^v'/>
</struct>
<struct name='CSSM_X509EXT_POLICYINFO' type64='{cssm_x509ext_policyInfo=&quot;policyIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;policyQualifiers&quot;{cssm_x509ext_policyQualifiers=&quot;numberOfPolicyQualifiers&quot;I&quot;policyQualifier&quot;^{cssm_x509ext_policyQualifierInfo}}}'>
<field declared_type64='CSSM_OID' name='policyIdentifier' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_X509EXT_POLICYQUALIFIERS' name='policyQualifiers' type64='{cssm_x509ext_policyQualifiers=&quot;numberOfPolicyQualifiers&quot;I&quot;policyQualifier&quot;^{cssm_x509ext_policyQualifierInfo}}'/>
</struct>
<struct name='CSSM_X509EXT_POLICYINFO_PTR' type64='{cssm_x509ext_policyInfo=&quot;policyIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;policyQualifiers&quot;{cssm_x509ext_policyQualifiers=&quot;numberOfPolicyQualifiers&quot;I&quot;policyQualifier&quot;^{cssm_x509ext_policyQualifierInfo}}}'>
<field declared_type64='CSSM_OID' name='policyIdentifier' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_X509EXT_POLICYQUALIFIERS' name='policyQualifiers' type64='{cssm_x509ext_policyQualifiers=&quot;numberOfPolicyQualifiers&quot;I&quot;policyQualifier&quot;^{cssm_x509ext_policyQualifierInfo}}'/>
</struct>
<struct name='CSSM_X509EXT_POLICYQUALIFIERINFO' type64='{cssm_x509ext_policyQualifierInfo=&quot;policyQualifierId&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;value&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_OID' name='policyQualifierId' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='value' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_X509EXT_POLICYQUALIFIERINFO_PTR' type64='{cssm_x509ext_policyQualifierInfo=&quot;policyQualifierId&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;value&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_OID' name='policyQualifierId' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='value' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_X509EXT_POLICYQUALIFIERS' type64='{cssm_x509ext_policyQualifiers=&quot;numberOfPolicyQualifiers&quot;I&quot;policyQualifier&quot;^{cssm_x509ext_policyQualifierInfo}}'>
<field declared_type64='uint32' name='numberOfPolicyQualifiers' type64='I'/>
<field declared_type64='CSSM_X509EXT_POLICYQUALIFIERINFO*' name='policyQualifier' type64='^{cssm_x509ext_policyQualifierInfo={cssm_data=Q*}{cssm_data=Q*}}'/>
</struct>
<struct name='CSSM_X509EXT_POLICYQUALIFIERS_PTR' type64='{cssm_x509ext_policyQualifiers=&quot;numberOfPolicyQualifiers&quot;I&quot;policyQualifier&quot;^{cssm_x509ext_policyQualifierInfo}}'>
<field declared_type64='uint32' name='numberOfPolicyQualifiers' type64='I'/>
<field declared_type64='CSSM_X509EXT_POLICYQUALIFIERINFO*' name='policyQualifier' type64='^{cssm_x509ext_policyQualifierInfo={cssm_data=Q*}{cssm_data=Q*}}'/>
</struct>
<struct name='CSSM_X509EXT_TAGandVALUE' type64='{cssm_x509_extensionTagAndValue=&quot;type&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_BER_TAG' name='type' type64='C'/>
<field declared_type64='CSSM_DATA' name='value' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_X509EXT_TAGandVALUE_PTR' type64='{cssm_x509_extensionTagAndValue=&quot;type&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_BER_TAG' name='type' type64='C'/>
<field declared_type64='CSSM_DATA' name='value' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_X509_ALGORITHM_IDENTIFIER' type64='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_OID' name='algorithm' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='parameters' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_X509_ALGORITHM_IDENTIFIER_PTR' type64='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_OID' name='algorithm' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='parameters' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_X509_EXTENSION' type64='{cssm_x509_extension=&quot;extnId&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;critical&quot;i&quot;format&quot;i&quot;value&quot;(cssm_x509ext_value=&quot;tagAndValue&quot;^{cssm_x509_extensionTagAndValue}&quot;parsedValue&quot;^v&quot;valuePair&quot;^{cssm_x509ext_pair})&quot;BERvalue&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_OID' name='extnId' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_BOOL' name='critical' type64='i'/>
<field declared_type64='CSSM_X509EXT_DATA_FORMAT' name='format' type64='i'/>
<field declared_type64='union cssm_x509ext_value' name='value' type64='(cssm_x509ext_value=&quot;tagAndValue&quot;^{cssm_x509_extensionTagAndValue}&quot;parsedValue&quot;^v&quot;valuePair&quot;^{cssm_x509ext_pair})'/>
<field declared_type64='CSSM_DATA' name='BERvalue' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_X509_EXTENSIONS' type64='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'>
<field declared_type64='uint32' name='numberOfExtensions' type64='I'/>
<field declared_type64='CSSM_X509_EXTENSION_PTR' name='extensions' type64='^{cssm_x509_extension={cssm_data=Q*}ii(cssm_x509ext_value=^{cssm_x509_extensionTagAndValue}^v^{cssm_x509ext_pair}){cssm_data=Q*}}'/>
</struct>
<struct name='CSSM_X509_EXTENSIONS_PTR' type64='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'>
<field declared_type64='uint32' name='numberOfExtensions' type64='I'/>
<field declared_type64='CSSM_X509_EXTENSION_PTR' name='extensions' type64='^{cssm_x509_extension={cssm_data=Q*}ii(cssm_x509ext_value=^{cssm_x509_extensionTagAndValue}^v^{cssm_x509ext_pair}){cssm_data=Q*}}'/>
</struct>
<struct name='CSSM_X509_EXTENSION_PTR' type64='{cssm_x509_extension=&quot;extnId&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;critical&quot;i&quot;format&quot;i&quot;value&quot;(cssm_x509ext_value=&quot;tagAndValue&quot;^{cssm_x509_extensionTagAndValue}&quot;parsedValue&quot;^v&quot;valuePair&quot;^{cssm_x509ext_pair})&quot;BERvalue&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_OID' name='extnId' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_BOOL' name='critical' type64='i'/>
<field declared_type64='CSSM_X509EXT_DATA_FORMAT' name='format' type64='i'/>
<field declared_type64='union cssm_x509ext_value' name='value' type64='(cssm_x509ext_value=&quot;tagAndValue&quot;^{cssm_x509_extensionTagAndValue}&quot;parsedValue&quot;^v&quot;valuePair&quot;^{cssm_x509ext_pair})'/>
<field declared_type64='CSSM_DATA' name='BERvalue' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_X509_NAME' type64='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'>
<field declared_type64='uint32' name='numberOfRDNs' type64='I'/>
<field declared_type64='CSSM_X509_RDN_PTR' name='RelativeDistinguishedName' type64='^{cssm_x509_rdn=I^{cssm_x509_type_value_pair}}'/>
</struct>
<struct name='CSSM_X509_NAME_PTR' type64='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'>
<field declared_type64='uint32' name='numberOfRDNs' type64='I'/>
<field declared_type64='CSSM_X509_RDN_PTR' name='RelativeDistinguishedName' type64='^{cssm_x509_rdn=I^{cssm_x509_type_value_pair}}'/>
</struct>
<struct name='CSSM_X509_RDN' type64='{cssm_x509_rdn=&quot;numberOfPairs&quot;I&quot;AttributeTypeAndValue&quot;^{cssm_x509_type_value_pair}}'>
<field declared_type64='uint32' name='numberOfPairs' type64='I'/>
<field declared_type64='CSSM_X509_TYPE_VALUE_PAIR_PTR' name='AttributeTypeAndValue' type64='^{cssm_x509_type_value_pair={cssm_data=Q*}C{cssm_data=Q*}}'/>
</struct>
<struct name='CSSM_X509_RDN_PTR' type64='{cssm_x509_rdn=&quot;numberOfPairs&quot;I&quot;AttributeTypeAndValue&quot;^{cssm_x509_type_value_pair}}'>
<field declared_type64='uint32' name='numberOfPairs' type64='I'/>
<field declared_type64='CSSM_X509_TYPE_VALUE_PAIR_PTR' name='AttributeTypeAndValue' type64='^{cssm_x509_type_value_pair={cssm_data=Q*}C{cssm_data=Q*}}'/>
</struct>
<struct name='CSSM_X509_REVOKED_CERT_ENTRY' type64='{cssm_x509_revoked_cert_entry=&quot;certificateSerialNumber&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;revocationDate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'>
<field declared_type64='CSSM_DATA' name='certificateSerialNumber' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_X509_TIME' name='revocationDate' type64='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_X509_EXTENSIONS' name='extensions' type64='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'/>
</struct>
<struct name='CSSM_X509_REVOKED_CERT_ENTRY_PTR' type64='{cssm_x509_revoked_cert_entry=&quot;certificateSerialNumber&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;revocationDate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'>
<field declared_type64='CSSM_DATA' name='certificateSerialNumber' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_X509_TIME' name='revocationDate' type64='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_X509_EXTENSIONS' name='extensions' type64='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'/>
</struct>
<struct name='CSSM_X509_REVOKED_CERT_LIST' type64='{cssm_x509_revoked_cert_list=&quot;numberOfRevokedCertEntries&quot;I&quot;revokedCertEntry&quot;^{cssm_x509_revoked_cert_entry}}'>
<field declared_type64='uint32' name='numberOfRevokedCertEntries' type64='I'/>
<field declared_type64='CSSM_X509_REVOKED_CERT_ENTRY_PTR' name='revokedCertEntry' type64='^{cssm_x509_revoked_cert_entry={cssm_data=Q*}{cssm_x509_time=C{cssm_data=Q*}}{cssm_x509_extensions=I^{cssm_x509_extension}}}'/>
</struct>
<struct name='CSSM_X509_REVOKED_CERT_LIST_PTR' type64='{cssm_x509_revoked_cert_list=&quot;numberOfRevokedCertEntries&quot;I&quot;revokedCertEntry&quot;^{cssm_x509_revoked_cert_entry}}'>
<field declared_type64='uint32' name='numberOfRevokedCertEntries' type64='I'/>
<field declared_type64='CSSM_X509_REVOKED_CERT_ENTRY_PTR' name='revokedCertEntry' type64='^{cssm_x509_revoked_cert_entry={cssm_data=Q*}{cssm_x509_time=C{cssm_data=Q*}}{cssm_x509_extensions=I^{cssm_x509_extension}}}'/>
</struct>
<struct name='CSSM_X509_SIGNATURE' type64='{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_X509_ALGORITHM_IDENTIFIER' name='algorithmIdentifier' type64='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_DATA' name='encrypted' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_X509_SIGNATURE_PTR' type64='{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_X509_ALGORITHM_IDENTIFIER' name='algorithmIdentifier' type64='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_DATA' name='encrypted' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_X509_SIGNED_CERTIFICATE' type64='{cssm_x509_signed_certificate=&quot;certificate&quot;{cssm_x509_tbs_certificate=&quot;version&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;validity&quot;{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}&quot;subject&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;subjectPublicKeyInfo&quot;{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuerUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;subjectUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}&quot;signature&quot;{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}'>
<field declared_type64='CSSM_X509_TBS_CERTIFICATE' name='certificate' type64='{cssm_x509_tbs_certificate=&quot;version&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;validity&quot;{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}&quot;subject&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;subjectPublicKeyInfo&quot;{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuerUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;subjectUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'/>
<field declared_type64='CSSM_X509_SIGNATURE' name='signature' type64='{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
</struct>
<struct name='CSSM_X509_SIGNED_CERTIFICATE_PTR' type64='{cssm_x509_signed_certificate=&quot;certificate&quot;{cssm_x509_tbs_certificate=&quot;version&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;validity&quot;{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}&quot;subject&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;subjectPublicKeyInfo&quot;{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuerUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;subjectUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}&quot;signature&quot;{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}'>
<field declared_type64='CSSM_X509_TBS_CERTIFICATE' name='certificate' type64='{cssm_x509_tbs_certificate=&quot;version&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;validity&quot;{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}&quot;subject&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;subjectPublicKeyInfo&quot;{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuerUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;subjectUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'/>
<field declared_type64='CSSM_X509_SIGNATURE' name='signature' type64='{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
</struct>
<struct name='CSSM_X509_SIGNED_CRL' type64='{cssm_x509_signed_crl=&quot;tbsCertList&quot;{cssm_x509_tbs_certlist=&quot;version&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;thisUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;nextUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;revokedCertificates&quot;^{cssm_x509_revoked_cert_list}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}&quot;signature&quot;{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}'>
<field declared_type64='CSSM_X509_TBS_CERTLIST' name='tbsCertList' type64='{cssm_x509_tbs_certlist=&quot;version&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;thisUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;nextUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;revokedCertificates&quot;^{cssm_x509_revoked_cert_list}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'/>
<field declared_type64='CSSM_X509_SIGNATURE' name='signature' type64='{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
</struct>
<struct name='CSSM_X509_SIGNED_CRL_PTR' type64='{cssm_x509_signed_crl=&quot;tbsCertList&quot;{cssm_x509_tbs_certlist=&quot;version&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;thisUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;nextUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;revokedCertificates&quot;^{cssm_x509_revoked_cert_list}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}&quot;signature&quot;{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}'>
<field declared_type64='CSSM_X509_TBS_CERTLIST' name='tbsCertList' type64='{cssm_x509_tbs_certlist=&quot;version&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;thisUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;nextUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;revokedCertificates&quot;^{cssm_x509_revoked_cert_list}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'/>
<field declared_type64='CSSM_X509_SIGNATURE' name='signature' type64='{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
</struct>
<struct name='CSSM_X509_SUBJECT_PUBLIC_KEY_INFO' type64='{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_X509_ALGORITHM_IDENTIFIER' name='algorithm' type64='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_DATA' name='subjectPublicKey' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_X509_SUBJECT_PUBLIC_KEY_INFO_PTR' type64='{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_X509_ALGORITHM_IDENTIFIER' name='algorithm' type64='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_DATA' name='subjectPublicKey' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_X509_TBS_CERTIFICATE' type64='{cssm_x509_tbs_certificate=&quot;version&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;validity&quot;{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}&quot;subject&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;subjectPublicKeyInfo&quot;{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuerUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;subjectUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'>
<field declared_type64='CSSM_DATA' name='version' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='serialNumber' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_X509_ALGORITHM_IDENTIFIER' name='signature' type64='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_X509_NAME' name='issuer' type64='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'/>
<field declared_type64='CSSM_X509_VALIDITY' name='validity' type64='{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}'/>
<field declared_type64='CSSM_X509_NAME' name='subject' type64='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'/>
<field declared_type64='CSSM_X509_SUBJECT_PUBLIC_KEY_INFO' name='subjectPublicKeyInfo' type64='{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_DATA' name='issuerUniqueIdentifier' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='subjectUniqueIdentifier' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_X509_EXTENSIONS' name='extensions' type64='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'/>
</struct>
<struct name='CSSM_X509_TBS_CERTIFICATE_PTR' type64='{cssm_x509_tbs_certificate=&quot;version&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;validity&quot;{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}&quot;subject&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;subjectPublicKeyInfo&quot;{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuerUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;subjectUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'>
<field declared_type64='CSSM_DATA' name='version' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='serialNumber' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_X509_ALGORITHM_IDENTIFIER' name='signature' type64='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_X509_NAME' name='issuer' type64='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'/>
<field declared_type64='CSSM_X509_VALIDITY' name='validity' type64='{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}'/>
<field declared_type64='CSSM_X509_NAME' name='subject' type64='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'/>
<field declared_type64='CSSM_X509_SUBJECT_PUBLIC_KEY_INFO' name='subjectPublicKeyInfo' type64='{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_DATA' name='issuerUniqueIdentifier' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='subjectUniqueIdentifier' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_X509_EXTENSIONS' name='extensions' type64='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'/>
</struct>
<struct name='CSSM_X509_TBS_CERTLIST' type64='{cssm_x509_tbs_certlist=&quot;version&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;thisUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;nextUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;revokedCertificates&quot;^{cssm_x509_revoked_cert_list}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'>
<field declared_type64='CSSM_DATA' name='version' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_X509_ALGORITHM_IDENTIFIER' name='signature' type64='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_X509_NAME' name='issuer' type64='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'/>
<field declared_type64='CSSM_X509_TIME' name='thisUpdate' type64='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_X509_TIME' name='nextUpdate' type64='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_X509_REVOKED_CERT_LIST_PTR' name='revokedCertificates' type64='^{cssm_x509_revoked_cert_list=I^{cssm_x509_revoked_cert_entry}}'/>
<field declared_type64='CSSM_X509_EXTENSIONS' name='extensions' type64='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'/>
</struct>
<struct name='CSSM_X509_TBS_CERTLIST_PTR' type64='{cssm_x509_tbs_certlist=&quot;version&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;thisUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;nextUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;revokedCertificates&quot;^{cssm_x509_revoked_cert_list}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'>
<field declared_type64='CSSM_DATA' name='version' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_X509_ALGORITHM_IDENTIFIER' name='signature' type64='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_X509_NAME' name='issuer' type64='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'/>
<field declared_type64='CSSM_X509_TIME' name='thisUpdate' type64='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_X509_TIME' name='nextUpdate' type64='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_X509_REVOKED_CERT_LIST_PTR' name='revokedCertificates' type64='^{cssm_x509_revoked_cert_list=I^{cssm_x509_revoked_cert_entry}}'/>
<field declared_type64='CSSM_X509_EXTENSIONS' name='extensions' type64='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'/>
</struct>
<struct name='CSSM_X509_TIME' type64='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_BER_TAG' name='timeType' type64='C'/>
<field declared_type64='CSSM_DATA' name='time' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_X509_TIME_PTR' type64='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_BER_TAG' name='timeType' type64='C'/>
<field declared_type64='CSSM_DATA' name='time' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_X509_TYPE_VALUE_PAIR' type64='{cssm_x509_type_value_pair=&quot;type&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;valueType&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_OID' name='type' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_BER_TAG' name='valueType' type64='C'/>
<field declared_type64='CSSM_DATA' name='value' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_X509_TYPE_VALUE_PAIR_PTR' type64='{cssm_x509_type_value_pair=&quot;type&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;valueType&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_OID' name='type' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_BER_TAG' name='valueType' type64='C'/>
<field declared_type64='CSSM_DATA' name='value' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='CSSM_X509_VALIDITY' type64='{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}'>
<field declared_type64='CSSM_X509_TIME' name='notBefore' type64='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_X509_TIME' name='notAfter' type64='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
</struct>
<struct name='CSSM_X509_VALIDITY_PTR' type64='{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}'>
<field declared_type64='CSSM_X509_TIME' name='notBefore' type64='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_X509_TIME' name='notAfter' type64='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
</struct>
<struct name='DERItem' type64='{_DERItem=&quot;data&quot;*&quot;length&quot;Q}'>
<field declared_type64='DERByte*' name='data' type64='*'/>
<field declared_type64='DERSize' name='length' type64='Q'/>
</struct>
<struct name='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=&quot;DLHandle&quot;q&quot;DBHandle&quot;q}'>
<field declared_type64='CSSM_DL_HANDLE' name='DLHandle' type64='q'/>
<field declared_type64='CSSM_DB_HANDLE' name='DBHandle' type64='q'/>
</struct>
<struct name='MDS_FUNCS' type64='{mds_funcs=&quot;DbOpen&quot;^?&quot;DbClose&quot;^?&quot;GetDbNames&quot;^?&quot;GetDbNameFromHandle&quot;^?&quot;FreeNameList&quot;^?&quot;DataInsert&quot;^?&quot;DataDelete&quot;^?&quot;DataModify&quot;^?&quot;DataGetFirst&quot;^?&quot;DataGetNext&quot;^?&quot;DataAbortQuery&quot;^?&quot;DataGetFromUniqueRecordId&quot;^?&quot;FreeUniqueRecord&quot;^?&quot;CreateRelation&quot;^?&quot;DestroyRelation&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(MDS_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_DB_ACCESS_TYPE, CSSM_ACCESS_CREDENTIALS *, void *, CSSM_DB_HANDLE *)' function_pointer='true' name='DbOpen' type64='^?'>
<arg declared_type64='MDS_HANDLE' type64='q'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='CSSM_NET_ADDRESS*' type64='^{cssm_net_address=I{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DB_ACCESS_TYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='CSSM_DB_HANDLE*' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE)' function_pointer='true' name='DbClose' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_HANDLE, CSSM_NAME_LIST_PTR *)' function_pointer='true' name='GetDbNames' type64='^?'>
<arg declared_type64='MDS_HANDLE' type64='q'/>
<arg declared_type64='CSSM_NAME_LIST_PTR*' type64='^^{cssm_name_list}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, char **)' function_pointer='true' name='GetDbNameFromHandle' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_HANDLE, CSSM_NAME_LIST_PTR)' function_pointer='true' name='FreeNameList' type64='^?'>
<arg declared_type64='MDS_HANDLE' type64='q'/>
<arg declared_type64='CSSM_NAME_LIST_PTR' type64='^{cssm_name_list=I^*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_UNIQUE_RECORD_PTR *)' function_pointer='true' name='DataInsert' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *)' function_pointer='true' name='DataDelete' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_DB_UNIQUE_RECORD*' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_UNIQUE_RECORD_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_MODIFY_MODE)' function_pointer='true' name='DataModify' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_MODIFY_MODE' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_QUERY *, CSSM_HANDLE_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' function_pointer='true' name='DataGetFirst' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_QUERY*' type64='^{cssm_query=III^{cssm_selection_predicate}{cssm_query_limits=II}I}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_HANDLE, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' function_pointer='true' name='DataGetNext' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_HANDLE)' function_pointer='true' name='DataAbortQuery' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR)' function_pointer='true' name='DataGetFromUniqueRecordId' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_DB_UNIQUE_RECORD*' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_UNIQUE_RECORD_PTR)' function_pointer='true' name='FreeUniqueRecord' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, char *, uint32, CSSM_DB_SCHEMA_ATTRIBUTE_INFO *, uint32, CSSM_DB_SCHEMA_INDEX_INFO *)' function_pointer='true' name='CreateRelation' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_SCHEMA_ATTRIBUTE_INFO*' type64='^{cssm_db_schema_attribute_info=I*{cssm_data=Q*}I}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_SCHEMA_INDEX_INFO*' type64='^{cssm_db_schema_index_info=IIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE)' function_pointer='true' name='DestroyRelation' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='MDS_FUNCS_PTR' type64='{mds_funcs=&quot;DbOpen&quot;^?&quot;DbClose&quot;^?&quot;GetDbNames&quot;^?&quot;GetDbNameFromHandle&quot;^?&quot;FreeNameList&quot;^?&quot;DataInsert&quot;^?&quot;DataDelete&quot;^?&quot;DataModify&quot;^?&quot;DataGetFirst&quot;^?&quot;DataGetNext&quot;^?&quot;DataAbortQuery&quot;^?&quot;DataGetFromUniqueRecordId&quot;^?&quot;FreeUniqueRecord&quot;^?&quot;CreateRelation&quot;^?&quot;DestroyRelation&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(MDS_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_DB_ACCESS_TYPE, CSSM_ACCESS_CREDENTIALS *, void *, CSSM_DB_HANDLE *)' function_pointer='true' name='DbOpen' type64='^?'>
<arg declared_type64='MDS_HANDLE' type64='q'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='CSSM_NET_ADDRESS*' type64='^{cssm_net_address=I{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DB_ACCESS_TYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='CSSM_DB_HANDLE*' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE)' function_pointer='true' name='DbClose' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_HANDLE, CSSM_NAME_LIST_PTR *)' function_pointer='true' name='GetDbNames' type64='^?'>
<arg declared_type64='MDS_HANDLE' type64='q'/>
<arg declared_type64='CSSM_NAME_LIST_PTR*' type64='^^{cssm_name_list}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, char **)' function_pointer='true' name='GetDbNameFromHandle' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_HANDLE, CSSM_NAME_LIST_PTR)' function_pointer='true' name='FreeNameList' type64='^?'>
<arg declared_type64='MDS_HANDLE' type64='q'/>
<arg declared_type64='CSSM_NAME_LIST_PTR' type64='^{cssm_name_list=I^*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_UNIQUE_RECORD_PTR *)' function_pointer='true' name='DataInsert' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *)' function_pointer='true' name='DataDelete' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_DB_UNIQUE_RECORD*' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_UNIQUE_RECORD_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_MODIFY_MODE)' function_pointer='true' name='DataModify' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_MODIFY_MODE' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_QUERY *, CSSM_HANDLE_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' function_pointer='true' name='DataGetFirst' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_QUERY*' type64='^{cssm_query=III^{cssm_selection_predicate}{cssm_query_limits=II}I}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_HANDLE, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' function_pointer='true' name='DataGetNext' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_HANDLE)' function_pointer='true' name='DataAbortQuery' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR)' function_pointer='true' name='DataGetFromUniqueRecordId' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_DB_UNIQUE_RECORD*' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_UNIQUE_RECORD_PTR)' function_pointer='true' name='FreeUniqueRecord' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, char *, uint32, CSSM_DB_SCHEMA_ATTRIBUTE_INFO *, uint32, CSSM_DB_SCHEMA_INDEX_INFO *)' function_pointer='true' name='CreateRelation' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_SCHEMA_ATTRIBUTE_INFO*' type64='^{cssm_db_schema_attribute_info=I*{cssm_data=Q*}I}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_SCHEMA_INDEX_INFO*' type64='^{cssm_db_schema_index_info=IIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE)' function_pointer='true' name='DestroyRelation' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='SecAsn1AlgId' type64='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_OID' name='algorithm' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='parameters' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='SecAsn1Item' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'>
<field declared_type64='CSSM_SIZE' name='Length' type64='Q'/>
<field declared_type64='uint8*' name='Data' type64='*'/>
</struct>
<struct name='SecAsn1Oid' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'>
<field declared_type64='CSSM_SIZE' name='Length' type64='Q'/>
<field declared_type64='uint8*' name='Data' type64='*'/>
</struct>
<struct name='SecAsn1PubKeyInfo' type64='{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_X509_ALGORITHM_IDENTIFIER' name='algorithm' type64='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_DATA' name='subjectPublicKey' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='SecAsn1Template' type64='{SecAsn1Template_struct=&quot;kind&quot;I&quot;offset&quot;I&quot;sub&quot;^v&quot;size&quot;I}'>
<field declared_type64='uint32_t' name='kind' type64='I'/>
<field declared_type64='uint32_t' name='offset' type64='I'/>
<field const='true' declared_type64='void * _Nonnull' name='sub' type64='^v'/>
<field declared_type64='uint32_t' name='size' type64='I'/>
</struct>
<struct name='SecAsn1Template_struct' type64='{SecAsn1Template_struct=&quot;kind&quot;I&quot;offset&quot;I&quot;sub&quot;^v&quot;size&quot;I}'>
<field declared_type64='uint32_t' name='kind' type64='I'/>
<field declared_type64='uint32_t' name='offset' type64='I'/>
<field const='true' declared_type64='void * _Nonnull' name='sub' type64='^v'/>
<field declared_type64='uint32_t' name='size' type64='I'/>
</struct>
<struct name='SecItemImportExportKeyParameters' type64='{_SecItemImportExportKeyParameters=&quot;version&quot;I&quot;flags&quot;I&quot;passphrase&quot;^v&quot;alertTitle&quot;^{__CFString}&quot;alertPrompt&quot;^{__CFString}&quot;accessRef&quot;^{OpaqueSecAccessRef}&quot;keyUsage&quot;^{__CFArray}&quot;keyAttributes&quot;^{__CFArray}}'>
<field declared_type64='uint32_t' name='version' type64='I'/>
<field declared_type64='SecKeyImportExportFlags' name='flags' type64='I'/>
<field declared_type64='CFTypeRef _Nullable' name='passphrase' type64='@'/>
<field declared_type64='CFStringRef _Nullable' name='alertTitle' type64='^{__CFString=}'/>
<field declared_type64='CFStringRef _Nullable' name='alertPrompt' type64='^{__CFString=}'/>
<field declared_type64='SecAccessRef _Nullable' name='accessRef' type64='^{OpaqueSecAccessRef=}'/>
<field declared_type64='CFArrayRef _Nullable' name='keyUsage' type64='^{__CFArray=}'/>
<field declared_type64='CFArrayRef _Nullable' name='keyAttributes' type64='^{__CFArray=}'/>
</struct>
<struct name='SecKeyImportExportParameters' type64='{_SecKeyImportExportParameters=&quot;version&quot;I&quot;flags&quot;I&quot;passphrase&quot;^v&quot;alertTitle&quot;^{__CFString}&quot;alertPrompt&quot;^{__CFString}&quot;accessRef&quot;^{OpaqueSecAccessRef}&quot;keyUsage&quot;I&quot;keyAttributes&quot;I}'>
<field declared_type64='uint32_t' name='version' type64='I'/>
<field declared_type64='SecKeyImportExportFlags' name='flags' type64='I'/>
<field declared_type64='CFTypeRef _Nullable' name='passphrase' type64='@'/>
<field declared_type64='CFStringRef _Nonnull' name='alertTitle' type64='^{__CFString=}'/>
<field declared_type64='CFStringRef _Nonnull' name='alertPrompt' type64='^{__CFString=}'/>
<field declared_type64='SecAccessRef _Nullable' name='accessRef' type64='^{OpaqueSecAccessRef=}'/>
<field declared_type64='CSSM_KEYUSE' name='keyUsage' type64='I'/>
<field declared_type64='CSSM_KEYATTR_FLAGS' name='keyAttributes' type64='I'/>
</struct>
<struct name='SecKeychainAttribute' type64='{SecKeychainAttribute=&quot;tag&quot;I&quot;length&quot;I&quot;data&quot;^v}'>
<field declared_type64='SecKeychainAttrType' name='tag' type64='I'/>
<field declared_type64='UInt32' name='length' type64='I'/>
<field declared_type64='void * _Nullable' name='data' type64='^v'/>
</struct>
<struct name='SecKeychainAttributeInfo' type64='{SecKeychainAttributeInfo=&quot;count&quot;I&quot;tag&quot;^I&quot;format&quot;^I}'>
<field declared_type64='UInt32' name='count' type64='I'/>
<field declared_type64='UInt32 * _Nonnull' name='tag' type64='^I'/>
<field declared_type64='UInt32 * _Nullable' name='format' type64='^I'/>
</struct>
<struct name='SecKeychainAttributeList' type64='{SecKeychainAttributeList=&quot;count&quot;I&quot;attr&quot;^{SecKeychainAttribute}}'>
<field declared_type64='UInt32' name='count' type64='I'/>
<field declared_type64='SecKeychainAttribute * _Nullable' name='attr' type64='^{SecKeychainAttribute=II^v}'/>
</struct>
<struct name='SecKeychainCallbackInfo' type64='{SecKeychainCallbackInfo=&quot;version&quot;I&quot;item&quot;^{OpaqueSecKeychainItemRef}&quot;keychain&quot;^{OpaqueSecKeychainRef}&quot;pid&quot;i}'>
<field declared_type64='UInt32' name='version' type64='I'/>
<field declared_type64='SecKeychainItemRef _Nonnull' name='item' type64='^{OpaqueSecKeychainItemRef=}'/>
<field declared_type64='SecKeychainRef _Nonnull' name='keychain' type64='^{OpaqueSecKeychainRef=}'/>
<field declared_type64='pid_t' name='pid' type64='i'/>
</struct>
<struct name='SecKeychainSettings' type64='{SecKeychainSettings=&quot;version&quot;I&quot;lockOnSleep&quot;B&quot;useLockInterval&quot;B&quot;lockInterval&quot;I}'>
<field declared_type64='UInt32' name='version' type64='I'/>
<field declared_type64='Boolean' name='lockOnSleep' type64='B'/>
<field declared_type64='Boolean' name='useLockInterval' type64='B'/>
<field declared_type64='UInt32' name='lockInterval' type64='I'/>
</struct>
<struct name='cssm_access_credentials' type64='{cssm_access_credentials=&quot;EntryTag&quot;[68c]&quot;BaseCerts&quot;{cssm_base_certs=&quot;TPHandle&quot;q&quot;CLHandle&quot;q&quot;Certs&quot;{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}}&quot;Samples&quot;{cssm_samplegroup=&quot;NumberOfSamples&quot;I&quot;Samples&quot;^{cssm_sample}}&quot;Callback&quot;^?&quot;CallerCtx&quot;^v}'>
<field declared_type64='CSSM_STRING' name='EntryTag' type64='[68c]'/>
<field declared_type64='CSSM_BASE_CERTS' name='BaseCerts' type64='{cssm_base_certs=&quot;TPHandle&quot;q&quot;CLHandle&quot;q&quot;Certs&quot;{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}}'/>
<field declared_type64='CSSM_SAMPLEGROUP' name='Samples' type64='{cssm_samplegroup=&quot;NumberOfSamples&quot;I&quot;Samples&quot;^{cssm_sample}}'/>
<field declared_type64='CSSM_CHALLENGE_CALLBACK' function_pointer='true' name='Callback' type64='^?'>
<arg const='true' declared_type64='CSSM_LIST*' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg declared_type64='CSSM_SAMPLEGROUP_PTR' type64='^{cssm_samplegroup=I^{cssm_sample}}'/>
<arg declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='CSSM_MEMORY_FUNCS*' type64='^{cssm_memory_funcs=^?^?^?^?^v}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='void*' name='CallerCtx' type64='^v'/>
</struct>
<struct name='cssm_acl_edit' type64='{cssm_acl_edit=&quot;EditMode&quot;I&quot;OldEntryHandle&quot;q&quot;NewEntry&quot;^{cssm_acl_entry_input}}'>
<field declared_type64='CSSM_ACL_EDIT_MODE' name='EditMode' type64='I'/>
<field declared_type64='CSSM_ACL_HANDLE' name='OldEntryHandle' type64='q'/>
<field const='true' declared_type64='CSSM_ACL_ENTRY_INPUT*' name='NewEntry' type64='^{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}'/>
</struct>
<struct name='cssm_acl_entry_info' type64='{cssm_acl_entry_info=&quot;EntryPublicInfo&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;EntryHandle&quot;q}'>
<field declared_type64='CSSM_ACL_ENTRY_PROTOTYPE' name='EntryPublicInfo' type64='{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}'/>
<field declared_type64='CSSM_ACL_HANDLE' name='EntryHandle' type64='q'/>
</struct>
<struct name='cssm_acl_entry_input' type64='{cssm_acl_entry_input=&quot;Prototype&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;Callback&quot;^?&quot;CallerContext&quot;^v}'>
<field declared_type64='CSSM_ACL_ENTRY_PROTOTYPE' name='Prototype' type64='{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}'/>
<field declared_type64='CSSM_ACL_SUBJECT_CALLBACK' function_pointer='true' name='Callback' type64='^?'>
<arg const='true' declared_type64='CSSM_LIST*' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg declared_type64='CSSM_LIST_PTR' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='CSSM_MEMORY_FUNCS*' type64='^{cssm_memory_funcs=^?^?^?^?^v}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='void*' name='CallerContext' type64='^v'/>
</struct>
<struct name='cssm_acl_entry_prototype' type64='{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}'>
<field declared_type64='CSSM_LIST' name='TypedSubject' type64='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
<field declared_type64='CSSM_BOOL' name='Delegate' type64='i'/>
<field declared_type64='CSSM_AUTHORIZATIONGROUP' name='Authorization' type64='{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}'/>
<field declared_type64='CSSM_ACL_VALIDITY_PERIOD' name='TimeRange' type64='{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_STRING' name='EntryTag' type64='[68c]'/>
</struct>
<struct name='cssm_acl_keychain_prompt_selector' type64='{cssm_acl_keychain_prompt_selector=&quot;version&quot;S&quot;flags&quot;S}'>
<field declared_type64='uint16' name='version' type64='S'/>
<field declared_type64='uint16' name='flags' type64='S'/>
</struct>
<struct name='cssm_acl_owner_prototype' type64='{cssm_acl_owner_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i}'>
<field declared_type64='CSSM_LIST' name='TypedSubject' type64='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
<field declared_type64='CSSM_BOOL' name='Delegate' type64='i'/>
</struct>
<struct name='cssm_acl_process_subject_selector' type64='{cssm_acl_process_subject_selector=&quot;version&quot;S&quot;mask&quot;S&quot;uid&quot;I&quot;gid&quot;I}'>
<field declared_type64='uint16' name='version' type64='S'/>
<field declared_type64='uint16' name='mask' type64='S'/>
<field declared_type64='uint32' name='uid' type64='I'/>
<field declared_type64='uint32' name='gid' type64='I'/>
</struct>
<struct name='cssm_acl_validity_period' type64='{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_DATA' name='StartDate' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='EndDate' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='cssm_applecspdl_db_change_password_parameters' type64='{cssm_applecspdl_db_change_password_parameters=&quot;accessCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_ACCESS_CREDENTIALS*' name='accessCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='cssm_applecspdl_db_is_locked_parameters' type64='{cssm_applecspdl_db_is_locked_parameters=&quot;isLocked&quot;C}'>
<field declared_type64='uint8' name='isLocked' type64='C'/>
</struct>
<struct name='cssm_applecspdl_db_settings_parameters' type64='{cssm_applecspdl_db_settings_parameters=&quot;idleTimeout&quot;I&quot;lockOnSleep&quot;C}'>
<field declared_type64='uint32' name='idleTimeout' type64='I'/>
<field declared_type64='uint8' name='lockOnSleep' type64='C'/>
</struct>
<struct name='cssm_appledl_open_parameters' type64='{cssm_appledl_open_parameters=&quot;length&quot;I&quot;version&quot;I&quot;autoCommit&quot;i&quot;mask&quot;I&quot;mode&quot;S}'>
<field declared_type64='uint32' name='length' type64='I'/>
<field declared_type64='uint32' name='version' type64='I'/>
<field declared_type64='CSSM_BOOL' name='autoCommit' type64='i'/>
<field declared_type64='uint32' name='mask' type64='I'/>
<field declared_type64='mode_t' name='mode' type64='S'/>
</struct>
<struct name='cssm_authorizationgroup' type64='{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}'>
<field declared_type64='uint32' name='NumberOfAuthTags' type64='I'/>
<field declared_type64='CSSM_ACL_AUTHORIZATION_TAG*' name='AuthTags' type64='^i'/>
</struct>
<struct name='cssm_base_certs' type64='{cssm_base_certs=&quot;TPHandle&quot;q&quot;CLHandle&quot;q&quot;Certs&quot;{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}}'>
<field declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='CSSM_CERTGROUP' name='Certs' type64='{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}'/>
</struct>
<struct name='cssm_cert_bundle' type64='{cssm_cert_bundle=&quot;BundleHeader&quot;{cssm_cert_bundle_header=&quot;BundleType&quot;I&quot;BundleEncoding&quot;I}&quot;Bundle&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_CERT_BUNDLE_HEADER' name='BundleHeader' type64='{cssm_cert_bundle_header=&quot;BundleType&quot;I&quot;BundleEncoding&quot;I}'/>
<field declared_type64='CSSM_DATA' name='Bundle' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='cssm_cert_bundle_header' type64='{cssm_cert_bundle_header=&quot;BundleType&quot;I&quot;BundleEncoding&quot;I}'>
<field declared_type64='CSSM_CERT_BUNDLE_TYPE' name='BundleType' type64='I'/>
<field declared_type64='CSSM_CERT_BUNDLE_ENCODING' name='BundleEncoding' type64='I'/>
</struct>
<struct name='cssm_cert_pair' type64='{cssm_cert_pair=&quot;EncodedCert&quot;{cssm_encoded_cert=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;CertBlob&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;ParsedCert&quot;{cssm_parsed_cert=&quot;CertType&quot;I&quot;ParsedCertFormat&quot;I&quot;ParsedCert&quot;^v}}'>
<field declared_type64='CSSM_ENCODED_CERT' name='EncodedCert' type64='{cssm_encoded_cert=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;CertBlob&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_PARSED_CERT' name='ParsedCert' type64='{cssm_parsed_cert=&quot;CertType&quot;I&quot;ParsedCertFormat&quot;I&quot;ParsedCert&quot;^v}'/>
</struct>
<struct name='cssm_certgroup' type64='{cssm_certgroup=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;NumCerts&quot;I&quot;GroupList&quot;(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})&quot;CertGroupType&quot;I&quot;Reserved&quot;^v}'>
<field declared_type64='CSSM_CERT_TYPE' name='CertType' type64='I'/>
<field declared_type64='CSSM_CERT_ENCODING' name='CertEncoding' type64='I'/>
<field declared_type64='uint32' name='NumCerts' type64='I'/>
<field declared_type64='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/Security.framework/Headers/cssmtype.h:560:5)' name='GroupList' type64='(?=&quot;CertList&quot;^{cssm_data}&quot;EncodedCertList&quot;^{cssm_encoded_cert}&quot;ParsedCertList&quot;^{cssm_parsed_cert}&quot;PairCertList&quot;^{cssm_cert_pair})'/>
<field declared_type64='CSSM_CERTGROUP_TYPE' name='CertGroupType' type64='I'/>
<field declared_type64='void*' name='Reserved' type64='^v'/>
</struct>
<struct name='cssm_context' type64='{cssm_context=&quot;ContextType&quot;I&quot;AlgorithmType&quot;I&quot;NumberOfAttributes&quot;I&quot;ContextAttributes&quot;^{cssm_context_attribute}&quot;CSPHandle&quot;q&quot;Privileged&quot;i&quot;EncryptionProhibited&quot;I&quot;WorkFactor&quot;I&quot;Reserved&quot;I}'>
<field declared_type64='CSSM_CONTEXT_TYPE' name='ContextType' type64='I'/>
<field declared_type64='CSSM_ALGORITHMS' name='AlgorithmType' type64='I'/>
<field declared_type64='uint32' name='NumberOfAttributes' type64='I'/>
<field declared_type64='CSSM_CONTEXT_ATTRIBUTE_PTR' name='ContextAttributes' type64='^{cssm_context_attribute=II(cssm_context_attribute_value=*I^{cssm_access_credentials}^{cssm_key}^{cssm_data}I^{cssm_date}^{cssm_range}^{cssm_crypto_data}^{cssm_version}^{cssm_dl_db_handle}^{cssm_kr_profile})}'/>
<field declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<field declared_type64='CSSM_BOOL' name='Privileged' type64='i'/>
<field declared_type64='uint32' name='EncryptionProhibited' type64='I'/>
<field declared_type64='uint32' name='WorkFactor' type64='I'/>
<field declared_type64='uint32' name='Reserved' type64='I'/>
</struct>
<struct name='cssm_context_attribute' type64='{cssm_context_attribute=&quot;AttributeType&quot;I&quot;AttributeLength&quot;I&quot;Attribute&quot;(cssm_context_attribute_value=&quot;String&quot;*&quot;Uint32&quot;I&quot;AccessCredentials&quot;^{cssm_access_credentials}&quot;Key&quot;^{cssm_key}&quot;Data&quot;^{cssm_data}&quot;Padding&quot;I&quot;Date&quot;^{cssm_date}&quot;Range&quot;^{cssm_range}&quot;CryptoData&quot;^{cssm_crypto_data}&quot;Version&quot;^{cssm_version}&quot;DLDBHandle&quot;^{cssm_dl_db_handle}&quot;KRProfile&quot;^{cssm_kr_profile})}'>
<field declared_type64='CSSM_ATTRIBUTE_TYPE' name='AttributeType' type64='I'/>
<field declared_type64='uint32' name='AttributeLength' type64='I'/>
<field declared_type64='union cssm_context_attribute_value' name='Attribute' type64='(cssm_context_attribute_value=&quot;String&quot;*&quot;Uint32&quot;I&quot;AccessCredentials&quot;^{cssm_access_credentials}&quot;Key&quot;^{cssm_key}&quot;Data&quot;^{cssm_data}&quot;Padding&quot;I&quot;Date&quot;^{cssm_date}&quot;Range&quot;^{cssm_range}&quot;CryptoData&quot;^{cssm_crypto_data}&quot;Version&quot;^{cssm_version}&quot;DLDBHandle&quot;^{cssm_dl_db_handle}&quot;KRProfile&quot;^{cssm_kr_profile})'/>
</struct>
<struct name='cssm_crl_pair' type64='{cssm_crl_pair=&quot;EncodedCrl&quot;{cssm_encoded_crl=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;CrlBlob&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;ParsedCrl&quot;{cssm_parsed_crl=&quot;CrlType&quot;I&quot;ParsedCrlFormat&quot;I&quot;ParsedCrl&quot;^v}}'>
<field declared_type64='CSSM_ENCODED_CRL' name='EncodedCrl' type64='{cssm_encoded_crl=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;CrlBlob&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_PARSED_CRL' name='ParsedCrl' type64='{cssm_parsed_crl=&quot;CrlType&quot;I&quot;ParsedCrlFormat&quot;I&quot;ParsedCrl&quot;^v}'/>
</struct>
<struct name='cssm_crlgroup' type64='{cssm_crlgroup=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;NumberOfCrls&quot;I&quot;GroupCrlList&quot;(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})&quot;CrlGroupType&quot;I}'>
<field declared_type64='CSSM_CRL_TYPE' name='CrlType' type64='I'/>
<field declared_type64='CSSM_CRL_ENCODING' name='CrlEncoding' type64='I'/>
<field declared_type64='uint32' name='NumberOfCrls' type64='I'/>
<field declared_type64='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/Security.framework/Headers/cssmtype.h:1401:5)' name='GroupCrlList' type64='(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})'/>
<field declared_type64='CSSM_CRLGROUP_TYPE' name='CrlGroupType' type64='I'/>
</struct>
<struct name='cssm_crypto_data' type64='{cssm_crypto_data=&quot;Param&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;Callback&quot;^?&quot;CallerCtx&quot;^v}'>
<field declared_type64='CSSM_DATA' name='Param' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_CALLBACK' function_pointer='true' name='Callback' type64='^?'>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='void*' name='CallerCtx' type64='^v'/>
</struct>
<struct name='cssm_csp_operational_statistics' type64='{cssm_csp_operational_statistics=&quot;UserAuthenticated&quot;i&quot;DeviceFlags&quot;I&quot;TokenMaxSessionCount&quot;I&quot;TokenOpenedSessionCount&quot;I&quot;TokenMaxRWSessionCount&quot;I&quot;TokenOpenedRWSessionCount&quot;I&quot;TokenTotalPublicMem&quot;I&quot;TokenFreePublicMem&quot;I&quot;TokenTotalPrivateMem&quot;I&quot;TokenFreePrivateMem&quot;I}'>
<field declared_type64='CSSM_BOOL' name='UserAuthenticated' type64='i'/>
<field declared_type64='CSSM_CSP_FLAGS' name='DeviceFlags' type64='I'/>
<field declared_type64='uint32' name='TokenMaxSessionCount' type64='I'/>
<field declared_type64='uint32' name='TokenOpenedSessionCount' type64='I'/>
<field declared_type64='uint32' name='TokenMaxRWSessionCount' type64='I'/>
<field declared_type64='uint32' name='TokenOpenedRWSessionCount' type64='I'/>
<field declared_type64='uint32' name='TokenTotalPublicMem' type64='I'/>
<field declared_type64='uint32' name='TokenFreePublicMem' type64='I'/>
<field declared_type64='uint32' name='TokenTotalPrivateMem' type64='I'/>
<field declared_type64='uint32' name='TokenFreePrivateMem' type64='I'/>
</struct>
<struct name='cssm_data' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'>
<field declared_type64='CSSM_SIZE' name='Length' type64='Q'/>
<field declared_type64='uint8*' name='Data' type64='*'/>
</struct>
<struct name='cssm_date' type64='{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}'>
<field declared_type64='uint8*' name='Year' type64='[4C]'/>
<field declared_type64='uint8*' name='Month' type64='[2C]'/>
<field declared_type64='uint8*' name='Day' type64='[2C]'/>
</struct>
<struct name='cssm_db_attribute_data' type64='{cssm_db_attribute_data=&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}&quot;NumberOfValues&quot;I&quot;Value&quot;^{cssm_data}}'>
<field declared_type64='CSSM_DB_ATTRIBUTE_INFO' name='Info' type64='{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}'/>
<field declared_type64='uint32' name='NumberOfValues' type64='I'/>
<field declared_type64='CSSM_DATA_PTR' name='Value' type64='^{cssm_data=Q*}'/>
</struct>
<struct name='cssm_db_attribute_info' type64='{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}'>
<field declared_type64='CSSM_DB_ATTRIBUTE_NAME_FORMAT' name='AttributeNameFormat' type64='I'/>
<field declared_type64='union cssm_db_attribute_label' name='Label' type64='(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)'/>
<field declared_type64='CSSM_DB_ATTRIBUTE_FORMAT' name='AttributeFormat' type64='I'/>
</struct>
<struct name='cssm_db_index_info' type64='{cssm_db_index_info=&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}}'>
<field declared_type64='CSSM_DB_INDEX_TYPE' name='IndexType' type64='I'/>
<field declared_type64='CSSM_DB_INDEXED_DATA_LOCATION' name='IndexedDataLocation' type64='I'/>
<field declared_type64='CSSM_DB_ATTRIBUTE_INFO' name='Info' type64='{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}'/>
</struct>
<struct name='cssm_db_parsing_module_info' type64='{cssm_db_parsing_module_info=&quot;RecordType&quot;I&quot;ModuleSubserviceUid&quot;{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}}'>
<field declared_type64='CSSM_DB_RECORDTYPE' name='RecordType' type64='I'/>
<field declared_type64='CSSM_SUBSERVICE_UID' name='ModuleSubserviceUid' type64='{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}'/>
</struct>
<struct name='cssm_db_record_attribute_data' type64='{cssm_db_record_attribute_data=&quot;DataRecordType&quot;I&quot;SemanticInformation&quot;I&quot;NumberOfAttributes&quot;I&quot;AttributeData&quot;^{cssm_db_attribute_data}}'>
<field declared_type64='CSSM_DB_RECORDTYPE' name='DataRecordType' type64='I'/>
<field declared_type64='uint32' name='SemanticInformation' type64='I'/>
<field declared_type64='uint32' name='NumberOfAttributes' type64='I'/>
<field declared_type64='CSSM_DB_ATTRIBUTE_DATA_PTR' name='AttributeData' type64='^{cssm_db_attribute_data={cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}I^{cssm_data}}'/>
</struct>
<struct name='cssm_db_record_attribute_info' type64='{cssm_db_record_attribute_info=&quot;DataRecordType&quot;I&quot;NumberOfAttributes&quot;I&quot;AttributeInfo&quot;^{cssm_db_attribute_info}}'>
<field declared_type64='CSSM_DB_RECORDTYPE' name='DataRecordType' type64='I'/>
<field declared_type64='uint32' name='NumberOfAttributes' type64='I'/>
<field declared_type64='CSSM_DB_ATTRIBUTE_INFO_PTR' name='AttributeInfo' type64='^{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}'/>
</struct>
<struct name='cssm_db_record_index_info' type64='{cssm_db_record_index_info=&quot;DataRecordType&quot;I&quot;NumberOfIndexes&quot;I&quot;IndexInfo&quot;^{cssm_db_index_info}}'>
<field declared_type64='CSSM_DB_RECORDTYPE' name='DataRecordType' type64='I'/>
<field declared_type64='uint32' name='NumberOfIndexes' type64='I'/>
<field declared_type64='CSSM_DB_INDEX_INFO_PTR' name='IndexInfo' type64='^{cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}'/>
</struct>
<struct name='cssm_db_schema_attribute_info' type64='{cssm_db_schema_attribute_info=&quot;AttributeId&quot;I&quot;AttributeName&quot;*&quot;AttributeNameID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;DataType&quot;I}'>
<field declared_type64='uint32' name='AttributeId' type64='I'/>
<field declared_type64='char*' name='AttributeName' type64='*'/>
<field declared_type64='CSSM_OID' name='AttributeNameID' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DB_ATTRIBUTE_FORMAT' name='DataType' type64='I'/>
</struct>
<struct name='cssm_db_schema_index_info' type64='{cssm_db_schema_index_info=&quot;AttributeId&quot;I&quot;IndexId&quot;I&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I}'>
<field declared_type64='uint32' name='AttributeId' type64='I'/>
<field declared_type64='uint32' name='IndexId' type64='I'/>
<field declared_type64='CSSM_DB_INDEX_TYPE' name='IndexType' type64='I'/>
<field declared_type64='CSSM_DB_INDEXED_DATA_LOCATION' name='IndexedDataLocation' type64='I'/>
</struct>
<struct name='cssm_db_unique_record' type64='{cssm_db_unique_record=&quot;RecordLocator&quot;{cssm_db_index_info=&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}}&quot;RecordIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_DB_INDEX_INFO' name='RecordLocator' type64='{cssm_db_index_info=&quot;IndexType&quot;I&quot;IndexedDataLocation&quot;I&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}}'/>
<field declared_type64='CSSM_DATA' name='RecordIdentifier' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='cssm_dbinfo' type64='{cssm_dbinfo=&quot;NumberOfRecordTypes&quot;I&quot;DefaultParsingModules&quot;^{cssm_db_parsing_module_info}&quot;RecordAttributeNames&quot;^{cssm_db_record_attribute_info}&quot;RecordIndexes&quot;^{cssm_db_record_index_info}&quot;IsLocal&quot;i&quot;AccessPath&quot;*&quot;Reserved&quot;^v}'>
<field declared_type64='uint32' name='NumberOfRecordTypes' type64='I'/>
<field declared_type64='CSSM_DB_PARSING_MODULE_INFO_PTR' name='DefaultParsingModules' type64='^{cssm_db_parsing_module_info=I{cssm_subservice_uid={cssm_guid=ISS[8C]}{cssm_version=II}II}}'/>
<field declared_type64='CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR' name='RecordAttributeNames' type64='^{cssm_db_record_attribute_info=II^{cssm_db_attribute_info}}'/>
<field declared_type64='CSSM_DB_RECORD_INDEX_INFO_PTR' name='RecordIndexes' type64='^{cssm_db_record_index_info=II^{cssm_db_index_info}}'/>
<field declared_type64='CSSM_BOOL' name='IsLocal' type64='i'/>
<field declared_type64='char*' name='AccessPath' type64='*'/>
<field declared_type64='void*' name='Reserved' type64='^v'/>
</struct>
<struct name='cssm_dl_db_handle' type64='{cssm_dl_db_handle=&quot;DLHandle&quot;q&quot;DBHandle&quot;q}'>
<field declared_type64='CSSM_DL_HANDLE' name='DLHandle' type64='q'/>
<field declared_type64='CSSM_DB_HANDLE' name='DBHandle' type64='q'/>
</struct>
<struct name='cssm_dl_db_list' type64='{cssm_dl_db_list=&quot;NumHandles&quot;I&quot;DLDBHandle&quot;^{cssm_dl_db_handle}}'>
<field declared_type64='uint32' name='NumHandles' type64='I'/>
<field declared_type64='CSSM_DL_DB_HANDLE_PTR' name='DLDBHandle' type64='^{cssm_dl_db_handle=qq}'/>
</struct>
<struct name='cssm_dl_pkcs11_attributes' type64='{cssm_dl_pkcs11_attributes=&quot;DeviceAccessFlags&quot;I}'>
<field declared_type64='uint32' name='DeviceAccessFlags' type64='I'/>
</struct>
<struct name='cssm_encoded_cert' type64='{cssm_encoded_cert=&quot;CertType&quot;I&quot;CertEncoding&quot;I&quot;CertBlob&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_CERT_TYPE' name='CertType' type64='I'/>
<field declared_type64='CSSM_CERT_ENCODING' name='CertEncoding' type64='I'/>
<field declared_type64='CSSM_DATA' name='CertBlob' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='cssm_encoded_crl' type64='{cssm_encoded_crl=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;CrlBlob&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_CRL_TYPE' name='CrlType' type64='I'/>
<field declared_type64='CSSM_CRL_ENCODING' name='CrlEncoding' type64='I'/>
<field declared_type64='CSSM_DATA' name='CrlBlob' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='cssm_evidence' type64='{cssm_evidence=&quot;EvidenceForm&quot;I&quot;Evidence&quot;^v}'>
<field declared_type64='CSSM_EVIDENCE_FORM' name='EvidenceForm' type64='I'/>
<field declared_type64='void*' name='Evidence' type64='^v'/>
</struct>
<struct name='cssm_field' type64='{cssm_field=&quot;FieldOid&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;FieldValue&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_OID' name='FieldOid' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='FieldValue' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='cssm_fieldgroup' type64='{cssm_fieldgroup=&quot;NumberOfFields&quot;i&quot;Fields&quot;^{cssm_field}}'>
<field declared_type64='int' name='NumberOfFields' type64='i'/>
<field declared_type64='CSSM_FIELD_PTR' name='Fields' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
</struct>
<struct name='cssm_func_name_addr' type64='{cssm_func_name_addr=&quot;Name&quot;[68c]&quot;Address&quot;^?}'>
<field declared_type64='CSSM_STRING' name='Name' type64='[68c]'/>
<field declared_type64='CSSM_PROC_ADDR' function_pointer='true' name='Address' type64='^?'>
<retval declared_type64='void' type64='v'/>
</field>
</struct>
<struct name='cssm_guid' type64='{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}'>
<field declared_type64='uint32' name='Data1' type64='I'/>
<field declared_type64='uint16' name='Data2' type64='S'/>
<field declared_type64='uint16' name='Data3' type64='S'/>
<field declared_type64='uint8*' name='Data4' type64='[8C]'/>
</struct>
<struct name='cssm_kea_derive_params' type64='{cssm_kea_derive_params=&quot;Rb&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;Yb&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_DATA' name='Rb' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='Yb' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='cssm_key' type64='{cssm_key=&quot;KeyHeader&quot;{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}&quot;KeyData&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_KEYHEADER' name='KeyHeader' type64='{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}'/>
<field declared_type64='CSSM_DATA' name='KeyData' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='cssm_key_size' type64='{cssm_key_size=&quot;LogicalKeySizeInBits&quot;I&quot;EffectiveKeySizeInBits&quot;I}'>
<field declared_type64='uint32' name='LogicalKeySizeInBits' type64='I'/>
<field declared_type64='uint32' name='EffectiveKeySizeInBits' type64='I'/>
</struct>
<struct name='cssm_keyheader' type64='{cssm_keyheader=&quot;HeaderVersion&quot;I&quot;CspId&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;BlobType&quot;I&quot;Format&quot;I&quot;AlgorithmId&quot;I&quot;KeyClass&quot;I&quot;LogicalKeySizeInBits&quot;I&quot;KeyAttr&quot;I&quot;KeyUsage&quot;I&quot;StartDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;EndDate&quot;{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}&quot;WrapAlgorithmId&quot;I&quot;WrapMode&quot;I&quot;Reserved&quot;I}'>
<field declared_type64='CSSM_HEADERVERSION' name='HeaderVersion' type64='I'/>
<field declared_type64='CSSM_GUID' name='CspId' type64='{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}'/>
<field declared_type64='CSSM_KEYBLOB_TYPE' name='BlobType' type64='I'/>
<field declared_type64='CSSM_KEYBLOB_FORMAT' name='Format' type64='I'/>
<field declared_type64='CSSM_ALGORITHMS' name='AlgorithmId' type64='I'/>
<field declared_type64='CSSM_KEYCLASS' name='KeyClass' type64='I'/>
<field declared_type64='uint32' name='LogicalKeySizeInBits' type64='I'/>
<field declared_type64='CSSM_KEYATTR_FLAGS' name='KeyAttr' type64='I'/>
<field declared_type64='CSSM_KEYUSE' name='KeyUsage' type64='I'/>
<field declared_type64='CSSM_DATE' name='StartDate' type64='{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}'/>
<field declared_type64='CSSM_DATE' name='EndDate' type64='{cssm_date=&quot;Year&quot;[4C]&quot;Month&quot;[2C]&quot;Day&quot;[2C]}'/>
<field declared_type64='CSSM_ALGORITHMS' name='WrapAlgorithmId' type64='I'/>
<field declared_type64='CSSM_ENCRYPT_MODE' name='WrapMode' type64='I'/>
<field declared_type64='uint32' name='Reserved' type64='I'/>
</struct>
<struct name='cssm_kr_name' type64='{cssm_kr_name=&quot;Type&quot;C&quot;Length&quot;C&quot;Name&quot;*}'>
<field declared_type64='uint8' name='Type' type64='C'/>
<field declared_type64='uint8' name='Length' type64='C'/>
<field declared_type64='char*' name='Name' type64='*'/>
</struct>
<struct name='cssm_kr_policy_info' type64='{cssm_kr_policy_info=&quot;krbNotAllowed&quot;i&quot;numberOfEntries&quot;I&quot;policyEntry&quot;^{cssm_kr_policy_list_item}}'>
<field declared_type64='CSSM_BOOL' name='krbNotAllowed' type64='i'/>
<field declared_type64='uint32' name='numberOfEntries' type64='I'/>
<field declared_type64='CSSM_KR_POLICY_LIST_ITEM*' name='policyEntry' type64='^{cssm_kr_policy_list_item=^{kr_policy_list_item}IIIICII}'/>
</struct>
<struct name='cssm_kr_policy_list_item' type64='{cssm_kr_policy_list_item=&quot;next&quot;^{kr_policy_list_item}&quot;AlgorithmId&quot;I&quot;Mode&quot;I&quot;MaxKeyLength&quot;I&quot;MaxRounds&quot;I&quot;WorkFactor&quot;C&quot;PolicyFlags&quot;I&quot;AlgClass&quot;I}'>
<field declared_type64='struct kr_policy_list_item*' name='next' type64='^{kr_policy_list_item=}'/>
<field declared_type64='CSSM_ALGORITHMS' name='AlgorithmId' type64='I'/>
<field declared_type64='CSSM_ENCRYPT_MODE' name='Mode' type64='I'/>
<field declared_type64='uint32' name='MaxKeyLength' type64='I'/>
<field declared_type64='uint32' name='MaxRounds' type64='I'/>
<field declared_type64='uint8' name='WorkFactor' type64='C'/>
<field declared_type64='CSSM_KR_POLICY_FLAGS' name='PolicyFlags' type64='I'/>
<field declared_type64='CSSM_CONTEXT_TYPE' name='AlgClass' type64='I'/>
</struct>
<struct name='cssm_kr_profile' type64='{cssm_kr_profile=&quot;UserName&quot;{cssm_kr_name=&quot;Type&quot;C&quot;Length&quot;C&quot;Name&quot;*}&quot;UserCertificate&quot;^{cssm_certgroup}&quot;KRSCertChain&quot;^{cssm_certgroup}&quot;LE_KRANum&quot;C&quot;LE_KRACertChainList&quot;^{cssm_certgroup}&quot;ENT_KRANum&quot;C&quot;ENT_KRACertChainList&quot;^{cssm_certgroup}&quot;INDIV_KRANum&quot;C&quot;INDIV_KRACertChainList&quot;^{cssm_certgroup}&quot;INDIV_AuthenticationInfo&quot;^{cssm_data}&quot;KRSPFlags&quot;I&quot;KRSPExtensions&quot;^{cssm_data}}'>
<field declared_type64='CSSM_KR_NAME' name='UserName' type64='{cssm_kr_name=&quot;Type&quot;C&quot;Length&quot;C&quot;Name&quot;*}'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='UserCertificate' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='KRSCertChain' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='uint8' name='LE_KRANum' type64='C'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='LE_KRACertChainList' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='uint8' name='ENT_KRANum' type64='C'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='ENT_KRACertChainList' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='uint8' name='INDIV_KRANum' type64='C'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='INDIV_KRACertChainList' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='CSSM_DATA_PTR' name='INDIV_AuthenticationInfo' type64='^{cssm_data=Q*}'/>
<field declared_type64='uint32' name='KRSPFlags' type64='I'/>
<field declared_type64='CSSM_DATA_PTR' name='KRSPExtensions' type64='^{cssm_data=Q*}'/>
</struct>
<struct name='cssm_kr_wrappedproductinfo' type64='{cssm_kr_wrappedproductinfo=&quot;StandardVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;StandardDescription&quot;[68c]&quot;ProductVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;ProductDescription&quot;[68c]&quot;ProductVendor&quot;[68c]&quot;ProductFlags&quot;I}'>
<field declared_type64='CSSM_VERSION' name='StandardVersion' type64='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'/>
<field declared_type64='CSSM_STRING' name='StandardDescription' type64='[68c]'/>
<field declared_type64='CSSM_VERSION' name='ProductVersion' type64='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'/>
<field declared_type64='CSSM_STRING' name='ProductDescription' type64='[68c]'/>
<field declared_type64='CSSM_STRING' name='ProductVendor' type64='[68c]'/>
<field declared_type64='uint32' name='ProductFlags' type64='I'/>
</struct>
<struct name='cssm_krsubservice' type64='{cssm_krsubservice=&quot;SubServiceId&quot;I&quot;Description&quot;*&quot;WrappedProduct&quot;{cssm_kr_wrappedproductinfo=&quot;StandardVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;StandardDescription&quot;[68c]&quot;ProductVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;ProductDescription&quot;[68c]&quot;ProductVendor&quot;[68c]&quot;ProductFlags&quot;I}}'>
<field declared_type64='uint32' name='SubServiceId' type64='I'/>
<field declared_type64='char*' name='Description' type64='*'/>
<field declared_type64='CSSM_KR_WRAPPEDPRODUCT_INFO' name='WrappedProduct' type64='{cssm_kr_wrappedproductinfo=&quot;StandardVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;StandardDescription&quot;[68c]&quot;ProductVersion&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;ProductDescription&quot;[68c]&quot;ProductVendor&quot;[68c]&quot;ProductFlags&quot;I}'/>
</struct>
<struct name='cssm_list' type64='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'>
<field declared_type64='CSSM_LIST_TYPE' name='ListType' type64='I'/>
<field declared_type64='CSSM_LIST_ELEMENT_PTR' name='Head' type64='^{cssm_list_element=^{cssm_list_element}iI(?={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_data=Q*})}'/>
<field declared_type64='CSSM_LIST_ELEMENT_PTR' name='Tail' type64='^{cssm_list_element=^{cssm_list_element}iI(?={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_data=Q*})}'/>
</struct>
<struct name='cssm_list_element' type64='{cssm_list_element=&quot;NextElement&quot;^{cssm_list_element}&quot;WordID&quot;i&quot;ElementType&quot;I&quot;Element&quot;(?=&quot;Sublist&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Word&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*})}'>
<field declared_type64='struct cssm_list_element*' name='NextElement' type64='^{cssm_list_element=^{cssm_list_element}iI(?={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_data=Q*})}'/>
<field declared_type64='CSSM_WORDID_TYPE' name='WordID' type64='i'/>
<field declared_type64='CSSM_LIST_ELEMENT_TYPE' name='ElementType' type64='I'/>
<field declared_type64='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/Security.framework/Headers/cssmtype.h:394:5)' name='Element' type64='(?=&quot;Sublist&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Word&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*})'/>
</struct>
<struct name='cssm_manager_event_notification' type64='{cssm_manager_event_notification=&quot;DestinationModuleManagerType&quot;I&quot;SourceModuleManagerType&quot;I&quot;Event&quot;I&quot;EventId&quot;I&quot;EventData&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_SERVICE_MASK' name='DestinationModuleManagerType' type64='I'/>
<field declared_type64='CSSM_SERVICE_MASK' name='SourceModuleManagerType' type64='I'/>
<field declared_type64='CSSM_MANAGER_EVENT_TYPES' name='Event' type64='I'/>
<field declared_type64='uint32' name='EventId' type64='I'/>
<field declared_type64='CSSM_DATA' name='EventData' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='cssm_manager_registration_info' type64='{cssm_manager_registration_info=&quot;Initialize&quot;^?&quot;Terminate&quot;^?&quot;RegisterDispatchTable&quot;^?&quot;DeregisterDispatchTable&quot;^?&quot;EventNotifyManager&quot;^?&quot;RefreshFunctionTable&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(uint32, uint32)' function_pointer='true' name='Initialize' type64='^?'>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(void)' function_pointer='true' name='Terminate' type64='^?'>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_STATE_FUNCS_PTR)' function_pointer='true' name='RegisterDispatchTable' type64='^?'>
<arg declared_type64='CSSM_STATE_FUNCS_PTR' type64='^{cssm_state_funcs=^?^?^?^?^?^?}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(void)' function_pointer='true' name='DeregisterDispatchTable' type64='^?'>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)( CSSM_MANAGER_EVENT_NOTIFICATION *)' function_pointer='true' name='EventNotifyManager' type64='^?'>
<arg const='true' declared_type64='CSSM_MANAGER_EVENT_NOTIFICATION*' type64='^{cssm_manager_event_notification=IIII{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_FUNC_NAME_ADDR_PTR, uint32)' function_pointer='true' name='RefreshFunctionTable' type64='^?'>
<arg declared_type64='CSSM_FUNC_NAME_ADDR_PTR' type64='^{cssm_func_name_addr=[68c]^?}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='cssm_memory_funcs' type64='{cssm_memory_funcs=&quot;malloc_func&quot;^?&quot;free_func&quot;^?&quot;realloc_func&quot;^?&quot;calloc_func&quot;^?&quot;AllocRef&quot;^v}'>
<field declared_type64='CSSM_MALLOC' function_pointer='true' name='malloc_func' type64='^?'>
<arg declared_type64='CSSM_SIZE' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CSSM_FREE' function_pointer='true' name='free_func' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CSSM_REALLOC' function_pointer='true' name='realloc_func' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='CSSM_SIZE' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CSSM_CALLOC' function_pointer='true' name='calloc_func' type64='^?'>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_SIZE' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void*' name='AllocRef' type64='^v'/>
</struct>
<struct name='cssm_module_funcs' type64='{cssm_module_funcs=&quot;ServiceType&quot;I&quot;NumberOfServiceFuncs&quot;I&quot;ServiceFuncs&quot;^^?}'>
<field declared_type64='CSSM_SERVICE_TYPE' name='ServiceType' type64='I'/>
<field declared_type64='uint32' name='NumberOfServiceFuncs' type64='I'/>
<field const='true' declared_type64='CSSM_PROC_ADDR*' name='ServiceFuncs' type64='^^?'/>
</struct>
<struct name='cssm_name_list' type64='{cssm_name_list=&quot;NumStrings&quot;I&quot;String&quot;^*}'>
<field declared_type64='uint32' name='NumStrings' type64='I'/>
<field declared_type64='char**' name='String' type64='^*'/>
</struct>
<struct name='cssm_net_address' type64='{cssm_net_address=&quot;AddressType&quot;I&quot;Address&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_NET_ADDRESS_TYPE' name='AddressType' type64='I'/>
<field declared_type64='CSSM_DATA' name='Address' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='cssm_parsed_cert' type64='{cssm_parsed_cert=&quot;CertType&quot;I&quot;ParsedCertFormat&quot;I&quot;ParsedCert&quot;^v}'>
<field declared_type64='CSSM_CERT_TYPE' name='CertType' type64='I'/>
<field declared_type64='CSSM_CERT_PARSE_FORMAT' name='ParsedCertFormat' type64='I'/>
<field declared_type64='void*' name='ParsedCert' type64='^v'/>
</struct>
<struct name='cssm_parsed_crl' type64='{cssm_parsed_crl=&quot;CrlType&quot;I&quot;ParsedCrlFormat&quot;I&quot;ParsedCrl&quot;^v}'>
<field declared_type64='CSSM_CRL_TYPE' name='CrlType' type64='I'/>
<field declared_type64='CSSM_CRL_PARSE_FORMAT' name='ParsedCrlFormat' type64='I'/>
<field declared_type64='void*' name='ParsedCrl' type64='^v'/>
</struct>
<struct name='cssm_pkcs1_oaep_params' type64='{cssm_pkcs1_oaep_params=&quot;HashAlgorithm&quot;I&quot;HashParams&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;MGF&quot;I&quot;MGFParams&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;PSource&quot;I&quot;PSourceParams&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='uint32' name='HashAlgorithm' type64='I'/>
<field declared_type64='CSSM_DATA' name='HashParams' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_PKCS_OAEP_MGF' name='MGF' type64='I'/>
<field declared_type64='CSSM_DATA' name='MGFParams' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_PKCS_OAEP_PSOURCE' name='PSource' type64='I'/>
<field declared_type64='CSSM_DATA' name='PSourceParams' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='cssm_pkcs5_pbkdf1_params' type64='{cssm_pkcs5_pbkdf1_params=&quot;Passphrase&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;InitVector&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_DATA' name='Passphrase' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='InitVector' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='cssm_pkcs5_pbkdf2_params' type64='{cssm_pkcs5_pbkdf2_params=&quot;Passphrase&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;PseudoRandomFunction&quot;I}'>
<field declared_type64='CSSM_DATA' name='Passphrase' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_PKCS5_PBKDF2_PRF' name='PseudoRandomFunction' type64='I'/>
</struct>
<struct name='cssm_query' type64='{cssm_query=&quot;RecordType&quot;I&quot;Conjunctive&quot;I&quot;NumSelectionPredicates&quot;I&quot;SelectionPredicate&quot;^{cssm_selection_predicate}&quot;QueryLimits&quot;{cssm_query_limits=&quot;TimeLimit&quot;I&quot;SizeLimit&quot;I}&quot;QueryFlags&quot;I}'>
<field declared_type64='CSSM_DB_RECORDTYPE' name='RecordType' type64='I'/>
<field declared_type64='CSSM_DB_CONJUNCTIVE' name='Conjunctive' type64='I'/>
<field declared_type64='uint32' name='NumSelectionPredicates' type64='I'/>
<field declared_type64='CSSM_SELECTION_PREDICATE_PTR' name='SelectionPredicate' type64='^{cssm_selection_predicate=I{cssm_db_attribute_data={cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}I^{cssm_data}}}'/>
<field declared_type64='CSSM_QUERY_LIMITS' name='QueryLimits' type64='{cssm_query_limits=&quot;TimeLimit&quot;I&quot;SizeLimit&quot;I}'/>
<field declared_type64='CSSM_QUERY_FLAGS' name='QueryFlags' type64='I'/>
</struct>
<struct name='cssm_query_limits' type64='{cssm_query_limits=&quot;TimeLimit&quot;I&quot;SizeLimit&quot;I}'>
<field declared_type64='uint32' name='TimeLimit' type64='I'/>
<field declared_type64='uint32' name='SizeLimit' type64='I'/>
</struct>
<struct name='cssm_query_size_data' type64='{cssm_query_size_data=&quot;SizeInputBlock&quot;I&quot;SizeOutputBlock&quot;I}'>
<field declared_type64='uint32' name='SizeInputBlock' type64='I'/>
<field declared_type64='uint32' name='SizeOutputBlock' type64='I'/>
</struct>
<struct name='cssm_range' type64='{cssm_range=&quot;Min&quot;I&quot;Max&quot;I}'>
<field declared_type64='uint32' name='Min' type64='I'/>
<field declared_type64='uint32' name='Max' type64='I'/>
</struct>
<struct name='cssm_resource_control_context' type64='{cssm_resource_control_context=&quot;AccessCred&quot;^{cssm_access_credentials}&quot;InitialAclEntry&quot;{cssm_acl_entry_input=&quot;Prototype&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;Callback&quot;^?&quot;CallerContext&quot;^v}}'>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='AccessCred' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<field declared_type64='CSSM_ACL_ENTRY_INPUT' name='InitialAclEntry' type64='{cssm_acl_entry_input=&quot;Prototype&quot;{cssm_acl_entry_prototype=&quot;TypedSubject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;Authorization&quot;{cssm_authorizationgroup=&quot;NumberOfAuthTags&quot;I&quot;AuthTags&quot;^i}&quot;TimeRange&quot;{cssm_acl_validity_period=&quot;StartDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;EndDate&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;EntryTag&quot;[68c]}&quot;Callback&quot;^?&quot;CallerContext&quot;^v}'/>
</struct>
<struct name='cssm_sample' type64='{cssm_sample=&quot;TypedSample&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Verifier&quot;^{cssm_subservice_uid}}'>
<field declared_type64='CSSM_LIST' name='TypedSample' type64='{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}'/>
<field const='true' declared_type64='CSSM_SUBSERVICE_UID*' name='Verifier' type64='^{cssm_subservice_uid={cssm_guid=ISS[8C]}{cssm_version=II}II}'/>
</struct>
<struct name='cssm_samplegroup' type64='{cssm_samplegroup=&quot;NumberOfSamples&quot;I&quot;Samples&quot;^{cssm_sample}}'>
<field declared_type64='uint32' name='NumberOfSamples' type64='I'/>
<field const='true' declared_type64='CSSM_SAMPLE*' name='Samples' type64='^{cssm_sample={cssm_list=I^{cssm_list_element}^{cssm_list_element}}^{cssm_subservice_uid}}'/>
</struct>
<struct name='cssm_selection_predicate' type64='{cssm_selection_predicate=&quot;DbOperator&quot;I&quot;Attribute&quot;{cssm_db_attribute_data=&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}&quot;NumberOfValues&quot;I&quot;Value&quot;^{cssm_data}}}'>
<field declared_type64='CSSM_DB_OPERATOR' name='DbOperator' type64='I'/>
<field declared_type64='CSSM_DB_ATTRIBUTE_DATA' name='Attribute' type64='{cssm_db_attribute_data=&quot;Info&quot;{cssm_db_attribute_info=&quot;AttributeNameFormat&quot;I&quot;Label&quot;(cssm_db_attribute_label=&quot;AttributeName&quot;*&quot;AttributeOID&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;AttributeID&quot;I)&quot;AttributeFormat&quot;I}&quot;NumberOfValues&quot;I&quot;Value&quot;^{cssm_data}}'/>
</struct>
<struct name='cssm_spi_ac_funcs' type64='{cssm_spi_ac_funcs=&quot;AuthCompute&quot;^?&quot;PassThrough&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_AC_HANDLE, CSSM_TUPLEGROUP *, CSSM_TUPLEGROUP *, uint32, CSSM_LIST *, CSSM_LIST *, CSSM_LIST *, CSSM_TUPLEGROUP_PTR)' function_pointer='true' name='AuthCompute' type64='^?'>
<arg declared_type64='CSSM_AC_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_TUPLEGROUP*' type64='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
<arg const='true' declared_type64='CSSM_TUPLEGROUP*' type64='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_LIST*' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg const='true' declared_type64='CSSM_LIST*' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg const='true' declared_type64='CSSM_LIST*' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg declared_type64='CSSM_TUPLEGROUP_PTR' type64='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_AC_HANDLE, CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DL_DB_LIST *, uint32, void *, void **)' function_pointer='true' name='PassThrough' type64='^?'>
<arg declared_type64='CSSM_AC_HANDLE' type64='q'/>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DL_DB_LIST*' type64='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='cssm_spi_cl_funcs' type64='{cssm_spi_cl_funcs=&quot;CertCreateTemplate&quot;^?&quot;CertGetAllTemplateFields&quot;^?&quot;CertSign&quot;^?&quot;CertVerify&quot;^?&quot;CertVerifyWithKey&quot;^?&quot;CertGetFirstFieldValue&quot;^?&quot;CertGetNextFieldValue&quot;^?&quot;CertAbortQuery&quot;^?&quot;CertGetKeyInfo&quot;^?&quot;CertGetAllFields&quot;^?&quot;FreeFields&quot;^?&quot;FreeFieldValue&quot;^?&quot;CertCache&quot;^?&quot;CertGetFirstCachedFieldValue&quot;^?&quot;CertGetNextCachedFieldValue&quot;^?&quot;CertAbortCache&quot;^?&quot;CertGroupToSignedBundle&quot;^?&quot;CertGroupFromVerifiedBundle&quot;^?&quot;CertDescribeFormat&quot;^?&quot;CrlCreateTemplate&quot;^?&quot;CrlSetFields&quot;^?&quot;CrlAddCert&quot;^?&quot;CrlRemoveCert&quot;^?&quot;CrlSign&quot;^?&quot;CrlVerify&quot;^?&quot;CrlVerifyWithKey&quot;^?&quot;IsCertInCrl&quot;^?&quot;CrlGetFirstFieldValue&quot;^?&quot;CrlGetNextFieldValue&quot;^?&quot;CrlAbortQuery&quot;^?&quot;CrlGetAllFields&quot;^?&quot;CrlCache&quot;^?&quot;IsCertInCachedCrl&quot;^?&quot;CrlGetFirstCachedFieldValue&quot;^?&quot;CrlGetNextCachedFieldValue&quot;^?&quot;CrlGetAllCachedRecordFields&quot;^?&quot;CrlAbortCache&quot;^?&quot;CrlDescribeFormat&quot;^?&quot;PassThrough&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' function_pointer='true' name='CertCreateTemplate' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' function_pointer='true' name='CertGetAllTemplateFields' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_FIELD_PTR*' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_FIELD *, uint32, CSSM_DATA_PTR)' function_pointer='true' name='CertSign' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_FIELD *, uint32)' function_pointer='true' name='CertVerify' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' function_pointer='true' name='CertVerifyWithKey' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' function_pointer='true' name='CertGetFirstFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_OID*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' function_pointer='true' name='CertGetNextFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' function_pointer='true' name='CertAbortQuery' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_KEY_PTR *)' function_pointer='true' name='CertGetKeyInfo' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_KEY_PTR*' type64='^^{cssm_key}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' function_pointer='true' name='CertGetAllFields' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_FIELD_PTR*' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD_PTR *)' function_pointer='true' name='FreeFields' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_FIELD_PTR*' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_OID *, CSSM_DATA_PTR)' function_pointer='true' name='FreeFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_OID*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_HANDLE_PTR)' function_pointer='true' name='CertCache' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' function_pointer='true' name='CertGetFirstCachedFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_OID*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' function_pointer='true' name='CertGetNextCachedFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' function_pointer='true' name='CertAbortCache' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_CERTGROUP *, CSSM_CERT_BUNDLE_HEADER *, CSSM_DATA_PTR)' function_pointer='true' name='CertGroupToSignedBundle' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_CERT_BUNDLE_HEADER*' type64='^{cssm_cert_bundle_header=II}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_CERT_BUNDLE *, CSSM_DATA *, CSSM_CERTGROUP_PTR *)' function_pointer='true' name='CertGroupFromVerifiedBundle' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CERT_BUNDLE*' type64='^{cssm_cert_bundle={cssm_cert_bundle_header=II}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_CERTGROUP_PTR*' type64='^^{cssm_certgroup}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32 *, CSSM_OID_PTR *)' function_pointer='true' name='CertDescribeFormat' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_OID_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' function_pointer='true' name='CrlCreateTemplate' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA *, CSSM_DATA_PTR)' function_pointer='true' name='CrlSetFields' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32, CSSM_FIELD *, CSSM_DATA *, CSSM_DATA_PTR)' function_pointer='true' name='CrlAddCert' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_DATA_PTR)' function_pointer='true' name='CrlRemoveCert' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_FIELD *, uint32, CSSM_DATA_PTR)' function_pointer='true' name='CrlSign' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_FIELD *, uint32)' function_pointer='true' name='CrlVerify' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' function_pointer='true' name='CrlVerifyWithKey' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_DATA *, CSSM_BOOL *)' function_pointer='true' name='IsCertInCrl' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_BOOL*' type64='^i'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' function_pointer='true' name='CrlGetFirstFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_OID*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' function_pointer='true' name='CrlGetNextFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' function_pointer='true' name='CrlAbortQuery' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' function_pointer='true' name='CrlGetAllFields' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_FIELD_PTR*' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_HANDLE_PTR)' function_pointer='true' name='CrlCache' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_DATA *, CSSM_HANDLE, CSSM_BOOL *, CSSM_DATA_PTR)' function_pointer='true' name='IsCertInCachedCrl' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_BOOL*' type64='^i'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA *, CSSM_OID *, CSSM_HANDLE_PTR, uint32 *, CSSM_DATA_PTR *)' function_pointer='true' name='CrlGetFirstCachedFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_OID*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA_PTR *)' function_pointer='true' name='CrlGetNextCachedFieldValue' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' function_pointer='true' name='CrlGetAllCachedRecordFields' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_FIELD_PTR*' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_HANDLE)' function_pointer='true' name='CrlAbortCache' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, uint32 *, CSSM_OID_PTR *)' function_pointer='true' name='CrlDescribeFormat' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_OID_PTR*' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CL_HANDLE, CSSM_CC_HANDLE, uint32, void *, void **)' function_pointer='true' name='PassThrough' type64='^?'>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='cssm_spi_csp_funcs' type64='{cssm_spi_csp_funcs=&quot;EventNotify&quot;^?&quot;QuerySize&quot;^?&quot;SignData&quot;^?&quot;SignDataInit&quot;^?&quot;SignDataUpdate&quot;^?&quot;SignDataFinal&quot;^?&quot;VerifyData&quot;^?&quot;VerifyDataInit&quot;^?&quot;VerifyDataUpdate&quot;^?&quot;VerifyDataFinal&quot;^?&quot;DigestData&quot;^?&quot;DigestDataInit&quot;^?&quot;DigestDataUpdate&quot;^?&quot;DigestDataClone&quot;^?&quot;DigestDataFinal&quot;^?&quot;GenerateMac&quot;^?&quot;GenerateMacInit&quot;^?&quot;GenerateMacUpdate&quot;^?&quot;GenerateMacFinal&quot;^?&quot;VerifyMac&quot;^?&quot;VerifyMacInit&quot;^?&quot;VerifyMacUpdate&quot;^?&quot;VerifyMacFinal&quot;^?&quot;EncryptData&quot;^?&quot;EncryptDataInit&quot;^?&quot;EncryptDataUpdate&quot;^?&quot;EncryptDataFinal&quot;^?&quot;DecryptData&quot;^?&quot;DecryptDataInit&quot;^?&quot;DecryptDataUpdate&quot;^?&quot;DecryptDataFinal&quot;^?&quot;QueryKeySizeInBits&quot;^?&quot;GenerateKey&quot;^?&quot;GenerateKeyPair&quot;^?&quot;GenerateRandom&quot;^?&quot;GenerateAlgorithmParams&quot;^?&quot;WrapKey&quot;^?&quot;UnwrapKey&quot;^?&quot;DeriveKey&quot;^?&quot;FreeKey&quot;^?&quot;PassThrough&quot;^?&quot;Login&quot;^?&quot;Logout&quot;^?&quot;ChangeLoginAcl&quot;^?&quot;ObtainPrivateKeyFromPublicKey&quot;^?&quot;RetrieveUniqueId&quot;^?&quot;RetrieveCounter&quot;^?&quot;VerifyDevice&quot;^?&quot;GetTimeValue&quot;^?&quot;GetOperationalStatistics&quot;^?&quot;GetLoginAcl&quot;^?&quot;GetKeyAcl&quot;^?&quot;ChangeKeyAcl&quot;^?&quot;GetKeyOwner&quot;^?&quot;ChangeKeyOwner&quot;^?&quot;GetLoginOwner&quot;^?&quot;ChangeLoginOwner&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CONTEXT_EVENT, CSSM_CC_HANDLE, CSSM_CONTEXT *)' function_pointer='true' name='EventNotify' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CONTEXT_EVENT' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_BOOL, uint32, CSSM_QUERY_SIZE_DATA_PTR)' function_pointer='true' name='QuerySize' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_BOOL' type64='i'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_QUERY_SIZE_DATA_PTR' type64='^{cssm_query_size_data=II}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_ALGORITHMS, CSSM_DATA_PTR)' function_pointer='true' name='SignData' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_ALGORITHMS' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' function_pointer='true' name='SignDataInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' function_pointer='true' name='SignDataUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='SignDataFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_ALGORITHMS, CSSM_DATA *)' function_pointer='true' name='VerifyData' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_ALGORITHMS' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' function_pointer='true' name='VerifyDataInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' function_pointer='true' name='VerifyDataUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' function_pointer='true' name='VerifyDataFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR)' function_pointer='true' name='DigestData' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' function_pointer='true' name='DigestDataInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' function_pointer='true' name='DigestDataUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CC_HANDLE)' function_pointer='true' name='DigestDataClone' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='DigestDataFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR)' function_pointer='true' name='GenerateMac' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' function_pointer='true' name='GenerateMacInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' function_pointer='true' name='GenerateMacUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='GenerateMacFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA *)' function_pointer='true' name='VerifyMac' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *)' function_pointer='true' name='VerifyMacInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32)' function_pointer='true' name='VerifyMacUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *)' function_pointer='true' name='VerifyMacFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, CSSM_SIZE *, CSSM_DATA_PTR, CSSM_PRIVILEGE)' function_pointer='true' name='EncryptData' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_SIZE*' type64='^Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_PRIVILEGE)' function_pointer='true' name='EncryptDataInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, CSSM_SIZE *)' function_pointer='true' name='EncryptDataUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_SIZE*' type64='^Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='EncryptDataFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, CSSM_SIZE *, CSSM_DATA_PTR, CSSM_PRIVILEGE)' function_pointer='true' name='DecryptData' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_SIZE*' type64='^Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_PRIVILEGE)' function_pointer='true' name='DecryptDataInit' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, uint32, CSSM_DATA_PTR, uint32, CSSM_SIZE *)' function_pointer='true' name='DecryptDataUpdate' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_SIZE*' type64='^Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='DecryptDataFinal' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_KEY *, CSSM_KEY_SIZE_PTR)' function_pointer='true' name='QueryKeySizeInBits' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_KEY_SIZE_PTR' type64='^{cssm_key_size=II}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR, CSSM_PRIVILEGE)' function_pointer='true' name='GenerateKey' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, uint32, CSSM_DATA *, CSSM_KEY_PTR, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR, CSSM_PRIVILEGE)' function_pointer='true' name='GenerateKeyPair' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA_PTR)' function_pointer='true' name='GenerateRandom' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, CSSM_DATA_PTR, uint32 *, CSSM_CONTEXT_ATTRIBUTE_PTR *)' function_pointer='true' name='GenerateAlgorithmParams' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_CONTEXT_ATTRIBUTE_PTR*' type64='^^{cssm_context_attribute}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_ACCESS_CREDENTIALS *, CSSM_KEY *, CSSM_DATA *, CSSM_WRAP_KEY_PTR, CSSM_PRIVILEGE)' function_pointer='true' name='WrapKey' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_WRAP_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_KEY *, CSSM_WRAP_KEY *, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR, CSSM_DATA_PTR, CSSM_PRIVILEGE)' function_pointer='true' name='UnwrapKey' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_WRAP_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA_PTR, uint32, uint32, CSSM_DATA *, CSSM_RESOURCE_CONTROL_CONTEXT *, CSSM_KEY_PTR)' function_pointer='true' name='DeriveKey' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_KEY_PTR, CSSM_BOOL)' function_pointer='true' name='FreeKey' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_BOOL' type64='i'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, void *, void **)' function_pointer='true' name='PassThrough' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_DATA *, void *)' function_pointer='true' name='Login' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE)' function_pointer='true' name='Logout' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_EDIT *)' function_pointer='true' name='ChangeLoginAcl' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_ACL_EDIT*' type64='^{cssm_acl_edit=Iq^{cssm_acl_entry_input}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_KEY *, CSSM_KEY_PTR)' function_pointer='true' name='ObtainPrivateKeyFromPublicKey' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='RetrieveUniqueId' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_DATA_PTR)' function_pointer='true' name='RetrieveCounter' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_DATA *)' function_pointer='true' name='VerifyDevice' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ALGORITHMS, CSSM_DATA *)' function_pointer='true' name='GetTimeValue' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_ALGORITHMS' type64='I'/>
<arg declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_CSP_OPERATIONAL_STATISTICS *)' function_pointer='true' name='GetOperationalStatistics' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_OPERATIONAL_STATISTICS*' type64='^{cssm_csp_operational_statistics=iIIIIIIIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_STRING *, uint32 *, CSSM_ACL_ENTRY_INFO_PTR *)' function_pointer='true' name='GetLoginAcl' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_STRING*' type64='^[68c]'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_ACL_ENTRY_INFO_PTR*' type64='^^{cssm_acl_entry_info}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_KEY *, CSSM_STRING *, uint32 *, CSSM_ACL_ENTRY_INFO_PTR *)' function_pointer='true' name='GetKeyAcl' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_STRING*' type64='^[68c]'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_ACL_ENTRY_INFO_PTR*' type64='^^{cssm_acl_entry_info}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_EDIT *, CSSM_KEY *)' function_pointer='true' name='ChangeKeyAcl' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_ACL_EDIT*' type64='^{cssm_acl_edit=Iq^{cssm_acl_entry_input}}'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_KEY *, CSSM_ACL_OWNER_PROTOTYPE_PTR)' function_pointer='true' name='GetKeyOwner' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_ACL_OWNER_PROTOTYPE_PTR' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_KEY *, CSSM_ACL_OWNER_PROTOTYPE *)' function_pointer='true' name='ChangeKeyOwner' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_KEY*' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_ACL_OWNER_PROTOTYPE*' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACL_OWNER_PROTOTYPE_PTR)' function_pointer='true' name='GetLoginOwner' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_ACL_OWNER_PROTOTYPE_PTR' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CSP_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_OWNER_PROTOTYPE *)' function_pointer='true' name='ChangeLoginOwner' type64='^?'>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_ACL_OWNER_PROTOTYPE*' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='cssm_spi_dl_funcs' type64='{cssm_spi_dl_funcs=&quot;DbOpen&quot;^?&quot;DbClose&quot;^?&quot;DbCreate&quot;^?&quot;DbDelete&quot;^?&quot;CreateRelation&quot;^?&quot;DestroyRelation&quot;^?&quot;Authenticate&quot;^?&quot;GetDbAcl&quot;^?&quot;ChangeDbAcl&quot;^?&quot;GetDbOwner&quot;^?&quot;ChangeDbOwner&quot;^?&quot;GetDbNames&quot;^?&quot;GetDbNameFromHandle&quot;^?&quot;FreeNameList&quot;^?&quot;DataInsert&quot;^?&quot;DataDelete&quot;^?&quot;DataModify&quot;^?&quot;DataGetFirst&quot;^?&quot;DataGetNext&quot;^?&quot;DataAbortQuery&quot;^?&quot;DataGetFromUniqueRecordId&quot;^?&quot;FreeUniqueRecord&quot;^?&quot;PassThrough&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_DB_ACCESS_TYPE, CSSM_ACCESS_CREDENTIALS *, void *, CSSM_DB_HANDLE *)' function_pointer='true' name='DbOpen' type64='^?'>
<arg declared_type64='CSSM_DL_HANDLE' type64='q'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='CSSM_NET_ADDRESS*' type64='^{cssm_net_address=I{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DB_ACCESS_TYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='CSSM_DB_HANDLE*' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE)' function_pointer='true' name='DbClose' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_DBINFO *, CSSM_DB_ACCESS_TYPE, CSSM_RESOURCE_CONTROL_CONTEXT *, void *, CSSM_DB_HANDLE *)' function_pointer='true' name='DbCreate' type64='^?'>
<arg declared_type64='CSSM_DL_HANDLE' type64='q'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='CSSM_NET_ADDRESS*' type64='^{cssm_net_address=I{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DBINFO*' type64='^{cssm_dbinfo=I^{cssm_db_parsing_module_info}^{cssm_db_record_attribute_info}^{cssm_db_record_index_info}i*^v}'/>
<arg declared_type64='CSSM_DB_ACCESS_TYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='CSSM_DB_HANDLE*' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_ACCESS_CREDENTIALS *)' function_pointer='true' name='DbDelete' type64='^?'>
<arg declared_type64='CSSM_DL_HANDLE' type64='q'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='CSSM_NET_ADDRESS*' type64='^{cssm_net_address=I{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, char *, uint32, CSSM_DB_SCHEMA_ATTRIBUTE_INFO *, uint32, CSSM_DB_SCHEMA_INDEX_INFO *)' function_pointer='true' name='CreateRelation' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_SCHEMA_ATTRIBUTE_INFO*' type64='^{cssm_db_schema_attribute_info=I*{cssm_data=Q*}I}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_SCHEMA_INDEX_INFO*' type64='^{cssm_db_schema_index_info=IIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE)' function_pointer='true' name='DestroyRelation' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_ACCESS_TYPE, CSSM_ACCESS_CREDENTIALS *)' function_pointer='true' name='Authenticate' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_ACCESS_TYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_STRING *, uint32 *, CSSM_ACL_ENTRY_INFO_PTR *)' function_pointer='true' name='GetDbAcl' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_STRING*' type64='^[68c]'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_ACL_ENTRY_INFO_PTR*' type64='^^{cssm_acl_entry_info}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_EDIT *)' function_pointer='true' name='ChangeDbAcl' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_ACL_EDIT*' type64='^{cssm_acl_edit=Iq^{cssm_acl_entry_input}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_ACL_OWNER_PROTOTYPE_PTR)' function_pointer='true' name='GetDbOwner' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_ACL_OWNER_PROTOTYPE_PTR' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_ACCESS_CREDENTIALS *, CSSM_ACL_OWNER_PROTOTYPE *)' function_pointer='true' name='ChangeDbOwner' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_ACL_OWNER_PROTOTYPE*' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_HANDLE, CSSM_NAME_LIST_PTR *)' function_pointer='true' name='GetDbNames' type64='^?'>
<arg declared_type64='CSSM_DL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_NAME_LIST_PTR*' type64='^^{cssm_name_list}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, char **)' function_pointer='true' name='GetDbNameFromHandle' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_HANDLE, CSSM_NAME_LIST_PTR)' function_pointer='true' name='FreeNameList' type64='^?'>
<arg declared_type64='CSSM_DL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_NAME_LIST_PTR' type64='^{cssm_name_list=I^*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_UNIQUE_RECORD_PTR *)' function_pointer='true' name='DataInsert' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *)' function_pointer='true' name='DataDelete' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_DB_UNIQUE_RECORD*' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_UNIQUE_RECORD_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_MODIFY_MODE)' function_pointer='true' name='DataModify' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_MODIFY_MODE' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_QUERY *, CSSM_HANDLE_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' function_pointer='true' name='DataGetFirst' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_QUERY*' type64='^{cssm_query=III^{cssm_selection_predicate}{cssm_query_limits=II}I}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_HANDLE, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' function_pointer='true' name='DataGetNext' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_HANDLE)' function_pointer='true' name='DataAbortQuery' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR)' function_pointer='true' name='DataGetFromUniqueRecordId' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_DB_UNIQUE_RECORD*' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, CSSM_DB_UNIQUE_RECORD_PTR)' function_pointer='true' name='FreeUniqueRecord' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_DL_DB_HANDLE, uint32, void *, void **)' function_pointer='true' name='PassThrough' type64='^?'>
<arg declared_type64='CSSM_DL_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='cssm_spi_kr_funcs' type64='{cssm_spi_kr_funcs=&quot;RegistrationRequest&quot;^?&quot;RegistrationRetrieve&quot;^?&quot;GenerateRecoveryFields&quot;^?&quot;ProcessRecoveryFields&quot;^?&quot;RecoveryRequest&quot;^?&quot;RecoveryRetrieve&quot;^?&quot;GetRecoveredObject&quot;^?&quot;RecoveryRequestAbort&quot;^?&quot;PassThrough&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_ACCESS_CREDENTIALS *, CSSM_KR_POLICY_FLAGS, sint32 *, CSSM_HANDLE_PTR)' function_pointer='true' name='RegistrationRequest' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg declared_type64='CSSM_KR_POLICY_FLAGS' type64='I'/>
<arg declared_type64='sint32*' type64='^i'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE, sint32 *, CSSM_KR_PROFILE_PTR)' function_pointer='true' name='RegistrationRetrieve' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='sint32*' type64='^i'/>
<arg declared_type64='CSSM_KR_PROFILE_PTR' type64='^{cssm_kr_profile={cssm_kr_name=CC*}^{cssm_certgroup}^{cssm_certgroup}C^{cssm_certgroup}C^{cssm_certgroup}C^{cssm_certgroup}^{cssm_data}I^{cssm_data}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_KR_POLICY_FLAGS, CSSM_DATA_PTR)' function_pointer='true' name='GenerateRecoveryFields' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_KR_POLICY_FLAGS' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_KR_POLICY_FLAGS, CSSM_DATA *)' function_pointer='true' name='ProcessRecoveryFields' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_KR_POLICY_FLAGS' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_DATA *, CSSM_ACCESS_CREDENTIALS *, sint32 *, CSSM_HANDLE_PTR)' function_pointer='true' name='RecoveryRequest' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg declared_type64='sint32*' type64='^i'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE, sint32 *, CSSM_HANDLE_PTR, uint32 *)' function_pointer='true' name='RecoveryRetrieve' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='sint32*' type64='^i'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='uint32*' type64='^I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE, uint32, CSSM_CSP_HANDLE, CSSM_RESOURCE_CONTROL_CONTEXT *, uint32, CSSM_KEY_PTR, CSSM_DATA_PTR)' function_pointer='true' name='GetRecoveredObject' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_KEY_PTR' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_HANDLE)' function_pointer='true' name='RecoveryRequestAbort' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, CSSM_CONTEXT *, CSSM_CC_HANDLE, CSSM_CONTEXT *, uint32, void *, void **)' function_pointer='true' name='PassThrough' type64='^?'>
<arg declared_type64='CSSM_KRSP_HANDLE' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='cssm_spi_tp_funcs' type64='{cssm_spi_tp_funcs=&quot;SubmitCredRequest&quot;^?&quot;RetrieveCredResult&quot;^?&quot;ConfirmCredResult&quot;^?&quot;ReceiveConfirmation&quot;^?&quot;CertReclaimKey&quot;^?&quot;CertReclaimAbort&quot;^?&quot;FormRequest&quot;^?&quot;FormSubmit&quot;^?&quot;CertGroupVerify&quot;^?&quot;CertCreateTemplate&quot;^?&quot;CertGetAllTemplateFields&quot;^?&quot;CertSign&quot;^?&quot;CrlVerify&quot;^?&quot;CrlCreateTemplate&quot;^?&quot;CertRevoke&quot;^?&quot;CertRemoveFromCrlTemplate&quot;^?&quot;CrlSign&quot;^?&quot;ApplyCrlToDb&quot;^?&quot;CertGroupConstruct&quot;^?&quot;CertGroupPrune&quot;^?&quot;CertGroupToTupleGroup&quot;^?&quot;TupleGroupToCertGroup&quot;^?&quot;PassThrough&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_TP_AUTHORITY_ID *, CSSM_TP_AUTHORITY_REQUEST_TYPE, CSSM_TP_REQUEST_SET *, CSSM_TP_CALLERAUTH_CONTEXT *, sint32 *, CSSM_DATA_PTR)' function_pointer='true' name='SubmitCredRequest' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_TP_AUTHORITY_ID*' type64='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}'/>
<arg declared_type64='CSSM_TP_AUTHORITY_REQUEST_TYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_TP_REQUEST_SET*' type64='^{cssm_tp_request_set=I^v}'/>
<arg const='true' declared_type64='CSSM_TP_CALLERAUTH_CONTEXT*' type64='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}'/>
<arg declared_type64='sint32*' type64='^i'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_DATA *, CSSM_TP_CALLERAUTH_CONTEXT *, sint32 *, CSSM_BOOL *, CSSM_TP_RESULT_SET_PTR *)' function_pointer='true' name='RetrieveCredResult' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_TP_CALLERAUTH_CONTEXT*' type64='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}'/>
<arg declared_type64='sint32*' type64='^i'/>
<arg declared_type64='CSSM_BOOL*' type64='^i'/>
<arg declared_type64='CSSM_TP_RESULT_SET_PTR*' type64='^^{cssm_tp_result_set}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_DATA *, CSSM_TP_CALLERAUTH_CONTEXT *, CSSM_TP_CONFIRM_RESPONSE *, CSSM_TP_AUTHORITY_ID *)' function_pointer='true' name='ConfirmCredResult' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_TP_CALLERAUTH_CONTEXT*' type64='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}'/>
<arg const='true' declared_type64='CSSM_TP_CONFIRM_RESPONSE*' type64='^{cssm_tp_confirm_response=I^I}'/>
<arg const='true' declared_type64='CSSM_TP_AUTHORITY_ID*' type64='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_DATA *, CSSM_TP_CONFIRM_RESPONSE_PTR *, sint32 *)' function_pointer='true' name='ReceiveConfirmation' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_TP_CONFIRM_RESPONSE_PTR*' type64='^^{cssm_tp_confirm_response}'/>
<arg declared_type64='sint32*' type64='^i'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CERTGROUP *, uint32, CSSM_LONG_HANDLE, CSSM_CSP_HANDLE, CSSM_RESOURCE_CONTROL_CONTEXT *)' function_pointer='true' name='CertReclaimKey' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_LONG_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_LONG_HANDLE)' function_pointer='true' name='CertReclaimAbort' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_LONG_HANDLE' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_TP_AUTHORITY_ID *, CSSM_TP_FORM_TYPE, CSSM_DATA_PTR)' function_pointer='true' name='FormRequest' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_TP_AUTHORITY_ID*' type64='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}'/>
<arg declared_type64='CSSM_TP_FORM_TYPE' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_TP_FORM_TYPE, CSSM_DATA *, CSSM_TP_AUTHORITY_ID *, CSSM_TP_AUTHORITY_ID *, CSSM_ACCESS_CREDENTIALS_PTR)' function_pointer='true' name='FormSubmit' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_TP_FORM_TYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_TP_AUTHORITY_ID*' type64='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}'/>
<arg const='true' declared_type64='CSSM_TP_AUTHORITY_ID*' type64='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}'/>
<arg declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR)' function_pointer='true' name='CertGroupVerify' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' function_pointer='true' name='CertCreateTemplate' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_DATA *, uint32 *, CSSM_FIELD_PTR *)' function_pointer='true' name='CertGetAllTemplateFields' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_FIELD_PTR*' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DATA *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR)' function_pointer='true' name='CertSign' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_ENCODED_CRL *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR)' function_pointer='true' name='CrlVerify' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ENCODED_CRL*' type64='^{cssm_encoded_crl=II{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, uint32, CSSM_FIELD *, CSSM_DATA_PTR)' function_pointer='true' name='CrlCreateTemplate' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_DATA *, CSSM_CERTGROUP *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_TP_CERTCHANGE_REASON, CSSM_DATA_PTR)' function_pointer='true' name='CertRevoke' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<arg declared_type64='CSSM_TP_CERTCHANGE_REASON' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_DATA *, CSSM_CERTGROUP *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR)' function_pointer='true' name='CertRemoveFromCrlTemplate' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_ENCODED_CRL *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR)' function_pointer='true' name='CrlSign' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_ENCODED_CRL*' type64='^{cssm_encoded_crl=II{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_ENCODED_CRL *, CSSM_CERTGROUP *, CSSM_TP_VERIFY_CONTEXT *, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR)' function_pointer='true' name='ApplyCrlToDb' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_ENCODED_CRL*' type64='^{cssm_encoded_crl=II{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, CSSM_DL_DB_LIST *, void *, CSSM_CERTGROUP *, CSSM_CERTGROUP_PTR *)' function_pointer='true' name='CertGroupConstruct' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DL_DB_LIST*' type64='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg declared_type64='CSSM_CERTGROUP_PTR*' type64='^^{cssm_certgroup}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_DL_DB_LIST *, CSSM_CERTGROUP *, CSSM_CERTGROUP_PTR *)' function_pointer='true' name='CertGroupPrune' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_DL_DB_LIST*' type64='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg declared_type64='CSSM_CERTGROUP_PTR*' type64='^^{cssm_certgroup}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CERTGROUP *, CSSM_TUPLEGROUP_PTR *)' function_pointer='true' name='CertGroupToTupleGroup' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg declared_type64='CSSM_TUPLEGROUP_PTR*' type64='^^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_TUPLEGROUP *, CSSM_CERTGROUP_PTR *)' function_pointer='true' name='TupleGroupToCertGroup' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg const='true' declared_type64='CSSM_TUPLEGROUP*' type64='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
<arg declared_type64='CSSM_CERTGROUP_PTR*' type64='^^{cssm_certgroup}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, CSSM_DL_DB_LIST *, uint32, void *, void **)' function_pointer='true' name='PassThrough' type64='^?'>
<arg declared_type64='CSSM_TP_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg const='true' declared_type64='CSSM_DL_DB_LIST*' type64='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='cssm_state_funcs' type64='{cssm_state_funcs=&quot;cssm_GetAttachFunctions&quot;^?&quot;cssm_ReleaseAttachFunctions&quot;^?&quot;cssm_GetAppMemoryFunctions&quot;^?&quot;cssm_IsFuncCallValid&quot;^?&quot;cssm_DeregisterManagerServices&quot;^?&quot;cssm_DeliverModuleManagerEvent&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_SERVICE_MASK, void **, CSSM_GUID_PTR, CSSM_BOOL *)' function_pointer='true' name='cssm_GetAttachFunctions' type64='^?'>
<arg declared_type64='CSSM_MODULE_HANDLE' type64='q'/>
<arg declared_type64='CSSM_SERVICE_MASK' type64='I'/>
<arg declared_type64='void**' type64='^^v'/>
<arg declared_type64='CSSM_GUID_PTR' type64='^{cssm_guid=ISS[8C]}'/>
<arg declared_type64='CSSM_BOOL*' type64='^i'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_MODULE_HANDLE)' function_pointer='true' name='cssm_ReleaseAttachFunctions' type64='^?'>
<arg declared_type64='CSSM_MODULE_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_UPCALLS_PTR)' function_pointer='true' name='cssm_GetAppMemoryFunctions' type64='^?'>
<arg declared_type64='CSSM_MODULE_HANDLE' type64='q'/>
<arg declared_type64='CSSM_UPCALLS_PTR' type64='^{cssm_upcalls=^?^?^?^?^?^?}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_PROC_ADDR, CSSM_PROC_ADDR, CSSM_PRIVILEGE, CSSM_PRIVILEGE *, CSSM_BITMASK, CSSM_BOOL *)' function_pointer='true' name='cssm_IsFuncCallValid' type64='^?'>
<arg declared_type64='CSSM_MODULE_HANDLE' type64='q'/>
<arg declared_type64='CSSM_PROC_ADDR' function_pointer='true' type64='^?'>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='CSSM_PROC_ADDR' function_pointer='true' type64='^?'>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='CSSM_PRIVILEGE' type64='Q'/>
<arg declared_type64='CSSM_PRIVILEGE*' type64='^Q'/>
<arg declared_type64='CSSM_BITMASK' type64='I'/>
<arg declared_type64='CSSM_BOOL*' type64='^i'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)( CSSM_GUID *)' function_pointer='true' name='cssm_DeregisterManagerServices' type64='^?'>
<arg const='true' declared_type64='CSSM_GUID*' type64='^{cssm_guid=ISS[8C]}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)( CSSM_MANAGER_EVENT_NOTIFICATION *)' function_pointer='true' name='cssm_DeliverModuleManagerEvent' type64='^?'>
<arg const='true' declared_type64='CSSM_MANAGER_EVENT_NOTIFICATION*' type64='^{cssm_manager_event_notification=IIII{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='cssm_subservice_uid' type64='{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}'>
<field declared_type64='CSSM_GUID' name='Guid' type64='{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}'/>
<field declared_type64='CSSM_VERSION' name='Version' type64='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'/>
<field declared_type64='uint32' name='SubserviceId' type64='I'/>
<field declared_type64='CSSM_SERVICE_TYPE' name='SubserviceType' type64='I'/>
</struct>
<struct name='cssm_tp_authority_id' type64='{cssm_tp_authority_id=&quot;AuthorityCert&quot;^{cssm_data}&quot;AuthorityLocation&quot;^{cssm_net_address}}'>
<field declared_type64='CSSM_DATA*' name='AuthorityCert' type64='^{cssm_data=Q*}'/>
<field declared_type64='CSSM_NET_ADDRESS_PTR' name='AuthorityLocation' type64='^{cssm_net_address=I{cssm_data=Q*}}'/>
</struct>
<struct name='cssm_tp_callerauth_context' type64='{cssm_tp_callerauth_context=&quot;Policy&quot;{cssm_tp_policyinfo=&quot;NumberOfPolicyIds&quot;I&quot;PolicyIds&quot;^{cssm_field}&quot;PolicyControl&quot;^v}&quot;VerifyTime&quot;*&quot;VerificationAbortOn&quot;I&quot;CallbackWithVerifiedCert&quot;^?&quot;NumberOfAnchorCerts&quot;I&quot;AnchorCerts&quot;^{cssm_data}&quot;DBList&quot;^{cssm_dl_db_list}&quot;CallerCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_TP_POLICYINFO' name='Policy' type64='{cssm_tp_policyinfo=&quot;NumberOfPolicyIds&quot;I&quot;PolicyIds&quot;^{cssm_field}&quot;PolicyControl&quot;^v}'/>
<field declared_type64='CSSM_TIMESTRING' name='VerifyTime' type64='*'/>
<field declared_type64='CSSM_TP_STOP_ON' name='VerificationAbortOn' type64='I'/>
<field declared_type64='CSSM_TP_VERIFICATION_RESULTS_CALLBACK' function_pointer='true' name='CallbackWithVerifiedCert' type64='^?'>
<arg declared_type64='CSSM_MODULE_HANDLE' type64='q'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='uint32' name='NumberOfAnchorCerts' type64='I'/>
<field declared_type64='CSSM_DATA_PTR' name='AnchorCerts' type64='^{cssm_data=Q*}'/>
<field declared_type64='CSSM_DL_DB_LIST_PTR' name='DBList' type64='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='CallerCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='cssm_tp_certchange_input' type64='{cssm_tp_certchange_input=&quot;Action&quot;I&quot;Reason&quot;I&quot;CLHandle&quot;q&quot;Cert&quot;^{cssm_data}&quot;ChangeInfo&quot;^{cssm_field}&quot;StartTime&quot;*&quot;CallerCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_TP_CERTCHANGE_ACTION' name='Action' type64='I'/>
<field declared_type64='CSSM_TP_CERTCHANGE_REASON' name='Reason' type64='I'/>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='CSSM_DATA_PTR' name='Cert' type64='^{cssm_data=Q*}'/>
<field declared_type64='CSSM_FIELD_PTR' name='ChangeInfo' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_TIMESTRING' name='StartTime' type64='*'/>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='CallerCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='cssm_tp_certchange_output' type64='{cssm_tp_certchange_output=&quot;ActionStatus&quot;I&quot;RevokeInfo&quot;{cssm_field=&quot;FieldOid&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;FieldValue&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}'>
<field declared_type64='CSSM_TP_CERTCHANGE_STATUS' name='ActionStatus' type64='I'/>
<field declared_type64='CSSM_FIELD' name='RevokeInfo' type64='{cssm_field=&quot;FieldOid&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;FieldValue&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
</struct>
<struct name='cssm_tp_certissue_input' type64='{cssm_tp_certissue_input=&quot;CSPSubserviceUid&quot;{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}&quot;CLHandle&quot;q&quot;NumberOfTemplateFields&quot;I&quot;SubjectCertFields&quot;^{cssm_field}&quot;MoreServiceRequests&quot;I&quot;NumberOfServiceControls&quot;I&quot;ServiceControls&quot;^{cssm_field}&quot;UserCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_SUBSERVICE_UID' name='CSPSubserviceUid' type64='{cssm_subservice_uid=&quot;Guid&quot;{cssm_guid=&quot;Data1&quot;I&quot;Data2&quot;S&quot;Data3&quot;S&quot;Data4&quot;[8C]}&quot;Version&quot;{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}&quot;SubserviceId&quot;I&quot;SubserviceType&quot;I}'/>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='uint32' name='NumberOfTemplateFields' type64='I'/>
<field declared_type64='CSSM_FIELD_PTR' name='SubjectCertFields' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_TP_SERVICES' name='MoreServiceRequests' type64='I'/>
<field declared_type64='uint32' name='NumberOfServiceControls' type64='I'/>
<field declared_type64='CSSM_FIELD_PTR' name='ServiceControls' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='UserCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='cssm_tp_certissue_output' type64='{cssm_tp_certissue_output=&quot;IssueStatus&quot;I&quot;CertGroup&quot;^{cssm_certgroup}&quot;PerformedServiceRequests&quot;I}'>
<field declared_type64='CSSM_TP_CERTISSUE_STATUS' name='IssueStatus' type64='I'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='CertGroup' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='CSSM_TP_SERVICES' name='PerformedServiceRequests' type64='I'/>
</struct>
<struct name='cssm_tp_certnotarize_input' type64='{cssm_tp_certnotarize_input=&quot;CLHandle&quot;q&quot;NumberOfFields&quot;I&quot;MoreFields&quot;^{cssm_field}&quot;SignScope&quot;^{cssm_field}&quot;ScopeSize&quot;I&quot;MoreServiceRequests&quot;I&quot;NumberOfServiceControls&quot;I&quot;ServiceControls&quot;^{cssm_field}&quot;UserCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='uint32' name='NumberOfFields' type64='I'/>
<field declared_type64='CSSM_FIELD_PTR' name='MoreFields' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_FIELD_PTR' name='SignScope' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='uint32' name='ScopeSize' type64='I'/>
<field declared_type64='CSSM_TP_SERVICES' name='MoreServiceRequests' type64='I'/>
<field declared_type64='uint32' name='NumberOfServiceControls' type64='I'/>
<field declared_type64='CSSM_FIELD_PTR' name='ServiceControls' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='UserCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='cssm_tp_certnotarize_output' type64='{cssm_tp_certnotarize_output=&quot;NotarizeStatus&quot;I&quot;NotarizedCertGroup&quot;^{cssm_certgroup}&quot;PerformedServiceRequests&quot;I}'>
<field declared_type64='CSSM_TP_CERTNOTARIZE_STATUS' name='NotarizeStatus' type64='I'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='NotarizedCertGroup' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='CSSM_TP_SERVICES' name='PerformedServiceRequests' type64='I'/>
</struct>
<struct name='cssm_tp_certreclaim_input' type64='{cssm_tp_certreclaim_input=&quot;CLHandle&quot;q&quot;NumberOfSelectionFields&quot;I&quot;SelectionFields&quot;^{cssm_field}&quot;UserCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='uint32' name='NumberOfSelectionFields' type64='I'/>
<field declared_type64='CSSM_FIELD_PTR' name='SelectionFields' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='UserCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='cssm_tp_certreclaim_output' type64='{cssm_tp_certreclaim_output=&quot;ReclaimStatus&quot;I&quot;ReclaimedCertGroup&quot;^{cssm_certgroup}&quot;KeyCacheHandle&quot;Q}'>
<field declared_type64='CSSM_TP_CERTRECLAIM_STATUS' name='ReclaimStatus' type64='I'/>
<field declared_type64='CSSM_CERTGROUP_PTR' name='ReclaimedCertGroup' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<field declared_type64='CSSM_LONG_HANDLE' name='KeyCacheHandle' type64='Q'/>
</struct>
<struct name='cssm_tp_certverify_input' type64='{cssm_tp_certverify_input=&quot;CLHandle&quot;q&quot;Cert&quot;^{cssm_data}&quot;VerifyContext&quot;^{cssm_tp_verify_context}}'>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='CSSM_DATA_PTR' name='Cert' type64='^{cssm_data=Q*}'/>
<field declared_type64='CSSM_TP_VERIFY_CONTEXT_PTR' name='VerifyContext' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
</struct>
<struct name='cssm_tp_certverify_output' type64='{cssm_tp_certverify_output=&quot;VerifyStatus&quot;I&quot;NumberOfEvidence&quot;I&quot;Evidence&quot;^{cssm_evidence}}'>
<field declared_type64='CSSM_TP_CERTVERIFY_STATUS' name='VerifyStatus' type64='I'/>
<field declared_type64='uint32' name='NumberOfEvidence' type64='I'/>
<field declared_type64='CSSM_EVIDENCE_PTR' name='Evidence' type64='^{cssm_evidence=I^v}'/>
</struct>
<struct name='cssm_tp_confirm_response' type64='{cssm_tp_confirm_response=&quot;NumberOfResponses&quot;I&quot;Responses&quot;^I}'>
<field declared_type64='uint32' name='NumberOfResponses' type64='I'/>
<field declared_type64='CSSM_TP_CONFIRM_STATUS_PTR' name='Responses' type64='^I'/>
</struct>
<struct name='cssm_tp_crlissue_input' type64='{cssm_tp_crlissue_input=&quot;CLHandle&quot;q&quot;CrlIdentifier&quot;I&quot;CrlThisTime&quot;*&quot;PolicyIdentifier&quot;^{cssm_field}&quot;CallerCredentials&quot;^{cssm_access_credentials}}'>
<field declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<field declared_type64='uint32' name='CrlIdentifier' type64='I'/>
<field declared_type64='CSSM_TIMESTRING' name='CrlThisTime' type64='*'/>
<field declared_type64='CSSM_FIELD_PTR' name='PolicyIdentifier' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='CallerCredentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
</struct>
<struct name='cssm_tp_crlissue_output' type64='{cssm_tp_crlissue_output=&quot;IssueStatus&quot;I&quot;Crl&quot;^{cssm_encoded_crl}&quot;CrlNextTime&quot;*}'>
<field declared_type64='CSSM_TP_CRLISSUE_STATUS' name='IssueStatus' type64='I'/>
<field declared_type64='CSSM_ENCODED_CRL_PTR' name='Crl' type64='^{cssm_encoded_crl=II{cssm_data=Q*}}'/>
<field declared_type64='CSSM_TIMESTRING' name='CrlNextTime' type64='*'/>
</struct>
<struct name='cssm_tp_policyinfo' type64='{cssm_tp_policyinfo=&quot;NumberOfPolicyIds&quot;I&quot;PolicyIds&quot;^{cssm_field}&quot;PolicyControl&quot;^v}'>
<field declared_type64='uint32' name='NumberOfPolicyIds' type64='I'/>
<field declared_type64='CSSM_FIELD_PTR' name='PolicyIds' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<field declared_type64='void*' name='PolicyControl' type64='^v'/>
</struct>
<struct name='cssm_tp_request_set' type64='{cssm_tp_request_set=&quot;NumberOfRequests&quot;I&quot;Requests&quot;^v}'>
<field declared_type64='uint32' name='NumberOfRequests' type64='I'/>
<field declared_type64='void*' name='Requests' type64='^v'/>
</struct>
<struct name='cssm_tp_result_set' type64='{cssm_tp_result_set=&quot;NumberOfResults&quot;I&quot;Results&quot;^v}'>
<field declared_type64='uint32' name='NumberOfResults' type64='I'/>
<field declared_type64='void*' name='Results' type64='^v'/>
</struct>
<struct name='cssm_tp_verify_context' type64='{cssm_tp_verify_context=&quot;Action&quot;I&quot;ActionData&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;Crls&quot;{cssm_crlgroup=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;NumberOfCrls&quot;I&quot;GroupCrlList&quot;(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})&quot;CrlGroupType&quot;I}&quot;Cred&quot;^{cssm_tp_callerauth_context}}'>
<field declared_type64='CSSM_TP_ACTION' name='Action' type64='I'/>
<field declared_type64='CSSM_DATA' name='ActionData' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_CRLGROUP' name='Crls' type64='{cssm_crlgroup=&quot;CrlType&quot;I&quot;CrlEncoding&quot;I&quot;NumberOfCrls&quot;I&quot;GroupCrlList&quot;(?=&quot;CrlList&quot;^{cssm_data}&quot;EncodedCrlList&quot;^{cssm_encoded_crl}&quot;ParsedCrlList&quot;^{cssm_parsed_crl}&quot;PairCrlList&quot;^{cssm_crl_pair})&quot;CrlGroupType&quot;I}'/>
<field declared_type64='CSSM_TP_CALLERAUTH_CONTEXT_PTR' name='Cred' type64='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}'/>
</struct>
<struct name='cssm_tp_verify_context_result' type64='{cssm_tp_verify_context_result=&quot;NumberOfEvidences&quot;I&quot;Evidence&quot;^{cssm_evidence}}'>
<field declared_type64='uint32' name='NumberOfEvidences' type64='I'/>
<field declared_type64='CSSM_EVIDENCE_PTR' name='Evidence' type64='^{cssm_evidence=I^v}'/>
</struct>
<struct name='cssm_tuplegroup' type64='{cssm_tuplegroup=&quot;NumberOfTuples&quot;I&quot;Tuples&quot;^{_CSSM_TUPLE_PTR=&quot;Issuer&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Subject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;AuthorizationTag&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;ValidityPeriod&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}}}'>
<field declared_type64='uint32' name='NumberOfTuples' type64='I'/>
<field declared_type64='CSSM_TUPLE_PTR' name='Tuples' type64='^{_CSSM_TUPLE_PTR=&quot;Issuer&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Subject&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;Delegate&quot;i&quot;AuthorizationTag&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}&quot;ValidityPeriod&quot;{cssm_list=&quot;ListType&quot;I&quot;Head&quot;^{cssm_list_element}&quot;Tail&quot;^{cssm_list_element}}}'/>
</struct>
<struct name='cssm_upcalls' type64='{cssm_upcalls=&quot;malloc_func&quot;^?&quot;free_func&quot;^?&quot;realloc_func&quot;^?&quot;calloc_func&quot;^?&quot;CcToHandle_func&quot;^?&quot;GetModuleInfo_func&quot;^?}'>
<field declared_type64='CSSM_UPCALLS_MALLOC' function_pointer='true' name='malloc_func' type64='^?'>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='size_t' type64='Q'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CSSM_UPCALLS_FREE' function_pointer='true' name='free_func' type64='^?'>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='CSSM_UPCALLS_REALLOC' function_pointer='true' name='realloc_func' type64='^?'>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='size_t' type64='Q'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CSSM_UPCALLS_CALLOC' function_pointer='true' name='calloc_func' type64='^?'>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='size_t' type64='Q'/>
<arg declared_type64='size_t' type64='Q'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_CC_HANDLE, CSSM_MODULE_HANDLE_PTR)' function_pointer='true' name='CcToHandle_func' type64='^?'>
<arg declared_type64='CSSM_CC_HANDLE' type64='Q'/>
<arg declared_type64='CSSM_MODULE_HANDLE_PTR' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(CSSM_MODULE_HANDLE, CSSM_GUID_PTR, CSSM_VERSION_PTR, uint32 *, CSSM_SERVICE_TYPE *, CSSM_ATTACH_FLAGS *, CSSM_KEY_HIERARCHY *, CSSM_API_MEMORY_FUNCS_PTR, CSSM_FUNC_NAME_ADDR_PTR, uint32)' function_pointer='true' name='GetModuleInfo_func' type64='^?'>
<arg declared_type64='CSSM_MODULE_HANDLE' type64='q'/>
<arg declared_type64='CSSM_GUID_PTR' type64='^{cssm_guid=ISS[8C]}'/>
<arg declared_type64='CSSM_VERSION_PTR' type64='^{cssm_version=II}'/>
<arg declared_type64='uint32*' type64='^I'/>
<arg declared_type64='CSSM_SERVICE_TYPE*' type64='^I'/>
<arg declared_type64='CSSM_ATTACH_FLAGS*' type64='^I'/>
<arg declared_type64='CSSM_KEY_HIERARCHY*' type64='^I'/>
<arg declared_type64='CSSM_API_MEMORY_FUNCS_PTR' type64='^{cssm_memory_funcs=^?^?^?^?^v}'/>
<arg declared_type64='CSSM_FUNC_NAME_ADDR_PTR' type64='^{cssm_func_name_addr=[68c]^?}'/>
<arg declared_type64='uint32' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='cssm_version' type64='{cssm_version=&quot;Major&quot;I&quot;Minor&quot;I}'>
<field declared_type64='uint32' name='Major' type64='I'/>
<field declared_type64='uint32' name='Minor' type64='I'/>
</struct>
<struct name='cssm_x509_algorithm_identifier' type64='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_OID' name='algorithm' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='parameters' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='cssm_x509_extension' type64='{cssm_x509_extension=&quot;extnId&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;critical&quot;i&quot;format&quot;i&quot;value&quot;(cssm_x509ext_value=&quot;tagAndValue&quot;^{cssm_x509_extensionTagAndValue}&quot;parsedValue&quot;^v&quot;valuePair&quot;^{cssm_x509ext_pair})&quot;BERvalue&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_OID' name='extnId' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_BOOL' name='critical' type64='i'/>
<field declared_type64='CSSM_X509EXT_DATA_FORMAT' name='format' type64='i'/>
<field declared_type64='union cssm_x509ext_value' name='value' type64='(cssm_x509ext_value=&quot;tagAndValue&quot;^{cssm_x509_extensionTagAndValue}&quot;parsedValue&quot;^v&quot;valuePair&quot;^{cssm_x509ext_pair})'/>
<field declared_type64='CSSM_DATA' name='BERvalue' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='cssm_x509_extensionTagAndValue' type64='{cssm_x509_extensionTagAndValue=&quot;type&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_BER_TAG' name='type' type64='C'/>
<field declared_type64='CSSM_DATA' name='value' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='cssm_x509_extensions' type64='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'>
<field declared_type64='uint32' name='numberOfExtensions' type64='I'/>
<field declared_type64='CSSM_X509_EXTENSION_PTR' name='extensions' type64='^{cssm_x509_extension={cssm_data=Q*}ii(cssm_x509ext_value=^{cssm_x509_extensionTagAndValue}^v^{cssm_x509ext_pair}){cssm_data=Q*}}'/>
</struct>
<struct name='cssm_x509_name' type64='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'>
<field declared_type64='uint32' name='numberOfRDNs' type64='I'/>
<field declared_type64='CSSM_X509_RDN_PTR' name='RelativeDistinguishedName' type64='^{cssm_x509_rdn=I^{cssm_x509_type_value_pair}}'/>
</struct>
<struct name='cssm_x509_rdn' type64='{cssm_x509_rdn=&quot;numberOfPairs&quot;I&quot;AttributeTypeAndValue&quot;^{cssm_x509_type_value_pair}}'>
<field declared_type64='uint32' name='numberOfPairs' type64='I'/>
<field declared_type64='CSSM_X509_TYPE_VALUE_PAIR_PTR' name='AttributeTypeAndValue' type64='^{cssm_x509_type_value_pair={cssm_data=Q*}C{cssm_data=Q*}}'/>
</struct>
<struct name='cssm_x509_revoked_cert_entry' type64='{cssm_x509_revoked_cert_entry=&quot;certificateSerialNumber&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;revocationDate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'>
<field declared_type64='CSSM_DATA' name='certificateSerialNumber' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_X509_TIME' name='revocationDate' type64='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_X509_EXTENSIONS' name='extensions' type64='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'/>
</struct>
<struct name='cssm_x509_revoked_cert_list' type64='{cssm_x509_revoked_cert_list=&quot;numberOfRevokedCertEntries&quot;I&quot;revokedCertEntry&quot;^{cssm_x509_revoked_cert_entry}}'>
<field declared_type64='uint32' name='numberOfRevokedCertEntries' type64='I'/>
<field declared_type64='CSSM_X509_REVOKED_CERT_ENTRY_PTR' name='revokedCertEntry' type64='^{cssm_x509_revoked_cert_entry={cssm_data=Q*}{cssm_x509_time=C{cssm_data=Q*}}{cssm_x509_extensions=I^{cssm_x509_extension}}}'/>
</struct>
<struct name='cssm_x509_signature' type64='{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_X509_ALGORITHM_IDENTIFIER' name='algorithmIdentifier' type64='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_DATA' name='encrypted' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='cssm_x509_signed_certificate' type64='{cssm_x509_signed_certificate=&quot;certificate&quot;{cssm_x509_tbs_certificate=&quot;version&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;validity&quot;{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}&quot;subject&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;subjectPublicKeyInfo&quot;{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuerUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;subjectUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}&quot;signature&quot;{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}'>
<field declared_type64='CSSM_X509_TBS_CERTIFICATE' name='certificate' type64='{cssm_x509_tbs_certificate=&quot;version&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;validity&quot;{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}&quot;subject&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;subjectPublicKeyInfo&quot;{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuerUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;subjectUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'/>
<field declared_type64='CSSM_X509_SIGNATURE' name='signature' type64='{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
</struct>
<struct name='cssm_x509_signed_crl' type64='{cssm_x509_signed_crl=&quot;tbsCertList&quot;{cssm_x509_tbs_certlist=&quot;version&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;thisUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;nextUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;revokedCertificates&quot;^{cssm_x509_revoked_cert_list}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}&quot;signature&quot;{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}'>
<field declared_type64='CSSM_X509_TBS_CERTLIST' name='tbsCertList' type64='{cssm_x509_tbs_certlist=&quot;version&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;thisUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;nextUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;revokedCertificates&quot;^{cssm_x509_revoked_cert_list}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'/>
<field declared_type64='CSSM_X509_SIGNATURE' name='signature' type64='{cssm_x509_signature=&quot;algorithmIdentifier&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;encrypted&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
</struct>
<struct name='cssm_x509_subject_public_key_info' type64='{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_X509_ALGORITHM_IDENTIFIER' name='algorithm' type64='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_DATA' name='subjectPublicKey' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='cssm_x509_tbs_certificate' type64='{cssm_x509_tbs_certificate=&quot;version&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;serialNumber&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;validity&quot;{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}&quot;subject&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;subjectPublicKeyInfo&quot;{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuerUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;subjectUniqueIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'>
<field declared_type64='CSSM_DATA' name='version' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='serialNumber' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_X509_ALGORITHM_IDENTIFIER' name='signature' type64='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_X509_NAME' name='issuer' type64='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'/>
<field declared_type64='CSSM_X509_VALIDITY' name='validity' type64='{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}'/>
<field declared_type64='CSSM_X509_NAME' name='subject' type64='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'/>
<field declared_type64='CSSM_X509_SUBJECT_PUBLIC_KEY_INFO' name='subjectPublicKeyInfo' type64='{cssm_x509_subject_public_key_info=&quot;algorithm&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;subjectPublicKey&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_DATA' name='issuerUniqueIdentifier' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='subjectUniqueIdentifier' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_X509_EXTENSIONS' name='extensions' type64='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'/>
</struct>
<struct name='cssm_x509_tbs_certlist' type64='{cssm_x509_tbs_certlist=&quot;version&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;signature&quot;{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;issuer&quot;{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}&quot;thisUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;nextUpdate&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;revokedCertificates&quot;^{cssm_x509_revoked_cert_list}&quot;extensions&quot;{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}}'>
<field declared_type64='CSSM_DATA' name='version' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_X509_ALGORITHM_IDENTIFIER' name='signature' type64='{cssm_x509_algorithm_identifier=&quot;algorithm&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;parameters&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_X509_NAME' name='issuer' type64='{cssm_x509_name=&quot;numberOfRDNs&quot;I&quot;RelativeDistinguishedName&quot;^{cssm_x509_rdn}}'/>
<field declared_type64='CSSM_X509_TIME' name='thisUpdate' type64='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_X509_TIME' name='nextUpdate' type64='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_X509_REVOKED_CERT_LIST_PTR' name='revokedCertificates' type64='^{cssm_x509_revoked_cert_list=I^{cssm_x509_revoked_cert_entry}}'/>
<field declared_type64='CSSM_X509_EXTENSIONS' name='extensions' type64='{cssm_x509_extensions=&quot;numberOfExtensions&quot;I&quot;extensions&quot;^{cssm_x509_extension}}'/>
</struct>
<struct name='cssm_x509_time' type64='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_BER_TAG' name='timeType' type64='C'/>
<field declared_type64='CSSM_DATA' name='time' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='cssm_x509_type_value_pair' type64='{cssm_x509_type_value_pair=&quot;type&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;valueType&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_OID' name='type' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_BER_TAG' name='valueType' type64='C'/>
<field declared_type64='CSSM_DATA' name='value' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='cssm_x509ext_basicConstraints' type64='{cssm_x509ext_basicConstraints=&quot;cA&quot;i&quot;pathLenConstraintPresent&quot;i&quot;pathLenConstraint&quot;I}'>
<field declared_type64='CSSM_BOOL' name='cA' type64='i'/>
<field declared_type64='CSSM_X509_OPTION' name='pathLenConstraintPresent' type64='i'/>
<field declared_type64='uint32' name='pathLenConstraint' type64='I'/>
</struct>
<struct name='cssm_x509ext_pair' type64='{cssm_x509ext_pair=&quot;tagAndValue&quot;{cssm_x509_extensionTagAndValue=&quot;type&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;parsedValue&quot;^v}'>
<field declared_type64='CSSM_X509EXT_TAGandVALUE' name='tagAndValue' type64='{cssm_x509_extensionTagAndValue=&quot;type&quot;C&quot;value&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='void*' name='parsedValue' type64='^v'/>
</struct>
<struct name='cssm_x509ext_policyInfo' type64='{cssm_x509ext_policyInfo=&quot;policyIdentifier&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;policyQualifiers&quot;{cssm_x509ext_policyQualifiers=&quot;numberOfPolicyQualifiers&quot;I&quot;policyQualifier&quot;^{cssm_x509ext_policyQualifierInfo}}}'>
<field declared_type64='CSSM_OID' name='policyIdentifier' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_X509EXT_POLICYQUALIFIERS' name='policyQualifiers' type64='{cssm_x509ext_policyQualifiers=&quot;numberOfPolicyQualifiers&quot;I&quot;policyQualifier&quot;^{cssm_x509ext_policyQualifierInfo}}'/>
</struct>
<struct name='cssm_x509ext_policyQualifierInfo' type64='{cssm_x509ext_policyQualifierInfo=&quot;policyQualifierId&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}&quot;value&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'>
<field declared_type64='CSSM_OID' name='policyQualifierId' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
<field declared_type64='CSSM_DATA' name='value' type64='{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}'/>
</struct>
<struct name='cssm_x509ext_policyQualifiers' type64='{cssm_x509ext_policyQualifiers=&quot;numberOfPolicyQualifiers&quot;I&quot;policyQualifier&quot;^{cssm_x509ext_policyQualifierInfo}}'>
<field declared_type64='uint32' name='numberOfPolicyQualifiers' type64='I'/>
<field declared_type64='CSSM_X509EXT_POLICYQUALIFIERINFO*' name='policyQualifier' type64='^{cssm_x509ext_policyQualifierInfo={cssm_data=Q*}{cssm_data=Q*}}'/>
</struct>
<struct name='mds_funcs' type64='{mds_funcs=&quot;DbOpen&quot;^?&quot;DbClose&quot;^?&quot;GetDbNames&quot;^?&quot;GetDbNameFromHandle&quot;^?&quot;FreeNameList&quot;^?&quot;DataInsert&quot;^?&quot;DataDelete&quot;^?&quot;DataModify&quot;^?&quot;DataGetFirst&quot;^?&quot;DataGetNext&quot;^?&quot;DataAbortQuery&quot;^?&quot;DataGetFromUniqueRecordId&quot;^?&quot;FreeUniqueRecord&quot;^?&quot;CreateRelation&quot;^?&quot;DestroyRelation&quot;^?}'>
<field declared_type64='CSSM_RETURN (*)(MDS_HANDLE, char *, CSSM_NET_ADDRESS *, CSSM_DB_ACCESS_TYPE, CSSM_ACCESS_CREDENTIALS *, void *, CSSM_DB_HANDLE *)' function_pointer='true' name='DbOpen' type64='^?'>
<arg declared_type64='MDS_HANDLE' type64='q'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='CSSM_NET_ADDRESS*' type64='^{cssm_net_address=I{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DB_ACCESS_TYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='CSSM_DB_HANDLE*' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE)' function_pointer='true' name='DbClose' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_HANDLE, CSSM_NAME_LIST_PTR *)' function_pointer='true' name='GetDbNames' type64='^?'>
<arg declared_type64='MDS_HANDLE' type64='q'/>
<arg declared_type64='CSSM_NAME_LIST_PTR*' type64='^^{cssm_name_list}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, char **)' function_pointer='true' name='GetDbNameFromHandle' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_HANDLE, CSSM_NAME_LIST_PTR)' function_pointer='true' name='FreeNameList' type64='^?'>
<arg declared_type64='MDS_HANDLE' type64='q'/>
<arg declared_type64='CSSM_NAME_LIST_PTR' type64='^{cssm_name_list=I^*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_UNIQUE_RECORD_PTR *)' function_pointer='true' name='DataInsert' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *)' function_pointer='true' name='DataDelete' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_DB_UNIQUE_RECORD*' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_UNIQUE_RECORD_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA *, CSSM_DATA *, CSSM_DB_MODIFY_MODE)' function_pointer='true' name='DataModify' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA*' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg const='true' declared_type64='CSSM_DATA*' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_MODIFY_MODE' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_QUERY *, CSSM_HANDLE_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' function_pointer='true' name='DataGetFirst' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_QUERY*' type64='^{cssm_query=III^{cssm_selection_predicate}{cssm_query_limits=II}I}'/>
<arg declared_type64='CSSM_HANDLE_PTR' type64='^q'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_HANDLE, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, CSSM_DB_UNIQUE_RECORD_PTR *)' function_pointer='true' name='DataGetNext' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_HANDLE)' function_pointer='true' name='DataAbortQuery' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_HANDLE' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_UNIQUE_RECORD *, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR)' function_pointer='true' name='DataGetFromUniqueRecordId' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_DB_UNIQUE_RECORD*' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_UNIQUE_RECORD_PTR)' function_pointer='true' name='FreeUniqueRecord' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, char *, uint32, CSSM_DB_SCHEMA_ATTRIBUTE_INFO *, uint32, CSSM_DB_SCHEMA_INDEX_INFO *)' function_pointer='true' name='CreateRelation' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_SCHEMA_ATTRIBUTE_INFO*' type64='^{cssm_db_schema_attribute_info=I*{cssm_data=Q*}I}'/>
<arg declared_type64='uint32' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_SCHEMA_INDEX_INFO*' type64='^{cssm_db_schema_index_info=IIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
<field declared_type64='CSSM_RETURN (*)(MDS_DB_HANDLE, CSSM_DB_RECORDTYPE)' function_pointer='true' name='DestroyRelation' type64='^?'>
<arg declared_type64='MDS_DB_HANDLE' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</field>
</struct>
<struct name='x509_validity' type64='{x509_validity=&quot;notBefore&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}&quot;notAfter&quot;{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}}'>
<field declared_type64='CSSM_X509_TIME' name='notBefore' type64='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
<field declared_type64='CSSM_X509_TIME' name='notAfter' type64='{cssm_x509_time=&quot;timeType&quot;C&quot;time&quot;{cssm_data=&quot;Length&quot;Q&quot;Data&quot;*}}'/>
</struct>
<cftype gettypeid_func='CMSDecoderGetTypeID' name='CMSDecoderRef' type64='^{_CMSDecoder=}'/>
<cftype gettypeid_func='CMSEncoderGetTypeID' name='CMSEncoderRef' type64='^{_CMSEncoder=}'/>
<cftype gettypeid_func='SSLContextGetTypeID' name='SSLContextRef' type64='^{SSLContext=}'/>
<cftype gettypeid_func='SecACLGetTypeID' name='SecACLRef' type64='^{OpaqueSecTrustRef=}'/>
<cftype gettypeid_func='SecAccessControlGetTypeID' name='SecAccessControlRef' type64='^{OpaqueSecAccessControlRef=}'/>
<cftype gettypeid_func='SecAccessGetTypeID' name='SecAccessRef' type64='^{OpaqueSecAccessRef=}'/>
<cftype gettypeid_func='SecCertificateGetTypeID' name='SecCertificateRef' type64='^{OpaqueSecCertificateRef=}'/>
<cftype gettypeid_func='SecCodeGetTypeID' name='SecCodeRef' type64='^{__SecCode=}'/>
<cftype gettypeid_func='SecIdentityGetTypeID' name='SecIdentityRef' type64='^{OpaqueSecIdentityRef=}'/>
<cftype gettypeid_func='SecIdentitySearchGetTypeID' name='SecIdentitySearchRef' type64='^{OpaqueSecIdentitySearchRef=}'/>
<cftype gettypeid_func='SecKeyGetTypeID' name='SecKeyRef' type64='^{OpaqueSecKeyRef=}'/>
<cftype gettypeid_func='SecKeychainItemGetTypeID' name='SecKeychainItemRef' type64='^{OpaqueSecKeychainItemRef=}'/>
<cftype gettypeid_func='SecKeychainGetTypeID' name='SecKeychainRef' type64='^{OpaqueSecKeychainRef=}'/>
<cftype gettypeid_func='SecKeychainSearchGetTypeID' name='SecKeychainSearchRef' type64='^{OpaqueSecKeychainSearchRef=}'/>
<cftype gettypeid_func='SecPolicyGetTypeID' name='SecPolicyRef' type64='^{OpaqueSecPolicyRef=}'/>
<cftype gettypeid_func='SecPolicySearchGetTypeID' name='SecPolicySearchRef' type64='^{OpaquePolicySearchRef=}'/>
<cftype gettypeid_func='SecRequirementGetTypeID' name='SecRequirementRef' type64='^{__SecRequirement=}'/>
<cftype gettypeid_func='SecStaticCodeGetTypeID' name='SecStaticCodeRef' type64='^{__SecCode=}'/>
<cftype gettypeid_func='SecTaskGetTypeID' name='SecTaskRef' type64='^{__SecTask=}'/>
<cftype gettypeid_func='SecTrustGetTypeID' name='SecTrustRef' type64='^{__SecTrust=}'/>
<cftype gettypeid_func='SecTrustedApplicationGetTypeID' name='SecTrustedApplicationRef' type64='^{OpaqueSecTrustedApplicationRef=}'/>
<cftype name='AuthorizationEngineRef' type64='^{__OpaqueAuthorizationEngine=}'/>
<cftype name='AuthorizationMechanismRef' type64='^v'/>
<cftype name='AuthorizationPluginRef' type64='^v'/>
<cftype name='AuthorizationRef' type64='^{AuthorizationOpaqueRef=}'/>
<cftype name='SSLConnectionRef' type64='^v'/>
<cftype name='SecAsn1CoderRef' type64='^{SecAsn1Coder=}'/>
<cftype name='SecPasswordRef' type64='^{OpaqueSecPasswordRef=}'/>
<cftype name='SecRandomRef' type64='^{__SecRandom=}'/>
<cftype name='SecTransformImplementationRef' type64='^{OpaqueSecTransformImplementation=}'/>
<cftype name='SecureDownloadRef' type64='^{OpaqueSecureDownload=}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_ADC_CERT_POLICY' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_AD_CA_ISSUERS' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_AD_CA_REPOSITORY' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_AD_OCSP' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_AD_TIME_STAMPING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ANSI_DH_EPHEM' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ANSI_DH_EPHEM_SHA1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ANSI_DH_HYBRID1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ANSI_DH_HYBRID1_SHA1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ANSI_DH_HYBRID2' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ANSI_DH_HYBRID2_SHA1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ANSI_DH_HYBRID_ONEFLOW' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ANSI_DH_ONE_FLOW' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ANSI_DH_ONE_FLOW_SHA1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ANSI_DH_PUB_NUMBER' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ANSI_DH_STATIC' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ANSI_DH_STATIC_SHA1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ANSI_MQV1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ANSI_MQV1_SHA1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ANSI_MQV2' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ANSI_MQV2_SHA1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLEID_CERT_POLICY' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLEID_SHARING_CERT_POLICY' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_ASC' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_CERT_POLICY' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_ECDSA' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EKU_CODE_SIGNING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EKU_CODE_SIGNING_DEV' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EKU_ICHAT_ENCRYPTION' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EKU_ICHAT_SIGNING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EKU_PASSBOOK_SIGNING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EKU_PROFILE_SIGNING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EKU_QA_PROFILE_SIGNING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EKU_RESOURCE_SIGNING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EKU_SYSTEM_IDENTITY' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EXTENSION' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EXTENSION_AAI_INTERMEDIATE' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EXTENSION_ADC_APPLE_SIGNING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EXTENSION_ADC_DEV_SIGNING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EXTENSION_APPLEID_INTERMEDIATE' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EXTENSION_APPLEID_SHARING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EXTENSION_APPLE_SIGNING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EXTENSION_CODE_SIGNING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EXTENSION_DEVELOPER_AUTHENTICATION' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EXTENSION_ESCROW_SERVICE' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EXTENSION_INTERMEDIATE_MARKER' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EXTENSION_ITMS_INTERMEDIATE' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EXTENSION_MACAPPSTORE_RECEIPT' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EXTENSION_PASSBOOK_SIGNING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EXTENSION_PROVISIONING_PROFILE_SIGNING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EXTENSION_SERVER_AUTHENTICATION' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EXTENSION_SYSINT2_INTERMEDIATE' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_APPLE_EXTENSION_WWDR_INTERMEDIATE' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_FEE' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_FEED' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_FEEDEXP' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_FEE_MD5' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_FEE_SHA1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_ISIGN' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_APPLEID_SHARING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_CODE_SIGN' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_CODE_SIGNING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_CSR_GEN' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_EAP' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_ESCROW_SERVICE' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_ICHAT' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_IP_SEC' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_LOCAL_CERT_GEN' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_MACAPPSTORE_RECEIPT' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_MOBILE_STORE' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_PACKAGE_SIGNING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_PASSBOOK_SIGNING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_PCS_ESCROW_SERVICE' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_PKINIT_CLIENT' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_PKINIT_SERVER' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_PROFILE_SIGNING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_PROVISIONING_PROFILE_SIGNING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_QA_PROFILE_SIGNING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_RESOURCE_SIGN' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_REVOCATION' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_REVOCATION_CRL' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_REVOCATION_OCSP' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_SMIME' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_SSL' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_SW_UPDATE_SIGNING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_TEST_MOBILE_STORE' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_TP_TIMESTAMPING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_APPLE_X509_BASIC' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_AliasedEntryName' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_AuthorityInfoAccess' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_AuthorityKeyIdentifier' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_AuthorityRevocationList' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_BasicConstraints' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_BiometricInfo' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_BusinessCategory' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_CACertificate' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_CSSMKeyStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_CertIssuer' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_Certicom' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_CerticomEllCurve' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_CertificatePolicies' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_CertificateRevocationList' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ChallengePassword' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_ClientAuth' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_CollectiveFacsimileTelephoneNumber' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_CollectiveInternationalISDNNumber' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_CollectiveOrganizationName' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_CollectiveOrganizationalUnitName' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_CollectivePhysicalDeliveryOfficeName' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_CollectivePostOfficeBox' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_CollectivePostalAddress' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_CollectivePostalCode' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_CollectiveStateProvinceName' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_CollectiveStreetAddress' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_CollectiveTelephoneNumber' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_CollectiveTelexNumber' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_CollectiveTelexTerminalIdentifier' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_CommonName' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ContentType' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_CounterSignature' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_CountryName' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_CrlDistributionPoints' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_CrlNumber' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_CrlReason' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_CrossCertificatePair' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DES_CBC' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DH' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DNQualifier' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DOTMAC_CERT' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_DOTMAC_CERT_EMAIL_ENCRYPT' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_DOTMAC_CERT_EMAIL_SIGN' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_DOTMAC_CERT_EXTENSION' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_DOTMAC_CERT_IDENTITY' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_DOTMAC_CERT_POLICY' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DOTMAC_CERT_REQ' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DOTMAC_CERT_REQ_ARCHIVE_FETCH' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DOTMAC_CERT_REQ_ARCHIVE_LIST' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DOTMAC_CERT_REQ_ARCHIVE_REMOVE' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DOTMAC_CERT_REQ_ARCHIVE_STORE' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DOTMAC_CERT_REQ_EMAIL_ENCRYPT' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DOTMAC_CERT_REQ_EMAIL_SIGN' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DOTMAC_CERT_REQ_IDENTITY' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DOTMAC_CERT_REQ_SHARED_SERVICES' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DOTMAC_CERT_REQ_VALUE_ASYNC' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DOTMAC_CERT_REQ_VALUE_HOSTNAME' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DOTMAC_CERT_REQ_VALUE_IS_PENDING' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DOTMAC_CERT_REQ_VALUE_PASSWORD' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DOTMAC_CERT_REQ_VALUE_RENEW' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DOTMAC_CERT_REQ_VALUE_USERNAME' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DSA' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DSA_CMS' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DSA_JDK' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_DeltaCrlIndicator' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_Description' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DestinationIndicator' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DistinguishedName' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_DomainComponent' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ECDSA_WithSHA1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ECDSA_WithSHA224' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ECDSA_WithSHA256' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ECDSA_WithSHA384' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ECDSA_WithSHA512' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ECDSA_WithSpecified' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_EKU_IPSec' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ETSI_QCS_QC_COMPLIANCE' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ETSI_QCS_QC_LIMIT_VALUE' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ETSI_QCS_QC_RETENTION' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ETSI_QCS_QC_SSCD' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_EmailAddress' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_EmailProtection' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_EnhancedSearchGuide' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ExtendedCertificateAttributes' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_ExtendedKeyUsage' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_ExtendedKeyUsageAny' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_ExtendedUseCodeSigning' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_FacsimileTelephoneNumber' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_GenerationQualifier' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_GivenName' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_HoldInstructionCode' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_HouseIdentifier' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_InhibitAnyPolicy' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_Initials' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_InternationalISDNNumber' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_InvalidityDate' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_IssuerAltName' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_IssuingDistributionPoint' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_IssuingDistributionPoints' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_KERBv5_PKINIT_AUTH_DATA' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_KERBv5_PKINIT_DH_KEY_DATA' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_KERBv5_PKINIT_KP_CLIENT_AUTH' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_KERBv5_PKINIT_KP_KDC' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_KERBv5_PKINIT_RKEY_DATA' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_KeyUsage' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_KnowledgeInformation' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_LocalityName' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_MACAPPSTORE_CERT_POLICY' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_MACAPPSTORE_RECEIPT_CERT_POLICY' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_MD2' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_MD2WithRSA' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_MD4' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_MD4WithRSA' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_MD5' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_MD5WithRSA' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_MOBILE_STORE_SIGNING_POLICY' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_Member' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_MessageDigest' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_MicrosoftSGC' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_Name' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_NameConstraints' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_NetscapeCertSequence' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_NetscapeCertType' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_NetscapeSGC' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_OAEP_ID_PSPECIFIED' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_OAEP_MGF1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_OCSPSigning' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_OID_QCS_SYNTAX_V1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_OID_QCS_SYNTAX_V2' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ObjectClass' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_OrganizationName' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_OrganizationalUnitName' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_Owner' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PDA_COUNTRY_CITIZEN' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PDA_COUNTRY_RESIDENCE' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PDA_DATE_OF_BIRTH' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PDA_GENDER' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PDA_PLACE_OF_BIRTH' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS12_certBag' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS12_crlBag' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS12_keyBag' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS12_pbeWithSHAAnd128BitRC2CBC' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS12_pbeWithSHAAnd128BitRC4' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS12_pbeWithSHAAnd2Key3DESCBC' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS12_pbeWithSHAAnd3Key3DESCBC' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS12_pbeWithSHAAnd40BitRC4' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS12_pbewithSHAAnd40BitRC2CBC' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS12_safeContentsBag' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS12_secretBag' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS12_shroudedKeyBag' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS3' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS5_DES_EDE3_CBC' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS5_DIGEST_ALG' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS5_ENCRYPT_ALG' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS5_HMAC_SHA1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS5_PBES2' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS5_PBKDF2' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS5_PBMAC1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS5_RC2_CBC' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS5_RC5_CBC' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS5_pbeWithMD2AndDES' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS5_pbeWithMD2AndRC2' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS5_pbeWithMD5AndDES' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS5_pbeWithMD5AndRC2' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS5_pbeWithSHA1AndDES' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS5_pbeWithSHA1AndRC2' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS7_Data' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS7_DataWithAttributes' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS7_DigestedData' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS7_EncryptedData' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS7_EncryptedPrivateKeyInfo' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS7_EnvelopedData' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS7_SignedAndEnvelopedData' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS7_SignedData' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS9_CertTypes' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS9_CrlTypes' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS9_FriendlyName' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS9_Id_Ct_TSTInfo' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS9_LocalKeyId' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS9_SdsiCertificate' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS9_TimeStampToken' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS9_X509Certificate' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PKCS9_X509Crl' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_PKIX_OCSP' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_PKIX_OCSP_ARCHIVE_CUTOFF' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_PKIX_OCSP_BASIC' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_PKIX_OCSP_CRL' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_PKIX_OCSP_NOCHECK' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_PKIX_OCSP_NONCE' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_PKIX_OCSP_RESPONSE' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_PKIX_OCSP_SERVICE_LOCATOR' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PhysicalDeliveryOfficeName' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_PolicyConstraints' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_PolicyMappings' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PostOfficeBox' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PostalAddress' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PostalCode' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PreferredDeliveryMethod' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_PresentationAddress' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_PrivateKeyUsagePeriod' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ProtocolInformation' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_QC_Statements' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_QT_CPS' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_QT_UNOTICE' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_RSA' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_RSAWithOAEP' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_RegisteredAddress' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_RoleOccupant' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_SHA1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_SHA1WithDSA' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_SHA1WithDSA_CMS' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_SHA1WithDSA_JDK' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_SHA1WithRSA' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_SHA1WithRSA_OIW' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_SHA224' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_SHA224WithRSA' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_SHA256' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_SHA256WithRSA' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_SHA384' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_SHA384WithRSA' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_SHA512' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_SHA512WithRSA' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_SearchGuide' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_SeeAlso' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_SerialNumber' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_ServerAuth' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_SigningTime' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_StateProvinceName' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_StreetAddress' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_SubjectAltName' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_SubjectDirectoryAttributes' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_SubjectEmailAddress' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_SubjectInfoAccess' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_SubjectKeyIdentifier' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_SubjectPicture' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_SubjectSignatureBitmap' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_SupportedApplicationContext' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_Surname' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_TEST_MOBILE_STORE_SIGNING_POLICY' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_TelephoneNumber' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_TelexNumber' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_TelexTerminalIdentifier' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_TimeStamping' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_Title' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_UniqueIdentifier' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_UniqueMember' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_UnstructuredAddress' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_UnstructuredName' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_UseExemptions' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_UserCertificate' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_UserID' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_UserPassword' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1CRLIssuerNameCStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1CRLIssuerNameLDAP' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1CRLIssuerStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1CRLNextUpdate' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1CRLNumberOfRevokedCertEntries' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1CRLRevokedCertificatesCStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1CRLRevokedCertificatesStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1CRLRevokedEntryCStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1CRLRevokedEntryRevocationDate' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1CRLRevokedEntrySerialNumber' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1CRLRevokedEntryStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1CRLThisUpdate' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1CertificateIssuerUniqueId' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1CertificateSubjectUniqueId' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1IssuerName' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1IssuerNameCStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1IssuerNameLDAP' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1IssuerNameStd' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1SerialNumber' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1Signature' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1SignatureAlgorithm' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1SignatureAlgorithmParameters' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1SignatureAlgorithmTBS' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1SignatureCStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1SignatureStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1SubjectName' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1SubjectNameCStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1SubjectNameLDAP' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1SubjectNameStd' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1SubjectPublicKey' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1SubjectPublicKeyAlgorithm' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1SubjectPublicKeyAlgorithmParameters' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1SubjectPublicKeyCStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1ValidityNotAfter' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1ValidityNotBefore' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V1Version' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLAllExtensionsCStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLAllExtensionsStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLExtensionCritical' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLExtensionId' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLExtensionType' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLNumberOfExtensions' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLRevokedEntryAllExtensionsCStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLRevokedEntryAllExtensionsStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLRevokedEntryExtensionCritical' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLRevokedEntryExtensionId' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLRevokedEntryExtensionType' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLRevokedEntryExtensionValue' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLRevokedEntryNumberOfExtensions' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLRevokedEntrySingleExtensionCStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLRevokedEntrySingleExtensionStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLSignedCrlCStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLSignedCrlStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLSingleExtensionCStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLSingleExtensionStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLTbsCertListCStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLTbsCertListStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V2CRLVersion' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V3Certificate' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V3CertificateCStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V3CertificateExtensionCStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V3CertificateExtensionCritical' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V3CertificateExtensionId' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V3CertificateExtensionStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V3CertificateExtensionType' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V3CertificateExtensionValue' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V3CertificateExtensionsCStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V3CertificateExtensionsStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V3CertificateNumberOfExtensions' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V3SignedCertificate' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_OID' name='CSSMOID_X509V3SignedCertificateCStruct' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_X9_62' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_X9_62_C_TwoCurve' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_X9_62_EllCurve' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_X9_62_FieldType' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_X9_62_PrimeCurve' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_X9_62_PubKeyType' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_X9_62_SigType' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_X_121Address' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_ecPublicKey' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_secp112r1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_secp112r2' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_secp128r1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_secp128r2' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_secp160k1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_secp160r1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_secp160r2' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_secp192k1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_secp192r1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_secp224k1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_secp224r1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_secp256k1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_secp256r1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_secp384r1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_secp521r1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_sect113r1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_sect113r2' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_sect131r1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_sect131r2' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_sect163k1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_sect163r1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_sect163r2' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_sect193r1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_sect193r2' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_sect233k1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_sect233r1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_sect239k1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_sect283k1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_sect283r1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_sect409k1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_sect409r1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_sect571k1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='SecAsn1Oid' name='CSSMOID_sect571r1' type64='{cssm_data=Q*}'/>
<constant const='true' declared_type64='CSSM_GUID' name='gGuidAppleCSP' type64='{cssm_guid=ISS[8C]}'/>
<constant const='true' declared_type64='CSSM_GUID' name='gGuidAppleCSPDL' type64='{cssm_guid=ISS[8C]}'/>
<constant const='true' declared_type64='CSSM_GUID' name='gGuidAppleDotMacDL' type64='{cssm_guid=ISS[8C]}'/>
<constant const='true' declared_type64='CSSM_GUID' name='gGuidAppleDotMacTP' type64='{cssm_guid=ISS[8C]}'/>
<constant const='true' declared_type64='CSSM_GUID' name='gGuidAppleFileDL' type64='{cssm_guid=ISS[8C]}'/>
<constant const='true' declared_type64='CSSM_GUID' name='gGuidAppleLDAPDL' type64='{cssm_guid=ISS[8C]}'/>
<constant const='true' declared_type64='CSSM_GUID' name='gGuidAppleSdCSPDL' type64='{cssm_guid=ISS[8C]}'/>
<constant const='true' declared_type64='CSSM_GUID' name='gGuidAppleX509CL' type64='{cssm_guid=ISS[8C]}'/>
<constant const='true' declared_type64='CSSM_GUID' name='gGuidAppleX509TP' type64='{cssm_guid=ISS[8C]}'/>
<constant const='true' declared_type64='CSSM_GUID' name='gGuidCssm' type64='{cssm_guid=ISS[8C]}'/>
<constant const='true' declared_type64='size_t' name='kAuthorizationExternalFormLength' type64='Q'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCMSEncoderDigestAlgorithmSHA1' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kCMSEncoderDigestAlgorithmSHA256' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSSLSessionConfig_3DES_fallback' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSSLSessionConfig_ATSv1' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSSLSessionConfig_ATSv1_noPFS' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSSLSessionConfig_RC4_fallback' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSSLSessionConfig_TLSv1_3DES_fallback' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSSLSessionConfig_TLSv1_RC4_fallback' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSSLSessionConfig_TLSv1_fallback' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSSLSessionConfig_anonymous' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSSLSessionConfig_default' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSSLSessionConfig_legacy' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSSLSessionConfig_legacy_DHE' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSSLSessionConfig_standard' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationAny' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationChangeACL' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationChangeOwner' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationDecrypt' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationDelete' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationDerive' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationEncrypt' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationExportClear' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationExportWrapped' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationGenKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationImportClear' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationImportWrapped' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationIntegrity' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationKeychainCreate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationKeychainDelete' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationKeychainItemDelete' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationKeychainItemInsert' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationKeychainItemModify' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationKeychainItemRead' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationLogin' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationMAC' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationPartitionID' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecACLAuthorizationSign' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1AnyTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1BMPStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1BitStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1BooleanTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1EnumeratedTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1GeneralizedTimeTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1IA5StringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1IntegerTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1NullTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1ObjectIDTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1OctetStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1PointerToAnyTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1PointerToBMPStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1PointerToBitStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1PointerToBooleanTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1PointerToEnumeratedTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1PointerToGeneralizedTimeTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1PointerToIA5StringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1PointerToIntegerTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1PointerToNullTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1PointerToObjectIDTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1PointerToOctetStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1PointerToPrintableStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1PointerToT61StringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1PointerToTeletexStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1PointerToUTCTimeTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1PointerToUTF8StringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1PointerToUniversalStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1PointerToVisibleStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1PrintableStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SequenceOfAnyTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SequenceOfBMPStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SequenceOfBitStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SequenceOfBooleanTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SequenceOfEnumeratedTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SequenceOfGeneralizedTimeTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SequenceOfIA5StringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SequenceOfIntegerTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SequenceOfNullTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SequenceOfObjectIDTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SequenceOfOctetStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SequenceOfPrintableStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SequenceOfT61StringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SequenceOfTeletexStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SequenceOfUTCTimeTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SequenceOfUTF8StringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SequenceOfUniversalStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SequenceOfVisibleStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SetOfAnyTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SetOfBMPStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SetOfBitStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SetOfBooleanTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SetOfEnumeratedTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SetOfGeneralizedTimeTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SetOfIA5StringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SetOfIntegerTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SetOfNullTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SetOfObjectIDTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SetOfOctetStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SetOfPrintableStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SetOfT61StringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SetOfTeletexStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SetOfUTCTimeTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SetOfUTF8StringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SetOfUniversalStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SetOfVisibleStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1SkipTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1T61StringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1TeletexStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1UTCTimeTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1UTF8StringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1UniversalStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1UnsignedIntegerTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='SecAsn1Template*' name='kSecAsn1VisibleStringTemplate' type64='^{SecAsn1Template_struct=II^vI}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccess' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessControl' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessGroup' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessGroupToken' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessible' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessibleAfterFirstUnlock' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessibleAlways' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessibleAlwaysThisDeviceOnly' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessibleWhenUnlocked' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccessibleWhenUnlockedThisDeviceOnly' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAccount' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrApplicationLabel' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrApplicationTag' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAuthenticationType' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAuthenticationTypeDPA' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAuthenticationTypeDefault' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAuthenticationTypeHTMLForm' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAuthenticationTypeHTTPBasic' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAuthenticationTypeHTTPDigest' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAuthenticationTypeMSN' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAuthenticationTypeNTLM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrAuthenticationTypeRPA' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCanDecrypt' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCanDerive' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCanEncrypt' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCanSign' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCanUnwrap' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCanVerify' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCanWrap' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCertificateEncoding' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCertificateType' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrComment' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCreationDate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrCreator' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrDescription' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrEffectiveKeySize' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrGeneric' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrIsExtractable' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrIsInvisible' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrIsNegative' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrIsPermanent' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrIsSensitive' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrIssuer' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyClass' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyClassPrivate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyClassPublic' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyClassSymmetric' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeySizeInBits' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyType' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyType3DES' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyTypeAES' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyTypeCAST' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyTypeDES' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyTypeDSA' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyTypeEC' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyTypeECDSA' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyTypeECSECPrimeRandom' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyTypeRC2' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyTypeRC4' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrKeyTypeRSA' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrLabel' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrModificationDate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrPRF' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrPRFHmacAlgSHA1' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrPRFHmacAlgSHA224' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrPRFHmacAlgSHA256' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrPRFHmacAlgSHA384' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrPRFHmacAlgSHA512' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrPath' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrPersistantReference' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrPersistentReference' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrPort' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocol' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolAFP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolAppleTalk' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolDAAP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolEPPC' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolFTP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolFTPAccount' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolFTPProxy' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolFTPS' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolHTTP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolHTTPProxy' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolHTTPS' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolHTTPSProxy' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolIMAP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolIMAPS' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolIPP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolIRC' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolIRCS' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolLDAP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolLDAPS' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolNNTP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolNNTPS' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolPOP3' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolPOP3S' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolRTSP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolRTSPProxy' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolSMB' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolSMTP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolSOCKS' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolSSH' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolTelnet' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrProtocolTelnetS' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrPublicKeyHash' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrRounds' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrSalt' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrSecurityDomain' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrSerialNumber' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrServer' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrService' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrSubject' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrSubjectKeyID' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrSyncViewHint' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrSynchronizable' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrSynchronizableAny' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrTokenID' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrTokenIDSecureEnclave' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecAttrType' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecBase32Encoding' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecBase64Encoding' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCFErrorArchitecture' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCFErrorGuestAttributes' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCFErrorInfoPlist' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCFErrorPath' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCFErrorPattern' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCFErrorRequirementSyntax' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCFErrorResourceAdded' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCFErrorResourceAltered' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCFErrorResourceMissing' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCFErrorResourceSeal' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCFErrorResourceSideband' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecClass' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecClassCertificate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecClassGenericPassword' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecClassIdentity' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecClassInternetPassword' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecClassKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeAttributeArchitecture' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeAttributeBundleVersion' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeAttributeSubarchitecture' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeAttributeUniversalFileOffset' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoCMS' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoCdHashes' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoCertificates' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoChangedFiles' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoDesignatedRequirement' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoDigestAlgorithm' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoDigestAlgorithms' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoEntitlements' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoEntitlementsDict' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoFlags' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoFormat' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoIdentifier' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoImplicitDesignatedRequirement' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoMainExecutable' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoPList' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoPlatformIdentifier' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoRequirementData' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoRequirements' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoRuntimeVersion' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoSource' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoStatus' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoTeamIdentifier' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoTime' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoTimestamp' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoTrust' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCodeInfoUnique' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecCompressionRatio' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecDecodeTypeAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecDigestHMACKeyAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecDigestHMACMD5' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecDigestHMACSHA1' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecDigestHMACSHA2' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecDigestLengthAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecDigestMD2' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecDigestMD4' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecDigestMD5' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecDigestSHA1' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecDigestSHA2' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecDigestTypeAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecEncodeLineLengthAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecEncodeTypeAttribute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecEncryptKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecEncryptionMode' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecGuestAttributeArchitecture' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecGuestAttributeAudit' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecGuestAttributeCanonical' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecGuestAttributeDynamicCode' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecGuestAttributeDynamicCodeInfoPlist' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecGuestAttributeHash' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecGuestAttributeMachPort' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecGuestAttributePid' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecGuestAttributeSubarchitecture' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecIVKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecIdentityDomainDefault' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecIdentityDomainKerberosKDC' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecImportExportAccess' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecImportExportKeychain' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecImportExportPassphrase' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecImportItemCertChain' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecImportItemIdentity' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecImportItemKeyID' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecImportItemLabel' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecImportItemTrust' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecInputIsAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecInputIsDigest' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecInputIsPlainText' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecInputIsRaw' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDHKeyExchangeCofactor' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDHKeyExchangeStandard' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDSASignatureDigestX962' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDSASignatureDigestX962SHA1' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDSASignatureDigestX962SHA224' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDSASignatureDigestX962SHA256' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDSASignatureDigestX962SHA384' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDSASignatureDigestX962SHA512' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDSASignatureMessageX962SHA1' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDSASignatureMessageX962SHA224' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDSASignatureMessageX962SHA256' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDSASignatureMessageX962SHA384' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDSASignatureMessageX962SHA512' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECDSASignatureRFC4754' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSAEncryptionOAEPSHA1' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSAEncryptionOAEPSHA224' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSAEncryptionOAEPSHA256' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSAEncryptionOAEPSHA384' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSAEncryptionOAEPSHA512' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSAEncryptionPKCS1' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSAEncryptionRaw' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureDigestPSSSHA1' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureDigestPSSSHA224' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureDigestPSSSHA256' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureDigestPSSSHA384' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureDigestPSSSHA512' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureMessagePSSSHA1' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureMessagePSSSHA224' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureMessagePSSSHA256' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureMessagePSSSHA384' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureMessagePSSSHA512' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyAlgorithm _Nonnull' name='kSecKeyAlgorithmRSASignatureRaw' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecKeyAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyKeyExchangeParameter _Nonnull' name='kSecKeyKeyExchangeParameterRequestedSize' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecKeyKeyExchangeParameter _Nonnull' name='kSecKeyKeyExchangeParameterSharedInfo' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecLineLength64' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecLineLength76' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchCaseInsensitive' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchDiacriticInsensitive' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchEmailAddressIfPresent' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchIssuers' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchItemList' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchLimit' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchLimitAll' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchLimitOne' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchPolicy' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchSearchList' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchSubjectContains' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchSubjectEndsWith' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchSubjectStartsWith' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchSubjectWholeString' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchTrustedOnly' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchValidOnDate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecMatchWidthInsensitive' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecModeCBCKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecModeCFBKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecModeECBKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecModeNoneKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecModeOFBKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOAEPEncodingParametersAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOAEPMGF1DigestAlgorithmAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOAEPMessageLengthAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDADC_CERT_POLICY' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDAPPLE_CERT_POLICY' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDAPPLE_EKU_CODE_SIGNING' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDAPPLE_EKU_CODE_SIGNING_DEV' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDAPPLE_EKU_ICHAT_ENCRYPTION' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDAPPLE_EKU_ICHAT_SIGNING' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDAPPLE_EKU_RESOURCE_SIGNING' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDAPPLE_EKU_SYSTEM_IDENTITY' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDAPPLE_EXTENSION' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDAPPLE_EXTENSION_AAI_INTERMEDIATE' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDAPPLE_EXTENSION_ADC_APPLE_SIGNING' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDAPPLE_EXTENSION_ADC_DEV_SIGNING' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDAPPLE_EXTENSION_APPLEID_INTERMEDIATE' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDAPPLE_EXTENSION_APPLE_SIGNING' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDAPPLE_EXTENSION_CODE_SIGNING' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDAPPLE_EXTENSION_INTERMEDIATE_MARKER' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDAPPLE_EXTENSION_ITMS_INTERMEDIATE' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDAPPLE_EXTENSION_WWDR_INTERMEDIATE' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDAuthorityInfoAccess' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDAuthorityKeyIdentifier' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDBasicConstraints' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDBiometricInfo' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDCSSMKeyStruct' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDCertIssuer' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDCertificatePolicies' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDClientAuth' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDCollectiveStateProvinceName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDCollectiveStreetAddress' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDCommonName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDCountryName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDCrlDistributionPoints' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDCrlNumber' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDCrlReason' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDDOTMAC_CERT_EMAIL_ENCRYPT' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDDOTMAC_CERT_EMAIL_SIGN' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDDOTMAC_CERT_EXTENSION' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDDOTMAC_CERT_IDENTITY' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDDOTMAC_CERT_POLICY' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDDeltaCrlIndicator' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDDescription' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDEKU_IPSec' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDEmailAddress' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDEmailProtection' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDExtendedKeyUsage' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDExtendedKeyUsageAny' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDExtendedUseCodeSigning' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDGivenName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDHoldInstructionCode' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDInvalidityDate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDIssuerAltName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDIssuingDistributionPoint' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDIssuingDistributionPoints' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDKERBv5_PKINIT_KP_CLIENT_AUTH' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDKERBv5_PKINIT_KP_KDC' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDKeyUsage' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDLocalityName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDMS_NTPrincipalName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDMicrosoftSGC' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDNameConstraints' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDNetscapeCertSequence' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDNetscapeCertType' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDNetscapeSGC' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDOCSPSigning' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDOrganizationName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDOrganizationalUnitName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDPolicyConstraints' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDPolicyMappings' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDPrivateKeyUsagePeriod' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDQC_Statements' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDSRVName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDSerialNumber' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDServerAuth' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDStateProvinceName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDStreetAddress' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDSubjectAltName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDSubjectDirectoryAttributes' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDSubjectEmailAddress' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDSubjectInfoAccess' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDSubjectKeyIdentifier' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDSubjectPicture' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDSubjectSignatureBitmap' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDSurname' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDTimeStamping' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDTitle' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDUseExemptions' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1CertificateIssuerUniqueId' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1CertificateSubjectUniqueId' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1IssuerName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1IssuerNameCStruct' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1IssuerNameLDAP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1IssuerNameStd' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1SerialNumber' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1Signature' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1SignatureAlgorithm' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1SignatureAlgorithmParameters' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1SignatureAlgorithmTBS' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1SignatureCStruct' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1SignatureStruct' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1SubjectName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1SubjectNameCStruct' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1SubjectNameLDAP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1SubjectNameStd' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1SubjectPublicKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1SubjectPublicKeyAlgorithm' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1SubjectPublicKeyAlgorithmParameters' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1SubjectPublicKeyCStruct' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1ValidityNotAfter' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1ValidityNotBefore' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V1Version' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V3Certificate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V3CertificateCStruct' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V3CertificateExtensionCStruct' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V3CertificateExtensionCritical' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V3CertificateExtensionId' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V3CertificateExtensionStruct' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V3CertificateExtensionType' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V3CertificateExtensionValue' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V3CertificateExtensionsCStruct' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V3CertificateExtensionsStruct' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V3CertificateNumberOfExtensions' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V3SignedCertificate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecOIDX509V3SignedCertificateCStruct' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPaddingKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPaddingNoneKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPaddingOAEPKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPaddingPKCS1Key' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPaddingPKCS5Key' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPaddingPKCS7Key' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyAppleCodeSigning' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyAppleEAP' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyAppleIDValidation' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyAppleIPsec' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyApplePKINITClient' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyApplePKINITServer' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyApplePassbookSigning' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyApplePayIssuerEncryption' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyAppleRevocation' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyAppleSMIME' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyAppleSSL' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyAppleTimeStamping' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyAppleX509Basic' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyAppleiChat' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyClient' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyKU_CRLSign' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyKU_DataEncipherment' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyKU_DecipherOnly' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyKU_DigitalSignature' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyKU_EncipherOnly' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyKU_KeyAgreement' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyKU_KeyCertSign' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyKU_KeyEncipherment' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyKU_NonRepudiation' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyMacAppStoreReceipt' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyOid' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyRevocationFlags' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPolicyTeamIdentifier' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPrivateKeyAttrs' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPropertyKeyLabel' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPropertyKeyLocalizedLabel' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPropertyKeyType' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPropertyKeyValue' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPropertyTypeData' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPropertyTypeDate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPropertyTypeError' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPropertyTypeSection' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPropertyTypeString' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPropertyTypeSuccess' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPropertyTypeTitle' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPropertyTypeURL' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPropertyTypeWarning' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecPublicKeyAttrs' type64='^{__CFString=}'/>
<constant const='true' declared_type64='SecRandomRef _Nonnull' name='kSecRandomDefault' type64='^{__SecRandom=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecReturnAttributes' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecReturnData' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecReturnPersistentRef' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecReturnRef' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecSignatureAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTransformAbortAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTransformAbortOriginatorKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTransformActionAttributeNotification' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTransformActionAttributeValidation' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTransformActionCanExecute' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTransformActionExternalizeExtraData' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTransformActionFinalize' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTransformActionInternalizeExtraData' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTransformActionProcessData' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTransformActionStartingExecution' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTransformDebugAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTransformErrorDomain' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTransformInputAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTransformOutputAttributeName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTransformPreviousErrorKey' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTransformTransformName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTrustCertificateTransparency' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTrustCertificateTransparencyWhiteList' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTrustEvaluationDate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTrustExtendedValidation' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTrustOrganizationName' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTrustResultValue' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTrustRevocationChecked' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecTrustRevocationValidUntilDate' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecUseAuthenticationContext' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecUseAuthenticationUI' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecUseAuthenticationUIAllow' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecUseAuthenticationUIFail' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecUseAuthenticationUISkip' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecUseItemList' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecUseKeychain' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecUseNoAuthenticationUI' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecUseOperationPrompt' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecValueData' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecValuePersistentRef' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecValueRef' type64='^{__CFString=}'/>
<constant const='true' declared_type64='CFStringRef _Nonnull' name='kSecZLibEncoding' type64='^{__CFString=}'/>
<constant const='true' declared_type64='DERItem' name='oidAdCAIssuer' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidAdOCSP' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidAnsip384r1' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidAnsip521r1' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidAnyExtendedKeyUsage' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidAnyPolicy' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidAuthorityInfoAccess' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidAuthorityKeyIdentifier' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidBasicConstraints' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidCertificatePolicies' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidCommonName' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidCountryName' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidCrlDistributionPoints' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidDescription' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidEcPrime192v1' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidEcPrime256v1' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidEcPubKey' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidEmailAddress' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidEntrustVersInfo' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidExtendedKeyUsage' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidExtendedKeyUsageClientAuth' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidExtendedKeyUsageCodeSigning' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidExtendedKeyUsageEmailProtection' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidExtendedKeyUsageIPSec' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidExtendedKeyUsageMicrosoftSGC' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidExtendedKeyUsageNetscapeSGC' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidExtendedKeyUsageOCSPSigning' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidExtendedKeyUsageServerAuth' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidExtendedKeyUsageTimeStamping' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidFee' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidFriendlyName' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidGoogleEmbeddedSignedCertificateTimestamp' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidGoogleOCSPSignedCertificateTimestamp' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidInhibitAnyPolicy' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidIssuerAltName' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidKeyUsage' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidLocalKeyId' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidLocalityName' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidMSNTPrincipalName' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidMd2' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidMd2Rsa' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidMd4' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidMd4Rsa' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidMd5' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidMd5Fee' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidMd5Rsa' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidNameConstraints' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidNetscapeCertType' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidOrganizationName' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidOrganizationalUnitName' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidPolicyConstraints' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidPolicyMappings' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidPrivateKeyUsagePeriod' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidQtCps' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidQtUNotice' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidRsa' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSha1' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSha1Dsa' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSha1DsaCommonOIW' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSha1DsaOIW' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSha1Ecdsa' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSha1Fee' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSha1Rsa' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSha1RsaOIW' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSha224' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSha224Ecdsa' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSha224Rsa' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSha256' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSha256Ecdsa' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSha256Rsa' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSha384' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSha384Ecdsa' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSha384Rsa' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSha512' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSha512Ecdsa' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSha512Rsa' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidStateOrProvinceName' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSubjectAltName' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSubjectInfoAccess' type64='{_DERItem=*Q}'/>
<constant const='true' declared_type64='DERItem' name='oidSubjectKeyIdentifier' type64='{_DERItem=*Q}'/>
<string_constant name='CSSM_APPLE_ACL_TAG_INTEGRITY' value='___INTEGRITY___'/>
<string_constant name='CSSM_APPLE_ACL_TAG_PARTITION_ID' value='___PARTITION___'/>
<string_constant name='CSSM_APPLE_CRL_END_OF_TIME' value='99991231235959'/>
<string_constant name='MDS_CDSA_DIRECTORY_NAME' value='MDS CDSA Directory'/>
<string_constant name='MDS_OBJECT_DIRECTORY_NAME' value='MDS Object Directory'/>
<string_constant name='kAuthorizationComment' value='comment'/>
<string_constant name='kAuthorizationEnvironmentIcon' value='icon'/>
<string_constant name='kAuthorizationEnvironmentPassword' value='password'/>
<string_constant name='kAuthorizationEnvironmentPrompt' value='prompt'/>
<string_constant name='kAuthorizationEnvironmentShared' value='shared'/>
<string_constant name='kAuthorizationEnvironmentUsername' value='username'/>
<string_constant name='kAuthorizationRightExecute' value='system.privilege.admin'/>
<string_constant name='kAuthorizationRightRule' value='rule'/>
<string_constant name='kAuthorizationRuleAuthenticateAsAdmin' value='authenticate-admin'/>
<string_constant name='kAuthorizationRuleAuthenticateAsSessionUser' value='authenticate-session-owner'/>
<string_constant name='kAuthorizationRuleClassAllow' value='allow'/>
<string_constant name='kAuthorizationRuleClassDeny' value='deny'/>
<string_constant name='kAuthorizationRuleIsAdmin' value='is-admin'/>
<string_constant name='kKeychainDbSuffix' value='.keychain-db'/>
<string_constant name='kKeychainSuffix' value='.keychain'/>
<string_constant name='kSecTrustSettingsAllowedError' nsstring='true' value='kSecTrustSettingsAllowedError'/>
<string_constant name='kSecTrustSettingsApplication' nsstring='true' value='kSecTrustSettingsApplication'/>
<string_constant name='kSecTrustSettingsKeyUsage' nsstring='true' value='kSecTrustSettingsKeyUsage'/>
<string_constant name='kSecTrustSettingsPolicy' nsstring='true' value='kSecTrustSettingsPolicy'/>
<string_constant name='kSecTrustSettingsPolicyString' nsstring='true' value='kSecTrustSettingsPolicyString'/>
<string_constant name='kSecTrustSettingsResult' nsstring='true' value='kSecTrustSettingsResult'/>
<string_constant name='kSystemKeychainDir' value='/Library/Keychains/'/>
<string_constant name='kSystemKeychainName' value='System.keychain'/>
<string_constant name='kSystemUnlockFile' value='/var/db/SystemKey'/>
<enum name='APPLE_ADS_OID' value64='100'/>
<enum name='APPLE_ADS_OID_LENGTH' value64='7'/>
<enum name='APPLE_ALG_OID' value64='2'/>
<enum name='APPLE_ALG_OID_LENGTH' value64='8'/>
<enum name='APPLE_CERT_POLICIES' value64='5'/>
<enum name='APPLE_CERT_POLICIES_APPLEID' value64='7'/>
<enum name='APPLE_CERT_POLICIES_APPLEID_LENGTH' value64='9'/>
<enum name='APPLE_CERT_POLICIES_APPLEID_SHARING' value64='1'/>
<enum name='APPLE_CERT_POLICIES_APPLEID_SHARING_LENGTH' value64='10'/>
<enum name='APPLE_CERT_POLICIES_LENGTH' value64='8'/>
<enum name='APPLE_CERT_POLICIES_MACAPPSTORE' value64='6'/>
<enum name='APPLE_CERT_POLICIES_MACAPPSTORE_LENGTH' value64='9'/>
<enum name='APPLE_CERT_POLICIES_MACAPPSTORE_RECEIPT' value64='1'/>
<enum name='APPLE_CERT_POLICIES_MACAPPSTORE_RECEIPT_LENGTH' value64='10'/>
<enum name='APPLE_CERT_POLICIES_MOBILE_STORE_SIGNING' value64='12'/>
<enum name='APPLE_CERT_POLICIES_MOBILE_STORE_SIGNING_LENGTH' value64='9'/>
<enum name='APPLE_CERT_POLICIES_TEST_MOBILE_STORE_SIGNING' value64='1'/>
<enum name='APPLE_CERT_POLICIES_TEST_MOBILE_STORE_SIGNING_LENGTH' value64='10'/>
<enum name='APPLE_DOTMAC_CERT_EXTEN_OID' value64='2'/>
<enum name='APPLE_DOTMAC_CERT_EXTEN_OID_LENGTH' value64='9'/>
<enum name='APPLE_DOTMAC_CERT_OID' value64='3'/>
<enum name='APPLE_DOTMAC_CERT_OID_LENGTH' value64='8'/>
<enum name='APPLE_DOTMAC_CERT_REQ_OID' value64='1'/>
<enum name='APPLE_DOTMAC_CERT_REQ_OID_LENGTH' value64='9'/>
<enum name='APPLE_DOTMAC_CERT_REQ_VALUE_OID' value64='3'/>
<enum name='APPLE_DOTMAC_CERT_REQ_VALUE_OID_LENGTH' value64='9'/>
<enum name='APPLE_EKU_CODE_SIGNING' value64='1'/>
<enum name='APPLE_EKU_CODE_SIGNING_LENGTH' value64='9'/>
<enum name='APPLE_EKU_OID' value64='4'/>
<enum name='APPLE_EKU_OID_LENGTH' value64='8'/>
<enum name='APPLE_EXTENSION_AAI_INTERMEDIATE' value64='3'/>
<enum name='APPLE_EXTENSION_AAI_INTERMEDIATE_LENGTH' value64='10'/>
<enum name='APPLE_EXTENSION_APPLEID_INTERMEDIATE' value64='7'/>
<enum name='APPLE_EXTENSION_APPLEID_INTERMEDIATE_LENGTH' value64='10'/>
<enum name='APPLE_EXTENSION_APPLEID_SHARING' value64='7'/>
<enum name='APPLE_EXTENSION_APPLEID_SHARING_LENGTH' value64='9'/>
<enum name='APPLE_EXTENSION_CODE_SIGNING' value64='1'/>
<enum name='APPLE_EXTENSION_CODE_SIGNING_LENGTH' value64='9'/>
<enum name='APPLE_EXTENSION_DEVELOPER_AUTHENTICATION' value64='11'/>
<enum name='APPLE_EXTENSION_DEVELOPER_AUTHENTICATION_LENGTH' value64='10'/>
<enum name='APPLE_EXTENSION_ESCROW_SERVICE' value64='1'/>
<enum name='APPLE_EXTENSION_ESCROW_SERVICE_LENGTH' value64='10'/>
<enum name='APPLE_EXTENSION_INTERMEDIATE_MARKER' value64='2'/>
<enum name='APPLE_EXTENSION_INTERMEDIATE_MARKER_LENGTH' value64='9'/>
<enum name='APPLE_EXTENSION_ITMS_INTERMEDIATE' value64='2'/>
<enum name='APPLE_EXTENSION_ITMS_INTERMEDIATE_LENGTH' value64='10'/>
<enum name='APPLE_EXTENSION_MACAPPSTORE_RECEIPT' value64='1'/>
<enum name='APPLE_EXTENSION_MACAPPSTORE_RECEIPT_LENGTH' value64='10'/>
<enum name='APPLE_EXTENSION_OID' value64='6'/>
<enum name='APPLE_EXTENSION_OID_LENGTH' value64='8'/>
<enum name='APPLE_EXTENSION_PROVISIONING_PROFILE_SIGNING' value64='11'/>
<enum name='APPLE_EXTENSION_PROVISIONING_PROFILE_SIGNING_LENGTH' value64='9'/>
<enum name='APPLE_EXTENSION_SERVER_AUTHENTICATION' value64='12'/>
<enum name='APPLE_EXTENSION_SERVER_AUTHENTICATION_LENGTH' value64='10'/>
<enum name='APPLE_EXTENSION_SYSINT2_INTERMEDIATE' value64='10'/>
<enum name='APPLE_EXTENSION_SYSINT2_INTERMEDIATE_LENGTH' value64='10'/>
<enum name='APPLE_EXTENSION_WWDR_INTERMEDIATE' value64='1'/>
<enum name='APPLE_EXTENSION_WWDR_INTERMEDIATE_LENGTH' value64='10'/>
<enum name='APPLE_OID' value64='99'/>
<enum name='APPLE_OID_LENGTH' value64='6'/>
<enum name='APPLE_TP_OID' value64='1'/>
<enum name='APPLE_TP_OID_LENGTH' value64='8'/>
<enum name='BER_TAG_BIT_STRING' value64='3'/>
<enum name='BER_TAG_BOOLEAN' value64='1'/>
<enum name='BER_TAG_ENUMERATED' value64='10'/>
<enum name='BER_TAG_EXTERNAL' value64='8'/>
<enum name='BER_TAG_GENERALIZED_TIME' value64='24'/>
<enum name='BER_TAG_GENERAL_STRING' value64='27'/>
<enum name='BER_TAG_GRAPHIC_STRING' value64='25'/>
<enum name='BER_TAG_IA5_STRING' value64='22'/>
<enum name='BER_TAG_INTEGER' value64='2'/>
<enum name='BER_TAG_ISO646_STRING' value64='26'/>
<enum name='BER_TAG_NULL' value64='5'/>
<enum name='BER_TAG_NUMERIC_STRING' value64='18'/>
<enum name='BER_TAG_OBJECT_DESCRIPTOR' value64='7'/>
<enum name='BER_TAG_OCTET_STRING' value64='4'/>
<enum name='BER_TAG_OID' value64='6'/>
<enum name='BER_TAG_PKIX_BMP_STRING' value64='30'/>
<enum name='BER_TAG_PKIX_UNIVERSAL_STRING' value64='28'/>
<enum name='BER_TAG_PKIX_UTF8_STRING' value64='12'/>
<enum name='BER_TAG_PRINTABLE_STRING' value64='19'/>
<enum name='BER_TAG_REAL' value64='9'/>
<enum name='BER_TAG_SEQUENCE' value64='16'/>
<enum name='BER_TAG_SET' value64='17'/>
<enum name='BER_TAG_T61_STRING' value64='20'/>
<enum name='BER_TAG_TELETEX_STRING' value64='20'/>
<enum name='BER_TAG_UNKNOWN' value64='0'/>
<enum name='BER_TAG_UTC_TIME' value64='23'/>
<enum name='BER_TAG_VIDEOTEX_STRING' value64='21'/>
<enum name='BER_TAG_VISIBLE_STRING' value64='26'/>
<enum name='CE_CDNT_FullName' value64='0'/>
<enum name='CE_CDNT_NameRelativeToCrlIssuer' value64='1'/>
<enum name='CE_CD_AffiliationChanged' value64='16'/>
<enum name='CE_CD_CACompromise' value64='32'/>
<enum name='CE_CD_CertificateHold' value64='2'/>
<enum name='CE_CD_CessationOfOperation' value64='4'/>
<enum name='CE_CD_KeyCompromise' value64='64'/>
<enum name='CE_CD_Superseded' value64='8'/>
<enum name='CE_CD_Unspecified' value64='128'/>
<enum name='CE_CR_AffiliationChanged' value64='3'/>
<enum name='CE_CR_CACompromise' value64='2'/>
<enum name='CE_CR_CertificateHold' value64='6'/>
<enum name='CE_CR_CessationOfOperation' value64='5'/>
<enum name='CE_CR_KeyCompromise' value64='1'/>
<enum name='CE_CR_RemoveFromCRL' value64='8'/>
<enum name='CE_CR_Superseded' value64='4'/>
<enum name='CE_CR_Unspecified' value64='0'/>
<enum name='CE_KU_CRLSign' value64='512'/>
<enum name='CE_KU_DataEncipherment' value64='4096'/>
<enum name='CE_KU_DecipherOnly' value64='128'/>
<enum name='CE_KU_DigitalSignature' value64='32768'/>
<enum name='CE_KU_EncipherOnly' value64='256'/>
<enum name='CE_KU_KeyAgreement' value64='2048'/>
<enum name='CE_KU_KeyCertSign' value64='1024'/>
<enum name='CE_KU_KeyEncipherment' value64='8192'/>
<enum name='CE_KU_NonRepudiation' value64='16384'/>
<enum name='CE_NCT_ObjSign' value64='4096'/>
<enum name='CE_NCT_ObjSignCA' value64='256'/>
<enum name='CE_NCT_Reserved' value64='2048'/>
<enum name='CE_NCT_SMIME' value64='8192'/>
<enum name='CE_NCT_SMIME_CA' value64='512'/>
<enum name='CE_NCT_SSL_CA' value64='1024'/>
<enum name='CE_NCT_SSL_Client' value64='32768'/>
<enum name='CE_NCT_SSL_Server' value64='16384'/>
<enum name='CSSMERR_AC_DEVICE_FAILED' value64='-2147405595'/>
<enum name='CSSMERR_AC_DEVICE_RESET' value64='-2147405596'/>
<enum name='CSSMERR_AC_FUNCTION_FAILED' value64='-2147405814'/>
<enum name='CSSMERR_AC_FUNCTION_NOT_IMPLEMENTED' value64='-2147405817'/>
<enum name='CSSMERR_AC_INSUFFICIENT_CLIENT_IDENTIFICATION' value64='-2147405597'/>
<enum name='CSSMERR_AC_INTERNAL_ERROR' value64='-2147405823'/>
<enum name='CSSMERR_AC_INVALID_BASE_ACLS' value64='-2147405567'/>
<enum name='CSSMERR_AC_INVALID_CL_HANDLE' value64='-2147405742'/>
<enum name='CSSMERR_AC_INVALID_CONTEXT_HANDLE' value64='-2147405760'/>
<enum name='CSSMERR_AC_INVALID_DATA' value64='-2147405754'/>
<enum name='CSSMERR_AC_INVALID_DB_HANDLE' value64='-2147405750'/>
<enum name='CSSMERR_AC_INVALID_DB_LIST' value64='-2147405748'/>
<enum name='CSSMERR_AC_INVALID_DB_LIST_POINTER' value64='-2147405747'/>
<enum name='CSSMERR_AC_INVALID_DL_HANDLE' value64='-2147405743'/>
<enum name='CSSMERR_AC_INVALID_ENCODING' value64='-2147405565'/>
<enum name='CSSMERR_AC_INVALID_INPUT_POINTER' value64='-2147405819'/>
<enum name='CSSMERR_AC_INVALID_OUTPUT_POINTER' value64='-2147405818'/>
<enum name='CSSMERR_AC_INVALID_PASSTHROUGH_ID' value64='-2147405738'/>
<enum name='CSSMERR_AC_INVALID_POINTER' value64='-2147405820'/>
<enum name='CSSMERR_AC_INVALID_REQUESTOR' value64='-2147405563'/>
<enum name='CSSMERR_AC_INVALID_REQUEST_DESCRIPTOR' value64='-2147405562'/>
<enum name='CSSMERR_AC_INVALID_TP_HANDLE' value64='-2147405741'/>
<enum name='CSSMERR_AC_INVALID_TUPLE_CREDENTIALS' value64='-2147405566'/>
<enum name='CSSMERR_AC_INVALID_VALIDITY_PERIOD' value64='-2147405564'/>
<enum name='CSSMERR_AC_IN_DARK_WAKE' value64='-2147405594'/>
<enum name='CSSMERR_AC_MDS_ERROR' value64='-2147405821'/>
<enum name='CSSMERR_AC_MEMORY_ERROR' value64='-2147405822'/>
<enum name='CSSMERR_AC_NO_USER_INTERACTION' value64='-2147405600'/>
<enum name='CSSMERR_AC_OS_ACCESS_DENIED' value64='-2147405815'/>
<enum name='CSSMERR_AC_SELF_CHECK_FAILED' value64='-2147405816'/>
<enum name='CSSMERR_AC_SERVICE_NOT_AVAILABLE' value64='-2147405598'/>
<enum name='CSSMERR_AC_USER_CANCELED' value64='-2147405599'/>
<enum name='CSSMERR_APPLEDL_DISK_FULL' value64='-2147412991'/>
<enum name='CSSMERR_APPLEDL_FILE_TOO_BIG' value64='-2147412989'/>
<enum name='CSSMERR_APPLEDL_INCOMPATIBLE_DATABASE_BLOB' value64='-2147412986'/>
<enum name='CSSMERR_APPLEDL_INCOMPATIBLE_KEY_BLOB' value64='-2147412985'/>
<enum name='CSSMERR_APPLEDL_INVALID_DATABASE_BLOB' value64='-2147412988'/>
<enum name='CSSMERR_APPLEDL_INVALID_KEY_BLOB' value64='-2147412987'/>
<enum name='CSSMERR_APPLEDL_INVALID_OPEN_PARAMETERS' value64='-2147412992'/>
<enum name='CSSMERR_APPLEDL_QUOTA_EXCEEDED' value64='-2147412990'/>
<enum name='CSSMERR_APPLETP_BAD_CERT_FROM_ISSUER' value64='-2147408873'/>
<enum name='CSSMERR_APPLETP_CA_PIN_MISMATCH' value64='-2147408836'/>
<enum name='CSSMERR_APPLETP_CERT_NOT_FOUND_FROM_ISSUER' value64='-2147408874'/>
<enum name='CSSMERR_APPLETP_CODE_SIGN_DEVELOPMENT' value64='-2147408845'/>
<enum name='CSSMERR_APPLETP_CRL_BAD_URI' value64='-2147408881'/>
<enum name='CSSMERR_APPLETP_CRL_EXPIRED' value64='-2147408885'/>
<enum name='CSSMERR_APPLETP_CRL_INVALID_ANCHOR_CERT' value64='-2147408877'/>
<enum name='CSSMERR_APPLETP_CRL_NOT_FOUND' value64='-2147408883'/>
<enum name='CSSMERR_APPLETP_CRL_NOT_TRUSTED' value64='-2147408878'/>
<enum name='CSSMERR_APPLETP_CRL_NOT_VALID_YET' value64='-2147408884'/>
<enum name='CSSMERR_APPLETP_CRL_POLICY_FAIL' value64='-2147408876'/>
<enum name='CSSMERR_APPLETP_CRL_SERVER_DOWN' value64='-2147408882'/>
<enum name='CSSMERR_APPLETP_CS_BAD_CERT_CHAIN_LENGTH' value64='-2147408849'/>
<enum name='CSSMERR_APPLETP_CS_BAD_PATH_LENGTH' value64='-2147408847'/>
<enum name='CSSMERR_APPLETP_CS_NO_BASIC_CONSTRAINTS' value64='-2147408848'/>
<enum name='CSSMERR_APPLETP_CS_NO_EXTENDED_KEY_USAGE' value64='-2147408846'/>
<enum name='CSSMERR_APPLETP_EXT_KEYUSAGE_NOT_CRITICAL' value64='-2147408838'/>
<enum name='CSSMERR_APPLETP_HOSTNAME_MISMATCH' value64='-2147408896'/>
<enum name='CSSMERR_APPLETP_IDENTIFIER_MISSING' value64='-2147408837'/>
<enum name='CSSMERR_APPLETP_IDP_FAIL' value64='-2147408875'/>
<enum name='CSSMERR_APPLETP_INCOMPLETE_REVOCATION_CHECK' value64='-2147408861'/>
<enum name='CSSMERR_APPLETP_INVALID_AUTHORITY_ID' value64='-2147408892'/>
<enum name='CSSMERR_APPLETP_INVALID_CA' value64='-2147408893'/>
<enum name='CSSMERR_APPLETP_INVALID_EMPTY_SUBJECT' value64='-2147408841'/>
<enum name='CSSMERR_APPLETP_INVALID_EXTENDED_KEY_USAGE' value64='-2147408889'/>
<enum name='CSSMERR_APPLETP_INVALID_ID_LINKAGE' value64='-2147408888'/>
<enum name='CSSMERR_APPLETP_INVALID_KEY_USAGE' value64='-2147408890'/>
<enum name='CSSMERR_APPLETP_INVALID_ROOT' value64='-2147408886'/>
<enum name='CSSMERR_APPLETP_INVALID_SUBJECT_ID' value64='-2147408891'/>
<enum name='CSSMERR_APPLETP_MISSING_REQUIRED_EXTENSION' value64='-2147408839'/>
<enum name='CSSMERR_APPLETP_NETWORK_FAILURE' value64='-2147408860'/>
<enum name='CSSMERR_APPLETP_NO_BASIC_CONSTRAINTS' value64='-2147408894'/>
<enum name='CSSMERR_APPLETP_OCSP_BAD_REQUEST' value64='-2147408864'/>
<enum name='CSSMERR_APPLETP_OCSP_BAD_RESPONSE' value64='-2147408865'/>
<enum name='CSSMERR_APPLETP_OCSP_INVALID_ANCHOR_CERT' value64='-2147408858'/>
<enum name='CSSMERR_APPLETP_OCSP_NONCE_MISMATCH' value64='-2147408850'/>
<enum name='CSSMERR_APPLETP_OCSP_NOT_TRUSTED' value64='-2147408859'/>
<enum name='CSSMERR_APPLETP_OCSP_NO_SIGNER' value64='-2147408856'/>
<enum name='CSSMERR_APPLETP_OCSP_RESP_INTERNAL_ERR' value64='-2147408854'/>
<enum name='CSSMERR_APPLETP_OCSP_RESP_MALFORMED_REQ' value64='-2147408855'/>
<enum name='CSSMERR_APPLETP_OCSP_RESP_SIG_REQUIRED' value64='-2147408852'/>
<enum name='CSSMERR_APPLETP_OCSP_RESP_TRY_LATER' value64='-2147408853'/>
<enum name='CSSMERR_APPLETP_OCSP_RESP_UNAUTHORIZED' value64='-2147408851'/>
<enum name='CSSMERR_APPLETP_OCSP_SIG_ERROR' value64='-2147408857'/>
<enum name='CSSMERR_APPLETP_OCSP_STATUS_UNRECOGNIZED' value64='-2147408862'/>
<enum name='CSSMERR_APPLETP_OCSP_UNAVAILABLE' value64='-2147408863'/>
<enum name='CSSMERR_APPLETP_PATH_LEN_CONSTRAINT' value64='-2147408887'/>
<enum name='CSSMERR_APPLETP_RS_BAD_CERT_CHAIN_LENGTH' value64='-2147408844'/>
<enum name='CSSMERR_APPLETP_RS_BAD_EXTENDED_KEY_USAGE' value64='-2147408843'/>
<enum name='CSSMERR_APPLETP_SMIME_BAD_EXT_KEY_USE' value64='-2147408871'/>
<enum name='CSSMERR_APPLETP_SMIME_BAD_KEY_USE' value64='-2147408870'/>
<enum name='CSSMERR_APPLETP_SMIME_EMAIL_ADDRS_NOT_FOUND' value64='-2147408872'/>
<enum name='CSSMERR_APPLETP_SMIME_KEYUSAGE_NOT_CRITICAL' value64='-2147408869'/>
<enum name='CSSMERR_APPLETP_SMIME_NO_EMAIL_ADDRS' value64='-2147408868'/>
<enum name='CSSMERR_APPLETP_SMIME_SUBJ_ALT_NAME_NOT_CRIT' value64='-2147408867'/>
<enum name='CSSMERR_APPLETP_SSL_BAD_EXT_KEY_USE' value64='-2147408866'/>
<enum name='CSSMERR_APPLETP_TRUST_SETTING_DENY' value64='-2147408842'/>
<enum name='CSSMERR_APPLETP_UNKNOWN_CERT_EXTEN' value64='-2147408880'/>
<enum name='CSSMERR_APPLETP_UNKNOWN_CRITICAL_EXTEN' value64='-2147408895'/>
<enum name='CSSMERR_APPLETP_UNKNOWN_CRL_EXTEN' value64='-2147408879'/>
<enum name='CSSMERR_APPLETP_UNKNOWN_QUAL_CERT_STATEMENT' value64='-2147408840'/>
<enum name='CSSMERR_APPLE_DOTMAC_CSR_VERIFY_FAIL' value64='-2147408785'/>
<enum name='CSSMERR_APPLE_DOTMAC_FAILED_CONSISTENCY_CHECK' value64='-2147408784'/>
<enum name='CSSMERR_APPLE_DOTMAC_NO_REQ_PENDING' value64='-2147408786'/>
<enum name='CSSMERR_APPLE_DOTMAC_REQ_IS_PENDING' value64='-2147408787'/>
<enum name='CSSMERR_APPLE_DOTMAC_REQ_QUEUED' value64='-2147408796'/>
<enum name='CSSMERR_APPLE_DOTMAC_REQ_REDIRECT' value64='-2147408795'/>
<enum name='CSSMERR_APPLE_DOTMAC_REQ_SERVER_ALREADY_EXIST' value64='-2147408789'/>
<enum name='CSSMERR_APPLE_DOTMAC_REQ_SERVER_AUTH' value64='-2147408792'/>
<enum name='CSSMERR_APPLE_DOTMAC_REQ_SERVER_ERR' value64='-2147408794'/>
<enum name='CSSMERR_APPLE_DOTMAC_REQ_SERVER_NOT_AVAIL' value64='-2147408790'/>
<enum name='CSSMERR_APPLE_DOTMAC_REQ_SERVER_PARAM' value64='-2147408793'/>
<enum name='CSSMERR_APPLE_DOTMAC_REQ_SERVER_SERVICE_ERROR' value64='-2147408788'/>
<enum name='CSSMERR_APPLE_DOTMAC_REQ_SERVER_UNIMPL' value64='-2147408791'/>
<enum name='CSSMERR_CL_CRL_ALREADY_SIGNED' value64='-2147411897'/>
<enum name='CSSMERR_CL_DEVICE_FAILED' value64='-2147411739'/>
<enum name='CSSMERR_CL_DEVICE_RESET' value64='-2147411740'/>
<enum name='CSSMERR_CL_FUNCTION_FAILED' value64='-2147411958'/>
<enum name='CSSMERR_CL_FUNCTION_NOT_IMPLEMENTED' value64='-2147411961'/>
<enum name='CSSMERR_CL_INSUFFICIENT_CLIENT_IDENTIFICATION' value64='-2147411741'/>
<enum name='CSSMERR_CL_INTERNAL_ERROR' value64='-2147411967'/>
<enum name='CSSMERR_CL_INVALID_BUNDLE_INFO' value64='-2147411708'/>
<enum name='CSSMERR_CL_INVALID_BUNDLE_POINTER' value64='-2147411711'/>
<enum name='CSSMERR_CL_INVALID_CACHE_HANDLE' value64='-2147411710'/>
<enum name='CSSMERR_CL_INVALID_CERTGROUP_POINTER' value64='-2147411902'/>
<enum name='CSSMERR_CL_INVALID_CERT_POINTER' value64='-2147411901'/>
<enum name='CSSMERR_CL_INVALID_CONTEXT_HANDLE' value64='-2147411904'/>
<enum name='CSSMERR_CL_INVALID_CRL_INDEX' value64='-2147411707'/>
<enum name='CSSMERR_CL_INVALID_CRL_POINTER' value64='-2147411900'/>
<enum name='CSSMERR_CL_INVALID_DATA' value64='-2147411898'/>
<enum name='CSSMERR_CL_INVALID_FIELD_POINTER' value64='-2147411899'/>
<enum name='CSSMERR_CL_INVALID_INPUT_POINTER' value64='-2147411963'/>
<enum name='CSSMERR_CL_INVALID_NUMBER_OF_FIELDS' value64='-2147411896'/>
<enum name='CSSMERR_CL_INVALID_OUTPUT_POINTER' value64='-2147411962'/>
<enum name='CSSMERR_CL_INVALID_PASSTHROUGH_ID' value64='-2147411882'/>
<enum name='CSSMERR_CL_INVALID_POINTER' value64='-2147411964'/>
<enum name='CSSMERR_CL_INVALID_RESULTS_HANDLE' value64='-2147411709'/>
<enum name='CSSMERR_CL_INVALID_SCOPE' value64='-2147411706'/>
<enum name='CSSMERR_CL_IN_DARK_WAKE' value64='-2147411738'/>
<enum name='CSSMERR_CL_MDS_ERROR' value64='-2147411965'/>
<enum name='CSSMERR_CL_MEMORY_ERROR' value64='-2147411966'/>
<enum name='CSSMERR_CL_NO_FIELD_VALUES' value64='-2147411705'/>
<enum name='CSSMERR_CL_NO_USER_INTERACTION' value64='-2147411744'/>
<enum name='CSSMERR_CL_OS_ACCESS_DENIED' value64='-2147411959'/>
<enum name='CSSMERR_CL_SCOPE_NOT_SUPPORTED' value64='-2147411704'/>
<enum name='CSSMERR_CL_SELF_CHECK_FAILED' value64='-2147411960'/>
<enum name='CSSMERR_CL_SERVICE_NOT_AVAILABLE' value64='-2147411742'/>
<enum name='CSSMERR_CL_UNKNOWN_FORMAT' value64='-2147411890'/>
<enum name='CSSMERR_CL_UNKNOWN_TAG' value64='-2147411889'/>
<enum name='CSSMERR_CL_USER_CANCELED' value64='-2147411743'/>
<enum name='CSSMERR_CL_VERIFICATION_FAILURE' value64='-2147411895'/>
<enum name='CSSMERR_CSPDL_APPLE_DL_CONVERSION_ERROR' value64='-2147415035'/>
<enum name='CSSMERR_CSP_ACL_ADD_FAILED' value64='-2147416010'/>
<enum name='CSSMERR_CSP_ACL_BASE_CERTS_NOT_SUPPORTED' value64='-2147416025'/>
<enum name='CSSMERR_CSP_ACL_CHALLENGE_CALLBACK_FAILED' value64='-2147416019'/>
<enum name='CSSMERR_CSP_ACL_CHANGE_FAILED' value64='-2147416015'/>
<enum name='CSSMERR_CSP_ACL_DELETE_FAILED' value64='-2147416012'/>
<enum name='CSSMERR_CSP_ACL_ENTRY_TAG_NOT_FOUND' value64='-2147416017'/>
<enum name='CSSMERR_CSP_ACL_REPLACE_FAILED' value64='-2147416011'/>
<enum name='CSSMERR_CSP_ACL_SUBJECT_TYPE_NOT_SUPPORTED' value64='-2147416021'/>
<enum name='CSSMERR_CSP_ALGID_MISMATCH' value64='-2147415789'/>
<enum name='CSSMERR_CSP_ALREADY_LOGGED_IN' value64='-2147415726'/>
<enum name='CSSMERR_CSP_APPLE_ADD_APPLICATION_ACL_SUBJECT' value64='-2147415040'/>
<enum name='CSSMERR_CSP_APPLE_INVALID_KEY_END_DATE' value64='-2147415036'/>
<enum name='CSSMERR_CSP_APPLE_INVALID_KEY_START_DATE' value64='-2147415037'/>
<enum name='CSSMERR_CSP_APPLE_PUBLIC_KEY_INCOMPLETE' value64='-2147415039'/>
<enum name='CSSMERR_CSP_APPLE_SIGNATURE_MISMATCH' value64='-2147415038'/>
<enum name='CSSMERR_CSP_APPLE_SSLv2_ROLLBACK' value64='-2147415034'/>
<enum name='CSSMERR_CSP_ATTACH_HANDLE_BUSY' value64='-2147415802'/>
<enum name='CSSMERR_CSP_BLOCK_SIZE_MISMATCH' value64='-2147415731'/>
<enum name='CSSMERR_CSP_CRYPTO_DATA_CALLBACK_FAILED' value64='-2147415722'/>
<enum name='CSSMERR_CSP_DEVICE_ERROR' value64='-2147415804'/>
<enum name='CSSMERR_CSP_DEVICE_FAILED' value64='-2147415835'/>
<enum name='CSSMERR_CSP_DEVICE_MEMORY_ERROR' value64='-2147415803'/>
<enum name='CSSMERR_CSP_DEVICE_RESET' value64='-2147415836'/>
<enum name='CSSMERR_CSP_DEVICE_VERIFY_FAILED' value64='-2147415728'/>
<enum name='CSSMERR_CSP_FUNCTION_FAILED' value64='-2147416054'/>
<enum name='CSSMERR_CSP_FUNCTION_NOT_IMPLEMENTED' value64='-2147416057'/>
<enum name='CSSMERR_CSP_INPUT_LENGTH_ERROR' value64='-2147415807'/>
<enum name='CSSMERR_CSP_INSUFFICIENT_CLIENT_IDENTIFICATION' value64='-2147415837'/>
<enum name='CSSMERR_CSP_INTERNAL_ERROR' value64='-2147416063'/>
<enum name='CSSMERR_CSP_INVALID_ACCESS_CREDENTIALS' value64='-2147416027'/>
<enum name='CSSMERR_CSP_INVALID_ACL_BASE_CERTS' value64='-2147416026'/>
<enum name='CSSMERR_CSP_INVALID_ACL_CHALLENGE_CALLBACK' value64='-2147416020'/>
<enum name='CSSMERR_CSP_INVALID_ACL_EDIT_MODE' value64='-2147416016'/>
<enum name='CSSMERR_CSP_INVALID_ACL_ENTRY_TAG' value64='-2147416018'/>
<enum name='CSSMERR_CSP_INVALID_ACL_SUBJECT_VALUE' value64='-2147416022'/>
<enum name='CSSMERR_CSP_INVALID_ALGORITHM' value64='-2147415759'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_ACCESS_CREDENTIALS' value64='-2147415678'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_ALG_PARAMS' value64='-2147415704'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_BASE' value64='-2147415686'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_BLOCK_SIZE' value64='-2147415738'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_DL_DB_HANDLE' value64='-2147415680'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_EFFECTIVE_BITS' value64='-2147415696'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_END_DATE' value64='-2147415692'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_INIT_VECTOR' value64='-2147415752'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_ITERATION_COUNT' value64='-2147415682'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_KEY' value64='-2147415754'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_KEY_LENGTH' value64='-2147415740'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_KEY_TYPE' value64='-2147415700'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_LABEL' value64='-2147415702'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_MODE' value64='-2147415698'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_OUTPUT_SIZE' value64='-2147415708'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_PADDING' value64='-2147415748'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_PASSPHRASE' value64='-2147415742'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_PRIME' value64='-2147415688'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_PRIVATE_KEY_FORMAT' value64='-2147415674'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_PUBLIC_KEY_FORMAT' value64='-2147415676'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_RANDOM' value64='-2147415746'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_ROUNDS' value64='-2147415706'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_SALT' value64='-2147415750'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_SEED' value64='-2147415744'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_START_DATE' value64='-2147415694'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_SUBPRIME' value64='-2147415684'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_SYMMETRIC_KEY_FORMAT' value64='-2147415672'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_VERSION' value64='-2147415690'/>
<enum name='CSSMERR_CSP_INVALID_ATTR_WRAPPED_KEY_FORMAT' value64='-2147415670'/>
<enum name='CSSMERR_CSP_INVALID_CONTEXT' value64='-2147415760'/>
<enum name='CSSMERR_CSP_INVALID_CONTEXT_HANDLE' value64='-2147416000'/>
<enum name='CSSMERR_CSP_INVALID_CRYPTO_DATA' value64='-2147415976'/>
<enum name='CSSMERR_CSP_INVALID_DATA' value64='-2147415994'/>
<enum name='CSSMERR_CSP_INVALID_DATA_COUNT' value64='-2147415768'/>
<enum name='CSSMERR_CSP_INVALID_DIGEST_ALGORITHM' value64='-2147415723'/>
<enum name='CSSMERR_CSP_INVALID_INPUT_POINTER' value64='-2147416059'/>
<enum name='CSSMERR_CSP_INVALID_INPUT_VECTOR' value64='-2147415766'/>
<enum name='CSSMERR_CSP_INVALID_KEY' value64='-2147415792'/>
<enum name='CSSMERR_CSP_INVALID_KEYATTR_MASK' value64='-2147415780'/>
<enum name='CSSMERR_CSP_INVALID_KEYUSAGE_MASK' value64='-2147415782'/>
<enum name='CSSMERR_CSP_INVALID_KEY_CLASS' value64='-2147415790'/>
<enum name='CSSMERR_CSP_INVALID_KEY_FORMAT' value64='-2147415776'/>
<enum name='CSSMERR_CSP_INVALID_KEY_LABEL' value64='-2147415778'/>
<enum name='CSSMERR_CSP_INVALID_KEY_POINTER' value64='-2147415783'/>
<enum name='CSSMERR_CSP_INVALID_KEY_REFERENCE' value64='-2147415791'/>
<enum name='CSSMERR_CSP_INVALID_LOGIN_NAME' value64='-2147415727'/>
<enum name='CSSMERR_CSP_INVALID_NEW_ACL_ENTRY' value64='-2147416014'/>
<enum name='CSSMERR_CSP_INVALID_NEW_ACL_OWNER' value64='-2147416013'/>
<enum name='CSSMERR_CSP_INVALID_OUTPUT_POINTER' value64='-2147416058'/>
<enum name='CSSMERR_CSP_INVALID_OUTPUT_VECTOR' value64='-2147415765'/>
<enum name='CSSMERR_CSP_INVALID_PASSTHROUGH_ID' value64='-2147415978'/>
<enum name='CSSMERR_CSP_INVALID_POINTER' value64='-2147416060'/>
<enum name='CSSMERR_CSP_INVALID_SAMPLE_VALUE' value64='-2147416024'/>
<enum name='CSSMERR_CSP_INVALID_SIGNATURE' value64='-2147415733'/>
<enum name='CSSMERR_CSP_IN_DARK_WAKE' value64='-2147415834'/>
<enum name='CSSMERR_CSP_KEY_BLOB_TYPE_INCORRECT' value64='-2147415787'/>
<enum name='CSSMERR_CSP_KEY_HEADER_INCONSISTENT' value64='-2147415786'/>
<enum name='CSSMERR_CSP_KEY_LABEL_ALREADY_EXISTS' value64='-2147415724'/>
<enum name='CSSMERR_CSP_KEY_USAGE_INCORRECT' value64='-2147415788'/>
<enum name='CSSMERR_CSP_MDS_ERROR' value64='-2147416061'/>
<enum name='CSSMERR_CSP_MEMORY_ERROR' value64='-2147416062'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_ACCESS_CREDENTIALS' value64='-2147415677'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_ALG_PARAMS' value64='-2147415703'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_BASE' value64='-2147415685'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_BLOCK_SIZE' value64='-2147415737'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_DL_DB_HANDLE' value64='-2147415679'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_EFFECTIVE_BITS' value64='-2147415695'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_END_DATE' value64='-2147415691'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_INIT_VECTOR' value64='-2147415751'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_ITERATION_COUNT' value64='-2147415681'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_KEY' value64='-2147415753'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_KEY_LENGTH' value64='-2147415739'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_KEY_TYPE' value64='-2147415699'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_LABEL' value64='-2147415701'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_MODE' value64='-2147415697'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_OUTPUT_SIZE' value64='-2147415707'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_PADDING' value64='-2147415747'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_PASSPHRASE' value64='-2147415741'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_PRIME' value64='-2147415687'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_PRIVATE_KEY_FORMAT' value64='-2147415673'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_PUBLIC_KEY_FORMAT' value64='-2147415675'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_RANDOM' value64='-2147415745'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_ROUNDS' value64='-2147415705'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_SALT' value64='-2147415749'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_SEED' value64='-2147415743'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_START_DATE' value64='-2147415693'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_SUBPRIME' value64='-2147415683'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_SYMMETRIC_KEY_FORMAT' value64='-2147415671'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_VERSION' value64='-2147415689'/>
<enum name='CSSMERR_CSP_MISSING_ATTR_WRAPPED_KEY_FORMAT' value64='-2147415669'/>
<enum name='CSSMERR_CSP_NOT_LOGGED_IN' value64='-2147415801'/>
<enum name='CSSMERR_CSP_NO_USER_INTERACTION' value64='-2147415840'/>
<enum name='CSSMERR_CSP_OBJECT_ACL_NOT_SUPPORTED' value64='-2147416029'/>
<enum name='CSSMERR_CSP_OBJECT_ACL_REQUIRED' value64='-2147416028'/>
<enum name='CSSMERR_CSP_OBJECT_MANIP_AUTH_DENIED' value64='-2147416030'/>
<enum name='CSSMERR_CSP_OBJECT_USE_AUTH_DENIED' value64='-2147416031'/>
<enum name='CSSMERR_CSP_OPERATION_AUTH_DENIED' value64='-2147416032'/>
<enum name='CSSMERR_CSP_OS_ACCESS_DENIED' value64='-2147416055'/>
<enum name='CSSMERR_CSP_OUTPUT_LENGTH_ERROR' value64='-2147415806'/>
<enum name='CSSMERR_CSP_PRIVATE_KEY_ALREADY_EXISTS' value64='-2147415725'/>
<enum name='CSSMERR_CSP_PRIVATE_KEY_NOT_FOUND' value64='-2147415730'/>
<enum name='CSSMERR_CSP_PRIVILEGE_NOT_GRANTED' value64='-2147415989'/>
<enum name='CSSMERR_CSP_PRIVILEGE_NOT_SUPPORTED' value64='-2147415805'/>
<enum name='CSSMERR_CSP_PUBLIC_KEY_INCONSISTENT' value64='-2147415729'/>
<enum name='CSSMERR_CSP_QUERY_SIZE_UNKNOWN' value64='-2147415732'/>
<enum name='CSSMERR_CSP_SAMPLE_VALUE_NOT_SUPPORTED' value64='-2147416023'/>
<enum name='CSSMERR_CSP_SELF_CHECK_FAILED' value64='-2147416056'/>
<enum name='CSSMERR_CSP_SERVICE_NOT_AVAILABLE' value64='-2147415838'/>
<enum name='CSSMERR_CSP_STAGED_OPERATION_IN_PROGRESS' value64='-2147415736'/>
<enum name='CSSMERR_CSP_STAGED_OPERATION_NOT_STARTED' value64='-2147415735'/>
<enum name='CSSMERR_CSP_UNSUPPORTED_KEYATTR_MASK' value64='-2147415779'/>
<enum name='CSSMERR_CSP_UNSUPPORTED_KEYUSAGE_MASK' value64='-2147415781'/>
<enum name='CSSMERR_CSP_UNSUPPORTED_KEY_FORMAT' value64='-2147415785'/>
<enum name='CSSMERR_CSP_UNSUPPORTED_KEY_LABEL' value64='-2147415777'/>
<enum name='CSSMERR_CSP_UNSUPPORTED_KEY_SIZE' value64='-2147415784'/>
<enum name='CSSMERR_CSP_USER_CANCELED' value64='-2147415839'/>
<enum name='CSSMERR_CSP_VECTOR_OF_BUFS_UNSUPPORTED' value64='-2147415767'/>
<enum name='CSSMERR_CSP_VERIFY_FAILED' value64='-2147415734'/>
<enum name='CSSMERR_CSSM_ADDIN_AUTHENTICATE_FAILED' value64='-2147417828'/>
<enum name='CSSMERR_CSSM_ADDIN_LOAD_FAILED' value64='-2147417834'/>
<enum name='CSSMERR_CSSM_ADDIN_UNLOAD_FAILED' value64='-2147417832'/>
<enum name='CSSMERR_CSSM_ATTRIBUTE_NOT_IN_CONTEXT' value64='-2147417822'/>
<enum name='CSSMERR_CSSM_BUFFER_TOO_SMALL' value64='-2147417824'/>
<enum name='CSSMERR_CSSM_DEVICE_FAILED' value64='-2147417883'/>
<enum name='CSSMERR_CSSM_DEVICE_RESET' value64='-2147417884'/>
<enum name='CSSMERR_CSSM_EMM_AUTHENTICATE_FAILED' value64='-2147417829'/>
<enum name='CSSMERR_CSSM_EMM_LOAD_FAILED' value64='-2147417836'/>
<enum name='CSSMERR_CSSM_EMM_UNLOAD_FAILED' value64='-2147417835'/>
<enum name='CSSMERR_CSSM_EVENT_NOTIFICATION_CALLBACK_NOT_FOUND' value64='-2147417819'/>
<enum name='CSSMERR_CSSM_FUNCTION_FAILED' value64='-2147418102'/>
<enum name='CSSMERR_CSSM_FUNCTION_INTEGRITY_FAIL' value64='-2147417851'/>
<enum name='CSSMERR_CSSM_FUNCTION_NOT_IMPLEMENTED' value64='-2147418105'/>
<enum name='CSSMERR_CSSM_INCOMPATIBLE_VERSION' value64='-2147418047'/>
<enum name='CSSMERR_CSSM_INSUFFICIENT_CLIENT_IDENTIFICATION' value64='-2147417885'/>
<enum name='CSSMERR_CSSM_INTERNAL_ERROR' value64='-2147418111'/>
<enum name='CSSMERR_CSSM_INVALID_ADDIN_FUNCTION_TABLE' value64='-2147417830'/>
<enum name='CSSMERR_CSSM_INVALID_ADDIN_HANDLE' value64='-2147417855'/>
<enum name='CSSMERR_CSSM_INVALID_ATTRIBUTE' value64='-2147417823'/>
<enum name='CSSMERR_CSSM_INVALID_CONTEXT_HANDLE' value64='-2147418048'/>
<enum name='CSSMERR_CSSM_INVALID_GUID' value64='-2147418100'/>
<enum name='CSSMERR_CSSM_INVALID_HANDLE_USAGE' value64='-2147417853'/>
<enum name='CSSMERR_CSSM_INVALID_INPUT_POINTER' value64='-2147418107'/>
<enum name='CSSMERR_CSSM_INVALID_KEY_HIERARCHY' value64='-2147417833'/>
<enum name='CSSMERR_CSSM_INVALID_OUTPUT_POINTER' value64='-2147418106'/>
<enum name='CSSMERR_CSSM_INVALID_POINTER' value64='-2147418108'/>
<enum name='CSSMERR_CSSM_INVALID_PVC' value64='-2147417837'/>
<enum name='CSSMERR_CSSM_INVALID_SERVICE_MASK' value64='-2147417827'/>
<enum name='CSSMERR_CSSM_INVALID_SUBSERVICEID' value64='-2147417825'/>
<enum name='CSSMERR_CSSM_IN_DARK_WAKE' value64='-2147417882'/>
<enum name='CSSMERR_CSSM_LIB_REF_NOT_FOUND' value64='-2147417831'/>
<enum name='CSSMERR_CSSM_MDS_ERROR' value64='-2147418109'/>
<enum name='CSSMERR_CSSM_MEMORY_ERROR' value64='-2147418110'/>
<enum name='CSSMERR_CSSM_MODULE_MANAGER_INITIALIZE_FAIL' value64='-2147417821'/>
<enum name='CSSMERR_CSSM_MODULE_MANAGER_NOT_FOUND' value64='-2147417820'/>
<enum name='CSSMERR_CSSM_MODULE_MANIFEST_VERIFY_FAILED' value64='-2147418101'/>
<enum name='CSSMERR_CSSM_MODULE_NOT_LOADED' value64='-2147417826'/>
<enum name='CSSMERR_CSSM_NOT_INITIALIZED' value64='-2147417854'/>
<enum name='CSSMERR_CSSM_NO_USER_INTERACTION' value64='-2147417888'/>
<enum name='CSSMERR_CSSM_OS_ACCESS_DENIED' value64='-2147418103'/>
<enum name='CSSMERR_CSSM_PRIVILEGE_NOT_GRANTED' value64='-2147418037'/>
<enum name='CSSMERR_CSSM_PVC_ALREADY_CONFIGURED' value64='-2147417838'/>
<enum name='CSSMERR_CSSM_PVC_REFERENT_NOT_FOUND' value64='-2147417852'/>
<enum name='CSSMERR_CSSM_SCOPE_NOT_SUPPORTED' value64='-2147417839'/>
<enum name='CSSMERR_CSSM_SELF_CHECK_FAILED' value64='-2147418104'/>
<enum name='CSSMERR_CSSM_SERVICE_NOT_AVAILABLE' value64='-2147417886'/>
<enum name='CSSMERR_CSSM_USER_CANCELED' value64='-2147417887'/>
<enum name='CSSMERR_DL_ACL_ADD_FAILED' value64='-2147413962'/>
<enum name='CSSMERR_DL_ACL_BASE_CERTS_NOT_SUPPORTED' value64='-2147413977'/>
<enum name='CSSMERR_DL_ACL_CHALLENGE_CALLBACK_FAILED' value64='-2147413971'/>
<enum name='CSSMERR_DL_ACL_CHANGE_FAILED' value64='-2147413967'/>
<enum name='CSSMERR_DL_ACL_DELETE_FAILED' value64='-2147413964'/>
<enum name='CSSMERR_DL_ACL_ENTRY_TAG_NOT_FOUND' value64='-2147413969'/>
<enum name='CSSMERR_DL_ACL_REPLACE_FAILED' value64='-2147413963'/>
<enum name='CSSMERR_DL_ACL_SUBJECT_TYPE_NOT_SUPPORTED' value64='-2147413973'/>
<enum name='CSSMERR_DL_DATABASE_CORRUPT' value64='-2147413759'/>
<enum name='CSSMERR_DL_DATASTORE_ALREADY_EXISTS' value64='-2147413736'/>
<enum name='CSSMERR_DL_DATASTORE_DOESNOT_EXIST' value64='-2147413737'/>
<enum name='CSSMERR_DL_DATASTORE_IS_OPEN' value64='-2147413734'/>
<enum name='CSSMERR_DL_DB_LOCKED' value64='-2147413735'/>
<enum name='CSSMERR_DL_DEVICE_FAILED' value64='-2147413787'/>
<enum name='CSSMERR_DL_DEVICE_RESET' value64='-2147413788'/>
<enum name='CSSMERR_DL_ENDOFDATA' value64='-2147413715'/>
<enum name='CSSMERR_DL_FIELD_SPECIFIED_MULTIPLE' value64='-2147413742'/>
<enum name='CSSMERR_DL_FUNCTION_FAILED' value64='-2147414006'/>
<enum name='CSSMERR_DL_FUNCTION_NOT_IMPLEMENTED' value64='-2147414009'/>
<enum name='CSSMERR_DL_INCOMPATIBLE_FIELD_FORMAT' value64='-2147413741'/>
<enum name='CSSMERR_DL_INSUFFICIENT_CLIENT_IDENTIFICATION' value64='-2147413789'/>
<enum name='CSSMERR_DL_INTERNAL_ERROR' value64='-2147414015'/>
<enum name='CSSMERR_DL_INVALID_ACCESS_CREDENTIALS' value64='-2147413979'/>
<enum name='CSSMERR_DL_INVALID_ACCESS_REQUEST' value64='-2147413724'/>
<enum name='CSSMERR_DL_INVALID_ACL_BASE_CERTS' value64='-2147413978'/>
<enum name='CSSMERR_DL_INVALID_ACL_CHALLENGE_CALLBACK' value64='-2147413972'/>
<enum name='CSSMERR_DL_INVALID_ACL_EDIT_MODE' value64='-2147413968'/>
<enum name='CSSMERR_DL_INVALID_ACL_ENTRY_TAG' value64='-2147413970'/>
<enum name='CSSMERR_DL_INVALID_ACL_SUBJECT_VALUE' value64='-2147413974'/>
<enum name='CSSMERR_DL_INVALID_CL_HANDLE' value64='-2147413934'/>
<enum name='CSSMERR_DL_INVALID_CSP_HANDLE' value64='-2147413936'/>
<enum name='CSSMERR_DL_INVALID_DB_HANDLE' value64='-2147413942'/>
<enum name='CSSMERR_DL_INVALID_DB_LIST_POINTER' value64='-2147413939'/>
<enum name='CSSMERR_DL_INVALID_DB_LOCATION' value64='-2147413725'/>
<enum name='CSSMERR_DL_INVALID_DB_NAME' value64='-2147413738'/>
<enum name='CSSMERR_DL_INVALID_DL_HANDLE' value64='-2147413935'/>
<enum name='CSSMERR_DL_INVALID_FIELD_NAME' value64='-2147413750'/>
<enum name='CSSMERR_DL_INVALID_INDEX_INFO' value64='-2147413723'/>
<enum name='CSSMERR_DL_INVALID_INPUT_POINTER' value64='-2147414011'/>
<enum name='CSSMERR_DL_INVALID_MODIFY_MODE' value64='-2147413718'/>
<enum name='CSSMERR_DL_INVALID_NETWORK_ADDR' value64='-2147413929'/>
<enum name='CSSMERR_DL_INVALID_NEW_ACL_ENTRY' value64='-2147413966'/>
<enum name='CSSMERR_DL_INVALID_NEW_ACL_OWNER' value64='-2147413965'/>
<enum name='CSSMERR_DL_INVALID_NEW_OWNER' value64='-2147413721'/>
<enum name='CSSMERR_DL_INVALID_OPEN_PARAMETERS' value64='-2147413717'/>
<enum name='CSSMERR_DL_INVALID_OUTPUT_POINTER' value64='-2147414010'/>
<enum name='CSSMERR_DL_INVALID_PARSING_MODULE' value64='-2147413740'/>
<enum name='CSSMERR_DL_INVALID_PASSTHROUGH_ID' value64='-2147413930'/>
<enum name='CSSMERR_DL_INVALID_POINTER' value64='-2147414012'/>
<enum name='CSSMERR_DL_INVALID_QUERY' value64='-2147413714'/>
<enum name='CSSMERR_DL_INVALID_RECORDTYPE' value64='-2147413751'/>
<enum name='CSSMERR_DL_INVALID_RECORD_INDEX' value64='-2147413752'/>
<enum name='CSSMERR_DL_INVALID_RECORD_UID' value64='-2147413720'/>
<enum name='CSSMERR_DL_INVALID_RESULTS_HANDLE' value64='-2147413726'/>
<enum name='CSSMERR_DL_INVALID_SAMPLE_VALUE' value64='-2147413976'/>
<enum name='CSSMERR_DL_INVALID_SELECTION_TAG' value64='-2147413722'/>
<enum name='CSSMERR_DL_INVALID_UNIQUE_INDEX_DATA' value64='-2147413719'/>
<enum name='CSSMERR_DL_INVALID_VALUE' value64='-2147413713'/>
<enum name='CSSMERR_DL_IN_DARK_WAKE' value64='-2147413786'/>
<enum name='CSSMERR_DL_MDS_ERROR' value64='-2147414013'/>
<enum name='CSSMERR_DL_MEMORY_ERROR' value64='-2147414014'/>
<enum name='CSSMERR_DL_MISSING_VALUE' value64='-2147413732'/>
<enum name='CSSMERR_DL_MULTIPLE_VALUES_UNSUPPORTED' value64='-2147413712'/>
<enum name='CSSMERR_DL_NO_USER_INTERACTION' value64='-2147413792'/>
<enum name='CSSMERR_DL_OBJECT_ACL_NOT_SUPPORTED' value64='-2147413981'/>
<enum name='CSSMERR_DL_OBJECT_ACL_REQUIRED' value64='-2147413980'/>
<enum name='CSSMERR_DL_OBJECT_MANIP_AUTH_DENIED' value64='-2147413982'/>
<enum name='CSSMERR_DL_OBJECT_USE_AUTH_DENIED' value64='-2147413983'/>
<enum name='CSSMERR_DL_OPERATION_AUTH_DENIED' value64='-2147413984'/>
<enum name='CSSMERR_DL_OS_ACCESS_DENIED' value64='-2147414007'/>
<enum name='CSSMERR_DL_RECORD_MODIFIED' value64='-2147413716'/>
<enum name='CSSMERR_DL_RECORD_NOT_FOUND' value64='-2147413733'/>
<enum name='CSSMERR_DL_SAMPLE_VALUE_NOT_SUPPORTED' value64='-2147413975'/>
<enum name='CSSMERR_DL_SELF_CHECK_FAILED' value64='-2147414008'/>
<enum name='CSSMERR_DL_SERVICE_NOT_AVAILABLE' value64='-2147413790'/>
<enum name='CSSMERR_DL_STALE_UNIQUE_RECORD' value64='-2147413711'/>
<enum name='CSSMERR_DL_UNSUPPORTED_FIELD_FORMAT' value64='-2147413749'/>
<enum name='CSSMERR_DL_UNSUPPORTED_INDEX_INFO' value64='-2147413748'/>
<enum name='CSSMERR_DL_UNSUPPORTED_LOCALITY' value64='-2147413747'/>
<enum name='CSSMERR_DL_UNSUPPORTED_NUM_ATTRIBUTES' value64='-2147413746'/>
<enum name='CSSMERR_DL_UNSUPPORTED_NUM_INDEXES' value64='-2147413745'/>
<enum name='CSSMERR_DL_UNSUPPORTED_NUM_RECORDTYPES' value64='-2147413744'/>
<enum name='CSSMERR_DL_UNSUPPORTED_NUM_SELECTION_PREDS' value64='-2147413729'/>
<enum name='CSSMERR_DL_UNSUPPORTED_OPERATOR' value64='-2147413727'/>
<enum name='CSSMERR_DL_UNSUPPORTED_QUERY' value64='-2147413731'/>
<enum name='CSSMERR_DL_UNSUPPORTED_QUERY_LIMITS' value64='-2147413730'/>
<enum name='CSSMERR_DL_UNSUPPORTED_RECORDTYPE' value64='-2147413743'/>
<enum name='CSSMERR_DL_USER_CANCELED' value64='-2147413791'/>
<enum name='CSSMERR_TP_AUTHENTICATION_FAILED' value64='-2147409657'/>
<enum name='CSSMERR_TP_CERTGROUP_INCOMPLETE' value64='-2147409656'/>
<enum name='CSSMERR_TP_CERTIFICATE_CANT_OPERATE' value64='-2147409655'/>
<enum name='CSSMERR_TP_CERT_EXPIRED' value64='-2147409654'/>
<enum name='CSSMERR_TP_CERT_NOT_VALID_YET' value64='-2147409653'/>
<enum name='CSSMERR_TP_CERT_REVOKED' value64='-2147409652'/>
<enum name='CSSMERR_TP_CERT_SUSPENDED' value64='-2147409651'/>
<enum name='CSSMERR_TP_CRL_ALREADY_SIGNED' value64='-2147409849'/>
<enum name='CSSMERR_TP_DEVICE_FAILED' value64='-2147409691'/>
<enum name='CSSMERR_TP_DEVICE_RESET' value64='-2147409692'/>
<enum name='CSSMERR_TP_FUNCTION_FAILED' value64='-2147409910'/>
<enum name='CSSMERR_TP_FUNCTION_NOT_IMPLEMENTED' value64='-2147409913'/>
<enum name='CSSMERR_TP_INSUFFICIENT_CLIENT_IDENTIFICATION' value64='-2147409693'/>
<enum name='CSSMERR_TP_INSUFFICIENT_CREDENTIALS' value64='-2147409650'/>
<enum name='CSSMERR_TP_INTERNAL_ERROR' value64='-2147409919'/>
<enum name='CSSMERR_TP_INVALID_ACTION' value64='-2147409649'/>
<enum name='CSSMERR_TP_INVALID_ACTION_DATA' value64='-2147409648'/>
<enum name='CSSMERR_TP_INVALID_ANCHOR_CERT' value64='-2147409646'/>
<enum name='CSSMERR_TP_INVALID_AUTHORITY' value64='-2147409645'/>
<enum name='CSSMERR_TP_INVALID_CALLBACK' value64='-2147409625'/>
<enum name='CSSMERR_TP_INVALID_CALLERAUTH_CONTEXT_POINTER' value64='-2147409663'/>
<enum name='CSSMERR_TP_INVALID_CERTGROUP' value64='-2147409660'/>
<enum name='CSSMERR_TP_INVALID_CERTGROUP_POINTER' value64='-2147409854'/>
<enum name='CSSMERR_TP_INVALID_CERTIFICATE' value64='-2147409643'/>
<enum name='CSSMERR_TP_INVALID_CERT_AUTHORITY' value64='-2147409642'/>
<enum name='CSSMERR_TP_INVALID_CERT_POINTER' value64='-2147409853'/>
<enum name='CSSMERR_TP_INVALID_CL_HANDLE' value64='-2147409838'/>
<enum name='CSSMERR_TP_INVALID_CONTEXT_HANDLE' value64='-2147409856'/>
<enum name='CSSMERR_TP_INVALID_CRL' value64='-2147409638'/>
<enum name='CSSMERR_TP_INVALID_CRLGROUP' value64='-2147409659'/>
<enum name='CSSMERR_TP_INVALID_CRLGROUP_POINTER' value64='-2147409658'/>
<enum name='CSSMERR_TP_INVALID_CRL_AUTHORITY' value64='-2147409641'/>
<enum name='CSSMERR_TP_INVALID_CRL_ENCODING' value64='-2147409640'/>
<enum name='CSSMERR_TP_INVALID_CRL_POINTER' value64='-2147409852'/>
<enum name='CSSMERR_TP_INVALID_CRL_TYPE' value64='-2147409639'/>
<enum name='CSSMERR_TP_INVALID_CSP_HANDLE' value64='-2147409840'/>
<enum name='CSSMERR_TP_INVALID_DATA' value64='-2147409850'/>
<enum name='CSSMERR_TP_INVALID_DB_HANDLE' value64='-2147409846'/>
<enum name='CSSMERR_TP_INVALID_DB_LIST' value64='-2147409844'/>
<enum name='CSSMERR_TP_INVALID_DB_LIST_POINTER' value64='-2147409843'/>
<enum name='CSSMERR_TP_INVALID_DL_HANDLE' value64='-2147409839'/>
<enum name='CSSMERR_TP_INVALID_FIELD_POINTER' value64='-2147409851'/>
<enum name='CSSMERR_TP_INVALID_FORM_TYPE' value64='-2147409637'/>
<enum name='CSSMERR_TP_INVALID_ID' value64='-2147409636'/>
<enum name='CSSMERR_TP_INVALID_IDENTIFIER' value64='-2147409635'/>
<enum name='CSSMERR_TP_INVALID_IDENTIFIER_POINTER' value64='-2147409662'/>
<enum name='CSSMERR_TP_INVALID_INDEX' value64='-2147409634'/>
<enum name='CSSMERR_TP_INVALID_INPUT_POINTER' value64='-2147409915'/>
<enum name='CSSMERR_TP_INVALID_KEYCACHE_HANDLE' value64='-2147409661'/>
<enum name='CSSMERR_TP_INVALID_NAME' value64='-2147409633'/>
<enum name='CSSMERR_TP_INVALID_NETWORK_ADDR' value64='-2147409833'/>
<enum name='CSSMERR_TP_INVALID_NUMBER_OF_FIELDS' value64='-2147409848'/>
<enum name='CSSMERR_TP_INVALID_OUTPUT_POINTER' value64='-2147409914'/>
<enum name='CSSMERR_TP_INVALID_PASSTHROUGH_ID' value64='-2147409834'/>
<enum name='CSSMERR_TP_INVALID_POINTER' value64='-2147409916'/>
<enum name='CSSMERR_TP_INVALID_POLICY_IDENTIFIERS' value64='-2147409632'/>
<enum name='CSSMERR_TP_INVALID_REASON' value64='-2147409630'/>
<enum name='CSSMERR_TP_INVALID_REQUEST_INPUTS' value64='-2147409629'/>
<enum name='CSSMERR_TP_INVALID_RESPONSE_VECTOR' value64='-2147409628'/>
<enum name='CSSMERR_TP_INVALID_SIGNATURE' value64='-2147409627'/>
<enum name='CSSMERR_TP_INVALID_STOP_ON_POLICY' value64='-2147409626'/>
<enum name='CSSMERR_TP_INVALID_TIMESTRING' value64='-2147409631'/>
<enum name='CSSMERR_TP_INVALID_TUPLE' value64='-2147409624'/>
<enum name='CSSMERR_TP_INVALID_TUPLEGROUP' value64='-2147409614'/>
<enum name='CSSMERR_TP_INVALID_TUPLEGROUP_POINTER' value64='-2147409615'/>
<enum name='CSSMERR_TP_IN_DARK_WAKE' value64='-2147409690'/>
<enum name='CSSMERR_TP_MDS_ERROR' value64='-2147409917'/>
<enum name='CSSMERR_TP_MEMORY_ERROR' value64='-2147409918'/>
<enum name='CSSMERR_TP_NOT_SIGNER' value64='-2147409623'/>
<enum name='CSSMERR_TP_NOT_TRUSTED' value64='-2147409622'/>
<enum name='CSSMERR_TP_NO_DEFAULT_AUTHORITY' value64='-2147409621'/>
<enum name='CSSMERR_TP_NO_USER_INTERACTION' value64='-2147409696'/>
<enum name='CSSMERR_TP_OS_ACCESS_DENIED' value64='-2147409911'/>
<enum name='CSSMERR_TP_REJECTED_FORM' value64='-2147409620'/>
<enum name='CSSMERR_TP_REQUEST_LOST' value64='-2147409619'/>
<enum name='CSSMERR_TP_REQUEST_REJECTED' value64='-2147409618'/>
<enum name='CSSMERR_TP_SELF_CHECK_FAILED' value64='-2147409912'/>
<enum name='CSSMERR_TP_SERVICE_NOT_AVAILABLE' value64='-2147409694'/>
<enum name='CSSMERR_TP_UNKNOWN_FORMAT' value64='-2147409842'/>
<enum name='CSSMERR_TP_UNKNOWN_TAG' value64='-2147409841'/>
<enum name='CSSMERR_TP_UNSUPPORTED_ADDR_TYPE' value64='-2147409617'/>
<enum name='CSSMERR_TP_UNSUPPORTED_SERVICE' value64='-2147409616'/>
<enum name='CSSMERR_TP_USER_CANCELED' value64='-2147409695'/>
<enum name='CSSMERR_TP_VERIFICATION_FAILURE' value64='-2147409847'/>
<enum name='CSSMERR_TP_VERIFY_ACTION_FAILED' value64='-2147409644'/>
<enum name='CSSM_ACL_AUTHORIZATION_ANY' value64='1'/>
<enum name='CSSM_ACL_AUTHORIZATION_CHANGE_ACL' value64='65536'/>
<enum name='CSSM_ACL_AUTHORIZATION_CHANGE_OWNER' value64='65537'/>
<enum name='CSSM_ACL_AUTHORIZATION_DBS_CREATE' value64='22'/>
<enum name='CSSM_ACL_AUTHORIZATION_DBS_DELETE' value64='23'/>
<enum name='CSSM_ACL_AUTHORIZATION_DB_DELETE' value64='17'/>
<enum name='CSSM_ACL_AUTHORIZATION_DB_INSERT' value64='19'/>
<enum name='CSSM_ACL_AUTHORIZATION_DB_MODIFY' value64='20'/>
<enum name='CSSM_ACL_AUTHORIZATION_DB_READ' value64='21'/>
<enum name='CSSM_ACL_AUTHORIZATION_DECRYPT' value64='24'/>
<enum name='CSSM_ACL_AUTHORIZATION_DELETE' value64='25'/>
<enum name='CSSM_ACL_AUTHORIZATION_DERIVE' value64='28'/>
<enum name='CSSM_ACL_AUTHORIZATION_ENCRYPT' value64='35'/>
<enum name='CSSM_ACL_AUTHORIZATION_EXPORT_CLEAR' value64='37'/>
<enum name='CSSM_ACL_AUTHORIZATION_EXPORT_WRAPPED' value64='38'/>
<enum name='CSSM_ACL_AUTHORIZATION_GENKEY' value64='41'/>
<enum name='CSSM_ACL_AUTHORIZATION_IMPORT_CLEAR' value64='47'/>
<enum name='CSSM_ACL_AUTHORIZATION_IMPORT_WRAPPED' value64='48'/>
<enum name='CSSM_ACL_AUTHORIZATION_INTEGRITY' value64='65539'/>
<enum name='CSSM_ACL_AUTHORIZATION_LOGIN' value64='57'/>
<enum name='CSSM_ACL_AUTHORIZATION_MAC' value64='59'/>
<enum name='CSSM_ACL_AUTHORIZATION_PARTITION_ID' value64='65538'/>
<enum name='CSSM_ACL_AUTHORIZATION_PREAUTH_BASE' value64='16842752'/>
<enum name='CSSM_ACL_AUTHORIZATION_PREAUTH_END' value64='16908288'/>
<enum name='CSSM_ACL_AUTHORIZATION_SIGN' value64='115'/>
<enum name='CSSM_ACL_AUTHORIZATION_TAG_VENDOR_DEFINED_START' value64='65536'/>
<enum name='CSSM_ACL_CODE_SIGNATURE_INVALID' value64='0'/>
<enum name='CSSM_ACL_CODE_SIGNATURE_OSX' value64='1'/>
<enum name='CSSM_ACL_EDIT_MODE_ADD' value64='1'/>
<enum name='CSSM_ACL_EDIT_MODE_DELETE' value64='2'/>
<enum name='CSSM_ACL_EDIT_MODE_REPLACE' value64='3'/>
<enum name='CSSM_ACL_KEYCHAIN_PROMPT_CURRENT_VERSION' value64='257'/>
<enum name='CSSM_ACL_KEYCHAIN_PROMPT_INVALID' value64='64'/>
<enum name='CSSM_ACL_KEYCHAIN_PROMPT_INVALID_ACT' value64='128'/>
<enum name='CSSM_ACL_KEYCHAIN_PROMPT_REQUIRE_PASSPHRASE' value64='1'/>
<enum name='CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED' value64='16'/>
<enum name='CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED_ACT' value64='32'/>
<enum name='CSSM_ACL_MATCH_BITS' value64='3'/>
<enum name='CSSM_ACL_MATCH_GID' value64='2'/>
<enum name='CSSM_ACL_MATCH_HONOR_ROOT' value64='256'/>
<enum name='CSSM_ACL_MATCH_UID' value64='1'/>
<enum name='CSSM_ACL_PREAUTH_TRACKING_AUTHORIZED' value64='2147483648'/>
<enum name='CSSM_ACL_PREAUTH_TRACKING_BLOCKED' value64='0'/>
<enum name='CSSM_ACL_PREAUTH_TRACKING_COUNT_MASK' value64='255'/>
<enum name='CSSM_ACL_PREAUTH_TRACKING_UNKNOWN' value64='1073741824'/>
<enum name='CSSM_ACL_PROCESS_SELECTOR_CURRENT_VERSION' value64='257'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_ANY' value64='1'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_ASYMMETRIC_KEY' value64='65547'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_BIOMETRIC' value64='8'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_CODE_SIGNATURE' value64='116'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_COMMENT' value64='12'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_EXT_PAM_NAME' value64='78'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_HASHED_SUBJECT' value64='44'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_KEYCHAIN_PROMPT' value64='65536'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_LOGIN_NAME' value64='58'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_PARTITION' value64='65548'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_PASSWORD' value64='79'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_PREAUTH' value64='65545'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_PREAUTH_SOURCE' value64='65546'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_PROCESS' value64='65539'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_PROMPTED_BIOMETRIC' value64='83'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_PROMPTED_PASSWORD' value64='84'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_PROTECTED_BIOMETRIC' value64='86'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_PROTECTED_PASSWORD' value64='87'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_PUBLIC_KEY' value64='89'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_SYMMETRIC_KEY' value64='65541'/>
<enum name='CSSM_ACL_SUBJECT_TYPE_THRESHOLD' value64='123'/>
<enum name='CSSM_AC_BASE_AC_ERROR' value64='-2147405568'/>
<enum name='CSSM_AC_BASE_ERROR' value64='-2147405824'/>
<enum name='CSSM_AC_PRIVATE_ERROR' value64='-2147404800'/>
<enum name='CSSM_ADDR_CUSTOM' value64='1'/>
<enum name='CSSM_ADDR_NAME' value64='4'/>
<enum name='CSSM_ADDR_NONE' value64='0'/>
<enum name='CSSM_ADDR_SOCKADDR' value64='3'/>
<enum name='CSSM_ADDR_URL' value64='2'/>
<enum name='CSSM_ALGCLASS_ASYMMETRIC' value64='8'/>
<enum name='CSSM_ALGCLASS_CUSTOM' value64='1'/>
<enum name='CSSM_ALGCLASS_DERIVEKEY' value64='10'/>
<enum name='CSSM_ALGCLASS_DIGEST' value64='4'/>
<enum name='CSSM_ALGCLASS_KEYGEN' value64='9'/>
<enum name='CSSM_ALGCLASS_MAC' value64='7'/>
<enum name='CSSM_ALGCLASS_NONE' value64='0'/>
<enum name='CSSM_ALGCLASS_RANDOMGEN' value64='5'/>
<enum name='CSSM_ALGCLASS_SIGNATURE' value64='2'/>
<enum name='CSSM_ALGCLASS_SYMMETRIC' value64='3'/>
<enum name='CSSM_ALGCLASS_UNIQUEGEN' value64='6'/>
<enum name='CSSM_ALGID_3DES' value64='77'/>
<enum name='CSSM_ALGID_3DES_1KEY' value64='20'/>
<enum name='CSSM_ALGID_3DES_1KEY_EEE' value64='19'/>
<enum name='CSSM_ALGID_3DES_2KEY' value64='18'/>
<enum name='CSSM_ALGID_3DES_2KEY_EDE' value64='18'/>
<enum name='CSSM_ALGID_3DES_2KEY_EEE' value64='21'/>
<enum name='CSSM_ALGID_3DES_3KEY' value64='17'/>
<enum name='CSSM_ALGID_3DES_3KEY_EDE' value64='17'/>
<enum name='CSSM_ALGID_3DES_3KEY_EEE' value64='20'/>
<enum name='CSSM_ALGID_AES' value64='2147483649'/>
<enum name='CSSM_ALGID_APPLE_YARROW' value64='2147483648'/>
<enum name='CSSM_ALGID_ASC' value64='2147483655'/>
<enum name='CSSM_ALGID_BATON' value64='72'/>
<enum name='CSSM_ALGID_BLOWFISH' value64='28'/>
<enum name='CSSM_ALGID_CAST' value64='27'/>
<enum name='CSSM_ALGID_CAST3' value64='53'/>
<enum name='CSSM_ALGID_CAST5' value64='54'/>
<enum name='CSSM_ALGID_CDMF' value64='52'/>
<enum name='CSSM_ALGID_CRAB' value64='41'/>
<enum name='CSSM_ALGID_CUSTOM' value64='1'/>
<enum name='CSSM_ALGID_ConcatBaseAndData' value64='58'/>
<enum name='CSSM_ALGID_ConcatBaseAndKey' value64='56'/>
<enum name='CSSM_ALGID_ConcatDataAndBase' value64='59'/>
<enum name='CSSM_ALGID_ConcatKeyAndBase' value64='57'/>
<enum name='CSSM_ALGID_DES' value64='14'/>
<enum name='CSSM_ALGID_DESRandom' value64='50'/>
<enum name='CSSM_ALGID_DESX' value64='15'/>
<enum name='CSSM_ALGID_DH' value64='2'/>
<enum name='CSSM_ALGID_DSA' value64='43'/>
<enum name='CSSM_ALGID_DSA_BSAFE' value64='83'/>
<enum name='CSSM_ALGID_ECAES' value64='90'/>
<enum name='CSSM_ALGID_ECC' value64='93'/>
<enum name='CSSM_ALGID_ECDH' value64='84'/>
<enum name='CSSM_ALGID_ECDH_X963_KDF' value64='2147483677'/>
<enum name='CSSM_ALGID_ECDSA' value64='73'/>
<enum name='CSSM_ALGID_ECDSA_SPECIFIED' value64='2147483676'/>
<enum name='CSSM_ALGID_ECES' value64='89'/>
<enum name='CSSM_ALGID_ECMQV' value64='85'/>
<enum name='CSSM_ALGID_ECNRA' value64='87'/>
<enum name='CSSM_ALGID_ENTROPY_DEFAULT' value64='2147483665'/>
<enum name='CSSM_ALGID_ElGamal' value64='46'/>
<enum name='CSSM_ALGID_ExtractFromKey' value64='61'/>
<enum name='CSSM_ALGID_FASTHASH' value64='76'/>
<enum name='CSSM_ALGID_FEAL' value64='32'/>
<enum name='CSSM_ALGID_FEE' value64='2147483650'/>
<enum name='CSSM_ALGID_FEED' value64='2147483653'/>
<enum name='CSSM_ALGID_FEEDEXP' value64='2147483654'/>
<enum name='CSSM_ALGID_FEE_MD5' value64='2147483651'/>
<enum name='CSSM_ALGID_FEE_SHA1' value64='2147483652'/>
<enum name='CSSM_ALGID_FIPS186Random' value64='92'/>
<enum name='CSSM_ALGID_FortezzaTimestamp' value64='80'/>
<enum name='CSSM_ALGID_GOST' value64='39'/>
<enum name='CSSM_ALGID_GenericSecret' value64='55'/>
<enum name='CSSM_ALGID_HAVAL' value64='10'/>
<enum name='CSSM_ALGID_HAVAL3' value64='98'/>
<enum name='CSSM_ALGID_HAVAL4' value64='99'/>
<enum name='CSSM_ALGID_HAVAL5' value64='100'/>
<enum name='CSSM_ALGID_IBCHASH' value64='12'/>
<enum name='CSSM_ALGID_IDEA' value64='22'/>
<enum name='CSSM_ALGID_IntelPlatformRandom' value64='96'/>
<enum name='CSSM_ALGID_JUNIPER' value64='75'/>
<enum name='CSSM_ALGID_KEA' value64='4'/>
<enum name='CSSM_ALGID_KEYCHAIN_KEY' value64='2147483657'/>
<enum name='CSSM_ALGID_KHAFRE' value64='37'/>
<enum name='CSSM_ALGID_KHUFU' value64='36'/>
<enum name='CSSM_ALGID_LAST' value64='2147483647'/>
<enum name='CSSM_ALGID_LOKI' value64='35'/>
<enum name='CSSM_ALGID_LUCIFER' value64='30'/>
<enum name='CSSM_ALGID_MADRYGA' value64='31'/>
<enum name='CSSM_ALGID_MAYFLY' value64='74'/>
<enum name='CSSM_ALGID_MD2' value64='5'/>
<enum name='CSSM_ALGID_MD2Random' value64='47'/>
<enum name='CSSM_ALGID_MD2WithRSA' value64='45'/>
<enum name='CSSM_ALGID_MD4' value64='6'/>
<enum name='CSSM_ALGID_MD5' value64='7'/>
<enum name='CSSM_ALGID_MD5HMAC' value64='102'/>
<enum name='CSSM_ALGID_MD5Random' value64='48'/>
<enum name='CSSM_ALGID_MD5WithRSA' value64='44'/>
<enum name='CSSM_ALGID_MMB' value64='38'/>
<enum name='CSSM_ALGID_MQV' value64='94'/>
<enum name='CSSM_ALGID_NHASH' value64='9'/>
<enum name='CSSM_ALGID_NONE' value64='0'/>
<enum name='CSSM_ALGID_NRA' value64='95'/>
<enum name='CSSM_ALGID_OPENSSH1' value64='2147483671'/>
<enum name='CSSM_ALGID_PBE_OPENSSL_MD5' value64='2147483661'/>
<enum name='CSSM_ALGID_PH' value64='3'/>
<enum name='CSSM_ALGID_PKCS12_PBE_ENCR' value64='2147483658'/>
<enum name='CSSM_ALGID_PKCS12_PBE_MAC' value64='2147483659'/>
<enum name='CSSM_ALGID_PKCS12_SHA1_PBE' value64='86'/>
<enum name='CSSM_ALGID_PKCS5_PBKDF1_MD2' value64='68'/>
<enum name='CSSM_ALGID_PKCS5_PBKDF1_MD5' value64='67'/>
<enum name='CSSM_ALGID_PKCS5_PBKDF1_SHA1' value64='69'/>
<enum name='CSSM_ALGID_PKCS5_PBKDF2' value64='103'/>
<enum name='CSSM_ALGID_RC2' value64='23'/>
<enum name='CSSM_ALGID_RC4' value64='25'/>
<enum name='CSSM_ALGID_RC5' value64='24'/>
<enum name='CSSM_ALGID_RDES' value64='16'/>
<enum name='CSSM_ALGID_REDOC' value64='33'/>
<enum name='CSSM_ALGID_REDOC3' value64='34'/>
<enum name='CSSM_ALGID_RIPEMAC' value64='13'/>
<enum name='CSSM_ALGID_RIPEMD' value64='11'/>
<enum name='CSSM_ALGID_RSA' value64='42'/>
<enum name='CSSM_ALGID_RUNNING_COUNTER' value64='104'/>
<enum name='CSSM_ALGID_SAFER' value64='40'/>
<enum name='CSSM_ALGID_SEAL' value64='26'/>
<enum name='CSSM_ALGID_SECURE_PASSPHRASE' value64='2147483660'/>
<enum name='CSSM_ALGID_SHA1' value64='8'/>
<enum name='CSSM_ALGID_SHA1HMAC' value64='91'/>
<enum name='CSSM_ALGID_SHA1HMAC_LEGACY' value64='2147483656'/>
<enum name='CSSM_ALGID_SHA1WithDSA' value64='81'/>
<enum name='CSSM_ALGID_SHA1WithECDSA' value64='82'/>
<enum name='CSSM_ALGID_SHA1WithECNRA' value64='88'/>
<enum name='CSSM_ALGID_SHA1WithRSA' value64='51'/>
<enum name='CSSM_ALGID_SHA224' value64='2147483666'/>
<enum name='CSSM_ALGID_SHA224WithECDSA' value64='2147483672'/>
<enum name='CSSM_ALGID_SHA224WithRSA' value64='2147483667'/>
<enum name='CSSM_ALGID_SHA256' value64='2147483662'/>
<enum name='CSSM_ALGID_SHA256WithECDSA' value64='2147483673'/>
<enum name='CSSM_ALGID_SHA256WithRSA' value64='2147483668'/>
<enum name='CSSM_ALGID_SHA384' value64='2147483663'/>
<enum name='CSSM_ALGID_SHA384WithECDSA' value64='2147483674'/>
<enum name='CSSM_ALGID_SHA384WithRSA' value64='2147483669'/>
<enum name='CSSM_ALGID_SHA512' value64='2147483664'/>
<enum name='CSSM_ALGID_SHA512WithECDSA' value64='2147483675'/>
<enum name='CSSM_ALGID_SHA512WithRSA' value64='2147483670'/>
<enum name='CSSM_ALGID_SHARandom' value64='49'/>
<enum name='CSSM_ALGID_SKIPJACK' value64='29'/>
<enum name='CSSM_ALGID_SSL3KeyAndMacDerive' value64='64'/>
<enum name='CSSM_ALGID_SSL3MD5' value64='78'/>
<enum name='CSSM_ALGID_SSL3MD5_MAC' value64='65'/>
<enum name='CSSM_ALGID_SSL3MasterDerive' value64='63'/>
<enum name='CSSM_ALGID_SSL3PreMasterGen' value64='62'/>
<enum name='CSSM_ALGID_SSL3SHA1' value64='79'/>
<enum name='CSSM_ALGID_SSL3SHA1_MAC' value64='66'/>
<enum name='CSSM_ALGID_TIGER' value64='101'/>
<enum name='CSSM_ALGID_UTC' value64='97'/>
<enum name='CSSM_ALGID_VENDOR_DEFINED' value64='2147483648'/>
<enum name='CSSM_ALGID_WrapLynks' value64='70'/>
<enum name='CSSM_ALGID_WrapSET_OAEP' value64='71'/>
<enum name='CSSM_ALGID_XORBaseAndData' value64='60'/>
<enum name='CSSM_ALGID__FIRST_UNUSED' value64='2147483678'/>
<enum name='CSSM_ALGMODE_BC' value64='14'/>
<enum name='CSSM_ALGMODE_CBC' value64='4'/>
<enum name='CSSM_ALGMODE_CBC128' value64='36'/>
<enum name='CSSM_ALGMODE_CBC64' value64='25'/>
<enum name='CSSM_ALGMODE_CBCC' value64='16'/>
<enum name='CSSM_ALGMODE_CBCPD' value64='20'/>
<enum name='CSSM_ALGMODE_CBCPadIV8' value64='6'/>
<enum name='CSSM_ALGMODE_CBC_IV8' value64='5'/>
<enum name='CSSM_ALGMODE_CFB' value64='7'/>
<enum name='CSSM_ALGMODE_CFB16' value64='29'/>
<enum name='CSSM_ALGMODE_CFB32' value64='28'/>
<enum name='CSSM_ALGMODE_CFB8' value64='30'/>
<enum name='CSSM_ALGMODE_CFBPadIV8' value64='9'/>
<enum name='CSSM_ALGMODE_CFB_IV8' value64='8'/>
<enum name='CSSM_ALGMODE_COUNTER' value64='13'/>
<enum name='CSSM_ALGMODE_CUSTOM' value64='1'/>
<enum name='CSSM_ALGMODE_ECB' value64='2'/>
<enum name='CSSM_ALGMODE_ECB128' value64='34'/>
<enum name='CSSM_ALGMODE_ECB64' value64='24'/>
<enum name='CSSM_ALGMODE_ECB96' value64='35'/>
<enum name='CSSM_ALGMODE_ECBPad' value64='3'/>
<enum name='CSSM_ALGMODE_ISO_9796' value64='41'/>
<enum name='CSSM_ALGMODE_LAST' value64='2147483647'/>
<enum name='CSSM_ALGMODE_NONE' value64='0'/>
<enum name='CSSM_ALGMODE_OAEP_HASH' value64='37'/>
<enum name='CSSM_ALGMODE_OFB' value64='10'/>
<enum name='CSSM_ALGMODE_OFB64' value64='26'/>
<enum name='CSSM_ALGMODE_OFBNLF' value64='17'/>
<enum name='CSSM_ALGMODE_OFBPadIV8' value64='12'/>
<enum name='CSSM_ALGMODE_OFB_IV8' value64='11'/>
<enum name='CSSM_ALGMODE_PBC' value64='18'/>
<enum name='CSSM_ALGMODE_PCBC' value64='15'/>
<enum name='CSSM_ALGMODE_PFB' value64='19'/>
<enum name='CSSM_ALGMODE_PKCS1_EME_OAEP' value64='39'/>
<enum name='CSSM_ALGMODE_PKCS1_EME_V15' value64='38'/>
<enum name='CSSM_ALGMODE_PKCS1_EMSA_V15' value64='40'/>
<enum name='CSSM_ALGMODE_PRIVATE_KEY' value64='22'/>
<enum name='CSSM_ALGMODE_PRIVATE_WRAP' value64='32'/>
<enum name='CSSM_ALGMODE_PUBLIC_KEY' value64='21'/>
<enum name='CSSM_ALGMODE_RELAYX' value64='33'/>
<enum name='CSSM_ALGMODE_SHUFFLE' value64='23'/>
<enum name='CSSM_ALGMODE_VENDOR_DEFINED' value64='2147483648'/>
<enum name='CSSM_ALGMODE_WRAP' value64='31'/>
<enum name='CSSM_ALGMODE_X9_31' value64='42'/>
<enum name='CSSM_APPLECSPDL_DB_CHANGE_PASSWORD' value64='5'/>
<enum name='CSSM_APPLECSPDL_DB_GET_HANDLE' value64='6'/>
<enum name='CSSM_APPLECSPDL_DB_GET_SETTINGS' value64='2'/>
<enum name='CSSM_APPLECSPDL_DB_IS_LOCKED' value64='4'/>
<enum name='CSSM_APPLECSPDL_DB_LOCK' value64='0'/>
<enum name='CSSM_APPLECSPDL_DB_SET_SETTINGS' value64='3'/>
<enum name='CSSM_APPLECSPDL_DB_UNLOCK' value64='1'/>
<enum name='CSSM_APPLECSP_KEYDIGEST' value64='256'/>
<enum name='CSSM_APPLEDL_OPEN_PARAMETERS_VERSION' value64='1'/>
<enum name='CSSM_APPLEFILEDL_COMMIT' value64='1'/>
<enum name='CSSM_APPLEFILEDL_DELETE_FILE' value64='6'/>
<enum name='CSSM_APPLEFILEDL_MAKE_BACKUP' value64='4'/>
<enum name='CSSM_APPLEFILEDL_MAKE_COPY' value64='5'/>
<enum name='CSSM_APPLEFILEDL_ROLLBACK' value64='2'/>
<enum name='CSSM_APPLEFILEDL_TAKE_FILE_LOCK' value64='3'/>
<enum name='CSSM_APPLEFILEDL_TOGGLE_AUTOCOMMIT' value64='0'/>
<enum name='CSSM_APPLESCPDL_CSP_GET_KEYHANDLE' value64='7'/>
<enum name='CSSM_APPLEX509CL_OBTAIN_CSR' value64='0'/>
<enum name='CSSM_APPLEX509CL_VERIFY_CSR' value64='1'/>
<enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_10' value64='10'/>
<enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_11' value64='11'/>
<enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_12' value64='12'/>
<enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_13' value64='13'/>
<enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_14' value64='14'/>
<enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_15' value64='15'/>
<enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_16' value64='16'/>
<enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_17' value64='17'/>
<enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_18' value64='18'/>
<enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_19' value64='19'/>
<enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_20' value64='20'/>
<enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_21' value64='21'/>
<enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_22' value64='22'/>
<enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_23' value64='23'/>
<enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_24' value64='24'/>
<enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_25' value64='25'/>
<enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_26' value64='26'/>
<enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_27' value64='27'/>
<enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_8' value64='8'/>
<enum name='CSSM_APPLE_PRIVATE_CSPDL_CODE_9' value64='9'/>
<enum name='CSSM_APPLE_TP_ACTION_VERSION' value64='0'/>
<enum name='CSSM_APPLE_TP_CRL_OPTS_VERSION' value64='0'/>
<enum name='CSSM_APPLE_TP_SMIME_OPTS_VERSION' value64='0'/>
<enum name='CSSM_APPLE_TP_SSL_CLIENT' value64='1'/>
<enum name='CSSM_APPLE_TP_SSL_OPTS_VERSION' value64='1'/>
<enum name='CSSM_APPLE_UNLOCK_TYPE_KEYBAG' value64='3'/>
<enum name='CSSM_APPLE_UNLOCK_TYPE_KEY_DIRECT' value64='1'/>
<enum name='CSSM_APPLE_UNLOCK_TYPE_WRAPPED_PRIVATE' value64='2'/>
<enum name='CSSM_ASC_OPTIMIZE_ASCII' value64='5'/>
<enum name='CSSM_ASC_OPTIMIZE_DEFAULT' value64='0'/>
<enum name='CSSM_ASC_OPTIMIZE_SECURITY' value64='2'/>
<enum name='CSSM_ASC_OPTIMIZE_SIZE' value64='1'/>
<enum name='CSSM_ASC_OPTIMIZE_TIME' value64='3'/>
<enum name='CSSM_ASC_OPTIMIZE_TIME_SIZE' value64='4'/>
<enum name='CSSM_ATTACH_READ_ONLY' value64='1'/>
<enum name='CSSM_ATTRIBUTE_ACCESS_CREDENTIALS' value64='2147483684'/>
<enum name='CSSM_ATTRIBUTE_ALERT_TITLE' value64='545259527'/>
<enum name='CSSM_ATTRIBUTE_ALG_ID' value64='268435485'/>
<enum name='CSSM_ATTRIBUTE_ALG_PARAMS' value64='536870928'/>
<enum name='CSSM_ATTRIBUTE_ASC_OPTIMIZATION' value64='276824067'/>
<enum name='CSSM_ATTRIBUTE_BASE' value64='536870939'/>
<enum name='CSSM_ATTRIBUTE_BLOCK_SIZE' value64='268435468'/>
<enum name='CSSM_ATTRIBUTE_CSP_HANDLE' value64='268435490'/>
<enum name='CSSM_ATTRIBUTE_CUSTOM' value64='536870913'/>
<enum name='CSSM_ATTRIBUTE_DATA_ACCESS_CREDENTIALS' value64='2147483648'/>
<enum name='CSSM_ATTRIBUTE_DATA_CRYPTO_DATA' value64='805306368'/>
<enum name='CSSM_ATTRIBUTE_DATA_CSSM_DATA' value64='536870912'/>
<enum name='CSSM_ATTRIBUTE_DATA_DATE' value64='1610612736'/>
<enum name='CSSM_ATTRIBUTE_DATA_DL_DB_HANDLE' value64='33554432'/>
<enum name='CSSM_ATTRIBUTE_DATA_KEY' value64='1073741824'/>
<enum name='CSSM_ATTRIBUTE_DATA_KR_PROFILE' value64='50331648'/>
<enum name='CSSM_ATTRIBUTE_DATA_NONE' value64='0'/>
<enum name='CSSM_ATTRIBUTE_DATA_RANGE' value64='1879048192'/>
<enum name='CSSM_ATTRIBUTE_DATA_STRING' value64='1342177280'/>
<enum name='CSSM_ATTRIBUTE_DATA_UINT32' value64='268435456'/>
<enum name='CSSM_ATTRIBUTE_DATA_VERSION' value64='16777216'/>
<enum name='CSSM_ATTRIBUTE_DESCRIPTION' value64='1342177282'/>
<enum name='CSSM_ATTRIBUTE_DL_DB_HANDLE' value64='33554467'/>
<enum name='CSSM_ATTRIBUTE_EFFECTIVE_BITS' value64='268435476'/>
<enum name='CSSM_ATTRIBUTE_END_DATE' value64='1610612758'/>
<enum name='CSSM_ATTRIBUTE_FEE_CURVE_TYPE' value64='276824066'/>
<enum name='CSSM_ATTRIBUTE_FEE_PRIME_TYPE' value64='276824065'/>
<enum name='CSSM_ATTRIBUTE_INIT_VECTOR' value64='536870916'/>
<enum name='CSSM_ATTRIBUTE_ITERATION_COUNT' value64='268435486'/>
<enum name='CSSM_ATTRIBUTE_IV_SIZE' value64='268435471'/>
<enum name='CSSM_ATTRIBUTE_KEY' value64='1073741827'/>
<enum name='CSSM_ATTRIBUTE_KEYATTR' value64='268435480'/>
<enum name='CSSM_ATTRIBUTE_KEYUSAGE' value64='268435479'/>
<enum name='CSSM_ATTRIBUTE_KEY_LENGTH' value64='268435466'/>
<enum name='CSSM_ATTRIBUTE_KEY_LENGTH_RANGE' value64='1879048203'/>
<enum name='CSSM_ATTRIBUTE_KEY_TYPE' value64='268435474'/>
<enum name='CSSM_ATTRIBUTE_KRPROFILE_LOCAL' value64='50331680'/>
<enum name='CSSM_ATTRIBUTE_KRPROFILE_REMOTE' value64='50331681'/>
<enum name='CSSM_ATTRIBUTE_LABEL' value64='536870929'/>
<enum name='CSSM_ATTRIBUTE_MODE' value64='268435475'/>
<enum name='CSSM_ATTRIBUTE_NONE' value64='0'/>
<enum name='CSSM_ATTRIBUTE_OUTPUT_SIZE' value64='268435469'/>
<enum name='CSSM_ATTRIBUTE_PADDING' value64='268435462'/>
<enum name='CSSM_ATTRIBUTE_PARAM_KEY' value64='1082130437'/>
<enum name='CSSM_ATTRIBUTE_PASSPHRASE' value64='805306377'/>
<enum name='CSSM_ATTRIBUTE_PRIME' value64='536870938'/>
<enum name='CSSM_ATTRIBUTE_PRIVATE_KEY_FORMAT' value64='268435494'/>
<enum name='CSSM_ATTRIBUTE_PROMPT' value64='545259526'/>
<enum name='CSSM_ATTRIBUTE_PUBLIC_KEY' value64='1082130432'/>
<enum name='CSSM_ATTRIBUTE_PUBLIC_KEY_FORMAT' value64='268435493'/>
<enum name='CSSM_ATTRIBUTE_RANDOM' value64='536870919'/>
<enum name='CSSM_ATTRIBUTE_ROUNDS' value64='268435470'/>
<enum name='CSSM_ATTRIBUTE_ROUNDS_RANGE' value64='1879048223'/>
<enum name='CSSM_ATTRIBUTE_RSA_BLINDING' value64='276824068'/>
<enum name='CSSM_ATTRIBUTE_SALT' value64='536870917'/>
<enum name='CSSM_ATTRIBUTE_SEED' value64='805306376'/>
<enum name='CSSM_ATTRIBUTE_START_DATE' value64='1610612757'/>
<enum name='CSSM_ATTRIBUTE_SUBPRIME' value64='536870940'/>
<enum name='CSSM_ATTRIBUTE_SYMMETRIC_KEY_FORMAT' value64='268435495'/>
<enum name='CSSM_ATTRIBUTE_TYPE_MASK' value64='4278190080'/>
<enum name='CSSM_ATTRIBUTE_VENDOR_DEFINED' value64='8388608'/>
<enum name='CSSM_ATTRIBUTE_VERIFY_PASSPHRASE' value64='276824072'/>
<enum name='CSSM_ATTRIBUTE_VERSION' value64='16777241'/>
<enum name='CSSM_ATTRIBUTE_WRAPPED_KEY_FORMAT' value64='268435496'/>
<enum name='CSSM_BASE_ERROR' value64='-2147418112'/>
<enum name='CSSM_CERTGROUP_CERT_PAIR' value64='3'/>
<enum name='CSSM_CERTGROUP_DATA' value64='0'/>
<enum name='CSSM_CERTGROUP_ENCODED_CERT' value64='1'/>
<enum name='CSSM_CERTGROUP_PARSED_CERT' value64='2'/>
<enum name='CSSM_CERT_ACL_ENTRY' value64='12'/>
<enum name='CSSM_CERT_BUNDLE_CUSTOM' value64='1'/>
<enum name='CSSM_CERT_BUNDLE_ENCODING_BER' value64='2'/>
<enum name='CSSM_CERT_BUNDLE_ENCODING_CUSTOM' value64='1'/>
<enum name='CSSM_CERT_BUNDLE_ENCODING_DER' value64='3'/>
<enum name='CSSM_CERT_BUNDLE_ENCODING_PGP' value64='5'/>
<enum name='CSSM_CERT_BUNDLE_ENCODING_SEXPR' value64='4'/>
<enum name='CSSM_CERT_BUNDLE_ENCODING_UNKNOWN' value64='0'/>
<enum name='CSSM_CERT_BUNDLE_LAST' value64='32767'/>
<enum name='CSSM_CERT_BUNDLE_PFX' value64='5'/>
<enum name='CSSM_CERT_BUNDLE_PGP_KEYRING' value64='7'/>
<enum name='CSSM_CERT_BUNDLE_PKCS12' value64='4'/>
<enum name='CSSM_CERT_BUNDLE_PKCS7_SIGNED_DATA' value64='2'/>
<enum name='CSSM_CERT_BUNDLE_PKCS7_SIGNED_ENVELOPED_DATA' value64='3'/>
<enum name='CSSM_CERT_BUNDLE_SPKI_SEQUENCE' value64='6'/>
<enum name='CSSM_CERT_BUNDLE_UNKNOWN' value64='0'/>
<enum name='CSSM_CERT_ENCODING_BER' value64='2'/>
<enum name='CSSM_CERT_ENCODING_CUSTOM' value64='1'/>
<enum name='CSSM_CERT_ENCODING_DER' value64='3'/>
<enum name='CSSM_CERT_ENCODING_LAST' value64='32767'/>
<enum name='CSSM_CERT_ENCODING_MULTIPLE' value64='32766'/>
<enum name='CSSM_CERT_ENCODING_NDR' value64='4'/>
<enum name='CSSM_CERT_ENCODING_PGP' value64='6'/>
<enum name='CSSM_CERT_ENCODING_SEXPR' value64='5'/>
<enum name='CSSM_CERT_ENCODING_UNKNOWN' value64='0'/>
<enum name='CSSM_CERT_Intel' value64='8'/>
<enum name='CSSM_CERT_LAST' value64='32767'/>
<enum name='CSSM_CERT_MULTIPLE' value64='32766'/>
<enum name='CSSM_CERT_PARSE_FORMAT_COMPLEX' value64='3'/>
<enum name='CSSM_CERT_PARSE_FORMAT_CUSTOM' value64='1'/>
<enum name='CSSM_CERT_PARSE_FORMAT_LAST' value64='32767'/>
<enum name='CSSM_CERT_PARSE_FORMAT_MULTIPLE' value64='32766'/>
<enum name='CSSM_CERT_PARSE_FORMAT_NONE' value64='0'/>
<enum name='CSSM_CERT_PARSE_FORMAT_OID_NAMED' value64='4'/>
<enum name='CSSM_CERT_PARSE_FORMAT_SEXPR' value64='2'/>
<enum name='CSSM_CERT_PARSE_FORMAT_TUPLE' value64='5'/>
<enum name='CSSM_CERT_PGP' value64='4'/>
<enum name='CSSM_CERT_SDSIv1' value64='6'/>
<enum name='CSSM_CERT_SPKI' value64='5'/>
<enum name='CSSM_CERT_STATUS_EXPIRED' value64='1'/>
<enum name='CSSM_CERT_STATUS_IS_FROM_NET' value64='32'/>
<enum name='CSSM_CERT_STATUS_IS_IN_ANCHORS' value64='8'/>
<enum name='CSSM_CERT_STATUS_IS_IN_INPUT_CERTS' value64='4'/>
<enum name='CSSM_CERT_STATUS_IS_ROOT' value64='16'/>
<enum name='CSSM_CERT_STATUS_NOT_VALID_YET' value64='2'/>
<enum name='CSSM_CERT_STATUS_TRUST_SETTINGS_DENY' value64='1024'/>
<enum name='CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_ADMIN' value64='128'/>
<enum name='CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_SYSTEM' value64='256'/>
<enum name='CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_USER' value64='64'/>
<enum name='CSSM_CERT_STATUS_TRUST_SETTINGS_IGNORED_ERROR' value64='2048'/>
<enum name='CSSM_CERT_STATUS_TRUST_SETTINGS_TRUST' value64='512'/>
<enum name='CSSM_CERT_TUPLE' value64='11'/>
<enum name='CSSM_CERT_UNKNOWN' value64='0'/>
<enum name='CSSM_CERT_X9_ATTRIBUTE' value64='10'/>
<enum name='CSSM_CERT_X_509_ATTRIBUTE' value64='9'/>
<enum name='CSSM_CERT_X_509v1' value64='1'/>
<enum name='CSSM_CERT_X_509v2' value64='2'/>
<enum name='CSSM_CERT_X_509v3' value64='3'/>
<enum name='CSSM_CL_BASE_CL_ERROR' value64='-2147411712'/>
<enum name='CSSM_CL_BASE_ERROR' value64='-2147411968'/>
<enum name='CSSM_CL_CUSTOM_CERT_BUNDLE_TYPE' value64='32768'/>
<enum name='CSSM_CL_CUSTOM_CERT_ENCODING' value64='32768'/>
<enum name='CSSM_CL_CUSTOM_CERT_PARSE_FORMAT' value64='32768'/>
<enum name='CSSM_CL_CUSTOM_CERT_TYPE' value64='32768'/>
<enum name='CSSM_CL_CUSTOM_CRL_PARSE_FORMAT' value64='32768'/>
<enum name='CSSM_CL_PRIVATE_ERROR' value64='-2147410944'/>
<enum name='CSSM_CL_TEMPLATE_INTERMEDIATE_CERT' value64='1'/>
<enum name='CSSM_CL_TEMPLATE_PKIX_CERTTEMPLATE' value64='2'/>
<enum name='CSSM_CONTEXT_EVENT_CREATE' value64='1'/>
<enum name='CSSM_CONTEXT_EVENT_DELETE' value64='2'/>
<enum name='CSSM_CONTEXT_EVENT_UPDATE' value64='3'/>
<enum name='CSSM_CRLGROUP_CRL_PAIR' value64='3'/>
<enum name='CSSM_CRLGROUP_DATA' value64='0'/>
<enum name='CSSM_CRLGROUP_ENCODED_CRL' value64='1'/>
<enum name='CSSM_CRLGROUP_PARSED_CRL' value64='2'/>
<enum name='CSSM_CRL_ENCODING_BER' value64='2'/>
<enum name='CSSM_CRL_ENCODING_BLOOM' value64='4'/>
<enum name='CSSM_CRL_ENCODING_CUSTOM' value64='1'/>
<enum name='CSSM_CRL_ENCODING_DER' value64='3'/>
<enum name='CSSM_CRL_ENCODING_MULTIPLE' value64='32766'/>
<enum name='CSSM_CRL_ENCODING_SEXPR' value64='5'/>
<enum name='CSSM_CRL_ENCODING_UNKNOWN' value64='0'/>
<enum name='CSSM_CRL_PARSE_FORMAT_COMPLEX' value64='3'/>
<enum name='CSSM_CRL_PARSE_FORMAT_CUSTOM' value64='1'/>
<enum name='CSSM_CRL_PARSE_FORMAT_LAST' value64='32767'/>
<enum name='CSSM_CRL_PARSE_FORMAT_MULTIPLE' value64='32766'/>
<enum name='CSSM_CRL_PARSE_FORMAT_NONE' value64='0'/>
<enum name='CSSM_CRL_PARSE_FORMAT_OID_NAMED' value64='4'/>
<enum name='CSSM_CRL_PARSE_FORMAT_SEXPR' value64='2'/>
<enum name='CSSM_CRL_PARSE_FORMAT_TUPLE' value64='5'/>
<enum name='CSSM_CRL_TYPE_MULTIPLE' value64='32766'/>
<enum name='CSSM_CRL_TYPE_SPKI' value64='3'/>
<enum name='CSSM_CRL_TYPE_UNKNOWN' value64='0'/>
<enum name='CSSM_CRL_TYPE_X_509v1' value64='1'/>
<enum name='CSSM_CRL_TYPE_X_509v2' value64='2'/>
<enum name='CSSM_CSP_BASE_CSP_ERROR' value64='-2147415808'/>
<enum name='CSSM_CSP_BASE_ERROR' value64='-2147416064'/>
<enum name='CSSM_CSP_HARDWARE' value64='2'/>
<enum name='CSSM_CSP_HYBRID' value64='3'/>
<enum name='CSSM_CSP_PRIVATE_ERROR' value64='-2147415040'/>
<enum name='CSSM_CSP_RDR_EXISTS' value64='2'/>
<enum name='CSSM_CSP_RDR_HW' value64='4'/>
<enum name='CSSM_CSP_RDR_TOKENPRESENT' value64='1'/>
<enum name='CSSM_CSP_SOFTWARE' value64='1'/>
<enum name='CSSM_CSP_STORES_CERTIFICATES' value64='134217728'/>
<enum name='CSSM_CSP_STORES_GENERIC' value64='268435456'/>
<enum name='CSSM_CSP_STORES_PRIVATE_KEYS' value64='16777216'/>
<enum name='CSSM_CSP_STORES_PUBLIC_KEYS' value64='33554432'/>
<enum name='CSSM_CSP_STORES_SESSION_KEYS' value64='67108864'/>
<enum name='CSSM_CSP_TOK_CLOCK_EXISTS' value64='64'/>
<enum name='CSSM_CSP_TOK_LOGIN_REQUIRED' value64='4'/>
<enum name='CSSM_CSP_TOK_PRIVATE_KEY_PASSWORD' value64='4194304'/>
<enum name='CSSM_CSP_TOK_PROT_AUTHENTICATION' value64='256'/>
<enum name='CSSM_CSP_TOK_RNG' value64='1'/>
<enum name='CSSM_CSP_TOK_SESSION_KEY_PASSWORD' value64='2097152'/>
<enum name='CSSM_CSP_TOK_USER_PIN_EXPIRED' value64='1048576'/>
<enum name='CSSM_CSP_TOK_USER_PIN_INITIALIZED' value64='8'/>
<enum name='CSSM_CSP_TOK_WRITE_PROTECTED' value64='2'/>
<enum name='CSSM_CSSM_BASE_CSSM_ERROR' value64='-2147417840'/>
<enum name='CSSM_CSSM_BASE_ERROR' value64='-2147418112'/>
<enum name='CSSM_CSSM_PRIVATE_ERROR' value64='-2147417088'/>
<enum name='CSSM_CUSTOM_COMMON_ERROR_EXTENT' value64='224'/>
<enum name='CSSM_DB_ACCESS_PRIVILEGED' value64='4'/>
<enum name='CSSM_DB_ACCESS_READ' value64='1'/>
<enum name='CSSM_DB_ACCESS_RESET' value64='65536'/>
<enum name='CSSM_DB_ACCESS_WRITE' value64='2'/>
<enum name='CSSM_DB_AND' value64='1'/>
<enum name='CSSM_DB_ATTRIBUTE_FORMAT_BIG_NUM' value64='3'/>
<enum name='CSSM_DB_ATTRIBUTE_FORMAT_BLOB' value64='6'/>
<enum name='CSSM_DB_ATTRIBUTE_FORMAT_COMPLEX' value64='8'/>
<enum name='CSSM_DB_ATTRIBUTE_FORMAT_MULTI_UINT32' value64='7'/>
<enum name='CSSM_DB_ATTRIBUTE_FORMAT_REAL' value64='4'/>
<enum name='CSSM_DB_ATTRIBUTE_FORMAT_SINT32' value64='1'/>
<enum name='CSSM_DB_ATTRIBUTE_FORMAT_STRING' value64='0'/>
<enum name='CSSM_DB_ATTRIBUTE_FORMAT_TIME_DATE' value64='5'/>
<enum name='CSSM_DB_ATTRIBUTE_FORMAT_UINT32' value64='2'/>
<enum name='CSSM_DB_ATTRIBUTE_MDS_END' value64='1073758208'/>
<enum name='CSSM_DB_ATTRIBUTE_MDS_START' value64='1073741824'/>
<enum name='CSSM_DB_ATTRIBUTE_NAME_AS_INTEGER' value64='2'/>
<enum name='CSSM_DB_ATTRIBUTE_NAME_AS_OID' value64='1'/>
<enum name='CSSM_DB_ATTRIBUTE_NAME_AS_STRING' value64='0'/>
<enum name='CSSM_DB_CERT_USE_OWNER' value64='4'/>
<enum name='CSSM_DB_CERT_USE_PRIVACY' value64='32'/>
<enum name='CSSM_DB_CERT_USE_REVOKED' value64='8'/>
<enum name='CSSM_DB_CERT_USE_SIGNING' value64='16'/>
<enum name='CSSM_DB_CERT_USE_SYSTEM' value64='2'/>
<enum name='CSSM_DB_CERT_USE_TRUSTED' value64='1'/>
<enum name='CSSM_DB_CONTAINS' value64='4'/>
<enum name='CSSM_DB_CONTAINS_FINAL_SUBSTRING' value64='6'/>
<enum name='CSSM_DB_CONTAINS_INITIAL_SUBSTRING' value64='5'/>
<enum name='CSSM_DB_DATASTORES_UNKNOWN' value64='4294967295'/>
<enum name='CSSM_DB_EQUAL' value64='0'/>
<enum name='CSSM_DB_FILESYSTEMSCAN_MODE' value64='1'/>
<enum name='CSSM_DB_GREATER_THAN' value64='3'/>
<enum name='CSSM_DB_INDEX_NONUNIQUE' value64='1'/>
<enum name='CSSM_DB_INDEX_ON_ATTRIBUTE' value64='1'/>
<enum name='CSSM_DB_INDEX_ON_RECORD' value64='2'/>
<enum name='CSSM_DB_INDEX_ON_UNKNOWN' value64='0'/>
<enum name='CSSM_DB_INDEX_UNIQUE' value64='0'/>
<enum name='CSSM_DB_LESS_THAN' value64='2'/>
<enum name='CSSM_DB_MODIFY_ATTRIBUTE_ADD' value64='1'/>
<enum name='CSSM_DB_MODIFY_ATTRIBUTE_DELETE' value64='2'/>
<enum name='CSSM_DB_MODIFY_ATTRIBUTE_NONE' value64='0'/>
<enum name='CSSM_DB_MODIFY_ATTRIBUTE_REPLACE' value64='3'/>
<enum name='CSSM_DB_NONE' value64='0'/>
<enum name='CSSM_DB_NOT_EQUAL' value64='1'/>
<enum name='CSSM_DB_OR' value64='2'/>
<enum name='CSSM_DB_RECORDTYPE_APP_DEFINED_END' value64='4294967295'/>
<enum name='CSSM_DB_RECORDTYPE_APP_DEFINED_START' value64='2147483648'/>
<enum name='CSSM_DB_RECORDTYPE_OPEN_GROUP_END' value64='18'/>
<enum name='CSSM_DB_RECORDTYPE_OPEN_GROUP_START' value64='10'/>
<enum name='CSSM_DB_RECORDTYPE_SCHEMA_END' value64='4'/>
<enum name='CSSM_DB_RECORDTYPE_SCHEMA_START' value64='0'/>
<enum name='CSSM_DB_RELATIONID_MDS_END' value64='1073758208'/>
<enum name='CSSM_DB_RELATIONID_MDS_START' value64='1073741824'/>
<enum name='CSSM_DB_TRANSACTIONAL_MODE' value64='0'/>
<enum name='CSSM_DL_BASE_DL_ERROR' value64='-2147413760'/>
<enum name='CSSM_DL_BASE_ERROR' value64='-2147414016'/>
<enum name='CSSM_DL_CUSTOM' value64='1'/>
<enum name='CSSM_DL_DB_RECORD_ALL_KEYS' value64='18'/>
<enum name='CSSM_DL_DB_RECORD_ANY' value64='10'/>
<enum name='CSSM_DL_DB_RECORD_APPLESHARE_PASSWORD' value64='2147483650'/>
<enum name='CSSM_DL_DB_RECORD_CERT' value64='11'/>
<enum name='CSSM_DL_DB_RECORD_CRL' value64='12'/>
<enum name='CSSM_DL_DB_RECORD_EXTENDED_ATTRIBUTE' value64='2147487748'/>
<enum name='CSSM_DL_DB_RECORD_GENERIC' value64='14'/>
<enum name='CSSM_DL_DB_RECORD_GENERIC_PASSWORD' value64='2147483648'/>
<enum name='CSSM_DL_DB_RECORD_INTERNET_PASSWORD' value64='2147483649'/>
<enum name='CSSM_DL_DB_RECORD_METADATA' value64='2147516416'/>
<enum name='CSSM_DL_DB_RECORD_POLICY' value64='13'/>
<enum name='CSSM_DL_DB_RECORD_PRIVATE_KEY' value64='16'/>
<enum name='CSSM_DL_DB_RECORD_PUBLIC_KEY' value64='15'/>
<enum name='CSSM_DL_DB_RECORD_SYMMETRIC_KEY' value64='17'/>
<enum name='CSSM_DL_DB_RECORD_UNLOCK_REFERRAL' value64='2147487747'/>
<enum name='CSSM_DL_DB_RECORD_USER_TRUST' value64='2147487745'/>
<enum name='CSSM_DL_DB_RECORD_X509_CERTIFICATE' value64='2147487744'/>
<enum name='CSSM_DL_DB_RECORD_X509_CRL' value64='2147487746'/>
<enum name='CSSM_DL_DB_SCHEMA_ATTRIBUTES' value64='2'/>
<enum name='CSSM_DL_DB_SCHEMA_INDEXES' value64='1'/>
<enum name='CSSM_DL_DB_SCHEMA_INFO' value64='0'/>
<enum name='CSSM_DL_DB_SCHEMA_PARSING_MODULE' value64='3'/>
<enum name='CSSM_DL_FFS' value64='5'/>
<enum name='CSSM_DL_LDAP' value64='2'/>
<enum name='CSSM_DL_MEMORY' value64='6'/>
<enum name='CSSM_DL_ODBC' value64='3'/>
<enum name='CSSM_DL_PKCS11' value64='4'/>
<enum name='CSSM_DL_PRIVATE_ERROR' value64='-2147412992'/>
<enum name='CSSM_DL_REMOTEDIR' value64='7'/>
<enum name='CSSM_DL_UNKNOWN' value64='0'/>
<enum name='CSSM_ELAPSED_TIME_COMPLETE' value64='-2'/>
<enum name='CSSM_ELAPSED_TIME_UNKNOWN' value64='-1'/>
<enum name='CSSM_ERRCODE_ACL_ADD_FAILED' value64='54'/>
<enum name='CSSM_ERRCODE_ACL_BASE_CERTS_NOT_SUPPORTED' value64='39'/>
<enum name='CSSM_ERRCODE_ACL_CHALLENGE_CALLBACK_FAILED' value64='45'/>
<enum name='CSSM_ERRCODE_ACL_CHANGE_FAILED' value64='49'/>
<enum name='CSSM_ERRCODE_ACL_DELETE_FAILED' value64='52'/>
<enum name='CSSM_ERRCODE_ACL_ENTRY_TAG_NOT_FOUND' value64='47'/>
<enum name='CSSM_ERRCODE_ACL_REPLACE_FAILED' value64='53'/>
<enum name='CSSM_ERRCODE_ACL_SUBJECT_TYPE_NOT_SUPPORTED' value64='43'/>
<enum name='CSSM_ERRCODE_CRL_ALREADY_SIGNED' value64='71'/>
<enum name='CSSM_ERRCODE_DEVICE_FAILED' value64='229'/>
<enum name='CSSM_ERRCODE_DEVICE_RESET' value64='228'/>
<enum name='CSSM_ERRCODE_FUNCTION_FAILED' value64='10'/>
<enum name='CSSM_ERRCODE_FUNCTION_NOT_IMPLEMENTED' value64='7'/>
<enum name='CSSM_ERRCODE_INCOMPATIBLE_VERSION' value64='65'/>
<enum name='CSSM_ERRCODE_INSUFFICIENT_CLIENT_IDENTIFICATION' value64='227'/>
<enum name='CSSM_ERRCODE_INTERNAL_ERROR' value64='1'/>
<enum name='CSSM_ERRCODE_INVALID_ACCESS_CREDENTIALS' value64='37'/>
<enum name='CSSM_ERRCODE_INVALID_ACL_BASE_CERTS' value64='38'/>
<enum name='CSSM_ERRCODE_INVALID_ACL_CHALLENGE_CALLBACK' value64='44'/>
<enum name='CSSM_ERRCODE_INVALID_ACL_EDIT_MODE' value64='48'/>
<enum name='CSSM_ERRCODE_INVALID_ACL_ENTRY_TAG' value64='46'/>
<enum name='CSSM_ERRCODE_INVALID_ACL_SUBJECT_VALUE' value64='42'/>
<enum name='CSSM_ERRCODE_INVALID_AC_HANDLE' value64='85'/>
<enum name='CSSM_ERRCODE_INVALID_CERTGROUP_POINTER' value64='66'/>
<enum name='CSSM_ERRCODE_INVALID_CERT_POINTER' value64='67'/>
<enum name='CSSM_ERRCODE_INVALID_CL_HANDLE' value64='82'/>
<enum name='CSSM_ERRCODE_INVALID_CONTEXT_HANDLE' value64='64'/>
<enum name='CSSM_ERRCODE_INVALID_CRL_POINTER' value64='68'/>
<enum name='CSSM_ERRCODE_INVALID_CRYPTO_DATA' value64='88'/>
<enum name='CSSM_ERRCODE_INVALID_CSP_HANDLE' value64='80'/>
<enum name='CSSM_ERRCODE_INVALID_DATA' value64='70'/>
<enum name='CSSM_ERRCODE_INVALID_DB_HANDLE' value64='74'/>
<enum name='CSSM_ERRCODE_INVALID_DB_LIST' value64='76'/>
<enum name='CSSM_ERRCODE_INVALID_DB_LIST_POINTER' value64='77'/>
<enum name='CSSM_ERRCODE_INVALID_DL_HANDLE' value64='81'/>
<enum name='CSSM_ERRCODE_INVALID_FIELD_POINTER' value64='69'/>
<enum name='CSSM_ERRCODE_INVALID_GUID' value64='12'/>
<enum name='CSSM_ERRCODE_INVALID_INPUT_POINTER' value64='5'/>
<enum name='CSSM_ERRCODE_INVALID_KR_HANDLE' value64='84'/>
<enum name='CSSM_ERRCODE_INVALID_NETWORK_ADDR' value64='87'/>
<enum name='CSSM_ERRCODE_INVALID_NEW_ACL_ENTRY' value64='50'/>
<enum name='CSSM_ERRCODE_INVALID_NEW_ACL_OWNER' value64='51'/>
<enum name='CSSM_ERRCODE_INVALID_NUMBER_OF_FIELDS' value64='72'/>
<enum name='CSSM_ERRCODE_INVALID_OUTPUT_POINTER' value64='6'/>
<enum name='CSSM_ERRCODE_INVALID_PASSTHROUGH_ID' value64='86'/>
<enum name='CSSM_ERRCODE_INVALID_POINTER' value64='4'/>
<enum name='CSSM_ERRCODE_INVALID_SAMPLE_VALUE' value64='40'/>
<enum name='CSSM_ERRCODE_INVALID_TP_HANDLE' value64='83'/>
<enum name='CSSM_ERRCODE_IN_DARK_WAKE' value64='230'/>
<enum name='CSSM_ERRCODE_MDS_ERROR' value64='3'/>
<enum name='CSSM_ERRCODE_MEMORY_ERROR' value64='2'/>
<enum name='CSSM_ERRCODE_MODULE_MANIFEST_VERIFY_FAILED' value64='11'/>
<enum name='CSSM_ERRCODE_NO_USER_INTERACTION' value64='224'/>
<enum name='CSSM_ERRCODE_OBJECT_ACL_NOT_SUPPORTED' value64='35'/>
<enum name='CSSM_ERRCODE_OBJECT_ACL_REQUIRED' value64='36'/>
<enum name='CSSM_ERRCODE_OBJECT_MANIP_AUTH_DENIED' value64='34'/>
<enum name='CSSM_ERRCODE_OBJECT_USE_AUTH_DENIED' value64='33'/>
<enum name='CSSM_ERRCODE_OPERATION_AUTH_DENIED' value64='32'/>
<enum name='CSSM_ERRCODE_OS_ACCESS_DENIED' value64='9'/>
<enum name='CSSM_ERRCODE_PRIVILEGE_NOT_GRANTED' value64='75'/>
<enum name='CSSM_ERRCODE_SAMPLE_VALUE_NOT_SUPPORTED' value64='41'/>
<enum name='CSSM_ERRCODE_SELF_CHECK_FAILED' value64='8'/>
<enum name='CSSM_ERRCODE_SERVICE_NOT_AVAILABLE' value64='226'/>
<enum name='CSSM_ERRCODE_UNKNOWN_FORMAT' value64='78'/>
<enum name='CSSM_ERRCODE_UNKNOWN_TAG' value64='79'/>
<enum name='CSSM_ERRCODE_USER_CANCELED' value64='225'/>
<enum name='CSSM_ERRCODE_VERIFICATION_FAILURE' value64='73'/>
<enum name='CSSM_ERRORCODE_COMMON_EXTENT' value64='256'/>
<enum name='CSSM_ERRORCODE_CUSTOM_OFFSET' value64='1024'/>
<enum name='CSSM_ERRORCODE_MODULE_EXTENT' value64='2048'/>
<enum name='CSSM_ESTIMATED_TIME_UNKNOWN' value64='-1'/>
<enum name='CSSM_EVIDENCE_FORM_APPLE_CERTGROUP' value64='2147483649'/>
<enum name='CSSM_EVIDENCE_FORM_APPLE_CERT_INFO' value64='2147483650'/>
<enum name='CSSM_EVIDENCE_FORM_APPLE_CUSTOM' value64='2147483648'/>
<enum name='CSSM_EVIDENCE_FORM_APPLE_HEADER' value64='2147483648'/>
<enum name='CSSM_EVIDENCE_FORM_CERT' value64='1'/>
<enum name='CSSM_EVIDENCE_FORM_CERT_ID' value64='3'/>
<enum name='CSSM_EVIDENCE_FORM_CRL' value64='2'/>
<enum name='CSSM_EVIDENCE_FORM_CRL_ID' value64='4'/>
<enum name='CSSM_EVIDENCE_FORM_CRL_NEXTTIME' value64='7'/>
<enum name='CSSM_EVIDENCE_FORM_CRL_THISTIME' value64='6'/>
<enum name='CSSM_EVIDENCE_FORM_POLICYINFO' value64='8'/>
<enum name='CSSM_EVIDENCE_FORM_TUPLEGROUP' value64='9'/>
<enum name='CSSM_EVIDENCE_FORM_UNSPECIFIC' value64='0'/>
<enum name='CSSM_EVIDENCE_FORM_VERIFIER_TIME' value64='5'/>
<enum name='CSSM_FALSE' value64='0'/>
<enum name='CSSM_FEE_CURVE_TYPE_ANSI_X9_62' value64='3'/>
<enum name='CSSM_FEE_CURVE_TYPE_DEFAULT' value64='0'/>
<enum name='CSSM_FEE_CURVE_TYPE_MONTGOMERY' value64='1'/>
<enum name='CSSM_FEE_CURVE_TYPE_WEIERSTRASS' value64='2'/>
<enum name='CSSM_FEE_PRIME_TYPE_DEFAULT' value64='0'/>
<enum name='CSSM_FEE_PRIME_TYPE_FEE' value64='2'/>
<enum name='CSSM_FEE_PRIME_TYPE_GENERAL' value64='3'/>
<enum name='CSSM_FEE_PRIME_TYPE_MERSENNE' value64='1'/>
<enum name='CSSM_FIELDVALUE_COMPLEX_DATA_TYPE' value64='4294967295'/>
<enum name='CSSM_HINT_ADDRESS_APP' value64='1'/>
<enum name='CSSM_HINT_ADDRESS_SP' value64='2'/>
<enum name='CSSM_HINT_CALLBACK' value64='1'/>
<enum name='CSSM_HINT_NONE' value64='0'/>
<enum name='CSSM_INVALID_HANDLE' value64='0'/>
<enum name='CSSM_KEYATTR_ALWAYS_SENSITIVE' value64='16'/>
<enum name='CSSM_KEYATTR_EXTRACTABLE' value64='32'/>
<enum name='CSSM_KEYATTR_MODIFIABLE' value64='4'/>
<enum name='CSSM_KEYATTR_NEVER_EXTRACTABLE' value64='64'/>
<enum name='CSSM_KEYATTR_PARTIAL' value64='65536'/>
<enum name='CSSM_KEYATTR_PERMANENT' value64='1'/>
<enum name='CSSM_KEYATTR_PRIVATE' value64='2'/>
<enum name='CSSM_KEYATTR_PUBLIC_KEY_ENCRYPT' value64='131072'/>
<enum name='CSSM_KEYATTR_RETURN_DATA' value64='268435456'/>
<enum name='CSSM_KEYATTR_RETURN_DEFAULT' value64='0'/>
<enum name='CSSM_KEYATTR_RETURN_NONE' value64='1073741824'/>
<enum name='CSSM_KEYATTR_RETURN_REF' value64='536870912'/>
<enum name='CSSM_KEYATTR_SENSITIVE' value64='8'/>
<enum name='CSSM_KEYBLOB_OTHER' value64='4294967295'/>
<enum name='CSSM_KEYBLOB_RAW' value64='0'/>
<enum name='CSSM_KEYBLOB_RAW_FORMAT_BSAFE' value64='6'/>
<enum name='CSSM_KEYBLOB_RAW_FORMAT_CCA' value64='9'/>
<enum name='CSSM_KEYBLOB_RAW_FORMAT_FIPS186' value64='5'/>
<enum name='CSSM_KEYBLOB_RAW_FORMAT_MSCAPI' value64='3'/>
<enum name='CSSM_KEYBLOB_RAW_FORMAT_NONE' value64='0'/>
<enum name='CSSM_KEYBLOB_RAW_FORMAT_OCTET_STRING' value64='12'/>
<enum name='CSSM_KEYBLOB_RAW_FORMAT_OPENSSH' value64='2147483649'/>
<enum name='CSSM_KEYBLOB_RAW_FORMAT_OPENSSH2' value64='2147483651'/>
<enum name='CSSM_KEYBLOB_RAW_FORMAT_OPENSSL' value64='2147483650'/>
<enum name='CSSM_KEYBLOB_RAW_FORMAT_OTHER' value64='4294967295'/>
<enum name='CSSM_KEYBLOB_RAW_FORMAT_PGP' value64='4'/>
<enum name='CSSM_KEYBLOB_RAW_FORMAT_PKCS1' value64='1'/>
<enum name='CSSM_KEYBLOB_RAW_FORMAT_PKCS3' value64='2'/>
<enum name='CSSM_KEYBLOB_RAW_FORMAT_PKCS8' value64='10'/>
<enum name='CSSM_KEYBLOB_RAW_FORMAT_SPKI' value64='11'/>
<enum name='CSSM_KEYBLOB_RAW_FORMAT_VENDOR_DEFINED' value64='2147483648'/>
<enum name='CSSM_KEYBLOB_RAW_FORMAT_X509' value64='2147483648'/>
<enum name='CSSM_KEYBLOB_REFERENCE' value64='2'/>
<enum name='CSSM_KEYBLOB_REF_FORMAT_INTEGER' value64='0'/>
<enum name='CSSM_KEYBLOB_REF_FORMAT_OTHER' value64='4294967295'/>
<enum name='CSSM_KEYBLOB_REF_FORMAT_SPKI' value64='2'/>
<enum name='CSSM_KEYBLOB_REF_FORMAT_STRING' value64='1'/>
<enum name='CSSM_KEYBLOB_WRAPPED' value64='3'/>
<enum name='CSSM_KEYBLOB_WRAPPED_FORMAT_APPLE_CUSTOM' value64='100'/>
<enum name='CSSM_KEYBLOB_WRAPPED_FORMAT_MSCAPI' value64='3'/>
<enum name='CSSM_KEYBLOB_WRAPPED_FORMAT_NONE' value64='0'/>
<enum name='CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSH1' value64='102'/>
<enum name='CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSL' value64='101'/>
<enum name='CSSM_KEYBLOB_WRAPPED_FORMAT_OTHER' value64='4294967295'/>
<enum name='CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS7' value64='2'/>
<enum name='CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS8' value64='1'/>
<enum name='CSSM_KEYCLASS_OTHER' value64='4294967295'/>
<enum name='CSSM_KEYCLASS_PRIVATE_KEY' value64='1'/>
<enum name='CSSM_KEYCLASS_PUBLIC_KEY' value64='0'/>
<enum name='CSSM_KEYCLASS_SECRET_PART' value64='3'/>
<enum name='CSSM_KEYCLASS_SESSION_KEY' value64='2'/>
<enum name='CSSM_KEYHEADER_VERSION' value64='2'/>
<enum name='CSSM_KEYUSE_ANY' value64='2147483648'/>
<enum name='CSSM_KEYUSE_DECRYPT' value64='2'/>
<enum name='CSSM_KEYUSE_DERIVE' value64='256'/>
<enum name='CSSM_KEYUSE_ENCRYPT' value64='1'/>
<enum name='CSSM_KEYUSE_SIGN' value64='4'/>
<enum name='CSSM_KEYUSE_SIGN_RECOVER' value64='16'/>
<enum name='CSSM_KEYUSE_UNWRAP' value64='128'/>
<enum name='CSSM_KEYUSE_VERIFY' value64='8'/>
<enum name='CSSM_KEYUSE_VERIFY_RECOVER' value64='32'/>
<enum name='CSSM_KEYUSE_WRAP' value64='64'/>
<enum name='CSSM_KEY_HIERARCHY_EXPORT' value64='2'/>
<enum name='CSSM_KEY_HIERARCHY_INTEG' value64='1'/>
<enum name='CSSM_KEY_HIERARCHY_NONE' value64='0'/>
<enum name='CSSM_KR_BASE_ERROR' value64='-2147407872'/>
<enum name='CSSM_KR_DROP_WORKFACTOR' value64='32'/>
<enum name='CSSM_KR_ENT' value64='2'/>
<enum name='CSSM_KR_ENT_POLICY' value64='2'/>
<enum name='CSSM_KR_INDIV' value64='1'/>
<enum name='CSSM_KR_INDIV_POLICY' value64='1'/>
<enum name='CSSM_KR_LE' value64='12'/>
<enum name='CSSM_KR_LE_MAN' value64='4'/>
<enum name='CSSM_KR_LE_MAN_POLICY' value64='3'/>
<enum name='CSSM_KR_LE_USE' value64='8'/>
<enum name='CSSM_KR_LE_USE_POLICY' value64='4'/>
<enum name='CSSM_KR_OPTIMIZE' value64='16'/>
<enum name='CSSM_KR_PRIVATE_ERROR' value64='-2147406848'/>
<enum name='CSSM_LIST_ELEMENT_DATUM' value64='0'/>
<enum name='CSSM_LIST_ELEMENT_SUBLIST' value64='1'/>
<enum name='CSSM_LIST_ELEMENT_WORDID' value64='2'/>
<enum name='CSSM_LIST_TYPE_CUSTOM' value64='1'/>
<enum name='CSSM_LIST_TYPE_SEXPR' value64='2'/>
<enum name='CSSM_LIST_TYPE_UNKNOWN' value64='0'/>
<enum name='CSSM_MANAGER_REPLY' value64='2'/>
<enum name='CSSM_MANAGER_SERVICE_REQUEST' value64='1'/>
<enum name='CSSM_MDS_BASE_ERROR' value64='-2147414016'/>
<enum name='CSSM_MDS_PRIVATE_ERROR' value64='-2147412992'/>
<enum name='CSSM_MODULE_STRING_SIZE' value64='64'/>
<enum name='CSSM_NET_PROTO_CMP' value64='10'/>
<enum name='CSSM_NET_PROTO_CMPS' value64='11'/>
<enum name='CSSM_NET_PROTO_CUSTOM' value64='1'/>
<enum name='CSSM_NET_PROTO_FTP' value64='7'/>
<enum name='CSSM_NET_PROTO_FTPS' value64='8'/>
<enum name='CSSM_NET_PROTO_LDAP' value64='3'/>
<enum name='CSSM_NET_PROTO_LDAPNS' value64='5'/>
<enum name='CSSM_NET_PROTO_LDAPS' value64='4'/>
<enum name='CSSM_NET_PROTO_NONE' value64='0'/>
<enum name='CSSM_NET_PROTO_OCSP' value64='9'/>
<enum name='CSSM_NET_PROTO_UNSPECIFIED' value64='2'/>
<enum name='CSSM_NET_PROTO_X500DAP' value64='6'/>
<enum name='CSSM_NOTIFY_FAULT' value64='3'/>
<enum name='CSSM_NOTIFY_INSERT' value64='1'/>
<enum name='CSSM_NOTIFY_REMOVE' value64='2'/>
<enum name='CSSM_OK' value64='0'/>
<enum name='CSSM_PADDING_ALTERNATE' value64='4'/>
<enum name='CSSM_PADDING_APPLE_SSLv2' value64='2147483648'/>
<enum name='CSSM_PADDING_CIPHERSTEALING' value64='8'/>
<enum name='CSSM_PADDING_CUSTOM' value64='1'/>
<enum name='CSSM_PADDING_FF' value64='5'/>
<enum name='CSSM_PADDING_NONE' value64='0'/>
<enum name='CSSM_PADDING_ONE' value64='3'/>
<enum name='CSSM_PADDING_PKCS1' value64='10'/>
<enum name='CSSM_PADDING_PKCS5' value64='6'/>
<enum name='CSSM_PADDING_PKCS7' value64='7'/>
<enum name='CSSM_PADDING_RANDOM' value64='9'/>
<enum name='CSSM_PADDING_SIGRAW' value64='11'/>
<enum name='CSSM_PADDING_VENDOR_DEFINED' value64='2147483648'/>
<enum name='CSSM_PADDING_ZERO' value64='2'/>
<enum name='CSSM_PKCS5_PBKDF2_PRF_HMAC_SHA1' value64='0'/>
<enum name='CSSM_PKCS_OAEP_MGF1_MD5' value64='2'/>
<enum name='CSSM_PKCS_OAEP_MGF1_SHA1' value64='1'/>
<enum name='CSSM_PKCS_OAEP_MGF_NONE' value64='0'/>
<enum name='CSSM_PKCS_OAEP_PSOURCE_NONE' value64='0'/>
<enum name='CSSM_PKCS_OAEP_PSOURCE_Pspecified' value64='1'/>
<enum name='CSSM_PRIVILEGE_SCOPE_NONE' value64='0'/>
<enum name='CSSM_PRIVILEGE_SCOPE_PROCESS' value64='1'/>
<enum name='CSSM_PRIVILEGE_SCOPE_THREAD' value64='2'/>
<enum name='CSSM_PVC_APP' value64='1'/>
<enum name='CSSM_PVC_NONE' value64='0'/>
<enum name='CSSM_PVC_SP' value64='2'/>
<enum name='CSSM_QUERY_RETURN_DATA' value64='1'/>
<enum name='CSSM_QUERY_SIZELIMIT_NONE' value64='0'/>
<enum name='CSSM_QUERY_TIMELIMIT_NONE' value64='0'/>
<enum name='CSSM_SAMPLE_TYPE_ASYMMETRIC_KEY' value64='65547'/>
<enum name='CSSM_SAMPLE_TYPE_BIOMETRIC' value64='8'/>
<enum name='CSSM_SAMPLE_TYPE_COMMENT' value64='12'/>
<enum name='CSSM_SAMPLE_TYPE_HASHED_PASSWORD' value64='43'/>
<enum name='CSSM_SAMPLE_TYPE_KEYBAG_KEY' value64='65549'/>
<enum name='CSSM_SAMPLE_TYPE_KEYCHAIN_CHANGE_LOCK' value64='65538'/>
<enum name='CSSM_SAMPLE_TYPE_KEYCHAIN_LOCK' value64='65537'/>
<enum name='CSSM_SAMPLE_TYPE_KEYCHAIN_PROMPT' value64='65536'/>
<enum name='CSSM_SAMPLE_TYPE_PASSWORD' value64='79'/>
<enum name='CSSM_SAMPLE_TYPE_PREAUTH' value64='65545'/>
<enum name='CSSM_SAMPLE_TYPE_PROCESS' value64='65539'/>
<enum name='CSSM_SAMPLE_TYPE_PROMPTED_BIOMETRIC' value64='83'/>
<enum name='CSSM_SAMPLE_TYPE_PROMPTED_PASSWORD' value64='84'/>
<enum name='CSSM_SAMPLE_TYPE_PROTECTED_BIOMETRIC' value64='86'/>
<enum name='CSSM_SAMPLE_TYPE_PROTECTED_PASSWORD' value64='87'/>
<enum name='CSSM_SAMPLE_TYPE_RETRY_ID' value64='85'/>
<enum name='CSSM_SAMPLE_TYPE_SIGNED_NONCE' value64='117'/>
<enum name='CSSM_SAMPLE_TYPE_SIGNED_SECRET' value64='118'/>
<enum name='CSSM_SAMPLE_TYPE_SYMMETRIC_KEY' value64='65541'/>
<enum name='CSSM_SAMPLE_TYPE_THRESHOLD' value64='123'/>
<enum name='CSSM_SERVICE_AC' value64='32'/>
<enum name='CSSM_SERVICE_CL' value64='8'/>
<enum name='CSSM_SERVICE_CSP' value64='2'/>
<enum name='CSSM_SERVICE_CSSM' value64='1'/>
<enum name='CSSM_SERVICE_DL' value64='4'/>
<enum name='CSSM_SERVICE_KR' value64='64'/>
<enum name='CSSM_SERVICE_TP' value64='16'/>
<enum name='CSSM_TP_ACTION_ALLOW_EXPIRED' value64='1'/>
<enum name='CSSM_TP_ACTION_ALLOW_EXPIRED_ROOT' value64='8'/>
<enum name='CSSM_TP_ACTION_CRL_SUFFICIENT' value64='4'/>
<enum name='CSSM_TP_ACTION_DEFAULT' value64='0'/>
<enum name='CSSM_TP_ACTION_FETCH_CERT_FROM_NET' value64='4'/>
<enum name='CSSM_TP_ACTION_FETCH_CRL_FROM_NET' value64='2'/>
<enum name='CSSM_TP_ACTION_IMPLICIT_ANCHORS' value64='64'/>
<enum name='CSSM_TP_ACTION_LEAF_IS_CA' value64='2'/>
<enum name='CSSM_TP_ACTION_REQUIRE_CRL_IF_PRESENT' value64='8'/>
<enum name='CSSM_TP_ACTION_REQUIRE_CRL_PER_CERT' value64='1'/>
<enum name='CSSM_TP_ACTION_REQUIRE_REV_PER_CERT' value64='16'/>
<enum name='CSSM_TP_ACTION_TRUST_SETTINGS' value64='32'/>
<enum name='CSSM_TP_APPLE_EVIDENCE_VERSION' value64='0'/>
<enum name='CSSM_TP_AUTHORITY_REQUEST_CERTISSUE' value64='1'/>
<enum name='CSSM_TP_AUTHORITY_REQUEST_CERTNOTARIZE' value64='6'/>
<enum name='CSSM_TP_AUTHORITY_REQUEST_CERTRESUME' value64='4'/>
<enum name='CSSM_TP_AUTHORITY_REQUEST_CERTREVOKE' value64='2'/>
<enum name='CSSM_TP_AUTHORITY_REQUEST_CERTSUSPEND' value64='3'/>
<enum name='CSSM_TP_AUTHORITY_REQUEST_CERTUSERECOVER' value64='7'/>
<enum name='CSSM_TP_AUTHORITY_REQUEST_CERTVERIFY' value64='5'/>
<enum name='CSSM_TP_AUTHORITY_REQUEST_CRLISSUE' value64='256'/>
<enum name='CSSM_TP_BASE_ERROR' value64='-2147409920'/>
<enum name='CSSM_TP_BASE_TP_ERROR' value64='-2147409664'/>
<enum name='CSSM_TP_CERTCHANGE_HOLD' value64='2'/>
<enum name='CSSM_TP_CERTCHANGE_NONE' value64='0'/>
<enum name='CSSM_TP_CERTCHANGE_NOT_AUTHORIZED' value64='5'/>
<enum name='CSSM_TP_CERTCHANGE_OK' value64='1'/>
<enum name='CSSM_TP_CERTCHANGE_OKWITHNEWTIME' value64='2'/>
<enum name='CSSM_TP_CERTCHANGE_REASON_AFFILIATIONCHANGE' value64='4'/>
<enum name='CSSM_TP_CERTCHANGE_REASON_CACOMPROMISE' value64='2'/>
<enum name='CSSM_TP_CERTCHANGE_REASON_CEASEOPERATION' value64='3'/>
<enum name='CSSM_TP_CERTCHANGE_REASON_HOLDRELEASE' value64='7'/>
<enum name='CSSM_TP_CERTCHANGE_REASON_KEYCOMPROMISE' value64='1'/>
<enum name='CSSM_TP_CERTCHANGE_REASON_SUPERCEDED' value64='5'/>
<enum name='CSSM_TP_CERTCHANGE_REASON_SUSPECTEDCOMPROMISE' value64='6'/>
<enum name='CSSM_TP_CERTCHANGE_REASON_UNKNOWN' value64='0'/>
<enum name='CSSM_TP_CERTCHANGE_REJECTED' value64='4'/>
<enum name='CSSM_TP_CERTCHANGE_RELEASE' value64='3'/>
<enum name='CSSM_TP_CERTCHANGE_REVOKE' value64='1'/>
<enum name='CSSM_TP_CERTCHANGE_STATUS_UNKNOWN' value64='0'/>
<enum name='CSSM_TP_CERTCHANGE_WRONGCA' value64='3'/>
<enum name='CSSM_TP_CERTISSUE_NOT_AUTHORIZED' value64='5'/>
<enum name='CSSM_TP_CERTISSUE_OK' value64='1'/>
<enum name='CSSM_TP_CERTISSUE_OKWITHCERTMODS' value64='2'/>
<enum name='CSSM_TP_CERTISSUE_OKWITHSERVICEMODS' value64='3'/>
<enum name='CSSM_TP_CERTISSUE_REJECTED' value64='4'/>
<enum name='CSSM_TP_CERTISSUE_STATUS_UNKNOWN' value64='0'/>
<enum name='CSSM_TP_CERTISSUE_WILL_BE_REVOKED' value64='6'/>
<enum name='CSSM_TP_CERTNOTARIZE_NOT_AUTHORIZED' value64='5'/>
<enum name='CSSM_TP_CERTNOTARIZE_OK' value64='1'/>
<enum name='CSSM_TP_CERTNOTARIZE_OKWITHOUTFIELDS' value64='2'/>
<enum name='CSSM_TP_CERTNOTARIZE_OKWITHSERVICEMODS' value64='3'/>
<enum name='CSSM_TP_CERTNOTARIZE_REJECTED' value64='4'/>
<enum name='CSSM_TP_CERTNOTARIZE_STATUS_UNKNOWN' value64='0'/>
<enum name='CSSM_TP_CERTRECLAIM_NOMATCH' value64='2'/>
<enum name='CSSM_TP_CERTRECLAIM_NOT_AUTHORIZED' value64='4'/>
<enum name='CSSM_TP_CERTRECLAIM_OK' value64='1'/>
<enum name='CSSM_TP_CERTRECLAIM_REJECTED' value64='3'/>
<enum name='CSSM_TP_CERTRECLAIM_STATUS_UNKNOWN' value64='0'/>
<enum name='CSSM_TP_CERTVERIFY_EXPIRED' value64='5'/>
<enum name='CSSM_TP_CERTVERIFY_INVALID' value64='2'/>
<enum name='CSSM_TP_CERTVERIFY_INVALID_AUTHORITY' value64='7'/>
<enum name='CSSM_TP_CERTVERIFY_INVALID_BASIC_CONSTRAINTS' value64='13'/>
<enum name='CSSM_TP_CERTVERIFY_INVALID_CERTGROUP' value64='10'/>
<enum name='CSSM_TP_CERTVERIFY_INVALID_CERT_VALUE' value64='9'/>
<enum name='CSSM_TP_CERTVERIFY_INVALID_CRL_DIST_PT' value64='14'/>
<enum name='CSSM_TP_CERTVERIFY_INVALID_NAME_TREE' value64='15'/>
<enum name='CSSM_TP_CERTVERIFY_INVALID_POLICY' value64='11'/>
<enum name='CSSM_TP_CERTVERIFY_INVALID_POLICY_IDS' value64='12'/>
<enum name='CSSM_TP_CERTVERIFY_INVALID_SIGNATURE' value64='8'/>
<enum name='CSSM_TP_CERTVERIFY_NOT_VALID_YET' value64='6'/>
<enum name='CSSM_TP_CERTVERIFY_REVOKED' value64='3'/>
<enum name='CSSM_TP_CERTVERIFY_SUSPENDED' value64='4'/>
<enum name='CSSM_TP_CERTVERIFY_UNKNOWN' value64='0'/>
<enum name='CSSM_TP_CERTVERIFY_UNKNOWN_CRITICAL_EXT' value64='16'/>
<enum name='CSSM_TP_CERTVERIFY_VALID' value64='1'/>
<enum name='CSSM_TP_CERT_DIR_UPDATE' value64='8'/>
<enum name='CSSM_TP_CERT_NOTIFY_RENEW' value64='4'/>
<enum name='CSSM_TP_CERT_PUBLISH' value64='2'/>
<enum name='CSSM_TP_CONFIRM_ACCEPT' value64='1'/>
<enum name='CSSM_TP_CONFIRM_REJECT' value64='2'/>
<enum name='CSSM_TP_CONFIRM_STATUS_UNKNOWN' value64='0'/>
<enum name='CSSM_TP_CRLISSUE_INVALID_DOMAIN' value64='3'/>
<enum name='CSSM_TP_CRLISSUE_NOT_AUTHORIZED' value64='6'/>
<enum name='CSSM_TP_CRLISSUE_NOT_CURRENT' value64='2'/>
<enum name='CSSM_TP_CRLISSUE_OK' value64='1'/>
<enum name='CSSM_TP_CRLISSUE_REJECTED' value64='5'/>
<enum name='CSSM_TP_CRLISSUE_STATUS_UNKNOWN' value64='0'/>
<enum name='CSSM_TP_CRLISSUE_UNKNOWN_IDENTIFIER' value64='4'/>
<enum name='CSSM_TP_CRL_DISTRIBUTE' value64='16'/>
<enum name='CSSM_TP_FORM_TYPE_GENERIC' value64='0'/>
<enum name='CSSM_TP_FORM_TYPE_REGISTRATION' value64='1'/>
<enum name='CSSM_TP_KEY_ARCHIVE' value64='1'/>
<enum name='CSSM_TP_PRIVATE_ERROR' value64='-2147408896'/>
<enum name='CSSM_TP_STOP_ON_FIRST_FAIL' value64='3'/>
<enum name='CSSM_TP_STOP_ON_FIRST_PASS' value64='2'/>
<enum name='CSSM_TP_STOP_ON_NONE' value64='1'/>
<enum name='CSSM_TP_STOP_ON_POLICY' value64='0'/>
<enum name='CSSM_TRUE' value64='1'/>
<enum name='CSSM_USEE_AUTHENTICATION' value64='6'/>
<enum name='CSSM_USEE_DOMESTIC' value64='1'/>
<enum name='CSSM_USEE_FINANCIAL' value64='2'/>
<enum name='CSSM_USEE_INSURANCE' value64='9'/>
<enum name='CSSM_USEE_KEYEXCH' value64='7'/>
<enum name='CSSM_USEE_KRENT' value64='4'/>
<enum name='CSSM_USEE_KRLE' value64='3'/>
<enum name='CSSM_USEE_LAST' value64='255'/>
<enum name='CSSM_USEE_MEDICAL' value64='8'/>
<enum name='CSSM_USEE_NONE' value64='0'/>
<enum name='CSSM_USEE_SSL' value64='5'/>
<enum name='CSSM_USEE_WEAK' value64='10'/>
<enum name='CSSM_VALUE_NOT_AVAILABLE' value64='-1'/>
<enum name='CSSM_WORDID_A' value64='2'/>
<enum name='CSSM_WORDID_ACL' value64='3'/>
<enum name='CSSM_WORDID_ALPHA' value64='4'/>
<enum name='CSSM_WORDID_ASYMMETRIC_KEY' value64='65547'/>
<enum name='CSSM_WORDID_B' value64='5'/>
<enum name='CSSM_WORDID_BER' value64='6'/>
<enum name='CSSM_WORDID_BINARY' value64='7'/>
<enum name='CSSM_WORDID_BIOMETRIC' value64='8'/>
<enum name='CSSM_WORDID_C' value64='9'/>
<enum name='CSSM_WORDID_CANCELED' value64='10'/>
<enum name='CSSM_WORDID_CERT' value64='11'/>
<enum name='CSSM_WORDID_COMMENT' value64='12'/>
<enum name='CSSM_WORDID_CRL' value64='13'/>
<enum name='CSSM_WORDID_CUSTOM' value64='14'/>
<enum name='CSSM_WORDID_D' value64='15'/>
<enum name='CSSM_WORDID_DATE' value64='16'/>
<enum name='CSSM_WORDID_DBS_CREATE' value64='22'/>
<enum name='CSSM_WORDID_DBS_DELETE' value64='23'/>
<enum name='CSSM_WORDID_DB_DELETE' value64='17'/>
<enum name='CSSM_WORDID_DB_EXEC_STORED_QUERY' value64='18'/>
<enum name='CSSM_WORDID_DB_INSERT' value64='19'/>
<enum name='CSSM_WORDID_DB_MODIFY' value64='20'/>
<enum name='CSSM_WORDID_DB_READ' value64='21'/>
<enum name='CSSM_WORDID_DECRYPT' value64='24'/>
<enum name='CSSM_WORDID_DELETE' value64='25'/>
<enum name='CSSM_WORDID_DELTA_CRL' value64='26'/>
<enum name='CSSM_WORDID_DER' value64='27'/>
<enum name='CSSM_WORDID_DERIVE' value64='28'/>
<enum name='CSSM_WORDID_DISPLAY' value64='29'/>
<enum name='CSSM_WORDID_DO' value64='30'/>
<enum name='CSSM_WORDID_DSA' value64='31'/>
<enum name='CSSM_WORDID_DSA_SHA1' value64='32'/>
<enum name='CSSM_WORDID_E' value64='33'/>
<enum name='CSSM_WORDID_ELGAMAL' value64='34'/>
<enum name='CSSM_WORDID_ENCRYPT' value64='35'/>
<enum name='CSSM_WORDID_ENTRY' value64='36'/>
<enum name='CSSM_WORDID_EXPORT_CLEAR' value64='37'/>
<enum name='CSSM_WORDID_EXPORT_WRAPPED' value64='38'/>
<enum name='CSSM_WORDID_G' value64='39'/>
<enum name='CSSM_WORDID_GE' value64='40'/>
<enum name='CSSM_WORDID_GENKEY' value64='41'/>
<enum name='CSSM_WORDID_HASH' value64='42'/>
<enum name='CSSM_WORDID_HASHED_PASSWORD' value64='43'/>
<enum name='CSSM_WORDID_HASHED_SUBJECT' value64='44'/>
<enum name='CSSM_WORDID_HAVAL' value64='45'/>
<enum name='CSSM_WORDID_IBCHASH' value64='46'/>
<enum name='CSSM_WORDID_IMPORT_CLEAR' value64='47'/>
<enum name='CSSM_WORDID_IMPORT_WRAPPED' value64='48'/>
<enum name='CSSM_WORDID_INTEL' value64='49'/>
<enum name='CSSM_WORDID_ISSUER' value64='50'/>
<enum name='CSSM_WORDID_ISSUER_INFO' value64='51'/>
<enum name='CSSM_WORDID_KEA' value64='53'/>
<enum name='CSSM_WORDID_KEY' value64='65543'/>
<enum name='CSSM_WORDID_KEYBAG_KEY' value64='65549'/>
<enum name='CSSM_WORDID_KEYCHAIN_CHANGE_LOCK' value64='65538'/>
<enum name='CSSM_WORDID_KEYCHAIN_LOCK' value64='65537'/>
<enum name='CSSM_WORDID_KEYCHAIN_PROMPT' value64='65536'/>
<enum name='CSSM_WORDID_KEYHOLDER' value64='54'/>
<enum name='CSSM_WORDID_K_OF_N' value64='52'/>
<enum name='CSSM_WORDID_L' value64='55'/>
<enum name='CSSM_WORDID_LE' value64='56'/>
<enum name='CSSM_WORDID_LOGIN' value64='57'/>
<enum name='CSSM_WORDID_LOGIN_NAME' value64='58'/>
<enum name='CSSM_WORDID_MAC' value64='59'/>
<enum name='CSSM_WORDID_MD2' value64='60'/>
<enum name='CSSM_WORDID_MD2WITHRSA' value64='61'/>
<enum name='CSSM_WORDID_MD4' value64='62'/>
<enum name='CSSM_WORDID_MD5' value64='63'/>
<enum name='CSSM_WORDID_MD5WITHRSA' value64='64'/>
<enum name='CSSM_WORDID_N' value64='65'/>
<enum name='CSSM_WORDID_NAME' value64='66'/>
<enum name='CSSM_WORDID_NDR' value64='67'/>
<enum name='CSSM_WORDID_NHASH' value64='68'/>
<enum name='CSSM_WORDID_NOT_AFTER' value64='69'/>
<enum name='CSSM_WORDID_NOT_BEFORE' value64='70'/>
<enum name='CSSM_WORDID_NULL' value64='71'/>
<enum name='CSSM_WORDID_NUMERIC' value64='72'/>
<enum name='CSSM_WORDID_OBJECT_HASH' value64='73'/>
<enum name='CSSM_WORDID_ONE_TIME' value64='74'/>
<enum name='CSSM_WORDID_ONLINE' value64='75'/>
<enum name='CSSM_WORDID_OWNER' value64='76'/>
<enum name='CSSM_WORDID_P' value64='77'/>
<enum name='CSSM_WORDID_PAM_NAME' value64='78'/>
<enum name='CSSM_WORDID_PARTITION' value64='65548'/>
<enum name='CSSM_WORDID_PASSWORD' value64='79'/>
<enum name='CSSM_WORDID_PGP' value64='80'/>
<enum name='CSSM_WORDID_PIN' value64='65544'/>
<enum name='CSSM_WORDID_PREAUTH' value64='65545'/>
<enum name='CSSM_WORDID_PREAUTH_SOURCE' value64='65546'/>
<enum name='CSSM_WORDID_PREFIX' value64='81'/>
<enum name='CSSM_WORDID_PRIVATE_KEY' value64='82'/>
<enum name='CSSM_WORDID_PROCESS' value64='65539'/>
<enum name='CSSM_WORDID_PROMPTED_BIOMETRIC' value64='83'/>
<enum name='CSSM_WORDID_PROMPTED_PASSWORD' value64='84'/>
<enum name='CSSM_WORDID_PROPAGATE' value64='85'/>
<enum name='CSSM_WORDID_PROTECTED_BIOMETRIC' value64='86'/>
<enum name='CSSM_WORDID_PROTECTED_PASSWORD' value64='87'/>
<enum name='CSSM_WORDID_PROTECTED_PIN' value64='88'/>
<enum name='CSSM_WORDID_PUBLIC_KEY' value64='89'/>
<enum name='CSSM_WORDID_PUBLIC_KEY_FROM_CERT' value64='90'/>
<enum name='CSSM_WORDID_Q' value64='91'/>
<enum name='CSSM_WORDID_RANGE' value64='92'/>
<enum name='CSSM_WORDID_REVAL' value64='93'/>
<enum name='CSSM_WORDID_RIPEMAC' value64='94'/>
<enum name='CSSM_WORDID_RIPEMD' value64='95'/>
<enum name='CSSM_WORDID_RIPEMD160' value64='96'/>
<enum name='CSSM_WORDID_RSA' value64='97'/>
<enum name='CSSM_WORDID_RSA_ISO9796' value64='98'/>
<enum name='CSSM_WORDID_RSA_PKCS' value64='99'/>
<enum name='CSSM_WORDID_RSA_PKCS1' value64='102'/>
<enum name='CSSM_WORDID_RSA_PKCS1_MD5' value64='103'/>
<enum name='CSSM_WORDID_RSA_PKCS1_SHA1' value64='104'/>
<enum name='CSSM_WORDID_RSA_PKCS1_SIG' value64='105'/>
<enum name='CSSM_WORDID_RSA_PKCS_MD5' value64='100'/>
<enum name='CSSM_WORDID_RSA_PKCS_SHA1' value64='101'/>
<enum name='CSSM_WORDID_RSA_RAW' value64='106'/>
<enum name='CSSM_WORDID_SDSIV1' value64='107'/>
<enum name='CSSM_WORDID_SEQUENCE' value64='108'/>
<enum name='CSSM_WORDID_SET' value64='109'/>
<enum name='CSSM_WORDID_SEXPR' value64='110'/>
<enum name='CSSM_WORDID_SHA1' value64='111'/>
<enum name='CSSM_WORDID_SHA1WITHDSA' value64='112'/>
<enum name='CSSM_WORDID_SHA1WITHECDSA' value64='113'/>
<enum name='CSSM_WORDID_SHA1WITHRSA' value64='114'/>
<enum name='CSSM_WORDID_SIGN' value64='115'/>
<enum name='CSSM_WORDID_SIGNATURE' value64='116'/>
<enum name='CSSM_WORDID_SIGNED_NONCE' value64='117'/>
<enum name='CSSM_WORDID_SIGNED_SECRET' value64='118'/>
<enum name='CSSM_WORDID_SPKI' value64='119'/>
<enum name='CSSM_WORDID_SUBJECT' value64='120'/>
<enum name='CSSM_WORDID_SUBJECT_INFO' value64='121'/>
<enum name='CSSM_WORDID_SYMMETRIC_KEY' value64='65541'/>
<enum name='CSSM_WORDID_SYSTEM' value64='65542'/>
<enum name='CSSM_WORDID_TAG' value64='122'/>
<enum name='CSSM_WORDID_THRESHOLD' value64='123'/>
<enum name='CSSM_WORDID_TIME' value64='124'/>
<enum name='CSSM_WORDID_URI' value64='125'/>
<enum name='CSSM_WORDID_VENDOR_END' value64='2147418112'/>
<enum name='CSSM_WORDID_VENDOR_START' value64='65536'/>
<enum name='CSSM_WORDID_VERSION' value64='126'/>
<enum name='CSSM_WORDID_X509V1' value64='128'/>
<enum name='CSSM_WORDID_X509V2' value64='129'/>
<enum name='CSSM_WORDID_X509V3' value64='130'/>
<enum name='CSSM_WORDID_X509_ATTRIBUTE' value64='127'/>
<enum name='CSSM_WORDID_X9_ATTRIBUTE' value64='131'/>
<enum name='CSSM_WORDID__FIRST_UNUSED' value64='65550'/>
<enum name='CSSM_WORDID__NLU_' value64='0'/>
<enum name='CSSM_WORDID__RESERVED_1' value64='65540'/>
<enum name='CSSM_WORDID__STAR_' value64='1'/>
<enum name='CSSM_WORDID__UNK_' value64='-1'/>
<enum name='CSSM_X509_DATAFORMAT_ENCODED' value64='0'/>
<enum name='CSSM_X509_DATAFORMAT_PAIR' value64='2'/>
<enum name='CSSM_X509_DATAFORMAT_PARSED' value64='1'/>
<enum name='CSSM_X509_OPTION_NOT_PRESENT' value64='0'/>
<enum name='CSSM_X509_OPTION_PRESENT' value64='1'/>
<enum name='DT_AuthorityInfoAccess' value64='14'/>
<enum name='DT_AuthorityKeyID' value64='0'/>
<enum name='DT_BasicConstraints' value64='6'/>
<enum name='DT_CertPolicies' value64='7'/>
<enum name='DT_CrlDistributionPoints' value64='12'/>
<enum name='DT_CrlNumber' value64='9'/>
<enum name='DT_CrlReason' value64='11'/>
<enum name='DT_DeltaCrl' value64='10'/>
<enum name='DT_ExtendedKeyUsage' value64='5'/>
<enum name='DT_InhibitAnyPolicy' value64='20'/>
<enum name='DT_IssuerAltName' value64='4'/>
<enum name='DT_IssuingDistributionPoint' value64='13'/>
<enum name='DT_KeyUsage' value64='2'/>
<enum name='DT_NameConstraints' value64='17'/>
<enum name='DT_NetscapeCertType' value64='8'/>
<enum name='DT_Other' value64='15'/>
<enum name='DT_PolicyConstraints' value64='19'/>
<enum name='DT_PolicyMappings' value64='18'/>
<enum name='DT_QC_Statements' value64='16'/>
<enum name='DT_SubjectAltName' value64='3'/>
<enum name='DT_SubjectKeyID' value64='1'/>
<enum name='GNT_DNSName' value64='2'/>
<enum name='GNT_DirectoryName' value64='4'/>
<enum name='GNT_EdiPartyName' value64='5'/>
<enum name='GNT_IPAddress' value64='7'/>
<enum name='GNT_OtherName' value64='0'/>
<enum name='GNT_RFC822Name' value64='1'/>
<enum name='GNT_RegisteredID' value64='8'/>
<enum name='GNT_URI' value64='6'/>
<enum name='GNT_X400Address' value64='3'/>
<enum name='GOOGLE_BASE_OID' value64='121'/>
<enum name='GOOGLE_EMBEDDED_SCT_OID' value64='2'/>
<enum name='GOOGLE_OCSP_SCT_OID' value64='5'/>
<enum name='INTEL' value64='77'/>
<enum name='INTEL_CDSASECURITY' value64='2'/>
<enum name='INTEL_CDSASECURITY_LENGTH' value64='8'/>
<enum name='INTEL_CERT_AND_PRIVATE_KEY_2_0' value64='1'/>
<enum name='INTEL_CERT_AND_PRIVATE_KEY_2_0_LENGTH' value64='11'/>
<enum name='INTEL_LENGTH' value64='7'/>
<enum name='INTEL_SEC_ALGS' value64='5'/>
<enum name='INTEL_SEC_ALGS_LENGTH' value64='10'/>
<enum name='INTEL_SEC_FORMATS' value64='1'/>
<enum name='INTEL_SEC_FORMATS_LENGTH' value64='9'/>
<enum name='INTEL_SEC_OBJECT_BUNDLE' value64='4'/>
<enum name='INTEL_SEC_OBJECT_BUNDLE_LENGTH' value64='10'/>
<enum name='INTEL_X509V2_CRL_R08' value64='1'/>
<enum name='INTEL_X509V2_CRL_R08_LENGTH' value64='11'/>
<enum name='INTEL_X509V3_CERT_PRIVATE_EXTENSIONS' value64='50'/>
<enum name='INTEL_X509V3_CERT_PRIVATE_EXTENSIONS_LENGTH' value64='12'/>
<enum name='INTEL_X509V3_CERT_R08' value64='1'/>
<enum name='INTEL_X509V3_CERT_R08_LENGTH' value64='11'/>
<enum name='INTEL_X509V3_SIGN_R08' value64='2'/>
<enum name='INTEL_X509V3_SIGN_R08_LENGTH' value64='11'/>
<enum name='INTEL_X509_C_DATATYPE' value64='1'/>
<enum name='INTEL_X509_LDAPSTRING_DATATYPE' value64='2'/>
<enum name='MDS_CDSAATTR_ACLSUBJECTTYPES' value64='1073741890'/>
<enum name='MDS_CDSAATTR_ALG_TYPE' value64='1073741850'/>
<enum name='MDS_CDSAATTR_ATTRIBUTE_TYPE' value64='1073741852'/>
<enum name='MDS_CDSAATTR_ATTRIBUTE_VALUE' value64='1073741853'/>
<enum name='MDS_CDSAATTR_AUTHORITY_REQUEST_TYPE' value64='1073741898'/>
<enum name='MDS_CDSAATTR_AUTHTAGS' value64='1073741891'/>
<enum name='MDS_CDSAATTR_BUNDLE_TYPEFORMAT' value64='1073741883'/>
<enum name='MDS_CDSAATTR_CDSAVERSION' value64='1073741829'/>
<enum name='MDS_CDSAATTR_CERT_CLASSNAME' value64='1073741884'/>
<enum name='MDS_CDSAATTR_CERT_FIELDNAMES' value64='1073741882'/>
<enum name='MDS_CDSAATTR_CERT_TYPEFORMAT' value64='1073741880'/>
<enum name='MDS_CDSAATTR_CONJUNCTIVE_OPS' value64='1073741877'/>
<enum name='MDS_CDSAATTR_CONTEXT_TYPE' value64='1073741849'/>
<enum name='MDS_CDSAATTR_CRL_TYPEFORMAT' value64='1073741881'/>
<enum name='MDS_CDSAATTR_CSP_CUSTOMFLAGS' value64='1073741847'/>
<enum name='MDS_CDSAATTR_CSP_FLAGS' value64='1073741846'/>
<enum name='MDS_CDSAATTR_CSP_TYPE' value64='1073741845'/>
<enum name='MDS_CDSAATTR_DEFAULT_TEMPLATE_TYPE' value64='1073741896'/>
<enum name='MDS_CDSAATTR_DESC' value64='1073741832'/>
<enum name='MDS_CDSAATTR_DL_TYPE' value64='1073741875'/>
<enum name='MDS_CDSAATTR_DYNAMIC_FLAG' value64='1073741842'/>
<enum name='MDS_CDSAATTR_EMMSPECVERSION' value64='1073741835'/>
<enum name='MDS_CDSAATTR_EMM_TYPE' value64='1073741838'/>
<enum name='MDS_CDSAATTR_EMM_VENDOR' value64='1073741837'/>
<enum name='MDS_CDSAATTR_EMM_VERSION' value64='1073741836'/>
<enum name='MDS_CDSAATTR_GROUP_ID' value64='1073741851'/>
<enum name='MDS_CDSAATTR_INTERFACE_GUID' value64='1073741833'/>
<enum name='MDS_CDSAATTR_MANIFEST' value64='1073741826'/>
<enum name='MDS_CDSAATTR_MODULE_ID' value64='1073741825'/>
<enum name='MDS_CDSAATTR_MODULE_NAME' value64='1073741827'/>
<enum name='MDS_CDSAATTR_MULTITHREAD_FLAG' value64='1073741843'/>
<enum name='MDS_CDSAATTR_NATIVE_SERVICES' value64='1073741841'/>
<enum name='MDS_CDSAATTR_OID' value64='1073741894'/>
<enum name='MDS_CDSAATTR_PATH' value64='1073741828'/>
<enum name='MDS_CDSAATTR_POLICY_STMT' value64='1073741834'/>
<enum name='MDS_CDSAATTR_PRODUCT_CUSTOMFLAGS' value64='1073741858'/>
<enum name='MDS_CDSAATTR_PRODUCT_DESC' value64='1073741854'/>
<enum name='MDS_CDSAATTR_PRODUCT_FLAGS' value64='1073741857'/>
<enum name='MDS_CDSAATTR_PRODUCT_VENDOR' value64='1073741855'/>
<enum name='MDS_CDSAATTR_PRODUCT_VERSION' value64='1073741856'/>
<enum name='MDS_CDSAATTR_PROTOCOL' value64='1073741879'/>
<enum name='MDS_CDSAATTR_QUERY_LIMITS' value64='1073741876'/>
<enum name='MDS_CDSAATTR_READER_CUSTOMFLAGS' value64='1073741866'/>
<enum name='MDS_CDSAATTR_READER_DESC' value64='1073741861'/>
<enum name='MDS_CDSAATTR_READER_FLAGS' value64='1073741865'/>
<enum name='MDS_CDSAATTR_READER_FWVERSION' value64='1073741864'/>
<enum name='MDS_CDSAATTR_READER_SERIALNUMBER' value64='1073741867'/>
<enum name='MDS_CDSAATTR_READER_VENDOR' value64='1073741862'/>
<enum name='MDS_CDSAATTR_READER_VERSION' value64='1073741863'/>
<enum name='MDS_CDSAATTR_RELATIONAL_OPS' value64='1073741878'/>
<enum name='MDS_CDSAATTR_REQCREDENTIALS' value64='1073741888'/>
<enum name='MDS_CDSAATTR_RETRIEVALMODE' value64='1073741893'/>
<enum name='MDS_CDSAATTR_ROOTCERT' value64='1073741885'/>
<enum name='MDS_CDSAATTR_ROOTCERT_TYPEFORMAT' value64='1073741886'/>
<enum name='MDS_CDSAATTR_SAMPLETYPES' value64='1073741889'/>
<enum name='MDS_CDSAATTR_SC_CUSTOMFLAGS' value64='1073741873'/>
<enum name='MDS_CDSAATTR_SC_DESC' value64='1073741868'/>
<enum name='MDS_CDSAATTR_SC_FLAGS' value64='1073741872'/>
<enum name='MDS_CDSAATTR_SC_FWVERSION' value64='1073741871'/>
<enum name='MDS_CDSAATTR_SC_SERIALNUMBER' value64='1073741874'/>
<enum name='MDS_CDSAATTR_SC_VENDOR' value64='1073741869'/>
<enum name='MDS_CDSAATTR_SC_VERSION' value64='1073741870'/>
<enum name='MDS_CDSAATTR_SERVICE_MASK' value64='1073741844'/>
<enum name='MDS_CDSAATTR_SERVICE_TYPE' value64='1073741840'/>
<enum name='MDS_CDSAATTR_SSID' value64='1073741839'/>
<enum name='MDS_CDSAATTR_STANDARD_DESC' value64='1073741859'/>
<enum name='MDS_CDSAATTR_STANDARD_VERSION' value64='1073741860'/>
<enum name='MDS_CDSAATTR_TEMPLATE_FIELD_NAMES' value64='1073741897'/>
<enum name='MDS_CDSAATTR_USEETAG' value64='1073741892'/>
<enum name='MDS_CDSAATTR_USEE_TAGS' value64='1073741848'/>
<enum name='MDS_CDSAATTR_VALUE' value64='1073741887'/>
<enum name='MDS_CDSAATTR_VENDOR' value64='1073741830'/>
<enum name='MDS_CDSAATTR_XLATIONTYPEFORMAT' value64='1073741895'/>
<enum name='MDS_CDSADIR_AC_PRIMARY_NUM_ATTRIBUTES' value64='6'/>
<enum name='MDS_CDSADIR_AC_PRIMARY_RECORDTYPE' value64='1073741841'/>
<enum name='MDS_CDSADIR_CL_ENCAPSULATED_PRODUCT_NUM_ATTRIBUTES' value64='8'/>
<enum name='MDS_CDSADIR_CL_ENCAPSULATED_PRODUCT_RECORDTYPE' value64='1073741836'/>
<enum name='MDS_CDSADIR_CL_PRIMARY_NUM_ATTRIBUTES' value64='13'/>
<enum name='MDS_CDSADIR_CL_PRIMARY_RECORDTYPE' value64='1073741835'/>
<enum name='MDS_CDSADIR_COMMON_NUM_ATTRIBUTES' value64='9'/>
<enum name='MDS_CDSADIR_COMMON_RECORDTYPE' value64='1073741828'/>
<enum name='MDS_CDSADIR_CSP_CAPABILITY_NUM_ATTRIBUTES' value64='9'/>
<enum name='MDS_CDSADIR_CSP_CAPABILITY_RECORDTYPE' value64='1073741830'/>
<enum name='MDS_CDSADIR_CSP_ENCAPSULATED_PRODUCT_NUM_ATTRIBUTES' value64='16'/>
<enum name='MDS_CDSADIR_CSP_ENCAPSULATED_PRODUCT_RECORDTYPE' value64='1073741831'/>
<enum name='MDS_CDSADIR_CSP_PRIMARY_NUM_ATTRIBUTES' value64='13'/>
<enum name='MDS_CDSADIR_CSP_PRIMARY_RECORDTYPE' value64='1073741829'/>
<enum name='MDS_CDSADIR_CSP_SC_INFO_NUM_ATTRIBUTES' value64='9'/>
<enum name='MDS_CDSADIR_CSP_SC_INFO_RECORDTYPE' value64='1073741832'/>
<enum name='MDS_CDSADIR_CSSM_NUM_ATTRIBUTES' value64='4'/>
<enum name='MDS_CDSADIR_CSSM_RECORDTYPE' value64='1073741825'/>
<enum name='MDS_CDSADIR_DL_ENCAPSULATED_PRODUCT_NUM_ATTRIBUTES' value64='10'/>
<enum name='MDS_CDSADIR_DL_ENCAPSULATED_PRODUCT_RECORDTYPE' value64='1073741834'/>
<enum name='MDS_CDSADIR_DL_PRIMARY_NUM_ATTRIBUTES' value64='13'/>
<enum name='MDS_CDSADIR_DL_PRIMARY_RECORDTYPE' value64='1073741833'/>
<enum name='MDS_CDSADIR_EMM_NUM_ATTRIBUTES' value64='11'/>
<enum name='MDS_CDSADIR_EMM_PRIMARY_NUM_ATTRIBUTES' value64='9'/>
<enum name='MDS_CDSADIR_EMM_PRIMARY_RECORDTYPE' value64='1073741840'/>
<enum name='MDS_CDSADIR_EMM_RECORDTYPE' value64='1073741827'/>
<enum name='MDS_CDSADIR_KRMM_RECORDTYPE' value64='1073741826'/>
<enum name='MDS_CDSADIR_KR_PRIMARY_RECORDTYPE' value64='1073741842'/>
<enum name='MDS_CDSADIR_MDS_SCHEMA_ATTRIBUTES' value64='1073741844'/>
<enum name='MDS_CDSADIR_MDS_SCHEMA_INDEXES' value64='1073741845'/>
<enum name='MDS_CDSADIR_MDS_SCHEMA_RELATIONS' value64='1073741843'/>
<enum name='MDS_CDSADIR_NUM_RELATIONS' value64='19'/>
<enum name='MDS_CDSADIR_SCHEMA_ATTRIBUTES_NUM_ATTRIBUTES' value64='6'/>
<enum name='MDS_CDSADIR_SCHEMA_INDEXES_NUM_ATTRIBUTES' value64='5'/>
<enum name='MDS_CDSADIR_SCHEMA_RELATONS_NUM_ATTRIBUTES' value64='2'/>
<enum name='MDS_CDSADIR_TP_ENCAPSULATED_PRODUCT_NUM_ATTRIBUTES' value64='14'/>
<enum name='MDS_CDSADIR_TP_ENCAPSULATED_PRODUCT_RECORDTYPE' value64='1073741839'/>
<enum name='MDS_CDSADIR_TP_OIDS_NUM_ATTRIBUTES' value64='4'/>
<enum name='MDS_CDSADIR_TP_OIDS_RECORDTYPE' value64='1073741838'/>
<enum name='MDS_CDSADIR_TP_PRIMARY_NUM_ATTRIBUTES' value64='10'/>
<enum name='MDS_CDSADIR_TP_PRIMARY_RECORDTYPE' value64='1073741837'/>
<enum name='MDS_CDSA_SCHEMA_START' value64='1073741824'/>
<enum name='MDS_OBJECT_NUM_ATTRIBUTES' value64='4'/>
<enum name='MDS_OBJECT_NUM_RELATIONS' value64='1'/>
<enum name='MDS_OBJECT_RECORDTYPE' value64='1073741824'/>
<enum name='NETSCAPE_BASE_OID' value64='66'/>
<enum name='NETSCAPE_BASE_OID_LEN' value64='7'/>
<enum name='NETSCAPE_CERT_EXTEN' value64='1'/>
<enum name='NETSCAPE_CERT_EXTEN_LENGTH' value64='8'/>
<enum name='NETSCAPE_CERT_POLICY' value64='4'/>
<enum name='NETSCAPE_CERT_POLICY_LENGTH' value64='8'/>
<enum name='OID_AD' value64='48'/>
<enum name='OID_AD_LENGTH' value64='7'/>
<enum name='OID_AD_OCSP' value64='1'/>
<enum name='OID_AD_OCSP_LENGTH' value64='8'/>
<enum name='OID_ANSI_X9_42' value64='2'/>
<enum name='OID_ANSI_X9_42_LEN' value64='6'/>
<enum name='OID_ANSI_X9_42_NAMED_SCHEME' value64='4'/>
<enum name='OID_ANSI_X9_42_NAMED_SCHEME_LEN' value64='7'/>
<enum name='OID_ANSI_X9_42_SCHEME' value64='3'/>
<enum name='OID_ANSI_X9_42_SCHEME_LEN' value64='7'/>
<enum name='OID_ANSI_X9_62' value64='61'/>
<enum name='OID_ANSI_X9_62_C_TWO_CURVE' value64='0'/>
<enum name='OID_ANSI_X9_62_ELL_CURVE' value64='3'/>
<enum name='OID_ANSI_X9_62_ELL_CURVE_LEN' value64='6'/>
<enum name='OID_ANSI_X9_62_FIELD_TYPE' value64='1'/>
<enum name='OID_ANSI_X9_62_LEN' value64='5'/>
<enum name='OID_ANSI_X9_62_PRIME_CURVE' value64='1'/>
<enum name='OID_ANSI_X9_62_PUBKEY_TYPE' value64='2'/>
<enum name='OID_ANSI_X9_62_SIG_TYPE' value64='4'/>
<enum name='OID_ANSI_X9_62_SIG_TYPE_LEN' value64='6'/>
<enum name='OID_ATTR_TYPE' value64='4'/>
<enum name='OID_ATTR_TYPE_LENGTH' value64='2'/>
<enum name='OID_CERTICOM' value64='4'/>
<enum name='OID_CERTICOM_ELL_CURVE' value64='0'/>
<enum name='OID_CERTICOM_ELL_CURVE_LEN' value64='4'/>
<enum name='OID_CERTICOM_LEN' value64='3'/>
<enum name='OID_DOD' value64='6'/>
<enum name='OID_DS' value64='85'/>
<enum name='OID_DS_LENGTH' value64='1'/>
<enum name='OID_ETSI' value64='0'/>
<enum name='OID_ETSI_LENGTH' value64='2'/>
<enum name='OID_ETSI_QCS' value64='1'/>
<enum name='OID_ETSI_QCS_LENGTH' value64='5'/>
<enum name='OID_EXTENSION' value64='29'/>
<enum name='OID_EXTENSION_LENGTH' value64='2'/>
<enum name='OID_GOSIP' value64='5'/>
<enum name='OID_ISO_CCITT_DIR_SERVICE' value64='85'/>
<enum name='OID_ISO_IDENTIFIED_ORG' value64='43'/>
<enum name='OID_ISO_MEMBER' value64='42'/>
<enum name='OID_ISO_MEMBER_LENGTH' value64='1'/>
<enum name='OID_ISO_STANDARD' value64='40'/>
<enum name='OID_ITU_RFCDATA' value64='9'/>
<enum name='OID_ITU_RFCDATA_2342' value64='134'/>
<enum name='OID_ITU_RFCDATA_2342_LENGTH' value64='3'/>
<enum name='OID_ITU_RFCDATA_2342_UCL' value64='140'/>
<enum name='OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT' value64='228'/>
<enum name='OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_ATTRIBUTES' value64='129'/>
<enum name='OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_ATTRIBUTES_DOMAINCOMPONENT' value64='153'/>
<enum name='OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_ATTRIBUTES_DOMAINCOMPONENT_LENGTH' value64='10'/>
<enum name='OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_ATTRIBUTES_LENGTH' value64='9'/>
<enum name='OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_ATTRIBUTES_USERID' value64='129'/>
<enum name='OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_ATTRIBUTES_USERID_LENGTH' value64='10'/>
<enum name='OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_LENGTH' value64='8'/>
<enum name='OID_ITU_RFCDATA_2342_UCL_LENGTH' value64='7'/>
<enum name='OID_ITU_RFCDATA_MEMBER_LENGTH' value64='1'/>
<enum name='OID_KERBv5' value64='2'/>
<enum name='OID_KERBv5_LEN' value64='5'/>
<enum name='OID_KERBv5_PKINIT' value64='3'/>
<enum name='OID_KERBv5_PKINIT_LEN' value64='6'/>
<enum name='OID_KP' value64='3'/>
<enum name='OID_KP_LENGTH' value64='7'/>
<enum name='OID_NIST_HASHALG' value64='2'/>
<enum name='OID_NIST_HASHALG_LENGTH' value64='8'/>
<enum name='OID_OIW' value64='14'/>
<enum name='OID_OIW_ALGORITHM' value64='2'/>
<enum name='OID_OIW_ALGORITHM_LENGTH' value64='4'/>
<enum name='OID_OIW_LENGTH' value64='2'/>
<enum name='OID_OIW_SECSIG' value64='3'/>
<enum name='OID_OIW_SECSIG_LENGTH' value64='3'/>
<enum name='OID_OSINET' value64='4'/>
<enum name='OID_OTHER_NAME' value64='8'/>
<enum name='OID_OTHER_NAME_LENGTH' value64='7'/>
<enum name='OID_PDA' value64='9'/>
<enum name='OID_PDA_LENGTH' value64='7'/>
<enum name='OID_PE' value64='1'/>
<enum name='OID_PE_LENGTH' value64='7'/>
<enum name='OID_PKCS' value64='1'/>
<enum name='OID_PKCS_1' value64='1'/>
<enum name='OID_PKCS_10' value64='10'/>
<enum name='OID_PKCS_11' value64='11'/>
<enum name='OID_PKCS_11_LENGTH' value64='8'/>
<enum name='OID_PKCS_12' value64='12'/>
<enum name='OID_PKCS_12_LENGTH' value64='8'/>
<enum name='OID_PKCS_1_LENGTH' value64='8'/>
<enum name='OID_PKCS_2' value64='2'/>
<enum name='OID_PKCS_3' value64='3'/>
<enum name='OID_PKCS_3_LENGTH' value64='8'/>
<enum name='OID_PKCS_4' value64='4'/>
<enum name='OID_PKCS_5' value64='5'/>
<enum name='OID_PKCS_5_LENGTH' value64='8'/>
<enum name='OID_PKCS_6' value64='6'/>
<enum name='OID_PKCS_7' value64='7'/>
<enum name='OID_PKCS_7_LENGTH' value64='8'/>
<enum name='OID_PKCS_8' value64='8'/>
<enum name='OID_PKCS_9' value64='9'/>
<enum name='OID_PKCS_9_LENGTH' value64='8'/>
<enum name='OID_PKCS_LENGTH' value64='7'/>
<enum name='OID_PKIX' value64='7'/>
<enum name='OID_PKIX_LENGTH' value64='6'/>
<enum name='OID_QCS' value64='11'/>
<enum name='OID_QCS_LENGTH' value64='7'/>
<enum name='OID_QT' value64='2'/>
<enum name='OID_QT_LENGTH' value64='7'/>
<enum name='OID_RSA' value64='13'/>
<enum name='OID_RSA_ENCRYPT' value64='3'/>
<enum name='OID_RSA_ENCRYPT_LENGTH' value64='7'/>
<enum name='OID_RSA_HASH' value64='2'/>
<enum name='OID_RSA_HASH_LENGTH' value64='7'/>
<enum name='OID_RSA_LENGTH' value64='6'/>
<enum name='OID_US' value64='72'/>
<enum name='OID_US_LENGTH' value64='3'/>
<enum name='SEC_ASN1_ANY' value64='1024'/>
<enum name='SEC_ASN1_ANY_CONTENTS' value64='66560'/>
<enum name='SEC_ASN1_APPLICATION' value64='64'/>
<enum name='SEC_ASN1_BIT_STRING' value64='3'/>
<enum name='SEC_ASN1_BMP_STRING' value64='30'/>
<enum name='SEC_ASN1_BOOLEAN' value64='1'/>
<enum name='SEC_ASN1_CHOICE' value64='1048576'/>
<enum name='SEC_ASN1_CLASS_MASK' value64='192'/>
<enum name='SEC_ASN1_CONSTRUCTED' value64='32'/>
<enum name='SEC_ASN1_CONTEXT_SPECIFIC' value64='128'/>
<enum name='SEC_ASN1_DYNAMIC' value64='16384'/>
<enum name='SEC_ASN1_EMBEDDED_PDV' value64='11'/>
<enum name='SEC_ASN1_ENUMERATED' value64='10'/>
<enum name='SEC_ASN1_EXPLICIT' value64='512'/>
<enum name='SEC_ASN1_GENERALIZED_TIME' value64='24'/>
<enum name='SEC_ASN1_GENERAL_STRING' value64='27'/>
<enum name='SEC_ASN1_GRAPHIC_STRING' value64='25'/>
<enum name='SEC_ASN1_GROUP' value64='8192'/>
<enum name='SEC_ASN1_HIGH_TAG_NUMBER' value64='31'/>
<enum name='SEC_ASN1_IA5_STRING' value64='22'/>
<enum name='SEC_ASN1_INLINE' value64='2048'/>
<enum name='SEC_ASN1_INNER' value64='65536'/>
<enum name='SEC_ASN1_INTEGER' value64='2'/>
<enum name='SEC_ASN1_METHOD_MASK' value64='32'/>
<enum name='SEC_ASN1_NULL' value64='5'/>
<enum name='SEC_ASN1_NUMERIC_STRING' value64='18'/>
<enum name='SEC_ASN1_OBJECT_DESCRIPTOR' value64='7'/>
<enum name='SEC_ASN1_OBJECT_ID' value64='6'/>
<enum name='SEC_ASN1_OCTET_STRING' value64='4'/>
<enum name='SEC_ASN1_OPTIONAL' value64='256'/>
<enum name='SEC_ASN1_POINTER' value64='4096'/>
<enum name='SEC_ASN1_PRIMITIVE' value64='0'/>
<enum name='SEC_ASN1_PRINTABLE_STRING' value64='19'/>
<enum name='SEC_ASN1_PRIVATE' value64='192'/>
<enum name='SEC_ASN1_REAL' value64='9'/>
<enum name='SEC_ASN1_SAVE' value64='131072'/>
<enum name='SEC_ASN1_SEQUENCE' value64='16'/>
<enum name='SEC_ASN1_SEQUENCE_OF' value64='8208'/>
<enum name='SEC_ASN1_SET' value64='17'/>
<enum name='SEC_ASN1_SET_OF' value64='8209'/>
<enum name='SEC_ASN1_SIGNED_INT' value64='8388608'/>
<enum name='SEC_ASN1_SKIP' value64='32768'/>
<enum name='SEC_ASN1_SKIP_REST' value64='524288'/>
<enum name='SEC_ASN1_T61_STRING' value64='20'/>
<enum name='SEC_ASN1_TAGNUM_MASK' value64='31'/>
<enum name='SEC_ASN1_TAG_MASK' value64='255'/>
<enum name='SEC_ASN1_TELETEX_STRING' value64='20'/>
<enum name='SEC_ASN1_UNIVERSAL' value64='0'/>
<enum name='SEC_ASN1_UNIVERSAL_STRING' value64='28'/>
<enum name='SEC_ASN1_UTC_TIME' value64='23'/>
<enum name='SEC_ASN1_UTF8_STRING' value64='12'/>
<enum name='SEC_ASN1_VIDEOTEX_STRING' value64='21'/>
<enum name='SEC_ASN1_VISIBLE_STRING' value64='26'/>
<enum name='SEC_KEYCHAIN_SETTINGS_VERS1' value64='1'/>
<enum name='SEC_KEY_IMPORT_EXPORT_PARAMS_VERSION' value64='0'/>
<enum name='SEC_OS_IPHONE' value64='0'/>
<enum name='SEC_OS_OSX' value64='1'/>
<enum name='SEC_OS_OSX_INCLUDES' value64='1'/>
<enum name='SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA' value64='17'/>
<enum name='SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA' value64='19'/>
<enum name='SSL_DHE_DSS_WITH_DES_CBC_SHA' value64='18'/>
<enum name='SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA' value64='20'/>
<enum name='SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA' value64='22'/>
<enum name='SSL_DHE_RSA_WITH_DES_CBC_SHA' value64='21'/>
<enum name='SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA' value64='11'/>
<enum name='SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA' value64='13'/>
<enum name='SSL_DH_DSS_WITH_DES_CBC_SHA' value64='12'/>
<enum name='SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA' value64='14'/>
<enum name='SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA' value64='16'/>
<enum name='SSL_DH_RSA_WITH_DES_CBC_SHA' value64='15'/>
<enum name='SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA' value64='25'/>
<enum name='SSL_DH_anon_EXPORT_WITH_RC4_40_MD5' value64='23'/>
<enum name='SSL_DH_anon_WITH_3DES_EDE_CBC_SHA' value64='27'/>
<enum name='SSL_DH_anon_WITH_DES_CBC_SHA' value64='26'/>
<enum name='SSL_DH_anon_WITH_RC4_128_MD5' value64='24'/>
<enum name='SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA' value64='29'/>
<enum name='SSL_FORTEZZA_DMS_WITH_NULL_SHA' value64='28'/>
<enum name='SSL_NO_SUCH_CIPHERSUITE' value64='65535'/>
<enum name='SSL_NULL_WITH_NULL_NULL' value64='0'/>
<enum name='SSL_RSA_EXPORT_WITH_DES40_CBC_SHA' value64='8'/>
<enum name='SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5' value64='6'/>
<enum name='SSL_RSA_EXPORT_WITH_RC4_40_MD5' value64='3'/>
<enum name='SSL_RSA_WITH_3DES_EDE_CBC_MD5' value64='65411'/>
<enum name='SSL_RSA_WITH_3DES_EDE_CBC_SHA' value64='10'/>
<enum name='SSL_RSA_WITH_DES_CBC_MD5' value64='65410'/>
<enum name='SSL_RSA_WITH_DES_CBC_SHA' value64='9'/>
<enum name='SSL_RSA_WITH_IDEA_CBC_MD5' value64='65409'/>
<enum name='SSL_RSA_WITH_IDEA_CBC_SHA' value64='7'/>
<enum name='SSL_RSA_WITH_NULL_MD5' value64='1'/>
<enum name='SSL_RSA_WITH_NULL_SHA' value64='2'/>
<enum name='SSL_RSA_WITH_RC2_CBC_MD5' value64='65408'/>
<enum name='SSL_RSA_WITH_RC4_128_MD5' value64='4'/>
<enum name='SSL_RSA_WITH_RC4_128_SHA' value64='5'/>
<enum name='TIMESTAMPING_SUPPORTED' value64='1'/>
<enum name='TLS_AES_128_CCM_8_SHA256' value64='4869'/>
<enum name='TLS_AES_128_CCM_SHA256' value64='4868'/>
<enum name='TLS_AES_128_GCM_SHA256' value64='4865'/>
<enum name='TLS_AES_256_GCM_SHA384' value64='4866'/>
<enum name='TLS_CHACHA20_POLY1305_SHA256' value64='4867'/>
<enum name='TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA' value64='19'/>
<enum name='TLS_DHE_DSS_WITH_AES_128_CBC_SHA' value64='50'/>
<enum name='TLS_DHE_DSS_WITH_AES_128_CBC_SHA256' value64='64'/>
<enum name='TLS_DHE_DSS_WITH_AES_128_GCM_SHA256' value64='162'/>
<enum name='TLS_DHE_DSS_WITH_AES_256_CBC_SHA' value64='56'/>
<enum name='TLS_DHE_DSS_WITH_AES_256_CBC_SHA256' value64='106'/>
<enum name='TLS_DHE_DSS_WITH_AES_256_GCM_SHA384' value64='163'/>
<enum name='TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA' value64='143'/>
<enum name='TLS_DHE_PSK_WITH_AES_128_CBC_SHA' value64='144'/>
<enum name='TLS_DHE_PSK_WITH_AES_128_CBC_SHA256' value64='178'/>
<enum name='TLS_DHE_PSK_WITH_AES_128_GCM_SHA256' value64='170'/>
<enum name='TLS_DHE_PSK_WITH_AES_256_CBC_SHA' value64='145'/>
<enum name='TLS_DHE_PSK_WITH_AES_256_CBC_SHA384' value64='179'/>
<enum name='TLS_DHE_PSK_WITH_AES_256_GCM_SHA384' value64='171'/>
<enum name='TLS_DHE_PSK_WITH_NULL_SHA' value64='45'/>
<enum name='TLS_DHE_PSK_WITH_NULL_SHA256' value64='180'/>
<enum name='TLS_DHE_PSK_WITH_NULL_SHA384' value64='181'/>
<enum name='TLS_DHE_PSK_WITH_RC4_128_SHA' value64='142'/>
<enum name='TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA' value64='22'/>
<enum name='TLS_DHE_RSA_WITH_AES_128_CBC_SHA' value64='51'/>
<enum name='TLS_DHE_RSA_WITH_AES_128_CBC_SHA256' value64='103'/>
<enum name='TLS_DHE_RSA_WITH_AES_128_GCM_SHA256' value64='158'/>
<enum name='TLS_DHE_RSA_WITH_AES_256_CBC_SHA' value64='57'/>
<enum name='TLS_DHE_RSA_WITH_AES_256_CBC_SHA256' value64='107'/>
<enum name='TLS_DHE_RSA_WITH_AES_256_GCM_SHA384' value64='159'/>
<enum name='TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA' value64='13'/>
<enum name='TLS_DH_DSS_WITH_AES_128_CBC_SHA' value64='48'/>
<enum name='TLS_DH_DSS_WITH_AES_128_CBC_SHA256' value64='62'/>
<enum name='TLS_DH_DSS_WITH_AES_128_GCM_SHA256' value64='164'/>
<enum name='TLS_DH_DSS_WITH_AES_256_CBC_SHA' value64='54'/>
<enum name='TLS_DH_DSS_WITH_AES_256_CBC_SHA256' value64='104'/>
<enum name='TLS_DH_DSS_WITH_AES_256_GCM_SHA384' value64='165'/>
<enum name='TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA' value64='16'/>
<enum name='TLS_DH_RSA_WITH_AES_128_CBC_SHA' value64='49'/>
<enum name='TLS_DH_RSA_WITH_AES_128_CBC_SHA256' value64='63'/>
<enum name='TLS_DH_RSA_WITH_AES_128_GCM_SHA256' value64='160'/>
<enum name='TLS_DH_RSA_WITH_AES_256_CBC_SHA' value64='55'/>
<enum name='TLS_DH_RSA_WITH_AES_256_CBC_SHA256' value64='105'/>
<enum name='TLS_DH_RSA_WITH_AES_256_GCM_SHA384' value64='161'/>
<enum name='TLS_DH_anon_WITH_3DES_EDE_CBC_SHA' value64='27'/>
<enum name='TLS_DH_anon_WITH_AES_128_CBC_SHA' value64='52'/>
<enum name='TLS_DH_anon_WITH_AES_128_CBC_SHA256' value64='108'/>
<enum name='TLS_DH_anon_WITH_AES_128_GCM_SHA256' value64='166'/>
<enum name='TLS_DH_anon_WITH_AES_256_CBC_SHA' value64='58'/>
<enum name='TLS_DH_anon_WITH_AES_256_CBC_SHA256' value64='109'/>
<enum name='TLS_DH_anon_WITH_AES_256_GCM_SHA384' value64='167'/>
<enum name='TLS_DH_anon_WITH_RC4_128_MD5' value64='24'/>
<enum name='TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA' value64='49160'/>
<enum name='TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA' value64='49161'/>
<enum name='TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256' value64='49187'/>
<enum name='TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256' value64='49195'/>
<enum name='TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA' value64='49162'/>
<enum name='TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384' value64='49188'/>
<enum name='TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384' value64='49196'/>
<enum name='TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256' value64='52393'/>
<enum name='TLS_ECDHE_ECDSA_WITH_NULL_SHA' value64='49158'/>
<enum name='TLS_ECDHE_ECDSA_WITH_RC4_128_SHA' value64='49159'/>
<enum name='TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA' value64='49170'/>
<enum name='TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA' value64='49171'/>
<enum name='TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256' value64='49191'/>
<enum name='TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256' value64='49199'/>
<enum name='TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA' value64='49172'/>
<enum name='TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384' value64='49192'/>
<enum name='TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384' value64='49200'/>
<enum name='TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256' value64='52392'/>
<enum name='TLS_ECDHE_RSA_WITH_NULL_SHA' value64='49168'/>
<enum name='TLS_ECDHE_RSA_WITH_RC4_128_SHA' value64='49169'/>
<enum name='TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA' value64='49155'/>
<enum name='TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA' value64='49156'/>
<enum name='TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256' value64='49189'/>
<enum name='TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256' value64='49197'/>
<enum name='TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA' value64='49157'/>
<enum name='TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384' value64='49190'/>
<enum name='TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384' value64='49198'/>
<enum name='TLS_ECDH_ECDSA_WITH_NULL_SHA' value64='49153'/>
<enum name='TLS_ECDH_ECDSA_WITH_RC4_128_SHA' value64='49154'/>
<enum name='TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA' value64='49165'/>
<enum name='TLS_ECDH_RSA_WITH_AES_128_CBC_SHA' value64='49166'/>
<enum name='TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256' value64='49193'/>
<enum name='TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256' value64='49201'/>
<enum name='TLS_ECDH_RSA_WITH_AES_256_CBC_SHA' value64='49167'/>
<enum name='TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384' value64='49194'/>
<enum name='TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384' value64='49202'/>
<enum name='TLS_ECDH_RSA_WITH_NULL_SHA' value64='49163'/>
<enum name='TLS_ECDH_RSA_WITH_RC4_128_SHA' value64='49164'/>
<enum name='TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA' value64='49175'/>
<enum name='TLS_ECDH_anon_WITH_AES_128_CBC_SHA' value64='49176'/>
<enum name='TLS_ECDH_anon_WITH_AES_256_CBC_SHA' value64='49177'/>
<enum name='TLS_ECDH_anon_WITH_NULL_SHA' value64='49173'/>
<enum name='TLS_ECDH_anon_WITH_RC4_128_SHA' value64='49174'/>
<enum name='TLS_EMPTY_RENEGOTIATION_INFO_SCSV' value64='255'/>
<enum name='TLS_NULL_WITH_NULL_NULL' value64='0'/>
<enum name='TLS_PSK_WITH_3DES_EDE_CBC_SHA' value64='139'/>
<enum name='TLS_PSK_WITH_AES_128_CBC_SHA' value64='140'/>
<enum name='TLS_PSK_WITH_AES_128_CBC_SHA256' value64='174'/>
<enum name='TLS_PSK_WITH_AES_128_GCM_SHA256' value64='168'/>
<enum name='TLS_PSK_WITH_AES_256_CBC_SHA' value64='141'/>
<enum name='TLS_PSK_WITH_AES_256_CBC_SHA384' value64='175'/>
<enum name='TLS_PSK_WITH_AES_256_GCM_SHA384' value64='169'/>
<enum name='TLS_PSK_WITH_NULL_SHA' value64='44'/>
<enum name='TLS_PSK_WITH_NULL_SHA256' value64='176'/>
<enum name='TLS_PSK_WITH_NULL_SHA384' value64='177'/>
<enum name='TLS_PSK_WITH_RC4_128_SHA' value64='138'/>
<enum name='TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA' value64='147'/>
<enum name='TLS_RSA_PSK_WITH_AES_128_CBC_SHA' value64='148'/>
<enum name='TLS_RSA_PSK_WITH_AES_128_CBC_SHA256' value64='182'/>
<enum name='TLS_RSA_PSK_WITH_AES_128_GCM_SHA256' value64='172'/>
<enum name='TLS_RSA_PSK_WITH_AES_256_CBC_SHA' value64='149'/>
<enum name='TLS_RSA_PSK_WITH_AES_256_CBC_SHA384' value64='183'/>
<enum name='TLS_RSA_PSK_WITH_AES_256_GCM_SHA384' value64='173'/>
<enum name='TLS_RSA_PSK_WITH_NULL_SHA' value64='46'/>
<enum name='TLS_RSA_PSK_WITH_NULL_SHA256' value64='184'/>
<enum name='TLS_RSA_PSK_WITH_NULL_SHA384' value64='185'/>
<enum name='TLS_RSA_PSK_WITH_RC4_128_SHA' value64='146'/>
<enum name='TLS_RSA_WITH_3DES_EDE_CBC_SHA' value64='10'/>
<enum name='TLS_RSA_WITH_AES_128_CBC_SHA' value64='47'/>
<enum name='TLS_RSA_WITH_AES_128_CBC_SHA256' value64='60'/>
<enum name='TLS_RSA_WITH_AES_128_GCM_SHA256' value64='156'/>
<enum name='TLS_RSA_WITH_AES_256_CBC_SHA' value64='53'/>
<enum name='TLS_RSA_WITH_AES_256_CBC_SHA256' value64='61'/>
<enum name='TLS_RSA_WITH_AES_256_GCM_SHA384' value64='157'/>
<enum name='TLS_RSA_WITH_NULL_MD5' value64='1'/>
<enum name='TLS_RSA_WITH_NULL_SHA' value64='2'/>
<enum name='TLS_RSA_WITH_NULL_SHA256' value64='59'/>
<enum name='TLS_RSA_WITH_RC4_128_MD5' value64='4'/>
<enum name='TLS_RSA_WITH_RC4_128_SHA' value64='5'/>
<enum name='callerSecuritySession' value64='4294967295'/>
<enum name='errAuthorizationBadAddress' value64='-60033'/>
<enum name='errAuthorizationCanceled' value64='-60006'/>
<enum name='errAuthorizationDenied' value64='-60005'/>
<enum name='errAuthorizationExternalizeNotAllowed' value64='-60009'/>
<enum name='errAuthorizationInteractionNotAllowed' value64='-60007'/>
<enum name='errAuthorizationInternal' value64='-60008'/>
<enum name='errAuthorizationInternalizeNotAllowed' value64='-60010'/>
<enum name='errAuthorizationInvalidFlags' value64='-60011'/>
<enum name='errAuthorizationInvalidPointer' value64='-60004'/>
<enum name='errAuthorizationInvalidRef' value64='-60002'/>
<enum name='errAuthorizationInvalidSet' value64='-60001'/>
<enum name='errAuthorizationInvalidTag' value64='-60003'/>
<enum name='errAuthorizationSuccess' value64='0'/>
<enum name='errAuthorizationToolEnvironmentError' value64='-60032'/>
<enum name='errAuthorizationToolExecuteFailure' value64='-60031'/>
<enum name='errSSLBadCert' value64='-9808'/>
<enum name='errSSLBadCertificateStatusResponse' value64='-9862'/>
<enum name='errSSLBadCipherSuite' value64='-9818'/>
<enum name='errSSLBadConfiguration' value64='-9848'/>
<enum name='errSSLBadRecordMac' value64='-9846'/>
<enum name='errSSLBufferOverflow' value64='-9817'/>
<enum name='errSSLCertExpired' value64='-9814'/>
<enum name='errSSLCertNotYetValid' value64='-9815'/>
<enum name='errSSLCertificateRequired' value64='-9863'/>
<enum name='errSSLClientAuthCompleted' value64='-9841'/>
<enum name='errSSLClientCertRequested' value64='-9842'/>
<enum name='errSSLClientHelloReceived' value64='-9851'/>
<enum name='errSSLClosedAbort' value64='-9806'/>
<enum name='errSSLClosedGraceful' value64='-9805'/>
<enum name='errSSLClosedNoNotify' value64='-9816'/>
<enum name='errSSLConfigurationFailed' value64='-9854'/>
<enum name='errSSLConnectionRefused' value64='-9844'/>
<enum name='errSSLCrypto' value64='-9809'/>
<enum name='errSSLDecodeError' value64='-9859'/>
<enum name='errSSLDecompressFail' value64='-9857'/>
<enum name='errSSLDecryptionFail' value64='-9845'/>
<enum name='errSSLFatalAlert' value64='-9802'/>
<enum name='errSSLHandshakeFail' value64='-9858'/>
<enum name='errSSLHostNameMismatch' value64='-9843'/>
<enum name='errSSLIllegalParam' value64='-9830'/>
<enum name='errSSLInappropriateFallback' value64='-9860'/>
<enum name='errSSLInternal' value64='-9810'/>
<enum name='errSSLLast' value64='-9849'/>
<enum name='errSSLMissingExtension' value64='-9861'/>
<enum name='errSSLModuleAttach' value64='-9811'/>
<enum name='errSSLNegotiation' value64='-9801'/>
<enum name='errSSLNetworkTimeout' value64='-9853'/>
<enum name='errSSLNoRootCert' value64='-9813'/>
<enum name='errSSLPeerAccessDenied' value64='-9832'/>
<enum name='errSSLPeerAuthCompleted' value64='-9841'/>
<enum name='errSSLPeerBadCert' value64='-9825'/>
<enum name='errSSLPeerBadRecordMac' value64='-9820'/>
<enum name='errSSLPeerCertExpired' value64='-9828'/>
<enum name='errSSLPeerCertRevoked' value64='-9827'/>
<enum name='errSSLPeerCertUnknown' value64='-9829'/>
<enum name='errSSLPeerDecodeError' value64='-9833'/>
<enum name='errSSLPeerDecompressFail' value64='-9823'/>
<enum name='errSSLPeerDecryptError' value64='-9834'/>
<enum name='errSSLPeerDecryptionFail' value64='-9821'/>
<enum name='errSSLPeerExportRestriction' value64='-9835'/>
<enum name='errSSLPeerHandshakeFail' value64='-9824'/>
<enum name='errSSLPeerInsufficientSecurity' value64='-9837'/>
<enum name='errSSLPeerInternalError' value64='-9838'/>
<enum name='errSSLPeerNoRenegotiation' value64='-9840'/>
<enum name='errSSLPeerProtocolVersion' value64='-9836'/>
<enum name='errSSLPeerRecordOverflow' value64='-9822'/>
<enum name='errSSLPeerUnexpectedMsg' value64='-9819'/>
<enum name='errSSLPeerUnknownCA' value64='-9831'/>
<enum name='errSSLPeerUnsupportedCert' value64='-9826'/>
<enum name='errSSLPeerUserCancelled' value64='-9839'/>
<enum name='errSSLProtocol' value64='-9800'/>
<enum name='errSSLRecordOverflow' value64='-9847'/>
<enum name='errSSLServerAuthCompleted' value64='-9841'/>
<enum name='errSSLSessionNotFound' value64='-9804'/>
<enum name='errSSLTransportReset' value64='-9852'/>
<enum name='errSSLUnexpectedMessage' value64='-9856'/>
<enum name='errSSLUnexpectedRecord' value64='-9849'/>
<enum name='errSSLUnknownPSKIdentity' value64='-9864'/>
<enum name='errSSLUnknownRootCert' value64='-9812'/>
<enum name='errSSLUnrecognizedName' value64='-9865'/>
<enum name='errSSLUnsupportedExtension' value64='-9855'/>
<enum name='errSSLWeakPeerEphemeralDHKey' value64='-9850'/>
<enum name='errSSLWouldBlock' value64='-9803'/>
<enum name='errSSLXCertChainInvalid' value64='-9807'/>
<enum name='errSecACLAddFailed' value64='-67698'/>
<enum name='errSecACLChangeFailed' value64='-67699'/>
<enum name='errSecACLDeleteFailed' value64='-67696'/>
<enum name='errSecACLNotSimple' value64='-25240'/>
<enum name='errSecACLReplaceFailed' value64='-67697'/>
<enum name='errSecAddinLoadFailed' value64='-67711'/>
<enum name='errSecAddinUnloadFailed' value64='-67714'/>
<enum name='errSecAlgorithmMismatch' value64='-67730'/>
<enum name='errSecAllocate' value64='-108'/>
<enum name='errSecAlreadyLoggedIn' value64='-67814'/>
<enum name='errSecAppleAddAppACLSubject' value64='-67589'/>
<enum name='errSecAppleInvalidKeyEndDate' value64='-67593'/>
<enum name='errSecAppleInvalidKeyStartDate' value64='-67592'/>
<enum name='errSecApplePublicKeyIncomplete' value64='-67590'/>
<enum name='errSecAppleSSLv2Rollback' value64='-67595'/>
<enum name='errSecAppleSignatureMismatch' value64='-67591'/>
<enum name='errSecAttachHandleBusy' value64='-67728'/>
<enum name='errSecAttributeNotInContext' value64='-67720'/>
<enum name='errSecAuthFailed' value64='-25293'/>
<enum name='errSecBadReq' value64='-909'/>
<enum name='errSecBlockSizeMismatch' value64='-67810'/>
<enum name='errSecBufferTooSmall' value64='-25301'/>
<enum name='errSecCRLAlreadySigned' value64='-67684'/>
<enum name='errSecCRLBadURI' value64='-67617'/>
<enum name='errSecCRLExpired' value64='-67613'/>
<enum name='errSecCRLNotFound' value64='-67615'/>
<enum name='errSecCRLNotTrusted' value64='-67620'/>
<enum name='errSecCRLNotValidYet' value64='-67614'/>
<enum name='errSecCRLPolicyFailed' value64='-67621'/>
<enum name='errSecCRLServerDown' value64='-67616'/>
<enum name='errSecCSAmbiguousBundleFormat' value64='-67011'/>
<enum name='errSecCSBadBundleFormat' value64='-67028'/>
<enum name='errSecCSBadCallbackValue' value64='-67020'/>
<enum name='errSecCSBadDictionaryFormat' value64='-67058'/>
<enum name='errSecCSBadDiskImageFormat' value64='-67001'/>
<enum name='errSecCSBadFrameworkVersion' value64='-67009'/>
<enum name='errSecCSBadLVArch' value64='-67017'/>
<enum name='errSecCSBadMainExecutable' value64='-67010'/>
<enum name='errSecCSBadNestedCode' value64='-67021'/>
<enum name='errSecCSBadObjectFormat' value64='-67049'/>
<enum name='errSecCSBadResource' value64='-67054'/>
<enum name='errSecCSBadTeamIdentifier' value64='-66997'/>
<enum name='errSecCSCMSTooLarge' value64='-67036'/>
<enum name='errSecCSCancelled' value64='-67006'/>
<enum name='errSecCSDBAccess' value64='-67032'/>
<enum name='errSecCSDBDenied' value64='-67033'/>
<enum name='errSecCSDSStoreSymlink' value64='-67012'/>
<enum name='errSecCSDbCorrupt' value64='-67024'/>
<enum name='errSecCSFileHardQuarantined' value64='-67026'/>
<enum name='errSecCSGuestInvalid' value64='-67063'/>
<enum name='errSecCSHelperFailed' value64='-67019'/>
<enum name='errSecCSHostProtocolContradiction' value64='-67043'/>
<enum name='errSecCSHostProtocolDedicationError' value64='-67042'/>
<enum name='errSecCSHostProtocolInvalidAttribute' value64='-67031'/>
<enum name='errSecCSHostProtocolInvalidHash' value64='-67035'/>
<enum name='errSecCSHostProtocolNotProxy' value64='-67041'/>
<enum name='errSecCSHostProtocolRelativePath' value64='-67044'/>
<enum name='errSecCSHostProtocolStateError' value64='-67040'/>
<enum name='errSecCSHostProtocolUnrelated' value64='-67039'/>
<enum name='errSecCSHostReject' value64='-67047'/>
<enum name='errSecCSInfoPlistFailed' value64='-67030'/>
<enum name='errSecCSInternalError' value64='-67048'/>
<enum name='errSecCSInvalidAssociatedFileData' value64='-66999'/>
<enum name='errSecCSInvalidAttributeValues' value64='-67066'/>
<enum name='errSecCSInvalidEntitlements' value64='-66994'/>
<enum name='errSecCSInvalidFlags' value64='-67070'/>
<enum name='errSecCSInvalidObjectRef' value64='-67071'/>
<enum name='errSecCSInvalidPlatform' value64='-67005'/>
<enum name='errSecCSInvalidRuntimeVersion' value64='-66993'/>
<enum name='errSecCSInvalidSymlink' value64='-67003'/>
<enum name='errSecCSInvalidTeamIdentifier' value64='-66998'/>
<enum name='errSecCSMultipleGuests' value64='-67064'/>
<enum name='errSecCSNoMainExecutable' value64='-67029'/>
<enum name='errSecCSNoMatches' value64='-67027'/>
<enum name='errSecCSNoSuchCode' value64='-67065'/>
<enum name='errSecCSNotAHost' value64='-67046'/>
<enum name='errSecCSNotAppLike' value64='-67002'/>
<enum name='errSecCSNotSupported' value64='-67037'/>
<enum name='errSecCSObjectRequired' value64='-67069'/>
<enum name='errSecCSOutdated' value64='-67025'/>
<enum name='errSecCSRegularFile' value64='-67015'/>
<enum name='errSecCSReqFailed' value64='-67050'/>
<enum name='errSecCSReqInvalid' value64='-67052'/>
<enum name='errSecCSReqUnsupported' value64='-67051'/>
<enum name='errSecCSResourceDirectoryFailed' value64='-67023'/>
<enum name='errSecCSResourceNotSupported' value64='-67016'/>
<enum name='errSecCSResourceRulesInvalid' value64='-67053'/>
<enum name='errSecCSResourcesInvalid' value64='-67055'/>
<enum name='errSecCSResourcesNotFound' value64='-67056'/>
<enum name='errSecCSResourcesNotSealed' value64='-67057'/>
<enum name='errSecCSSigDBAccess' value64='-67032'/>
<enum name='errSecCSSigDBDenied' value64='-67033'/>
<enum name='errSecCSSignatureFailed' value64='-67061'/>
<enum name='errSecCSSignatureInvalid' value64='-67045'/>
<enum name='errSecCSSignatureNotVerifiable' value64='-67060'/>
<enum name='errSecCSSignatureUnsupported' value64='-67059'/>
<enum name='errSecCSSignatureUntrusted' value64='-66996'/>
<enum name='errSecCSStaticCodeChanged' value64='-67034'/>
<enum name='errSecCSStaticCodeNotFound' value64='-67068'/>
<enum name='errSecCSTooBig' value64='-67004'/>
<enum name='errSecCSUnimplemented' value64='-67072'/>
<enum name='errSecCSUnsealedAppRoot' value64='-67014'/>
<enum name='errSecCSUnsealedFrameworkRoot' value64='-67008'/>
<enum name='errSecCSUnsigned' value64='-67062'/>
<enum name='errSecCSUnsignedNestedCode' value64='-67022'/>
<enum name='errSecCSUnsupportedDigestAlgorithm' value64='-67000'/>
<enum name='errSecCSUnsupportedGuestAttributes' value64='-67067'/>
<enum name='errSecCSVetoed' value64='-67018'/>
<enum name='errSecCSWeakResourceEnvelope' value64='-67007'/>
<enum name='errSecCSWeakResourceRules' value64='-67013'/>
<enum name='errSecCallbackFailed' value64='-67695'/>
<enum name='errSecCertificateCannotOperate' value64='-67817'/>
<enum name='errSecCertificateExpired' value64='-67818'/>
<enum name='errSecCertificateNotValidYet' value64='-67819'/>
<enum name='errSecCertificateRevoked' value64='-67820'/>
<enum name='errSecCertificateSuspended' value64='-67821'/>
<enum name='errSecCodeSigningBadCertChainLength' value64='-67647'/>
<enum name='errSecCodeSigningBadPathLengthConstraint' value64='-67649'/>
<enum name='errSecCodeSigningDevelopment' value64='-67651'/>
<enum name='errSecCodeSigningNoBasicConstraints' value64='-67648'/>
<enum name='errSecCodeSigningNoExtendedKeyUsage' value64='-67650'/>
<enum name='errSecConversionError' value64='-67594'/>
<enum name='errSecCoreFoundationUnknown' value64='-4960'/>
<enum name='errSecCreateChainFailed' value64='-25318'/>
<enum name='errSecDataNotAvailable' value64='-25316'/>
<enum name='errSecDataNotModifiable' value64='-25317'/>
<enum name='errSecDataTooLarge' value64='-25302'/>
<enum name='errSecDatabaseLocked' value64='-67869'/>
<enum name='errSecDatastoreIsOpen' value64='-67870'/>
<enum name='errSecDecode' value64='-26275'/>
<enum name='errSecDeviceError' value64='-67727'/>
<enum name='errSecDeviceFailed' value64='-67588'/>
<enum name='errSecDeviceReset' value64='-67587'/>
<enum name='errSecDeviceVerifyFailed' value64='-67812'/>
<enum name='errSecDiskFull' value64='-34'/>
<enum name='errSecDskFull' value64='-34'/>
<enum name='errSecDuplicateCallback' value64='-25297'/>
<enum name='errSecDuplicateItem' value64='-25299'/>
<enum name='errSecDuplicateKeychain' value64='-25296'/>
<enum name='errSecEMMLoadFailed' value64='-67709'/>
<enum name='errSecEMMUnloadFailed' value64='-67710'/>
<enum name='errSecEndOfData' value64='-67634'/>
<enum name='errSecErrnoBase' value64='100000'/>
<enum name='errSecErrnoLimit' value64='100255'/>
<enum name='errSecEventNotificationCallbackNotFound' value64='-67723'/>
<enum name='errSecExtendedKeyUsageNotCritical' value64='-67881'/>
<enum name='errSecFieldSpecifiedMultiple' value64='-67866'/>
<enum name='errSecFileTooBig' value64='-67597'/>
<enum name='errSecFunctionFailed' value64='-67677'/>
<enum name='errSecFunctionIntegrityFail' value64='-67670'/>
<enum name='errSecHostNameMismatch' value64='-67602'/>
<enum name='errSecIDPFailure' value64='-67622'/>
<enum name='errSecIO' value64='-36'/>
<enum name='errSecInDarkWake' value64='-25320'/>
<enum name='errSecIncompatibleDatabaseBlob' value64='-67600'/>
<enum name='errSecIncompatibleFieldFormat' value64='-67867'/>
<enum name='errSecIncompatibleKeyBlob' value64='-67601'/>
<enum name='errSecIncompatibleVersion' value64='-67704'/>
<enum name='errSecIncompleteCertRevocationCheck' value64='-67635'/>
<enum name='errSecInputLengthError' value64='-67724'/>
<enum name='errSecInsufficientClientID' value64='-67586'/>
<enum name='errSecInsufficientCredentials' value64='-67822'/>
<enum name='errSecInteractionNotAllowed' value64='-25308'/>
<enum name='errSecInteractionRequired' value64='-25315'/>
<enum name='errSecInternalComponent' value64='-2070'/>
<enum name='errSecInternalError' value64='-67671'/>
<enum name='errSecInvaldCRLAuthority' value64='-67827'/>
<enum name='errSecInvalidACL' value64='-67702'/>
<enum name='errSecInvalidAccessCredentials' value64='-67700'/>
<enum name='errSecInvalidAccessRequest' value64='-67876'/>
<enum name='errSecInvalidAction' value64='-67823'/>
<enum name='errSecInvalidAddinFunctionTable' value64='-67716'/>
<enum name='errSecInvalidAlgorithm' value64='-67747'/>
<enum name='errSecInvalidAlgorithmParms' value64='-67770'/>
<enum name='errSecInvalidAttributeAccessCredentials' value64='-67796'/>
<enum name='errSecInvalidAttributeBase' value64='-67788'/>
<enum name='errSecInvalidAttributeBlockSize' value64='-67764'/>
<enum name='errSecInvalidAttributeDLDBHandle' value64='-67794'/>
<enum name='errSecInvalidAttributeEffectiveBits' value64='-67778'/>
<enum name='errSecInvalidAttributeEndDate' value64='-67782'/>
<enum name='errSecInvalidAttributeInitVector' value64='-67750'/>
<enum name='errSecInvalidAttributeIterationCount' value64='-67792'/>
<enum name='errSecInvalidAttributeKey' value64='-67748'/>
<enum name='errSecInvalidAttributeKeyLength' value64='-67762'/>
<enum name='errSecInvalidAttributeKeyType' value64='-67774'/>
<enum name='errSecInvalidAttributeLabel' value64='-67772'/>
<enum name='errSecInvalidAttributeMode' value64='-67776'/>
<enum name='errSecInvalidAttributeOutputSize' value64='-67766'/>
<enum name='errSecInvalidAttributePadding' value64='-67754'/>
<enum name='errSecInvalidAttributePassphrase' value64='-67760'/>
<enum name='errSecInvalidAttributePrime' value64='-67786'/>
<enum name='errSecInvalidAttributePrivateKeyFormat' value64='-67800'/>
<enum name='errSecInvalidAttributePublicKeyFormat' value64='-67798'/>
<enum name='errSecInvalidAttributeRandom' value64='-67756'/>
<enum name='errSecInvalidAttributeRounds' value64='-67768'/>
<enum name='errSecInvalidAttributeSalt' value64='-67752'/>
<enum name='errSecInvalidAttributeSeed' value64='-67758'/>
<enum name='errSecInvalidAttributeStartDate' value64='-67780'/>
<enum name='errSecInvalidAttributeSubprime' value64='-67790'/>
<enum name='errSecInvalidAttributeSymmetricKeyFormat' value64='-67802'/>
<enum name='errSecInvalidAttributeVersion' value64='-67784'/>
<enum name='errSecInvalidAttributeWrappedKeyFormat' value64='-67804'/>
<enum name='errSecInvalidAuthority' value64='-67824'/>
<enum name='errSecInvalidAuthorityKeyID' value64='-67606'/>
<enum name='errSecInvalidBaseACLs' value64='-67851'/>
<enum name='errSecInvalidBundleInfo' value64='-67857'/>
<enum name='errSecInvalidCRL' value64='-67830'/>
<enum name='errSecInvalidCRLEncoding' value64='-67828'/>
<enum name='errSecInvalidCRLGroup' value64='-67816'/>
<enum name='errSecInvalidCRLIndex' value64='-67858'/>
<enum name='errSecInvalidCRLType' value64='-67829'/>
<enum name='errSecInvalidCallback' value64='-25298'/>
<enum name='errSecInvalidCertAuthority' value64='-67826'/>
<enum name='errSecInvalidCertificateGroup' value64='-67691'/>
<enum name='errSecInvalidCertificateRef' value64='-67690'/>
<enum name='errSecInvalidContext' value64='-67746'/>
<enum name='errSecInvalidDBList' value64='-67681'/>
<enum name='errSecInvalidDBLocation' value64='-67875'/>
<enum name='errSecInvalidData' value64='-67673'/>
<enum name='errSecInvalidDatabaseBlob' value64='-67598'/>
<enum name='errSecInvalidDigestAlgorithm' value64='-67815'/>
<enum name='errSecInvalidEncoding' value64='-67853'/>
<enum name='errSecInvalidExtendedKeyUsage' value64='-67609'/>
<enum name='errSecInvalidFormType' value64='-67831'/>
<enum name='errSecInvalidGUID' value64='-67679'/>
<enum name='errSecInvalidHandle' value64='-67680'/>
<enum name='errSecInvalidHandleUsage' value64='-67668'/>
<enum name='errSecInvalidID' value64='-67832'/>
<enum name='errSecInvalidIDLinkage' value64='-67610'/>
<enum name='errSecInvalidIdentifier' value64='-67833'/>
<enum name='errSecInvalidIndex' value64='-67834'/>
<enum name='errSecInvalidIndexInfo' value64='-67877'/>
<enum name='errSecInvalidInputVector' value64='-67744'/>
<enum name='errSecInvalidItemRef' value64='-25304'/>
<enum name='errSecInvalidKeyAttributeMask' value64='-67738'/>
<enum name='errSecInvalidKeyBlob' value64='-67599'/>
<enum name='errSecInvalidKeyFormat' value64='-67742'/>
<enum name='errSecInvalidKeyHierarchy' value64='-67713'/>
<enum name='errSecInvalidKeyLabel' value64='-67740'/>
<enum name='errSecInvalidKeyRef' value64='-67712'/>
<enum name='errSecInvalidKeyUsageForPolicy' value64='-67608'/>
<enum name='errSecInvalidKeyUsageMask' value64='-67736'/>
<enum name='errSecInvalidKeychain' value64='-25295'/>
<enum name='errSecInvalidLoginName' value64='-67813'/>
<enum name='errSecInvalidModifyMode' value64='-67879'/>
<enum name='errSecInvalidName' value64='-67689'/>
<enum name='errSecInvalidNetworkAddress' value64='-67683'/>
<enum name='errSecInvalidNewOwner' value64='-67878'/>
<enum name='errSecInvalidNumberOfFields' value64='-67685'/>
<enum name='errSecInvalidOutputVector' value64='-67745'/>
<enum name='errSecInvalidOwnerEdit' value64='-25244'/>
<enum name='errSecInvalidPVC' value64='-67708'/>
<enum name='errSecInvalidParsingModule' value64='-67868'/>
<enum name='errSecInvalidPassthroughID' value64='-67682'/>
<enum name='errSecInvalidPasswordRef' value64='-25261'/>
<enum name='errSecInvalidPointer' value64='-67675'/>
<enum name='errSecInvalidPolicyIdentifiers' value64='-67835'/>
<enum name='errSecInvalidPrefsDomain' value64='-25319'/>
<enum name='errSecInvalidQuery' value64='-67693'/>
<enum name='errSecInvalidReason' value64='-67837'/>
<enum name='errSecInvalidRecord' value64='-67701'/>
<enum name='errSecInvalidRequestInputs' value64='-67838'/>
<enum name='errSecInvalidRequestor' value64='-67855'/>
<enum name='errSecInvalidResponseVector' value64='-67839'/>
<enum name='errSecInvalidRoot' value64='-67612'/>
<enum name='errSecInvalidSampleValue' value64='-67703'/>
<enum name='errSecInvalidScope' value64='-67706'/>
<enum name='errSecInvalidSearchRef' value64='-25305'/>
<enum name='errSecInvalidServiceMask' value64='-67717'/>
<enum name='errSecInvalidSignature' value64='-67688'/>
<enum name='errSecInvalidStopOnPolicy' value64='-67840'/>
<enum name='errSecInvalidSubServiceID' value64='-67719'/>
<enum name='errSecInvalidSubjectKeyID' value64='-67607'/>
<enum name='errSecInvalidSubjectName' value64='-67655'/>
<enum name='errSecInvalidTimeString' value64='-67836'/>
<enum name='errSecInvalidTrustSetting' value64='-25242'/>
<enum name='errSecInvalidTrustSettings' value64='-25262'/>
<enum name='errSecInvalidTuple' value64='-67841'/>
<enum name='errSecInvalidTupleCredendtials' value64='-67852'/>
<enum name='errSecInvalidTupleGroup' value64='-67850'/>
<enum name='errSecInvalidValidityPeriod' value64='-67854'/>
<enum name='errSecInvalidValue' value64='-67694'/>
<enum name='errSecItemNotFound' value64='-25300'/>
<enum name='errSecKeyBlobTypeIncorrect' value64='-67732'/>
<enum name='errSecKeyHeaderInconsistent' value64='-67733'/>
<enum name='errSecKeyIsSensitive' value64='-25258'/>
<enum name='errSecKeySizeNotAllowed' value64='-25311'/>
<enum name='errSecKeyUsageIncorrect' value64='-67731'/>
<enum name='errSecLibraryReferenceNotFound' value64='-67715'/>
<enum name='errSecMDSError' value64='-67674'/>
<enum name='errSecMemoryError' value64='-67672'/>
<enum name='errSecMissingAlgorithmParms' value64='-67771'/>
<enum name='errSecMissingAttributeAccessCredentials' value64='-67797'/>
<enum name='errSecMissingAttributeBase' value64='-67789'/>
<enum name='errSecMissingAttributeBlockSize' value64='-67765'/>
<enum name='errSecMissingAttributeDLDBHandle' value64='-67795'/>
<enum name='errSecMissingAttributeEffectiveBits' value64='-67779'/>
<enum name='errSecMissingAttributeEndDate' value64='-67783'/>
<enum name='errSecMissingAttributeInitVector' value64='-67751'/>
<enum name='errSecMissingAttributeIterationCount' value64='-67793'/>
<enum name='errSecMissingAttributeKey' value64='-67749'/>
<enum name='errSecMissingAttributeKeyLength' value64='-67763'/>
<enum name='errSecMissingAttributeKeyType' value64='-67775'/>
<enum name='errSecMissingAttributeLabel' value64='-67773'/>
<enum name='errSecMissingAttributeMode' value64='-67777'/>
<enum name='errSecMissingAttributeOutputSize' value64='-67767'/>
<enum name='errSecMissingAttributePadding' value64='-67755'/>
<enum name='errSecMissingAttributePassphrase' value64='-67761'/>
<enum name='errSecMissingAttributePrime' value64='-67787'/>
<enum name='errSecMissingAttributePrivateKeyFormat' value64='-67801'/>
<enum name='errSecMissingAttributePublicKeyFormat' value64='-67799'/>
<enum name='errSecMissingAttributeRandom' value64='-67757'/>
<enum name='errSecMissingAttributeRounds' value64='-67769'/>
<enum name='errSecMissingAttributeSalt' value64='-67753'/>
<enum name='errSecMissingAttributeSeed' value64='-67759'/>
<enum name='errSecMissingAttributeStartDate' value64='-67781'/>
<enum name='errSecMissingAttributeSubprime' value64='-67791'/>
<enum name='errSecMissingAttributeSymmetricKeyFormat' value64='-67803'/>
<enum name='errSecMissingAttributeVersion' value64='-67785'/>
<enum name='errSecMissingAttributeWrappedKeyFormat' value64='-67805'/>
<enum name='errSecMissingEntitlement' value64='-34018'/>
<enum name='errSecMissingRequiredExtension' value64='-67880'/>
<enum name='errSecMissingValue' value64='-67871'/>
<enum name='errSecMobileMeCSRVerifyFailure' value64='-67665'/>
<enum name='errSecMobileMeFailedConsistencyCheck' value64='-67666'/>
<enum name='errSecMobileMeNoRequestPending' value64='-67664'/>
<enum name='errSecMobileMeRequestAlreadyPending' value64='-67663'/>
<enum name='errSecMobileMeRequestQueued' value64='-67657'/>
<enum name='errSecMobileMeRequestRedirected' value64='-67658'/>
<enum name='errSecMobileMeServerAlreadyExists' value64='-67661'/>
<enum name='errSecMobileMeServerError' value64='-67659'/>
<enum name='errSecMobileMeServerNotAvailable' value64='-67660'/>
<enum name='errSecMobileMeServerServiceErr' value64='-67662'/>
<enum name='errSecModuleManagerInitializeFailed' value64='-67721'/>
<enum name='errSecModuleManagerNotFound' value64='-67722'/>
<enum name='errSecModuleManifestVerifyFailed' value64='-67678'/>
<enum name='errSecModuleNotLoaded' value64='-67718'/>
<enum name='errSecMultipleExecSegments' value64='-66995'/>
<enum name='errSecMultiplePrivKeys' value64='-25259'/>
<enum name='errSecMultipleValuesUnsupported' value64='-67842'/>
<enum name='errSecNetworkFailure' value64='-67636'/>
<enum name='errSecNoAccessForItem' value64='-25243'/>
<enum name='errSecNoBasicConstraints' value64='-67604'/>
<enum name='errSecNoBasicConstraintsCA' value64='-67605'/>
<enum name='errSecNoCertificateModule' value64='-25313'/>
<enum name='errSecNoDefaultAuthority' value64='-67844'/>
<enum name='errSecNoDefaultKeychain' value64='-25307'/>
<enum name='errSecNoFieldValues' value64='-67859'/>
<enum name='errSecNoPolicyModule' value64='-25314'/>
<enum name='errSecNoStorageModule' value64='-25312'/>
<enum name='errSecNoSuchAttr' value64='-25303'/>
<enum name='errSecNoSuchClass' value64='-25306'/>
<enum name='errSecNoSuchKeychain' value64='-25294'/>
<enum name='errSecNoTrustSettings' value64='-25263'/>
<enum name='errSecNotAvailable' value64='-25291'/>
<enum name='errSecNotInitialized' value64='-67667'/>
<enum name='errSecNotLoggedIn' value64='-67729'/>
<enum name='errSecNotSigner' value64='-26267'/>
<enum name='errSecNotTrusted' value64='-67843'/>
<enum name='errSecOCSPBadRequest' value64='-67631'/>
<enum name='errSecOCSPBadResponse' value64='-67630'/>
<enum name='errSecOCSPNoSigner' value64='-67640'/>
<enum name='errSecOCSPNotTrustedToAnchor' value64='-67637'/>
<enum name='errSecOCSPResponderInternalError' value64='-67642'/>
<enum name='errSecOCSPResponderMalformedReq' value64='-67641'/>
<enum name='errSecOCSPResponderSignatureRequired' value64='-67644'/>
<enum name='errSecOCSPResponderTryLater' value64='-67643'/>
<enum name='errSecOCSPResponderUnauthorized' value64='-67645'/>
<enum name='errSecOCSPResponseNonceMismatch' value64='-67646'/>
<enum name='errSecOCSPSignatureError' value64='-67639'/>
<enum name='errSecOCSPStatusUnrecognized' value64='-67633'/>
<enum name='errSecOCSPUnavailable' value64='-67632'/>
<enum name='errSecOpWr' value64='-49'/>
<enum name='errSecOutputLengthError' value64='-67725'/>
<enum name='errSecPVCAlreadyConfigured' value64='-67707'/>
<enum name='errSecPVCReferentNotFound' value64='-67669'/>
<enum name='errSecParam' value64='-50'/>
<enum name='errSecPassphraseRequired' value64='-25260'/>
<enum name='errSecPathLengthConstraintExceeded' value64='-67611'/>
<enum name='errSecPkcs12VerifyFailure' value64='-25264'/>
<enum name='errSecPolicyNotFound' value64='-25241'/>
<enum name='errSecPrivilegeNotGranted' value64='-67705'/>
<enum name='errSecPrivilegeNotSupported' value64='-67726'/>
<enum name='errSecPublicKeyInconsistent' value64='-67811'/>
<enum name='errSecQuerySizeUnknown' value64='-67809'/>
<enum name='errSecQuotaExceeded' value64='-67596'/>
<enum name='errSecReadOnly' value64='-25292'/>
<enum name='errSecReadOnlyAttr' value64='-25309'/>
<enum name='errSecRecordModified' value64='-67638'/>
<enum name='errSecRejectedForm' value64='-67845'/>
<enum name='errSecRequestDescriptor' value64='-67856'/>
<enum name='errSecRequestLost' value64='-67846'/>
<enum name='errSecRequestRejected' value64='-67847'/>
<enum name='errSecResourceSignBadCertChainLength' value64='-67652'/>
<enum name='errSecResourceSignBadExtKeyUsage' value64='-67653'/>
<enum name='errSecSMIMEBadExtendedKeyUsage' value64='-67624'/>
<enum name='errSecSMIMEBadKeyUsage' value64='-67625'/>
<enum name='errSecSMIMEEmailAddressesNotFound' value64='-67623'/>
<enum name='errSecSMIMEKeyUsageNotCritical' value64='-67626'/>
<enum name='errSecSMIMENoEmailAddress' value64='-67627'/>
<enum name='errSecSMIMESubjAltNameNotCritical' value64='-67628'/>
<enum name='errSecSSLBadExtendedKeyUsage' value64='-67629'/>
<enum name='errSecSelfCheckFailed' value64='-67676'/>
<enum name='errSecServiceNotAvailable' value64='-67585'/>
<enum name='errSecSigningTimeMissing' value64='-67894'/>
<enum name='errSecStagedOperationInProgress' value64='-67806'/>
<enum name='errSecStagedOperationNotStarted' value64='-67807'/>
<enum name='errSecSuccess' value64='0'/>
<enum name='errSecTagNotFound' value64='-67692'/>
<enum name='errSecTimestampAddInfoNotAvailable' value64='-67892'/>
<enum name='errSecTimestampBadAlg' value64='-67886'/>
<enum name='errSecTimestampBadDataFormat' value64='-67888'/>
<enum name='errSecTimestampBadRequest' value64='-67887'/>
<enum name='errSecTimestampInvalid' value64='-67883'/>
<enum name='errSecTimestampMissing' value64='-67882'/>
<enum name='errSecTimestampNotTrusted' value64='-67884'/>
<enum name='errSecTimestampRejection' value64='-67895'/>
<enum name='errSecTimestampRevocationNotification' value64='-67898'/>
<enum name='errSecTimestampRevocationWarning' value64='-67897'/>
<enum name='errSecTimestampServiceNotAvailable' value64='-67885'/>
<enum name='errSecTimestampSystemFailure' value64='-67893'/>
<enum name='errSecTimestampTimeNotAvailable' value64='-67889'/>
<enum name='errSecTimestampUnacceptedExtension' value64='-67891'/>
<enum name='errSecTimestampUnacceptedPolicy' value64='-67890'/>
<enum name='errSecTimestampWaiting' value64='-67896'/>
<enum name='errSecTrustNotAvailable' value64='-25245'/>
<enum name='errSecTrustSettingDeny' value64='-67654'/>
<enum name='errSecUnimplemented' value64='-4'/>
<enum name='errSecUnknownCRLExtension' value64='-67619'/>
<enum name='errSecUnknownCertExtension' value64='-67618'/>
<enum name='errSecUnknownCriticalExtensionFlag' value64='-67603'/>
<enum name='errSecUnknownFormat' value64='-25257'/>
<enum name='errSecUnknownQualifiedCertStatement' value64='-67656'/>
<enum name='errSecUnknownTag' value64='-67687'/>
<enum name='errSecUnsupportedAddressType' value64='-67848'/>
<enum name='errSecUnsupportedFieldFormat' value64='-67860'/>
<enum name='errSecUnsupportedFormat' value64='-25256'/>
<enum name='errSecUnsupportedIndexInfo' value64='-67861'/>
<enum name='errSecUnsupportedKeyAttributeMask' value64='-67739'/>
<enum name='errSecUnsupportedKeyFormat' value64='-67734'/>
<enum name='errSecUnsupportedKeyLabel' value64='-67741'/>
<enum name='errSecUnsupportedKeySize' value64='-67735'/>
<enum name='errSecUnsupportedKeyUsageMask' value64='-67737'/>
<enum name='errSecUnsupportedLocality' value64='-67862'/>
<enum name='errSecUnsupportedNumAttributes' value64='-67863'/>
<enum name='errSecUnsupportedNumIndexes' value64='-67864'/>
<enum name='errSecUnsupportedNumRecordTypes' value64='-67865'/>
<enum name='errSecUnsupportedNumSelectionPreds' value64='-67873'/>
<enum name='errSecUnsupportedOperator' value64='-67874'/>
<enum name='errSecUnsupportedQueryLimits' value64='-67872'/>
<enum name='errSecUnsupportedService' value64='-67849'/>
<enum name='errSecUnsupportedVectorOfBuffers' value64='-67743'/>
<enum name='errSecUserCanceled' value64='-128'/>
<enum name='errSecVerificationFailure' value64='-67686'/>
<enum name='errSecVerifyActionFailed' value64='-67825'/>
<enum name='errSecVerifyFailed' value64='-67808'/>
<enum name='errSecWrPerm' value64='-61'/>
<enum name='errSecWrongSecVersion' value64='-25310'/>
<enum name='errSecureDownloadInvalidDownload' value64='-20053'/>
<enum name='errSecureDownloadInvalidTicket' value64='-20052'/>
<enum name='errSessionAuthorizationDenied' value64='-60502'/>
<enum name='errSessionInternal' value64='-60008'/>
<enum name='errSessionInvalidAttributes' value64='-60501'/>
<enum name='errSessionInvalidFlags' value64='-60011'/>
<enum name='errSessionInvalidId' value64='-60500'/>
<enum name='errSessionSuccess' value64='0'/>
<enum name='errSessionValueNotSet' value64='-60503'/>
<enum name='kAlwaysAuthenticate' value64='1'/>
<enum name='kAuthorizationCallbacksVersion' value64='3'/>
<enum name='kAuthorizationContextFlagExtractable' value64='1'/>
<enum name='kAuthorizationContextFlagSticky' value64='4'/>
<enum name='kAuthorizationContextFlagVolatile' value64='2'/>
<enum name='kAuthorizationFlagCanNotPreAuthorize' value64='1'/>
<enum name='kAuthorizationFlagDefaults' value64='0'/>
<enum name='kAuthorizationFlagDestroyRights' value64='8'/>
<enum name='kAuthorizationFlagExtendRights' value64='2'/>
<enum name='kAuthorizationFlagInteractionAllowed' value64='1'/>
<enum name='kAuthorizationFlagNoData' value64='1048576'/>
<enum name='kAuthorizationFlagPartialRights' value64='4'/>
<enum name='kAuthorizationFlagPreAuthorize' value64='16'/>
<enum name='kAuthorizationPluginInterfaceVersion' value64='0'/>
<enum name='kAuthorizationResultAllow' value64='0'/>
<enum name='kAuthorizationResultDeny' value64='1'/>
<enum name='kAuthorizationResultUndefined' value64='2'/>
<enum name='kAuthorizationResultUserCanceled' value64='3'/>
<enum name='kCMSAttrAppleCodesigningHashAgility' value64='16'/>
<enum name='kCMSAttrAppleCodesigningHashAgilityV2' value64='32'/>
<enum name='kCMSAttrAppleExpirationTime' value64='64'/>
<enum name='kCMSAttrNone' value64='0'/>
<enum name='kCMSAttrSigningTime' value64='8'/>
<enum name='kCMSAttrSmimeCapabilities' value64='1'/>
<enum name='kCMSAttrSmimeEncryptionKeyPrefs' value64='2'/>
<enum name='kCMSAttrSmimeMSEncryptionKeyPrefs' value64='4'/>
<enum name='kCMSCertificateChain' value64='2'/>
<enum name='kCMSCertificateChainWithRoot' value64='3'/>
<enum name='kCMSCertificateNone' value64='0'/>
<enum name='kCMSCertificateSignerOnly' value64='1'/>
<enum name='kCMSSignerInvalidCert' value64='4'/>
<enum name='kCMSSignerInvalidIndex' value64='5'/>
<enum name='kCMSSignerInvalidSignature' value64='3'/>
<enum name='kCMSSignerNeedsDetachedContent' value64='2'/>
<enum name='kCMSSignerUnsigned' value64='0'/>
<enum name='kCMSSignerValid' value64='1'/>
<enum name='kCSSM_APPLEDL_MASK_MODE' value64='1'/>
<enum name='kDTLSProtocol1' value64='9'/>
<enum name='kNeverAuthenticate' value64='0'/>
<enum name='kSSLAborted' value64='4'/>
<enum name='kSSLCiphersuiteGroupATS' value64='3'/>
<enum name='kSSLCiphersuiteGroupATSCompatibility' value64='4'/>
<enum name='kSSLCiphersuiteGroupCompatibility' value64='1'/>
<enum name='kSSLCiphersuiteGroupDefault' value64='0'/>
<enum name='kSSLCiphersuiteGroupLegacy' value64='2'/>
<enum name='kSSLClientCertNone' value64='0'/>
<enum name='kSSLClientCertRejected' value64='3'/>
<enum name='kSSLClientCertRequested' value64='1'/>
<enum name='kSSLClientCertSent' value64='2'/>
<enum name='kSSLClientSide' value64='1'/>
<enum name='kSSLClosed' value64='3'/>
<enum name='kSSLConnected' value64='2'/>
<enum name='kSSLDatagramType' value64='1'/>
<enum name='kSSLHandshake' value64='1'/>
<enum name='kSSLIdle' value64='0'/>
<enum name='kSSLProtocol2' value64='1'/>
<enum name='kSSLProtocol3' value64='2'/>
<enum name='kSSLProtocol3Only' value64='3'/>
<enum name='kSSLProtocolAll' value64='6'/>
<enum name='kSSLProtocolUnknown' value64='0'/>
<enum name='kSSLServerSide' value64='0'/>
<enum name='kSSLSessionOptionAllowRenegotiation' value64='8'/>
<enum name='kSSLSessionOptionAllowServerIdentityChange' value64='5'/>
<enum name='kSSLSessionOptionBreakOnCertRequested' value64='1'/>
<enum name='kSSLSessionOptionBreakOnClientAuth' value64='2'/>
<enum name='kSSLSessionOptionBreakOnClientHello' value64='7'/>
<enum name='kSSLSessionOptionBreakOnServerAuth' value64='0'/>
<enum name='kSSLSessionOptionEnableSessionTickets' value64='9'/>
<enum name='kSSLSessionOptionFallback' value64='6'/>
<enum name='kSSLSessionOptionFalseStart' value64='3'/>
<enum name='kSSLSessionOptionSendOneByteRecord' value64='4'/>
<enum name='kSSLStreamType' value64='0'/>
<enum name='kSec3DES192' value64='192'/>
<enum name='kSecAES128' value64='128'/>
<enum name='kSecAES192' value64='192'/>
<enum name='kSecAES256' value64='256'/>
<enum name='kSecAccessControlAnd' value64='32768'/>
<enum name='kSecAccessControlApplicationPassword' value64='2147483648'/>
<enum name='kSecAccessControlBiometryAny' value64='2'/>
<enum name='kSecAccessControlBiometryCurrentSet' value64='8'/>
<enum name='kSecAccessControlDevicePasscode' value64='16'/>
<enum name='kSecAccessControlOr' value64='16384'/>
<enum name='kSecAccessControlPrivateKeyUsage' value64='1073741824'/>
<enum name='kSecAccessControlTouchIDAny' value64='2'/>
<enum name='kSecAccessControlTouchIDCurrentSet' value64='8'/>
<enum name='kSecAccessControlUserPresence' value64='1'/>
<enum name='kSecAccountItemAttr' value64='1633903476'/>
<enum name='kSecAddEvent' value64='3'/>
<enum name='kSecAddEventMask' value64='8'/>
<enum name='kSecAddressItemAttr' value64='1633969266'/>
<enum name='kSecAlias' value64='1634494835'/>
<enum name='kSecAppleSharePasswordItemClass' value64='1634953328'/>
<enum name='kSecAuthenticationTypeAny' value64='0'/>
<enum name='kSecAuthenticationTypeDPA' value64='1633775716'/>
<enum name='kSecAuthenticationTypeDefault' value64='1953261156'/>
<enum name='kSecAuthenticationTypeHTMLForm' value64='1836216166'/>
<enum name='kSecAuthenticationTypeHTTPBasic' value64='1886680168'/>
<enum name='kSecAuthenticationTypeHTTPDigest' value64='1685353576'/>
<enum name='kSecAuthenticationTypeItemAttr' value64='1635023216'/>
<enum name='kSecAuthenticationTypeMSN' value64='1634628461'/>
<enum name='kSecAuthenticationTypeNTLM' value64='1835824238'/>
<enum name='kSecAuthenticationTypeRPA' value64='1633775730'/>
<enum name='kSecCSBasicValidateOnly' value64='6'/>
<enum name='kSecCSCheckAllArchitectures' value64='1'/>
<enum name='kSecCSCheckGatekeeperArchitectures' value64='65'/>
<enum name='kSecCSCheckNestedCode' value64='8'/>
<enum name='kSecCSCheckTrustedAnchors' value64='134217728'/>
<enum name='kSecCSConsiderExpiration' value64='2147483648'/>
<enum name='kSecCSContentInformation' value64='16'/>
<enum name='kSecCSDedicatedHost' value64='1'/>
<enum name='kSecCSDefaultFlags' value64='0'/>
<enum name='kSecCSDoNotValidateExecutable' value64='2'/>
<enum name='kSecCSDoNotValidateResources' value64='4'/>
<enum name='kSecCSDynamicInformation' value64='8'/>
<enum name='kSecCSEnforceRevocationChecks' value64='1073741824'/>
<enum name='kSecCSFullReport' value64='32'/>
<enum name='kSecCSGenerateGuestHash' value64='2'/>
<enum name='kSecCSInternalInformation' value64='1'/>
<enum name='kSecCSNoNetworkAccess' value64='536870912'/>
<enum name='kSecCSQuickCheck' value64='67108864'/>
<enum name='kSecCSReportProgress' value64='268435456'/>
<enum name='kSecCSRequirementInformation' value64='4'/>
<enum name='kSecCSRestrictSidebandData' value64='512'/>
<enum name='kSecCSRestrictSymlinks' value64='128'/>
<enum name='kSecCSRestrictToAppLike' value64='256'/>
<enum name='kSecCSSigningInformation' value64='2'/>
<enum name='kSecCSSkipResourceDirectory' value64='32'/>
<enum name='kSecCSStrictValidate' value64='16'/>
<enum name='kSecCSUseAllArchitectures' value64='1'/>
<enum name='kSecCSUseSoftwareSigningCert' value64='1024'/>
<enum name='kSecCSValidatePEH' value64='2048'/>
<enum name='kSecCertEncodingItemAttr' value64='1667591779'/>
<enum name='kSecCertTypeItemAttr' value64='1668577648'/>
<enum name='kSecCertificateEncoding' value64='1667591779'/>
<enum name='kSecCertificateItemClass' value64='2147487744'/>
<enum name='kSecCertificateType' value64='1668577648'/>
<enum name='kSecCodeSignatureAdhoc' value64='2'/>
<enum name='kSecCodeSignatureEnforcement' value64='4096'/>
<enum name='kSecCodeSignatureForceExpiration' value64='1024'/>
<enum name='kSecCodeSignatureForceHard' value64='256'/>
<enum name='kSecCodeSignatureForceKill' value64='512'/>
<enum name='kSecCodeSignatureHashSHA1' value64='1'/>
<enum name='kSecCodeSignatureHashSHA256' value64='2'/>
<enum name='kSecCodeSignatureHashSHA256Truncated' value64='3'/>
<enum name='kSecCodeSignatureHashSHA384' value64='4'/>
<enum name='kSecCodeSignatureHashSHA512' value64='5'/>
<enum name='kSecCodeSignatureHost' value64='1'/>
<enum name='kSecCodeSignatureLibraryValidation' value64='8192'/>
<enum name='kSecCodeSignatureNoHash' value64='0'/>
<enum name='kSecCodeSignatureRestrict' value64='2048'/>
<enum name='kSecCodeSignatureRuntime' value64='65536'/>
<enum name='kSecCodeStatusDebugged' value64='268435456'/>
<enum name='kSecCodeStatusHard' value64='256'/>
<enum name='kSecCodeStatusKill' value64='512'/>
<enum name='kSecCodeStatusPlatform' value64='67108864'/>
<enum name='kSecCodeStatusValid' value64='1'/>
<enum name='kSecCommentItemAttr' value64='1768123764'/>
<enum name='kSecCreationDateItemAttr' value64='1667522932'/>
<enum name='kSecCreatorItemAttr' value64='1668445298'/>
<enum name='kSecCredentialTypeDefault' value64='0'/>
<enum name='kSecCredentialTypeNoUI' value64='2'/>
<enum name='kSecCredentialTypeWithUI' value64='1'/>
<enum name='kSecCrlEncoding' value64='1668443747'/>
<enum name='kSecCrlType' value64='1668445296'/>
<enum name='kSecCustomIconItemAttr' value64='1668641641'/>
<enum name='kSecDataAccessEvent' value64='10'/>
<enum name='kSecDataAccessEventMask' value64='1024'/>
<enum name='kSecDefaultChangedEvent' value64='9'/>
<enum name='kSecDefaultChangedEventMask' value64='512'/>
<enum name='kSecDefaultKeySize' value64='0'/>
<enum name='kSecDeleteEvent' value64='4'/>
<enum name='kSecDeleteEventMask' value64='16'/>
<enum name='kSecDescriptionItemAttr' value64='1684370275'/>
<enum name='kSecDesignatedRequirementType' value64='3'/>
<enum name='kSecEveryEventMask' value64='4294967295'/>
<enum name='kSecFormatBSAFE' value64='3'/>
<enum name='kSecFormatNetscapeCertSequence' value64='13'/>
<enum name='kSecFormatOpenSSL' value64='1'/>
<enum name='kSecFormatPEMSequence' value64='10'/>
<enum name='kSecFormatPKCS12' value64='12'/>
<enum name='kSecFormatPKCS7' value64='11'/>
<enum name='kSecFormatRawKey' value64='4'/>
<enum name='kSecFormatSSH' value64='2'/>
<enum name='kSecFormatSSHv2' value64='14'/>
<enum name='kSecFormatUnknown' value64='0'/>
<enum name='kSecFormatWrappedLSH' value64='8'/>
<enum name='kSecFormatWrappedOpenSSL' value64='6'/>
<enum name='kSecFormatWrappedPKCS8' value64='5'/>
<enum name='kSecFormatWrappedSSH' value64='7'/>
<enum name='kSecFormatX509Cert' value64='9'/>
<enum name='kSecGenericItemAttr' value64='1734700641'/>
<enum name='kSecGenericPasswordItemClass' value64='1734700656'/>
<enum name='kSecGuestRequirementType' value64='2'/>
<enum name='kSecHonorRoot' value64='256'/>
<enum name='kSecHostRequirementType' value64='1'/>
<enum name='kSecInternetPasswordItemClass' value64='1768842612'/>
<enum name='kSecInvalidRequirementType' value64='6'/>
<enum name='kSecInvisibleItemAttr' value64='1768846953'/>
<enum name='kSecIssuerItemAttr' value64='1769173877'/>
<enum name='kSecItemPemArmour' value64='1'/>
<enum name='kSecItemTypeAggregate' value64='5'/>
<enum name='kSecItemTypeCertificate' value64='4'/>
<enum name='kSecItemTypePrivateKey' value64='1'/>
<enum name='kSecItemTypePublicKey' value64='2'/>
<enum name='kSecItemTypeSessionKey' value64='3'/>
<enum name='kSecItemTypeUnknown' value64='0'/>
<enum name='kSecKeyAlias' value64='2'/>
<enum name='kSecKeyAlwaysSensitive' value64='15'/>
<enum name='kSecKeyApplicationTag' value64='7'/>
<enum name='kSecKeyDecrypt' value64='19'/>
<enum name='kSecKeyDerive' value64='20'/>
<enum name='kSecKeyEffectiveKeySize' value64='11'/>
<enum name='kSecKeyEncrypt' value64='18'/>
<enum name='kSecKeyEndDate' value64='13'/>
<enum name='kSecKeyExtractable' value64='16'/>
<enum name='kSecKeyImportOnlyOne' value64='1'/>
<enum name='kSecKeyKeyClass' value64='0'/>
<enum name='kSecKeyKeyCreator' value64='8'/>
<enum name='kSecKeyKeySizeInBits' value64='10'/>
<enum name='kSecKeyKeyType' value64='9'/>
<enum name='kSecKeyLabel' value64='6'/>
<enum name='kSecKeyModifiable' value64='5'/>
<enum name='kSecKeyNeverExtractable' value64='17'/>
<enum name='kSecKeyNoAccessControl' value64='4'/>
<enum name='kSecKeyOperationTypeDecrypt' value64='3'/>
<enum name='kSecKeyOperationTypeEncrypt' value64='2'/>
<enum name='kSecKeyOperationTypeKeyExchange' value64='4'/>
<enum name='kSecKeyOperationTypeSign' value64='0'/>
<enum name='kSecKeyOperationTypeVerify' value64='1'/>
<enum name='kSecKeyPermanent' value64='3'/>
<enum name='kSecKeyPrintName' value64='1'/>
<enum name='kSecKeyPrivate' value64='4'/>
<enum name='kSecKeySecurePassphrase' value64='2'/>
<enum name='kSecKeySensitive' value64='14'/>
<enum name='kSecKeySign' value64='21'/>
<enum name='kSecKeySignRecover' value64='23'/>
<enum name='kSecKeyStartDate' value64='12'/>
<enum name='kSecKeyUnwrap' value64='26'/>
<enum name='kSecKeyUsageAll' value64='2147483647'/>
<enum name='kSecKeyUsageCRLSign' value64='64'/>
<enum name='kSecKeyUsageContentCommitment' value64='2'/>
<enum name='kSecKeyUsageCritical' value64='2147483648'/>
<enum name='kSecKeyUsageDataEncipherment' value64='8'/>
<enum name='kSecKeyUsageDecipherOnly' value64='256'/>
<enum name='kSecKeyUsageDigitalSignature' value64='1'/>
<enum name='kSecKeyUsageEncipherOnly' value64='128'/>
<enum name='kSecKeyUsageKeyAgreement' value64='16'/>
<enum name='kSecKeyUsageKeyCertSign' value64='32'/>
<enum name='kSecKeyUsageKeyEncipherment' value64='4'/>
<enum name='kSecKeyUsageNonRepudiation' value64='2'/>
<enum name='kSecKeyUsageUnspecified' value64='0'/>
<enum name='kSecKeyVerify' value64='22'/>
<enum name='kSecKeyVerifyRecover' value64='24'/>
<enum name='kSecKeyWrap' value64='25'/>
<enum name='kSecKeychainListChangedEvent' value64='11'/>
<enum name='kSecKeychainListChangedMask' value64='2048'/>
<enum name='kSecKeychainPromptInvalid' value64='64'/>
<enum name='kSecKeychainPromptInvalidAct' value64='128'/>
<enum name='kSecKeychainPromptRequirePassphase' value64='1'/>
<enum name='kSecKeychainPromptUnsigned' value64='16'/>
<enum name='kSecKeychainPromptUnsignedAct' value64='32'/>
<enum name='kSecLabelItemAttr' value64='1818321516'/>
<enum name='kSecLibraryRequirementType' value64='4'/>
<enum name='kSecLockEvent' value64='1'/>
<enum name='kSecLockEventMask' value64='2'/>
<enum name='kSecMatchBits' value64='3'/>
<enum name='kSecModDateItemAttr' value64='1835295092'/>
<enum name='kSecNegativeItemAttr' value64='1852139361'/>
<enum name='kSecNoGuest' value64='0'/>
<enum name='kSecPaddingNone' value64='0'/>
<enum name='kSecPaddingOAEP' value64='2'/>
<enum name='kSecPaddingPKCS1' value64='1'/>
<enum name='kSecPaddingPKCS1MD2' value64='32768'/>
<enum name='kSecPaddingPKCS1MD5' value64='32769'/>
<enum name='kSecPaddingPKCS1SHA1' value64='32770'/>
<enum name='kSecPaddingPKCS1SHA224' value64='32771'/>
<enum name='kSecPaddingPKCS1SHA256' value64='32772'/>
<enum name='kSecPaddingPKCS1SHA384' value64='32773'/>
<enum name='kSecPaddingPKCS1SHA512' value64='32774'/>
<enum name='kSecPaddingSigRaw' value64='16384'/>
<enum name='kSecPasswordChangedEvent' value64='6'/>
<enum name='kSecPasswordChangedEventMask' value64='64'/>
<enum name='kSecPathItemAttr' value64='1885434984'/>
<enum name='kSecPluginRequirementType' value64='5'/>
<enum name='kSecPortItemAttr' value64='1886351988'/>
<enum name='kSecPreferencesDomainCommon' value64='2'/>
<enum name='kSecPreferencesDomainDynamic' value64='3'/>
<enum name='kSecPreferencesDomainSystem' value64='1'/>
<enum name='kSecPreferencesDomainUser' value64='0'/>
<enum name='kSecPrivateKeyItemClass' value64='16'/>
<enum name='kSecProtocolItemAttr' value64='1886675820'/>
<enum name='kSecProtocolTypeAFP' value64='1634103328'/>
<enum name='kSecProtocolTypeAny' value64='0'/>
<enum name='kSecProtocolTypeAppleTalk' value64='1635019883'/>
<enum name='kSecProtocolTypeCIFS' value64='1667851891'/>
<enum name='kSecProtocolTypeCVSpserver' value64='1668707184'/>
<enum name='kSecProtocolTypeDAAP' value64='1684103536'/>
<enum name='kSecProtocolTypeEPPC' value64='1701867619'/>
<enum name='kSecProtocolTypeFTP' value64='1718906912'/>
<enum name='kSecProtocolTypeFTPAccount' value64='1718906977'/>
<enum name='kSecProtocolTypeFTPProxy' value64='1718907000'/>
<enum name='kSecProtocolTypeFTPS' value64='1718906995'/>
<enum name='kSecProtocolTypeHTTP' value64='1752462448'/>
<enum name='kSecProtocolTypeHTTPProxy' value64='1752461432'/>
<enum name='kSecProtocolTypeHTTPS' value64='1752461427'/>
<enum name='kSecProtocolTypeHTTPSProxy' value64='1752462200'/>
<enum name='kSecProtocolTypeIMAP' value64='1768776048'/>
<enum name='kSecProtocolTypeIMAPS' value64='1768779891'/>
<enum name='kSecProtocolTypeIPP' value64='1768976416'/>
<enum name='kSecProtocolTypeIRC' value64='1769104160'/>
<enum name='kSecProtocolTypeIRCS' value64='1769104243'/>
<enum name='kSecProtocolTypeLDAP' value64='1818517872'/>
<enum name='kSecProtocolTypeLDAPS' value64='1818521715'/>
<enum name='kSecProtocolTypeNNTP' value64='1852732528'/>
<enum name='kSecProtocolTypeNNTPS' value64='1853124723'/>
<enum name='kSecProtocolTypePOP3' value64='1886351411'/>
<enum name='kSecProtocolTypePOP3S' value64='1886351475'/>
<enum name='kSecProtocolTypeRTSP' value64='1920234352'/>
<enum name='kSecProtocolTypeRTSPProxy' value64='1920234360'/>
<enum name='kSecProtocolTypeSMB' value64='1936548384'/>
<enum name='kSecProtocolTypeSMTP' value64='1936553072'/>
<enum name='kSecProtocolTypeSOCKS' value64='1936685088'/>
<enum name='kSecProtocolTypeSSH' value64='1936943136'/>
<enum name='kSecProtocolTypeSVN' value64='1937141280'/>
<enum name='kSecProtocolTypeTelnet' value64='1952803950'/>
<enum name='kSecProtocolTypeTelnetS' value64='1952803955'/>
<enum name='kSecPublicKeyHashItemAttr' value64='1752198009'/>
<enum name='kSecPublicKeyItemClass' value64='15'/>
<enum name='kSecRSAMax' value64='4096'/>
<enum name='kSecRSAMin' value64='1024'/>
<enum name='kSecReadPermStatus' value64='2'/>
<enum name='kSecRequirementTypeCount' value64='6'/>
<enum name='kSecRevocationCRLMethod' value64='2'/>
<enum name='kSecRevocationNetworkAccessDisabled' value64='16'/>
<enum name='kSecRevocationOCSPMethod' value64='1'/>
<enum name='kSecRevocationPreferCRL' value64='4'/>
<enum name='kSecRevocationRequirePositiveResponse' value64='8'/>
<enum name='kSecRevocationUseAnyAvailableMethod' value64='3'/>
<enum name='kSecScriptCodeItemAttr' value64='1935897200'/>
<enum name='kSecSecurityDomainItemAttr' value64='1935961454'/>
<enum name='kSecSerialNumberItemAttr' value64='1936614002'/>
<enum name='kSecServerItemAttr' value64='1936881266'/>
<enum name='kSecServiceItemAttr' value64='1937138533'/>
<enum name='kSecSignatureItemAttr' value64='1936943463'/>
<enum name='kSecSubjectItemAttr' value64='1937072746'/>
<enum name='kSecSubjectKeyIdentifierItemAttr' value64='1936419172'/>
<enum name='kSecSymmetricKeyItemClass' value64='17'/>
<enum name='kSecTransformErrorAbortInProgress' value64='19'/>
<enum name='kSecTransformErrorAborted' value64='20'/>
<enum name='kSecTransformErrorAttributeNotFound' value64='1'/>
<enum name='kSecTransformErrorInvalidAlgorithm' value64='6'/>
<enum name='kSecTransformErrorInvalidConnection' value64='15'/>
<enum name='kSecTransformErrorInvalidInput' value64='10'/>
<enum name='kSecTransformErrorInvalidInputDictionary' value64='5'/>
<enum name='kSecTransformErrorInvalidLength' value64='7'/>
<enum name='kSecTransformErrorInvalidOperation' value64='2'/>
<enum name='kSecTransformErrorInvalidType' value64='8'/>
<enum name='kSecTransformErrorMissingParameter' value64='14'/>
<enum name='kSecTransformErrorMoreThanOneOutput' value64='4'/>
<enum name='kSecTransformErrorNameAlreadyRegistered' value64='11'/>
<enum name='kSecTransformErrorNotInitializedCorrectly' value64='3'/>
<enum name='kSecTransformErrorUnsupportedAttribute' value64='12'/>
<enum name='kSecTransformInvalidArgument' value64='21'/>
<enum name='kSecTransformInvalidOverride' value64='17'/>
<enum name='kSecTransformMetaAttributeCanCycle' value64='7'/>
<enum name='kSecTransformMetaAttributeDeferred' value64='5'/>
<enum name='kSecTransformMetaAttributeExternalize' value64='8'/>
<enum name='kSecTransformMetaAttributeHasInboundConnection' value64='10'/>
<enum name='kSecTransformMetaAttributeHasOutboundConnections' value64='9'/>
<enum name='kSecTransformMetaAttributeName' value64='1'/>
<enum name='kSecTransformMetaAttributeRef' value64='2'/>
<enum name='kSecTransformMetaAttributeRequired' value64='3'/>
<enum name='kSecTransformMetaAttributeRequiresOutboundConnection' value64='4'/>
<enum name='kSecTransformMetaAttributeStream' value64='6'/>
<enum name='kSecTransformMetaAttributeValue' value64='0'/>
<enum name='kSecTransformOperationNotSupportedOnGroup' value64='13'/>
<enum name='kSecTransformTransformIsExecuting' value64='16'/>
<enum name='kSecTransformTransformIsNotRegistered' value64='18'/>
<enum name='kSecTrustOptionAllowExpired' value64='1'/>
<enum name='kSecTrustOptionAllowExpiredRoot' value64='8'/>
<enum name='kSecTrustOptionFetchIssuerFromNet' value64='4'/>
<enum name='kSecTrustOptionImplicitAnchors' value64='64'/>
<enum name='kSecTrustOptionLeafIsCA' value64='2'/>
<enum name='kSecTrustOptionRequireRevPerCert' value64='16'/>
<enum name='kSecTrustOptionUseTrustSettings' value64='32'/>
<enum name='kSecTrustResultConfirm' value64='2'/>
<enum name='kSecTrustResultDeny' value64='3'/>
<enum name='kSecTrustResultFatalTrustFailure' value64='6'/>
<enum name='kSecTrustResultInvalid' value64='0'/>
<enum name='kSecTrustResultOtherError' value64='7'/>
<enum name='kSecTrustResultProceed' value64='1'/>
<enum name='kSecTrustResultRecoverableTrustFailure' value64='5'/>
<enum name='kSecTrustResultUnspecified' value64='4'/>
<enum name='kSecTrustSettingsChangedEvent' value64='12'/>
<enum name='kSecTrustSettingsChangedEventMask' value64='4096'/>
<enum name='kSecTrustSettingsDomainAdmin' value64='1'/>
<enum name='kSecTrustSettingsDomainSystem' value64='2'/>
<enum name='kSecTrustSettingsDomainUser' value64='0'/>
<enum name='kSecTrustSettingsKeyUseAny' value64='4294967295'/>
<enum name='kSecTrustSettingsKeyUseEnDecryptData' value64='2'/>
<enum name='kSecTrustSettingsKeyUseEnDecryptKey' value64='4'/>
<enum name='kSecTrustSettingsKeyUseKeyExchange' value64='32'/>
<enum name='kSecTrustSettingsKeyUseSignCert' value64='8'/>
<enum name='kSecTrustSettingsKeyUseSignRevocation' value64='16'/>
<enum name='kSecTrustSettingsKeyUseSignature' value64='1'/>
<enum name='kSecTrustSettingsResultDeny' value64='3'/>
<enum name='kSecTrustSettingsResultInvalid' value64='0'/>
<enum name='kSecTrustSettingsResultTrustAsRoot' value64='2'/>
<enum name='kSecTrustSettingsResultTrustRoot' value64='1'/>
<enum name='kSecTrustSettingsResultUnspecified' value64='4'/>
<enum name='kSecTypeItemAttr' value64='1954115685'/>
<enum name='kSecUnlockEvent' value64='2'/>
<enum name='kSecUnlockEventMask' value64='4'/>
<enum name='kSecUnlockStateStatus' value64='1'/>
<enum name='kSecUpdateEvent' value64='5'/>
<enum name='kSecUpdateEventMask' value64='32'/>
<enum name='kSecUseOnlyGID' value64='2'/>
<enum name='kSecUseOnlyUID' value64='1'/>
<enum name='kSecVolumeItemAttr' value64='1986817381'/>
<enum name='kSecWritePermStatus' value64='4'/>
<enum name='kSecp192r1' value64='192'/>
<enum name='kSecp256r1' value64='256'/>
<enum name='kSecp384r1' value64='384'/>
<enum name='kSecp521r1' value64='521'/>
<enum name='kSecureDownloadDoNotEvaluateSigner' value64='0'/>
<enum name='kSecureDownloadEvaluateSigner' value64='1'/>
<enum name='kSecureDownloadFailEvaluation' value64='2'/>
<enum name='kTLSProtocol1' value64='4'/>
<enum name='kTLSProtocol11' value64='7'/>
<enum name='kTLSProtocol12' value64='8'/>
<enum name='kTLSProtocol13' value64='10'/>
<enum name='kTLSProtocol1Only' value64='5'/>
<enum name='kTLSProtocolMaxSupported' value64='999'/>
<enum name='kTryAuthenticate' value64='2'/>
<enum name='noSecuritySession' value64='0'/>
<enum name='sessionHasGraphicAccess' value64='16'/>
<enum name='sessionHasTTY' value64='32'/>
<enum name='sessionIsRemote' value64='4096'/>
<enum name='sessionIsRoot' value64='1'/>
<enum name='sessionKeepCurrentBootstrap' value64='32768'/>
<function name='AuthorizationCopyInfo'>
<arg declared_type64='AuthorizationRef _Nonnull' name='authorization' type64='^{AuthorizationOpaqueRef=}'/>
<arg declared_type64='AuthorizationString _Nullable' name='tag' type64='*'/>
<arg declared_type64='AuthorizationItemSet * _Nullable * _Nonnull' name='info' type64='^^{?}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AuthorizationCopyPrivilegedReference'>
<arg declared_type64='AuthorizationRef _Nullable * _Nonnull' name='authorization' type64='^^{AuthorizationOpaqueRef}'/>
<arg declared_type64='AuthorizationFlags' name='flags' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AuthorizationCopyRights'>
<arg declared_type64='AuthorizationRef _Nonnull' name='authorization' type64='^{AuthorizationOpaqueRef=}'/>
<arg const='true' declared_type64='AuthorizationRights * _Nonnull' name='rights' type64='^{_AuthorizationRights=I^{?}}'/>
<arg const='true' declared_type64='AuthorizationEnvironment * _Nullable' name='environment' type64='^{_AuthorizationEnvironment=I^{?}}'/>
<arg declared_type64='AuthorizationFlags' name='flags' type64='I'/>
<arg declared_type64='AuthorizationRights * _Nullable * _Nullable' name='authorizedRights' type64='^^{?}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AuthorizationCopyRightsAsync'>
<arg declared_type64='AuthorizationRef _Nonnull' name='authorization' type64='^{AuthorizationOpaqueRef=}'/>
<arg const='true' declared_type64='AuthorizationRights * _Nonnull' name='rights' type64='^{_AuthorizationRights=I^{?}}'/>
<arg const='true' declared_type64='AuthorizationEnvironment * _Nullable' name='environment' type64='^{_AuthorizationEnvironment=I^{?}}'/>
<arg declared_type64='AuthorizationFlags' name='flags' type64='I'/>
<arg declared_type64='AuthorizationAsyncCallback _Nonnull' function_pointer='true' name='callbackBlock' type64='@?'>
<arg declared_type64='OSStatus' type64='i'/>
<arg declared_type64='AuthorizationRights * _Nullable' type64='^{_AuthorizationRights=I^{?}}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='AuthorizationCreate'>
<arg const='true' declared_type64='AuthorizationRights * _Nullable' name='rights' type64='^{_AuthorizationRights=I^{?}}'/>
<arg const='true' declared_type64='AuthorizationEnvironment * _Nullable' name='environment' type64='^{_AuthorizationEnvironment=I^{?}}'/>
<arg declared_type64='AuthorizationFlags' name='flags' type64='I'/>
<arg declared_type64='AuthorizationRef _Nullable * _Nullable' name='authorization' type64='^^{AuthorizationOpaqueRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AuthorizationCreateFromExternalForm'>
<arg const='true' declared_type64='AuthorizationExternalForm * _Nonnull' name='extForm' type64='^{_AuthorizationExternalForm=[32c]}'/>
<arg declared_type64='AuthorizationRef _Nullable * _Nonnull' name='authorization' type64='^^{AuthorizationOpaqueRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AuthorizationExecuteWithPrivileges'>
<arg declared_type64='AuthorizationRef _Nonnull' name='authorization' type64='^{AuthorizationOpaqueRef=}'/>
<arg const='true' declared_type64='char * _Nonnull' name='pathToTool' type64='*'/>
<arg declared_type64='AuthorizationFlags' name='options' type64='I'/>
<arg const='true' declared_type64='char * _Nonnull * _Nonnull' name='arguments' type64='^*'/>
<arg declared_type64='FILE * _Nullable * _Nullable' name='communicationsPipe' type64='^^{__sFILE}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AuthorizationFree'>
<arg declared_type64='AuthorizationRef _Nonnull' name='authorization' type64='^{AuthorizationOpaqueRef=}'/>
<arg declared_type64='AuthorizationFlags' name='flags' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AuthorizationFreeItemSet'>
<arg declared_type64='AuthorizationItemSet * _Nonnull' name='set' type64='^{_AuthorizationItemSet=I^{?}}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AuthorizationMakeExternalForm'>
<arg declared_type64='AuthorizationRef _Nonnull' name='authorization' type64='^{AuthorizationOpaqueRef=}'/>
<arg declared_type64='AuthorizationExternalForm * _Nonnull' name='extForm' type64='^{_AuthorizationExternalForm=[32c]}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AuthorizationPluginCreate'>
<arg const='true' declared_type64='AuthorizationCallbacks * _Nonnull' name='callbacks' type64='^{AuthorizationCallbacks=I^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<arg declared_type64='AuthorizationPluginRef _Nullable * _Nonnull' name='outPlugin' type64='^^v'/>
<arg const='true' declared_type64='AuthorizationPluginInterface * _Nullable * _Nonnull' name='outPluginInterface' type64='^^{AuthorizationPluginInterface}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AuthorizationRightGet'>
<arg const='true' declared_type64='char * _Nonnull' name='rightName' type64='*'/>
<arg declared_type64='CFDictionaryRef _Nullable * _Nullable' name='rightDefinition' type64='^^{__CFDictionary}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AuthorizationRightRemove'>
<arg declared_type64='AuthorizationRef _Nonnull' name='authRef' type64='^{AuthorizationOpaqueRef=}'/>
<arg const='true' declared_type64='char * _Nonnull' name='rightName' type64='*'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AuthorizationRightSet'>
<arg declared_type64='AuthorizationRef _Nonnull' name='authRef' type64='^{AuthorizationOpaqueRef=}'/>
<arg const='true' declared_type64='char * _Nonnull' name='rightName' type64='*'/>
<arg declared_type64='CFTypeRef _Nonnull' name='rightDefinition' type64='@'/>
<arg declared_type64='CFStringRef _Nullable' name='descriptionKey' type64='^{__CFString=}'/>
<arg declared_type64='CFBundleRef _Nullable' name='bundle' type64='^{__CFBundle=}'/>
<arg declared_type64='CFStringRef _Nullable' name='localeTableName' type64='^{__CFString=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSDecoderCopyAllCerts'>
<arg declared_type64='CMSDecoderRef _Nonnull' name='cmsDecoder' type64='^{_CMSDecoder=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='certsOut' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSDecoderCopyContent'>
<arg declared_type64='CMSDecoderRef _Nonnull' name='cmsDecoder' type64='^{_CMSDecoder=}'/>
<arg declared_type64='CFDataRef _Nullable * _Nonnull' name='contentOut' type64='^^{__CFData}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSDecoderCopyDetachedContent'>
<arg declared_type64='CMSDecoderRef _Nonnull' name='cmsDecoder' type64='^{_CMSDecoder=}'/>
<arg declared_type64='CFDataRef _Nullable * _Nonnull' name='detachedContentOut' type64='^^{__CFData}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSDecoderCopyEncapsulatedContentType'>
<arg declared_type64='CMSDecoderRef _Nonnull' name='cmsDecoder' type64='^{_CMSDecoder=}'/>
<arg declared_type64='CFDataRef _Nullable * _Nonnull' name='eContentTypeOut' type64='^^{__CFData}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSDecoderCopySignerCert'>
<arg declared_type64='CMSDecoderRef _Nonnull' name='cmsDecoder' type64='^{_CMSDecoder=}'/>
<arg declared_type64='size_t' name='signerIndex' type64='Q'/>
<arg declared_type64='SecCertificateRef _Nullable * _Nonnull' name='signerCertOut' type64='^^{OpaqueSecCertificateRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSDecoderCopySignerEmailAddress'>
<arg declared_type64='CMSDecoderRef _Nonnull' name='cmsDecoder' type64='^{_CMSDecoder=}'/>
<arg declared_type64='size_t' name='signerIndex' type64='Q'/>
<arg declared_type64='CFStringRef _Nullable * _Nonnull' name='signerEmailAddressOut' type64='^^{__CFString}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSDecoderCopySignerSigningTime'>
<arg declared_type64='CMSDecoderRef _Nonnull' name='cmsDecoder' type64='^{_CMSDecoder=}'/>
<arg declared_type64='size_t' name='signerIndex' type64='Q'/>
<arg declared_type64='CFAbsoluteTime * _Nonnull' name='signingTime' type64='^d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSDecoderCopySignerStatus'>
<arg declared_type64='CMSDecoderRef _Nonnull' name='cmsDecoder' type64='^{_CMSDecoder=}'/>
<arg declared_type64='size_t' name='signerIndex' type64='Q'/>
<arg declared_type64='CFTypeRef _Nonnull' name='policyOrArray' type64='@'/>
<arg declared_type64='Boolean' name='evaluateSecTrust' type64='B'/>
<arg declared_type64='CMSSignerStatus * _Nullable' name='signerStatusOut' type64='^I'/>
<arg declared_type64='SecTrustRef _Nullable * _Nullable' name='secTrustOut' type64='^^{__SecTrust}'/>
<arg declared_type64='OSStatus * _Nullable' name='certVerifyResultCodeOut' type64='^i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSDecoderCopySignerTimestamp'>
<arg declared_type64='CMSDecoderRef _Nonnull' name='cmsDecoder' type64='^{_CMSDecoder=}'/>
<arg declared_type64='size_t' name='signerIndex' type64='Q'/>
<arg declared_type64='CFAbsoluteTime * _Nonnull' name='timestamp' type64='^d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSDecoderCopySignerTimestampCertificates'>
<arg declared_type64='CMSDecoderRef _Nonnull' name='cmsDecoder' type64='^{_CMSDecoder=}'/>
<arg declared_type64='size_t' name='signerIndex' type64='Q'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='certificateRefs' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSDecoderCopySignerTimestampWithPolicy'>
<arg declared_type64='CMSDecoderRef _Nonnull' name='cmsDecoder' type64='^{_CMSDecoder=}'/>
<arg declared_type64='CFTypeRef _Nullable' name='timeStampPolicy' type64='@'/>
<arg declared_type64='size_t' name='signerIndex' type64='Q'/>
<arg declared_type64='CFAbsoluteTime * _Nonnull' name='timestamp' type64='^d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSDecoderCreate'>
<arg declared_type64='CMSDecoderRef _Nullable * _Nonnull' name='cmsDecoderOut' type64='^^{_CMSDecoder}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSDecoderFinalizeMessage'>
<arg declared_type64='CMSDecoderRef _Nonnull' name='cmsDecoder' type64='^{_CMSDecoder=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSDecoderGetNumSigners'>
<arg declared_type64='CMSDecoderRef _Nonnull' name='cmsDecoder' type64='^{_CMSDecoder=}'/>
<arg declared_type64='size_t * _Nonnull' name='numSignersOut' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSDecoderGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CMSDecoderIsContentEncrypted'>
<arg declared_type64='CMSDecoderRef _Nonnull' name='cmsDecoder' type64='^{_CMSDecoder=}'/>
<arg declared_type64='Boolean * _Nonnull' name='isEncryptedOut' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSDecoderSetDetachedContent'>
<arg declared_type64='CMSDecoderRef _Nonnull' name='cmsDecoder' type64='^{_CMSDecoder=}'/>
<arg declared_type64='CFDataRef _Nonnull' name='detachedContent' type64='^{__CFData=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSDecoderSetSearchKeychain'>
<arg declared_type64='CMSDecoderRef _Nonnull' name='cmsDecoder' type64='^{_CMSDecoder=}'/>
<arg declared_type64='CFTypeRef _Nonnull' name='keychainOrArray' type64='@'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSDecoderUpdateMessage'>
<arg declared_type64='CMSDecoderRef _Nonnull' name='cmsDecoder' type64='^{_CMSDecoder=}'/>
<arg const='true' declared_type64='void * _Nonnull' name='msgBytes' type64='^v'/>
<arg declared_type64='size_t' name='msgBytesLen' type64='Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncode'>
<arg declared_type64='CFTypeRef _Nullable' name='signers' type64='@'/>
<arg declared_type64='CFTypeRef _Nullable' name='recipients' type64='@'/>
<arg const='true' declared_type64='CSSM_OID * _Nullable' name='eContentType' type64='^{cssm_data=Q*}'/>
<arg declared_type64='Boolean' name='detachedContent' type64='B'/>
<arg declared_type64='CMSSignedAttributes' name='signedAttributes' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='content' type64='^v'/>
<arg declared_type64='size_t' name='contentLen' type64='Q'/>
<arg declared_type64='CFDataRef _Nullable * _Nonnull' name='encodedContentOut' type64='^^{__CFData}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncodeContent'>
<arg declared_type64='CFTypeRef _Nullable' name='signers' type64='@'/>
<arg declared_type64='CFTypeRef _Nullable' name='recipients' type64='@'/>
<arg declared_type64='CFTypeRef _Nullable' name='eContentTypeOID' type64='@'/>
<arg declared_type64='Boolean' name='detachedContent' type64='B'/>
<arg declared_type64='CMSSignedAttributes' name='signedAttributes' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='content' type64='^v'/>
<arg declared_type64='size_t' name='contentLen' type64='Q'/>
<arg declared_type64='CFDataRef _Nullable * _Nullable' name='encodedContentOut' type64='^^{__CFData}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncoderAddRecipients'>
<arg declared_type64='CMSEncoderRef _Nonnull' name='cmsEncoder' type64='^{_CMSEncoder=}'/>
<arg declared_type64='CFTypeRef _Nonnull' name='recipientOrArray' type64='@'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncoderAddSignedAttributes'>
<arg declared_type64='CMSEncoderRef _Nonnull' name='cmsEncoder' type64='^{_CMSEncoder=}'/>
<arg declared_type64='CMSSignedAttributes' name='signedAttributes' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncoderAddSigners'>
<arg declared_type64='CMSEncoderRef _Nonnull' name='cmsEncoder' type64='^{_CMSEncoder=}'/>
<arg declared_type64='CFTypeRef _Nonnull' name='signerOrArray' type64='@'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncoderAddSupportingCerts'>
<arg declared_type64='CMSEncoderRef _Nonnull' name='cmsEncoder' type64='^{_CMSEncoder=}'/>
<arg declared_type64='CFTypeRef _Nonnull' name='certOrArray' type64='@'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncoderCopyEncapsulatedContentType'>
<arg declared_type64='CMSEncoderRef _Nonnull' name='cmsEncoder' type64='^{_CMSEncoder=}'/>
<arg declared_type64='CFDataRef _Nullable * _Nonnull' name='eContentTypeOut' type64='^^{__CFData}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncoderCopyEncodedContent'>
<arg declared_type64='CMSEncoderRef _Nonnull' name='cmsEncoder' type64='^{_CMSEncoder=}'/>
<arg declared_type64='CFDataRef _Nullable * _Nonnull' name='encodedContentOut' type64='^^{__CFData}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncoderCopyRecipients'>
<arg declared_type64='CMSEncoderRef _Nonnull' name='cmsEncoder' type64='^{_CMSEncoder=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='recipientsOut' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncoderCopySignerTimestamp'>
<arg declared_type64='CMSEncoderRef _Nonnull' name='cmsEncoder' type64='^{_CMSEncoder=}'/>
<arg declared_type64='size_t' name='signerIndex' type64='Q'/>
<arg declared_type64='CFAbsoluteTime * _Nonnull' name='timestamp' type64='^d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncoderCopySignerTimestampWithPolicy'>
<arg declared_type64='CMSEncoderRef _Nonnull' name='cmsEncoder' type64='^{_CMSEncoder=}'/>
<arg declared_type64='CFTypeRef _Nullable' name='timeStampPolicy' type64='@'/>
<arg declared_type64='size_t' name='signerIndex' type64='Q'/>
<arg declared_type64='CFAbsoluteTime * _Nonnull' name='timestamp' type64='^d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncoderCopySigners'>
<arg declared_type64='CMSEncoderRef _Nonnull' name='cmsEncoder' type64='^{_CMSEncoder=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='signersOut' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncoderCopySupportingCerts'>
<arg declared_type64='CMSEncoderRef _Nonnull' name='cmsEncoder' type64='^{_CMSEncoder=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='certsOut' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncoderCreate'>
<arg declared_type64='CMSEncoderRef _Nullable * _Nonnull' name='cmsEncoderOut' type64='^^{_CMSEncoder}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncoderGetCertificateChainMode'>
<arg declared_type64='CMSEncoderRef _Nonnull' name='cmsEncoder' type64='^{_CMSEncoder=}'/>
<arg declared_type64='CMSCertificateChainMode * _Nonnull' name='chainModeOut' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncoderGetHasDetachedContent'>
<arg declared_type64='CMSEncoderRef _Nonnull' name='cmsEncoder' type64='^{_CMSEncoder=}'/>
<arg declared_type64='Boolean * _Nonnull' name='detachedContentOut' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncoderGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='CMSEncoderSetCertificateChainMode'>
<arg declared_type64='CMSEncoderRef _Nonnull' name='cmsEncoder' type64='^{_CMSEncoder=}'/>
<arg declared_type64='CMSCertificateChainMode' name='chainMode' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncoderSetEncapsulatedContentType'>
<arg declared_type64='CMSEncoderRef _Nonnull' name='cmsEncoder' type64='^{_CMSEncoder=}'/>
<arg const='true' declared_type64='CSSM_OID * _Nonnull' name='eContentType' type64='^{cssm_data=Q*}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncoderSetEncapsulatedContentTypeOID'>
<arg declared_type64='CMSEncoderRef _Nonnull' name='cmsEncoder' type64='^{_CMSEncoder=}'/>
<arg declared_type64='CFTypeRef _Nonnull' name='eContentTypeOID' type64='@'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncoderSetHasDetachedContent'>
<arg declared_type64='CMSEncoderRef _Nonnull' name='cmsEncoder' type64='^{_CMSEncoder=}'/>
<arg declared_type64='Boolean' name='detachedContent' type64='B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncoderSetSignerAlgorithm'>
<arg declared_type64='CMSEncoderRef _Nonnull' name='cmsEncoder' type64='^{_CMSEncoder=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='digestAlgorithm' type64='^{__CFString=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CMSEncoderUpdateContent'>
<arg declared_type64='CMSEncoderRef _Nonnull' name='cmsEncoder' type64='^{_CMSEncoder=}'/>
<arg const='true' declared_type64='void * _Nonnull' name='content' type64='^v'/>
<arg declared_type64='size_t' name='contentLen' type64='Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CSSM_AC_AuthCompute'>
<arg declared_type64='CSSM_AC_HANDLE' name='ACHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_TUPLEGROUP*' name='BaseAuthorizations' type64='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
<arg const='true' declared_type64='CSSM_TUPLEGROUP*' name='Credentials' type64='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
<arg declared_type64='uint32' name='NumberOfRequestors' type64='I'/>
<arg const='true' declared_type64='CSSM_LIST*' name='Requestors' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg const='true' declared_type64='CSSM_LIST*' name='RequestedAuthorizationPeriod' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg const='true' declared_type64='CSSM_LIST*' name='RequestedAuthorization' type64='^{cssm_list=I^{cssm_list_element}^{cssm_list_element}}'/>
<arg declared_type64='CSSM_TUPLEGROUP_PTR' name='AuthorizationResult' type64='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_AC_PassThrough'>
<arg declared_type64='CSSM_AC_HANDLE' name='ACHandle' type64='q'/>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DL_DB_LIST*' name='DBList' type64='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
<arg declared_type64='uint32' name='PassThroughId' type64='I'/>
<arg const='true' declared_type64='void*' name='InputParams' type64='^v'/>
<arg declared_type64='void**' name='OutputParams' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CertAbortCache'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_HANDLE' name='CertHandle' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CertAbortQuery'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_HANDLE' name='ResultsHandle' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CertCache'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Cert' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' name='CertHandle' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CertCreateTemplate'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='uint32' name='NumberOfFields' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' name='CertFields' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' name='CertTemplate' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CertDescribeFormat'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='uint32*' name='NumberOfFields' type64='^I'/>
<arg declared_type64='CSSM_OID_PTR*' name='OidList' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CertGetAllFields'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Cert' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' name='NumberOfFields' type64='^I'/>
<arg declared_type64='CSSM_FIELD_PTR*' name='CertFields' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CertGetAllTemplateFields'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='CertTemplate' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' name='NumberOfFields' type64='^I'/>
<arg declared_type64='CSSM_FIELD_PTR*' name='CertFields' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CertGetFirstCachedFieldValue'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_HANDLE' name='CertHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_OID*' name='CertField' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' name='ResultsHandle' type64='^q'/>
<arg declared_type64='uint32*' name='NumberOfMatchedFields' type64='^I'/>
<arg declared_type64='CSSM_DATA_PTR*' name='Value' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CertGetFirstFieldValue'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Cert' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_OID*' name='CertField' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' name='ResultsHandle' type64='^q'/>
<arg declared_type64='uint32*' name='NumberOfMatchedFields' type64='^I'/>
<arg declared_type64='CSSM_DATA_PTR*' name='Value' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CertGetKeyInfo'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Cert' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_KEY_PTR*' name='Key' type64='^^{cssm_key}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CertGetNextCachedFieldValue'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_HANDLE' name='ResultsHandle' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR*' name='Value' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CertGetNextFieldValue'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_HANDLE' name='ResultsHandle' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR*' name='Value' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CertGroupFromVerifiedBundle'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_CERT_BUNDLE*' name='CertBundle' type64='^{cssm_cert_bundle={cssm_cert_bundle_header=II}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DATA*' name='SignerCert' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_CERTGROUP_PTR*' name='CertGroup' type64='^^{cssm_certgroup}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CertGroupToSignedBundle'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' name='CertGroupToBundle' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_CERT_BUNDLE_HEADER*' name='BundleInfo' type64='^{cssm_cert_bundle_header=II}'/>
<arg declared_type64='CSSM_DATA_PTR' name='SignedBundle' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CertSign'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='CertTemplate' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_FIELD*' name='SignScope' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' name='ScopeSize' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' name='SignedCert' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CertVerify'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='CertToBeVerified' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_DATA*' name='SignerCert' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_FIELD*' name='VerifyScope' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' name='ScopeSize' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CertVerifyWithKey'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='CertToBeVerified' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CrlAbortCache'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_HANDLE' name='CrlHandle' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CrlAbortQuery'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_HANDLE' name='ResultsHandle' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CrlAddCert'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Cert' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='NumberOfFields' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' name='CrlEntryFields' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DATA*' name='OldCrl' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DATA_PTR' name='NewCrl' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CrlCache'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Crl' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' name='CrlHandle' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CrlCreateTemplate'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='uint32' name='NumberOfFields' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' name='CrlTemplate' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' name='NewCrl' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CrlDescribeFormat'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='uint32*' name='NumberOfFields' type64='^I'/>
<arg declared_type64='CSSM_OID_PTR*' name='OidList' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CrlGetAllCachedRecordFields'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_HANDLE' name='CrlHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='CrlRecordIndex' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' name='NumberOfFields' type64='^I'/>
<arg declared_type64='CSSM_FIELD_PTR*' name='CrlFields' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CrlGetAllFields'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Crl' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' name='NumberOfCrlFields' type64='^I'/>
<arg declared_type64='CSSM_FIELD_PTR*' name='CrlFields' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CrlGetFirstCachedFieldValue'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_HANDLE' name='CrlHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='CrlRecordIndex' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_OID*' name='CrlField' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' name='ResultsHandle' type64='^q'/>
<arg declared_type64='uint32*' name='NumberOfMatchedFields' type64='^I'/>
<arg declared_type64='CSSM_DATA_PTR*' name='Value' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CrlGetFirstFieldValue'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Crl' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_OID*' name='CrlField' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE_PTR' name='ResultsHandle' type64='^q'/>
<arg declared_type64='uint32*' name='NumberOfMatchedFields' type64='^I'/>
<arg declared_type64='CSSM_DATA_PTR*' name='Value' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CrlGetNextCachedFieldValue'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_HANDLE' name='ResultsHandle' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR*' name='Value' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CrlGetNextFieldValue'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_HANDLE' name='ResultsHandle' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR*' name='Value' type64='^^{cssm_data}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CrlRemoveCert'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Cert' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_DATA*' name='OldCrl' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DATA_PTR' name='NewCrl' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CrlSetFields'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='uint32' name='NumberOfFields' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' name='CrlTemplate' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DATA*' name='OldCrl' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DATA_PTR' name='ModifiedCrl' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CrlSign'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='UnsignedCrl' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_FIELD*' name='SignScope' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' name='ScopeSize' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' name='SignedCrl' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CrlVerify'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='CrlToBeVerified' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_DATA*' name='SignerCert' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_FIELD*' name='VerifyScope' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' name='ScopeSize' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_CrlVerifyWithKey'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='CrlToBeVerified' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_FreeFieldValue'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_OID*' name='CertOrCrlOid' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DATA_PTR' name='Value' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_FreeFields'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='uint32' name='NumberOfFields' type64='I'/>
<arg declared_type64='CSSM_FIELD_PTR*' name='Fields' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_IsCertInCachedCrl'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Cert' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_HANDLE' name='CrlHandle' type64='q'/>
<arg declared_type64='CSSM_BOOL*' name='CertFound' type64='^i'/>
<arg declared_type64='CSSM_DATA_PTR' name='CrlRecordIndex' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_IsCertInCrl'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Cert' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Crl' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_BOOL*' name='CertFound' type64='^i'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CL_PassThrough'>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='uint32' name='PassThroughId' type64='I'/>
<arg const='true' declared_type64='void*' name='InputParams' type64='^v'/>
<arg declared_type64='void**' name='OutputParams' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CSP_ChangeLoginAcl'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' name='AccessCred' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_ACL_EDIT*' name='AclEdit' type64='^{cssm_acl_edit=Iq^{cssm_acl_entry_input}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CSP_ChangeLoginOwner'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' name='AccessCred' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_ACL_OWNER_PROTOTYPE*' name='NewOwner' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CSP_CreateAsymmetricContext'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg declared_type64='CSSM_ALGORITHMS' name='AlgorithmID' type64='I'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' name='AccessCred' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_KEY*' name='Key' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_PADDING' name='Padding' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE*' name='NewContextHandle' type64='^Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CSP_CreateDeriveKeyContext'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg declared_type64='CSSM_ALGORITHMS' name='AlgorithmID' type64='I'/>
<arg declared_type64='CSSM_KEY_TYPE' name='DeriveKeyType' type64='I'/>
<arg declared_type64='uint32' name='DeriveKeyLengthInBits' type64='I'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' name='AccessCred' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_KEY*' name='BaseKey' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' name='IterationCount' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Salt' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_CRYPTO_DATA*' name='Seed' type64='^{cssm_crypto_data={cssm_data=Q*}^?^v}'/>
<arg declared_type64='CSSM_CC_HANDLE*' name='NewContextHandle' type64='^Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CSP_CreateDigestContext'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg declared_type64='CSSM_ALGORITHMS' name='AlgorithmID' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE*' name='NewContextHandle' type64='^Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CSP_CreateKeyGenContext'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg declared_type64='CSSM_ALGORITHMS' name='AlgorithmID' type64='I'/>
<arg declared_type64='uint32' name='KeySizeInBits' type64='I'/>
<arg const='true' declared_type64='CSSM_CRYPTO_DATA*' name='Seed' type64='^{cssm_crypto_data={cssm_data=Q*}^?^v}'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Salt' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_DATE*' name='StartDate' type64='^{cssm_date=[4C][2C][2C]}'/>
<arg const='true' declared_type64='CSSM_DATE*' name='EndDate' type64='^{cssm_date=[4C][2C][2C]}'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Params' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_CC_HANDLE*' name='NewContextHandle' type64='^Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CSP_CreateMacContext'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg declared_type64='CSSM_ALGORITHMS' name='AlgorithmID' type64='I'/>
<arg const='true' declared_type64='CSSM_KEY*' name='Key' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_CC_HANDLE*' name='NewContextHandle' type64='^Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CSP_CreatePassThroughContext'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_KEY*' name='Key' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_CC_HANDLE*' name='NewContextHandle' type64='^Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CSP_CreateRandomGenContext'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg declared_type64='CSSM_ALGORITHMS' name='AlgorithmID' type64='I'/>
<arg const='true' declared_type64='CSSM_CRYPTO_DATA*' name='Seed' type64='^{cssm_crypto_data={cssm_data=Q*}^?^v}'/>
<arg declared_type64='CSSM_SIZE' name='Length' type64='Q'/>
<arg declared_type64='CSSM_CC_HANDLE*' name='NewContextHandle' type64='^Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CSP_CreateSignatureContext'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg declared_type64='CSSM_ALGORITHMS' name='AlgorithmID' type64='I'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' name='AccessCred' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_KEY*' name='Key' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_CC_HANDLE*' name='NewContextHandle' type64='^Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CSP_CreateSymmetricContext'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg declared_type64='CSSM_ALGORITHMS' name='AlgorithmID' type64='I'/>
<arg declared_type64='CSSM_ENCRYPT_MODE' name='Mode' type64='I'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' name='AccessCred' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_KEY*' name='Key' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DATA*' name='InitVector' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_PADDING' name='Padding' type64='I'/>
<arg declared_type64='void*' name='Reserved' type64='^v'/>
<arg declared_type64='CSSM_CC_HANDLE*' name='NewContextHandle' type64='^Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CSP_GetLoginAcl'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_STRING*' name='SelectionTag' type64='^[68c]'/>
<arg declared_type64='uint32*' name='NumberOfAclInfos' type64='^I'/>
<arg declared_type64='CSSM_ACL_ENTRY_INFO_PTR*' name='AclInfos' type64='^^{cssm_acl_entry_info}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CSP_GetLoginOwner'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg declared_type64='CSSM_ACL_OWNER_PROTOTYPE_PTR' name='Owner' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CSP_GetOperationalStatistics'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg declared_type64='CSSM_CSP_OPERATIONAL_STATISTICS*' name='Statistics' type64='^{cssm_csp_operational_statistics=iIIIIIIIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CSP_Login'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' name='AccessCred' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_DATA*' name='LoginName' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='void*' name='Reserved' type64='^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CSP_Logout'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CSP_ObtainPrivateKeyFromPublicKey'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_KEY*' name='PublicKey' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_KEY_PTR' name='PrivateKey' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_CSP_PassThrough'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='uint32' name='PassThroughId' type64='I'/>
<arg const='true' declared_type64='void*' name='InData' type64='^v'/>
<arg declared_type64='void**' name='OutData' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_ChangeKeyAcl'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' name='AccessCred' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_ACL_EDIT*' name='AclEdit' type64='^{cssm_acl_edit=Iq^{cssm_acl_entry_input}}'/>
<arg const='true' declared_type64='CSSM_KEY*' name='Key' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_ChangeKeyOwner'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' name='AccessCred' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_KEY*' name='Key' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_ACL_OWNER_PROTOTYPE*' name='NewOwner' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_Authenticate'>
<arg declared_type64='CSSM_DL_DB_HANDLE' name='DLDBHandle' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_ACCESS_TYPE' name='AccessRequest' type64='I'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' name='AccessCred' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_ChangeDbAcl'>
<arg declared_type64='CSSM_DL_DB_HANDLE' name='DLDBHandle' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' name='AccessCred' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_ACL_EDIT*' name='AclEdit' type64='^{cssm_acl_edit=Iq^{cssm_acl_entry_input}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_ChangeDbOwner'>
<arg declared_type64='CSSM_DL_DB_HANDLE' name='DLDBHandle' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' name='AccessCred' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_ACL_OWNER_PROTOTYPE*' name='NewOwner' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_CreateRelation'>
<arg declared_type64='CSSM_DL_DB_HANDLE' name='DLDBHandle' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' name='RelationID' type64='I'/>
<arg const='true' declared_type64='char*' name='RelationName' type64='*'/>
<arg declared_type64='uint32' name='NumberOfAttributes' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_SCHEMA_ATTRIBUTE_INFO*' name='pAttributeInfo' type64='^{cssm_db_schema_attribute_info=I*{cssm_data=Q*}I}'/>
<arg declared_type64='uint32' name='NumberOfIndexes' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_SCHEMA_INDEX_INFO*' name='pIndexInfo' type64='^{cssm_db_schema_index_info=IIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_DataAbortQuery'>
<arg declared_type64='CSSM_DL_DB_HANDLE' name='DLDBHandle' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_HANDLE' name='ResultsHandle' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_DataDelete'>
<arg declared_type64='CSSM_DL_DB_HANDLE' name='DLDBHandle' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_DB_UNIQUE_RECORD*' name='UniqueRecordIdentifier' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_DataGetFirst'>
<arg declared_type64='CSSM_DL_DB_HANDLE' name='DLDBHandle' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_QUERY*' name='Query' type64='^{cssm_query=III^{cssm_selection_predicate}{cssm_query_limits=II}I}'/>
<arg declared_type64='CSSM_HANDLE_PTR' name='ResultsHandle' type64='^q'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' name='Attributes' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' name='Data' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' name='UniqueId' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_DataGetFromUniqueRecordId'>
<arg declared_type64='CSSM_DL_DB_HANDLE' name='DLDBHandle' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_DB_UNIQUE_RECORD*' name='UniqueRecord' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' name='Attributes' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' name='Data' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_DataGetNext'>
<arg declared_type64='CSSM_DL_DB_HANDLE' name='DLDBHandle' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_HANDLE' name='ResultsHandle' type64='q'/>
<arg declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR' name='Attributes' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg declared_type64='CSSM_DATA_PTR' name='Data' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' name='UniqueId' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_DataInsert'>
<arg declared_type64='CSSM_DL_DB_HANDLE' name='DLDBHandle' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' name='RecordType' type64='I'/>
<arg const='true' declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA*' name='Attributes' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Data' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR*' name='UniqueId' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_DataModify'>
<arg declared_type64='CSSM_DL_DB_HANDLE' name='DLDBHandle' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' name='RecordType' type64='I'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR' name='UniqueRecordIdentifier' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DB_RECORD_ATTRIBUTE_DATA*' name='AttributesToBeModified' type64='^{cssm_db_record_attribute_data=III^{cssm_db_attribute_data}}'/>
<arg const='true' declared_type64='CSSM_DATA*' name='DataToBeModified' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_DB_MODIFY_MODE' name='ModifyMode' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_DbClose'>
<arg declared_type64='CSSM_DL_DB_HANDLE' name='DLDBHandle' type64='{cssm_dl_db_handle=qq}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_DbCreate'>
<arg declared_type64='CSSM_DL_HANDLE' name='DLHandle' type64='q'/>
<arg const='true' declared_type64='char*' name='DbName' type64='*'/>
<arg const='true' declared_type64='CSSM_NET_ADDRESS*' name='DbLocation' type64='^{cssm_net_address=I{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DBINFO*' name='DBInfo' type64='^{cssm_dbinfo=I^{cssm_db_parsing_module_info}^{cssm_db_record_attribute_info}^{cssm_db_record_index_info}i*^v}'/>
<arg declared_type64='CSSM_DB_ACCESS_TYPE' name='AccessRequest' type64='I'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' name='CredAndAclEntry' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg const='true' declared_type64='void*' name='OpenParameters' type64='^v'/>
<arg declared_type64='CSSM_DB_HANDLE*' name='DbHandle' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_DbDelete'>
<arg declared_type64='CSSM_DL_HANDLE' name='DLHandle' type64='q'/>
<arg const='true' declared_type64='char*' name='DbName' type64='*'/>
<arg const='true' declared_type64='CSSM_NET_ADDRESS*' name='DbLocation' type64='^{cssm_net_address=I{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' name='AccessCred' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_DbOpen'>
<arg declared_type64='CSSM_DL_HANDLE' name='DLHandle' type64='q'/>
<arg const='true' declared_type64='char*' name='DbName' type64='*'/>
<arg const='true' declared_type64='CSSM_NET_ADDRESS*' name='DbLocation' type64='^{cssm_net_address=I{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DB_ACCESS_TYPE' name='AccessRequest' type64='I'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' name='AccessCred' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='void*' name='OpenParameters' type64='^v'/>
<arg declared_type64='CSSM_DB_HANDLE*' name='DbHandle' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_DestroyRelation'>
<arg declared_type64='CSSM_DL_DB_HANDLE' name='DLDBHandle' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_RECORDTYPE' name='RelationID' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_FreeNameList'>
<arg declared_type64='CSSM_DL_HANDLE' name='DLHandle' type64='q'/>
<arg declared_type64='CSSM_NAME_LIST_PTR' name='NameList' type64='^{cssm_name_list=I^*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_FreeUniqueRecord'>
<arg declared_type64='CSSM_DL_DB_HANDLE' name='DLDBHandle' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_DB_UNIQUE_RECORD_PTR' name='UniqueRecord' type64='^{cssm_db_unique_record={cssm_db_index_info=II{cssm_db_attribute_info=I(cssm_db_attribute_label=*{cssm_data=Q*}I)I}}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_GetDbAcl'>
<arg declared_type64='CSSM_DL_DB_HANDLE' name='DLDBHandle' type64='{cssm_dl_db_handle=qq}'/>
<arg const='true' declared_type64='CSSM_STRING*' name='SelectionTag' type64='^[68c]'/>
<arg declared_type64='uint32*' name='NumberOfAclInfos' type64='^I'/>
<arg declared_type64='CSSM_ACL_ENTRY_INFO_PTR*' name='AclInfos' type64='^^{cssm_acl_entry_info}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_GetDbNameFromHandle'>
<arg declared_type64='CSSM_DL_DB_HANDLE' name='DLDBHandle' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='char**' name='DbName' type64='^*'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_GetDbNames'>
<arg declared_type64='CSSM_DL_HANDLE' name='DLHandle' type64='q'/>
<arg declared_type64='CSSM_NAME_LIST_PTR*' name='NameList' type64='^^{cssm_name_list}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_GetDbOwner'>
<arg declared_type64='CSSM_DL_DB_HANDLE' name='DLDBHandle' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='CSSM_ACL_OWNER_PROTOTYPE_PTR' name='Owner' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DL_PassThrough'>
<arg declared_type64='CSSM_DL_DB_HANDLE' name='DLDBHandle' type64='{cssm_dl_db_handle=qq}'/>
<arg declared_type64='uint32' name='PassThroughId' type64='I'/>
<arg const='true' declared_type64='void*' name='InputParams' type64='^v'/>
<arg declared_type64='void**' name='OutputParams' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DecryptData'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='CipherBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='CipherBufCount' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' name='ClearBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='ClearBufCount' type64='I'/>
<arg declared_type64='CSSM_SIZE*' name='bytesDecrypted' type64='^Q'/>
<arg declared_type64='CSSM_DATA_PTR' name='RemData' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DecryptDataFinal'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' name='RemData' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DecryptDataInit'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DecryptDataInitP'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='CSSM_PRIVILEGE' name='Privilege' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DecryptDataP'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='CipherBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='CipherBufCount' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' name='ClearBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='ClearBufCount' type64='I'/>
<arg declared_type64='CSSM_SIZE*' name='bytesDecrypted' type64='^Q'/>
<arg declared_type64='CSSM_DATA_PTR' name='RemData' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_PRIVILEGE' name='Privilege' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DecryptDataUpdate'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='CipherBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='CipherBufCount' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' name='ClearBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='ClearBufCount' type64='I'/>
<arg declared_type64='CSSM_SIZE*' name='bytesDecrypted' type64='^Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DeleteContext'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DeleteContextAttributes'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='uint32' name='NumberOfAttributes' type64='I'/>
<arg const='true' declared_type64='CSSM_CONTEXT_ATTRIBUTE*' name='ContextAttributes' type64='^{cssm_context_attribute=II(cssm_context_attribute_value=*I^{cssm_access_credentials}^{cssm_key}^{cssm_data}I^{cssm_date}^{cssm_range}^{cssm_crypto_data}^{cssm_version}^{cssm_dl_db_handle}^{cssm_kr_profile})}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DeriveKey'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' name='Param' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='KeyUsage' type64='I'/>
<arg declared_type64='uint32' name='KeyAttr' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' name='KeyLabel' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' name='CredAndAclEntry' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='CSSM_KEY_PTR' name='DerivedKey' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DigestData'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='DataBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='DataBufCount' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' name='Digest' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DigestDataClone'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='CSSM_CC_HANDLE*' name='ClonednewCCHandle' type64='^Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DigestDataFinal'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' name='Digest' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DigestDataInit'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_DigestDataUpdate'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='DataBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='DataBufCount' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_EncryptData'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='ClearBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='ClearBufCount' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' name='CipherBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='CipherBufCount' type64='I'/>
<arg declared_type64='CSSM_SIZE*' name='bytesEncrypted' type64='^Q'/>
<arg declared_type64='CSSM_DATA_PTR' name='RemData' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_EncryptDataFinal'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' name='RemData' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_EncryptDataInit'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_EncryptDataInitP'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='CSSM_PRIVILEGE' name='Privilege' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_EncryptDataP'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='ClearBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='ClearBufCount' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' name='CipherBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='CipherBufCount' type64='I'/>
<arg declared_type64='CSSM_SIZE*' name='bytesEncrypted' type64='^Q'/>
<arg declared_type64='CSSM_DATA_PTR' name='RemData' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_PRIVILEGE' name='Privilege' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_EncryptDataUpdate'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='ClearBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='ClearBufCount' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' name='CipherBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='CipherBufCount' type64='I'/>
<arg declared_type64='CSSM_SIZE*' name='bytesEncrypted' type64='^Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_FreeContext'>
<arg declared_type64='CSSM_CONTEXT_PTR' name='Context' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_FreeKey'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' name='AccessCred' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg declared_type64='CSSM_KEY_PTR' name='KeyPtr' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_BOOL' name='Delete' type64='i'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_GenerateAlgorithmParams'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='uint32' name='ParamBits' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' name='Param' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_GenerateKey'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='uint32' name='KeyUsage' type64='I'/>
<arg declared_type64='uint32' name='KeyAttr' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' name='KeyLabel' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' name='CredAndAclEntry' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='CSSM_KEY_PTR' name='Key' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_GenerateKeyP'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='uint32' name='KeyUsage' type64='I'/>
<arg declared_type64='uint32' name='KeyAttr' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' name='KeyLabel' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' name='CredAndAclEntry' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='CSSM_KEY_PTR' name='Key' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_PRIVILEGE' name='Privilege' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_GenerateKeyPair'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='uint32' name='PublicKeyUsage' type64='I'/>
<arg declared_type64='uint32' name='PublicKeyAttr' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' name='PublicKeyLabel' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_KEY_PTR' name='PublicKey' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' name='PrivateKeyUsage' type64='I'/>
<arg declared_type64='uint32' name='PrivateKeyAttr' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' name='PrivateKeyLabel' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' name='CredAndAclEntry' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='CSSM_KEY_PTR' name='PrivateKey' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_GenerateKeyPairP'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='uint32' name='PublicKeyUsage' type64='I'/>
<arg declared_type64='uint32' name='PublicKeyAttr' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' name='PublicKeyLabel' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_KEY_PTR' name='PublicKey' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' name='PrivateKeyUsage' type64='I'/>
<arg declared_type64='uint32' name='PrivateKeyAttr' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' name='PrivateKeyLabel' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' name='CredAndAclEntry' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='CSSM_KEY_PTR' name='PrivateKey' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_PRIVILEGE' name='Privilege' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_GenerateMac'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='DataBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='DataBufCount' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' name='Mac' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_GenerateMacFinal'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' name='Mac' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_GenerateMacInit'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_GenerateMacUpdate'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='DataBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='DataBufCount' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_GenerateRandom'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' name='RandomNumber' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_GetAPIMemoryFunctions'>
<arg declared_type64='CSSM_MODULE_HANDLE' name='AddInHandle' type64='q'/>
<arg declared_type64='CSSM_API_MEMORY_FUNCS_PTR' name='AppMemoryFuncs' type64='^{cssm_memory_funcs=^?^?^?^?^v}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_GetContext'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='CSSM_CONTEXT_PTR*' name='Context' type64='^^{cssm_context}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_GetContextAttribute'>
<arg const='true' declared_type64='CSSM_CONTEXT*' name='Context' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<arg declared_type64='uint32' name='AttributeType' type64='I'/>
<arg declared_type64='CSSM_CONTEXT_ATTRIBUTE_PTR*' name='ContextAttribute' type64='^^{cssm_context_attribute}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_GetKeyAcl'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_KEY*' name='Key' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_STRING*' name='SelectionTag' type64='^[68c]'/>
<arg declared_type64='uint32*' name='NumberOfAclInfos' type64='^I'/>
<arg declared_type64='CSSM_ACL_ENTRY_INFO_PTR*' name='AclInfos' type64='^^{cssm_acl_entry_info}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_GetKeyOwner'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_KEY*' name='Key' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_ACL_OWNER_PROTOTYPE_PTR' name='Owner' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_GetModuleGUIDFromHandle'>
<arg declared_type64='CSSM_MODULE_HANDLE' name='ModuleHandle' type64='q'/>
<arg declared_type64='CSSM_GUID_PTR' name='ModuleGUID' type64='^{cssm_guid=ISS[8C]}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_GetPrivilege'>
<arg declared_type64='CSSM_PRIVILEGE*' name='Privilege' type64='^Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_GetSubserviceUIDFromHandle'>
<arg declared_type64='CSSM_MODULE_HANDLE' name='ModuleHandle' type64='q'/>
<arg declared_type64='CSSM_SUBSERVICE_UID_PTR' name='SubserviceUID' type64='^{cssm_subservice_uid={cssm_guid=ISS[8C]}{cssm_version=II}II}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_GetTimeValue'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg declared_type64='CSSM_ALGORITHMS' name='TimeAlgorithm' type64='I'/>
<arg declared_type64='CSSM_DATA*' name='TimeData' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_Init'>
<arg const='true' declared_type64='CSSM_VERSION*' name='Version' type64='^{cssm_version=II}'/>
<arg declared_type64='CSSM_PRIVILEGE_SCOPE' name='Scope' type64='I'/>
<arg const='true' declared_type64='CSSM_GUID*' name='CallerGuid' type64='^{cssm_guid=ISS[8C]}'/>
<arg declared_type64='CSSM_KEY_HIERARCHY' name='KeyHierarchy' type64='I'/>
<arg declared_type64='CSSM_PVC_MODE*' name='PvcPolicy' type64='^I'/>
<arg const='true' declared_type64='void*' name='Reserved' type64='^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_Introduce'>
<arg const='true' declared_type64='CSSM_GUID*' name='ModuleID' type64='^{cssm_guid=ISS[8C]}'/>
<arg declared_type64='CSSM_KEY_HIERARCHY' name='KeyHierarchy' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_ListAttachedModuleManagers'>
<arg declared_type64='uint32*' name='NumberOfModuleManagers' type64='^I'/>
<arg declared_type64='CSSM_GUID_PTR' name='ModuleManagerGuids' type64='^{cssm_guid=ISS[8C]}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_ModuleAttach'>
<arg const='true' declared_type64='CSSM_GUID*' name='ModuleGuid' type64='^{cssm_guid=ISS[8C]}'/>
<arg const='true' declared_type64='CSSM_VERSION*' name='Version' type64='^{cssm_version=II}'/>
<arg const='true' declared_type64='CSSM_API_MEMORY_FUNCS*' name='MemoryFuncs' type64='^{cssm_memory_funcs=^?^?^?^?^v}'/>
<arg declared_type64='uint32' name='SubserviceID' type64='I'/>
<arg declared_type64='CSSM_SERVICE_TYPE' name='SubServiceType' type64='I'/>
<arg declared_type64='CSSM_ATTACH_FLAGS' name='AttachFlags' type64='I'/>
<arg declared_type64='CSSM_KEY_HIERARCHY' name='KeyHierarchy' type64='I'/>
<arg declared_type64='CSSM_FUNC_NAME_ADDR*' name='FunctionTable' type64='^{cssm_func_name_addr=[68c]^?}'/>
<arg declared_type64='uint32' name='NumFunctionTable' type64='I'/>
<arg const='true' declared_type64='void*' name='Reserved' type64='^v'/>
<arg declared_type64='CSSM_MODULE_HANDLE_PTR' name='NewModuleHandle' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_ModuleDetach'>
<arg declared_type64='CSSM_MODULE_HANDLE' name='ModuleHandle' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_ModuleLoad'>
<arg const='true' declared_type64='CSSM_GUID*' name='ModuleGuid' type64='^{cssm_guid=ISS[8C]}'/>
<arg declared_type64='CSSM_KEY_HIERARCHY' name='KeyHierarchy' type64='I'/>
<arg declared_type64='CSSM_API_ModuleEventHandler' function_pointer='true' name='AppNotifyCallback' type64='^?'>
<arg const='true' declared_type64='CSSM_GUID*' type64='^{cssm_guid=ISS[8C]}'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_SERVICE_TYPE' type64='I'/>
<arg declared_type64='CSSM_MODULE_EVENT' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</arg>
<arg declared_type64='void*' name='AppNotifyCallbackCtx' type64='^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_ModuleUnload'>
<arg const='true' declared_type64='CSSM_GUID*' name='ModuleGuid' type64='^{cssm_guid=ISS[8C]}'/>
<arg declared_type64='CSSM_API_ModuleEventHandler' function_pointer='true' name='AppNotifyCallback' type64='^?'>
<arg const='true' declared_type64='CSSM_GUID*' type64='^{cssm_guid=ISS[8C]}'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='uint32' type64='I'/>
<arg declared_type64='CSSM_SERVICE_TYPE' type64='I'/>
<arg declared_type64='CSSM_MODULE_EVENT' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</arg>
<arg declared_type64='void*' name='AppNotifyCallbackCtx' type64='^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_QueryKeySizeInBits'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_KEY*' name='Key' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_KEY_SIZE_PTR' name='KeySize' type64='^{cssm_key_size=II}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_QuerySize'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='CSSM_BOOL' name='Encrypt' type64='i'/>
<arg declared_type64='uint32' name='QuerySizeCount' type64='I'/>
<arg declared_type64='CSSM_QUERY_SIZE_DATA_PTR' name='DataBlockSizes' type64='^{cssm_query_size_data=II}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_RetrieveCounter'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR' name='Counter' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_RetrieveUniqueId'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg declared_type64='CSSM_DATA_PTR' name='UniqueID' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_SetContext'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_CONTEXT*' name='Context' type64='^{cssm_context=III^{cssm_context_attribute}qiIII}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_SetPrivilege'>
<arg declared_type64='CSSM_PRIVILEGE' name='Privilege' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_SignData'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='DataBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='DataBufCount' type64='I'/>
<arg declared_type64='CSSM_ALGORITHMS' name='DigestAlgorithm' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' name='Signature' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_SignDataFinal'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='CSSM_DATA_PTR' name='Signature' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_SignDataInit'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_SignDataUpdate'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='DataBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='DataBufCount' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_ApplyCrlToDb'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_ENCODED_CRL*' name='CrlToBeApplied' type64='^{cssm_encoded_crl=II{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' name='SignerCertGroup' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' name='ApplyCrlVerifyContext' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' name='ApplyCrlVerifyResult' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_CertCreateTemplate'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='uint32' name='NumberOfFields' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' name='CertFields' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' name='CertTemplate' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_CertGetAllTemplateFields'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='CertTemplate' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32*' name='NumberOfFields' type64='^I'/>
<arg declared_type64='CSSM_FIELD_PTR*' name='CertFields' type64='^^{cssm_field}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_CertGroupConstruct'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DL_DB_LIST*' name='DBList' type64='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
<arg const='true' declared_type64='void*' name='ConstructParams' type64='^v'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' name='CertGroupFrag' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg declared_type64='CSSM_CERTGROUP_PTR*' name='CertGroup' type64='^^{cssm_certgroup}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_CertGroupPrune'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DL_DB_LIST*' name='DBList' type64='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' name='OrderedCertGroup' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg declared_type64='CSSM_CERTGROUP_PTR*' name='PrunedCertGroup' type64='^^{cssm_certgroup}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_CertGroupToTupleGroup'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' name='CertGroup' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg declared_type64='CSSM_TUPLEGROUP_PTR*' name='TupleGroup' type64='^^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_CertGroupVerify'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' name='CertGroupToBeVerified' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' name='VerifyContext' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' name='VerifyContextResult' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_CertReclaimAbort'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg declared_type64='CSSM_LONG_HANDLE' name='KeyCacheHandle' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_CertReclaimKey'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' name='CertGroup' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg declared_type64='uint32' name='CertIndex' type64='I'/>
<arg declared_type64='CSSM_LONG_HANDLE' name='KeyCacheHandle' type64='Q'/>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' name='CredAndAclEntry' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_CertRemoveFromCrlTemplate'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='OldCrlTemplate' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' name='CertGroupToBeRemoved' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' name='RevokerCertGroup' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' name='RevokerVerifyContext' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' name='RevokerVerifyResult' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<arg declared_type64='CSSM_DATA_PTR' name='NewCrlTemplate' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_CertRevoke'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='OldCrlTemplate' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' name='CertGroupToBeRevoked' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' name='RevokerCertGroup' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' name='RevokerVerifyContext' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' name='RevokerVerifyResult' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<arg declared_type64='CSSM_TP_CERTCHANGE_REASON' name='Reason' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' name='NewCrlTemplate' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_CertSign'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='CertTemplateToBeSigned' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' name='SignerCertGroup' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' name='SignerVerifyContext' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' name='SignerVerifyResult' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<arg declared_type64='CSSM_DATA_PTR' name='SignedCert' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_ConfirmCredResult'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='ReferenceIdentifier' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_TP_CALLERAUTH_CONTEXT*' name='CallerAuthCredentials' type64='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}'/>
<arg const='true' declared_type64='CSSM_TP_CONFIRM_RESPONSE*' name='Responses' type64='^{cssm_tp_confirm_response=I^I}'/>
<arg const='true' declared_type64='CSSM_TP_AUTHORITY_ID*' name='PreferredAuthority' type64='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_CrlCreateTemplate'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='uint32' name='NumberOfFields' type64='I'/>
<arg const='true' declared_type64='CSSM_FIELD*' name='CrlFields' type64='^{cssm_field={cssm_data=Q*}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' name='NewCrlTemplate' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_CrlSign'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_ENCODED_CRL*' name='CrlToBeSigned' type64='^{cssm_encoded_crl=II{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' name='SignerCertGroup' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' name='SignerVerifyContext' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' name='SignerVerifyResult' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<arg declared_type64='CSSM_DATA_PTR' name='SignedCrl' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_CrlVerify'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_ENCODED_CRL*' name='CrlToBeVerified' type64='^{cssm_encoded_crl=II{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_CERTGROUP*' name='SignerCertGroup' type64='^{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}'/>
<arg const='true' declared_type64='CSSM_TP_VERIFY_CONTEXT*' name='VerifyContext' type64='^{cssm_tp_verify_context=I{cssm_data=Q*}{cssm_crlgroup=III(?=^{cssm_data}^{cssm_encoded_crl}^{cssm_parsed_crl}^{cssm_crl_pair})I}^{cssm_tp_callerauth_context}}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR' name='RevokerVerifyResult' type64='^{cssm_tp_verify_context_result=I^{cssm_evidence}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_FormRequest'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_TP_AUTHORITY_ID*' name='PreferredAuthority' type64='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}'/>
<arg declared_type64='CSSM_TP_FORM_TYPE' name='FormType' type64='I'/>
<arg declared_type64='CSSM_DATA_PTR' name='BlankForm' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_FormSubmit'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg declared_type64='CSSM_TP_FORM_TYPE' name='FormType' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Form' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_TP_AUTHORITY_ID*' name='ClearanceAuthority' type64='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}'/>
<arg const='true' declared_type64='CSSM_TP_AUTHORITY_ID*' name='RepresentedAuthority' type64='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}'/>
<arg declared_type64='CSSM_ACCESS_CREDENTIALS_PTR' name='Credentials' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_PassThrough'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DL_DB_LIST*' name='DBList' type64='^{cssm_dl_db_list=I^{cssm_dl_db_handle}}'/>
<arg declared_type64='uint32' name='PassThroughId' type64='I'/>
<arg const='true' declared_type64='void*' name='InputParams' type64='^v'/>
<arg declared_type64='void**' name='OutputParams' type64='^^v'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_ReceiveConfirmation'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='ReferenceIdentifier' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_TP_CONFIRM_RESPONSE_PTR*' name='Responses' type64='^^{cssm_tp_confirm_response}'/>
<arg declared_type64='sint32*' name='ElapsedTime' type64='^i'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_RetrieveCredResult'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='ReferenceIdentifier' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_TP_CALLERAUTH_CONTEXT*' name='CallerAuthCredentials' type64='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}'/>
<arg declared_type64='sint32*' name='EstimatedTime' type64='^i'/>
<arg declared_type64='CSSM_BOOL*' name='ConfirmationRequired' type64='^i'/>
<arg declared_type64='CSSM_TP_RESULT_SET_PTR*' name='RetrieveOutput' type64='^^{cssm_tp_result_set}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_SubmitCredRequest'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_TP_AUTHORITY_ID*' name='PreferredAuthority' type64='^{cssm_tp_authority_id=^{cssm_data}^{cssm_net_address}}'/>
<arg declared_type64='CSSM_TP_AUTHORITY_REQUEST_TYPE' name='RequestType' type64='I'/>
<arg const='true' declared_type64='CSSM_TP_REQUEST_SET*' name='RequestInput' type64='^{cssm_tp_request_set=I^v}'/>
<arg const='true' declared_type64='CSSM_TP_CALLERAUTH_CONTEXT*' name='CallerAuthContext' type64='^{cssm_tp_callerauth_context={cssm_tp_policyinfo=I^{cssm_field}^v}*I^?I^{cssm_data}^{cssm_dl_db_list}^{cssm_access_credentials}}'/>
<arg declared_type64='sint32*' name='EstimatedTime' type64='^i'/>
<arg declared_type64='CSSM_DATA_PTR' name='ReferenceIdentifier' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_TP_TupleGroupToCertGroup'>
<arg declared_type64='CSSM_TP_HANDLE' name='TPHandle' type64='q'/>
<arg declared_type64='CSSM_CL_HANDLE' name='CLHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_TUPLEGROUP*' name='TupleGroup' type64='^{cssm_tuplegroup=I^{_CSSM_TUPLE_PTR={cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_list=I^{cssm_list_element}^{cssm_list_element}}{cssm_list=I^{cssm_list_element}^{cssm_list_element}}}}'/>
<arg declared_type64='CSSM_CERTGROUP_PTR*' name='CertTemplates' type64='^^{cssm_certgroup}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_Terminate'>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_Unintroduce'>
<arg const='true' declared_type64='CSSM_GUID*' name='ModuleID' type64='^{cssm_guid=ISS[8C]}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_UnwrapKey'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_KEY*' name='PublicKey' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_WRAP_KEY*' name='WrappedKey' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' name='KeyUsage' type64='I'/>
<arg declared_type64='uint32' name='KeyAttr' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' name='KeyLabel' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' name='CredAndAclEntry' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='CSSM_KEY_PTR' name='UnwrappedKey' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' name='DescriptiveData' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_UnwrapKeyP'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_KEY*' name='PublicKey' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_WRAP_KEY*' name='WrappedKey' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='uint32' name='KeyUsage' type64='I'/>
<arg declared_type64='uint32' name='KeyAttr' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' name='KeyLabel' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_RESOURCE_CONTROL_CONTEXT*' name='CredAndAclEntry' type64='^{cssm_resource_control_context=^{cssm_access_credentials}{cssm_acl_entry_input={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}^?^v}}'/>
<arg declared_type64='CSSM_KEY_PTR' name='UnwrappedKey' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_DATA_PTR' name='DescriptiveData' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_PRIVILEGE' name='Privilege' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_UpdateContextAttributes'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg declared_type64='uint32' name='NumberOfAttributes' type64='I'/>
<arg const='true' declared_type64='CSSM_CONTEXT_ATTRIBUTE*' name='ContextAttributes' type64='^{cssm_context_attribute=II(cssm_context_attribute_value=*I^{cssm_access_credentials}^{cssm_key}^{cssm_data}I^{cssm_date}^{cssm_range}^{cssm_crypto_data}^{cssm_version}^{cssm_dl_db_handle}^{cssm_kr_profile})}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_VerifyData'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='DataBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='DataBufCount' type64='I'/>
<arg declared_type64='CSSM_ALGORITHMS' name='DigestAlgorithm' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Signature' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_VerifyDataFinal'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Signature' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_VerifyDataInit'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_VerifyDataUpdate'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='DataBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='DataBufCount' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_VerifyDevice'>
<arg declared_type64='CSSM_CSP_HANDLE' name='CSPHandle' type64='q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='DeviceCert' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_VerifyMac'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='DataBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='DataBufCount' type64='I'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Mac' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_VerifyMacFinal'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='Mac' type64='^{cssm_data=Q*}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_VerifyMacInit'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_VerifyMacUpdate'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_DATA*' name='DataBufs' type64='^{cssm_data=Q*}'/>
<arg declared_type64='uint32' name='DataBufCount' type64='I'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_WrapKey'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' name='AccessCred' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_KEY*' name='Key' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DATA*' name='DescriptiveData' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_WRAP_KEY_PTR' name='WrappedKey' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='CSSM_WrapKeyP'>
<arg declared_type64='CSSM_CC_HANDLE' name='CCHandle' type64='Q'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS*' name='AccessCred' type64='^{cssm_access_credentials=[68c]{cssm_base_certs=qq{cssm_certgroup=III(?=^{cssm_data}^{cssm_encoded_cert}^{cssm_parsed_cert}^{cssm_cert_pair})I^v}}{cssm_samplegroup=I^{cssm_sample}}^?^v}'/>
<arg const='true' declared_type64='CSSM_KEY*' name='Key' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg const='true' declared_type64='CSSM_DATA*' name='DescriptiveData' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_WRAP_KEY_PTR' name='WrappedKey' type64='^{cssm_key={cssm_keyheader=I{cssm_guid=ISS[8C]}IIIIIII{cssm_date=[4C][2C][2C]}{cssm_date=[4C][2C][2C]}III}{cssm_data=Q*}}'/>
<arg declared_type64='CSSM_PRIVILEGE' name='Privilege' type64='Q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='MDS_Initialize'>
<arg const='true' declared_type64='CSSM_GUID*' name='pCallerGuid' type64='^{cssm_guid=ISS[8C]}'/>
<arg const='true' declared_type64='CSSM_MEMORY_FUNCS*' name='pMemoryFunctions' type64='^{cssm_memory_funcs=^?^?^?^?^v}'/>
<arg declared_type64='MDS_FUNCS_PTR' name='pDlFunctions' type64='^{mds_funcs=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<arg declared_type64='MDS_HANDLE*' name='hMds' type64='^q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='MDS_Install'>
<arg declared_type64='MDS_HANDLE' name='MdsHandle' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='MDS_Terminate'>
<arg declared_type64='MDS_HANDLE' name='MdsHandle' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='MDS_Uninstall'>
<arg declared_type64='MDS_HANDLE' name='MdsHandle' type64='q'/>
<retval declared_type64='CSSM_RETURN' type64='i'/>
</function>
<function name='SSLAddDistinguishedName'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg const='true' declared_type64='void * _Nullable' name='derDN' type64='^v'/>
<arg declared_type64='size_t' name='derDNLen' type64='Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLClose'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLContextGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SSLCopyALPNProtocols'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='protocols' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLCopyCertificateAuthorities'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='certificates' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLCopyDistinguishedNames'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='names' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLCopyPeerCertificates'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='certs' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLCopyPeerTrust'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SecTrustRef _Nullable * _Nonnull' name='trust' type64='^^{__SecTrust}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLCopyRequestedPeerName'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='char * _Nonnull' name='peerName' type64='*'/>
<arg declared_type64='size_t * _Nonnull' name='peerNameLen' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLCopyRequestedPeerNameLength'>
<arg declared_type64='SSLContextRef _Nonnull' name='ctx' type64='^{SSLContext=}'/>
<arg declared_type64='size_t * _Nonnull' name='peerNameLen' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLCopyTrustedRoots'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='trustedRoots' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLCreateContext'>
<arg declared_type64='CFAllocatorRef _Nullable' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='SSLProtocolSide' name='protocolSide' type64='i'/>
<arg declared_type64='SSLConnectionType' name='connectionType' type64='i'/>
<retval declared_type64='SSLContextRef _Nullable' type64='^{SSLContext=}'/>
</function>
<function name='SSLDisposeContext'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetAllowsAnyRoot'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='Boolean * _Nonnull' name='anyRoot' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetAllowsExpiredCerts'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='Boolean * _Nonnull' name='allowsExpired' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetAllowsExpiredRoots'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='Boolean * _Nonnull' name='allowsExpired' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetBufferedReadSize'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='size_t * _Nonnull' name='bufSize' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetClientCertificateState'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLClientCertificateState * _Nonnull' name='clientState' type64='^i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetConnection'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLConnectionRef _Nullable * _Nonnull' name='connection' type64='^^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetDatagramWriteSize'>
<arg declared_type64='SSLContextRef _Nonnull' name='dtlsContext' type64='^{SSLContext=}'/>
<arg declared_type64='size_t * _Nonnull' name='bufSize' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetDiffieHellmanParams'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg const='true' declared_type64='void * _Nullable * _Nonnull' name='dhParams' type64='^^v'/>
<arg declared_type64='size_t * _Nonnull' name='dhParamsLen' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetEnableCertVerify'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='Boolean * _Nonnull' name='enableVerify' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetEnabledCiphers'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLCipherSuite * _Nonnull' name='ciphers' type64='^I'/>
<arg declared_type64='size_t * _Nonnull' name='numCiphers' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetMaxDatagramRecordSize'>
<arg declared_type64='SSLContextRef _Nonnull' name='dtlsContext' type64='^{SSLContext=}'/>
<arg declared_type64='size_t * _Nonnull' name='maxSize' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetNegotiatedCipher'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLCipherSuite * _Nonnull' name='cipherSuite' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetNegotiatedProtocolVersion'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLProtocol * _Nonnull' name='protocol' type64='^i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetNumberEnabledCiphers'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='size_t * _Nonnull' name='numCiphers' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetNumberSupportedCiphers'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='size_t * _Nonnull' name='numCiphers' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetPeerDomainName'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='char * _Nonnull' name='peerName' type64='*'/>
<arg declared_type64='size_t * _Nonnull' name='peerNameLen' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetPeerDomainNameLength'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='size_t * _Nonnull' name='peerNameLen' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetPeerID'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg const='true' declared_type64='void * _Nullable * _Nonnull' name='peerID' type64='^^v'/>
<arg declared_type64='size_t * _Nonnull' name='peerIDLen' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetProtocolVersion'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLProtocol * _Nonnull' name='protocol' type64='^i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetProtocolVersionEnabled'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLProtocol' name='protocol' type64='i'/>
<arg declared_type64='Boolean * _Nonnull' name='enable' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetProtocolVersionMax'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLProtocol * _Nonnull' name='maxVersion' type64='^i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetProtocolVersionMin'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLProtocol * _Nonnull' name='minVersion' type64='^i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetRsaBlinding'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='Boolean * _Nonnull' name='blinding' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetSessionOption'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLSessionOption' name='option' type64='i'/>
<arg declared_type64='Boolean * _Nonnull' name='value' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetSessionState'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLSessionState * _Nonnull' name='state' type64='^i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLGetSupportedCiphers'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLCipherSuite * _Nonnull' name='ciphers' type64='^I'/>
<arg declared_type64='size_t * _Nonnull' name='numCiphers' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLHandshake'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLNewContext'>
<arg declared_type64='Boolean' name='isServer' type64='B'/>
<arg declared_type64='SSLContextRef _Nullable * _Nonnull' name='contextPtr' type64='^^{SSLContext}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLReHandshake'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLRead'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='void * _Nonnull' name='data' type64='^v'/>
<arg declared_type64='size_t' name='dataLength' type64='Q'/>
<arg declared_type64='size_t * _Nonnull' name='processed' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetALPNProtocols'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='CFArrayRef _Nonnull' name='protocols' type64='^{__CFArray=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetAllowsAnyRoot'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='Boolean' name='anyRoot' type64='B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetAllowsExpiredCerts'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='Boolean' name='allowsExpired' type64='B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetAllowsExpiredRoots'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='Boolean' name='allowsExpired' type64='B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetCertificate'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='CFArrayRef _Nullable' name='certRefs' type64='^{__CFArray=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetCertificateAuthorities'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='CFTypeRef _Nonnull' name='certificateOrArray' type64='@'/>
<arg declared_type64='Boolean' name='replaceExisting' type64='B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetClientSideAuthenticate'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLAuthenticate' name='auth' type64='i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetConnection'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLConnectionRef _Nullable' name='connection' type64='@'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetDatagramHelloCookie'>
<arg declared_type64='SSLContextRef _Nonnull' name='dtlsContext' type64='^{SSLContext=}'/>
<arg const='true' declared_type64='void * _Nullable' name='cookie' type64='^v'/>
<arg declared_type64='size_t' name='cookieLen' type64='Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetDiffieHellmanParams'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg const='true' declared_type64='void * _Nullable' name='dhParams' type64='^v'/>
<arg declared_type64='size_t' name='dhParamsLen' type64='Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetEnableCertVerify'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='Boolean' name='enableVerify' type64='B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetEnabledCiphers'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg const='true' declared_type64='SSLCipherSuite * _Nonnull' name='ciphers' type64='^I'/>
<arg declared_type64='size_t' name='numCiphers' type64='Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetEncryptionCertificate'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='CFArrayRef _Nonnull' name='certRefs' type64='^{__CFArray=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetError'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='OSStatus' name='status' type64='i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetIOFuncs'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLReadFunc _Nonnull' function_pointer='true' name='readFunc' type64='^?'>
<arg declared_type64='SSLConnectionRef _Nonnull' type64='@'/>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='size_t * _Nonnull' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='SSLWriteFunc _Nonnull' function_pointer='true' name='writeFunc' type64='^?'>
<arg declared_type64='SSLConnectionRef _Nonnull' type64='@'/>
<arg const='true' declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='size_t * _Nonnull' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetMaxDatagramRecordSize'>
<arg declared_type64='SSLContextRef _Nonnull' name='dtlsContext' type64='^{SSLContext=}'/>
<arg declared_type64='size_t' name='maxSize' type64='Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetOCSPResponse'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='CFDataRef _Nonnull' name='response' type64='^{__CFData=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetPeerDomainName'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg const='true' declared_type64='char * _Nullable' name='peerName' type64='*'/>
<arg declared_type64='size_t' name='peerNameLen' type64='Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetPeerID'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg const='true' declared_type64='void * _Nullable' name='peerID' type64='^v'/>
<arg declared_type64='size_t' name='peerIDLen' type64='Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetProtocolVersion'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLProtocol' name='version' type64='i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetProtocolVersionEnabled'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLProtocol' name='protocol' type64='i'/>
<arg declared_type64='Boolean' name='enable' type64='B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetProtocolVersionMax'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLProtocol' name='maxVersion' type64='i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetProtocolVersionMin'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLProtocol' name='minVersion' type64='i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetRsaBlinding'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='Boolean' name='blinding' type64='B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetSessionConfig'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='config' type64='^{__CFString=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetSessionOption'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='SSLSessionOption' name='option' type64='i'/>
<arg declared_type64='Boolean' name='value' type64='B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetSessionTicketsEnabled'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='Boolean' name='enabled' type64='B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLSetTrustedRoots'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg declared_type64='CFArrayRef _Nonnull' name='trustedRoots' type64='^{__CFArray=}'/>
<arg declared_type64='Boolean' name='replaceExisting' type64='B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SSLWrite'>
<arg declared_type64='SSLContextRef _Nonnull' name='context' type64='^{SSLContext=}'/>
<arg const='true' declared_type64='void * _Nullable' name='data' type64='^v'/>
<arg declared_type64='size_t' name='dataLength' type64='Q'/>
<arg declared_type64='size_t * _Nonnull' name='processed' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecACLCopyAuthorizations'>
<arg declared_type64='SecACLRef _Nonnull' name='acl' type64='^{OpaqueSecTrustRef=}'/>
<retval declared_type64='CFArrayRef _Nonnull' type64='^{__CFArray=}'/>
</function>
<function name='SecACLCopyContents'>
<arg declared_type64='SecACLRef _Nonnull' name='acl' type64='^{OpaqueSecTrustRef=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='applicationList' type64='^^{__CFArray}'/>
<arg declared_type64='CFStringRef _Nullable * _Nonnull' name='description' type64='^^{__CFString}'/>
<arg declared_type64='SecKeychainPromptSelector * _Nonnull' name='promptSelector' type64='^S'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecACLCopySimpleContents'>
<arg declared_type64='SecACLRef _Nonnull' name='acl' type64='^{OpaqueSecTrustRef=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='applicationList' type64='^^{__CFArray}'/>
<arg declared_type64='CFStringRef _Nullable * _Nonnull' name='description' type64='^^{__CFString}'/>
<arg declared_type64='CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR * _Nonnull' name='promptSelector' type64='^{cssm_acl_keychain_prompt_selector=SS}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecACLCreateFromSimpleContents'>
<arg declared_type64='SecAccessRef _Nonnull' name='access' type64='^{OpaqueSecAccessRef=}'/>
<arg declared_type64='CFArrayRef _Nullable' name='applicationList' type64='^{__CFArray=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='description' type64='^{__CFString=}'/>
<arg const='true' declared_type64='CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR * _Nonnull' name='promptSelector' type64='^{cssm_acl_keychain_prompt_selector=SS}'/>
<arg declared_type64='SecACLRef _Nullable * _Nonnull' name='newAcl' type64='^^{OpaqueSecTrustRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecACLCreateWithSimpleContents'>
<arg declared_type64='SecAccessRef _Nonnull' name='access' type64='^{OpaqueSecAccessRef=}'/>
<arg declared_type64='CFArrayRef _Nullable' name='applicationList' type64='^{__CFArray=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='description' type64='^{__CFString=}'/>
<arg declared_type64='SecKeychainPromptSelector' name='promptSelector' type64='S'/>
<arg declared_type64='SecACLRef _Nullable * _Nonnull' name='newAcl' type64='^^{OpaqueSecTrustRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecACLGetAuthorizations'>
<arg declared_type64='SecACLRef _Nonnull' name='acl' type64='^{OpaqueSecTrustRef=}'/>
<arg declared_type64='CSSM_ACL_AUTHORIZATION_TAG * _Nonnull' name='tags' type64='^i'/>
<arg declared_type64='uint32 * _Nonnull' name='tagCount' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecACLGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecACLRemove'>
<arg declared_type64='SecACLRef _Nonnull' name='aclRef' type64='^{OpaqueSecTrustRef=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecACLSetAuthorizations'>
<arg declared_type64='SecACLRef _Nonnull' name='acl' type64='^{OpaqueSecTrustRef=}'/>
<arg declared_type64='CSSM_ACL_AUTHORIZATION_TAG * _Nonnull' name='tags' type64='^i'/>
<arg declared_type64='uint32' name='tagCount' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecACLSetContents'>
<arg declared_type64='SecACLRef _Nonnull' name='acl' type64='^{OpaqueSecTrustRef=}'/>
<arg declared_type64='CFArrayRef _Nullable' name='applicationList' type64='^{__CFArray=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='description' type64='^{__CFString=}'/>
<arg declared_type64='SecKeychainPromptSelector' name='promptSelector' type64='S'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecACLSetSimpleContents'>
<arg declared_type64='SecACLRef _Nonnull' name='acl' type64='^{OpaqueSecTrustRef=}'/>
<arg declared_type64='CFArrayRef _Nullable' name='applicationList' type64='^{__CFArray=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='description' type64='^{__CFString=}'/>
<arg const='true' declared_type64='CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR * _Nonnull' name='promptSelector' type64='^{cssm_acl_keychain_prompt_selector=SS}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecACLUpdateAuthorizations'>
<arg declared_type64='SecACLRef _Nonnull' name='acl' type64='^{OpaqueSecTrustRef=}'/>
<arg declared_type64='CFArrayRef _Nonnull' name='authorizations' type64='^{__CFArray=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecAccessControlCreateWithFlags'>
<arg declared_type64='CFAllocatorRef _Nullable' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFTypeRef _Nonnull' name='protection' type64='@'/>
<arg declared_type64='SecAccessControlCreateFlags' name='flags' type64='Q'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='SecAccessControlRef _Nullable' type64='^{OpaqueSecAccessControlRef=}'/>
</function>
<function name='SecAccessControlGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecAccessCopyACLList'>
<arg declared_type64='SecAccessRef _Nonnull' name='accessRef' type64='^{OpaqueSecAccessRef=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='aclList' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecAccessCopyMatchingACLList'>
<arg declared_type64='SecAccessRef _Nonnull' name='accessRef' type64='^{OpaqueSecAccessRef=}'/>
<arg declared_type64='CFTypeRef _Nonnull' name='authorizationTag' type64='@'/>
<retval declared_type64='CFArrayRef _Nullable' type64='^{__CFArray=}'/>
</function>
<function name='SecAccessCopyOwnerAndACL'>
<arg declared_type64='SecAccessRef _Nonnull' name='accessRef' type64='^{OpaqueSecAccessRef=}'/>
<arg declared_type64='uid_t * _Nullable' name='userId' type64='^I'/>
<arg declared_type64='gid_t * _Nullable' name='groupId' type64='^I'/>
<arg declared_type64='SecAccessOwnerType * _Nullable' name='ownerType' type64='^I'/>
<arg declared_type64='CFArrayRef _Nullable * _Nullable' name='aclList' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecAccessCopySelectedACLList'>
<arg declared_type64='SecAccessRef _Nonnull' name='accessRef' type64='^{OpaqueSecAccessRef=}'/>
<arg declared_type64='CSSM_ACL_AUTHORIZATION_TAG' name='action' type64='i'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='aclList' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecAccessCreate'>
<arg declared_type64='CFStringRef _Nonnull' name='descriptor' type64='^{__CFString=}'/>
<arg declared_type64='CFArrayRef _Nullable' name='trustedlist' type64='^{__CFArray=}'/>
<arg declared_type64='SecAccessRef _Nullable * _Nonnull' name='accessRef' type64='^^{OpaqueSecAccessRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecAccessCreateFromOwnerAndACL'>
<arg const='true' declared_type64='CSSM_ACL_OWNER_PROTOTYPE * _Nonnull' name='owner' type64='^{cssm_acl_owner_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i}'/>
<arg declared_type64='uint32' name='aclCount' type64='I'/>
<arg const='true' declared_type64='CSSM_ACL_ENTRY_INFO * _Nonnull' name='acls' type64='^{cssm_acl_entry_info={cssm_acl_entry_prototype={cssm_list=I^{cssm_list_element}^{cssm_list_element}}i{cssm_authorizationgroup=I^i}{cssm_acl_validity_period={cssm_data=Q*}{cssm_data=Q*}}[68c]}q}'/>
<arg declared_type64='SecAccessRef _Nullable * _Nonnull' name='accessRef' type64='^^{OpaqueSecAccessRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecAccessCreateWithOwnerAndACL'>
<arg declared_type64='uid_t' name='userId' type64='I'/>
<arg declared_type64='gid_t' name='groupId' type64='I'/>
<arg declared_type64='SecAccessOwnerType' name='ownerType' type64='I'/>
<arg declared_type64='CFArrayRef _Nullable' name='acls' type64='^{__CFArray=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='SecAccessRef _Nullable' type64='^{OpaqueSecAccessRef=}'/>
</function>
<function name='SecAccessGetOwnerAndACL'>
<arg declared_type64='SecAccessRef _Nonnull' name='accessRef' type64='^{OpaqueSecAccessRef=}'/>
<arg declared_type64='CSSM_ACL_OWNER_PROTOTYPE_PTR _Nullable * _Nonnull' name='owner' type64='^^{cssm_acl_owner_prototype}'/>
<arg declared_type64='uint32 * _Nonnull' name='aclCount' type64='^I'/>
<arg declared_type64='CSSM_ACL_ENTRY_INFO_PTR _Nullable * _Nonnull' name='acls' type64='^^{cssm_acl_entry_info}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecAccessGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecAsn1AllocCopy'>
<arg declared_type64='SecAsn1CoderRef _Nonnull' name='coder' type64='^{SecAsn1Coder=}'/>
<arg const='true' declared_type64='void * _Nonnull' name='src' type64='^v'/>
<arg declared_type64='size_t' name='len' type64='Q'/>
<arg declared_type64='SecAsn1Item * _Nonnull' name='dest' type64='^{cssm_data=Q*}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecAsn1AllocCopyItem'>
<arg declared_type64='SecAsn1CoderRef _Nonnull' name='coder' type64='^{SecAsn1Coder=}'/>
<arg const='true' declared_type64='SecAsn1Item * _Nonnull' name='src' type64='^{cssm_data=Q*}'/>
<arg declared_type64='SecAsn1Item * _Nonnull' name='dest' type64='^{cssm_data=Q*}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecAsn1AllocItem'>
<arg declared_type64='SecAsn1CoderRef _Nonnull' name='coder' type64='^{SecAsn1Coder=}'/>
<arg declared_type64='SecAsn1Item * _Nonnull' name='item' type64='^{cssm_data=Q*}'/>
<arg declared_type64='size_t' name='len' type64='Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecAsn1CoderCreate'>
<arg declared_type64='SecAsn1CoderRef _Nullable * _Nonnull' name='coder' type64='^^{SecAsn1Coder}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecAsn1CoderRelease'>
<arg declared_type64='SecAsn1CoderRef _Nonnull' name='coder' type64='^{SecAsn1Coder=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecAsn1Decode'>
<arg declared_type64='SecAsn1CoderRef _Nonnull' name='coder' type64='^{SecAsn1Coder=}'/>
<arg const='true' declared_type64='void * _Nonnull' name='src' type64='^v'/>
<arg declared_type64='size_t' name='len' type64='Q'/>
<arg const='true' declared_type64='SecAsn1Template * _Nonnull' name='templates' type64='^{SecAsn1Template_struct=II^vI}'/>
<arg declared_type64='void * _Nonnull' name='dest' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecAsn1DecodeData'>
<arg declared_type64='SecAsn1CoderRef _Nonnull' name='coder' type64='^{SecAsn1Coder=}'/>
<arg const='true' declared_type64='SecAsn1Item * _Nonnull' name='src' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='SecAsn1Template * _Nonnull' name='templ' type64='^{SecAsn1Template_struct=II^vI}'/>
<arg declared_type64='void * _Nonnull' name='dest' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecAsn1EncodeItem'>
<arg declared_type64='SecAsn1CoderRef _Nonnull' name='coder' type64='^{SecAsn1Coder=}'/>
<arg const='true' declared_type64='void * _Nonnull' name='src' type64='^v'/>
<arg const='true' declared_type64='SecAsn1Template * _Nonnull' name='templates' type64='^{SecAsn1Template_struct=II^vI}'/>
<arg declared_type64='SecAsn1Item * _Nonnull' name='dest' type64='^{cssm_data=Q*}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecAsn1Malloc'>
<arg declared_type64='SecAsn1CoderRef _Nonnull' name='coder' type64='^{SecAsn1Coder=}'/>
<arg declared_type64='size_t' name='len' type64='Q'/>
<retval declared_type64='void * _Nonnull' type64='^v'/>
</function>
<function name='SecAsn1OidCompare'>
<arg const='true' declared_type64='SecAsn1Oid * _Nonnull' name='oid1' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='SecAsn1Oid * _Nonnull' name='oid2' type64='^{cssm_data=Q*}'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='SecCertificateAddToKeychain'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='SecKeychainRef _Nullable' name='keychain' type64='^{OpaqueSecKeychainRef=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCertificateCopyCommonName'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='CFStringRef _Nullable * _Nonnull' name='commonName' type64='^^{__CFString}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCertificateCopyData'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<retval declared_type64='CFDataRef _Nonnull' type64='^{__CFData=}'/>
</function>
<function name='SecCertificateCopyEmailAddresses'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='emailAddresses' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCertificateCopyKey'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<retval declared_type64='SecKeyRef _Nullable' type64='^{OpaqueSecKeyRef=}'/>
</function>
<function name='SecCertificateCopyLongDescription'>
<arg declared_type64='CFAllocatorRef _Nullable' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='CFStringRef _Nullable' type64='^{__CFString=}'/>
</function>
<function name='SecCertificateCopyNormalizedIssuerContent'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='CFDataRef _Nullable' type64='^{__CFData=}'/>
</function>
<function name='SecCertificateCopyNormalizedIssuerSequence'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<retval declared_type64='CFDataRef _Nullable' type64='^{__CFData=}'/>
</function>
<function name='SecCertificateCopyNormalizedSubjectContent'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='CFDataRef _Nullable' type64='^{__CFData=}'/>
</function>
<function name='SecCertificateCopyNormalizedSubjectSequence'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<retval declared_type64='CFDataRef _Nullable' type64='^{__CFData=}'/>
</function>
<function name='SecCertificateCopyPreference'>
<arg declared_type64='CFStringRef _Nonnull' name='name' type64='^{__CFString=}'/>
<arg declared_type64='uint32' name='keyUsage' type64='I'/>
<arg declared_type64='SecCertificateRef _Nullable * _Nonnull' name='certificate' type64='^^{OpaqueSecCertificateRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCertificateCopyPreferred'>
<arg declared_type64='CFStringRef _Nonnull' name='name' type64='^{__CFString=}'/>
<arg declared_type64='CFArrayRef _Nullable' name='keyUsage' type64='^{__CFArray=}'/>
<retval declared_type64='SecCertificateRef _Nullable' type64='^{OpaqueSecCertificateRef=}'/>
</function>
<function name='SecCertificateCopyPublicKey'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='SecKeyRef _Nullable * _Nonnull' name='key' type64='^^{OpaqueSecKeyRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCertificateCopySerialNumber'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='CFDataRef _Nullable' type64='^{__CFData=}'/>
</function>
<function name='SecCertificateCopySerialNumberData'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='CFDataRef _Nullable' type64='^{__CFData=}'/>
</function>
<function name='SecCertificateCopyShortDescription'>
<arg declared_type64='CFAllocatorRef _Nullable' name='alloc' type64='^{__CFAllocator=}'/>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='CFStringRef _Nullable' type64='^{__CFString=}'/>
</function>
<function name='SecCertificateCopySubjectSummary'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<retval declared_type64='CFStringRef _Nullable' type64='^{__CFString=}'/>
</function>
<function name='SecCertificateCopyValues'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='CFArrayRef _Nullable' name='keys' type64='^{__CFArray=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='CFDictionaryRef _Nullable' type64='^{__CFDictionary=}'/>
</function>
<function name='SecCertificateCreateFromData'>
<arg const='true' declared_type64='CSSM_DATA * _Nonnull' name='data' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_CERT_TYPE' name='type' type64='I'/>
<arg declared_type64='CSSM_CERT_ENCODING' name='encoding' type64='I'/>
<arg declared_type64='SecCertificateRef _Nullable * _Nonnull' name='certificate' type64='^^{OpaqueSecCertificateRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCertificateCreateWithData'>
<arg declared_type64='CFAllocatorRef _Nullable' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='CFDataRef _Nonnull' name='data' type64='^{__CFData=}'/>
<retval declared_type64='SecCertificateRef _Nullable' type64='^{OpaqueSecCertificateRef=}'/>
</function>
<function name='SecCertificateGetAlgorithmID'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<arg const='true' declared_type64='CSSM_X509_ALGORITHM_IDENTIFIER * _Nullable * _Nonnull' name='algid' type64='^^{cssm_x509_algorithm_identifier}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCertificateGetCLHandle'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='CSSM_CL_HANDLE * _Nonnull' name='clHandle' type64='^q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCertificateGetData'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='CSSM_DATA_PTR _Nonnull' name='data' type64='^{cssm_data=Q*}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCertificateGetIssuer'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<arg const='true' declared_type64='CSSM_X509_NAME * _Nullable * _Nonnull' name='issuer' type64='^^{cssm_x509_name}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCertificateGetSubject'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<arg const='true' declared_type64='CSSM_X509_NAME * _Nullable * _Nonnull' name='subject' type64='^^{cssm_x509_name}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCertificateGetType'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='CSSM_CERT_TYPE * _Nonnull' name='certificateType' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCertificateGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecCertificateSetPreference'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='name' type64='^{__CFString=}'/>
<arg declared_type64='uint32' name='keyUsage' type64='I'/>
<arg declared_type64='CFDateRef _Nullable' name='date' type64='^{__CFDate=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCertificateSetPreferred'>
<arg declared_type64='SecCertificateRef _Nullable' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='name' type64='^{__CFString=}'/>
<arg declared_type64='CFArrayRef _Nullable' name='keyUsage' type64='^{__CFArray=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCodeCheckValidity'>
<arg declared_type64='SecCodeRef _Nonnull' name='code' type64='^{__SecCode=}'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<arg declared_type64='SecRequirementRef _Nullable' name='requirement' type64='^{__SecRequirement=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCodeCheckValidityWithErrors'>
<arg declared_type64='SecCodeRef _Nonnull' name='code' type64='^{__SecCode=}'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<arg declared_type64='SecRequirementRef _Nullable' name='requirement' type64='^{__SecRequirement=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='errors' type64='^^{__CFError}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCodeCopyDesignatedRequirement'>
<arg declared_type64='SecStaticCodeRef _Nonnull' name='code' type64='^{__SecCode=}'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<arg declared_type64='SecRequirementRef _Nullable * _Nonnull' name='requirement' type64='^^{__SecRequirement}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCodeCopyGuestWithAttributes'>
<arg declared_type64='SecCodeRef _Nullable' name='host' type64='^{__SecCode=}'/>
<arg declared_type64='CFDictionaryRef _Nullable' name='attributes' type64='^{__CFDictionary=}'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<arg declared_type64='SecCodeRef _Nullable * _Nonnull' name='guest' type64='^^{__SecCode}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCodeCopyHost'>
<arg declared_type64='SecCodeRef _Nonnull' name='guest' type64='^{__SecCode=}'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<arg declared_type64='SecCodeRef _Nullable * _Nonnull' name='host' type64='^^{__SecCode}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCodeCopyPath'>
<arg declared_type64='SecStaticCodeRef _Nonnull' name='staticCode' type64='^{__SecCode=}'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<arg declared_type64='CFURLRef _Nullable * _Nonnull' name='path' type64='^^{__CFURL}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCodeCopySelf'>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<arg declared_type64='SecCodeRef _Nullable * _Nonnull' name='self' type64='^^{__SecCode}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCodeCopySigningInformation'>
<arg declared_type64='SecStaticCodeRef _Nonnull' name='code' type64='^{__SecCode=}'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<arg declared_type64='CFDictionaryRef _Nullable * _Nonnull' name='information' type64='^^{__CFDictionary}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCodeCopyStaticCode'>
<arg declared_type64='SecCodeRef _Nonnull' name='code' type64='^{__SecCode=}'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<arg declared_type64='SecStaticCodeRef _Nullable * _Nonnull' name='staticCode' type64='^^{__SecCode}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCodeGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecCodeMapMemory'>
<arg declared_type64='SecStaticCodeRef _Nonnull' name='code' type64='^{__SecCode=}'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecCopyErrorMessageString'>
<arg declared_type64='OSStatus' name='status' type64='i'/>
<arg declared_type64='void * _Nullable' name='reserved' type64='^v'/>
<retval declared_type64='CFStringRef _Nullable' type64='^{__CFString=}'/>
</function>
<function name='SecDecodeTransformCreate'>
<arg declared_type64='CFTypeRef _Nonnull' name='DecodeType' type64='@'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='SecTransformRef _Nullable' type64='@'/>
</function>
<function name='SecDecryptTransformCreate'>
<arg declared_type64='SecKeyRef _Nonnull' name='keyRef' type64='^{OpaqueSecKeyRef=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='SecTransformRef _Nonnull' type64='@'/>
</function>
<function name='SecDecryptTransformGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecDigestTransformCreate'>
<arg declared_type64='CFTypeRef _Nullable' name='digestType' type64='@'/>
<arg declared_type64='CFIndex' name='digestLength' type64='q'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='SecTransformRef _Nonnull' type64='@'/>
</function>
<function name='SecDigestTransformGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecEncodeTransformCreate'>
<arg declared_type64='CFTypeRef _Nonnull' name='encodeType' type64='@'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='SecTransformRef _Nullable' type64='@'/>
</function>
<function name='SecEncryptTransformCreate'>
<arg declared_type64='SecKeyRef _Nonnull' name='keyRef' type64='^{OpaqueSecKeyRef=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='SecTransformRef _Nonnull' type64='@'/>
</function>
<function name='SecEncryptTransformGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecGroupTransformGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecHostCreateGuest'>
<arg declared_type64='SecGuestRef' name='host' type64='I'/>
<arg declared_type64='uint32_t' name='status' type64='I'/>
<arg declared_type64='CFURLRef _Nonnull' name='path' type64='^{__CFURL=}'/>
<arg declared_type64='CFDictionaryRef _Nullable' name='attributes' type64='^{__CFDictionary=}'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<arg declared_type64='SecGuestRef * _Nonnull' name='newGuest' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecHostRemoveGuest'>
<arg declared_type64='SecGuestRef' name='host' type64='I'/>
<arg declared_type64='SecGuestRef' name='guest' type64='I'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecHostSelectGuest'>
<arg declared_type64='SecGuestRef' name='guestRef' type64='I'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecHostSelectedGuest'>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<arg declared_type64='SecGuestRef * _Nonnull' name='guestRef' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecHostSetGuestStatus'>
<arg declared_type64='SecGuestRef' name='guestRef' type64='I'/>
<arg declared_type64='uint32_t' name='status' type64='I'/>
<arg declared_type64='CFDictionaryRef _Nullable' name='attributes' type64='^{__CFDictionary=}'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecHostSetHostingPort'>
<arg declared_type64='mach_port_t' name='hostingPort' type64='I'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecIdentityCopyCertificate'>
<arg declared_type64='SecIdentityRef _Nonnull' name='identityRef' type64='^{OpaqueSecIdentityRef=}'/>
<arg declared_type64='SecCertificateRef _Nullable * _Nonnull' name='certificateRef' type64='^^{OpaqueSecCertificateRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecIdentityCopyPreference'>
<arg declared_type64='CFStringRef _Nonnull' name='name' type64='^{__CFString=}'/>
<arg declared_type64='CSSM_KEYUSE' name='keyUsage' type64='I'/>
<arg declared_type64='CFArrayRef _Nullable' name='validIssuers' type64='^{__CFArray=}'/>
<arg declared_type64='SecIdentityRef _Nullable * _Nonnull' name='identity' type64='^^{OpaqueSecIdentityRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecIdentityCopyPreferred'>
<arg declared_type64='CFStringRef _Nonnull' name='name' type64='^{__CFString=}'/>
<arg declared_type64='CFArrayRef _Nullable' name='keyUsage' type64='^{__CFArray=}'/>
<arg declared_type64='CFArrayRef _Nullable' name='validIssuers' type64='^{__CFArray=}'/>
<retval declared_type64='SecIdentityRef _Nullable' type64='^{OpaqueSecIdentityRef=}'/>
</function>
<function name='SecIdentityCopyPrivateKey'>
<arg declared_type64='SecIdentityRef _Nonnull' name='identityRef' type64='^{OpaqueSecIdentityRef=}'/>
<arg declared_type64='SecKeyRef _Nullable * _Nonnull' name='privateKeyRef' type64='^^{OpaqueSecKeyRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecIdentityCopySystemIdentity'>
<arg declared_type64='CFStringRef _Nonnull' name='domain' type64='^{__CFString=}'/>
<arg declared_type64='SecIdentityRef _Nullable * _Nonnull' name='idRef' type64='^^{OpaqueSecIdentityRef}'/>
<arg declared_type64='CFStringRef _Nullable * _Nullable' name='actualDomain' type64='^^{__CFString}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecIdentityCreateWithCertificate'>
<arg declared_type64='CFTypeRef _Nullable' name='keychainOrArray' type64='@'/>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificateRef' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='SecIdentityRef _Nullable * _Nonnull' name='identityRef' type64='^^{OpaqueSecIdentityRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecIdentityGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecIdentitySearchCopyNext'>
<arg declared_type64='SecIdentitySearchRef _Nonnull' name='searchRef' type64='^{OpaqueSecIdentitySearchRef=}'/>
<arg declared_type64='SecIdentityRef _Nullable * _Nullable' name='identity' type64='^^{OpaqueSecIdentityRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecIdentitySearchCreate'>
<arg declared_type64='CFTypeRef _Nullable' name='keychainOrArray' type64='@'/>
<arg declared_type64='CSSM_KEYUSE' name='keyUsage' type64='I'/>
<arg declared_type64='SecIdentitySearchRef _Nullable * _Nullable' name='searchRef' type64='^^{OpaqueSecIdentitySearchRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecIdentitySearchGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecIdentitySetPreference'>
<arg declared_type64='SecIdentityRef _Nonnull' name='identity' type64='^{OpaqueSecIdentityRef=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='name' type64='^{__CFString=}'/>
<arg declared_type64='CSSM_KEYUSE' name='keyUsage' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecIdentitySetPreferred'>
<arg declared_type64='SecIdentityRef _Nullable' name='identity' type64='^{OpaqueSecIdentityRef=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='name' type64='^{__CFString=}'/>
<arg declared_type64='CFArrayRef _Nullable' name='keyUsage' type64='^{__CFArray=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecIdentitySetSystemIdentity'>
<arg declared_type64='CFStringRef _Nonnull' name='domain' type64='^{__CFString=}'/>
<arg declared_type64='SecIdentityRef _Nullable' name='idRef' type64='^{OpaqueSecIdentityRef=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecItemAdd'>
<arg declared_type64='CFDictionaryRef _Nonnull' name='attributes' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFTypeRef _Nullable * _Nullable' name='result' type64='^^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecItemCopyMatching'>
<arg declared_type64='CFDictionaryRef _Nonnull' name='query' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFTypeRef _Nullable * _Nullable' name='result' type64='^^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecItemDelete'>
<arg declared_type64='CFDictionaryRef _Nonnull' name='query' type64='^{__CFDictionary=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecItemExport'>
<arg declared_type64='CFTypeRef _Nonnull' name='secItemOrArray' type64='@'/>
<arg declared_type64='SecExternalFormat' name='outputFormat' type64='I'/>
<arg declared_type64='SecItemImportExportFlags' name='flags' type64='I'/>
<arg const='true' declared_type64='SecItemImportExportKeyParameters * _Nullable' name='keyParams' type64='^{_SecItemImportExportKeyParameters=II^v^{__CFString}^{__CFString}^{OpaqueSecAccessRef}^{__CFArray}^{__CFArray}}'/>
<arg declared_type64='CFDataRef _Nullable * _Nonnull' name='exportedData' type64='^^{__CFData}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecItemImport'>
<arg declared_type64='CFDataRef _Nonnull' name='importedData' type64='^{__CFData=}'/>
<arg declared_type64='CFStringRef _Nullable' name='fileNameOrExtension' type64='^{__CFString=}'/>
<arg declared_type64='SecExternalFormat * _Nullable' name='inputFormat' type64='^I'/>
<arg declared_type64='SecExternalItemType * _Nullable' name='itemType' type64='^I'/>
<arg declared_type64='SecItemImportExportFlags' name='flags' type64='I'/>
<arg const='true' declared_type64='SecItemImportExportKeyParameters * _Nullable' name='keyParams' type64='^{_SecItemImportExportKeyParameters=II^v^{__CFString}^{__CFString}^{OpaqueSecAccessRef}^{__CFArray}^{__CFArray}}'/>
<arg declared_type64='SecKeychainRef _Nullable' name='importKeychain' type64='^{OpaqueSecKeychainRef=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nullable' name='outItems' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecItemUpdate'>
<arg declared_type64='CFDictionaryRef _Nonnull' name='query' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFDictionaryRef _Nonnull' name='attributesToUpdate' type64='^{__CFDictionary=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeyCopyAttributes'>
<arg declared_type64='SecKeyRef _Nonnull' name='key' type64='^{OpaqueSecKeyRef=}'/>
<retval declared_type64='CFDictionaryRef _Nullable' type64='^{__CFDictionary=}'/>
</function>
<function name='SecKeyCopyExternalRepresentation'>
<arg declared_type64='SecKeyRef _Nonnull' name='key' type64='^{OpaqueSecKeyRef=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='CFDataRef _Nullable' type64='^{__CFData=}'/>
</function>
<function name='SecKeyCopyKeyExchangeResult'>
<arg declared_type64='SecKeyRef _Nonnull' name='privateKey' type64='^{OpaqueSecKeyRef=}'/>
<arg declared_type64='SecKeyAlgorithm _Nonnull' name='algorithm' type64='^{__CFString=}'/>
<arg declared_type64='SecKeyRef _Nonnull' name='publicKey' type64='^{OpaqueSecKeyRef=}'/>
<arg declared_type64='CFDictionaryRef _Nonnull' name='parameters' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='CFDataRef _Nullable' type64='^{__CFData=}'/>
</function>
<function name='SecKeyCopyPublicKey'>
<arg declared_type64='SecKeyRef _Nonnull' name='key' type64='^{OpaqueSecKeyRef=}'/>
<retval declared_type64='SecKeyRef _Nullable' type64='^{OpaqueSecKeyRef=}'/>
</function>
<function name='SecKeyCreateDecryptedData'>
<arg declared_type64='SecKeyRef _Nonnull' name='key' type64='^{OpaqueSecKeyRef=}'/>
<arg declared_type64='SecKeyAlgorithm _Nonnull' name='algorithm' type64='^{__CFString=}'/>
<arg declared_type64='CFDataRef _Nonnull' name='ciphertext' type64='^{__CFData=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='CFDataRef _Nullable' type64='^{__CFData=}'/>
</function>
<function name='SecKeyCreateEncryptedData'>
<arg declared_type64='SecKeyRef _Nonnull' name='key' type64='^{OpaqueSecKeyRef=}'/>
<arg declared_type64='SecKeyAlgorithm _Nonnull' name='algorithm' type64='^{__CFString=}'/>
<arg declared_type64='CFDataRef _Nonnull' name='plaintext' type64='^{__CFData=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='CFDataRef _Nullable' type64='^{__CFData=}'/>
</function>
<function name='SecKeyCreateFromData'>
<arg declared_type64='CFDictionaryRef _Nonnull' name='parameters' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFDataRef _Nonnull' name='keyData' type64='^{__CFData=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='SecKeyRef _Nullable' type64='^{OpaqueSecKeyRef=}'/>
</function>
<function name='SecKeyCreatePair'>
<arg declared_type64='SecKeychainRef _Nullable' name='keychainRef' type64='^{OpaqueSecKeychainRef=}'/>
<arg declared_type64='CSSM_ALGORITHMS' name='algorithm' type64='I'/>
<arg declared_type64='uint32' name='keySizeInBits' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE' name='contextHandle' type64='Q'/>
<arg declared_type64='CSSM_KEYUSE' name='publicKeyUsage' type64='I'/>
<arg declared_type64='uint32' name='publicKeyAttr' type64='I'/>
<arg declared_type64='CSSM_KEYUSE' name='privateKeyUsage' type64='I'/>
<arg declared_type64='uint32' name='privateKeyAttr' type64='I'/>
<arg declared_type64='SecAccessRef _Nullable' name='initialAccess' type64='^{OpaqueSecAccessRef=}'/>
<arg declared_type64='SecKeyRef _Nullable * _Nullable' name='publicKey' type64='^^{OpaqueSecKeyRef}'/>
<arg declared_type64='SecKeyRef _Nullable * _Nullable' name='privateKey' type64='^^{OpaqueSecKeyRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeyCreateRandomKey'>
<arg declared_type64='CFDictionaryRef _Nonnull' name='parameters' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='SecKeyRef _Nullable' type64='^{OpaqueSecKeyRef=}'/>
</function>
<function name='SecKeyCreateSignature'>
<arg declared_type64='SecKeyRef _Nonnull' name='key' type64='^{OpaqueSecKeyRef=}'/>
<arg declared_type64='SecKeyAlgorithm _Nonnull' name='algorithm' type64='^{__CFString=}'/>
<arg declared_type64='CFDataRef _Nonnull' name='dataToSign' type64='^{__CFData=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='CFDataRef _Nullable' type64='^{__CFData=}'/>
</function>
<function name='SecKeyCreateWithData'>
<arg declared_type64='CFDataRef _Nonnull' name='keyData' type64='^{__CFData=}'/>
<arg declared_type64='CFDictionaryRef _Nonnull' name='attributes' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='SecKeyRef _Nullable' type64='^{OpaqueSecKeyRef=}'/>
</function>
<function name='SecKeyDeriveFromPassword'>
<arg declared_type64='CFStringRef _Nonnull' name='password' type64='^{__CFString=}'/>
<arg declared_type64='CFDictionaryRef _Nonnull' name='parameters' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='SecKeyRef _Nullable' type64='^{OpaqueSecKeyRef=}'/>
</function>
<function name='SecKeyGenerate'>
<arg declared_type64='SecKeychainRef _Nullable' name='keychainRef' type64='^{OpaqueSecKeychainRef=}'/>
<arg declared_type64='CSSM_ALGORITHMS' name='algorithm' type64='I'/>
<arg declared_type64='uint32' name='keySizeInBits' type64='I'/>
<arg declared_type64='CSSM_CC_HANDLE' name='contextHandle' type64='Q'/>
<arg declared_type64='CSSM_KEYUSE' name='keyUsage' type64='I'/>
<arg declared_type64='uint32' name='keyAttr' type64='I'/>
<arg declared_type64='SecAccessRef _Nullable' name='initialAccess' type64='^{OpaqueSecAccessRef=}'/>
<arg declared_type64='SecKeyRef _Nullable * _Nullable' name='keyRef' type64='^^{OpaqueSecKeyRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeyGeneratePair'>
<arg declared_type64='CFDictionaryRef _Nonnull' name='parameters' type64='^{__CFDictionary=}'/>
<arg declared_type64='SecKeyRef _Nullable * _Nullable' name='publicKey' type64='^^{OpaqueSecKeyRef}'/>
<arg declared_type64='SecKeyRef _Nullable * _Nullable' name='privateKey' type64='^^{OpaqueSecKeyRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeyGeneratePairAsync'>
<arg declared_type64='CFDictionaryRef _Nonnull' name='parameters' type64='^{__CFDictionary=}'/>
<arg declared_type64='dispatch_queue_t _Nonnull' name='deliveryQueue' type64='@'/>
<arg declared_type64='SecKeyGeneratePairBlock _Nonnull' function_pointer='true' name='result' type64='@?'>
<arg declared_type64='SecKeyRef _Nonnull' type64='^{OpaqueSecKeyRef=}'/>
<arg declared_type64='SecKeyRef _Nonnull' type64='^{OpaqueSecKeyRef=}'/>
<arg declared_type64='CFErrorRef _Nonnull' type64='^{__CFError=}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='SecKeyGenerateSymmetric'>
<arg declared_type64='CFDictionaryRef _Nonnull' name='parameters' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='SecKeyRef _Nullable' type64='^{OpaqueSecKeyRef=}'/>
</function>
<function name='SecKeyGetBlockSize'>
<arg declared_type64='SecKeyRef _Nonnull' name='key' type64='^{OpaqueSecKeyRef=}'/>
<retval declared_type64='size_t' type64='Q'/>
</function>
<function name='SecKeyGetCSPHandle'>
<arg declared_type64='SecKeyRef _Nonnull' name='keyRef' type64='^{OpaqueSecKeyRef=}'/>
<arg declared_type64='CSSM_CSP_HANDLE * _Nonnull' name='cspHandle' type64='^q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeyGetCSSMKey'>
<arg declared_type64='SecKeyRef _Nonnull' name='key' type64='^{OpaqueSecKeyRef=}'/>
<arg const='true' declared_type64='CSSM_KEY * _Nullable * _Nonnull' name='cssmKey' type64='^^{cssm_key}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeyGetCredentials'>
<arg declared_type64='SecKeyRef _Nonnull' name='keyRef' type64='^{OpaqueSecKeyRef=}'/>
<arg declared_type64='CSSM_ACL_AUTHORIZATION_TAG' name='operation' type64='i'/>
<arg declared_type64='SecCredentialType' name='credentialType' type64='I'/>
<arg const='true' declared_type64='CSSM_ACCESS_CREDENTIALS * _Nullable * _Nonnull' name='outCredentials' type64='^^{cssm_access_credentials}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeyGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecKeyIsAlgorithmSupported'>
<arg declared_type64='SecKeyRef _Nonnull' name='key' type64='^{OpaqueSecKeyRef=}'/>
<arg declared_type64='SecKeyOperationType' name='operation' type64='q'/>
<arg declared_type64='SecKeyAlgorithm _Nonnull' name='algorithm' type64='^{__CFString=}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='SecKeyUnwrapSymmetric'>
<arg declared_type64='CFDataRef _Nullable * _Nonnull' name='keyToUnwrap' type64='^^{__CFData}'/>
<arg declared_type64='SecKeyRef _Nonnull' name='unwrappingKey' type64='^{OpaqueSecKeyRef=}'/>
<arg declared_type64='CFDictionaryRef _Nonnull' name='parameters' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='SecKeyRef _Nullable' type64='^{OpaqueSecKeyRef=}'/>
</function>
<function name='SecKeyVerifySignature'>
<arg declared_type64='SecKeyRef _Nonnull' name='key' type64='^{OpaqueSecKeyRef=}'/>
<arg declared_type64='SecKeyAlgorithm _Nonnull' name='algorithm' type64='^{__CFString=}'/>
<arg declared_type64='CFDataRef _Nonnull' name='signedData' type64='^{__CFData=}'/>
<arg declared_type64='CFDataRef _Nonnull' name='signature' type64='^{__CFData=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='SecKeyWrapSymmetric'>
<arg declared_type64='SecKeyRef _Nonnull' name='keyToWrap' type64='^{OpaqueSecKeyRef=}'/>
<arg declared_type64='SecKeyRef _Nonnull' name='wrappingKey' type64='^{OpaqueSecKeyRef=}'/>
<arg declared_type64='CFDictionaryRef _Nonnull' name='parameters' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='CFDataRef _Nullable' type64='^{__CFData=}'/>
</function>
<function name='SecKeychainAddCallback'>
<arg declared_type64='SecKeychainCallback _Nonnull' function_pointer='true' name='callbackFunction' type64='^?'>
<arg declared_type64='SecKeychainEvent' type64='I'/>
<arg declared_type64='SecKeychainCallbackInfo * _Nonnull' type64='^{SecKeychainCallbackInfo=I^{OpaqueSecKeychainItemRef}^{OpaqueSecKeychainRef}i}'/>
<arg declared_type64='void * _Nullable' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='SecKeychainEventMask' name='eventMask' type64='I'/>
<arg declared_type64='void * _Nullable' name='userContext' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainAddGenericPassword'>
<arg declared_type64='SecKeychainRef _Nullable' name='keychain' type64='^{OpaqueSecKeychainRef=}'/>
<arg declared_type64='UInt32' name='serviceNameLength' type64='I'/>
<arg const='true' declared_type64='char * _Nullable' name='serviceName' type64='*'/>
<arg declared_type64='UInt32' name='accountNameLength' type64='I'/>
<arg const='true' declared_type64='char * _Nullable' name='accountName' type64='*'/>
<arg declared_type64='UInt32' name='passwordLength' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='passwordData' type64='^v'/>
<arg declared_type64='SecKeychainItemRef _Nullable * _Nullable' name='itemRef' type64='^^{OpaqueSecKeychainItemRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainAddInternetPassword'>
<arg declared_type64='SecKeychainRef _Nullable' name='keychain' type64='^{OpaqueSecKeychainRef=}'/>
<arg declared_type64='UInt32' name='serverNameLength' type64='I'/>
<arg const='true' declared_type64='char * _Nullable' name='serverName' type64='*'/>
<arg declared_type64='UInt32' name='securityDomainLength' type64='I'/>
<arg const='true' declared_type64='char * _Nullable' name='securityDomain' type64='*'/>
<arg declared_type64='UInt32' name='accountNameLength' type64='I'/>
<arg const='true' declared_type64='char * _Nullable' name='accountName' type64='*'/>
<arg declared_type64='UInt32' name='pathLength' type64='I'/>
<arg const='true' declared_type64='char * _Nullable' name='path' type64='*'/>
<arg declared_type64='UInt16' name='port' type64='S'/>
<arg declared_type64='SecProtocolType' name='protocol' type64='I'/>
<arg declared_type64='SecAuthenticationType' name='authenticationType' type64='I'/>
<arg declared_type64='UInt32' name='passwordLength' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='passwordData' type64='^v'/>
<arg declared_type64='SecKeychainItemRef _Nullable * _Nullable' name='itemRef' type64='^^{OpaqueSecKeychainItemRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainAttributeInfoForItemID'>
<arg declared_type64='SecKeychainRef _Nullable' name='keychain' type64='^{OpaqueSecKeychainRef=}'/>
<arg declared_type64='UInt32' name='itemID' type64='I'/>
<arg declared_type64='SecKeychainAttributeInfo * _Nullable * _Nonnull' name='info' type64='^^{SecKeychainAttributeInfo}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainCopyAccess'>
<arg declared_type64='SecKeychainRef _Nullable' name='keychain' type64='^{OpaqueSecKeychainRef=}'/>
<arg declared_type64='SecAccessRef _Nullable * _Nonnull' name='access' type64='^^{OpaqueSecAccessRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainCopyDefault'>
<arg declared_type64='SecKeychainRef _Nullable * _Nonnull' name='keychain' type64='^^{OpaqueSecKeychainRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainCopyDomainDefault'>
<arg declared_type64='SecPreferencesDomain' name='domain' type64='i'/>
<arg declared_type64='SecKeychainRef _Nullable * _Nonnull' name='keychain' type64='^^{OpaqueSecKeychainRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainCopyDomainSearchList'>
<arg declared_type64='SecPreferencesDomain' name='domain' type64='i'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='searchList' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainCopySearchList'>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='searchList' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainCopySettings'>
<arg declared_type64='SecKeychainRef _Nullable' name='keychain' type64='^{OpaqueSecKeychainRef=}'/>
<arg declared_type64='SecKeychainSettings * _Nonnull' name='outSettings' type64='^{SecKeychainSettings=IBBI}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainCreate'>
<arg const='true' declared_type64='char * _Nonnull' name='pathName' type64='*'/>
<arg declared_type64='UInt32' name='passwordLength' type64='I'/>
<arg const='true' declared_type64='void * _Nullable' name='password' type64='^v'/>
<arg declared_type64='Boolean' name='promptUser' type64='B'/>
<arg declared_type64='SecAccessRef _Nullable' name='initialAccess' type64='^{OpaqueSecAccessRef=}'/>
<arg declared_type64='SecKeychainRef _Nullable * _Nonnull' name='keychain' type64='^^{OpaqueSecKeychainRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainDelete'>
<arg declared_type64='SecKeychainRef _Nullable' name='keychainOrArray' type64='^{OpaqueSecKeychainRef=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainFindGenericPassword'>
<arg declared_type64='CFTypeRef _Nullable' name='keychainOrArray' type64='@'/>
<arg declared_type64='UInt32' name='serviceNameLength' type64='I'/>
<arg const='true' declared_type64='char * _Nullable' name='serviceName' type64='*'/>
<arg declared_type64='UInt32' name='accountNameLength' type64='I'/>
<arg const='true' declared_type64='char * _Nullable' name='accountName' type64='*'/>
<arg declared_type64='UInt32 * _Nullable' name='passwordLength' type64='^I'/>
<arg declared_type64='void * _Nullable * _Nullable' name='passwordData' type64='^^v'/>
<arg declared_type64='SecKeychainItemRef _Nullable * _Nullable' name='itemRef' type64='^^{OpaqueSecKeychainItemRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainFindInternetPassword'>
<arg declared_type64='CFTypeRef _Nullable' name='keychainOrArray' type64='@'/>
<arg declared_type64='UInt32' name='serverNameLength' type64='I'/>
<arg const='true' declared_type64='char * _Nullable' name='serverName' type64='*'/>
<arg declared_type64='UInt32' name='securityDomainLength' type64='I'/>
<arg const='true' declared_type64='char * _Nullable' name='securityDomain' type64='*'/>
<arg declared_type64='UInt32' name='accountNameLength' type64='I'/>
<arg const='true' declared_type64='char * _Nullable' name='accountName' type64='*'/>
<arg declared_type64='UInt32' name='pathLength' type64='I'/>
<arg const='true' declared_type64='char * _Nullable' name='path' type64='*'/>
<arg declared_type64='UInt16' name='port' type64='S'/>
<arg declared_type64='SecProtocolType' name='protocol' type64='I'/>
<arg declared_type64='SecAuthenticationType' name='authenticationType' type64='I'/>
<arg declared_type64='UInt32 * _Nullable' name='passwordLength' type64='^I'/>
<arg declared_type64='void * _Nullable * _Nullable' name='passwordData' type64='^^v'/>
<arg declared_type64='SecKeychainItemRef _Nullable * _Nullable' name='itemRef' type64='^^{OpaqueSecKeychainItemRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainFreeAttributeInfo'>
<arg declared_type64='SecKeychainAttributeInfo * _Nonnull' name='info' type64='^{SecKeychainAttributeInfo=I^I^I}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainGetCSPHandle'>
<arg declared_type64='SecKeychainRef _Nullable' name='keychain' type64='^{OpaqueSecKeychainRef=}'/>
<arg declared_type64='CSSM_CSP_HANDLE * _Nonnull' name='cspHandle' type64='^q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainGetDLDBHandle'>
<arg declared_type64='SecKeychainRef _Nullable' name='keychain' type64='^{OpaqueSecKeychainRef=}'/>
<arg declared_type64='CSSM_DL_DB_HANDLE * _Nonnull' name='dldbHandle' type64='^{cssm_dl_db_handle=qq}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainGetPath'>
<arg declared_type64='SecKeychainRef _Nullable' name='keychain' type64='^{OpaqueSecKeychainRef=}'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioPathLength' type64='^I'/>
<arg declared_type64='char * _Nonnull' name='pathName' type64='*'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainGetPreferenceDomain'>
<arg declared_type64='SecPreferencesDomain * _Nonnull' name='domain' type64='^i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainGetStatus'>
<arg declared_type64='SecKeychainRef _Nullable' name='keychain' type64='^{OpaqueSecKeychainRef=}'/>
<arg declared_type64='SecKeychainStatus * _Nonnull' name='keychainStatus' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecKeychainGetUserInteractionAllowed'>
<arg declared_type64='Boolean * _Nonnull' name='state' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainGetVersion'>
<arg declared_type64='UInt32 * _Nonnull' name='returnVers' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainItemCopyAccess'>
<arg declared_type64='SecKeychainItemRef _Nonnull' name='itemRef' type64='^{OpaqueSecKeychainItemRef=}'/>
<arg declared_type64='SecAccessRef _Nullable * _Nonnull' name='access' type64='^^{OpaqueSecAccessRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainItemCopyAttributesAndData'>
<arg declared_type64='SecKeychainItemRef _Nonnull' name='itemRef' type64='^{OpaqueSecKeychainItemRef=}'/>
<arg declared_type64='SecKeychainAttributeInfo * _Nullable' name='info' type64='^{SecKeychainAttributeInfo=I^I^I}'/>
<arg declared_type64='SecItemClass * _Nullable' name='itemClass' type64='^I'/>
<arg declared_type64='SecKeychainAttributeList * _Nullable * _Nullable' name='attrList' type64='^^{SecKeychainAttributeList}'/>
<arg declared_type64='UInt32 * _Nullable' name='length' type64='^I'/>
<arg declared_type64='void * _Nullable * _Nullable' name='outData' type64='^^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainItemCopyContent'>
<arg declared_type64='SecKeychainItemRef _Nonnull' name='itemRef' type64='^{OpaqueSecKeychainItemRef=}'/>
<arg declared_type64='SecItemClass * _Nullable' name='itemClass' type64='^I'/>
<arg declared_type64='SecKeychainAttributeList * _Nullable' name='attrList' type64='^{SecKeychainAttributeList=I^{SecKeychainAttribute}}'/>
<arg declared_type64='UInt32 * _Nullable' name='length' type64='^I'/>
<arg declared_type64='void * _Nullable * _Nullable' name='outData' type64='^^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainItemCopyFromPersistentReference'>
<arg declared_type64='CFDataRef _Nonnull' name='persistentItemRef' type64='^{__CFData=}'/>
<arg declared_type64='SecKeychainItemRef _Nullable * _Nonnull' name='itemRef' type64='^^{OpaqueSecKeychainItemRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainItemCopyKeychain'>
<arg declared_type64='SecKeychainItemRef _Nonnull' name='itemRef' type64='^{OpaqueSecKeychainItemRef=}'/>
<arg declared_type64='SecKeychainRef _Nullable * _Nonnull' name='keychainRef' type64='^^{OpaqueSecKeychainRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainItemCreateCopy'>
<arg declared_type64='SecKeychainItemRef _Nonnull' name='itemRef' type64='^{OpaqueSecKeychainItemRef=}'/>
<arg declared_type64='SecKeychainRef _Nullable' name='destKeychainRef' type64='^{OpaqueSecKeychainRef=}'/>
<arg declared_type64='SecAccessRef _Nullable' name='initialAccess' type64='^{OpaqueSecAccessRef=}'/>
<arg declared_type64='SecKeychainItemRef _Nullable * _Nonnull' name='itemCopy' type64='^^{OpaqueSecKeychainItemRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainItemCreateFromContent'>
<arg declared_type64='SecItemClass' name='itemClass' type64='I'/>
<arg declared_type64='SecKeychainAttributeList * _Nonnull' name='attrList' type64='^{SecKeychainAttributeList=I^{SecKeychainAttribute}}'/>
<arg declared_type64='UInt32' name='length' type64='I'/>
<arg const='true' declared_type64='void * _Nullable' name='data' type64='^v'/>
<arg declared_type64='SecKeychainRef _Nullable' name='keychainRef' type64='^{OpaqueSecKeychainRef=}'/>
<arg declared_type64='SecAccessRef _Nullable' name='initialAccess' type64='^{OpaqueSecAccessRef=}'/>
<arg declared_type64='SecKeychainItemRef _Nullable * _Nullable' name='itemRef' type64='^^{OpaqueSecKeychainItemRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainItemCreatePersistentReference'>
<arg declared_type64='SecKeychainItemRef _Nonnull' name='itemRef' type64='^{OpaqueSecKeychainItemRef=}'/>
<arg declared_type64='CFDataRef _Nullable * _Nonnull' name='persistentItemRef' type64='^^{__CFData}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainItemDelete'>
<arg declared_type64='SecKeychainItemRef _Nonnull' name='itemRef' type64='^{OpaqueSecKeychainItemRef=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainItemExport'>
<arg declared_type64='CFTypeRef _Nonnull' name='keychainItemOrArray' type64='@'/>
<arg declared_type64='SecExternalFormat' name='outputFormat' type64='I'/>
<arg declared_type64='SecItemImportExportFlags' name='flags' type64='I'/>
<arg const='true' declared_type64='SecKeyImportExportParameters * _Nullable' name='keyParams' type64='^{_SecKeyImportExportParameters=II^v^{__CFString}^{__CFString}^{OpaqueSecAccessRef}II}'/>
<arg declared_type64='CFDataRef _Nullable * _Nonnull' name='exportedData' type64='^^{__CFData}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainItemFreeAttributesAndData'>
<arg declared_type64='SecKeychainAttributeList * _Nullable' name='attrList' type64='^{SecKeychainAttributeList=I^{SecKeychainAttribute}}'/>
<arg declared_type64='void * _Nullable' name='data' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainItemFreeContent'>
<arg declared_type64='SecKeychainAttributeList * _Nullable' name='attrList' type64='^{SecKeychainAttributeList=I^{SecKeychainAttribute}}'/>
<arg declared_type64='void * _Nullable' name='data' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainItemGetDLDBHandle'>
<arg declared_type64='SecKeychainItemRef _Nonnull' name='keyItemRef' type64='^{OpaqueSecKeychainItemRef=}'/>
<arg declared_type64='CSSM_DL_DB_HANDLE * _Nonnull' name='dldbHandle' type64='^{cssm_dl_db_handle=qq}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainItemGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecKeychainItemGetUniqueRecordID'>
<arg declared_type64='SecKeychainItemRef _Nonnull' name='itemRef' type64='^{OpaqueSecKeychainItemRef=}'/>
<arg const='true' declared_type64='CSSM_DB_UNIQUE_RECORD * _Nullable * _Nonnull' name='uniqueRecordID' type64='^^{cssm_db_unique_record}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainItemImport'>
<arg declared_type64='CFDataRef _Nonnull' name='importedData' type64='^{__CFData=}'/>
<arg declared_type64='CFStringRef _Nullable' name='fileNameOrExtension' type64='^{__CFString=}'/>
<arg declared_type64='SecExternalFormat * _Nullable' name='inputFormat' type64='^I'/>
<arg declared_type64='SecExternalItemType * _Nullable' name='itemType' type64='^I'/>
<arg declared_type64='SecItemImportExportFlags' name='flags' type64='I'/>
<arg const='true' declared_type64='SecKeyImportExportParameters * _Nullable' name='keyParams' type64='^{_SecKeyImportExportParameters=II^v^{__CFString}^{__CFString}^{OpaqueSecAccessRef}II}'/>
<arg declared_type64='SecKeychainRef _Nullable' name='importKeychain' type64='^{OpaqueSecKeychainRef=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nullable' name='outItems' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainItemModifyAttributesAndData'>
<arg declared_type64='SecKeychainItemRef _Nonnull' name='itemRef' type64='^{OpaqueSecKeychainItemRef=}'/>
<arg const='true' declared_type64='SecKeychainAttributeList * _Nullable' name='attrList' type64='^{SecKeychainAttributeList=I^{SecKeychainAttribute}}'/>
<arg declared_type64='UInt32' name='length' type64='I'/>
<arg const='true' declared_type64='void * _Nullable' name='data' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainItemModifyContent'>
<arg declared_type64='SecKeychainItemRef _Nonnull' name='itemRef' type64='^{OpaqueSecKeychainItemRef=}'/>
<arg const='true' declared_type64='SecKeychainAttributeList * _Nullable' name='attrList' type64='^{SecKeychainAttributeList=I^{SecKeychainAttribute}}'/>
<arg declared_type64='UInt32' name='length' type64='I'/>
<arg const='true' declared_type64='void * _Nullable' name='data' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainItemSetAccess'>
<arg declared_type64='SecKeychainItemRef _Nonnull' name='itemRef' type64='^{OpaqueSecKeychainItemRef=}'/>
<arg declared_type64='SecAccessRef _Nonnull' name='access' type64='^{OpaqueSecAccessRef=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainLock'>
<arg declared_type64='SecKeychainRef _Nullable' name='keychain' type64='^{OpaqueSecKeychainRef=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainLockAll'>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainOpen'>
<arg const='true' declared_type64='char * _Nonnull' name='pathName' type64='*'/>
<arg declared_type64='SecKeychainRef _Nullable * _Nonnull' name='keychain' type64='^^{OpaqueSecKeychainRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainRemoveCallback'>
<arg declared_type64='SecKeychainCallback _Nonnull' function_pointer='true' name='callbackFunction' type64='^?'>
<arg declared_type64='SecKeychainEvent' type64='I'/>
<arg declared_type64='SecKeychainCallbackInfo * _Nonnull' type64='^{SecKeychainCallbackInfo=I^{OpaqueSecKeychainItemRef}^{OpaqueSecKeychainRef}i}'/>
<arg declared_type64='void * _Nullable' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainSearchCopyNext'>
<arg declared_type64='SecKeychainSearchRef _Nonnull' name='searchRef' type64='^{OpaqueSecKeychainSearchRef=}'/>
<arg declared_type64='SecKeychainItemRef _Nullable * _Nonnull' name='itemRef' type64='^^{OpaqueSecKeychainItemRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainSearchCreateFromAttributes'>
<arg declared_type64='CFTypeRef _Nullable' name='keychainOrArray' type64='@'/>
<arg declared_type64='SecItemClass' name='itemClass' type64='I'/>
<arg const='true' declared_type64='SecKeychainAttributeList * _Nullable' name='attrList' type64='^{SecKeychainAttributeList=I^{SecKeychainAttribute}}'/>
<arg declared_type64='SecKeychainSearchRef _Nullable * _Nonnull' name='searchRef' type64='^^{OpaqueSecKeychainSearchRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainSearchGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecKeychainSetAccess'>
<arg declared_type64='SecKeychainRef _Nullable' name='keychain' type64='^{OpaqueSecKeychainRef=}'/>
<arg declared_type64='SecAccessRef _Nonnull' name='access' type64='^{OpaqueSecAccessRef=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainSetDefault'>
<arg declared_type64='SecKeychainRef _Nullable' name='keychain' type64='^{OpaqueSecKeychainRef=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainSetDomainDefault'>
<arg declared_type64='SecPreferencesDomain' name='domain' type64='i'/>
<arg declared_type64='SecKeychainRef _Nullable' name='keychain' type64='^{OpaqueSecKeychainRef=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainSetDomainSearchList'>
<arg declared_type64='SecPreferencesDomain' name='domain' type64='i'/>
<arg declared_type64='CFArrayRef _Nonnull' name='searchList' type64='^{__CFArray=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainSetPreferenceDomain'>
<arg declared_type64='SecPreferencesDomain' name='domain' type64='i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainSetSearchList'>
<arg declared_type64='CFArrayRef _Nonnull' name='searchList' type64='^{__CFArray=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainSetSettings'>
<arg declared_type64='SecKeychainRef _Nullable' name='keychain' type64='^{OpaqueSecKeychainRef=}'/>
<arg const='true' declared_type64='SecKeychainSettings * _Nonnull' name='newSettings' type64='^{SecKeychainSettings=IBBI}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainSetUserInteractionAllowed'>
<arg declared_type64='Boolean' name='state' type64='B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecKeychainUnlock'>
<arg declared_type64='SecKeychainRef _Nullable' name='keychain' type64='^{OpaqueSecKeychainRef=}'/>
<arg declared_type64='UInt32' name='passwordLength' type64='I'/>
<arg const='true' declared_type64='void * _Nullable' name='password' type64='^v'/>
<arg declared_type64='Boolean' name='usePassword' type64='B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecPKCS12Import'>
<arg declared_type64='CFDataRef _Nonnull' name='pkcs12_data' type64='^{__CFData=}'/>
<arg declared_type64='CFDictionaryRef _Nonnull' name='options' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='items' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecPolicyCopyProperties'>
<arg declared_type64='SecPolicyRef _Nonnull' name='policyRef' type64='^{OpaqueSecPolicyRef=}'/>
<retval declared_type64='CFDictionaryRef _Nullable' type64='^{__CFDictionary=}'/>
</function>
<function name='SecPolicyCreateBasicX509'>
<retval declared_type64='SecPolicyRef _Nonnull' type64='^{OpaqueSecPolicyRef=}'/>
</function>
<function name='SecPolicyCreateRevocation'>
<arg declared_type64='CFOptionFlags' name='revocationFlags' type64='Q'/>
<retval declared_type64='SecPolicyRef _Nullable' type64='^{OpaqueSecPolicyRef=}'/>
</function>
<function name='SecPolicyCreateSSL'>
<arg declared_type64='Boolean' name='server' type64='B'/>
<arg declared_type64='CFStringRef _Nullable' name='hostname' type64='^{__CFString=}'/>
<retval declared_type64='SecPolicyRef _Nonnull' type64='^{OpaqueSecPolicyRef=}'/>
</function>
<function name='SecPolicyCreateWithOID'>
<arg declared_type64='CFTypeRef _Nonnull' name='policyOID' type64='@'/>
<retval declared_type64='SecPolicyRef _Nullable' type64='^{OpaqueSecPolicyRef=}'/>
</function>
<function name='SecPolicyCreateWithProperties'>
<arg declared_type64='CFTypeRef _Nonnull' name='policyIdentifier' type64='@'/>
<arg declared_type64='CFDictionaryRef _Nullable' name='properties' type64='^{__CFDictionary=}'/>
<retval declared_type64='SecPolicyRef _Nullable' type64='^{OpaqueSecPolicyRef=}'/>
</function>
<function name='SecPolicyGetOID'>
<arg declared_type64='SecPolicyRef _Nonnull' name='policyRef' type64='^{OpaqueSecPolicyRef=}'/>
<arg declared_type64='CSSM_OID * _Nonnull' name='oid' type64='^{cssm_data=Q*}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecPolicyGetTPHandle'>
<arg declared_type64='SecPolicyRef _Nonnull' name='policyRef' type64='^{OpaqueSecPolicyRef=}'/>
<arg declared_type64='CSSM_TP_HANDLE * _Nonnull' name='tpHandle' type64='^q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecPolicyGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecPolicyGetValue'>
<arg declared_type64='SecPolicyRef _Nonnull' name='policyRef' type64='^{OpaqueSecPolicyRef=}'/>
<arg declared_type64='CSSM_DATA * _Nonnull' name='value' type64='^{cssm_data=Q*}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecPolicySearchCopyNext'>
<arg declared_type64='SecPolicySearchRef _Nonnull' name='searchRef' type64='^{OpaquePolicySearchRef=}'/>
<arg declared_type64='SecPolicyRef _Nullable * _Nonnull' name='policyRef' type64='^^{OpaqueSecPolicyRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecPolicySearchCreate'>
<arg declared_type64='CSSM_CERT_TYPE' name='certType' type64='I'/>
<arg const='true' declared_type64='CSSM_OID * _Nonnull' name='policyOID' type64='^{cssm_data=Q*}'/>
<arg const='true' declared_type64='CSSM_DATA * _Nullable' name='value' type64='^{cssm_data=Q*}'/>
<arg declared_type64='SecPolicySearchRef _Nullable * _Nonnull' name='searchRef' type64='^^{OpaquePolicySearchRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecPolicySearchGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecPolicySetProperties'>
<arg declared_type64='SecPolicyRef _Nonnull' name='policyRef' type64='^{OpaqueSecPolicyRef=}'/>
<arg declared_type64='CFDictionaryRef _Nonnull' name='properties' type64='^{__CFDictionary=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecPolicySetValue'>
<arg declared_type64='SecPolicyRef _Nonnull' name='policyRef' type64='^{OpaqueSecPolicyRef=}'/>
<arg const='true' declared_type64='CSSM_DATA * _Nonnull' name='value' type64='^{cssm_data=Q*}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecRandomCopyBytes'>
<arg declared_type64='SecRandomRef _Nullable' name='rnd' type64='^{__SecRandom=}'/>
<arg declared_type64='size_t' name='count' type64='Q'/>
<arg declared_type64='void * _Nonnull' name='bytes' type64='^v'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='SecRequirementCopyData'>
<arg declared_type64='SecRequirementRef _Nonnull' name='requirement' type64='^{__SecRequirement=}'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<arg declared_type64='CFDataRef _Nullable * _Nonnull' name='data' type64='^^{__CFData}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecRequirementCopyString'>
<arg declared_type64='SecRequirementRef _Nonnull' name='requirement' type64='^{__SecRequirement=}'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<arg declared_type64='CFStringRef _Nullable * _Nonnull' name='text' type64='^^{__CFString}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecRequirementCreateWithData'>
<arg declared_type64='CFDataRef _Nonnull' name='data' type64='^{__CFData=}'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<arg declared_type64='SecRequirementRef _Nullable * _Nonnull' name='requirement' type64='^^{__SecRequirement}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecRequirementCreateWithString'>
<arg declared_type64='CFStringRef _Nonnull' name='text' type64='^{__CFString=}'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<arg declared_type64='SecRequirementRef _Nullable * _Nonnull' name='requirement' type64='^^{__SecRequirement}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecRequirementCreateWithStringAndErrors'>
<arg declared_type64='CFStringRef _Nonnull' name='text' type64='^{__CFString=}'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='errors' type64='^^{__CFError}'/>
<arg declared_type64='SecRequirementRef _Nullable * _Nonnull' name='requirement' type64='^^{__SecRequirement}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecRequirementGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecSignTransformCreate'>
<arg declared_type64='SecKeyRef _Nonnull' name='key' type64='^{OpaqueSecKeyRef=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='SecTransformRef _Nullable' type64='@'/>
</function>
<function name='SecStaticCodeCheckValidity'>
<arg declared_type64='SecStaticCodeRef _Nonnull' name='staticCode' type64='^{__SecCode=}'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<arg declared_type64='SecRequirementRef _Nullable' name='requirement' type64='^{__SecRequirement=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecStaticCodeCheckValidityWithErrors'>
<arg declared_type64='SecStaticCodeRef _Nonnull' name='staticCode' type64='^{__SecCode=}'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<arg declared_type64='SecRequirementRef _Nullable' name='requirement' type64='^{__SecRequirement=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='errors' type64='^^{__CFError}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecStaticCodeCreateWithPath'>
<arg declared_type64='CFURLRef _Nonnull' name='path' type64='^{__CFURL=}'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<arg declared_type64='SecStaticCodeRef _Nullable * _Nonnull' name='staticCode' type64='^^{__SecCode}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecStaticCodeCreateWithPathAndAttributes'>
<arg declared_type64='CFURLRef _Nonnull' name='path' type64='^{__CFURL=}'/>
<arg declared_type64='SecCSFlags' name='flags' type64='I'/>
<arg declared_type64='CFDictionaryRef _Nonnull' name='attributes' type64='^{__CFDictionary=}'/>
<arg declared_type64='SecStaticCodeRef _Nullable * _Nonnull' name='staticCode' type64='^^{__SecCode}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecStaticCodeGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecTaskCopySigningIdentifier'>
<arg declared_type64='SecTaskRef _Nonnull' name='task' type64='^{__SecTask=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='CFStringRef _Nullable' type64='^{__CFString=}'/>
</function>
<function name='SecTaskCopyValueForEntitlement'>
<arg declared_type64='SecTaskRef _Nonnull' name='task' type64='^{__SecTask=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='entitlement' type64='^{__CFString=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='CFTypeRef _Nullable' type64='@'/>
</function>
<function name='SecTaskCopyValuesForEntitlements'>
<arg declared_type64='SecTaskRef _Nonnull' name='task' type64='^{__SecTask=}'/>
<arg declared_type64='CFArrayRef _Nonnull' name='entitlements' type64='^{__CFArray=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='CFDictionaryRef _Nullable' type64='^{__CFDictionary=}'/>
</function>
<function name='SecTaskCreateFromSelf'>
<arg declared_type64='CFAllocatorRef _Nullable' name='allocator' type64='^{__CFAllocator=}'/>
<retval declared_type64='SecTaskRef _Nullable' type64='^{__SecTask=}'/>
</function>
<function name='SecTaskCreateWithAuditToken'>
<arg declared_type64='CFAllocatorRef _Nullable' name='allocator' type64='^{__CFAllocator=}'/>
<arg declared_type64='audit_token_t' name='token' type64='{_audit_token_t=[8I]}'/>
<retval declared_type64='SecTaskRef _Nullable' type64='^{__SecTask=}'/>
</function>
<function name='SecTaskGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecTranformCustomGetAttribute'>
<arg declared_type64='SecTransformImplementationRef _Nonnull' name='ref' type64='^{OpaqueSecTransformImplementation=}'/>
<arg declared_type64='SecTransformStringOrAttributeRef _Nonnull' name='attribute' type64='@'/>
<arg declared_type64='SecTransformMetaAttributeType' name='type' type64='q'/>
<retval declared_type64='CFTypeRef _Nullable' type64='@'/>
</function>
<function name='SecTransformConnectTransforms'>
<arg declared_type64='SecTransformRef _Nonnull' name='sourceTransformRef' type64='@'/>
<arg declared_type64='CFStringRef _Nonnull' name='sourceAttributeName' type64='^{__CFString=}'/>
<arg declared_type64='SecTransformRef _Nonnull' name='destinationTransformRef' type64='@'/>
<arg declared_type64='CFStringRef _Nonnull' name='destinationAttributeName' type64='^{__CFString=}'/>
<arg declared_type64='SecGroupTransformRef _Nonnull' name='group' type64='@'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='SecGroupTransformRef _Nullable' type64='@'/>
</function>
<function name='SecTransformCopyExternalRepresentation'>
<arg declared_type64='SecTransformRef _Nonnull' name='transformRef' type64='@'/>
<retval declared_type64='CFDictionaryRef _Nonnull' type64='^{__CFDictionary=}'/>
</function>
<function name='SecTransformCreate'>
<arg declared_type64='CFStringRef _Nonnull' name='name' type64='^{__CFString=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='SecTransformRef _Nullable' type64='@'/>
</function>
<function name='SecTransformCreateFromExternalRepresentation'>
<arg declared_type64='CFDictionaryRef _Nonnull' name='dictionary' type64='^{__CFDictionary=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='SecTransformRef _Nullable' type64='@'/>
</function>
<function name='SecTransformCreateGroupTransform'>
<retval declared_type64='SecGroupTransformRef _Nonnull' type64='@'/>
</function>
<function name='SecTransformCreateReadTransformWithReadStream'>
<arg declared_type64='CFReadStreamRef _Nonnull' name='inputStream' type64='^{__CFReadStream=}'/>
<retval declared_type64='SecTransformRef _Nonnull' type64='@'/>
</function>
<function name='SecTransformCustomGetAttribute'>
<arg declared_type64='SecTransformImplementationRef _Nonnull' name='ref' type64='^{OpaqueSecTransformImplementation=}'/>
<arg declared_type64='SecTransformStringOrAttributeRef _Nonnull' name='attribute' type64='@'/>
<arg declared_type64='SecTransformMetaAttributeType' name='type' type64='q'/>
<retval declared_type64='CFTypeRef _Nullable' type64='@'/>
</function>
<function name='SecTransformCustomSetAttribute'>
<arg declared_type64='SecTransformImplementationRef _Nonnull' name='ref' type64='^{OpaqueSecTransformImplementation=}'/>
<arg declared_type64='SecTransformStringOrAttributeRef _Nonnull' name='attribute' type64='@'/>
<arg declared_type64='SecTransformMetaAttributeType' name='type' type64='q'/>
<arg declared_type64='CFTypeRef _Nullable' name='value' type64='@'/>
<retval declared_type64='CFTypeRef _Nullable' type64='@'/>
</function>
<function name='SecTransformExecute'>
<arg declared_type64='SecTransformRef _Nonnull' name='transformRef' type64='@'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='errorRef' type64='^^{__CFError}'/>
<retval declared_type64='CFTypeRef _Nonnull' type64='@'/>
</function>
<function name='SecTransformExecuteAsync'>
<arg declared_type64='SecTransformRef _Nonnull' name='transformRef' type64='@'/>
<arg declared_type64='dispatch_queue_t _Nonnull' name='deliveryQueue' type64='@'/>
<arg declared_type64='SecMessageBlock _Nonnull' function_pointer='true' name='deliveryBlock' type64='@?'>
<arg declared_type64='CFTypeRef _Nullable' type64='@'/>
<arg declared_type64='CFErrorRef _Nullable' type64='^{__CFError=}'/>
<arg declared_type64='Boolean' type64='B'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='SecTransformFindByName'>
<arg declared_type64='SecGroupTransformRef _Nonnull' name='transform' type64='@'/>
<arg declared_type64='CFStringRef _Nonnull' name='name' type64='^{__CFString=}'/>
<retval declared_type64='SecTransformRef _Nullable' type64='@'/>
</function>
<function name='SecTransformGetAttribute'>
<arg declared_type64='SecTransformRef _Nonnull' name='transformRef' type64='@'/>
<arg declared_type64='CFStringRef _Nonnull' name='key' type64='^{__CFString=}'/>
<retval declared_type64='CFTypeRef _Nullable' type64='@'/>
</function>
<function name='SecTransformGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecTransformNoData'>
<retval declared_type64='CFTypeRef _Nonnull' type64='@'/>
</function>
<function name='SecTransformPushbackAttribute'>
<arg declared_type64='SecTransformImplementationRef _Nonnull' name='ref' type64='^{OpaqueSecTransformImplementation=}'/>
<arg declared_type64='SecTransformStringOrAttributeRef _Nonnull' name='attribute' type64='@'/>
<arg declared_type64='CFTypeRef _Nonnull' name='value' type64='@'/>
<retval declared_type64='CFTypeRef _Nullable' type64='@'/>
</function>
<function name='SecTransformRegister'>
<arg declared_type64='CFStringRef _Nonnull' name='uniqueName' type64='^{__CFString=}'/>
<arg declared_type64='SecTransformCreateFP _Nonnull' function_pointer='true' name='createTransformFunction' type64='^?'>
<arg declared_type64='CFStringRef _Nonnull' type64='^{__CFString=}'/>
<arg declared_type64='SecTransformRef _Nonnull' type64='@'/>
<arg declared_type64='SecTransformImplementationRef _Nonnull' type64='^{OpaqueSecTransformImplementation=}'/>
<retval declared_type64='SecTransformInstanceBlock _Nonnull' function_pointer='true' type64='@?'>
<retval declared_type64='CFErrorRef _Nullable' type64='^{__CFError=}'/>
</retval>
</arg>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='SecTransformSetAttribute'>
<arg declared_type64='SecTransformRef _Nonnull' name='transformRef' type64='@'/>
<arg declared_type64='CFStringRef _Nonnull' name='key' type64='^{__CFString=}'/>
<arg declared_type64='CFTypeRef _Nonnull' name='value' type64='@'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='SecTransformSetAttributeAction'>
<arg declared_type64='SecTransformImplementationRef _Nonnull' name='ref' type64='^{OpaqueSecTransformImplementation=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='action' type64='^{__CFString=}'/>
<arg declared_type64='SecTransformStringOrAttributeRef _Nullable' name='attribute' type64='@'/>
<arg declared_type64='SecTransformAttributeActionBlock _Nonnull' function_pointer='true' name='newAction' type64='@?'>
<arg declared_type64='SecTransformAttributeRef _Nonnull' type64='@'/>
<arg declared_type64='CFTypeRef _Nonnull' type64='@'/>
<retval declared_type64='CFTypeRef _Nullable' type64='@'/>
</arg>
<retval declared_type64='CFErrorRef _Nullable' type64='^{__CFError=}'/>
</function>
<function name='SecTransformSetDataAction'>
<arg declared_type64='SecTransformImplementationRef _Nonnull' name='ref' type64='^{OpaqueSecTransformImplementation=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='action' type64='^{__CFString=}'/>
<arg declared_type64='SecTransformDataBlock _Nonnull' function_pointer='true' name='newAction' type64='@?'>
<arg declared_type64='CFTypeRef _Nonnull' type64='@'/>
<retval declared_type64='CFTypeRef _Nullable' type64='@'/>
</arg>
<retval declared_type64='CFErrorRef _Nullable' type64='^{__CFError=}'/>
</function>
<function name='SecTransformSetTransformAction'>
<arg declared_type64='SecTransformImplementationRef _Nonnull' name='ref' type64='^{OpaqueSecTransformImplementation=}'/>
<arg declared_type64='CFStringRef _Nonnull' name='action' type64='^{__CFString=}'/>
<arg declared_type64='SecTransformActionBlock _Nonnull' function_pointer='true' name='newAction' type64='@?'>
<retval declared_type64='CFTypeRef _Nullable' type64='@'/>
</arg>
<retval declared_type64='CFErrorRef _Nullable' type64='^{__CFError=}'/>
</function>
<function name='SecTrustCopyAnchorCertificates'>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='anchors' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustCopyCustomAnchorCertificates'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='anchors' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustCopyExceptions'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<retval declared_type64='CFDataRef _Nonnull' type64='^{__CFData=}'/>
</function>
<function name='SecTrustCopyPolicies'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='policies' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustCopyProperties'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<retval declared_type64='CFArrayRef _Nullable' type64='^{__CFArray=}'/>
</function>
<function name='SecTrustCopyPublicKey'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<retval declared_type64='SecKeyRef _Nullable' type64='^{OpaqueSecKeyRef=}'/>
</function>
<function name='SecTrustCopyResult'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<retval declared_type64='CFDictionaryRef _Nullable' type64='^{__CFDictionary=}'/>
</function>
<function name='SecTrustCreateWithCertificates'>
<arg declared_type64='CFTypeRef _Nonnull' name='certificates' type64='@'/>
<arg declared_type64='CFTypeRef _Nullable' name='policies' type64='@'/>
<arg declared_type64='SecTrustRef _Nullable * _Nonnull' name='trust' type64='^^{__SecTrust}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustEvaluate'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='SecTrustResultType * _Nonnull' name='result' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustEvaluateAsync'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='dispatch_queue_t _Nullable' name='queue' type64='@'/>
<arg declared_type64='SecTrustCallback _Nonnull' function_pointer='true' name='result' type64='@?'>
<arg declared_type64='SecTrustRef _Nonnull' type64='^{__SecTrust=}'/>
<arg declared_type64='SecTrustResultType' type64='I'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustEvaluateWithError'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='SecTrustGetCertificateAtIndex'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='CFIndex' name='ix' type64='q'/>
<retval declared_type64='SecCertificateRef _Nullable' type64='^{OpaqueSecCertificateRef=}'/>
</function>
<function name='SecTrustGetCertificateCount'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<retval declared_type64='CFIndex' type64='q'/>
</function>
<function name='SecTrustGetCssmResult'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='CSSM_TP_VERIFY_CONTEXT_RESULT_PTR _Nullable * _Nonnull' name='result' type64='^^{cssm_tp_verify_context_result}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustGetCssmResultCode'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='OSStatus * _Nonnull' name='resultCode' type64='^i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustGetNetworkFetchAllowed'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='Boolean * _Nonnull' name='allowFetch' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustGetResult'>
<arg declared_type64='SecTrustRef _Nonnull' name='trustRef' type64='^{__SecTrust=}'/>
<arg declared_type64='SecTrustResultType * _Nullable' name='result' type64='^I'/>
<arg declared_type64='CFArrayRef _Nullable * _Nullable' name='certChain' type64='^^{__CFArray}'/>
<arg declared_type64='CSSM_TP_APPLE_EVIDENCE_INFO * _Nullable * _Nullable' name='statusChain' type64='^^{?}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustGetTPHandle'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='CSSM_TP_HANDLE * _Nonnull' name='handle' type64='^q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustGetTrustResult'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='SecTrustResultType * _Nonnull' name='result' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecTrustGetVerifyTime'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<retval declared_type64='CFAbsoluteTime' type64='d'/>
</function>
<function name='SecTrustSetAnchorCertificates'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='CFArrayRef _Nonnull' name='anchorCertificates' type64='^{__CFArray=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustSetAnchorCertificatesOnly'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='Boolean' name='anchorCertificatesOnly' type64='B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustSetExceptions'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='CFDataRef _Nullable' name='exceptions' type64='^{__CFData=}'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='SecTrustSetKeychains'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='CFTypeRef _Nullable' name='keychainOrArray' type64='@'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustSetNetworkFetchAllowed'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='Boolean' name='allowFetch' type64='B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustSetOCSPResponse'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='CFTypeRef _Nullable' name='responseData' type64='@'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustSetOptions'>
<arg declared_type64='SecTrustRef _Nonnull' name='trustRef' type64='^{__SecTrust=}'/>
<arg declared_type64='SecTrustOptionFlags' name='options' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustSetParameters'>
<arg declared_type64='SecTrustRef _Nonnull' name='trustRef' type64='^{__SecTrust=}'/>
<arg declared_type64='CSSM_TP_ACTION' name='action' type64='I'/>
<arg declared_type64='CFDataRef _Nonnull' name='actionData' type64='^{__CFData=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustSetPolicies'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='CFTypeRef _Nonnull' name='policies' type64='@'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustSetVerifyDate'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<arg declared_type64='CFDateRef _Nonnull' name='verifyDate' type64='^{__CFDate=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustSettingsCopyCertificates'>
<arg declared_type64='SecTrustSettingsDomain' name='domain' type64='I'/>
<arg declared_type64='CFArrayRef _Nullable * _Nullable' name='certArray' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustSettingsCopyModificationDate'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certRef' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='SecTrustSettingsDomain' name='domain' type64='I'/>
<arg declared_type64='CFDateRef _Nullable * _Nonnull' name='modificationDate' type64='^^{__CFDate}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustSettingsCopyTrustSettings'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certRef' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='SecTrustSettingsDomain' name='domain' type64='I'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='trustSettings' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustSettingsCreateExternalRepresentation'>
<arg declared_type64='SecTrustSettingsDomain' name='domain' type64='I'/>
<arg declared_type64='CFDataRef _Nullable * _Nonnull' name='trustSettings' type64='^^{__CFData}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustSettingsImportExternalRepresentation'>
<arg declared_type64='SecTrustSettingsDomain' name='domain' type64='I'/>
<arg declared_type64='CFDataRef _Nonnull' name='trustSettings' type64='^{__CFData=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustSettingsRemoveTrustSettings'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certRef' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='SecTrustSettingsDomain' name='domain' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustSettingsSetTrustSettings'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certRef' type64='^{OpaqueSecCertificateRef=}'/>
<arg declared_type64='SecTrustSettingsDomain' name='domain' type64='I'/>
<arg declared_type64='CFTypeRef _Nullable' name='trustSettingsDictOrArray' type64='@'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustedApplicationCopyData'>
<arg declared_type64='SecTrustedApplicationRef _Nonnull' name='appRef' type64='^{OpaqueSecTrustedApplicationRef=}'/>
<arg declared_type64='CFDataRef _Nullable * _Nonnull' name='data' type64='^^{__CFData}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustedApplicationCreateFromPath'>
<arg const='true' declared_type64='char * _Nullable' name='path' type64='*'/>
<arg declared_type64='SecTrustedApplicationRef _Nullable * _Nonnull' name='app' type64='^^{OpaqueSecTrustedApplicationRef}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecTrustedApplicationGetTypeID'>
<retval declared_type64='CFTypeID' type64='Q'/>
</function>
<function name='SecTrustedApplicationSetData'>
<arg declared_type64='SecTrustedApplicationRef _Nonnull' name='appRef' type64='^{OpaqueSecTrustedApplicationRef=}'/>
<arg declared_type64='CFDataRef _Nonnull' name='data' type64='^{__CFData=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecVerifyTransformCreate'>
<arg declared_type64='SecKeyRef _Nonnull' name='key' type64='^{OpaqueSecKeyRef=}'/>
<arg declared_type64='CFDataRef _Nullable' name='signature' type64='^{__CFData=}'/>
<arg declared_type64='CFErrorRef _Nullable * _Nullable' name='error' type64='^^{__CFError}'/>
<retval declared_type64='SecTransformRef _Nullable' type64='@'/>
</function>
<function name='SecureDownloadCopyCreationDate'>
<arg declared_type64='SecureDownloadRef' name='downloadRef' type64='^{OpaqueSecureDownload=}'/>
<arg declared_type64='CFDateRef*' name='date' type64='^^{__CFDate}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecureDownloadCopyName'>
<arg declared_type64='SecureDownloadRef' name='downloadRef' type64='^{OpaqueSecureDownload=}'/>
<arg declared_type64='CFStringRef*' name='name' type64='^^{__CFString}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecureDownloadCopyTicketLocation'>
<arg declared_type64='CFURLRef' name='url' type64='^{__CFURL=}'/>
<arg declared_type64='CFURLRef*' name='ticketLocation' type64='^^{__CFURL}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecureDownloadCopyURLs'>
<arg declared_type64='SecureDownloadRef' name='downloadRef' type64='^{OpaqueSecureDownload=}'/>
<arg declared_type64='CFArrayRef*' name='urls' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecureDownloadCreateWithTicket'>
<arg declared_type64='CFDataRef' name='ticket' type64='^{__CFData=}'/>
<arg declared_type64='SecureDownloadTrustSetupCallback' function_pointer='true' name='setup' type64='^?'>
<arg declared_type64='SecTrustRef' type64='^{__SecTrust=}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='SecureDownloadTrustCallbackResult' type64='i'/>
</arg>
<arg declared_type64='void*' name='setupContext' type64='^v'/>
<arg declared_type64='SecureDownloadTrustEvaluateCallback' function_pointer='true' name='evaluate' type64='^?'>
<arg declared_type64='SecTrustRef' type64='^{__SecTrust=}'/>
<arg declared_type64='SecTrustResultType' type64='I'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='SecTrustResultType' type64='I'/>
</arg>
<arg declared_type64='void*' name='evaluateContext' type64='^v'/>
<arg declared_type64='SecureDownloadRef*' name='downloadRef' type64='^^{OpaqueSecureDownload}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecureDownloadFinished'>
<arg declared_type64='SecureDownloadRef' name='downloadRef' type64='^{OpaqueSecureDownload=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecureDownloadGetDownloadSize'>
<arg declared_type64='SecureDownloadRef' name='downloadRef' type64='^{OpaqueSecureDownload=}'/>
<arg declared_type64='SInt64*' name='downloadSize' type64='^q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecureDownloadRelease'>
<arg declared_type64='SecureDownloadRef' name='downloadRef' type64='^{OpaqueSecureDownload=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SecureDownloadUpdateWithData'>
<arg declared_type64='SecureDownloadRef' name='downloadRef' type64='^{OpaqueSecureDownload=}'/>
<arg declared_type64='CFDataRef' name='data' type64='^{__CFData=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SessionCreate'>
<arg declared_type64='SessionCreationFlags' name='flags' type64='I'/>
<arg declared_type64='SessionAttributeBits' name='attributes' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='SessionGetInfo'>
<arg declared_type64='SecuritySessionId' name='session' type64='I'/>
<arg declared_type64='SecuritySessionId * _Nullable' name='sessionId' type64='^I'/>
<arg declared_type64='SessionAttributeBits * _Nullable' name='attributes' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='cssmAlgToOid'>
<arg declared_type64='CSSM_ALGORITHMS' name='algId' type64='I'/>
<retval const='true' declared_type64='CSSM_OID*' type64='^{cssm_data=Q*}'/>
</function>
<function name='cssmOidToAlg'>
<arg const='true' declared_type64='CSSM_OID*' name='oid' type64='^{cssm_data=Q*}'/>
<arg declared_type64='CSSM_ALGORITHMS*' name='alg' type64='^I'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='cssmPerror'>
<arg const='true' declared_type64='char*' name='how' type64='*'/>
<arg declared_type64='CSSM_RETURN' name='error' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_certificate_copy_ref'>
<arg declared_type64='sec_certificate_t _Nonnull' name='certificate' type64='@'/>
<retval declared_type64='SecCertificateRef _Nonnull' type64='^{OpaqueSecCertificateRef=}'/>
</function>
<function name='sec_certificate_create'>
<arg declared_type64='SecCertificateRef _Nonnull' name='certificate' type64='^{OpaqueSecCertificateRef=}'/>
<retval already_retained='true' declared_type64='sec_certificate_t _Nullable' type64='@'/>
</function>
<function name='sec_identity_copy_certificates_ref'>
<arg declared_type64='sec_identity_t _Nonnull' name='identity' type64='@'/>
<retval declared_type64='CFArrayRef _Nonnull' type64='^{__CFArray=}'/>
</function>
<function name='sec_identity_copy_ref'>
<arg declared_type64='sec_identity_t _Nonnull' name='identity' type64='@'/>
<retval declared_type64='SecIdentityRef _Nonnull' type64='^{OpaqueSecIdentityRef=}'/>
</function>
<function name='sec_identity_create'>
<arg declared_type64='SecIdentityRef _Nonnull' name='identity' type64='^{OpaqueSecIdentityRef=}'/>
<retval already_retained='true' declared_type64='sec_identity_t _Nullable' type64='@'/>
</function>
<function name='sec_identity_create_with_certificates'>
<arg declared_type64='SecIdentityRef _Nonnull' name='identity' type64='^{OpaqueSecIdentityRef=}'/>
<arg declared_type64='CFArrayRef _Nonnull' name='certificates' type64='^{__CFArray=}'/>
<retval already_retained='true' declared_type64='sec_identity_t _Nullable' type64='@'/>
</function>
<function name='sec_protocol_metadata_access_distinguished_names'>
<arg declared_type64='sec_protocol_metadata_t _Nonnull' name='metadata' type64='@'/>
<arg declared_type64='void (^ _Nonnull)(dispatch_data_t _Nonnull)' function_pointer='true' name='handler' type64='@?'>
<arg declared_type64='dispatch_data_t _Nonnull' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='sec_protocol_metadata_access_ocsp_response'>
<arg declared_type64='sec_protocol_metadata_t _Nonnull' name='metadata' type64='@'/>
<arg declared_type64='void (^ _Nonnull)(dispatch_data_t _Nonnull)' function_pointer='true' name='handler' type64='@?'>
<arg declared_type64='dispatch_data_t _Nonnull' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='sec_protocol_metadata_access_peer_certificate_chain'>
<arg declared_type64='sec_protocol_metadata_t _Nonnull' name='metadata' type64='@'/>
<arg declared_type64='void (^ _Nonnull)(sec_certificate_t _Nonnull)' function_pointer='true' name='handler' type64='@?'>
<arg declared_type64='sec_certificate_t _Nonnull' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='sec_protocol_metadata_access_supported_signature_algorithms'>
<arg declared_type64='sec_protocol_metadata_t _Nonnull' name='metadata' type64='@'/>
<arg declared_type64='void (^ _Nonnull)(uint16_t)' function_pointer='true' name='handler' type64='@?'>
<arg declared_type64='uint16_t' type64='S'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='sec_protocol_metadata_challenge_parameters_are_equal'>
<arg declared_type64='sec_protocol_metadata_t _Nonnull' name='metadataA' type64='@'/>
<arg declared_type64='sec_protocol_metadata_t _Nonnull' name='metadataB' type64='@'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='sec_protocol_metadata_copy_peer_public_key'>
<arg declared_type64='sec_protocol_metadata_t _Nonnull' name='metadata' type64='@'/>
<retval already_retained='true' declared_type64='dispatch_data_t _Nullable' type64='@'/>
</function>
<function name='sec_protocol_metadata_create_secret'>
<arg declared_type64='sec_protocol_metadata_t _Nonnull' name='metadata' type64='@'/>
<arg declared_type64='size_t' name='label_len' type64='Q'/>
<arg const='true' declared_type64='char * _Nonnull' name='label' type64='*'/>
<arg declared_type64='size_t' name='exporter_length' type64='Q'/>
<retval already_retained='true' declared_type64='dispatch_data_t _Nullable' type64='@'/>
</function>
<function name='sec_protocol_metadata_create_secret_with_context'>
<arg declared_type64='sec_protocol_metadata_t _Nonnull' name='metadata' type64='@'/>
<arg declared_type64='size_t' name='label_len' type64='Q'/>
<arg const='true' declared_type64='char * _Nonnull' name='label' type64='*'/>
<arg declared_type64='size_t' name='context_len' type64='Q'/>
<arg const='true' declared_type64='uint8_t * _Nonnull' name='context' type64='*'/>
<arg declared_type64='size_t' name='exporter_length' type64='Q'/>
<retval already_retained='true' declared_type64='dispatch_data_t _Nullable' type64='@'/>
</function>
<function name='sec_protocol_metadata_get_early_data_accepted'>
<arg declared_type64='sec_protocol_metadata_t _Nonnull' name='metadata' type64='@'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='sec_protocol_metadata_get_negotiated_ciphersuite'>
<arg declared_type64='sec_protocol_metadata_t _Nonnull' name='metadata' type64='@'/>
<retval declared_type64='SSLCipherSuite' type64='I'/>
</function>
<function name='sec_protocol_metadata_get_negotiated_protocol'>
<arg declared_type64='sec_protocol_metadata_t _Nonnull' name='metadata' type64='@'/>
<retval const='true' declared_type64='char * _Nullable' type64='*'/>
</function>
<function name='sec_protocol_metadata_get_negotiated_protocol_version'>
<arg declared_type64='sec_protocol_metadata_t _Nonnull' name='metadata' type64='@'/>
<retval declared_type64='SSLProtocol' type64='i'/>
</function>
<function name='sec_protocol_metadata_peers_are_equal'>
<arg declared_type64='sec_protocol_metadata_t _Nonnull' name='metadataA' type64='@'/>
<arg declared_type64='sec_protocol_metadata_t _Nonnull' name='metadataB' type64='@'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='sec_protocol_options_add_pre_shared_key'>
<arg declared_type64='sec_protocol_options_t _Nonnull' name='options' type64='@'/>
<arg declared_type64='dispatch_data_t _Nonnull' name='psk' type64='@'/>
<arg declared_type64='dispatch_data_t _Nonnull' name='psk_identity' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_protocol_options_add_tls_application_protocol'>
<arg declared_type64='sec_protocol_options_t _Nonnull' name='options' type64='@'/>
<arg const='true' declared_type64='char * _Nonnull' name='application_protocol' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_protocol_options_add_tls_ciphersuite'>
<arg declared_type64='sec_protocol_options_t _Nonnull' name='options' type64='@'/>
<arg declared_type64='SSLCipherSuite' name='ciphersuite' type64='I'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_protocol_options_add_tls_ciphersuite_group'>
<arg declared_type64='sec_protocol_options_t _Nonnull' name='options' type64='@'/>
<arg declared_type64='SSLCiphersuiteGroup' name='group' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_protocol_options_set_challenge_block'>
<arg declared_type64='sec_protocol_options_t _Nonnull' name='options' type64='@'/>
<arg declared_type64='sec_protocol_challenge_t _Nonnull' function_pointer='true' name='challenge_block' type64='@?'>
<arg declared_type64='sec_protocol_metadata_t _Nonnull' type64='@'/>
<arg declared_type64='sec_protocol_challenge_complete_t _Nonnull' function_pointer='true' type64='@?'>
<arg declared_type64='sec_identity_t _Nonnull' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='dispatch_queue_t _Nonnull' name='challenge_queue' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_protocol_options_set_key_update_block'>
<arg declared_type64='sec_protocol_options_t _Nonnull' name='options' type64='@'/>
<arg declared_type64='sec_protocol_key_update_t _Nonnull' function_pointer='true' name='key_update_block' type64='@?'>
<arg declared_type64='sec_protocol_metadata_t _Nonnull' type64='@'/>
<arg declared_type64='sec_protocol_key_update_complete_t _Nonnull' function_pointer='true' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='dispatch_queue_t _Nonnull' name='key_update_queue' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_protocol_options_set_local_identity'>
<arg declared_type64='sec_protocol_options_t _Nonnull' name='options' type64='@'/>
<arg declared_type64='sec_identity_t _Nonnull' name='identity' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_protocol_options_set_peer_authentication_required'>
<arg declared_type64='sec_protocol_options_t _Nonnull' name='options' type64='@'/>
<arg declared_type64='_Bool' name='peer_authentication_required' type64='B'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_protocol_options_set_tls_diffie_hellman_parameters'>
<arg declared_type64='sec_protocol_options_t _Nonnull' name='options' type64='@'/>
<arg declared_type64='dispatch_data_t _Nonnull' name='params' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_protocol_options_set_tls_false_start_enabled'>
<arg declared_type64='sec_protocol_options_t _Nonnull' name='options' type64='@'/>
<arg declared_type64='_Bool' name='false_start_enabled' type64='B'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_protocol_options_set_tls_is_fallback_attempt'>
<arg declared_type64='sec_protocol_options_t _Nonnull' name='options' type64='@'/>
<arg declared_type64='_Bool' name='is_fallback_attempt' type64='B'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_protocol_options_set_tls_max_version'>
<arg declared_type64='sec_protocol_options_t _Nonnull' name='options' type64='@'/>
<arg declared_type64='SSLProtocol' name='version' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_protocol_options_set_tls_min_version'>
<arg declared_type64='sec_protocol_options_t _Nonnull' name='options' type64='@'/>
<arg declared_type64='SSLProtocol' name='version' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_protocol_options_set_tls_ocsp_enabled'>
<arg declared_type64='sec_protocol_options_t _Nonnull' name='options' type64='@'/>
<arg declared_type64='_Bool' name='ocsp_enabled' type64='B'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_protocol_options_set_tls_renegotiation_enabled'>
<arg declared_type64='sec_protocol_options_t _Nonnull' name='options' type64='@'/>
<arg declared_type64='_Bool' name='renegotiation_enabled' type64='B'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_protocol_options_set_tls_resumption_enabled'>
<arg declared_type64='sec_protocol_options_t _Nonnull' name='options' type64='@'/>
<arg declared_type64='_Bool' name='resumption_enabled' type64='B'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_protocol_options_set_tls_sct_enabled'>
<arg declared_type64='sec_protocol_options_t _Nonnull' name='options' type64='@'/>
<arg declared_type64='_Bool' name='sct_enabled' type64='B'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_protocol_options_set_tls_server_name'>
<arg declared_type64='sec_protocol_options_t _Nonnull' name='options' type64='@'/>
<arg const='true' declared_type64='char * _Nonnull' name='server_name' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_protocol_options_set_tls_tickets_enabled'>
<arg declared_type64='sec_protocol_options_t _Nonnull' name='options' type64='@'/>
<arg declared_type64='_Bool' name='tickets_enabled' type64='B'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_protocol_options_set_verify_block'>
<arg declared_type64='sec_protocol_options_t _Nonnull' name='options' type64='@'/>
<arg declared_type64='sec_protocol_verify_t _Nonnull' function_pointer='true' name='verify_block' type64='@?'>
<arg declared_type64='sec_protocol_metadata_t _Nonnull' type64='@'/>
<arg declared_type64='sec_trust_t _Nonnull' type64='@'/>
<arg declared_type64='sec_protocol_verify_complete_t _Nonnull' function_pointer='true' type64='@?'>
<arg declared_type64='_Bool' type64='B'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='dispatch_queue_t _Nonnull' name='verify_block_queue' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_release'>
<arg declared_type64='void*' name='obj' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='sec_retain'>
<arg declared_type64='void*' name='obj' type64='^v'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='sec_trust_copy_ref'>
<arg declared_type64='sec_trust_t _Nonnull' name='trust' type64='@'/>
<retval declared_type64='SecTrustRef _Nonnull' type64='^{__SecTrust=}'/>
</function>
<function name='sec_trust_create'>
<arg declared_type64='SecTrustRef _Nonnull' name='trust' type64='^{__SecTrust=}'/>
<retval already_retained='true' declared_type64='sec_trust_t _Nullable' type64='@'/>
</function>
</signatures>
