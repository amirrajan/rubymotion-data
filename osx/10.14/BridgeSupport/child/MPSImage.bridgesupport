<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='MPSImageHistogramInfo' type64='{_MPSImageHistogramInfo=&quot;numberOfHistogramEntries&quot;Q&quot;histogramForAlpha&quot;B&quot;minPixelValue&quot;&quot;maxPixelValue&quot;}'>
<field declared_type64='NSUInteger' name='numberOfHistogramEntries' type64='Q'/>
<field declared_type64='BOOL' name='histogramForAlpha' type64='B'/>
<field declared_type64='vector_float4' name='minPixelValue' type64=''/>
<field declared_type64='vector_float4' name='maxPixelValue' type64=''/>
</struct>
<struct name='MPSImageKeypointData' type64='{_MPSImageKeypointData=&quot;keypointCoordinate&quot;&quot;keypointColorValue&quot;f}'>
<field declared_type64='vector_ushort2' name='keypointCoordinate' type64=''/>
<field declared_type64='float' name='keypointColorValue' type64='f'/>
</struct>
<struct name='MPSImageKeypointRangeInfo' type64='{_MPSImageKeypointRangeInfo=&quot;maximumKeypoints&quot;Q&quot;minimumThresholdValue&quot;f}'>
<field declared_type64='NSUInteger' name='maximumKeypoints' type64='Q'/>
<field declared_type64='float' name='minimumThresholdValue' type64='f'/>
</struct>
<enum name='MPSAlphaTypeAlphaIsOne' value64='1'/>
<enum name='MPSAlphaTypeNonPremultiplied' value64='0'/>
<enum name='MPSAlphaTypePremultiplied' value64='2'/>
<class name='MPSBinaryImageKernel'>
<method selector='clipRect'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='encodeToCommandBuffer:inPlacePrimaryTexture:secondaryTexture:fallbackCopyAllocator:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull * _Nonnull' index='1' name='inPlacePrimaryTexture' type64='^@'/>
<arg declared_type64='id _Nonnull' index='2' name='secondaryTexture' type64='@'/>
<arg declared_type64='MPSCopyAllocator _Nullable' function_pointer='true' index='3' name='copyAllocator' type64='@?'>
<arg declared_type64='MPSKernel * _Nonnull' type64='@'/>
<arg declared_type64='id _Nonnull' type64='@'/>
<arg declared_type64='id _Nonnull' type64='@'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</arg>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='encodeToCommandBuffer:primaryImage:secondaryImage:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='primaryImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='secondaryImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='3' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:primaryTexture:inPlaceSecondaryTexture:fallbackCopyAllocator:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='primaryTexture' type64='@'/>
<arg declared_type64='id _Nonnull * _Nonnull' index='2' name='inPlaceSecondaryTexture' type64='^@'/>
<arg declared_type64='MPSCopyAllocator _Nullable' function_pointer='true' index='3' name='copyAllocator' type64='@?'>
<arg declared_type64='MPSKernel * _Nonnull' type64='@'/>
<arg declared_type64='id _Nonnull' type64='@'/>
<arg declared_type64='id _Nonnull' type64='@'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</arg>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='encodeToCommandBuffer:primaryTexture:secondaryTexture:destinationTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='primaryTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='secondaryTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='3' name='destinationTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='primaryEdgeMode'>
<retval declared_type64='MPSImageEdgeMode' type64='Q'/>
</method>
<method selector='primaryOffset'>
<retval declared_type64='MPSOffset' type64='{_MPSOffset=qqq}'/>
</method>
<method selector='primarySourceRegionForDestinationSize:'>
<arg declared_type64='MTLSize' index='0' name='destinationSize' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='MPSRegion' type64='{MPSRegion={MPSOrigin=ddd}{MPSSize=ddd}}'/>
</method>
<method selector='secondaryEdgeMode'>
<retval declared_type64='MPSImageEdgeMode' type64='Q'/>
</method>
<method selector='secondaryOffset'>
<retval declared_type64='MPSOffset' type64='{_MPSOffset=qqq}'/>
</method>
<method selector='secondarySourceRegionForDestinationSize:'>
<arg declared_type64='MTLSize' index='0' name='destinationSize' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='MPSRegion' type64='{MPSRegion={MPSOrigin=ddd}{MPSSize=ddd}}'/>
</method>
<method selector='setClipRect:'>
<arg declared_type64='MTLRegion' index='0' name='clipRect' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryEdgeMode:'>
<arg declared_type64='MPSImageEdgeMode' index='0' name='primaryEdgeMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryOffset:'>
<arg declared_type64='MPSOffset' index='0' name='primaryOffset' type64='{_MPSOffset=qqq}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryEdgeMode:'>
<arg declared_type64='MPSImageEdgeMode' index='0' name='secondaryEdgeMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryOffset:'>
<arg declared_type64='MPSOffset' index='0' name='secondaryOffset' type64='{_MPSOffset=qqq}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageAdd'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageAreaMax'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSImageArithmetic'>
<method selector='bias'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='maximumValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='minimumValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='primaryScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='primaryStrideInPixels'>
<retval declared_type64='MTLSize' type64='{_MTLSize=QQQ}'/>
</method>
<method selector='secondaryScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='secondaryStrideInPixels'>
<retval declared_type64='MTLSize' type64='{_MTLSize=QQQ}'/>
</method>
<method selector='setBias:'>
<arg declared_type64='float' index='0' name='bias' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaximumValue:'>
<arg declared_type64='float' index='0' name='maximumValue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMinimumValue:'>
<arg declared_type64='float' index='0' name='minimumValue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryScale:'>
<arg declared_type64='float' index='0' name='primaryScale' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimaryStrideInPixels:'>
<arg declared_type64='MTLSize' index='0' name='primaryStrideInPixels' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryScale:'>
<arg declared_type64='float' index='0' name='secondaryScale' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondaryStrideInPixels:'>
<arg declared_type64='MTLSize' index='0' name='secondaryStrideInPixels' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageBilinearScale'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageBox'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSImageConversion'>
<method selector='destinationAlpha'>
<retval declared_type64='MPSAlphaType' type64='Q'/>
</method>
<method selector='initWithDevice:srcAlpha:destAlpha:backgroundColor:conversionInfo:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSAlphaType' index='1' name='srcAlpha' type64='Q'/>
<arg declared_type64='MPSAlphaType' index='2' name='destAlpha' type64='Q'/>
<arg declared_type64='CGFloat * _Nullable' index='3' name='backgroundColor' type64='^d'/>
<arg declared_type64='CGColorConversionInfoRef _Nullable' index='4' name='conversionInfo' type64='^{CGColorConversionInfo=}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='sourceAlpha'>
<retval declared_type64='MPSAlphaType' type64='Q'/>
</method>
</class>
<class name='MPSImageConvolution'>
<method selector='bias'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:weights:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg const='true' declared_type64='float * _Nonnull' index='3' name='kernelWeights' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setBias:'>
<arg declared_type64='float' index='0' name='bias' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageCopyToMatrix'>
<method selector='dataLayout'>
<retval declared_type64='MPSDataLayout' type64='Q'/>
</method>
<method selector='destinationMatrixBatchIndex'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='destinationMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:destinationMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='destinationMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:dataLayout:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSDataLayout' index='1' name='dataLayout' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setDestinationMatrixBatchIndex:'>
<arg declared_type64='NSUInteger' index='0' name='destinationMatrixBatchIndex' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDestinationMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='destinationMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageDilate'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:values:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg const='true' declared_type64='float * _Nonnull' index='3' name='values' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSImageDivide'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageEuclideanDistanceTransform'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageFindKeypoints'>
<method selector='encodeToCommandBuffer:sourceTexture:regions:numberOfRegions:keypointCountBuffer:keypointCountBufferOffset:keypointDataBuffer:keypointDataBufferOffset:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='source' type64='@'/>
<arg const='true' declared_type64='MTLRegion * _Nonnull' index='2' name='regions' type64='^{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<arg declared_type64='NSUInteger' index='3' name='numberOfRegions' type64='Q'/>
<arg declared_type64='id _Nonnull' index='4' name='keypointCountBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='5' name='keypointCountBufferOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='6' name='keypointDataBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='7' name='keypointDataBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:info:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSImageKeypointRangeInfo * _Nonnull' index='1' name='info' type64='^{_MPSImageKeypointRangeInfo=Qf}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='keypointRangeInfo'>
<retval declared_type64='MPSImageKeypointRangeInfo' type64='{_MPSImageKeypointRangeInfo=Qf}'/>
</method>
</class>
<class name='MPSImageGaussianBlur'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:sigma:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='sigma' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='sigma'>
<retval declared_type64='float' type64='f'/>
</method>
</class>
<class name='MPSImageGuidedFilter'>
<method selector='encodeReconstructionToCommandBuffer:guidanceTexture:coefficientsTexture:destinationTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='guidanceTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='coefficientsTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='3' name='destinationTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeRegressionToCommandBuffer:sourceTexture:guidanceTexture:weightsTexture:destinationCoefficientsTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='sourceTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='guidanceTexture' type64='@'/>
<arg declared_type64='id _Nullable' index='3' name='weightsTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='4' name='destinationCoefficientsTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='epsilon'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelDiameter:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelDiameter' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelDiameter'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='reconstructOffset'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='reconstructScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='setEpsilon:'>
<arg declared_type64='float' index='0' name='epsilon' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setReconstructOffset:'>
<arg declared_type64='float' index='0' name='reconstructOffset' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setReconstructScale:'>
<arg declared_type64='float' index='0' name='reconstructScale' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageHistogram'>
<method selector='clipRectSource'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='encodeToCommandBuffer:sourceTexture:histogram:histogramOffset:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='source' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='histogram' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='histogramOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='histogramInfo'>
<retval declared_type64='MPSImageHistogramInfo' type64='{_MPSImageHistogramInfo=QB}'/>
</method>
<method selector='histogramSizeForSourceFormat:'>
<arg declared_type64='MTLPixelFormat' index='0' name='sourceFormat' type64='Q'/>
<retval declared_type64='size_t' type64='Q'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:histogramInfo:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSImageHistogramInfo * _Nonnull' index='1' name='histogramInfo' type64='^{_MPSImageHistogramInfo=QB}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='minPixelThresholdValue'>
<retval declared_type64='vector_float4' type64=''/>
</method>
<method selector='setClipRectSource:'>
<arg declared_type64='MTLRegion' index='0' name='clipRectSource' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMinPixelThresholdValue:'>
<arg declared_type64='vector_float4' index='0' name='minPixelThresholdValue' type64=''/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setZeroHistogram:'>
<arg declared_type64='BOOL' index='0' name='zeroHistogram' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='zeroHistogram'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSImageHistogramEqualization'>
<method selector='encodeTransformToCommandBuffer:sourceTexture:histogram:histogramOffset:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='source' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='histogram' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='histogramOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='histogramInfo'>
<retval declared_type64='MPSImageHistogramInfo' type64='{_MPSImageHistogramInfo=QB}'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:histogramInfo:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSImageHistogramInfo * _Nonnull' index='1' name='histogramInfo' type64='^{_MPSImageHistogramInfo=QB}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageHistogramSpecification'>
<method selector='encodeTransformToCommandBuffer:sourceTexture:sourceHistogram:sourceHistogramOffset:desiredHistogram:desiredHistogramOffset:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='source' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='sourceHistogram' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='sourceHistogramOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='4' name='desiredHistogram' type64='@'/>
<arg declared_type64='NSUInteger' index='5' name='desiredHistogramOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='histogramInfo'>
<retval declared_type64='MPSImageHistogramInfo' type64='{_MPSImageHistogramInfo=QB}'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:histogramInfo:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='MPSImageHistogramInfo * _Nonnull' index='1' name='histogramInfo' type64='^{_MPSImageHistogramInfo=QB}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageLanczosScale'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageLaplacian'>
<method selector='bias'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='setBias:'>
<arg declared_type64='float' index='0' name='bias' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageLaplacianPyramid'>
<method selector='getLaplacianBias'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='getLaplacianScale'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='setLaplacianBias:'>
<arg declared_type64='float' index='0' name='laplacianBias' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLaplacianScale:'>
<arg declared_type64='float' index='0' name='laplacianScale' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageMedian'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:kernelDiameter:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelDiameter' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelDiameter'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='maxKernelDiameter'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='minKernelDiameter'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSImageMultiply'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImagePyramid'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:centerWeight:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='centerWeight' type64='f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:kernelWidth:kernelHeight:weights:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='kernelWidth' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='kernelHeight' type64='Q'/>
<arg const='true' declared_type64='float * _Nonnull' index='3' name='kernelWeights' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='kernelHeight'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='kernelWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSImageReduceColumnMax'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageReduceColumnMean'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageReduceColumnMin'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageReduceColumnSum'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageReduceRowMax'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageReduceRowMean'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageReduceRowMin'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageReduceRowSum'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageReduceUnary'>
<method selector='clipRectSource'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='setClipRectSource:'>
<arg declared_type64='MTLRegion' index='0' name='clipRectSource' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageScale'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='scaleTransform'>
<retval const='true' declared_type64='MPSScaleTransform * _Nullable' type64='^{MPSScaleTransform=dddd}'/>
</method>
<method selector='setScaleTransform:'>
<arg const='true' declared_type64='MPSScaleTransform * _Nullable' index='0' name='scaleTransform' type64='^{MPSScaleTransform=dddd}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageSobel'>
<method selector='colorTransform'>
<retval const='true' declared_type64='float * _Nonnull' type64='^f'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:linearGrayColorTransform:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg const='true' declared_type64='float * _Nonnull' index='1' name='transform' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageStatisticsMean'>
<method selector='clipRectSource'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setClipRectSource:'>
<arg declared_type64='MTLRegion' index='0' name='clipRectSource' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageStatisticsMeanAndVariance'>
<method selector='clipRectSource'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setClipRectSource:'>
<arg declared_type64='MTLRegion' index='0' name='clipRectSource' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageStatisticsMinAndMax'>
<method selector='clipRectSource'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setClipRectSource:'>
<arg declared_type64='MTLRegion' index='0' name='clipRectSource' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSImageSubtract'>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSImageThresholdBinary'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:thresholdValue:maximumValue:linearGrayColorTransform:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='thresholdValue' type64='f'/>
<arg declared_type64='float' index='2' name='maximumValue' type64='f'/>
<arg const='true' declared_type64='float * _Nullable' index='3' name='transform' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='maximumValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='thresholdValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='transform'>
<retval const='true' declared_type64='float * _Nonnull' type64='^f'/>
</method>
</class>
<class name='MPSImageThresholdBinaryInverse'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:thresholdValue:maximumValue:linearGrayColorTransform:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='thresholdValue' type64='f'/>
<arg declared_type64='float' index='2' name='maximumValue' type64='f'/>
<arg const='true' declared_type64='float * _Nullable' index='3' name='transform' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='maximumValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='thresholdValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='transform'>
<retval const='true' declared_type64='float * _Nonnull' type64='^f'/>
</method>
</class>
<class name='MPSImageThresholdToZero'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:thresholdValue:linearGrayColorTransform:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='thresholdValue' type64='f'/>
<arg const='true' declared_type64='float * _Nullable' index='2' name='transform' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='thresholdValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='transform'>
<retval const='true' declared_type64='float * _Nonnull' type64='^f'/>
</method>
</class>
<class name='MPSImageThresholdToZeroInverse'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:thresholdValue:linearGrayColorTransform:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='thresholdValue' type64='f'/>
<arg const='true' declared_type64='float * _Nullable' index='2' name='transform' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='thresholdValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='transform'>
<retval const='true' declared_type64='float * _Nonnull' type64='^f'/>
</method>
</class>
<class name='MPSImageThresholdTruncate'>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:thresholdValue:linearGrayColorTransform:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='float' index='1' name='thresholdValue' type64='f'/>
<arg const='true' declared_type64='float * _Nullable' index='2' name='transform' type64='^f'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='thresholdValue'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='transform'>
<retval const='true' declared_type64='float * _Nonnull' type64='^f'/>
</method>
</class>
<class name='MPSMatrixCopyToImage'>
<method selector='dataLayout'>
<retval declared_type64='MPSDataLayout' type64='Q'/>
</method>
<method selector='encodeToCommandBuffer:sourceMatrix:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:dataLayout:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSDataLayout' index='1' name='dataLayout' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setSourceMatrixBatchIndex:'>
<arg declared_type64='NSUInteger' index='0' name='sourceMatrixBatchIndex' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='sourceMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceMatrixBatchIndex'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
</class>
<class name='MPSUnaryImageKernel'>
<method selector='clipRect'>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
</method>
<method selector='edgeMode'>
<retval declared_type64='MPSImageEdgeMode' type64='Q'/>
</method>
<method selector='encodeToCommandBuffer:inPlaceTexture:fallbackCopyAllocator:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull * _Nonnull' index='1' name='texture' type64='^@'/>
<arg declared_type64='MPSCopyAllocator _Nullable' function_pointer='true' index='2' name='copyAllocator' type64='@?'>
<arg declared_type64='MPSKernel * _Nonnull' type64='@'/>
<arg declared_type64='id _Nonnull' type64='@'/>
<arg declared_type64='id _Nonnull' type64='@'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</arg>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='encodeToCommandBuffer:sourceImage:destinationImage:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='1' name='sourceImage' type64='@'/>
<arg declared_type64='MPSImage * _Nonnull' index='2' name='destinationImage' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:sourceTexture:destinationTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='sourceTexture' type64='@'/>
<arg declared_type64='id _Nonnull' index='2' name='destinationTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='offset'>
<retval declared_type64='MPSOffset' type64='{_MPSOffset=qqq}'/>
</method>
<method selector='setClipRect:'>
<arg declared_type64='MTLRegion' index='0' name='clipRect' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEdgeMode:'>
<arg declared_type64='MPSImageEdgeMode' index='0' name='edgeMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOffset:'>
<arg declared_type64='MPSOffset' index='0' name='offset' type64='{_MPSOffset=qqq}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceRegionForDestinationSize:'>
<arg declared_type64='MTLSize' index='0' name='destinationSize' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='MPSRegion' type64='{MPSRegion={MPSOrigin=ddd}{MPSSize=ddd}}'/>
</method>
</class>
</signatures>
