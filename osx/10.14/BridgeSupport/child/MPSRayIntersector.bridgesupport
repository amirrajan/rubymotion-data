<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='MPSAxisAlignedBoundingBox' type64='{_MPSAxisAlignedBoundingBox=&quot;min&quot;&quot;max&quot;}'>
<field declared_type64='vector_float3' name='min' type64=''/>
<field declared_type64='vector_float3' name='max' type64=''/>
</struct>
<struct name='MPSIntersectionDistance' type64='{_MPSIntersectionDistance=&quot;distance&quot;f}'>
<field declared_type64='float' name='distance' type64='f'/>
</struct>
<struct name='MPSIntersectionDistancePrimitiveIndex' type64='{_MPSIntersectionDistancePrimitiveIndex=&quot;distance&quot;f&quot;primitiveIndex&quot;i}'>
<field declared_type64='float' name='distance' type64='f'/>
<field declared_type64='int' name='primitiveIndex' type64='i'/>
</struct>
<struct name='MPSIntersectionDistancePrimitiveIndexCoordinates' type64='{_MPSIntersectionDistancePrimitiveIndexCoordinates=&quot;distance&quot;f&quot;primitiveIndex&quot;i&quot;coordinates&quot;}'>
<field declared_type64='float' name='distance' type64='f'/>
<field declared_type64='int' name='primitiveIndex' type64='i'/>
<field declared_type64='vector_float2' name='coordinates' type64=''/>
</struct>
<struct name='MPSIntersectionDistancePrimitiveIndexInstanceIndex' type64='{_MPSIntersectionDistancePrimitiveIndexInstanceIndex=&quot;distance&quot;f&quot;primitiveIndex&quot;i&quot;instanceIndex&quot;i}'>
<field declared_type64='float' name='distance' type64='f'/>
<field declared_type64='int' name='primitiveIndex' type64='i'/>
<field declared_type64='int' name='instanceIndex' type64='i'/>
</struct>
<struct name='MPSIntersectionDistancePrimitiveIndexInstanceIndexCoordinates' type64='{_MPSIntersectionDistancePrimitiveIndexInstanceIndexCoordinates=&quot;distance&quot;f&quot;primitiveIndex&quot;i&quot;instanceIndex&quot;i&quot;coordinates&quot;}'>
<field declared_type64='float' name='distance' type64='f'/>
<field declared_type64='int' name='primitiveIndex' type64='i'/>
<field declared_type64='int' name='instanceIndex' type64='i'/>
<field declared_type64='vector_float2' name='coordinates' type64=''/>
</struct>
<struct name='MPSPackedFloat3' type64='{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}'>
<field declared_type64='union _MPSPackedFloat3::(anonymous at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.14.sdk/System/Library/Frameworks/MetalPerformanceShaders.framework/Frameworks/MPSRayIntersector.framework/Headers/MPSRayIntersectorTypes.h:24:5)' type64='(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])'/>
</struct>
<struct name='MPSRayOriginDirection' type64='{_MPSRayOriginDirection=&quot;origin&quot;&quot;direction&quot;}'>
<field declared_type64='vector_float3' name='origin' type64=''/>
<field declared_type64='vector_float3' name='direction' type64=''/>
</struct>
<struct name='MPSRayOriginMaskDirectionMaxDistance' type64='{_MPSRayOriginMaskDirectionMaxDistance=&quot;origin&quot;{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}&quot;mask&quot;I&quot;direction&quot;{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}&quot;maxDistance&quot;f}'>
<field declared_type64='MPSPackedFloat3' name='origin' type64='{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}'/>
<field declared_type64='unsigned int' name='mask' type64='I'/>
<field declared_type64='MPSPackedFloat3' name='direction' type64='{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}'/>
<field declared_type64='float' name='maxDistance' type64='f'/>
</struct>
<struct name='MPSRayOriginMinDistanceDirectionMaxDistance' type64='{_MPSRayOriginMinDistanceDirectionMaxDistance=&quot;origin&quot;{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}&quot;minDistance&quot;f&quot;direction&quot;{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}&quot;maxDistance&quot;f}'>
<field declared_type64='MPSPackedFloat3' name='origin' type64='{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}'/>
<field declared_type64='float' name='minDistance' type64='f'/>
<field declared_type64='MPSPackedFloat3' name='direction' type64='{_MPSPackedFloat3=&quot;&quot;(?=&quot;&quot;{?=&quot;x&quot;f&quot;y&quot;f&quot;z&quot;f}&quot;elements&quot;[3f])}'/>
<field declared_type64='float' name='maxDistance' type64='f'/>
</struct>
<enum name='MPSAccelerationStructureStatusBuilt' value64='1'/>
<enum name='MPSAccelerationStructureStatusUnbuilt' value64='0'/>
<enum name='MPSAccelerationStructureUsageFrequentRebuild' value64='2'/>
<enum name='MPSAccelerationStructureUsageNone' value64='0'/>
<enum name='MPSAccelerationStructureUsageRefit' value64='1'/>
<enum name='MPSIntersectionDataTypeDistance' value64='0'/>
<enum name='MPSIntersectionDataTypeDistancePrimitiveIndex' value64='1'/>
<enum name='MPSIntersectionDataTypeDistancePrimitiveIndexCoordinates' value64='2'/>
<enum name='MPSIntersectionDataTypeDistancePrimitiveIndexInstanceIndex' value64='3'/>
<enum name='MPSIntersectionDataTypeDistancePrimitiveIndexInstanceIndexCoordinates' value64='4'/>
<enum name='MPSIntersectionTestTypeDefault' value64='0'/>
<enum name='MPSIntersectionTestTypeWatertight' value64='1'/>
<enum name='MPSIntersectionTypeAny' value64='1'/>
<enum name='MPSIntersectionTypeNearest' value64='0'/>
<enum name='MPSRayDataTypeOriginDirection' value64='0'/>
<enum name='MPSRayDataTypeOriginMaskDirectionMaxDistance' value64='2'/>
<enum name='MPSRayDataTypeOriginMinDistanceDirectionMaxDistance' value64='1'/>
<enum name='MPSRayMaskOptionInstance' value64='2'/>
<enum name='MPSRayMaskOptionNone' value64='0'/>
<enum name='MPSRayMaskOptionPrimitive' value64='1'/>
<enum name='MPSTransformTypeFloat4x4' value64='0'/>
<enum name='MPSTransformTypeIdentity' value64='1'/>
<class name='MPSAccelerationStructure'>
<method selector='boundingBox'>
<retval declared_type64='MPSAxisAlignedBoundingBox' type64='{_MPSAxisAlignedBoundingBox=}'/>
</method>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='copyWithZone:group:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='MPSAccelerationStructureGroup * _Nonnull' index='1' name='group' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeRefitToCommandBuffer:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeWithCoder:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='coder' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='group'>
<retval declared_type64='MPSAccelerationStructureGroup * _Nonnull' type64='@'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithCoder:group:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='MPSAccelerationStructureGroup * _Nonnull' index='1' name='group' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithGroup:'>
<arg declared_type64='MPSAccelerationStructureGroup * _Nonnull' index='0' name='group' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='rebuild'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='rebuildWithCompletionHandler:'>
<arg declared_type64='MPSAccelerationStructureCompletionHandler _Nonnull' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='MPSAccelerationStructure * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUsage:'>
<arg declared_type64='MPSAccelerationStructureUsage' index='0' name='usage' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='status'>
<retval declared_type64='MPSAccelerationStructureStatus' type64='Q'/>
</method>
<method selector='usage'>
<retval declared_type64='MPSAccelerationStructureUsage' type64='Q'/>
</method>
</class>
<class name='MPSAccelerationStructureGroup'>
<method selector='device'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSInstanceAccelerationStructure'>
<method selector='accelerationStructureIndexBuffer'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='accelerationStructureIndexBufferOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='accelerationStructures'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='instanceCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='maskBuffer'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='maskBufferOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setAccelerationStructureIndexBuffer:'>
<arg declared_type64='id _Nullable' index='0' name='accelerationStructureIndexBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setAccelerationStructureIndexBufferOffset:'>
<arg declared_type64='NSUInteger' index='0' name='accelerationStructureIndexBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setAccelerationStructures:'>
<arg declared_type64='NSArray * _Nullable' index='0' name='accelerationStructures' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setInstanceCount:'>
<arg declared_type64='NSUInteger' index='0' name='instanceCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaskBuffer:'>
<arg declared_type64='id _Nullable' index='0' name='maskBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaskBufferOffset:'>
<arg declared_type64='NSUInteger' index='0' name='maskBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTransformBuffer:'>
<arg declared_type64='id _Nullable' index='0' name='transformBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTransformBufferOffset:'>
<arg declared_type64='NSUInteger' index='0' name='transformBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTransformType:'>
<arg declared_type64='MPSTransformType' index='0' name='transformType' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='transformBuffer'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='transformBufferOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='transformType'>
<retval declared_type64='MPSTransformType' type64='Q'/>
</method>
</class>
<class name='MPSRayIntersector'>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='cullMode'>
<retval declared_type64='MTLCullMode' type64='Q'/>
</method>
<method selector='encodeIntersectionToCommandBuffer:intersectionType:rayBuffer:rayBufferOffset:intersectionBuffer:intersectionBufferOffset:rayCount:accelerationStructure:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSIntersectionType' index='1' name='intersectionType' type64='Q'/>
<arg declared_type64='id _Nonnull' index='2' name='rayBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='rayBufferOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='4' name='intersectionBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='5' name='intersectionBufferOffset' type64='Q'/>
<arg declared_type64='NSUInteger' index='6' name='rayCount' type64='Q'/>
<arg declared_type64='MPSAccelerationStructure * _Nonnull' index='7' name='accelerationStructure' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeIntersectionToCommandBuffer:intersectionType:rayBuffer:rayBufferOffset:intersectionBuffer:intersectionBufferOffset:rayCountBuffer:rayCountBufferOffset:accelerationStructure:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSIntersectionType' index='1' name='intersectionType' type64='Q'/>
<arg declared_type64='id _Nonnull' index='2' name='rayBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='rayBufferOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='4' name='intersectionBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='5' name='intersectionBufferOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='6' name='rayCountBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='7' name='rayCountBufferOffset' type64='Q'/>
<arg declared_type64='MPSAccelerationStructure * _Nonnull' index='8' name='accelerationStructure' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeWithCoder:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='coder' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='frontFacingWinding'>
<retval declared_type64='MTLWinding' type64='Q'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='intersectionDataType'>
<retval declared_type64='MPSIntersectionDataType' type64='Q'/>
</method>
<method selector='intersectionStride'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='intersectionTestType'>
<retval declared_type64='MPSIntersectionTestType' type64='Q'/>
</method>
<method selector='rayDataType'>
<retval declared_type64='MPSRayDataType' type64='Q'/>
</method>
<method selector='rayMaskOptions'>
<retval declared_type64='MPSRayMaskOptions' type64='Q'/>
</method>
<method selector='rayStride'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='recommendedMinimumRayBatchSizeForRayCount:'>
<arg declared_type64='NSUInteger' index='0' name='rayCount' type64='Q'/>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setCullMode:'>
<arg declared_type64='MTLCullMode' index='0' name='cullMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFrontFacingWinding:'>
<arg declared_type64='MTLWinding' index='0' name='frontFacingWinding' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIntersectionDataType:'>
<arg declared_type64='MPSIntersectionDataType' index='0' name='intersectionDataType' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIntersectionStride:'>
<arg declared_type64='NSUInteger' index='0' name='intersectionStride' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIntersectionTestType:'>
<arg declared_type64='MPSIntersectionTestType' index='0' name='intersectionTestType' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRayDataType:'>
<arg declared_type64='MPSRayDataType' index='0' name='rayDataType' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRayMaskOptions:'>
<arg declared_type64='MPSRayMaskOptions' index='0' name='rayMaskOptions' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRayStride:'>
<arg declared_type64='NSUInteger' index='0' name='rayStride' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSTriangleAccelerationStructure'>
<method selector='indexBuffer'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='indexBufferOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='indexType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='maskBuffer'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='maskBufferOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setIndexBuffer:'>
<arg declared_type64='id _Nullable' index='0' name='indexBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIndexBufferOffset:'>
<arg declared_type64='NSUInteger' index='0' name='indexBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setIndexType:'>
<arg declared_type64='MPSDataType' index='0' name='indexType' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaskBuffer:'>
<arg declared_type64='id _Nullable' index='0' name='maskBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaskBufferOffset:'>
<arg declared_type64='NSUInteger' index='0' name='maskBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTriangleCount:'>
<arg declared_type64='NSUInteger' index='0' name='triangleCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexBuffer:'>
<arg declared_type64='id _Nullable' index='0' name='vertexBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexBufferOffset:'>
<arg declared_type64='NSUInteger' index='0' name='vertexBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexStride:'>
<arg declared_type64='NSUInteger' index='0' name='vertexStride' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='triangleCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='vertexBuffer'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='vertexBufferOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='vertexStride'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
</signatures>
