<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='MPSMatrixCopyOffsets' type64='{_MPSMatrixCopyOffsets=&quot;sourceRowOffset&quot;I&quot;sourceColumnOffset&quot;I&quot;destinationRowOffset&quot;I&quot;destinationColumnOffset&quot;I}'>
<field declared_type64='uint32_t' name='sourceRowOffset' type64='I'/>
<field declared_type64='uint32_t' name='sourceColumnOffset' type64='I'/>
<field declared_type64='uint32_t' name='destinationRowOffset' type64='I'/>
<field declared_type64='uint32_t' name='destinationColumnOffset' type64='I'/>
</struct>
<struct name='MPSMatrixOffset' type64='{_MPSMatrixOffset=&quot;rowOffset&quot;I&quot;columnOffset&quot;I}'>
<field declared_type64='uint32_t' name='rowOffset' type64='I'/>
<field declared_type64='uint32_t' name='columnOffset' type64='I'/>
</struct>
<enum name='MPSMatrixDecompositionStatusFailure' value64='-1'/>
<enum name='MPSMatrixDecompositionStatusNonPositiveDefinite' value64='-3'/>
<enum name='MPSMatrixDecompositionStatusSingular' value64='-2'/>
<enum name='MPSMatrixDecompositionStatusSuccess' value64='0'/>
<class name='MPSMatrix'>
<method selector='columns'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='data'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='dataType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='device'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='initWithBuffer:descriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='buffer' type64='@'/>
<arg declared_type64='MPSMatrixDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:descriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSMatrixDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='matrices'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='matrixBytes'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='resourceSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='rowBytes'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='rows'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='synchronizeOnCommandBuffer:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSMatrixBinaryKernel'>
<method selector='batchSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='batchStart'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='primarySourceMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='resultMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='secondarySourceMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='setBatchSize:'>
<arg declared_type64='NSUInteger' index='0' name='batchSize' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBatchStart:'>
<arg declared_type64='NSUInteger' index='0' name='batchStart' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPrimarySourceMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='primarySourceMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setResultMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='resultMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSecondarySourceMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='secondarySourceMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSMatrixCopy'>
<method selector='copyColumns'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='copyRows'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='destinationsAreTransposed'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='encodeToCommandBuffer:copyDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrixCopyDescriptor * _Nonnull' index='1' name='copyDescriptor' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeToCommandBuffer:copyDescriptor:rowPermuteIndices:rowPermuteOffset:columnPermuteIndices:columnPermuteOffset:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrixCopyDescriptor * _Nonnull' index='1' name='copyDescriptor' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='2' name='rowPermuteIndices' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='rowPermuteOffset' type64='Q'/>
<arg declared_type64='MPSVector * _Nullable' index='4' name='columnPermuteIndices' type64='@'/>
<arg declared_type64='NSUInteger' index='5' name='columnPermuteOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:copyRows:copyColumns:sourcesAreTransposed:destinationsAreTransposed:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='copyRows' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='copyColumns' type64='Q'/>
<arg declared_type64='BOOL' index='3' name='sourcesAreTransposed' type64='B'/>
<arg declared_type64='BOOL' index='4' name='destinationsAreTransposed' type64='B'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='sourcesAreTransposed'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MPSMatrixCopyDescriptor'>
<method class_method='true' selector='descriptorWithSourceMatrix:destinationMatrix:offsets:'>
<arg declared_type64='MPSMatrix * _Nonnull' index='0' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='destinationMatrix' type64='@'/>
<arg declared_type64='MPSMatrixCopyOffsets' index='2' name='offsets' type64='{_MPSMatrixCopyOffsets=IIII}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:count:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='count' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithSourceMatrices:destinationMatrices:offsetVector:offset:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='sourceMatrices' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='destinationMatrices' type64='@'/>
<arg declared_type64='MPSVector * _Nullable' index='2' name='offsets' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='byteOffset' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setCopyOperationAtIndex:sourceMatrix:destinationMatrix:offsets:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='destinationMatrix' type64='@'/>
<arg declared_type64='MPSMatrixCopyOffsets' index='3' name='offsets' type64='{_MPSMatrixCopyOffsets=IIII}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSMatrixDecompositionCholesky'>
<method selector='encodeToCommandBuffer:sourceMatrix:resultMatrix:status:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='resultMatrix' type64='@'/>
<arg declared_type64='id _Nullable' index='3' name='status' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:lower:order:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='lower' type64='B'/>
<arg declared_type64='NSUInteger' index='2' name='order' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSMatrixDecompositionLU'>
<method selector='encodeToCommandBuffer:sourceMatrix:resultMatrix:pivotIndices:status:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='resultMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='pivotIndices' type64='@'/>
<arg declared_type64='id _Nullable' index='4' name='status' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:rows:columns:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='rows' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='columns' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSMatrixDescriptor'>
<method selector='columns'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='dataType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='matrices'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='matrixBytes'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='matrixDescriptorWithDimensions:columns:rowBytes:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='rows' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='columns' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='rowBytes' type64='Q'/>
<arg declared_type64='MPSDataType' index='3' name='dataType' type64='I'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='matrixDescriptorWithRows:columns:matrices:rowBytes:matrixBytes:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='rows' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='columns' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='matrices' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='rowBytes' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='matrixBytes' type64='Q'/>
<arg declared_type64='MPSDataType' index='5' name='dataType' type64='I'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='matrixDescriptorWithRows:columns:rowBytes:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='rows' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='columns' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='rowBytes' type64='Q'/>
<arg declared_type64='MPSDataType' index='3' name='dataType' type64='I'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='rowBytes'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='rowBytesForColumns:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='columns' type64='Q'/>
<arg declared_type64='MPSDataType' index='1' name='dataType' type64='I'/>
<retval declared_type64='size_t' type64='Q'/>
</method>
<method class_method='true' selector='rowBytesFromColumns:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='columns' type64='Q'/>
<arg declared_type64='MPSDataType' index='1' name='dataType' type64='I'/>
<retval declared_type64='size_t' type64='Q'/>
</method>
<method selector='rows'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setColumns:'>
<arg declared_type64='NSUInteger' index='0' name='columns' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDataType:'>
<arg declared_type64='MPSDataType' index='0' name='dataType' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRowBytes:'>
<arg declared_type64='NSUInteger' index='0' name='rowBytes' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRows:'>
<arg declared_type64='NSUInteger' index='0' name='rows' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSMatrixFindTopK'>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:inputMatrix:resultIndexMatrix:resultValueMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='inputMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='resultIndexMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='resultValueMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='indexOffset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:numberOfTopKValues:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='numberOfTopKValues' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='numberOfTopKValues'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setIndexOffset:'>
<arg declared_type64='NSUInteger' index='0' name='indexOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNumberOfTopKValues:'>
<arg declared_type64='NSUInteger' index='0' name='numberOfTopKValues' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceColumns:'>
<arg declared_type64='NSUInteger' index='0' name='sourceColumns' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceRows:'>
<arg declared_type64='NSUInteger' index='0' name='sourceRows' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceColumns'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceRows'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSMatrixMultiplication'>
<method selector='batchSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='batchStart'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='encodeToCommandBuffer:leftMatrix:rightMatrix:resultMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='leftMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='rightMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='resultMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:resultRows:resultColumns:interiorColumns:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='resultRows' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='resultColumns' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='interiorColumns' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:transposeLeft:transposeRight:resultRows:resultColumns:interiorColumns:alpha:beta:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='transposeLeft' type64='B'/>
<arg declared_type64='BOOL' index='2' name='transposeRight' type64='B'/>
<arg declared_type64='NSUInteger' index='3' name='resultRows' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='resultColumns' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='interiorColumns' type64='Q'/>
<arg declared_type64='double' index='6' name='alpha' type64='d'/>
<arg declared_type64='double' index='7' name='beta' type64='d'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='leftMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='resultMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='rightMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='setBatchSize:'>
<arg declared_type64='NSUInteger' index='0' name='batchSize' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBatchStart:'>
<arg declared_type64='NSUInteger' index='0' name='batchStart' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLeftMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='leftMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setResultMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='resultMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRightMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='rightMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MPSMatrixSoftMax'>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:inputMatrix:resultMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='inputMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='resultMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setSourceColumns:'>
<arg declared_type64='NSUInteger' index='0' name='sourceColumns' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceRows:'>
<arg declared_type64='NSUInteger' index='0' name='sourceRows' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceColumns'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceRows'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSMatrixSoftMaxGradient'>
<method selector='copyWithZone:device:'>
<arg declared_type64='NSZone * _Nullable' index='0' name='zone' type64='^{_NSZone=}'/>
<arg declared_type64='id _Nullable' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='encodeToCommandBuffer:gradientMatrix:forwardOutputMatrix:resultMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='gradientMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='forwardOutputMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='resultMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithCoder:device:'>
<arg declared_type64='NSCoder * _Nonnull' index='0' name='aDecoder' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='device' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='initWithDevice:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='setSourceColumns:'>
<arg declared_type64='NSUInteger' index='0' name='sourceColumns' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceRows:'>
<arg declared_type64='NSUInteger' index='0' name='sourceRows' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceColumns'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='sourceRows'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSMatrixSolveCholesky'>
<method selector='encodeToCommandBuffer:sourceMatrix:rightHandSideMatrix:solutionMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='rightHandSideMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='solutionMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:upper:order:numberOfRightHandSides:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='upper' type64='B'/>
<arg declared_type64='NSUInteger' index='2' name='order' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='numberOfRightHandSides' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSMatrixSolveLU'>
<method selector='encodeToCommandBuffer:sourceMatrix:rightHandSideMatrix:pivotIndices:solutionMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='rightHandSideMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='pivotIndices' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='4' name='solutionMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:transpose:order:numberOfRightHandSides:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='transpose' type64='B'/>
<arg declared_type64='NSUInteger' index='2' name='order' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='numberOfRightHandSides' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSMatrixSolveTriangular'>
<method selector='encodeToCommandBuffer:sourceMatrix:rightHandSideMatrix:solutionMatrix:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='sourceMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='2' name='rightHandSideMatrix' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='3' name='solutionMatrix' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:right:upper:transpose:unit:order:numberOfRightHandSides:alpha:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='right' type64='B'/>
<arg declared_type64='BOOL' index='2' name='upper' type64='B'/>
<arg declared_type64='BOOL' index='3' name='transpose' type64='B'/>
<arg declared_type64='BOOL' index='4' name='unit' type64='B'/>
<arg declared_type64='NSUInteger' index='5' name='order' type64='Q'/>
<arg declared_type64='NSUInteger' index='6' name='numberOfRightHandSides' type64='Q'/>
<arg declared_type64='double' index='7' name='alpha' type64='d'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSMatrixUnaryKernel'>
<method selector='batchSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='batchStart'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='resultMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
<method selector='setBatchSize:'>
<arg declared_type64='NSUInteger' index='0' name='batchSize' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBatchStart:'>
<arg declared_type64='NSUInteger' index='0' name='batchStart' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setResultMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='resultMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceMatrixOrigin:'>
<arg declared_type64='MTLOrigin' index='0' name='sourceMatrixOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceMatrixOrigin'>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</method>
</class>
<class name='MPSMatrixVectorMultiplication'>
<method selector='encodeToCommandBuffer:inputMatrix:inputVector:resultVector:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrix * _Nonnull' index='1' name='inputMatrix' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='2' name='inputVector' type64='@'/>
<arg declared_type64='MPSVector * _Nonnull' index='3' name='resultVector' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='initWithDevice:rows:columns:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='rows' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='columns' type64='Q'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:transpose:rows:columns:alpha:beta:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='BOOL' index='1' name='transpose' type64='B'/>
<arg declared_type64='NSUInteger' index='2' name='rows' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='columns' type64='Q'/>
<arg declared_type64='double' index='4' name='alpha' type64='d'/>
<arg declared_type64='double' index='5' name='beta' type64='d'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSTemporaryMatrix'>
<method class_method='true' selector='prefetchStorageWithCommandBuffer:matrixDescriptorList:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='descriptorList' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='readCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setReadCount:'>
<arg declared_type64='NSUInteger' index='0' name='readCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='temporaryMatrixWithCommandBuffer:matrixDescriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSMatrixDescriptor * _Nonnull' index='1' name='matrixDescriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSTemporaryVector'>
<method class_method='true' selector='prefetchStorageWithCommandBuffer:descriptorList:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='NSArray * _Nonnull' index='1' name='descriptorList' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='readCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setReadCount:'>
<arg declared_type64='NSUInteger' index='0' name='readCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='temporaryVectorWithCommandBuffer:descriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='MPSVectorDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='MPSVector'>
<method selector='data'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='dataType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='device'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='initWithBuffer:descriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='buffer' type64='@'/>
<arg declared_type64='MPSVectorDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithDevice:descriptor:'>
<arg declared_type64='id _Nonnull' index='0' name='device' type64='@'/>
<arg declared_type64='MPSVectorDescriptor * _Nonnull' index='1' name='descriptor' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='length'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='resourceSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='synchronizeOnCommandBuffer:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='vectorBytes'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='vectors'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MPSVectorDescriptor'>
<method selector='dataType'>
<retval declared_type64='MPSDataType' type64='I'/>
</method>
<method selector='length'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setDataType:'>
<arg declared_type64='MPSDataType' index='0' name='dataType' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLength:'>
<arg declared_type64='NSUInteger' index='0' name='length' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='vectorBytes'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='vectorBytesForLength:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='length' type64='Q'/>
<arg declared_type64='MPSDataType' index='1' name='dataType' type64='I'/>
<retval declared_type64='size_t' type64='Q'/>
</method>
<method class_method='true' selector='vectorDescriptorWithLength:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='length' type64='Q'/>
<arg declared_type64='MPSDataType' index='1' name='dataType' type64='I'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='vectorDescriptorWithLength:vectors:vectorBytes:dataType:'>
<arg declared_type64='NSUInteger' index='0' name='length' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='vectors' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='vectorBytes' type64='Q'/>
<arg declared_type64='MPSDataType' index='3' name='dataType' type64='I'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='vectors'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
</signatures>
