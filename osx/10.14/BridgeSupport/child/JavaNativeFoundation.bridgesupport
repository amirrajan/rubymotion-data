<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='JNFClassInfo' type64='{_JNFClassInfo=&quot;name&quot;*&quot;cls&quot;^{_jobject}}'>
<field const='true' declared_type64='char*' name='name' type64='*'/>
<field declared_type64='jclass' name='cls' type64='^{_jobject=}'/>
</struct>
<struct name='JNFMemberInfo' type64='{_JNFMemberInfo=&quot;name&quot;*&quot;sig&quot;*&quot;isStatic&quot;B&quot;classInfo&quot;^{_JNFClassInfo}&quot;j&quot;(_j=&quot;fieldID&quot;^{_jfieldID}&quot;methodID&quot;^{_jmethodID})}'>
<field const='true' declared_type64='char*' name='name' type64='*'/>
<field const='true' declared_type64='char*' name='sig' type64='*'/>
<field declared_type64='BOOL' name='isStatic' type64='B'/>
<field declared_type64='JNFClassInfo*' name='classInfo' type64='^{_JNFClassInfo=*^{_jobject}}'/>
<field declared_type64='union _j' name='j' type64='(_j=&quot;fieldID&quot;^{_jfieldID}&quot;methodID&quot;^{_jmethodID})'/>
</struct>
<constant declared_type64='NSString*' name='JNFRunLoopDidStartNotification' type64='@'/>
<constant const='true' declared_type64='char*' name='kClassNotFoundException' type64='*'/>
<constant const='true' declared_type64='char*' name='kIllegalAccessException' type64='*'/>
<constant const='true' declared_type64='char*' name='kIllegalArgumentException' type64='*'/>
<constant const='true' declared_type64='char*' name='kNoSuchFieldException' type64='*'/>
<constant const='true' declared_type64='char*' name='kNoSuchMethodException' type64='*'/>
<constant const='true' declared_type64='char*' name='kNullPointerException' type64='*'/>
<constant const='true' declared_type64='char*' name='kOutOfMemoryError' type64='*'/>
<constant const='true' declared_type64='char*' name='kRuntimeException' type64='*'/>
<enum name='JNFThreadAttachAsDaemon' value64='16'/>
<enum name='JNFThreadDetachImmediately' value64='2'/>
<enum name='JNFThreadDetachOnThreadDeath' value64='4'/>
<enum name='JNFThreadSetSystemClassLoaderOnAttach' value64='8'/>
<function name='JNFCFToJavaBoolean'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='CFBooleanRef' name='b' type64='^{__CFBoolean=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFCallBooleanMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jboolean' type64='C'/>
</function>
<function name='JNFCallByteMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jbyte' type64='c'/>
</function>
<function name='JNFCallCharMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jchar' type64='S'/>
</function>
<function name='JNFCallDoubleMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jdouble' type64='d'/>
</function>
<function name='JNFCallFloatMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jfloat' type64='f'/>
</function>
<function name='JNFCallIntMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jint' type64='i'/>
</function>
<function name='JNFCallLongMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jlong' type64='q'/>
</function>
<function name='JNFCallObjectMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFCallShortMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jshort' type64='s'/>
</function>
<function name='JNFCallStaticBooleanMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jboolean' type64='C'/>
</function>
<function name='JNFCallStaticByteMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jbyte' type64='c'/>
</function>
<function name='JNFCallStaticCharMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jchar' type64='S'/>
</function>
<function name='JNFCallStaticDoubleMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jdouble' type64='d'/>
</function>
<function name='JNFCallStaticFloatMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jfloat' type64='f'/>
</function>
<function name='JNFCallStaticIntMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jint' type64='i'/>
</function>
<function name='JNFCallStaticLongMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jlong' type64='q'/>
</function>
<function name='JNFCallStaticObjectMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFCallStaticShortMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jshort' type64='s'/>
</function>
<function name='JNFCallStaticVoidMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFCallVoidMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFDebugWarning' variadic='true'>
<arg const='true' declared_type64='char*' name='fmt' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFDeleteGlobalRef'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='globalRef' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFDeleteWeakGlobalRef'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='globalRef' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFDumpJavaStack'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFGetBooleanField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jboolean' type64='C'/>
</function>
<function name='JNFGetByteField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jbyte' type64='c'/>
</function>
<function name='JNFGetCharField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jchar' type64='S'/>
</function>
<function name='JNFGetDoubleField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jdouble' type64='d'/>
</function>
<function name='JNFGetFloatField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jfloat' type64='f'/>
</function>
<function name='JNFGetIntField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jint' type64='i'/>
</function>
<function name='JNFGetLongField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jlong' type64='q'/>
</function>
<function name='JNFGetObjectField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFGetShortField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jshort' type64='s'/>
</function>
<function name='JNFGetStaticBooleanField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jboolean' type64='C'/>
</function>
<function name='JNFGetStaticByteField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jbyte' type64='c'/>
</function>
<function name='JNFGetStaticCharField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jchar' type64='S'/>
</function>
<function name='JNFGetStaticDoubleField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jdouble' type64='d'/>
</function>
<function name='JNFGetStaticFloatField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jfloat' type64='f'/>
</function>
<function name='JNFGetStaticIntField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jint' type64='i'/>
</function>
<function name='JNFGetStaticLongField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jlong' type64='q'/>
</function>
<function name='JNFGetStaticObjectField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFGetStaticShortField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jshort' type64='s'/>
</function>
<function name='JNFGetStringUTF16UniChars'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' name='javaString' type64='^{_jobject=}'/>
<retval const='true' declared_type64='unichar*' type64='^S'/>
</function>
<function name='JNFGetStringUTF8Chars'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' name='javaString' type64='^{_jobject=}'/>
<retval const='true' declared_type64='char*' type64='*'/>
</function>
<function name='JNFIsInstanceOf'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFClassInfo*' name='clazz' type64='^{_JNFClassInfo=*^{_jobject}}'/>
<retval declared_type64='BOOL' type64='B'/>
</function>
<function name='JNFJavaMillisToNSTimeInterval'>
<arg declared_type64='jlong' name='javaMillisSince1970' type64='q'/>
<retval declared_type64='NSTimeInterval' type64='d'/>
</function>
<function name='JNFJavaToCFBoolean'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='b' type64='^{_jobject=}'/>
<retval declared_type64='CFBooleanRef' type64='^{__CFBoolean=}'/>
</function>
<function name='JNFJavaToNSDate'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='date' type64='^{_jobject=}'/>
<retval declared_type64='NSDate*' type64='@'/>
</function>
<function name='JNFJavaToNSNumber'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='n' type64='^{_jobject=}'/>
<retval declared_type64='NSNumber*' type64='@'/>
</function>
<function name='JNFJavaToNSString'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' name='javaString' type64='^{_jobject=}'/>
<retval declared_type64='NSString*' type64='@'/>
</function>
<function name='JNFNSTimeIntervalToJavaMillis'>
<arg declared_type64='NSTimeInterval' name='intervalSince2001' type64='d'/>
<retval declared_type64='jlong' type64='q'/>
</function>
<function name='JNFNSToJavaCalendar'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='NSDate*' name='date' type64='@'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFNSToJavaNumber'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='NSNumber*' name='n' type64='@'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFNSToJavaString'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='NSString*' name='nsString' type64='@'/>
<retval declared_type64='jstring' type64='^{_jobject=}'/>
</function>
<function name='JNFNativeMethodEnter'>
<retval declared_type64='JNFAutoreleasePoolToken*' type64='@'/>
</function>
<function name='JNFNativeMethodExit'>
<arg declared_type64='JNFAutoreleasePoolToken*' name='token' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFNewBooleanArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jbooleanArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewByteArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jbyteArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewCharArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jcharArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewDoubleArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jdoubleArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewFloatArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jfloatArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewGlobalRef'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFNewIntArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jintArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewLongArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jlongArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewObject' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='constructor' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFNewObjectArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFClassInfo*' name='clazz' type64='^{_JNFClassInfo=*^{_jobject}}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jobjectArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewShortArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jshortArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewWeakGlobalRef'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFNormalizedJavaStringForPath'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='NSString*' name='path' type64='@'/>
<retval declared_type64='jstring' type64='^{_jobject=}'/>
</function>
<function name='JNFNormalizedNSStringForPath'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' name='path' type64='^{_jobject=}'/>
<retval declared_type64='NSString*' type64='@'/>
</function>
<function name='JNFObjectClassName'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<retval declared_type64='NSString*' type64='@'/>
</function>
<function name='JNFObjectEquals'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='a' type64='^{_jobject=}'/>
<arg declared_type64='jobject' name='b' type64='^{_jobject=}'/>
<retval declared_type64='BOOL' type64='B'/>
</function>
<function name='JNFObjectToString'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<retval declared_type64='NSString*' type64='@'/>
</function>
<function name='JNFObtainEnv'>
<arg declared_type64='JNFThreadContext*' name='context' type64='^q'/>
<retval declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
</function>
<function name='JNFPerformEnvBlock'>
<arg declared_type64='JNFThreadContext' name='context' type64='q'/>
<arg declared_type64='JNIEnvBlock' function_pointer='true' name='block' type64='@?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFReleaseEnv'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFThreadContext*' name='context' type64='^q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFReleaseStringUTF16UniChars'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' name='javaString' type64='^{_jobject=}'/>
<arg const='true' declared_type64='unichar*' name='unichars' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFReleaseStringUTF8Chars'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' name='javaString' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' name='chars' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetBooleanField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jboolean' name='val' type64='C'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetByteField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jbyte' name='val' type64='c'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetCharField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jchar' name='val' type64='S'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetDoubleField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jdouble' name='val' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetFloatField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jfloat' name='val' type64='f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetIntField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jint' name='val' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetLongField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jlong' name='val' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetObjectField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jobject' name='val' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetShortField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jshort' name='val' type64='s'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticBooleanField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jboolean' name='val' type64='C'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticByteField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jbyte' name='val' type64='c'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticCharField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jchar' name='val' type64='S'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticDoubleField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jdouble' name='val' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticFloatField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jfloat' name='val' type64='f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticIntField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jint' name='val' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticLongField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jlong' name='val' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticObjectField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jobject' name='val' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticShortField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jshort' name='val' type64='s'/>
<retval declared_type64='void' type64='v'/>
</function>
<function_alias name='JNF_WARN' original='JNFDebugWarning'/>
<class name='JNFDefaultCoercions'>
<method class_method='true' selector='addDateCoercionTo:'>
<arg declared_type64='JNFTypeCoercer*' index='0' name='coercer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='addListCoercionTo:'>
<arg declared_type64='JNFTypeCoercer*' index='0' name='coercer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='addMapCoercionTo:'>
<arg declared_type64='JNFTypeCoercer*' index='0' name='coercer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='addNumberCoercionTo:'>
<arg declared_type64='JNFTypeCoercer*' index='0' name='coercer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='addSetCoercionTo:'>
<arg declared_type64='JNFTypeCoercer*' index='0' name='coercer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='addStringCoercionTo:'>
<arg declared_type64='JNFTypeCoercer*' index='0' name='coercer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='defaultCoercer'>
<retval declared_type64='JNFTypeCoercer*' type64='@'/>
</method>
</class>
<class name='JNFException'>
<method selector='init:as:reason:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' index='1' name='javaExceptionType' type64='*'/>
<arg const='true' declared_type64='char*' index='2' name='reasonMsg' type64='*'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='init:throwable:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthrowable' index='1' name='throwable' type64='^{_jobject=}'/>
<retval declared_type64='id' type64='@'/>
</method>
<method class_method='true' selector='raise:as:reason:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' index='1' name='javaExceptionType' type64='*'/>
<arg const='true' declared_type64='char*' index='2' name='reasonMsg' type64='*'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='raise:throwable:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthrowable' index='1' name='throwable' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='raiseToJava:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='raiseUnnamedException:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='throwToJava:exception:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='NSException*' index='1' name='exception' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='throwToJava:exception:as:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='NSException*' index='1' name='exception' type64='@'/>
<arg const='true' declared_type64='char*' index='2' name='javaExceptionType' type64='*'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='JNFJObjectWrapper'>
<method selector='initWithJObject:withEnv:'>
<arg declared_type64='jobject' index='0' name='jObjectIn' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='jObject'>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</method>
<method selector='jObjectWithEnv:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</method>
<method selector='setJObject:withEnv:'>
<arg declared_type64='jobject' index='0' name='jObjectIn' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='wrapperWithJObject:withEnv:'>
<arg declared_type64='jobject' index='0' name='jObjectIn' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='JNFJObjectWrapper*' type64='@'/>
</method>
</class>
<class name='JNFRunLoop'>
<method class_method='true' selector='javaRunLoopMode'>
<retval declared_type64='NSString*' type64='@'/>
</method>
<method class_method='true' selector='performOnMainThread:on:withObject:waitUntilDone:'>
<arg declared_type64='SEL' index='0' name='aSelector' type64=':'/>
<arg declared_type64='id' index='1' name='target' type64='@'/>
<arg declared_type64='id' index='2' name='arg' type64='@'/>
<arg declared_type64='BOOL' index='3' name='wait' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='performOnMainThreadWaiting:withBlock:'>
<arg declared_type64='BOOL' index='0' name='waitUntilDone' type64='B'/>
<arg declared_type64='void (^)()' function_pointer='true' index='1' name='block' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='JNFRunnable'>
<method class_method='true' selector='blockWithRunnable:withEnv:'>
<arg declared_type64='jobject' index='0' name='runnable' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void (^)()' function_pointer='true' type64='@?'>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method class_method='true' selector='invocationWithRunnable:withEnv:'>
<arg declared_type64='jobject' index='0' name='runnable' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='NSInvocation*' type64='@'/>
</method>
</class>
<class name='JNFTypeCoercer'>
<method selector='addCoercion:forNSClass:javaClass:'>
<arg declared_type64='NSObject*' index='0' name='coercion' type64='@'/>
<arg declared_type64='Class' index='1' name='nsClass' type64='#'/>
<arg declared_type64='NSString*' index='2' name='javaClassName' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='coerceJavaObject:withEnv:'>
<arg declared_type64='jobject' index='0' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='coerceNSObject:withEnv:'>
<arg declared_type64='id' index='0' name='obj' type64='@'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</method>
<method selector='deriveCoercer'>
<retval declared_type64='JNFTypeCoercer*' type64='@'/>
</method>
<method selector='init'>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='initWithParent:'>
<arg declared_type64='NSObject*' index='0' name='parentIn' type64='@'/>
<retval declared_type64='id' type64='@'/>
</method>
</class>
<class name='JNFWeakJObjectWrapper'>
<method class_method='true' selector='wrapperWithJObject:withEnv:'>
<arg declared_type64='jobject' index='0' name='jObjectIn' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='JNFWeakJObjectWrapper*' type64='@'/>
</method>
</class>
<class name='NSObject'>
<method selector='coerceJavaObject:withEnv:usingCoercer:'>
<arg declared_type64='jobject' index='0' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFTypeCoercion*' index='2' name='coercer' type64='@'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='coerceNSObject:withEnv:usingCoercer:'>
<arg declared_type64='id' index='0' name='obj' type64='@'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFTypeCoercion*' index='2' name='coercer' type64='@'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</method>
</class>
<informal_protocol name='JNFTypeCoercion'>
<method selector='coerceJavaObject:withEnv:usingCoercer:' type64='@40@0:8^{_jobject=}16r^^{JNINativeInterface_}24@32'>
<arg declared_type64='jobject' index='0' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFTypeCoercion*' index='2' name='coercer' type64='@'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='coerceNSObject:withEnv:usingCoercer:' type64='^{_jobject=}40@0:8@16r^^{JNINativeInterface_}24@32'>
<arg declared_type64='id' index='0' name='obj' type64='@'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFTypeCoercion*' index='2' name='coercer' type64='@'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</method>
</informal_protocol>
</signatures>
