<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/Foundation.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/Cocoa.framework'/>
<depends_on path='/System/Library/Frameworks/JavaVM.framework'/>
<depends_on path='/System/Library/Frameworks/AppKit.framework'/>
<depends_on path='/System/Library/Frameworks/QuartzCore.framework'/>
<depends_on path='/System/Library/Frameworks/ApplicationServices.framework'/>
<depends_on path='/System/Library/Frameworks/JavaVM.framework/Versions/A/Frameworks/JavaNativeFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/Carbon.framework'/>
<depends_on path='/System/Library/Frameworks/CoreGraphics.framework'/>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/CoreText.framework'/>
<struct name='JAWT' type64='{jawt=&quot;version&quot;i&quot;GetDrawingSurface&quot;^?&quot;FreeDrawingSurface&quot;^?&quot;Lock&quot;^?&quot;Unlock&quot;^?&quot;GetComponent&quot;^?}'>
<field declared_type64='jint' name='version' type64='i'/>
<field declared_type64='JAWT_DrawingSurface *(*)(JNIEnv *, jobject)' function_pointer='true' name='GetDrawingSurface' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='JAWT_DrawingSurface*' type64='^{jawt_DrawingSurface=^^{JNINativeInterface_}^{_jobject}^?^?^?^?}'/>
</field>
<field declared_type64='void (*)(JAWT_DrawingSurface *)' function_pointer='true' name='FreeDrawingSurface' type64='^?'>
<arg declared_type64='JAWT_DrawingSurface*' type64='^{jawt_DrawingSurface=^^{JNINativeInterface_}^{_jobject}^?^?^?^?}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *)' function_pointer='true' name='Lock' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *)' function_pointer='true' name='Unlock' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, void *)' function_pointer='true' name='GetComponent' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
</struct>
<struct name='JAWT_DrawingSurface' type64='{jawt_DrawingSurface=&quot;env&quot;^^{JNINativeInterface_}&quot;target&quot;^{_jobject}&quot;Lock&quot;^?&quot;GetDrawingSurfaceInfo&quot;^?&quot;FreeDrawingSurfaceInfo&quot;^?&quot;Unlock&quot;^?}'>
<field declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<field declared_type64='jobject' name='target' type64='^{_jobject=}'/>
<field declared_type64='jint (*)(struct jawt_DrawingSurface *)' function_pointer='true' name='Lock' type64='^?'>
<arg declared_type64='struct jawt_DrawingSurface*' type64='^{jawt_DrawingSurface=^^{JNINativeInterface_}^{_jobject}^?^?^?^?}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='JAWT_DrawingSurfaceInfo *(*)(struct jawt_DrawingSurface *)' function_pointer='true' name='GetDrawingSurfaceInfo' type64='^?'>
<arg declared_type64='struct jawt_DrawingSurface*' type64='^{jawt_DrawingSurface=^^{JNINativeInterface_}^{_jobject}^?^?^?^?}'/>
<retval declared_type64='JAWT_DrawingSurfaceInfo*' type64='^{jawt_DrawingSurfaceInfo=^v^{jawt_DrawingSurface}{jawt_Rectangle=iiii}i^{jawt_Rectangle}}'/>
</field>
<field declared_type64='void (*)(JAWT_DrawingSurfaceInfo *)' function_pointer='true' name='FreeDrawingSurfaceInfo' type64='^?'>
<arg declared_type64='JAWT_DrawingSurfaceInfo*' type64='^{jawt_DrawingSurfaceInfo=^v^{jawt_DrawingSurface}{jawt_Rectangle=iiii}i^{jawt_Rectangle}}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(struct jawt_DrawingSurface *)' function_pointer='true' name='Unlock' type64='^?'>
<arg declared_type64='struct jawt_DrawingSurface*' type64='^{jawt_DrawingSurface=^^{JNINativeInterface_}^{_jobject}^?^?^?^?}'/>
<retval declared_type64='void' type64='v'/>
</field>
</struct>
<struct name='JAWT_DrawingSurfaceInfo' type64='{jawt_DrawingSurfaceInfo=&quot;platformInfo&quot;^v&quot;ds&quot;^{jawt_DrawingSurface}&quot;bounds&quot;{jawt_Rectangle=&quot;x&quot;i&quot;y&quot;i&quot;width&quot;i&quot;height&quot;i}&quot;clipSize&quot;i&quot;clip&quot;^{jawt_Rectangle}}'>
<field declared_type64='void*' name='platformInfo' type64='^v'/>
<field declared_type64='struct jawt_DrawingSurface*' name='ds' type64='^{jawt_DrawingSurface=^^{JNINativeInterface_}^{_jobject}^?^?^?^?}'/>
<field declared_type64='JAWT_Rectangle' name='bounds' type64='{jawt_Rectangle=&quot;x&quot;i&quot;y&quot;i&quot;width&quot;i&quot;height&quot;i}'/>
<field declared_type64='jint' name='clipSize' type64='i'/>
<field declared_type64='JAWT_Rectangle*' name='clip' type64='^{jawt_Rectangle=iiii}'/>
</struct>
<struct name='JAWT_MacOSXDrawingSurfaceInfo' type64='{JAWT_MacOSXDrawingSurfaceInfo=&quot;cocoaViewRef&quot;@&quot;NSView&quot;}'>
<field declared_type64='NSView*' name='cocoaViewRef' type64='@&quot;NSView&quot;'/>
</struct>
<struct name='JAWT_Rectangle' type64='{jawt_Rectangle=&quot;x&quot;i&quot;y&quot;i&quot;width&quot;i&quot;height&quot;i}'>
<field declared_type64='jint' name='x' type64='i'/>
<field declared_type64='jint' name='y' type64='i'/>
<field declared_type64='jint' name='width' type64='i'/>
<field declared_type64='jint' name='height' type64='i'/>
</struct>
<struct name='JDWPTransportCapabilities' type64='{_JDWPTransportCapabilities=&quot;can_timeout_attach&quot;b1&quot;can_timeout_accept&quot;b1&quot;can_timeout_handshake&quot;b1&quot;reserved3&quot;b1&quot;reserved4&quot;b1&quot;reserved5&quot;b1&quot;reserved6&quot;b1&quot;reserved7&quot;b1&quot;reserved8&quot;b1&quot;reserved9&quot;b1&quot;reserved10&quot;b1&quot;reserved11&quot;b1&quot;reserved12&quot;b1&quot;reserved13&quot;b1&quot;reserved14&quot;b1&quot;reserved15&quot;b1}'>
<field declared_type64='unsigned int' name='can_timeout_attach' type64='b1'/>
<field declared_type64='unsigned int' name='can_timeout_accept' type64='b1'/>
<field declared_type64='unsigned int' name='can_timeout_handshake' type64='b1'/>
<field declared_type64='unsigned int' name='reserved3' type64='b1'/>
<field declared_type64='unsigned int' name='reserved4' type64='b1'/>
<field declared_type64='unsigned int' name='reserved5' type64='b1'/>
<field declared_type64='unsigned int' name='reserved6' type64='b1'/>
<field declared_type64='unsigned int' name='reserved7' type64='b1'/>
<field declared_type64='unsigned int' name='reserved8' type64='b1'/>
<field declared_type64='unsigned int' name='reserved9' type64='b1'/>
<field declared_type64='unsigned int' name='reserved10' type64='b1'/>
<field declared_type64='unsigned int' name='reserved11' type64='b1'/>
<field declared_type64='unsigned int' name='reserved12' type64='b1'/>
<field declared_type64='unsigned int' name='reserved13' type64='b1'/>
<field declared_type64='unsigned int' name='reserved14' type64='b1'/>
<field declared_type64='unsigned int' name='reserved15' type64='b1'/>
</struct>
<struct name='JNIEnv' type64='{JNINativeInterface_=&quot;reserved0&quot;^v&quot;reserved1&quot;^v&quot;reserved2&quot;^v&quot;reserved3&quot;^v&quot;GetVersion&quot;^?&quot;DefineClass&quot;^?&quot;FindClass&quot;^?&quot;FromReflectedMethod&quot;^?&quot;FromReflectedField&quot;^?&quot;ToReflectedMethod&quot;^?&quot;GetSuperclass&quot;^?&quot;IsAssignableFrom&quot;^?&quot;ToReflectedField&quot;^?&quot;Throw&quot;^?&quot;ThrowNew&quot;^?&quot;ExceptionOccurred&quot;^?&quot;ExceptionDescribe&quot;^?&quot;ExceptionClear&quot;^?&quot;FatalError&quot;^?&quot;PushLocalFrame&quot;^?&quot;PopLocalFrame&quot;^?&quot;NewGlobalRef&quot;^?&quot;DeleteGlobalRef&quot;^?&quot;DeleteLocalRef&quot;^?&quot;IsSameObject&quot;^?&quot;NewLocalRef&quot;^?&quot;EnsureLocalCapacity&quot;^?&quot;AllocObject&quot;^?&quot;NewObject&quot;^?&quot;NewObjectV&quot;^?&quot;NewObjectA&quot;^?&quot;GetObjectClass&quot;^?&quot;IsInstanceOf&quot;^?&quot;GetMethodID&quot;^?&quot;CallObjectMethod&quot;^?&quot;CallObjectMethodV&quot;^?&quot;CallObjectMethodA&quot;^?&quot;CallBooleanMethod&quot;^?&quot;CallBooleanMethodV&quot;^?&quot;CallBooleanMethodA&quot;^?&quot;CallByteMethod&quot;^?&quot;CallByteMethodV&quot;^?&quot;CallByteMethodA&quot;^?&quot;CallCharMethod&quot;^?&quot;CallCharMethodV&quot;^?&quot;CallCharMethodA&quot;^?&quot;CallShortMethod&quot;^?&quot;CallShortMethodV&quot;^?&quot;CallShortMethodA&quot;^?&quot;CallIntMethod&quot;^?&quot;CallIntMethodV&quot;^?&quot;CallIntMethodA&quot;^?&quot;CallLongMethod&quot;^?&quot;CallLongMethodV&quot;^?&quot;CallLongMethodA&quot;^?&quot;CallFloatMethod&quot;^?&quot;CallFloatMethodV&quot;^?&quot;CallFloatMethodA&quot;^?&quot;CallDoubleMethod&quot;^?&quot;CallDoubleMethodV&quot;^?&quot;CallDoubleMethodA&quot;^?&quot;CallVoidMethod&quot;^?&quot;CallVoidMethodV&quot;^?&quot;CallVoidMethodA&quot;^?&quot;CallNonvirtualObjectMethod&quot;^?&quot;CallNonvirtualObjectMethodV&quot;^?&quot;CallNonvirtualObjectMethodA&quot;^?&quot;CallNonvirtualBooleanMethod&quot;^?&quot;CallNonvirtualBooleanMethodV&quot;^?&quot;CallNonvirtualBooleanMethodA&quot;^?&quot;CallNonvirtualByteMethod&quot;^?&quot;CallNonvirtualByteMethodV&quot;^?&quot;CallNonvirtualByteMethodA&quot;^?&quot;CallNonvirtualCharMethod&quot;^?&quot;CallNonvirtualCharMethodV&quot;^?&quot;CallNonvirtualCharMethodA&quot;^?&quot;CallNonvirtualShortMethod&quot;^?&quot;CallNonvirtualShortMethodV&quot;^?&quot;CallNonvirtualShortMethodA&quot;^?&quot;CallNonvirtualIntMethod&quot;^?&quot;CallNonvirtualIntMethodV&quot;^?&quot;CallNonvirtualIntMethodA&quot;^?&quot;CallNonvirtualLongMethod&quot;^?&quot;CallNonvirtualLongMethodV&quot;^?&quot;CallNonvirtualLongMethodA&quot;^?&quot;CallNonvirtualFloatMethod&quot;^?&quot;CallNonvirtualFloatMethodV&quot;^?&quot;CallNonvirtualFloatMethodA&quot;^?&quot;CallNonvirtualDoubleMethod&quot;^?&quot;CallNonvirtualDoubleMethodV&quot;^?&quot;CallNonvirtualDoubleMethodA&quot;^?&quot;CallNonvirtualVoidMethod&quot;^?&quot;CallNonvirtualVoidMethodV&quot;^?&quot;CallNonvirtualVoidMethodA&quot;^?&quot;GetFieldID&quot;^?&quot;GetObjectField&quot;^?&quot;GetBooleanField&quot;^?&quot;GetByteField&quot;^?&quot;GetCharField&quot;^?&quot;GetShortField&quot;^?&quot;GetIntField&quot;^?&quot;GetLongField&quot;^?&quot;GetFloatField&quot;^?&quot;GetDoubleField&quot;^?&quot;SetObjectField&quot;^?&quot;SetBooleanField&quot;^?&quot;SetByteField&quot;^?&quot;SetCharField&quot;^?&quot;SetShortField&quot;^?&quot;SetIntField&quot;^?&quot;SetLongField&quot;^?&quot;SetFloatField&quot;^?&quot;SetDoubleField&quot;^?&quot;GetStaticMethodID&quot;^?&quot;CallStaticObjectMethod&quot;^?&quot;CallStaticObjectMethodV&quot;^?&quot;CallStaticObjectMethodA&quot;^?&quot;CallStaticBooleanMethod&quot;^?&quot;CallStaticBooleanMethodV&quot;^?&quot;CallStaticBooleanMethodA&quot;^?&quot;CallStaticByteMethod&quot;^?&quot;CallStaticByteMethodV&quot;^?&quot;CallStaticByteMethodA&quot;^?&quot;CallStaticCharMethod&quot;^?&quot;CallStaticCharMethodV&quot;^?&quot;CallStaticCharMethodA&quot;^?&quot;CallStaticShortMethod&quot;^?&quot;CallStaticShortMethodV&quot;^?&quot;CallStaticShortMethodA&quot;^?&quot;CallStaticIntMethod&quot;^?&quot;CallStaticIntMethodV&quot;^?&quot;CallStaticIntMethodA&quot;^?&quot;CallStaticLongMethod&quot;^?&quot;CallStaticLongMethodV&quot;^?&quot;CallStaticLongMethodA&quot;^?&quot;CallStaticFloatMethod&quot;^?&quot;CallStaticFloatMethodV&quot;^?&quot;CallStaticFloatMethodA&quot;^?&quot;CallStaticDoubleMethod&quot;^?&quot;CallStaticDoubleMethodV&quot;^?&quot;CallStaticDoubleMethodA&quot;^?&quot;CallStaticVoidMethod&quot;^?&quot;CallStaticVoidMethodV&quot;^?&quot;CallStaticVoidMethodA&quot;^?&quot;GetStaticFieldID&quot;^?&quot;GetStaticObjectField&quot;^?&quot;GetStaticBooleanField&quot;^?&quot;GetStaticByteField&quot;^?&quot;GetStaticCharField&quot;^?&quot;GetStaticShortField&quot;^?&quot;GetStaticIntField&quot;^?&quot;GetStaticLongField&quot;^?&quot;GetStaticFloatField&quot;^?&quot;GetStaticDoubleField&quot;^?&quot;SetStaticObjectField&quot;^?&quot;SetStaticBooleanField&quot;^?&quot;SetStaticByteField&quot;^?&quot;SetStaticCharField&quot;^?&quot;SetStaticShortField&quot;^?&quot;SetStaticIntField&quot;^?&quot;SetStaticLongField&quot;^?&quot;SetStaticFloatField&quot;^?&quot;SetStaticDoubleField&quot;^?&quot;NewString&quot;^?&quot;GetStringLength&quot;^?&quot;GetStringChars&quot;^?&quot;ReleaseStringChars&quot;^?&quot;NewStringUTF&quot;^?&quot;GetStringUTFLength&quot;^?&quot;GetStringUTFChars&quot;^?&quot;ReleaseStringUTFChars&quot;^?&quot;GetArrayLength&quot;^?&quot;NewObjectArray&quot;^?&quot;GetObjectArrayElement&quot;^?&quot;SetObjectArrayElement&quot;^?&quot;NewBooleanArray&quot;^?&quot;NewByteArray&quot;^?&quot;NewCharArray&quot;^?&quot;NewShortArray&quot;^?&quot;NewIntArray&quot;^?&quot;NewLongArray&quot;^?&quot;NewFloatArray&quot;^?&quot;NewDoubleArray&quot;^?&quot;GetBooleanArrayElements&quot;^?&quot;GetByteArrayElements&quot;^?&quot;GetCharArrayElements&quot;^?&quot;GetShortArrayElements&quot;^?&quot;GetIntArrayElements&quot;^?&quot;GetLongArrayElements&quot;^?&quot;GetFloatArrayElements&quot;^?&quot;GetDoubleArrayElements&quot;^?&quot;ReleaseBooleanArrayElements&quot;^?&quot;ReleaseByteArrayElements&quot;^?&quot;ReleaseCharArrayElements&quot;^?&quot;ReleaseShortArrayElements&quot;^?&quot;ReleaseIntArrayElements&quot;^?&quot;ReleaseLongArrayElements&quot;^?&quot;ReleaseFloatArrayElements&quot;^?&quot;ReleaseDoubleArrayElements&quot;^?&quot;GetBooleanArrayRegion&quot;^?&quot;GetByteArrayRegion&quot;^?&quot;GetCharArrayRegion&quot;^?&quot;GetShortArrayRegion&quot;^?&quot;GetIntArrayRegion&quot;^?&quot;GetLongArrayRegion&quot;^?&quot;GetFloatArrayRegion&quot;^?&quot;GetDoubleArrayRegion&quot;^?&quot;SetBooleanArrayRegion&quot;^?&quot;SetByteArrayRegion&quot;^?&quot;SetCharArrayRegion&quot;^?&quot;SetShortArrayRegion&quot;^?&quot;SetIntArrayRegion&quot;^?&quot;SetLongArrayRegion&quot;^?&quot;SetFloatArrayRegion&quot;^?&quot;SetDoubleArrayRegion&quot;^?&quot;RegisterNatives&quot;^?&quot;UnregisterNatives&quot;^?&quot;MonitorEnter&quot;^?&quot;MonitorExit&quot;^?&quot;GetJavaVM&quot;^?&quot;GetStringRegion&quot;^?&quot;GetStringUTFRegion&quot;^?&quot;GetPrimitiveArrayCritical&quot;^?&quot;ReleasePrimitiveArrayCritical&quot;^?&quot;GetStringCritical&quot;^?&quot;ReleaseStringCritical&quot;^?&quot;NewWeakGlobalRef&quot;^?&quot;DeleteWeakGlobalRef&quot;^?&quot;ExceptionCheck&quot;^?&quot;NewDirectByteBuffer&quot;^?&quot;GetDirectBufferAddress&quot;^?&quot;GetDirectBufferCapacity&quot;^?&quot;GetObjectRefType&quot;^?}'>
<field declared_type64='void*' name='reserved0' type64='^v'/>
<field declared_type64='void*' name='reserved1' type64='^v'/>
<field declared_type64='void*' name='reserved2' type64='^v'/>
<field declared_type64='void*' name='reserved3' type64='^v'/>
<field declared_type64='jint (*)(JNIEnv *)' function_pointer='true' name='GetVersion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jclass (*)(JNIEnv *, char *, jobject, jbyte *, jsize)' function_pointer='true' name='DefineClass' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jbyte*' type64='*'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jclass' type64='^{_jobject=}'/>
</field>
<field declared_type64='jclass (*)(JNIEnv *, char *)' function_pointer='true' name='FindClass' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jclass' type64='^{_jobject=}'/>
</field>
<field declared_type64='jmethodID (*)(JNIEnv *, jobject)' function_pointer='true' name='FromReflectedMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jmethodID' type64='^{_jmethodID=}'/>
</field>
<field declared_type64='jfieldID (*)(JNIEnv *, jobject)' function_pointer='true' name='FromReflectedField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jfieldID' type64='^{_jfieldID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, jboolean)' function_pointer='true' name='ToReflectedMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jclass (*)(JNIEnv *, jclass)' function_pointer='true' name='GetSuperclass' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jclass' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jclass)' function_pointer='true' name='IsAssignableFrom' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jfieldID, jboolean)' function_pointer='true' name='ToReflectedField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jthrowable)' function_pointer='true' name='Throw' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthrowable' type64='^{_jobject=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, char *)' function_pointer='true' name='ThrowNew' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jthrowable (*)(JNIEnv *)' function_pointer='true' name='ExceptionOccurred' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jthrowable' type64='^{_jobject=}'/>
</field>
<field declared_type64='void (*)(JNIEnv *)' function_pointer='true' name='ExceptionDescribe' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *)' function_pointer='true' name='ExceptionClear' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, char *)' function_pointer='true' name='FatalError' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jint)' function_pointer='true' name='PushLocalFrame' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject)' function_pointer='true' name='PopLocalFrame' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject)' function_pointer='true' name='NewGlobalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject)' function_pointer='true' name='DeleteGlobalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject)' function_pointer='true' name='DeleteLocalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jobject)' function_pointer='true' name='IsSameObject' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject)' function_pointer='true' name='NewLocalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jint)' function_pointer='true' name='EnsureLocalCapacity' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass)' function_pointer='true' name='AllocObject' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='NewObject' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='NewObjectV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='NewObjectA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jclass (*)(JNIEnv *, jobject)' function_pointer='true' name='GetObjectClass' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jclass' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jclass)' function_pointer='true' name='IsInstanceOf' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jmethodID (*)(JNIEnv *, jclass, char *, char *)' function_pointer='true' name='GetMethodID' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jmethodID' type64='^{_jmethodID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallObjectMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallObjectMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallObjectMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallBooleanMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallBooleanMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallBooleanMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallByteMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallByteMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallByteMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallCharMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallCharMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallCharMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallShortMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallShortMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallShortMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallIntMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallIntMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallIntMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallLongMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallLongMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallLongMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallFloatMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallFloatMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallFloatMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallDoubleMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallDoubleMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallDoubleMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallVoidMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallVoidMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallVoidMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualObjectMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualObjectMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualObjectMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualBooleanMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualBooleanMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualBooleanMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualByteMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualByteMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualByteMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualCharMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualCharMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualCharMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualShortMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualShortMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualShortMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualIntMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualIntMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualIntMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualLongMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualLongMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualLongMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualFloatMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualFloatMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualFloatMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualDoubleMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualDoubleMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualDoubleMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualVoidMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualVoidMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualVoidMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jfieldID (*)(JNIEnv *, jclass, char *, char *)' function_pointer='true' name='GetFieldID' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jfieldID' type64='^{_jfieldID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetObjectField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetBooleanField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetByteField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetCharField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetShortField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetIntField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetLongField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetFloatField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetDoubleField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jobject)' function_pointer='true' name='SetObjectField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jboolean)' function_pointer='true' name='SetBooleanField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jbyte)' function_pointer='true' name='SetByteField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jbyte' type64='c'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jchar)' function_pointer='true' name='SetCharField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jchar' type64='S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jshort)' function_pointer='true' name='SetShortField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jshort' type64='s'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jint)' function_pointer='true' name='SetIntField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jlong)' function_pointer='true' name='SetLongField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jfloat)' function_pointer='true' name='SetFloatField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jfloat' type64='f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jdouble)' function_pointer='true' name='SetDoubleField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jdouble' type64='d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jmethodID (*)(JNIEnv *, jclass, char *, char *)' function_pointer='true' name='GetStaticMethodID' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jmethodID' type64='^{_jmethodID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticObjectMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticObjectMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticObjectMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticBooleanMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticBooleanMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticBooleanMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticByteMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticByteMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticByteMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticCharMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticCharMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticCharMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticShortMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticShortMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticShortMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticIntMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticIntMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticIntMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticLongMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticLongMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticLongMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticFloatMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticFloatMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticFloatMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticDoubleMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticDoubleMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticDoubleMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticVoidMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticVoidMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticVoidMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jfieldID (*)(JNIEnv *, jclass, char *, char *)' function_pointer='true' name='GetStaticFieldID' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jfieldID' type64='^{_jfieldID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticObjectField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticBooleanField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticByteField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticCharField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticShortField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticIntField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticLongField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticFloatField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticDoubleField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jobject)' function_pointer='true' name='SetStaticObjectField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jboolean)' function_pointer='true' name='SetStaticBooleanField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jbyte)' function_pointer='true' name='SetStaticByteField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jbyte' type64='c'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jchar)' function_pointer='true' name='SetStaticCharField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jchar' type64='S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jshort)' function_pointer='true' name='SetStaticShortField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jshort' type64='s'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jint)' function_pointer='true' name='SetStaticIntField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jlong)' function_pointer='true' name='SetStaticLongField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jfloat)' function_pointer='true' name='SetStaticFloatField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jfloat' type64='f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jdouble)' function_pointer='true' name='SetStaticDoubleField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jdouble' type64='d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jstring (*)(JNIEnv *, jchar *, jsize)' function_pointer='true' name='NewString' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jstring' type64='^{_jobject=}'/>
</field>
<field declared_type64='jsize (*)(JNIEnv *, jstring)' function_pointer='true' name='GetStringLength' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<retval declared_type64='jsize' type64='i'/>
</field>
<field const='true' declared_type64='jchar *(*)(JNIEnv *, jstring, jboolean *)' function_pointer='true' name='GetStringChars' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval const='true' declared_type64='jchar*' type64='^S'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, jchar *)' function_pointer='true' name='ReleaseStringChars' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jstring (*)(JNIEnv *, char *)' function_pointer='true' name='NewStringUTF' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jstring' type64='^{_jobject=}'/>
</field>
<field declared_type64='jsize (*)(JNIEnv *, jstring)' function_pointer='true' name='GetStringUTFLength' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<retval declared_type64='jsize' type64='i'/>
</field>
<field const='true' declared_type64='char *(*)(JNIEnv *, jstring, jboolean *)' function_pointer='true' name='GetStringUTFChars' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval const='true' declared_type64='char*' type64='*'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, char *)' function_pointer='true' name='ReleaseStringUTFChars' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jsize (*)(JNIEnv *, jarray)' function_pointer='true' name='GetArrayLength' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jarray' type64='^{_jobject=}'/>
<retval declared_type64='jsize' type64='i'/>
</field>
<field declared_type64='jobjectArray (*)(JNIEnv *, jsize, jclass, jobject)' function_pointer='true' name='NewObjectArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobjectArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobjectArray, jsize)' function_pointer='true' name='GetObjectArrayElement' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobjectArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobjectArray, jsize, jobject)' function_pointer='true' name='SetObjectArrayElement' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobjectArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jbooleanArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewBooleanArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jbooleanArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jbyteArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewByteArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jbyteArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jcharArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewCharArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jcharArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jshortArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewShortArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jshortArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jintArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewIntArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jintArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jlongArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewLongArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jlongArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jfloatArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewFloatArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jfloatArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jdoubleArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewDoubleArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jdoubleArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean *(*)(JNIEnv *, jbooleanArray, jboolean *)' function_pointer='true' name='GetBooleanArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbooleanArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jboolean*' type64='*'/>
</field>
<field declared_type64='jbyte *(*)(JNIEnv *, jbyteArray, jboolean *)' function_pointer='true' name='GetByteArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbyteArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jbyte*' type64='*'/>
</field>
<field declared_type64='jchar *(*)(JNIEnv *, jcharArray, jboolean *)' function_pointer='true' name='GetCharArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jcharArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jchar*' type64='^S'/>
</field>
<field declared_type64='jshort *(*)(JNIEnv *, jshortArray, jboolean *)' function_pointer='true' name='GetShortArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jshortArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jshort*' type64='^s'/>
</field>
<field declared_type64='jint *(*)(JNIEnv *, jintArray, jboolean *)' function_pointer='true' name='GetIntArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jintArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jint*' type64='^i'/>
</field>
<field declared_type64='jlong *(*)(JNIEnv *, jlongArray, jboolean *)' function_pointer='true' name='GetLongArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jlongArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jlong*' type64='^q'/>
</field>
<field declared_type64='jfloat *(*)(JNIEnv *, jfloatArray, jboolean *)' function_pointer='true' name='GetFloatArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jfloatArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jfloat*' type64='^f'/>
</field>
<field declared_type64='jdouble *(*)(JNIEnv *, jdoubleArray, jboolean *)' function_pointer='true' name='GetDoubleArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jdoubleArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jdouble*' type64='^d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbooleanArray, jboolean *, jint)' function_pointer='true' name='ReleaseBooleanArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbooleanArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbyteArray, jbyte *, jint)' function_pointer='true' name='ReleaseByteArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbyteArray' type64='^{_jobject=}'/>
<arg declared_type64='jbyte*' type64='*'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jcharArray, jchar *, jint)' function_pointer='true' name='ReleaseCharArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jcharArray' type64='^{_jobject=}'/>
<arg declared_type64='jchar*' type64='^S'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jshortArray, jshort *, jint)' function_pointer='true' name='ReleaseShortArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jshortArray' type64='^{_jobject=}'/>
<arg declared_type64='jshort*' type64='^s'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jintArray, jint *, jint)' function_pointer='true' name='ReleaseIntArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jintArray' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jlongArray, jlong *, jint)' function_pointer='true' name='ReleaseLongArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jlongArray' type64='^{_jobject=}'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jfloatArray, jfloat *, jint)' function_pointer='true' name='ReleaseFloatArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jfloatArray' type64='^{_jobject=}'/>
<arg declared_type64='jfloat*' type64='^f'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jdoubleArray, jdouble *, jint)' function_pointer='true' name='ReleaseDoubleArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jdoubleArray' type64='^{_jobject=}'/>
<arg declared_type64='jdouble*' type64='^d'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbooleanArray, jsize, jsize, jboolean *)' function_pointer='true' name='GetBooleanArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbooleanArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbyteArray, jsize, jsize, jbyte *)' function_pointer='true' name='GetByteArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbyteArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jbyte*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jcharArray, jsize, jsize, jchar *)' function_pointer='true' name='GetCharArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jcharArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jshortArray, jsize, jsize, jshort *)' function_pointer='true' name='GetShortArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jshortArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jshort*' type64='^s'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jintArray, jsize, jsize, jint *)' function_pointer='true' name='GetIntArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jintArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jlongArray, jsize, jsize, jlong *)' function_pointer='true' name='GetLongArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jlongArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jfloatArray, jsize, jsize, jfloat *)' function_pointer='true' name='GetFloatArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jfloatArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jfloat*' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jdoubleArray, jsize, jsize, jdouble *)' function_pointer='true' name='GetDoubleArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jdoubleArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jdouble*' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbooleanArray, jsize, jsize, jboolean *)' function_pointer='true' name='SetBooleanArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbooleanArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jboolean*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbyteArray, jsize, jsize, jbyte *)' function_pointer='true' name='SetByteArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbyteArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jbyte*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jcharArray, jsize, jsize, jchar *)' function_pointer='true' name='SetCharArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jcharArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jshortArray, jsize, jsize, jshort *)' function_pointer='true' name='SetShortArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jshortArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jshort*' type64='^s'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jintArray, jsize, jsize, jint *)' function_pointer='true' name='SetIntArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jintArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jint*' type64='^i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jlongArray, jsize, jsize, jlong *)' function_pointer='true' name='SetLongArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jlongArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jlong*' type64='^q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jfloatArray, jsize, jsize, jfloat *)' function_pointer='true' name='SetFloatArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jfloatArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jfloat*' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jdoubleArray, jsize, jsize, jdouble *)' function_pointer='true' name='SetDoubleArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jdoubleArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jdouble*' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, JNINativeMethod *, jint)' function_pointer='true' name='RegisterNatives' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='JNINativeMethod*' type64='^{_JNINativeMethod=**^v}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass)' function_pointer='true' name='UnregisterNatives' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject)' function_pointer='true' name='MonitorEnter' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject)' function_pointer='true' name='MonitorExit' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, JavaVM **)' function_pointer='true' name='GetJavaVM' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JavaVM**' type64='^^^{JNIInvokeInterface_}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, jsize, jsize, jchar *)' function_pointer='true' name='GetStringRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, jsize, jsize, char *)' function_pointer='true' name='GetStringUTFRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void *(*)(JNIEnv *, jarray, jboolean *)' function_pointer='true' name='GetPrimitiveArrayCritical' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jarray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jarray, void *, jint)' function_pointer='true' name='ReleasePrimitiveArrayCritical' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jarray' type64='^{_jobject=}'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field const='true' declared_type64='jchar *(*)(JNIEnv *, jstring, jboolean *)' function_pointer='true' name='GetStringCritical' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval const='true' declared_type64='jchar*' type64='^S'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, jchar *)' function_pointer='true' name='ReleaseStringCritical' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jweak (*)(JNIEnv *, jobject)' function_pointer='true' name='NewWeakGlobalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jweak' type64='^{_jobject=}'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jweak)' function_pointer='true' name='DeleteWeakGlobalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jweak' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *)' function_pointer='true' name='ExceptionCheck' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, void *, jlong)' function_pointer='true' name='NewDirectByteBuffer' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='void *(*)(JNIEnv *, jobject)' function_pointer='true' name='GetDirectBufferAddress' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject)' function_pointer='true' name='GetDirectBufferCapacity' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jobjectRefType (*)(JNIEnv *, jobject)' function_pointer='true' name='GetObjectRefType' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobjectRefType' type64='i'/>
</field>
</struct>
<struct name='JNIEnv_' type64='{JNIEnv_=&quot;functions&quot;^{JNINativeInterface_}}'>
<field const='true' declared_type64='struct JNINativeInterface_*' name='functions' type64='^{JNINativeInterface_=^v^v^v^v^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
</struct>
<struct name='JNIInvokeInterface_' type64='{JNIInvokeInterface_=&quot;reserved0&quot;^v&quot;reserved1&quot;^v&quot;reserved2&quot;^v&quot;DestroyJavaVM&quot;^?&quot;AttachCurrentThread&quot;^?&quot;DetachCurrentThread&quot;^?&quot;GetEnv&quot;^?&quot;AttachCurrentThreadAsDaemon&quot;^?}'>
<field declared_type64='void*' name='reserved0' type64='^v'/>
<field declared_type64='void*' name='reserved1' type64='^v'/>
<field declared_type64='void*' name='reserved2' type64='^v'/>
<field declared_type64='jint (*)(JavaVM *)' function_pointer='true' name='DestroyJavaVM' type64='^?'>
<arg declared_type64='JavaVM*' type64='^^{JNIInvokeInterface_}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JavaVM *, void **, void *)' function_pointer='true' name='AttachCurrentThread' type64='^?'>
<arg declared_type64='JavaVM*' type64='^^{JNIInvokeInterface_}'/>
<arg declared_type64='void**' type64='^^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JavaVM *)' function_pointer='true' name='DetachCurrentThread' type64='^?'>
<arg declared_type64='JavaVM*' type64='^^{JNIInvokeInterface_}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JavaVM *, void **, jint)' function_pointer='true' name='GetEnv' type64='^?'>
<arg declared_type64='JavaVM*' type64='^^{JNIInvokeInterface_}'/>
<arg declared_type64='void**' type64='^^v'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JavaVM *, void **, void *)' function_pointer='true' name='AttachCurrentThreadAsDaemon' type64='^?'>
<arg declared_type64='JavaVM*' type64='^^{JNIInvokeInterface_}'/>
<arg declared_type64='void**' type64='^^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jint' type64='i'/>
</field>
</struct>
<struct name='JNINativeInterface_' type64='{JNINativeInterface_=&quot;reserved0&quot;^v&quot;reserved1&quot;^v&quot;reserved2&quot;^v&quot;reserved3&quot;^v&quot;GetVersion&quot;^?&quot;DefineClass&quot;^?&quot;FindClass&quot;^?&quot;FromReflectedMethod&quot;^?&quot;FromReflectedField&quot;^?&quot;ToReflectedMethod&quot;^?&quot;GetSuperclass&quot;^?&quot;IsAssignableFrom&quot;^?&quot;ToReflectedField&quot;^?&quot;Throw&quot;^?&quot;ThrowNew&quot;^?&quot;ExceptionOccurred&quot;^?&quot;ExceptionDescribe&quot;^?&quot;ExceptionClear&quot;^?&quot;FatalError&quot;^?&quot;PushLocalFrame&quot;^?&quot;PopLocalFrame&quot;^?&quot;NewGlobalRef&quot;^?&quot;DeleteGlobalRef&quot;^?&quot;DeleteLocalRef&quot;^?&quot;IsSameObject&quot;^?&quot;NewLocalRef&quot;^?&quot;EnsureLocalCapacity&quot;^?&quot;AllocObject&quot;^?&quot;NewObject&quot;^?&quot;NewObjectV&quot;^?&quot;NewObjectA&quot;^?&quot;GetObjectClass&quot;^?&quot;IsInstanceOf&quot;^?&quot;GetMethodID&quot;^?&quot;CallObjectMethod&quot;^?&quot;CallObjectMethodV&quot;^?&quot;CallObjectMethodA&quot;^?&quot;CallBooleanMethod&quot;^?&quot;CallBooleanMethodV&quot;^?&quot;CallBooleanMethodA&quot;^?&quot;CallByteMethod&quot;^?&quot;CallByteMethodV&quot;^?&quot;CallByteMethodA&quot;^?&quot;CallCharMethod&quot;^?&quot;CallCharMethodV&quot;^?&quot;CallCharMethodA&quot;^?&quot;CallShortMethod&quot;^?&quot;CallShortMethodV&quot;^?&quot;CallShortMethodA&quot;^?&quot;CallIntMethod&quot;^?&quot;CallIntMethodV&quot;^?&quot;CallIntMethodA&quot;^?&quot;CallLongMethod&quot;^?&quot;CallLongMethodV&quot;^?&quot;CallLongMethodA&quot;^?&quot;CallFloatMethod&quot;^?&quot;CallFloatMethodV&quot;^?&quot;CallFloatMethodA&quot;^?&quot;CallDoubleMethod&quot;^?&quot;CallDoubleMethodV&quot;^?&quot;CallDoubleMethodA&quot;^?&quot;CallVoidMethod&quot;^?&quot;CallVoidMethodV&quot;^?&quot;CallVoidMethodA&quot;^?&quot;CallNonvirtualObjectMethod&quot;^?&quot;CallNonvirtualObjectMethodV&quot;^?&quot;CallNonvirtualObjectMethodA&quot;^?&quot;CallNonvirtualBooleanMethod&quot;^?&quot;CallNonvirtualBooleanMethodV&quot;^?&quot;CallNonvirtualBooleanMethodA&quot;^?&quot;CallNonvirtualByteMethod&quot;^?&quot;CallNonvirtualByteMethodV&quot;^?&quot;CallNonvirtualByteMethodA&quot;^?&quot;CallNonvirtualCharMethod&quot;^?&quot;CallNonvirtualCharMethodV&quot;^?&quot;CallNonvirtualCharMethodA&quot;^?&quot;CallNonvirtualShortMethod&quot;^?&quot;CallNonvirtualShortMethodV&quot;^?&quot;CallNonvirtualShortMethodA&quot;^?&quot;CallNonvirtualIntMethod&quot;^?&quot;CallNonvirtualIntMethodV&quot;^?&quot;CallNonvirtualIntMethodA&quot;^?&quot;CallNonvirtualLongMethod&quot;^?&quot;CallNonvirtualLongMethodV&quot;^?&quot;CallNonvirtualLongMethodA&quot;^?&quot;CallNonvirtualFloatMethod&quot;^?&quot;CallNonvirtualFloatMethodV&quot;^?&quot;CallNonvirtualFloatMethodA&quot;^?&quot;CallNonvirtualDoubleMethod&quot;^?&quot;CallNonvirtualDoubleMethodV&quot;^?&quot;CallNonvirtualDoubleMethodA&quot;^?&quot;CallNonvirtualVoidMethod&quot;^?&quot;CallNonvirtualVoidMethodV&quot;^?&quot;CallNonvirtualVoidMethodA&quot;^?&quot;GetFieldID&quot;^?&quot;GetObjectField&quot;^?&quot;GetBooleanField&quot;^?&quot;GetByteField&quot;^?&quot;GetCharField&quot;^?&quot;GetShortField&quot;^?&quot;GetIntField&quot;^?&quot;GetLongField&quot;^?&quot;GetFloatField&quot;^?&quot;GetDoubleField&quot;^?&quot;SetObjectField&quot;^?&quot;SetBooleanField&quot;^?&quot;SetByteField&quot;^?&quot;SetCharField&quot;^?&quot;SetShortField&quot;^?&quot;SetIntField&quot;^?&quot;SetLongField&quot;^?&quot;SetFloatField&quot;^?&quot;SetDoubleField&quot;^?&quot;GetStaticMethodID&quot;^?&quot;CallStaticObjectMethod&quot;^?&quot;CallStaticObjectMethodV&quot;^?&quot;CallStaticObjectMethodA&quot;^?&quot;CallStaticBooleanMethod&quot;^?&quot;CallStaticBooleanMethodV&quot;^?&quot;CallStaticBooleanMethodA&quot;^?&quot;CallStaticByteMethod&quot;^?&quot;CallStaticByteMethodV&quot;^?&quot;CallStaticByteMethodA&quot;^?&quot;CallStaticCharMethod&quot;^?&quot;CallStaticCharMethodV&quot;^?&quot;CallStaticCharMethodA&quot;^?&quot;CallStaticShortMethod&quot;^?&quot;CallStaticShortMethodV&quot;^?&quot;CallStaticShortMethodA&quot;^?&quot;CallStaticIntMethod&quot;^?&quot;CallStaticIntMethodV&quot;^?&quot;CallStaticIntMethodA&quot;^?&quot;CallStaticLongMethod&quot;^?&quot;CallStaticLongMethodV&quot;^?&quot;CallStaticLongMethodA&quot;^?&quot;CallStaticFloatMethod&quot;^?&quot;CallStaticFloatMethodV&quot;^?&quot;CallStaticFloatMethodA&quot;^?&quot;CallStaticDoubleMethod&quot;^?&quot;CallStaticDoubleMethodV&quot;^?&quot;CallStaticDoubleMethodA&quot;^?&quot;CallStaticVoidMethod&quot;^?&quot;CallStaticVoidMethodV&quot;^?&quot;CallStaticVoidMethodA&quot;^?&quot;GetStaticFieldID&quot;^?&quot;GetStaticObjectField&quot;^?&quot;GetStaticBooleanField&quot;^?&quot;GetStaticByteField&quot;^?&quot;GetStaticCharField&quot;^?&quot;GetStaticShortField&quot;^?&quot;GetStaticIntField&quot;^?&quot;GetStaticLongField&quot;^?&quot;GetStaticFloatField&quot;^?&quot;GetStaticDoubleField&quot;^?&quot;SetStaticObjectField&quot;^?&quot;SetStaticBooleanField&quot;^?&quot;SetStaticByteField&quot;^?&quot;SetStaticCharField&quot;^?&quot;SetStaticShortField&quot;^?&quot;SetStaticIntField&quot;^?&quot;SetStaticLongField&quot;^?&quot;SetStaticFloatField&quot;^?&quot;SetStaticDoubleField&quot;^?&quot;NewString&quot;^?&quot;GetStringLength&quot;^?&quot;GetStringChars&quot;^?&quot;ReleaseStringChars&quot;^?&quot;NewStringUTF&quot;^?&quot;GetStringUTFLength&quot;^?&quot;GetStringUTFChars&quot;^?&quot;ReleaseStringUTFChars&quot;^?&quot;GetArrayLength&quot;^?&quot;NewObjectArray&quot;^?&quot;GetObjectArrayElement&quot;^?&quot;SetObjectArrayElement&quot;^?&quot;NewBooleanArray&quot;^?&quot;NewByteArray&quot;^?&quot;NewCharArray&quot;^?&quot;NewShortArray&quot;^?&quot;NewIntArray&quot;^?&quot;NewLongArray&quot;^?&quot;NewFloatArray&quot;^?&quot;NewDoubleArray&quot;^?&quot;GetBooleanArrayElements&quot;^?&quot;GetByteArrayElements&quot;^?&quot;GetCharArrayElements&quot;^?&quot;GetShortArrayElements&quot;^?&quot;GetIntArrayElements&quot;^?&quot;GetLongArrayElements&quot;^?&quot;GetFloatArrayElements&quot;^?&quot;GetDoubleArrayElements&quot;^?&quot;ReleaseBooleanArrayElements&quot;^?&quot;ReleaseByteArrayElements&quot;^?&quot;ReleaseCharArrayElements&quot;^?&quot;ReleaseShortArrayElements&quot;^?&quot;ReleaseIntArrayElements&quot;^?&quot;ReleaseLongArrayElements&quot;^?&quot;ReleaseFloatArrayElements&quot;^?&quot;ReleaseDoubleArrayElements&quot;^?&quot;GetBooleanArrayRegion&quot;^?&quot;GetByteArrayRegion&quot;^?&quot;GetCharArrayRegion&quot;^?&quot;GetShortArrayRegion&quot;^?&quot;GetIntArrayRegion&quot;^?&quot;GetLongArrayRegion&quot;^?&quot;GetFloatArrayRegion&quot;^?&quot;GetDoubleArrayRegion&quot;^?&quot;SetBooleanArrayRegion&quot;^?&quot;SetByteArrayRegion&quot;^?&quot;SetCharArrayRegion&quot;^?&quot;SetShortArrayRegion&quot;^?&quot;SetIntArrayRegion&quot;^?&quot;SetLongArrayRegion&quot;^?&quot;SetFloatArrayRegion&quot;^?&quot;SetDoubleArrayRegion&quot;^?&quot;RegisterNatives&quot;^?&quot;UnregisterNatives&quot;^?&quot;MonitorEnter&quot;^?&quot;MonitorExit&quot;^?&quot;GetJavaVM&quot;^?&quot;GetStringRegion&quot;^?&quot;GetStringUTFRegion&quot;^?&quot;GetPrimitiveArrayCritical&quot;^?&quot;ReleasePrimitiveArrayCritical&quot;^?&quot;GetStringCritical&quot;^?&quot;ReleaseStringCritical&quot;^?&quot;NewWeakGlobalRef&quot;^?&quot;DeleteWeakGlobalRef&quot;^?&quot;ExceptionCheck&quot;^?&quot;NewDirectByteBuffer&quot;^?&quot;GetDirectBufferAddress&quot;^?&quot;GetDirectBufferCapacity&quot;^?&quot;GetObjectRefType&quot;^?}'>
<field declared_type64='void*' name='reserved0' type64='^v'/>
<field declared_type64='void*' name='reserved1' type64='^v'/>
<field declared_type64='void*' name='reserved2' type64='^v'/>
<field declared_type64='void*' name='reserved3' type64='^v'/>
<field declared_type64='jint (*)(JNIEnv *)' function_pointer='true' name='GetVersion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jclass (*)(JNIEnv *, char *, jobject, jbyte *, jsize)' function_pointer='true' name='DefineClass' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jbyte*' type64='*'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jclass' type64='^{_jobject=}'/>
</field>
<field declared_type64='jclass (*)(JNIEnv *, char *)' function_pointer='true' name='FindClass' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jclass' type64='^{_jobject=}'/>
</field>
<field declared_type64='jmethodID (*)(JNIEnv *, jobject)' function_pointer='true' name='FromReflectedMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jmethodID' type64='^{_jmethodID=}'/>
</field>
<field declared_type64='jfieldID (*)(JNIEnv *, jobject)' function_pointer='true' name='FromReflectedField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jfieldID' type64='^{_jfieldID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, jboolean)' function_pointer='true' name='ToReflectedMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jclass (*)(JNIEnv *, jclass)' function_pointer='true' name='GetSuperclass' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jclass' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jclass)' function_pointer='true' name='IsAssignableFrom' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jfieldID, jboolean)' function_pointer='true' name='ToReflectedField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jthrowable)' function_pointer='true' name='Throw' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthrowable' type64='^{_jobject=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, char *)' function_pointer='true' name='ThrowNew' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jthrowable (*)(JNIEnv *)' function_pointer='true' name='ExceptionOccurred' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jthrowable' type64='^{_jobject=}'/>
</field>
<field declared_type64='void (*)(JNIEnv *)' function_pointer='true' name='ExceptionDescribe' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *)' function_pointer='true' name='ExceptionClear' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, char *)' function_pointer='true' name='FatalError' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jint)' function_pointer='true' name='PushLocalFrame' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject)' function_pointer='true' name='PopLocalFrame' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject)' function_pointer='true' name='NewGlobalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject)' function_pointer='true' name='DeleteGlobalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject)' function_pointer='true' name='DeleteLocalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jobject)' function_pointer='true' name='IsSameObject' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject)' function_pointer='true' name='NewLocalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jint)' function_pointer='true' name='EnsureLocalCapacity' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass)' function_pointer='true' name='AllocObject' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='NewObject' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='NewObjectV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='NewObjectA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jclass (*)(JNIEnv *, jobject)' function_pointer='true' name='GetObjectClass' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jclass' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jclass)' function_pointer='true' name='IsInstanceOf' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jmethodID (*)(JNIEnv *, jclass, char *, char *)' function_pointer='true' name='GetMethodID' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jmethodID' type64='^{_jmethodID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallObjectMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallObjectMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallObjectMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallBooleanMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallBooleanMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallBooleanMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallByteMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallByteMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallByteMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallCharMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallCharMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallCharMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallShortMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallShortMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallShortMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallIntMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallIntMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallIntMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallLongMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallLongMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallLongMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallFloatMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallFloatMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallFloatMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallDoubleMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallDoubleMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallDoubleMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallVoidMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallVoidMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallVoidMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualObjectMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualObjectMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualObjectMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualBooleanMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualBooleanMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualBooleanMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualByteMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualByteMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualByteMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualCharMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualCharMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualCharMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualShortMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualShortMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualShortMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualIntMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualIntMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualIntMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualLongMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualLongMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualLongMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualFloatMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualFloatMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualFloatMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualDoubleMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualDoubleMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualDoubleMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualVoidMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualVoidMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualVoidMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jfieldID (*)(JNIEnv *, jclass, char *, char *)' function_pointer='true' name='GetFieldID' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jfieldID' type64='^{_jfieldID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetObjectField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetBooleanField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetByteField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetCharField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetShortField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetIntField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetLongField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetFloatField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetDoubleField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jobject)' function_pointer='true' name='SetObjectField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jboolean)' function_pointer='true' name='SetBooleanField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jbyte)' function_pointer='true' name='SetByteField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jbyte' type64='c'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jchar)' function_pointer='true' name='SetCharField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jchar' type64='S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jshort)' function_pointer='true' name='SetShortField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jshort' type64='s'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jint)' function_pointer='true' name='SetIntField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jlong)' function_pointer='true' name='SetLongField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jfloat)' function_pointer='true' name='SetFloatField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jfloat' type64='f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jdouble)' function_pointer='true' name='SetDoubleField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jdouble' type64='d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jmethodID (*)(JNIEnv *, jclass, char *, char *)' function_pointer='true' name='GetStaticMethodID' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jmethodID' type64='^{_jmethodID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticObjectMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticObjectMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticObjectMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticBooleanMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticBooleanMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticBooleanMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticByteMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticByteMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticByteMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticCharMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticCharMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticCharMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticShortMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticShortMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticShortMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticIntMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticIntMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticIntMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticLongMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticLongMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticLongMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticFloatMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticFloatMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticFloatMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticDoubleMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticDoubleMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticDoubleMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticVoidMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticVoidMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticVoidMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jfieldID (*)(JNIEnv *, jclass, char *, char *)' function_pointer='true' name='GetStaticFieldID' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jfieldID' type64='^{_jfieldID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticObjectField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticBooleanField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticByteField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticCharField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticShortField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticIntField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticLongField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticFloatField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticDoubleField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jobject)' function_pointer='true' name='SetStaticObjectField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jboolean)' function_pointer='true' name='SetStaticBooleanField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jbyte)' function_pointer='true' name='SetStaticByteField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jbyte' type64='c'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jchar)' function_pointer='true' name='SetStaticCharField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jchar' type64='S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jshort)' function_pointer='true' name='SetStaticShortField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jshort' type64='s'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jint)' function_pointer='true' name='SetStaticIntField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jlong)' function_pointer='true' name='SetStaticLongField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jfloat)' function_pointer='true' name='SetStaticFloatField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jfloat' type64='f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jdouble)' function_pointer='true' name='SetStaticDoubleField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jdouble' type64='d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jstring (*)(JNIEnv *, jchar *, jsize)' function_pointer='true' name='NewString' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jstring' type64='^{_jobject=}'/>
</field>
<field declared_type64='jsize (*)(JNIEnv *, jstring)' function_pointer='true' name='GetStringLength' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<retval declared_type64='jsize' type64='i'/>
</field>
<field const='true' declared_type64='jchar *(*)(JNIEnv *, jstring, jboolean *)' function_pointer='true' name='GetStringChars' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval const='true' declared_type64='jchar*' type64='^S'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, jchar *)' function_pointer='true' name='ReleaseStringChars' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jstring (*)(JNIEnv *, char *)' function_pointer='true' name='NewStringUTF' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jstring' type64='^{_jobject=}'/>
</field>
<field declared_type64='jsize (*)(JNIEnv *, jstring)' function_pointer='true' name='GetStringUTFLength' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<retval declared_type64='jsize' type64='i'/>
</field>
<field const='true' declared_type64='char *(*)(JNIEnv *, jstring, jboolean *)' function_pointer='true' name='GetStringUTFChars' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval const='true' declared_type64='char*' type64='*'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, char *)' function_pointer='true' name='ReleaseStringUTFChars' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jsize (*)(JNIEnv *, jarray)' function_pointer='true' name='GetArrayLength' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jarray' type64='^{_jobject=}'/>
<retval declared_type64='jsize' type64='i'/>
</field>
<field declared_type64='jobjectArray (*)(JNIEnv *, jsize, jclass, jobject)' function_pointer='true' name='NewObjectArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobjectArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobjectArray, jsize)' function_pointer='true' name='GetObjectArrayElement' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobjectArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobjectArray, jsize, jobject)' function_pointer='true' name='SetObjectArrayElement' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobjectArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jbooleanArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewBooleanArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jbooleanArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jbyteArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewByteArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jbyteArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jcharArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewCharArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jcharArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jshortArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewShortArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jshortArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jintArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewIntArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jintArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jlongArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewLongArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jlongArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jfloatArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewFloatArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jfloatArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jdoubleArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewDoubleArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jdoubleArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean *(*)(JNIEnv *, jbooleanArray, jboolean *)' function_pointer='true' name='GetBooleanArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbooleanArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jboolean*' type64='*'/>
</field>
<field declared_type64='jbyte *(*)(JNIEnv *, jbyteArray, jboolean *)' function_pointer='true' name='GetByteArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbyteArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jbyte*' type64='*'/>
</field>
<field declared_type64='jchar *(*)(JNIEnv *, jcharArray, jboolean *)' function_pointer='true' name='GetCharArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jcharArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jchar*' type64='^S'/>
</field>
<field declared_type64='jshort *(*)(JNIEnv *, jshortArray, jboolean *)' function_pointer='true' name='GetShortArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jshortArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jshort*' type64='^s'/>
</field>
<field declared_type64='jint *(*)(JNIEnv *, jintArray, jboolean *)' function_pointer='true' name='GetIntArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jintArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jint*' type64='^i'/>
</field>
<field declared_type64='jlong *(*)(JNIEnv *, jlongArray, jboolean *)' function_pointer='true' name='GetLongArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jlongArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jlong*' type64='^q'/>
</field>
<field declared_type64='jfloat *(*)(JNIEnv *, jfloatArray, jboolean *)' function_pointer='true' name='GetFloatArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jfloatArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jfloat*' type64='^f'/>
</field>
<field declared_type64='jdouble *(*)(JNIEnv *, jdoubleArray, jboolean *)' function_pointer='true' name='GetDoubleArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jdoubleArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jdouble*' type64='^d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbooleanArray, jboolean *, jint)' function_pointer='true' name='ReleaseBooleanArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbooleanArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbyteArray, jbyte *, jint)' function_pointer='true' name='ReleaseByteArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbyteArray' type64='^{_jobject=}'/>
<arg declared_type64='jbyte*' type64='*'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jcharArray, jchar *, jint)' function_pointer='true' name='ReleaseCharArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jcharArray' type64='^{_jobject=}'/>
<arg declared_type64='jchar*' type64='^S'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jshortArray, jshort *, jint)' function_pointer='true' name='ReleaseShortArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jshortArray' type64='^{_jobject=}'/>
<arg declared_type64='jshort*' type64='^s'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jintArray, jint *, jint)' function_pointer='true' name='ReleaseIntArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jintArray' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jlongArray, jlong *, jint)' function_pointer='true' name='ReleaseLongArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jlongArray' type64='^{_jobject=}'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jfloatArray, jfloat *, jint)' function_pointer='true' name='ReleaseFloatArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jfloatArray' type64='^{_jobject=}'/>
<arg declared_type64='jfloat*' type64='^f'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jdoubleArray, jdouble *, jint)' function_pointer='true' name='ReleaseDoubleArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jdoubleArray' type64='^{_jobject=}'/>
<arg declared_type64='jdouble*' type64='^d'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbooleanArray, jsize, jsize, jboolean *)' function_pointer='true' name='GetBooleanArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbooleanArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbyteArray, jsize, jsize, jbyte *)' function_pointer='true' name='GetByteArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbyteArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jbyte*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jcharArray, jsize, jsize, jchar *)' function_pointer='true' name='GetCharArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jcharArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jshortArray, jsize, jsize, jshort *)' function_pointer='true' name='GetShortArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jshortArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jshort*' type64='^s'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jintArray, jsize, jsize, jint *)' function_pointer='true' name='GetIntArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jintArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jlongArray, jsize, jsize, jlong *)' function_pointer='true' name='GetLongArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jlongArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jfloatArray, jsize, jsize, jfloat *)' function_pointer='true' name='GetFloatArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jfloatArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jfloat*' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jdoubleArray, jsize, jsize, jdouble *)' function_pointer='true' name='GetDoubleArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jdoubleArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jdouble*' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbooleanArray, jsize, jsize, jboolean *)' function_pointer='true' name='SetBooleanArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbooleanArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jboolean*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbyteArray, jsize, jsize, jbyte *)' function_pointer='true' name='SetByteArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbyteArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jbyte*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jcharArray, jsize, jsize, jchar *)' function_pointer='true' name='SetCharArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jcharArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jshortArray, jsize, jsize, jshort *)' function_pointer='true' name='SetShortArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jshortArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jshort*' type64='^s'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jintArray, jsize, jsize, jint *)' function_pointer='true' name='SetIntArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jintArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jint*' type64='^i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jlongArray, jsize, jsize, jlong *)' function_pointer='true' name='SetLongArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jlongArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jlong*' type64='^q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jfloatArray, jsize, jsize, jfloat *)' function_pointer='true' name='SetFloatArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jfloatArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jfloat*' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jdoubleArray, jsize, jsize, jdouble *)' function_pointer='true' name='SetDoubleArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jdoubleArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jdouble*' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, JNINativeMethod *, jint)' function_pointer='true' name='RegisterNatives' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='JNINativeMethod*' type64='^{_JNINativeMethod=**^v}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass)' function_pointer='true' name='UnregisterNatives' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject)' function_pointer='true' name='MonitorEnter' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject)' function_pointer='true' name='MonitorExit' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, JavaVM **)' function_pointer='true' name='GetJavaVM' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JavaVM**' type64='^^^{JNIInvokeInterface_}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, jsize, jsize, jchar *)' function_pointer='true' name='GetStringRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, jsize, jsize, char *)' function_pointer='true' name='GetStringUTFRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void *(*)(JNIEnv *, jarray, jboolean *)' function_pointer='true' name='GetPrimitiveArrayCritical' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jarray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jarray, void *, jint)' function_pointer='true' name='ReleasePrimitiveArrayCritical' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jarray' type64='^{_jobject=}'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field const='true' declared_type64='jchar *(*)(JNIEnv *, jstring, jboolean *)' function_pointer='true' name='GetStringCritical' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval const='true' declared_type64='jchar*' type64='^S'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, jchar *)' function_pointer='true' name='ReleaseStringCritical' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jweak (*)(JNIEnv *, jobject)' function_pointer='true' name='NewWeakGlobalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jweak' type64='^{_jobject=}'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jweak)' function_pointer='true' name='DeleteWeakGlobalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jweak' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *)' function_pointer='true' name='ExceptionCheck' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, void *, jlong)' function_pointer='true' name='NewDirectByteBuffer' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='void *(*)(JNIEnv *, jobject)' function_pointer='true' name='GetDirectBufferAddress' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject)' function_pointer='true' name='GetDirectBufferCapacity' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jobjectRefType (*)(JNIEnv *, jobject)' function_pointer='true' name='GetObjectRefType' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobjectRefType' type64='i'/>
</field>
</struct>
<struct name='JNINativeMethod' type64='{_JNINativeMethod=&quot;name&quot;*&quot;signature&quot;*&quot;fnPtr&quot;^v}'>
<field declared_type64='char*' name='name' type64='*'/>
<field declared_type64='char*' name='signature' type64='*'/>
<field declared_type64='void*' name='fnPtr' type64='^v'/>
</struct>
<struct name='JavaVM' type64='{JNIInvokeInterface_=&quot;reserved0&quot;^v&quot;reserved1&quot;^v&quot;reserved2&quot;^v&quot;DestroyJavaVM&quot;^?&quot;AttachCurrentThread&quot;^?&quot;DetachCurrentThread&quot;^?&quot;GetEnv&quot;^?&quot;AttachCurrentThreadAsDaemon&quot;^?}'>
<field declared_type64='void*' name='reserved0' type64='^v'/>
<field declared_type64='void*' name='reserved1' type64='^v'/>
<field declared_type64='void*' name='reserved2' type64='^v'/>
<field declared_type64='jint (*)(JavaVM *)' function_pointer='true' name='DestroyJavaVM' type64='^?'>
<arg declared_type64='JavaVM*' type64='^^{JNIInvokeInterface_}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JavaVM *, void **, void *)' function_pointer='true' name='AttachCurrentThread' type64='^?'>
<arg declared_type64='JavaVM*' type64='^^{JNIInvokeInterface_}'/>
<arg declared_type64='void**' type64='^^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JavaVM *)' function_pointer='true' name='DetachCurrentThread' type64='^?'>
<arg declared_type64='JavaVM*' type64='^^{JNIInvokeInterface_}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JavaVM *, void **, jint)' function_pointer='true' name='GetEnv' type64='^?'>
<arg declared_type64='JavaVM*' type64='^^{JNIInvokeInterface_}'/>
<arg declared_type64='void**' type64='^^v'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JavaVM *, void **, void *)' function_pointer='true' name='AttachCurrentThreadAsDaemon' type64='^?'>
<arg declared_type64='JavaVM*' type64='^^{JNIInvokeInterface_}'/>
<arg declared_type64='void**' type64='^^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jint' type64='i'/>
</field>
</struct>
<struct name='JavaVMAttachArgs' type64='{JavaVMAttachArgs=&quot;version&quot;i&quot;name&quot;*&quot;group&quot;^{_jobject}}'>
<field declared_type64='jint' name='version' type64='i'/>
<field declared_type64='char*' name='name' type64='*'/>
<field declared_type64='jobject' name='group' type64='^{_jobject=}'/>
</struct>
<struct name='JavaVMInitArgs' type64='{JavaVMInitArgs=&quot;version&quot;i&quot;nOptions&quot;i&quot;options&quot;^{JavaVMOption}&quot;ignoreUnrecognized&quot;C}'>
<field declared_type64='jint' name='version' type64='i'/>
<field declared_type64='jint' name='nOptions' type64='i'/>
<field declared_type64='JavaVMOption*' name='options' type64='^{JavaVMOption=*^v}'/>
<field declared_type64='jboolean' name='ignoreUnrecognized' type64='C'/>
</struct>
<struct name='JavaVMOption' type64='{JavaVMOption=&quot;optionString&quot;*&quot;extraInfo&quot;^v}'>
<field declared_type64='char*' name='optionString' type64='*'/>
<field declared_type64='void*' name='extraInfo' type64='^v'/>
</struct>
<struct name='JavaVM_' type64='{JavaVM_=&quot;functions&quot;^{JNIInvokeInterface_}}'>
<field const='true' declared_type64='struct JNIInvokeInterface_*' name='functions' type64='^{JNIInvokeInterface_=^v^v^v^?^?^?^?^?}'/>
</struct>
<struct name='jawt' type64='{jawt=&quot;version&quot;i&quot;GetDrawingSurface&quot;^?&quot;FreeDrawingSurface&quot;^?&quot;Lock&quot;^?&quot;Unlock&quot;^?&quot;GetComponent&quot;^?}'>
<field declared_type64='jint' name='version' type64='i'/>
<field declared_type64='JAWT_DrawingSurface *(*)(JNIEnv *, jobject)' function_pointer='true' name='GetDrawingSurface' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='JAWT_DrawingSurface*' type64='^{jawt_DrawingSurface=^^{JNINativeInterface_}^{_jobject}^?^?^?^?}'/>
</field>
<field declared_type64='void (*)(JAWT_DrawingSurface *)' function_pointer='true' name='FreeDrawingSurface' type64='^?'>
<arg declared_type64='JAWT_DrawingSurface*' type64='^{jawt_DrawingSurface=^^{JNINativeInterface_}^{_jobject}^?^?^?^?}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *)' function_pointer='true' name='Lock' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *)' function_pointer='true' name='Unlock' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, void *)' function_pointer='true' name='GetComponent' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
</struct>
<struct name='jawt_DrawingSurface' type64='{jawt_DrawingSurface=&quot;env&quot;^^{JNINativeInterface_}&quot;target&quot;^{_jobject}&quot;Lock&quot;^?&quot;GetDrawingSurfaceInfo&quot;^?&quot;FreeDrawingSurfaceInfo&quot;^?&quot;Unlock&quot;^?}'>
<field declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<field declared_type64='jobject' name='target' type64='^{_jobject=}'/>
<field declared_type64='jint (*)(struct jawt_DrawingSurface *)' function_pointer='true' name='Lock' type64='^?'>
<arg declared_type64='struct jawt_DrawingSurface*' type64='^{jawt_DrawingSurface=^^{JNINativeInterface_}^{_jobject}^?^?^?^?}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='JAWT_DrawingSurfaceInfo *(*)(struct jawt_DrawingSurface *)' function_pointer='true' name='GetDrawingSurfaceInfo' type64='^?'>
<arg declared_type64='struct jawt_DrawingSurface*' type64='^{jawt_DrawingSurface=^^{JNINativeInterface_}^{_jobject}^?^?^?^?}'/>
<retval declared_type64='JAWT_DrawingSurfaceInfo*' type64='^{jawt_DrawingSurfaceInfo=^v^{jawt_DrawingSurface}{jawt_Rectangle=iiii}i^{jawt_Rectangle}}'/>
</field>
<field declared_type64='void (*)(JAWT_DrawingSurfaceInfo *)' function_pointer='true' name='FreeDrawingSurfaceInfo' type64='^?'>
<arg declared_type64='JAWT_DrawingSurfaceInfo*' type64='^{jawt_DrawingSurfaceInfo=^v^{jawt_DrawingSurface}{jawt_Rectangle=iiii}i^{jawt_Rectangle}}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(struct jawt_DrawingSurface *)' function_pointer='true' name='Unlock' type64='^?'>
<arg declared_type64='struct jawt_DrawingSurface*' type64='^{jawt_DrawingSurface=^^{JNINativeInterface_}^{_jobject}^?^?^?^?}'/>
<retval declared_type64='void' type64='v'/>
</field>
</struct>
<struct name='jawt_DrawingSurfaceInfo' type64='{jawt_DrawingSurfaceInfo=&quot;platformInfo&quot;^v&quot;ds&quot;^{jawt_DrawingSurface}&quot;bounds&quot;{jawt_Rectangle=&quot;x&quot;i&quot;y&quot;i&quot;width&quot;i&quot;height&quot;i}&quot;clipSize&quot;i&quot;clip&quot;^{jawt_Rectangle}}'>
<field declared_type64='void*' name='platformInfo' type64='^v'/>
<field declared_type64='struct jawt_DrawingSurface*' name='ds' type64='^{jawt_DrawingSurface=^^{JNINativeInterface_}^{_jobject}^?^?^?^?}'/>
<field declared_type64='JAWT_Rectangle' name='bounds' type64='{jawt_Rectangle=&quot;x&quot;i&quot;y&quot;i&quot;width&quot;i&quot;height&quot;i}'/>
<field declared_type64='jint' name='clipSize' type64='i'/>
<field declared_type64='JAWT_Rectangle*' name='clip' type64='^{jawt_Rectangle=iiii}'/>
</struct>
<struct name='jawt_Rectangle' type64='{jawt_Rectangle=&quot;x&quot;i&quot;y&quot;i&quot;width&quot;i&quot;height&quot;i}'>
<field declared_type64='jint' name='x' type64='i'/>
<field declared_type64='jint' name='y' type64='i'/>
<field declared_type64='jint' name='width' type64='i'/>
<field declared_type64='jint' name='height' type64='i'/>
</struct>
<struct name='jdwpCmdPacket' type64='{_jdwpCmdPacket=&quot;len&quot;i&quot;id&quot;i&quot;flags&quot;c&quot;cmdSet&quot;c&quot;cmd&quot;c&quot;data&quot;*}'>
<field declared_type64='jint' name='len' type64='i'/>
<field declared_type64='jint' name='id' type64='i'/>
<field declared_type64='jbyte' name='flags' type64='c'/>
<field declared_type64='jbyte' name='cmdSet' type64='c'/>
<field declared_type64='jbyte' name='cmd' type64='c'/>
<field declared_type64='jbyte*' name='data' type64='*'/>
</struct>
<struct name='jdwpPacket' type64='{_jdwpPacket=&quot;type&quot;(?=&quot;cmd&quot;{?=&quot;len&quot;i&quot;id&quot;i&quot;flags&quot;c&quot;cmdSet&quot;c&quot;cmd&quot;c&quot;data&quot;*}&quot;reply&quot;{?=&quot;len&quot;i&quot;id&quot;i&quot;flags&quot;c&quot;errorCode&quot;s&quot;data&quot;*})}'>
<field declared_type64='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.12.sdk/System/Library/Frameworks/JavaVM.framework/Headers/jdwpTransport.h:103:5)' name='type' type64='(?=&quot;cmd&quot;{?=&quot;len&quot;i&quot;id&quot;i&quot;flags&quot;c&quot;cmdSet&quot;c&quot;cmd&quot;c&quot;data&quot;*}&quot;reply&quot;{?=&quot;len&quot;i&quot;id&quot;i&quot;flags&quot;c&quot;errorCode&quot;s&quot;data&quot;*})'/>
</struct>
<struct name='jdwpReplyPacket' type64='{_jdwpReplyPacket=&quot;len&quot;i&quot;id&quot;i&quot;flags&quot;c&quot;errorCode&quot;s&quot;data&quot;*}'>
<field declared_type64='jint' name='len' type64='i'/>
<field declared_type64='jint' name='id' type64='i'/>
<field declared_type64='jbyte' name='flags' type64='c'/>
<field declared_type64='jshort' name='errorCode' type64='s'/>
<field declared_type64='jbyte*' name='data' type64='*'/>
</struct>
<struct name='jdwpTransportCallback' type64='{jdwpTransportCallback=&quot;alloc&quot;^?&quot;free&quot;^?}'>
<field declared_type64='void *(*)(jint)' function_pointer='true' name='alloc' type64='^?'>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void (*)(void *)' function_pointer='true' name='free' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
</struct>
<struct name='jdwpTransportEnv' type64='{jdwpTransportNativeInterface_=&quot;reserved1&quot;^v&quot;GetCapabilities&quot;^?&quot;Attach&quot;^?&quot;StartListening&quot;^?&quot;StopListening&quot;^?&quot;Accept&quot;^?&quot;IsOpen&quot;^?&quot;Close&quot;^?&quot;ReadPacket&quot;^?&quot;WritePacket&quot;^?&quot;GetLastError&quot;^?}'>
<field declared_type64='void*' name='reserved1' type64='^v'/>
<field declared_type64='jdwpTransportError (*)(jdwpTransportEnv *, JDWPTransportCapabilities *)' function_pointer='true' name='GetCapabilities' type64='^?'>
<arg declared_type64='jdwpTransportEnv*' type64='^^{jdwpTransportNativeInterface_}'/>
<arg declared_type64='JDWPTransportCapabilities*' type64='^{_JDWPTransportCapabilities=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1}'/>
<retval declared_type64='jdwpTransportError' type64='i'/>
</field>
<field declared_type64='jdwpTransportError (*)(jdwpTransportEnv *, char *, jlong, jlong)' function_pointer='true' name='Attach' type64='^?'>
<arg declared_type64='jdwpTransportEnv*' type64='^^{jdwpTransportNativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jdwpTransportError' type64='i'/>
</field>
<field declared_type64='jdwpTransportError (*)(jdwpTransportEnv *, char *, char **)' function_pointer='true' name='StartListening' type64='^?'>
<arg declared_type64='jdwpTransportEnv*' type64='^^{jdwpTransportNativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jdwpTransportError' type64='i'/>
</field>
<field declared_type64='jdwpTransportError (*)(jdwpTransportEnv *)' function_pointer='true' name='StopListening' type64='^?'>
<arg declared_type64='jdwpTransportEnv*' type64='^^{jdwpTransportNativeInterface_}'/>
<retval declared_type64='jdwpTransportError' type64='i'/>
</field>
<field declared_type64='jdwpTransportError (*)(jdwpTransportEnv *, jlong, jlong)' function_pointer='true' name='Accept' type64='^?'>
<arg declared_type64='jdwpTransportEnv*' type64='^^{jdwpTransportNativeInterface_}'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jdwpTransportError' type64='i'/>
</field>
<field declared_type64='jboolean (*)(jdwpTransportEnv *)' function_pointer='true' name='IsOpen' type64='^?'>
<arg declared_type64='jdwpTransportEnv*' type64='^^{jdwpTransportNativeInterface_}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jdwpTransportError (*)(jdwpTransportEnv *)' function_pointer='true' name='Close' type64='^?'>
<arg declared_type64='jdwpTransportEnv*' type64='^^{jdwpTransportNativeInterface_}'/>
<retval declared_type64='jdwpTransportError' type64='i'/>
</field>
<field declared_type64='jdwpTransportError (*)(jdwpTransportEnv *, jdwpPacket *)' function_pointer='true' name='ReadPacket' type64='^?'>
<arg declared_type64='jdwpTransportEnv*' type64='^^{jdwpTransportNativeInterface_}'/>
<arg declared_type64='jdwpPacket*' type64='^{_jdwpPacket=(?={?=iiccc*}{?=iics*})}'/>
<retval declared_type64='jdwpTransportError' type64='i'/>
</field>
<field declared_type64='jdwpTransportError (*)(jdwpTransportEnv *, jdwpPacket *)' function_pointer='true' name='WritePacket' type64='^?'>
<arg declared_type64='jdwpTransportEnv*' type64='^^{jdwpTransportNativeInterface_}'/>
<arg const='true' declared_type64='jdwpPacket*' type64='^{_jdwpPacket=(?={?=iiccc*}{?=iics*})}'/>
<retval declared_type64='jdwpTransportError' type64='i'/>
</field>
<field declared_type64='jdwpTransportError (*)(jdwpTransportEnv *, char **)' function_pointer='true' name='GetLastError' type64='^?'>
<arg declared_type64='jdwpTransportEnv*' type64='^^{jdwpTransportNativeInterface_}'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jdwpTransportError' type64='i'/>
</field>
</struct>
<struct name='jdwpTransportNativeInterface_' type64='{jdwpTransportNativeInterface_=&quot;reserved1&quot;^v&quot;GetCapabilities&quot;^?&quot;Attach&quot;^?&quot;StartListening&quot;^?&quot;StopListening&quot;^?&quot;Accept&quot;^?&quot;IsOpen&quot;^?&quot;Close&quot;^?&quot;ReadPacket&quot;^?&quot;WritePacket&quot;^?&quot;GetLastError&quot;^?}'>
<field declared_type64='void*' name='reserved1' type64='^v'/>
<field declared_type64='jdwpTransportError (*)(jdwpTransportEnv *, JDWPTransportCapabilities *)' function_pointer='true' name='GetCapabilities' type64='^?'>
<arg declared_type64='jdwpTransportEnv*' type64='^^{jdwpTransportNativeInterface_}'/>
<arg declared_type64='JDWPTransportCapabilities*' type64='^{_JDWPTransportCapabilities=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1}'/>
<retval declared_type64='jdwpTransportError' type64='i'/>
</field>
<field declared_type64='jdwpTransportError (*)(jdwpTransportEnv *, char *, jlong, jlong)' function_pointer='true' name='Attach' type64='^?'>
<arg declared_type64='jdwpTransportEnv*' type64='^^{jdwpTransportNativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jdwpTransportError' type64='i'/>
</field>
<field declared_type64='jdwpTransportError (*)(jdwpTransportEnv *, char *, char **)' function_pointer='true' name='StartListening' type64='^?'>
<arg declared_type64='jdwpTransportEnv*' type64='^^{jdwpTransportNativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jdwpTransportError' type64='i'/>
</field>
<field declared_type64='jdwpTransportError (*)(jdwpTransportEnv *)' function_pointer='true' name='StopListening' type64='^?'>
<arg declared_type64='jdwpTransportEnv*' type64='^^{jdwpTransportNativeInterface_}'/>
<retval declared_type64='jdwpTransportError' type64='i'/>
</field>
<field declared_type64='jdwpTransportError (*)(jdwpTransportEnv *, jlong, jlong)' function_pointer='true' name='Accept' type64='^?'>
<arg declared_type64='jdwpTransportEnv*' type64='^^{jdwpTransportNativeInterface_}'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jdwpTransportError' type64='i'/>
</field>
<field declared_type64='jboolean (*)(jdwpTransportEnv *)' function_pointer='true' name='IsOpen' type64='^?'>
<arg declared_type64='jdwpTransportEnv*' type64='^^{jdwpTransportNativeInterface_}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jdwpTransportError (*)(jdwpTransportEnv *)' function_pointer='true' name='Close' type64='^?'>
<arg declared_type64='jdwpTransportEnv*' type64='^^{jdwpTransportNativeInterface_}'/>
<retval declared_type64='jdwpTransportError' type64='i'/>
</field>
<field declared_type64='jdwpTransportError (*)(jdwpTransportEnv *, jdwpPacket *)' function_pointer='true' name='ReadPacket' type64='^?'>
<arg declared_type64='jdwpTransportEnv*' type64='^^{jdwpTransportNativeInterface_}'/>
<arg declared_type64='jdwpPacket*' type64='^{_jdwpPacket=(?={?=iiccc*}{?=iics*})}'/>
<retval declared_type64='jdwpTransportError' type64='i'/>
</field>
<field declared_type64='jdwpTransportError (*)(jdwpTransportEnv *, jdwpPacket *)' function_pointer='true' name='WritePacket' type64='^?'>
<arg declared_type64='jdwpTransportEnv*' type64='^^{jdwpTransportNativeInterface_}'/>
<arg const='true' declared_type64='jdwpPacket*' type64='^{_jdwpPacket=(?={?=iiccc*}{?=iics*})}'/>
<retval declared_type64='jdwpTransportError' type64='i'/>
</field>
<field declared_type64='jdwpTransportError (*)(jdwpTransportEnv *, char **)' function_pointer='true' name='GetLastError' type64='^?'>
<arg declared_type64='jdwpTransportEnv*' type64='^^{jdwpTransportNativeInterface_}'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jdwpTransportError' type64='i'/>
</field>
</struct>
<struct name='jniNativeInterface' type64='{JNINativeInterface_=&quot;reserved0&quot;^v&quot;reserved1&quot;^v&quot;reserved2&quot;^v&quot;reserved3&quot;^v&quot;GetVersion&quot;^?&quot;DefineClass&quot;^?&quot;FindClass&quot;^?&quot;FromReflectedMethod&quot;^?&quot;FromReflectedField&quot;^?&quot;ToReflectedMethod&quot;^?&quot;GetSuperclass&quot;^?&quot;IsAssignableFrom&quot;^?&quot;ToReflectedField&quot;^?&quot;Throw&quot;^?&quot;ThrowNew&quot;^?&quot;ExceptionOccurred&quot;^?&quot;ExceptionDescribe&quot;^?&quot;ExceptionClear&quot;^?&quot;FatalError&quot;^?&quot;PushLocalFrame&quot;^?&quot;PopLocalFrame&quot;^?&quot;NewGlobalRef&quot;^?&quot;DeleteGlobalRef&quot;^?&quot;DeleteLocalRef&quot;^?&quot;IsSameObject&quot;^?&quot;NewLocalRef&quot;^?&quot;EnsureLocalCapacity&quot;^?&quot;AllocObject&quot;^?&quot;NewObject&quot;^?&quot;NewObjectV&quot;^?&quot;NewObjectA&quot;^?&quot;GetObjectClass&quot;^?&quot;IsInstanceOf&quot;^?&quot;GetMethodID&quot;^?&quot;CallObjectMethod&quot;^?&quot;CallObjectMethodV&quot;^?&quot;CallObjectMethodA&quot;^?&quot;CallBooleanMethod&quot;^?&quot;CallBooleanMethodV&quot;^?&quot;CallBooleanMethodA&quot;^?&quot;CallByteMethod&quot;^?&quot;CallByteMethodV&quot;^?&quot;CallByteMethodA&quot;^?&quot;CallCharMethod&quot;^?&quot;CallCharMethodV&quot;^?&quot;CallCharMethodA&quot;^?&quot;CallShortMethod&quot;^?&quot;CallShortMethodV&quot;^?&quot;CallShortMethodA&quot;^?&quot;CallIntMethod&quot;^?&quot;CallIntMethodV&quot;^?&quot;CallIntMethodA&quot;^?&quot;CallLongMethod&quot;^?&quot;CallLongMethodV&quot;^?&quot;CallLongMethodA&quot;^?&quot;CallFloatMethod&quot;^?&quot;CallFloatMethodV&quot;^?&quot;CallFloatMethodA&quot;^?&quot;CallDoubleMethod&quot;^?&quot;CallDoubleMethodV&quot;^?&quot;CallDoubleMethodA&quot;^?&quot;CallVoidMethod&quot;^?&quot;CallVoidMethodV&quot;^?&quot;CallVoidMethodA&quot;^?&quot;CallNonvirtualObjectMethod&quot;^?&quot;CallNonvirtualObjectMethodV&quot;^?&quot;CallNonvirtualObjectMethodA&quot;^?&quot;CallNonvirtualBooleanMethod&quot;^?&quot;CallNonvirtualBooleanMethodV&quot;^?&quot;CallNonvirtualBooleanMethodA&quot;^?&quot;CallNonvirtualByteMethod&quot;^?&quot;CallNonvirtualByteMethodV&quot;^?&quot;CallNonvirtualByteMethodA&quot;^?&quot;CallNonvirtualCharMethod&quot;^?&quot;CallNonvirtualCharMethodV&quot;^?&quot;CallNonvirtualCharMethodA&quot;^?&quot;CallNonvirtualShortMethod&quot;^?&quot;CallNonvirtualShortMethodV&quot;^?&quot;CallNonvirtualShortMethodA&quot;^?&quot;CallNonvirtualIntMethod&quot;^?&quot;CallNonvirtualIntMethodV&quot;^?&quot;CallNonvirtualIntMethodA&quot;^?&quot;CallNonvirtualLongMethod&quot;^?&quot;CallNonvirtualLongMethodV&quot;^?&quot;CallNonvirtualLongMethodA&quot;^?&quot;CallNonvirtualFloatMethod&quot;^?&quot;CallNonvirtualFloatMethodV&quot;^?&quot;CallNonvirtualFloatMethodA&quot;^?&quot;CallNonvirtualDoubleMethod&quot;^?&quot;CallNonvirtualDoubleMethodV&quot;^?&quot;CallNonvirtualDoubleMethodA&quot;^?&quot;CallNonvirtualVoidMethod&quot;^?&quot;CallNonvirtualVoidMethodV&quot;^?&quot;CallNonvirtualVoidMethodA&quot;^?&quot;GetFieldID&quot;^?&quot;GetObjectField&quot;^?&quot;GetBooleanField&quot;^?&quot;GetByteField&quot;^?&quot;GetCharField&quot;^?&quot;GetShortField&quot;^?&quot;GetIntField&quot;^?&quot;GetLongField&quot;^?&quot;GetFloatField&quot;^?&quot;GetDoubleField&quot;^?&quot;SetObjectField&quot;^?&quot;SetBooleanField&quot;^?&quot;SetByteField&quot;^?&quot;SetCharField&quot;^?&quot;SetShortField&quot;^?&quot;SetIntField&quot;^?&quot;SetLongField&quot;^?&quot;SetFloatField&quot;^?&quot;SetDoubleField&quot;^?&quot;GetStaticMethodID&quot;^?&quot;CallStaticObjectMethod&quot;^?&quot;CallStaticObjectMethodV&quot;^?&quot;CallStaticObjectMethodA&quot;^?&quot;CallStaticBooleanMethod&quot;^?&quot;CallStaticBooleanMethodV&quot;^?&quot;CallStaticBooleanMethodA&quot;^?&quot;CallStaticByteMethod&quot;^?&quot;CallStaticByteMethodV&quot;^?&quot;CallStaticByteMethodA&quot;^?&quot;CallStaticCharMethod&quot;^?&quot;CallStaticCharMethodV&quot;^?&quot;CallStaticCharMethodA&quot;^?&quot;CallStaticShortMethod&quot;^?&quot;CallStaticShortMethodV&quot;^?&quot;CallStaticShortMethodA&quot;^?&quot;CallStaticIntMethod&quot;^?&quot;CallStaticIntMethodV&quot;^?&quot;CallStaticIntMethodA&quot;^?&quot;CallStaticLongMethod&quot;^?&quot;CallStaticLongMethodV&quot;^?&quot;CallStaticLongMethodA&quot;^?&quot;CallStaticFloatMethod&quot;^?&quot;CallStaticFloatMethodV&quot;^?&quot;CallStaticFloatMethodA&quot;^?&quot;CallStaticDoubleMethod&quot;^?&quot;CallStaticDoubleMethodV&quot;^?&quot;CallStaticDoubleMethodA&quot;^?&quot;CallStaticVoidMethod&quot;^?&quot;CallStaticVoidMethodV&quot;^?&quot;CallStaticVoidMethodA&quot;^?&quot;GetStaticFieldID&quot;^?&quot;GetStaticObjectField&quot;^?&quot;GetStaticBooleanField&quot;^?&quot;GetStaticByteField&quot;^?&quot;GetStaticCharField&quot;^?&quot;GetStaticShortField&quot;^?&quot;GetStaticIntField&quot;^?&quot;GetStaticLongField&quot;^?&quot;GetStaticFloatField&quot;^?&quot;GetStaticDoubleField&quot;^?&quot;SetStaticObjectField&quot;^?&quot;SetStaticBooleanField&quot;^?&quot;SetStaticByteField&quot;^?&quot;SetStaticCharField&quot;^?&quot;SetStaticShortField&quot;^?&quot;SetStaticIntField&quot;^?&quot;SetStaticLongField&quot;^?&quot;SetStaticFloatField&quot;^?&quot;SetStaticDoubleField&quot;^?&quot;NewString&quot;^?&quot;GetStringLength&quot;^?&quot;GetStringChars&quot;^?&quot;ReleaseStringChars&quot;^?&quot;NewStringUTF&quot;^?&quot;GetStringUTFLength&quot;^?&quot;GetStringUTFChars&quot;^?&quot;ReleaseStringUTFChars&quot;^?&quot;GetArrayLength&quot;^?&quot;NewObjectArray&quot;^?&quot;GetObjectArrayElement&quot;^?&quot;SetObjectArrayElement&quot;^?&quot;NewBooleanArray&quot;^?&quot;NewByteArray&quot;^?&quot;NewCharArray&quot;^?&quot;NewShortArray&quot;^?&quot;NewIntArray&quot;^?&quot;NewLongArray&quot;^?&quot;NewFloatArray&quot;^?&quot;NewDoubleArray&quot;^?&quot;GetBooleanArrayElements&quot;^?&quot;GetByteArrayElements&quot;^?&quot;GetCharArrayElements&quot;^?&quot;GetShortArrayElements&quot;^?&quot;GetIntArrayElements&quot;^?&quot;GetLongArrayElements&quot;^?&quot;GetFloatArrayElements&quot;^?&quot;GetDoubleArrayElements&quot;^?&quot;ReleaseBooleanArrayElements&quot;^?&quot;ReleaseByteArrayElements&quot;^?&quot;ReleaseCharArrayElements&quot;^?&quot;ReleaseShortArrayElements&quot;^?&quot;ReleaseIntArrayElements&quot;^?&quot;ReleaseLongArrayElements&quot;^?&quot;ReleaseFloatArrayElements&quot;^?&quot;ReleaseDoubleArrayElements&quot;^?&quot;GetBooleanArrayRegion&quot;^?&quot;GetByteArrayRegion&quot;^?&quot;GetCharArrayRegion&quot;^?&quot;GetShortArrayRegion&quot;^?&quot;GetIntArrayRegion&quot;^?&quot;GetLongArrayRegion&quot;^?&quot;GetFloatArrayRegion&quot;^?&quot;GetDoubleArrayRegion&quot;^?&quot;SetBooleanArrayRegion&quot;^?&quot;SetByteArrayRegion&quot;^?&quot;SetCharArrayRegion&quot;^?&quot;SetShortArrayRegion&quot;^?&quot;SetIntArrayRegion&quot;^?&quot;SetLongArrayRegion&quot;^?&quot;SetFloatArrayRegion&quot;^?&quot;SetDoubleArrayRegion&quot;^?&quot;RegisterNatives&quot;^?&quot;UnregisterNatives&quot;^?&quot;MonitorEnter&quot;^?&quot;MonitorExit&quot;^?&quot;GetJavaVM&quot;^?&quot;GetStringRegion&quot;^?&quot;GetStringUTFRegion&quot;^?&quot;GetPrimitiveArrayCritical&quot;^?&quot;ReleasePrimitiveArrayCritical&quot;^?&quot;GetStringCritical&quot;^?&quot;ReleaseStringCritical&quot;^?&quot;NewWeakGlobalRef&quot;^?&quot;DeleteWeakGlobalRef&quot;^?&quot;ExceptionCheck&quot;^?&quot;NewDirectByteBuffer&quot;^?&quot;GetDirectBufferAddress&quot;^?&quot;GetDirectBufferCapacity&quot;^?&quot;GetObjectRefType&quot;^?}'>
<field declared_type64='void*' name='reserved0' type64='^v'/>
<field declared_type64='void*' name='reserved1' type64='^v'/>
<field declared_type64='void*' name='reserved2' type64='^v'/>
<field declared_type64='void*' name='reserved3' type64='^v'/>
<field declared_type64='jint (*)(JNIEnv *)' function_pointer='true' name='GetVersion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jclass (*)(JNIEnv *, char *, jobject, jbyte *, jsize)' function_pointer='true' name='DefineClass' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jbyte*' type64='*'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jclass' type64='^{_jobject=}'/>
</field>
<field declared_type64='jclass (*)(JNIEnv *, char *)' function_pointer='true' name='FindClass' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jclass' type64='^{_jobject=}'/>
</field>
<field declared_type64='jmethodID (*)(JNIEnv *, jobject)' function_pointer='true' name='FromReflectedMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jmethodID' type64='^{_jmethodID=}'/>
</field>
<field declared_type64='jfieldID (*)(JNIEnv *, jobject)' function_pointer='true' name='FromReflectedField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jfieldID' type64='^{_jfieldID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, jboolean)' function_pointer='true' name='ToReflectedMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jclass (*)(JNIEnv *, jclass)' function_pointer='true' name='GetSuperclass' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jclass' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jclass)' function_pointer='true' name='IsAssignableFrom' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jfieldID, jboolean)' function_pointer='true' name='ToReflectedField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jthrowable)' function_pointer='true' name='Throw' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthrowable' type64='^{_jobject=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, char *)' function_pointer='true' name='ThrowNew' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jthrowable (*)(JNIEnv *)' function_pointer='true' name='ExceptionOccurred' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jthrowable' type64='^{_jobject=}'/>
</field>
<field declared_type64='void (*)(JNIEnv *)' function_pointer='true' name='ExceptionDescribe' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *)' function_pointer='true' name='ExceptionClear' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, char *)' function_pointer='true' name='FatalError' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jint)' function_pointer='true' name='PushLocalFrame' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject)' function_pointer='true' name='PopLocalFrame' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject)' function_pointer='true' name='NewGlobalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject)' function_pointer='true' name='DeleteGlobalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject)' function_pointer='true' name='DeleteLocalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jobject)' function_pointer='true' name='IsSameObject' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject)' function_pointer='true' name='NewLocalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jint)' function_pointer='true' name='EnsureLocalCapacity' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass)' function_pointer='true' name='AllocObject' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='NewObject' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='NewObjectV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='NewObjectA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jclass (*)(JNIEnv *, jobject)' function_pointer='true' name='GetObjectClass' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jclass' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jclass)' function_pointer='true' name='IsInstanceOf' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jmethodID (*)(JNIEnv *, jclass, char *, char *)' function_pointer='true' name='GetMethodID' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jmethodID' type64='^{_jmethodID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallObjectMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallObjectMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallObjectMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallBooleanMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallBooleanMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallBooleanMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallByteMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallByteMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallByteMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallCharMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallCharMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallCharMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallShortMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallShortMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallShortMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallIntMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallIntMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallIntMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallLongMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallLongMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallLongMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallFloatMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallFloatMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallFloatMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallDoubleMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallDoubleMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallDoubleMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallVoidMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallVoidMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallVoidMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualObjectMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualObjectMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualObjectMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualBooleanMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualBooleanMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualBooleanMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualByteMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualByteMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualByteMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualCharMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualCharMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualCharMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualShortMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualShortMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualShortMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualIntMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualIntMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualIntMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualLongMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualLongMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualLongMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualFloatMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualFloatMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualFloatMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualDoubleMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualDoubleMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualDoubleMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualVoidMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualVoidMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualVoidMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jfieldID (*)(JNIEnv *, jclass, char *, char *)' function_pointer='true' name='GetFieldID' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jfieldID' type64='^{_jfieldID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetObjectField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetBooleanField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetByteField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetCharField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetShortField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetIntField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetLongField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetFloatField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetDoubleField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jobject)' function_pointer='true' name='SetObjectField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jboolean)' function_pointer='true' name='SetBooleanField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jbyte)' function_pointer='true' name='SetByteField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jbyte' type64='c'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jchar)' function_pointer='true' name='SetCharField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jchar' type64='S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jshort)' function_pointer='true' name='SetShortField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jshort' type64='s'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jint)' function_pointer='true' name='SetIntField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jlong)' function_pointer='true' name='SetLongField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jfloat)' function_pointer='true' name='SetFloatField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jfloat' type64='f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jdouble)' function_pointer='true' name='SetDoubleField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jdouble' type64='d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jmethodID (*)(JNIEnv *, jclass, char *, char *)' function_pointer='true' name='GetStaticMethodID' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jmethodID' type64='^{_jmethodID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticObjectMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticObjectMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticObjectMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticBooleanMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticBooleanMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticBooleanMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticByteMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticByteMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticByteMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticCharMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticCharMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticCharMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticShortMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticShortMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticShortMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticIntMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticIntMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticIntMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticLongMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticLongMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticLongMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticFloatMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticFloatMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticFloatMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticDoubleMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticDoubleMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticDoubleMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticVoidMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticVoidMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticVoidMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jfieldID (*)(JNIEnv *, jclass, char *, char *)' function_pointer='true' name='GetStaticFieldID' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jfieldID' type64='^{_jfieldID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticObjectField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticBooleanField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticByteField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticCharField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticShortField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticIntField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticLongField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticFloatField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticDoubleField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jobject)' function_pointer='true' name='SetStaticObjectField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jboolean)' function_pointer='true' name='SetStaticBooleanField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jbyte)' function_pointer='true' name='SetStaticByteField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jbyte' type64='c'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jchar)' function_pointer='true' name='SetStaticCharField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jchar' type64='S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jshort)' function_pointer='true' name='SetStaticShortField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jshort' type64='s'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jint)' function_pointer='true' name='SetStaticIntField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jlong)' function_pointer='true' name='SetStaticLongField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jfloat)' function_pointer='true' name='SetStaticFloatField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jfloat' type64='f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jdouble)' function_pointer='true' name='SetStaticDoubleField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jdouble' type64='d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jstring (*)(JNIEnv *, jchar *, jsize)' function_pointer='true' name='NewString' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jstring' type64='^{_jobject=}'/>
</field>
<field declared_type64='jsize (*)(JNIEnv *, jstring)' function_pointer='true' name='GetStringLength' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<retval declared_type64='jsize' type64='i'/>
</field>
<field const='true' declared_type64='jchar *(*)(JNIEnv *, jstring, jboolean *)' function_pointer='true' name='GetStringChars' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval const='true' declared_type64='jchar*' type64='^S'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, jchar *)' function_pointer='true' name='ReleaseStringChars' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jstring (*)(JNIEnv *, char *)' function_pointer='true' name='NewStringUTF' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jstring' type64='^{_jobject=}'/>
</field>
<field declared_type64='jsize (*)(JNIEnv *, jstring)' function_pointer='true' name='GetStringUTFLength' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<retval declared_type64='jsize' type64='i'/>
</field>
<field const='true' declared_type64='char *(*)(JNIEnv *, jstring, jboolean *)' function_pointer='true' name='GetStringUTFChars' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval const='true' declared_type64='char*' type64='*'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, char *)' function_pointer='true' name='ReleaseStringUTFChars' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jsize (*)(JNIEnv *, jarray)' function_pointer='true' name='GetArrayLength' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jarray' type64='^{_jobject=}'/>
<retval declared_type64='jsize' type64='i'/>
</field>
<field declared_type64='jobjectArray (*)(JNIEnv *, jsize, jclass, jobject)' function_pointer='true' name='NewObjectArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobjectArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobjectArray, jsize)' function_pointer='true' name='GetObjectArrayElement' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobjectArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobjectArray, jsize, jobject)' function_pointer='true' name='SetObjectArrayElement' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobjectArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jbooleanArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewBooleanArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jbooleanArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jbyteArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewByteArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jbyteArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jcharArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewCharArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jcharArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jshortArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewShortArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jshortArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jintArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewIntArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jintArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jlongArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewLongArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jlongArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jfloatArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewFloatArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jfloatArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jdoubleArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewDoubleArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jdoubleArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean *(*)(JNIEnv *, jbooleanArray, jboolean *)' function_pointer='true' name='GetBooleanArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbooleanArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jboolean*' type64='*'/>
</field>
<field declared_type64='jbyte *(*)(JNIEnv *, jbyteArray, jboolean *)' function_pointer='true' name='GetByteArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbyteArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jbyte*' type64='*'/>
</field>
<field declared_type64='jchar *(*)(JNIEnv *, jcharArray, jboolean *)' function_pointer='true' name='GetCharArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jcharArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jchar*' type64='^S'/>
</field>
<field declared_type64='jshort *(*)(JNIEnv *, jshortArray, jboolean *)' function_pointer='true' name='GetShortArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jshortArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jshort*' type64='^s'/>
</field>
<field declared_type64='jint *(*)(JNIEnv *, jintArray, jboolean *)' function_pointer='true' name='GetIntArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jintArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jint*' type64='^i'/>
</field>
<field declared_type64='jlong *(*)(JNIEnv *, jlongArray, jboolean *)' function_pointer='true' name='GetLongArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jlongArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jlong*' type64='^q'/>
</field>
<field declared_type64='jfloat *(*)(JNIEnv *, jfloatArray, jboolean *)' function_pointer='true' name='GetFloatArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jfloatArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jfloat*' type64='^f'/>
</field>
<field declared_type64='jdouble *(*)(JNIEnv *, jdoubleArray, jboolean *)' function_pointer='true' name='GetDoubleArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jdoubleArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jdouble*' type64='^d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbooleanArray, jboolean *, jint)' function_pointer='true' name='ReleaseBooleanArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbooleanArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbyteArray, jbyte *, jint)' function_pointer='true' name='ReleaseByteArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbyteArray' type64='^{_jobject=}'/>
<arg declared_type64='jbyte*' type64='*'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jcharArray, jchar *, jint)' function_pointer='true' name='ReleaseCharArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jcharArray' type64='^{_jobject=}'/>
<arg declared_type64='jchar*' type64='^S'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jshortArray, jshort *, jint)' function_pointer='true' name='ReleaseShortArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jshortArray' type64='^{_jobject=}'/>
<arg declared_type64='jshort*' type64='^s'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jintArray, jint *, jint)' function_pointer='true' name='ReleaseIntArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jintArray' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jlongArray, jlong *, jint)' function_pointer='true' name='ReleaseLongArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jlongArray' type64='^{_jobject=}'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jfloatArray, jfloat *, jint)' function_pointer='true' name='ReleaseFloatArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jfloatArray' type64='^{_jobject=}'/>
<arg declared_type64='jfloat*' type64='^f'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jdoubleArray, jdouble *, jint)' function_pointer='true' name='ReleaseDoubleArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jdoubleArray' type64='^{_jobject=}'/>
<arg declared_type64='jdouble*' type64='^d'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbooleanArray, jsize, jsize, jboolean *)' function_pointer='true' name='GetBooleanArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbooleanArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbyteArray, jsize, jsize, jbyte *)' function_pointer='true' name='GetByteArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbyteArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jbyte*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jcharArray, jsize, jsize, jchar *)' function_pointer='true' name='GetCharArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jcharArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jshortArray, jsize, jsize, jshort *)' function_pointer='true' name='GetShortArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jshortArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jshort*' type64='^s'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jintArray, jsize, jsize, jint *)' function_pointer='true' name='GetIntArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jintArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jlongArray, jsize, jsize, jlong *)' function_pointer='true' name='GetLongArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jlongArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jfloatArray, jsize, jsize, jfloat *)' function_pointer='true' name='GetFloatArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jfloatArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jfloat*' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jdoubleArray, jsize, jsize, jdouble *)' function_pointer='true' name='GetDoubleArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jdoubleArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jdouble*' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbooleanArray, jsize, jsize, jboolean *)' function_pointer='true' name='SetBooleanArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbooleanArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jboolean*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbyteArray, jsize, jsize, jbyte *)' function_pointer='true' name='SetByteArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbyteArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jbyte*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jcharArray, jsize, jsize, jchar *)' function_pointer='true' name='SetCharArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jcharArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jshortArray, jsize, jsize, jshort *)' function_pointer='true' name='SetShortArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jshortArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jshort*' type64='^s'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jintArray, jsize, jsize, jint *)' function_pointer='true' name='SetIntArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jintArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jint*' type64='^i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jlongArray, jsize, jsize, jlong *)' function_pointer='true' name='SetLongArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jlongArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jlong*' type64='^q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jfloatArray, jsize, jsize, jfloat *)' function_pointer='true' name='SetFloatArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jfloatArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jfloat*' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jdoubleArray, jsize, jsize, jdouble *)' function_pointer='true' name='SetDoubleArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jdoubleArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jdouble*' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, JNINativeMethod *, jint)' function_pointer='true' name='RegisterNatives' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='JNINativeMethod*' type64='^{_JNINativeMethod=**^v}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass)' function_pointer='true' name='UnregisterNatives' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject)' function_pointer='true' name='MonitorEnter' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject)' function_pointer='true' name='MonitorExit' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, JavaVM **)' function_pointer='true' name='GetJavaVM' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JavaVM**' type64='^^^{JNIInvokeInterface_}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, jsize, jsize, jchar *)' function_pointer='true' name='GetStringRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, jsize, jsize, char *)' function_pointer='true' name='GetStringUTFRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void *(*)(JNIEnv *, jarray, jboolean *)' function_pointer='true' name='GetPrimitiveArrayCritical' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jarray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jarray, void *, jint)' function_pointer='true' name='ReleasePrimitiveArrayCritical' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jarray' type64='^{_jobject=}'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field const='true' declared_type64='jchar *(*)(JNIEnv *, jstring, jboolean *)' function_pointer='true' name='GetStringCritical' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval const='true' declared_type64='jchar*' type64='^S'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, jchar *)' function_pointer='true' name='ReleaseStringCritical' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jweak (*)(JNIEnv *, jobject)' function_pointer='true' name='NewWeakGlobalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jweak' type64='^{_jobject=}'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jweak)' function_pointer='true' name='DeleteWeakGlobalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jweak' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *)' function_pointer='true' name='ExceptionCheck' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, void *, jlong)' function_pointer='true' name='NewDirectByteBuffer' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='void *(*)(JNIEnv *, jobject)' function_pointer='true' name='GetDirectBufferAddress' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject)' function_pointer='true' name='GetDirectBufferCapacity' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jobjectRefType (*)(JNIEnv *, jobject)' function_pointer='true' name='GetObjectRefType' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobjectRefType' type64='i'/>
</field>
</struct>
<struct name='jvmtiAddrLocationMap' type64='{_jvmtiAddrLocationMap=&quot;start_address&quot;^v&quot;location&quot;q}'>
<field const='true' declared_type64='void*' name='start_address' type64='^v'/>
<field declared_type64='jlocation' name='location' type64='q'/>
</struct>
<struct name='jvmtiCapabilities' type64='{_jvmtiCapabilities=&quot;can_tag_objects&quot;b1&quot;can_generate_field_modification_events&quot;b1&quot;can_generate_field_access_events&quot;b1&quot;can_get_bytecodes&quot;b1&quot;can_get_synthetic_attribute&quot;b1&quot;can_get_owned_monitor_info&quot;b1&quot;can_get_current_contended_monitor&quot;b1&quot;can_get_monitor_info&quot;b1&quot;can_pop_frame&quot;b1&quot;can_redefine_classes&quot;b1&quot;can_signal_thread&quot;b1&quot;can_get_source_file_name&quot;b1&quot;can_get_line_numbers&quot;b1&quot;can_get_source_debug_extension&quot;b1&quot;can_access_local_variables&quot;b1&quot;can_maintain_original_method_order&quot;b1&quot;can_generate_single_step_events&quot;b1&quot;can_generate_exception_events&quot;b1&quot;can_generate_frame_pop_events&quot;b1&quot;can_generate_breakpoint_events&quot;b1&quot;can_suspend&quot;b1&quot;can_redefine_any_class&quot;b1&quot;can_get_current_thread_cpu_time&quot;b1&quot;can_get_thread_cpu_time&quot;b1&quot;can_generate_method_entry_events&quot;b1&quot;can_generate_method_exit_events&quot;b1&quot;can_generate_all_class_hook_events&quot;b1&quot;can_generate_compiled_method_load_events&quot;b1&quot;can_generate_monitor_events&quot;b1&quot;can_generate_vm_object_alloc_events&quot;b1&quot;can_generate_native_method_bind_events&quot;b1&quot;can_generate_garbage_collection_events&quot;b1&quot;can_generate_object_free_events&quot;b1&quot;can_force_early_return&quot;b1&quot;can_get_owned_monitor_stack_depth_info&quot;b1&quot;can_get_constant_pool&quot;b1&quot;can_set_native_method_prefix&quot;b1&quot;can_retransform_classes&quot;b1&quot;can_retransform_any_class&quot;b1&quot;can_generate_resource_exhaustion_heap_events&quot;b1&quot;can_generate_resource_exhaustion_threads_events&quot;b1&quot;&quot;b7&quot;&quot;b16&quot;&quot;b16&quot;&quot;b16&quot;&quot;b16&quot;&quot;b16}'>
<field declared_type64='unsigned int' name='can_tag_objects' type64='b1'/>
<field declared_type64='unsigned int' name='can_generate_field_modification_events' type64='b1'/>
<field declared_type64='unsigned int' name='can_generate_field_access_events' type64='b1'/>
<field declared_type64='unsigned int' name='can_get_bytecodes' type64='b1'/>
<field declared_type64='unsigned int' name='can_get_synthetic_attribute' type64='b1'/>
<field declared_type64='unsigned int' name='can_get_owned_monitor_info' type64='b1'/>
<field declared_type64='unsigned int' name='can_get_current_contended_monitor' type64='b1'/>
<field declared_type64='unsigned int' name='can_get_monitor_info' type64='b1'/>
<field declared_type64='unsigned int' name='can_pop_frame' type64='b1'/>
<field declared_type64='unsigned int' name='can_redefine_classes' type64='b1'/>
<field declared_type64='unsigned int' name='can_signal_thread' type64='b1'/>
<field declared_type64='unsigned int' name='can_get_source_file_name' type64='b1'/>
<field declared_type64='unsigned int' name='can_get_line_numbers' type64='b1'/>
<field declared_type64='unsigned int' name='can_get_source_debug_extension' type64='b1'/>
<field declared_type64='unsigned int' name='can_access_local_variables' type64='b1'/>
<field declared_type64='unsigned int' name='can_maintain_original_method_order' type64='b1'/>
<field declared_type64='unsigned int' name='can_generate_single_step_events' type64='b1'/>
<field declared_type64='unsigned int' name='can_generate_exception_events' type64='b1'/>
<field declared_type64='unsigned int' name='can_generate_frame_pop_events' type64='b1'/>
<field declared_type64='unsigned int' name='can_generate_breakpoint_events' type64='b1'/>
<field declared_type64='unsigned int' name='can_suspend' type64='b1'/>
<field declared_type64='unsigned int' name='can_redefine_any_class' type64='b1'/>
<field declared_type64='unsigned int' name='can_get_current_thread_cpu_time' type64='b1'/>
<field declared_type64='unsigned int' name='can_get_thread_cpu_time' type64='b1'/>
<field declared_type64='unsigned int' name='can_generate_method_entry_events' type64='b1'/>
<field declared_type64='unsigned int' name='can_generate_method_exit_events' type64='b1'/>
<field declared_type64='unsigned int' name='can_generate_all_class_hook_events' type64='b1'/>
<field declared_type64='unsigned int' name='can_generate_compiled_method_load_events' type64='b1'/>
<field declared_type64='unsigned int' name='can_generate_monitor_events' type64='b1'/>
<field declared_type64='unsigned int' name='can_generate_vm_object_alloc_events' type64='b1'/>
<field declared_type64='unsigned int' name='can_generate_native_method_bind_events' type64='b1'/>
<field declared_type64='unsigned int' name='can_generate_garbage_collection_events' type64='b1'/>
<field declared_type64='unsigned int' name='can_generate_object_free_events' type64='b1'/>
<field declared_type64='unsigned int' name='can_force_early_return' type64='b1'/>
<field declared_type64='unsigned int' name='can_get_owned_monitor_stack_depth_info' type64='b1'/>
<field declared_type64='unsigned int' name='can_get_constant_pool' type64='b1'/>
<field declared_type64='unsigned int' name='can_set_native_method_prefix' type64='b1'/>
<field declared_type64='unsigned int' name='can_retransform_classes' type64='b1'/>
<field declared_type64='unsigned int' name='can_retransform_any_class' type64='b1'/>
<field declared_type64='unsigned int' name='can_generate_resource_exhaustion_heap_events' type64='b1'/>
<field declared_type64='unsigned int' name='can_generate_resource_exhaustion_threads_events' type64='b1'/>
<field declared_type64='unsigned int' type64='b7'/>
<field declared_type64='unsigned int' type64='b16'/>
<field declared_type64='unsigned int' type64='b16'/>
<field declared_type64='unsigned int' type64='b16'/>
<field declared_type64='unsigned int' type64='b16'/>
<field declared_type64='unsigned int' type64='b16'/>
</struct>
<struct name='jvmtiClassDefinition' type64='{_jvmtiClassDefinition=&quot;klass&quot;^{_jobject}&quot;class_byte_count&quot;i&quot;class_bytes&quot;*}'>
<field declared_type64='jclass' name='klass' type64='^{_jobject=}'/>
<field declared_type64='jint' name='class_byte_count' type64='i'/>
<field const='true' declared_type64='unsigned char*' name='class_bytes' type64='*'/>
</struct>
<struct name='jvmtiEnv' type64='{jvmtiInterface_1_=&quot;reserved1&quot;^v&quot;SetEventNotificationMode&quot;^?&quot;reserved3&quot;^v&quot;GetAllThreads&quot;^?&quot;SuspendThread&quot;^?&quot;ResumeThread&quot;^?&quot;StopThread&quot;^?&quot;InterruptThread&quot;^?&quot;GetThreadInfo&quot;^?&quot;GetOwnedMonitorInfo&quot;^?&quot;GetCurrentContendedMonitor&quot;^?&quot;RunAgentThread&quot;^?&quot;GetTopThreadGroups&quot;^?&quot;GetThreadGroupInfo&quot;^?&quot;GetThreadGroupChildren&quot;^?&quot;GetFrameCount&quot;^?&quot;GetThreadState&quot;^?&quot;GetCurrentThread&quot;^?&quot;GetFrameLocation&quot;^?&quot;NotifyFramePop&quot;^?&quot;GetLocalObject&quot;^?&quot;GetLocalInt&quot;^?&quot;GetLocalLong&quot;^?&quot;GetLocalFloat&quot;^?&quot;GetLocalDouble&quot;^?&quot;SetLocalObject&quot;^?&quot;SetLocalInt&quot;^?&quot;SetLocalLong&quot;^?&quot;SetLocalFloat&quot;^?&quot;SetLocalDouble&quot;^?&quot;CreateRawMonitor&quot;^?&quot;DestroyRawMonitor&quot;^?&quot;RawMonitorEnter&quot;^?&quot;RawMonitorExit&quot;^?&quot;RawMonitorWait&quot;^?&quot;RawMonitorNotify&quot;^?&quot;RawMonitorNotifyAll&quot;^?&quot;SetBreakpoint&quot;^?&quot;ClearBreakpoint&quot;^?&quot;reserved40&quot;^v&quot;SetFieldAccessWatch&quot;^?&quot;ClearFieldAccessWatch&quot;^?&quot;SetFieldModificationWatch&quot;^?&quot;ClearFieldModificationWatch&quot;^?&quot;IsModifiableClass&quot;^?&quot;Allocate&quot;^?&quot;Deallocate&quot;^?&quot;GetClassSignature&quot;^?&quot;GetClassStatus&quot;^?&quot;GetSourceFileName&quot;^?&quot;GetClassModifiers&quot;^?&quot;GetClassMethods&quot;^?&quot;GetClassFields&quot;^?&quot;GetImplementedInterfaces&quot;^?&quot;IsInterface&quot;^?&quot;IsArrayClass&quot;^?&quot;GetClassLoader&quot;^?&quot;GetObjectHashCode&quot;^?&quot;GetObjectMonitorUsage&quot;^?&quot;GetFieldName&quot;^?&quot;GetFieldDeclaringClass&quot;^?&quot;GetFieldModifiers&quot;^?&quot;IsFieldSynthetic&quot;^?&quot;GetMethodName&quot;^?&quot;GetMethodDeclaringClass&quot;^?&quot;GetMethodModifiers&quot;^?&quot;reserved67&quot;^v&quot;GetMaxLocals&quot;^?&quot;GetArgumentsSize&quot;^?&quot;GetLineNumberTable&quot;^?&quot;GetMethodLocation&quot;^?&quot;GetLocalVariableTable&quot;^?&quot;SetNativeMethodPrefix&quot;^?&quot;SetNativeMethodPrefixes&quot;^?&quot;GetBytecodes&quot;^?&quot;IsMethodNative&quot;^?&quot;IsMethodSynthetic&quot;^?&quot;GetLoadedClasses&quot;^?&quot;GetClassLoaderClasses&quot;^?&quot;PopFrame&quot;^?&quot;ForceEarlyReturnObject&quot;^?&quot;ForceEarlyReturnInt&quot;^?&quot;ForceEarlyReturnLong&quot;^?&quot;ForceEarlyReturnFloat&quot;^?&quot;ForceEarlyReturnDouble&quot;^?&quot;ForceEarlyReturnVoid&quot;^?&quot;RedefineClasses&quot;^?&quot;GetVersionNumber&quot;^?&quot;GetCapabilities&quot;^?&quot;GetSourceDebugExtension&quot;^?&quot;IsMethodObsolete&quot;^?&quot;SuspendThreadList&quot;^?&quot;ResumeThreadList&quot;^?&quot;reserved94&quot;^v&quot;reserved95&quot;^v&quot;reserved96&quot;^v&quot;reserved97&quot;^v&quot;reserved98&quot;^v&quot;reserved99&quot;^v&quot;GetAllStackTraces&quot;^?&quot;GetThreadListStackTraces&quot;^?&quot;GetThreadLocalStorage&quot;^?&quot;SetThreadLocalStorage&quot;^?&quot;GetStackTrace&quot;^?&quot;reserved105&quot;^v&quot;GetTag&quot;^?&quot;SetTag&quot;^?&quot;ForceGarbageCollection&quot;^?&quot;IterateOverObjectsReachableFromObject&quot;^?&quot;IterateOverReachableObjects&quot;^?&quot;IterateOverHeap&quot;^?&quot;IterateOverInstancesOfClass&quot;^?&quot;reserved113&quot;^v&quot;GetObjectsWithTags&quot;^?&quot;FollowReferences&quot;^?&quot;IterateThroughHeap&quot;^?&quot;reserved117&quot;^v&quot;reserved118&quot;^v&quot;reserved119&quot;^v&quot;SetJNIFunctionTable&quot;^?&quot;GetJNIFunctionTable&quot;^?&quot;SetEventCallbacks&quot;^?&quot;GenerateEvents&quot;^?&quot;GetExtensionFunctions&quot;^?&quot;GetExtensionEvents&quot;^?&quot;SetExtensionEventCallback&quot;^?&quot;DisposeEnvironment&quot;^?&quot;GetErrorName&quot;^?&quot;GetJLocationFormat&quot;^?&quot;GetSystemProperties&quot;^?&quot;GetSystemProperty&quot;^?&quot;SetSystemProperty&quot;^?&quot;GetPhase&quot;^?&quot;GetCurrentThreadCpuTimerInfo&quot;^?&quot;GetCurrentThreadCpuTime&quot;^?&quot;GetThreadCpuTimerInfo&quot;^?&quot;GetThreadCpuTime&quot;^?&quot;GetTimerInfo&quot;^?&quot;GetTime&quot;^?&quot;GetPotentialCapabilities&quot;^?&quot;reserved141&quot;^v&quot;AddCapabilities&quot;^?&quot;RelinquishCapabilities&quot;^?&quot;GetAvailableProcessors&quot;^?&quot;GetClassVersionNumbers&quot;^?&quot;GetConstantPool&quot;^?&quot;GetEnvironmentLocalStorage&quot;^?&quot;SetEnvironmentLocalStorage&quot;^?&quot;AddToBootstrapClassLoaderSearch&quot;^?&quot;SetVerboseFlag&quot;^?&quot;AddToSystemClassLoaderSearch&quot;^?&quot;RetransformClasses&quot;^?&quot;GetOwnedMonitorStackDepthInfo&quot;^?&quot;GetObjectSize&quot;^?}'>
<field declared_type64='void*' name='reserved1' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiEventMode, jvmtiEvent, jthread, ...)' function_pointer='true' name='SetEventNotificationMode' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiEventMode' type64='i'/>
<arg declared_type64='jvmtiEvent' type64='i'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved3' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *, jthread **)' function_pointer='true' name='GetAllThreads' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jthread**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread)' function_pointer='true' name='SuspendThread' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread)' function_pointer='true' name='ResumeThread' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jobject)' function_pointer='true' name='StopThread' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread)' function_pointer='true' name='InterruptThread' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jvmtiThreadInfo *)' function_pointer='true' name='GetThreadInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jvmtiThreadInfo*' type64='^{_jvmtiThreadInfo=*iC^{_jobject}^{_jobject}}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint *, jobject **)' function_pointer='true' name='GetOwnedMonitorInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jobject**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jobject *)' function_pointer='true' name='GetCurrentContendedMonitor' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jobject*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jvmtiStartFunction, void *, jint)' function_pointer='true' name='RunAgentThread' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jvmtiStartFunction' function_pointer='true' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *, jthreadGroup **)' function_pointer='true' name='GetTopThreadGroups' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jthreadGroup**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthreadGroup, jvmtiThreadGroupInfo *)' function_pointer='true' name='GetThreadGroupInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthreadGroup' type64='^{_jobject=}'/>
<arg declared_type64='jvmtiThreadGroupInfo*' type64='^{_jvmtiThreadGroupInfo=^{_jobject}*iC}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthreadGroup, jint *, jthread **, jint *, jthreadGroup **)' function_pointer='true' name='GetThreadGroupChildren' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthreadGroup' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jthread**' type64='^^^{_jobject}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jthreadGroup**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint *)' function_pointer='true' name='GetFrameCount' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint *)' function_pointer='true' name='GetThreadState' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread *)' function_pointer='true' name='GetCurrentThread' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jmethodID *, jlocation *)' function_pointer='true' name='GetFrameLocation' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jmethodID*' type64='^^{_jmethodID}'/>
<arg declared_type64='jlocation*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint)' function_pointer='true' name='NotifyFramePop' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jobject *)' function_pointer='true' name='GetLocalObject' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jobject*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jint *)' function_pointer='true' name='GetLocalInt' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jlong *)' function_pointer='true' name='GetLocalLong' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jfloat *)' function_pointer='true' name='GetLocalFloat' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jfloat*' type64='^f'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jdouble *)' function_pointer='true' name='GetLocalDouble' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jdouble*' type64='^d'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jobject)' function_pointer='true' name='SetLocalObject' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jint)' function_pointer='true' name='SetLocalInt' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jlong)' function_pointer='true' name='SetLocalLong' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jfloat)' function_pointer='true' name='SetLocalFloat' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jfloat' type64='f'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jdouble)' function_pointer='true' name='SetLocalDouble' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jdouble' type64='d'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, char *, jrawMonitorID *)' function_pointer='true' name='CreateRawMonitor' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='jrawMonitorID*' type64='^^{_jrawMonitorID}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jrawMonitorID)' function_pointer='true' name='DestroyRawMonitor' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jrawMonitorID' type64='^{_jrawMonitorID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jrawMonitorID)' function_pointer='true' name='RawMonitorEnter' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jrawMonitorID' type64='^{_jrawMonitorID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jrawMonitorID)' function_pointer='true' name='RawMonitorExit' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jrawMonitorID' type64='^{_jrawMonitorID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jrawMonitorID, jlong)' function_pointer='true' name='RawMonitorWait' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jrawMonitorID' type64='^{_jrawMonitorID=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jrawMonitorID)' function_pointer='true' name='RawMonitorNotify' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jrawMonitorID' type64='^{_jrawMonitorID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jrawMonitorID)' function_pointer='true' name='RawMonitorNotifyAll' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jrawMonitorID' type64='^{_jrawMonitorID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jlocation)' function_pointer='true' name='SetBreakpoint' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jlocation' type64='q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jlocation)' function_pointer='true' name='ClearBreakpoint' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jlocation' type64='q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved40' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID)' function_pointer='true' name='SetFieldAccessWatch' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID)' function_pointer='true' name='ClearFieldAccessWatch' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID)' function_pointer='true' name='SetFieldModificationWatch' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID)' function_pointer='true' name='ClearFieldModificationWatch' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jboolean *)' function_pointer='true' name='IsModifiableClass' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jlong, unsigned char **)' function_pointer='true' name='Allocate' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='unsigned char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, unsigned char *)' function_pointer='true' name='Deallocate' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='unsigned char*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, char **, char **)' function_pointer='true' name='GetClassSignature' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *)' function_pointer='true' name='GetClassStatus' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, char **)' function_pointer='true' name='GetSourceFileName' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *)' function_pointer='true' name='GetClassModifiers' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *, jmethodID **)' function_pointer='true' name='GetClassMethods' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jmethodID**' type64='^^^{_jmethodID}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *, jfieldID **)' function_pointer='true' name='GetClassFields' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jfieldID**' type64='^^^{_jfieldID}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *, jclass **)' function_pointer='true' name='GetImplementedInterfaces' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jclass**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jboolean *)' function_pointer='true' name='IsInterface' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jboolean *)' function_pointer='true' name='IsArrayClass' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jobject *)' function_pointer='true' name='GetClassLoader' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jobject*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jint *)' function_pointer='true' name='GetObjectHashCode' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jvmtiMonitorUsage *)' function_pointer='true' name='GetObjectMonitorUsage' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jvmtiMonitorUsage*' type64='^{_jvmtiMonitorUsage=^{_jobject}ii^^{_jobject}i^^{_jobject}}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID, char **, char **, char **)' function_pointer='true' name='GetFieldName' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID, jclass *)' function_pointer='true' name='GetFieldDeclaringClass' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jclass*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID, jint *)' function_pointer='true' name='GetFieldModifiers' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID, jboolean *)' function_pointer='true' name='IsFieldSynthetic' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, char **, char **, char **)' function_pointer='true' name='GetMethodName' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jclass *)' function_pointer='true' name='GetMethodDeclaringClass' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jclass*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jint *)' function_pointer='true' name='GetMethodModifiers' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved67' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jint *)' function_pointer='true' name='GetMaxLocals' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jint *)' function_pointer='true' name='GetArgumentsSize' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jint *, jvmtiLineNumberEntry **)' function_pointer='true' name='GetLineNumberTable' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jvmtiLineNumberEntry**' type64='^^{_jvmtiLineNumberEntry}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jlocation *, jlocation *)' function_pointer='true' name='GetMethodLocation' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jlocation*' type64='^q'/>
<arg declared_type64='jlocation*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jint *, jvmtiLocalVariableEntry **)' function_pointer='true' name='GetLocalVariableTable' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jvmtiLocalVariableEntry**' type64='^^{_jvmtiLocalVariableEntry}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, char *)' function_pointer='true' name='SetNativeMethodPrefix' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, char **)' function_pointer='true' name='SetNativeMethodPrefixes' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jint *, unsigned char **)' function_pointer='true' name='GetBytecodes' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='unsigned char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jboolean *)' function_pointer='true' name='IsMethodNative' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jboolean *)' function_pointer='true' name='IsMethodSynthetic' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *, jclass **)' function_pointer='true' name='GetLoadedClasses' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jclass**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jint *, jclass **)' function_pointer='true' name='GetClassLoaderClasses' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jclass**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread)' function_pointer='true' name='PopFrame' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jobject)' function_pointer='true' name='ForceEarlyReturnObject' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint)' function_pointer='true' name='ForceEarlyReturnInt' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jlong)' function_pointer='true' name='ForceEarlyReturnLong' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jfloat)' function_pointer='true' name='ForceEarlyReturnFloat' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jfloat' type64='f'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jdouble)' function_pointer='true' name='ForceEarlyReturnDouble' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jdouble' type64='d'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread)' function_pointer='true' name='ForceEarlyReturnVoid' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jvmtiClassDefinition *)' function_pointer='true' name='RedefineClasses' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='jvmtiClassDefinition*' type64='^{_jvmtiClassDefinition=^{_jobject}i*}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *)' function_pointer='true' name='GetVersionNumber' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiCapabilities *)' function_pointer='true' name='GetCapabilities' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiCapabilities*' type64='^{_jvmtiCapabilities=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b7b16b16b16b16b16}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, char **)' function_pointer='true' name='GetSourceDebugExtension' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jboolean *)' function_pointer='true' name='IsMethodObsolete' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jthread *, jvmtiError *)' function_pointer='true' name='SuspendThreadList' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='jthread*' type64='^^{_jobject}'/>
<arg declared_type64='jvmtiError*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jthread *, jvmtiError *)' function_pointer='true' name='ResumeThreadList' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='jthread*' type64='^^{_jobject}'/>
<arg declared_type64='jvmtiError*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved94' type64='^v'/>
<field declared_type64='void*' name='reserved95' type64='^v'/>
<field declared_type64='void*' name='reserved96' type64='^v'/>
<field declared_type64='void*' name='reserved97' type64='^v'/>
<field declared_type64='void*' name='reserved98' type64='^v'/>
<field declared_type64='void*' name='reserved99' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jvmtiStackInfo **, jint *)' function_pointer='true' name='GetAllStackTraces' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jvmtiStackInfo**' type64='^^{_jvmtiStackInfo}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jthread *, jint, jvmtiStackInfo **)' function_pointer='true' name='GetThreadListStackTraces' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='jthread*' type64='^^{_jobject}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jvmtiStackInfo**' type64='^^{_jvmtiStackInfo}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, void **)' function_pointer='true' name='GetThreadLocalStorage' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, void *)' function_pointer='true' name='SetThreadLocalStorage' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jvmtiFrameInfo *, jint *)' function_pointer='true' name='GetStackTrace' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jvmtiFrameInfo*' type64='^{_jvmtiFrameInfo=^{_jmethodID}q}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved105' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jlong *)' function_pointer='true' name='GetTag' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jlong)' function_pointer='true' name='SetTag' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *)' function_pointer='true' name='ForceGarbageCollection' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jvmtiObjectReferenceCallback, void *)' function_pointer='true' name='IterateOverObjectsReachableFromObject' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jvmtiObjectReferenceCallback' function_pointer='true' type64='^?'>
<arg declared_type64='jvmtiObjectReferenceKind' type64='i'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiIterationControl' type64='i'/>
</arg>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiHeapRootCallback, jvmtiStackReferenceCallback, jvmtiObjectReferenceCallback, void *)' function_pointer='true' name='IterateOverReachableObjects' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiHeapRootCallback' function_pointer='true' type64='^?'>
<arg declared_type64='jvmtiHeapRootKind' type64='i'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiIterationControl' type64='i'/>
</arg>
<arg declared_type64='jvmtiStackReferenceCallback' function_pointer='true' type64='^?'>
<arg declared_type64='jvmtiHeapRootKind' type64='i'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiIterationControl' type64='i'/>
</arg>
<arg declared_type64='jvmtiObjectReferenceCallback' function_pointer='true' type64='^?'>
<arg declared_type64='jvmtiObjectReferenceKind' type64='i'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiIterationControl' type64='i'/>
</arg>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiHeapObjectFilter, jvmtiHeapObjectCallback, void *)' function_pointer='true' name='IterateOverHeap' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiHeapObjectFilter' type64='i'/>
<arg declared_type64='jvmtiHeapObjectCallback' function_pointer='true' type64='^?'>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiIterationControl' type64='i'/>
</arg>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jvmtiHeapObjectFilter, jvmtiHeapObjectCallback, void *)' function_pointer='true' name='IterateOverInstancesOfClass' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jvmtiHeapObjectFilter' type64='i'/>
<arg declared_type64='jvmtiHeapObjectCallback' function_pointer='true' type64='^?'>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiIterationControl' type64='i'/>
</arg>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved113' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jlong *, jint *, jobject **, jlong **)' function_pointer='true' name='GetObjectsWithTags' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jobject**' type64='^^^{_jobject}'/>
<arg declared_type64='jlong**' type64='^^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jclass, jobject, jvmtiHeapCallbacks *, void *)' function_pointer='true' name='FollowReferences' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jvmtiHeapCallbacks*' type64='^{_jvmtiHeapCallbacks=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jclass, jvmtiHeapCallbacks *, void *)' function_pointer='true' name='IterateThroughHeap' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jvmtiHeapCallbacks*' type64='^{_jvmtiHeapCallbacks=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved117' type64='^v'/>
<field declared_type64='void*' name='reserved118' type64='^v'/>
<field declared_type64='void*' name='reserved119' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jniNativeInterface *)' function_pointer='true' name='SetJNIFunctionTable' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='jniNativeInterface*' type64='^{JNINativeInterface_=^v^v^v^v^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jniNativeInterface **)' function_pointer='true' name='GetJNIFunctionTable' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jniNativeInterface**' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiEventCallbacks *, jint)' function_pointer='true' name='SetEventCallbacks' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='jvmtiEventCallbacks*' type64='^{_jvmtiEventCallbacks=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiEvent)' function_pointer='true' name='GenerateEvents' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiEvent' type64='i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *, jvmtiExtensionFunctionInfo **)' function_pointer='true' name='GetExtensionFunctions' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jvmtiExtensionFunctionInfo**' type64='^^{_jvmtiExtensionFunctionInfo}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *, jvmtiExtensionEventInfo **)' function_pointer='true' name='GetExtensionEvents' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jvmtiExtensionEventInfo**' type64='^^{_jvmtiExtensionEventInfo}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jvmtiExtensionEvent)' function_pointer='true' name='SetExtensionEventCallback' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jvmtiExtensionEvent' function_pointer='true' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *)' function_pointer='true' name='DisposeEnvironment' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiError, char **)' function_pointer='true' name='GetErrorName' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiError' type64='i'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiJlocationFormat *)' function_pointer='true' name='GetJLocationFormat' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiJlocationFormat*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *, char ***)' function_pointer='true' name='GetSystemProperties' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='char***' type64='^^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, char *, char **)' function_pointer='true' name='GetSystemProperty' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, char *, char *)' function_pointer='true' name='SetSystemProperty' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiPhase *)' function_pointer='true' name='GetPhase' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiPhase*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiTimerInfo *)' function_pointer='true' name='GetCurrentThreadCpuTimerInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiTimerInfo*' type64='^{_jvmtiTimerInfo=qCCiqq}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jlong *)' function_pointer='true' name='GetCurrentThreadCpuTime' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiTimerInfo *)' function_pointer='true' name='GetThreadCpuTimerInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiTimerInfo*' type64='^{_jvmtiTimerInfo=qCCiqq}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jlong *)' function_pointer='true' name='GetThreadCpuTime' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiTimerInfo *)' function_pointer='true' name='GetTimerInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiTimerInfo*' type64='^{_jvmtiTimerInfo=qCCiqq}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jlong *)' function_pointer='true' name='GetTime' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiCapabilities *)' function_pointer='true' name='GetPotentialCapabilities' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiCapabilities*' type64='^{_jvmtiCapabilities=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b7b16b16b16b16b16}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved141' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiCapabilities *)' function_pointer='true' name='AddCapabilities' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='jvmtiCapabilities*' type64='^{_jvmtiCapabilities=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b7b16b16b16b16b16}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiCapabilities *)' function_pointer='true' name='RelinquishCapabilities' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='jvmtiCapabilities*' type64='^{_jvmtiCapabilities=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b7b16b16b16b16b16}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *)' function_pointer='true' name='GetAvailableProcessors' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *, jint *)' function_pointer='true' name='GetClassVersionNumbers' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *, jint *, unsigned char **)' function_pointer='true' name='GetConstantPool' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='unsigned char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, void **)' function_pointer='true' name='GetEnvironmentLocalStorage' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, void *)' function_pointer='true' name='SetEnvironmentLocalStorage' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, char *)' function_pointer='true' name='AddToBootstrapClassLoaderSearch' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiVerboseFlag, jboolean)' function_pointer='true' name='SetVerboseFlag' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiVerboseFlag' type64='i'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, char *)' function_pointer='true' name='AddToSystemClassLoaderSearch' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jclass *)' function_pointer='true' name='RetransformClasses' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='jclass*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint *, jvmtiMonitorStackDepthInfo **)' function_pointer='true' name='GetOwnedMonitorStackDepthInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jvmtiMonitorStackDepthInfo**' type64='^^{_jvmtiMonitorStackDepthInfo}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jlong *)' function_pointer='true' name='GetObjectSize' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
</struct>
<struct name='jvmtiEventCallbacks' type64='{_jvmtiEventCallbacks=&quot;VMInit&quot;^?&quot;VMDeath&quot;^?&quot;ThreadStart&quot;^?&quot;ThreadEnd&quot;^?&quot;ClassFileLoadHook&quot;^?&quot;ClassLoad&quot;^?&quot;ClassPrepare&quot;^?&quot;VMStart&quot;^?&quot;Exception&quot;^?&quot;ExceptionCatch&quot;^?&quot;SingleStep&quot;^?&quot;FramePop&quot;^?&quot;Breakpoint&quot;^?&quot;FieldAccess&quot;^?&quot;FieldModification&quot;^?&quot;MethodEntry&quot;^?&quot;MethodExit&quot;^?&quot;NativeMethodBind&quot;^?&quot;CompiledMethodLoad&quot;^?&quot;CompiledMethodUnload&quot;^?&quot;DynamicCodeGenerated&quot;^?&quot;DataDumpRequest&quot;^?&quot;reserved72&quot;^?&quot;MonitorWait&quot;^?&quot;MonitorWaited&quot;^?&quot;MonitorContendedEnter&quot;^?&quot;MonitorContendedEntered&quot;^?&quot;reserved77&quot;^?&quot;reserved78&quot;^?&quot;reserved79&quot;^?&quot;ResourceExhausted&quot;^?&quot;GarbageCollectionStart&quot;^?&quot;GarbageCollectionFinish&quot;^?&quot;ObjectFree&quot;^?&quot;VMObjectAlloc&quot;^?}'>
<field declared_type64='jvmtiEventVMInit' function_pointer='true' name='VMInit' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventVMDeath' function_pointer='true' name='VMDeath' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventThreadStart' function_pointer='true' name='ThreadStart' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventThreadEnd' function_pointer='true' name='ThreadEnd' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventClassFileLoadHook' function_pointer='true' name='ClassFileLoadHook' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='unsigned char*' type64='*'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='unsigned char**' type64='^*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventClassLoad' function_pointer='true' name='ClassLoad' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventClassPrepare' function_pointer='true' name='ClassPrepare' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventVMStart' function_pointer='true' name='VMStart' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventException' function_pointer='true' name='Exception' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jlocation' type64='q'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jlocation' type64='q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventExceptionCatch' function_pointer='true' name='ExceptionCatch' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jlocation' type64='q'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventSingleStep' function_pointer='true' name='SingleStep' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jlocation' type64='q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventFramePop' function_pointer='true' name='FramePop' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventBreakpoint' function_pointer='true' name='Breakpoint' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jlocation' type64='q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventFieldAccess' function_pointer='true' name='FieldAccess' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jlocation' type64='q'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventFieldModification' function_pointer='true' name='FieldModification' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jlocation' type64='q'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='char' type64='c'/>
<arg declared_type64='jvalue' type64='(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventMethodEntry' function_pointer='true' name='MethodEntry' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventMethodExit' function_pointer='true' name='MethodExit' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<arg declared_type64='jvalue' type64='(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventNativeMethodBind' function_pointer='true' name='NativeMethodBind' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventCompiledMethodLoad' function_pointer='true' name='CompiledMethodLoad' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='jvmtiAddrLocationMap*' type64='^{_jvmtiAddrLocationMap=^vq}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventCompiledMethodUnload' function_pointer='true' name='CompiledMethodUnload' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventDynamicCodeGenerated' function_pointer='true' name='DynamicCodeGenerated' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventDataDumpRequest' function_pointer='true' name='DataDumpRequest' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventReserved' function_pointer='true' name='reserved72' type64='^?'>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventMonitorWait' function_pointer='true' name='MonitorWait' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventMonitorWaited' function_pointer='true' name='MonitorWaited' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventMonitorContendedEnter' function_pointer='true' name='MonitorContendedEnter' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventMonitorContendedEntered' function_pointer='true' name='MonitorContendedEntered' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventReserved' function_pointer='true' name='reserved77' type64='^?'>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventReserved' function_pointer='true' name='reserved78' type64='^?'>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventReserved' function_pointer='true' name='reserved79' type64='^?'>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventResourceExhausted' function_pointer='true' name='ResourceExhausted' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventGarbageCollectionStart' function_pointer='true' name='GarbageCollectionStart' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventGarbageCollectionFinish' function_pointer='true' name='GarbageCollectionFinish' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventObjectFree' function_pointer='true' name='ObjectFree' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jvmtiEventVMObjectAlloc' function_pointer='true' name='VMObjectAlloc' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='void' type64='v'/>
</field>
</struct>
<struct name='jvmtiExtensionEventInfo' type64='{_jvmtiExtensionEventInfo=&quot;extension_event_index&quot;i&quot;id&quot;*&quot;short_description&quot;*&quot;param_count&quot;i&quot;params&quot;^{_jvmtiParamInfo}}'>
<field declared_type64='jint' name='extension_event_index' type64='i'/>
<field declared_type64='char*' name='id' type64='*'/>
<field declared_type64='char*' name='short_description' type64='*'/>
<field declared_type64='jint' name='param_count' type64='i'/>
<field declared_type64='jvmtiParamInfo*' name='params' type64='^{_jvmtiParamInfo=*iiC}'/>
</struct>
<struct name='jvmtiExtensionFunctionInfo' type64='{_jvmtiExtensionFunctionInfo=&quot;func&quot;^?&quot;id&quot;*&quot;short_description&quot;*&quot;param_count&quot;i&quot;params&quot;^{_jvmtiParamInfo}&quot;error_count&quot;i&quot;errors&quot;^i}'>
<field declared_type64='jvmtiExtensionFunction' function_pointer='true' name='func' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='char*' name='id' type64='*'/>
<field declared_type64='char*' name='short_description' type64='*'/>
<field declared_type64='jint' name='param_count' type64='i'/>
<field declared_type64='jvmtiParamInfo*' name='params' type64='^{_jvmtiParamInfo=*iiC}'/>
<field declared_type64='jint' name='error_count' type64='i'/>
<field declared_type64='jvmtiError*' name='errors' type64='^i'/>
</struct>
<struct name='jvmtiFrameInfo' type64='{_jvmtiFrameInfo=&quot;method&quot;^{_jmethodID}&quot;location&quot;q}'>
<field declared_type64='jmethodID' name='method' type64='^{_jmethodID=}'/>
<field declared_type64='jlocation' name='location' type64='q'/>
</struct>
<struct name='jvmtiHeapCallbacks' type64='{_jvmtiHeapCallbacks=&quot;heap_iteration_callback&quot;^?&quot;heap_reference_callback&quot;^?&quot;primitive_field_callback&quot;^?&quot;array_primitive_value_callback&quot;^?&quot;string_primitive_value_callback&quot;^?&quot;reserved5&quot;^?&quot;reserved6&quot;^?&quot;reserved7&quot;^?&quot;reserved8&quot;^?&quot;reserved9&quot;^?&quot;reserved10&quot;^?&quot;reserved11&quot;^?&quot;reserved12&quot;^?&quot;reserved13&quot;^?&quot;reserved14&quot;^?&quot;reserved15&quot;^?}'>
<field declared_type64='jvmtiHeapIterationCallback' function_pointer='true' name='heap_iteration_callback' type64='^?'>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jvmtiHeapReferenceCallback' function_pointer='true' name='heap_reference_callback' type64='^?'>
<arg declared_type64='jvmtiHeapReferenceKind' type64='i'/>
<arg const='true' declared_type64='jvmtiHeapReferenceInfo*' type64='^(_jvmtiHeapReferenceInfo={_jvmtiHeapReferenceInfoField=i}{_jvmtiHeapReferenceInfoArray=i}{_jvmtiHeapReferenceInfoConstantPool=i}{_jvmtiHeapReferenceInfoStackLocal=qqi^{_jmethodID}qi}{_jvmtiHeapReferenceInfoJniLocal=qqi^{_jmethodID}}{_jvmtiHeapReferenceInfoReserved=qqqqqqqq})'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jvmtiPrimitiveFieldCallback' function_pointer='true' name='primitive_field_callback' type64='^?'>
<arg declared_type64='jvmtiHeapReferenceKind' type64='i'/>
<arg const='true' declared_type64='jvmtiHeapReferenceInfo*' type64='^(_jvmtiHeapReferenceInfo={_jvmtiHeapReferenceInfoField=i}{_jvmtiHeapReferenceInfoArray=i}{_jvmtiHeapReferenceInfoConstantPool=i}{_jvmtiHeapReferenceInfoStackLocal=qqi^{_jmethodID}qi}{_jvmtiHeapReferenceInfoJniLocal=qqi^{_jmethodID}}{_jvmtiHeapReferenceInfoReserved=qqqqqqqq})'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jvalue' type64='(jvalue=CcSsiqfd^{_jobject})'/>
<arg declared_type64='jvmtiPrimitiveType' type64='i'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jvmtiArrayPrimitiveValueCallback' function_pointer='true' name='array_primitive_value_callback' type64='^?'>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jvmtiPrimitiveType' type64='i'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jvmtiStringPrimitiveValueCallback' function_pointer='true' name='string_primitive_value_callback' type64='^?'>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jvmtiReservedCallback' function_pointer='true' name='reserved5' type64='^?'>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jvmtiReservedCallback' function_pointer='true' name='reserved6' type64='^?'>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jvmtiReservedCallback' function_pointer='true' name='reserved7' type64='^?'>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jvmtiReservedCallback' function_pointer='true' name='reserved8' type64='^?'>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jvmtiReservedCallback' function_pointer='true' name='reserved9' type64='^?'>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jvmtiReservedCallback' function_pointer='true' name='reserved10' type64='^?'>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jvmtiReservedCallback' function_pointer='true' name='reserved11' type64='^?'>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jvmtiReservedCallback' function_pointer='true' name='reserved12' type64='^?'>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jvmtiReservedCallback' function_pointer='true' name='reserved13' type64='^?'>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jvmtiReservedCallback' function_pointer='true' name='reserved14' type64='^?'>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jvmtiReservedCallback' function_pointer='true' name='reserved15' type64='^?'>
<retval declared_type64='jint' type64='i'/>
</field>
</struct>
<struct name='jvmtiHeapReferenceInfoArray' type64='{_jvmtiHeapReferenceInfoArray=&quot;index&quot;i}'>
<field declared_type64='jint' name='index' type64='i'/>
</struct>
<struct name='jvmtiHeapReferenceInfoConstantPool' type64='{_jvmtiHeapReferenceInfoConstantPool=&quot;index&quot;i}'>
<field declared_type64='jint' name='index' type64='i'/>
</struct>
<struct name='jvmtiHeapReferenceInfoField' type64='{_jvmtiHeapReferenceInfoField=&quot;index&quot;i}'>
<field declared_type64='jint' name='index' type64='i'/>
</struct>
<struct name='jvmtiHeapReferenceInfoJniLocal' type64='{_jvmtiHeapReferenceInfoJniLocal=&quot;thread_tag&quot;q&quot;thread_id&quot;q&quot;depth&quot;i&quot;method&quot;^{_jmethodID}}'>
<field declared_type64='jlong' name='thread_tag' type64='q'/>
<field declared_type64='jlong' name='thread_id' type64='q'/>
<field declared_type64='jint' name='depth' type64='i'/>
<field declared_type64='jmethodID' name='method' type64='^{_jmethodID=}'/>
</struct>
<struct name='jvmtiHeapReferenceInfoReserved' type64='{_jvmtiHeapReferenceInfoReserved=&quot;reserved1&quot;q&quot;reserved2&quot;q&quot;reserved3&quot;q&quot;reserved4&quot;q&quot;reserved5&quot;q&quot;reserved6&quot;q&quot;reserved7&quot;q&quot;reserved8&quot;q}'>
<field declared_type64='jlong' name='reserved1' type64='q'/>
<field declared_type64='jlong' name='reserved2' type64='q'/>
<field declared_type64='jlong' name='reserved3' type64='q'/>
<field declared_type64='jlong' name='reserved4' type64='q'/>
<field declared_type64='jlong' name='reserved5' type64='q'/>
<field declared_type64='jlong' name='reserved6' type64='q'/>
<field declared_type64='jlong' name='reserved7' type64='q'/>
<field declared_type64='jlong' name='reserved8' type64='q'/>
</struct>
<struct name='jvmtiHeapReferenceInfoStackLocal' type64='{_jvmtiHeapReferenceInfoStackLocal=&quot;thread_tag&quot;q&quot;thread_id&quot;q&quot;depth&quot;i&quot;method&quot;^{_jmethodID}&quot;location&quot;q&quot;slot&quot;i}'>
<field declared_type64='jlong' name='thread_tag' type64='q'/>
<field declared_type64='jlong' name='thread_id' type64='q'/>
<field declared_type64='jint' name='depth' type64='i'/>
<field declared_type64='jmethodID' name='method' type64='^{_jmethodID=}'/>
<field declared_type64='jlocation' name='location' type64='q'/>
<field declared_type64='jint' name='slot' type64='i'/>
</struct>
<struct name='jvmtiInterface_1' type64='{jvmtiInterface_1_=&quot;reserved1&quot;^v&quot;SetEventNotificationMode&quot;^?&quot;reserved3&quot;^v&quot;GetAllThreads&quot;^?&quot;SuspendThread&quot;^?&quot;ResumeThread&quot;^?&quot;StopThread&quot;^?&quot;InterruptThread&quot;^?&quot;GetThreadInfo&quot;^?&quot;GetOwnedMonitorInfo&quot;^?&quot;GetCurrentContendedMonitor&quot;^?&quot;RunAgentThread&quot;^?&quot;GetTopThreadGroups&quot;^?&quot;GetThreadGroupInfo&quot;^?&quot;GetThreadGroupChildren&quot;^?&quot;GetFrameCount&quot;^?&quot;GetThreadState&quot;^?&quot;GetCurrentThread&quot;^?&quot;GetFrameLocation&quot;^?&quot;NotifyFramePop&quot;^?&quot;GetLocalObject&quot;^?&quot;GetLocalInt&quot;^?&quot;GetLocalLong&quot;^?&quot;GetLocalFloat&quot;^?&quot;GetLocalDouble&quot;^?&quot;SetLocalObject&quot;^?&quot;SetLocalInt&quot;^?&quot;SetLocalLong&quot;^?&quot;SetLocalFloat&quot;^?&quot;SetLocalDouble&quot;^?&quot;CreateRawMonitor&quot;^?&quot;DestroyRawMonitor&quot;^?&quot;RawMonitorEnter&quot;^?&quot;RawMonitorExit&quot;^?&quot;RawMonitorWait&quot;^?&quot;RawMonitorNotify&quot;^?&quot;RawMonitorNotifyAll&quot;^?&quot;SetBreakpoint&quot;^?&quot;ClearBreakpoint&quot;^?&quot;reserved40&quot;^v&quot;SetFieldAccessWatch&quot;^?&quot;ClearFieldAccessWatch&quot;^?&quot;SetFieldModificationWatch&quot;^?&quot;ClearFieldModificationWatch&quot;^?&quot;IsModifiableClass&quot;^?&quot;Allocate&quot;^?&quot;Deallocate&quot;^?&quot;GetClassSignature&quot;^?&quot;GetClassStatus&quot;^?&quot;GetSourceFileName&quot;^?&quot;GetClassModifiers&quot;^?&quot;GetClassMethods&quot;^?&quot;GetClassFields&quot;^?&quot;GetImplementedInterfaces&quot;^?&quot;IsInterface&quot;^?&quot;IsArrayClass&quot;^?&quot;GetClassLoader&quot;^?&quot;GetObjectHashCode&quot;^?&quot;GetObjectMonitorUsage&quot;^?&quot;GetFieldName&quot;^?&quot;GetFieldDeclaringClass&quot;^?&quot;GetFieldModifiers&quot;^?&quot;IsFieldSynthetic&quot;^?&quot;GetMethodName&quot;^?&quot;GetMethodDeclaringClass&quot;^?&quot;GetMethodModifiers&quot;^?&quot;reserved67&quot;^v&quot;GetMaxLocals&quot;^?&quot;GetArgumentsSize&quot;^?&quot;GetLineNumberTable&quot;^?&quot;GetMethodLocation&quot;^?&quot;GetLocalVariableTable&quot;^?&quot;SetNativeMethodPrefix&quot;^?&quot;SetNativeMethodPrefixes&quot;^?&quot;GetBytecodes&quot;^?&quot;IsMethodNative&quot;^?&quot;IsMethodSynthetic&quot;^?&quot;GetLoadedClasses&quot;^?&quot;GetClassLoaderClasses&quot;^?&quot;PopFrame&quot;^?&quot;ForceEarlyReturnObject&quot;^?&quot;ForceEarlyReturnInt&quot;^?&quot;ForceEarlyReturnLong&quot;^?&quot;ForceEarlyReturnFloat&quot;^?&quot;ForceEarlyReturnDouble&quot;^?&quot;ForceEarlyReturnVoid&quot;^?&quot;RedefineClasses&quot;^?&quot;GetVersionNumber&quot;^?&quot;GetCapabilities&quot;^?&quot;GetSourceDebugExtension&quot;^?&quot;IsMethodObsolete&quot;^?&quot;SuspendThreadList&quot;^?&quot;ResumeThreadList&quot;^?&quot;reserved94&quot;^v&quot;reserved95&quot;^v&quot;reserved96&quot;^v&quot;reserved97&quot;^v&quot;reserved98&quot;^v&quot;reserved99&quot;^v&quot;GetAllStackTraces&quot;^?&quot;GetThreadListStackTraces&quot;^?&quot;GetThreadLocalStorage&quot;^?&quot;SetThreadLocalStorage&quot;^?&quot;GetStackTrace&quot;^?&quot;reserved105&quot;^v&quot;GetTag&quot;^?&quot;SetTag&quot;^?&quot;ForceGarbageCollection&quot;^?&quot;IterateOverObjectsReachableFromObject&quot;^?&quot;IterateOverReachableObjects&quot;^?&quot;IterateOverHeap&quot;^?&quot;IterateOverInstancesOfClass&quot;^?&quot;reserved113&quot;^v&quot;GetObjectsWithTags&quot;^?&quot;FollowReferences&quot;^?&quot;IterateThroughHeap&quot;^?&quot;reserved117&quot;^v&quot;reserved118&quot;^v&quot;reserved119&quot;^v&quot;SetJNIFunctionTable&quot;^?&quot;GetJNIFunctionTable&quot;^?&quot;SetEventCallbacks&quot;^?&quot;GenerateEvents&quot;^?&quot;GetExtensionFunctions&quot;^?&quot;GetExtensionEvents&quot;^?&quot;SetExtensionEventCallback&quot;^?&quot;DisposeEnvironment&quot;^?&quot;GetErrorName&quot;^?&quot;GetJLocationFormat&quot;^?&quot;GetSystemProperties&quot;^?&quot;GetSystemProperty&quot;^?&quot;SetSystemProperty&quot;^?&quot;GetPhase&quot;^?&quot;GetCurrentThreadCpuTimerInfo&quot;^?&quot;GetCurrentThreadCpuTime&quot;^?&quot;GetThreadCpuTimerInfo&quot;^?&quot;GetThreadCpuTime&quot;^?&quot;GetTimerInfo&quot;^?&quot;GetTime&quot;^?&quot;GetPotentialCapabilities&quot;^?&quot;reserved141&quot;^v&quot;AddCapabilities&quot;^?&quot;RelinquishCapabilities&quot;^?&quot;GetAvailableProcessors&quot;^?&quot;GetClassVersionNumbers&quot;^?&quot;GetConstantPool&quot;^?&quot;GetEnvironmentLocalStorage&quot;^?&quot;SetEnvironmentLocalStorage&quot;^?&quot;AddToBootstrapClassLoaderSearch&quot;^?&quot;SetVerboseFlag&quot;^?&quot;AddToSystemClassLoaderSearch&quot;^?&quot;RetransformClasses&quot;^?&quot;GetOwnedMonitorStackDepthInfo&quot;^?&quot;GetObjectSize&quot;^?}'>
<field declared_type64='void*' name='reserved1' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiEventMode, jvmtiEvent, jthread, ...)' function_pointer='true' name='SetEventNotificationMode' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiEventMode' type64='i'/>
<arg declared_type64='jvmtiEvent' type64='i'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved3' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *, jthread **)' function_pointer='true' name='GetAllThreads' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jthread**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread)' function_pointer='true' name='SuspendThread' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread)' function_pointer='true' name='ResumeThread' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jobject)' function_pointer='true' name='StopThread' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread)' function_pointer='true' name='InterruptThread' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jvmtiThreadInfo *)' function_pointer='true' name='GetThreadInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jvmtiThreadInfo*' type64='^{_jvmtiThreadInfo=*iC^{_jobject}^{_jobject}}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint *, jobject **)' function_pointer='true' name='GetOwnedMonitorInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jobject**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jobject *)' function_pointer='true' name='GetCurrentContendedMonitor' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jobject*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jvmtiStartFunction, void *, jint)' function_pointer='true' name='RunAgentThread' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jvmtiStartFunction' function_pointer='true' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *, jthreadGroup **)' function_pointer='true' name='GetTopThreadGroups' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jthreadGroup**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthreadGroup, jvmtiThreadGroupInfo *)' function_pointer='true' name='GetThreadGroupInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthreadGroup' type64='^{_jobject=}'/>
<arg declared_type64='jvmtiThreadGroupInfo*' type64='^{_jvmtiThreadGroupInfo=^{_jobject}*iC}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthreadGroup, jint *, jthread **, jint *, jthreadGroup **)' function_pointer='true' name='GetThreadGroupChildren' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthreadGroup' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jthread**' type64='^^^{_jobject}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jthreadGroup**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint *)' function_pointer='true' name='GetFrameCount' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint *)' function_pointer='true' name='GetThreadState' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread *)' function_pointer='true' name='GetCurrentThread' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jmethodID *, jlocation *)' function_pointer='true' name='GetFrameLocation' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jmethodID*' type64='^^{_jmethodID}'/>
<arg declared_type64='jlocation*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint)' function_pointer='true' name='NotifyFramePop' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jobject *)' function_pointer='true' name='GetLocalObject' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jobject*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jint *)' function_pointer='true' name='GetLocalInt' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jlong *)' function_pointer='true' name='GetLocalLong' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jfloat *)' function_pointer='true' name='GetLocalFloat' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jfloat*' type64='^f'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jdouble *)' function_pointer='true' name='GetLocalDouble' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jdouble*' type64='^d'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jobject)' function_pointer='true' name='SetLocalObject' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jint)' function_pointer='true' name='SetLocalInt' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jlong)' function_pointer='true' name='SetLocalLong' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jfloat)' function_pointer='true' name='SetLocalFloat' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jfloat' type64='f'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jdouble)' function_pointer='true' name='SetLocalDouble' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jdouble' type64='d'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, char *, jrawMonitorID *)' function_pointer='true' name='CreateRawMonitor' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='jrawMonitorID*' type64='^^{_jrawMonitorID}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jrawMonitorID)' function_pointer='true' name='DestroyRawMonitor' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jrawMonitorID' type64='^{_jrawMonitorID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jrawMonitorID)' function_pointer='true' name='RawMonitorEnter' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jrawMonitorID' type64='^{_jrawMonitorID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jrawMonitorID)' function_pointer='true' name='RawMonitorExit' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jrawMonitorID' type64='^{_jrawMonitorID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jrawMonitorID, jlong)' function_pointer='true' name='RawMonitorWait' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jrawMonitorID' type64='^{_jrawMonitorID=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jrawMonitorID)' function_pointer='true' name='RawMonitorNotify' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jrawMonitorID' type64='^{_jrawMonitorID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jrawMonitorID)' function_pointer='true' name='RawMonitorNotifyAll' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jrawMonitorID' type64='^{_jrawMonitorID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jlocation)' function_pointer='true' name='SetBreakpoint' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jlocation' type64='q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jlocation)' function_pointer='true' name='ClearBreakpoint' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jlocation' type64='q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved40' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID)' function_pointer='true' name='SetFieldAccessWatch' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID)' function_pointer='true' name='ClearFieldAccessWatch' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID)' function_pointer='true' name='SetFieldModificationWatch' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID)' function_pointer='true' name='ClearFieldModificationWatch' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jboolean *)' function_pointer='true' name='IsModifiableClass' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jlong, unsigned char **)' function_pointer='true' name='Allocate' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='unsigned char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, unsigned char *)' function_pointer='true' name='Deallocate' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='unsigned char*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, char **, char **)' function_pointer='true' name='GetClassSignature' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *)' function_pointer='true' name='GetClassStatus' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, char **)' function_pointer='true' name='GetSourceFileName' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *)' function_pointer='true' name='GetClassModifiers' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *, jmethodID **)' function_pointer='true' name='GetClassMethods' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jmethodID**' type64='^^^{_jmethodID}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *, jfieldID **)' function_pointer='true' name='GetClassFields' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jfieldID**' type64='^^^{_jfieldID}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *, jclass **)' function_pointer='true' name='GetImplementedInterfaces' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jclass**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jboolean *)' function_pointer='true' name='IsInterface' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jboolean *)' function_pointer='true' name='IsArrayClass' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jobject *)' function_pointer='true' name='GetClassLoader' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jobject*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jint *)' function_pointer='true' name='GetObjectHashCode' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jvmtiMonitorUsage *)' function_pointer='true' name='GetObjectMonitorUsage' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jvmtiMonitorUsage*' type64='^{_jvmtiMonitorUsage=^{_jobject}ii^^{_jobject}i^^{_jobject}}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID, char **, char **, char **)' function_pointer='true' name='GetFieldName' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID, jclass *)' function_pointer='true' name='GetFieldDeclaringClass' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jclass*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID, jint *)' function_pointer='true' name='GetFieldModifiers' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID, jboolean *)' function_pointer='true' name='IsFieldSynthetic' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, char **, char **, char **)' function_pointer='true' name='GetMethodName' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jclass *)' function_pointer='true' name='GetMethodDeclaringClass' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jclass*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jint *)' function_pointer='true' name='GetMethodModifiers' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved67' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jint *)' function_pointer='true' name='GetMaxLocals' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jint *)' function_pointer='true' name='GetArgumentsSize' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jint *, jvmtiLineNumberEntry **)' function_pointer='true' name='GetLineNumberTable' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jvmtiLineNumberEntry**' type64='^^{_jvmtiLineNumberEntry}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jlocation *, jlocation *)' function_pointer='true' name='GetMethodLocation' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jlocation*' type64='^q'/>
<arg declared_type64='jlocation*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jint *, jvmtiLocalVariableEntry **)' function_pointer='true' name='GetLocalVariableTable' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jvmtiLocalVariableEntry**' type64='^^{_jvmtiLocalVariableEntry}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, char *)' function_pointer='true' name='SetNativeMethodPrefix' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, char **)' function_pointer='true' name='SetNativeMethodPrefixes' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jint *, unsigned char **)' function_pointer='true' name='GetBytecodes' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='unsigned char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jboolean *)' function_pointer='true' name='IsMethodNative' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jboolean *)' function_pointer='true' name='IsMethodSynthetic' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *, jclass **)' function_pointer='true' name='GetLoadedClasses' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jclass**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jint *, jclass **)' function_pointer='true' name='GetClassLoaderClasses' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jclass**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread)' function_pointer='true' name='PopFrame' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jobject)' function_pointer='true' name='ForceEarlyReturnObject' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint)' function_pointer='true' name='ForceEarlyReturnInt' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jlong)' function_pointer='true' name='ForceEarlyReturnLong' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jfloat)' function_pointer='true' name='ForceEarlyReturnFloat' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jfloat' type64='f'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jdouble)' function_pointer='true' name='ForceEarlyReturnDouble' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jdouble' type64='d'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread)' function_pointer='true' name='ForceEarlyReturnVoid' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jvmtiClassDefinition *)' function_pointer='true' name='RedefineClasses' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='jvmtiClassDefinition*' type64='^{_jvmtiClassDefinition=^{_jobject}i*}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *)' function_pointer='true' name='GetVersionNumber' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiCapabilities *)' function_pointer='true' name='GetCapabilities' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiCapabilities*' type64='^{_jvmtiCapabilities=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b7b16b16b16b16b16}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, char **)' function_pointer='true' name='GetSourceDebugExtension' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jboolean *)' function_pointer='true' name='IsMethodObsolete' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jthread *, jvmtiError *)' function_pointer='true' name='SuspendThreadList' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='jthread*' type64='^^{_jobject}'/>
<arg declared_type64='jvmtiError*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jthread *, jvmtiError *)' function_pointer='true' name='ResumeThreadList' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='jthread*' type64='^^{_jobject}'/>
<arg declared_type64='jvmtiError*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved94' type64='^v'/>
<field declared_type64='void*' name='reserved95' type64='^v'/>
<field declared_type64='void*' name='reserved96' type64='^v'/>
<field declared_type64='void*' name='reserved97' type64='^v'/>
<field declared_type64='void*' name='reserved98' type64='^v'/>
<field declared_type64='void*' name='reserved99' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jvmtiStackInfo **, jint *)' function_pointer='true' name='GetAllStackTraces' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jvmtiStackInfo**' type64='^^{_jvmtiStackInfo}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jthread *, jint, jvmtiStackInfo **)' function_pointer='true' name='GetThreadListStackTraces' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='jthread*' type64='^^{_jobject}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jvmtiStackInfo**' type64='^^{_jvmtiStackInfo}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, void **)' function_pointer='true' name='GetThreadLocalStorage' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, void *)' function_pointer='true' name='SetThreadLocalStorage' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jvmtiFrameInfo *, jint *)' function_pointer='true' name='GetStackTrace' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jvmtiFrameInfo*' type64='^{_jvmtiFrameInfo=^{_jmethodID}q}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved105' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jlong *)' function_pointer='true' name='GetTag' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jlong)' function_pointer='true' name='SetTag' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *)' function_pointer='true' name='ForceGarbageCollection' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jvmtiObjectReferenceCallback, void *)' function_pointer='true' name='IterateOverObjectsReachableFromObject' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jvmtiObjectReferenceCallback' function_pointer='true' type64='^?'>
<arg declared_type64='jvmtiObjectReferenceKind' type64='i'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiIterationControl' type64='i'/>
</arg>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiHeapRootCallback, jvmtiStackReferenceCallback, jvmtiObjectReferenceCallback, void *)' function_pointer='true' name='IterateOverReachableObjects' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiHeapRootCallback' function_pointer='true' type64='^?'>
<arg declared_type64='jvmtiHeapRootKind' type64='i'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiIterationControl' type64='i'/>
</arg>
<arg declared_type64='jvmtiStackReferenceCallback' function_pointer='true' type64='^?'>
<arg declared_type64='jvmtiHeapRootKind' type64='i'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiIterationControl' type64='i'/>
</arg>
<arg declared_type64='jvmtiObjectReferenceCallback' function_pointer='true' type64='^?'>
<arg declared_type64='jvmtiObjectReferenceKind' type64='i'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiIterationControl' type64='i'/>
</arg>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiHeapObjectFilter, jvmtiHeapObjectCallback, void *)' function_pointer='true' name='IterateOverHeap' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiHeapObjectFilter' type64='i'/>
<arg declared_type64='jvmtiHeapObjectCallback' function_pointer='true' type64='^?'>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiIterationControl' type64='i'/>
</arg>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jvmtiHeapObjectFilter, jvmtiHeapObjectCallback, void *)' function_pointer='true' name='IterateOverInstancesOfClass' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jvmtiHeapObjectFilter' type64='i'/>
<arg declared_type64='jvmtiHeapObjectCallback' function_pointer='true' type64='^?'>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiIterationControl' type64='i'/>
</arg>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved113' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jlong *, jint *, jobject **, jlong **)' function_pointer='true' name='GetObjectsWithTags' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jobject**' type64='^^^{_jobject}'/>
<arg declared_type64='jlong**' type64='^^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jclass, jobject, jvmtiHeapCallbacks *, void *)' function_pointer='true' name='FollowReferences' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jvmtiHeapCallbacks*' type64='^{_jvmtiHeapCallbacks=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jclass, jvmtiHeapCallbacks *, void *)' function_pointer='true' name='IterateThroughHeap' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jvmtiHeapCallbacks*' type64='^{_jvmtiHeapCallbacks=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved117' type64='^v'/>
<field declared_type64='void*' name='reserved118' type64='^v'/>
<field declared_type64='void*' name='reserved119' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jniNativeInterface *)' function_pointer='true' name='SetJNIFunctionTable' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='jniNativeInterface*' type64='^{JNINativeInterface_=^v^v^v^v^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jniNativeInterface **)' function_pointer='true' name='GetJNIFunctionTable' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jniNativeInterface**' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiEventCallbacks *, jint)' function_pointer='true' name='SetEventCallbacks' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='jvmtiEventCallbacks*' type64='^{_jvmtiEventCallbacks=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiEvent)' function_pointer='true' name='GenerateEvents' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiEvent' type64='i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *, jvmtiExtensionFunctionInfo **)' function_pointer='true' name='GetExtensionFunctions' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jvmtiExtensionFunctionInfo**' type64='^^{_jvmtiExtensionFunctionInfo}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *, jvmtiExtensionEventInfo **)' function_pointer='true' name='GetExtensionEvents' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jvmtiExtensionEventInfo**' type64='^^{_jvmtiExtensionEventInfo}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jvmtiExtensionEvent)' function_pointer='true' name='SetExtensionEventCallback' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jvmtiExtensionEvent' function_pointer='true' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *)' function_pointer='true' name='DisposeEnvironment' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiError, char **)' function_pointer='true' name='GetErrorName' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiError' type64='i'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiJlocationFormat *)' function_pointer='true' name='GetJLocationFormat' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiJlocationFormat*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *, char ***)' function_pointer='true' name='GetSystemProperties' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='char***' type64='^^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, char *, char **)' function_pointer='true' name='GetSystemProperty' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, char *, char *)' function_pointer='true' name='SetSystemProperty' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiPhase *)' function_pointer='true' name='GetPhase' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiPhase*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiTimerInfo *)' function_pointer='true' name='GetCurrentThreadCpuTimerInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiTimerInfo*' type64='^{_jvmtiTimerInfo=qCCiqq}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jlong *)' function_pointer='true' name='GetCurrentThreadCpuTime' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiTimerInfo *)' function_pointer='true' name='GetThreadCpuTimerInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiTimerInfo*' type64='^{_jvmtiTimerInfo=qCCiqq}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jlong *)' function_pointer='true' name='GetThreadCpuTime' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiTimerInfo *)' function_pointer='true' name='GetTimerInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiTimerInfo*' type64='^{_jvmtiTimerInfo=qCCiqq}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jlong *)' function_pointer='true' name='GetTime' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiCapabilities *)' function_pointer='true' name='GetPotentialCapabilities' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiCapabilities*' type64='^{_jvmtiCapabilities=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b7b16b16b16b16b16}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved141' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiCapabilities *)' function_pointer='true' name='AddCapabilities' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='jvmtiCapabilities*' type64='^{_jvmtiCapabilities=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b7b16b16b16b16b16}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiCapabilities *)' function_pointer='true' name='RelinquishCapabilities' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='jvmtiCapabilities*' type64='^{_jvmtiCapabilities=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b7b16b16b16b16b16}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *)' function_pointer='true' name='GetAvailableProcessors' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *, jint *)' function_pointer='true' name='GetClassVersionNumbers' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *, jint *, unsigned char **)' function_pointer='true' name='GetConstantPool' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='unsigned char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, void **)' function_pointer='true' name='GetEnvironmentLocalStorage' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, void *)' function_pointer='true' name='SetEnvironmentLocalStorage' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, char *)' function_pointer='true' name='AddToBootstrapClassLoaderSearch' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiVerboseFlag, jboolean)' function_pointer='true' name='SetVerboseFlag' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiVerboseFlag' type64='i'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, char *)' function_pointer='true' name='AddToSystemClassLoaderSearch' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jclass *)' function_pointer='true' name='RetransformClasses' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='jclass*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint *, jvmtiMonitorStackDepthInfo **)' function_pointer='true' name='GetOwnedMonitorStackDepthInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jvmtiMonitorStackDepthInfo**' type64='^^{_jvmtiMonitorStackDepthInfo}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jlong *)' function_pointer='true' name='GetObjectSize' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
</struct>
<struct name='jvmtiInterface_1_' type64='{jvmtiInterface_1_=&quot;reserved1&quot;^v&quot;SetEventNotificationMode&quot;^?&quot;reserved3&quot;^v&quot;GetAllThreads&quot;^?&quot;SuspendThread&quot;^?&quot;ResumeThread&quot;^?&quot;StopThread&quot;^?&quot;InterruptThread&quot;^?&quot;GetThreadInfo&quot;^?&quot;GetOwnedMonitorInfo&quot;^?&quot;GetCurrentContendedMonitor&quot;^?&quot;RunAgentThread&quot;^?&quot;GetTopThreadGroups&quot;^?&quot;GetThreadGroupInfo&quot;^?&quot;GetThreadGroupChildren&quot;^?&quot;GetFrameCount&quot;^?&quot;GetThreadState&quot;^?&quot;GetCurrentThread&quot;^?&quot;GetFrameLocation&quot;^?&quot;NotifyFramePop&quot;^?&quot;GetLocalObject&quot;^?&quot;GetLocalInt&quot;^?&quot;GetLocalLong&quot;^?&quot;GetLocalFloat&quot;^?&quot;GetLocalDouble&quot;^?&quot;SetLocalObject&quot;^?&quot;SetLocalInt&quot;^?&quot;SetLocalLong&quot;^?&quot;SetLocalFloat&quot;^?&quot;SetLocalDouble&quot;^?&quot;CreateRawMonitor&quot;^?&quot;DestroyRawMonitor&quot;^?&quot;RawMonitorEnter&quot;^?&quot;RawMonitorExit&quot;^?&quot;RawMonitorWait&quot;^?&quot;RawMonitorNotify&quot;^?&quot;RawMonitorNotifyAll&quot;^?&quot;SetBreakpoint&quot;^?&quot;ClearBreakpoint&quot;^?&quot;reserved40&quot;^v&quot;SetFieldAccessWatch&quot;^?&quot;ClearFieldAccessWatch&quot;^?&quot;SetFieldModificationWatch&quot;^?&quot;ClearFieldModificationWatch&quot;^?&quot;IsModifiableClass&quot;^?&quot;Allocate&quot;^?&quot;Deallocate&quot;^?&quot;GetClassSignature&quot;^?&quot;GetClassStatus&quot;^?&quot;GetSourceFileName&quot;^?&quot;GetClassModifiers&quot;^?&quot;GetClassMethods&quot;^?&quot;GetClassFields&quot;^?&quot;GetImplementedInterfaces&quot;^?&quot;IsInterface&quot;^?&quot;IsArrayClass&quot;^?&quot;GetClassLoader&quot;^?&quot;GetObjectHashCode&quot;^?&quot;GetObjectMonitorUsage&quot;^?&quot;GetFieldName&quot;^?&quot;GetFieldDeclaringClass&quot;^?&quot;GetFieldModifiers&quot;^?&quot;IsFieldSynthetic&quot;^?&quot;GetMethodName&quot;^?&quot;GetMethodDeclaringClass&quot;^?&quot;GetMethodModifiers&quot;^?&quot;reserved67&quot;^v&quot;GetMaxLocals&quot;^?&quot;GetArgumentsSize&quot;^?&quot;GetLineNumberTable&quot;^?&quot;GetMethodLocation&quot;^?&quot;GetLocalVariableTable&quot;^?&quot;SetNativeMethodPrefix&quot;^?&quot;SetNativeMethodPrefixes&quot;^?&quot;GetBytecodes&quot;^?&quot;IsMethodNative&quot;^?&quot;IsMethodSynthetic&quot;^?&quot;GetLoadedClasses&quot;^?&quot;GetClassLoaderClasses&quot;^?&quot;PopFrame&quot;^?&quot;ForceEarlyReturnObject&quot;^?&quot;ForceEarlyReturnInt&quot;^?&quot;ForceEarlyReturnLong&quot;^?&quot;ForceEarlyReturnFloat&quot;^?&quot;ForceEarlyReturnDouble&quot;^?&quot;ForceEarlyReturnVoid&quot;^?&quot;RedefineClasses&quot;^?&quot;GetVersionNumber&quot;^?&quot;GetCapabilities&quot;^?&quot;GetSourceDebugExtension&quot;^?&quot;IsMethodObsolete&quot;^?&quot;SuspendThreadList&quot;^?&quot;ResumeThreadList&quot;^?&quot;reserved94&quot;^v&quot;reserved95&quot;^v&quot;reserved96&quot;^v&quot;reserved97&quot;^v&quot;reserved98&quot;^v&quot;reserved99&quot;^v&quot;GetAllStackTraces&quot;^?&quot;GetThreadListStackTraces&quot;^?&quot;GetThreadLocalStorage&quot;^?&quot;SetThreadLocalStorage&quot;^?&quot;GetStackTrace&quot;^?&quot;reserved105&quot;^v&quot;GetTag&quot;^?&quot;SetTag&quot;^?&quot;ForceGarbageCollection&quot;^?&quot;IterateOverObjectsReachableFromObject&quot;^?&quot;IterateOverReachableObjects&quot;^?&quot;IterateOverHeap&quot;^?&quot;IterateOverInstancesOfClass&quot;^?&quot;reserved113&quot;^v&quot;GetObjectsWithTags&quot;^?&quot;FollowReferences&quot;^?&quot;IterateThroughHeap&quot;^?&quot;reserved117&quot;^v&quot;reserved118&quot;^v&quot;reserved119&quot;^v&quot;SetJNIFunctionTable&quot;^?&quot;GetJNIFunctionTable&quot;^?&quot;SetEventCallbacks&quot;^?&quot;GenerateEvents&quot;^?&quot;GetExtensionFunctions&quot;^?&quot;GetExtensionEvents&quot;^?&quot;SetExtensionEventCallback&quot;^?&quot;DisposeEnvironment&quot;^?&quot;GetErrorName&quot;^?&quot;GetJLocationFormat&quot;^?&quot;GetSystemProperties&quot;^?&quot;GetSystemProperty&quot;^?&quot;SetSystemProperty&quot;^?&quot;GetPhase&quot;^?&quot;GetCurrentThreadCpuTimerInfo&quot;^?&quot;GetCurrentThreadCpuTime&quot;^?&quot;GetThreadCpuTimerInfo&quot;^?&quot;GetThreadCpuTime&quot;^?&quot;GetTimerInfo&quot;^?&quot;GetTime&quot;^?&quot;GetPotentialCapabilities&quot;^?&quot;reserved141&quot;^v&quot;AddCapabilities&quot;^?&quot;RelinquishCapabilities&quot;^?&quot;GetAvailableProcessors&quot;^?&quot;GetClassVersionNumbers&quot;^?&quot;GetConstantPool&quot;^?&quot;GetEnvironmentLocalStorage&quot;^?&quot;SetEnvironmentLocalStorage&quot;^?&quot;AddToBootstrapClassLoaderSearch&quot;^?&quot;SetVerboseFlag&quot;^?&quot;AddToSystemClassLoaderSearch&quot;^?&quot;RetransformClasses&quot;^?&quot;GetOwnedMonitorStackDepthInfo&quot;^?&quot;GetObjectSize&quot;^?}'>
<field declared_type64='void*' name='reserved1' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiEventMode, jvmtiEvent, jthread, ...)' function_pointer='true' name='SetEventNotificationMode' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiEventMode' type64='i'/>
<arg declared_type64='jvmtiEvent' type64='i'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved3' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *, jthread **)' function_pointer='true' name='GetAllThreads' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jthread**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread)' function_pointer='true' name='SuspendThread' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread)' function_pointer='true' name='ResumeThread' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jobject)' function_pointer='true' name='StopThread' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread)' function_pointer='true' name='InterruptThread' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jvmtiThreadInfo *)' function_pointer='true' name='GetThreadInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jvmtiThreadInfo*' type64='^{_jvmtiThreadInfo=*iC^{_jobject}^{_jobject}}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint *, jobject **)' function_pointer='true' name='GetOwnedMonitorInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jobject**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jobject *)' function_pointer='true' name='GetCurrentContendedMonitor' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jobject*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jvmtiStartFunction, void *, jint)' function_pointer='true' name='RunAgentThread' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jvmtiStartFunction' function_pointer='true' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg const='true' declared_type64='void*' type64='^v'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *, jthreadGroup **)' function_pointer='true' name='GetTopThreadGroups' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jthreadGroup**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthreadGroup, jvmtiThreadGroupInfo *)' function_pointer='true' name='GetThreadGroupInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthreadGroup' type64='^{_jobject=}'/>
<arg declared_type64='jvmtiThreadGroupInfo*' type64='^{_jvmtiThreadGroupInfo=^{_jobject}*iC}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthreadGroup, jint *, jthread **, jint *, jthreadGroup **)' function_pointer='true' name='GetThreadGroupChildren' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthreadGroup' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jthread**' type64='^^^{_jobject}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jthreadGroup**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint *)' function_pointer='true' name='GetFrameCount' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint *)' function_pointer='true' name='GetThreadState' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread *)' function_pointer='true' name='GetCurrentThread' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jmethodID *, jlocation *)' function_pointer='true' name='GetFrameLocation' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jmethodID*' type64='^^{_jmethodID}'/>
<arg declared_type64='jlocation*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint)' function_pointer='true' name='NotifyFramePop' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jobject *)' function_pointer='true' name='GetLocalObject' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jobject*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jint *)' function_pointer='true' name='GetLocalInt' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jlong *)' function_pointer='true' name='GetLocalLong' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jfloat *)' function_pointer='true' name='GetLocalFloat' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jfloat*' type64='^f'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jdouble *)' function_pointer='true' name='GetLocalDouble' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jdouble*' type64='^d'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jobject)' function_pointer='true' name='SetLocalObject' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jint)' function_pointer='true' name='SetLocalInt' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jlong)' function_pointer='true' name='SetLocalLong' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jfloat)' function_pointer='true' name='SetLocalFloat' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jfloat' type64='f'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jdouble)' function_pointer='true' name='SetLocalDouble' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jdouble' type64='d'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, char *, jrawMonitorID *)' function_pointer='true' name='CreateRawMonitor' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='jrawMonitorID*' type64='^^{_jrawMonitorID}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jrawMonitorID)' function_pointer='true' name='DestroyRawMonitor' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jrawMonitorID' type64='^{_jrawMonitorID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jrawMonitorID)' function_pointer='true' name='RawMonitorEnter' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jrawMonitorID' type64='^{_jrawMonitorID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jrawMonitorID)' function_pointer='true' name='RawMonitorExit' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jrawMonitorID' type64='^{_jrawMonitorID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jrawMonitorID, jlong)' function_pointer='true' name='RawMonitorWait' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jrawMonitorID' type64='^{_jrawMonitorID=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jrawMonitorID)' function_pointer='true' name='RawMonitorNotify' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jrawMonitorID' type64='^{_jrawMonitorID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jrawMonitorID)' function_pointer='true' name='RawMonitorNotifyAll' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jrawMonitorID' type64='^{_jrawMonitorID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jlocation)' function_pointer='true' name='SetBreakpoint' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jlocation' type64='q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jlocation)' function_pointer='true' name='ClearBreakpoint' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jlocation' type64='q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved40' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID)' function_pointer='true' name='SetFieldAccessWatch' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID)' function_pointer='true' name='ClearFieldAccessWatch' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID)' function_pointer='true' name='SetFieldModificationWatch' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID)' function_pointer='true' name='ClearFieldModificationWatch' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jboolean *)' function_pointer='true' name='IsModifiableClass' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jlong, unsigned char **)' function_pointer='true' name='Allocate' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='unsigned char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, unsigned char *)' function_pointer='true' name='Deallocate' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='unsigned char*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, char **, char **)' function_pointer='true' name='GetClassSignature' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *)' function_pointer='true' name='GetClassStatus' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, char **)' function_pointer='true' name='GetSourceFileName' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *)' function_pointer='true' name='GetClassModifiers' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *, jmethodID **)' function_pointer='true' name='GetClassMethods' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jmethodID**' type64='^^^{_jmethodID}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *, jfieldID **)' function_pointer='true' name='GetClassFields' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jfieldID**' type64='^^^{_jfieldID}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *, jclass **)' function_pointer='true' name='GetImplementedInterfaces' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jclass**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jboolean *)' function_pointer='true' name='IsInterface' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jboolean *)' function_pointer='true' name='IsArrayClass' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jobject *)' function_pointer='true' name='GetClassLoader' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jobject*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jint *)' function_pointer='true' name='GetObjectHashCode' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jvmtiMonitorUsage *)' function_pointer='true' name='GetObjectMonitorUsage' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jvmtiMonitorUsage*' type64='^{_jvmtiMonitorUsage=^{_jobject}ii^^{_jobject}i^^{_jobject}}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID, char **, char **, char **)' function_pointer='true' name='GetFieldName' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID, jclass *)' function_pointer='true' name='GetFieldDeclaringClass' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jclass*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID, jint *)' function_pointer='true' name='GetFieldModifiers' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jfieldID, jboolean *)' function_pointer='true' name='IsFieldSynthetic' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, char **, char **, char **)' function_pointer='true' name='GetMethodName' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='char**' type64='^*'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jclass *)' function_pointer='true' name='GetMethodDeclaringClass' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jclass*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jint *)' function_pointer='true' name='GetMethodModifiers' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved67' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jint *)' function_pointer='true' name='GetMaxLocals' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jint *)' function_pointer='true' name='GetArgumentsSize' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jint *, jvmtiLineNumberEntry **)' function_pointer='true' name='GetLineNumberTable' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jvmtiLineNumberEntry**' type64='^^{_jvmtiLineNumberEntry}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jlocation *, jlocation *)' function_pointer='true' name='GetMethodLocation' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jlocation*' type64='^q'/>
<arg declared_type64='jlocation*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jint *, jvmtiLocalVariableEntry **)' function_pointer='true' name='GetLocalVariableTable' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jvmtiLocalVariableEntry**' type64='^^{_jvmtiLocalVariableEntry}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, char *)' function_pointer='true' name='SetNativeMethodPrefix' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, char **)' function_pointer='true' name='SetNativeMethodPrefixes' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jint *, unsigned char **)' function_pointer='true' name='GetBytecodes' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='unsigned char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jboolean *)' function_pointer='true' name='IsMethodNative' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jboolean *)' function_pointer='true' name='IsMethodSynthetic' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *, jclass **)' function_pointer='true' name='GetLoadedClasses' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jclass**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jint *, jclass **)' function_pointer='true' name='GetClassLoaderClasses' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jclass**' type64='^^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread)' function_pointer='true' name='PopFrame' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jobject)' function_pointer='true' name='ForceEarlyReturnObject' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint)' function_pointer='true' name='ForceEarlyReturnInt' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jlong)' function_pointer='true' name='ForceEarlyReturnLong' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jfloat)' function_pointer='true' name='ForceEarlyReturnFloat' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jfloat' type64='f'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jdouble)' function_pointer='true' name='ForceEarlyReturnDouble' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jdouble' type64='d'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread)' function_pointer='true' name='ForceEarlyReturnVoid' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jvmtiClassDefinition *)' function_pointer='true' name='RedefineClasses' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='jvmtiClassDefinition*' type64='^{_jvmtiClassDefinition=^{_jobject}i*}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *)' function_pointer='true' name='GetVersionNumber' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiCapabilities *)' function_pointer='true' name='GetCapabilities' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiCapabilities*' type64='^{_jvmtiCapabilities=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b7b16b16b16b16b16}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, char **)' function_pointer='true' name='GetSourceDebugExtension' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jmethodID, jboolean *)' function_pointer='true' name='IsMethodObsolete' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jthread *, jvmtiError *)' function_pointer='true' name='SuspendThreadList' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='jthread*' type64='^^{_jobject}'/>
<arg declared_type64='jvmtiError*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jthread *, jvmtiError *)' function_pointer='true' name='ResumeThreadList' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='jthread*' type64='^^{_jobject}'/>
<arg declared_type64='jvmtiError*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved94' type64='^v'/>
<field declared_type64='void*' name='reserved95' type64='^v'/>
<field declared_type64='void*' name='reserved96' type64='^v'/>
<field declared_type64='void*' name='reserved97' type64='^v'/>
<field declared_type64='void*' name='reserved98' type64='^v'/>
<field declared_type64='void*' name='reserved99' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jvmtiStackInfo **, jint *)' function_pointer='true' name='GetAllStackTraces' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jvmtiStackInfo**' type64='^^{_jvmtiStackInfo}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jthread *, jint, jvmtiStackInfo **)' function_pointer='true' name='GetThreadListStackTraces' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='jthread*' type64='^^{_jobject}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jvmtiStackInfo**' type64='^^{_jvmtiStackInfo}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, void **)' function_pointer='true' name='GetThreadLocalStorage' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, void *)' function_pointer='true' name='SetThreadLocalStorage' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint, jint, jvmtiFrameInfo *, jint *)' function_pointer='true' name='GetStackTrace' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jvmtiFrameInfo*' type64='^{_jvmtiFrameInfo=^{_jmethodID}q}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved105' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jlong *)' function_pointer='true' name='GetTag' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jlong)' function_pointer='true' name='SetTag' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *)' function_pointer='true' name='ForceGarbageCollection' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jvmtiObjectReferenceCallback, void *)' function_pointer='true' name='IterateOverObjectsReachableFromObject' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jvmtiObjectReferenceCallback' function_pointer='true' type64='^?'>
<arg declared_type64='jvmtiObjectReferenceKind' type64='i'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiIterationControl' type64='i'/>
</arg>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiHeapRootCallback, jvmtiStackReferenceCallback, jvmtiObjectReferenceCallback, void *)' function_pointer='true' name='IterateOverReachableObjects' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiHeapRootCallback' function_pointer='true' type64='^?'>
<arg declared_type64='jvmtiHeapRootKind' type64='i'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiIterationControl' type64='i'/>
</arg>
<arg declared_type64='jvmtiStackReferenceCallback' function_pointer='true' type64='^?'>
<arg declared_type64='jvmtiHeapRootKind' type64='i'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiIterationControl' type64='i'/>
</arg>
<arg declared_type64='jvmtiObjectReferenceCallback' function_pointer='true' type64='^?'>
<arg declared_type64='jvmtiObjectReferenceKind' type64='i'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiIterationControl' type64='i'/>
</arg>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiHeapObjectFilter, jvmtiHeapObjectCallback, void *)' function_pointer='true' name='IterateOverHeap' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiHeapObjectFilter' type64='i'/>
<arg declared_type64='jvmtiHeapObjectCallback' function_pointer='true' type64='^?'>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiIterationControl' type64='i'/>
</arg>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jvmtiHeapObjectFilter, jvmtiHeapObjectCallback, void *)' function_pointer='true' name='IterateOverInstancesOfClass' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jvmtiHeapObjectFilter' type64='i'/>
<arg declared_type64='jvmtiHeapObjectCallback' function_pointer='true' type64='^?'>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong' type64='q'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiIterationControl' type64='i'/>
</arg>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved113' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jlong *, jint *, jobject **, jlong **)' function_pointer='true' name='GetObjectsWithTags' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jobject**' type64='^^^{_jobject}'/>
<arg declared_type64='jlong**' type64='^^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jclass, jobject, jvmtiHeapCallbacks *, void *)' function_pointer='true' name='FollowReferences' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jvmtiHeapCallbacks*' type64='^{_jvmtiHeapCallbacks=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jclass, jvmtiHeapCallbacks *, void *)' function_pointer='true' name='IterateThroughHeap' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jvmtiHeapCallbacks*' type64='^{_jvmtiHeapCallbacks=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved117' type64='^v'/>
<field declared_type64='void*' name='reserved118' type64='^v'/>
<field declared_type64='void*' name='reserved119' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jniNativeInterface *)' function_pointer='true' name='SetJNIFunctionTable' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='jniNativeInterface*' type64='^{JNINativeInterface_=^v^v^v^v^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jniNativeInterface **)' function_pointer='true' name='GetJNIFunctionTable' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jniNativeInterface**' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiEventCallbacks *, jint)' function_pointer='true' name='SetEventCallbacks' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='jvmtiEventCallbacks*' type64='^{_jvmtiEventCallbacks=^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiEvent)' function_pointer='true' name='GenerateEvents' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiEvent' type64='i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *, jvmtiExtensionFunctionInfo **)' function_pointer='true' name='GetExtensionFunctions' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jvmtiExtensionFunctionInfo**' type64='^^{_jvmtiExtensionFunctionInfo}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *, jvmtiExtensionEventInfo **)' function_pointer='true' name='GetExtensionEvents' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jvmtiExtensionEventInfo**' type64='^^{_jvmtiExtensionEventInfo}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jvmtiExtensionEvent)' function_pointer='true' name='SetExtensionEventCallback' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg declared_type64='jvmtiExtensionEvent' function_pointer='true' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *)' function_pointer='true' name='DisposeEnvironment' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiError, char **)' function_pointer='true' name='GetErrorName' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiError' type64='i'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiJlocationFormat *)' function_pointer='true' name='GetJLocationFormat' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiJlocationFormat*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *, char ***)' function_pointer='true' name='GetSystemProperties' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='char***' type64='^^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, char *, char **)' function_pointer='true' name='GetSystemProperty' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, char *, char *)' function_pointer='true' name='SetSystemProperty' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiPhase *)' function_pointer='true' name='GetPhase' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiPhase*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiTimerInfo *)' function_pointer='true' name='GetCurrentThreadCpuTimerInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiTimerInfo*' type64='^{_jvmtiTimerInfo=qCCiqq}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jlong *)' function_pointer='true' name='GetCurrentThreadCpuTime' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiTimerInfo *)' function_pointer='true' name='GetThreadCpuTimerInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiTimerInfo*' type64='^{_jvmtiTimerInfo=qCCiqq}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jlong *)' function_pointer='true' name='GetThreadCpuTime' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiTimerInfo *)' function_pointer='true' name='GetTimerInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiTimerInfo*' type64='^{_jvmtiTimerInfo=qCCiqq}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jlong *)' function_pointer='true' name='GetTime' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiCapabilities *)' function_pointer='true' name='GetPotentialCapabilities' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiCapabilities*' type64='^{_jvmtiCapabilities=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b7b16b16b16b16b16}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='void*' name='reserved141' type64='^v'/>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiCapabilities *)' function_pointer='true' name='AddCapabilities' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='jvmtiCapabilities*' type64='^{_jvmtiCapabilities=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b7b16b16b16b16b16}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiCapabilities *)' function_pointer='true' name='RelinquishCapabilities' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='jvmtiCapabilities*' type64='^{_jvmtiCapabilities=b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b1b7b16b16b16b16b16}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint *)' function_pointer='true' name='GetAvailableProcessors' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *, jint *)' function_pointer='true' name='GetClassVersionNumbers' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jclass, jint *, jint *, unsigned char **)' function_pointer='true' name='GetConstantPool' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='unsigned char**' type64='^*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, void **)' function_pointer='true' name='GetEnvironmentLocalStorage' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='void**' type64='^^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, void *)' function_pointer='true' name='SetEnvironmentLocalStorage' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='void*' type64='^v'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, char *)' function_pointer='true' name='AddToBootstrapClassLoaderSearch' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jvmtiVerboseFlag, jboolean)' function_pointer='true' name='SetVerboseFlag' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jvmtiVerboseFlag' type64='i'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, char *)' function_pointer='true' name='AddToSystemClassLoaderSearch' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jint, jclass *)' function_pointer='true' name='RetransformClasses' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jint' type64='i'/>
<arg const='true' declared_type64='jclass*' type64='^^{_jobject}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jthread, jint *, jvmtiMonitorStackDepthInfo **)' function_pointer='true' name='GetOwnedMonitorStackDepthInfo' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jthread' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jvmtiMonitorStackDepthInfo**' type64='^^{_jvmtiMonitorStackDepthInfo}'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
<field declared_type64='jvmtiError (*)(jvmtiEnv *, jobject, jlong *)' function_pointer='true' name='GetObjectSize' type64='^?'>
<arg declared_type64='jvmtiEnv*' type64='^^{jvmtiInterface_1_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='jvmtiError' type64='i'/>
</field>
</struct>
<struct name='jvmtiLineNumberEntry' type64='{_jvmtiLineNumberEntry=&quot;start_location&quot;q&quot;line_number&quot;i}'>
<field declared_type64='jlocation' name='start_location' type64='q'/>
<field declared_type64='jint' name='line_number' type64='i'/>
</struct>
<struct name='jvmtiLocalVariableEntry' type64='{_jvmtiLocalVariableEntry=&quot;start_location&quot;q&quot;length&quot;i&quot;name&quot;*&quot;signature&quot;*&quot;generic_signature&quot;*&quot;slot&quot;i}'>
<field declared_type64='jlocation' name='start_location' type64='q'/>
<field declared_type64='jint' name='length' type64='i'/>
<field declared_type64='char*' name='name' type64='*'/>
<field declared_type64='char*' name='signature' type64='*'/>
<field declared_type64='char*' name='generic_signature' type64='*'/>
<field declared_type64='jint' name='slot' type64='i'/>
</struct>
<struct name='jvmtiMonitorStackDepthInfo' type64='{_jvmtiMonitorStackDepthInfo=&quot;monitor&quot;^{_jobject}&quot;stack_depth&quot;i}'>
<field declared_type64='jobject' name='monitor' type64='^{_jobject=}'/>
<field declared_type64='jint' name='stack_depth' type64='i'/>
</struct>
<struct name='jvmtiMonitorUsage' type64='{_jvmtiMonitorUsage=&quot;owner&quot;^{_jobject}&quot;entry_count&quot;i&quot;waiter_count&quot;i&quot;waiters&quot;^^{_jobject}&quot;notify_waiter_count&quot;i&quot;notify_waiters&quot;^^{_jobject}}'>
<field declared_type64='jthread' name='owner' type64='^{_jobject=}'/>
<field declared_type64='jint' name='entry_count' type64='i'/>
<field declared_type64='jint' name='waiter_count' type64='i'/>
<field declared_type64='jthread*' name='waiters' type64='^^{_jobject}'/>
<field declared_type64='jint' name='notify_waiter_count' type64='i'/>
<field declared_type64='jthread*' name='notify_waiters' type64='^^{_jobject}'/>
</struct>
<struct name='jvmtiParamInfo' type64='{_jvmtiParamInfo=&quot;name&quot;*&quot;kind&quot;i&quot;base_type&quot;i&quot;null_ok&quot;C}'>
<field declared_type64='char*' name='name' type64='*'/>
<field declared_type64='jvmtiParamKind' name='kind' type64='i'/>
<field declared_type64='jvmtiParamTypes' name='base_type' type64='i'/>
<field declared_type64='jboolean' name='null_ok' type64='C'/>
</struct>
<struct name='jvmtiStackInfo' type64='{_jvmtiStackInfo=&quot;thread&quot;^{_jobject}&quot;state&quot;i&quot;frame_buffer&quot;^{_jvmtiFrameInfo}&quot;frame_count&quot;i}'>
<field declared_type64='jthread' name='thread' type64='^{_jobject=}'/>
<field declared_type64='jint' name='state' type64='i'/>
<field declared_type64='jvmtiFrameInfo*' name='frame_buffer' type64='^{_jvmtiFrameInfo=^{_jmethodID}q}'/>
<field declared_type64='jint' name='frame_count' type64='i'/>
</struct>
<struct name='jvmtiThreadGroupInfo' type64='{_jvmtiThreadGroupInfo=&quot;parent&quot;^{_jobject}&quot;name&quot;*&quot;max_priority&quot;i&quot;is_daemon&quot;C}'>
<field declared_type64='jthreadGroup' name='parent' type64='^{_jobject=}'/>
<field declared_type64='char*' name='name' type64='*'/>
<field declared_type64='jint' name='max_priority' type64='i'/>
<field declared_type64='jboolean' name='is_daemon' type64='C'/>
</struct>
<struct name='jvmtiThreadInfo' type64='{_jvmtiThreadInfo=&quot;name&quot;*&quot;priority&quot;i&quot;is_daemon&quot;C&quot;thread_group&quot;^{_jobject}&quot;context_class_loader&quot;^{_jobject}}'>
<field declared_type64='char*' name='name' type64='*'/>
<field declared_type64='jint' name='priority' type64='i'/>
<field declared_type64='jboolean' name='is_daemon' type64='C'/>
<field declared_type64='jthreadGroup' name='thread_group' type64='^{_jobject=}'/>
<field declared_type64='jobject' name='context_class_loader' type64='^{_jobject=}'/>
</struct>
<struct name='jvmtiTimerInfo' type64='{_jvmtiTimerInfo=&quot;max_value&quot;q&quot;may_skip_forward&quot;C&quot;may_skip_backward&quot;C&quot;kind&quot;i&quot;reserved1&quot;q&quot;reserved2&quot;q}'>
<field declared_type64='jlong' name='max_value' type64='q'/>
<field declared_type64='jboolean' name='may_skip_forward' type64='C'/>
<field declared_type64='jboolean' name='may_skip_backward' type64='C'/>
<field declared_type64='jvmtiTimerKind' name='kind' type64='i'/>
<field declared_type64='jlong' name='reserved1' type64='q'/>
<field declared_type64='jlong' name='reserved2' type64='q'/>
</struct>
<cftype name='jfieldID' type64='^{_jfieldID=}'/>
<cftype name='jmethodID' type64='^{_jmethodID=}'/>
<cftype name='jobject' type64='^{_jobject=}'/>
<cftype name='jrawMonitorID' type64='^{_jrawMonitorID=}'/>
<constant declared_type64='NSString*' name='NSDefaultJavaClassPathKey' type64='@'/>
<constant declared_type64='NSString*' name='NSDefaultJavaCompilerKey' type64='@'/>
<constant declared_type64='NSString*' name='NSDefaultJavaDebugLibraryKey' type64='@'/>
<constant declared_type64='NSString*' name='NSDefaultJavaLibraryKey' type64='@'/>
<constant declared_type64='NSString*' name='NSDefaultJavaVMKey' type64='@'/>
<constant declared_type64='NSString*' name='NSDefaultJavaVendorKey' type64='@'/>
<constant declared_type64='NSString*' name='NSDefaultObjCJavaDebugLibraryKey' type64='@'/>
<constant declared_type64='NSString*' name='NSDefaultObjCJavaLibraryKey' type64='@'/>
<constant declared_type64='NSString*' name='NSInvalidJavaClassException' type64='@'/>
<constant declared_type64='NSString*' name='NSJavaVMArgumentsKey' type64='@'/>
<enum name='JAWT_LOCK_BOUNDS_CHANGED' value64='4'/>
<enum name='JAWT_LOCK_CLIP_CHANGED' value64='2'/>
<enum name='JAWT_LOCK_ERROR' value64='1'/>
<enum name='JAWT_LOCK_SURFACE_CHANGED' value64='8'/>
<enum name='JAWT_MACOSX_USE_CALAYER' value64='2147483648'/>
<enum name='JAWT_VERSION_1_3' value64='65539'/>
<enum name='JAWT_VERSION_1_4' value64='65540'/>
<enum name='JDWPTRANSPORT_ERROR_ILLEGAL_ARGUMENT' value64='103'/>
<enum name='JDWPTRANSPORT_ERROR_ILLEGAL_STATE' value64='201'/>
<enum name='JDWPTRANSPORT_ERROR_INTERNAL' value64='113'/>
<enum name='JDWPTRANSPORT_ERROR_IO_ERROR' value64='202'/>
<enum name='JDWPTRANSPORT_ERROR_MSG_NOT_AVAILABLE' value64='204'/>
<enum name='JDWPTRANSPORT_ERROR_NONE' value64='0'/>
<enum name='JDWPTRANSPORT_ERROR_OUT_OF_MEMORY' value64='110'/>
<enum name='JDWPTRANSPORT_ERROR_TIMEOUT' value64='203'/>
<enum name='JDWPTRANSPORT_FLAGS_NONE' value64='0'/>
<enum name='JDWPTRANSPORT_FLAGS_REPLY' value64='128'/>
<enum name='JDWPTRANSPORT_VERSION_1_0' value64='65536'/>
<enum name='JDWP_ArrayReference' value64='13'/>
<enum name='JDWP_ArrayReference_GetValues' value64='2'/>
<enum name='JDWP_ArrayReference_Length' value64='1'/>
<enum name='JDWP_ArrayReference_SetValues' value64='3'/>
<enum name='JDWP_ArrayType' value64='4'/>
<enum name='JDWP_ArrayType_NewInstance' value64='1'/>
<enum name='JDWP_ClassLoaderReference' value64='14'/>
<enum name='JDWP_ClassLoaderReference_VisibleClasses' value64='1'/>
<enum name='JDWP_ClassObjectReference' value64='17'/>
<enum name='JDWP_ClassObjectReference_ReflectedType' value64='1'/>
<enum name='JDWP_ClassStatus_ERROR' value64='8'/>
<enum name='JDWP_ClassStatus_INITIALIZED' value64='4'/>
<enum name='JDWP_ClassStatus_PREPARED' value64='2'/>
<enum name='JDWP_ClassStatus_VERIFIED' value64='1'/>
<enum name='JDWP_ClassType' value64='3'/>
<enum name='JDWP_ClassType_InvokeMethod' value64='3'/>
<enum name='JDWP_ClassType_NewInstance' value64='4'/>
<enum name='JDWP_ClassType_SetValues' value64='2'/>
<enum name='JDWP_ClassType_Superclass' value64='1'/>
<enum name='JDWP_Error_ABSENT_INFORMATION' value64='101'/>
<enum name='JDWP_Error_ACCESS_DENIED' value64='111'/>
<enum name='JDWP_Error_ADD_METHOD_NOT_IMPLEMENTED' value64='63'/>
<enum name='JDWP_Error_ALREADY_INVOKING' value64='502'/>
<enum name='JDWP_Error_CIRCULAR_CLASS_DEFINITION' value64='61'/>
<enum name='JDWP_Error_CLASS_MODIFIERS_CHANGE_NOT_IMPLEMENTED' value64='70'/>
<enum name='JDWP_Error_CLASS_NOT_PREPARED' value64='22'/>
<enum name='JDWP_Error_DELETE_METHOD_NOT_IMPLEMENTED' value64='67'/>
<enum name='JDWP_Error_DUPLICATE' value64='40'/>
<enum name='JDWP_Error_FAILS_VERIFICATION' value64='62'/>
<enum name='JDWP_Error_HIERARCHY_CHANGE_NOT_IMPLEMENTED' value64='66'/>
<enum name='JDWP_Error_ILLEGAL_ARGUMENT' value64='103'/>
<enum name='JDWP_Error_INTERNAL' value64='113'/>
<enum name='JDWP_Error_INTERRUPT' value64='52'/>
<enum name='JDWP_Error_INVALID_ARRAY' value64='508'/>
<enum name='JDWP_Error_INVALID_CLASS' value64='21'/>
<enum name='JDWP_Error_INVALID_CLASS_FORMAT' value64='60'/>
<enum name='JDWP_Error_INVALID_CLASS_LOADER' value64='507'/>
<enum name='JDWP_Error_INVALID_COUNT' value64='512'/>
<enum name='JDWP_Error_INVALID_EVENT_TYPE' value64='102'/>
<enum name='JDWP_Error_INVALID_FIELDID' value64='25'/>
<enum name='JDWP_Error_INVALID_FRAMEID' value64='30'/>
<enum name='JDWP_Error_INVALID_INDEX' value64='503'/>
<enum name='JDWP_Error_INVALID_LENGTH' value64='504'/>
<enum name='JDWP_Error_INVALID_LOCATION' value64='24'/>
<enum name='JDWP_Error_INVALID_METHODID' value64='23'/>
<enum name='JDWP_Error_INVALID_MONITOR' value64='50'/>
<enum name='JDWP_Error_INVALID_OBJECT' value64='20'/>
<enum name='JDWP_Error_INVALID_PRIORITY' value64='12'/>
<enum name='JDWP_Error_INVALID_SLOT' value64='35'/>
<enum name='JDWP_Error_INVALID_STRING' value64='506'/>
<enum name='JDWP_Error_INVALID_TAG' value64='500'/>
<enum name='JDWP_Error_INVALID_THREAD' value64='10'/>
<enum name='JDWP_Error_INVALID_THREAD_GROUP' value64='11'/>
<enum name='JDWP_Error_INVALID_TYPESTATE' value64='65'/>
<enum name='JDWP_Error_METHOD_MODIFIERS_CHANGE_NOT_IMPLEMENTED' value64='71'/>
<enum name='JDWP_Error_NAMES_DONT_MATCH' value64='69'/>
<enum name='JDWP_Error_NATIVE_METHOD' value64='511'/>
<enum name='JDWP_Error_NONE' value64='0'/>
<enum name='JDWP_Error_NOT_CURRENT_FRAME' value64='33'/>
<enum name='JDWP_Error_NOT_FOUND' value64='41'/>
<enum name='JDWP_Error_NOT_IMPLEMENTED' value64='99'/>
<enum name='JDWP_Error_NOT_MONITOR_OWNER' value64='51'/>
<enum name='JDWP_Error_NO_MORE_FRAMES' value64='31'/>
<enum name='JDWP_Error_NULL_POINTER' value64='100'/>
<enum name='JDWP_Error_OPAQUE_FRAME' value64='32'/>
<enum name='JDWP_Error_OUT_OF_MEMORY' value64='110'/>
<enum name='JDWP_Error_SCHEMA_CHANGE_NOT_IMPLEMENTED' value64='64'/>
<enum name='JDWP_Error_THREAD_NOT_ALIVE' value64='15'/>
<enum name='JDWP_Error_THREAD_NOT_SUSPENDED' value64='13'/>
<enum name='JDWP_Error_THREAD_SUSPENDED' value64='14'/>
<enum name='JDWP_Error_TRANSPORT_INIT' value64='510'/>
<enum name='JDWP_Error_TRANSPORT_LOAD' value64='509'/>
<enum name='JDWP_Error_TYPE_MISMATCH' value64='34'/>
<enum name='JDWP_Error_UNATTACHED_THREAD' value64='115'/>
<enum name='JDWP_Error_UNSUPPORTED_VERSION' value64='68'/>
<enum name='JDWP_Error_VM_DEAD' value64='112'/>
<enum name='JDWP_Event' value64='64'/>
<enum name='JDWP_EventKind_BREAKPOINT' value64='2'/>
<enum name='JDWP_EventKind_CLASS_LOAD' value64='10'/>
<enum name='JDWP_EventKind_CLASS_PREPARE' value64='8'/>
<enum name='JDWP_EventKind_CLASS_UNLOAD' value64='9'/>
<enum name='JDWP_EventKind_EXCEPTION' value64='4'/>
<enum name='JDWP_EventKind_EXCEPTION_CATCH' value64='30'/>
<enum name='JDWP_EventKind_FIELD_ACCESS' value64='20'/>
<enum name='JDWP_EventKind_FIELD_MODIFICATION' value64='21'/>
<enum name='JDWP_EventKind_FRAME_POP' value64='3'/>
<enum name='JDWP_EventKind_METHOD_ENTRY' value64='40'/>
<enum name='JDWP_EventKind_METHOD_EXIT' value64='41'/>
<enum name='JDWP_EventKind_METHOD_EXIT_WITH_RETURN_VALUE' value64='42'/>
<enum name='JDWP_EventKind_MONITOR_CONTENDED_ENTER' value64='43'/>
<enum name='JDWP_EventKind_MONITOR_CONTENDED_ENTERED' value64='44'/>
<enum name='JDWP_EventKind_MONITOR_WAIT' value64='45'/>
<enum name='JDWP_EventKind_MONITOR_WAITED' value64='46'/>
<enum name='JDWP_EventKind_SINGLE_STEP' value64='1'/>
<enum name='JDWP_EventKind_THREAD_DEATH' value64='7'/>
<enum name='JDWP_EventKind_THREAD_END' value64='7'/>
<enum name='JDWP_EventKind_THREAD_START' value64='6'/>
<enum name='JDWP_EventKind_USER_DEFINED' value64='5'/>
<enum name='JDWP_EventKind_VM_DEATH' value64='99'/>
<enum name='JDWP_EventKind_VM_DISCONNECTED' value64='100'/>
<enum name='JDWP_EventKind_VM_INIT' value64='90'/>
<enum name='JDWP_EventKind_VM_START' value64='90'/>
<enum name='JDWP_EventRequest' value64='15'/>
<enum name='JDWP_EventRequest_Clear' value64='2'/>
<enum name='JDWP_EventRequest_ClearAllBreakpoints' value64='3'/>
<enum name='JDWP_EventRequest_Set' value64='1'/>
<enum name='JDWP_EventRequest_Set_Out_modifiers_Modifier_ClassExclude' value64='6'/>
<enum name='JDWP_EventRequest_Set_Out_modifiers_Modifier_ClassMatch' value64='5'/>
<enum name='JDWP_EventRequest_Set_Out_modifiers_Modifier_ClassOnly' value64='4'/>
<enum name='JDWP_EventRequest_Set_Out_modifiers_Modifier_Conditional' value64='2'/>
<enum name='JDWP_EventRequest_Set_Out_modifiers_Modifier_Count' value64='1'/>
<enum name='JDWP_EventRequest_Set_Out_modifiers_Modifier_ExceptionOnly' value64='8'/>
<enum name='JDWP_EventRequest_Set_Out_modifiers_Modifier_FieldOnly' value64='9'/>
<enum name='JDWP_EventRequest_Set_Out_modifiers_Modifier_InstanceOnly' value64='11'/>
<enum name='JDWP_EventRequest_Set_Out_modifiers_Modifier_LocationOnly' value64='7'/>
<enum name='JDWP_EventRequest_Set_Out_modifiers_Modifier_SourceNameMatch' value64='12'/>
<enum name='JDWP_EventRequest_Set_Out_modifiers_Modifier_Step' value64='10'/>
<enum name='JDWP_EventRequest_Set_Out_modifiers_Modifier_ThreadOnly' value64='3'/>
<enum name='JDWP_Event_Composite' value64='100'/>
<enum name='JDWP_Field' value64='8'/>
<enum name='JDWP_HIGHEST_COMMAND_SET' value64='17'/>
<enum name='JDWP_InterfaceType' value64='5'/>
<enum name='JDWP_InvokeOptions_INVOKE_NONVIRTUAL' value64='2'/>
<enum name='JDWP_InvokeOptions_INVOKE_SINGLE_THREADED' value64='1'/>
<enum name='JDWP_Method' value64='6'/>
<enum name='JDWP_Method_Bytecodes' value64='3'/>
<enum name='JDWP_Method_IsObsolete' value64='4'/>
<enum name='JDWP_Method_LineTable' value64='1'/>
<enum name='JDWP_Method_VariableTable' value64='2'/>
<enum name='JDWP_Method_VariableTableWithGeneric' value64='5'/>
<enum name='JDWP_ObjectReference' value64='9'/>
<enum name='JDWP_ObjectReference_DisableCollection' value64='7'/>
<enum name='JDWP_ObjectReference_EnableCollection' value64='8'/>
<enum name='JDWP_ObjectReference_GetValues' value64='2'/>
<enum name='JDWP_ObjectReference_InvokeMethod' value64='6'/>
<enum name='JDWP_ObjectReference_IsCollected' value64='9'/>
<enum name='JDWP_ObjectReference_MonitorInfo' value64='5'/>
<enum name='JDWP_ObjectReference_ReferenceType' value64='1'/>
<enum name='JDWP_ObjectReference_ReferringObjects' value64='10'/>
<enum name='JDWP_ObjectReference_SetValues' value64='3'/>
<enum name='JDWP_REQUEST_NONE' value64='-1'/>
<enum name='JDWP_ReferenceType' value64='2'/>
<enum name='JDWP_ReferenceType_ClassFileVersion' value64='17'/>
<enum name='JDWP_ReferenceType_ClassLoader' value64='2'/>
<enum name='JDWP_ReferenceType_ClassObject' value64='11'/>
<enum name='JDWP_ReferenceType_ConstantPool' value64='18'/>
<enum name='JDWP_ReferenceType_Fields' value64='4'/>
<enum name='JDWP_ReferenceType_FieldsWithGeneric' value64='14'/>
<enum name='JDWP_ReferenceType_GetValues' value64='6'/>
<enum name='JDWP_ReferenceType_Instances' value64='16'/>
<enum name='JDWP_ReferenceType_Interfaces' value64='10'/>
<enum name='JDWP_ReferenceType_Methods' value64='5'/>
<enum name='JDWP_ReferenceType_MethodsWithGeneric' value64='15'/>
<enum name='JDWP_ReferenceType_Modifiers' value64='3'/>
<enum name='JDWP_ReferenceType_NestedTypes' value64='8'/>
<enum name='JDWP_ReferenceType_Signature' value64='1'/>
<enum name='JDWP_ReferenceType_SignatureWithGeneric' value64='13'/>
<enum name='JDWP_ReferenceType_SourceDebugExtension' value64='12'/>
<enum name='JDWP_ReferenceType_SourceFile' value64='7'/>
<enum name='JDWP_ReferenceType_Status' value64='9'/>
<enum name='JDWP_StackFrame' value64='16'/>
<enum name='JDWP_StackFrame_GetValues' value64='1'/>
<enum name='JDWP_StackFrame_PopFrames' value64='4'/>
<enum name='JDWP_StackFrame_SetValues' value64='2'/>
<enum name='JDWP_StackFrame_ThisObject' value64='3'/>
<enum name='JDWP_StepDepth_INTO' value64='0'/>
<enum name='JDWP_StepDepth_OUT' value64='2'/>
<enum name='JDWP_StepDepth_OVER' value64='1'/>
<enum name='JDWP_StepSize_LINE' value64='1'/>
<enum name='JDWP_StepSize_MIN' value64='0'/>
<enum name='JDWP_StringReference' value64='10'/>
<enum name='JDWP_StringReference_Value' value64='1'/>
<enum name='JDWP_SuspendPolicy_ALL' value64='2'/>
<enum name='JDWP_SuspendPolicy_EVENT_THREAD' value64='1'/>
<enum name='JDWP_SuspendPolicy_NONE' value64='0'/>
<enum name='JDWP_SuspendStatus_SUSPEND_STATUS_SUSPENDED' value64='1'/>
<enum name='JDWP_Tag_ARRAY' value64='91'/>
<enum name='JDWP_Tag_BOOLEAN' value64='90'/>
<enum name='JDWP_Tag_BYTE' value64='66'/>
<enum name='JDWP_Tag_CHAR' value64='67'/>
<enum name='JDWP_Tag_CLASS_LOADER' value64='108'/>
<enum name='JDWP_Tag_CLASS_OBJECT' value64='99'/>
<enum name='JDWP_Tag_DOUBLE' value64='68'/>
<enum name='JDWP_Tag_FLOAT' value64='70'/>
<enum name='JDWP_Tag_INT' value64='73'/>
<enum name='JDWP_Tag_LONG' value64='74'/>
<enum name='JDWP_Tag_OBJECT' value64='76'/>
<enum name='JDWP_Tag_SHORT' value64='83'/>
<enum name='JDWP_Tag_STRING' value64='115'/>
<enum name='JDWP_Tag_THREAD' value64='116'/>
<enum name='JDWP_Tag_THREAD_GROUP' value64='103'/>
<enum name='JDWP_Tag_VOID' value64='86'/>
<enum name='JDWP_ThreadGroupReference' value64='12'/>
<enum name='JDWP_ThreadGroupReference_Children' value64='3'/>
<enum name='JDWP_ThreadGroupReference_Name' value64='1'/>
<enum name='JDWP_ThreadGroupReference_Parent' value64='2'/>
<enum name='JDWP_ThreadReference' value64='11'/>
<enum name='JDWP_ThreadReference_CurrentContendedMonitor' value64='9'/>
<enum name='JDWP_ThreadReference_ForceEarlyReturn' value64='14'/>
<enum name='JDWP_ThreadReference_FrameCount' value64='7'/>
<enum name='JDWP_ThreadReference_Frames' value64='6'/>
<enum name='JDWP_ThreadReference_Interrupt' value64='11'/>
<enum name='JDWP_ThreadReference_Name' value64='1'/>
<enum name='JDWP_ThreadReference_OwnedMonitors' value64='8'/>
<enum name='JDWP_ThreadReference_OwnedMonitorsStackDepthInfo' value64='13'/>
<enum name='JDWP_ThreadReference_Resume' value64='3'/>
<enum name='JDWP_ThreadReference_Status' value64='4'/>
<enum name='JDWP_ThreadReference_Stop' value64='10'/>
<enum name='JDWP_ThreadReference_Suspend' value64='2'/>
<enum name='JDWP_ThreadReference_SuspendCount' value64='12'/>
<enum name='JDWP_ThreadReference_ThreadGroup' value64='5'/>
<enum name='JDWP_ThreadStatus_MONITOR' value64='3'/>
<enum name='JDWP_ThreadStatus_RUNNING' value64='1'/>
<enum name='JDWP_ThreadStatus_SLEEPING' value64='2'/>
<enum name='JDWP_ThreadStatus_WAIT' value64='4'/>
<enum name='JDWP_ThreadStatus_ZOMBIE' value64='0'/>
<enum name='JDWP_TypeTag_ARRAY' value64='3'/>
<enum name='JDWP_TypeTag_CLASS' value64='1'/>
<enum name='JDWP_TypeTag_INTERFACE' value64='2'/>
<enum name='JDWP_VirtualMachine' value64='1'/>
<enum name='JDWP_VirtualMachine_AllClasses' value64='3'/>
<enum name='JDWP_VirtualMachine_AllClassesWithGeneric' value64='20'/>
<enum name='JDWP_VirtualMachine_AllThreads' value64='4'/>
<enum name='JDWP_VirtualMachine_Capabilities' value64='12'/>
<enum name='JDWP_VirtualMachine_CapabilitiesNew' value64='17'/>
<enum name='JDWP_VirtualMachine_ClassPaths' value64='13'/>
<enum name='JDWP_VirtualMachine_ClassesBySignature' value64='2'/>
<enum name='JDWP_VirtualMachine_CreateString' value64='11'/>
<enum name='JDWP_VirtualMachine_Dispose' value64='6'/>
<enum name='JDWP_VirtualMachine_DisposeObjects' value64='14'/>
<enum name='JDWP_VirtualMachine_Exit' value64='10'/>
<enum name='JDWP_VirtualMachine_HoldEvents' value64='15'/>
<enum name='JDWP_VirtualMachine_IDSizes' value64='7'/>
<enum name='JDWP_VirtualMachine_InstanceCounts' value64='21'/>
<enum name='JDWP_VirtualMachine_RedefineClasses' value64='18'/>
<enum name='JDWP_VirtualMachine_ReleaseEvents' value64='16'/>
<enum name='JDWP_VirtualMachine_Resume' value64='9'/>
<enum name='JDWP_VirtualMachine_SetDefaultStratum' value64='19'/>
<enum name='JDWP_VirtualMachine_Suspend' value64='8'/>
<enum name='JDWP_VirtualMachine_TopLevelThreadGroups' value64='5'/>
<enum name='JDWP_VirtualMachine_Version' value64='1'/>
<enum name='JNIGlobalRefType' value64='2'/>
<enum name='JNIInvalidRefType' value64='0'/>
<enum name='JNILocalRefType' value64='1'/>
<enum name='JNIWeakGlobalRefType' value64='3'/>
<enum name='JNI_ABORT' value64='2'/>
<enum name='JNI_COMMIT' value64='1'/>
<enum name='JNI_EDETACHED' value64='-2'/>
<enum name='JNI_EEXIST' value64='-5'/>
<enum name='JNI_EINVAL' value64='-6'/>
<enum name='JNI_ENOMEM' value64='-4'/>
<enum name='JNI_ERR' value64='-1'/>
<enum name='JNI_EVERSION' value64='-3'/>
<enum name='JNI_FALSE' value64='0'/>
<enum name='JNI_OK' value64='0'/>
<enum name='JNI_TRUE' value64='1'/>
<enum name='JNI_VERSION_1_1' value64='65537'/>
<enum name='JNI_VERSION_1_2' value64='65538'/>
<enum name='JNI_VERSION_1_4' value64='65540'/>
<enum name='JNI_VERSION_1_6' value64='65542'/>
<enum name='JVMTI_CLASS_STATUS_ARRAY' value64='16'/>
<enum name='JVMTI_CLASS_STATUS_ERROR' value64='8'/>
<enum name='JVMTI_CLASS_STATUS_INITIALIZED' value64='4'/>
<enum name='JVMTI_CLASS_STATUS_PREPARED' value64='2'/>
<enum name='JVMTI_CLASS_STATUS_PRIMITIVE' value64='32'/>
<enum name='JVMTI_CLASS_STATUS_VERIFIED' value64='1'/>
<enum name='JVMTI_DISABLE' value64='0'/>
<enum name='JVMTI_ENABLE' value64='1'/>
<enum name='JVMTI_ERROR_ABSENT_INFORMATION' value64='101'/>
<enum name='JVMTI_ERROR_ACCESS_DENIED' value64='111'/>
<enum name='JVMTI_ERROR_CIRCULAR_CLASS_DEFINITION' value64='61'/>
<enum name='JVMTI_ERROR_CLASS_LOADER_UNSUPPORTED' value64='106'/>
<enum name='JVMTI_ERROR_CLASS_NOT_PREPARED' value64='22'/>
<enum name='JVMTI_ERROR_DUPLICATE' value64='40'/>
<enum name='JVMTI_ERROR_FAILS_VERIFICATION' value64='62'/>
<enum name='JVMTI_ERROR_ILLEGAL_ARGUMENT' value64='103'/>
<enum name='JVMTI_ERROR_INTERNAL' value64='113'/>
<enum name='JVMTI_ERROR_INTERRUPT' value64='52'/>
<enum name='JVMTI_ERROR_INVALID_CLASS' value64='21'/>
<enum name='JVMTI_ERROR_INVALID_CLASS_FORMAT' value64='60'/>
<enum name='JVMTI_ERROR_INVALID_ENVIRONMENT' value64='116'/>
<enum name='JVMTI_ERROR_INVALID_EVENT_TYPE' value64='102'/>
<enum name='JVMTI_ERROR_INVALID_FIELDID' value64='25'/>
<enum name='JVMTI_ERROR_INVALID_LOCATION' value64='24'/>
<enum name='JVMTI_ERROR_INVALID_METHODID' value64='23'/>
<enum name='JVMTI_ERROR_INVALID_MONITOR' value64='50'/>
<enum name='JVMTI_ERROR_INVALID_OBJECT' value64='20'/>
<enum name='JVMTI_ERROR_INVALID_PRIORITY' value64='12'/>
<enum name='JVMTI_ERROR_INVALID_SLOT' value64='35'/>
<enum name='JVMTI_ERROR_INVALID_THREAD' value64='10'/>
<enum name='JVMTI_ERROR_INVALID_THREAD_GROUP' value64='11'/>
<enum name='JVMTI_ERROR_INVALID_TYPESTATE' value64='65'/>
<enum name='JVMTI_ERROR_MAX' value64='116'/>
<enum name='JVMTI_ERROR_MUST_POSSESS_CAPABILITY' value64='99'/>
<enum name='JVMTI_ERROR_NAMES_DONT_MATCH' value64='69'/>
<enum name='JVMTI_ERROR_NATIVE_METHOD' value64='104'/>
<enum name='JVMTI_ERROR_NONE' value64='0'/>
<enum name='JVMTI_ERROR_NOT_AVAILABLE' value64='98'/>
<enum name='JVMTI_ERROR_NOT_FOUND' value64='41'/>
<enum name='JVMTI_ERROR_NOT_MONITOR_OWNER' value64='51'/>
<enum name='JVMTI_ERROR_NO_MORE_FRAMES' value64='31'/>
<enum name='JVMTI_ERROR_NULL_POINTER' value64='100'/>
<enum name='JVMTI_ERROR_OPAQUE_FRAME' value64='32'/>
<enum name='JVMTI_ERROR_OUT_OF_MEMORY' value64='110'/>
<enum name='JVMTI_ERROR_THREAD_NOT_ALIVE' value64='15'/>
<enum name='JVMTI_ERROR_THREAD_NOT_SUSPENDED' value64='13'/>
<enum name='JVMTI_ERROR_THREAD_SUSPENDED' value64='14'/>
<enum name='JVMTI_ERROR_TYPE_MISMATCH' value64='34'/>
<enum name='JVMTI_ERROR_UNATTACHED_THREAD' value64='115'/>
<enum name='JVMTI_ERROR_UNMODIFIABLE_CLASS' value64='79'/>
<enum name='JVMTI_ERROR_UNSUPPORTED_REDEFINITION_CLASS_MODIFIERS_CHANGED' value64='70'/>
<enum name='JVMTI_ERROR_UNSUPPORTED_REDEFINITION_HIERARCHY_CHANGED' value64='66'/>
<enum name='JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_ADDED' value64='63'/>
<enum name='JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_DELETED' value64='67'/>
<enum name='JVMTI_ERROR_UNSUPPORTED_REDEFINITION_METHOD_MODIFIERS_CHANGED' value64='71'/>
<enum name='JVMTI_ERROR_UNSUPPORTED_REDEFINITION_SCHEMA_CHANGED' value64='64'/>
<enum name='JVMTI_ERROR_UNSUPPORTED_VERSION' value64='68'/>
<enum name='JVMTI_ERROR_WRONG_PHASE' value64='112'/>
<enum name='JVMTI_EVENT_BREAKPOINT' value64='62'/>
<enum name='JVMTI_EVENT_CLASS_FILE_LOAD_HOOK' value64='54'/>
<enum name='JVMTI_EVENT_CLASS_LOAD' value64='55'/>
<enum name='JVMTI_EVENT_CLASS_PREPARE' value64='56'/>
<enum name='JVMTI_EVENT_COMPILED_METHOD_LOAD' value64='68'/>
<enum name='JVMTI_EVENT_COMPILED_METHOD_UNLOAD' value64='69'/>
<enum name='JVMTI_EVENT_DATA_DUMP_REQUEST' value64='71'/>
<enum name='JVMTI_EVENT_DYNAMIC_CODE_GENERATED' value64='70'/>
<enum name='JVMTI_EVENT_EXCEPTION' value64='58'/>
<enum name='JVMTI_EVENT_EXCEPTION_CATCH' value64='59'/>
<enum name='JVMTI_EVENT_FIELD_ACCESS' value64='63'/>
<enum name='JVMTI_EVENT_FIELD_MODIFICATION' value64='64'/>
<enum name='JVMTI_EVENT_FRAME_POP' value64='61'/>
<enum name='JVMTI_EVENT_GARBAGE_COLLECTION_FINISH' value64='82'/>
<enum name='JVMTI_EVENT_GARBAGE_COLLECTION_START' value64='81'/>
<enum name='JVMTI_EVENT_METHOD_ENTRY' value64='65'/>
<enum name='JVMTI_EVENT_METHOD_EXIT' value64='66'/>
<enum name='JVMTI_EVENT_MONITOR_CONTENDED_ENTER' value64='75'/>
<enum name='JVMTI_EVENT_MONITOR_CONTENDED_ENTERED' value64='76'/>
<enum name='JVMTI_EVENT_MONITOR_WAIT' value64='73'/>
<enum name='JVMTI_EVENT_MONITOR_WAITED' value64='74'/>
<enum name='JVMTI_EVENT_NATIVE_METHOD_BIND' value64='67'/>
<enum name='JVMTI_EVENT_OBJECT_FREE' value64='83'/>
<enum name='JVMTI_EVENT_RESOURCE_EXHAUSTED' value64='80'/>
<enum name='JVMTI_EVENT_SINGLE_STEP' value64='60'/>
<enum name='JVMTI_EVENT_THREAD_END' value64='53'/>
<enum name='JVMTI_EVENT_THREAD_START' value64='52'/>
<enum name='JVMTI_EVENT_VM_DEATH' value64='51'/>
<enum name='JVMTI_EVENT_VM_INIT' value64='50'/>
<enum name='JVMTI_EVENT_VM_OBJECT_ALLOC' value64='84'/>
<enum name='JVMTI_EVENT_VM_START' value64='57'/>
<enum name='JVMTI_HEAP_FILTER_CLASS_TAGGED' value64='16'/>
<enum name='JVMTI_HEAP_FILTER_CLASS_UNTAGGED' value64='32'/>
<enum name='JVMTI_HEAP_FILTER_TAGGED' value64='4'/>
<enum name='JVMTI_HEAP_FILTER_UNTAGGED' value64='8'/>
<enum name='JVMTI_HEAP_OBJECT_EITHER' value64='3'/>
<enum name='JVMTI_HEAP_OBJECT_TAGGED' value64='1'/>
<enum name='JVMTI_HEAP_OBJECT_UNTAGGED' value64='2'/>
<enum name='JVMTI_HEAP_REFERENCE_ARRAY_ELEMENT' value64='3'/>
<enum name='JVMTI_HEAP_REFERENCE_CLASS' value64='1'/>
<enum name='JVMTI_HEAP_REFERENCE_CLASS_LOADER' value64='4'/>
<enum name='JVMTI_HEAP_REFERENCE_CONSTANT_POOL' value64='9'/>
<enum name='JVMTI_HEAP_REFERENCE_FIELD' value64='2'/>
<enum name='JVMTI_HEAP_REFERENCE_INTERFACE' value64='7'/>
<enum name='JVMTI_HEAP_REFERENCE_JNI_GLOBAL' value64='21'/>
<enum name='JVMTI_HEAP_REFERENCE_JNI_LOCAL' value64='25'/>
<enum name='JVMTI_HEAP_REFERENCE_MONITOR' value64='23'/>
<enum name='JVMTI_HEAP_REFERENCE_OTHER' value64='27'/>
<enum name='JVMTI_HEAP_REFERENCE_PROTECTION_DOMAIN' value64='6'/>
<enum name='JVMTI_HEAP_REFERENCE_SIGNERS' value64='5'/>
<enum name='JVMTI_HEAP_REFERENCE_STACK_LOCAL' value64='24'/>
<enum name='JVMTI_HEAP_REFERENCE_STATIC_FIELD' value64='8'/>
<enum name='JVMTI_HEAP_REFERENCE_SUPERCLASS' value64='10'/>
<enum name='JVMTI_HEAP_REFERENCE_SYSTEM_CLASS' value64='22'/>
<enum name='JVMTI_HEAP_REFERENCE_THREAD' value64='26'/>
<enum name='JVMTI_HEAP_ROOT_JNI_GLOBAL' value64='1'/>
<enum name='JVMTI_HEAP_ROOT_JNI_LOCAL' value64='5'/>
<enum name='JVMTI_HEAP_ROOT_MONITOR' value64='3'/>
<enum name='JVMTI_HEAP_ROOT_OTHER' value64='7'/>
<enum name='JVMTI_HEAP_ROOT_STACK_LOCAL' value64='4'/>
<enum name='JVMTI_HEAP_ROOT_SYSTEM_CLASS' value64='2'/>
<enum name='JVMTI_HEAP_ROOT_THREAD' value64='6'/>
<enum name='JVMTI_ITERATION_ABORT' value64='0'/>
<enum name='JVMTI_ITERATION_CONTINUE' value64='1'/>
<enum name='JVMTI_ITERATION_IGNORE' value64='2'/>
<enum name='JVMTI_JAVA_LANG_THREAD_STATE_BLOCKED' value64='1025'/>
<enum name='JVMTI_JAVA_LANG_THREAD_STATE_MASK' value64='1207'/>
<enum name='JVMTI_JAVA_LANG_THREAD_STATE_NEW' value64='0'/>
<enum name='JVMTI_JAVA_LANG_THREAD_STATE_RUNNABLE' value64='5'/>
<enum name='JVMTI_JAVA_LANG_THREAD_STATE_TERMINATED' value64='2'/>
<enum name='JVMTI_JAVA_LANG_THREAD_STATE_TIMED_WAITING' value64='161'/>
<enum name='JVMTI_JAVA_LANG_THREAD_STATE_WAITING' value64='145'/>
<enum name='JVMTI_JLOCATION_JVMBCI' value64='1'/>
<enum name='JVMTI_JLOCATION_MACHINEPC' value64='2'/>
<enum name='JVMTI_JLOCATION_OTHER' value64='0'/>
<enum name='JVMTI_KIND_ALLOC_ALLOC_BUF' value64='95'/>
<enum name='JVMTI_KIND_ALLOC_BUF' value64='94'/>
<enum name='JVMTI_KIND_IN' value64='91'/>
<enum name='JVMTI_KIND_IN_BUF' value64='93'/>
<enum name='JVMTI_KIND_IN_PTR' value64='92'/>
<enum name='JVMTI_KIND_OUT' value64='96'/>
<enum name='JVMTI_KIND_OUT_BUF' value64='97'/>
<enum name='JVMTI_MAX_EVENT_TYPE_VAL' value64='84'/>
<enum name='JVMTI_MIN_EVENT_TYPE_VAL' value64='50'/>
<enum name='JVMTI_PHASE_DEAD' value64='8'/>
<enum name='JVMTI_PHASE_LIVE' value64='4'/>
<enum name='JVMTI_PHASE_ONLOAD' value64='1'/>
<enum name='JVMTI_PHASE_PRIMORDIAL' value64='2'/>
<enum name='JVMTI_PHASE_START' value64='6'/>
<enum name='JVMTI_PRIMITIVE_TYPE_BOOLEAN' value64='90'/>
<enum name='JVMTI_PRIMITIVE_TYPE_BYTE' value64='66'/>
<enum name='JVMTI_PRIMITIVE_TYPE_CHAR' value64='67'/>
<enum name='JVMTI_PRIMITIVE_TYPE_DOUBLE' value64='68'/>
<enum name='JVMTI_PRIMITIVE_TYPE_FLOAT' value64='70'/>
<enum name='JVMTI_PRIMITIVE_TYPE_INT' value64='73'/>
<enum name='JVMTI_PRIMITIVE_TYPE_LONG' value64='74'/>
<enum name='JVMTI_PRIMITIVE_TYPE_SHORT' value64='83'/>
<enum name='JVMTI_REFERENCE_ARRAY_ELEMENT' value64='3'/>
<enum name='JVMTI_REFERENCE_CLASS' value64='1'/>
<enum name='JVMTI_REFERENCE_CLASS_LOADER' value64='4'/>
<enum name='JVMTI_REFERENCE_CONSTANT_POOL' value64='9'/>
<enum name='JVMTI_REFERENCE_FIELD' value64='2'/>
<enum name='JVMTI_REFERENCE_INTERFACE' value64='7'/>
<enum name='JVMTI_REFERENCE_PROTECTION_DOMAIN' value64='6'/>
<enum name='JVMTI_REFERENCE_SIGNERS' value64='5'/>
<enum name='JVMTI_REFERENCE_STATIC_FIELD' value64='8'/>
<enum name='JVMTI_RESOURCE_EXHAUSTED_JAVA_HEAP' value64='2'/>
<enum name='JVMTI_RESOURCE_EXHAUSTED_OOM_ERROR' value64='1'/>
<enum name='JVMTI_RESOURCE_EXHAUSTED_THREADS' value64='4'/>
<enum name='JVMTI_THREAD_MAX_PRIORITY' value64='10'/>
<enum name='JVMTI_THREAD_MIN_PRIORITY' value64='1'/>
<enum name='JVMTI_THREAD_NORM_PRIORITY' value64='5'/>
<enum name='JVMTI_THREAD_STATE_ALIVE' value64='1'/>
<enum name='JVMTI_THREAD_STATE_BLOCKED_ON_MONITOR_ENTER' value64='1024'/>
<enum name='JVMTI_THREAD_STATE_INTERRUPTED' value64='2097152'/>
<enum name='JVMTI_THREAD_STATE_IN_NATIVE' value64='4194304'/>
<enum name='JVMTI_THREAD_STATE_IN_OBJECT_WAIT' value64='256'/>
<enum name='JVMTI_THREAD_STATE_PARKED' value64='512'/>
<enum name='JVMTI_THREAD_STATE_RUNNABLE' value64='4'/>
<enum name='JVMTI_THREAD_STATE_SLEEPING' value64='64'/>
<enum name='JVMTI_THREAD_STATE_SUSPENDED' value64='1048576'/>
<enum name='JVMTI_THREAD_STATE_TERMINATED' value64='2'/>
<enum name='JVMTI_THREAD_STATE_VENDOR_1' value64='268435456'/>
<enum name='JVMTI_THREAD_STATE_VENDOR_2' value64='536870912'/>
<enum name='JVMTI_THREAD_STATE_VENDOR_3' value64='1073741824'/>
<enum name='JVMTI_THREAD_STATE_WAITING' value64='128'/>
<enum name='JVMTI_THREAD_STATE_WAITING_INDEFINITELY' value64='16'/>
<enum name='JVMTI_THREAD_STATE_WAITING_WITH_TIMEOUT' value64='32'/>
<enum name='JVMTI_TIMER_ELAPSED' value64='32'/>
<enum name='JVMTI_TIMER_TOTAL_CPU' value64='31'/>
<enum name='JVMTI_TIMER_USER_CPU' value64='30'/>
<enum name='JVMTI_TYPE_CCHAR' value64='115'/>
<enum name='JVMTI_TYPE_CVOID' value64='116'/>
<enum name='JVMTI_TYPE_JBOOLEAN' value64='108'/>
<enum name='JVMTI_TYPE_JBYTE' value64='101'/>
<enum name='JVMTI_TYPE_JCHAR' value64='102'/>
<enum name='JVMTI_TYPE_JCLASS' value64='111'/>
<enum name='JVMTI_TYPE_JDOUBLE' value64='107'/>
<enum name='JVMTI_TYPE_JFIELDID' value64='113'/>
<enum name='JVMTI_TYPE_JFLOAT' value64='106'/>
<enum name='JVMTI_TYPE_JINT' value64='104'/>
<enum name='JVMTI_TYPE_JLONG' value64='105'/>
<enum name='JVMTI_TYPE_JMETHODID' value64='114'/>
<enum name='JVMTI_TYPE_JNIENV' value64='117'/>
<enum name='JVMTI_TYPE_JOBJECT' value64='109'/>
<enum name='JVMTI_TYPE_JSHORT' value64='103'/>
<enum name='JVMTI_TYPE_JTHREAD' value64='110'/>
<enum name='JVMTI_TYPE_JVALUE' value64='112'/>
<enum name='JVMTI_VERBOSE_CLASS' value64='2'/>
<enum name='JVMTI_VERBOSE_GC' value64='1'/>
<enum name='JVMTI_VERBOSE_JNI' value64='4'/>
<enum name='JVMTI_VERBOSE_OTHER' value64='0'/>
<enum name='JVMTI_VERSION' value64='805372262'/>
<enum name='JVMTI_VERSION_1' value64='805371904'/>
<enum name='JVMTI_VERSION_1_0' value64='805371904'/>
<enum name='JVMTI_VERSION_1_1' value64='805372160'/>
<enum name='JVMTI_VERSION_INTERFACE_JNI' value64='0'/>
<enum name='JVMTI_VERSION_INTERFACE_JVMTI' value64='805306368'/>
<enum name='JVMTI_VERSION_MASK_INTERFACE_TYPE' value64='1879048192'/>
<enum name='JVMTI_VERSION_MASK_MAJOR' value64='268369920'/>
<enum name='JVMTI_VERSION_MASK_MICRO' value64='255'/>
<enum name='JVMTI_VERSION_MASK_MINOR' value64='65280'/>
<enum name='JVMTI_VERSION_SHIFT_MAJOR' value64='16'/>
<enum name='JVMTI_VERSION_SHIFT_MICRO' value64='0'/>
<enum name='JVMTI_VERSION_SHIFT_MINOR' value64='8'/>
<enum name='JVMTI_VISIT_ABORT' value64='32768'/>
<enum name='JVMTI_VISIT_OBJECTS' value64='256'/>
<function name='Agent_OnAttach'>
<arg declared_type64='JavaVM*' name='vm' type64='^^{JNIInvokeInterface_}'/>
<arg declared_type64='char*' name='options' type64='*'/>
<arg declared_type64='void*' name='reserved' type64='^v'/>
<retval declared_type64='jint' type64='i'/>
</function>
<function name='Agent_OnLoad'>
<arg declared_type64='JavaVM*' name='vm' type64='^^{JNIInvokeInterface_}'/>
<arg declared_type64='char*' name='options' type64='*'/>
<arg declared_type64='void*' name='reserved' type64='^v'/>
<retval declared_type64='jint' type64='i'/>
</function>
<function name='Agent_OnUnload'>
<arg declared_type64='JavaVM*' name='vm' type64='^^{JNIInvokeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JAWT_GetAWT'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JAWT*' name='awt' type64='^{jawt=i^?^?^?^?^?}'/>
<retval declared_type64='jboolean' type64='C'/>
</function>
<function name='JNI_CreateJavaVM'>
<arg declared_type64='JavaVM**' name='pvm' type64='^^^{JNIInvokeInterface_}'/>
<arg declared_type64='void**' name='penv' type64='^^v'/>
<arg declared_type64='void*' name='args' type64='^v'/>
<retval declared_type64='jint' type64='i'/>
</function>
<function name='JNI_GetCreatedJavaVMs'>
<arg declared_type64='JavaVM**' type64='^^^{JNIInvokeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize*' type64='^i'/>
<retval declared_type64='jint' type64='i'/>
</function>
<function name='JNI_GetDefaultJavaVMInitArgs'>
<arg declared_type64='void*' name='args' type64='^v'/>
<retval declared_type64='jint' type64='i'/>
</function>
<function name='JNI_OnLoad'>
<arg declared_type64='JavaVM*' name='vm' type64='^^{JNIInvokeInterface_}'/>
<arg declared_type64='void*' name='reserved' type64='^v'/>
<retval declared_type64='jint' type64='i'/>
</function>
<function name='JNI_OnUnload'>
<arg declared_type64='JavaVM*' name='vm' type64='^^{JNIInvokeInterface_}'/>
<arg declared_type64='void*' name='reserved' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<class name='NSJavaConfiguration'>
<method class_method='true' selector='configurationForVendor:'>
<arg declared_type64='NSString*' index='0' name='vendorName' type64='@'/>
<retval declared_type64='NSJavaConfiguration*' type64='@'/>
</method>
<method class_method='true' selector='defaultConfiguration'>
<retval declared_type64='NSJavaConfiguration*' type64='@'/>
</method>
<method selector='init'>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='initWithVendor:'>
<arg declared_type64='NSString*' index='0' name='vendorName' type64='@'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='valueForKey:'>
<arg declared_type64='NSString*' index='0' name='keyName' type64='@'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='valueForKey:expandEnvironmentVariables:'>
<arg declared_type64='NSString*' index='0' name='keyName' type64='@'/>
<arg declared_type64='BOOL' index='1' name='flag' type64='B'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='vendorName'>
<retval declared_type64='NSString*' type64='@'/>
</method>
<method class_method='true' selector='vendorNames'>
<retval declared_type64='NSArray*' type64='@'/>
</method>
</class>
<class name='NSJavaVirtualMachine'>
<method selector='attachCurrentThread'>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='defaultClassPath'>
<retval declared_type64='NSString*' type64='@'/>
</method>
<method class_method='true' selector='defaultVirtualMachine'>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='defineClass:withName:'>
<arg declared_type64='NSData*' index='0' name='javaClassData' type64='@'/>
<arg declared_type64='NSString*' index='1' name='className' type64='@'/>
<retval declared_type64='Class' type64='#'/>
</method>
<method selector='detachCurrentThread'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='findClass:'>
<arg declared_type64='NSString*' index='0' name='className' type64='@'/>
<retval declared_type64='Class' type64='#'/>
</method>
<method selector='initWithClassPath:'>
<arg declared_type64='NSString*' index='0' name='classPath' type64='@'/>
<retval declared_type64='id' type64='@'/>
</method>
</class>
<class name='NSObject'>
<method selector='awtMessage:message:env:'>
<arg declared_type64='jint' index='0' name='messageID' type64='i'/>
<arg declared_type64='jobject' index='1' name='message' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='2' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='layer'>
<retval declared_type64='CALayer*' type64='@'/>
</method>
<method class_method='true' selector='newWithSignature:' variadic='true'>
<arg declared_type64='NSString*' index='0' name='signature' type64='@'/>
<retval declared_type64='id' type64='@'/>
</method>
<method class_method='true' selector='newWithSignature:arguments:'>
<arg declared_type64='NSString*' index='0' name='signature' type64='@'/>
<arg declared_type64='struct __va_list_tag*' index='1' name='args' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='setLayer:'>
<arg declared_type64='CALayer*' index='0' name='layer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='windowLayer'>
<retval declared_type64='CALayer*' type64='@'/>
</method>
</class>
<informal_protocol name='AWTCocoaComponent'>
<method selector='awtMessage:message:env:' type64='v36@0:8i16^{_jobject=}20r^^{JNINativeInterface_}28'>
<arg declared_type64='jint' index='0' name='messageID' type64='i'/>
<arg declared_type64='jobject' index='1' name='message' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='2' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</method>
</informal_protocol>
<informal_protocol name='InstantiatingJavaObjects'>
<method class_method='true' selector='newWithSignature:' type64='@24@0:8@16' variadic='true'>
<arg declared_type64='NSString*' index='0' name='signature' type64='@'/>
<retval declared_type64='id' type64='@'/>
</method>
<method class_method='true' selector='newWithSignature:arguments:' type64='@32@0:8@16[1{__va_list_tag=II^v^v}]24'>
<arg declared_type64='NSString*' index='0' name='signature' type64='@'/>
<arg declared_type64='struct __va_list_tag*' index='1' name='args' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='id' type64='@'/>
</method>
</informal_protocol>
<informal_protocol name='JAWT_SurfaceLayers'>
<method selector='layer' type64='@16@0:8'>
<retval declared_type64='CALayer*' type64='@'/>
</method>
<method selector='setLayer:' type64='v24@0:8@16'>
<arg declared_type64='CALayer*' index='0' name='layer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='windowLayer' type64='@16@0:8'>
<retval declared_type64='CALayer*' type64='@'/>
</method>
</informal_protocol>
<struct name='JNFClassInfo' type64='{_JNFClassInfo=&quot;name&quot;*&quot;cls&quot;^{_jobject}}'>
<field const='true' declared_type64='char*' name='name' type64='*'/>
<field declared_type64='jclass' name='cls' type64='^{_jobject=}'/>
</struct>
<struct name='JNFMemberInfo' type64='{_JNFMemberInfo=&quot;name&quot;*&quot;sig&quot;*&quot;isStatic&quot;B&quot;classInfo&quot;^{_JNFClassInfo}&quot;j&quot;(_j=&quot;fieldID&quot;^{_jfieldID}&quot;methodID&quot;^{_jmethodID})}'>
<field const='true' declared_type64='char*' name='name' type64='*'/>
<field const='true' declared_type64='char*' name='sig' type64='*'/>
<field declared_type64='BOOL' name='isStatic' type64='B'/>
<field declared_type64='JNFClassInfo*' name='classInfo' type64='^{_JNFClassInfo=*^{_jobject}}'/>
<field declared_type64='union _j' name='j' type64='(_j=&quot;fieldID&quot;^{_jfieldID}&quot;methodID&quot;^{_jmethodID})'/>
</struct>
<constant declared_type64='NSString*' name='JNFRunLoopDidStartNotification' type64='@'/>
<constant const='true' declared_type64='char*' name='kClassNotFoundException' type64='*'/>
<constant const='true' declared_type64='char*' name='kIllegalAccessException' type64='*'/>
<constant const='true' declared_type64='char*' name='kIllegalArgumentException' type64='*'/>
<constant const='true' declared_type64='char*' name='kNoSuchFieldException' type64='*'/>
<constant const='true' declared_type64='char*' name='kNoSuchMethodException' type64='*'/>
<constant const='true' declared_type64='char*' name='kNullPointerException' type64='*'/>
<constant const='true' declared_type64='char*' name='kOutOfMemoryError' type64='*'/>
<constant const='true' declared_type64='char*' name='kRuntimeException' type64='*'/>
<enum name='JNFThreadAttachAsDaemon' value64='16'/>
<enum name='JNFThreadDetachImmediately' value64='2'/>
<enum name='JNFThreadDetachOnThreadDeath' value64='4'/>
<enum name='JNFThreadSetSystemClassLoaderOnAttach' value64='8'/>
<function name='JNFCFToJavaBoolean'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='CFBooleanRef' name='b' type64='^{__CFBoolean=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFCallBooleanMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jboolean' type64='C'/>
</function>
<function name='JNFCallByteMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jbyte' type64='c'/>
</function>
<function name='JNFCallCharMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jchar' type64='S'/>
</function>
<function name='JNFCallDoubleMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jdouble' type64='d'/>
</function>
<function name='JNFCallFloatMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jfloat' type64='f'/>
</function>
<function name='JNFCallIntMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jint' type64='i'/>
</function>
<function name='JNFCallLongMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jlong' type64='q'/>
</function>
<function name='JNFCallObjectMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFCallShortMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jshort' type64='s'/>
</function>
<function name='JNFCallStaticBooleanMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jboolean' type64='C'/>
</function>
<function name='JNFCallStaticByteMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jbyte' type64='c'/>
</function>
<function name='JNFCallStaticCharMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jchar' type64='S'/>
</function>
<function name='JNFCallStaticDoubleMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jdouble' type64='d'/>
</function>
<function name='JNFCallStaticFloatMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jfloat' type64='f'/>
</function>
<function name='JNFCallStaticIntMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jint' type64='i'/>
</function>
<function name='JNFCallStaticLongMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jlong' type64='q'/>
</function>
<function name='JNFCallStaticObjectMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFCallStaticShortMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jshort' type64='s'/>
</function>
<function name='JNFCallStaticVoidMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFCallVoidMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFDebugWarning' variadic='true'>
<arg const='true' declared_type64='char*' name='fmt' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFDeleteGlobalRef'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='globalRef' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFDeleteWeakGlobalRef'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='globalRef' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFDumpJavaStack'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFGetBooleanField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jboolean' type64='C'/>
</function>
<function name='JNFGetByteField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jbyte' type64='c'/>
</function>
<function name='JNFGetCharField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jchar' type64='S'/>
</function>
<function name='JNFGetDoubleField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jdouble' type64='d'/>
</function>
<function name='JNFGetFloatField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jfloat' type64='f'/>
</function>
<function name='JNFGetIntField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jint' type64='i'/>
</function>
<function name='JNFGetLongField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jlong' type64='q'/>
</function>
<function name='JNFGetObjectField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFGetShortField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jshort' type64='s'/>
</function>
<function name='JNFGetStaticBooleanField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jboolean' type64='C'/>
</function>
<function name='JNFGetStaticByteField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jbyte' type64='c'/>
</function>
<function name='JNFGetStaticCharField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jchar' type64='S'/>
</function>
<function name='JNFGetStaticDoubleField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jdouble' type64='d'/>
</function>
<function name='JNFGetStaticFloatField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jfloat' type64='f'/>
</function>
<function name='JNFGetStaticIntField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jint' type64='i'/>
</function>
<function name='JNFGetStaticLongField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jlong' type64='q'/>
</function>
<function name='JNFGetStaticObjectField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFGetStaticShortField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jshort' type64='s'/>
</function>
<function name='JNFGetStringUTF16UniChars'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' name='javaString' type64='^{_jobject=}'/>
<retval const='true' declared_type64='unichar*' type64='^S'/>
</function>
<function name='JNFGetStringUTF8Chars'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' name='javaString' type64='^{_jobject=}'/>
<retval const='true' declared_type64='char*' type64='*'/>
</function>
<function name='JNFIsInstanceOf'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFClassInfo*' name='clazz' type64='^{_JNFClassInfo=*^{_jobject}}'/>
<retval declared_type64='BOOL' type64='B'/>
</function>
<function name='JNFJavaMillisToNSTimeInterval'>
<arg declared_type64='jlong' name='javaMillisSince1970' type64='q'/>
<retval declared_type64='NSTimeInterval' type64='d'/>
</function>
<function name='JNFJavaToCFBoolean'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='b' type64='^{_jobject=}'/>
<retval declared_type64='CFBooleanRef' type64='^{__CFBoolean=}'/>
</function>
<function name='JNFJavaToNSDate'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='date' type64='^{_jobject=}'/>
<retval declared_type64='NSDate*' type64='@'/>
</function>
<function name='JNFJavaToNSNumber'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='n' type64='^{_jobject=}'/>
<retval declared_type64='NSNumber*' type64='@'/>
</function>
<function name='JNFJavaToNSString'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' name='javaString' type64='^{_jobject=}'/>
<retval declared_type64='NSString*' type64='@'/>
</function>
<function name='JNFNSTimeIntervalToJavaMillis'>
<arg declared_type64='NSTimeInterval' name='intervalSince2001' type64='d'/>
<retval declared_type64='jlong' type64='q'/>
</function>
<function name='JNFNSToJavaCalendar'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='NSDate*' name='date' type64='@'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFNSToJavaNumber'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='NSNumber*' name='n' type64='@'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFNSToJavaString'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='NSString*' name='nsString' type64='@'/>
<retval declared_type64='jstring' type64='^{_jobject=}'/>
</function>
<function name='JNFNativeMethodEnter'>
<retval declared_type64='JNFAutoreleasePoolToken*' type64='@'/>
</function>
<function name='JNFNativeMethodExit'>
<arg declared_type64='JNFAutoreleasePoolToken*' name='token' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFNewBooleanArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jbooleanArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewByteArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jbyteArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewCharArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jcharArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewDoubleArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jdoubleArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewFloatArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jfloatArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewGlobalRef'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFNewIntArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jintArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewLongArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jlongArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewObject' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='constructor' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFNewObjectArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFClassInfo*' name='clazz' type64='^{_JNFClassInfo=*^{_jobject}}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jobjectArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewShortArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jshortArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewWeakGlobalRef'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFNormalizedJavaStringForPath'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='NSString*' name='path' type64='@'/>
<retval declared_type64='jstring' type64='^{_jobject=}'/>
</function>
<function name='JNFNormalizedNSStringForPath'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' name='path' type64='^{_jobject=}'/>
<retval declared_type64='NSString*' type64='@'/>
</function>
<function name='JNFObjectClassName'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<retval declared_type64='NSString*' type64='@'/>
</function>
<function name='JNFObjectEquals'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='a' type64='^{_jobject=}'/>
<arg declared_type64='jobject' name='b' type64='^{_jobject=}'/>
<retval declared_type64='BOOL' type64='B'/>
</function>
<function name='JNFObjectToString'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<retval declared_type64='NSString*' type64='@'/>
</function>
<function name='JNFObtainEnv'>
<arg declared_type64='JNFThreadContext*' name='context' type64='^q'/>
<retval declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
</function>
<function name='JNFPerformEnvBlock'>
<arg declared_type64='JNFThreadContext' name='context' type64='q'/>
<arg declared_type64='JNIEnvBlock' function_pointer='true' name='block' type64='@?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFReleaseEnv'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFThreadContext*' name='context' type64='^q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFReleaseStringUTF16UniChars'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' name='javaString' type64='^{_jobject=}'/>
<arg const='true' declared_type64='unichar*' name='unichars' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFReleaseStringUTF8Chars'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' name='javaString' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' name='chars' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetBooleanField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jboolean' name='val' type64='C'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetByteField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jbyte' name='val' type64='c'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetCharField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jchar' name='val' type64='S'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetDoubleField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jdouble' name='val' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetFloatField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jfloat' name='val' type64='f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetIntField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jint' name='val' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetLongField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jlong' name='val' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetObjectField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jobject' name='val' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetShortField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jshort' name='val' type64='s'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticBooleanField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jboolean' name='val' type64='C'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticByteField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jbyte' name='val' type64='c'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticCharField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jchar' name='val' type64='S'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticDoubleField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jdouble' name='val' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticFloatField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jfloat' name='val' type64='f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticIntField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jint' name='val' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticLongField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jlong' name='val' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticObjectField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jobject' name='val' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticShortField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jshort' name='val' type64='s'/>
<retval declared_type64='void' type64='v'/>
</function>
<function_alias name='JNF_WARN' original='JNFDebugWarning'/>
<class name='JNFDefaultCoercions'>
<method class_method='true' selector='addDateCoercionTo:'>
<arg declared_type64='JNFTypeCoercer*' index='0' name='coercer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='addListCoercionTo:'>
<arg declared_type64='JNFTypeCoercer*' index='0' name='coercer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='addMapCoercionTo:'>
<arg declared_type64='JNFTypeCoercer*' index='0' name='coercer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='addNumberCoercionTo:'>
<arg declared_type64='JNFTypeCoercer*' index='0' name='coercer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='addSetCoercionTo:'>
<arg declared_type64='JNFTypeCoercer*' index='0' name='coercer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='addStringCoercionTo:'>
<arg declared_type64='JNFTypeCoercer*' index='0' name='coercer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='defaultCoercer'>
<retval declared_type64='JNFTypeCoercer*' type64='@'/>
</method>
</class>
<class name='JNFException'>
<method selector='init:as:reason:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' index='1' name='javaExceptionType' type64='*'/>
<arg const='true' declared_type64='char*' index='2' name='reasonMsg' type64='*'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='init:throwable:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthrowable' index='1' name='throwable' type64='^{_jobject=}'/>
<retval declared_type64='id' type64='@'/>
</method>
<method class_method='true' selector='raise:as:reason:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' index='1' name='javaExceptionType' type64='*'/>
<arg const='true' declared_type64='char*' index='2' name='reasonMsg' type64='*'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='raise:throwable:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthrowable' index='1' name='throwable' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='raiseToJava:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='raiseUnnamedException:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='throwToJava:exception:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='NSException*' index='1' name='exception' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='throwToJava:exception:as:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='NSException*' index='1' name='exception' type64='@'/>
<arg const='true' declared_type64='char*' index='2' name='javaExceptionType' type64='*'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='JNFJObjectWrapper'>
<method selector='initWithJObject:withEnv:'>
<arg declared_type64='jobject' index='0' name='jObjectIn' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='jObject'>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</method>
<method selector='jObjectWithEnv:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</method>
<method selector='setJObject:withEnv:'>
<arg declared_type64='jobject' index='0' name='jObjectIn' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='wrapperWithJObject:withEnv:'>
<arg declared_type64='jobject' index='0' name='jObjectIn' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='JNFJObjectWrapper*' type64='@'/>
</method>
</class>
<class name='JNFRunLoop'>
<method class_method='true' selector='javaRunLoopMode'>
<retval declared_type64='NSString*' type64='@'/>
</method>
<method class_method='true' selector='performOnMainThread:on:withObject:waitUntilDone:'>
<arg declared_type64='SEL' index='0' name='aSelector' type64=':'/>
<arg declared_type64='id' index='1' name='target' type64='@'/>
<arg declared_type64='id' index='2' name='arg' type64='@'/>
<arg declared_type64='BOOL' index='3' name='wait' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='performOnMainThreadWaiting:withBlock:'>
<arg declared_type64='BOOL' index='0' name='waitUntilDone' type64='B'/>
<arg declared_type64='void (^)()' function_pointer='true' index='1' name='block' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='JNFRunnable'>
<method class_method='true' selector='blockWithRunnable:withEnv:'>
<arg declared_type64='jobject' index='0' name='runnable' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void (^)()' function_pointer='true' type64='@?'>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method class_method='true' selector='invocationWithRunnable:withEnv:'>
<arg declared_type64='jobject' index='0' name='runnable' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='NSInvocation*' type64='@'/>
</method>
</class>
<class name='JNFTypeCoercer'>
<method selector='addCoercion:forNSClass:javaClass:'>
<arg declared_type64='NSObject*' index='0' name='coercion' type64='@'/>
<arg declared_type64='Class' index='1' name='nsClass' type64='#'/>
<arg declared_type64='NSString*' index='2' name='javaClassName' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='coerceJavaObject:withEnv:'>
<arg declared_type64='jobject' index='0' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='coerceNSObject:withEnv:'>
<arg declared_type64='id' index='0' name='obj' type64='@'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</method>
<method selector='deriveCoercer'>
<retval declared_type64='JNFTypeCoercer*' type64='@'/>
</method>
<method selector='init'>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='initWithParent:'>
<arg declared_type64='NSObject*' index='0' name='parentIn' type64='@'/>
<retval declared_type64='id' type64='@'/>
</method>
</class>
<class name='JNFWeakJObjectWrapper'>
<method class_method='true' selector='wrapperWithJObject:withEnv:'>
<arg declared_type64='jobject' index='0' name='jObjectIn' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='JNFWeakJObjectWrapper*' type64='@'/>
</method>
</class>
<class name='NSObject'>
<method selector='coerceJavaObject:withEnv:usingCoercer:'>
<arg declared_type64='jobject' index='0' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFTypeCoercion*' index='2' name='coercer' type64='@'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='coerceNSObject:withEnv:usingCoercer:'>
<arg declared_type64='id' index='0' name='obj' type64='@'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFTypeCoercion*' index='2' name='coercer' type64='@'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</method>
</class>
<informal_protocol name='JNFTypeCoercion'>
<method selector='coerceJavaObject:withEnv:usingCoercer:' type64='@40@0:8^{_jobject=}16r^^{JNINativeInterface_}24@32'>
<arg declared_type64='jobject' index='0' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFTypeCoercion*' index='2' name='coercer' type64='@'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='coerceNSObject:withEnv:usingCoercer:' type64='^{_jobject=}40@0:8@16r^^{JNINativeInterface_}24@32'>
<arg declared_type64='id' index='0' name='obj' type64='@'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFTypeCoercion*' index='2' name='coercer' type64='@'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</method>
</informal_protocol>
<constant declared_type64='NSString*' name='JRSMenuDidReuseItemNotification' type64='@'/>
<string_constant name='JRSAppIsBackgroundOnlyKey' nsstring='true' value='JRSAppIsBackgroundOnlyKey'/>
<string_constant name='JRSAppIsCommandLineKey' nsstring='true' value='JRSAppIsCommandLineKey'/>
<string_constant name='JRSAppIsUIElementKey' nsstring='true' value='JRSAppIsUIElementKey'/>
<string_constant name='JRSAppNameKey' nsstring='true' value='JRSAppNameKey'/>
<enum name='JRSSecurityExecutableCodeSignatureExpired' value64='5'/>
<enum name='JRSSecurityExecutableCodeSignatureExplicitlyTrusted' value64='3'/>
<enum name='JRSSecurityExecutableCodeSignatureExplicitlyUntrusted' value64='4'/>
<enum name='JRSSecurityExecutableCodeSignatureMissing' value64='0'/>
<enum name='JRSSecurityExecutableCodeSignatureUnverifiable' value64='1'/>
<enum name='JRSSecurityExecutableCodeSignatureValidatedThroughTrustedCA' value64='2'/>
<enum name='JRSSecurityExecutionPolicyBlockExecution' value64='3'/>
<enum name='JRSSecurityExecutionPolicyNoPrompt' value64='0'/>
<enum name='JRSSecurityExecutionPolicyOKPrompt' value64='1'/>
<enum name='JRSSecurityExecutionPolicyWarnPrompt' value64='2'/>
<enum name='kJRSUI_AlignmentHorizontal_center' value64='2'/>
<enum name='kJRSUI_AlignmentHorizontal_left' value64='1'/>
<enum name='kJRSUI_AlignmentHorizontal_right' value64='3'/>
<enum name='kJRSUI_AlignmentVertical_bottom' value64='3'/>
<enum name='kJRSUI_AlignmentVertical_center' value64='2'/>
<enum name='kJRSUI_AlignmentVertical_top' value64='1'/>
<enum name='kJRSUI_Direction_down' value64='3'/>
<enum name='kJRSUI_Direction_east' value64='8'/>
<enum name='kJRSUI_Direction_left' value64='4'/>
<enum name='kJRSUI_Direction_none' value64='1'/>
<enum name='kJRSUI_Direction_north' value64='6'/>
<enum name='kJRSUI_Direction_right' value64='5'/>
<enum name='kJRSUI_Direction_south' value64='7'/>
<enum name='kJRSUI_Direction_up' value64='2'/>
<enum name='kJRSUI_Direction_west' value64='9'/>
<enum name='kJRSUI_Key_animationFrame' value64='23'/>
<enum name='kJRSUI_Key_animationStartTime' value64='21'/>
<enum name='kJRSUI_Key_animationTime' value64='22'/>
<enum name='kJRSUI_Key_arrowsOnly' value64='16'/>
<enum name='kJRSUI_Key_direction' value64='4'/>
<enum name='kJRSUI_Key_focused' value64='12'/>
<enum name='kJRSUI_Key_frameOnly' value64='17'/>
<enum name='kJRSUI_Key_horizontalAlignment' value64='7'/>
<enum name='kJRSUI_Key_indicatorOnly' value64='13'/>
<enum name='kJRSUI_Key_maximumValue' value64='19'/>
<enum name='kJRSUI_Key_noIndicator' value64='14'/>
<enum name='kJRSUI_Key_nothingToScroll' value64='15'/>
<enum name='kJRSUI_Key_orientation' value64='5'/>
<enum name='kJRSUI_Key_position' value64='8'/>
<enum name='kJRSUI_Key_presentationState' value64='30'/>
<enum name='kJRSUI_Key_pressedPart' value64='9'/>
<enum name='kJRSUI_Key_segmentLeadingSeparator' value64='29'/>
<enum name='kJRSUI_Key_segmentTrailingSeparator' value64='18'/>
<enum name='kJRSUI_Key_size' value64='3'/>
<enum name='kJRSUI_Key_state' value64='2'/>
<enum name='kJRSUI_Key_thumbProportion' value64='24'/>
<enum name='kJRSUI_Key_thumbStart' value64='25'/>
<enum name='kJRSUI_Key_userInterfaceLayoutDirection' value64='31'/>
<enum name='kJRSUI_Key_value' value64='20'/>
<enum name='kJRSUI_Key_variant' value64='10'/>
<enum name='kJRSUI_Key_verticalAlignment' value64='6'/>
<enum name='kJRSUI_Key_widget' value64='1'/>
<enum name='kJRSUI_Key_windowFrameDrawClipped' value64='26'/>
<enum name='kJRSUI_Key_windowFrameDrawTitleSeparator' value64='27'/>
<enum name='kJRSUI_Key_windowTitleBarHeight' value64='28'/>
<enum name='kJRSUI_Key_windowType' value64='11'/>
<enum name='kJRSUI_Orientation_horizontal' value64='1'/>
<enum name='kJRSUI_Orientation_vertical' value64='2'/>
<enum name='kJRSUI_PartHit_arrowMax' value64='6'/>
<enum name='kJRSUI_PartHit_arrowMaxInside' value64='7'/>
<enum name='kJRSUI_PartHit_arrowMin' value64='5'/>
<enum name='kJRSUI_PartHit_arrowMinInside' value64='8'/>
<enum name='kJRSUI_PartHit_hit' value64='1'/>
<enum name='kJRSUI_PartHit_none' value64='0'/>
<enum name='kJRSUI_PartHit_thumb' value64='2'/>
<enum name='kJRSUI_PartHit_trackMax' value64='4'/>
<enum name='kJRSUI_PartHit_trackMin' value64='3'/>
<enum name='kJRSUI_PartHit_unknown' value64='-1'/>
<enum name='kJRSUI_PresentationState_activeKey' value64='1'/>
<enum name='kJRSUI_PresentationState_activeMain' value64='2'/>
<enum name='kJRSUI_PresentationState_inactive' value64='3'/>
<enum name='kJRSUI_ScrollBarPart_arrowMax' value64='4'/>
<enum name='kJRSUI_ScrollBarPart_arrowMaxInside' value64='5'/>
<enum name='kJRSUI_ScrollBarPart_arrowMin' value64='3'/>
<enum name='kJRSUI_ScrollBarPart_arrowMinInside' value64='6'/>
<enum name='kJRSUI_ScrollBarPart_none' value64='1'/>
<enum name='kJRSUI_ScrollBarPart_thumb' value64='2'/>
<enum name='kJRSUI_ScrollBarPart_trackMax' value64='8'/>
<enum name='kJRSUI_ScrollBarPart_trackMin' value64='7'/>
<enum name='kJRSUI_SegmentPosition_first' value64='1'/>
<enum name='kJRSUI_SegmentPosition_last' value64='3'/>
<enum name='kJRSUI_SegmentPosition_middle' value64='2'/>
<enum name='kJRSUI_SegmentPosition_only' value64='4'/>
<enum name='kJRSUI_Size_large' value64='4'/>
<enum name='kJRSUI_Size_mini' value64='1'/>
<enum name='kJRSUI_Size_regular' value64='3'/>
<enum name='kJRSUI_Size_small' value64='2'/>
<enum name='kJRSUI_State_active' value64='1'/>
<enum name='kJRSUI_State_disabled' value64='3'/>
<enum name='kJRSUI_State_drag' value64='7'/>
<enum name='kJRSUI_State_inactive' value64='2'/>
<enum name='kJRSUI_State_pressed' value64='4'/>
<enum name='kJRSUI_State_pulsed' value64='5'/>
<enum name='kJRSUI_State_rollover' value64='6'/>
<enum name='kJRSUI_UserInterfaceLayoutDirection_leftToRight' value64='1'/>
<enum name='kJRSUI_UserInterfaceLayoutDirection_rightToLeft' value64='2'/>
<enum name='kJRSUI_Variant_gradientListBackgroundEven' value64='5'/>
<enum name='kJRSUI_Variant_gradientListBackgroundOdd' value64='6'/>
<enum name='kJRSUI_Variant_gradientSideBar' value64='7'/>
<enum name='kJRSUI_Variant_gradientSideBarFocusedSelection' value64='9'/>
<enum name='kJRSUI_Variant_gradientSideBarSelection' value64='8'/>
<enum name='kJRSUI_Variant_menuGlyph' value64='1'/>
<enum name='kJRSUI_Variant_menuHierarchical' value64='4'/>
<enum name='kJRSUI_Variant_menuPopup' value64='2'/>
<enum name='kJRSUI_Variant_menuPulldown' value64='3'/>
<enum name='kJRSUI_Widget_background' value64='1'/>
<enum name='kJRSUI_Widget_buttonBevel' value64='2'/>
<enum name='kJRSUI_Widget_buttonBevelInset' value64='3'/>
<enum name='kJRSUI_Widget_buttonBevelRound' value64='4'/>
<enum name='kJRSUI_Widget_buttonCheckBox' value64='5'/>
<enum name='kJRSUI_Widget_buttonComboBox' value64='6'/>
<enum name='kJRSUI_Widget_buttonComboBoxInset' value64='7'/>
<enum name='kJRSUI_Widget_buttonDisclosure' value64='8'/>
<enum name='kJRSUI_Widget_buttonListHeader' value64='9'/>
<enum name='kJRSUI_Widget_buttonLittleArrows' value64='10'/>
<enum name='kJRSUI_Widget_buttonPopDown' value64='11'/>
<enum name='kJRSUI_Widget_buttonPopDownInset' value64='12'/>
<enum name='kJRSUI_Widget_buttonPopDownSquare' value64='13'/>
<enum name='kJRSUI_Widget_buttonPopUp' value64='14'/>
<enum name='kJRSUI_Widget_buttonPopUpInset' value64='15'/>
<enum name='kJRSUI_Widget_buttonPopUpSquare' value64='16'/>
<enum name='kJRSUI_Widget_buttonPush' value64='17'/>
<enum name='kJRSUI_Widget_buttonPushInset' value64='21'/>
<enum name='kJRSUI_Widget_buttonPushInset2' value64='22'/>
<enum name='kJRSUI_Widget_buttonPushScope' value64='18'/>
<enum name='kJRSUI_Widget_buttonPushScope2' value64='19'/>
<enum name='kJRSUI_Widget_buttonPushTextured' value64='20'/>
<enum name='kJRSUI_Widget_buttonRadio' value64='23'/>
<enum name='kJRSUI_Widget_buttonRound' value64='24'/>
<enum name='kJRSUI_Widget_buttonRoundHelp' value64='25'/>
<enum name='kJRSUI_Widget_buttonRoundInset' value64='26'/>
<enum name='kJRSUI_Widget_buttonRoundInset2' value64='27'/>
<enum name='kJRSUI_Widget_buttonSearchFieldCancel' value64='28'/>
<enum name='kJRSUI_Widget_buttonSearchFieldFind' value64='29'/>
<enum name='kJRSUI_Widget_buttonSegmented' value64='30'/>
<enum name='kJRSUI_Widget_buttonSegmentedInset' value64='31'/>
<enum name='kJRSUI_Widget_buttonSegmentedInset2' value64='32'/>
<enum name='kJRSUI_Widget_buttonSegmentedSCurve' value64='33'/>
<enum name='kJRSUI_Widget_buttonSegmentedTextured' value64='34'/>
<enum name='kJRSUI_Widget_buttonSegmentedToolbar' value64='35'/>
<enum name='kJRSUI_Widget_dial' value64='36'/>
<enum name='kJRSUI_Widget_disclosureTriangle' value64='37'/>
<enum name='kJRSUI_Widget_dividerGrabber' value64='38'/>
<enum name='kJRSUI_Widget_dividerSeparatorBar' value64='39'/>
<enum name='kJRSUI_Widget_dividerSplitter' value64='40'/>
<enum name='kJRSUI_Widget_focus' value64='41'/>
<enum name='kJRSUI_Widget_frameGroupBox' value64='42'/>
<enum name='kJRSUI_Widget_frameGroupBoxSecondary' value64='43'/>
<enum name='kJRSUI_Widget_frameListBox' value64='44'/>
<enum name='kJRSUI_Widget_framePlacard' value64='45'/>
<enum name='kJRSUI_Widget_frameTextField' value64='46'/>
<enum name='kJRSUI_Widget_frameTextFieldRound' value64='47'/>
<enum name='kJRSUI_Widget_frameWell' value64='48'/>
<enum name='kJRSUI_Widget_gradient' value64='51'/>
<enum name='kJRSUI_Widget_growBox' value64='49'/>
<enum name='kJRSUI_Widget_growBoxTextured' value64='50'/>
<enum name='kJRSUI_Widget_menu' value64='52'/>
<enum name='kJRSUI_Widget_menuBar' value64='54'/>
<enum name='kJRSUI_Widget_menuItem' value64='53'/>
<enum name='kJRSUI_Widget_menuTitle' value64='55'/>
<enum name='kJRSUI_Widget_progressBar' value64='56'/>
<enum name='kJRSUI_Widget_progressIndeterminateBar' value64='57'/>
<enum name='kJRSUI_Widget_progressRelevance' value64='58'/>
<enum name='kJRSUI_Widget_progressSpinner' value64='59'/>
<enum name='kJRSUI_Widget_scrollBar' value64='60'/>
<enum name='kJRSUI_Widget_scrollColumnSizer' value64='61'/>
<enum name='kJRSUI_Widget_slider' value64='62'/>
<enum name='kJRSUI_Widget_sliderThumb' value64='63'/>
<enum name='kJRSUI_Widget_synchronization' value64='64'/>
<enum name='kJRSUI_Widget_tab' value64='65'/>
<enum name='kJRSUI_Widget_titleBarCloseBox' value64='66'/>
<enum name='kJRSUI_Widget_titleBarCollapseBox' value64='67'/>
<enum name='kJRSUI_Widget_titleBarToolbarButton' value64='69'/>
<enum name='kJRSUI_Widget_titleBarZoomBox' value64='68'/>
<enum name='kJRSUI_Widget_toolbarItemWell' value64='70'/>
<enum name='kJRSUI_Widget_windowFrame' value64='71'/>
<enum name='kJRSUI_WindowType_document' value64='1'/>
<enum name='kJRSUI_WindowType_titlelessUtility' value64='3'/>
<enum name='kJRSUI_WindowType_utility' value64='2'/>
<function name='JRSAccessibilityUnregisterUniqueIdForUIElement'>
<arg declared_type64='id' name='element' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSCopyCanonicalLanguageForPrimaryLanguage'>
<arg const='true' declared_type64='char*' name='primaryLanguage' type64='*'/>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='JRSCopyOSJavaSupportVersion'>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='JRSCopyOSName'>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='JRSCopyOSVersion'>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='JRSCopyPrimaryLanguage'>
<retval declared_type64='char*' type64='*'/>
</function>
<function name='JRSFontAlignStyleForFractionalMeasurement'>
<arg const='true' declared_type64='JRSFontRenderingStyle' name='style' type64='I'/>
<retval declared_type64='JRSFontRenderingStyle' type64='I'/>
</function>
<function name='JRSFontAlignStyleForIntegerMeasurement'>
<arg declared_type64='JRSFontRenderingStyle' name='style' type64='I'/>
<retval declared_type64='JRSFontRenderingStyle' type64='I'/>
</function>
<function name='JRSFontCreateFallbackFontForCharacters'>
<arg const='true' declared_type64='CTFontRef' name='font' type64='^{__CTFont=}'/>
<arg const='true' declared_type64='UTF16Char*' name='unichars' type64='^S'/>
<arg const='true' declared_type64='CFIndex' name='length' type64='q'/>
<retval already_retained='true' declared_type64='CTFontRef' type64='^{__CTFont=}'/>
</function>
<function name='JRSFontGetAdvancesForGlyphsAndStyle'>
<arg const='true' declared_type64='CTFontRef' name='font' type64='^{__CTFont=}'/>
<arg const='true' declared_type64='CGAffineTransform*' name='tx' type64='^{CGAffineTransform=dddddd}'/>
<arg const='true' declared_type64='JRSFontRenderingStyle' name='style' type64='I'/>
<arg const='true' declared_type64='CGGlyph*' name='glyphs' type64='^S'/>
<arg declared_type64='size_t' name='count' type64='Q'/>
<arg declared_type64='CGSize*' name='advances' type64='^{CGSize=dd}'/>
<retval declared_type64='CGFloat' type64='d'/>
</function>
<function name='JRSFontGetBoundingBoxesForGlyphsAndStyle'>
<arg const='true' declared_type64='CTFontRef' name='font' type64='^{__CTFont=}'/>
<arg const='true' declared_type64='CGAffineTransform*' name='tx' type64='^{CGAffineTransform=dddddd}'/>
<arg const='true' declared_type64='JRSFontRenderingStyle' name='style' type64='I'/>
<arg const='true' declared_type64='CGGlyph*' name='glyphs' type64='^S'/>
<arg declared_type64='size_t' name='count' type64='Q'/>
<arg declared_type64='CGRect*' name='bboxes' type64='^{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type64='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='JRSFontGetRenderingStyleForContext'>
<arg const='true' declared_type64='CGContextRef' name='context' type64='^{CGContext=}'/>
<retval declared_type64='JRSFontRenderingStyle' type64='I'/>
</function>
<function name='JRSFontGetRenderingStyleForHints'>
<arg const='true' declared_type64='jint' name='fmHint' type64='i'/>
<arg const='true' declared_type64='jint' name='aaHint' type64='i'/>
<retval declared_type64='JRSFontRenderingStyle' type64='I'/>
</function>
<function name='JRSFontSetRenderingStyleOnContext'>
<arg const='true' declared_type64='CGContextRef' name='context' type64='^{CGContext=}'/>
<arg const='true' declared_type64='JRSFontRenderingStyle' name='style' type64='I'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSFontStyleIsAntialiased'>
<arg const='true' declared_type64='JRSFontRenderingStyle' name='style' type64='I'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='JRSFontStyleUsesFractionalMetrics'>
<arg const='true' declared_type64='JRSFontRenderingStyle' name='style' type64='I'/>
<retval declared_type64='_Bool' type64='B'/>
</function>
<function name='JRSSetDefaultLocalization'>
<arg const='true' declared_type64='char*' name='primaryLanguage' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSUIControlCreate'>
<arg declared_type64='Boolean' name='isFlipped' type64='B'/>
<retval already_retained='true' declared_type64='JRSUIControlRef' type64='@'/>
</function>
<function name='JRSUIControlDraw'>
<arg declared_type64='JRSUIRendererRef' name='renderer' type64='@'/>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<arg declared_type64='CGContextRef' name='context' type64='^{CGContext=}'/>
<arg declared_type64='CGRect' name='bounds' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSUIControlGetHitPart'>
<arg declared_type64='JRSUIRendererRef' name='renderer' type64='@'/>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<arg declared_type64='CGRect' name='bounds' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type64='CGPoint' name='point' type64='{CGPoint=dd}'/>
<retval declared_type64='JRSUIPartHit' type64='q'/>
</function>
<function name='JRSUIControlGetScrollBarOffsetFor'>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<arg declared_type64='CGRect' name='frame' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type64='CGFloat' name='offset' type64='d'/>
<arg declared_type64='CGFloat' name='visibleAmount' type64='d'/>
<arg declared_type64='CGFloat' name='extent' type64='d'/>
<retval declared_type64='CGFloat' type64='d'/>
</function>
<function name='JRSUIControlGetScrollBarPartBounds'>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<arg declared_type64='CGRect' name='frame' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<arg declared_type64='JRSUIScrollBarPart' name='part' type64='q'/>
<retval declared_type64='CGRect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
</function>
<function name='JRSUIControlRelease'>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSUIControlSetAlignmentHorizontal'>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<arg declared_type64='JRSUIAlignmentVertical' name='value' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSUIControlSetAlignmentVertical'>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<arg declared_type64='JRSUIAlignmentHorizontal' name='value' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSUIControlSetAnimating'>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<arg declared_type64='Boolean' name='value' type64='B'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSUIControlSetDirection'>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<arg declared_type64='JRSUIDirection' name='value' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSUIControlSetOrientation'>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<arg declared_type64='JRSUIOrintation' name='value' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSUIControlSetPresentationState'>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<arg declared_type64='JRSUIPresentationState' name='value' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSUIControlSetScrollBarPart'>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<arg declared_type64='JRSUIScrollBarPart' name='value' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSUIControlSetSegmentPosition'>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<arg declared_type64='JRSUISegmentPosition' name='value' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSUIControlSetShowArrows'>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<arg declared_type64='Boolean' name='value' type64='B'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSUIControlSetSize'>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<arg declared_type64='JRSUISize' name='value' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSUIControlSetState'>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<arg declared_type64='JRSUIState' name='value' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSUIControlSetUserInterfaceLayoutDirection'>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<arg declared_type64='JRSUIUserInterfaceLayoutDirection' name='value' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSUIControlSetValueByKey'>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<arg declared_type64='CFTypeRef' name='key' type64='@'/>
<arg declared_type64='CFTypeRef' name='value' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSUIControlSetVariant'>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<arg declared_type64='JRSUIVariant' name='value' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSUIControlSetWidget'>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<arg declared_type64='JRSUIWidget' name='value' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSUIControlSetWindowType'>
<arg declared_type64='JRSUIControlRef' name='control' type64='@'/>
<arg declared_type64='JRSUIWindowType' name='value' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JRSUIControlShouldScrollToClick'>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='JRSUIGetKey'>
<arg declared_type64='JRSUIKey' name='value' type64='q'/>
<retval declared_type64='CFTypeRef' type64='@'/>
</function>
<function name='JRSUIRendererCreate'>
<retval already_retained='true' declared_type64='JRSUIRendererRef' type64='@'/>
</function>
<function name='JRSUIRendererRelease'>
<arg declared_type64='JRSUIRendererRef' name='renderer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</function>
<class name='CALayer'>
<method selector='createRemoteLayerBoundTo:'>
<arg declared_type64='mach_port_t' index='0' name='serverPort' type64='I'/>
<retval declared_type64='NSObject*' type64='@'/>
</method>
<method selector='hostRemoteLayer:'>
<arg declared_type64='uint32_t' index='0' name='layerID' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='JRSAppKitAWT'>
<method class_method='true' selector='awtAppDelegate'>
<retval declared_type64='id' type64='@'/>
</method>
<method class_method='true' selector='markAppIsDaemon'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method class_method='true' selector='registerAWTAppWithOptions:'>
<arg declared_type64='NSDictionary*' index='0' name='options' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='JRSDrag'>
<method class_method='true' selector='currentAllowableActions'>
<retval declared_type64='NSDragOperation' type64='Q'/>
</method>
<method class_method='true' selector='currentModifiers'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='JRSInputMethodController'>
<method selector='availableInputMethodLocales'>
<retval declared_type64='NSArray*' type64='@'/>
</method>
<method class_method='true' selector='controller'>
<retval declared_type64='JRSInputMethodController*' type64='@'/>
</method>
<method selector='currentInputMethodLocale'>
<retval declared_type64='NSString*' type64='@'/>
</method>
<method selector='currentInputMethodName'>
<retval declared_type64='NSString*' type64='@'/>
</method>
<method selector='setCurrentInputMethodForLocale:'>
<arg declared_type64='NSString*' index='0' name='theLocale' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='JRSRenderServer'>
<method class_method='true' selector='recieveRenderServer:'>
<arg declared_type64='NSString*' index='0' name='serverName' type64='@'/>
<retval declared_type64='mach_port_t' type64='I'/>
</method>
<method class_method='true' selector='sendRenderServer:'>
<arg declared_type64='mach_port_t' index='0' name='serverPort' type64='I'/>
<retval declared_type64='NSString*' type64='@'/>
</method>
<method class_method='true' selector='startRenderServer'>
<retval declared_type64='mach_port_t' type64='I'/>
</method>
</class>
<class name='JRSSecurity'>
<method class_method='true' selector='executionPolicyForExecutableCodeSignatureEvaluation:'>
<arg declared_type64='JRSSecurityExecutableCodeSignatureEvaluation' index='0' name='evaluation' type64='I'/>
<retval declared_type64='JRSSecurityExecutionPolicy' type64='I'/>
</method>
</class>
<class name='JRSSymbolicator'>
<method selector='addressForSymbol:'>
<arg declared_type64='NSString*' index='0' name='symbolName' type64='@'/>
<retval declared_type64='uint64_t' type64='Q'/>
</method>
<method class_method='true' selector='symbolicatorForPid:'>
<arg declared_type64='pid_t' index='0' name='pid' type64='i'/>
<retval declared_type64='JRSSymbolicator*' type64='@'/>
</method>
</class>
<class name='NSCursor'>
<method class_method='true' selector='javaBusyButClickableCursor'>
<retval declared_type64='NSCursor*' type64='@'/>
</method>
<method class_method='true' selector='javaMoveCursor'>
<retval declared_type64='NSCursor*' type64='@'/>
</method>
<method class_method='true' selector='javaResizeNECursor'>
<retval declared_type64='NSCursor*' type64='@'/>
</method>
<method class_method='true' selector='javaResizeNWCursor'>
<retval declared_type64='NSCursor*' type64='@'/>
</method>
<method class_method='true' selector='javaResizeSECursor'>
<retval declared_type64='NSCursor*' type64='@'/>
</method>
<method class_method='true' selector='javaResizeSWCursor'>
<retval declared_type64='NSCursor*' type64='@'/>
</method>
<method class_method='true' selector='javaSetAllowsCursorSetInBackground:'>
<arg declared_type64='BOOL' index='0' name='allows' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NSEvent'>
<method selector='deadKeyCharacter'>
<retval declared_type64='unichar' type64='S'/>
</method>
<method selector='willBeHandledByComplexInputMethod'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='NSMenu'>
<method selector='isJavaMenu'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method class_method='true' selector='javaMenuWithTitle:'>
<arg declared_type64='NSString*' index='0' name='title' type64='@'/>
<retval declared_type64='NSMenu*' type64='@'/>
</method>
<method selector='setJavaMenuDelegate:'>
<arg declared_type64='id' index='0' name='delegate' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='NSObject'>
<method selector='handleJavaMenuItemTargetedAtIndex:rect:'>
<arg declared_type64='NSUInteger' index='0' name='menuIndex' type64='Q'/>
<arg declared_type64='NSRect' index='1' name='rect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='handleJavaMouseEvent:'>
<arg declared_type64='NSEvent*' index='0' name='event' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='layerID'>
<retval declared_type64='uint32_t' type64='I'/>
</method>
</class>
<class name='NSWindow'>
<method selector='javaAddToOrderingGroup:'>
<arg declared_type64='NSWindow*' index='0' name='ownedWindow' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='javaRemoveFromOrderingGroup:'>
<arg declared_type64='NSWindow*' index='0' name='ownedWindow' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<informal_protocol name='JRSMenuDelegate'>
<method selector='handleJavaMenuItemTargetedAtIndex:rect:' type64='v56@0:8Q16{CGRect={CGPoint=dd}{CGSize=dd}}24'>
<arg declared_type64='NSUInteger' index='0' name='menuIndex' type64='Q'/>
<arg declared_type64='NSRect' index='1' name='rect' type64='{CGRect={CGPoint=dd}{CGSize=dd}}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='handleJavaMouseEvent:' type64='v24@0:8@16'>
<arg declared_type64='NSEvent*' index='0' name='event' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</informal_protocol>
<informal_protocol name='JRSRemoteLayer'>
<method selector='layerID' type64='I16@0:8'>
<retval declared_type64='uint32_t' type64='I'/>
</method>
</informal_protocol>
</signatures>
