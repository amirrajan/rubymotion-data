<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/Accelerate.framework'/>
<depends_on path='/System/Library/Frameworks/CoreAudio.framework'/>
<depends_on path='/System/Library/Frameworks/IOKit.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<depends_on path='/System/Library/Frameworks/CoreServices.framework'/>
<depends_on path='/System/Library/Frameworks/Foundation.framework'/>
<struct name='AUNodeConnection' type64='{AudioUnitNodeConnection=&quot;sourceNode&quot;i&quot;sourceOutputNumber&quot;I&quot;destNode&quot;i&quot;destInputNumber&quot;I}'>
<field declared_type64='AUNode' name='sourceNode' type64='i'/>
<field declared_type64='UInt32' name='sourceOutputNumber' type64='I'/>
<field declared_type64='AUNode' name='destNode' type64='i'/>
<field declared_type64='UInt32' name='destInputNumber' type64='I'/>
</struct>
<struct name='AUNodeInteraction' type64='{AUNodeInteraction=&quot;nodeInteractionType&quot;I&quot;nodeInteraction&quot;(?=&quot;connection&quot;{AudioUnitNodeConnection=&quot;sourceNode&quot;i&quot;sourceOutputNumber&quot;I&quot;destNode&quot;i&quot;destInputNumber&quot;I}&quot;inputCallback&quot;{AUNodeRenderCallback=&quot;destNode&quot;i&quot;destInputNumber&quot;I&quot;cback&quot;{AURenderCallbackStruct=&quot;inputProc&quot;^?&quot;inputProcRefCon&quot;^v}})}'>
<field declared_type64='UInt32' name='nodeInteractionType' type64='I'/>
<field declared_type64='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/AUGraph.h:313:2)' name='nodeInteraction' type64='(?=&quot;connection&quot;{AudioUnitNodeConnection=&quot;sourceNode&quot;i&quot;sourceOutputNumber&quot;I&quot;destNode&quot;i&quot;destInputNumber&quot;I}&quot;inputCallback&quot;{AUNodeRenderCallback=&quot;destNode&quot;i&quot;destInputNumber&quot;I&quot;cback&quot;{AURenderCallbackStruct=&quot;inputProc&quot;^?&quot;inputProcRefCon&quot;^v}})'/>
</struct>
<struct name='AUNodeRenderCallback' type64='{AUNodeRenderCallback=&quot;destNode&quot;i&quot;destInputNumber&quot;I&quot;cback&quot;{AURenderCallbackStruct=&quot;inputProc&quot;^?&quot;inputProcRefCon&quot;^v}}'>
<field declared_type64='AUNode' name='destNode' type64='i'/>
<field declared_type64='AudioUnitElement' name='destInputNumber' type64='I'/>
<field declared_type64='AURenderCallbackStruct' name='cback' type64='{AURenderCallbackStruct=&quot;inputProc&quot;^?&quot;inputProcRefCon&quot;^v}'/>
</struct>
<struct name='AUPresetEvent' type64='{AUPresetEvent=&quot;scope&quot;I&quot;element&quot;I&quot;preset&quot;^v}'>
<field declared_type64='AudioUnitScope' name='scope' type64='I'/>
<field declared_type64='AudioUnitElement' name='element' type64='I'/>
<field declared_type64='CFPropertyListRef _Nonnull' name='preset' type64='@'/>
</struct>
<struct name='AudioBalanceFade' type64='{AudioBalanceFade=&quot;mLeftRightBalance&quot;f&quot;mBackFrontFade&quot;f&quot;mType&quot;I&quot;mChannelLayout&quot;^{AudioChannelLayout}}'>
<field declared_type64='Float32' name='mLeftRightBalance' type64='f'/>
<field declared_type64='Float32' name='mBackFrontFade' type64='f'/>
<field declared_type64='AudioBalanceFadeType' name='mType' type64='I'/>
<field const='true' declared_type64='AudioChannelLayout * _Nonnull' name='mChannelLayout' type64='^{AudioChannelLayout=III[1{AudioChannelDescription=II[3f]}]}'/>
</struct>
<struct name='AudioBytePacketTranslation' type64='{AudioBytePacketTranslation=&quot;mByte&quot;q&quot;mPacket&quot;q&quot;mByteOffsetInPacket&quot;I&quot;mFlags&quot;I}'>
<field declared_type64='SInt64' name='mByte' type64='q'/>
<field declared_type64='SInt64' name='mPacket' type64='q'/>
<field declared_type64='UInt32' name='mByteOffsetInPacket' type64='I'/>
<field declared_type64='AudioBytePacketTranslationFlags' name='mFlags' type64='I'/>
</struct>
<struct name='AudioConverterPrimeInfo' type64='{AudioConverterPrimeInfo=&quot;leadingFrames&quot;I&quot;trailingFrames&quot;I}'>
<field declared_type64='UInt32' name='leadingFrames' type64='I'/>
<field declared_type64='UInt32' name='trailingFrames' type64='I'/>
</struct>
<struct name='AudioFileFDFTable' type64='{AudioFileFDFTable=&quot;mComponentStorage&quot;^v&quot;mReadBytesFDF&quot;^?&quot;mWriteBytesFDF&quot;^?&quot;mReadPacketsFDF&quot;^?&quot;mWritePacketsFDF&quot;^?&quot;mGetPropertyInfoFDF&quot;^?&quot;mGetPropertyFDF&quot;^?&quot;mSetPropertyFDF&quot;^?&quot;mCountUserDataFDF&quot;^?&quot;mGetUserDataSizeFDF&quot;^?&quot;mGetUserDataFDF&quot;^?&quot;mSetUserDataFDF&quot;^?}'>
<field declared_type64='void * _Nonnull' name='mComponentStorage' type64='^v'/>
<field declared_type64='ReadBytesFDF _Nonnull' function_pointer='true' name='mReadBytesFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='Boolean' type64='B'/>
<arg declared_type64='SInt64' type64='q'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='WriteBytesFDF _Nonnull' function_pointer='true' name='mWriteBytesFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='Boolean' type64='B'/>
<arg declared_type64='SInt64' type64='q'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<arg const='true' declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='ReadPacketsFDF _Nonnull' function_pointer='true' name='mReadPacketsFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='Boolean' type64='B'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<arg declared_type64='AudioStreamPacketDescription * _Nullable' type64='^{AudioStreamPacketDescription=qII}'/>
<arg declared_type64='SInt64' type64='q'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='WritePacketsFDF _Nonnull' function_pointer='true' name='mWritePacketsFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='Boolean' type64='B'/>
<arg declared_type64='UInt32' type64='I'/>
<arg const='true' declared_type64='AudioStreamPacketDescription * _Nullable' type64='^{AudioStreamPacketDescription=qII}'/>
<arg declared_type64='SInt64' type64='q'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<arg const='true' declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='GetPropertyInfoFDF _Nonnull' function_pointer='true' name='mGetPropertyInfoFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='AudioFilePropertyID' type64='I'/>
<arg declared_type64='UInt32 * _Nullable' type64='^I'/>
<arg declared_type64='UInt32 * _Nullable' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='GetPropertyFDF _Nonnull' function_pointer='true' name='mGetPropertyFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='AudioFilePropertyID' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='SetPropertyFDF _Nonnull' function_pointer='true' name='mSetPropertyFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='AudioFilePropertyID' type64='I'/>
<arg declared_type64='UInt32' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='CountUserDataFDF _Nonnull' function_pointer='true' name='mCountUserDataFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='GetUserDataSizeFDF _Nonnull' function_pointer='true' name='mGetUserDataSizeFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='GetUserDataFDF _Nonnull' function_pointer='true' name='mGetUserDataFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='SetUserDataFDF _Nonnull' function_pointer='true' name='mSetUserDataFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='UInt32' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
</struct>
<struct name='AudioFileFDFTableExtended' type64='{AudioFileFDFTableExtended=&quot;mComponentStorage&quot;^v&quot;mReadBytesFDF&quot;^?&quot;mWriteBytesFDF&quot;^?&quot;mReadPacketsFDF&quot;^?&quot;mWritePacketsFDF&quot;^?&quot;mGetPropertyInfoFDF&quot;^?&quot;mGetPropertyFDF&quot;^?&quot;mSetPropertyFDF&quot;^?&quot;mCountUserDataFDF&quot;^?&quot;mGetUserDataSizeFDF&quot;^?&quot;mGetUserDataFDF&quot;^?&quot;mSetUserDataFDF&quot;^?&quot;mReadPacketDataFDF&quot;^?}'>
<field declared_type64='void * _Nonnull' name='mComponentStorage' type64='^v'/>
<field declared_type64='ReadBytesFDF _Nonnull' function_pointer='true' name='mReadBytesFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='Boolean' type64='B'/>
<arg declared_type64='SInt64' type64='q'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='WriteBytesFDF _Nonnull' function_pointer='true' name='mWriteBytesFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='Boolean' type64='B'/>
<arg declared_type64='SInt64' type64='q'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<arg const='true' declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='ReadPacketsFDF _Nonnull' function_pointer='true' name='mReadPacketsFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='Boolean' type64='B'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<arg declared_type64='AudioStreamPacketDescription * _Nullable' type64='^{AudioStreamPacketDescription=qII}'/>
<arg declared_type64='SInt64' type64='q'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='WritePacketsFDF _Nonnull' function_pointer='true' name='mWritePacketsFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='Boolean' type64='B'/>
<arg declared_type64='UInt32' type64='I'/>
<arg const='true' declared_type64='AudioStreamPacketDescription * _Nullable' type64='^{AudioStreamPacketDescription=qII}'/>
<arg declared_type64='SInt64' type64='q'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<arg const='true' declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='GetPropertyInfoFDF _Nonnull' function_pointer='true' name='mGetPropertyInfoFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='AudioFilePropertyID' type64='I'/>
<arg declared_type64='UInt32 * _Nullable' type64='^I'/>
<arg declared_type64='UInt32 * _Nullable' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='GetPropertyFDF _Nonnull' function_pointer='true' name='mGetPropertyFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='AudioFilePropertyID' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='SetPropertyFDF _Nonnull' function_pointer='true' name='mSetPropertyFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='AudioFilePropertyID' type64='I'/>
<arg declared_type64='UInt32' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='CountUserDataFDF _Nonnull' function_pointer='true' name='mCountUserDataFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='GetUserDataSizeFDF _Nonnull' function_pointer='true' name='mGetUserDataSizeFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='GetUserDataFDF _Nonnull' function_pointer='true' name='mGetUserDataFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='SetUserDataFDF _Nonnull' function_pointer='true' name='mSetUserDataFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='UInt32' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
<field declared_type64='ReadPacketDataFDF _Nonnull' function_pointer='true' name='mReadPacketDataFDF' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='Boolean' type64='B'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<arg declared_type64='AudioStreamPacketDescription * _Nullable' type64='^{AudioStreamPacketDescription=qII}'/>
<arg declared_type64='SInt64' type64='q'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</field>
</struct>
<struct name='AudioFileMarker' type64='{AudioFileMarker=&quot;mFramePosition&quot;d&quot;mName&quot;^{__CFString}&quot;mMarkerID&quot;i&quot;mSMPTETime&quot;{AudioFile_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;C&quot;mSeconds&quot;C&quot;mFrames&quot;C&quot;mSubFrameSampleOffset&quot;I}&quot;mType&quot;I&quot;mReserved&quot;S&quot;mChannel&quot;S}'>
<field declared_type64='Float64' name='mFramePosition' type64='d'/>
<field declared_type64='CFStringRef _Nullable' name='mName' type64='^{__CFString=}'/>
<field declared_type64='SInt32' name='mMarkerID' type64='i'/>
<field declared_type64='AudioFile_SMPTE_Time' name='mSMPTETime' type64='{AudioFile_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;C&quot;mSeconds&quot;C&quot;mFrames&quot;C&quot;mSubFrameSampleOffset&quot;I}'/>
<field declared_type64='UInt32' name='mType' type64='I'/>
<field declared_type64='UInt16' name='mReserved' type64='S'/>
<field declared_type64='UInt16' name='mChannel' type64='S'/>
</struct>
<struct name='AudioFileMarkerList' type64='{AudioFileMarkerList=&quot;mSMPTE_TimeType&quot;I&quot;mNumberMarkers&quot;I&quot;mMarkers&quot;[1{AudioFileMarker=&quot;mFramePosition&quot;d&quot;mName&quot;^{__CFString}&quot;mMarkerID&quot;i&quot;mSMPTETime&quot;{AudioFile_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;C&quot;mSeconds&quot;C&quot;mFrames&quot;C&quot;mSubFrameSampleOffset&quot;I}&quot;mType&quot;I&quot;mReserved&quot;S&quot;mChannel&quot;S}]}'>
<field declared_type64='UInt32' name='mSMPTE_TimeType' type64='I'/>
<field declared_type64='UInt32' name='mNumberMarkers' type64='I'/>
<field declared_type64='AudioFileMarker*' name='mMarkers' type64='[1{AudioFileMarker=&quot;mFramePosition&quot;d&quot;mName&quot;^{__CFString}&quot;mMarkerID&quot;i&quot;mSMPTETime&quot;{AudioFile_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;C&quot;mSeconds&quot;C&quot;mFrames&quot;C&quot;mSubFrameSampleOffset&quot;I}&quot;mType&quot;I&quot;mReserved&quot;S&quot;mChannel&quot;S}]'/>
</struct>
<struct name='AudioFilePacketTableInfo' type64='{AudioFilePacketTableInfo=&quot;mNumberValidFrames&quot;q&quot;mPrimingFrames&quot;i&quot;mRemainderFrames&quot;i}'>
<field declared_type64='SInt64' name='mNumberValidFrames' type64='q'/>
<field declared_type64='SInt32' name='mPrimingFrames' type64='i'/>
<field declared_type64='SInt32' name='mRemainderFrames' type64='i'/>
</struct>
<struct name='AudioFileRegion' type64='{AudioFileRegion=&quot;mRegionID&quot;I&quot;mName&quot;^{__CFString}&quot;mFlags&quot;I&quot;mNumberMarkers&quot;I&quot;mMarkers&quot;[1{AudioFileMarker=&quot;mFramePosition&quot;d&quot;mName&quot;^{__CFString}&quot;mMarkerID&quot;i&quot;mSMPTETime&quot;{AudioFile_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;C&quot;mSeconds&quot;C&quot;mFrames&quot;C&quot;mSubFrameSampleOffset&quot;I}&quot;mType&quot;I&quot;mReserved&quot;S&quot;mChannel&quot;S}]}'>
<field declared_type64='UInt32' name='mRegionID' type64='I'/>
<field declared_type64='CFStringRef _Nonnull' name='mName' type64='^{__CFString=}'/>
<field declared_type64='AudioFileRegionFlags' name='mFlags' type64='I'/>
<field declared_type64='UInt32' name='mNumberMarkers' type64='I'/>
<field declared_type64='AudioFileMarker*' name='mMarkers' type64='[1{AudioFileMarker=&quot;mFramePosition&quot;d&quot;mName&quot;^{__CFString}&quot;mMarkerID&quot;i&quot;mSMPTETime&quot;{AudioFile_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;C&quot;mSeconds&quot;C&quot;mFrames&quot;C&quot;mSubFrameSampleOffset&quot;I}&quot;mType&quot;I&quot;mReserved&quot;S&quot;mChannel&quot;S}]'/>
</struct>
<struct name='AudioFileRegionList' type64='{AudioFileRegionList=&quot;mSMPTE_TimeType&quot;I&quot;mNumberRegions&quot;I&quot;mRegions&quot;[1{AudioFileRegion=&quot;mRegionID&quot;I&quot;mName&quot;^{__CFString}&quot;mFlags&quot;I&quot;mNumberMarkers&quot;I&quot;mMarkers&quot;[1{AudioFileMarker=&quot;mFramePosition&quot;d&quot;mName&quot;^{__CFString}&quot;mMarkerID&quot;i&quot;mSMPTETime&quot;{AudioFile_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;C&quot;mSeconds&quot;C&quot;mFrames&quot;C&quot;mSubFrameSampleOffset&quot;I}&quot;mType&quot;I&quot;mReserved&quot;S&quot;mChannel&quot;S}]}]}'>
<field declared_type64='UInt32' name='mSMPTE_TimeType' type64='I'/>
<field declared_type64='UInt32' name='mNumberRegions' type64='I'/>
<field declared_type64='AudioFileRegion*' name='mRegions' type64='[1{AudioFileRegion=&quot;mRegionID&quot;I&quot;mName&quot;^{__CFString}&quot;mFlags&quot;I&quot;mNumberMarkers&quot;I&quot;mMarkers&quot;[1{AudioFileMarker=&quot;mFramePosition&quot;d&quot;mName&quot;^{__CFString}&quot;mMarkerID&quot;i&quot;mSMPTETime&quot;{AudioFile_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;C&quot;mSeconds&quot;C&quot;mFrames&quot;C&quot;mSubFrameSampleOffset&quot;I}&quot;mType&quot;I&quot;mReserved&quot;S&quot;mChannel&quot;S}]}]'/>
</struct>
<struct name='AudioFileTypeAndFormatID' type64='{AudioFileTypeAndFormatID=&quot;mFileType&quot;I&quot;mFormatID&quot;I}'>
<field declared_type64='AudioFileTypeID' name='mFileType' type64='I'/>
<field declared_type64='UInt32' name='mFormatID' type64='I'/>
</struct>
<struct name='AudioFile_SMPTE_Time' type64='{AudioFile_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;C&quot;mSeconds&quot;C&quot;mFrames&quot;C&quot;mSubFrameSampleOffset&quot;I}'>
<field declared_type64='SInt8' name='mHours' type64='c'/>
<field declared_type64='UInt8' name='mMinutes' type64='C'/>
<field declared_type64='UInt8' name='mSeconds' type64='C'/>
<field declared_type64='UInt8' name='mFrames' type64='C'/>
<field declared_type64='UInt32' name='mSubFrameSampleOffset' type64='I'/>
</struct>
<struct name='AudioFormatInfo' type64='{AudioFormatInfo=&quot;mASBD&quot;{AudioStreamBasicDescription=&quot;mSampleRate&quot;d&quot;mFormatID&quot;I&quot;mFormatFlags&quot;I&quot;mBytesPerPacket&quot;I&quot;mFramesPerPacket&quot;I&quot;mBytesPerFrame&quot;I&quot;mChannelsPerFrame&quot;I&quot;mBitsPerChannel&quot;I&quot;mReserved&quot;I}&quot;mMagicCookie&quot;^v&quot;mMagicCookieSize&quot;I}'>
<field declared_type64='AudioStreamBasicDescription' name='mASBD' type64='{AudioStreamBasicDescription=&quot;mSampleRate&quot;d&quot;mFormatID&quot;I&quot;mFormatFlags&quot;I&quot;mBytesPerPacket&quot;I&quot;mFramesPerPacket&quot;I&quot;mBytesPerFrame&quot;I&quot;mChannelsPerFrame&quot;I&quot;mBitsPerChannel&quot;I&quot;mReserved&quot;I}'/>
<field const='true' declared_type64='void * _Nonnull' name='mMagicCookie' type64='^v'/>
<field declared_type64='UInt32' name='mMagicCookieSize' type64='I'/>
</struct>
<struct name='AudioFormatListItem' type64='{AudioFormatListItem=&quot;mASBD&quot;{AudioStreamBasicDescription=&quot;mSampleRate&quot;d&quot;mFormatID&quot;I&quot;mFormatFlags&quot;I&quot;mBytesPerPacket&quot;I&quot;mFramesPerPacket&quot;I&quot;mBytesPerFrame&quot;I&quot;mChannelsPerFrame&quot;I&quot;mBitsPerChannel&quot;I&quot;mReserved&quot;I}&quot;mChannelLayoutTag&quot;I}'>
<field declared_type64='AudioStreamBasicDescription' name='mASBD' type64='{AudioStreamBasicDescription=&quot;mSampleRate&quot;d&quot;mFormatID&quot;I&quot;mFormatFlags&quot;I&quot;mBytesPerPacket&quot;I&quot;mFramesPerPacket&quot;I&quot;mBytesPerFrame&quot;I&quot;mChannelsPerFrame&quot;I&quot;mBitsPerChannel&quot;I&quot;mReserved&quot;I}'/>
<field declared_type64='AudioChannelLayoutTag' name='mChannelLayoutTag' type64='I'/>
</struct>
<struct name='AudioFramePacketTranslation' type64='{AudioFramePacketTranslation=&quot;mFrame&quot;q&quot;mPacket&quot;q&quot;mFrameOffsetInPacket&quot;I}'>
<field declared_type64='SInt64' name='mFrame' type64='q'/>
<field declared_type64='SInt64' name='mPacket' type64='q'/>
<field declared_type64='UInt32' name='mFrameOffsetInPacket' type64='I'/>
</struct>
<struct name='AudioPanningInfo' type64='{AudioPanningInfo=&quot;mPanningMode&quot;I&quot;mCoordinateFlags&quot;I&quot;mCoordinates&quot;[3f]&quot;mGainScale&quot;f&quot;mOutputChannelMap&quot;^{AudioChannelLayout}}'>
<field declared_type64='AudioPanningMode' name='mPanningMode' type64='I'/>
<field declared_type64='UInt32' name='mCoordinateFlags' type64='I'/>
<field declared_type64='Float32*' name='mCoordinates' type64='[3f]'/>
<field declared_type64='Float32' name='mGainScale' type64='f'/>
<field const='true' declared_type64='AudioChannelLayout * _Nonnull' name='mOutputChannelMap' type64='^{AudioChannelLayout=III[1{AudioChannelDescription=II[3f]}]}'/>
</struct>
<struct name='AudioQueueBuffer' type64='{AudioQueueBuffer=&quot;mAudioDataBytesCapacity&quot;I&quot;mAudioData&quot;^v&quot;mAudioDataByteSize&quot;I&quot;mUserData&quot;^v&quot;mPacketDescriptionCapacity&quot;I&quot;mPacketDescriptions&quot;^{AudioStreamPacketDescription}&quot;mPacketDescriptionCount&quot;I}'>
<field const='true' declared_type64='UInt32' name='mAudioDataBytesCapacity' type64='I'/>
<field const='true' declared_type64='void * _Nonnull' name='mAudioData' type64='^v'/>
<field declared_type64='UInt32' name='mAudioDataByteSize' type64='I'/>
<field declared_type64='void * _Nullable' name='mUserData' type64='^v'/>
<field const='true' declared_type64='UInt32' name='mPacketDescriptionCapacity' type64='I'/>
<field const='true' declared_type64='AudioStreamPacketDescription * _Nullable' name='mPacketDescriptions' type64='^{AudioStreamPacketDescription=qII}'/>
<field declared_type64='UInt32' name='mPacketDescriptionCount' type64='I'/>
</struct>
<struct name='AudioQueueLevelMeterState' type64='{AudioQueueLevelMeterState=&quot;mAveragePower&quot;f&quot;mPeakPower&quot;f}'>
<field declared_type64='Float32' name='mAveragePower' type64='f'/>
<field declared_type64='Float32' name='mPeakPower' type64='f'/>
</struct>
<struct name='AudioQueueParameterEvent' type64='{AudioQueueParameterEvent=&quot;mID&quot;I&quot;mValue&quot;f}'>
<field declared_type64='AudioQueueParameterID' name='mID' type64='I'/>
<field declared_type64='AudioQueueParameterValue' name='mValue' type64='f'/>
</struct>
<struct name='AudioUnitEvent' type64='{AudioUnitEvent=&quot;mEventType&quot;I&quot;mArgument&quot;(?=&quot;mParameter&quot;{AudioUnitParameter=&quot;mAudioUnit&quot;^{ComponentInstanceRecord}&quot;mParameterID&quot;I&quot;mScope&quot;I&quot;mElement&quot;I}&quot;mProperty&quot;{AudioUnitProperty=&quot;mAudioUnit&quot;^{ComponentInstanceRecord}&quot;mPropertyID&quot;I&quot;mScope&quot;I&quot;mElement&quot;I})}'>
<field declared_type64='AudioUnitEventType' name='mEventType' type64='I'/>
<field declared_type64='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/AudioUnitUtilities.h:112:5)' name='mArgument' type64='(?=&quot;mParameter&quot;{AudioUnitParameter=&quot;mAudioUnit&quot;^{ComponentInstanceRecord}&quot;mParameterID&quot;I&quot;mScope&quot;I&quot;mElement&quot;I}&quot;mProperty&quot;{AudioUnitProperty=&quot;mAudioUnit&quot;^{ComponentInstanceRecord}&quot;mPropertyID&quot;I&quot;mScope&quot;I&quot;mElement&quot;I})'/>
</struct>
<struct name='AudioUnitNodeConnection' type64='{AudioUnitNodeConnection=&quot;sourceNode&quot;i&quot;sourceOutputNumber&quot;I&quot;destNode&quot;i&quot;destInputNumber&quot;I}'>
<field declared_type64='AUNode' name='sourceNode' type64='i'/>
<field declared_type64='UInt32' name='sourceOutputNumber' type64='I'/>
<field declared_type64='AUNode' name='destNode' type64='i'/>
<field declared_type64='UInt32' name='destInputNumber' type64='I'/>
</struct>
<struct name='CABarBeatTime' type64='{CABarBeatTime=&quot;bar&quot;i&quot;beat&quot;S&quot;subbeat&quot;S&quot;subbeatDivisor&quot;S&quot;reserved&quot;S}'>
<field declared_type64='SInt32' name='bar' type64='i'/>
<field declared_type64='UInt16' name='beat' type64='S'/>
<field declared_type64='UInt16' name='subbeat' type64='S'/>
<field declared_type64='UInt16' name='subbeatDivisor' type64='S'/>
<field declared_type64='UInt16' name='reserved' type64='S'/>
</struct>
<struct name='CAClockTime' type64='{CAClockTime=&quot;format&quot;I&quot;reserved&quot;I&quot;time&quot;(?=&quot;hostTime&quot;Q&quot;samples&quot;d&quot;beats&quot;d&quot;seconds&quot;d&quot;smpte&quot;{SMPTETime=&quot;mSubframes&quot;s&quot;mSubframeDivisor&quot;s&quot;mCounter&quot;I&quot;mType&quot;I&quot;mFlags&quot;I&quot;mHours&quot;s&quot;mMinutes&quot;s&quot;mSeconds&quot;s&quot;mFrames&quot;s})}'>
<field declared_type64='CAClockTimeFormat' name='format' type64='I'/>
<field declared_type64='UInt32' name='reserved' type64='I'/>
<field declared_type64='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/System/Library/Frameworks/AudioToolbox.framework/Headers/CoreAudioClock.h:308:2)' name='time' type64='(?=&quot;hostTime&quot;Q&quot;samples&quot;d&quot;beats&quot;d&quot;seconds&quot;d&quot;smpte&quot;{SMPTETime=&quot;mSubframes&quot;s&quot;mSubframeDivisor&quot;s&quot;mCounter&quot;I&quot;mType&quot;I&quot;mFlags&quot;I&quot;mHours&quot;s&quot;mMinutes&quot;s&quot;mSeconds&quot;s&quot;mFrames&quot;s})'/>
</struct>
<struct name='CAFAudioDescription' type64='{CAFAudioDescription=&quot;mSampleRate&quot;d&quot;mFormatID&quot;I&quot;mFormatFlags&quot;I&quot;mBytesPerPacket&quot;I&quot;mFramesPerPacket&quot;I&quot;mChannelsPerFrame&quot;I&quot;mBitsPerChannel&quot;I}'>
<field declared_type64='Float64' name='mSampleRate' type64='d'/>
<field declared_type64='UInt32' name='mFormatID' type64='I'/>
<field declared_type64='CAFFormatFlags' name='mFormatFlags' type64='I'/>
<field declared_type64='UInt32' name='mBytesPerPacket' type64='I'/>
<field declared_type64='UInt32' name='mFramesPerPacket' type64='I'/>
<field declared_type64='UInt32' name='mChannelsPerFrame' type64='I'/>
<field declared_type64='UInt32' name='mBitsPerChannel' type64='I'/>
</struct>
<struct name='CAFAudioFormatListItem' type64='{CAFAudioFormatListItem=&quot;mFormat&quot;{CAFAudioDescription=&quot;mSampleRate&quot;d&quot;mFormatID&quot;I&quot;mFormatFlags&quot;I&quot;mBytesPerPacket&quot;I&quot;mFramesPerPacket&quot;I&quot;mChannelsPerFrame&quot;I&quot;mBitsPerChannel&quot;I}&quot;mChannelLayoutTag&quot;I}'>
<field declared_type64='CAFAudioDescription' name='mFormat' type64='{CAFAudioDescription=&quot;mSampleRate&quot;d&quot;mFormatID&quot;I&quot;mFormatFlags&quot;I&quot;mBytesPerPacket&quot;I&quot;mFramesPerPacket&quot;I&quot;mChannelsPerFrame&quot;I&quot;mBitsPerChannel&quot;I}'/>
<field declared_type64='UInt32' name='mChannelLayoutTag' type64='I'/>
</struct>
<struct name='CAFChunkHeader' type64='{CAFChunkHeader=&quot;mChunkType&quot;I&quot;mChunkSize&quot;q}'>
<field declared_type64='UInt32' name='mChunkType' type64='I'/>
<field declared_type64='SInt64' name='mChunkSize' type64='q'/>
</struct>
<struct name='CAFDataChunk' type64='{CAFDataChunk=&quot;mEditCount&quot;I&quot;mData&quot;[1C]}'>
<field declared_type64='UInt32' name='mEditCount' type64='I'/>
<field declared_type64='UInt8*' name='mData' type64='[1C]'/>
</struct>
<struct name='CAFFileHeader' type64='{CAFFileHeader=&quot;mFileType&quot;I&quot;mFileVersion&quot;S&quot;mFileFlags&quot;S}'>
<field declared_type64='UInt32' name='mFileType' type64='I'/>
<field declared_type64='UInt16' name='mFileVersion' type64='S'/>
<field declared_type64='UInt16' name='mFileFlags' type64='S'/>
</struct>
<struct name='CAFInfoStrings' type64='{CAFInfoStrings=&quot;mNumEntries&quot;I}'>
<field declared_type64='UInt32' name='mNumEntries' type64='I'/>
</struct>
<struct name='CAFInstrumentChunk' type64='{CAFInstrumentChunk=&quot;mBaseNote&quot;f&quot;mMIDILowNote&quot;C&quot;mMIDIHighNote&quot;C&quot;mMIDILowVelocity&quot;C&quot;mMIDIHighVelocity&quot;C&quot;mdBGain&quot;f&quot;mStartRegionID&quot;I&quot;mSustainRegionID&quot;I&quot;mReleaseRegionID&quot;I&quot;mInstrumentID&quot;I}'>
<field declared_type64='Float32' name='mBaseNote' type64='f'/>
<field declared_type64='UInt8' name='mMIDILowNote' type64='C'/>
<field declared_type64='UInt8' name='mMIDIHighNote' type64='C'/>
<field declared_type64='UInt8' name='mMIDILowVelocity' type64='C'/>
<field declared_type64='UInt8' name='mMIDIHighVelocity' type64='C'/>
<field declared_type64='Float32' name='mdBGain' type64='f'/>
<field declared_type64='UInt32' name='mStartRegionID' type64='I'/>
<field declared_type64='UInt32' name='mSustainRegionID' type64='I'/>
<field declared_type64='UInt32' name='mReleaseRegionID' type64='I'/>
<field declared_type64='UInt32' name='mInstrumentID' type64='I'/>
</struct>
<struct name='CAFMarker' type64='{CAFMarker=&quot;mType&quot;I&quot;mFramePosition&quot;d&quot;mMarkerID&quot;I&quot;mSMPTETime&quot;{CAF_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;c&quot;mSeconds&quot;c&quot;mFrames&quot;c&quot;mSubFrameSampleOffset&quot;I}&quot;mChannel&quot;I}'>
<field declared_type64='UInt32' name='mType' type64='I'/>
<field declared_type64='Float64' name='mFramePosition' type64='d'/>
<field declared_type64='UInt32' name='mMarkerID' type64='I'/>
<field declared_type64='CAF_SMPTE_Time' name='mSMPTETime' type64='{CAF_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;c&quot;mSeconds&quot;c&quot;mFrames&quot;c&quot;mSubFrameSampleOffset&quot;I}'/>
<field declared_type64='UInt32' name='mChannel' type64='I'/>
</struct>
<struct name='CAFMarkerChunk' type64='{CAFMarkerChunk=&quot;mSMPTE_TimeType&quot;I&quot;mNumberMarkers&quot;I&quot;mMarkers&quot;[1{CAFMarker=&quot;mType&quot;I&quot;mFramePosition&quot;d&quot;mMarkerID&quot;I&quot;mSMPTETime&quot;{CAF_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;c&quot;mSeconds&quot;c&quot;mFrames&quot;c&quot;mSubFrameSampleOffset&quot;I}&quot;mChannel&quot;I}]}'>
<field declared_type64='UInt32' name='mSMPTE_TimeType' type64='I'/>
<field declared_type64='UInt32' name='mNumberMarkers' type64='I'/>
<field declared_type64='CAFMarker*' name='mMarkers' type64='[1{CAFMarker=&quot;mType&quot;I&quot;mFramePosition&quot;d&quot;mMarkerID&quot;I&quot;mSMPTETime&quot;{CAF_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;c&quot;mSeconds&quot;c&quot;mFrames&quot;c&quot;mSubFrameSampleOffset&quot;I}&quot;mChannel&quot;I}]'/>
</struct>
<struct name='CAFOverviewChunk' type64='{CAFOverviewChunk=&quot;mEditCount&quot;I&quot;mNumFramesPerOVWSample&quot;I&quot;mData&quot;[1{CAFOverviewSample=&quot;mMinValue&quot;s&quot;mMaxValue&quot;s}]}'>
<field declared_type64='UInt32' name='mEditCount' type64='I'/>
<field declared_type64='UInt32' name='mNumFramesPerOVWSample' type64='I'/>
<field declared_type64='CAFOverviewSample*' name='mData' type64='[1{CAFOverviewSample=&quot;mMinValue&quot;s&quot;mMaxValue&quot;s}]'/>
</struct>
<struct name='CAFOverviewSample' type64='{CAFOverviewSample=&quot;mMinValue&quot;s&quot;mMaxValue&quot;s}'>
<field declared_type64='SInt16' name='mMinValue' type64='s'/>
<field declared_type64='SInt16' name='mMaxValue' type64='s'/>
</struct>
<struct name='CAFPacketTableHeader' type64='{CAFPacketTableHeader=&quot;mNumberPackets&quot;q&quot;mNumberValidFrames&quot;q&quot;mPrimingFrames&quot;i&quot;mRemainderFrames&quot;i&quot;mPacketDescriptions&quot;[1C]}'>
<field declared_type64='SInt64' name='mNumberPackets' type64='q'/>
<field declared_type64='SInt64' name='mNumberValidFrames' type64='q'/>
<field declared_type64='SInt32' name='mPrimingFrames' type64='i'/>
<field declared_type64='SInt32' name='mRemainderFrames' type64='i'/>
<field declared_type64='UInt8*' name='mPacketDescriptions' type64='[1C]'/>
</struct>
<struct name='CAFPeakChunk' type64='{CAFPeakChunk=&quot;mEditCount&quot;I&quot;mPeaks&quot;[1{CAFPositionPeak=&quot;mValue&quot;f&quot;mFrameNumber&quot;Q}]}'>
<field declared_type64='UInt32' name='mEditCount' type64='I'/>
<field declared_type64='CAFPositionPeak*' name='mPeaks' type64='[1{CAFPositionPeak=&quot;mValue&quot;f&quot;mFrameNumber&quot;Q}]'/>
</struct>
<struct name='CAFPositionPeak' type64='{CAFPositionPeak=&quot;mValue&quot;f&quot;mFrameNumber&quot;Q}'>
<field declared_type64='Float32' name='mValue' type64='f'/>
<field declared_type64='UInt64' name='mFrameNumber' type64='Q'/>
</struct>
<struct name='CAFRegion' type64='{CAFRegion=&quot;mRegionID&quot;I&quot;mFlags&quot;I&quot;mNumberMarkers&quot;I&quot;mMarkers&quot;[1{CAFMarker=&quot;mType&quot;I&quot;mFramePosition&quot;d&quot;mMarkerID&quot;I&quot;mSMPTETime&quot;{CAF_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;c&quot;mSeconds&quot;c&quot;mFrames&quot;c&quot;mSubFrameSampleOffset&quot;I}&quot;mChannel&quot;I}]}'>
<field declared_type64='UInt32' name='mRegionID' type64='I'/>
<field declared_type64='CAFRegionFlags' name='mFlags' type64='I'/>
<field declared_type64='UInt32' name='mNumberMarkers' type64='I'/>
<field declared_type64='CAFMarker*' name='mMarkers' type64='[1{CAFMarker=&quot;mType&quot;I&quot;mFramePosition&quot;d&quot;mMarkerID&quot;I&quot;mSMPTETime&quot;{CAF_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;c&quot;mSeconds&quot;c&quot;mFrames&quot;c&quot;mSubFrameSampleOffset&quot;I}&quot;mChannel&quot;I}]'/>
</struct>
<struct name='CAFRegionChunk' type64='{CAFRegionChunk=&quot;mSMPTE_TimeType&quot;I&quot;mNumberRegions&quot;I&quot;mRegions&quot;[1{CAFRegion=&quot;mRegionID&quot;I&quot;mFlags&quot;I&quot;mNumberMarkers&quot;I&quot;mMarkers&quot;[1{CAFMarker=&quot;mType&quot;I&quot;mFramePosition&quot;d&quot;mMarkerID&quot;I&quot;mSMPTETime&quot;{CAF_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;c&quot;mSeconds&quot;c&quot;mFrames&quot;c&quot;mSubFrameSampleOffset&quot;I}&quot;mChannel&quot;I}]}]}'>
<field declared_type64='UInt32' name='mSMPTE_TimeType' type64='I'/>
<field declared_type64='UInt32' name='mNumberRegions' type64='I'/>
<field declared_type64='CAFRegion*' name='mRegions' type64='[1{CAFRegion=&quot;mRegionID&quot;I&quot;mFlags&quot;I&quot;mNumberMarkers&quot;I&quot;mMarkers&quot;[1{CAFMarker=&quot;mType&quot;I&quot;mFramePosition&quot;d&quot;mMarkerID&quot;I&quot;mSMPTETime&quot;{CAF_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;c&quot;mSeconds&quot;c&quot;mFrames&quot;c&quot;mSubFrameSampleOffset&quot;I}&quot;mChannel&quot;I}]}]'/>
</struct>
<struct name='CAFStringID' type64='{CAFStringID=&quot;mStringID&quot;I&quot;mStringStartByteOffset&quot;q}'>
<field declared_type64='UInt32' name='mStringID' type64='I'/>
<field declared_type64='SInt64' name='mStringStartByteOffset' type64='q'/>
</struct>
<struct name='CAFStrings' type64='{CAFStrings=&quot;mNumEntries&quot;I&quot;mStringsIDs&quot;[1{CAFStringID=&quot;mStringID&quot;I&quot;mStringStartByteOffset&quot;q}]}'>
<field declared_type64='UInt32' name='mNumEntries' type64='I'/>
<field declared_type64='CAFStringID*' name='mStringsIDs' type64='[1{CAFStringID=&quot;mStringID&quot;I&quot;mStringStartByteOffset&quot;q}]'/>
</struct>
<struct name='CAFUMIDChunk' type64='{CAFUMIDChunk=&quot;mBytes&quot;[64C]}'>
<field declared_type64='UInt8*' name='mBytes' type64='[64C]'/>
</struct>
<struct name='CAF_SMPTE_Time' type64='{CAF_SMPTE_Time=&quot;mHours&quot;c&quot;mMinutes&quot;c&quot;mSeconds&quot;c&quot;mFrames&quot;c&quot;mSubFrameSampleOffset&quot;I}'>
<field declared_type64='SInt8' name='mHours' type64='c'/>
<field declared_type64='SInt8' name='mMinutes' type64='c'/>
<field declared_type64='SInt8' name='mSeconds' type64='c'/>
<field declared_type64='SInt8' name='mFrames' type64='c'/>
<field declared_type64='UInt32' name='mSubFrameSampleOffset' type64='I'/>
</struct>
<struct name='CAF_UUID_ChunkHeader' type64='{CAF_UUID_ChunkHeader=&quot;mHeader&quot;{CAFChunkHeader=&quot;mChunkType&quot;I&quot;mChunkSize&quot;q}&quot;mUUID&quot;[16C]}'>
<field declared_type64='CAFChunkHeader' name='mHeader' type64='{CAFChunkHeader=&quot;mChunkType&quot;I&quot;mChunkSize&quot;q}'/>
<field declared_type64='UInt8*' name='mUUID' type64='[16C]'/>
</struct>
<struct name='CAMeterTrackEntry' type64='{CAMeterTrackEntry=&quot;beats&quot;d&quot;meterNumer&quot;S&quot;meterDenom&quot;S}'>
<field declared_type64='CAClockBeats' name='beats' type64='d'/>
<field declared_type64='UInt16' name='meterNumer' type64='S'/>
<field declared_type64='UInt16' name='meterDenom' type64='S'/>
</struct>
<struct name='CATempoMapEntry' type64='{CATempoMapEntry=&quot;beats&quot;d&quot;tempoBPM&quot;d}'>
<field declared_type64='CAClockBeats' name='beats' type64='d'/>
<field declared_type64='CAClockTempo' name='tempoBPM' type64='d'/>
</struct>
<struct name='ExtendedAudioFormatInfo' type64='{ExtendedAudioFormatInfo=&quot;mASBD&quot;{AudioStreamBasicDescription=&quot;mSampleRate&quot;d&quot;mFormatID&quot;I&quot;mFormatFlags&quot;I&quot;mBytesPerPacket&quot;I&quot;mFramesPerPacket&quot;I&quot;mBytesPerFrame&quot;I&quot;mChannelsPerFrame&quot;I&quot;mBitsPerChannel&quot;I&quot;mReserved&quot;I}&quot;mMagicCookie&quot;^v&quot;mMagicCookieSize&quot;I&quot;mClassDescription&quot;{AudioClassDescription=&quot;mType&quot;I&quot;mSubType&quot;I&quot;mManufacturer&quot;I}}'>
<field declared_type64='AudioStreamBasicDescription' name='mASBD' type64='{AudioStreamBasicDescription=&quot;mSampleRate&quot;d&quot;mFormatID&quot;I&quot;mFormatFlags&quot;I&quot;mBytesPerPacket&quot;I&quot;mFramesPerPacket&quot;I&quot;mBytesPerFrame&quot;I&quot;mChannelsPerFrame&quot;I&quot;mBitsPerChannel&quot;I&quot;mReserved&quot;I}'/>
<field const='true' declared_type64='void * _Nonnull' name='mMagicCookie' type64='^v'/>
<field declared_type64='UInt32' name='mMagicCookieSize' type64='I'/>
<field declared_type64='AudioClassDescription' name='mClassDescription' type64='{AudioClassDescription=&quot;mType&quot;I&quot;mSubType&quot;I&quot;mManufacturer&quot;I}'/>
</struct>
<struct name='ExtendedControlEvent' type64='{ExtendedControlEvent=&quot;groupID&quot;I&quot;controlID&quot;I&quot;value&quot;f}'>
<field declared_type64='MusicDeviceGroupID' name='groupID' type64='I'/>
<field declared_type64='AudioUnitParameterID' name='controlID' type64='I'/>
<field declared_type64='AudioUnitParameterValue' name='value' type64='f'/>
</struct>
<struct name='ExtendedNoteOnEvent' type64='{ExtendedNoteOnEvent=&quot;instrumentID&quot;I&quot;groupID&quot;I&quot;duration&quot;f&quot;extendedParams&quot;{MusicDeviceNoteParams=&quot;argCount&quot;I&quot;mPitch&quot;f&quot;mVelocity&quot;f&quot;mControls&quot;[1{NoteParamsControlValue=&quot;mID&quot;I&quot;mValue&quot;f}]}}'>
<field declared_type64='MusicDeviceInstrumentID' name='instrumentID' type64='I'/>
<field declared_type64='MusicDeviceGroupID' name='groupID' type64='I'/>
<field declared_type64='Float32' name='duration' type64='f'/>
<field declared_type64='MusicDeviceNoteParams' name='extendedParams' type64='{MusicDeviceNoteParams=&quot;argCount&quot;I&quot;mPitch&quot;f&quot;mVelocity&quot;f&quot;mControls&quot;[1{NoteParamsControlValue=&quot;mID&quot;I&quot;mValue&quot;f}]}'/>
</struct>
<struct name='ExtendedTempoEvent' type64='{ExtendedTempoEvent=&quot;bpm&quot;d}'>
<field declared_type64='Float64' name='bpm' type64='d'/>
</struct>
<struct name='MIDIChannelMessage' type64='{MIDIChannelMessage=&quot;status&quot;C&quot;data1&quot;C&quot;data2&quot;C&quot;reserved&quot;C}'>
<field declared_type64='UInt8' name='status' type64='C'/>
<field declared_type64='UInt8' name='data1' type64='C'/>
<field declared_type64='UInt8' name='data2' type64='C'/>
<field declared_type64='UInt8' name='reserved' type64='C'/>
</struct>
<struct name='MIDIMetaEvent' type64='{MIDIMetaEvent=&quot;metaEventType&quot;C&quot;unused1&quot;C&quot;unused2&quot;C&quot;unused3&quot;C&quot;dataLength&quot;I&quot;data&quot;[1C]}'>
<field declared_type64='UInt8' name='metaEventType' type64='C'/>
<field declared_type64='UInt8' name='unused1' type64='C'/>
<field declared_type64='UInt8' name='unused2' type64='C'/>
<field declared_type64='UInt8' name='unused3' type64='C'/>
<field declared_type64='UInt32' name='dataLength' type64='I'/>
<field declared_type64='UInt8*' name='data' type64='[1C]'/>
</struct>
<struct name='MIDINoteMessage' type64='{MIDINoteMessage=&quot;channel&quot;C&quot;note&quot;C&quot;velocity&quot;C&quot;releaseVelocity&quot;C&quot;duration&quot;f}'>
<field declared_type64='UInt8' name='channel' type64='C'/>
<field declared_type64='UInt8' name='note' type64='C'/>
<field declared_type64='UInt8' name='velocity' type64='C'/>
<field declared_type64='UInt8' name='releaseVelocity' type64='C'/>
<field declared_type64='Float32' name='duration' type64='f'/>
</struct>
<struct name='MIDIRawData' type64='{MIDIRawData=&quot;length&quot;I&quot;data&quot;[1C]}'>
<field declared_type64='UInt32' name='length' type64='I'/>
<field declared_type64='UInt8*' name='data' type64='[1C]'/>
</struct>
<struct name='MusicEventUserData' type64='{MusicEventUserData=&quot;length&quot;I&quot;data&quot;[1C]}'>
<field declared_type64='UInt32' name='length' type64='I'/>
<field declared_type64='UInt8*' name='data' type64='[1C]'/>
</struct>
<struct name='MusicTrackLoopInfo' type64='{MusicTrackLoopInfo=&quot;loopDuration&quot;d&quot;numberOfLoops&quot;i}'>
<field declared_type64='MusicTimeStamp' name='loopDuration' type64='d'/>
<field declared_type64='SInt32' name='numberOfLoops' type64='i'/>
</struct>
<struct name='ParameterEvent' type64='{ParameterEvent=&quot;parameterID&quot;I&quot;scope&quot;I&quot;element&quot;I&quot;value&quot;f}'>
<field declared_type64='AudioUnitParameterID' name='parameterID' type64='I'/>
<field declared_type64='AudioUnitScope' name='scope' type64='I'/>
<field declared_type64='AudioUnitElement' name='element' type64='I'/>
<field declared_type64='AudioUnitParameterValue' name='value' type64='f'/>
</struct>
<opaque name='AUGraph' type64='^{OpaqueAUGraph=}'/>
<opaque name='AUParameterListenerRef' type64='^{AUListenerBase=}'/>
<opaque name='AudioConverterRef' type64='^{OpaqueAudioConverter=}'/>
<opaque name='AudioFileID' type64='^{OpaqueAudioFileID=}'/>
<opaque name='AudioFileStreamID' type64='^{OpaqueAudioFileStreamID=}'/>
<opaque name='AudioQueueBufferRef' type64='^{AudioQueueBuffer=I^vI^vI^{AudioStreamPacketDescription}I}'/>
<opaque name='AudioQueueProcessingTapRef' type64='^{OpaqueAudioQueueProcessingTap=}'/>
<opaque name='AudioQueueRef' type64='^{OpaqueAudioQueue=}'/>
<opaque name='AudioQueueTimelineRef' type64='^{OpaqueAudioQueueTimeline=}'/>
<opaque name='CAClockRef' type64='^{OpaqueCAClock=}'/>
<opaque name='ExtAudioFileRef' type64='^{OpaqueExtAudioFile=}'/>
<opaque name='MusicEventIterator' type64='^{OpaqueMusicEventIterator=}'/>
<opaque name='MusicPlayer' type64='^{OpaqueMusicPlayer=}'/>
<opaque name='MusicSequence' type64='^{OpaqueMusicSequence=}'/>
<opaque name='MusicTrack' type64='^{OpaqueMusicTrack=}'/>
<string_constant name='kAFInfoDictionary_Album' value='album'/>
<string_constant name='kAFInfoDictionary_ApproximateDurationInSeconds' value='approximate duration in seconds'/>
<string_constant name='kAFInfoDictionary_Artist' value='artist'/>
<string_constant name='kAFInfoDictionary_ChannelLayout' value='channel layout'/>
<string_constant name='kAFInfoDictionary_Comments' value='comments'/>
<string_constant name='kAFInfoDictionary_Composer' value='composer'/>
<string_constant name='kAFInfoDictionary_Copyright' value='copyright'/>
<string_constant name='kAFInfoDictionary_EncodingApplication' value='encoding application'/>
<string_constant name='kAFInfoDictionary_Genre' value='genre'/>
<string_constant name='kAFInfoDictionary_ISRC' value='ISRC'/>
<string_constant name='kAFInfoDictionary_KeySignature' value='key signature'/>
<string_constant name='kAFInfoDictionary_Lyricist' value='lyricist'/>
<string_constant name='kAFInfoDictionary_NominalBitRate' value='nominal bit rate'/>
<string_constant name='kAFInfoDictionary_RecordedDate' value='recorded date'/>
<string_constant name='kAFInfoDictionary_SourceBitDepth' value='source bit depth'/>
<string_constant name='kAFInfoDictionary_SourceEncoder' value='source encoder'/>
<string_constant name='kAFInfoDictionary_SubTitle' value='subtitle'/>
<string_constant name='kAFInfoDictionary_Tempo' value='tempo'/>
<string_constant name='kAFInfoDictionary_TimeSignature' value='time signature'/>
<string_constant name='kAFInfoDictionary_Title' value='title'/>
<string_constant name='kAFInfoDictionary_TrackNumber' value='track number'/>
<string_constant name='kAFInfoDictionary_Year' value='year'/>
<string_constant name='kInstrumentInfoKey_LSB' value='LSB'/>
<string_constant name='kInstrumentInfoKey_MSB' value='MSB'/>
<string_constant name='kInstrumentInfoKey_Name' value='name'/>
<string_constant name='kInstrumentInfoKey_Program' value='program'/>
<enum name='AUDIO_TOOLBOX_VERSION' value64='1060'/>
<enum name='kAUGraphErr_CannotDoInCurrentContext' value64='-10863'/>
<enum name='kAUGraphErr_InvalidAudioUnit' value64='-10864'/>
<enum name='kAUGraphErr_InvalidConnection' value64='-10861'/>
<enum name='kAUGraphErr_NodeNotFound' value64='-10860'/>
<enum name='kAUGraphErr_OutputNodeErr' value64='-10862'/>
<enum name='kAUNodeInteraction_Connection' value64='1'/>
<enum name='kAUNodeInteraction_InputCallback' value64='2'/>
<enum name='kAUParameterListener_AnyParameter' value64='4294967295'/>
<enum name='kAudioBalanceFadeType_EqualPower' value64='1'/>
<enum name='kAudioBalanceFadeType_MaxUnityGain' value64='0'/>
<enum name='kAudioConverterApplicableEncodeBitRates' value64='1634034290'/>
<enum name='kAudioConverterApplicableEncodeSampleRates' value64='1634038642'/>
<enum name='kAudioConverterAvailableEncodeBitRates' value64='1986355826'/>
<enum name='kAudioConverterAvailableEncodeChannelLayoutTags' value64='1634034540'/>
<enum name='kAudioConverterAvailableEncodeSampleRates' value64='1986360178'/>
<enum name='kAudioConverterChannelMap' value64='1667788144'/>
<enum name='kAudioConverterCodecQuality' value64='1667527029'/>
<enum name='kAudioConverterCompressionMagicCookie' value64='1668114275'/>
<enum name='kAudioConverterCurrentInputStreamDescription' value64='1633904996'/>
<enum name='kAudioConverterCurrentOutputStreamDescription' value64='1633906532'/>
<enum name='kAudioConverterDecompressionMagicCookie' value64='1684891491'/>
<enum name='kAudioConverterEncodeAdjustableSampleRate' value64='1634366322'/>
<enum name='kAudioConverterEncodeBitRate' value64='1651663220'/>
<enum name='kAudioConverterErr_BadPropertySizeError' value64='561211770'/>
<enum name='kAudioConverterErr_FormatNotSupported' value64='1718449215'/>
<enum name='kAudioConverterErr_InputSampleRateOutOfRange' value64='560558962'/>
<enum name='kAudioConverterErr_InvalidInputSize' value64='1768846202'/>
<enum name='kAudioConverterErr_InvalidOutputSize' value64='1869902714'/>
<enum name='kAudioConverterErr_OperationNotSupported' value64='1869627199'/>
<enum name='kAudioConverterErr_OutputSampleRateOutOfRange' value64='560952178'/>
<enum name='kAudioConverterErr_PropertyNotSupported' value64='1886547824'/>
<enum name='kAudioConverterErr_RequiresPacketDescriptionsError' value64='561015652'/>
<enum name='kAudioConverterErr_UnspecifiedError' value64='2003329396'/>
<enum name='kAudioConverterInputChannelLayout' value64='1768123424'/>
<enum name='kAudioConverterOutputChannelLayout' value64='1868786720'/>
<enum name='kAudioConverterPrimeInfo' value64='1886546285'/>
<enum name='kAudioConverterPrimeMethod' value64='1886547309'/>
<enum name='kAudioConverterPropertyBitDepthHint' value64='1633903204'/>
<enum name='kAudioConverterPropertyCalculateInputBufferSize' value64='1667850867'/>
<enum name='kAudioConverterPropertyCalculateOutputBufferSize' value64='1668244083'/>
<enum name='kAudioConverterPropertyDitherBitDepth' value64='1684171124'/>
<enum name='kAudioConverterPropertyDithering' value64='1684632680'/>
<enum name='kAudioConverterPropertyFormatList' value64='1718383476'/>
<enum name='kAudioConverterPropertyInputCodecParameters' value64='1768121456'/>
<enum name='kAudioConverterPropertyMaximumInputBufferSize' value64='2020172403'/>
<enum name='kAudioConverterPropertyMaximumInputPacketSize' value64='2020175987'/>
<enum name='kAudioConverterPropertyMaximumOutputPacketSize' value64='2020569203'/>
<enum name='kAudioConverterPropertyMinimumInputBufferSize' value64='1835623027'/>
<enum name='kAudioConverterPropertyMinimumOutputBufferSize' value64='1836016243'/>
<enum name='kAudioConverterPropertyOutputCodecParameters' value64='1868784752'/>
<enum name='kAudioConverterPropertySettings' value64='1633906803'/>
<enum name='kAudioConverterQuality_High' value64='96'/>
<enum name='kAudioConverterQuality_Low' value64='32'/>
<enum name='kAudioConverterQuality_Max' value64='127'/>
<enum name='kAudioConverterQuality_Medium' value64='64'/>
<enum name='kAudioConverterQuality_Min' value64='0'/>
<enum name='kAudioConverterSampleRateConverterAlgorithm' value64='1936876393'/>
<enum name='kAudioConverterSampleRateConverterComplexity' value64='1936876385'/>
<enum name='kAudioConverterSampleRateConverterComplexity_Linear' value64='1818848869'/>
<enum name='kAudioConverterSampleRateConverterComplexity_Mastering' value64='1650553971'/>
<enum name='kAudioConverterSampleRateConverterComplexity_Normal' value64='1852797549'/>
<enum name='kAudioConverterSampleRateConverterInitialPhase' value64='1936876400'/>
<enum name='kAudioConverterSampleRateConverterQuality' value64='1936876401'/>
<enum name='kAudioFile3GP2Type' value64='862416946'/>
<enum name='kAudioFile3GPType' value64='862417008'/>
<enum name='kAudioFileAAC_ADTSType' value64='1633973363'/>
<enum name='kAudioFileAC3Type' value64='1633889587'/>
<enum name='kAudioFileAIFCType' value64='1095321155'/>
<enum name='kAudioFileAIFFType' value64='1095321158'/>
<enum name='kAudioFileAMRType' value64='1634562662'/>
<enum name='kAudioFileBadPropertySizeError' value64='561211770'/>
<enum name='kAudioFileCAFType' value64='1667327590'/>
<enum name='kAudioFileCloseSelect' value64='6'/>
<enum name='kAudioFileComponent_AvailableFormatIDs' value64='1718446436'/>
<enum name='kAudioFileComponent_AvailableStreamDescriptionsForFormat' value64='1935960420'/>
<enum name='kAudioFileComponent_CanRead' value64='1668182628'/>
<enum name='kAudioFileComponent_CanWrite' value64='1668183922'/>
<enum name='kAudioFileComponent_ExtensionsForType' value64='1717926004'/>
<enum name='kAudioFileComponent_FastDispatchTable' value64='1717855860'/>
<enum name='kAudioFileComponent_FileTypeName' value64='1718906477'/>
<enum name='kAudioFileComponent_HFSTypeCodesForType' value64='1718118003'/>
<enum name='kAudioFileComponent_MIMETypesForType' value64='1718446445'/>
<enum name='kAudioFileComponent_UTIsForType' value64='1718973545'/>
<enum name='kAudioFileCountUserDataSelect' value64='20'/>
<enum name='kAudioFileCreateSelect' value64='1'/>
<enum name='kAudioFileCreateURLSelect' value64='25'/>
<enum name='kAudioFileDataIsThisFormatSelect' value64='17'/>
<enum name='kAudioFileDoesNotAllow64BitDataSizeError' value64='1868981823'/>
<enum name='kAudioFileEndOfFileError' value64='-39'/>
<enum name='kAudioFileExtensionIsThisFormatSelect' value64='15'/>
<enum name='kAudioFileFileDataIsThisFormatSelect' value64='27'/>
<enum name='kAudioFileFileIsThisFormatSelect' value64='16'/>
<enum name='kAudioFileFileNotFoundError' value64='-43'/>
<enum name='kAudioFileFlags_DontPageAlignAudioData' value64='2'/>
<enum name='kAudioFileFlags_EraseFile' value64='1'/>
<enum name='kAudioFileGetGlobalInfoSelect' value64='19'/>
<enum name='kAudioFileGetGlobalInfoSizeSelect' value64='18'/>
<enum name='kAudioFileGetPropertyInfoSelect' value64='12'/>
<enum name='kAudioFileGetPropertySelect' value64='13'/>
<enum name='kAudioFileGetUserDataSelect' value64='22'/>
<enum name='kAudioFileGetUserDataSizeSelect' value64='21'/>
<enum name='kAudioFileGlobalInfo_AllExtensions' value64='1634498676'/>
<enum name='kAudioFileGlobalInfo_AllHFSTypeCodes' value64='1634231923'/>
<enum name='kAudioFileGlobalInfo_AllMIMETypes' value64='1634560365'/>
<enum name='kAudioFileGlobalInfo_AllUTIs' value64='1635087465'/>
<enum name='kAudioFileGlobalInfo_AvailableFormatIDs' value64='1718446436'/>
<enum name='kAudioFileGlobalInfo_AvailableStreamDescriptionsForFormat' value64='1935960420'/>
<enum name='kAudioFileGlobalInfo_ExtensionsForType' value64='1717926004'/>
<enum name='kAudioFileGlobalInfo_FileTypeName' value64='1718906477'/>
<enum name='kAudioFileGlobalInfo_HFSTypeCodesForType' value64='1718118003'/>
<enum name='kAudioFileGlobalInfo_MIMETypesForType' value64='1718446445'/>
<enum name='kAudioFileGlobalInfo_ReadableTypes' value64='1634103910'/>
<enum name='kAudioFileGlobalInfo_TypesForExtension' value64='1952807028'/>
<enum name='kAudioFileGlobalInfo_TypesForHFSTypeCode' value64='1952999027'/>
<enum name='kAudioFileGlobalInfo_TypesForMIMEType' value64='1953327469'/>
<enum name='kAudioFileGlobalInfo_TypesForUTI' value64='1953854569'/>
<enum name='kAudioFileGlobalInfo_UTIsForType' value64='1718973545'/>
<enum name='kAudioFileGlobalInfo_WritableTypes' value64='1634105190'/>
<enum name='kAudioFileInitializeSelect' value64='3'/>
<enum name='kAudioFileInitializeWithCallbacksSelect' value64='5'/>
<enum name='kAudioFileInvalidChunkError' value64='1667787583'/>
<enum name='kAudioFileInvalidFileError' value64='1685348671'/>
<enum name='kAudioFileInvalidPacketOffsetError' value64='1885563711'/>
<enum name='kAudioFileLoopDirection_Backward' value64='3'/>
<enum name='kAudioFileLoopDirection_Forward' value64='1'/>
<enum name='kAudioFileLoopDirection_ForwardAndBackward' value64='2'/>
<enum name='kAudioFileLoopDirection_NoLooping' value64='0'/>
<enum name='kAudioFileM4AType' value64='1832149350'/>
<enum name='kAudioFileM4BType' value64='1832149606'/>
<enum name='kAudioFileMP1Type' value64='1297106737'/>
<enum name='kAudioFileMP2Type' value64='1297106738'/>
<enum name='kAudioFileMP3Type' value64='1297106739'/>
<enum name='kAudioFileMPEG4Type' value64='1836069990'/>
<enum name='kAudioFileMarkerType_Generic' value64='0'/>
<enum name='kAudioFileNextType' value64='1315264596'/>
<enum name='kAudioFileNotOpenError' value64='-38'/>
<enum name='kAudioFileNotOptimizedError' value64='1869640813'/>
<enum name='kAudioFileOpenSelect' value64='2'/>
<enum name='kAudioFileOpenURLSelect' value64='26'/>
<enum name='kAudioFileOpenWithCallbacksSelect' value64='4'/>
<enum name='kAudioFileOperationNotSupportedError' value64='1869627199'/>
<enum name='kAudioFileOptimizeSelect' value64='7'/>
<enum name='kAudioFilePermissionsError' value64='1886547263'/>
<enum name='kAudioFilePositionError' value64='-40'/>
<enum name='kAudioFilePropertyAlbumArtwork' value64='1633776244'/>
<enum name='kAudioFilePropertyAudioDataByteCount' value64='1650683508'/>
<enum name='kAudioFilePropertyAudioDataPacketCount' value64='1885564532'/>
<enum name='kAudioFilePropertyAudioTrackCount' value64='1635017588'/>
<enum name='kAudioFilePropertyBitRate' value64='1651663220'/>
<enum name='kAudioFilePropertyByteToPacket' value64='1652125803'/>
<enum name='kAudioFilePropertyChannelLayout' value64='1668112752'/>
<enum name='kAudioFilePropertyChunkIDs' value64='1667787108'/>
<enum name='kAudioFilePropertyDataFormat' value64='1684434292'/>
<enum name='kAudioFilePropertyDataFormatName' value64='1718512997'/>
<enum name='kAudioFilePropertyDataOffset' value64='1685022310'/>
<enum name='kAudioFilePropertyDeferSizeUpdates' value64='1685289589'/>
<enum name='kAudioFilePropertyEstimatedDuration' value64='1701082482'/>
<enum name='kAudioFilePropertyFileFormat' value64='1717988724'/>
<enum name='kAudioFilePropertyFormatList' value64='1718383476'/>
<enum name='kAudioFilePropertyFrameToPacket' value64='1718775915'/>
<enum name='kAudioFilePropertyID3Tag' value64='1768174452'/>
<enum name='kAudioFilePropertyInfoDictionary' value64='1768842863'/>
<enum name='kAudioFilePropertyIsOptimized' value64='1869640813'/>
<enum name='kAudioFilePropertyMagicCookieData' value64='1835493731'/>
<enum name='kAudioFilePropertyMarkerList' value64='1835756659'/>
<enum name='kAudioFilePropertyMaximumPacketSize' value64='1886616165'/>
<enum name='kAudioFilePropertyPacketSizeUpperBound' value64='1886090594'/>
<enum name='kAudioFilePropertyPacketTableInfo' value64='1886283375'/>
<enum name='kAudioFilePropertyPacketToByte' value64='1886085753'/>
<enum name='kAudioFilePropertyPacketToFrame' value64='1886086770'/>
<enum name='kAudioFilePropertyRegionList' value64='1919380595'/>
<enum name='kAudioFilePropertyReserveDuration' value64='1920168566'/>
<enum name='kAudioFilePropertySourceBitDepth' value64='1935832164'/>
<enum name='kAudioFilePropertyUseAudioTrack' value64='1969321067'/>
<enum name='kAudioFileReadBytesSelect' value64='8'/>
<enum name='kAudioFileReadPacketDataSelect' value64='28'/>
<enum name='kAudioFileReadPacketsSelect' value64='10'/>
<enum name='kAudioFileReadPermission' value64='1'/>
<enum name='kAudioFileReadWritePermission' value64='3'/>
<enum name='kAudioFileRegionFlag_LoopEnable' value64='1'/>
<enum name='kAudioFileRegionFlag_PlayBackward' value64='4'/>
<enum name='kAudioFileRegionFlag_PlayForward' value64='2'/>
<enum name='kAudioFileRemoveUserDataSelect' value64='24'/>
<enum name='kAudioFileSetPropertySelect' value64='14'/>
<enum name='kAudioFileSetUserDataSelect' value64='23'/>
<enum name='kAudioFileSoundDesigner2Type' value64='1399075430'/>
<enum name='kAudioFileStreamError_BadPropertySize' value64='561211770'/>
<enum name='kAudioFileStreamError_DataUnavailable' value64='1836020325'/>
<enum name='kAudioFileStreamError_DiscontinuityCantRecover' value64='1685283617'/>
<enum name='kAudioFileStreamError_IllegalOperation' value64='1852797029'/>
<enum name='kAudioFileStreamError_InvalidFile' value64='1685348671'/>
<enum name='kAudioFileStreamError_InvalidPacketOffset' value64='1885563711'/>
<enum name='kAudioFileStreamError_NotOptimized' value64='1869640813'/>
<enum name='kAudioFileStreamError_UnspecifiedError' value64='2003334207'/>
<enum name='kAudioFileStreamError_UnsupportedDataFormat' value64='1718449215'/>
<enum name='kAudioFileStreamError_UnsupportedFileType' value64='1954115647'/>
<enum name='kAudioFileStreamError_UnsupportedProperty' value64='1886681407'/>
<enum name='kAudioFileStreamError_ValueUnknown' value64='1970170687'/>
<enum name='kAudioFileStreamParseFlag_Discontinuity' value64='1'/>
<enum name='kAudioFileStreamPropertyFlag_CacheProperty' value64='2'/>
<enum name='kAudioFileStreamPropertyFlag_PropertyIsCached' value64='1'/>
<enum name='kAudioFileStreamProperty_AudioDataByteCount' value64='1650683508'/>
<enum name='kAudioFileStreamProperty_AudioDataPacketCount' value64='1885564532'/>
<enum name='kAudioFileStreamProperty_AverageBytesPerPacket' value64='1633841264'/>
<enum name='kAudioFileStreamProperty_BitRate' value64='1651663220'/>
<enum name='kAudioFileStreamProperty_ByteToPacket' value64='1652125803'/>
<enum name='kAudioFileStreamProperty_ChannelLayout' value64='1668112752'/>
<enum name='kAudioFileStreamProperty_DataFormat' value64='1684434292'/>
<enum name='kAudioFileStreamProperty_DataOffset' value64='1685022310'/>
<enum name='kAudioFileStreamProperty_FileFormat' value64='1717988724'/>
<enum name='kAudioFileStreamProperty_FormatList' value64='1718383476'/>
<enum name='kAudioFileStreamProperty_FrameToPacket' value64='1718775915'/>
<enum name='kAudioFileStreamProperty_InfoDictionary' value64='1768842863'/>
<enum name='kAudioFileStreamProperty_MagicCookieData' value64='1835493731'/>
<enum name='kAudioFileStreamProperty_MaximumPacketSize' value64='1886616165'/>
<enum name='kAudioFileStreamProperty_PacketSizeUpperBound' value64='1886090594'/>
<enum name='kAudioFileStreamProperty_PacketTableInfo' value64='1886283375'/>
<enum name='kAudioFileStreamProperty_PacketToByte' value64='1886085753'/>
<enum name='kAudioFileStreamProperty_PacketToFrame' value64='1886086770'/>
<enum name='kAudioFileStreamProperty_ReadyToProducePackets' value64='1919247481'/>
<enum name='kAudioFileStreamSeekFlag_OffsetIsEstimated' value64='1'/>
<enum name='kAudioFileUnspecifiedError' value64='2003334207'/>
<enum name='kAudioFileUnsupportedDataFormatError' value64='1718449215'/>
<enum name='kAudioFileUnsupportedFileTypeError' value64='1954115647'/>
<enum name='kAudioFileUnsupportedPropertyError' value64='1886681407'/>
<enum name='kAudioFileWAVEType' value64='1463899717'/>
<enum name='kAudioFileWriteBytesSelect' value64='9'/>
<enum name='kAudioFileWritePacketsSelect' value64='11'/>
<enum name='kAudioFileWritePermission' value64='2'/>
<enum name='kAudioFormatBadPropertySizeError' value64='561211770'/>
<enum name='kAudioFormatBadSpecifierSizeError' value64='561213539'/>
<enum name='kAudioFormatProperty_ASBDFromESDS' value64='1702064996'/>
<enum name='kAudioFormatProperty_ASBDFromMPEGPacket' value64='1633971568'/>
<enum name='kAudioFormatProperty_AreChannelLayoutsEquivalent' value64='1667786097'/>
<enum name='kAudioFormatProperty_AvailableEncodeBitRates' value64='1634034290'/>
<enum name='kAudioFormatProperty_AvailableEncodeChannelLayoutTags' value64='1634034540'/>
<enum name='kAudioFormatProperty_AvailableEncodeNumberChannels' value64='1635151459'/>
<enum name='kAudioFormatProperty_AvailableEncodeSampleRates' value64='1634038642'/>
<enum name='kAudioFormatProperty_BalanceFade' value64='1650551910'/>
<enum name='kAudioFormatProperty_BitmapForLayoutTag' value64='1651340391'/>
<enum name='kAudioFormatProperty_ChannelLayoutForBitmap' value64='1668116578'/>
<enum name='kAudioFormatProperty_ChannelLayoutForTag' value64='1668116588'/>
<enum name='kAudioFormatProperty_ChannelLayoutFromESDS' value64='1702060908'/>
<enum name='kAudioFormatProperty_ChannelLayoutHash' value64='1667786849'/>
<enum name='kAudioFormatProperty_ChannelLayoutName' value64='1819242093'/>
<enum name='kAudioFormatProperty_ChannelLayoutSimpleName' value64='1819504237'/>
<enum name='kAudioFormatProperty_ChannelMap' value64='1667788144'/>
<enum name='kAudioFormatProperty_ChannelName' value64='1668178285'/>
<enum name='kAudioFormatProperty_ChannelShortName' value64='1668509293'/>
<enum name='kAudioFormatProperty_DecodeFormatIDs' value64='1633904998'/>
<enum name='kAudioFormatProperty_Decoders' value64='1635148901'/>
<enum name='kAudioFormatProperty_EncodeFormatIDs' value64='1633906534'/>
<enum name='kAudioFormatProperty_Encoders' value64='1635149166'/>
<enum name='kAudioFormatProperty_FirstPlayableFormatFromList' value64='1718642284'/>
<enum name='kAudioFormatProperty_FormatInfo' value64='1718449257'/>
<enum name='kAudioFormatProperty_FormatIsEncrypted' value64='1668446576'/>
<enum name='kAudioFormatProperty_FormatIsExternallyFramed' value64='1717925990'/>
<enum name='kAudioFormatProperty_FormatIsVBR' value64='1719034482'/>
<enum name='kAudioFormatProperty_FormatList' value64='1718383476'/>
<enum name='kAudioFormatProperty_FormatName' value64='1718509933'/>
<enum name='kAudioFormatProperty_ID3TagSize' value64='1768174451'/>
<enum name='kAudioFormatProperty_ID3TagToDictionary' value64='1768174436'/>
<enum name='kAudioFormatProperty_MatrixMixMap' value64='1835884912'/>
<enum name='kAudioFormatProperty_NumberOfChannelsForLayout' value64='1852008557'/>
<enum name='kAudioFormatProperty_OutputFormatList' value64='1868983411'/>
<enum name='kAudioFormatProperty_PanningMatrix' value64='1885433453'/>
<enum name='kAudioFormatProperty_TagForChannelLayout' value64='1668116596'/>
<enum name='kAudioFormatProperty_TagsForNumberOfChannels' value64='1952540515'/>
<enum name='kAudioFormatProperty_ValidateChannelLayout' value64='1986093932'/>
<enum name='kAudioFormatUnknownFormatError' value64='560360820'/>
<enum name='kAudioFormatUnspecifiedError' value64='2003329396'/>
<enum name='kAudioFormatUnsupportedDataFormatError' value64='1718449215'/>
<enum name='kAudioFormatUnsupportedPropertyError' value64='1886547824'/>
<enum name='kAudioHardwareServiceDeviceProperty_VirtualMasterBalance' value64='1986880099'/>
<enum name='kAudioHardwareServiceDeviceProperty_VirtualMasterVolume' value64='1986885219'/>
<enum name='kAudioHardwareServiceProperty_ServiceRestarted' value64='1936880500'/>
<enum name='kAudioQueueDeviceProperty_NumberChannels' value64='1634821219'/>
<enum name='kAudioQueueDeviceProperty_SampleRate' value64='1634825074'/>
<enum name='kAudioQueueErr_BufferEmpty' value64='-66686'/>
<enum name='kAudioQueueErr_BufferEnqueuedTwice' value64='-66666'/>
<enum name='kAudioQueueErr_BufferInQueue' value64='-66679'/>
<enum name='kAudioQueueErr_CannotStart' value64='-66681'/>
<enum name='kAudioQueueErr_CodecNotFound' value64='-66673'/>
<enum name='kAudioQueueErr_DisposalPending' value64='-66685'/>
<enum name='kAudioQueueErr_EnqueueDuringReset' value64='-66632'/>
<enum name='kAudioQueueErr_InvalidBuffer' value64='-66687'/>
<enum name='kAudioQueueErr_InvalidCodecAccess' value64='-66672'/>
<enum name='kAudioQueueErr_InvalidDevice' value64='-66680'/>
<enum name='kAudioQueueErr_InvalidOfflineMode' value64='-66626'/>
<enum name='kAudioQueueErr_InvalidParameter' value64='-66682'/>
<enum name='kAudioQueueErr_InvalidProperty' value64='-66684'/>
<enum name='kAudioQueueErr_InvalidPropertySize' value64='-66683'/>
<enum name='kAudioQueueErr_InvalidPropertyValue' value64='-66675'/>
<enum name='kAudioQueueErr_InvalidQueueType' value64='-66677'/>
<enum name='kAudioQueueErr_InvalidRunState' value64='-66678'/>
<enum name='kAudioQueueErr_InvalidTapContext' value64='-66669'/>
<enum name='kAudioQueueErr_InvalidTapType' value64='-66667'/>
<enum name='kAudioQueueErr_Permissions' value64='-66676'/>
<enum name='kAudioQueueErr_PrimeTimedOut' value64='-66674'/>
<enum name='kAudioQueueErr_QueueInvalidated' value64='-66671'/>
<enum name='kAudioQueueErr_RecordUnderrun' value64='-66668'/>
<enum name='kAudioQueueErr_TooManyTaps' value64='-66670'/>
<enum name='kAudioQueueParam_Pan' value64='13'/>
<enum name='kAudioQueueParam_Pitch' value64='3'/>
<enum name='kAudioQueueParam_PlayRate' value64='2'/>
<enum name='kAudioQueueParam_Volume' value64='1'/>
<enum name='kAudioQueueParam_VolumeRampTime' value64='4'/>
<enum name='kAudioQueueProcessingTap_EndOfStream' value64='512'/>
<enum name='kAudioQueueProcessingTap_PostEffects' value64='2'/>
<enum name='kAudioQueueProcessingTap_PreEffects' value64='1'/>
<enum name='kAudioQueueProcessingTap_Siphon' value64='4'/>
<enum name='kAudioQueueProcessingTap_StartOfStream' value64='256'/>
<enum name='kAudioQueueProperty_ChannelLayout' value64='1634820972'/>
<enum name='kAudioQueueProperty_ConverterError' value64='1902343781'/>
<enum name='kAudioQueueProperty_CurrentDevice' value64='1634820964'/>
<enum name='kAudioQueueProperty_CurrentLevelMeter' value64='1634823542'/>
<enum name='kAudioQueueProperty_CurrentLevelMeterDB' value64='1634823524'/>
<enum name='kAudioQueueProperty_DecodeBufferSizeFrames' value64='1684234854'/>
<enum name='kAudioQueueProperty_EnableLevelMetering' value64='1634823525'/>
<enum name='kAudioQueueProperty_EnableTimePitch' value64='1902081136'/>
<enum name='kAudioQueueProperty_IsRunning' value64='1634824814'/>
<enum name='kAudioQueueProperty_MagicCookie' value64='1634823523'/>
<enum name='kAudioQueueProperty_MaximumOutputPacketSize' value64='2020569203'/>
<enum name='kAudioQueueProperty_StreamDescription' value64='1634821748'/>
<enum name='kAudioQueueProperty_TimePitchAlgorithm' value64='1903456353'/>
<enum name='kAudioQueueProperty_TimePitchBypass' value64='1903456354'/>
<enum name='kAudioQueueTimePitchAlgorithm_Spectral' value64='1936745827'/>
<enum name='kAudioQueueTimePitchAlgorithm_TimeDomain' value64='1953064047'/>
<enum name='kAudioQueueTimePitchAlgorithm_Varispeed' value64='1987276900'/>
<enum name='kAudioServicesBadPropertySizeError' value64='561211770'/>
<enum name='kAudioServicesBadSpecifierSizeError' value64='561213539'/>
<enum name='kAudioServicesNoError' value64='0'/>
<enum name='kAudioServicesPropertyCompletePlaybackIfAppDies' value64='1768318057'/>
<enum name='kAudioServicesPropertyIsUISound' value64='1769174377'/>
<enum name='kAudioServicesSystemSoundClientTimedOutError' value64='-1501'/>
<enum name='kAudioServicesSystemSoundUnspecifiedError' value64='-1500'/>
<enum name='kAudioServicesUnsupportedPropertyError' value64='1886681407'/>
<enum name='kAudioToolboxErr_CannotDoInCurrentContext' value64='-10863'/>
<enum name='kAudioToolboxErr_EndOfTrack' value64='-10857'/>
<enum name='kAudioToolboxErr_IllegalTrackDestination' value64='-10855'/>
<enum name='kAudioToolboxErr_InvalidEventType' value64='-10853'/>
<enum name='kAudioToolboxErr_InvalidPlayerState' value64='-10852'/>
<enum name='kAudioToolboxErr_InvalidSequenceType' value64='-10846'/>
<enum name='kAudioToolboxErr_NoSequence' value64='-10854'/>
<enum name='kAudioToolboxErr_StartOfTrack' value64='-10856'/>
<enum name='kAudioToolboxErr_TrackIndexError' value64='-10859'/>
<enum name='kAudioToolboxErr_TrackNotFound' value64='-10858'/>
<enum name='kAudioToolboxError_NoTrackDestination' value64='-66720'/>
<enum name='kAudioUnitEvent_BeginParameterChangeGesture' value64='1'/>
<enum name='kAudioUnitEvent_EndParameterChangeGesture' value64='2'/>
<enum name='kAudioUnitEvent_ParameterValueChange' value64='0'/>
<enum name='kAudioUnitEvent_PropertyChange' value64='3'/>
<enum name='kBytePacketTranslationFlag_IsEstimate' value64='1'/>
<enum name='kCAClockMessage_Armed' value64='1634889060'/>
<enum name='kCAClockMessage_Disarmed' value64='1684107885'/>
<enum name='kCAClockMessage_PropertyChanged' value64='1885562983'/>
<enum name='kCAClockMessage_StartTimeSet' value64='1937009005'/>
<enum name='kCAClockMessage_Started' value64='1937011316'/>
<enum name='kCAClockMessage_Stopped' value64='1937010544'/>
<enum name='kCAClockMessage_WrongSMPTEFormat' value64='1064529264'/>
<enum name='kCAClockProperty_InternalTimebase' value64='1768846434'/>
<enum name='kCAClockProperty_MIDIClockDestinations' value64='1835164516'/>
<enum name='kCAClockProperty_MTCDestinations' value64='1836344164'/>
<enum name='kCAClockProperty_MTCFreewheelTime' value64='1836344951'/>
<enum name='kCAClockProperty_MeterTrack' value64='1835365490'/>
<enum name='kCAClockProperty_Name' value64='1851878757'/>
<enum name='kCAClockProperty_SMPTEFormat' value64='1936552038'/>
<enum name='kCAClockProperty_SMPTEOffset' value64='1936552047'/>
<enum name='kCAClockProperty_SendMIDISPP' value64='1836281968'/>
<enum name='kCAClockProperty_SyncMode' value64='1937337965'/>
<enum name='kCAClockProperty_SyncSource' value64='1937337971'/>
<enum name='kCAClockProperty_TempoMap' value64='1953329263'/>
<enum name='kCAClockProperty_TimebaseSource' value64='1769235059'/>
<enum name='kCAClockSyncMode_Internal' value64='1768846450'/>
<enum name='kCAClockSyncMode_MIDIClockTransport' value64='1835232363'/>
<enum name='kCAClockSyncMode_MTCTransport' value64='1835889763'/>
<enum name='kCAClockTimeFormat_AbsoluteSeconds' value64='1634952547'/>
<enum name='kCAClockTimeFormat_Beats' value64='1650811252'/>
<enum name='kCAClockTimeFormat_HostTime' value64='1752134516'/>
<enum name='kCAClockTimeFormat_SMPTESeconds' value64='1936552051'/>
<enum name='kCAClockTimeFormat_SMPTETime' value64='1936552052'/>
<enum name='kCAClockTimeFormat_Samples' value64='1935764848'/>
<enum name='kCAClockTimeFormat_Seconds' value64='1936024435'/>
<enum name='kCAClockTimebase_AudioDevice' value64='1635083369'/>
<enum name='kCAClockTimebase_AudioOutputUnit' value64='1635086197'/>
<enum name='kCAClockTimebase_HostTime' value64='1752134516'/>
<enum name='kCAClock_CannotSetTimeError' value64='-66805'/>
<enum name='kCAClock_InvalidPlayRateError' value64='-66806'/>
<enum name='kCAClock_InvalidPropertySizeError' value64='-66815'/>
<enum name='kCAClock_InvalidSMPTEFormatError' value64='-66809'/>
<enum name='kCAClock_InvalidSMPTEOffsetError' value64='-66808'/>
<enum name='kCAClock_InvalidSyncModeError' value64='-66813'/>
<enum name='kCAClock_InvalidSyncSourceError' value64='-66812'/>
<enum name='kCAClock_InvalidTimeFormatError' value64='-66814'/>
<enum name='kCAClock_InvalidTimebaseError' value64='-66811'/>
<enum name='kCAClock_InvalidTimebaseSourceError' value64='-66810'/>
<enum name='kCAClock_InvalidUnitError' value64='-66807'/>
<enum name='kCAClock_UnknownPropertyError' value64='-66816'/>
<enum name='kCAFLinearPCMFormatFlagIsFloat' value64='1'/>
<enum name='kCAFLinearPCMFormatFlagIsLittleEndian' value64='2'/>
<enum name='kCAFMarkerChunkHdrSize' value64='8'/>
<enum name='kCAFMarkerType_EditDestinationBegin' value64='1684170087'/>
<enum name='kCAFMarkerType_EditDestinationEnd' value64='1684368996'/>
<enum name='kCAFMarkerType_EditSourceBegin' value64='1667392871'/>
<enum name='kCAFMarkerType_EditSourceEnd' value64='1667591780'/>
<enum name='kCAFMarkerType_Generic' value64='0'/>
<enum name='kCAFMarkerType_Index' value64='1768842360'/>
<enum name='kCAFMarkerType_KeySignature' value64='1802725735'/>
<enum name='kCAFMarkerType_ProgramEnd' value64='1885695588'/>
<enum name='kCAFMarkerType_ProgramStart' value64='1885496679'/>
<enum name='kCAFMarkerType_RegionEnd' value64='1919250020'/>
<enum name='kCAFMarkerType_RegionStart' value64='1919051111'/>
<enum name='kCAFMarkerType_RegionSyncPoint' value64='1920170339'/>
<enum name='kCAFMarkerType_ReleaseLoopEnd' value64='1919706478'/>
<enum name='kCAFMarkerType_ReleaseLoopStart' value64='1919705703'/>
<enum name='kCAFMarkerType_SavedPlayPosition' value64='1936747641'/>
<enum name='kCAFMarkerType_SelectionEnd' value64='1936027236'/>
<enum name='kCAFMarkerType_SelectionStart' value64='1935828327'/>
<enum name='kCAFMarkerType_SustainLoopEnd' value64='1936483694'/>
<enum name='kCAFMarkerType_SustainLoopStart' value64='1936482919'/>
<enum name='kCAFMarkerType_Tempo' value64='1953329263'/>
<enum name='kCAFMarkerType_TimeSignature' value64='1953720679'/>
<enum name='kCAFMarkerType_TrackEnd' value64='1952804452'/>
<enum name='kCAFMarkerType_TrackStart' value64='1952605543'/>
<enum name='kCAFRegionChunkHdrSize' value64='8'/>
<enum name='kCAFRegionFlag_LoopEnable' value64='1'/>
<enum name='kCAFRegionFlag_PlayBackward' value64='4'/>
<enum name='kCAFRegionFlag_PlayForward' value64='2'/>
<enum name='kCAF_AudioDataChunkID' value64='1684108385'/>
<enum name='kCAF_ChannelLayoutChunkID' value64='1667785070'/>
<enum name='kCAF_EditCommentsChunkID' value64='1701077876'/>
<enum name='kCAF_FileType' value64='1667327590'/>
<enum name='kCAF_FileVersion_Initial' value64='1'/>
<enum name='kCAF_FillerChunkID' value64='1718773093'/>
<enum name='kCAF_FormatListID' value64='1818522467'/>
<enum name='kCAF_InfoStringsChunkID' value64='1768842863'/>
<enum name='kCAF_InstrumentChunkID' value64='1768846196'/>
<enum name='kCAF_MIDIChunkID' value64='1835623529'/>
<enum name='kCAF_MagicCookieID' value64='1802857321'/>
<enum name='kCAF_MarkerChunkID' value64='1835102827'/>
<enum name='kCAF_OverviewChunkID' value64='1870034551'/>
<enum name='kCAF_PacketTableChunkID' value64='1885432692'/>
<enum name='kCAF_PeakChunkID' value64='1885692267'/>
<enum name='kCAF_RegionChunkID' value64='1919248238'/>
<enum name='kCAF_SMPTE_TimeType2398' value64='12'/>
<enum name='kCAF_SMPTE_TimeType24' value64='1'/>
<enum name='kCAF_SMPTE_TimeType25' value64='2'/>
<enum name='kCAF_SMPTE_TimeType2997' value64='5'/>
<enum name='kCAF_SMPTE_TimeType2997Drop' value64='6'/>
<enum name='kCAF_SMPTE_TimeType30' value64='4'/>
<enum name='kCAF_SMPTE_TimeType30Drop' value64='3'/>
<enum name='kCAF_SMPTE_TimeType50' value64='11'/>
<enum name='kCAF_SMPTE_TimeType5994' value64='8'/>
<enum name='kCAF_SMPTE_TimeType5994Drop' value64='10'/>
<enum name='kCAF_SMPTE_TimeType60' value64='7'/>
<enum name='kCAF_SMPTE_TimeType60Drop' value64='9'/>
<enum name='kCAF_SMPTE_TimeTypeNone' value64='0'/>
<enum name='kCAF_StreamDescriptionChunkID' value64='1684370275'/>
<enum name='kCAF_StringsChunkID' value64='1937011303'/>
<enum name='kCAF_UMIDChunkID' value64='1970104676'/>
<enum name='kCAF_UUIDChunkID' value64='1970628964'/>
<enum name='kCAF_iXMLChunkID' value64='1767394636'/>
<enum name='kConverterPrimeMethod_None' value64='2'/>
<enum name='kConverterPrimeMethod_Normal' value64='1'/>
<enum name='kConverterPrimeMethod_Pre' value64='0'/>
<enum name='kDitherAlgorithm_NoiseShaping' value64='2'/>
<enum name='kDitherAlgorithm_TPDF' value64='1'/>
<enum name='kExtAudioFileError_AsyncWriteBufferOverflow' value64='-66570'/>
<enum name='kExtAudioFileError_AsyncWriteTooLarge' value64='-66569'/>
<enum name='kExtAudioFileError_InvalidChannelMap' value64='-66564'/>
<enum name='kExtAudioFileError_InvalidDataFormat' value64='-66566'/>
<enum name='kExtAudioFileError_InvalidOperationOrder' value64='-66565'/>
<enum name='kExtAudioFileError_InvalidProperty' value64='-66561'/>
<enum name='kExtAudioFileError_InvalidPropertySize' value64='-66562'/>
<enum name='kExtAudioFileError_InvalidSeek' value64='-66568'/>
<enum name='kExtAudioFileError_MaxPacketSizeUnknown' value64='-66567'/>
<enum name='kExtAudioFileError_NonPCMClientFormat' value64='-66563'/>
<enum name='kExtAudioFileProperty_AudioConverter' value64='1633906294'/>
<enum name='kExtAudioFileProperty_AudioFile' value64='1634101612'/>
<enum name='kExtAudioFileProperty_ClientChannelLayout' value64='1667460207'/>
<enum name='kExtAudioFileProperty_ClientDataFormat' value64='1667657076'/>
<enum name='kExtAudioFileProperty_ClientMaxPacketSize' value64='1668116595'/>
<enum name='kExtAudioFileProperty_CodecManufacturer' value64='1668112750'/>
<enum name='kExtAudioFileProperty_ConverterConfig' value64='1633903462'/>
<enum name='kExtAudioFileProperty_FileChannelLayout' value64='1717791855'/>
<enum name='kExtAudioFileProperty_FileDataFormat' value64='1717988724'/>
<enum name='kExtAudioFileProperty_FileLengthFrames' value64='593916525'/>
<enum name='kExtAudioFileProperty_FileMaxPacketSize' value64='1718448243'/>
<enum name='kExtAudioFileProperty_IOBuffer' value64='1768907366'/>
<enum name='kExtAudioFileProperty_IOBufferSizeBytes' value64='1768907379'/>
<enum name='kExtAudioFileProperty_PacketTable' value64='2020635753'/>
<enum name='kMusicEventType_AUPreset' value64='10'/>
<enum name='kMusicEventType_ExtendedControl' value64='2'/>
<enum name='kMusicEventType_ExtendedNote' value64='1'/>
<enum name='kMusicEventType_ExtendedTempo' value64='3'/>
<enum name='kMusicEventType_MIDIChannelMessage' value64='7'/>
<enum name='kMusicEventType_MIDINoteMessage' value64='6'/>
<enum name='kMusicEventType_MIDIRawData' value64='8'/>
<enum name='kMusicEventType_Meta' value64='5'/>
<enum name='kMusicEventType_NULL' value64='0'/>
<enum name='kMusicEventType_Parameter' value64='9'/>
<enum name='kMusicEventType_User' value64='4'/>
<enum name='kMusicSequenceFileFlags_Default' value64='0'/>
<enum name='kMusicSequenceFileFlags_EraseFile' value64='1'/>
<enum name='kMusicSequenceFile_AnyType' value64='0'/>
<enum name='kMusicSequenceFile_MIDIType' value64='1835623529'/>
<enum name='kMusicSequenceFile_iMelodyType' value64='1768777068'/>
<enum name='kMusicSequenceLoadSMF_ChannelsToTracks' value64='1'/>
<enum name='kMusicSequenceLoadSMF_PreserveTracks' value64='0'/>
<enum name='kMusicSequenceType_Beats' value64='1650811252'/>
<enum name='kMusicSequenceType_Samples' value64='1935764848'/>
<enum name='kMusicSequenceType_Seconds' value64='1936024435'/>
<enum name='kMusicTimeStamp_EndOfTrack' value64='1.7976931348623157E+308'/>
<enum name='kPanningMode_SoundField' value64='3'/>
<enum name='kPanningMode_VectorBasedPanning' value64='4'/>
<enum name='kSequenceTrackProperty_AutomatedParameters' value64='4'/>
<enum name='kSequenceTrackProperty_LoopInfo' value64='0'/>
<enum name='kSequenceTrackProperty_MuteStatus' value64='2'/>
<enum name='kSequenceTrackProperty_OffsetTime' value64='1'/>
<enum name='kSequenceTrackProperty_SoloStatus' value64='3'/>
<enum name='kSequenceTrackProperty_TimeResolution' value64='6'/>
<enum name='kSequenceTrackProperty_TrackLength' value64='5'/>
<enum name='kSystemSoundID_FlashScreen' value64='4094'/>
<enum name='kSystemSoundID_UserPreferredAlert' value64='4096'/>
<enum name='kUserPreferredAlert' value64='4096'/>
<function name='AUEventListenerAddEventType'>
<arg declared_type64='AUEventListenerRef _Nonnull' name='inListener' type64='^{AUListenerBase=}'/>
<arg declared_type64='void * _Nullable' name='inObject' type64='^v'/>
<arg const='true' declared_type64='AudioUnitEvent * _Nonnull' name='inEvent' type64='^{AudioUnitEvent=I(?={AudioUnitParameter=^{ComponentInstanceRecord}III}{AudioUnitProperty=^{ComponentInstanceRecord}III})}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUEventListenerCreate'>
<arg declared_type64='AUEventListenerProc _Nonnull' function_pointer='true' name='inProc' type64='^?'>
<arg declared_type64='void * _Nullable' type64='^v'/>
<arg declared_type64='void * _Nullable' type64='^v'/>
<arg const='true' declared_type64='AudioUnitEvent * _Nonnull' type64='^{AudioUnitEvent=I(?={AudioUnitParameter=^{ComponentInstanceRecord}III}{AudioUnitProperty=^{ComponentInstanceRecord}III})}'/>
<arg declared_type64='UInt64' type64='Q'/>
<arg declared_type64='AudioUnitParameterValue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='void * _Nullable' name='inUserData' type64='^v'/>
<arg declared_type64='CFRunLoopRef _Nullable' name='inRunLoop' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFStringRef _Nullable' name='inRunLoopMode' type64='^{__CFString=}'/>
<arg declared_type64='Float32' name='inNotificationInterval' type64='f'/>
<arg declared_type64='Float32' name='inValueChangeGranularity' type64='f'/>
<arg declared_type64='AUEventListenerRef _Nullable * _Nonnull' name='outListener' type64='^^{AUListenerBase}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUEventListenerCreateWithDispatchQueue'>
<arg declared_type64='AUEventListenerRef _Nullable * _Nonnull' name='outListener' type64='^^{AUListenerBase}'/>
<arg declared_type64='Float32' name='inNotificationInterval' type64='f'/>
<arg declared_type64='Float32' name='inValueChangeGranularity' type64='f'/>
<arg declared_type64='dispatch_queue_t _Nonnull' name='inDispatchQueue' type64='@'/>
<arg declared_type64='AUEventListenerBlock _Nonnull' function_pointer='true' name='inBlock' type64='@?'>
<arg declared_type64='void * _Nullable' type64='^v'/>
<arg const='true' declared_type64='AudioUnitEvent * _Nonnull' type64='^{AudioUnitEvent=I(?={AudioUnitParameter=^{ComponentInstanceRecord}III}{AudioUnitProperty=^{ComponentInstanceRecord}III})}'/>
<arg declared_type64='UInt64' type64='Q'/>
<arg declared_type64='AudioUnitParameterValue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUEventListenerNotify'>
<arg declared_type64='AUEventListenerRef _Nullable' name='inSendingListener' type64='^{AUListenerBase=}'/>
<arg declared_type64='void * _Nullable' name='inSendingObject' type64='^v'/>
<arg const='true' declared_type64='AudioUnitEvent * _Nonnull' name='inEvent' type64='^{AudioUnitEvent=I(?={AudioUnitParameter=^{ComponentInstanceRecord}III}{AudioUnitProperty=^{ComponentInstanceRecord}III})}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUEventListenerRemoveEventType'>
<arg declared_type64='AUEventListenerRef _Nonnull' name='inListener' type64='^{AUListenerBase=}'/>
<arg declared_type64='void * _Nullable' name='inObject' type64='^v'/>
<arg const='true' declared_type64='AudioUnitEvent * _Nonnull' name='inEvent' type64='^{AudioUnitEvent=I(?={AudioUnitParameter=^{ComponentInstanceRecord}III}{AudioUnitProperty=^{ComponentInstanceRecord}III})}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphAddNode'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg const='true' declared_type64='AudioComponentDescription * _Nonnull' name='inDescription' type64='^{AudioComponentDescription=IIIII}'/>
<arg declared_type64='AUNode * _Nonnull' name='outNode' type64='^i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphAddRenderNotify'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='AURenderCallback _Nonnull' function_pointer='true' name='inCallback' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='AudioUnitRenderActionFlags * _Nonnull' type64='^I'/>
<arg const='true' declared_type64='AudioTimeStamp * _Nonnull' type64='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='AudioBufferList * _Nullable' type64='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='void * _Nullable' name='inRefCon' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphClearConnections'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphClose'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphConnectNodeInput'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='AUNode' name='inSourceNode' type64='i'/>
<arg declared_type64='UInt32' name='inSourceOutputNumber' type64='I'/>
<arg declared_type64='AUNode' name='inDestNode' type64='i'/>
<arg declared_type64='UInt32' name='inDestInputNumber' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphCountNodeConnections'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='AUNode' name='inNode' type64='i'/>
<arg declared_type64='UInt32 * _Nonnull' name='outNumConnections' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphCountNodeInteractions'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='AUNode' name='inNode' type64='i'/>
<arg declared_type64='UInt32 * _Nonnull' name='outNumInteractions' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphDisconnectNodeInput'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='AUNode' name='inDestNode' type64='i'/>
<arg declared_type64='UInt32' name='inDestInputNumber' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphGetCPULoad'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='Float32 * _Nonnull' name='outAverageCPULoad' type64='^f'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphGetConnectionInfo'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='UInt32' name='inConnectionIndex' type64='I'/>
<arg declared_type64='AUNode * _Nonnull' name='outSourceNode' type64='^i'/>
<arg declared_type64='UInt32 * _Nonnull' name='outSourceOutputNumber' type64='^I'/>
<arg declared_type64='AUNode * _Nonnull' name='outDestNode' type64='^i'/>
<arg declared_type64='UInt32 * _Nonnull' name='outDestInputNumber' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphGetIndNode'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='UInt32' name='inIndex' type64='I'/>
<arg declared_type64='AUNode * _Nonnull' name='outNode' type64='^i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphGetInteractionInfo'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='UInt32' name='inInteractionIndex' type64='I'/>
<arg declared_type64='AUNodeInteraction * _Nonnull' name='outInteraction' type64='^{AUNodeInteraction=I(?={AudioUnitNodeConnection=iIiI}{AUNodeRenderCallback=iI{AURenderCallbackStruct=^?^v}})}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphGetMaxCPULoad'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='Float32 * _Nonnull' name='outMaxLoad' type64='^f'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphGetNodeConnections'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='AUNode' name='inNode' type64='i'/>
<arg declared_type64='AudioUnitNodeConnection * _Nonnull' name='outConnections' type64='^{AudioUnitNodeConnection=iIiI}'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioNumConnections' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphGetNodeCount'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='UInt32 * _Nonnull' name='outNumberOfNodes' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphGetNodeInfo'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='AUNode' name='inNode' type64='i'/>
<arg declared_type64='struct ComponentDescription * _Nonnull' name='outDescription' type64='^{ComponentDescription=IIIII}'/>
<arg declared_type64='UInt32 * _Nonnull' name='outClassDataSize' type64='^I'/>
<arg declared_type64='void * _Nullable * _Nullable' name='outClassData' type64='^^v'/>
<arg declared_type64='AudioUnit _Nullable * _Nullable' name='outAudioUnit' type64='^^{ComponentInstanceRecord}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphGetNodeInfoSubGraph'>
<arg const='true' declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='AUNode' name='inNode' type64='i'/>
<arg declared_type64='AUGraph _Nullable * _Nonnull' name='outSubGraph' type64='^^{OpaqueAUGraph}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphGetNodeInteractions'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='AUNode' name='inNode' type64='i'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioNumInteractions' type64='^I'/>
<arg declared_type64='AUNodeInteraction * _Nonnull' name='outInteractions' type64='^{AUNodeInteraction=I(?={AudioUnitNodeConnection=iIiI}{AUNodeRenderCallback=iI{AURenderCallbackStruct=^?^v}})}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphGetNumberOfConnections'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='UInt32 * _Nonnull' name='outNumConnections' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphGetNumberOfInteractions'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='UInt32 * _Nonnull' name='outNumInteractions' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphInitialize'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphIsInitialized'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='Boolean * _Nonnull' name='outIsInitialized' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphIsNodeSubGraph'>
<arg const='true' declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='AUNode' name='inNode' type64='i'/>
<arg declared_type64='Boolean * _Nonnull' name='outFlag' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphIsOpen'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='Boolean * _Nonnull' name='outIsOpen' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphIsRunning'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='Boolean * _Nonnull' name='outIsRunning' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphNewNode'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg const='true' declared_type64='struct ComponentDescription * _Nonnull' name='inDescription' type64='^{ComponentDescription=IIIII}'/>
<arg declared_type64='UInt32' name='inClassDataSize' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inClassData' type64='^v'/>
<arg declared_type64='AUNode * _Nonnull' name='outNode' type64='^i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphNewNodeSubGraph'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='AUNode * _Nonnull' name='outNode' type64='^i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphNodeInfo'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='AUNode' name='inNode' type64='i'/>
<arg declared_type64='AudioComponentDescription * _Nullable' name='outDescription' type64='^{AudioComponentDescription=IIIII}'/>
<arg declared_type64='AudioUnit _Nullable * _Nullable' name='outAudioUnit' type64='^^{ComponentInstanceRecord}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphOpen'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphRemoveNode'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='AUNode' name='inNode' type64='i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphRemoveRenderNotify'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='AURenderCallback _Nonnull' function_pointer='true' name='inCallback' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='AudioUnitRenderActionFlags * _Nonnull' type64='^I'/>
<arg const='true' declared_type64='AudioTimeStamp * _Nonnull' type64='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='AudioBufferList * _Nullable' type64='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='void * _Nullable' name='inRefCon' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphSetNodeInputCallback'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='AUNode' name='inDestNode' type64='i'/>
<arg declared_type64='UInt32' name='inDestInputNumber' type64='I'/>
<arg const='true' declared_type64='AURenderCallbackStruct * _Nonnull' name='inInputCallback' type64='^{AURenderCallbackStruct=^?^v}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphStart'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphStop'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphUninitialize'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUGraphUpdate'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<arg declared_type64='Boolean * _Nullable' name='outIsUpdated' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUListenerAddParameter'>
<arg declared_type64='AUParameterListenerRef _Nonnull' name='inListener' type64='^{AUListenerBase=}'/>
<arg declared_type64='void * _Nullable' name='inObject' type64='^v'/>
<arg const='true' declared_type64='AudioUnitParameter * _Nonnull' name='inParameter' type64='^{AudioUnitParameter=^{ComponentInstanceRecord}III}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUListenerCreate'>
<arg declared_type64='AUParameterListenerProc _Nonnull' function_pointer='true' name='inProc' type64='^?'>
<arg declared_type64='void * _Nullable' type64='^v'/>
<arg declared_type64='void * _Nullable' type64='^v'/>
<arg const='true' declared_type64='AudioUnitParameter * _Nonnull' type64='^{AudioUnitParameter=^{ComponentInstanceRecord}III}'/>
<arg declared_type64='AudioUnitParameterValue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='void * _Nonnull' name='inUserData' type64='^v'/>
<arg declared_type64='CFRunLoopRef _Nullable' name='inRunLoop' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFStringRef _Nullable' name='inRunLoopMode' type64='^{__CFString=}'/>
<arg declared_type64='Float32' name='inNotificationInterval' type64='f'/>
<arg declared_type64='AUParameterListenerRef _Nullable * _Nonnull' name='outListener' type64='^^{AUListenerBase}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUListenerCreateWithDispatchQueue'>
<arg declared_type64='AUParameterListenerRef _Nullable * _Nonnull' name='outListener' type64='^^{AUListenerBase}'/>
<arg declared_type64='Float32' name='inNotificationInterval' type64='f'/>
<arg declared_type64='dispatch_queue_t _Nonnull' name='inDispatchQueue' type64='@'/>
<arg declared_type64='AUParameterListenerBlock _Nonnull' function_pointer='true' name='inBlock' type64='@?'>
<arg declared_type64='void * _Nullable' type64='^v'/>
<arg const='true' declared_type64='AudioUnitParameter * _Nonnull' type64='^{AudioUnitParameter=^{ComponentInstanceRecord}III}'/>
<arg declared_type64='AudioUnitParameterValue' type64='f'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUListenerDispose'>
<arg declared_type64='AUParameterListenerRef _Nonnull' name='inListener' type64='^{AUListenerBase=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUListenerRemoveParameter'>
<arg declared_type64='AUParameterListenerRef _Nonnull' name='inListener' type64='^{AUListenerBase=}'/>
<arg declared_type64='void * _Nullable' name='inObject' type64='^v'/>
<arg const='true' declared_type64='AudioUnitParameter * _Nonnull' name='inParameter' type64='^{AudioUnitParameter=^{ComponentInstanceRecord}III}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUParameterFormatValue'>
<arg declared_type64='Float64' name='inParameterValue' type64='d'/>
<arg const='true' declared_type64='AudioUnitParameter * _Nonnull' name='inParameter' type64='^{AudioUnitParameter=^{ComponentInstanceRecord}III}'/>
<arg declared_type64='char * _Nonnull' name='inTextBuffer' type64='*'/>
<arg declared_type64='UInt32' name='inDigits' type64='I'/>
<retval declared_type64='char * _Nonnull' type64='*'/>
</function>
<function name='AUParameterListenerNotify'>
<arg declared_type64='AUParameterListenerRef _Nullable' name='inSendingListener' type64='^{AUListenerBase=}'/>
<arg declared_type64='void * _Nullable' name='inSendingObject' type64='^v'/>
<arg const='true' declared_type64='AudioUnitParameter * _Nonnull' name='inParameter' type64='^{AudioUnitParameter=^{ComponentInstanceRecord}III}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUParameterSet'>
<arg declared_type64='AUParameterListenerRef _Nullable' name='inSendingListener' type64='^{AUListenerBase=}'/>
<arg declared_type64='void * _Nullable' name='inSendingObject' type64='^v'/>
<arg const='true' declared_type64='AudioUnitParameter * _Nonnull' name='inParameter' type64='^{AudioUnitParameter=^{ComponentInstanceRecord}III}'/>
<arg declared_type64='AudioUnitParameterValue' name='inValue' type64='f'/>
<arg declared_type64='UInt32' name='inBufferOffsetInFrames' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AUParameterValueFromLinear'>
<arg declared_type64='Float32' name='inLinearValue' type64='f'/>
<arg const='true' declared_type64='AudioUnitParameter * _Nonnull' name='inParameter' type64='^{AudioUnitParameter=^{ComponentInstanceRecord}III}'/>
<retval declared_type64='AudioUnitParameterValue' type64='f'/>
</function>
<function name='AUParameterValueToLinear'>
<arg declared_type64='AudioUnitParameterValue' name='inParameterValue' type64='f'/>
<arg const='true' declared_type64='AudioUnitParameter * _Nonnull' name='inParameter' type64='^{AudioUnitParameter=^{ComponentInstanceRecord}III}'/>
<retval declared_type64='Float32' type64='f'/>
</function>
<function name='AudioConverterConvertBuffer'>
<arg declared_type64='AudioConverterRef _Nonnull' name='inAudioConverter' type64='^{OpaqueAudioConverter=}'/>
<arg declared_type64='UInt32' name='inInputDataSize' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inInputData' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioOutputDataSize' type64='^I'/>
<arg declared_type64='void * _Nonnull' name='outOutputData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioConverterConvertComplexBuffer'>
<arg declared_type64='AudioConverterRef _Nonnull' name='inAudioConverter' type64='^{OpaqueAudioConverter=}'/>
<arg declared_type64='UInt32' name='inNumberPCMFrames' type64='I'/>
<arg const='true' declared_type64='AudioBufferList * _Nonnull' name='inInputData' type64='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<arg declared_type64='AudioBufferList * _Nonnull' name='outOutputData' type64='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioConverterDispose'>
<arg declared_type64='AudioConverterRef _Nonnull' name='inAudioConverter' type64='^{OpaqueAudioConverter=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioConverterFillBuffer'>
<arg declared_type64='AudioConverterRef _Nonnull' name='inAudioConverter' type64='^{OpaqueAudioConverter=}'/>
<arg declared_type64='AudioConverterInputDataProc _Nonnull' function_pointer='true' name='inInputDataProc' type64='^?'>
<arg declared_type64='AudioConverterRef _Nonnull' type64='^{OpaqueAudioConverter=}'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<arg declared_type64='void * _Nonnull * _Nonnull' type64='^^v'/>
<arg declared_type64='void * _Nullable' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='void * _Nullable' name='inInputDataProcUserData' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioOutputDataSize' type64='^I'/>
<arg declared_type64='void * _Nonnull' name='outOutputData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioConverterFillComplexBuffer'>
<arg declared_type64='AudioConverterRef _Nonnull' name='inAudioConverter' type64='^{OpaqueAudioConverter=}'/>
<arg declared_type64='AudioConverterComplexInputDataProc _Nonnull' function_pointer='true' name='inInputDataProc' type64='^?'>
<arg declared_type64='AudioConverterRef _Nonnull' type64='^{OpaqueAudioConverter=}'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<arg declared_type64='AudioBufferList * _Nonnull' type64='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<arg declared_type64='AudioStreamPacketDescription * _Nullable * _Nullable' type64='^^{AudioStreamPacketDescription}'/>
<arg declared_type64='void * _Nullable' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='void * _Nullable' name='inInputDataProcUserData' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioOutputDataPacketSize' type64='^I'/>
<arg declared_type64='AudioBufferList * _Nonnull' name='outOutputData' type64='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<arg declared_type64='AudioStreamPacketDescription * _Nullable' name='outPacketDescription' type64='^{AudioStreamPacketDescription=qII}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioConverterGetProperty'>
<arg declared_type64='AudioConverterRef _Nonnull' name='inAudioConverter' type64='^{OpaqueAudioConverter=}'/>
<arg declared_type64='AudioConverterPropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioPropertyDataSize' type64='^I'/>
<arg declared_type64='void * _Nonnull' name='outPropertyData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioConverterGetPropertyInfo'>
<arg declared_type64='AudioConverterRef _Nonnull' name='inAudioConverter' type64='^{OpaqueAudioConverter=}'/>
<arg declared_type64='AudioConverterPropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32 * _Nullable' name='outSize' type64='^I'/>
<arg declared_type64='Boolean * _Nullable' name='outWritable' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioConverterNew'>
<arg const='true' declared_type64='AudioStreamBasicDescription * _Nonnull' name='inSourceFormat' type64='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg const='true' declared_type64='AudioStreamBasicDescription * _Nonnull' name='inDestinationFormat' type64='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg declared_type64='AudioConverterRef _Nullable * _Nonnull' name='outAudioConverter' type64='^^{OpaqueAudioConverter}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioConverterNewSpecific'>
<arg const='true' declared_type64='AudioStreamBasicDescription * _Nonnull' name='inSourceFormat' type64='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg const='true' declared_type64='AudioStreamBasicDescription * _Nonnull' name='inDestinationFormat' type64='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg declared_type64='UInt32' name='inNumberClassDescriptions' type64='I'/>
<arg const='true' declared_type64='AudioClassDescription * _Nonnull' name='inClassDescriptions' type64='^{AudioClassDescription=III}'/>
<arg declared_type64='AudioConverterRef _Nullable * _Nonnull' name='outAudioConverter' type64='^^{OpaqueAudioConverter}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioConverterReset'>
<arg declared_type64='AudioConverterRef _Nonnull' name='inAudioConverter' type64='^{OpaqueAudioConverter=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioConverterSetProperty'>
<arg declared_type64='AudioConverterRef _Nonnull' name='inAudioConverter' type64='^{OpaqueAudioConverter=}'/>
<arg declared_type64='AudioConverterPropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32' name='inPropertyDataSize' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inPropertyData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileClose'>
<arg declared_type64='AudioFileID _Nonnull' name='inAudioFile' type64='^{OpaqueAudioFileID=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentCloseFile'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentCountUserData'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='UInt32' name='inUserDataID' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' name='outNumberItems' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentCreate'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg const='true' declared_type64='struct FSRef * _Nonnull' name='inParentRef' type64='^{FSRef=[80C]}'/>
<arg declared_type64='CFStringRef _Nonnull' name='inFileName' type64='^{__CFString=}'/>
<arg const='true' declared_type64='AudioStreamBasicDescription * _Nonnull' name='inFormat' type64='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg declared_type64='UInt32' name='inFlags' type64='I'/>
<arg declared_type64='struct FSRef * _Nonnull' name='outNewFileRef' type64='^{FSRef=[80C]}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentCreateURL'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='CFURLRef _Nonnull' name='inFileRef' type64='^{__CFURL=}'/>
<arg const='true' declared_type64='AudioStreamBasicDescription * _Nonnull' name='inFormat' type64='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg declared_type64='UInt32' name='inFlags' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentDataIsThisFormat'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='void * _Nullable' name='inClientData' type64='^v'/>
<arg declared_type64='AudioFile_ReadProc _Nullable' function_pointer='true' name='inReadFunc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='SInt64' type64='q'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='AudioFile_WriteProc _Nullable' function_pointer='true' name='inWriteFunc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='SInt64' type64='q'/>
<arg declared_type64='UInt32' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='AudioFile_GetSizeProc _Nullable' function_pointer='true' name='inGetSizeFunc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='SInt64' type64='q'/>
</arg>
<arg declared_type64='AudioFile_SetSizeProc _Nullable' function_pointer='true' name='inSetSizeFunc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='SInt64' type64='q'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='UInt32 * _Nonnull' name='outResult' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentExtensionIsThisFormat'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='CFStringRef _Nonnull' name='inExtension' type64='^{__CFString=}'/>
<arg declared_type64='UInt32 * _Nonnull' name='outResult' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentFileDataIsThisFormat'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='UInt32' name='inDataByteSize' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inData' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' name='outResult' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentFileIsThisFormat'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='SInt16' name='inFileRefNum' type64='s'/>
<arg declared_type64='UInt32 * _Nonnull' name='outResult' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentGetGlobalInfo'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='AudioFileComponentPropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32' name='inSpecifierSize' type64='I'/>
<arg const='true' declared_type64='void * _Nullable' name='inSpecifier' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioPropertyDataSize' type64='^I'/>
<arg declared_type64='void * _Nonnull' name='outPropertyData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentGetGlobalInfoSize'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='AudioFileComponentPropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32' name='inSpecifierSize' type64='I'/>
<arg const='true' declared_type64='void * _Nullable' name='inSpecifier' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' name='outPropertySize' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentGetProperty'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='AudioFileComponentPropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioPropertyDataSize' type64='^I'/>
<arg declared_type64='void * _Nonnull' name='outPropertyData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentGetPropertyInfo'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='AudioFileComponentPropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32 * _Nullable' name='outPropertySize' type64='^I'/>
<arg declared_type64='UInt32 * _Nullable' name='outWritable' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentGetUserData'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='UInt32' name='inUserDataID' type64='I'/>
<arg declared_type64='UInt32' name='inIndex' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioUserDataSize' type64='^I'/>
<arg declared_type64='void * _Nonnull' name='outUserData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentGetUserDataSize'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='UInt32' name='inUserDataID' type64='I'/>
<arg declared_type64='UInt32' name='inIndex' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' name='outUserDataSize' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentInitialize'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg const='true' declared_type64='struct FSRef * _Nonnull' name='inFileRef' type64='^{FSRef=[80C]}'/>
<arg const='true' declared_type64='AudioStreamBasicDescription * _Nonnull' name='inFormat' type64='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg declared_type64='UInt32' name='inFlags' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentInitializeWithCallbacks'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='void * _Nonnull' name='inClientData' type64='^v'/>
<arg declared_type64='AudioFile_ReadProc _Nonnull' function_pointer='true' name='inReadFunc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='SInt64' type64='q'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='AudioFile_WriteProc _Nonnull' function_pointer='true' name='inWriteFunc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='SInt64' type64='q'/>
<arg declared_type64='UInt32' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='AudioFile_GetSizeProc _Nonnull' function_pointer='true' name='inGetSizeFunc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='SInt64' type64='q'/>
</arg>
<arg declared_type64='AudioFile_SetSizeProc _Nonnull' function_pointer='true' name='inSetSizeFunc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='SInt64' type64='q'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='UInt32' name='inFileType' type64='I'/>
<arg const='true' declared_type64='AudioStreamBasicDescription * _Nonnull' name='inFormat' type64='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg declared_type64='UInt32' name='inFlags' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentOpenFile'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg const='true' declared_type64='struct FSRef * _Nonnull' name='inFileRef' type64='^{FSRef=[80C]}'/>
<arg declared_type64='SInt8' name='inPermissions' type64='c'/>
<arg declared_type64='SInt16' name='inRefNum' type64='s'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentOpenURL'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='CFURLRef _Nonnull' name='inFileRef' type64='^{__CFURL=}'/>
<arg declared_type64='SInt8' name='inPermissions' type64='c'/>
<arg declared_type64='int' name='inFileDescriptor' type64='i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentOpenWithCallbacks'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='void * _Nonnull' name='inClientData' type64='^v'/>
<arg declared_type64='AudioFile_ReadProc _Nonnull' function_pointer='true' name='inReadFunc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='SInt64' type64='q'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='AudioFile_WriteProc _Nonnull' function_pointer='true' name='inWriteFunc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='SInt64' type64='q'/>
<arg declared_type64='UInt32' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='AudioFile_GetSizeProc _Nonnull' function_pointer='true' name='inGetSizeFunc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='SInt64' type64='q'/>
</arg>
<arg declared_type64='AudioFile_SetSizeProc _Nonnull' function_pointer='true' name='inSetSizeFunc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='SInt64' type64='q'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentOptimize'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentReadBytes'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='Boolean' name='inUseCache' type64='B'/>
<arg declared_type64='SInt64' name='inStartingByte' type64='q'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioNumBytes' type64='^I'/>
<arg declared_type64='void * _Nonnull' name='outBuffer' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentReadPacketData'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='Boolean' name='inUseCache' type64='B'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioNumBytes' type64='^I'/>
<arg declared_type64='AudioStreamPacketDescription * _Nullable' name='outPacketDescriptions' type64='^{AudioStreamPacketDescription=qII}'/>
<arg declared_type64='SInt64' name='inStartingPacket' type64='q'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioNumPackets' type64='^I'/>
<arg declared_type64='void * _Nonnull' name='outBuffer' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentReadPackets'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='Boolean' name='inUseCache' type64='B'/>
<arg declared_type64='UInt32 * _Nonnull' name='outNumBytes' type64='^I'/>
<arg declared_type64='AudioStreamPacketDescription * _Nullable' name='outPacketDescriptions' type64='^{AudioStreamPacketDescription=qII}'/>
<arg declared_type64='SInt64' name='inStartingPacket' type64='q'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioNumPackets' type64='^I'/>
<arg declared_type64='void * _Nonnull' name='outBuffer' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentRemoveUserData'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='UInt32' name='inUserDataID' type64='I'/>
<arg declared_type64='UInt32' name='inIndex' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentSetProperty'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='AudioFileComponentPropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32' name='inPropertyDataSize' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inPropertyData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentSetUserData'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='UInt32' name='inUserDataID' type64='I'/>
<arg declared_type64='UInt32' name='inIndex' type64='I'/>
<arg declared_type64='UInt32' name='inUserDataSize' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inUserData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentWriteBytes'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='Boolean' name='inUseCache' type64='B'/>
<arg declared_type64='SInt64' name='inStartingByte' type64='q'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioNumBytes' type64='^I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inBuffer' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileComponentWritePackets'>
<arg declared_type64='AudioFileComponent _Nonnull' name='inComponent' type64='^{ComponentInstanceRecord=[1q]}'/>
<arg declared_type64='Boolean' name='inUseCache' type64='B'/>
<arg declared_type64='UInt32' name='inNumBytes' type64='I'/>
<arg const='true' declared_type64='AudioStreamPacketDescription * _Nullable' name='inPacketDescriptions' type64='^{AudioStreamPacketDescription=qII}'/>
<arg declared_type64='SInt64' name='inStartingPacket' type64='q'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioNumPackets' type64='^I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inBuffer' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileCountUserData'>
<arg declared_type64='AudioFileID _Nonnull' name='inAudioFile' type64='^{OpaqueAudioFileID=}'/>
<arg declared_type64='UInt32' name='inUserDataID' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' name='outNumberItems' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileCreate'>
<arg const='true' declared_type64='struct FSRef * _Nonnull' name='inParentRef' type64='^{FSRef=[80C]}'/>
<arg declared_type64='CFStringRef _Nonnull' name='inFileName' type64='^{__CFString=}'/>
<arg declared_type64='AudioFileTypeID' name='inFileType' type64='I'/>
<arg const='true' declared_type64='AudioStreamBasicDescription * _Nonnull' name='inFormat' type64='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg declared_type64='AudioFileFlags' name='inFlags' type64='I'/>
<arg declared_type64='struct FSRef * _Nonnull' name='outNewFileRef' type64='^{FSRef=[80C]}'/>
<arg declared_type64='AudioFileID _Nullable * _Nonnull' name='outAudioFile' type64='^^{OpaqueAudioFileID}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileCreateWithURL'>
<arg declared_type64='CFURLRef _Nonnull' name='inFileRef' type64='^{__CFURL=}'/>
<arg declared_type64='AudioFileTypeID' name='inFileType' type64='I'/>
<arg const='true' declared_type64='AudioStreamBasicDescription * _Nonnull' name='inFormat' type64='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg declared_type64='AudioFileFlags' name='inFlags' type64='I'/>
<arg declared_type64='AudioFileID _Nullable * _Nonnull' name='outAudioFile' type64='^^{OpaqueAudioFileID}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileGetGlobalInfo'>
<arg declared_type64='AudioFilePropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32' name='inSpecifierSize' type64='I'/>
<arg declared_type64='void * _Nullable' name='inSpecifier' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioDataSize' type64='^I'/>
<arg declared_type64='void * _Nonnull' name='outPropertyData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileGetGlobalInfoSize'>
<arg declared_type64='AudioFilePropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32' name='inSpecifierSize' type64='I'/>
<arg declared_type64='void * _Nullable' name='inSpecifier' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' name='outDataSize' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileGetProperty'>
<arg declared_type64='AudioFileID _Nonnull' name='inAudioFile' type64='^{OpaqueAudioFileID=}'/>
<arg declared_type64='AudioFilePropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioDataSize' type64='^I'/>
<arg declared_type64='void * _Nonnull' name='outPropertyData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileGetPropertyInfo'>
<arg declared_type64='AudioFileID _Nonnull' name='inAudioFile' type64='^{OpaqueAudioFileID=}'/>
<arg declared_type64='AudioFilePropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32 * _Nullable' name='outDataSize' type64='^I'/>
<arg declared_type64='UInt32 * _Nullable' name='isWritable' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileGetUserData'>
<arg declared_type64='AudioFileID _Nonnull' name='inAudioFile' type64='^{OpaqueAudioFileID=}'/>
<arg declared_type64='UInt32' name='inUserDataID' type64='I'/>
<arg declared_type64='UInt32' name='inIndex' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioUserDataSize' type64='^I'/>
<arg declared_type64='void * _Nonnull' name='outUserData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileGetUserDataSize'>
<arg declared_type64='AudioFileID _Nonnull' name='inAudioFile' type64='^{OpaqueAudioFileID=}'/>
<arg declared_type64='UInt32' name='inUserDataID' type64='I'/>
<arg declared_type64='UInt32' name='inIndex' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' name='outUserDataSize' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileInitialize'>
<arg const='true' declared_type64='struct FSRef * _Nonnull' name='inFileRef' type64='^{FSRef=[80C]}'/>
<arg declared_type64='AudioFileTypeID' name='inFileType' type64='I'/>
<arg const='true' declared_type64='AudioStreamBasicDescription * _Nonnull' name='inFormat' type64='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg declared_type64='AudioFileFlags' name='inFlags' type64='I'/>
<arg declared_type64='AudioFileID _Nullable * _Nonnull' name='outAudioFile' type64='^^{OpaqueAudioFileID}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileInitializeWithCallbacks'>
<arg declared_type64='void * _Nonnull' name='inClientData' type64='^v'/>
<arg declared_type64='AudioFile_ReadProc _Nonnull' function_pointer='true' name='inReadFunc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='SInt64' type64='q'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='AudioFile_WriteProc _Nonnull' function_pointer='true' name='inWriteFunc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='SInt64' type64='q'/>
<arg declared_type64='UInt32' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='AudioFile_GetSizeProc _Nonnull' function_pointer='true' name='inGetSizeFunc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='SInt64' type64='q'/>
</arg>
<arg declared_type64='AudioFile_SetSizeProc _Nonnull' function_pointer='true' name='inSetSizeFunc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='SInt64' type64='q'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='AudioFileTypeID' name='inFileType' type64='I'/>
<arg const='true' declared_type64='AudioStreamBasicDescription * _Nonnull' name='inFormat' type64='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg declared_type64='AudioFileFlags' name='inFlags' type64='I'/>
<arg declared_type64='AudioFileID _Nullable * _Nonnull' name='outAudioFile' type64='^^{OpaqueAudioFileID}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileOpen'>
<arg const='true' declared_type64='struct FSRef * _Nonnull' name='inFileRef' type64='^{FSRef=[80C]}'/>
<arg declared_type64='AudioFilePermissions' name='inPermissions' type64='c'/>
<arg declared_type64='AudioFileTypeID' name='inFileTypeHint' type64='I'/>
<arg declared_type64='AudioFileID _Nullable * _Nonnull' name='outAudioFile' type64='^^{OpaqueAudioFileID}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileOpenURL'>
<arg declared_type64='CFURLRef _Nonnull' name='inFileRef' type64='^{__CFURL=}'/>
<arg declared_type64='AudioFilePermissions' name='inPermissions' type64='c'/>
<arg declared_type64='AudioFileTypeID' name='inFileTypeHint' type64='I'/>
<arg declared_type64='AudioFileID _Nullable * _Nonnull' name='outAudioFile' type64='^^{OpaqueAudioFileID}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileOpenWithCallbacks'>
<arg declared_type64='void * _Nonnull' name='inClientData' type64='^v'/>
<arg declared_type64='AudioFile_ReadProc _Nonnull' function_pointer='true' name='inReadFunc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='SInt64' type64='q'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='AudioFile_WriteProc _Nullable' function_pointer='true' name='inWriteFunc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='SInt64' type64='q'/>
<arg declared_type64='UInt32' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='AudioFile_GetSizeProc _Nonnull' function_pointer='true' name='inGetSizeFunc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='SInt64' type64='q'/>
</arg>
<arg declared_type64='AudioFile_SetSizeProc _Nullable' function_pointer='true' name='inSetSizeFunc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='SInt64' type64='q'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='AudioFileTypeID' name='inFileTypeHint' type64='I'/>
<arg declared_type64='AudioFileID _Nullable * _Nonnull' name='outAudioFile' type64='^^{OpaqueAudioFileID}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileOptimize'>
<arg declared_type64='AudioFileID _Nonnull' name='inAudioFile' type64='^{OpaqueAudioFileID=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileReadBytes'>
<arg declared_type64='AudioFileID _Nonnull' name='inAudioFile' type64='^{OpaqueAudioFileID=}'/>
<arg declared_type64='Boolean' name='inUseCache' type64='B'/>
<arg declared_type64='SInt64' name='inStartingByte' type64='q'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioNumBytes' type64='^I'/>
<arg declared_type64='void * _Nonnull' name='outBuffer' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileReadPacketData'>
<arg declared_type64='AudioFileID _Nonnull' name='inAudioFile' type64='^{OpaqueAudioFileID=}'/>
<arg declared_type64='Boolean' name='inUseCache' type64='B'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioNumBytes' type64='^I'/>
<arg declared_type64='AudioStreamPacketDescription * _Nullable' name='outPacketDescriptions' type64='^{AudioStreamPacketDescription=qII}'/>
<arg declared_type64='SInt64' name='inStartingPacket' type64='q'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioNumPackets' type64='^I'/>
<arg declared_type64='void * _Nullable' name='outBuffer' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileReadPackets'>
<arg declared_type64='AudioFileID _Nonnull' name='inAudioFile' type64='^{OpaqueAudioFileID=}'/>
<arg declared_type64='Boolean' name='inUseCache' type64='B'/>
<arg declared_type64='UInt32 * _Nonnull' name='outNumBytes' type64='^I'/>
<arg declared_type64='AudioStreamPacketDescription * _Nullable' name='outPacketDescriptions' type64='^{AudioStreamPacketDescription=qII}'/>
<arg declared_type64='SInt64' name='inStartingPacket' type64='q'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioNumPackets' type64='^I'/>
<arg declared_type64='void * _Nullable' name='outBuffer' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileRemoveUserData'>
<arg declared_type64='AudioFileID _Nonnull' name='inAudioFile' type64='^{OpaqueAudioFileID=}'/>
<arg declared_type64='UInt32' name='inUserDataID' type64='I'/>
<arg declared_type64='UInt32' name='inIndex' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileSetProperty'>
<arg declared_type64='AudioFileID _Nonnull' name='inAudioFile' type64='^{OpaqueAudioFileID=}'/>
<arg declared_type64='AudioFilePropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32' name='inDataSize' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inPropertyData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileSetUserData'>
<arg declared_type64='AudioFileID _Nonnull' name='inAudioFile' type64='^{OpaqueAudioFileID=}'/>
<arg declared_type64='UInt32' name='inUserDataID' type64='I'/>
<arg declared_type64='UInt32' name='inIndex' type64='I'/>
<arg declared_type64='UInt32' name='inUserDataSize' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inUserData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileStreamClose'>
<arg declared_type64='AudioFileStreamID _Nonnull' name='inAudioFileStream' type64='^{OpaqueAudioFileStreamID=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileStreamGetProperty'>
<arg declared_type64='AudioFileStreamID _Nonnull' name='inAudioFileStream' type64='^{OpaqueAudioFileStreamID=}'/>
<arg declared_type64='AudioFileStreamPropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioPropertyDataSize' type64='^I'/>
<arg declared_type64='void * _Nonnull' name='outPropertyData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileStreamGetPropertyInfo'>
<arg declared_type64='AudioFileStreamID _Nonnull' name='inAudioFileStream' type64='^{OpaqueAudioFileStreamID=}'/>
<arg declared_type64='AudioFileStreamPropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32 * _Nullable' name='outPropertyDataSize' type64='^I'/>
<arg declared_type64='Boolean * _Nullable' name='outWritable' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileStreamOpen'>
<arg declared_type64='void * _Nullable' name='inClientData' type64='^v'/>
<arg declared_type64='AudioFileStream_PropertyListenerProc _Nonnull' function_pointer='true' name='inPropertyListenerProc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='AudioFileStreamID _Nonnull' type64='^{OpaqueAudioFileStreamID=}'/>
<arg declared_type64='AudioFileStreamPropertyID' type64='I'/>
<arg declared_type64='AudioFileStreamPropertyFlags * _Nonnull' type64='^I'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='AudioFileStream_PacketsProc _Nonnull' function_pointer='true' name='inPacketsProc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='UInt32' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='AudioStreamPacketDescription * _Nonnull' type64='^{AudioStreamPacketDescription=qII}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='AudioFileTypeID' name='inFileTypeHint' type64='I'/>
<arg declared_type64='AudioFileStreamID _Nullable * _Nonnull' name='outAudioFileStream' type64='^^{OpaqueAudioFileStreamID}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileStreamParseBytes'>
<arg declared_type64='AudioFileStreamID _Nonnull' name='inAudioFileStream' type64='^{OpaqueAudioFileStreamID=}'/>
<arg declared_type64='UInt32' name='inDataByteSize' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inData' type64='^v'/>
<arg declared_type64='AudioFileStreamParseFlags' name='inFlags' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileStreamSeek'>
<arg declared_type64='AudioFileStreamID _Nonnull' name='inAudioFileStream' type64='^{OpaqueAudioFileStreamID=}'/>
<arg declared_type64='SInt64' name='inPacketOffset' type64='q'/>
<arg declared_type64='SInt64 * _Nonnull' name='outDataByteOffset' type64='^q'/>
<arg declared_type64='AudioFileStreamSeekFlags * _Nonnull' name='ioFlags' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileStreamSetProperty'>
<arg declared_type64='AudioFileStreamID _Nonnull' name='inAudioFileStream' type64='^{OpaqueAudioFileStreamID=}'/>
<arg declared_type64='AudioFileStreamPropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32' name='inPropertyDataSize' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inPropertyData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileWriteBytes'>
<arg declared_type64='AudioFileID _Nonnull' name='inAudioFile' type64='^{OpaqueAudioFileID=}'/>
<arg declared_type64='Boolean' name='inUseCache' type64='B'/>
<arg declared_type64='SInt64' name='inStartingByte' type64='q'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioNumBytes' type64='^I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inBuffer' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFileWritePackets'>
<arg declared_type64='AudioFileID _Nonnull' name='inAudioFile' type64='^{OpaqueAudioFileID=}'/>
<arg declared_type64='Boolean' name='inUseCache' type64='B'/>
<arg declared_type64='UInt32' name='inNumBytes' type64='I'/>
<arg const='true' declared_type64='AudioStreamPacketDescription * _Nullable' name='inPacketDescriptions' type64='^{AudioStreamPacketDescription=qII}'/>
<arg declared_type64='SInt64' name='inStartingPacket' type64='q'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioNumPackets' type64='^I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inBuffer' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFormatGetProperty'>
<arg declared_type64='AudioFormatPropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32' name='inSpecifierSize' type64='I'/>
<arg const='true' declared_type64='void * _Nullable' name='inSpecifier' type64='^v'/>
<arg declared_type64='UInt32 * _Nullable' name='ioPropertyDataSize' type64='^I'/>
<arg declared_type64='void * _Nullable' name='outPropertyData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioFormatGetPropertyInfo'>
<arg declared_type64='AudioFormatPropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32' name='inSpecifierSize' type64='I'/>
<arg const='true' declared_type64='void * _Nullable' name='inSpecifier' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' name='outPropertyDataSize' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioHardwareServiceAddPropertyListener'>
<arg declared_type64='AudioObjectID' name='inObjectID' type64='I'/>
<arg const='true' declared_type64='AudioObjectPropertyAddress * _Nonnull' name='inAddress' type64='^{AudioObjectPropertyAddress=III}'/>
<arg declared_type64='AudioObjectPropertyListenerProc _Nonnull' function_pointer='true' name='inListener' type64='^?'>
<arg declared_type64='AudioObjectID' type64='I'/>
<arg declared_type64='UInt32' type64='I'/>
<arg const='true' declared_type64='AudioObjectPropertyAddress * _Nonnull' type64='^{AudioObjectPropertyAddress=III}'/>
<arg declared_type64='void * _Nullable' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='void * _Nonnull' name='inClientData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioHardwareServiceGetPropertyData'>
<arg declared_type64='AudioObjectID' name='inObjectID' type64='I'/>
<arg const='true' declared_type64='AudioObjectPropertyAddress * _Nonnull' name='inAddress' type64='^{AudioObjectPropertyAddress=III}'/>
<arg declared_type64='UInt32' name='inQualifierDataSize' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inQualifierData' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioDataSize' type64='^I'/>
<arg declared_type64='void * _Nonnull' name='outData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioHardwareServiceGetPropertyDataSize'>
<arg declared_type64='AudioObjectID' name='inObjectID' type64='I'/>
<arg const='true' declared_type64='AudioObjectPropertyAddress * _Nonnull' name='inAddress' type64='^{AudioObjectPropertyAddress=III}'/>
<arg declared_type64='UInt32' name='inQualifierDataSize' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inQualifierData' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' name='outDataSize' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioHardwareServiceHasProperty'>
<arg declared_type64='AudioObjectID' name='inObjectID' type64='I'/>
<arg const='true' declared_type64='AudioObjectPropertyAddress * _Nonnull' name='inAddress' type64='^{AudioObjectPropertyAddress=III}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='AudioHardwareServiceIsPropertySettable'>
<arg declared_type64='AudioObjectID' name='inObjectID' type64='I'/>
<arg const='true' declared_type64='AudioObjectPropertyAddress * _Nonnull' name='inAddress' type64='^{AudioObjectPropertyAddress=III}'/>
<arg declared_type64='Boolean * _Nonnull' name='outIsSettable' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioHardwareServiceRemovePropertyListener'>
<arg declared_type64='AudioObjectID' name='inObjectID' type64='I'/>
<arg const='true' declared_type64='AudioObjectPropertyAddress * _Nonnull' name='inAddress' type64='^{AudioObjectPropertyAddress=III}'/>
<arg declared_type64='AudioObjectPropertyListenerProc _Nonnull' function_pointer='true' name='inListener' type64='^?'>
<arg declared_type64='AudioObjectID' type64='I'/>
<arg declared_type64='UInt32' type64='I'/>
<arg const='true' declared_type64='AudioObjectPropertyAddress * _Nonnull' type64='^{AudioObjectPropertyAddress=III}'/>
<arg declared_type64='void * _Nullable' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</arg>
<arg declared_type64='void * _Nonnull' name='inClientData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioHardwareServiceSetPropertyData'>
<arg declared_type64='AudioObjectID' name='inObjectID' type64='I'/>
<arg const='true' declared_type64='AudioObjectPropertyAddress * _Nonnull' name='inAddress' type64='^{AudioObjectPropertyAddress=III}'/>
<arg declared_type64='UInt32' name='inQualifierDataSize' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inQualifierData' type64='^v'/>
<arg declared_type64='UInt32' name='inDataSize' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueAddPropertyListener'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioQueuePropertyID' name='inID' type64='I'/>
<arg declared_type64='AudioQueuePropertyListenerProc _Nonnull' function_pointer='true' name='inProc' type64='^?'>
<arg declared_type64='void * _Nullable' type64='^v'/>
<arg declared_type64='AudioQueueRef _Nonnull' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioQueuePropertyID' type64='I'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='void * _Nullable' name='inUserData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueAllocateBuffer'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='UInt32' name='inBufferByteSize' type64='I'/>
<arg declared_type64='AudioQueueBufferRef _Nullable * _Nonnull' name='outBuffer' type64='^^{AudioQueueBuffer}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueAllocateBufferWithPacketDescriptions'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='UInt32' name='inBufferByteSize' type64='I'/>
<arg declared_type64='UInt32' name='inNumberPacketDescriptions' type64='I'/>
<arg declared_type64='AudioQueueBufferRef _Nullable * _Nonnull' name='outBuffer' type64='^^{AudioQueueBuffer}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueCreateTimeline'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioQueueTimelineRef _Nullable * _Nonnull' name='outTimeline' type64='^^{OpaqueAudioQueueTimeline}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueDeviceGetCurrentTime'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioTimeStamp * _Nonnull' name='outTimeStamp' type64='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueDeviceGetNearestStartTime'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioTimeStamp * _Nonnull' name='ioRequestedStartTime' type64='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<arg declared_type64='UInt32' name='inFlags' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueDeviceTranslateTime'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg const='true' declared_type64='AudioTimeStamp * _Nonnull' name='inTime' type64='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<arg declared_type64='AudioTimeStamp * _Nonnull' name='outTime' type64='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueDispose'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='Boolean' name='inImmediate' type64='B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueDisposeTimeline'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioQueueTimelineRef _Nonnull' name='inTimeline' type64='^{OpaqueAudioQueueTimeline=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueEnqueueBuffer'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioQueueBufferRef _Nonnull' name='inBuffer' type64='^{AudioQueueBuffer=I^vI^vI^{AudioStreamPacketDescription}I}'/>
<arg declared_type64='UInt32' name='inNumPacketDescs' type64='I'/>
<arg const='true' declared_type64='AudioStreamPacketDescription * _Nullable' name='inPacketDescs' type64='^{AudioStreamPacketDescription=qII}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueEnqueueBufferWithParameters'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioQueueBufferRef _Nonnull' name='inBuffer' type64='^{AudioQueueBuffer=I^vI^vI^{AudioStreamPacketDescription}I}'/>
<arg declared_type64='UInt32' name='inNumPacketDescs' type64='I'/>
<arg const='true' declared_type64='AudioStreamPacketDescription * _Nullable' name='inPacketDescs' type64='^{AudioStreamPacketDescription=qII}'/>
<arg declared_type64='UInt32' name='inTrimFramesAtStart' type64='I'/>
<arg declared_type64='UInt32' name='inTrimFramesAtEnd' type64='I'/>
<arg declared_type64='UInt32' name='inNumParamValues' type64='I'/>
<arg const='true' declared_type64='AudioQueueParameterEvent * _Nullable' name='inParamValues' type64='^{AudioQueueParameterEvent=If}'/>
<arg const='true' declared_type64='AudioTimeStamp * _Nullable' name='inStartTime' type64='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<arg declared_type64='AudioTimeStamp * _Nullable' name='outActualStartTime' type64='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueFlush'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueFreeBuffer'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioQueueBufferRef _Nonnull' name='inBuffer' type64='^{AudioQueueBuffer=I^vI^vI^{AudioStreamPacketDescription}I}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueGetCurrentTime'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioQueueTimelineRef _Nullable' name='inTimeline' type64='^{OpaqueAudioQueueTimeline=}'/>
<arg declared_type64='AudioTimeStamp * _Nullable' name='outTimeStamp' type64='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<arg declared_type64='Boolean * _Nullable' name='outTimelineDiscontinuity' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueGetParameter'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioQueueParameterID' name='inParamID' type64='I'/>
<arg declared_type64='AudioQueueParameterValue * _Nonnull' name='outValue' type64='^f'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueGetProperty'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioQueuePropertyID' name='inID' type64='I'/>
<arg declared_type64='void * _Nonnull' name='outData' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioDataSize' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueGetPropertySize'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioQueuePropertyID' name='inID' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' name='outDataSize' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueNewInput'>
<arg const='true' declared_type64='AudioStreamBasicDescription * _Nonnull' name='inFormat' type64='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg declared_type64='AudioQueueInputCallback _Nonnull' function_pointer='true' name='inCallbackProc' type64='^?'>
<arg declared_type64='void * _Nullable' type64='^v'/>
<arg declared_type64='AudioQueueRef _Nonnull' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioQueueBufferRef _Nonnull' type64='^{AudioQueueBuffer=I^vI^vI^{AudioStreamPacketDescription}I}'/>
<arg const='true' declared_type64='AudioTimeStamp * _Nonnull' type64='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<arg declared_type64='UInt32' type64='I'/>
<arg const='true' declared_type64='AudioStreamPacketDescription * _Nullable' type64='^{AudioStreamPacketDescription=qII}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='void * _Nullable' name='inUserData' type64='^v'/>
<arg declared_type64='CFRunLoopRef _Nullable' name='inCallbackRunLoop' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFStringRef _Nullable' name='inCallbackRunLoopMode' type64='^{__CFString=}'/>
<arg declared_type64='UInt32' name='inFlags' type64='I'/>
<arg declared_type64='AudioQueueRef _Nullable * _Nonnull' name='outAQ' type64='^^{OpaqueAudioQueue}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueNewInputWithDispatchQueue'>
<arg declared_type64='AudioQueueRef _Nullable * _Nonnull' name='outAQ' type64='^^{OpaqueAudioQueue}'/>
<arg const='true' declared_type64='AudioStreamBasicDescription * _Nonnull' name='inFormat' type64='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg declared_type64='UInt32' name='inFlags' type64='I'/>
<arg declared_type64='dispatch_queue_t _Nonnull' name='inCallbackDispatchQueue' type64='@'/>
<arg declared_type64='AudioQueueInputCallbackBlock _Nonnull' function_pointer='true' name='inCallbackBlock' type64='@?'>
<arg declared_type64='AudioQueueRef _Nonnull' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioQueueBufferRef _Nonnull' type64='^{AudioQueueBuffer=I^vI^vI^{AudioStreamPacketDescription}I}'/>
<arg const='true' declared_type64='AudioTimeStamp * _Nonnull' type64='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<arg declared_type64='UInt32' type64='I'/>
<arg const='true' declared_type64='AudioStreamPacketDescription * _Nullable' type64='^{AudioStreamPacketDescription=qII}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueNewOutput'>
<arg const='true' declared_type64='AudioStreamBasicDescription * _Nonnull' name='inFormat' type64='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg declared_type64='AudioQueueOutputCallback _Nonnull' function_pointer='true' name='inCallbackProc' type64='^?'>
<arg declared_type64='void * _Nullable' type64='^v'/>
<arg declared_type64='AudioQueueRef _Nonnull' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioQueueBufferRef _Nonnull' type64='^{AudioQueueBuffer=I^vI^vI^{AudioStreamPacketDescription}I}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='void * _Nullable' name='inUserData' type64='^v'/>
<arg declared_type64='CFRunLoopRef _Nullable' name='inCallbackRunLoop' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFStringRef _Nullable' name='inCallbackRunLoopMode' type64='^{__CFString=}'/>
<arg declared_type64='UInt32' name='inFlags' type64='I'/>
<arg declared_type64='AudioQueueRef _Nullable * _Nonnull' name='outAQ' type64='^^{OpaqueAudioQueue}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueNewOutputWithDispatchQueue'>
<arg declared_type64='AudioQueueRef _Nullable * _Nonnull' name='outAQ' type64='^^{OpaqueAudioQueue}'/>
<arg const='true' declared_type64='AudioStreamBasicDescription * _Nonnull' name='inFormat' type64='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg declared_type64='UInt32' name='inFlags' type64='I'/>
<arg declared_type64='dispatch_queue_t _Nonnull' name='inCallbackDispatchQueue' type64='@'/>
<arg declared_type64='AudioQueueOutputCallbackBlock _Nonnull' function_pointer='true' name='inCallbackBlock' type64='@?'>
<arg declared_type64='AudioQueueRef _Nonnull' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioQueueBufferRef _Nonnull' type64='^{AudioQueueBuffer=I^vI^vI^{AudioStreamPacketDescription}I}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueOfflineRender'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg const='true' declared_type64='AudioTimeStamp * _Nonnull' name='inTimestamp' type64='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<arg declared_type64='AudioQueueBufferRef _Nonnull' name='ioBuffer' type64='^{AudioQueueBuffer=I^vI^vI^{AudioStreamPacketDescription}I}'/>
<arg declared_type64='UInt32' name='inNumberFrames' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueuePause'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueuePrime'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='UInt32' name='inNumberOfFramesToPrepare' type64='I'/>
<arg declared_type64='UInt32 * _Nullable' name='outNumberOfFramesPrepared' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueProcessingTapDispose'>
<arg declared_type64='AudioQueueProcessingTapRef _Nonnull' name='inAQTap' type64='^{OpaqueAudioQueueProcessingTap=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueProcessingTapGetQueueTime'>
<arg declared_type64='AudioQueueProcessingTapRef _Nonnull' name='inAQTap' type64='^{OpaqueAudioQueueProcessingTap=}'/>
<arg declared_type64='Float64 * _Nonnull' name='outQueueSampleTime' type64='^d'/>
<arg declared_type64='UInt32 * _Nonnull' name='outQueueFrameCount' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueProcessingTapGetSourceAudio'>
<arg declared_type64='AudioQueueProcessingTapRef _Nonnull' name='inAQTap' type64='^{OpaqueAudioQueueProcessingTap=}'/>
<arg declared_type64='UInt32' name='inNumberFrames' type64='I'/>
<arg declared_type64='AudioTimeStamp * _Nonnull' name='ioTimeStamp' type64='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<arg declared_type64='AudioQueueProcessingTapFlags * _Nonnull' name='outFlags' type64='^I'/>
<arg declared_type64='UInt32 * _Nonnull' name='outNumberFrames' type64='^I'/>
<arg declared_type64='AudioBufferList * _Nonnull' name='ioData' type64='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueProcessingTapNew'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioQueueProcessingTapCallback _Nonnull' function_pointer='true' name='inCallback' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='AudioQueueProcessingTapRef _Nonnull' type64='^{OpaqueAudioQueueProcessingTap=}'/>
<arg declared_type64='UInt32' type64='I'/>
<arg declared_type64='AudioTimeStamp * _Nonnull' type64='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<arg declared_type64='AudioQueueProcessingTapFlags * _Nonnull' type64='^I'/>
<arg declared_type64='UInt32 * _Nonnull' type64='^I'/>
<arg declared_type64='AudioBufferList * _Nonnull' type64='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='void * _Nullable' name='inClientData' type64='^v'/>
<arg declared_type64='AudioQueueProcessingTapFlags' name='inFlags' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' name='outMaxFrames' type64='^I'/>
<arg declared_type64='AudioStreamBasicDescription * _Nonnull' name='outProcessingFormat' type64='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg declared_type64='AudioQueueProcessingTapRef _Nullable * _Nonnull' name='outAQTap' type64='^^{OpaqueAudioQueueProcessingTap}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueRemovePropertyListener'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioQueuePropertyID' name='inID' type64='I'/>
<arg declared_type64='AudioQueuePropertyListenerProc _Nonnull' function_pointer='true' name='inProc' type64='^?'>
<arg declared_type64='void * _Nullable' type64='^v'/>
<arg declared_type64='AudioQueueRef _Nonnull' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioQueuePropertyID' type64='I'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='void * _Nullable' name='inUserData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueReset'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueSetOfflineRenderFormat'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg const='true' declared_type64='AudioStreamBasicDescription * _Nullable' name='inFormat' type64='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg const='true' declared_type64='AudioChannelLayout * _Nullable' name='inLayout' type64='^{AudioChannelLayout=III[1{AudioChannelDescription=II[3f]}]}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueSetParameter'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioQueueParameterID' name='inParamID' type64='I'/>
<arg declared_type64='AudioQueueParameterValue' name='inValue' type64='f'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueSetProperty'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='AudioQueuePropertyID' name='inID' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inData' type64='^v'/>
<arg declared_type64='UInt32' name='inDataSize' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueStart'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg const='true' declared_type64='AudioTimeStamp * _Nullable' name='inStartTime' type64='^{AudioTimeStamp=dQdQ{SMPTETime=ssIIIssss}II}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioQueueStop'>
<arg declared_type64='AudioQueueRef _Nonnull' name='inAQ' type64='^{OpaqueAudioQueue=}'/>
<arg declared_type64='Boolean' name='inImmediate' type64='B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioServicesAddSystemSoundCompletion'>
<arg declared_type64='SystemSoundID' name='inSystemSoundID' type64='I'/>
<arg declared_type64='CFRunLoopRef _Nullable' name='inRunLoop' type64='^{__CFRunLoop=}'/>
<arg declared_type64='CFStringRef _Nullable' name='inRunLoopMode' type64='^{__CFString=}'/>
<arg declared_type64='AudioServicesSystemSoundCompletionProc _Nonnull' function_pointer='true' name='inCompletionRoutine' type64='^?'>
<arg declared_type64='SystemSoundID' type64='I'/>
<arg declared_type64='void * _Nullable' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='void * _Nullable' name='inClientData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioServicesCreateSystemSoundID'>
<arg declared_type64='CFURLRef _Nonnull' name='inFileURL' type64='^{__CFURL=}'/>
<arg declared_type64='SystemSoundID * _Nonnull' name='outSystemSoundID' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioServicesDisposeSystemSoundID'>
<arg declared_type64='SystemSoundID' name='inSystemSoundID' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioServicesGetProperty'>
<arg declared_type64='AudioServicesPropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32' name='inSpecifierSize' type64='I'/>
<arg const='true' declared_type64='void * _Nullable' name='inSpecifier' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioPropertyDataSize' type64='^I'/>
<arg declared_type64='void * _Nullable' name='outPropertyData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioServicesGetPropertyInfo'>
<arg declared_type64='AudioServicesPropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32' name='inSpecifierSize' type64='I'/>
<arg const='true' declared_type64='void * _Nullable' name='inSpecifier' type64='^v'/>
<arg declared_type64='UInt32 * _Nullable' name='outPropertyDataSize' type64='^I'/>
<arg declared_type64='Boolean * _Nullable' name='outWritable' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='AudioServicesPlayAlertSound'>
<arg declared_type64='SystemSoundID' name='inSystemSoundID' type64='I'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='AudioServicesPlayAlertSoundWithCompletion'>
<arg declared_type64='SystemSoundID' name='inSystemSoundID' type64='I'/>
<arg declared_type64='void (^ _Nullable)(void)' function_pointer='true' name='inCompletionBlock' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='AudioServicesPlaySystemSound'>
<arg declared_type64='SystemSoundID' name='inSystemSoundID' type64='I'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='AudioServicesPlaySystemSoundWithCompletion'>
<arg declared_type64='SystemSoundID' name='inSystemSoundID' type64='I'/>
<arg declared_type64='void (^ _Nullable)(void)' function_pointer='true' name='inCompletionBlock' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='AudioServicesRemoveSystemSoundCompletion'>
<arg declared_type64='SystemSoundID' name='inSystemSoundID' type64='I'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='AudioServicesSetProperty'>
<arg declared_type64='AudioServicesPropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32' name='inSpecifierSize' type64='I'/>
<arg const='true' declared_type64='void * _Nullable' name='inSpecifier' type64='^v'/>
<arg declared_type64='UInt32' name='inPropertyDataSize' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inPropertyData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockAddListener'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<arg declared_type64='CAClockListenerProc _Nonnull' function_pointer='true' name='inListenerProc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='CAClockMessage' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='void * _Nonnull' name='inUserData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockArm'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockBarBeatTimeToBeats'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<arg const='true' declared_type64='CABarBeatTime * _Nonnull' name='inBarBeatTime' type64='^{CABarBeatTime=iSSSS}'/>
<arg declared_type64='CAClockBeats * _Nonnull' name='outBeats' type64='^d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockBeatsToBarBeatTime'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<arg declared_type64='CAClockBeats' name='inBeats' type64='d'/>
<arg declared_type64='UInt16' name='inSubbeatDivisor' type64='S'/>
<arg declared_type64='CABarBeatTime * _Nonnull' name='outBarBeatTime' type64='^{CABarBeatTime=iSSSS}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockDisarm'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockDispose'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockGetCurrentTempo'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<arg declared_type64='CAClockTempo * _Nonnull' name='outTempo' type64='^d'/>
<arg declared_type64='CAClockTime * _Nullable' name='outTimestamp' type64='^{CAClockTime=II(?=Qddd{SMPTETime=ssIIIssss})}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockGetCurrentTime'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<arg declared_type64='CAClockTimeFormat' name='inTimeFormat' type64='I'/>
<arg declared_type64='CAClockTime * _Nonnull' name='outTime' type64='^{CAClockTime=II(?=Qddd{SMPTETime=ssIIIssss})}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockGetPlayRate'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<arg declared_type64='Float64 * _Nonnull' name='outPlayRate' type64='^d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockGetProperty'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<arg declared_type64='CAClockPropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioPropertyDataSize' type64='^I'/>
<arg declared_type64='void * _Nonnull' name='outPropertyData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockGetPropertyInfo'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<arg declared_type64='CAClockPropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32 * _Nullable' name='outSize' type64='^I'/>
<arg declared_type64='Boolean * _Nullable' name='outWritable' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockGetStartTime'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<arg declared_type64='CAClockTimeFormat' name='inTimeFormat' type64='I'/>
<arg declared_type64='CAClockTime * _Nonnull' name='outTime' type64='^{CAClockTime=II(?=Qddd{SMPTETime=ssIIIssss})}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockNew'>
<arg declared_type64='UInt32' name='inReservedFlags' type64='I'/>
<arg declared_type64='CAClockRef _Nullable * _Nonnull' name='outCAClock' type64='^^{OpaqueCAClock}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockParseMIDI'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<arg const='true' declared_type64='struct MIDIPacketList * _Nonnull' name='inMIDIPacketList' type64='^{MIDIPacketList=I[1{MIDIPacket=QS[256C]}]}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockRemoveListener'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<arg declared_type64='CAClockListenerProc _Nonnull' function_pointer='true' name='inListenerProc' type64='^?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='CAClockMessage' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='void * _Nonnull' name='inUserData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockSMPTETimeToSeconds'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<arg const='true' declared_type64='SMPTETime * _Nonnull' name='inSMPTETime' type64='^{SMPTETime=ssIIIssss}'/>
<arg declared_type64='CAClockSeconds * _Nonnull' name='outSeconds' type64='^d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockSecondsToSMPTETime'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<arg declared_type64='CAClockSeconds' name='inSeconds' type64='d'/>
<arg declared_type64='UInt16' name='inSubframeDivisor' type64='S'/>
<arg declared_type64='SMPTETime * _Nonnull' name='outSMPTETime' type64='^{SMPTETime=ssIIIssss}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockSetCurrentTempo'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<arg declared_type64='CAClockTempo' name='inTempo' type64='d'/>
<arg const='true' declared_type64='CAClockTime * _Nullable' name='inTimestamp' type64='^{CAClockTime=II(?=Qddd{SMPTETime=ssIIIssss})}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockSetCurrentTime'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<arg const='true' declared_type64='CAClockTime * _Nonnull' name='inTime' type64='^{CAClockTime=II(?=Qddd{SMPTETime=ssIIIssss})}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockSetPlayRate'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<arg declared_type64='Float64' name='inPlayRate' type64='d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockSetProperty'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<arg declared_type64='CAClockPropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32' name='inPropertyDataSize' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inPropertyData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockStart'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockStop'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAClockTranslateTime'>
<arg declared_type64='CAClockRef _Nonnull' name='inCAClock' type64='^{OpaqueCAClock=}'/>
<arg const='true' declared_type64='CAClockTime * _Nonnull' name='inTime' type64='^{CAClockTime=II(?=Qddd{SMPTETime=ssIIIssss})}'/>
<arg declared_type64='CAClockTimeFormat' name='inOutputTimeFormat' type64='I'/>
<arg declared_type64='CAClockTime * _Nonnull' name='outTime' type64='^{CAClockTime=II(?=Qddd{SMPTETime=ssIIIssss})}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CAShow'>
<arg declared_type64='void * _Nonnull' name='inObject' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CAShowFile'>
<arg declared_type64='void * _Nonnull' name='inObject' type64='^v'/>
<arg declared_type64='FILE * _Nonnull' name='inFile' type64='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='CopyInstrumentInfoFromSoundBank'>
<arg declared_type64='CFURLRef _Nonnull' name='inURL' type64='^{__CFURL=}'/>
<arg declared_type64='CFArrayRef _Nullable * _Nonnull' name='outInstrumentInfo' type64='^^{__CFArray}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='CopyNameFromSoundBank'>
<arg declared_type64='CFURLRef _Nonnull' name='inURL' type64='^{__CFURL=}'/>
<arg declared_type64='CFStringRef _Nullable * _Nonnull' name='outName' type64='^^{__CFString}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='DisposeAUGraph'>
<arg declared_type64='AUGraph _Nonnull' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='DisposeMusicEventIterator'>
<arg declared_type64='MusicEventIterator _Nonnull' name='inIterator' type64='^{OpaqueMusicEventIterator=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='DisposeMusicPlayer'>
<arg declared_type64='MusicPlayer _Nonnull' name='inPlayer' type64='^{OpaqueMusicPlayer=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='DisposeMusicSequence'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='ExtAudioFileCreateNew'>
<arg const='true' declared_type64='struct FSRef * _Nonnull' name='inParentDir' type64='^{FSRef=[80C]}'/>
<arg declared_type64='CFStringRef _Nonnull' name='inFileName' type64='^{__CFString=}'/>
<arg declared_type64='AudioFileTypeID' name='inFileType' type64='I'/>
<arg const='true' declared_type64='AudioStreamBasicDescription * _Nonnull' name='inStreamDesc' type64='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg const='true' declared_type64='AudioChannelLayout * _Nullable' name='inChannelLayout' type64='^{AudioChannelLayout=III[1{AudioChannelDescription=II[3f]}]}'/>
<arg declared_type64='ExtAudioFileRef _Nullable * _Nonnull' name='outExtAudioFile' type64='^^{OpaqueExtAudioFile}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='ExtAudioFileCreateWithURL'>
<arg declared_type64='CFURLRef _Nonnull' name='inURL' type64='^{__CFURL=}'/>
<arg declared_type64='AudioFileTypeID' name='inFileType' type64='I'/>
<arg const='true' declared_type64='AudioStreamBasicDescription * _Nonnull' name='inStreamDesc' type64='^{AudioStreamBasicDescription=dIIIIIIII}'/>
<arg const='true' declared_type64='AudioChannelLayout * _Nullable' name='inChannelLayout' type64='^{AudioChannelLayout=III[1{AudioChannelDescription=II[3f]}]}'/>
<arg declared_type64='UInt32' name='inFlags' type64='I'/>
<arg declared_type64='ExtAudioFileRef _Nullable * _Nonnull' name='outExtAudioFile' type64='^^{OpaqueExtAudioFile}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='ExtAudioFileDispose'>
<arg declared_type64='ExtAudioFileRef _Nonnull' name='inExtAudioFile' type64='^{OpaqueExtAudioFile=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='ExtAudioFileGetProperty'>
<arg declared_type64='ExtAudioFileRef _Nonnull' name='inExtAudioFile' type64='^{OpaqueExtAudioFile=}'/>
<arg declared_type64='ExtAudioFilePropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioPropertyDataSize' type64='^I'/>
<arg declared_type64='void * _Nonnull' name='outPropertyData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='ExtAudioFileGetPropertyInfo'>
<arg declared_type64='ExtAudioFileRef _Nonnull' name='inExtAudioFile' type64='^{OpaqueExtAudioFile=}'/>
<arg declared_type64='ExtAudioFilePropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32 * _Nullable' name='outSize' type64='^I'/>
<arg declared_type64='Boolean * _Nullable' name='outWritable' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='ExtAudioFileOpen'>
<arg const='true' declared_type64='struct FSRef * _Nonnull' name='inFSRef' type64='^{FSRef=[80C]}'/>
<arg declared_type64='ExtAudioFileRef _Nullable * _Nonnull' name='outExtAudioFile' type64='^^{OpaqueExtAudioFile}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='ExtAudioFileOpenURL'>
<arg declared_type64='CFURLRef _Nonnull' name='inURL' type64='^{__CFURL=}'/>
<arg declared_type64='ExtAudioFileRef _Nullable * _Nonnull' name='outExtAudioFile' type64='^^{OpaqueExtAudioFile}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='ExtAudioFileRead'>
<arg declared_type64='ExtAudioFileRef _Nonnull' name='inExtAudioFile' type64='^{OpaqueExtAudioFile=}'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioNumberFrames' type64='^I'/>
<arg declared_type64='AudioBufferList * _Nonnull' name='ioData' type64='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='ExtAudioFileSeek'>
<arg declared_type64='ExtAudioFileRef _Nonnull' name='inExtAudioFile' type64='^{OpaqueExtAudioFile=}'/>
<arg declared_type64='SInt64' name='inFrameOffset' type64='q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='ExtAudioFileSetProperty'>
<arg declared_type64='ExtAudioFileRef _Nonnull' name='inExtAudioFile' type64='^{OpaqueExtAudioFile=}'/>
<arg declared_type64='ExtAudioFilePropertyID' name='inPropertyID' type64='I'/>
<arg declared_type64='UInt32' name='inPropertyDataSize' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inPropertyData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='ExtAudioFileTell'>
<arg declared_type64='ExtAudioFileRef _Nonnull' name='inExtAudioFile' type64='^{OpaqueExtAudioFile=}'/>
<arg declared_type64='SInt64 * _Nonnull' name='outFrameOffset' type64='^q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='ExtAudioFileWrapAudioFileID'>
<arg declared_type64='AudioFileID _Nonnull' name='inFileID' type64='^{OpaqueAudioFileID=}'/>
<arg declared_type64='Boolean' name='inForWriting' type64='B'/>
<arg declared_type64='ExtAudioFileRef _Nullable * _Nonnull' name='outExtAudioFile' type64='^^{OpaqueExtAudioFile}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='ExtAudioFileWrite'>
<arg declared_type64='ExtAudioFileRef _Nonnull' name='inExtAudioFile' type64='^{OpaqueExtAudioFile=}'/>
<arg declared_type64='UInt32' name='inNumberFrames' type64='I'/>
<arg const='true' declared_type64='AudioBufferList * _Nonnull' name='ioData' type64='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='ExtAudioFileWriteAsync'>
<arg declared_type64='ExtAudioFileRef _Nonnull' name='inExtAudioFile' type64='^{OpaqueExtAudioFile=}'/>
<arg declared_type64='UInt32' name='inNumberFrames' type64='I'/>
<arg const='true' declared_type64='AudioBufferList * _Nullable' name='ioData' type64='^{AudioBufferList=I[1{AudioBuffer=II^v}]}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='GetNameFromSoundBank'>
<arg const='true' declared_type64='struct FSRef * _Nonnull' name='inSoundBankRef' type64='^{FSRef=[80C]}'/>
<arg declared_type64='CFStringRef _Nullable * _Nonnull' name='outName' type64='^^{__CFString}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicEventIteratorDeleteEvent'>
<arg declared_type64='MusicEventIterator _Nonnull' name='inIterator' type64='^{OpaqueMusicEventIterator=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicEventIteratorGetEventInfo'>
<arg declared_type64='MusicEventIterator _Nonnull' name='inIterator' type64='^{OpaqueMusicEventIterator=}'/>
<arg declared_type64='MusicTimeStamp * _Nonnull' name='outTimeStamp' type64='^d'/>
<arg declared_type64='MusicEventType * _Nonnull' name='outEventType' type64='^I'/>
<arg const='true' declared_type64='void * _Nullable * _Nonnull' name='outEventData' type64='^^v'/>
<arg declared_type64='UInt32 * _Nonnull' name='outEventDataSize' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicEventIteratorHasCurrentEvent'>
<arg declared_type64='MusicEventIterator _Nonnull' name='inIterator' type64='^{OpaqueMusicEventIterator=}'/>
<arg declared_type64='Boolean * _Nonnull' name='outHasCurEvent' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicEventIteratorHasNextEvent'>
<arg declared_type64='MusicEventIterator _Nonnull' name='inIterator' type64='^{OpaqueMusicEventIterator=}'/>
<arg declared_type64='Boolean * _Nonnull' name='outHasNextEvent' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicEventIteratorHasPreviousEvent'>
<arg declared_type64='MusicEventIterator _Nonnull' name='inIterator' type64='^{OpaqueMusicEventIterator=}'/>
<arg declared_type64='Boolean * _Nonnull' name='outHasPrevEvent' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicEventIteratorNextEvent'>
<arg declared_type64='MusicEventIterator _Nonnull' name='inIterator' type64='^{OpaqueMusicEventIterator=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicEventIteratorPreviousEvent'>
<arg declared_type64='MusicEventIterator _Nonnull' name='inIterator' type64='^{OpaqueMusicEventIterator=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicEventIteratorSeek'>
<arg declared_type64='MusicEventIterator _Nonnull' name='inIterator' type64='^{OpaqueMusicEventIterator=}'/>
<arg declared_type64='MusicTimeStamp' name='inTimeStamp' type64='d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicEventIteratorSetEventInfo'>
<arg declared_type64='MusicEventIterator _Nonnull' name='inIterator' type64='^{OpaqueMusicEventIterator=}'/>
<arg declared_type64='MusicEventType' name='inEventType' type64='I'/>
<arg const='true' declared_type64='void * _Nonnull' name='inEventData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicEventIteratorSetEventTime'>
<arg declared_type64='MusicEventIterator _Nonnull' name='inIterator' type64='^{OpaqueMusicEventIterator=}'/>
<arg declared_type64='MusicTimeStamp' name='inTimeStamp' type64='d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicPlayerGetBeatsForHostTime'>
<arg declared_type64='MusicPlayer _Nonnull' name='inPlayer' type64='^{OpaqueMusicPlayer=}'/>
<arg declared_type64='UInt64' name='inHostTime' type64='Q'/>
<arg declared_type64='MusicTimeStamp * _Nonnull' name='outBeats' type64='^d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicPlayerGetHostTimeForBeats'>
<arg declared_type64='MusicPlayer _Nonnull' name='inPlayer' type64='^{OpaqueMusicPlayer=}'/>
<arg declared_type64='MusicTimeStamp' name='inBeats' type64='d'/>
<arg declared_type64='UInt64 * _Nonnull' name='outHostTime' type64='^Q'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicPlayerGetPlayRateScalar'>
<arg declared_type64='MusicPlayer _Nonnull' name='inPlayer' type64='^{OpaqueMusicPlayer=}'/>
<arg declared_type64='Float64 * _Nonnull' name='outScaleRate' type64='^d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicPlayerGetSequence'>
<arg declared_type64='MusicPlayer _Nonnull' name='inPlayer' type64='^{OpaqueMusicPlayer=}'/>
<arg declared_type64='MusicSequence _Nullable * _Nonnull' name='outSequence' type64='^^{OpaqueMusicSequence}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicPlayerGetTime'>
<arg declared_type64='MusicPlayer _Nonnull' name='inPlayer' type64='^{OpaqueMusicPlayer=}'/>
<arg declared_type64='MusicTimeStamp * _Nonnull' name='outTime' type64='^d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicPlayerIsPlaying'>
<arg declared_type64='MusicPlayer _Nonnull' name='inPlayer' type64='^{OpaqueMusicPlayer=}'/>
<arg declared_type64='Boolean * _Nonnull' name='outIsPlaying' type64='^B'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicPlayerPreroll'>
<arg declared_type64='MusicPlayer _Nonnull' name='inPlayer' type64='^{OpaqueMusicPlayer=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicPlayerSetPlayRateScalar'>
<arg declared_type64='MusicPlayer _Nonnull' name='inPlayer' type64='^{OpaqueMusicPlayer=}'/>
<arg declared_type64='Float64' name='inScaleRate' type64='d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicPlayerSetSequence'>
<arg declared_type64='MusicPlayer _Nonnull' name='inPlayer' type64='^{OpaqueMusicPlayer=}'/>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicPlayerSetTime'>
<arg declared_type64='MusicPlayer _Nonnull' name='inPlayer' type64='^{OpaqueMusicPlayer=}'/>
<arg declared_type64='MusicTimeStamp' name='inTime' type64='d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicPlayerStart'>
<arg declared_type64='MusicPlayer _Nonnull' name='inPlayer' type64='^{OpaqueMusicPlayer=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicPlayerStop'>
<arg declared_type64='MusicPlayer _Nonnull' name='inPlayer' type64='^{OpaqueMusicPlayer=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceBarBeatTimeToBeats'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg const='true' declared_type64='CABarBeatTime * _Nonnull' name='inBarBeatTime' type64='^{CABarBeatTime=iSSSS}'/>
<arg declared_type64='MusicTimeStamp * _Nonnull' name='outBeats' type64='^d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceBeatsToBarBeatTime'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='MusicTimeStamp' name='inBeats' type64='d'/>
<arg declared_type64='UInt32' name='inSubbeatDivisor' type64='I'/>
<arg declared_type64='CABarBeatTime * _Nonnull' name='outBarBeatTime' type64='^{CABarBeatTime=iSSSS}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceDisposeTrack'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceFileCreate'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='CFURLRef _Nonnull' name='inFileRef' type64='^{__CFURL=}'/>
<arg declared_type64='MusicSequenceFileTypeID' name='inFileType' type64='I'/>
<arg declared_type64='MusicSequenceFileFlags' name='inFlags' type64='I'/>
<arg declared_type64='SInt16' name='inResolution' type64='s'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceFileCreateData'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='MusicSequenceFileTypeID' name='inFileType' type64='I'/>
<arg declared_type64='MusicSequenceFileFlags' name='inFlags' type64='I'/>
<arg declared_type64='SInt16' name='inResolution' type64='s'/>
<arg declared_type64='CFDataRef _Nullable * _Nonnull' name='outData' type64='^^{__CFData}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceFileLoad'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='CFURLRef _Nonnull' name='inFileRef' type64='^{__CFURL=}'/>
<arg declared_type64='MusicSequenceFileTypeID' name='inFileTypeHint' type64='I'/>
<arg declared_type64='MusicSequenceLoadFlags' name='inFlags' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceFileLoadData'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='CFDataRef _Nonnull' name='inData' type64='^{__CFData=}'/>
<arg declared_type64='MusicSequenceFileTypeID' name='inFileTypeHint' type64='I'/>
<arg declared_type64='MusicSequenceLoadFlags' name='inFlags' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceGetAUGraph'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='AUGraph _Nullable * _Nonnull' name='outGraph' type64='^^{OpaqueAUGraph}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceGetBeatsForSeconds'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='Float64' name='inSeconds' type64='d'/>
<arg declared_type64='MusicTimeStamp * _Nonnull' name='outBeats' type64='^d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceGetIndTrack'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='UInt32' name='inTrackIndex' type64='I'/>
<arg declared_type64='MusicTrack _Nullable * _Nonnull' name='outTrack' type64='^^{OpaqueMusicTrack}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceGetInfoDictionary'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<retval declared_type64='CFDictionaryRef _Nonnull' type64='^{__CFDictionary=}'/>
</function>
<function inline='true' name='MusicSequenceGetSMPTEResolution'>
<arg declared_type64='SInt16' name='inRes' type64='s'/>
<arg declared_type64='SignedByte * _Nonnull' name='fps' type64='*'/>
<arg declared_type64='Byte * _Nonnull' name='ticks' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='MusicSequenceGetSecondsForBeats'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='MusicTimeStamp' name='inBeats' type64='d'/>
<arg declared_type64='Float64 * _Nonnull' name='outSeconds' type64='^d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceGetSequenceType'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='MusicSequenceType * _Nonnull' name='outType' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceGetTempoTrack'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='MusicTrack _Nullable * _Nonnull' name='outTrack' type64='^^{OpaqueMusicTrack}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceGetTrackCount'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='UInt32 * _Nonnull' name='outNumberOfTracks' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceGetTrackIndex'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='UInt32 * _Nonnull' name='outTrackIndex' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceLoadSMFDataWithFlags'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='CFDataRef _Nonnull' name='inData' type64='^{__CFData=}'/>
<arg declared_type64='MusicSequenceLoadFlags' name='inFlags' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceLoadSMFWithFlags'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg const='true' declared_type64='struct FSRef * _Nonnull' name='inFileRef' type64='^{FSRef=[80C]}'/>
<arg declared_type64='MusicSequenceLoadFlags' name='inFlags' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceNewTrack'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='MusicTrack _Nullable * _Nonnull' name='outTrack' type64='^^{OpaqueMusicTrack}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceReverse'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceSaveMIDIFile'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg const='true' declared_type64='struct FSRef * _Nonnull' name='inParentDirectory' type64='^{FSRef=[80C]}'/>
<arg declared_type64='CFStringRef _Nonnull' name='inFileName' type64='^{__CFString=}'/>
<arg declared_type64='UInt16' name='inResolution' type64='S'/>
<arg declared_type64='UInt32' name='inFlags' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceSaveSMFData'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='CFDataRef _Nullable * _Nonnull' name='outData' type64='^^{__CFData}'/>
<arg declared_type64='UInt16' name='inResolution' type64='S'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceSetAUGraph'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='AUGraph _Nullable' name='inGraph' type64='^{OpaqueAUGraph=}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceSetMIDIEndpoint'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='MIDIEndpointRef' name='inEndpoint' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function inline='true' name='MusicSequenceSetSMPTEResolution'>
<arg declared_type64='SignedByte' name='fps' type64='c'/>
<arg declared_type64='Byte' name='ticks' type64='C'/>
<retval declared_type64='SInt16' type64='s'/>
</function>
<function name='MusicSequenceSetSequenceType'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='MusicSequenceType' name='inType' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicSequenceSetUserCallback'>
<arg declared_type64='MusicSequence _Nonnull' name='inSequence' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='MusicSequenceUserCallback _Nullable' function_pointer='true' name='inCallback' type64='^?'>
<arg declared_type64='void * _Nullable' type64='^v'/>
<arg declared_type64='MusicSequence _Nonnull' type64='^{OpaqueMusicSequence=}'/>
<arg declared_type64='MusicTrack _Nonnull' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicTimeStamp' type64='d'/>
<arg const='true' declared_type64='MusicEventUserData * _Nonnull' type64='^{MusicEventUserData=I[1C]}'/>
<arg declared_type64='MusicTimeStamp' type64='d'/>
<arg declared_type64='MusicTimeStamp' type64='d'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='void * _Nullable' name='inClientData' type64='^v'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackClear'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicTimeStamp' name='inStartTime' type64='d'/>
<arg declared_type64='MusicTimeStamp' name='inEndTime' type64='d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackCopyInsert'>
<arg declared_type64='MusicTrack _Nonnull' name='inSourceTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicTimeStamp' name='inSourceStartTime' type64='d'/>
<arg declared_type64='MusicTimeStamp' name='inSourceEndTime' type64='d'/>
<arg declared_type64='MusicTrack _Nonnull' name='inDestTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicTimeStamp' name='inDestInsertTime' type64='d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackCut'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicTimeStamp' name='inStartTime' type64='d'/>
<arg declared_type64='MusicTimeStamp' name='inEndTime' type64='d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackGetDestMIDIEndpoint'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MIDIEndpointRef * _Nonnull' name='outEndpoint' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackGetDestNode'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='AUNode * _Nonnull' name='outNode' type64='^i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackGetProperty'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='UInt32' name='inPropertyID' type64='I'/>
<arg declared_type64='void * _Nonnull' name='outData' type64='^v'/>
<arg declared_type64='UInt32 * _Nonnull' name='ioLength' type64='^I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackGetSequence'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicSequence _Nullable * _Nonnull' name='outSequence' type64='^^{OpaqueMusicSequence}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackMerge'>
<arg declared_type64='MusicTrack _Nonnull' name='inSourceTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicTimeStamp' name='inSourceStartTime' type64='d'/>
<arg declared_type64='MusicTimeStamp' name='inSourceEndTime' type64='d'/>
<arg declared_type64='MusicTrack _Nonnull' name='inDestTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicTimeStamp' name='inDestInsertTime' type64='d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackMoveEvents'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicTimeStamp' name='inStartTime' type64='d'/>
<arg declared_type64='MusicTimeStamp' name='inEndTime' type64='d'/>
<arg declared_type64='MusicTimeStamp' name='inMoveTime' type64='d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackNewAUPresetEvent'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicTimeStamp' name='inTimeStamp' type64='d'/>
<arg const='true' declared_type64='AUPresetEvent * _Nonnull' name='inPresetEvent' type64='^{AUPresetEvent=II^v}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackNewExtendedControlEvent'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicTimeStamp' name='inTimeStamp' type64='d'/>
<arg const='true' declared_type64='ExtendedControlEvent * _Nonnull' name='inInfo' type64='^{ExtendedControlEvent=IIf}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackNewExtendedNoteEvent'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicTimeStamp' name='inTimeStamp' type64='d'/>
<arg const='true' declared_type64='ExtendedNoteOnEvent * _Nonnull' name='inInfo' type64='^{ExtendedNoteOnEvent=IIf{MusicDeviceNoteParams=Iff[1{NoteParamsControlValue=If}]}}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackNewExtendedTempoEvent'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicTimeStamp' name='inTimeStamp' type64='d'/>
<arg declared_type64='Float64' name='inBPM' type64='d'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackNewMIDIChannelEvent'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicTimeStamp' name='inTimeStamp' type64='d'/>
<arg const='true' declared_type64='MIDIChannelMessage * _Nonnull' name='inMessage' type64='^{MIDIChannelMessage=CCCC}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackNewMIDINoteEvent'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicTimeStamp' name='inTimeStamp' type64='d'/>
<arg const='true' declared_type64='MIDINoteMessage * _Nonnull' name='inMessage' type64='^{MIDINoteMessage=CCCCf}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackNewMIDIRawDataEvent'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicTimeStamp' name='inTimeStamp' type64='d'/>
<arg const='true' declared_type64='MIDIRawData * _Nonnull' name='inRawData' type64='^{MIDIRawData=I[1C]}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackNewMetaEvent'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicTimeStamp' name='inTimeStamp' type64='d'/>
<arg const='true' declared_type64='MIDIMetaEvent * _Nonnull' name='inMetaEvent' type64='^{MIDIMetaEvent=CCCCI[1C]}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackNewParameterEvent'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicTimeStamp' name='inTimeStamp' type64='d'/>
<arg const='true' declared_type64='ParameterEvent * _Nonnull' name='inInfo' type64='^{ParameterEvent=IIIf}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackNewUserEvent'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicTimeStamp' name='inTimeStamp' type64='d'/>
<arg const='true' declared_type64='MusicEventUserData * _Nonnull' name='inUserData' type64='^{MusicEventUserData=I[1C]}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackSetDestMIDIEndpoint'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MIDIEndpointRef' name='inEndpoint' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackSetDestNode'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='AUNode' name='inNode' type64='i'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='MusicTrackSetProperty'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='UInt32' name='inPropertyID' type64='I'/>
<arg declared_type64='void * _Nonnull' name='inData' type64='^v'/>
<arg declared_type64='UInt32' name='inLength' type64='I'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='NewAUGraph'>
<arg declared_type64='AUGraph _Nullable * _Nonnull' name='outGraph' type64='^^{OpaqueAUGraph}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='NewMusicEventIterator'>
<arg declared_type64='MusicTrack _Nonnull' name='inTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicEventIterator _Nullable * _Nonnull' name='outIterator' type64='^^{OpaqueMusicEventIterator}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='NewMusicPlayer'>
<arg declared_type64='MusicPlayer _Nullable * _Nonnull' name='outPlayer' type64='^^{OpaqueMusicPlayer}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='NewMusicSequence'>
<arg declared_type64='MusicSequence _Nullable * _Nonnull' name='outSequence' type64='^^{OpaqueMusicSequence}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function name='NewMusicTrackFrom'>
<arg declared_type64='MusicTrack _Nonnull' name='inSourceTrack' type64='^{OpaqueMusicTrack=}'/>
<arg declared_type64='MusicTimeStamp' name='inSourceStartTime' type64='d'/>
<arg declared_type64='MusicTimeStamp' name='inSourceEndTime' type64='d'/>
<arg declared_type64='MusicTrack _Nullable * _Nonnull' name='outNewTrack' type64='^^{OpaqueMusicTrack}'/>
<retval declared_type64='OSStatus' type64='i'/>
</function>
<function inline='true' name='NextAudioFileRegion'>
<arg const='true' declared_type64='AudioFileRegion * _Nonnull' name='inAFRegionPtr' type64='^{AudioFileRegion=I^{__CFString}II[1{AudioFileMarker=d^{__CFString}i{AudioFile_SMPTE_Time=cCCCI}ISS}]}'/>
<retval declared_type64='AudioFileRegion * _Nonnull' type64='^{AudioFileRegion=I^{__CFString}II[1{AudioFileMarker=d^{__CFString}i{AudioFile_SMPTE_Time=cCCCI}ISS}]}'/>
</function>
<function inline='true' name='NumAudioFileMarkersToNumBytes'>
<arg declared_type64='size_t' name='inNumMarkers' type64='Q'/>
<retval declared_type64='size_t' type64='Q'/>
</function>
<function inline='true' name='NumBytesToNumAudioFileMarkers'>
<arg declared_type64='size_t' name='inNumBytes' type64='Q'/>
<retval declared_type64='size_t' type64='Q'/>
</function>
</signatures>
