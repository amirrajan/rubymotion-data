<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/IOSurface.framework'/>
<depends_on path='/System/Library/Frameworks/IOKit.framework'/>
<depends_on path='/System/Library/Frameworks/Foundation.framework'/>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<struct name='MTLClearColor' type64='{_MTLClearColor=&quot;red&quot;d&quot;green&quot;d&quot;blue&quot;d&quot;alpha&quot;d}'>
<field declared_type64='double' name='red' type64='d'/>
<field declared_type64='double' name='green' type64='d'/>
<field declared_type64='double' name='blue' type64='d'/>
<field declared_type64='double' name='alpha' type64='d'/>
</struct>
<struct name='MTLDispatchThreadgroupsIndirectArguments' type64='{_MTLDispatchThreadgroupsIndirectArguments=&quot;threadgroupsPerGrid&quot;[3I]}'>
<field declared_type64='uint32_t*' name='threadgroupsPerGrid' type64='[3I]'/>
</struct>
<struct name='MTLDrawIndexedPrimitivesIndirectArguments' type64='{_MTLDrawIndexedPrimitivesIndirectArguments=&quot;indexCount&quot;I&quot;instanceCount&quot;I&quot;indexStart&quot;I&quot;baseVertex&quot;i&quot;baseInstance&quot;I}'>
<field declared_type64='uint32_t' name='indexCount' type64='I'/>
<field declared_type64='uint32_t' name='instanceCount' type64='I'/>
<field declared_type64='uint32_t' name='indexStart' type64='I'/>
<field declared_type64='int32_t' name='baseVertex' type64='i'/>
<field declared_type64='uint32_t' name='baseInstance' type64='I'/>
</struct>
<struct name='MTLDrawPrimitivesIndirectArguments' type64='{_MTLDrawPrimitivesIndirectArguments=&quot;vertexCount&quot;I&quot;instanceCount&quot;I&quot;vertexStart&quot;I&quot;baseInstance&quot;I}'>
<field declared_type64='uint32_t' name='vertexCount' type64='I'/>
<field declared_type64='uint32_t' name='instanceCount' type64='I'/>
<field declared_type64='uint32_t' name='vertexStart' type64='I'/>
<field declared_type64='uint32_t' name='baseInstance' type64='I'/>
</struct>
<struct name='MTLOrigin' type64='{_MTLOrigin=&quot;x&quot;Q&quot;y&quot;Q&quot;z&quot;Q}'>
<field declared_type64='NSUInteger' name='x' type64='Q'/>
<field declared_type64='NSUInteger' name='y' type64='Q'/>
<field declared_type64='NSUInteger' name='z' type64='Q'/>
</struct>
<struct name='MTLRegion' type64='{_MTLRegion=&quot;origin&quot;{_MTLOrigin=&quot;x&quot;Q&quot;y&quot;Q&quot;z&quot;Q}&quot;size&quot;{_MTLSize=&quot;width&quot;Q&quot;height&quot;Q&quot;depth&quot;Q}}'>
<field declared_type64='MTLOrigin' name='origin' type64='{_MTLOrigin=&quot;x&quot;Q&quot;y&quot;Q&quot;z&quot;Q}'/>
<field declared_type64='MTLSize' name='size' type64='{_MTLSize=&quot;width&quot;Q&quot;height&quot;Q&quot;depth&quot;Q}'/>
</struct>
<struct name='MTLScissorRect' type64='{_MTLScissorRect=&quot;x&quot;Q&quot;y&quot;Q&quot;width&quot;Q&quot;height&quot;Q}'>
<field declared_type64='NSUInteger' name='x' type64='Q'/>
<field declared_type64='NSUInteger' name='y' type64='Q'/>
<field declared_type64='NSUInteger' name='width' type64='Q'/>
<field declared_type64='NSUInteger' name='height' type64='Q'/>
</struct>
<struct name='MTLSize' type64='{_MTLSize=&quot;width&quot;Q&quot;height&quot;Q&quot;depth&quot;Q}'>
<field declared_type64='NSUInteger' name='width' type64='Q'/>
<field declared_type64='NSUInteger' name='height' type64='Q'/>
<field declared_type64='NSUInteger' name='depth' type64='Q'/>
</struct>
<struct name='MTLViewport' type64='{_MTLViewport=&quot;originX&quot;d&quot;originY&quot;d&quot;width&quot;d&quot;height&quot;d&quot;znear&quot;d&quot;zfar&quot;d}'>
<field declared_type64='double' name='originX' type64='d'/>
<field declared_type64='double' name='originY' type64='d'/>
<field declared_type64='double' name='width' type64='d'/>
<field declared_type64='double' name='height' type64='d'/>
<field declared_type64='double' name='znear' type64='d'/>
<field declared_type64='double' name='zfar' type64='d'/>
</struct>
<constant const='true' declared_type64='NSString * _Nonnull' name='MTLCommandBufferErrorDomain' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='MTLLibraryErrorDomain' type64='@'/>
<constant const='true' declared_type64='NSString * _Nonnull' name='MTLRenderPipelineErrorDomain' type64='@'/>
<enum name='MTLArgumentAccessReadOnly' value64='0'/>
<enum name='MTLArgumentAccessReadWrite' value64='1'/>
<enum name='MTLArgumentAccessWriteOnly' value64='2'/>
<enum name='MTLArgumentTypeBuffer' value64='0'/>
<enum name='MTLArgumentTypeSampler' value64='3'/>
<enum name='MTLArgumentTypeTexture' value64='2'/>
<enum name='MTLArgumentTypeThreadgroupMemory' value64='1'/>
<enum name='MTLBlendFactorBlendAlpha' value64='13'/>
<enum name='MTLBlendFactorBlendColor' value64='11'/>
<enum name='MTLBlendFactorDestinationAlpha' value64='8'/>
<enum name='MTLBlendFactorDestinationColor' value64='6'/>
<enum name='MTLBlendFactorOne' value64='1'/>
<enum name='MTLBlendFactorOneMinusBlendAlpha' value64='14'/>
<enum name='MTLBlendFactorOneMinusBlendColor' value64='12'/>
<enum name='MTLBlendFactorOneMinusDestinationAlpha' value64='9'/>
<enum name='MTLBlendFactorOneMinusDestinationColor' value64='7'/>
<enum name='MTLBlendFactorOneMinusSourceAlpha' value64='5'/>
<enum name='MTLBlendFactorOneMinusSourceColor' value64='3'/>
<enum name='MTLBlendFactorSourceAlpha' value64='4'/>
<enum name='MTLBlendFactorSourceAlphaSaturated' value64='10'/>
<enum name='MTLBlendFactorSourceColor' value64='2'/>
<enum name='MTLBlendFactorZero' value64='0'/>
<enum name='MTLBlendOperationAdd' value64='0'/>
<enum name='MTLBlendOperationMax' value64='4'/>
<enum name='MTLBlendOperationMin' value64='3'/>
<enum name='MTLBlendOperationReverseSubtract' value64='2'/>
<enum name='MTLBlendOperationSubtract' value64='1'/>
<enum name='MTLBlitOptionDepthFromDepthStencil' value64='1'/>
<enum name='MTLBlitOptionNone' value64='0'/>
<enum name='MTLBlitOptionRowLinearPVRTC' value64='4'/>
<enum name='MTLBlitOptionStencilFromDepthStencil' value64='2'/>
<enum name='MTLCPUCacheModeDefaultCache' value64='0'/>
<enum name='MTLCPUCacheModeWriteCombined' value64='1'/>
<enum name='MTLColorWriteMaskAll' value64='15'/>
<enum name='MTLColorWriteMaskAlpha' value64='1'/>
<enum name='MTLColorWriteMaskBlue' value64='2'/>
<enum name='MTLColorWriteMaskGreen' value64='4'/>
<enum name='MTLColorWriteMaskNone' value64='0'/>
<enum name='MTLColorWriteMaskRed' value64='8'/>
<enum name='MTLCommandBufferErrorBlacklisted' value64='4'/>
<enum name='MTLCommandBufferErrorInternal' value64='1'/>
<enum name='MTLCommandBufferErrorInvalidResource' value64='9'/>
<enum name='MTLCommandBufferErrorNone' value64='0'/>
<enum name='MTLCommandBufferErrorNotPermitted' value64='7'/>
<enum name='MTLCommandBufferErrorOutOfMemory' value64='8'/>
<enum name='MTLCommandBufferErrorPageFault' value64='3'/>
<enum name='MTLCommandBufferErrorTimeout' value64='2'/>
<enum name='MTLCommandBufferStatusCommitted' value64='2'/>
<enum name='MTLCommandBufferStatusCompleted' value64='4'/>
<enum name='MTLCommandBufferStatusEnqueued' value64='1'/>
<enum name='MTLCommandBufferStatusError' value64='5'/>
<enum name='MTLCommandBufferStatusNotEnqueued' value64='0'/>
<enum name='MTLCommandBufferStatusScheduled' value64='3'/>
<enum name='MTLCompareFunctionAlways' value64='7'/>
<enum name='MTLCompareFunctionEqual' value64='2'/>
<enum name='MTLCompareFunctionGreater' value64='4'/>
<enum name='MTLCompareFunctionGreaterEqual' value64='6'/>
<enum name='MTLCompareFunctionLess' value64='1'/>
<enum name='MTLCompareFunctionLessEqual' value64='3'/>
<enum name='MTLCompareFunctionNever' value64='0'/>
<enum name='MTLCompareFunctionNotEqual' value64='5'/>
<enum name='MTLCullModeBack' value64='2'/>
<enum name='MTLCullModeFront' value64='1'/>
<enum name='MTLCullModeNone' value64='0'/>
<enum name='MTLDataTypeArray' value64='2'/>
<enum name='MTLDataTypeBool' value64='53'/>
<enum name='MTLDataTypeBool2' value64='54'/>
<enum name='MTLDataTypeBool3' value64='55'/>
<enum name='MTLDataTypeBool4' value64='56'/>
<enum name='MTLDataTypeChar' value64='45'/>
<enum name='MTLDataTypeChar2' value64='46'/>
<enum name='MTLDataTypeChar3' value64='47'/>
<enum name='MTLDataTypeChar4' value64='48'/>
<enum name='MTLDataTypeFloat' value64='3'/>
<enum name='MTLDataTypeFloat2' value64='4'/>
<enum name='MTLDataTypeFloat2x2' value64='7'/>
<enum name='MTLDataTypeFloat2x3' value64='8'/>
<enum name='MTLDataTypeFloat2x4' value64='9'/>
<enum name='MTLDataTypeFloat3' value64='5'/>
<enum name='MTLDataTypeFloat3x2' value64='10'/>
<enum name='MTLDataTypeFloat3x3' value64='11'/>
<enum name='MTLDataTypeFloat3x4' value64='12'/>
<enum name='MTLDataTypeFloat4' value64='6'/>
<enum name='MTLDataTypeFloat4x2' value64='13'/>
<enum name='MTLDataTypeFloat4x3' value64='14'/>
<enum name='MTLDataTypeFloat4x4' value64='15'/>
<enum name='MTLDataTypeHalf' value64='16'/>
<enum name='MTLDataTypeHalf2' value64='17'/>
<enum name='MTLDataTypeHalf2x2' value64='20'/>
<enum name='MTLDataTypeHalf2x3' value64='21'/>
<enum name='MTLDataTypeHalf2x4' value64='22'/>
<enum name='MTLDataTypeHalf3' value64='18'/>
<enum name='MTLDataTypeHalf3x2' value64='23'/>
<enum name='MTLDataTypeHalf3x3' value64='24'/>
<enum name='MTLDataTypeHalf3x4' value64='25'/>
<enum name='MTLDataTypeHalf4' value64='19'/>
<enum name='MTLDataTypeHalf4x2' value64='26'/>
<enum name='MTLDataTypeHalf4x3' value64='27'/>
<enum name='MTLDataTypeHalf4x4' value64='28'/>
<enum name='MTLDataTypeInt' value64='29'/>
<enum name='MTLDataTypeInt2' value64='30'/>
<enum name='MTLDataTypeInt3' value64='31'/>
<enum name='MTLDataTypeInt4' value64='32'/>
<enum name='MTLDataTypeNone' value64='0'/>
<enum name='MTLDataTypeShort' value64='37'/>
<enum name='MTLDataTypeShort2' value64='38'/>
<enum name='MTLDataTypeShort3' value64='39'/>
<enum name='MTLDataTypeShort4' value64='40'/>
<enum name='MTLDataTypeStruct' value64='1'/>
<enum name='MTLDataTypeUChar' value64='49'/>
<enum name='MTLDataTypeUChar2' value64='50'/>
<enum name='MTLDataTypeUChar3' value64='51'/>
<enum name='MTLDataTypeUChar4' value64='52'/>
<enum name='MTLDataTypeUInt' value64='33'/>
<enum name='MTLDataTypeUInt2' value64='34'/>
<enum name='MTLDataTypeUInt3' value64='35'/>
<enum name='MTLDataTypeUInt4' value64='36'/>
<enum name='MTLDataTypeUShort' value64='41'/>
<enum name='MTLDataTypeUShort2' value64='42'/>
<enum name='MTLDataTypeUShort3' value64='43'/>
<enum name='MTLDataTypeUShort4' value64='44'/>
<enum name='MTLDepthClipModeClamp' value64='1'/>
<enum name='MTLDepthClipModeClip' value64='0'/>
<enum name='MTLFeatureSet_OSX_GPUFamily1_v1' value64='10000'/>
<enum name='MTLFeatureSet_iOS_GPUFamily1_v1' value64='0'/>
<enum name='MTLFeatureSet_iOS_GPUFamily1_v2' value64='2'/>
<enum name='MTLFeatureSet_iOS_GPUFamily2_v1' value64='1'/>
<enum name='MTLFeatureSet_iOS_GPUFamily2_v2' value64='3'/>
<enum name='MTLFunctionTypeFragment' value64='2'/>
<enum name='MTLFunctionTypeKernel' value64='3'/>
<enum name='MTLFunctionTypeVertex' value64='1'/>
<enum name='MTLIndexTypeUInt16' value64='0'/>
<enum name='MTLIndexTypeUInt32' value64='1'/>
<enum name='MTLLanguageVersion1_0' value64='65536'/>
<enum name='MTLLanguageVersion1_1' value64='65537'/>
<enum name='MTLLibraryErrorCompileFailure' value64='3'/>
<enum name='MTLLibraryErrorCompileWarning' value64='4'/>
<enum name='MTLLibraryErrorInternal' value64='2'/>
<enum name='MTLLibraryErrorUnsupported' value64='1'/>
<enum name='MTLLoadActionClear' value64='2'/>
<enum name='MTLLoadActionDontCare' value64='0'/>
<enum name='MTLLoadActionLoad' value64='1'/>
<enum name='MTLPipelineOptionArgumentInfo' value64='1'/>
<enum name='MTLPipelineOptionBufferTypeInfo' value64='2'/>
<enum name='MTLPipelineOptionNone' value64='0'/>
<enum name='MTLPixelFormatA1BGR5Unorm' value64='41'/>
<enum name='MTLPixelFormatA8Unorm' value64='1'/>
<enum name='MTLPixelFormatABGR4Unorm' value64='42'/>
<enum name='MTLPixelFormatASTC_10x10_LDR' value64='216'/>
<enum name='MTLPixelFormatASTC_10x10_sRGB' value64='198'/>
<enum name='MTLPixelFormatASTC_10x5_LDR' value64='213'/>
<enum name='MTLPixelFormatASTC_10x5_sRGB' value64='195'/>
<enum name='MTLPixelFormatASTC_10x6_LDR' value64='214'/>
<enum name='MTLPixelFormatASTC_10x6_sRGB' value64='196'/>
<enum name='MTLPixelFormatASTC_10x8_LDR' value64='215'/>
<enum name='MTLPixelFormatASTC_10x8_sRGB' value64='197'/>
<enum name='MTLPixelFormatASTC_12x10_LDR' value64='217'/>
<enum name='MTLPixelFormatASTC_12x10_sRGB' value64='199'/>
<enum name='MTLPixelFormatASTC_12x12_LDR' value64='218'/>
<enum name='MTLPixelFormatASTC_12x12_sRGB' value64='200'/>
<enum name='MTLPixelFormatASTC_4x4_LDR' value64='204'/>
<enum name='MTLPixelFormatASTC_4x4_sRGB' value64='186'/>
<enum name='MTLPixelFormatASTC_5x4_LDR' value64='205'/>
<enum name='MTLPixelFormatASTC_5x4_sRGB' value64='187'/>
<enum name='MTLPixelFormatASTC_5x5_LDR' value64='206'/>
<enum name='MTLPixelFormatASTC_5x5_sRGB' value64='188'/>
<enum name='MTLPixelFormatASTC_6x5_LDR' value64='207'/>
<enum name='MTLPixelFormatASTC_6x5_sRGB' value64='189'/>
<enum name='MTLPixelFormatASTC_6x6_LDR' value64='208'/>
<enum name='MTLPixelFormatASTC_6x6_sRGB' value64='190'/>
<enum name='MTLPixelFormatASTC_8x5_LDR' value64='210'/>
<enum name='MTLPixelFormatASTC_8x5_sRGB' value64='192'/>
<enum name='MTLPixelFormatASTC_8x6_LDR' value64='211'/>
<enum name='MTLPixelFormatASTC_8x6_sRGB' value64='193'/>
<enum name='MTLPixelFormatASTC_8x8_LDR' value64='212'/>
<enum name='MTLPixelFormatASTC_8x8_sRGB' value64='194'/>
<enum name='MTLPixelFormatB5G6R5Unorm' value64='40'/>
<enum name='MTLPixelFormatBC1_RGBA' value64='130'/>
<enum name='MTLPixelFormatBC1_RGBA_sRGB' value64='131'/>
<enum name='MTLPixelFormatBC2_RGBA' value64='132'/>
<enum name='MTLPixelFormatBC2_RGBA_sRGB' value64='133'/>
<enum name='MTLPixelFormatBC3_RGBA' value64='134'/>
<enum name='MTLPixelFormatBC3_RGBA_sRGB' value64='135'/>
<enum name='MTLPixelFormatBC4_RSnorm' value64='141'/>
<enum name='MTLPixelFormatBC4_RUnorm' value64='140'/>
<enum name='MTLPixelFormatBC5_RGSnorm' value64='143'/>
<enum name='MTLPixelFormatBC5_RGUnorm' value64='142'/>
<enum name='MTLPixelFormatBC6H_RGBFloat' value64='150'/>
<enum name='MTLPixelFormatBC6H_RGBUfloat' value64='151'/>
<enum name='MTLPixelFormatBC7_RGBAUnorm' value64='152'/>
<enum name='MTLPixelFormatBC7_RGBAUnorm_sRGB' value64='153'/>
<enum name='MTLPixelFormatBGR5A1Unorm' value64='43'/>
<enum name='MTLPixelFormatBGRA8Unorm' value64='80'/>
<enum name='MTLPixelFormatBGRA8Unorm_sRGB' value64='81'/>
<enum name='MTLPixelFormatBGRG422' value64='241'/>
<enum name='MTLPixelFormatDepth24Unorm_Stencil8' value64='255'/>
<enum name='MTLPixelFormatDepth32Float' value64='252'/>
<enum name='MTLPixelFormatDepth32Float_Stencil8' value64='260'/>
<enum name='MTLPixelFormatEAC_R11Snorm' value64='172'/>
<enum name='MTLPixelFormatEAC_R11Unorm' value64='170'/>
<enum name='MTLPixelFormatEAC_RG11Snorm' value64='176'/>
<enum name='MTLPixelFormatEAC_RG11Unorm' value64='174'/>
<enum name='MTLPixelFormatEAC_RGBA8' value64='178'/>
<enum name='MTLPixelFormatEAC_RGBA8_sRGB' value64='179'/>
<enum name='MTLPixelFormatETC2_RGB8' value64='180'/>
<enum name='MTLPixelFormatETC2_RGB8A1' value64='182'/>
<enum name='MTLPixelFormatETC2_RGB8A1_sRGB' value64='183'/>
<enum name='MTLPixelFormatETC2_RGB8_sRGB' value64='181'/>
<enum name='MTLPixelFormatGBGR422' value64='240'/>
<enum name='MTLPixelFormatInvalid' value64='0'/>
<enum name='MTLPixelFormatPVRTC_RGBA_2BPP' value64='164'/>
<enum name='MTLPixelFormatPVRTC_RGBA_2BPP_sRGB' value64='165'/>
<enum name='MTLPixelFormatPVRTC_RGBA_4BPP' value64='166'/>
<enum name='MTLPixelFormatPVRTC_RGBA_4BPP_sRGB' value64='167'/>
<enum name='MTLPixelFormatPVRTC_RGB_2BPP' value64='160'/>
<enum name='MTLPixelFormatPVRTC_RGB_2BPP_sRGB' value64='161'/>
<enum name='MTLPixelFormatPVRTC_RGB_4BPP' value64='162'/>
<enum name='MTLPixelFormatPVRTC_RGB_4BPP_sRGB' value64='163'/>
<enum name='MTLPixelFormatR16Float' value64='25'/>
<enum name='MTLPixelFormatR16Sint' value64='24'/>
<enum name='MTLPixelFormatR16Snorm' value64='22'/>
<enum name='MTLPixelFormatR16Uint' value64='23'/>
<enum name='MTLPixelFormatR16Unorm' value64='20'/>
<enum name='MTLPixelFormatR32Float' value64='55'/>
<enum name='MTLPixelFormatR32Sint' value64='54'/>
<enum name='MTLPixelFormatR32Uint' value64='53'/>
<enum name='MTLPixelFormatR8Sint' value64='14'/>
<enum name='MTLPixelFormatR8Snorm' value64='12'/>
<enum name='MTLPixelFormatR8Uint' value64='13'/>
<enum name='MTLPixelFormatR8Unorm' value64='10'/>
<enum name='MTLPixelFormatR8Unorm_sRGB' value64='11'/>
<enum name='MTLPixelFormatRG11B10Float' value64='92'/>
<enum name='MTLPixelFormatRG16Float' value64='65'/>
<enum name='MTLPixelFormatRG16Sint' value64='64'/>
<enum name='MTLPixelFormatRG16Snorm' value64='62'/>
<enum name='MTLPixelFormatRG16Uint' value64='63'/>
<enum name='MTLPixelFormatRG16Unorm' value64='60'/>
<enum name='MTLPixelFormatRG32Float' value64='105'/>
<enum name='MTLPixelFormatRG32Sint' value64='104'/>
<enum name='MTLPixelFormatRG32Uint' value64='103'/>
<enum name='MTLPixelFormatRG8Sint' value64='34'/>
<enum name='MTLPixelFormatRG8Snorm' value64='32'/>
<enum name='MTLPixelFormatRG8Uint' value64='33'/>
<enum name='MTLPixelFormatRG8Unorm' value64='30'/>
<enum name='MTLPixelFormatRG8Unorm_sRGB' value64='31'/>
<enum name='MTLPixelFormatRGB10A2Uint' value64='91'/>
<enum name='MTLPixelFormatRGB10A2Unorm' value64='90'/>
<enum name='MTLPixelFormatRGB9E5Float' value64='93'/>
<enum name='MTLPixelFormatRGBA16Float' value64='115'/>
<enum name='MTLPixelFormatRGBA16Sint' value64='114'/>
<enum name='MTLPixelFormatRGBA16Snorm' value64='112'/>
<enum name='MTLPixelFormatRGBA16Uint' value64='113'/>
<enum name='MTLPixelFormatRGBA16Unorm' value64='110'/>
<enum name='MTLPixelFormatRGBA32Float' value64='125'/>
<enum name='MTLPixelFormatRGBA32Sint' value64='124'/>
<enum name='MTLPixelFormatRGBA32Uint' value64='123'/>
<enum name='MTLPixelFormatRGBA8Sint' value64='74'/>
<enum name='MTLPixelFormatRGBA8Snorm' value64='72'/>
<enum name='MTLPixelFormatRGBA8Uint' value64='73'/>
<enum name='MTLPixelFormatRGBA8Unorm' value64='70'/>
<enum name='MTLPixelFormatRGBA8Unorm_sRGB' value64='71'/>
<enum name='MTLPixelFormatStencil8' value64='253'/>
<enum name='MTLPrimitiveTopologyClassLine' value64='2'/>
<enum name='MTLPrimitiveTopologyClassPoint' value64='1'/>
<enum name='MTLPrimitiveTopologyClassTriangle' value64='3'/>
<enum name='MTLPrimitiveTopologyClassUnspecified' value64='0'/>
<enum name='MTLPrimitiveTypeLine' value64='1'/>
<enum name='MTLPrimitiveTypeLineStrip' value64='2'/>
<enum name='MTLPrimitiveTypePoint' value64='0'/>
<enum name='MTLPrimitiveTypeTriangle' value64='3'/>
<enum name='MTLPrimitiveTypeTriangleStrip' value64='4'/>
<enum name='MTLPurgeableStateEmpty' value64='4'/>
<enum name='MTLPurgeableStateKeepCurrent' value64='1'/>
<enum name='MTLPurgeableStateNonVolatile' value64='2'/>
<enum name='MTLPurgeableStateVolatile' value64='3'/>
<enum name='MTLRenderPipelineErrorInternal' value64='1'/>
<enum name='MTLRenderPipelineErrorInvalidInput' value64='3'/>
<enum name='MTLRenderPipelineErrorUnsupported' value64='2'/>
<enum name='MTLResourceCPUCacheModeDefaultCache' value64='0'/>
<enum name='MTLResourceCPUCacheModeMask' value64='15'/>
<enum name='MTLResourceCPUCacheModeShift' value64='0'/>
<enum name='MTLResourceCPUCacheModeWriteCombined' value64='1'/>
<enum name='MTLResourceOptionCPUCacheModeDefault' value64='0'/>
<enum name='MTLResourceOptionCPUCacheModeWriteCombined' value64='1'/>
<enum name='MTLResourceStorageModeManaged' value64='16'/>
<enum name='MTLResourceStorageModeMask' value64='240'/>
<enum name='MTLResourceStorageModePrivate' value64='32'/>
<enum name='MTLResourceStorageModeShared' value64='0'/>
<enum name='MTLResourceStorageModeShift' value64='4'/>
<enum name='MTLSamplerAddressModeClampToEdge' value64='0'/>
<enum name='MTLSamplerAddressModeClampToZero' value64='4'/>
<enum name='MTLSamplerAddressModeMirrorClampToEdge' value64='1'/>
<enum name='MTLSamplerAddressModeMirrorRepeat' value64='3'/>
<enum name='MTLSamplerAddressModeRepeat' value64='2'/>
<enum name='MTLSamplerMinMagFilterLinear' value64='1'/>
<enum name='MTLSamplerMinMagFilterNearest' value64='0'/>
<enum name='MTLSamplerMipFilterLinear' value64='2'/>
<enum name='MTLSamplerMipFilterNearest' value64='1'/>
<enum name='MTLSamplerMipFilterNotMipmapped' value64='0'/>
<enum name='MTLStencilOperationDecrementClamp' value64='4'/>
<enum name='MTLStencilOperationDecrementWrap' value64='7'/>
<enum name='MTLStencilOperationIncrementClamp' value64='3'/>
<enum name='MTLStencilOperationIncrementWrap' value64='6'/>
<enum name='MTLStencilOperationInvert' value64='5'/>
<enum name='MTLStencilOperationKeep' value64='0'/>
<enum name='MTLStencilOperationReplace' value64='2'/>
<enum name='MTLStencilOperationZero' value64='1'/>
<enum name='MTLStorageModeManaged' value64='1'/>
<enum name='MTLStorageModePrivate' value64='2'/>
<enum name='MTLStorageModeShared' value64='0'/>
<enum name='MTLStoreActionDontCare' value64='0'/>
<enum name='MTLStoreActionMultisampleResolve' value64='2'/>
<enum name='MTLStoreActionStore' value64='1'/>
<enum name='MTLTextureType1D' value64='0'/>
<enum name='MTLTextureType1DArray' value64='1'/>
<enum name='MTLTextureType2D' value64='2'/>
<enum name='MTLTextureType2DArray' value64='3'/>
<enum name='MTLTextureType2DMultisample' value64='4'/>
<enum name='MTLTextureType3D' value64='7'/>
<enum name='MTLTextureTypeCube' value64='5'/>
<enum name='MTLTextureTypeCubeArray' value64='6'/>
<enum name='MTLTextureUsagePixelFormatView' value64='16'/>
<enum name='MTLTextureUsageRenderTarget' value64='4'/>
<enum name='MTLTextureUsageShaderRead' value64='1'/>
<enum name='MTLTextureUsageShaderWrite' value64='2'/>
<enum name='MTLTextureUsageUnknown' value64='0'/>
<enum name='MTLTriangleFillModeFill' value64='0'/>
<enum name='MTLTriangleFillModeLines' value64='1'/>
<enum name='MTLVertexFormatChar2' value64='4'/>
<enum name='MTLVertexFormatChar2Normalized' value64='10'/>
<enum name='MTLVertexFormatChar3' value64='5'/>
<enum name='MTLVertexFormatChar3Normalized' value64='11'/>
<enum name='MTLVertexFormatChar4' value64='6'/>
<enum name='MTLVertexFormatChar4Normalized' value64='12'/>
<enum name='MTLVertexFormatFloat' value64='28'/>
<enum name='MTLVertexFormatFloat2' value64='29'/>
<enum name='MTLVertexFormatFloat3' value64='30'/>
<enum name='MTLVertexFormatFloat4' value64='31'/>
<enum name='MTLVertexFormatHalf2' value64='25'/>
<enum name='MTLVertexFormatHalf3' value64='26'/>
<enum name='MTLVertexFormatHalf4' value64='27'/>
<enum name='MTLVertexFormatInt' value64='32'/>
<enum name='MTLVertexFormatInt1010102Normalized' value64='40'/>
<enum name='MTLVertexFormatInt2' value64='33'/>
<enum name='MTLVertexFormatInt3' value64='34'/>
<enum name='MTLVertexFormatInt4' value64='35'/>
<enum name='MTLVertexFormatInvalid' value64='0'/>
<enum name='MTLVertexFormatShort2' value64='16'/>
<enum name='MTLVertexFormatShort2Normalized' value64='22'/>
<enum name='MTLVertexFormatShort3' value64='17'/>
<enum name='MTLVertexFormatShort3Normalized' value64='23'/>
<enum name='MTLVertexFormatShort4' value64='18'/>
<enum name='MTLVertexFormatShort4Normalized' value64='24'/>
<enum name='MTLVertexFormatUChar2' value64='1'/>
<enum name='MTLVertexFormatUChar2Normalized' value64='7'/>
<enum name='MTLVertexFormatUChar3' value64='2'/>
<enum name='MTLVertexFormatUChar3Normalized' value64='8'/>
<enum name='MTLVertexFormatUChar4' value64='3'/>
<enum name='MTLVertexFormatUChar4Normalized' value64='9'/>
<enum name='MTLVertexFormatUInt' value64='36'/>
<enum name='MTLVertexFormatUInt1010102Normalized' value64='41'/>
<enum name='MTLVertexFormatUInt2' value64='37'/>
<enum name='MTLVertexFormatUInt3' value64='38'/>
<enum name='MTLVertexFormatUInt4' value64='39'/>
<enum name='MTLVertexFormatUShort2' value64='13'/>
<enum name='MTLVertexFormatUShort2Normalized' value64='19'/>
<enum name='MTLVertexFormatUShort3' value64='14'/>
<enum name='MTLVertexFormatUShort3Normalized' value64='20'/>
<enum name='MTLVertexFormatUShort4' value64='15'/>
<enum name='MTLVertexFormatUShort4Normalized' value64='21'/>
<enum name='MTLVertexStepFunctionConstant' value64='0'/>
<enum name='MTLVertexStepFunctionPerInstance' value64='2'/>
<enum name='MTLVertexStepFunctionPerVertex' value64='1'/>
<enum name='MTLVisibilityResultModeBoolean' value64='1'/>
<enum name='MTLVisibilityResultModeCounting' value64='2'/>
<enum name='MTLVisibilityResultModeDisabled' value64='0'/>
<enum name='MTLWindingClockwise' value64='0'/>
<enum name='MTLWindingCounterClockwise' value64='1'/>
<function inline='true' name='MTLClearColorMake'>
<arg declared_type64='double' name='red' type64='d'/>
<arg declared_type64='double' name='green' type64='d'/>
<arg declared_type64='double' name='blue' type64='d'/>
<arg declared_type64='double' name='alpha' type64='d'/>
<retval declared_type64='MTLClearColor' type64='{_MTLClearColor=dddd}'/>
</function>
<function name='MTLCopyAllDevices'>
<retval declared_type64='NSArray&gt; * _Nonnull' type64='@'/>
</function>
<function name='MTLCreateSystemDefaultDevice'>
<retval declared_type64='id _Nullable' type64='@'/>
</function>
<function inline='true' name='MTLOriginMake'>
<arg declared_type64='NSUInteger' name='x' type64='Q'/>
<arg declared_type64='NSUInteger' name='y' type64='Q'/>
<arg declared_type64='NSUInteger' name='z' type64='Q'/>
<retval declared_type64='MTLOrigin' type64='{_MTLOrigin=QQQ}'/>
</function>
<function inline='true' name='MTLRegionMake1D'>
<arg declared_type64='NSUInteger' name='x' type64='Q'/>
<arg declared_type64='NSUInteger' name='width' type64='Q'/>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={_MTLOrigin=QQQ}{_MTLSize=QQQ}}'/>
</function>
<function inline='true' name='MTLRegionMake2D'>
<arg declared_type64='NSUInteger' name='x' type64='Q'/>
<arg declared_type64='NSUInteger' name='y' type64='Q'/>
<arg declared_type64='NSUInteger' name='width' type64='Q'/>
<arg declared_type64='NSUInteger' name='height' type64='Q'/>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={_MTLOrigin=QQQ}{_MTLSize=QQQ}}'/>
</function>
<function inline='true' name='MTLRegionMake3D'>
<arg declared_type64='NSUInteger' name='x' type64='Q'/>
<arg declared_type64='NSUInteger' name='y' type64='Q'/>
<arg declared_type64='NSUInteger' name='z' type64='Q'/>
<arg declared_type64='NSUInteger' name='width' type64='Q'/>
<arg declared_type64='NSUInteger' name='height' type64='Q'/>
<arg declared_type64='NSUInteger' name='depth' type64='Q'/>
<retval declared_type64='MTLRegion' type64='{_MTLRegion={_MTLOrigin=QQQ}{_MTLSize=QQQ}}'/>
</function>
<function inline='true' name='MTLSizeMake'>
<arg declared_type64='NSUInteger' name='width' type64='Q'/>
<arg declared_type64='NSUInteger' name='height' type64='Q'/>
<arg declared_type64='NSUInteger' name='depth' type64='Q'/>
<retval declared_type64='MTLSize' type64='{_MTLSize=QQQ}'/>
</function>
<class name='MTLArgument'>
<method selector='access'>
<retval declared_type64='MTLArgumentAccess' type64='Q'/>
</method>
<method selector='bufferAlignment'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='bufferDataSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='bufferDataType'>
<retval declared_type64='MTLDataType' type64='Q'/>
</method>
<method selector='bufferStructType'>
<retval declared_type64='MTLStructType * _Nonnull' type64='@'/>
</method>
<method selector='index'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='isActive'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='name'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method selector='textureDataType'>
<retval declared_type64='MTLDataType' type64='Q'/>
</method>
<method selector='textureType'>
<retval declared_type64='MTLTextureType' type64='Q'/>
</method>
<method selector='threadgroupMemoryAlignment'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='threadgroupMemoryDataSize'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='type'>
<retval declared_type64='MTLArgumentType' type64='Q'/>
</method>
</class>
<class name='MTLArrayType'>
<method selector='arrayLength'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='elementArrayType'>
<retval declared_type64='MTLArrayType * _Nullable' type64='@'/>
</method>
<method selector='elementStructType'>
<retval declared_type64='MTLStructType * _Nullable' type64='@'/>
</method>
<method selector='elementType'>
<retval declared_type64='MTLDataType' type64='Q'/>
</method>
<method selector='stride'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MTLCompileOptions'>
<method selector='fastMathEnabled'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='languageVersion'>
<retval declared_type64='MTLLanguageVersion' type64='Q'/>
</method>
<method selector='preprocessorMacros'>
<retval declared_type64='NSDictionary * _Nullable' type64='@'/>
</method>
<method selector='setFastMathEnabled:'>
<arg declared_type64='BOOL' index='0' name='fastMathEnabled' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLanguageVersion:'>
<arg declared_type64='MTLLanguageVersion' index='0' name='languageVersion' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPreprocessorMacros:'>
<arg declared_type64='NSDictionary * _Nullable' index='0' name='preprocessorMacros' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MTLComputePipelineDescriptor'>
<method selector='computeFunction'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='label'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='reset'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setComputeFunction:'>
<arg declared_type64='id _Nullable' index='0' name='computeFunction' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLabel:'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setThreadGroupSizeIsMultipleOfThreadExecutionWidth:'>
<arg declared_type64='BOOL' index='0' name='threadGroupSizeIsMultipleOfThreadExecutionWidth' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='threadGroupSizeIsMultipleOfThreadExecutionWidth'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='MTLComputePipelineReflection'>
<method selector='arguments'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
</class>
<class name='MTLDepthStencilDescriptor'>
<method selector='backFaceStencil'>
<retval declared_type64='MTLStencilDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='depthCompareFunction'>
<retval declared_type64='MTLCompareFunction' type64='Q'/>
</method>
<method selector='frontFaceStencil'>
<retval declared_type64='MTLStencilDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='isDepthWriteEnabled'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='label'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='setBackFaceStencil:'>
<arg declared_type64='MTLStencilDescriptor * _Nullable' index='0' name='backFaceStencil' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDepthCompareFunction:'>
<arg declared_type64='MTLCompareFunction' index='0' name='depthCompareFunction' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDepthWriteEnabled:'>
<arg declared_type64='BOOL' index='0' name='depthWriteEnabled' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFrontFaceStencil:'>
<arg declared_type64='MTLStencilDescriptor * _Nullable' index='0' name='frontFaceStencil' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLabel:'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MTLRenderPassAttachmentDescriptor'>
<method selector='depthPlane'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='level'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='loadAction'>
<retval declared_type64='MTLLoadAction' type64='Q'/>
</method>
<method selector='resolveDepthPlane'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='resolveLevel'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='resolveSlice'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='resolveTexture'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='setDepthPlane:'>
<arg declared_type64='NSUInteger' index='0' name='depthPlane' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLevel:'>
<arg declared_type64='NSUInteger' index='0' name='level' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLoadAction:'>
<arg declared_type64='MTLLoadAction' index='0' name='loadAction' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setResolveDepthPlane:'>
<arg declared_type64='NSUInteger' index='0' name='resolveDepthPlane' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setResolveLevel:'>
<arg declared_type64='NSUInteger' index='0' name='resolveLevel' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setResolveSlice:'>
<arg declared_type64='NSUInteger' index='0' name='resolveSlice' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setResolveTexture:'>
<arg declared_type64='id _Nullable' index='0' name='resolveTexture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSlice:'>
<arg declared_type64='NSUInteger' index='0' name='slice' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStoreAction:'>
<arg declared_type64='MTLStoreAction' index='0' name='storeAction' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTexture:'>
<arg declared_type64='id _Nullable' index='0' name='texture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='slice'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='storeAction'>
<retval declared_type64='MTLStoreAction' type64='Q'/>
</method>
<method selector='texture'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
</class>
<class name='MTLRenderPassColorAttachmentDescriptor'>
<method selector='clearColor'>
<retval declared_type64='MTLClearColor' type64='{_MTLClearColor=dddd}'/>
</method>
<method selector='setClearColor:'>
<arg declared_type64='MTLClearColor' index='0' name='clearColor' type64='{_MTLClearColor=dddd}'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MTLRenderPassColorAttachmentDescriptorArray'>
<method selector='objectAtIndexedSubscript:'>
<arg declared_type64='NSUInteger' index='0' name='attachmentIndex' type64='Q'/>
<retval declared_type64='MTLRenderPassColorAttachmentDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='setObject:atIndexedSubscript:'>
<arg declared_type64='MTLRenderPassColorAttachmentDescriptor * _Nullable' index='0' name='attachment' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='attachmentIndex' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MTLRenderPassDepthAttachmentDescriptor'>
<method selector='clearDepth'>
<retval declared_type64='double' type64='d'/>
</method>
<method selector='setClearDepth:'>
<arg declared_type64='double' index='0' name='clearDepth' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MTLRenderPassDescriptor'>
<method selector='colorAttachments'>
<retval declared_type64='MTLRenderPassColorAttachmentDescriptorArray * _Nonnull' type64='@'/>
</method>
<method selector='depthAttachment'>
<retval declared_type64='MTLRenderPassDepthAttachmentDescriptor * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='renderPassDescriptor'>
<retval declared_type64='MTLRenderPassDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='renderTargetArrayLength'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setDepthAttachment:'>
<arg declared_type64='MTLRenderPassDepthAttachmentDescriptor * _Nullable' index='0' name='depthAttachment' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRenderTargetArrayLength:'>
<arg declared_type64='NSUInteger' index='0' name='renderTargetArrayLength' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStencilAttachment:'>
<arg declared_type64='MTLRenderPassStencilAttachmentDescriptor * _Nullable' index='0' name='stencilAttachment' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVisibilityResultBuffer:'>
<arg declared_type64='id _Nullable' index='0' name='visibilityResultBuffer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='stencilAttachment'>
<retval declared_type64='MTLRenderPassStencilAttachmentDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='visibilityResultBuffer'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
</class>
<class name='MTLRenderPassStencilAttachmentDescriptor'>
<method selector='clearStencil'>
<retval declared_type64='uint32_t' type64='I'/>
</method>
<method selector='setClearStencil:'>
<arg declared_type64='uint32_t' index='0' name='clearStencil' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MTLRenderPipelineColorAttachmentDescriptor'>
<method selector='alphaBlendOperation'>
<retval declared_type64='MTLBlendOperation' type64='Q'/>
</method>
<method selector='destinationAlphaBlendFactor'>
<retval declared_type64='MTLBlendFactor' type64='Q'/>
</method>
<method selector='destinationRGBBlendFactor'>
<retval declared_type64='MTLBlendFactor' type64='Q'/>
</method>
<method selector='isBlendingEnabled'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='pixelFormat'>
<retval declared_type64='MTLPixelFormat' type64='Q'/>
</method>
<method selector='rgbBlendOperation'>
<retval declared_type64='MTLBlendOperation' type64='Q'/>
</method>
<method selector='setAlphaBlendOperation:'>
<arg declared_type64='MTLBlendOperation' index='0' name='alphaBlendOperation' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBlendingEnabled:'>
<arg declared_type64='BOOL' index='0' name='blendingEnabled' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDestinationAlphaBlendFactor:'>
<arg declared_type64='MTLBlendFactor' index='0' name='destinationAlphaBlendFactor' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDestinationRGBBlendFactor:'>
<arg declared_type64='MTLBlendFactor' index='0' name='destinationRGBBlendFactor' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPixelFormat:'>
<arg declared_type64='MTLPixelFormat' index='0' name='pixelFormat' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRgbBlendOperation:'>
<arg declared_type64='MTLBlendOperation' index='0' name='rgbBlendOperation' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceAlphaBlendFactor:'>
<arg declared_type64='MTLBlendFactor' index='0' name='sourceAlphaBlendFactor' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSourceRGBBlendFactor:'>
<arg declared_type64='MTLBlendFactor' index='0' name='sourceRGBBlendFactor' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setWriteMask:'>
<arg declared_type64='MTLColorWriteMask' index='0' name='writeMask' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sourceAlphaBlendFactor'>
<retval declared_type64='MTLBlendFactor' type64='Q'/>
</method>
<method selector='sourceRGBBlendFactor'>
<retval declared_type64='MTLBlendFactor' type64='Q'/>
</method>
<method selector='writeMask'>
<retval declared_type64='MTLColorWriteMask' type64='Q'/>
</method>
</class>
<class name='MTLRenderPipelineColorAttachmentDescriptorArray'>
<method selector='objectAtIndexedSubscript:'>
<arg declared_type64='NSUInteger' index='0' name='attachmentIndex' type64='Q'/>
<retval declared_type64='MTLRenderPipelineColorAttachmentDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='setObject:atIndexedSubscript:'>
<arg declared_type64='MTLRenderPipelineColorAttachmentDescriptor * _Nullable' index='0' name='attachment' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='attachmentIndex' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MTLRenderPipelineDescriptor'>
<method selector='colorAttachments'>
<retval declared_type64='MTLRenderPipelineColorAttachmentDescriptorArray * _Nonnull' type64='@'/>
</method>
<method selector='depthAttachmentPixelFormat'>
<retval declared_type64='MTLPixelFormat' type64='Q'/>
</method>
<method selector='fragmentFunction'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='inputPrimitiveTopology'>
<retval declared_type64='MTLPrimitiveTopologyClass' type64='Q'/>
</method>
<method selector='isAlphaToCoverageEnabled'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isAlphaToOneEnabled'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isRasterizationEnabled'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='label'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='reset'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sampleCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setAlphaToCoverageEnabled:'>
<arg declared_type64='BOOL' index='0' name='alphaToCoverageEnabled' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setAlphaToOneEnabled:'>
<arg declared_type64='BOOL' index='0' name='alphaToOneEnabled' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDepthAttachmentPixelFormat:'>
<arg declared_type64='MTLPixelFormat' index='0' name='depthAttachmentPixelFormat' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentFunction:'>
<arg declared_type64='id _Nullable' index='0' name='fragmentFunction' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setInputPrimitiveTopology:'>
<arg declared_type64='MTLPrimitiveTopologyClass' index='0' name='inputPrimitiveTopology' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLabel:'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRasterizationEnabled:'>
<arg declared_type64='BOOL' index='0' name='rasterizationEnabled' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSampleCount:'>
<arg declared_type64='NSUInteger' index='0' name='sampleCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStencilAttachmentPixelFormat:'>
<arg declared_type64='MTLPixelFormat' index='0' name='stencilAttachmentPixelFormat' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexDescriptor:'>
<arg declared_type64='MTLVertexDescriptor * _Nullable' index='0' name='vertexDescriptor' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexFunction:'>
<arg declared_type64='id _Nullable' index='0' name='vertexFunction' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='stencilAttachmentPixelFormat'>
<retval declared_type64='MTLPixelFormat' type64='Q'/>
</method>
<method selector='vertexDescriptor'>
<retval declared_type64='MTLVertexDescriptor * _Nullable' type64='@'/>
</method>
<method selector='vertexFunction'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
</class>
<class name='MTLRenderPipelineReflection'>
<method selector='fragmentArguments'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='vertexArguments'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
</class>
<class name='MTLSamplerDescriptor'>
<method selector='compareFunction'>
<retval declared_type64='MTLCompareFunction' type64='Q'/>
</method>
<method selector='label'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='lodMaxClamp'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='lodMinClamp'>
<retval declared_type64='float' type64='f'/>
</method>
<method selector='magFilter'>
<retval declared_type64='MTLSamplerMinMagFilter' type64='Q'/>
</method>
<method selector='maxAnisotropy'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='minFilter'>
<retval declared_type64='MTLSamplerMinMagFilter' type64='Q'/>
</method>
<method selector='mipFilter'>
<retval declared_type64='MTLSamplerMipFilter' type64='Q'/>
</method>
<method selector='normalizedCoordinates'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='rAddressMode'>
<retval declared_type64='MTLSamplerAddressMode' type64='Q'/>
</method>
<method selector='sAddressMode'>
<retval declared_type64='MTLSamplerAddressMode' type64='Q'/>
</method>
<method selector='setCompareFunction:'>
<arg declared_type64='MTLCompareFunction' index='0' name='compareFunction' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLabel:'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLodMaxClamp:'>
<arg declared_type64='float' index='0' name='lodMaxClamp' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLodMinClamp:'>
<arg declared_type64='float' index='0' name='lodMinClamp' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMagFilter:'>
<arg declared_type64='MTLSamplerMinMagFilter' index='0' name='magFilter' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMaxAnisotropy:'>
<arg declared_type64='NSUInteger' index='0' name='maxAnisotropy' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMinFilter:'>
<arg declared_type64='MTLSamplerMinMagFilter' index='0' name='minFilter' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMipFilter:'>
<arg declared_type64='MTLSamplerMipFilter' index='0' name='mipFilter' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNormalizedCoordinates:'>
<arg declared_type64='BOOL' index='0' name='normalizedCoordinates' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRAddressMode:'>
<arg declared_type64='MTLSamplerAddressMode' index='0' name='rAddressMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSAddressMode:'>
<arg declared_type64='MTLSamplerAddressMode' index='0' name='sAddressMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTAddressMode:'>
<arg declared_type64='MTLSamplerAddressMode' index='0' name='tAddressMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='tAddressMode'>
<retval declared_type64='MTLSamplerAddressMode' type64='Q'/>
</method>
</class>
<class name='MTLStencilDescriptor'>
<method selector='depthFailureOperation'>
<retval declared_type64='MTLStencilOperation' type64='Q'/>
</method>
<method selector='depthStencilPassOperation'>
<retval declared_type64='MTLStencilOperation' type64='Q'/>
</method>
<method selector='readMask'>
<retval declared_type64='uint32_t' type64='I'/>
</method>
<method selector='setDepthFailureOperation:'>
<arg declared_type64='MTLStencilOperation' index='0' name='depthFailureOperation' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDepthStencilPassOperation:'>
<arg declared_type64='MTLStencilOperation' index='0' name='depthStencilPassOperation' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setReadMask:'>
<arg declared_type64='uint32_t' index='0' name='readMask' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStencilCompareFunction:'>
<arg declared_type64='MTLCompareFunction' index='0' name='stencilCompareFunction' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStencilFailureOperation:'>
<arg declared_type64='MTLStencilOperation' index='0' name='stencilFailureOperation' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setWriteMask:'>
<arg declared_type64='uint32_t' index='0' name='writeMask' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='stencilCompareFunction'>
<retval declared_type64='MTLCompareFunction' type64='Q'/>
</method>
<method selector='stencilFailureOperation'>
<retval declared_type64='MTLStencilOperation' type64='Q'/>
</method>
<method selector='writeMask'>
<retval declared_type64='uint32_t' type64='I'/>
</method>
</class>
<class name='MTLStructMember'>
<method selector='arrayType'>
<retval declared_type64='MTLArrayType * _Nullable' type64='@'/>
</method>
<method selector='dataType'>
<retval declared_type64='MTLDataType' type64='Q'/>
</method>
<method selector='name'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method selector='offset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='structType'>
<retval declared_type64='MTLStructType * _Nullable' type64='@'/>
</method>
</class>
<class name='MTLStructType'>
<method selector='memberByName:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='name' type64='@'/>
<retval declared_type64='MTLStructMember * _Nullable' type64='@'/>
</method>
<method selector='members'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
</class>
<class name='MTLTextureDescriptor'>
<method selector='arrayLength'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='cpuCacheMode'>
<retval declared_type64='MTLCPUCacheMode' type64='Q'/>
</method>
<method selector='depth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='height'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='mipmapLevelCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='pixelFormat'>
<retval declared_type64='MTLPixelFormat' type64='Q'/>
</method>
<method selector='resourceOptions'>
<retval declared_type64='MTLResourceOptions' type64='Q'/>
</method>
<method selector='sampleCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setArrayLength:'>
<arg declared_type64='NSUInteger' index='0' name='arrayLength' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCpuCacheMode:'>
<arg declared_type64='MTLCPUCacheMode' index='0' name='cpuCacheMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDepth:'>
<arg declared_type64='NSUInteger' index='0' name='depth' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setHeight:'>
<arg declared_type64='NSUInteger' index='0' name='height' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMipmapLevelCount:'>
<arg declared_type64='NSUInteger' index='0' name='mipmapLevelCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPixelFormat:'>
<arg declared_type64='MTLPixelFormat' index='0' name='pixelFormat' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setResourceOptions:'>
<arg declared_type64='MTLResourceOptions' index='0' name='resourceOptions' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSampleCount:'>
<arg declared_type64='NSUInteger' index='0' name='sampleCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStorageMode:'>
<arg declared_type64='MTLStorageMode' index='0' name='storageMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTextureType:'>
<arg declared_type64='MTLTextureType' index='0' name='textureType' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUsage:'>
<arg declared_type64='MTLTextureUsage' index='0' name='usage' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setWidth:'>
<arg declared_type64='NSUInteger' index='0' name='width' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='storageMode'>
<retval declared_type64='MTLStorageMode' type64='Q'/>
</method>
<method class_method='true' selector='texture2DDescriptorWithPixelFormat:width:height:mipmapped:'>
<arg declared_type64='MTLPixelFormat' index='0' name='pixelFormat' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='width' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='height' type64='Q'/>
<arg declared_type64='BOOL' index='3' name='mipmapped' type64='B'/>
<retval declared_type64='MTLTextureDescriptor * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='textureCubeDescriptorWithPixelFormat:size:mipmapped:'>
<arg declared_type64='MTLPixelFormat' index='0' name='pixelFormat' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='size' type64='Q'/>
<arg declared_type64='BOOL' index='2' name='mipmapped' type64='B'/>
<retval declared_type64='MTLTextureDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='textureType'>
<retval declared_type64='MTLTextureType' type64='Q'/>
</method>
<method selector='usage'>
<retval declared_type64='MTLTextureUsage' type64='Q'/>
</method>
<method selector='width'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MTLVertexAttribute'>
<method selector='attributeIndex'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='attributeType'>
<retval declared_type64='MTLDataType' type64='Q'/>
</method>
<method selector='isActive'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='name'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
</class>
<class name='MTLVertexAttributeDescriptor'>
<method selector='bufferIndex'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='format'>
<retval declared_type64='MTLVertexFormat' type64='Q'/>
</method>
<method selector='offset'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setBufferIndex:'>
<arg declared_type64='NSUInteger' index='0' name='bufferIndex' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFormat:'>
<arg declared_type64='MTLVertexFormat' index='0' name='format' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setOffset:'>
<arg declared_type64='NSUInteger' index='0' name='offset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MTLVertexAttributeDescriptorArray'>
<method selector='objectAtIndexedSubscript:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<retval declared_type64='MTLVertexAttributeDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='setObject:atIndexedSubscript:'>
<arg declared_type64='MTLVertexAttributeDescriptor * _Nullable' index='0' name='attributeDesc' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MTLVertexBufferLayoutDescriptor'>
<method selector='setStepFunction:'>
<arg declared_type64='MTLVertexStepFunction' index='0' name='stepFunction' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStepRate:'>
<arg declared_type64='NSUInteger' index='0' name='stepRate' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStride:'>
<arg declared_type64='NSUInteger' index='0' name='stride' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='stepFunction'>
<retval declared_type64='MTLVertexStepFunction' type64='Q'/>
</method>
<method selector='stepRate'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='stride'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<class name='MTLVertexBufferLayoutDescriptorArray'>
<method selector='objectAtIndexedSubscript:'>
<arg declared_type64='NSUInteger' index='0' name='index' type64='Q'/>
<retval declared_type64='MTLVertexBufferLayoutDescriptor * _Nonnull' type64='@'/>
</method>
<method selector='setObject:atIndexedSubscript:'>
<arg declared_type64='MTLVertexBufferLayoutDescriptor * _Nullable' index='0' name='bufferDesc' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='MTLVertexDescriptor'>
<method selector='attributes'>
<retval declared_type64='MTLVertexAttributeDescriptorArray * _Nonnull' type64='@'/>
</method>
<method selector='layouts'>
<retval declared_type64='MTLVertexBufferLayoutDescriptorArray * _Nonnull' type64='@'/>
</method>
<method selector='reset'>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='vertexDescriptor'>
<retval declared_type64='MTLVertexDescriptor * _Nonnull' type64='@'/>
</method>
</class>
<class name='NSObject'>
<method selector='addCompletedHandler:'>
<arg declared_type64='MTLCommandBufferHandler _Nonnull' function_pointer='true' index='0' name='block' type64='@?'>
<arg declared_type64='id _Nonnull' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='addScheduledHandler:'>
<arg declared_type64='MTLCommandBufferHandler _Nonnull' function_pointer='true' index='0' name='block' type64='@?'>
<arg declared_type64='id _Nonnull' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='arrayLength'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='blitCommandEncoder'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='commandBuffer'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='commandBufferWithUnretainedReferences'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='commandQueue'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='commit'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='computeCommandEncoder'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='contents'>
<retval declared_type64='void * _Nonnull' type64='^v'/>
</method>
<method selector='copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:'>
<arg declared_type64='id _Nonnull' index='0' name='sourceBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='sourceOffset' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='sourceBytesPerRow' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='sourceBytesPerImage' type64='Q'/>
<arg declared_type64='MTLSize' index='4' name='sourceSize' type64='{_MTLSize=QQQ}'/>
<arg declared_type64='id _Nonnull' index='5' name='destinationTexture' type64='@'/>
<arg declared_type64='NSUInteger' index='6' name='destinationSlice' type64='Q'/>
<arg declared_type64='NSUInteger' index='7' name='destinationLevel' type64='Q'/>
<arg declared_type64='MTLOrigin' index='8' name='destinationOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:'>
<arg declared_type64='id _Nonnull' index='0' name='sourceBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='sourceOffset' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='sourceBytesPerRow' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='sourceBytesPerImage' type64='Q'/>
<arg declared_type64='MTLSize' index='4' name='sourceSize' type64='{_MTLSize=QQQ}'/>
<arg declared_type64='id _Nonnull' index='5' name='destinationTexture' type64='@'/>
<arg declared_type64='NSUInteger' index='6' name='destinationSlice' type64='Q'/>
<arg declared_type64='NSUInteger' index='7' name='destinationLevel' type64='Q'/>
<arg declared_type64='MTLOrigin' index='8' name='destinationOrigin' type64='{_MTLOrigin=QQQ}'/>
<arg declared_type64='MTLBlitOption' index='9' name='options' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:'>
<arg declared_type64='id _Nonnull' index='0' name='sourceBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='sourceOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='2' name='destinationBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='destinationOffset' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='size' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:'>
<arg declared_type64='id _Nonnull' index='0' name='sourceTexture' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='sourceSlice' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='sourceLevel' type64='Q'/>
<arg declared_type64='MTLOrigin' index='3' name='sourceOrigin' type64='{_MTLOrigin=QQQ}'/>
<arg declared_type64='MTLSize' index='4' name='sourceSize' type64='{_MTLSize=QQQ}'/>
<arg declared_type64='id _Nonnull' index='5' name='destinationBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='6' name='destinationOffset' type64='Q'/>
<arg declared_type64='NSUInteger' index='7' name='destinationBytesPerRow' type64='Q'/>
<arg declared_type64='NSUInteger' index='8' name='destinationBytesPerImage' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:'>
<arg declared_type64='id _Nonnull' index='0' name='sourceTexture' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='sourceSlice' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='sourceLevel' type64='Q'/>
<arg declared_type64='MTLOrigin' index='3' name='sourceOrigin' type64='{_MTLOrigin=QQQ}'/>
<arg declared_type64='MTLSize' index='4' name='sourceSize' type64='{_MTLSize=QQQ}'/>
<arg declared_type64='id _Nonnull' index='5' name='destinationBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='6' name='destinationOffset' type64='Q'/>
<arg declared_type64='NSUInteger' index='7' name='destinationBytesPerRow' type64='Q'/>
<arg declared_type64='NSUInteger' index='8' name='destinationBytesPerImage' type64='Q'/>
<arg declared_type64='MTLBlitOption' index='9' name='options' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:'>
<arg declared_type64='id _Nonnull' index='0' name='sourceTexture' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='sourceSlice' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='sourceLevel' type64='Q'/>
<arg declared_type64='MTLOrigin' index='3' name='sourceOrigin' type64='{_MTLOrigin=QQQ}'/>
<arg declared_type64='MTLSize' index='4' name='sourceSize' type64='{_MTLSize=QQQ}'/>
<arg declared_type64='id _Nonnull' index='5' name='destinationTexture' type64='@'/>
<arg declared_type64='NSUInteger' index='6' name='destinationSlice' type64='Q'/>
<arg declared_type64='NSUInteger' index='7' name='destinationLevel' type64='Q'/>
<arg declared_type64='MTLOrigin' index='8' name='destinationOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='cpuCacheMode'>
<retval declared_type64='MTLCPUCacheMode' type64='Q'/>
</method>
<method selector='depth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='device'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='didModifyRange:'>
<arg declared_type64='NSRange' index='0' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='dispatchThreadgroups:threadsPerThreadgroup:'>
<arg declared_type64='MTLSize' index='0' name='threadgroupsPerGrid' type64='{_MTLSize=QQQ}'/>
<arg declared_type64='MTLSize' index='1' name='threadsPerThreadgroup' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:'>
<arg declared_type64='id _Nonnull' index='0' name='indirectBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='indirectBufferOffset' type64='Q'/>
<arg declared_type64='MTLSize' index='2' name='threadsPerThreadgroup' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:'>
<arg declared_type64='MTLPrimitiveType' index='0' name='primitiveType' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='indexCount' type64='Q'/>
<arg declared_type64='MTLIndexType' index='2' name='indexType' type64='Q'/>
<arg declared_type64='id _Nonnull' index='3' name='indexBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='4' name='indexBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:'>
<arg declared_type64='MTLPrimitiveType' index='0' name='primitiveType' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='indexCount' type64='Q'/>
<arg declared_type64='MTLIndexType' index='2' name='indexType' type64='Q'/>
<arg declared_type64='id _Nonnull' index='3' name='indexBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='4' name='indexBufferOffset' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='instanceCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:'>
<arg declared_type64='MTLPrimitiveType' index='0' name='primitiveType' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='indexCount' type64='Q'/>
<arg declared_type64='MTLIndexType' index='2' name='indexType' type64='Q'/>
<arg declared_type64='id _Nonnull' index='3' name='indexBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='4' name='indexBufferOffset' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='instanceCount' type64='Q'/>
<arg declared_type64='NSInteger' index='6' name='baseVertex' type64='q'/>
<arg declared_type64='NSUInteger' index='7' name='baseInstance' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:'>
<arg declared_type64='MTLPrimitiveType' index='0' name='primitiveType' type64='Q'/>
<arg declared_type64='MTLIndexType' index='1' name='indexType' type64='Q'/>
<arg declared_type64='id _Nonnull' index='2' name='indexBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='indexBufferOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='4' name='indirectBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='5' name='indirectBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='drawPrimitives:indirectBuffer:indirectBufferOffset:'>
<arg declared_type64='MTLPrimitiveType' index='0' name='primitiveType' type64='Q'/>
<arg declared_type64='id _Nonnull' index='1' name='indirectBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='2' name='indirectBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='drawPrimitives:vertexStart:vertexCount:'>
<arg declared_type64='MTLPrimitiveType' index='0' name='primitiveType' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='vertexStart' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='vertexCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='drawPrimitives:vertexStart:vertexCount:instanceCount:'>
<arg declared_type64='MTLPrimitiveType' index='0' name='primitiveType' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='vertexStart' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='vertexCount' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='instanceCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:'>
<arg declared_type64='MTLPrimitiveType' index='0' name='primitiveType' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='vertexStart' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='vertexCount' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='instanceCount' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='baseInstance' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='endEncoding'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='enqueue'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='error'>
<retval declared_type64='NSError * _Nullable' type64='@'/>
</method>
<method selector='fillBuffer:range:value:'>
<arg declared_type64='id _Nonnull' index='0' name='buffer' type64='@'/>
<arg declared_type64='NSRange' index='1' name='range' type64='{_NSRange=QQ}'/>
<arg declared_type64='uint8_t' index='2' name='value' type64='C'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='functionNames'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='functionType'>
<retval declared_type64='MTLFunctionType' type64='Q'/>
</method>
<method selector='generateMipmapsForTexture:'>
<arg declared_type64='id _Nonnull' index='0' name='texture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:'>
<arg declared_type64='void * _Nonnull' index='0' name='pixelBytes' type64='^v'/>
<arg declared_type64='NSUInteger' index='1' name='bytesPerRow' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='bytesPerImage' type64='Q'/>
<arg declared_type64='MTLRegion' index='3' name='region' type64='{_MTLRegion={_MTLOrigin=QQQ}{_MTLSize=QQQ}}'/>
<arg declared_type64='NSUInteger' index='4' name='level' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='slice' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='getBytes:bytesPerRow:fromRegion:mipmapLevel:'>
<arg declared_type64='void * _Nonnull' index='0' name='pixelBytes' type64='^v'/>
<arg declared_type64='NSUInteger' index='1' name='bytesPerRow' type64='Q'/>
<arg declared_type64='MTLRegion' index='2' name='region' type64='{_MTLRegion={_MTLOrigin=QQQ}{_MTLSize=QQQ}}'/>
<arg declared_type64='NSUInteger' index='3' name='level' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='height'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='insertDebugCaptureBoundary'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='insertDebugSignpost:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='string' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='iosurface'>
<retval declared_type64='IOSurfaceRef _Nullable' type64='^{__IOSurface=}'/>
</method>
<method selector='iosurfacePlane'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='isDepth24Stencil8PixelFormatSupported'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isFramebufferOnly'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isHeadless'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isLowPower'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='label'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='length'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='maxThreadsPerThreadgroup'>
<retval declared_type64='MTLSize' type64='{_MTLSize=QQQ}'/>
</method>
<method selector='maxTotalThreadsPerThreadgroup'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='mipmapLevelCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='name'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method selector='newBufferWithBytes:length:options:'>
<arg const='true' declared_type64='void * _Nonnull' index='0' name='pointer' type64='^v'/>
<arg declared_type64='NSUInteger' index='1' name='length' type64='Q'/>
<arg declared_type64='MTLResourceOptions' index='2' name='options' type64='Q'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='newBufferWithBytesNoCopy:length:options:deallocator:'>
<arg declared_type64='void * _Nonnull' index='0' name='pointer' type64='^v'/>
<arg declared_type64='NSUInteger' index='1' name='length' type64='Q'/>
<arg declared_type64='MTLResourceOptions' index='2' name='options' type64='Q'/>
<arg declared_type64='void (^ _Nullable)(void * _Nonnull, NSUInteger)' function_pointer='true' index='3' name='deallocator' type64='@?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='NSUInteger' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='newBufferWithLength:options:'>
<arg declared_type64='NSUInteger' index='0' name='length' type64='Q'/>
<arg declared_type64='MTLResourceOptions' index='1' name='options' type64='Q'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='newCommandQueue'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='newCommandQueueWithMaxCommandBufferCount:'>
<arg declared_type64='NSUInteger' index='0' name='maxCommandBufferCount' type64='Q'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='newComputePipelineStateWithDescriptor:options:completionHandler:'>
<arg declared_type64='MTLComputePipelineDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<arg declared_type64='MTLPipelineOption' index='1' name='options' type64='Q'/>
<arg declared_type64='MTLNewComputePipelineStateWithReflectionCompletionHandler _Nonnull' function_pointer='true' index='2' name='completionHandler' type64='@?'>
<arg declared_type64='id _Nullable' type64='@'/>
<arg declared_type64='MTLComputePipelineReflection * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='newComputePipelineStateWithDescriptor:options:reflection:error:'>
<arg declared_type64='MTLComputePipelineDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<arg declared_type64='MTLPipelineOption' index='1' name='options' type64='Q'/>
<arg declared_type64='MTLAutoreleasedComputePipelineReflection * _Nullable' index='2' name='reflection' type64='^@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='3' name='error' type64='^@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='newComputePipelineStateWithFunction:completionHandler:'>
<arg declared_type64='id _Nonnull' index='0' name='computeFunction' type64='@'/>
<arg declared_type64='MTLNewComputePipelineStateCompletionHandler _Nonnull' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<arg declared_type64='id _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='newComputePipelineStateWithFunction:error:'>
<arg declared_type64='id _Nonnull' index='0' name='computeFunction' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='1' name='error' type64='^@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='newComputePipelineStateWithFunction:options:completionHandler:'>
<arg declared_type64='id _Nonnull' index='0' name='computeFunction' type64='@'/>
<arg declared_type64='MTLPipelineOption' index='1' name='options' type64='Q'/>
<arg declared_type64='MTLNewComputePipelineStateWithReflectionCompletionHandler _Nonnull' function_pointer='true' index='2' name='completionHandler' type64='@?'>
<arg declared_type64='id _Nullable' type64='@'/>
<arg declared_type64='MTLComputePipelineReflection * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='newComputePipelineStateWithFunction:options:reflection:error:'>
<arg declared_type64='id _Nonnull' index='0' name='computeFunction' type64='@'/>
<arg declared_type64='MTLPipelineOption' index='1' name='options' type64='Q'/>
<arg declared_type64='MTLAutoreleasedComputePipelineReflection * _Nullable' index='2' name='reflection' type64='^@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='3' name='error' type64='^@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='newDefaultLibrary'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='newDepthStencilStateWithDescriptor:'>
<arg declared_type64='MTLDepthStencilDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='newFunctionWithName:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='functionName' type64='@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='newLibraryWithData:error:'>
<arg declared_type64='dispatch_data_t _Nonnull' index='0' name='data' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='1' name='error' type64='^@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='newLibraryWithFile:error:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='filepath' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='1' name='error' type64='^@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='newLibraryWithSource:options:completionHandler:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='MTLCompileOptions * _Nullable' index='1' name='options' type64='@'/>
<arg declared_type64='MTLNewLibraryCompletionHandler _Nonnull' function_pointer='true' index='2' name='completionHandler' type64='@?'>
<arg declared_type64='id _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='newLibraryWithSource:options:error:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='MTLCompileOptions * _Nullable' index='1' name='options' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='2' name='error' type64='^@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='newRenderPipelineStateWithDescriptor:completionHandler:'>
<arg declared_type64='MTLRenderPipelineDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<arg declared_type64='MTLNewRenderPipelineStateCompletionHandler _Nonnull' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<arg declared_type64='id _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='newRenderPipelineStateWithDescriptor:error:'>
<arg declared_type64='MTLRenderPipelineDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='1' name='error' type64='^@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='newRenderPipelineStateWithDescriptor:options:completionHandler:'>
<arg declared_type64='MTLRenderPipelineDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<arg declared_type64='MTLPipelineOption' index='1' name='options' type64='Q'/>
<arg declared_type64='MTLNewRenderPipelineStateWithReflectionCompletionHandler _Nonnull' function_pointer='true' index='2' name='completionHandler' type64='@?'>
<arg declared_type64='id _Nullable' type64='@'/>
<arg declared_type64='MTLRenderPipelineReflection * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='newRenderPipelineStateWithDescriptor:options:reflection:error:'>
<arg declared_type64='MTLRenderPipelineDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<arg declared_type64='MTLPipelineOption' index='1' name='options' type64='Q'/>
<arg declared_type64='MTLAutoreleasedRenderPipelineReflection * _Nullable' index='2' name='reflection' type64='^@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='3' name='error' type64='^@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='newSamplerStateWithDescriptor:'>
<arg declared_type64='MTLSamplerDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='newTextureViewWithPixelFormat:'>
<arg declared_type64='MTLPixelFormat' index='0' name='pixelFormat' type64='Q'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='newTextureViewWithPixelFormat:textureType:levels:slices:'>
<arg declared_type64='MTLPixelFormat' index='0' name='pixelFormat' type64='Q'/>
<arg declared_type64='MTLTextureType' index='1' name='textureType' type64='Q'/>
<arg declared_type64='NSRange' index='2' name='levelRange' type64='{_NSRange=QQ}'/>
<arg declared_type64='NSRange' index='3' name='sliceRange' type64='{_NSRange=QQ}'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='newTextureWithDescriptor:'>
<arg declared_type64='MTLTextureDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='newTextureWithDescriptor:iosurface:plane:'>
<arg declared_type64='MTLTextureDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<arg declared_type64='IOSurfaceRef _Nonnull' index='1' name='iosurface' type64='^{__IOSurface=}'/>
<arg declared_type64='NSUInteger' index='2' name='plane' type64='Q'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='parallelRenderCommandEncoderWithDescriptor:'>
<arg declared_type64='MTLRenderPassDescriptor * _Nonnull' index='0' name='renderPassDescriptor' type64='@'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='parentRelativeLevel'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='parentRelativeSlice'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='parentTexture'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='pixelFormat'>
<retval declared_type64='MTLPixelFormat' type64='Q'/>
</method>
<method selector='popDebugGroup'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='present'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='presentAtTime:'>
<arg declared_type64='CFTimeInterval' index='0' name='presentationTime' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='presentDrawable:'>
<arg declared_type64='id _Nonnull' index='0' name='drawable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='presentDrawable:atTime:'>
<arg declared_type64='id _Nonnull' index='0' name='drawable' type64='@'/>
<arg declared_type64='CFTimeInterval' index='1' name='presentationTime' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='pushDebugGroup:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='string' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='renderCommandEncoder'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='renderCommandEncoderWithDescriptor:'>
<arg declared_type64='MTLRenderPassDescriptor * _Nonnull' index='0' name='renderPassDescriptor' type64='@'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:'>
<arg declared_type64='MTLRegion' index='0' name='region' type64='{_MTLRegion={_MTLOrigin=QQQ}{_MTLSize=QQQ}}'/>
<arg declared_type64='NSUInteger' index='1' name='level' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='slice' type64='Q'/>
<arg const='true' declared_type64='void * _Nonnull' index='3' name='pixelBytes' type64='^v'/>
<arg declared_type64='NSUInteger' index='4' name='bytesPerRow' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='bytesPerImage' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='replaceRegion:mipmapLevel:withBytes:bytesPerRow:'>
<arg declared_type64='MTLRegion' index='0' name='region' type64='{_MTLRegion={_MTLOrigin=QQQ}{_MTLSize=QQQ}}'/>
<arg declared_type64='NSUInteger' index='1' name='level' type64='Q'/>
<arg const='true' declared_type64='void * _Nonnull' index='2' name='pixelBytes' type64='^v'/>
<arg declared_type64='NSUInteger' index='3' name='bytesPerRow' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='retainedReferences'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='rootResource'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='sampleCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='setBlendColorRed:green:blue:alpha:'>
<arg declared_type64='float' index='0' name='red' type64='f'/>
<arg declared_type64='float' index='1' name='green' type64='f'/>
<arg declared_type64='float' index='2' name='blue' type64='f'/>
<arg declared_type64='float' index='3' name='alpha' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBuffer:offset:atIndex:'>
<arg declared_type64='id _Nullable' index='0' name='buffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='offset' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBufferOffset:atIndex:'>
<arg declared_type64='NSUInteger' index='0' name='offset' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBuffers:offsets:withRange:'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='buffers' type64='^@'/>
<arg const='true' declared_type64='NSUInteger*' index='1' name='offsets' type64='^Q'/>
<arg declared_type64='NSRange' index='2' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBytes:length:atIndex:'>
<arg const='true' declared_type64='void * _Nonnull' index='0' name='bytes' type64='^v'/>
<arg declared_type64='NSUInteger' index='1' name='length' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setComputePipelineState:'>
<arg declared_type64='id _Nonnull' index='0' name='state' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCullMode:'>
<arg declared_type64='MTLCullMode' index='0' name='cullMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDepthBias:slopeScale:clamp:'>
<arg declared_type64='float' index='0' name='depthBias' type64='f'/>
<arg declared_type64='float' index='1' name='slopeScale' type64='f'/>
<arg declared_type64='float' index='2' name='clamp' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDepthClipMode:'>
<arg declared_type64='MTLDepthClipMode' index='0' name='depthClipMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDepthStencilState:'>
<arg declared_type64='id _Nullable' index='0' name='depthStencilState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentBuffer:offset:atIndex:'>
<arg declared_type64='id _Nullable' index='0' name='buffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='offset' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentBufferOffset:atIndex:'>
<arg declared_type64='NSUInteger' index='0' name='offset' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentBuffers:offsets:withRange:'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='buffers' type64='^@'/>
<arg const='true' declared_type64='NSUInteger*' index='1' name='offset' type64='^Q'/>
<arg declared_type64='NSRange' index='2' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentBytes:length:atIndex:'>
<arg const='true' declared_type64='void * _Nonnull' index='0' name='bytes' type64='^v'/>
<arg declared_type64='NSUInteger' index='1' name='length' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentSamplerState:atIndex:'>
<arg declared_type64='id _Nullable' index='0' name='sampler' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:'>
<arg declared_type64='id _Nullable' index='0' name='sampler' type64='@'/>
<arg declared_type64='float' index='1' name='lodMinClamp' type64='f'/>
<arg declared_type64='float' index='2' name='lodMaxClamp' type64='f'/>
<arg declared_type64='NSUInteger' index='3' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='samplers' type64='^@'/>
<arg const='true' declared_type64='float*' index='1' name='lodMinClamps' type64='^f'/>
<arg const='true' declared_type64='float*' index='2' name='lodMaxClamps' type64='^f'/>
<arg declared_type64='NSRange' index='3' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentSamplerStates:withRange:'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='samplers' type64='^@'/>
<arg declared_type64='NSRange' index='1' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentTexture:atIndex:'>
<arg declared_type64='id _Nullable' index='0' name='texture' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentTextures:withRange:'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='textures' type64='^@'/>
<arg declared_type64='NSRange' index='1' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFrontFacingWinding:'>
<arg declared_type64='MTLWinding' index='0' name='frontFacingWinding' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLabel:'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPurgeableState:'>
<arg declared_type64='MTLPurgeableState' index='0' name='state' type64='Q'/>
<retval declared_type64='MTLPurgeableState' type64='Q'/>
</method>
<method selector='setRenderPipelineState:'>
<arg declared_type64='id _Nonnull' index='0' name='pipelineState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSamplerState:atIndex:'>
<arg declared_type64='id _Nullable' index='0' name='sampler' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSamplerState:lodMinClamp:lodMaxClamp:atIndex:'>
<arg declared_type64='id _Nullable' index='0' name='sampler' type64='@'/>
<arg declared_type64='float' index='1' name='lodMinClamp' type64='f'/>
<arg declared_type64='float' index='2' name='lodMaxClamp' type64='f'/>
<arg declared_type64='NSUInteger' index='3' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSamplerStates:lodMinClamps:lodMaxClamps:withRange:'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='samplers' type64='^@'/>
<arg const='true' declared_type64='float*' index='1' name='lodMinClamps' type64='^f'/>
<arg const='true' declared_type64='float*' index='2' name='lodMaxClamps' type64='^f'/>
<arg declared_type64='NSRange' index='3' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSamplerStates:withRange:'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='samplers' type64='^@'/>
<arg declared_type64='NSRange' index='1' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setScissorRect:'>
<arg declared_type64='MTLScissorRect' index='0' name='rect' type64='{_MTLScissorRect=QQQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStencilFrontReferenceValue:backReferenceValue:'>
<arg declared_type64='uint32_t' index='0' name='frontReferenceValue' type64='I'/>
<arg declared_type64='uint32_t' index='1' name='backReferenceValue' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStencilReferenceValue:'>
<arg declared_type64='uint32_t' index='0' name='referenceValue' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTexture:atIndex:'>
<arg declared_type64='id _Nullable' index='0' name='texture' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTextures:withRange:'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='textures' type64='^@'/>
<arg declared_type64='NSRange' index='1' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setThreadgroupMemoryLength:atIndex:'>
<arg declared_type64='NSUInteger' index='0' name='length' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTriangleFillMode:'>
<arg declared_type64='MTLTriangleFillMode' index='0' name='fillMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexBuffer:offset:atIndex:'>
<arg declared_type64='id _Nullable' index='0' name='buffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='offset' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexBufferOffset:atIndex:'>
<arg declared_type64='NSUInteger' index='0' name='offset' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexBuffers:offsets:withRange:'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='buffers' type64='^@'/>
<arg const='true' declared_type64='NSUInteger*' index='1' name='offsets' type64='^Q'/>
<arg declared_type64='NSRange' index='2' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexBytes:length:atIndex:'>
<arg const='true' declared_type64='void * _Nonnull' index='0' name='bytes' type64='^v'/>
<arg declared_type64='NSUInteger' index='1' name='length' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexSamplerState:atIndex:'>
<arg declared_type64='id _Nullable' index='0' name='sampler' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:'>
<arg declared_type64='id _Nullable' index='0' name='sampler' type64='@'/>
<arg declared_type64='float' index='1' name='lodMinClamp' type64='f'/>
<arg declared_type64='float' index='2' name='lodMaxClamp' type64='f'/>
<arg declared_type64='NSUInteger' index='3' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='samplers' type64='^@'/>
<arg const='true' declared_type64='float*' index='1' name='lodMinClamps' type64='^f'/>
<arg const='true' declared_type64='float*' index='2' name='lodMaxClamps' type64='^f'/>
<arg declared_type64='NSRange' index='3' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexSamplerStates:withRange:'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='samplers' type64='^@'/>
<arg declared_type64='NSRange' index='1' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexTexture:atIndex:'>
<arg declared_type64='id _Nullable' index='0' name='texture' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexTextures:withRange:'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='textures' type64='^@'/>
<arg declared_type64='NSRange' index='1' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setViewport:'>
<arg declared_type64='MTLViewport' index='0' name='viewport' type64='{_MTLViewport=dddddd}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVisibilityResultMode:offset:'>
<arg declared_type64='MTLVisibilityResultMode' index='0' name='mode' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='offset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='status'>
<retval declared_type64='MTLCommandBufferStatus' type64='Q'/>
</method>
<method selector='storageMode'>
<retval declared_type64='MTLStorageMode' type64='Q'/>
</method>
<method selector='supportsFeatureSet:'>
<arg declared_type64='MTLFeatureSet' index='0' name='featureSet' type64='Q'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='supportsTextureSampleCount:'>
<arg declared_type64='NSUInteger' index='0' name='sampleCount' type64='Q'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='synchronizeResource:'>
<arg declared_type64='id _Nonnull' index='0' name='resource' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='synchronizeTexture:slice:level:'>
<arg declared_type64='id _Nonnull' index='0' name='texture' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='slice' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='level' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='textureBarrier'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='textureType'>
<retval declared_type64='MTLTextureType' type64='Q'/>
</method>
<method selector='threadExecutionWidth'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='usage'>
<retval declared_type64='MTLTextureUsage' type64='Q'/>
</method>
<method selector='vertexAttributes'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
<method selector='waitUntilCompleted'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='waitUntilScheduled'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='width'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</class>
<informal_protocol name='MTLBlitCommandEncoder'>
<method selector='copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:' type64='v120@0:8@16Q24Q32Q40{?=QQQ}48@72Q80Q88{?=QQQ}96'>
<arg declared_type64='id _Nonnull' index='0' name='sourceBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='sourceOffset' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='sourceBytesPerRow' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='sourceBytesPerImage' type64='Q'/>
<arg declared_type64='MTLSize' index='4' name='sourceSize' type64='{_MTLSize=QQQ}'/>
<arg declared_type64='id _Nonnull' index='5' name='destinationTexture' type64='@'/>
<arg declared_type64='NSUInteger' index='6' name='destinationSlice' type64='Q'/>
<arg declared_type64='NSUInteger' index='7' name='destinationLevel' type64='Q'/>
<arg declared_type64='MTLOrigin' index='8' name='destinationOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:options:' type64='v128@0:8@16Q24Q32Q40{?=QQQ}48@72Q80Q88{?=QQQ}96Q120'>
<arg declared_type64='id _Nonnull' index='0' name='sourceBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='sourceOffset' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='sourceBytesPerRow' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='sourceBytesPerImage' type64='Q'/>
<arg declared_type64='MTLSize' index='4' name='sourceSize' type64='{_MTLSize=QQQ}'/>
<arg declared_type64='id _Nonnull' index='5' name='destinationTexture' type64='@'/>
<arg declared_type64='NSUInteger' index='6' name='destinationSlice' type64='Q'/>
<arg declared_type64='NSUInteger' index='7' name='destinationLevel' type64='Q'/>
<arg declared_type64='MTLOrigin' index='8' name='destinationOrigin' type64='{_MTLOrigin=QQQ}'/>
<arg declared_type64='MTLBlitOption' index='9' name='options' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:' type64='v56@0:8@16Q24@32Q40Q48'>
<arg declared_type64='id _Nonnull' index='0' name='sourceBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='sourceOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='2' name='destinationBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='destinationOffset' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='size' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:' type64='v120@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104Q112'>
<arg declared_type64='id _Nonnull' index='0' name='sourceTexture' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='sourceSlice' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='sourceLevel' type64='Q'/>
<arg declared_type64='MTLOrigin' index='3' name='sourceOrigin' type64='{_MTLOrigin=QQQ}'/>
<arg declared_type64='MTLSize' index='4' name='sourceSize' type64='{_MTLSize=QQQ}'/>
<arg declared_type64='id _Nonnull' index='5' name='destinationBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='6' name='destinationOffset' type64='Q'/>
<arg declared_type64='NSUInteger' index='7' name='destinationBytesPerRow' type64='Q'/>
<arg declared_type64='NSUInteger' index='8' name='destinationBytesPerImage' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:options:' type64='v128@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104Q112Q120'>
<arg declared_type64='id _Nonnull' index='0' name='sourceTexture' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='sourceSlice' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='sourceLevel' type64='Q'/>
<arg declared_type64='MTLOrigin' index='3' name='sourceOrigin' type64='{_MTLOrigin=QQQ}'/>
<arg declared_type64='MTLSize' index='4' name='sourceSize' type64='{_MTLSize=QQQ}'/>
<arg declared_type64='id _Nonnull' index='5' name='destinationBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='6' name='destinationOffset' type64='Q'/>
<arg declared_type64='NSUInteger' index='7' name='destinationBytesPerRow' type64='Q'/>
<arg declared_type64='NSUInteger' index='8' name='destinationBytesPerImage' type64='Q'/>
<arg declared_type64='MTLBlitOption' index='9' name='options' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:' type64='v136@0:8@16Q24Q32{?=QQQ}40{?=QQQ}64@88Q96Q104{?=QQQ}112'>
<arg declared_type64='id _Nonnull' index='0' name='sourceTexture' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='sourceSlice' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='sourceLevel' type64='Q'/>
<arg declared_type64='MTLOrigin' index='3' name='sourceOrigin' type64='{_MTLOrigin=QQQ}'/>
<arg declared_type64='MTLSize' index='4' name='sourceSize' type64='{_MTLSize=QQQ}'/>
<arg declared_type64='id _Nonnull' index='5' name='destinationTexture' type64='@'/>
<arg declared_type64='NSUInteger' index='6' name='destinationSlice' type64='Q'/>
<arg declared_type64='NSUInteger' index='7' name='destinationLevel' type64='Q'/>
<arg declared_type64='MTLOrigin' index='8' name='destinationOrigin' type64='{_MTLOrigin=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='fillBuffer:range:value:' type64='v44@0:8@16{_NSRange=QQ}24C40'>
<arg declared_type64='id _Nonnull' index='0' name='buffer' type64='@'/>
<arg declared_type64='NSRange' index='1' name='range' type64='{_NSRange=QQ}'/>
<arg declared_type64='uint8_t' index='2' name='value' type64='C'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='generateMipmapsForTexture:' type64='v24@0:8@16'>
<arg declared_type64='id _Nonnull' index='0' name='texture' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='synchronizeResource:' type64='v24@0:8@16'>
<arg declared_type64='id _Nonnull' index='0' name='resource' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='synchronizeTexture:slice:level:' type64='v40@0:8@16Q24Q32'>
<arg declared_type64='id _Nonnull' index='0' name='texture' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='slice' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='level' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</informal_protocol>
<informal_protocol name='MTLBuffer'>
<method selector='contents' type64='^v16@0:8'>
<retval declared_type64='void * _Nonnull' type64='^v'/>
</method>
<method selector='didModifyRange:' type64='v32@0:8{_NSRange=QQ}16'>
<arg declared_type64='NSRange' index='0' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='length' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</informal_protocol>
<informal_protocol name='MTLCommandBuffer'>
<method selector='addCompletedHandler:' type64='v24@0:8@?16'>
<arg declared_type64='MTLCommandBufferHandler _Nonnull' function_pointer='true' index='0' name='block' type64='@?'>
<arg declared_type64='id _Nonnull' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='addScheduledHandler:' type64='v24@0:8@?16'>
<arg declared_type64='MTLCommandBufferHandler _Nonnull' function_pointer='true' index='0' name='block' type64='@?'>
<arg declared_type64='id _Nonnull' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='blitCommandEncoder' type64='@16@0:8'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='commandQueue' type64='@16@0:8'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='commit' type64='v16@0:8'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='computeCommandEncoder' type64='@16@0:8'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='device' type64='@16@0:8'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='enqueue' type64='v16@0:8'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='error' type64='@16@0:8'>
<retval declared_type64='NSError * _Nullable' type64='@'/>
</method>
<method selector='label' type64='@16@0:8'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='parallelRenderCommandEncoderWithDescriptor:' type64='@24@0:8@16'>
<arg declared_type64='MTLRenderPassDescriptor * _Nonnull' index='0' name='renderPassDescriptor' type64='@'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='presentDrawable:' type64='v24@0:8@16'>
<arg declared_type64='id _Nonnull' index='0' name='drawable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='presentDrawable:atTime:' type64='v32@0:8@16d24'>
<arg declared_type64='id _Nonnull' index='0' name='drawable' type64='@'/>
<arg declared_type64='CFTimeInterval' index='1' name='presentationTime' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='renderCommandEncoderWithDescriptor:' type64='@24@0:8@16'>
<arg declared_type64='MTLRenderPassDescriptor * _Nonnull' index='0' name='renderPassDescriptor' type64='@'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='retainedReferences' type64='B16@0:8'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='setLabel:' type64='v24@0:8@16'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='status' type64='Q16@0:8'>
<retval declared_type64='MTLCommandBufferStatus' type64='Q'/>
</method>
<method selector='waitUntilCompleted' type64='v16@0:8'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='waitUntilScheduled' type64='v16@0:8'>
<retval declared_type64='void' type64='v'/>
</method>
</informal_protocol>
<informal_protocol name='MTLCommandEncoder'>
<method selector='device' type64='@16@0:8'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='endEncoding' type64='v16@0:8'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='insertDebugSignpost:' type64='v24@0:8@16'>
<arg declared_type64='NSString * _Nonnull' index='0' name='string' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='label' type64='@16@0:8'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='popDebugGroup' type64='v16@0:8'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='pushDebugGroup:' type64='v24@0:8@16'>
<arg declared_type64='NSString * _Nonnull' index='0' name='string' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setLabel:' type64='v24@0:8@16'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</informal_protocol>
<informal_protocol name='MTLCommandQueue'>
<method selector='commandBuffer' type64='@16@0:8'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='commandBufferWithUnretainedReferences' type64='@16@0:8'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='device' type64='@16@0:8'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='insertDebugCaptureBoundary' type64='v16@0:8'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='label' type64='@16@0:8'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='setLabel:' type64='v24@0:8@16'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</informal_protocol>
<informal_protocol name='MTLComputeCommandEncoder'>
<method selector='dispatchThreadgroups:threadsPerThreadgroup:' type64='v64@0:8{?=QQQ}16{?=QQQ}40'>
<arg declared_type64='MTLSize' index='0' name='threadgroupsPerGrid' type64='{_MTLSize=QQQ}'/>
<arg declared_type64='MTLSize' index='1' name='threadsPerThreadgroup' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='dispatchThreadgroupsWithIndirectBuffer:indirectBufferOffset:threadsPerThreadgroup:' type64='v56@0:8@16Q24{?=QQQ}32'>
<arg declared_type64='id _Nonnull' index='0' name='indirectBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='indirectBufferOffset' type64='Q'/>
<arg declared_type64='MTLSize' index='2' name='threadsPerThreadgroup' type64='{_MTLSize=QQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBuffer:offset:atIndex:' type64='v40@0:8@16Q24Q32'>
<arg declared_type64='id _Nullable' index='0' name='buffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='offset' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBufferOffset:atIndex:' type64='v32@0:8Q16Q24'>
<arg declared_type64='NSUInteger' index='0' name='offset' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBuffers:offsets:withRange:' type64='v48@0:8r^@16r^Q24{_NSRange=QQ}32'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='buffers' type64='^@'/>
<arg const='true' declared_type64='NSUInteger*' index='1' name='offsets' type64='^Q'/>
<arg declared_type64='NSRange' index='2' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBytes:length:atIndex:' type64='v40@0:8r^v16Q24Q32'>
<arg const='true' declared_type64='void * _Nonnull' index='0' name='bytes' type64='^v'/>
<arg declared_type64='NSUInteger' index='1' name='length' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setComputePipelineState:' type64='v24@0:8@16'>
<arg declared_type64='id _Nonnull' index='0' name='state' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSamplerState:atIndex:' type64='v32@0:8@16Q24'>
<arg declared_type64='id _Nullable' index='0' name='sampler' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSamplerState:lodMinClamp:lodMaxClamp:atIndex:' type64='v40@0:8@16f24f28Q32'>
<arg declared_type64='id _Nullable' index='0' name='sampler' type64='@'/>
<arg declared_type64='float' index='1' name='lodMinClamp' type64='f'/>
<arg declared_type64='float' index='2' name='lodMaxClamp' type64='f'/>
<arg declared_type64='NSUInteger' index='3' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSamplerStates:lodMinClamps:lodMaxClamps:withRange:' type64='v56@0:8r^@16r^f24r^f32{_NSRange=QQ}40'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='samplers' type64='^@'/>
<arg const='true' declared_type64='float*' index='1' name='lodMinClamps' type64='^f'/>
<arg const='true' declared_type64='float*' index='2' name='lodMaxClamps' type64='^f'/>
<arg declared_type64='NSRange' index='3' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSamplerStates:withRange:' type64='v40@0:8r^@16{_NSRange=QQ}24'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='samplers' type64='^@'/>
<arg declared_type64='NSRange' index='1' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTexture:atIndex:' type64='v32@0:8@16Q24'>
<arg declared_type64='id _Nullable' index='0' name='texture' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTextures:withRange:' type64='v40@0:8r^@16{_NSRange=QQ}24'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='textures' type64='^@'/>
<arg declared_type64='NSRange' index='1' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setThreadgroupMemoryLength:atIndex:' type64='v32@0:8Q16Q24'>
<arg declared_type64='NSUInteger' index='0' name='length' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
</informal_protocol>
<informal_protocol name='MTLComputePipelineState'>
<method selector='device' type64='@16@0:8'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='maxTotalThreadsPerThreadgroup' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='threadExecutionWidth' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</informal_protocol>
<informal_protocol name='MTLDepthStencilState'>
<method selector='device' type64='@16@0:8'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='label' type64='@16@0:8'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
</informal_protocol>
<informal_protocol name='MTLDevice'>
<method selector='isDepth24Stencil8PixelFormatSupported' type64='B16@0:8'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isHeadless' type64='B16@0:8'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isLowPower' type64='B16@0:8'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='maxThreadsPerThreadgroup' type64='{?=QQQ}16@0:8'>
<retval declared_type64='MTLSize' type64='{_MTLSize=QQQ}'/>
</method>
<method selector='name' type64='@16@0:8'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method selector='newBufferWithBytes:length:options:' type64='@40@0:8r^v16Q24Q32'>
<arg const='true' declared_type64='void * _Nonnull' index='0' name='pointer' type64='^v'/>
<arg declared_type64='NSUInteger' index='1' name='length' type64='Q'/>
<arg declared_type64='MTLResourceOptions' index='2' name='options' type64='Q'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='newBufferWithBytesNoCopy:length:options:deallocator:' type64='@48@0:8^v16Q24Q32@?40'>
<arg declared_type64='void * _Nonnull' index='0' name='pointer' type64='^v'/>
<arg declared_type64='NSUInteger' index='1' name='length' type64='Q'/>
<arg declared_type64='MTLResourceOptions' index='2' name='options' type64='Q'/>
<arg declared_type64='void (^ _Nullable)(void * _Nonnull, NSUInteger)' function_pointer='true' index='3' name='deallocator' type64='@?'>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<arg declared_type64='NSUInteger' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='newBufferWithLength:options:' type64='@32@0:8Q16Q24'>
<arg declared_type64='NSUInteger' index='0' name='length' type64='Q'/>
<arg declared_type64='MTLResourceOptions' index='1' name='options' type64='Q'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='newCommandQueue' type64='@16@0:8'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='newCommandQueueWithMaxCommandBufferCount:' type64='@24@0:8Q16'>
<arg declared_type64='NSUInteger' index='0' name='maxCommandBufferCount' type64='Q'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='newComputePipelineStateWithDescriptor:options:completionHandler:' type64='v40@0:8@16Q24@?32'>
<arg declared_type64='MTLComputePipelineDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<arg declared_type64='MTLPipelineOption' index='1' name='options' type64='Q'/>
<arg declared_type64='MTLNewComputePipelineStateWithReflectionCompletionHandler _Nonnull' function_pointer='true' index='2' name='completionHandler' type64='@?'>
<arg declared_type64='id _Nullable' type64='@'/>
<arg declared_type64='MTLComputePipelineReflection * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='newComputePipelineStateWithDescriptor:options:reflection:error:' type64='@48@0:8@16Q24^@32^@40'>
<arg declared_type64='MTLComputePipelineDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<arg declared_type64='MTLPipelineOption' index='1' name='options' type64='Q'/>
<arg declared_type64='MTLAutoreleasedComputePipelineReflection * _Nullable' index='2' name='reflection' type64='^@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='3' name='error' type64='^@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='newComputePipelineStateWithFunction:completionHandler:' type64='v32@0:8@16@?24'>
<arg declared_type64='id _Nonnull' index='0' name='computeFunction' type64='@'/>
<arg declared_type64='MTLNewComputePipelineStateCompletionHandler _Nonnull' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<arg declared_type64='id _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='newComputePipelineStateWithFunction:error:' type64='@32@0:8@16^@24'>
<arg declared_type64='id _Nonnull' index='0' name='computeFunction' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='1' name='error' type64='^@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='newComputePipelineStateWithFunction:options:completionHandler:' type64='v40@0:8@16Q24@?32'>
<arg declared_type64='id _Nonnull' index='0' name='computeFunction' type64='@'/>
<arg declared_type64='MTLPipelineOption' index='1' name='options' type64='Q'/>
<arg declared_type64='MTLNewComputePipelineStateWithReflectionCompletionHandler _Nonnull' function_pointer='true' index='2' name='completionHandler' type64='@?'>
<arg declared_type64='id _Nullable' type64='@'/>
<arg declared_type64='MTLComputePipelineReflection * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='newComputePipelineStateWithFunction:options:reflection:error:' type64='@48@0:8@16Q24^@32^@40'>
<arg declared_type64='id _Nonnull' index='0' name='computeFunction' type64='@'/>
<arg declared_type64='MTLPipelineOption' index='1' name='options' type64='Q'/>
<arg declared_type64='MTLAutoreleasedComputePipelineReflection * _Nullable' index='2' name='reflection' type64='^@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='3' name='error' type64='^@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='newDefaultLibrary' type64='@16@0:8'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='newDepthStencilStateWithDescriptor:' type64='@24@0:8@16'>
<arg declared_type64='MTLDepthStencilDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='newLibraryWithData:error:' type64='@32@0:8@16^@24'>
<arg declared_type64='dispatch_data_t _Nonnull' index='0' name='data' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='1' name='error' type64='^@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='newLibraryWithFile:error:' type64='@32@0:8@16^@24'>
<arg declared_type64='NSString * _Nonnull' index='0' name='filepath' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='1' name='error' type64='^@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='newLibraryWithSource:options:completionHandler:' type64='v40@0:8@16@24@?32'>
<arg declared_type64='NSString * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='MTLCompileOptions * _Nullable' index='1' name='options' type64='@'/>
<arg declared_type64='MTLNewLibraryCompletionHandler _Nonnull' function_pointer='true' index='2' name='completionHandler' type64='@?'>
<arg declared_type64='id _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='newLibraryWithSource:options:error:' type64='@40@0:8@16@24^@32'>
<arg declared_type64='NSString * _Nonnull' index='0' name='source' type64='@'/>
<arg declared_type64='MTLCompileOptions * _Nullable' index='1' name='options' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='2' name='error' type64='^@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='newRenderPipelineStateWithDescriptor:completionHandler:' type64='v32@0:8@16@?24'>
<arg declared_type64='MTLRenderPipelineDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<arg declared_type64='MTLNewRenderPipelineStateCompletionHandler _Nonnull' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<arg declared_type64='id _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='newRenderPipelineStateWithDescriptor:error:' type64='@32@0:8@16^@24'>
<arg declared_type64='MTLRenderPipelineDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='1' name='error' type64='^@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='newRenderPipelineStateWithDescriptor:options:completionHandler:' type64='v40@0:8@16Q24@?32'>
<arg declared_type64='MTLRenderPipelineDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<arg declared_type64='MTLPipelineOption' index='1' name='options' type64='Q'/>
<arg declared_type64='MTLNewRenderPipelineStateWithReflectionCompletionHandler _Nonnull' function_pointer='true' index='2' name='completionHandler' type64='@?'>
<arg declared_type64='id _Nullable' type64='@'/>
<arg declared_type64='MTLRenderPipelineReflection * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='newRenderPipelineStateWithDescriptor:options:reflection:error:' type64='@48@0:8@16Q24^@32^@40'>
<arg declared_type64='MTLRenderPipelineDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<arg declared_type64='MTLPipelineOption' index='1' name='options' type64='Q'/>
<arg declared_type64='MTLAutoreleasedRenderPipelineReflection * _Nullable' index='2' name='reflection' type64='^@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='3' name='error' type64='^@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='newSamplerStateWithDescriptor:' type64='@24@0:8@16'>
<arg declared_type64='MTLSamplerDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='newTextureWithDescriptor:' type64='@24@0:8@16'>
<arg declared_type64='MTLTextureDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='newTextureWithDescriptor:iosurface:plane:' type64='@40@0:8@16^{__IOSurface=}24Q32'>
<arg declared_type64='MTLTextureDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<arg declared_type64='IOSurfaceRef _Nonnull' index='1' name='iosurface' type64='^{__IOSurface=}'/>
<arg declared_type64='NSUInteger' index='2' name='plane' type64='Q'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='supportsFeatureSet:' type64='B24@0:8Q16'>
<arg declared_type64='MTLFeatureSet' index='0' name='featureSet' type64='Q'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='supportsTextureSampleCount:' type64='B24@0:8Q16'>
<arg declared_type64='NSUInteger' index='0' name='sampleCount' type64='Q'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
</informal_protocol>
<informal_protocol name='MTLDrawable'>
<method selector='present' type64='v16@0:8'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='presentAtTime:' type64='v24@0:8d16'>
<arg declared_type64='CFTimeInterval' index='0' name='presentationTime' type64='d'/>
<retval declared_type64='void' type64='v'/>
</method>
</informal_protocol>
<informal_protocol name='MTLFunction'>
<method selector='device' type64='@16@0:8'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='functionType' type64='Q16@0:8'>
<retval declared_type64='MTLFunctionType' type64='Q'/>
</method>
<method selector='name' type64='@16@0:8'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method selector='vertexAttributes' type64='@16@0:8'>
<retval declared_type64='NSArray * _Nullable' type64='@'/>
</method>
</informal_protocol>
<informal_protocol name='MTLLibrary'>
<method selector='device' type64='@16@0:8'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='functionNames' type64='@16@0:8'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='label' type64='@16@0:8'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='newFunctionWithName:' type64='@24@0:8@16'>
<arg declared_type64='NSString * _Nonnull' index='0' name='functionName' type64='@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='setLabel:' type64='v24@0:8@16'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</informal_protocol>
<informal_protocol name='MTLParallelRenderCommandEncoder'>
<method selector='renderCommandEncoder' type64='@16@0:8'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
</informal_protocol>
<informal_protocol name='MTLRenderCommandEncoder'>
<method selector='drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:' type64='v56@0:8Q16Q24Q32@40Q48'>
<arg declared_type64='MTLPrimitiveType' index='0' name='primitiveType' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='indexCount' type64='Q'/>
<arg declared_type64='MTLIndexType' index='2' name='indexType' type64='Q'/>
<arg declared_type64='id _Nonnull' index='3' name='indexBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='4' name='indexBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:' type64='v64@0:8Q16Q24Q32@40Q48Q56'>
<arg declared_type64='MTLPrimitiveType' index='0' name='primitiveType' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='indexCount' type64='Q'/>
<arg declared_type64='MTLIndexType' index='2' name='indexType' type64='Q'/>
<arg declared_type64='id _Nonnull' index='3' name='indexBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='4' name='indexBufferOffset' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='instanceCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:baseVertex:baseInstance:' type64='v80@0:8Q16Q24Q32@40Q48Q56q64Q72'>
<arg declared_type64='MTLPrimitiveType' index='0' name='primitiveType' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='indexCount' type64='Q'/>
<arg declared_type64='MTLIndexType' index='2' name='indexType' type64='Q'/>
<arg declared_type64='id _Nonnull' index='3' name='indexBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='4' name='indexBufferOffset' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='instanceCount' type64='Q'/>
<arg declared_type64='NSInteger' index='6' name='baseVertex' type64='q'/>
<arg declared_type64='NSUInteger' index='7' name='baseInstance' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='drawIndexedPrimitives:indexType:indexBuffer:indexBufferOffset:indirectBuffer:indirectBufferOffset:' type64='v64@0:8Q16Q24@32Q40@48Q56'>
<arg declared_type64='MTLPrimitiveType' index='0' name='primitiveType' type64='Q'/>
<arg declared_type64='MTLIndexType' index='1' name='indexType' type64='Q'/>
<arg declared_type64='id _Nonnull' index='2' name='indexBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='3' name='indexBufferOffset' type64='Q'/>
<arg declared_type64='id _Nonnull' index='4' name='indirectBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='5' name='indirectBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='drawPrimitives:indirectBuffer:indirectBufferOffset:' type64='v40@0:8Q16@24Q32'>
<arg declared_type64='MTLPrimitiveType' index='0' name='primitiveType' type64='Q'/>
<arg declared_type64='id _Nonnull' index='1' name='indirectBuffer' type64='@'/>
<arg declared_type64='NSUInteger' index='2' name='indirectBufferOffset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='drawPrimitives:vertexStart:vertexCount:' type64='v40@0:8Q16Q24Q32'>
<arg declared_type64='MTLPrimitiveType' index='0' name='primitiveType' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='vertexStart' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='vertexCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='drawPrimitives:vertexStart:vertexCount:instanceCount:' type64='v48@0:8Q16Q24Q32Q40'>
<arg declared_type64='MTLPrimitiveType' index='0' name='primitiveType' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='vertexStart' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='vertexCount' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='instanceCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='drawPrimitives:vertexStart:vertexCount:instanceCount:baseInstance:' type64='v56@0:8Q16Q24Q32Q40Q48'>
<arg declared_type64='MTLPrimitiveType' index='0' name='primitiveType' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='vertexStart' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='vertexCount' type64='Q'/>
<arg declared_type64='NSUInteger' index='3' name='instanceCount' type64='Q'/>
<arg declared_type64='NSUInteger' index='4' name='baseInstance' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setBlendColorRed:green:blue:alpha:' type64='v32@0:8f16f20f24f28'>
<arg declared_type64='float' index='0' name='red' type64='f'/>
<arg declared_type64='float' index='1' name='green' type64='f'/>
<arg declared_type64='float' index='2' name='blue' type64='f'/>
<arg declared_type64='float' index='3' name='alpha' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCullMode:' type64='v24@0:8Q16'>
<arg declared_type64='MTLCullMode' index='0' name='cullMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDepthBias:slopeScale:clamp:' type64='v28@0:8f16f20f24'>
<arg declared_type64='float' index='0' name='depthBias' type64='f'/>
<arg declared_type64='float' index='1' name='slopeScale' type64='f'/>
<arg declared_type64='float' index='2' name='clamp' type64='f'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDepthClipMode:' type64='v24@0:8Q16'>
<arg declared_type64='MTLDepthClipMode' index='0' name='depthClipMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDepthStencilState:' type64='v24@0:8@16'>
<arg declared_type64='id _Nullable' index='0' name='depthStencilState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentBuffer:offset:atIndex:' type64='v40@0:8@16Q24Q32'>
<arg declared_type64='id _Nullable' index='0' name='buffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='offset' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentBufferOffset:atIndex:' type64='v32@0:8Q16Q24'>
<arg declared_type64='NSUInteger' index='0' name='offset' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentBuffers:offsets:withRange:' type64='v48@0:8r^@16r^Q24{_NSRange=QQ}32'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='buffers' type64='^@'/>
<arg const='true' declared_type64='NSUInteger*' index='1' name='offset' type64='^Q'/>
<arg declared_type64='NSRange' index='2' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentBytes:length:atIndex:' type64='v40@0:8r^v16Q24Q32'>
<arg const='true' declared_type64='void * _Nonnull' index='0' name='bytes' type64='^v'/>
<arg declared_type64='NSUInteger' index='1' name='length' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentSamplerState:atIndex:' type64='v32@0:8@16Q24'>
<arg declared_type64='id _Nullable' index='0' name='sampler' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:' type64='v40@0:8@16f24f28Q32'>
<arg declared_type64='id _Nullable' index='0' name='sampler' type64='@'/>
<arg declared_type64='float' index='1' name='lodMinClamp' type64='f'/>
<arg declared_type64='float' index='2' name='lodMaxClamp' type64='f'/>
<arg declared_type64='NSUInteger' index='3' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:' type64='v56@0:8r^@16r^f24r^f32{_NSRange=QQ}40'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='samplers' type64='^@'/>
<arg const='true' declared_type64='float*' index='1' name='lodMinClamps' type64='^f'/>
<arg const='true' declared_type64='float*' index='2' name='lodMaxClamps' type64='^f'/>
<arg declared_type64='NSRange' index='3' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentSamplerStates:withRange:' type64='v40@0:8r^@16{_NSRange=QQ}24'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='samplers' type64='^@'/>
<arg declared_type64='NSRange' index='1' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentTexture:atIndex:' type64='v32@0:8@16Q24'>
<arg declared_type64='id _Nullable' index='0' name='texture' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFragmentTextures:withRange:' type64='v40@0:8r^@16{_NSRange=QQ}24'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='textures' type64='^@'/>
<arg declared_type64='NSRange' index='1' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setFrontFacingWinding:' type64='v24@0:8Q16'>
<arg declared_type64='MTLWinding' index='0' name='frontFacingWinding' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRenderPipelineState:' type64='v24@0:8@16'>
<arg declared_type64='id _Nonnull' index='0' name='pipelineState' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setScissorRect:' type64='v48@0:8{?=QQQQ}16'>
<arg declared_type64='MTLScissorRect' index='0' name='rect' type64='{_MTLScissorRect=QQQQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStencilFrontReferenceValue:backReferenceValue:' type64='v24@0:8I16I20'>
<arg declared_type64='uint32_t' index='0' name='frontReferenceValue' type64='I'/>
<arg declared_type64='uint32_t' index='1' name='backReferenceValue' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStencilReferenceValue:' type64='v20@0:8I16'>
<arg declared_type64='uint32_t' index='0' name='referenceValue' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setTriangleFillMode:' type64='v24@0:8Q16'>
<arg declared_type64='MTLTriangleFillMode' index='0' name='fillMode' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexBuffer:offset:atIndex:' type64='v40@0:8@16Q24Q32'>
<arg declared_type64='id _Nullable' index='0' name='buffer' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='offset' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexBufferOffset:atIndex:' type64='v32@0:8Q16Q24'>
<arg declared_type64='NSUInteger' index='0' name='offset' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexBuffers:offsets:withRange:' type64='v48@0:8r^@16r^Q24{_NSRange=QQ}32'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='buffers' type64='^@'/>
<arg const='true' declared_type64='NSUInteger*' index='1' name='offsets' type64='^Q'/>
<arg declared_type64='NSRange' index='2' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexBytes:length:atIndex:' type64='v40@0:8r^v16Q24Q32'>
<arg const='true' declared_type64='void * _Nonnull' index='0' name='bytes' type64='^v'/>
<arg declared_type64='NSUInteger' index='1' name='length' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexSamplerState:atIndex:' type64='v32@0:8@16Q24'>
<arg declared_type64='id _Nullable' index='0' name='sampler' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:' type64='v40@0:8@16f24f28Q32'>
<arg declared_type64='id _Nullable' index='0' name='sampler' type64='@'/>
<arg declared_type64='float' index='1' name='lodMinClamp' type64='f'/>
<arg declared_type64='float' index='2' name='lodMaxClamp' type64='f'/>
<arg declared_type64='NSUInteger' index='3' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:' type64='v56@0:8r^@16r^f24r^f32{_NSRange=QQ}40'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='samplers' type64='^@'/>
<arg const='true' declared_type64='float*' index='1' name='lodMinClamps' type64='^f'/>
<arg const='true' declared_type64='float*' index='2' name='lodMaxClamps' type64='^f'/>
<arg declared_type64='NSRange' index='3' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexSamplerStates:withRange:' type64='v40@0:8r^@16{_NSRange=QQ}24'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='samplers' type64='^@'/>
<arg declared_type64='NSRange' index='1' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexTexture:atIndex:' type64='v32@0:8@16Q24'>
<arg declared_type64='id _Nullable' index='0' name='texture' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='index' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVertexTextures:withRange:' type64='v40@0:8r^@16{_NSRange=QQ}24'>
<arg const='true' declared_type64='id _Nullable*' index='0' name='textures' type64='^@'/>
<arg declared_type64='NSRange' index='1' name='range' type64='{_NSRange=QQ}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setViewport:' type64='v64@0:8{?=dddddd}16'>
<arg declared_type64='MTLViewport' index='0' name='viewport' type64='{_MTLViewport=dddddd}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setVisibilityResultMode:offset:' type64='v32@0:8Q16Q24'>
<arg declared_type64='MTLVisibilityResultMode' index='0' name='mode' type64='Q'/>
<arg declared_type64='NSUInteger' index='1' name='offset' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='textureBarrier' type64='v16@0:8'>
<retval declared_type64='void' type64='v'/>
</method>
</informal_protocol>
<informal_protocol name='MTLRenderPipelineState'>
<method selector='device' type64='@16@0:8'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='label' type64='@16@0:8'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
</informal_protocol>
<informal_protocol name='MTLResource'>
<method selector='cpuCacheMode' type64='Q16@0:8'>
<retval declared_type64='MTLCPUCacheMode' type64='Q'/>
</method>
<method selector='device' type64='@16@0:8'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='label' type64='@16@0:8'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='setLabel:' type64='v24@0:8@16'>
<arg declared_type64='NSString * _Nullable' index='0' name='label' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setPurgeableState:' type64='Q24@0:8Q16'>
<arg declared_type64='MTLPurgeableState' index='0' name='state' type64='Q'/>
<retval declared_type64='MTLPurgeableState' type64='Q'/>
</method>
<method selector='storageMode' type64='Q16@0:8'>
<retval declared_type64='MTLStorageMode' type64='Q'/>
</method>
</informal_protocol>
<informal_protocol name='MTLSamplerState'>
<method selector='device' type64='@16@0:8'>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='label' type64='@16@0:8'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
</informal_protocol>
<informal_protocol name='MTLTexture'>
<method selector='arrayLength' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='depth' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='getBytes:bytesPerRow:bytesPerImage:fromRegion:mipmapLevel:slice:' type64='v104@0:8^v16Q24Q32{?={?=QQQ}{?=QQQ}}40Q88Q96'>
<arg declared_type64='void * _Nonnull' index='0' name='pixelBytes' type64='^v'/>
<arg declared_type64='NSUInteger' index='1' name='bytesPerRow' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='bytesPerImage' type64='Q'/>
<arg declared_type64='MTLRegion' index='3' name='region' type64='{_MTLRegion={_MTLOrigin=QQQ}{_MTLSize=QQQ}}'/>
<arg declared_type64='NSUInteger' index='4' name='level' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='slice' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='getBytes:bytesPerRow:fromRegion:mipmapLevel:' type64='v88@0:8^v16Q24{?={?=QQQ}{?=QQQ}}32Q80'>
<arg declared_type64='void * _Nonnull' index='0' name='pixelBytes' type64='^v'/>
<arg declared_type64='NSUInteger' index='1' name='bytesPerRow' type64='Q'/>
<arg declared_type64='MTLRegion' index='2' name='region' type64='{_MTLRegion={_MTLOrigin=QQQ}{_MTLSize=QQQ}}'/>
<arg declared_type64='NSUInteger' index='3' name='level' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='height' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='iosurface' type64='^{__IOSurface=}16@0:8'>
<retval declared_type64='IOSurfaceRef _Nullable' type64='^{__IOSurface=}'/>
</method>
<method selector='iosurfacePlane' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='isFramebufferOnly' type64='B16@0:8'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='mipmapLevelCount' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='newTextureViewWithPixelFormat:' type64='@24@0:8Q16'>
<arg declared_type64='MTLPixelFormat' index='0' name='pixelFormat' type64='Q'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='newTextureViewWithPixelFormat:textureType:levels:slices:' type64='@64@0:8Q16Q24{_NSRange=QQ}32{_NSRange=QQ}48'>
<arg declared_type64='MTLPixelFormat' index='0' name='pixelFormat' type64='Q'/>
<arg declared_type64='MTLTextureType' index='1' name='textureType' type64='Q'/>
<arg declared_type64='NSRange' index='2' name='levelRange' type64='{_NSRange=QQ}'/>
<arg declared_type64='NSRange' index='3' name='sliceRange' type64='{_NSRange=QQ}'/>
<retval declared_type64='id _Nonnull' type64='@'/>
</method>
<method selector='parentRelativeLevel' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='parentRelativeSlice' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='parentTexture' type64='@16@0:8'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='pixelFormat' type64='Q16@0:8'>
<retval declared_type64='MTLPixelFormat' type64='Q'/>
</method>
<method selector='replaceRegion:mipmapLevel:slice:withBytes:bytesPerRow:bytesPerImage:' type64='v104@0:8{?={?=QQQ}{?=QQQ}}16Q64Q72r^v80Q88Q96'>
<arg declared_type64='MTLRegion' index='0' name='region' type64='{_MTLRegion={_MTLOrigin=QQQ}{_MTLSize=QQQ}}'/>
<arg declared_type64='NSUInteger' index='1' name='level' type64='Q'/>
<arg declared_type64='NSUInteger' index='2' name='slice' type64='Q'/>
<arg const='true' declared_type64='void * _Nonnull' index='3' name='pixelBytes' type64='^v'/>
<arg declared_type64='NSUInteger' index='4' name='bytesPerRow' type64='Q'/>
<arg declared_type64='NSUInteger' index='5' name='bytesPerImage' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='replaceRegion:mipmapLevel:withBytes:bytesPerRow:' type64='v88@0:8{?={?=QQQ}{?=QQQ}}16Q64r^v72Q80'>
<arg declared_type64='MTLRegion' index='0' name='region' type64='{_MTLRegion={_MTLOrigin=QQQ}{_MTLSize=QQQ}}'/>
<arg declared_type64='NSUInteger' index='1' name='level' type64='Q'/>
<arg const='true' declared_type64='void * _Nonnull' index='2' name='pixelBytes' type64='^v'/>
<arg declared_type64='NSUInteger' index='3' name='bytesPerRow' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='rootResource' type64='@16@0:8'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='sampleCount' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='textureType' type64='Q16@0:8'>
<retval declared_type64='MTLTextureType' type64='Q'/>
</method>
<method selector='usage' type64='Q16@0:8'>
<retval declared_type64='MTLTextureUsage' type64='Q'/>
</method>
<method selector='width' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
</informal_protocol>
</signatures>
