<?xml version='1.0'?>
<signatures version='1.0'>
<depends_on path='/System/Library/Frameworks/CoreFoundation.framework'/>
<struct name='ActiveCommandTrace' type='{ActiveCommandTrace=&quot;cmdPtr&quot;^{Command}&quot;nextPtr&quot;^{ActiveCommandTrace}&quot;nextTracePtr&quot;^{CommandTrace}&quot;reverseScan&quot;i}'>
<field declared_type='struct Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<field declared_type='struct ActiveCommandTrace*' name='nextPtr' type='^{ActiveCommandTrace=^{Command}^{ActiveCommandTrace}^{CommandTrace}i}'/>
<field declared_type='CommandTrace*' name='nextTracePtr' type='^{CommandTrace=^?^vi^{CommandTrace}i}'/>
<field declared_type='int' name='reverseScan' type='i'/>
</struct>
<struct name='ActiveInterpTrace' type='{ActiveInterpTrace=&quot;nextPtr&quot;^{ActiveInterpTrace}&quot;nextTracePtr&quot;^{Trace}&quot;reverseScan&quot;i}'>
<field declared_type='struct ActiveInterpTrace*' name='nextPtr' type='^{ActiveInterpTrace=^{ActiveInterpTrace}^{Trace}i}'/>
<field declared_type='Trace*' name='nextTracePtr' type='^{Trace=i^?^v^{Trace}i^?}'/>
<field declared_type='int' name='reverseScan' type='i'/>
</struct>
<struct name='ActiveVarTrace' type='{ActiveVarTrace=&quot;varPtr&quot;^{Var}&quot;nextPtr&quot;^{ActiveVarTrace}&quot;nextTracePtr&quot;^{VarTrace}}'>
<field declared_type='struct Var*' name='varPtr' type='^{Var=i(?=^{Tcl_Obj}^{TclVarHashTable}^{Var})}'/>
<field declared_type='struct ActiveVarTrace*' name='nextPtr' type='^{ActiveVarTrace=^{Var}^{ActiveVarTrace}^{VarTrace}}'/>
<field declared_type='VarTrace*' name='nextTracePtr' type='^{VarTrace=^?^vi^{VarTrace}}'/>
</struct>
<struct name='ArraySearch' type='{ArraySearch=&quot;id&quot;i&quot;varPtr&quot;^{Var}&quot;search&quot;{Tcl_HashSearch=&quot;tablePtr&quot;^{Tcl_HashTable}&quot;nextIndex&quot;i&quot;nextEntryPtr&quot;^{Tcl_HashEntry}}&quot;nextEntry&quot;^{Tcl_HashEntry}&quot;nextPtr&quot;^{ArraySearch}}'>
<field declared_type='int' name='id' type='i'/>
<field declared_type='struct Var*' name='varPtr' type='^{Var=i(?=^{Tcl_Obj}^{TclVarHashTable}^{Var})}'/>
<field declared_type='Tcl_HashSearch' name='search' type='{Tcl_HashSearch=&quot;tablePtr&quot;^{Tcl_HashTable}&quot;nextIndex&quot;i&quot;nextEntryPtr&quot;^{Tcl_HashEntry}}'/>
<field declared_type='Tcl_HashEntry*' name='nextEntry' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
<field declared_type='struct ArraySearch*' name='nextPtr' type='^{ArraySearch=i^{Var}{Tcl_HashSearch=^{Tcl_HashTable}i^{Tcl_HashEntry}}^{Tcl_HashEntry}^{ArraySearch}}'/>
</struct>
<struct name='AssocData' type='{AssocData=&quot;proc&quot;^?&quot;clientData&quot;^v}'>
<field declared_type='Tcl_InterpDeleteProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='ClientData' name='clientData' type='^v'/>
</struct>
<struct name='AuxData' type='{AuxData=&quot;type&quot;^{AuxDataType}&quot;clientData&quot;^v}'>
<field declared_type='AuxDataType*' name='type' type='^{AuxDataType=*^?^?^?}'/>
<field declared_type='ClientData' name='clientData' type='^v'/>
</struct>
<struct name='AuxDataType' type='{AuxDataType=&quot;name&quot;*&quot;dupProc&quot;^?&quot;freeProc&quot;^?&quot;printProc&quot;^?}'>
<field declared_type='char*' name='name' type='*'/>
<field declared_type='AuxDataDupProc*' function_pointer='true' name='dupProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='ClientData' type='^v'/>
</field>
<field declared_type='AuxDataFreeProc*' function_pointer='true' name='freeProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='AuxDataPrintProc*' function_pointer='true' name='printProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='struct ByteCode*' type='^{ByteCode=^^vi^{Namespace}iiI*^{Proc}Iiiiiiiiii*^^{Tcl_Obj}^{ExceptionRange}^{AuxData}****^{LocalCache}}' type64='^{ByteCode=^^vi^{Namespace}iiI*^{Proc}Qiiiiiiiii*^^{Tcl_Obj}^{ExceptionRange}^{AuxData}****^{LocalCache}}'/>
<arg declared_type='unsigned int' type='I'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='ByteCode' type='{ByteCode=&quot;interpHandle&quot;^^v&quot;compileEpoch&quot;i&quot;nsPtr&quot;^{Namespace}&quot;nsEpoch&quot;i&quot;refCount&quot;i&quot;flags&quot;I&quot;source&quot;*&quot;procPtr&quot;^{Proc}&quot;structureSize&quot;I&quot;numCommands&quot;i&quot;numSrcBytes&quot;i&quot;numCodeBytes&quot;i&quot;numLitObjects&quot;i&quot;numExceptRanges&quot;i&quot;numAuxDataItems&quot;i&quot;numCmdLocBytes&quot;i&quot;maxExceptDepth&quot;i&quot;maxStackDepth&quot;i&quot;codeStart&quot;*&quot;objArrayPtr&quot;^^{Tcl_Obj}&quot;exceptArrayPtr&quot;^{ExceptionRange}&quot;auxDataArrayPtr&quot;^{AuxData}&quot;codeDeltaStart&quot;*&quot;codeLengthStart&quot;*&quot;srcDeltaStart&quot;*&quot;srcLengthStart&quot;*&quot;localCachePtr&quot;^{LocalCache}}' type64='{ByteCode=&quot;interpHandle&quot;^^v&quot;compileEpoch&quot;i&quot;nsPtr&quot;^{Namespace}&quot;nsEpoch&quot;i&quot;refCount&quot;i&quot;flags&quot;I&quot;source&quot;*&quot;procPtr&quot;^{Proc}&quot;structureSize&quot;Q&quot;numCommands&quot;i&quot;numSrcBytes&quot;i&quot;numCodeBytes&quot;i&quot;numLitObjects&quot;i&quot;numExceptRanges&quot;i&quot;numAuxDataItems&quot;i&quot;numCmdLocBytes&quot;i&quot;maxExceptDepth&quot;i&quot;maxStackDepth&quot;i&quot;codeStart&quot;*&quot;objArrayPtr&quot;^^{Tcl_Obj}&quot;exceptArrayPtr&quot;^{ExceptionRange}&quot;auxDataArrayPtr&quot;^{AuxData}&quot;codeDeltaStart&quot;*&quot;codeLengthStart&quot;*&quot;srcDeltaStart&quot;*&quot;srcLengthStart&quot;*&quot;localCachePtr&quot;^{LocalCache}}'>
<field declared_type='TclHandle' name='interpHandle' type='^^v'/>
<field declared_type='int' name='compileEpoch' type='i'/>
<field declared_type='Namespace*' name='nsPtr' type='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}l^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}' type64='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}q^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}'/>
<field declared_type='int' name='nsEpoch' type='i'/>
<field declared_type='int' name='refCount' type='i'/>
<field declared_type='unsigned int' name='flags' type='I'/>
<field const='true' declared_type='char*' name='source' type='*'/>
<field declared_type='Proc*' name='procPtr' type='^{Proc=^{Interp}i^{Command}^{Tcl_Obj}ii^{CompiledLocal}^{CompiledLocal}}'/>
<field declared_type='size_t' name='structureSize' type='L' type64='Q'/>
<field declared_type='int' name='numCommands' type='i'/>
<field declared_type='int' name='numSrcBytes' type='i'/>
<field declared_type='int' name='numCodeBytes' type='i'/>
<field declared_type='int' name='numLitObjects' type='i'/>
<field declared_type='int' name='numExceptRanges' type='i'/>
<field declared_type='int' name='numAuxDataItems' type='i'/>
<field declared_type='int' name='numCmdLocBytes' type='i'/>
<field declared_type='int' name='maxExceptDepth' type='i'/>
<field declared_type='int' name='maxStackDepth' type='i'/>
<field declared_type='unsigned char*' name='codeStart' type='*'/>
<field declared_type='Tcl_Obj**' name='objArrayPtr' type='^^{Tcl_Obj}'/>
<field declared_type='ExceptionRange*' name='exceptArrayPtr' type='^{ExceptionRange=iiiiiii}'/>
<field declared_type='AuxData*' name='auxDataArrayPtr' type='^{AuxData=^{AuxDataType}^v}'/>
<field declared_type='unsigned char*' name='codeDeltaStart' type='*'/>
<field declared_type='unsigned char*' name='codeLengthStart' type='*'/>
<field declared_type='unsigned char*' name='srcDeltaStart' type='*'/>
<field declared_type='unsigned char*' name='srcLengthStart' type='*'/>
<field declared_type='LocalCache*' name='localCachePtr' type='^{LocalCache=ii^{Tcl_Obj}}'/>
</struct>
<struct name='CFWord' type='{CFWord=&quot;framePtr&quot;^{CmdFrame}&quot;word&quot;i&quot;refCount&quot;i}'>
<field declared_type='CmdFrame*' name='framePtr' type='^{CmdFrame=ii^ii^{CallFrame}^{CmdFrame}(?={?=^{Tcl_Obj}}{?=^v*})(?={?=*i}^{Tcl_Obj})}'/>
<field declared_type='int' name='word' type='i'/>
<field declared_type='int' name='refCount' type='i'/>
</struct>
<struct name='CFWordBC' type='{CFWordBC=&quot;framePtr&quot;^{CmdFrame}&quot;pc&quot;i&quot;word&quot;i&quot;prevPtr&quot;^{CFWordBC}}'>
<field declared_type='CmdFrame*' name='framePtr' type='^{CmdFrame=ii^ii^{CallFrame}^{CmdFrame}(?={?=^{Tcl_Obj}}{?=^v*})(?={?=*i}^{Tcl_Obj})}'/>
<field declared_type='int' name='pc' type='i'/>
<field declared_type='int' name='word' type='i'/>
<field declared_type='struct CFWordBC*' name='prevPtr' type='^{CFWordBC=^{CmdFrame}ii^{CFWordBC}}'/>
</struct>
<struct name='CallFrame' type='{CallFrame=&quot;nsPtr&quot;^{Namespace}&quot;isProcCallFrame&quot;i&quot;objc&quot;i&quot;objv&quot;^^{Tcl_Obj}&quot;callerPtr&quot;^{CallFrame}&quot;callerVarPtr&quot;^{CallFrame}&quot;level&quot;i&quot;procPtr&quot;^{Proc}&quot;varTablePtr&quot;^{TclVarHashTable}&quot;numCompiledLocals&quot;i&quot;compiledLocals&quot;^{Var}&quot;clientData&quot;^v&quot;localCachePtr&quot;^{LocalCache}}'>
<field declared_type='Namespace*' name='nsPtr' type='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}l^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}' type64='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}q^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}'/>
<field declared_type='int' name='isProcCallFrame' type='i'/>
<field declared_type='int' name='objc' type='i'/>
<field const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<field declared_type='struct CallFrame*' name='callerPtr' type='^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}'/>
<field declared_type='struct CallFrame*' name='callerVarPtr' type='^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}'/>
<field declared_type='int' name='level' type='i'/>
<field declared_type='Proc*' name='procPtr' type='^{Proc=^{Interp}i^{Command}^{Tcl_Obj}ii^{CompiledLocal}^{CompiledLocal}}'/>
<field declared_type='TclVarHashTable*' name='varTablePtr' type='^{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}'/>
<field declared_type='int' name='numCompiledLocals' type='i'/>
<field declared_type='Var*' name='compiledLocals' type='^{Var=i(?=^{Tcl_Obj}^{TclVarHashTable}^{Var})}'/>
<field declared_type='ClientData' name='clientData' type='^v'/>
<field declared_type='LocalCache*' name='localCachePtr' type='^{LocalCache=ii^{Tcl_Obj}}'/>
</struct>
<struct name='CmdFrame' type='{CmdFrame=&quot;type&quot;i&quot;level&quot;i&quot;line&quot;^i&quot;nline&quot;i&quot;framePtr&quot;^{CallFrame=&quot;nsPtr&quot;^{Namespace}&quot;isProcCallFrame&quot;i&quot;objc&quot;i&quot;objv&quot;^^{Tcl_Obj}&quot;callerPtr&quot;^{CallFrame}&quot;callerVarPtr&quot;^{CallFrame}&quot;level&quot;i&quot;procPtr&quot;^{Proc}&quot;varTablePtr&quot;^{TclVarHashTable}&quot;numCompiledLocals&quot;i&quot;compiledLocals&quot;^{Var}&quot;clientData&quot;^v&quot;localCachePtr&quot;^{LocalCache}}&quot;nextPtr&quot;^{CmdFrame}&quot;data&quot;(?=&quot;eval&quot;{?=&quot;path&quot;^{Tcl_Obj}}&quot;tebc&quot;{?=&quot;codePtr&quot;^v&quot;pc&quot;*})&quot;cmd&quot;(?=&quot;str&quot;{?=&quot;cmd&quot;*&quot;len&quot;i}&quot;listPtr&quot;^{Tcl_Obj})}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='int' name='level' type='i'/>
<field declared_type='int*' name='line' type='^i'/>
<field declared_type='int' name='nline' type='i'/>
<field declared_type='CallFrame*' name='framePtr' type='^{CallFrame=&quot;nsPtr&quot;^{Namespace}&quot;isProcCallFrame&quot;i&quot;objc&quot;i&quot;objv&quot;^^{Tcl_Obj}&quot;callerPtr&quot;^{CallFrame}&quot;callerVarPtr&quot;^{CallFrame}&quot;level&quot;i&quot;procPtr&quot;^{Proc}&quot;varTablePtr&quot;^{TclVarHashTable}&quot;numCompiledLocals&quot;i&quot;compiledLocals&quot;^{Var}&quot;clientData&quot;^v&quot;localCachePtr&quot;^{LocalCache}}'/>
<field declared_type='struct CmdFrame*' name='nextPtr' type='^{CmdFrame=ii^ii^{CallFrame}^{CmdFrame}(?={?=^{Tcl_Obj}}{?=^v*})(?={?=*i}^{Tcl_Obj})}'/>
<field declared_type='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/System/Library/Frameworks/Tcl.framework/Headers/tcl-private/tclInt.h:1110:5)' name='data' type='(?=&quot;eval&quot;{?=&quot;path&quot;^{Tcl_Obj}}&quot;tebc&quot;{?=&quot;codePtr&quot;^v&quot;pc&quot;*})'/>
<field declared_type='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/System/Library/Frameworks/Tcl.framework/Headers/tcl-private/tclInt.h:1120:5)' name='cmd' type='(?=&quot;str&quot;{?=&quot;cmd&quot;*&quot;len&quot;i}&quot;listPtr&quot;^{Tcl_Obj})'/>
</struct>
<struct name='CmdLocation' type='{CmdLocation=&quot;codeOffset&quot;i&quot;numCodeBytes&quot;i&quot;srcOffset&quot;i&quot;numSrcBytes&quot;i}'>
<field declared_type='int' name='codeOffset' type='i'/>
<field declared_type='int' name='numCodeBytes' type='i'/>
<field declared_type='int' name='srcOffset' type='i'/>
<field declared_type='int' name='numSrcBytes' type='i'/>
</struct>
<struct name='Command' type='{Command=&quot;hPtr&quot;^{Tcl_HashEntry}&quot;nsPtr&quot;^{Namespace}&quot;refCount&quot;i&quot;cmdEpoch&quot;i&quot;compileProc&quot;^?&quot;objProc&quot;^?&quot;objClientData&quot;^v&quot;proc&quot;^?&quot;clientData&quot;^v&quot;deleteProc&quot;^?&quot;deleteData&quot;^v&quot;flags&quot;i&quot;importRefPtr&quot;^{ImportRef}&quot;tracePtr&quot;^{CommandTrace}}'>
<field declared_type='Tcl_HashEntry*' name='hPtr' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
<field declared_type='Namespace*' name='nsPtr' type='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}l^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}' type64='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}q^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}'/>
<field declared_type='int' name='refCount' type='i'/>
<field declared_type='int' name='cmdEpoch' type='i'/>
<field declared_type='CompileProc*' function_pointer='true' name='compileProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='struct Command*' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_ObjCmdProc*' function_pointer='true' name='objProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='struct Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='ClientData' name='objClientData' type='^v'/>
<field declared_type='Tcl_CmdProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='ClientData' name='clientData' type='^v'/>
<field declared_type='Tcl_CmdDeleteProc*' function_pointer='true' name='deleteProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='ClientData' name='deleteData' type='^v'/>
<field declared_type='int' name='flags' type='i'/>
<field declared_type='ImportRef*' name='importRefPtr' type='^{ImportRef=^{Command}^{ImportRef}}'/>
<field declared_type='CommandTrace*' name='tracePtr' type='^{CommandTrace=^?^vi^{CommandTrace}i}'/>
</struct>
<struct name='CommandTrace' type='{CommandTrace=&quot;traceProc&quot;^?&quot;clientData&quot;^v&quot;flags&quot;i&quot;nextPtr&quot;^{CommandTrace}&quot;refCount&quot;i}'>
<field declared_type='Tcl_CommandTraceProc*' function_pointer='true' name='traceProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='ClientData' name='clientData' type='^v'/>
<field declared_type='int' name='flags' type='i'/>
<field declared_type='struct CommandTrace*' name='nextPtr' type='^{CommandTrace=^?^vi^{CommandTrace}i}'/>
<field declared_type='int' name='refCount' type='i'/>
</struct>
<struct name='CompileEnv' type='{CompileEnv=&quot;iPtr&quot;^{Interp}&quot;source&quot;*&quot;numSrcBytes&quot;i&quot;procPtr&quot;^{Proc}&quot;numCommands&quot;i&quot;exceptDepth&quot;i&quot;maxExceptDepth&quot;i&quot;maxStackDepth&quot;i&quot;currStackDepth&quot;i&quot;localLitTable&quot;{LiteralTable=&quot;buckets&quot;^^{LiteralEntry}&quot;staticBuckets&quot;[4^{LiteralEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;mask&quot;i}&quot;codeStart&quot;*&quot;codeNext&quot;*&quot;codeEnd&quot;*&quot;mallocedCodeArray&quot;i&quot;literalArrayPtr&quot;^{LiteralEntry}&quot;literalArrayNext&quot;i&quot;literalArrayEnd&quot;i&quot;mallocedLiteralArray&quot;i&quot;exceptArrayPtr&quot;^{ExceptionRange}&quot;exceptArrayNext&quot;i&quot;exceptArrayEnd&quot;i&quot;mallocedExceptArray&quot;i&quot;cmdMapPtr&quot;^{CmdLocation}&quot;cmdMapEnd&quot;i&quot;mallocedCmdMap&quot;i&quot;auxDataArrayPtr&quot;^{AuxData}&quot;auxDataArrayNext&quot;i&quot;auxDataArrayEnd&quot;i&quot;mallocedAuxDataArray&quot;i&quot;staticCodeSpace&quot;[250C]&quot;staticLiteralSpace&quot;[60{LiteralEntry=&quot;nextPtr&quot;^{LiteralEntry}&quot;objPtr&quot;^{Tcl_Obj}&quot;refCount&quot;i&quot;nsPtr&quot;^{Namespace}}]&quot;staticExceptArraySpace&quot;[5{ExceptionRange=&quot;type&quot;i&quot;nestingLevel&quot;i&quot;codeOffset&quot;i&quot;numCodeBytes&quot;i&quot;breakOffset&quot;i&quot;continueOffset&quot;i&quot;catchOffset&quot;i}]&quot;staticCmdMapSpace&quot;[40{CmdLocation=&quot;codeOffset&quot;i&quot;numCodeBytes&quot;i&quot;srcOffset&quot;i&quot;numSrcBytes&quot;i}]&quot;staticAuxDataArraySpace&quot;[5{AuxData=&quot;type&quot;^{AuxDataType}&quot;clientData&quot;^v}]&quot;extCmdMapPtr&quot;^{ExtCmdLoc}&quot;line&quot;i&quot;atCmdStart&quot;i&quot;clLoc&quot;^{ContLineLoc}&quot;clNext&quot;^i}'>
<field declared_type='Interp*' name='iPtr' type='^{Interp=*^?i^{TclStubs}^^v^{Namespace}^{Tcl_HashTable}^v{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}ii^{CallFrame}^{CallFrame}^{ActiveVarTrace}i^{CallFrame}^{Namespace}*ii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}*iii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}i^{Proc}^{ResolverScheme}^{Tcl_Obj}il^{Trace}^{Tcl_HashTable}^{ExecEnv}^{Tcl_Obj}[201c]^{Tcl_Obj}^{Tcl_ThreadId_}^{ActiveCommandTrace}^{ActiveInterpTrace}i^{Tcl_Obj}^{Tcl_Obj}^{Tcl_Obj}^{Tcl_Obj}^{Tcl_Obj}i{?=iiii^{LimitHandler}i{Tcl_Time=ll}^{LimitHandler}i^{Tcl_TimerToken_}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}}{?=^^{Tcl_Obj}ii}^{Tcl_Obj}^{CmdFrame}^{CmdFrame}i^{Tcl_HashTable}^{Tcl_HashTable}^{Tcl_HashTable}^{Tcl_HashTable}^{ContLineLoc}i{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^v^v^i^i}' type64='^{Interp=*^?i^{TclStubs}^^v^{Namespace}^{Tcl_HashTable}^v{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}ii^{CallFrame}^{CallFrame}^{ActiveVarTrace}i^{CallFrame}^{Namespace}*ii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}*iii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}i^{Proc}^{ResolverScheme}^{Tcl_Obj}iq^{Trace}^{Tcl_HashTable}^{ExecEnv}^{Tcl_Obj}[201c]^{Tcl_Obj}^{Tcl_ThreadId_}^{ActiveCommandTrace}^{ActiveInterpTrace}i^{Tcl_Obj}^{Tcl_Obj}^{Tcl_Obj}^{Tcl_Obj}^{Tcl_Obj}i{?=iiii^{LimitHandler}i{Tcl_Time=qq}^{LimitHandler}i^{Tcl_TimerToken_}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}}{?=^^{Tcl_Obj}ii}^{Tcl_Obj}^{CmdFrame}^{CmdFrame}i^{Tcl_HashTable}^{Tcl_HashTable}^{Tcl_HashTable}^{Tcl_HashTable}^{ContLineLoc}i{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^v^v^i^i}'/>
<field const='true' declared_type='char*' name='source' type='*'/>
<field declared_type='int' name='numSrcBytes' type='i'/>
<field declared_type='Proc*' name='procPtr' type='^{Proc=^{Interp}i^{Command}^{Tcl_Obj}ii^{CompiledLocal}^{CompiledLocal}}'/>
<field declared_type='int' name='numCommands' type='i'/>
<field declared_type='int' name='exceptDepth' type='i'/>
<field declared_type='int' name='maxExceptDepth' type='i'/>
<field declared_type='int' name='maxStackDepth' type='i'/>
<field declared_type='int' name='currStackDepth' type='i'/>
<field declared_type='LiteralTable' name='localLitTable' type='{LiteralTable=&quot;buckets&quot;^^{LiteralEntry}&quot;staticBuckets&quot;[4^{LiteralEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;mask&quot;i}'/>
<field declared_type='unsigned char*' name='codeStart' type='*'/>
<field declared_type='unsigned char*' name='codeNext' type='*'/>
<field declared_type='unsigned char*' name='codeEnd' type='*'/>
<field declared_type='int' name='mallocedCodeArray' type='i'/>
<field declared_type='LiteralEntry*' name='literalArrayPtr' type='^{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}'/>
<field declared_type='int' name='literalArrayNext' type='i'/>
<field declared_type='int' name='literalArrayEnd' type='i'/>
<field declared_type='int' name='mallocedLiteralArray' type='i'/>
<field declared_type='ExceptionRange*' name='exceptArrayPtr' type='^{ExceptionRange=iiiiiii}'/>
<field declared_type='int' name='exceptArrayNext' type='i'/>
<field declared_type='int' name='exceptArrayEnd' type='i'/>
<field declared_type='int' name='mallocedExceptArray' type='i'/>
<field declared_type='CmdLocation*' name='cmdMapPtr' type='^{CmdLocation=iiii}'/>
<field declared_type='int' name='cmdMapEnd' type='i'/>
<field declared_type='int' name='mallocedCmdMap' type='i'/>
<field declared_type='AuxData*' name='auxDataArrayPtr' type='^{AuxData=^{AuxDataType}^v}'/>
<field declared_type='int' name='auxDataArrayNext' type='i'/>
<field declared_type='int' name='auxDataArrayEnd' type='i'/>
<field declared_type='int' name='mallocedAuxDataArray' type='i'/>
<field declared_type='unsigned char*' name='staticCodeSpace' type='[250C]'/>
<field declared_type='LiteralEntry*' name='staticLiteralSpace' type='[60{LiteralEntry=&quot;nextPtr&quot;^{LiteralEntry}&quot;objPtr&quot;^{Tcl_Obj}&quot;refCount&quot;i&quot;nsPtr&quot;^{Namespace}}]'/>
<field declared_type='ExceptionRange*' name='staticExceptArraySpace' type='[5{ExceptionRange=&quot;type&quot;i&quot;nestingLevel&quot;i&quot;codeOffset&quot;i&quot;numCodeBytes&quot;i&quot;breakOffset&quot;i&quot;continueOffset&quot;i&quot;catchOffset&quot;i}]'/>
<field declared_type='CmdLocation*' name='staticCmdMapSpace' type='[40{CmdLocation=&quot;codeOffset&quot;i&quot;numCodeBytes&quot;i&quot;srcOffset&quot;i&quot;numSrcBytes&quot;i}]'/>
<field declared_type='AuxData*' name='staticAuxDataArraySpace' type='[5{AuxData=&quot;type&quot;^{AuxDataType}&quot;clientData&quot;^v}]'/>
<field declared_type='ExtCmdLoc*' name='extCmdMapPtr' type='^{ExtCmdLoc=ii^{Tcl_Obj}^{ECL}ii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}}'/>
<field declared_type='int' name='line' type='i'/>
<field declared_type='int' name='atCmdStart' type='i'/>
<field declared_type='ContLineLoc*' name='clLoc' type='^{ContLineLoc=i[1i]}'/>
<field declared_type='int*' name='clNext' type='^i'/>
</struct>
<struct name='CompiledLocal' type='{CompiledLocal=&quot;nextPtr&quot;^{CompiledLocal}&quot;nameLength&quot;i&quot;frameIndex&quot;i&quot;flags&quot;i&quot;defValuePtr&quot;^{Tcl_Obj}&quot;resolveInfo&quot;^{Tcl_ResolvedVarInfo}&quot;name&quot;[4c]}'>
<field declared_type='struct CompiledLocal*' name='nextPtr' type='^{CompiledLocal=^{CompiledLocal}iii^{Tcl_Obj}^{Tcl_ResolvedVarInfo}[4c]}'/>
<field declared_type='int' name='nameLength' type='i'/>
<field declared_type='int' name='frameIndex' type='i'/>
<field declared_type='int' name='flags' type='i'/>
<field declared_type='Tcl_Obj*' name='defValuePtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<field declared_type='Tcl_ResolvedVarInfo*' name='resolveInfo' type='^{Tcl_ResolvedVarInfo=^?^?}'/>
<field declared_type='char*' name='name' type='[4c]'/>
</struct>
<struct name='ContLineLoc' type='{ContLineLoc=&quot;num&quot;i&quot;loc&quot;[1i]}'>
<field declared_type='int' name='num' type='i'/>
<field declared_type='int*' name='loc' type='[1i]'/>
</struct>
<struct name='DictUpdateInfo' type='{_DictUpdateInfo=&quot;length&quot;i&quot;varIndices&quot;[1i]}'>
<field declared_type='int' name='length' type='i'/>
<field declared_type='int*' name='varIndices' type='[1i]'/>
</struct>
<struct name='ECL' type='{ECL=&quot;srcOffset&quot;i&quot;nline&quot;i&quot;line&quot;^i&quot;next&quot;^^i}'>
<field declared_type='int' name='srcOffset' type='i'/>
<field declared_type='int' name='nline' type='i'/>
<field declared_type='int*' name='line' type='^i'/>
<field declared_type='int**' name='next' type='^^i'/>
</struct>
<struct name='EnsembleCmdRep' type='{_EnsembleCmdRep=&quot;nsPtr&quot;^{Namespace}&quot;epoch&quot;i&quot;token&quot;^{Tcl_Command_}&quot;fullSubcmdName&quot;*&quot;realPrefixObj&quot;^{Tcl_Obj}}'>
<field declared_type='Namespace*' name='nsPtr' type='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}l^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}' type64='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}q^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}'/>
<field declared_type='int' name='epoch' type='i'/>
<field declared_type='Tcl_Command' name='token' type='^{Tcl_Command_=}'/>
<field declared_type='char*' name='fullSubcmdName' type='*'/>
<field declared_type='Tcl_Obj*' name='realPrefixObj' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</struct>
<struct name='EnsembleImplMap' type='{_EnsembleImplMap=&quot;name&quot;*&quot;proc&quot;^?&quot;compileProc&quot;^?}'>
<field const='true' declared_type='char*' name='name' type='*'/>
<field declared_type='Tcl_ObjCmdProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='struct Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='CompileProc*' function_pointer='true' name='compileProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='struct Command*' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</field>
</struct>
<struct name='ExceptionRange' type='{ExceptionRange=&quot;type&quot;i&quot;nestingLevel&quot;i&quot;codeOffset&quot;i&quot;numCodeBytes&quot;i&quot;breakOffset&quot;i&quot;continueOffset&quot;i&quot;catchOffset&quot;i}'>
<field declared_type='ExceptionRangeType' name='type' type='i'/>
<field declared_type='int' name='nestingLevel' type='i'/>
<field declared_type='int' name='codeOffset' type='i'/>
<field declared_type='int' name='numCodeBytes' type='i'/>
<field declared_type='int' name='breakOffset' type='i'/>
<field declared_type='int' name='continueOffset' type='i'/>
<field declared_type='int' name='catchOffset' type='i'/>
</struct>
<struct name='ExecEnv' type='{ExecEnv=&quot;execStackPtr&quot;^{ExecStack}&quot;constants&quot;[2^{Tcl_Obj}]}'>
<field declared_type='ExecStack*' name='execStackPtr' type='^{ExecStack=^{ExecStack}^{ExecStack}^^{Tcl_Obj}^^{Tcl_Obj}^^{Tcl_Obj}[1^{Tcl_Obj}]}'/>
<field declared_type='Tcl_Obj**' name='constants' type='[2^{Tcl_Obj}]'/>
</struct>
<struct name='ExecStack' type='{ExecStack=&quot;prevPtr&quot;^{ExecStack}&quot;nextPtr&quot;^{ExecStack}&quot;markerPtr&quot;^^{Tcl_Obj}&quot;endPtr&quot;^^{Tcl_Obj}&quot;tosPtr&quot;^^{Tcl_Obj}&quot;stackWords&quot;[1^{Tcl_Obj}]}'>
<field declared_type='struct ExecStack*' name='prevPtr' type='^{ExecStack=^{ExecStack}^{ExecStack}^^{Tcl_Obj}^^{Tcl_Obj}^^{Tcl_Obj}[1^{Tcl_Obj}]}'/>
<field declared_type='struct ExecStack*' name='nextPtr' type='^{ExecStack=^{ExecStack}^{ExecStack}^^{Tcl_Obj}^^{Tcl_Obj}^^{Tcl_Obj}[1^{Tcl_Obj}]}'/>
<field declared_type='Tcl_Obj**' name='markerPtr' type='^^{Tcl_Obj}'/>
<field declared_type='Tcl_Obj**' name='endPtr' type='^^{Tcl_Obj}'/>
<field declared_type='Tcl_Obj**' name='tosPtr' type='^^{Tcl_Obj}'/>
<field declared_type='Tcl_Obj**' name='stackWords' type='[1^{Tcl_Obj}]'/>
</struct>
<struct name='ExtCmdLoc' type='{ExtCmdLoc=&quot;type&quot;i&quot;start&quot;i&quot;path&quot;^{Tcl_Obj}&quot;loc&quot;^{ECL}&quot;nloc&quot;i&quot;nuloc&quot;i&quot;litInfo&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='int' name='start' type='i'/>
<field declared_type='Tcl_Obj*' name='path' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<field declared_type='ECL*' name='loc' type='^{ECL=ii^i^^i}'/>
<field declared_type='int' name='nloc' type='i'/>
<field declared_type='int' name='nuloc' type='i'/>
<field declared_type='Tcl_HashTable' name='litInfo' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
</struct>
<struct name='ExtraFrameInfo' type='{_ExtraFrameInfo=&quot;length&quot;i&quot;fields&quot;[2{?=&quot;name&quot;*&quot;proc&quot;^?&quot;clientData&quot;^v}]}'>
<field declared_type='int' name='length' type='i'/>
<field declared_type='ExtraFrameInfoField*' name='fields' type='[2{?=&quot;name&quot;*&quot;proc&quot;^?&quot;clientData&quot;^v}]'/>
</struct>
<struct name='ExtraFrameInfoField' type='{_ExtraFrameInfoField=&quot;name&quot;*&quot;proc&quot;^?&quot;clientData&quot;^v}'>
<field const='true' declared_type='char*' name='name' type='*'/>
<field declared_type='GetFrameInfoValueProc' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='ClientData' name='clientData' type='^v'/>
</struct>
<struct name='ForeachInfo' type='{ForeachInfo=&quot;numLists&quot;i&quot;firstValueTemp&quot;i&quot;loopCtTemp&quot;i&quot;varLists&quot;[1^{ForeachVarList}]}'>
<field declared_type='int' name='numLists' type='i'/>
<field declared_type='int' name='firstValueTemp' type='i'/>
<field declared_type='int' name='loopCtTemp' type='i'/>
<field declared_type='ForeachVarList**' name='varLists' type='[1^{ForeachVarList}]'/>
</struct>
<struct name='ForeachVarList' type='{ForeachVarList=&quot;numVars&quot;i&quot;varIndexes&quot;[1i]}'>
<field declared_type='int' name='numVars' type='i'/>
<field declared_type='int*' name='varIndexes' type='[1i]'/>
</struct>
<struct name='ImportRef' type='{ImportRef=&quot;importedCmdPtr&quot;^{Command}&quot;nextPtr&quot;^{ImportRef}}'>
<field declared_type='struct Command*' name='importedCmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<field declared_type='struct ImportRef*' name='nextPtr' type='^{ImportRef=^{Command}^{ImportRef}}'/>
</struct>
<struct name='ImportedCmdData' type='{ImportedCmdData=&quot;realCmdPtr&quot;^{Command}&quot;selfPtr&quot;^{Command}}'>
<field declared_type='struct Command*' name='realCmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<field declared_type='struct Command*' name='selfPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
</struct>
<struct name='InstructionDesc' type='{InstructionDesc=&quot;name&quot;*&quot;numBytes&quot;i&quot;stackEffect&quot;i&quot;numOperands&quot;i&quot;opTypes&quot;[2i]}'>
<field declared_type='char*' name='name' type='*'/>
<field declared_type='int' name='numBytes' type='i'/>
<field declared_type='int' name='stackEffect' type='i'/>
<field declared_type='int' name='numOperands' type='i'/>
<field declared_type='InstOperandType*' name='opTypes' type='[2i]'/>
</struct>
<struct name='Interp' type='{Interp=&quot;result&quot;*&quot;freeProc&quot;^?&quot;errorLine&quot;i&quot;stubTable&quot;^{TclStubs}&quot;handle&quot;^^v&quot;globalNsPtr&quot;^{Namespace=&quot;name&quot;*&quot;fullName&quot;*&quot;clientData&quot;^v&quot;deleteProc&quot;^?&quot;parentPtr&quot;^{Namespace}&quot;childTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsId&quot;l&quot;interp&quot;^{Tcl_Interp}&quot;flags&quot;i&quot;activationCount&quot;i&quot;refCount&quot;i&quot;cmdTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;varTable&quot;{TclVarHashTable=&quot;table&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsPtr&quot;^{Namespace}}&quot;exportArrayPtr&quot;^*&quot;numExportPatterns&quot;i&quot;maxExportPatterns&quot;i&quot;cmdRefEpoch&quot;i&quot;resolverEpoch&quot;i&quot;cmdResProc&quot;^?&quot;varResProc&quot;^?&quot;compiledVarResProc&quot;^?&quot;exportLookupEpoch&quot;i&quot;ensembles&quot;^{Tcl_Ensemble}&quot;unknownHandlerPtr&quot;^{Tcl_Obj}&quot;commandPathLength&quot;i&quot;commandPathArray&quot;^{NamespacePathEntry}&quot;commandPathSourceList&quot;^{NamespacePathEntry}}&quot;hiddenCmdTablePtr&quot;^{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;interpInfo&quot;^v&quot;unused2&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;numLevels&quot;i&quot;maxNestingDepth&quot;i&quot;framePtr&quot;^{CallFrame=&quot;nsPtr&quot;^{Namespace}&quot;isProcCallFrame&quot;i&quot;objc&quot;i&quot;objv&quot;^^{Tcl_Obj}&quot;callerPtr&quot;^{CallFrame}&quot;callerVarPtr&quot;^{CallFrame}&quot;level&quot;i&quot;procPtr&quot;^{Proc}&quot;varTablePtr&quot;^{TclVarHashTable}&quot;numCompiledLocals&quot;i&quot;compiledLocals&quot;^{Var}&quot;clientData&quot;^v&quot;localCachePtr&quot;^{LocalCache}}&quot;varFramePtr&quot;^{CallFrame=&quot;nsPtr&quot;^{Namespace}&quot;isProcCallFrame&quot;i&quot;objc&quot;i&quot;objv&quot;^^{Tcl_Obj}&quot;callerPtr&quot;^{CallFrame}&quot;callerVarPtr&quot;^{CallFrame}&quot;level&quot;i&quot;procPtr&quot;^{Proc}&quot;varTablePtr&quot;^{TclVarHashTable}&quot;numCompiledLocals&quot;i&quot;compiledLocals&quot;^{Var}&quot;clientData&quot;^v&quot;localCachePtr&quot;^{LocalCache}}&quot;activeVarTracePtr&quot;^{ActiveVarTrace=&quot;varPtr&quot;^{Var}&quot;nextPtr&quot;^{ActiveVarTrace}&quot;nextTracePtr&quot;^{VarTrace}}&quot;returnCode&quot;i&quot;rootFramePtr&quot;^{CallFrame=&quot;nsPtr&quot;^{Namespace}&quot;isProcCallFrame&quot;i&quot;objc&quot;i&quot;objv&quot;^^{Tcl_Obj}&quot;callerPtr&quot;^{CallFrame}&quot;callerVarPtr&quot;^{CallFrame}&quot;level&quot;i&quot;procPtr&quot;^{Proc}&quot;varTablePtr&quot;^{TclVarHashTable}&quot;numCompiledLocals&quot;i&quot;compiledLocals&quot;^{Var}&quot;clientData&quot;^v&quot;localCachePtr&quot;^{LocalCache}}&quot;lookupNsPtr&quot;^{Namespace=&quot;name&quot;*&quot;fullName&quot;*&quot;clientData&quot;^v&quot;deleteProc&quot;^?&quot;parentPtr&quot;^{Namespace}&quot;childTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsId&quot;l&quot;interp&quot;^{Tcl_Interp}&quot;flags&quot;i&quot;activationCount&quot;i&quot;refCount&quot;i&quot;cmdTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;varTable&quot;{TclVarHashTable=&quot;table&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsPtr&quot;^{Namespace}}&quot;exportArrayPtr&quot;^*&quot;numExportPatterns&quot;i&quot;maxExportPatterns&quot;i&quot;cmdRefEpoch&quot;i&quot;resolverEpoch&quot;i&quot;cmdResProc&quot;^?&quot;varResProc&quot;^?&quot;compiledVarResProc&quot;^?&quot;exportLookupEpoch&quot;i&quot;ensembles&quot;^{Tcl_Ensemble}&quot;unknownHandlerPtr&quot;^{Tcl_Obj}&quot;commandPathLength&quot;i&quot;commandPathArray&quot;^{NamespacePathEntry}&quot;commandPathSourceList&quot;^{NamespacePathEntry}}&quot;appendResult&quot;*&quot;appendAvl&quot;i&quot;appendUsed&quot;i&quot;packageTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;packageUnknown&quot;*&quot;cmdCount&quot;i&quot;evalFlags&quot;i&quot;unused1&quot;i&quot;literalTable&quot;{LiteralTable=&quot;buckets&quot;^^{LiteralEntry}&quot;staticBuckets&quot;[4^{LiteralEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;mask&quot;i}&quot;compileEpoch&quot;i&quot;compiledProcPtr&quot;^{Proc=&quot;iPtr&quot;^{Interp}&quot;refCount&quot;i&quot;cmdPtr&quot;^{Command}&quot;bodyPtr&quot;^{Tcl_Obj}&quot;numArgs&quot;i&quot;numCompiledLocals&quot;i&quot;firstLocalPtr&quot;^{CompiledLocal}&quot;lastLocalPtr&quot;^{CompiledLocal}}&quot;resolverPtr&quot;^{ResolverScheme=&quot;name&quot;*&quot;cmdResProc&quot;^?&quot;varResProc&quot;^?&quot;compiledVarResProc&quot;^?&quot;nextPtr&quot;^{ResolverScheme}}&quot;scriptFile&quot;^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;l&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;L})}&quot;flags&quot;i&quot;randSeed&quot;l&quot;tracePtr&quot;^{Trace=&quot;level&quot;i&quot;proc&quot;^?&quot;clientData&quot;^v&quot;nextPtr&quot;^{Trace}&quot;flags&quot;i&quot;delProc&quot;^?}&quot;assocData&quot;^{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;execEnvPtr&quot;^{ExecEnv}&quot;emptyObjPtr&quot;^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;l&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;L})}&quot;resultSpace&quot;[201c]&quot;objResultPtr&quot;^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;l&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;L})}&quot;threadId&quot;^{Tcl_ThreadId_}&quot;activeCmdTracePtr&quot;^{ActiveCommandTrace=&quot;cmdPtr&quot;^{Command}&quot;nextPtr&quot;^{ActiveCommandTrace}&quot;nextTracePtr&quot;^{CommandTrace}&quot;reverseScan&quot;i}&quot;activeInterpTracePtr&quot;^{ActiveInterpTrace=&quot;nextPtr&quot;^{ActiveInterpTrace}&quot;nextTracePtr&quot;^{Trace}&quot;reverseScan&quot;i}&quot;tracesForbiddingInline&quot;i&quot;returnOpts&quot;^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;l&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;L})}&quot;errorInfo&quot;^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;l&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;L})}&quot;eiVar&quot;^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;l&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;L})}&quot;errorCode&quot;^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;l&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;L})}&quot;ecVar&quot;^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;l&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;L})}&quot;returnLevel&quot;i&quot;limit&quot;{?=&quot;active&quot;i&quot;granularityTicker&quot;i&quot;exceeded&quot;i&quot;cmdCount&quot;i&quot;cmdHandlers&quot;^{LimitHandler}&quot;cmdGranularity&quot;i&quot;time&quot;{Tcl_Time=&quot;sec&quot;l&quot;usec&quot;l}&quot;timeHandlers&quot;^{LimitHandler}&quot;timeGranularity&quot;i&quot;timeEvent&quot;^{Tcl_TimerToken_}&quot;callbacks&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}}&quot;ensembleRewrite&quot;{?=&quot;sourceObjs&quot;^^{Tcl_Obj}&quot;numRemovedObjs&quot;i&quot;numInsertedObjs&quot;i}&quot;chanMsg&quot;^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;l&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;L})}&quot;cmdFramePtr&quot;^{CmdFrame=&quot;type&quot;i&quot;level&quot;i&quot;line&quot;^i&quot;nline&quot;i&quot;framePtr&quot;^{CallFrame=&quot;nsPtr&quot;^{Namespace}&quot;isProcCallFrame&quot;i&quot;objc&quot;i&quot;objv&quot;^^{Tcl_Obj}&quot;callerPtr&quot;^{CallFrame}&quot;callerVarPtr&quot;^{CallFrame}&quot;level&quot;i&quot;procPtr&quot;^{Proc}&quot;varTablePtr&quot;^{TclVarHashTable}&quot;numCompiledLocals&quot;i&quot;compiledLocals&quot;^{Var}&quot;clientData&quot;^v&quot;localCachePtr&quot;^{LocalCache}}&quot;nextPtr&quot;^{CmdFrame}&quot;data&quot;(?=&quot;eval&quot;{?=&quot;path&quot;^{Tcl_Obj}}&quot;tebc&quot;{?=&quot;codePtr&quot;^v&quot;pc&quot;*})&quot;cmd&quot;(?=&quot;str&quot;{?=&quot;cmd&quot;*&quot;len&quot;i}&quot;listPtr&quot;^{Tcl_Obj})}&quot;invokeCmdFramePtr&quot;^{CmdFrame=&quot;type&quot;i&quot;level&quot;i&quot;line&quot;^i&quot;nline&quot;i&quot;framePtr&quot;^{CallFrame=&quot;nsPtr&quot;^{Namespace}&quot;isProcCallFrame&quot;i&quot;objc&quot;i&quot;objv&quot;^^{Tcl_Obj}&quot;callerPtr&quot;^{CallFrame}&quot;callerVarPtr&quot;^{CallFrame}&quot;level&quot;i&quot;procPtr&quot;^{Proc}&quot;varTablePtr&quot;^{TclVarHashTable}&quot;numCompiledLocals&quot;i&quot;compiledLocals&quot;^{Var}&quot;clientData&quot;^v&quot;localCachePtr&quot;^{LocalCache}}&quot;nextPtr&quot;^{CmdFrame}&quot;data&quot;(?=&quot;eval&quot;{?=&quot;path&quot;^{Tcl_Obj}}&quot;tebc&quot;{?=&quot;codePtr&quot;^v&quot;pc&quot;*})&quot;cmd&quot;(?=&quot;str&quot;{?=&quot;cmd&quot;*&quot;len&quot;i}&quot;listPtr&quot;^{Tcl_Obj})}&quot;invokeWord&quot;i&quot;linePBodyPtr&quot;^{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;lineBCPtr&quot;^{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;lineLABCPtr&quot;^{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;lineLAPtr&quot;^{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;scriptCLLocPtr&quot;^{ContLineLoc=&quot;num&quot;i&quot;loc&quot;[1i]}&quot;packagePrefer&quot;i&quot;varTraces&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;varSearches&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;allocCache&quot;^v&quot;pendingObjDataPtr&quot;^v&quot;asyncReadyPtr&quot;^i&quot;stackBound&quot;^i}' type64='{Interp=&quot;result&quot;*&quot;freeProc&quot;^?&quot;errorLine&quot;i&quot;stubTable&quot;^{TclStubs}&quot;handle&quot;^^v&quot;globalNsPtr&quot;^{Namespace=&quot;name&quot;*&quot;fullName&quot;*&quot;clientData&quot;^v&quot;deleteProc&quot;^?&quot;parentPtr&quot;^{Namespace}&quot;childTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsId&quot;q&quot;interp&quot;^{Tcl_Interp}&quot;flags&quot;i&quot;activationCount&quot;i&quot;refCount&quot;i&quot;cmdTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;varTable&quot;{TclVarHashTable=&quot;table&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsPtr&quot;^{Namespace}}&quot;exportArrayPtr&quot;^*&quot;numExportPatterns&quot;i&quot;maxExportPatterns&quot;i&quot;cmdRefEpoch&quot;i&quot;resolverEpoch&quot;i&quot;cmdResProc&quot;^?&quot;varResProc&quot;^?&quot;compiledVarResProc&quot;^?&quot;exportLookupEpoch&quot;i&quot;ensembles&quot;^{Tcl_Ensemble}&quot;unknownHandlerPtr&quot;^{Tcl_Obj}&quot;commandPathLength&quot;i&quot;commandPathArray&quot;^{NamespacePathEntry}&quot;commandPathSourceList&quot;^{NamespacePathEntry}}&quot;hiddenCmdTablePtr&quot;^{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;interpInfo&quot;^v&quot;unused2&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;numLevels&quot;i&quot;maxNestingDepth&quot;i&quot;framePtr&quot;^{CallFrame=&quot;nsPtr&quot;^{Namespace}&quot;isProcCallFrame&quot;i&quot;objc&quot;i&quot;objv&quot;^^{Tcl_Obj}&quot;callerPtr&quot;^{CallFrame}&quot;callerVarPtr&quot;^{CallFrame}&quot;level&quot;i&quot;procPtr&quot;^{Proc}&quot;varTablePtr&quot;^{TclVarHashTable}&quot;numCompiledLocals&quot;i&quot;compiledLocals&quot;^{Var}&quot;clientData&quot;^v&quot;localCachePtr&quot;^{LocalCache}}&quot;varFramePtr&quot;^{CallFrame=&quot;nsPtr&quot;^{Namespace}&quot;isProcCallFrame&quot;i&quot;objc&quot;i&quot;objv&quot;^^{Tcl_Obj}&quot;callerPtr&quot;^{CallFrame}&quot;callerVarPtr&quot;^{CallFrame}&quot;level&quot;i&quot;procPtr&quot;^{Proc}&quot;varTablePtr&quot;^{TclVarHashTable}&quot;numCompiledLocals&quot;i&quot;compiledLocals&quot;^{Var}&quot;clientData&quot;^v&quot;localCachePtr&quot;^{LocalCache}}&quot;activeVarTracePtr&quot;^{ActiveVarTrace=&quot;varPtr&quot;^{Var}&quot;nextPtr&quot;^{ActiveVarTrace}&quot;nextTracePtr&quot;^{VarTrace}}&quot;returnCode&quot;i&quot;rootFramePtr&quot;^{CallFrame=&quot;nsPtr&quot;^{Namespace}&quot;isProcCallFrame&quot;i&quot;objc&quot;i&quot;objv&quot;^^{Tcl_Obj}&quot;callerPtr&quot;^{CallFrame}&quot;callerVarPtr&quot;^{CallFrame}&quot;level&quot;i&quot;procPtr&quot;^{Proc}&quot;varTablePtr&quot;^{TclVarHashTable}&quot;numCompiledLocals&quot;i&quot;compiledLocals&quot;^{Var}&quot;clientData&quot;^v&quot;localCachePtr&quot;^{LocalCache}}&quot;lookupNsPtr&quot;^{Namespace=&quot;name&quot;*&quot;fullName&quot;*&quot;clientData&quot;^v&quot;deleteProc&quot;^?&quot;parentPtr&quot;^{Namespace}&quot;childTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsId&quot;q&quot;interp&quot;^{Tcl_Interp}&quot;flags&quot;i&quot;activationCount&quot;i&quot;refCount&quot;i&quot;cmdTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;varTable&quot;{TclVarHashTable=&quot;table&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsPtr&quot;^{Namespace}}&quot;exportArrayPtr&quot;^*&quot;numExportPatterns&quot;i&quot;maxExportPatterns&quot;i&quot;cmdRefEpoch&quot;i&quot;resolverEpoch&quot;i&quot;cmdResProc&quot;^?&quot;varResProc&quot;^?&quot;compiledVarResProc&quot;^?&quot;exportLookupEpoch&quot;i&quot;ensembles&quot;^{Tcl_Ensemble}&quot;unknownHandlerPtr&quot;^{Tcl_Obj}&quot;commandPathLength&quot;i&quot;commandPathArray&quot;^{NamespacePathEntry}&quot;commandPathSourceList&quot;^{NamespacePathEntry}}&quot;appendResult&quot;*&quot;appendAvl&quot;i&quot;appendUsed&quot;i&quot;packageTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;packageUnknown&quot;*&quot;cmdCount&quot;i&quot;evalFlags&quot;i&quot;unused1&quot;i&quot;literalTable&quot;{LiteralTable=&quot;buckets&quot;^^{LiteralEntry}&quot;staticBuckets&quot;[4^{LiteralEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;mask&quot;i}&quot;compileEpoch&quot;i&quot;compiledProcPtr&quot;^{Proc=&quot;iPtr&quot;^{Interp}&quot;refCount&quot;i&quot;cmdPtr&quot;^{Command}&quot;bodyPtr&quot;^{Tcl_Obj}&quot;numArgs&quot;i&quot;numCompiledLocals&quot;i&quot;firstLocalPtr&quot;^{CompiledLocal}&quot;lastLocalPtr&quot;^{CompiledLocal}}&quot;resolverPtr&quot;^{ResolverScheme=&quot;name&quot;*&quot;cmdResProc&quot;^?&quot;varResProc&quot;^?&quot;compiledVarResProc&quot;^?&quot;nextPtr&quot;^{ResolverScheme}}&quot;scriptFile&quot;^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;q&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;Q})}&quot;flags&quot;i&quot;randSeed&quot;q&quot;tracePtr&quot;^{Trace=&quot;level&quot;i&quot;proc&quot;^?&quot;clientData&quot;^v&quot;nextPtr&quot;^{Trace}&quot;flags&quot;i&quot;delProc&quot;^?}&quot;assocData&quot;^{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;execEnvPtr&quot;^{ExecEnv}&quot;emptyObjPtr&quot;^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;q&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;Q})}&quot;resultSpace&quot;[201c]&quot;objResultPtr&quot;^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;q&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;Q})}&quot;threadId&quot;^{Tcl_ThreadId_}&quot;activeCmdTracePtr&quot;^{ActiveCommandTrace=&quot;cmdPtr&quot;^{Command}&quot;nextPtr&quot;^{ActiveCommandTrace}&quot;nextTracePtr&quot;^{CommandTrace}&quot;reverseScan&quot;i}&quot;activeInterpTracePtr&quot;^{ActiveInterpTrace=&quot;nextPtr&quot;^{ActiveInterpTrace}&quot;nextTracePtr&quot;^{Trace}&quot;reverseScan&quot;i}&quot;tracesForbiddingInline&quot;i&quot;returnOpts&quot;^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;q&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;Q})}&quot;errorInfo&quot;^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;q&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;Q})}&quot;eiVar&quot;^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;q&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;Q})}&quot;errorCode&quot;^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;q&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;Q})}&quot;ecVar&quot;^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;q&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;Q})}&quot;returnLevel&quot;i&quot;limit&quot;{?=&quot;active&quot;i&quot;granularityTicker&quot;i&quot;exceeded&quot;i&quot;cmdCount&quot;i&quot;cmdHandlers&quot;^{LimitHandler}&quot;cmdGranularity&quot;i&quot;time&quot;{Tcl_Time=&quot;sec&quot;q&quot;usec&quot;q}&quot;timeHandlers&quot;^{LimitHandler}&quot;timeGranularity&quot;i&quot;timeEvent&quot;^{Tcl_TimerToken_}&quot;callbacks&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}}&quot;ensembleRewrite&quot;{?=&quot;sourceObjs&quot;^^{Tcl_Obj}&quot;numRemovedObjs&quot;i&quot;numInsertedObjs&quot;i}&quot;chanMsg&quot;^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;q&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;Q})}&quot;cmdFramePtr&quot;^{CmdFrame=&quot;type&quot;i&quot;level&quot;i&quot;line&quot;^i&quot;nline&quot;i&quot;framePtr&quot;^{CallFrame=&quot;nsPtr&quot;^{Namespace}&quot;isProcCallFrame&quot;i&quot;objc&quot;i&quot;objv&quot;^^{Tcl_Obj}&quot;callerPtr&quot;^{CallFrame}&quot;callerVarPtr&quot;^{CallFrame}&quot;level&quot;i&quot;procPtr&quot;^{Proc}&quot;varTablePtr&quot;^{TclVarHashTable}&quot;numCompiledLocals&quot;i&quot;compiledLocals&quot;^{Var}&quot;clientData&quot;^v&quot;localCachePtr&quot;^{LocalCache}}&quot;nextPtr&quot;^{CmdFrame}&quot;data&quot;(?=&quot;eval&quot;{?=&quot;path&quot;^{Tcl_Obj}}&quot;tebc&quot;{?=&quot;codePtr&quot;^v&quot;pc&quot;*})&quot;cmd&quot;(?=&quot;str&quot;{?=&quot;cmd&quot;*&quot;len&quot;i}&quot;listPtr&quot;^{Tcl_Obj})}&quot;invokeCmdFramePtr&quot;^{CmdFrame=&quot;type&quot;i&quot;level&quot;i&quot;line&quot;^i&quot;nline&quot;i&quot;framePtr&quot;^{CallFrame=&quot;nsPtr&quot;^{Namespace}&quot;isProcCallFrame&quot;i&quot;objc&quot;i&quot;objv&quot;^^{Tcl_Obj}&quot;callerPtr&quot;^{CallFrame}&quot;callerVarPtr&quot;^{CallFrame}&quot;level&quot;i&quot;procPtr&quot;^{Proc}&quot;varTablePtr&quot;^{TclVarHashTable}&quot;numCompiledLocals&quot;i&quot;compiledLocals&quot;^{Var}&quot;clientData&quot;^v&quot;localCachePtr&quot;^{LocalCache}}&quot;nextPtr&quot;^{CmdFrame}&quot;data&quot;(?=&quot;eval&quot;{?=&quot;path&quot;^{Tcl_Obj}}&quot;tebc&quot;{?=&quot;codePtr&quot;^v&quot;pc&quot;*})&quot;cmd&quot;(?=&quot;str&quot;{?=&quot;cmd&quot;*&quot;len&quot;i}&quot;listPtr&quot;^{Tcl_Obj})}&quot;invokeWord&quot;i&quot;linePBodyPtr&quot;^{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;lineBCPtr&quot;^{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;lineLABCPtr&quot;^{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;lineLAPtr&quot;^{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;scriptCLLocPtr&quot;^{ContLineLoc=&quot;num&quot;i&quot;loc&quot;[1i]}&quot;packagePrefer&quot;i&quot;varTraces&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;varSearches&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;allocCache&quot;^v&quot;pendingObjDataPtr&quot;^v&quot;asyncReadyPtr&quot;^i&quot;stackBound&quot;^i}'>
<field declared_type='char*' name='result' type='*'/>
<field declared_type='Tcl_FreeProc*' function_pointer='true' name='freeProc' type='^?'>
<arg declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int' name='errorLine' type='i'/>
<field declared_type='struct TclStubs*' name='stubTable' type='^{TclStubs=i^{TclStubHooks}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^v^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^v}'/>
<field declared_type='TclHandle' name='handle' type='^^v'/>
<field declared_type='Namespace*' name='globalNsPtr' type='^{Namespace=&quot;name&quot;*&quot;fullName&quot;*&quot;clientData&quot;^v&quot;deleteProc&quot;^?&quot;parentPtr&quot;^{Namespace}&quot;childTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsId&quot;l&quot;interp&quot;^{Tcl_Interp}&quot;flags&quot;i&quot;activationCount&quot;i&quot;refCount&quot;i&quot;cmdTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;varTable&quot;{TclVarHashTable=&quot;table&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsPtr&quot;^{Namespace}}&quot;exportArrayPtr&quot;^*&quot;numExportPatterns&quot;i&quot;maxExportPatterns&quot;i&quot;cmdRefEpoch&quot;i&quot;resolverEpoch&quot;i&quot;cmdResProc&quot;^?&quot;varResProc&quot;^?&quot;compiledVarResProc&quot;^?&quot;exportLookupEpoch&quot;i&quot;ensembles&quot;^{Tcl_Ensemble}&quot;unknownHandlerPtr&quot;^{Tcl_Obj}&quot;commandPathLength&quot;i&quot;commandPathArray&quot;^{NamespacePathEntry}&quot;commandPathSourceList&quot;^{NamespacePathEntry}}' type64='^{Namespace=&quot;name&quot;*&quot;fullName&quot;*&quot;clientData&quot;^v&quot;deleteProc&quot;^?&quot;parentPtr&quot;^{Namespace}&quot;childTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsId&quot;q&quot;interp&quot;^{Tcl_Interp}&quot;flags&quot;i&quot;activationCount&quot;i&quot;refCount&quot;i&quot;cmdTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;varTable&quot;{TclVarHashTable=&quot;table&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsPtr&quot;^{Namespace}}&quot;exportArrayPtr&quot;^*&quot;numExportPatterns&quot;i&quot;maxExportPatterns&quot;i&quot;cmdRefEpoch&quot;i&quot;resolverEpoch&quot;i&quot;cmdResProc&quot;^?&quot;varResProc&quot;^?&quot;compiledVarResProc&quot;^?&quot;exportLookupEpoch&quot;i&quot;ensembles&quot;^{Tcl_Ensemble}&quot;unknownHandlerPtr&quot;^{Tcl_Obj}&quot;commandPathLength&quot;i&quot;commandPathArray&quot;^{NamespacePathEntry}&quot;commandPathSourceList&quot;^{NamespacePathEntry}}'/>
<field declared_type='Tcl_HashTable*' name='hiddenCmdTablePtr' type='^{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='ClientData' name='interpInfo' type='^v'/>
<field declared_type='Tcl_HashTable' name='unused2' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='int' name='numLevels' type='i'/>
<field declared_type='int' name='maxNestingDepth' type='i'/>
<field declared_type='CallFrame*' name='framePtr' type='^{CallFrame=&quot;nsPtr&quot;^{Namespace}&quot;isProcCallFrame&quot;i&quot;objc&quot;i&quot;objv&quot;^^{Tcl_Obj}&quot;callerPtr&quot;^{CallFrame}&quot;callerVarPtr&quot;^{CallFrame}&quot;level&quot;i&quot;procPtr&quot;^{Proc}&quot;varTablePtr&quot;^{TclVarHashTable}&quot;numCompiledLocals&quot;i&quot;compiledLocals&quot;^{Var}&quot;clientData&quot;^v&quot;localCachePtr&quot;^{LocalCache}}'/>
<field declared_type='CallFrame*' name='varFramePtr' type='^{CallFrame=&quot;nsPtr&quot;^{Namespace}&quot;isProcCallFrame&quot;i&quot;objc&quot;i&quot;objv&quot;^^{Tcl_Obj}&quot;callerPtr&quot;^{CallFrame}&quot;callerVarPtr&quot;^{CallFrame}&quot;level&quot;i&quot;procPtr&quot;^{Proc}&quot;varTablePtr&quot;^{TclVarHashTable}&quot;numCompiledLocals&quot;i&quot;compiledLocals&quot;^{Var}&quot;clientData&quot;^v&quot;localCachePtr&quot;^{LocalCache}}'/>
<field declared_type='ActiveVarTrace*' name='activeVarTracePtr' type='^{ActiveVarTrace=&quot;varPtr&quot;^{Var}&quot;nextPtr&quot;^{ActiveVarTrace}&quot;nextTracePtr&quot;^{VarTrace}}'/>
<field declared_type='int' name='returnCode' type='i'/>
<field declared_type='CallFrame*' name='rootFramePtr' type='^{CallFrame=&quot;nsPtr&quot;^{Namespace}&quot;isProcCallFrame&quot;i&quot;objc&quot;i&quot;objv&quot;^^{Tcl_Obj}&quot;callerPtr&quot;^{CallFrame}&quot;callerVarPtr&quot;^{CallFrame}&quot;level&quot;i&quot;procPtr&quot;^{Proc}&quot;varTablePtr&quot;^{TclVarHashTable}&quot;numCompiledLocals&quot;i&quot;compiledLocals&quot;^{Var}&quot;clientData&quot;^v&quot;localCachePtr&quot;^{LocalCache}}'/>
<field declared_type='Namespace*' name='lookupNsPtr' type='^{Namespace=&quot;name&quot;*&quot;fullName&quot;*&quot;clientData&quot;^v&quot;deleteProc&quot;^?&quot;parentPtr&quot;^{Namespace}&quot;childTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsId&quot;l&quot;interp&quot;^{Tcl_Interp}&quot;flags&quot;i&quot;activationCount&quot;i&quot;refCount&quot;i&quot;cmdTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;varTable&quot;{TclVarHashTable=&quot;table&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsPtr&quot;^{Namespace}}&quot;exportArrayPtr&quot;^*&quot;numExportPatterns&quot;i&quot;maxExportPatterns&quot;i&quot;cmdRefEpoch&quot;i&quot;resolverEpoch&quot;i&quot;cmdResProc&quot;^?&quot;varResProc&quot;^?&quot;compiledVarResProc&quot;^?&quot;exportLookupEpoch&quot;i&quot;ensembles&quot;^{Tcl_Ensemble}&quot;unknownHandlerPtr&quot;^{Tcl_Obj}&quot;commandPathLength&quot;i&quot;commandPathArray&quot;^{NamespacePathEntry}&quot;commandPathSourceList&quot;^{NamespacePathEntry}}' type64='^{Namespace=&quot;name&quot;*&quot;fullName&quot;*&quot;clientData&quot;^v&quot;deleteProc&quot;^?&quot;parentPtr&quot;^{Namespace}&quot;childTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsId&quot;q&quot;interp&quot;^{Tcl_Interp}&quot;flags&quot;i&quot;activationCount&quot;i&quot;refCount&quot;i&quot;cmdTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;varTable&quot;{TclVarHashTable=&quot;table&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsPtr&quot;^{Namespace}}&quot;exportArrayPtr&quot;^*&quot;numExportPatterns&quot;i&quot;maxExportPatterns&quot;i&quot;cmdRefEpoch&quot;i&quot;resolverEpoch&quot;i&quot;cmdResProc&quot;^?&quot;varResProc&quot;^?&quot;compiledVarResProc&quot;^?&quot;exportLookupEpoch&quot;i&quot;ensembles&quot;^{Tcl_Ensemble}&quot;unknownHandlerPtr&quot;^{Tcl_Obj}&quot;commandPathLength&quot;i&quot;commandPathArray&quot;^{NamespacePathEntry}&quot;commandPathSourceList&quot;^{NamespacePathEntry}}'/>
<field declared_type='char*' name='appendResult' type='*'/>
<field declared_type='int' name='appendAvl' type='i'/>
<field declared_type='int' name='appendUsed' type='i'/>
<field declared_type='Tcl_HashTable' name='packageTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='char*' name='packageUnknown' type='*'/>
<field declared_type='int' name='cmdCount' type='i'/>
<field declared_type='int' name='evalFlags' type='i'/>
<field declared_type='int' name='unused1' type='i'/>
<field declared_type='LiteralTable' name='literalTable' type='{LiteralTable=&quot;buckets&quot;^^{LiteralEntry}&quot;staticBuckets&quot;[4^{LiteralEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;mask&quot;i}'/>
<field declared_type='int' name='compileEpoch' type='i'/>
<field declared_type='Proc*' name='compiledProcPtr' type='^{Proc=&quot;iPtr&quot;^{Interp}&quot;refCount&quot;i&quot;cmdPtr&quot;^{Command}&quot;bodyPtr&quot;^{Tcl_Obj}&quot;numArgs&quot;i&quot;numCompiledLocals&quot;i&quot;firstLocalPtr&quot;^{CompiledLocal}&quot;lastLocalPtr&quot;^{CompiledLocal}}'/>
<field declared_type='ResolverScheme*' name='resolverPtr' type='^{ResolverScheme=&quot;name&quot;*&quot;cmdResProc&quot;^?&quot;varResProc&quot;^?&quot;compiledVarResProc&quot;^?&quot;nextPtr&quot;^{ResolverScheme}}'/>
<field declared_type='Tcl_Obj*' name='scriptFile' type='^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;l&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;L})}' type64='^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;q&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;Q})}'/>
<field declared_type='int' name='flags' type='i'/>
<field declared_type='long' name='randSeed' type='l' type64='q'/>
<field declared_type='Trace*' name='tracePtr' type='^{Trace=&quot;level&quot;i&quot;proc&quot;^?&quot;clientData&quot;^v&quot;nextPtr&quot;^{Trace}&quot;flags&quot;i&quot;delProc&quot;^?}'/>
<field declared_type='Tcl_HashTable*' name='assocData' type='^{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='struct ExecEnv*' name='execEnvPtr' type='^{ExecEnv=^{ExecStack}[2^{Tcl_Obj}]}'/>
<field declared_type='Tcl_Obj*' name='emptyObjPtr' type='^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;l&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;L})}' type64='^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;q&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;Q})}'/>
<field declared_type='char*' name='resultSpace' type='[201c]'/>
<field declared_type='Tcl_Obj*' name='objResultPtr' type='^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;l&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;L})}' type64='^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;q&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;Q})}'/>
<field declared_type='Tcl_ThreadId' name='threadId' type='^{Tcl_ThreadId_=}'/>
<field declared_type='ActiveCommandTrace*' name='activeCmdTracePtr' type='^{ActiveCommandTrace=&quot;cmdPtr&quot;^{Command}&quot;nextPtr&quot;^{ActiveCommandTrace}&quot;nextTracePtr&quot;^{CommandTrace}&quot;reverseScan&quot;i}'/>
<field declared_type='ActiveInterpTrace*' name='activeInterpTracePtr' type='^{ActiveInterpTrace=&quot;nextPtr&quot;^{ActiveInterpTrace}&quot;nextTracePtr&quot;^{Trace}&quot;reverseScan&quot;i}'/>
<field declared_type='int' name='tracesForbiddingInline' type='i'/>
<field declared_type='Tcl_Obj*' name='returnOpts' type='^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;l&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;L})}' type64='^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;q&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;Q})}'/>
<field declared_type='Tcl_Obj*' name='errorInfo' type='^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;l&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;L})}' type64='^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;q&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;Q})}'/>
<field declared_type='Tcl_Obj*' name='eiVar' type='^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;l&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;L})}' type64='^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;q&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;Q})}'/>
<field declared_type='Tcl_Obj*' name='errorCode' type='^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;l&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;L})}' type64='^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;q&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;Q})}'/>
<field declared_type='Tcl_Obj*' name='ecVar' type='^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;l&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;L})}' type64='^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;q&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;Q})}'/>
<field declared_type='int' name='returnLevel' type='i'/>
<field declared_type='struct (anonymous struct at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/System/Library/Frameworks/Tcl.framework/Headers/tcl-private/tclInt.h:1796:5)' name='limit' type='{_structanonymousstructatApplicationsXcodeappContentsDeveloperPlatformsMacOSXplatformDeveloperSDKsMacOSX1011sdkSystemLibraryFrameworksTclframeworkHeaderstclprivatetclInth17965=&quot;active&quot;i&quot;granularityTicker&quot;i&quot;exceeded&quot;i&quot;cmdCount&quot;i&quot;cmdHandlers&quot;^{LimitHandler}&quot;cmdGranularity&quot;i&quot;time&quot;{Tcl_Time=&quot;sec&quot;l&quot;usec&quot;l}&quot;timeHandlers&quot;^{LimitHandler}&quot;timeGranularity&quot;i&quot;timeEvent&quot;^{Tcl_TimerToken_}&quot;callbacks&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}}' type64='{_structanonymousstructatApplicationsXcodeappContentsDeveloperPlatformsMacOSXplatformDeveloperSDKsMacOSX1011sdkSystemLibraryFrameworksTclframeworkHeaderstclprivatetclInth17965=&quot;active&quot;i&quot;granularityTicker&quot;i&quot;exceeded&quot;i&quot;cmdCount&quot;i&quot;cmdHandlers&quot;^{LimitHandler}&quot;cmdGranularity&quot;i&quot;time&quot;{Tcl_Time=&quot;sec&quot;q&quot;usec&quot;q}&quot;timeHandlers&quot;^{LimitHandler}&quot;timeGranularity&quot;i&quot;timeEvent&quot;^{Tcl_TimerToken_}&quot;callbacks&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}}'/>
<field declared_type='struct (anonymous struct at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/System/Library/Frameworks/Tcl.framework/Headers/tcl-private/tclInt.h:1835:5)' name='ensembleRewrite' type='{_structanonymousstructatApplicationsXcodeappContentsDeveloperPlatformsMacOSXplatformDeveloperSDKsMacOSX1011sdkSystemLibraryFrameworksTclframeworkHeaderstclprivatetclInth18355=&quot;sourceObjs&quot;^^{Tcl_Obj}&quot;numRemovedObjs&quot;i&quot;numInsertedObjs&quot;i}'/>
<field declared_type='Tcl_Obj*' name='chanMsg' type='^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;l&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;L})}' type64='^{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;q&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;Q})}'/>
<field declared_type='CmdFrame*' name='cmdFramePtr' type='^{CmdFrame=&quot;type&quot;i&quot;level&quot;i&quot;line&quot;^i&quot;nline&quot;i&quot;framePtr&quot;^{CallFrame=&quot;nsPtr&quot;^{Namespace}&quot;isProcCallFrame&quot;i&quot;objc&quot;i&quot;objv&quot;^^{Tcl_Obj}&quot;callerPtr&quot;^{CallFrame}&quot;callerVarPtr&quot;^{CallFrame}&quot;level&quot;i&quot;procPtr&quot;^{Proc}&quot;varTablePtr&quot;^{TclVarHashTable}&quot;numCompiledLocals&quot;i&quot;compiledLocals&quot;^{Var}&quot;clientData&quot;^v&quot;localCachePtr&quot;^{LocalCache}}&quot;nextPtr&quot;^{CmdFrame}&quot;data&quot;(?=&quot;eval&quot;{?=&quot;path&quot;^{Tcl_Obj}}&quot;tebc&quot;{?=&quot;codePtr&quot;^v&quot;pc&quot;*})&quot;cmd&quot;(?=&quot;str&quot;{?=&quot;cmd&quot;*&quot;len&quot;i}&quot;listPtr&quot;^{Tcl_Obj})}'/>
<field const='true' declared_type='CmdFrame*' name='invokeCmdFramePtr' type='^{CmdFrame=&quot;type&quot;i&quot;level&quot;i&quot;line&quot;^i&quot;nline&quot;i&quot;framePtr&quot;^{CallFrame=&quot;nsPtr&quot;^{Namespace}&quot;isProcCallFrame&quot;i&quot;objc&quot;i&quot;objv&quot;^^{Tcl_Obj}&quot;callerPtr&quot;^{CallFrame}&quot;callerVarPtr&quot;^{CallFrame}&quot;level&quot;i&quot;procPtr&quot;^{Proc}&quot;varTablePtr&quot;^{TclVarHashTable}&quot;numCompiledLocals&quot;i&quot;compiledLocals&quot;^{Var}&quot;clientData&quot;^v&quot;localCachePtr&quot;^{LocalCache}}&quot;nextPtr&quot;^{CmdFrame}&quot;data&quot;(?=&quot;eval&quot;{?=&quot;path&quot;^{Tcl_Obj}}&quot;tebc&quot;{?=&quot;codePtr&quot;^v&quot;pc&quot;*})&quot;cmd&quot;(?=&quot;str&quot;{?=&quot;cmd&quot;*&quot;len&quot;i}&quot;listPtr&quot;^{Tcl_Obj})}'/>
<field declared_type='int' name='invokeWord' type='i'/>
<field declared_type='Tcl_HashTable*' name='linePBodyPtr' type='^{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='Tcl_HashTable*' name='lineBCPtr' type='^{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='Tcl_HashTable*' name='lineLABCPtr' type='^{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='Tcl_HashTable*' name='lineLAPtr' type='^{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='ContLineLoc*' name='scriptCLLocPtr' type='^{ContLineLoc=&quot;num&quot;i&quot;loc&quot;[1i]}'/>
<field declared_type='int' name='packagePrefer' type='i'/>
<field declared_type='Tcl_HashTable' name='varTraces' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='Tcl_HashTable' name='varSearches' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='void*' name='allocCache' type='^v'/>
<field declared_type='void*' name='pendingObjDataPtr' type='^v'/>
<field declared_type='int*' name='asyncReadyPtr' type='^i'/>
<field declared_type='int*' name='stackBound' type='^i'/>
</struct>
<struct name='InterpList' type='{InterpList=&quot;interpPtr&quot;^{Interp}&quot;prevPtr&quot;^{InterpList}&quot;nextPtr&quot;^{InterpList}}'>
<field declared_type='Interp*' name='interpPtr' type='^{Interp=*^?i^{TclStubs}^^v^{Namespace}^{Tcl_HashTable}^v{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}ii^{CallFrame}^{CallFrame}^{ActiveVarTrace}i^{CallFrame}^{Namespace}*ii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}*iii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}i^{Proc}^{ResolverScheme}^{Tcl_Obj}il^{Trace}^{Tcl_HashTable}^{ExecEnv}^{Tcl_Obj}[201c]^{Tcl_Obj}^{Tcl_ThreadId_}^{ActiveCommandTrace}^{ActiveInterpTrace}i^{Tcl_Obj}^{Tcl_Obj}^{Tcl_Obj}^{Tcl_Obj}^{Tcl_Obj}i{?=iiii^{LimitHandler}i{Tcl_Time=ll}^{LimitHandler}i^{Tcl_TimerToken_}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}}{?=^^{Tcl_Obj}ii}^{Tcl_Obj}^{CmdFrame}^{CmdFrame}i^{Tcl_HashTable}^{Tcl_HashTable}^{Tcl_HashTable}^{Tcl_HashTable}^{ContLineLoc}i{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^v^v^i^i}' type64='^{Interp=*^?i^{TclStubs}^^v^{Namespace}^{Tcl_HashTable}^v{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}ii^{CallFrame}^{CallFrame}^{ActiveVarTrace}i^{CallFrame}^{Namespace}*ii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}*iii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}i^{Proc}^{ResolverScheme}^{Tcl_Obj}iq^{Trace}^{Tcl_HashTable}^{ExecEnv}^{Tcl_Obj}[201c]^{Tcl_Obj}^{Tcl_ThreadId_}^{ActiveCommandTrace}^{ActiveInterpTrace}i^{Tcl_Obj}^{Tcl_Obj}^{Tcl_Obj}^{Tcl_Obj}^{Tcl_Obj}i{?=iiii^{LimitHandler}i{Tcl_Time=qq}^{LimitHandler}i^{Tcl_TimerToken_}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}}{?=^^{Tcl_Obj}ii}^{Tcl_Obj}^{CmdFrame}^{CmdFrame}i^{Tcl_HashTable}^{Tcl_HashTable}^{Tcl_HashTable}^{Tcl_HashTable}^{ContLineLoc}i{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^v^v^i^i}'/>
<field declared_type='struct InterpList*' name='prevPtr' type='^{InterpList=^{Interp}^{InterpList}^{InterpList}}'/>
<field declared_type='struct InterpList*' name='nextPtr' type='^{InterpList=^{Interp}^{InterpList}^{InterpList}}'/>
</struct>
<struct name='JumpFixup' type='{JumpFixup=&quot;jumpType&quot;i&quot;codeOffset&quot;i&quot;cmdIndex&quot;i&quot;exceptIndex&quot;i}'>
<field declared_type='TclJumpType' name='jumpType' type='i'/>
<field declared_type='int' name='codeOffset' type='i'/>
<field declared_type='int' name='cmdIndex' type='i'/>
<field declared_type='int' name='exceptIndex' type='i'/>
</struct>
<struct name='JumpFixupArray' type='{JumpFixupArray=&quot;fixup&quot;^{JumpFixup}&quot;next&quot;i&quot;end&quot;i&quot;mallocedArray&quot;i&quot;staticFixupSpace&quot;[10{JumpFixup=&quot;jumpType&quot;i&quot;codeOffset&quot;i&quot;cmdIndex&quot;i&quot;exceptIndex&quot;i}]}'>
<field declared_type='JumpFixup*' name='fixup' type='^{JumpFixup=iiii}'/>
<field declared_type='int' name='next' type='i'/>
<field declared_type='int' name='end' type='i'/>
<field declared_type='int' name='mallocedArray' type='i'/>
<field declared_type='JumpFixup*' name='staticFixupSpace' type='[10{JumpFixup=&quot;jumpType&quot;i&quot;codeOffset&quot;i&quot;cmdIndex&quot;i&quot;exceptIndex&quot;i}]'/>
</struct>
<struct name='JumptableInfo' type='{JumptableInfo=&quot;hashTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}}'>
<field declared_type='Tcl_HashTable' name='hashTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
</struct>
<struct name='LimitHandler' type='{LimitHandler=&quot;flags&quot;i&quot;handlerProc&quot;^?&quot;clientData&quot;^v&quot;deleteProc&quot;^?&quot;prevPtr&quot;^{LimitHandler}&quot;nextPtr&quot;^{LimitHandler}}'>
<field declared_type='int' name='flags' type='i'/>
<field declared_type='Tcl_LimitHandlerProc*' function_pointer='true' name='handlerProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='ClientData' name='clientData' type='^v'/>
<field declared_type='Tcl_LimitHandlerDeleteProc*' function_pointer='true' name='deleteProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='LimitHandler*' name='prevPtr' type='^{LimitHandler=i^?^v^?^{LimitHandler}^{LimitHandler}}'/>
<field declared_type='LimitHandler*' name='nextPtr' type='^{LimitHandler=i^?^v^?^{LimitHandler}^{LimitHandler}}'/>
</struct>
<struct name='List' type='{List=&quot;refCount&quot;i&quot;maxElemCount&quot;i&quot;elemCount&quot;i&quot;canonicalFlag&quot;i&quot;elements&quot;^{Tcl_Obj}}'>
<field declared_type='int' name='refCount' type='i'/>
<field declared_type='int' name='maxElemCount' type='i'/>
<field declared_type='int' name='elemCount' type='i'/>
<field declared_type='int' name='canonicalFlag' type='i'/>
<field declared_type='Tcl_Obj*' name='elements' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</struct>
<struct name='LiteralEntry' type='{LiteralEntry=&quot;nextPtr&quot;^{LiteralEntry}&quot;objPtr&quot;^{Tcl_Obj}&quot;refCount&quot;i&quot;nsPtr&quot;^{Namespace}}'>
<field declared_type='struct LiteralEntry*' name='nextPtr' type='^{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}'/>
<field declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<field declared_type='int' name='refCount' type='i'/>
<field declared_type='Namespace*' name='nsPtr' type='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}l^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}' type64='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}q^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}'/>
</struct>
<struct name='LiteralTable' type='{LiteralTable=&quot;buckets&quot;^^{LiteralEntry}&quot;staticBuckets&quot;[4^{LiteralEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;mask&quot;i}'>
<field declared_type='LiteralEntry**' name='buckets' type='^^{LiteralEntry}'/>
<field declared_type='LiteralEntry**' name='staticBuckets' type='[4^{LiteralEntry}]'/>
<field declared_type='int' name='numBuckets' type='i'/>
<field declared_type='int' name='numEntries' type='i'/>
<field declared_type='int' name='rebuildSize' type='i'/>
<field declared_type='int' name='mask' type='i'/>
</struct>
<struct name='LocalCache' type='{LocalCache=&quot;refCount&quot;i&quot;numVars&quot;i&quot;varName0&quot;^{Tcl_Obj}}'>
<field declared_type='int' name='refCount' type='i'/>
<field declared_type='int' name='numVars' type='i'/>
<field declared_type='Tcl_Obj*' name='varName0' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</struct>
<struct name='Namespace' type='{Namespace=&quot;name&quot;*&quot;fullName&quot;*&quot;clientData&quot;^v&quot;deleteProc&quot;^?&quot;parentPtr&quot;^{Namespace}&quot;childTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsId&quot;l&quot;interp&quot;^{Tcl_Interp}&quot;flags&quot;i&quot;activationCount&quot;i&quot;refCount&quot;i&quot;cmdTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;varTable&quot;{TclVarHashTable=&quot;table&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsPtr&quot;^{Namespace}}&quot;exportArrayPtr&quot;^*&quot;numExportPatterns&quot;i&quot;maxExportPatterns&quot;i&quot;cmdRefEpoch&quot;i&quot;resolverEpoch&quot;i&quot;cmdResProc&quot;^?&quot;varResProc&quot;^?&quot;compiledVarResProc&quot;^?&quot;exportLookupEpoch&quot;i&quot;ensembles&quot;^{Tcl_Ensemble}&quot;unknownHandlerPtr&quot;^{Tcl_Obj}&quot;commandPathLength&quot;i&quot;commandPathArray&quot;^{NamespacePathEntry}&quot;commandPathSourceList&quot;^{NamespacePathEntry}}' type64='{Namespace=&quot;name&quot;*&quot;fullName&quot;*&quot;clientData&quot;^v&quot;deleteProc&quot;^?&quot;parentPtr&quot;^{Namespace}&quot;childTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsId&quot;q&quot;interp&quot;^{Tcl_Interp}&quot;flags&quot;i&quot;activationCount&quot;i&quot;refCount&quot;i&quot;cmdTable&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;varTable&quot;{TclVarHashTable=&quot;table&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsPtr&quot;^{Namespace}}&quot;exportArrayPtr&quot;^*&quot;numExportPatterns&quot;i&quot;maxExportPatterns&quot;i&quot;cmdRefEpoch&quot;i&quot;resolverEpoch&quot;i&quot;cmdResProc&quot;^?&quot;varResProc&quot;^?&quot;compiledVarResProc&quot;^?&quot;exportLookupEpoch&quot;i&quot;ensembles&quot;^{Tcl_Ensemble}&quot;unknownHandlerPtr&quot;^{Tcl_Obj}&quot;commandPathLength&quot;i&quot;commandPathArray&quot;^{NamespacePathEntry}&quot;commandPathSourceList&quot;^{NamespacePathEntry}}'>
<field declared_type='char*' name='name' type='*'/>
<field declared_type='char*' name='fullName' type='*'/>
<field declared_type='ClientData' name='clientData' type='^v'/>
<field declared_type='Tcl_NamespaceDeleteProc*' function_pointer='true' name='deleteProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='struct Namespace*' name='parentPtr' type='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}l^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}' type64='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}q^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}'/>
<field declared_type='Tcl_HashTable' name='childTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='long' name='nsId' type='l' type64='q'/>
<field declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<field declared_type='int' name='flags' type='i'/>
<field declared_type='int' name='activationCount' type='i'/>
<field declared_type='int' name='refCount' type='i'/>
<field declared_type='Tcl_HashTable' name='cmdTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='TclVarHashTable' name='varTable' type='{TclVarHashTable=&quot;table&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsPtr&quot;^{Namespace}}'/>
<field declared_type='char**' name='exportArrayPtr' type='^*'/>
<field declared_type='int' name='numExportPatterns' type='i'/>
<field declared_type='int' name='maxExportPatterns' type='i'/>
<field declared_type='int' name='cmdRefEpoch' type='i'/>
<field declared_type='int' name='resolverEpoch' type='i'/>
<field declared_type='Tcl_ResolveCmdProc*' function_pointer='true' name='cmdResProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Command*' type='^^{Tcl_Command_}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_ResolveVarProc*' function_pointer='true' name='varResProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Var*' type='^^{Tcl_Var_}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_ResolveCompiledVarProc*' function_pointer='true' name='compiledVarResProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='Tcl_ResolvedVarInfo**' type='^^{Tcl_ResolvedVarInfo}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int' name='exportLookupEpoch' type='i'/>
<field declared_type='Tcl_Ensemble*' name='ensembles' type='^{Tcl_Ensemble=}'/>
<field declared_type='Tcl_Obj*' name='unknownHandlerPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<field declared_type='int' name='commandPathLength' type='i'/>
<field declared_type='NamespacePathEntry*' name='commandPathArray' type='^{NamespacePathEntry=^{Namespace}^{Namespace}^{NamespacePathEntry}^{NamespacePathEntry}}'/>
<field declared_type='NamespacePathEntry*' name='commandPathSourceList' type='^{NamespacePathEntry=^{Namespace}^{Namespace}^{NamespacePathEntry}^{NamespacePathEntry}}'/>
</struct>
<struct name='NamespacePathEntry' type='{NamespacePathEntry=&quot;nsPtr&quot;^{Namespace}&quot;creatorNsPtr&quot;^{Namespace}&quot;prevPtr&quot;^{NamespacePathEntry}&quot;nextPtr&quot;^{NamespacePathEntry}}'>
<field declared_type='Namespace*' name='nsPtr' type='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}l^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}' type64='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}q^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}'/>
<field declared_type='Namespace*' name='creatorNsPtr' type='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}l^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}' type64='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}q^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}'/>
<field declared_type='NamespacePathEntry*' name='prevPtr' type='^{NamespacePathEntry=^{Namespace}^{Namespace}^{NamespacePathEntry}^{NamespacePathEntry}}'/>
<field declared_type='NamespacePathEntry*' name='nextPtr' type='^{NamespacePathEntry=^{Namespace}^{Namespace}^{NamespacePathEntry}^{NamespacePathEntry}}'/>
</struct>
<struct name='Proc' type='{Proc=&quot;iPtr&quot;^{Interp}&quot;refCount&quot;i&quot;cmdPtr&quot;^{Command}&quot;bodyPtr&quot;^{Tcl_Obj}&quot;numArgs&quot;i&quot;numCompiledLocals&quot;i&quot;firstLocalPtr&quot;^{CompiledLocal}&quot;lastLocalPtr&quot;^{CompiledLocal}}'>
<field declared_type='struct Interp*' name='iPtr' type='^{Interp=*^?i^{TclStubs}^^v^{Namespace}^{Tcl_HashTable}^v{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}ii^{CallFrame}^{CallFrame}^{ActiveVarTrace}i^{CallFrame}^{Namespace}*ii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}*iii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}i^{Proc}^{ResolverScheme}^{Tcl_Obj}il^{Trace}^{Tcl_HashTable}^{ExecEnv}^{Tcl_Obj}[201c]^{Tcl_Obj}^{Tcl_ThreadId_}^{ActiveCommandTrace}^{ActiveInterpTrace}i^{Tcl_Obj}^{Tcl_Obj}^{Tcl_Obj}^{Tcl_Obj}^{Tcl_Obj}i{?=iiii^{LimitHandler}i{Tcl_Time=ll}^{LimitHandler}i^{Tcl_TimerToken_}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}}{?=^^{Tcl_Obj}ii}^{Tcl_Obj}^{CmdFrame}^{CmdFrame}i^{Tcl_HashTable}^{Tcl_HashTable}^{Tcl_HashTable}^{Tcl_HashTable}^{ContLineLoc}i{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^v^v^i^i}' type64='^{Interp=*^?i^{TclStubs}^^v^{Namespace}^{Tcl_HashTable}^v{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}ii^{CallFrame}^{CallFrame}^{ActiveVarTrace}i^{CallFrame}^{Namespace}*ii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}*iii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}i^{Proc}^{ResolverScheme}^{Tcl_Obj}iq^{Trace}^{Tcl_HashTable}^{ExecEnv}^{Tcl_Obj}[201c]^{Tcl_Obj}^{Tcl_ThreadId_}^{ActiveCommandTrace}^{ActiveInterpTrace}i^{Tcl_Obj}^{Tcl_Obj}^{Tcl_Obj}^{Tcl_Obj}^{Tcl_Obj}i{?=iiii^{LimitHandler}i{Tcl_Time=qq}^{LimitHandler}i^{Tcl_TimerToken_}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}}{?=^^{Tcl_Obj}ii}^{Tcl_Obj}^{CmdFrame}^{CmdFrame}i^{Tcl_HashTable}^{Tcl_HashTable}^{Tcl_HashTable}^{Tcl_HashTable}^{ContLineLoc}i{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^v^v^i^i}'/>
<field declared_type='int' name='refCount' type='i'/>
<field declared_type='struct Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<field declared_type='Tcl_Obj*' name='bodyPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<field declared_type='int' name='numArgs' type='i'/>
<field declared_type='int' name='numCompiledLocals' type='i'/>
<field declared_type='CompiledLocal*' name='firstLocalPtr' type='^{CompiledLocal=^{CompiledLocal}iii^{Tcl_Obj}^{Tcl_ResolvedVarInfo}[4c]}'/>
<field declared_type='CompiledLocal*' name='lastLocalPtr' type='^{CompiledLocal=^{CompiledLocal}iii^{Tcl_Obj}^{Tcl_ResolvedVarInfo}[4c]}'/>
</struct>
<struct name='ProcessGlobalValue' type='{ProcessGlobalValue=&quot;epoch&quot;i&quot;numBytes&quot;i&quot;value&quot;*&quot;encoding&quot;^{Tcl_Encoding_}&quot;proc&quot;^?&quot;mutex&quot;^{Tcl_Mutex_}&quot;key&quot;^{Tcl_ThreadDataKey_}}'>
<field declared_type='int' name='epoch' type='i'/>
<field declared_type='int' name='numBytes' type='i'/>
<field declared_type='char*' name='value' type='*'/>
<field declared_type='Tcl_Encoding' name='encoding' type='^{Tcl_Encoding_=}'/>
<field declared_type='TclInitProcessGlobalValueProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='char**' type='^*'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='Tcl_Encoding*' type='^^{Tcl_Encoding_}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Mutex' name='mutex' type='^{Tcl_Mutex_=}'/>
<field declared_type='Tcl_ThreadDataKey' name='key' type='^{Tcl_ThreadDataKey_=}'/>
</struct>
<struct name='ResolverScheme' type='{ResolverScheme=&quot;name&quot;*&quot;cmdResProc&quot;^?&quot;varResProc&quot;^?&quot;compiledVarResProc&quot;^?&quot;nextPtr&quot;^{ResolverScheme}}'>
<field declared_type='char*' name='name' type='*'/>
<field declared_type='Tcl_ResolveCmdProc*' function_pointer='true' name='cmdResProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Command*' type='^^{Tcl_Command_}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_ResolveVarProc*' function_pointer='true' name='varResProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Var*' type='^^{Tcl_Var_}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_ResolveCompiledVarProc*' function_pointer='true' name='compiledVarResProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='Tcl_ResolvedVarInfo**' type='^^{Tcl_ResolvedVarInfo}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='struct ResolverScheme*' name='nextPtr' type='^{ResolverScheme=*^?^?^?^{ResolverScheme}}'/>
</struct>
<struct name='TclFileAttrProcs' type='{TclFileAttrProcs=&quot;getProc&quot;^?&quot;setProc&quot;^?}'>
<field declared_type='TclGetFileAttrProc*' function_pointer='true' name='getProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='TclSetFileAttrProc*' function_pointer='true' name='setProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
</struct>
<struct name='TclIntPlatStubs' type='{TclIntPlatStubs=&quot;magic&quot;i&quot;hooks&quot;^{TclIntPlatStubHooks}&quot;tclGetAndDetachPids&quot;^?&quot;tclpCloseFile&quot;^?&quot;tclpCreateCommandChannel&quot;^?&quot;tclpCreatePipe&quot;^?&quot;tclpCreateProcess&quot;^?&quot;reserved5&quot;^v&quot;tclpMakeFile&quot;^?&quot;tclpOpenFile&quot;^?&quot;tclUnixWaitForFile&quot;^?&quot;tclpCreateTempFile&quot;^?&quot;tclpReaddir&quot;^?&quot;tclpLocaltime_unix&quot;^?&quot;tclpGmtime_unix&quot;^?&quot;tclpInetNtoa&quot;^?&quot;tclUnixCopyFile&quot;^?}'>
<field declared_type='int' name='magic' type='i'/>
<field declared_type='struct TclIntPlatStubHooks*' name='hooks' type='^{TclIntPlatStubHooks=}'/>
<field declared_type='void (*)(Tcl_Interp *, Tcl_Channel)' function_pointer='true' name='tclGetAndDetachPids' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(TclFile)' function_pointer='true' name='tclpCloseFile' type='^?'>
<arg declared_type='TclFile' type='^{TclFile_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Channel (*)(TclFile, TclFile, TclFile, int, Tcl_Pid *)' function_pointer='true' name='tclpCreateCommandChannel' type='^?'>
<arg declared_type='TclFile' type='^{TclFile_=}'/>
<arg declared_type='TclFile' type='^{TclFile_=}'/>
<arg declared_type='TclFile' type='^{TclFile_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Pid*' type='^^{Tcl_Pid_}'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</field>
<field declared_type='int (*)(TclFile *, TclFile *)' function_pointer='true' name='tclpCreatePipe' type='^?'>
<arg declared_type='TclFile*' type='^^{TclFile_}'/>
<arg declared_type='TclFile*' type='^^{TclFile_}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, int, char **, TclFile, TclFile, TclFile, Tcl_Pid *)' function_pointer='true' name='tclpCreateProcess' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<arg declared_type='TclFile' type='^{TclFile_=}'/>
<arg declared_type='TclFile' type='^{TclFile_=}'/>
<arg declared_type='TclFile' type='^{TclFile_=}'/>
<arg declared_type='Tcl_Pid*' type='^^{Tcl_Pid_}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void*' name='reserved5' type='^v'/>
<field declared_type='TclFile (*)(Tcl_Channel, int)' function_pointer='true' name='tclpMakeFile' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='TclFile' type='^{TclFile_=}'/>
</field>
<field declared_type='TclFile (*)( char *, int)' function_pointer='true' name='tclpOpenFile' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='TclFile' type='^{TclFile_=}'/>
</field>
<field declared_type='int (*)(int, int, int)' function_pointer='true' name='tclUnixWaitForFile' type='^?'>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='TclFile (*)( char *)' function_pointer='true' name='tclpCreateTempFile' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='TclFile' type='^{TclFile_=}'/>
</field>
<field declared_type='Tcl_DirEntry *(*)(DIR *)' function_pointer='true' name='tclpReaddir' type='^?'>
<arg declared_type='DIR*' type='^{_DIR=ill*illi{_opaque_pthread_mutex_t=l[40c]}^{_telldir}}' type64='^{_DIR=iqq*iqqi{_opaque_pthread_mutex_t=q[56c]}^{_telldir}}'/>
<retval declared_type='Tcl_DirEntry*' type='^{dirent=QQSSC[1024c]}'/>
</field>
<field declared_type='struct tm *(*)( time_t *)' function_pointer='true' name='tclpLocaltime_unix' type='^?'>
<arg const='true' declared_type='time_t*' type='^i' type64='^q'/>
<retval declared_type='struct tm*' type='^{tm=iiiiiiiiil*}' type64='^{tm=iiiiiiiiiq*}'/>
</field>
<field declared_type='struct tm *(*)( time_t *)' function_pointer='true' name='tclpGmtime_unix' type='^?'>
<arg const='true' declared_type='time_t*' type='^i' type64='^q'/>
<retval declared_type='struct tm*' type='^{tm=iiiiiiiiil*}' type64='^{tm=iiiiiiiiiq*}'/>
</field>
<field declared_type='char *(*)(struct in_addr)' function_pointer='true' name='tclpInetNtoa' type='^?'>
<arg declared_type='struct in_addr' type='{in_addr=I}'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)( char *, char *, Tcl_StatBuf *, int)' function_pointer='true' name='tclUnixCopyFile' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='Tcl_StatBuf*' type='^{stat=iSSQIIi{timespec=il}{timespec=il}{timespec=il}{timespec=il}qqiIIi[2q]}' type64='^{stat=iSSQIIi{timespec=qq}{timespec=qq}{timespec=qq}{timespec=qq}qqiIIi[2q]}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
</struct>
<struct name='TclIntStubs' type='{TclIntStubs=}'>
<field declared_type='int' name='magic' type='i'/>
<field declared_type='struct TclIntStubHooks*' name='hooks' type='^{TclIntStubHooks=}'/>
<field declared_type='void*' name='reserved0' type='^v'/>
<field declared_type='void*' name='reserved1' type='^v'/>
<field declared_type='void*' name='reserved2' type='^v'/>
<field declared_type='void (*)(void)' function_pointer='true' name='tclAllocateFreeObjects' type='^?'>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' name='reserved4' type='^v'/>
<field declared_type='int (*)(Tcl_Interp *, int, Tcl_Pid *, Tcl_Channel)' function_pointer='true' name='tclCleanupChildren' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Pid*' type='^^{Tcl_Pid_}'/>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(int *)' function_pointer='true' name='tclCleanupCommand' type='^?'>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(int, char *, char *)' function_pointer='true' name='tclCopyAndCollapse' type='^?'>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Channel, Tcl_Channel, int, Tcl_Obj *)' function_pointer='true' name='tclCopyChannel' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, int, char **, Tcl_Pid **, int *, int *, int *)' function_pointer='true' name='tclCreatePipeline' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<arg declared_type='Tcl_Pid**' type='^^^{Tcl_Pid_}'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, int *, char *, Tcl_Obj *, Tcl_Obj *, int **)' function_pointer='true' name='tclCreateProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int*' type='^i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int**' type='^^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(int *, int *)' function_pointer='true' name='tclDeleteCompiledLocalVars' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(int *, int *)' function_pointer='true' name='tclDeleteVars' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' name='reserved13' type='^v'/>
<field declared_type='void (*)(FILE *)' function_pointer='true' name='tclDumpMemoryInfo' type='^?'>
<arg declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' name='reserved15' type='^v'/>
<field declared_type='void (*)(Tcl_Interp *, double)' function_pointer='true' name='tclExprFloatError' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='double' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' name='reserved17' type='^v'/>
<field declared_type='void*' name='reserved18' type='^v'/>
<field declared_type='void*' name='reserved19' type='^v'/>
<field declared_type='void*' name='reserved20' type='^v'/>
<field declared_type='void*' name='reserved21' type='^v'/>
<field declared_type='int (*)(Tcl_Interp *, char *, int, char **, char **, int *, int *)' function_pointer='true' name='tclFindElement' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<arg const='true' declared_type='char**' type='^*'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int *(*)(int *, char *)' function_pointer='true' name='tclFindProc' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int*' type='^i'/>
</field>
<field declared_type='void*' name='reserved24' type='^v'/>
<field declared_type='void (*)(int *)' function_pointer='true' name='tclFreePackageInfo' type='^?'>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' name='reserved26' type='^v'/>
<field declared_type='void*' name='reserved27' type='^v'/>
<field declared_type='Tcl_Channel (*)(int)' function_pointer='true' name='tclpGetDefaultStdChannel' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</field>
<field declared_type='void*' name='reserved29' type='^v'/>
<field declared_type='void*' name='reserved30' type='^v'/>
<field const='true' declared_type='char *(*)( char *)' function_pointer='true' name='tclGetExtension' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int **)' function_pointer='true' name='tclGetFrame' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int**' type='^^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void*' name='reserved33' type='^v'/>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int, int *)' function_pointer='true' name='tclGetIntForIndex' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void*' name='reserved35' type='^v'/>
<field declared_type='int (*)(Tcl_Interp *, char *, long *)' function_pointer='true' name='tclGetLong' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long*' type='^l' type64='^q'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *)' function_pointer='true' name='tclGetLoadedPackages' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int *, int, int **, int **, int **, char **)' function_pointer='true' name='tclGetNamespaceForQualName' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int**' type='^^i'/>
<arg declared_type='int**' type='^^i'/>
<arg declared_type='int**' type='^^i'/>
<arg const='true' declared_type='char**' type='^*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (int *)' name='TclObjCmdProcType' type='?'/>
<field declared_type='int (*)(Tcl_Interp *, char *, int *)' function_pointer='true' name='tclGetOpenMode' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Command (*)(Tcl_Command)' function_pointer='true' name='tclGetOriginalCommand' type='^?'>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</field>
<field declared_type='char *(*)( char *, Tcl_DString *)' function_pointer='true' name='tclpGetUserHome' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='void*' name='reserved43' type='^v'/>
<field declared_type='int (*)( char *, Tcl_DString *)' function_pointer='true' name='tclGuessPackageName' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *)' function_pointer='true' name='tclHideUnsafeCommands' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(void)' function_pointer='true' name='tclInExit' type='^?'>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void*' name='reserved47' type='^v'/>
<field declared_type='void*' name='reserved48' type='^v'/>
<field declared_type='void*' name='reserved49' type='^v'/>
<field declared_type='void (*)(Tcl_Interp *, int *, int *)' function_pointer='true' name='tclInitCompiledLocals' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *)' function_pointer='true' name='tclInterpInit' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void*' name='reserved52' type='^v'/>
<field declared_type='int (*)(ClientData, Tcl_Interp *, int, char **)' function_pointer='true' name='tclInvokeObjectCommand' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(ClientData, Tcl_Interp *, int, Tcl_Obj * *)' function_pointer='true' name='tclInvokeStringCommand' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int *(*)(int *)' function_pointer='true' name='tclIsProc' type='^?'>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int*' type='^i'/>
</field>
<field declared_type='void*' name='reserved56' type='^v'/>
<field declared_type='void*' name='reserved57' type='^v'/>
<field declared_type='int *(*)(Tcl_Interp *, char *, char *, int, char *, int, int, int **)' function_pointer='true' name='tclLookupVar' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int**' type='^^i'/>
<retval declared_type='int*' type='^i'/>
</field>
<field declared_type='void*' name='reserved59' type='^v'/>
<field declared_type='int (*)( char *, char *)' function_pointer='true' name='tclNeedSpace' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Obj *(*)(int *)' function_pointer='true' name='tclNewProcBodyObj' type='^?'>
<arg declared_type='int*' type='^i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='int (*)(Tcl_Obj *)' function_pointer='true' name='tclObjCommandComplete' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(ClientData, Tcl_Interp *, int, Tcl_Obj * *)' function_pointer='true' name='tclObjInterpProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, int, Tcl_Obj * *, int)' function_pointer='true' name='tclObjInvoke' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void*' name='reserved65' type='^v'/>
<field declared_type='void*' name='reserved66' type='^v'/>
<field declared_type='void*' name='reserved67' type='^v'/>
<field declared_type='void*' name='reserved68' type='^v'/>
<field declared_type='char *(*)(unsigned int)' function_pointer='true' name='tclpAlloc' type='^?'>
<arg declared_type='unsigned int' type='I'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='void*' name='reserved70' type='^v'/>
<field declared_type='void*' name='reserved71' type='^v'/>
<field declared_type='void*' name='reserved72' type='^v'/>
<field declared_type='void*' name='reserved73' type='^v'/>
<field declared_type='void (*)(char *)' function_pointer='true' name='tclpFree' type='^?'>
<arg declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='unsigned long (*)(void)' function_pointer='true' name='tclpGetClicks' type='^?'>
<retval declared_type='unsigned long' type='L' type64='Q'/>
</field>
<field declared_type='unsigned long (*)(void)' function_pointer='true' name='tclpGetSeconds' type='^?'>
<retval declared_type='unsigned long' type='L' type64='Q'/>
</field>
<field declared_type='void (*)(Tcl_Time *)' function_pointer='true' name='tclpGetTime' type='^?'>
<arg declared_type='Tcl_Time*' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(unsigned long)' function_pointer='true' name='tclpGetTimeZone' type='^?'>
<arg declared_type='unsigned long' type='L' type64='Q'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void*' name='reserved79' type='^v'/>
<field declared_type='void*' name='reserved80' type='^v'/>
<field declared_type='char *(*)(char *, unsigned int)' function_pointer='true' name='tclpRealloc' type='^?'>
<arg declared_type='char*' type='*'/>
<arg declared_type='unsigned int' type='I'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='void*' name='reserved82' type='^v'/>
<field declared_type='void*' name='reserved83' type='^v'/>
<field declared_type='void*' name='reserved84' type='^v'/>
<field declared_type='void*' name='reserved85' type='^v'/>
<field declared_type='void*' name='reserved86' type='^v'/>
<field declared_type='void*' name='reserved87' type='^v'/>
<field declared_type='char *(*)(ClientData, Tcl_Interp *, char *, char *, int)' function_pointer='true' name='tclPrecTraceProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Interp *, Tcl_Command)' function_pointer='true' name='tclPreventAliasLoop' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void*' name='reserved90' type='^v'/>
<field declared_type='void (*)(int *)' function_pointer='true' name='tclProcCleanupProc' type='^?'>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, int *, Tcl_Obj *, int *, char *, char *)' function_pointer='true' name='tclProcCompileProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(ClientData)' function_pointer='true' name='tclProcDeleteProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' name='reserved94' type='^v'/>
<field declared_type='void*' name='reserved95' type='^v'/>
<field declared_type='int (*)(Tcl_Interp *, char *, char *)' function_pointer='true' name='tclRenameCommand' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, int *)' function_pointer='true' name='tclResetShadowedCmdRefs' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(void)' function_pointer='true' name='tclServiceIdle' type='^?'>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void*' name='reserved99' type='^v'/>
<field declared_type='void*' name='reserved100' type='^v'/>
<field declared_type='char *(*)(char *)' function_pointer='true' name='tclSetPreInitScript' type='^?'>
<arg declared_type='char*' type='*'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='void (*)(Tcl_Interp *)' function_pointer='true' name='tclSetupEnv' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, char *, int *)' function_pointer='true' name='tclSockGetPort' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(int, int)' function_pointer='true' name='tclSockMinimumBuffers' type='^?'>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void*' name='reserved105' type='^v'/>
<field declared_type='void*' name='reserved106' type='^v'/>
<field declared_type='void*' name='reserved107' type='^v'/>
<field declared_type='void (*)(int *)' function_pointer='true' name='tclTeardownNamespace' type='^?'>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(int *)' function_pointer='true' name='tclUpdateReturnInfo' type='^?'>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void*' name='reserved110' type='^v'/>
<field declared_type='void (*)(Tcl_Interp *, char *, int *, int *, int *)' function_pointer='true' name='tcl_AddInterpResolvers' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Namespace *, Tcl_Obj *)' function_pointer='true' name='tcl_AppendExportList' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Namespace *(*)(Tcl_Interp *, char *, ClientData, Tcl_NamespaceDeleteProc *)' function_pointer='true' name='tcl_CreateNamespace' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_NamespaceDeleteProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
</field>
<field declared_type='void (*)(Tcl_Namespace *)' function_pointer='true' name='tcl_DeleteNamespace' type='^?'>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Namespace *, char *, int)' function_pointer='true' name='tcl_Export' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Command (*)(Tcl_Interp *, char *, Tcl_Namespace *, int)' function_pointer='true' name='tcl_FindCommand' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</field>
<field declared_type='Tcl_Namespace *(*)(Tcl_Interp *, char *, Tcl_Namespace *, int)' function_pointer='true' name='tcl_FindNamespace' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int *)' function_pointer='true' name='tcl_GetInterpResolvers' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Namespace *, int *)' function_pointer='true' name='tcl_GetNamespaceResolvers' type='^?'>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Var (*)(Tcl_Interp *, char *, Tcl_Namespace *, int)' function_pointer='true' name='tcl_FindNamespaceVar' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Var' type='^{Tcl_Var_=}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Namespace *, char *)' function_pointer='true' name='tcl_ForgetImport' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Command (*)(Tcl_Interp *, Tcl_Obj *)' function_pointer='true' name='tcl_GetCommandFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tcl_Command, Tcl_Obj *)' function_pointer='true' name='tcl_GetCommandFullName' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Namespace *(*)(Tcl_Interp *)' function_pointer='true' name='tcl_GetCurrentNamespace' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
</field>
<field declared_type='Tcl_Namespace *(*)(Tcl_Interp *)' function_pointer='true' name='tcl_GetGlobalNamespace' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tcl_Var, Tcl_Obj *)' function_pointer='true' name='tcl_GetVariableFullName' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Var' type='^{Tcl_Var_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Namespace *, char *, int)' function_pointer='true' name='tcl_Import' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *)' function_pointer='true' name='tcl_PopCallFrame' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_CallFrame *, Tcl_Namespace *, int)' function_pointer='true' name='tcl_PushCallFrame' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_CallFrame*' type='^{Tcl_CallFrame=^{Tcl_Namespace}ii^v^v^vi^v^vi^v^v^v^v}'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *)' function_pointer='true' name='tcl_RemoveInterpResolvers' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Namespace *, int *, int *, int *)' function_pointer='true' name='tcl_SetNamespaceResolvers' type='^?'>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *)' function_pointer='true' name='tclpHasSockets' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='struct tm *(*)( time_t *, int)' function_pointer='true' name='tclpGetDate' type='^?'>
<arg const='true' declared_type='time_t*' type='^i' type64='^q'/>
<arg declared_type='int' type='i'/>
<retval declared_type='struct tm*' type='^{tm=iiiiiiiiil*}' type64='^{tm=iiiiiiiiiq*}'/>
</field>
<field declared_type='void*' name='reserved134' type='^v'/>
<field declared_type='void*' name='reserved135' type='^v'/>
<field declared_type='void*' name='reserved136' type='^v'/>
<field declared_type='void*' name='reserved137' type='^v'/>
<field const='true' declared_type='char *(*)( char *, Tcl_DString *)' function_pointer='true' name='tclGetEnv' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='void*' name='reserved139' type='^v'/>
<field declared_type='void*' name='reserved140' type='^v'/>
<field const='true' declared_type='char *(*)(Tcl_Interp *, Tcl_DString *)' function_pointer='true' name='tclpGetCwd' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int *, ClientData)' function_pointer='true' name='tclSetByteCodeFromAny' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(struct CompileEnv *, Tcl_Obj *, int **)' function_pointer='true' name='tclAddLiteralObj' type='^?'>
<arg declared_type='struct CompileEnv*' type='^{CompileEnv=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int**' type='^^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, struct CompileEnv *, int)' function_pointer='true' name='tclHideLiteral' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='struct CompileEnv*' type='^{CompileEnv=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='struct AuxDataType *(*)(char *)' function_pointer='true' name='tclGetAuxDataType' type='^?'>
<arg declared_type='char*' type='*'/>
<retval declared_type='struct AuxDataType*' type='^{AuxDataType=*^?^?^?}'/>
</field>
<field declared_type='int (int *)' name='TclHandle' type='?'/>
<field declared_type='void (*)(int)' function_pointer='true' name='tclHandleFree' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(int)' function_pointer='true' name='tclHandleRelease' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_RegExp)' function_pointer='true' name='tclRegAbout' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_RegExp' type='^{Tcl_RegExp_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_RegExp, int, int *, int *)' function_pointer='true' name='tclRegExpRangeUniChar' type='^?'>
<arg declared_type='Tcl_RegExp' type='^{Tcl_RegExp_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Obj *)' function_pointer='true' name='tclSetLibraryPath' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Obj *(*)(void)' function_pointer='true' name='tclGetLibraryPath' type='^?'>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='void*' name='reserved154' type='^v'/>
<field declared_type='void*' name='reserved155' type='^v'/>
<field declared_type='void (*)(Tcl_Interp *, char *, int)' function_pointer='true' name='tclRegError' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int *(*)(Tcl_Interp *, char *)' function_pointer='true' name='tclVarTraceExists' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int*' type='^i'/>
</field>
<field declared_type='void (*)( char *)' function_pointer='true' name='tclSetStartupScriptFileName' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field const='true' declared_type='char *(*)(void)' function_pointer='true' name='tclGetStartupScriptFileName' type='^?'>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='void*' name='reserved160' type='^v'/>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Channel, Tcl_Obj *)' function_pointer='true' name='tclChannelTransform' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(ClientData, int)' function_pointer='true' name='tclChannelEventScriptInvoker' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void *(*)(void)' function_pointer='true' name='tclGetInstructionTable' type='^?'>
<retval declared_type='void*' type='^v'/>
</field>
<field declared_type='void (*)(void *)' function_pointer='true' name='tclExpandCodeArray' type='^?'>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(void)' function_pointer='true' name='tclpSetInitialEncodings' type='^?'>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int, Tcl_Obj *)' function_pointer='true' name='tclListObjSetElement' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Obj *)' function_pointer='true' name='tclSetStartupScriptPath' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Obj *(*)(void)' function_pointer='true' name='tclGetStartupScriptPath' type='^?'>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='int (*)( char *, char *, unsigned long)' function_pointer='true' name='tclpUtfNcmp2' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='unsigned long' type='L' type64='Q'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int, int *, int, int, int, Tcl_Obj * *)' function_pointer='true' name='tclCheckInterpTraces' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int, int *, int, int, int, Tcl_Obj * *)' function_pointer='true' name='tclCheckExecutionTraces' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(void)' function_pointer='true' name='tclInThreadExit' type='^?'>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)( Tcl_UniChar *, int, Tcl_UniChar *, int, int)' function_pointer='true' name='tclUniCharMatch' type='^?'>
<arg const='true' declared_type='Tcl_UniChar*' type='^S'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_UniChar*' type='^S'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void*' name='reserved174' type='^v'/>
<field declared_type='int (*)(int *, int *, int *, char *, char *, int, int)' function_pointer='true' name='tclCallVarTraces' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(int *, int *)' function_pointer='true' name='tclCleanupVar' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, char *, char *, char *, char *)' function_pointer='true' name='tclVarErrMsg' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, char *)' function_pointer='true' name='tcl_SetStartupScript' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Obj *(*)( char **)' function_pointer='true' name='tcl_GetStartupScript' type='^?'>
<arg const='true' declared_type='char**' type='^*'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='void*' name='reserved180' type='^v'/>
<field declared_type='void*' name='reserved181' type='^v'/>
<field declared_type='struct tm *(*)( time_t *)' function_pointer='true' name='tclpLocaltime' type='^?'>
<arg const='true' declared_type='time_t*' type='^i' type64='^q'/>
<retval declared_type='struct tm*' type='^{tm=iiiiiiiiil*}' type64='^{tm=iiiiiiiiiq*}'/>
</field>
<field declared_type='struct tm *(*)( time_t *)' function_pointer='true' name='tclpGmtime' type='^?'>
<arg const='true' declared_type='time_t*' type='^i' type64='^q'/>
<retval declared_type='struct tm*' type='^{tm=iiiiiiiiil*}' type64='^{tm=iiiiiiiiiq*}'/>
</field>
<field declared_type='void*' name='reserved184' type='^v'/>
<field declared_type='void*' name='reserved185' type='^v'/>
<field declared_type='void*' name='reserved186' type='^v'/>
<field declared_type='void*' name='reserved187' type='^v'/>
<field declared_type='void*' name='reserved188' type='^v'/>
<field declared_type='void*' name='reserved189' type='^v'/>
<field declared_type='void*' name='reserved190' type='^v'/>
<field declared_type='void*' name='reserved191' type='^v'/>
<field declared_type='void*' name='reserved192' type='^v'/>
<field declared_type='void*' name='reserved193' type='^v'/>
<field declared_type='void*' name='reserved194' type='^v'/>
<field declared_type='void*' name='reserved195' type='^v'/>
<field declared_type='void*' name='reserved196' type='^v'/>
<field declared_type='void*' name='reserved197' type='^v'/>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int **)' function_pointer='true' name='tclObjGetFrame' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int**' type='^^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void*' name='reserved199' type='^v'/>
<field declared_type='int (*)(Tcl_Obj *, int, Tcl_Obj **)' function_pointer='true' name='tclpObjRemoveDirectory' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Obj *, Tcl_Obj *, Tcl_Obj **)' function_pointer='true' name='tclpObjCopyDirectory' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Obj *)' function_pointer='true' name='tclpObjCreateDirectory' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Obj *)' function_pointer='true' name='tclpObjDeleteFile' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Obj *, Tcl_Obj *)' function_pointer='true' name='tclpObjCopyFile' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Obj *, Tcl_Obj *)' function_pointer='true' name='tclpObjRenameFile' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Obj *, Tcl_StatBuf *)' function_pointer='true' name='tclpObjStat' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_StatBuf*' type='^{stat=iSSQIIi{timespec=il}{timespec=il}{timespec=il}{timespec=il}qqiIIi[2q]}' type64='^{stat=iSSQIIi{timespec=qq}{timespec=qq}{timespec=qq}{timespec=qq}qqiIIi[2q]}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Obj *, int)' function_pointer='true' name='tclpObjAccess' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Channel (*)(Tcl_Interp *, Tcl_Obj *, int, int)' function_pointer='true' name='tclpOpenFileChannel' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</field>
<field declared_type='void*' name='reserved209' type='^v'/>
<field declared_type='void*' name='reserved210' type='^v'/>
<field declared_type='void*' name='reserved211' type='^v'/>
<field declared_type='void (*)( char *)' function_pointer='true' name='tclpFindExecutable' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Obj *(*)(void)' function_pointer='true' name='tclGetObjNameOfExecutable' type='^?'>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, Tcl_Encoding)' function_pointer='true' name='tclSetObjNameOfExecutable' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Encoding' type='^{Tcl_Encoding_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void *(*)(Tcl_Interp *, int)' function_pointer='true' name='tclStackAlloc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void*' type='^v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, void *)' function_pointer='true' name='tclStackFree' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_CallFrame **, Tcl_Namespace *, int)' function_pointer='true' name='tclPushStackFrame' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_CallFrame**' type='^^{Tcl_CallFrame}'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *)' function_pointer='true' name='tclPopStackFrame' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' name='reserved219' type='^v'/>
<field declared_type='void*' name='reserved220' type='^v'/>
<field declared_type='void*' name='reserved221' type='^v'/>
<field declared_type='void*' name='reserved222' type='^v'/>
<field declared_type='void*' name='reserved223' type='^v'/>
<field declared_type='int *(*)(void)' function_pointer='true' name='tclGetPlatform' type='^?'>
<retval declared_type='int*' type='^i'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Interp *, Tcl_Obj *, int, Tcl_Obj * *, int)' function_pointer='true' name='tclTraceDictPath' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='int (*)(Tcl_Obj *)' function_pointer='true' name='tclObjBeingDeleted' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(int *, int, Tcl_Namespace **)' function_pointer='true' name='tclSetNsPath' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Namespace**' type='^^{Tcl_Namespace}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int, int)' function_pointer='true' name='tclObjInterpProcCore' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, int *, char *, int, int)' function_pointer='true' name='tclPtrMakeUpvar' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int*' type='^i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int *(*)(Tcl_Interp *, Tcl_Obj *, char *, int, char *, int, int, int **)' function_pointer='true' name='tclObjLookupVar' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='int' type='i'/>
<arg const='true' declared_type='int' type='i'/>
<arg declared_type='int**' type='^^i'/>
<retval declared_type='int*' type='^i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, Tcl_Namespace **)' function_pointer='true' name='tclGetNamespaceFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Namespace**' type='^^{Tcl_Namespace}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int, int *, int)' function_pointer='true' name='tclEvalObjEx' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='int*' type='^i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(int *)' function_pointer='true' name='tclGetSrcInfoForPc' type='^?'>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int *(*)(int *, char *, int *)' function_pointer='true' name='tclVarHashCreateVar' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int*' type='^i'/>
</field>
<field declared_type='void (*)(int *, int *)' function_pointer='true' name='tclInitVarHashTable' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, int)' function_pointer='true' name='tclBackgroundException' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' name='reserved237' type='^v'/>
<field declared_type='void*' name='reserved238' type='^v'/>
<field declared_type='void*' name='reserved239' type='^v'/>
<field declared_type='void*' name='reserved240' type='^v'/>
<field declared_type='void*' name='reserved241' type='^v'/>
<field declared_type='void*' name='reserved242' type='^v'/>
<field declared_type='void (*)(FILE *)' function_pointer='true' name='tclDbDumpActiveObjects' type='^?'>
<arg declared_type='FILE*' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='TclOpCmdClientData' type='{_TclOpCmdClientData=&quot;op&quot;*&quot;expected&quot;*&quot;i&quot;(?=&quot;numArgs&quot;i&quot;identity&quot;i)}'>
<field const='true' declared_type='char*' name='op' type='*'/>
<field const='true' declared_type='char*' name='expected' type='*'/>
<field declared_type='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/System/Library/Frameworks/Tcl.framework/Headers/tcl-private/tclCompile.h:843:5)' name='i' type='(?=&quot;numArgs&quot;i&quot;identity&quot;i)'/>
</struct>
<struct name='TclPlatStubs' type='{TclPlatStubs=&quot;magic&quot;i&quot;hooks&quot;^{TclPlatStubHooks}}'>
<field declared_type='int' name='magic' type='i'/>
<field declared_type='struct TclPlatStubHooks*' name='hooks' type='^{TclPlatStubHooks=}'/>
</struct>
<struct name='TclStubHooks' type='{TclStubHooks=&quot;tclPlatStubs&quot;^{TclPlatStubs}&quot;tclIntStubs&quot;^{TclIntStubs}&quot;tclIntPlatStubs&quot;^{TclIntPlatStubs}}'>
<field declared_type='struct TclPlatStubs*' name='tclPlatStubs' type='^{TclPlatStubs=i^{TclPlatStubHooks}}'/>
<field declared_type='struct TclIntStubs*' name='tclIntStubs' type='^{TclIntStubs=}'/>
<field declared_type='struct TclIntPlatStubs*' name='tclIntPlatStubs' type='^{TclIntPlatStubs=i^{TclIntPlatStubHooks}^?^?^?^?^?^v^?^?^?^?^?^?^?^?^?}'/>
</struct>
<struct name='TclStubs' type='{TclStubs=&quot;magic&quot;i&quot;hooks&quot;^{TclStubHooks}&quot;tcl_PkgProvideEx&quot;^?&quot;tcl_PkgRequireEx&quot;^?&quot;tcl_Panic&quot;^?&quot;tcl_Alloc&quot;^?&quot;tcl_Free&quot;^?&quot;tcl_Realloc&quot;^?&quot;tcl_DbCkalloc&quot;^?&quot;tcl_DbCkfree&quot;^?&quot;tcl_DbCkrealloc&quot;^?&quot;tcl_CreateFileHandler&quot;^?&quot;tcl_DeleteFileHandler&quot;^?&quot;tcl_SetTimer&quot;^?&quot;tcl_Sleep&quot;^?&quot;tcl_WaitForEvent&quot;^?&quot;tcl_AppendAllObjTypes&quot;^?&quot;tcl_AppendStringsToObj&quot;^?&quot;tcl_AppendToObj&quot;^?&quot;tcl_ConcatObj&quot;^?&quot;tcl_ConvertToType&quot;^?&quot;tcl_DbDecrRefCount&quot;^?&quot;tcl_DbIncrRefCount&quot;^?&quot;tcl_DbIsShared&quot;^?&quot;tcl_DbNewBooleanObj&quot;^?&quot;tcl_DbNewByteArrayObj&quot;^?&quot;tcl_DbNewDoubleObj&quot;^?&quot;tcl_DbNewListObj&quot;^?&quot;tcl_DbNewLongObj&quot;^?&quot;tcl_DbNewObj&quot;^?&quot;tcl_DbNewStringObj&quot;^?&quot;tcl_DuplicateObj&quot;^?&quot;tclFreeObj&quot;^?&quot;tcl_GetBoolean&quot;^?&quot;tcl_GetBooleanFromObj&quot;^?&quot;tcl_GetByteArrayFromObj&quot;^?&quot;tcl_GetDouble&quot;^?&quot;tcl_GetDoubleFromObj&quot;^?&quot;tcl_GetIndexFromObj&quot;^?&quot;tcl_GetInt&quot;^?&quot;tcl_GetIntFromObj&quot;^?&quot;tcl_GetLongFromObj&quot;^?&quot;tcl_GetObjType&quot;^?&quot;tcl_GetStringFromObj&quot;^?&quot;tcl_InvalidateStringRep&quot;^?&quot;tcl_ListObjAppendList&quot;^?&quot;tcl_ListObjAppendElement&quot;^?&quot;tcl_ListObjGetElements&quot;^?&quot;tcl_ListObjIndex&quot;^?&quot;tcl_ListObjLength&quot;^?&quot;tcl_ListObjReplace&quot;^?&quot;tcl_NewBooleanObj&quot;^?&quot;tcl_NewByteArrayObj&quot;^?&quot;tcl_NewDoubleObj&quot;^?&quot;tcl_NewIntObj&quot;^?&quot;tcl_NewListObj&quot;^?&quot;tcl_NewLongObj&quot;^?&quot;tcl_NewObj&quot;^?&quot;tcl_NewStringObj&quot;^?&quot;tcl_SetBooleanObj&quot;^?&quot;tcl_SetByteArrayLength&quot;^?&quot;tcl_SetByteArrayObj&quot;^?&quot;tcl_SetDoubleObj&quot;^?&quot;tcl_SetIntObj&quot;^?&quot;tcl_SetListObj&quot;^?&quot;tcl_SetLongObj&quot;^?&quot;tcl_SetObjLength&quot;^?&quot;tcl_SetStringObj&quot;^?&quot;tcl_AddErrorInfo&quot;^?&quot;tcl_AddObjErrorInfo&quot;^?&quot;tcl_AllowExceptions&quot;^?&quot;tcl_AppendElement&quot;^?&quot;tcl_AppendResult&quot;^?&quot;tcl_AsyncCreate&quot;^?&quot;tcl_AsyncDelete&quot;^?&quot;tcl_AsyncInvoke&quot;^?&quot;tcl_AsyncMark&quot;^?&quot;tcl_AsyncReady&quot;^?&quot;tcl_BackgroundError&quot;^?&quot;tcl_Backslash&quot;^?&quot;tcl_BadChannelOption&quot;^?&quot;tcl_CallWhenDeleted&quot;^?&quot;tcl_CancelIdleCall&quot;^?&quot;tcl_Close&quot;^?&quot;tcl_CommandComplete&quot;^?&quot;tcl_Concat&quot;^?&quot;tcl_ConvertElement&quot;^?&quot;tcl_ConvertCountedElement&quot;^?&quot;tcl_CreateAlias&quot;^?&quot;tcl_CreateAliasObj&quot;^?&quot;tcl_CreateChannel&quot;^?&quot;tcl_CreateChannelHandler&quot;^?&quot;tcl_CreateCloseHandler&quot;^?&quot;tcl_CreateCommand&quot;^?&quot;tcl_CreateEventSource&quot;^?&quot;tcl_CreateExitHandler&quot;^?&quot;tcl_CreateInterp&quot;^?&quot;tcl_CreateMathFunc&quot;^?&quot;tcl_CreateObjCommand&quot;^?&quot;tcl_CreateSlave&quot;^?&quot;tcl_CreateTimerHandler&quot;^?&quot;tcl_CreateTrace&quot;^?&quot;tcl_DeleteAssocData&quot;^?&quot;tcl_DeleteChannelHandler&quot;^?&quot;tcl_DeleteCloseHandler&quot;^?&quot;tcl_DeleteCommand&quot;^?&quot;tcl_DeleteCommandFromToken&quot;^?&quot;tcl_DeleteEvents&quot;^?&quot;tcl_DeleteEventSource&quot;^?&quot;tcl_DeleteExitHandler&quot;^?&quot;tcl_DeleteHashEntry&quot;^?&quot;tcl_DeleteHashTable&quot;^?&quot;tcl_DeleteInterp&quot;^?&quot;tcl_DetachPids&quot;^?&quot;tcl_DeleteTimerHandler&quot;^?&quot;tcl_DeleteTrace&quot;^?&quot;tcl_DontCallWhenDeleted&quot;^?&quot;tcl_DoOneEvent&quot;^?&quot;tcl_DoWhenIdle&quot;^?&quot;tcl_DStringAppend&quot;^?&quot;tcl_DStringAppendElement&quot;^?&quot;tcl_DStringEndSublist&quot;^?&quot;tcl_DStringFree&quot;^?&quot;tcl_DStringGetResult&quot;^?&quot;tcl_DStringInit&quot;^?&quot;tcl_DStringResult&quot;^?&quot;tcl_DStringSetLength&quot;^?&quot;tcl_DStringStartSublist&quot;^?&quot;tcl_Eof&quot;^?&quot;tcl_ErrnoId&quot;^?&quot;tcl_ErrnoMsg&quot;^?&quot;tcl_Eval&quot;^?&quot;tcl_EvalFile&quot;^?&quot;tcl_EvalObj&quot;^?&quot;tcl_EventuallyFree&quot;^?&quot;tcl_Exit&quot;^?&quot;tcl_ExposeCommand&quot;^?&quot;tcl_ExprBoolean&quot;^?&quot;tcl_ExprBooleanObj&quot;^?&quot;tcl_ExprDouble&quot;^?&quot;tcl_ExprDoubleObj&quot;^?&quot;tcl_ExprLong&quot;^?&quot;tcl_ExprLongObj&quot;^?&quot;tcl_ExprObj&quot;^?&quot;tcl_ExprString&quot;^?&quot;tcl_Finalize&quot;^?&quot;tcl_FindExecutable&quot;^?&quot;tcl_FirstHashEntry&quot;^?&quot;tcl_Flush&quot;^?&quot;tcl_FreeResult&quot;^?&quot;tcl_GetAlias&quot;^?&quot;tcl_GetAliasObj&quot;^?&quot;tcl_GetAssocData&quot;^?&quot;tcl_GetChannel&quot;^?&quot;tcl_GetChannelBufferSize&quot;^?&quot;tcl_GetChannelHandle&quot;^?&quot;tcl_GetChannelInstanceData&quot;^?&quot;tcl_GetChannelMode&quot;^?&quot;tcl_GetChannelName&quot;^?&quot;tcl_GetChannelOption&quot;^?&quot;tcl_GetChannelType&quot;^?&quot;tcl_GetCommandInfo&quot;^?&quot;tcl_GetCommandName&quot;^?&quot;tcl_GetErrno&quot;^?&quot;tcl_GetHostName&quot;^?&quot;tcl_GetInterpPath&quot;^?&quot;tcl_GetMaster&quot;^?&quot;tcl_GetNameOfExecutable&quot;^?&quot;tcl_GetObjResult&quot;^?&quot;tcl_GetOpenFile&quot;^?&quot;tcl_GetPathType&quot;^?&quot;tcl_Gets&quot;^?&quot;tcl_GetsObj&quot;^?&quot;tcl_GetServiceMode&quot;^?&quot;tcl_GetSlave&quot;^?&quot;tcl_GetStdChannel&quot;^?&quot;tcl_GetStringResult&quot;^?&quot;tcl_GetVar&quot;^?&quot;tcl_GetVar2&quot;^?&quot;tcl_GlobalEval&quot;^?&quot;tcl_GlobalEvalObj&quot;^?&quot;tcl_HideCommand&quot;^?&quot;tcl_Init&quot;^?&quot;tcl_InitHashTable&quot;^?&quot;tcl_InputBlocked&quot;^?&quot;tcl_InputBuffered&quot;^?&quot;tcl_InterpDeleted&quot;^?&quot;tcl_IsSafe&quot;^?&quot;tcl_JoinPath&quot;^?&quot;tcl_LinkVar&quot;^?&quot;reserved188&quot;^v&quot;tcl_MakeFileChannel&quot;^?&quot;tcl_MakeSafe&quot;^?&quot;tcl_MakeTcpClientChannel&quot;^?&quot;tcl_Merge&quot;^?&quot;tcl_NextHashEntry&quot;^?&quot;tcl_NotifyChannel&quot;^?&quot;tcl_ObjGetVar2&quot;^?&quot;tcl_ObjSetVar2&quot;^?&quot;tcl_OpenCommandChannel&quot;^?&quot;tcl_OpenFileChannel&quot;^?&quot;tcl_OpenTcpClient&quot;^?&quot;tcl_OpenTcpServer&quot;^?&quot;tcl_Preserve&quot;^?&quot;tcl_PrintDouble&quot;^?&quot;tcl_PutEnv&quot;^?&quot;tcl_PosixError&quot;^?&quot;tcl_QueueEvent&quot;^?&quot;tcl_Read&quot;^?&quot;tcl_ReapDetachedProcs&quot;^?&quot;tcl_RecordAndEval&quot;^?&quot;tcl_RecordAndEvalObj&quot;^?&quot;tcl_RegisterChannel&quot;^?&quot;tcl_RegisterObjType&quot;^?&quot;tcl_RegExpCompile&quot;^?&quot;tcl_RegExpExec&quot;^?&quot;tcl_RegExpMatch&quot;^?&quot;tcl_RegExpRange&quot;^?&quot;tcl_Release&quot;^?&quot;tcl_ResetResult&quot;^?&quot;tcl_ScanElement&quot;^?&quot;tcl_ScanCountedElement&quot;^?&quot;tcl_SeekOld&quot;^?&quot;tcl_ServiceAll&quot;^?&quot;tcl_ServiceEvent&quot;^?&quot;tcl_SetAssocData&quot;^?&quot;tcl_SetChannelBufferSize&quot;^?&quot;tcl_SetChannelOption&quot;^?&quot;tcl_SetCommandInfo&quot;^?&quot;tcl_SetErrno&quot;^?&quot;tcl_SetErrorCode&quot;^?&quot;tcl_SetMaxBlockTime&quot;^?&quot;tcl_SetPanicProc&quot;^?&quot;tcl_SetRecursionLimit&quot;^?&quot;tcl_SetResult&quot;^?&quot;tcl_SetServiceMode&quot;^?&quot;tcl_SetObjErrorCode&quot;^?&quot;tcl_SetObjResult&quot;^?&quot;tcl_SetStdChannel&quot;^?&quot;tcl_SetVar&quot;^?&quot;tcl_SetVar2&quot;^?&quot;tcl_SignalId&quot;^?&quot;tcl_SignalMsg&quot;^?&quot;tcl_SourceRCFile&quot;^?&quot;tcl_SplitList&quot;^?&quot;tcl_SplitPath&quot;^?&quot;tcl_StaticPackage&quot;^?&quot;tcl_StringMatch&quot;^?&quot;tcl_TellOld&quot;^?&quot;tcl_TraceVar&quot;^?&quot;tcl_TraceVar2&quot;^?&quot;tcl_TranslateFileName&quot;^?&quot;tcl_Ungets&quot;^?&quot;tcl_UnlinkVar&quot;^?&quot;tcl_UnregisterChannel&quot;^?&quot;tcl_UnsetVar&quot;^?&quot;tcl_UnsetVar2&quot;^?&quot;tcl_UntraceVar&quot;^?&quot;tcl_UntraceVar2&quot;^?&quot;tcl_UpdateLinkedVar&quot;^?&quot;tcl_UpVar&quot;^?&quot;tcl_UpVar2&quot;^?&quot;tcl_VarEval&quot;^?&quot;tcl_VarTraceInfo&quot;^?&quot;tcl_VarTraceInfo2&quot;^?&quot;tcl_Write&quot;^?&quot;tcl_WrongNumArgs&quot;^?&quot;tcl_DumpActiveMemory&quot;^?&quot;tcl_ValidateAllMemory&quot;^?&quot;tcl_AppendResultVA&quot;^?&quot;tcl_AppendStringsToObjVA&quot;^?&quot;tcl_HashStats&quot;^?&quot;tcl_ParseVar&quot;^?&quot;tcl_PkgPresent&quot;^?&quot;tcl_PkgPresentEx&quot;^?&quot;tcl_PkgProvide&quot;^?&quot;tcl_PkgRequire&quot;^?&quot;tcl_SetErrorCodeVA&quot;^?&quot;tcl_VarEvalVA&quot;^?&quot;tcl_WaitPid&quot;^?&quot;tcl_PanicVA&quot;^?&quot;tcl_GetVersion&quot;^?&quot;tcl_InitMemory&quot;^?&quot;tcl_StackChannel&quot;^?&quot;tcl_UnstackChannel&quot;^?&quot;tcl_GetStackedChannel&quot;^?&quot;tcl_SetMainLoop&quot;^?&quot;reserved285&quot;^v&quot;tcl_AppendObjToObj&quot;^?&quot;tcl_CreateEncoding&quot;^?&quot;tcl_CreateThreadExitHandler&quot;^?&quot;tcl_DeleteThreadExitHandler&quot;^?&quot;tcl_DiscardResult&quot;^?&quot;tcl_EvalEx&quot;^?&quot;tcl_EvalObjv&quot;^?&quot;tcl_EvalObjEx&quot;^?&quot;tcl_ExitThread&quot;^?&quot;tcl_ExternalToUtf&quot;^?&quot;tcl_ExternalToUtfDString&quot;^?&quot;tcl_FinalizeThread&quot;^?&quot;tcl_FinalizeNotifier&quot;^?&quot;tcl_FreeEncoding&quot;^?&quot;tcl_GetCurrentThread&quot;^?&quot;tcl_GetEncoding&quot;^?&quot;tcl_GetEncodingName&quot;^?&quot;tcl_GetEncodingNames&quot;^?&quot;tcl_GetIndexFromObjStruct&quot;^?&quot;tcl_GetThreadData&quot;^?&quot;tcl_GetVar2Ex&quot;^?&quot;tcl_InitNotifier&quot;^?&quot;tcl_MutexLock&quot;^?&quot;tcl_MutexUnlock&quot;^?&quot;tcl_ConditionNotify&quot;^?&quot;tcl_ConditionWait&quot;^?&quot;tcl_NumUtfChars&quot;^?&quot;tcl_ReadChars&quot;^?&quot;tcl_RestoreResult&quot;^?&quot;tcl_SaveResult&quot;^?&quot;tcl_SetSystemEncoding&quot;^?&quot;tcl_SetVar2Ex&quot;^?&quot;tcl_ThreadAlert&quot;^?&quot;tcl_ThreadQueueEvent&quot;^?&quot;tcl_UniCharAtIndex&quot;^?&quot;tcl_UniCharToLower&quot;^?&quot;tcl_UniCharToTitle&quot;^?&quot;tcl_UniCharToUpper&quot;^?&quot;tcl_UniCharToUtf&quot;^?&quot;tcl_UtfAtIndex&quot;^?&quot;tcl_UtfCharComplete&quot;^?&quot;tcl_UtfBackslash&quot;^?&quot;tcl_UtfFindFirst&quot;^?&quot;tcl_UtfFindLast&quot;^?&quot;tcl_UtfNext&quot;^?&quot;tcl_UtfPrev&quot;^?&quot;tcl_UtfToExternal&quot;^?&quot;tcl_UtfToExternalDString&quot;^?&quot;tcl_UtfToLower&quot;^?&quot;tcl_UtfToTitle&quot;^?&quot;tcl_UtfToUniChar&quot;^?&quot;tcl_UtfToUpper&quot;^?&quot;tcl_WriteChars&quot;^?&quot;tcl_WriteObj&quot;^?&quot;tcl_GetString&quot;^?&quot;tcl_GetDefaultEncodingDir&quot;^?&quot;tcl_SetDefaultEncodingDir&quot;^?&quot;tcl_AlertNotifier&quot;^?&quot;tcl_ServiceModeHook&quot;^?&quot;tcl_UniCharIsAlnum&quot;^?&quot;tcl_UniCharIsAlpha&quot;^?&quot;tcl_UniCharIsDigit&quot;^?&quot;tcl_UniCharIsLower&quot;^?&quot;tcl_UniCharIsSpace&quot;^?&quot;tcl_UniCharIsUpper&quot;^?&quot;tcl_UniCharIsWordChar&quot;^?&quot;tcl_UniCharLen&quot;^?&quot;tcl_UniCharNcmp&quot;^?&quot;tcl_UniCharToUtfDString&quot;^?&quot;tcl_UtfToUniCharDString&quot;^?&quot;tcl_GetRegExpFromObj&quot;^?&quot;tcl_EvalTokens&quot;^?&quot;tcl_FreeParse&quot;^?&quot;tcl_LogCommandInfo&quot;^?&quot;tcl_ParseBraces&quot;^?&quot;tcl_ParseCommand&quot;^?&quot;tcl_ParseExpr&quot;^?&quot;tcl_ParseQuotedString&quot;^?&quot;tcl_ParseVarName&quot;^?&quot;tcl_GetCwd&quot;^?&quot;tcl_Chdir&quot;^?&quot;tcl_Access&quot;^?&quot;tcl_Stat&quot;^?&quot;tcl_UtfNcmp&quot;^?&quot;tcl_UtfNcasecmp&quot;^?&quot;tcl_StringCaseMatch&quot;^?&quot;tcl_UniCharIsControl&quot;^?&quot;tcl_UniCharIsGraph&quot;^?&quot;tcl_UniCharIsPrint&quot;^?&quot;tcl_UniCharIsPunct&quot;^?&quot;tcl_RegExpExecObj&quot;^?&quot;tcl_RegExpGetInfo&quot;^?&quot;tcl_NewUnicodeObj&quot;^?&quot;tcl_SetUnicodeObj&quot;^?&quot;tcl_GetCharLength&quot;^?&quot;tcl_GetUniChar&quot;^?&quot;tcl_GetUnicode&quot;^?&quot;tcl_GetRange&quot;^?&quot;tcl_AppendUnicodeToObj&quot;^?&quot;tcl_RegExpMatchObj&quot;^?&quot;tcl_SetNotifier&quot;^?&quot;tcl_GetAllocMutex&quot;^?&quot;tcl_GetChannelNames&quot;^?&quot;tcl_GetChannelNamesEx&quot;^?&quot;tcl_ProcObjCmd&quot;^?&quot;tcl_ConditionFinalize&quot;^?&quot;tcl_MutexFinalize&quot;^?&quot;tcl_CreateThread&quot;^?&quot;tcl_ReadRaw&quot;^?&quot;tcl_WriteRaw&quot;^?&quot;tcl_GetTopChannel&quot;^?&quot;tcl_ChannelBuffered&quot;^?&quot;tcl_ChannelName&quot;^?&quot;tcl_ChannelVersion&quot;^?&quot;tcl_ChannelBlockModeProc&quot;^?&quot;tcl_ChannelCloseProc&quot;^?&quot;tcl_ChannelClose2Proc&quot;^?&quot;tcl_ChannelInputProc&quot;^?&quot;tcl_ChannelOutputProc&quot;^?&quot;tcl_ChannelSeekProc&quot;^?&quot;tcl_ChannelSetOptionProc&quot;^?&quot;tcl_ChannelGetOptionProc&quot;^?&quot;tcl_ChannelWatchProc&quot;^?&quot;tcl_ChannelGetHandleProc&quot;^?&quot;tcl_ChannelFlushProc&quot;^?&quot;tcl_ChannelHandlerProc&quot;^?&quot;tcl_JoinThread&quot;^?&quot;tcl_IsChannelShared&quot;^?&quot;tcl_IsChannelRegistered&quot;^?&quot;tcl_CutChannel&quot;^?&quot;tcl_SpliceChannel&quot;^?&quot;tcl_ClearChannelHandlers&quot;^?&quot;tcl_IsChannelExisting&quot;^?&quot;tcl_UniCharNcasecmp&quot;^?&quot;tcl_UniCharCaseMatch&quot;^?&quot;tcl_FindHashEntry&quot;^?&quot;tcl_CreateHashEntry&quot;^?&quot;tcl_InitCustomHashTable&quot;^?&quot;tcl_InitObjHashTable&quot;^?&quot;tcl_CommandTraceInfo&quot;^?&quot;tcl_TraceCommand&quot;^?&quot;tcl_UntraceCommand&quot;^?&quot;tcl_AttemptAlloc&quot;^?&quot;tcl_AttemptDbCkalloc&quot;^?&quot;tcl_AttemptRealloc&quot;^?&quot;tcl_AttemptDbCkrealloc&quot;^?&quot;tcl_AttemptSetObjLength&quot;^?&quot;tcl_GetChannelThread&quot;^?&quot;tcl_GetUnicodeFromObj&quot;^?&quot;tcl_GetMathFuncInfo&quot;^?&quot;tcl_ListMathFuncs&quot;^?&quot;tcl_SubstObj&quot;^?&quot;tcl_DetachChannel&quot;^?&quot;tcl_IsStandardChannel&quot;^?&quot;tcl_FSCopyFile&quot;^?&quot;tcl_FSCopyDirectory&quot;^?&quot;tcl_FSCreateDirectory&quot;^?&quot;tcl_FSDeleteFile&quot;^?&quot;tcl_FSLoadFile&quot;^?&quot;tcl_FSMatchInDirectory&quot;^?&quot;tcl_FSLink&quot;^?&quot;tcl_FSRemoveDirectory&quot;^?&quot;tcl_FSRenameFile&quot;^?&quot;tcl_FSLstat&quot;^?&quot;tcl_FSUtime&quot;^?&quot;tcl_FSFileAttrsGet&quot;^?&quot;tcl_FSFileAttrsSet&quot;^?&quot;tcl_FSFileAttrStrings&quot;^?&quot;tcl_FSStat&quot;^?&quot;tcl_FSAccess&quot;^?&quot;tcl_FSOpenFileChannel&quot;^?&quot;tcl_FSGetCwd&quot;^?&quot;tcl_FSChdir&quot;^?&quot;tcl_FSConvertToPathType&quot;^?&quot;tcl_FSJoinPath&quot;^?&quot;tcl_FSSplitPath&quot;^?&quot;tcl_FSEqualPaths&quot;^?&quot;tcl_FSGetNormalizedPath&quot;^?&quot;tcl_FSJoinToPath&quot;^?&quot;tcl_FSGetInternalRep&quot;^?&quot;tcl_FSGetTranslatedPath&quot;^?&quot;tcl_FSEvalFile&quot;^?&quot;tcl_FSNewNativePath&quot;^?&quot;tcl_FSGetNativePath&quot;^?&quot;tcl_FSFileSystemInfo&quot;^?&quot;tcl_FSPathSeparator&quot;^?&quot;tcl_FSListVolumes&quot;^?&quot;tcl_FSRegister&quot;^?&quot;tcl_FSUnregister&quot;^?&quot;tcl_FSData&quot;^?&quot;tcl_FSGetTranslatedStringPath&quot;^?&quot;tcl_FSGetFileSystemForPath&quot;^?&quot;tcl_FSGetPathType&quot;^?&quot;tcl_OutputBuffered&quot;^?&quot;tcl_FSMountsChanged&quot;^?&quot;tcl_EvalTokensStandard&quot;^?&quot;tcl_GetTime&quot;^?&quot;tcl_CreateObjTrace&quot;^?&quot;tcl_GetCommandInfoFromToken&quot;^?&quot;tcl_SetCommandInfoFromToken&quot;^?&quot;tcl_DbNewWideIntObj&quot;^?&quot;tcl_GetWideIntFromObj&quot;^?&quot;tcl_NewWideIntObj&quot;^?&quot;tcl_SetWideIntObj&quot;^?&quot;tcl_AllocStatBuf&quot;^?&quot;tcl_Seek&quot;^?&quot;tcl_Tell&quot;^?&quot;tcl_ChannelWideSeekProc&quot;^?&quot;tcl_DictObjPut&quot;^?&quot;tcl_DictObjGet&quot;^?&quot;tcl_DictObjRemove&quot;^?&quot;tcl_DictObjSize&quot;^?&quot;tcl_DictObjFirst&quot;^?&quot;tcl_DictObjNext&quot;^?&quot;tcl_DictObjDone&quot;^?&quot;tcl_DictObjPutKeyList&quot;^?&quot;tcl_DictObjRemoveKeyList&quot;^?&quot;tcl_NewDictObj&quot;^?&quot;tcl_DbNewDictObj&quot;^?&quot;tcl_RegisterConfig&quot;^?&quot;tcl_CreateNamespace&quot;^?&quot;tcl_DeleteNamespace&quot;^?&quot;tcl_AppendExportList&quot;^?&quot;tcl_Export&quot;^?&quot;tcl_Import&quot;^?&quot;tcl_ForgetImport&quot;^?&quot;tcl_GetCurrentNamespace&quot;^?&quot;tcl_GetGlobalNamespace&quot;^?&quot;tcl_FindNamespace&quot;^?&quot;tcl_FindCommand&quot;^?&quot;tcl_GetCommandFromObj&quot;^?&quot;tcl_GetCommandFullName&quot;^?&quot;tcl_FSEvalFileEx&quot;^?&quot;tcl_SetExitProc&quot;^?&quot;tcl_LimitAddHandler&quot;^?&quot;tcl_LimitRemoveHandler&quot;^?&quot;tcl_LimitReady&quot;^?&quot;tcl_LimitCheck&quot;^?&quot;tcl_LimitExceeded&quot;^?&quot;tcl_LimitSetCommands&quot;^?&quot;tcl_LimitSetTime&quot;^?&quot;tcl_LimitSetGranularity&quot;^?&quot;tcl_LimitTypeEnabled&quot;^?&quot;tcl_LimitTypeExceeded&quot;^?&quot;tcl_LimitTypeSet&quot;^?&quot;tcl_LimitTypeReset&quot;^?&quot;tcl_LimitGetCommands&quot;^?&quot;tcl_LimitGetTime&quot;^?&quot;tcl_LimitGetGranularity&quot;^?&quot;tcl_SaveInterpState&quot;^?&quot;tcl_RestoreInterpState&quot;^?&quot;tcl_DiscardInterpState&quot;^?&quot;tcl_SetReturnOptions&quot;^?&quot;tcl_GetReturnOptions&quot;^?&quot;tcl_IsEnsemble&quot;^?&quot;tcl_CreateEnsemble&quot;^?&quot;tcl_FindEnsemble&quot;^?&quot;tcl_SetEnsembleSubcommandList&quot;^?&quot;tcl_SetEnsembleMappingDict&quot;^?&quot;tcl_SetEnsembleUnknownHandler&quot;^?&quot;tcl_SetEnsembleFlags&quot;^?&quot;tcl_GetEnsembleSubcommandList&quot;^?&quot;tcl_GetEnsembleMappingDict&quot;^?&quot;tcl_GetEnsembleUnknownHandler&quot;^?&quot;tcl_GetEnsembleFlags&quot;^?&quot;tcl_GetEnsembleNamespace&quot;^?&quot;tcl_SetTimeProc&quot;^?&quot;tcl_QueryTimeProc&quot;^?&quot;tcl_ChannelThreadActionProc&quot;^?&quot;tcl_NewBignumObj&quot;^?&quot;tcl_DbNewBignumObj&quot;^?&quot;tcl_SetBignumObj&quot;^?&quot;tcl_GetBignumFromObj&quot;^?&quot;tcl_TakeBignumFromObj&quot;^?&quot;tcl_TruncateChannel&quot;^?&quot;tcl_ChannelTruncateProc&quot;^?&quot;tcl_SetChannelErrorInterp&quot;^?&quot;tcl_GetChannelErrorInterp&quot;^?&quot;tcl_SetChannelError&quot;^?&quot;tcl_GetChannelError&quot;^?&quot;tcl_InitBignumFromDouble&quot;^?&quot;tcl_GetNamespaceUnknownHandler&quot;^?&quot;tcl_SetNamespaceUnknownHandler&quot;^?&quot;tcl_GetEncodingFromObj&quot;^?&quot;tcl_GetEncodingSearchPath&quot;^?&quot;tcl_SetEncodingSearchPath&quot;^?&quot;tcl_GetEncodingNameFromEnvironment&quot;^?&quot;tcl_PkgRequireProc&quot;^?&quot;tcl_AppendObjToErrorInfo&quot;^?&quot;tcl_AppendLimitedToObj&quot;^?&quot;tcl_Format&quot;^?&quot;tcl_AppendFormatToObj&quot;^?&quot;tcl_ObjPrintf&quot;^?&quot;tcl_AppendPrintfToObj&quot;^?}'>
<field declared_type='int' name='magic' type='i'/>
<field declared_type='struct TclStubHooks*' name='hooks' type='^{TclStubHooks=^{TclPlatStubs}^{TclIntStubs}^{TclIntPlatStubs}}'/>
<field declared_type='int (*)(Tcl_Interp *, char *, char *, ClientData)' function_pointer='true' name='tcl_PkgProvideEx' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='int' type='i'/>
</field>
<field const='true' declared_type='char *(*)(Tcl_Interp *, char *, char *, int, ClientData *)' function_pointer='true' name='tcl_PkgRequireEx' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='ClientData*' type='^^v'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='void (*)( char *, ...)' function_pointer='true' name='tcl_Panic' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='char *(*)(unsigned int)' function_pointer='true' name='tcl_Alloc' type='^?'>
<arg declared_type='unsigned int' type='I'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='void (*)(char *)' function_pointer='true' name='tcl_Free' type='^?'>
<arg declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='char *(*)(char *, unsigned int)' function_pointer='true' name='tcl_Realloc' type='^?'>
<arg declared_type='char*' type='*'/>
<arg declared_type='unsigned int' type='I'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='char *(*)(unsigned int, char *, int)' function_pointer='true' name='tcl_DbCkalloc' type='^?'>
<arg declared_type='unsigned int' type='I'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(char *, char *, int)' function_pointer='true' name='tcl_DbCkfree' type='^?'>
<arg declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='char *(*)(char *, unsigned int, char *, int)' function_pointer='true' name='tcl_DbCkrealloc' type='^?'>
<arg declared_type='char*' type='*'/>
<arg declared_type='unsigned int' type='I'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='void (*)(int, int, Tcl_FileProc *, ClientData)' function_pointer='true' name='tcl_CreateFileHandler' type='^?'>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_FileProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(int)' function_pointer='true' name='tcl_DeleteFileHandler' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Time *)' function_pointer='true' name='tcl_SetTimer' type='^?'>
<arg declared_type='Tcl_Time*' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(int)' function_pointer='true' name='tcl_Sleep' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Time *)' function_pointer='true' name='tcl_WaitForEvent' type='^?'>
<arg declared_type='Tcl_Time*' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *)' function_pointer='true' name='tcl_AppendAllObjTypes' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, ...)' function_pointer='true' name='tcl_AppendStringsToObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, char *, int)' function_pointer='true' name='tcl_AppendToObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Obj *(*)(int, Tcl_Obj * *)' function_pointer='true' name='tcl_ConcatObj' type='^?'>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, Tcl_ObjType *)' function_pointer='true' name='tcl_ConvertToType' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_ObjType*' type='^{Tcl_ObjType=*^?^?^?^?}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, char *, int)' function_pointer='true' name='tcl_DbDecrRefCount' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, char *, int)' function_pointer='true' name='tcl_DbIncrRefCount' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Obj *, char *, int)' function_pointer='true' name='tcl_DbIsShared' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Obj *(*)(int, char *, int)' function_pointer='true' name='tcl_DbNewBooleanObj' type='^?'>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)( unsigned char *, int, char *, int)' function_pointer='true' name='tcl_DbNewByteArrayObj' type='^?'>
<arg const='true' declared_type='unsigned char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(double, char *, int)' function_pointer='true' name='tcl_DbNewDoubleObj' type='^?'>
<arg declared_type='double' type='d'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(int, Tcl_Obj * *, char *, int)' function_pointer='true' name='tcl_DbNewListObj' type='^?'>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(long, char *, int)' function_pointer='true' name='tcl_DbNewLongObj' type='^?'>
<arg declared_type='long' type='l' type64='q'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)( char *, int)' function_pointer='true' name='tcl_DbNewObj' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)( char *, int, char *, int)' function_pointer='true' name='tcl_DbNewStringObj' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Obj *)' function_pointer='true' name='tcl_DuplicateObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='void (*)(Tcl_Obj *)' function_pointer='true' name='tclFreeObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int *)' function_pointer='true' name='tcl_GetBoolean' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int *)' function_pointer='true' name='tcl_GetBooleanFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='unsigned char *(*)(Tcl_Obj *, int *)' function_pointer='true' name='tcl_GetByteArrayFromObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='unsigned char*' type='*'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, double *)' function_pointer='true' name='tcl_GetDouble' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, double *)' function_pointer='true' name='tcl_GetDoubleFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, char **, char *, int, int *)' function_pointer='true' name='tcl_GetIndexFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char**' type='^*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int *)' function_pointer='true' name='tcl_GetInt' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int *)' function_pointer='true' name='tcl_GetIntFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, long *)' function_pointer='true' name='tcl_GetLongFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='long*' type='^l' type64='^q'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_ObjType *(*)( char *)' function_pointer='true' name='tcl_GetObjType' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='Tcl_ObjType*' type='^{Tcl_ObjType=*^?^?^?^?}'/>
</field>
<field declared_type='char *(*)(Tcl_Obj *, int *)' function_pointer='true' name='tcl_GetStringFromObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='void (*)(Tcl_Obj *)' function_pointer='true' name='tcl_InvalidateStringRep' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, Tcl_Obj *)' function_pointer='true' name='tcl_ListObjAppendList' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, Tcl_Obj *)' function_pointer='true' name='tcl_ListObjAppendElement' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int *, Tcl_Obj ***)' function_pointer='true' name='tcl_ListObjGetElements' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='Tcl_Obj***' type='^^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int, Tcl_Obj **)' function_pointer='true' name='tcl_ListObjIndex' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int *)' function_pointer='true' name='tcl_ListObjLength' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int, int, int, Tcl_Obj * *)' function_pointer='true' name='tcl_ListObjReplace' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Obj *(*)(int)' function_pointer='true' name='tcl_NewBooleanObj' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)( unsigned char *, int)' function_pointer='true' name='tcl_NewByteArrayObj' type='^?'>
<arg const='true' declared_type='unsigned char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(double)' function_pointer='true' name='tcl_NewDoubleObj' type='^?'>
<arg declared_type='double' type='d'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(int)' function_pointer='true' name='tcl_NewIntObj' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(int, Tcl_Obj * *)' function_pointer='true' name='tcl_NewListObj' type='^?'>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(long)' function_pointer='true' name='tcl_NewLongObj' type='^?'>
<arg declared_type='long' type='l' type64='q'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(void)' function_pointer='true' name='tcl_NewObj' type='^?'>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)( char *, int)' function_pointer='true' name='tcl_NewStringObj' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, int)' function_pointer='true' name='tcl_SetBooleanObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='unsigned char *(*)(Tcl_Obj *, int)' function_pointer='true' name='tcl_SetByteArrayLength' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='unsigned char*' type='*'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, unsigned char *, int)' function_pointer='true' name='tcl_SetByteArrayObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='unsigned char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, double)' function_pointer='true' name='tcl_SetDoubleObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='double' type='d'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, int)' function_pointer='true' name='tcl_SetIntObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, int, Tcl_Obj * *)' function_pointer='true' name='tcl_SetListObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, long)' function_pointer='true' name='tcl_SetLongObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='long' type='l' type64='q'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, int)' function_pointer='true' name='tcl_SetObjLength' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, char *, int)' function_pointer='true' name='tcl_SetStringObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, char *)' function_pointer='true' name='tcl_AddErrorInfo' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, char *, int)' function_pointer='true' name='tcl_AddObjErrorInfo' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *)' function_pointer='true' name='tcl_AllowExceptions' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, char *)' function_pointer='true' name='tcl_AppendElement' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, ...)' function_pointer='true' name='tcl_AppendResult' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_AsyncHandler (*)(Tcl_AsyncProc *, ClientData)' function_pointer='true' name='tcl_AsyncCreate' type='^?'>
<arg declared_type='Tcl_AsyncProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='Tcl_AsyncHandler' type='^{Tcl_AsyncHandler_=}'/>
</field>
<field declared_type='void (*)(Tcl_AsyncHandler)' function_pointer='true' name='tcl_AsyncDelete' type='^?'>
<arg declared_type='Tcl_AsyncHandler' type='^{Tcl_AsyncHandler_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, int)' function_pointer='true' name='tcl_AsyncInvoke' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_AsyncHandler)' function_pointer='true' name='tcl_AsyncMark' type='^?'>
<arg declared_type='Tcl_AsyncHandler' type='^{Tcl_AsyncHandler_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(void)' function_pointer='true' name='tcl_AsyncReady' type='^?'>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *)' function_pointer='true' name='tcl_BackgroundError' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='char (*)( char *, int *)' function_pointer='true' name='tcl_Backslash' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='char' type='c'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, char *)' function_pointer='true' name='tcl_BadChannelOption' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tcl_InterpDeleteProc *, ClientData)' function_pointer='true' name='tcl_CallWhenDeleted' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_InterpDeleteProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_IdleProc *, ClientData)' function_pointer='true' name='tcl_CancelIdleCall' type='^?'>
<arg declared_type='Tcl_IdleProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Channel)' function_pointer='true' name='tcl_Close' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)( char *)' function_pointer='true' name='tcl_CommandComplete' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='char *(*)(int, char * *)' function_pointer='true' name='tcl_Concat' type='^?'>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char **' type='^*'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)( char *, char *, int)' function_pointer='true' name='tcl_ConvertElement' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)( char *, int, char *, int)' function_pointer='true' name='tcl_ConvertCountedElement' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, Tcl_Interp *, char *, int, char * *)' function_pointer='true' name='tcl_CreateAlias' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char **' type='^*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, Tcl_Interp *, char *, int, Tcl_Obj * *)' function_pointer='true' name='tcl_CreateAliasObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Channel (*)(Tcl_ChannelType *, char *, ClientData, int)' function_pointer='true' name='tcl_CreateChannel' type='^?'>
<arg declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</field>
<field declared_type='void (*)(Tcl_Channel, int, Tcl_ChannelProc *, ClientData)' function_pointer='true' name='tcl_CreateChannelHandler' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_ChannelProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Channel, Tcl_CloseProc *, ClientData)' function_pointer='true' name='tcl_CreateCloseHandler' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_CloseProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Command (*)(Tcl_Interp *, char *, Tcl_CmdProc *, ClientData, Tcl_CmdDeleteProc *)' function_pointer='true' name='tcl_CreateCommand' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_CmdProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_CmdDeleteProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</field>
<field declared_type='void (*)(Tcl_EventSetupProc *, Tcl_EventCheckProc *, ClientData)' function_pointer='true' name='tcl_CreateEventSource' type='^?'>
<arg declared_type='Tcl_EventSetupProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='Tcl_EventCheckProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_ExitProc *, ClientData)' function_pointer='true' name='tcl_CreateExitHandler' type='^?'>
<arg declared_type='Tcl_ExitProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Interp *(*)(void)' function_pointer='true' name='tcl_CreateInterp' type='^?'>
<retval declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, char *, int, Tcl_ValueType *, Tcl_MathProc *, ClientData)' function_pointer='true' name='tcl_CreateMathFunc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_ValueType*' type='^i'/>
<arg declared_type='Tcl_MathProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Value*' type='^{Tcl_Value=ildq}' type64='^{Tcl_Value=iqdq}'/>
<arg declared_type='Tcl_Value*' type='^{Tcl_Value=ildq}' type64='^{Tcl_Value=iqdq}'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Command (*)(Tcl_Interp *, char *, Tcl_ObjCmdProc *, ClientData, Tcl_CmdDeleteProc *)' function_pointer='true' name='tcl_CreateObjCommand' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_ObjCmdProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='struct Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_CmdDeleteProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</field>
<field declared_type='Tcl_Interp *(*)(Tcl_Interp *, char *, int)' function_pointer='true' name='tcl_CreateSlave' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
</field>
<field declared_type='Tcl_TimerToken (*)(int, Tcl_TimerProc *, ClientData)' function_pointer='true' name='tcl_CreateTimerHandler' type='^?'>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_TimerProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='Tcl_TimerToken' type='^{Tcl_TimerToken_=}'/>
</field>
<field declared_type='Tcl_Trace (*)(Tcl_Interp *, int, Tcl_CmdTraceProc *, ClientData)' function_pointer='true' name='tcl_CreateTrace' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_CmdTraceProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='Tcl_CmdProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='Tcl_Trace' type='^{Tcl_Trace_=}'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, char *)' function_pointer='true' name='tcl_DeleteAssocData' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Channel, Tcl_ChannelProc *, ClientData)' function_pointer='true' name='tcl_DeleteChannelHandler' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_ChannelProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Channel, Tcl_CloseProc *, ClientData)' function_pointer='true' name='tcl_DeleteCloseHandler' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_CloseProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *)' function_pointer='true' name='tcl_DeleteCommand' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Command)' function_pointer='true' name='tcl_DeleteCommandFromToken' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_EventDeleteProc *, ClientData)' function_pointer='true' name='tcl_DeleteEvents' type='^?'>
<arg declared_type='Tcl_EventDeleteProc*' function_pointer='true' type='^?'>
<arg declared_type='Tcl_Event*' type='^{Tcl_Event=^?^{Tcl_Event}}'/>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_EventSetupProc *, Tcl_EventCheckProc *, ClientData)' function_pointer='true' name='tcl_DeleteEventSource' type='^?'>
<arg declared_type='Tcl_EventSetupProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='Tcl_EventCheckProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_ExitProc *, ClientData)' function_pointer='true' name='tcl_DeleteExitHandler' type='^?'>
<arg declared_type='Tcl_ExitProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_HashEntry *)' function_pointer='true' name='tcl_DeleteHashEntry' type='^?'>
<arg declared_type='Tcl_HashEntry*' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_HashTable *)' function_pointer='true' name='tcl_DeleteHashTable' type='^?'>
<arg declared_type='Tcl_HashTable*' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *)' function_pointer='true' name='tcl_DeleteInterp' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(int, Tcl_Pid *)' function_pointer='true' name='tcl_DetachPids' type='^?'>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Pid*' type='^^{Tcl_Pid_}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_TimerToken)' function_pointer='true' name='tcl_DeleteTimerHandler' type='^?'>
<arg declared_type='Tcl_TimerToken' type='^{Tcl_TimerToken_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tcl_Trace)' function_pointer='true' name='tcl_DeleteTrace' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Trace' type='^{Tcl_Trace_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tcl_InterpDeleteProc *, ClientData)' function_pointer='true' name='tcl_DontCallWhenDeleted' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_InterpDeleteProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(int)' function_pointer='true' name='tcl_DoOneEvent' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_IdleProc *, ClientData)' function_pointer='true' name='tcl_DoWhenIdle' type='^?'>
<arg declared_type='Tcl_IdleProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='char *(*)(Tcl_DString *, char *, int)' function_pointer='true' name='tcl_DStringAppend' type='^?'>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='char *(*)(Tcl_DString *, char *)' function_pointer='true' name='tcl_DStringAppendElement' type='^?'>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='void (*)(Tcl_DString *)' function_pointer='true' name='tcl_DStringEndSublist' type='^?'>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_DString *)' function_pointer='true' name='tcl_DStringFree' type='^?'>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tcl_DString *)' function_pointer='true' name='tcl_DStringGetResult' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_DString *)' function_pointer='true' name='tcl_DStringInit' type='^?'>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tcl_DString *)' function_pointer='true' name='tcl_DStringResult' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_DString *, int)' function_pointer='true' name='tcl_DStringSetLength' type='^?'>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_DString *)' function_pointer='true' name='tcl_DStringStartSublist' type='^?'>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Channel)' function_pointer='true' name='tcl_Eof' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field const='true' declared_type='char *(*)(void)' function_pointer='true' name='tcl_ErrnoId' type='^?'>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(int)' function_pointer='true' name='tcl_ErrnoMsg' type='^?'>
<arg declared_type='int' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *)' function_pointer='true' name='tcl_Eval' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *)' function_pointer='true' name='tcl_EvalFile' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *)' function_pointer='true' name='tcl_EvalObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(ClientData, Tcl_FreeProc *)' function_pointer='true' name='tcl_EventuallyFree' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_FreeProc*' function_pointer='true' type='^?'>
<arg declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(int)' function_pointer='true' name='tcl_Exit' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, char *)' function_pointer='true' name='tcl_ExposeCommand' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int *)' function_pointer='true' name='tcl_ExprBoolean' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int *)' function_pointer='true' name='tcl_ExprBooleanObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, double *)' function_pointer='true' name='tcl_ExprDouble' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, double *)' function_pointer='true' name='tcl_ExprDoubleObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='double*' type='^d'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, long *)' function_pointer='true' name='tcl_ExprLong' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='long*' type='^l' type64='^q'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, long *)' function_pointer='true' name='tcl_ExprLongObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='long*' type='^l' type64='^q'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, Tcl_Obj **)' function_pointer='true' name='tcl_ExprObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *)' function_pointer='true' name='tcl_ExprString' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(void)' function_pointer='true' name='tcl_Finalize' type='^?'>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)( char *)' function_pointer='true' name='tcl_FindExecutable' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_HashEntry *(*)(Tcl_HashTable *, Tcl_HashSearch *)' function_pointer='true' name='tcl_FirstHashEntry' type='^?'>
<arg declared_type='Tcl_HashTable*' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<arg declared_type='Tcl_HashSearch*' type='^{Tcl_HashSearch=^{Tcl_HashTable}i^{Tcl_HashEntry}}'/>
<retval declared_type='Tcl_HashEntry*' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
</field>
<field declared_type='int (*)(Tcl_Channel)' function_pointer='true' name='tcl_Flush' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *)' function_pointer='true' name='tcl_FreeResult' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, Tcl_Interp **, char **, int *, char ***)' function_pointer='true' name='tcl_GetAlias' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Interp**' type='^^{Tcl_Interp}'/>
<arg const='true' declared_type='char**' type='^*'/>
<arg declared_type='int*' type='^i'/>
<arg const='true' declared_type='char***' type='^^*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, Tcl_Interp **, char **, int *, Tcl_Obj ***)' function_pointer='true' name='tcl_GetAliasObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Interp**' type='^^{Tcl_Interp}'/>
<arg const='true' declared_type='char**' type='^*'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='Tcl_Obj***' type='^^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='ClientData (*)(Tcl_Interp *, char *, Tcl_InterpDeleteProc **)' function_pointer='true' name='tcl_GetAssocData' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_InterpDeleteProc**' type='^^?'/>
<retval declared_type='ClientData' type='^v'/>
</field>
<field declared_type='Tcl_Channel (*)(Tcl_Interp *, char *, int *)' function_pointer='true' name='tcl_GetChannel' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</field>
<field declared_type='int (*)(Tcl_Channel)' function_pointer='true' name='tcl_GetChannelBufferSize' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Channel, int, ClientData *)' function_pointer='true' name='tcl_GetChannelHandle' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='ClientData*' type='^^v'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='ClientData (*)(Tcl_Channel)' function_pointer='true' name='tcl_GetChannelInstanceData' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='ClientData' type='^v'/>
</field>
<field declared_type='int (*)(Tcl_Channel)' function_pointer='true' name='tcl_GetChannelMode' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field const='true' declared_type='char *(*)(Tcl_Channel)' function_pointer='true' name='tcl_GetChannelName' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Channel, char *, Tcl_DString *)' function_pointer='true' name='tcl_GetChannelOption' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_ChannelType *(*)(Tcl_Channel)' function_pointer='true' name='tcl_GetChannelType' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, Tcl_CmdInfo *)' function_pointer='true' name='tcl_GetCommandInfo' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_CmdInfo*' type='^{Tcl_CmdInfo=i^?^v^?^v^?^v^{Tcl_Namespace}}'/>
<retval declared_type='int' type='i'/>
</field>
<field const='true' declared_type='char *(*)(Tcl_Interp *, Tcl_Command)' function_pointer='true' name='tcl_GetCommandName' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(void)' function_pointer='true' name='tcl_GetErrno' type='^?'>
<retval declared_type='int' type='i'/>
</field>
<field const='true' declared_type='char *(*)(void)' function_pointer='true' name='tcl_GetHostName' type='^?'>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Interp *)' function_pointer='true' name='tcl_GetInterpPath' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Interp *(*)(Tcl_Interp *)' function_pointer='true' name='tcl_GetMaster' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
</field>
<field const='true' declared_type='char *(*)(void)' function_pointer='true' name='tcl_GetNameOfExecutable' type='^?'>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Interp *)' function_pointer='true' name='tcl_GetObjResult' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int, int, ClientData *)' function_pointer='true' name='tcl_GetOpenFile' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='ClientData*' type='^^v'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_PathType (*)( char *)' function_pointer='true' name='tcl_GetPathType' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='Tcl_PathType' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Channel, Tcl_DString *)' function_pointer='true' name='tcl_Gets' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Channel, Tcl_Obj *)' function_pointer='true' name='tcl_GetsObj' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(void)' function_pointer='true' name='tcl_GetServiceMode' type='^?'>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Interp *(*)(Tcl_Interp *, char *)' function_pointer='true' name='tcl_GetSlave' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
</field>
<field declared_type='Tcl_Channel (*)(int)' function_pointer='true' name='tcl_GetStdChannel' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</field>
<field const='true' declared_type='char *(*)(Tcl_Interp *)' function_pointer='true' name='tcl_GetStringResult' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(Tcl_Interp *, char *, int)' function_pointer='true' name='tcl_GetVar' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(Tcl_Interp *, char *, char *, int)' function_pointer='true' name='tcl_GetVar2' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *)' function_pointer='true' name='tcl_GlobalEval' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *)' function_pointer='true' name='tcl_GlobalEvalObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, char *)' function_pointer='true' name='tcl_HideCommand' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *)' function_pointer='true' name='tcl_Init' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_HashTable *, int)' function_pointer='true' name='tcl_InitHashTable' type='^?'>
<arg declared_type='Tcl_HashTable*' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Channel)' function_pointer='true' name='tcl_InputBlocked' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Channel)' function_pointer='true' name='tcl_InputBuffered' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *)' function_pointer='true' name='tcl_InterpDeleted' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *)' function_pointer='true' name='tcl_IsSafe' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='char *(*)(int, char * *, Tcl_DString *)' function_pointer='true' name='tcl_JoinPath' type='^?'>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char **' type='^*'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, char *, int)' function_pointer='true' name='tcl_LinkVar' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void*' name='reserved188' type='^v'/>
<field declared_type='Tcl_Channel (*)(ClientData, int)' function_pointer='true' name='tcl_MakeFileChannel' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *)' function_pointer='true' name='tcl_MakeSafe' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Channel (*)(ClientData)' function_pointer='true' name='tcl_MakeTcpClientChannel' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</field>
<field declared_type='char *(*)(int, char * *)' function_pointer='true' name='tcl_Merge' type='^?'>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char **' type='^*'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='Tcl_HashEntry *(*)(Tcl_HashSearch *)' function_pointer='true' name='tcl_NextHashEntry' type='^?'>
<arg declared_type='Tcl_HashSearch*' type='^{Tcl_HashSearch=^{Tcl_HashTable}i^{Tcl_HashEntry}}'/>
<retval declared_type='Tcl_HashEntry*' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
</field>
<field declared_type='void (*)(Tcl_Channel, int)' function_pointer='true' name='tcl_NotifyChannel' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Interp *, Tcl_Obj *, Tcl_Obj *, int)' function_pointer='true' name='tcl_ObjGetVar2' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Interp *, Tcl_Obj *, Tcl_Obj *, Tcl_Obj *, int)' function_pointer='true' name='tcl_ObjSetVar2' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Channel (*)(Tcl_Interp *, int, char **, int)' function_pointer='true' name='tcl_OpenCommandChannel' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</field>
<field declared_type='Tcl_Channel (*)(Tcl_Interp *, char *, char *, int)' function_pointer='true' name='tcl_OpenFileChannel' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</field>
<field declared_type='Tcl_Channel (*)(Tcl_Interp *, int, char *, char *, int, int)' function_pointer='true' name='tcl_OpenTcpClient' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</field>
<field declared_type='Tcl_Channel (*)(Tcl_Interp *, int, char *, Tcl_TcpAcceptProc *, ClientData)' function_pointer='true' name='tcl_OpenTcpServer' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_TcpAcceptProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</field>
<field declared_type='void (*)(ClientData)' function_pointer='true' name='tcl_Preserve' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, double, char *)' function_pointer='true' name='tcl_PrintDouble' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='double' type='d'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)( char *)' function_pointer='true' name='tcl_PutEnv' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field const='true' declared_type='char *(*)(Tcl_Interp *)' function_pointer='true' name='tcl_PosixError' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='void (*)(Tcl_Event *, Tcl_QueuePosition)' function_pointer='true' name='tcl_QueueEvent' type='^?'>
<arg declared_type='Tcl_Event*' type='^{Tcl_Event=^?^{Tcl_Event}}'/>
<arg declared_type='Tcl_QueuePosition' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Channel, char *, int)' function_pointer='true' name='tcl_Read' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(void)' function_pointer='true' name='tcl_ReapDetachedProcs' type='^?'>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int)' function_pointer='true' name='tcl_RecordAndEval' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int)' function_pointer='true' name='tcl_RecordAndEvalObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tcl_Channel)' function_pointer='true' name='tcl_RegisterChannel' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_ObjType *)' function_pointer='true' name='tcl_RegisterObjType' type='^?'>
<arg declared_type='Tcl_ObjType*' type='^{Tcl_ObjType=*^?^?^?^?}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_RegExp (*)(Tcl_Interp *, char *)' function_pointer='true' name='tcl_RegExpCompile' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='Tcl_RegExp' type='^{Tcl_RegExp_=}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_RegExp, char *, char *)' function_pointer='true' name='tcl_RegExpExec' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_RegExp' type='^{Tcl_RegExp_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, char *)' function_pointer='true' name='tcl_RegExpMatch' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_RegExp, int, char **, char **)' function_pointer='true' name='tcl_RegExpRange' type='^?'>
<arg declared_type='Tcl_RegExp' type='^{Tcl_RegExp_=}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<arg const='true' declared_type='char**' type='^*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(ClientData)' function_pointer='true' name='tcl_Release' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *)' function_pointer='true' name='tcl_ResetResult' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)( char *, int *)' function_pointer='true' name='tcl_ScanElement' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)( char *, int, int *)' function_pointer='true' name='tcl_ScanCountedElement' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Channel, int, int)' function_pointer='true' name='tcl_SeekOld' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(void)' function_pointer='true' name='tcl_ServiceAll' type='^?'>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(int)' function_pointer='true' name='tcl_ServiceEvent' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, char *, Tcl_InterpDeleteProc *, ClientData)' function_pointer='true' name='tcl_SetAssocData' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_InterpDeleteProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Channel, int)' function_pointer='true' name='tcl_SetChannelBufferSize' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Channel, char *, char *)' function_pointer='true' name='tcl_SetChannelOption' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, Tcl_CmdInfo *)' function_pointer='true' name='tcl_SetCommandInfo' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='Tcl_CmdInfo*' type='^{Tcl_CmdInfo=i^?^v^?^v^?^v^{Tcl_Namespace}}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(int)' function_pointer='true' name='tcl_SetErrno' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, ...)' function_pointer='true' name='tcl_SetErrorCode' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Time *)' function_pointer='true' name='tcl_SetMaxBlockTime' type='^?'>
<arg declared_type='Tcl_Time*' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_PanicProc *)' function_pointer='true' name='tcl_SetPanicProc' type='^?'>
<arg declared_type='Tcl_PanicProc*' function_pointer='true' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, int)' function_pointer='true' name='tcl_SetRecursionLimit' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, char *, Tcl_FreeProc *)' function_pointer='true' name='tcl_SetResult' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='Tcl_FreeProc*' function_pointer='true' type='^?'>
<arg declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(int)' function_pointer='true' name='tcl_SetServiceMode' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tcl_Obj *)' function_pointer='true' name='tcl_SetObjErrorCode' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tcl_Obj *)' function_pointer='true' name='tcl_SetObjResult' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Channel, int)' function_pointer='true' name='tcl_SetStdChannel' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field const='true' declared_type='char *(*)(Tcl_Interp *, char *, char *, int)' function_pointer='true' name='tcl_SetVar' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(Tcl_Interp *, char *, char *, char *, int)' function_pointer='true' name='tcl_SetVar2' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(int)' function_pointer='true' name='tcl_SignalId' type='^?'>
<arg declared_type='int' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(int)' function_pointer='true' name='tcl_SignalMsg' type='^?'>
<arg declared_type='int' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='void (*)(Tcl_Interp *)' function_pointer='true' name='tcl_SourceRCFile' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int *, char ***)' function_pointer='true' name='tcl_SplitList' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<arg const='true' declared_type='char***' type='^^*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)( char *, int *, char ***)' function_pointer='true' name='tcl_SplitPath' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<arg const='true' declared_type='char***' type='^^*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, char *, Tcl_PackageInitProc *, Tcl_PackageInitProc *)' function_pointer='true' name='tcl_StaticPackage' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_PackageInitProc*' function_pointer='true' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='Tcl_PackageInitProc*' function_pointer='true' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</arg>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)( char *, char *)' function_pointer='true' name='tcl_StringMatch' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Channel)' function_pointer='true' name='tcl_TellOld' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int, Tcl_VarTraceProc *, ClientData)' function_pointer='true' name='tcl_TraceVar' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_VarTraceProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, char *, int, Tcl_VarTraceProc *, ClientData)' function_pointer='true' name='tcl_TraceVar2' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_VarTraceProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='char *(*)(Tcl_Interp *, char *, Tcl_DString *)' function_pointer='true' name='tcl_TranslateFileName' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(Tcl_Channel, char *, int, int)' function_pointer='true' name='tcl_Ungets' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, char *)' function_pointer='true' name='tcl_UnlinkVar' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Channel)' function_pointer='true' name='tcl_UnregisterChannel' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int)' function_pointer='true' name='tcl_UnsetVar' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, char *, int)' function_pointer='true' name='tcl_UnsetVar2' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, char *, int, Tcl_VarTraceProc *, ClientData)' function_pointer='true' name='tcl_UntraceVar' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_VarTraceProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, char *, char *, int, Tcl_VarTraceProc *, ClientData)' function_pointer='true' name='tcl_UntraceVar2' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_VarTraceProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, char *)' function_pointer='true' name='tcl_UpdateLinkedVar' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, char *, char *, int)' function_pointer='true' name='tcl_UpVar' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, char *, char *, char *, int)' function_pointer='true' name='tcl_UpVar2' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, ...)' function_pointer='true' name='tcl_VarEval' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='ClientData (*)(Tcl_Interp *, char *, int, Tcl_VarTraceProc *, ClientData)' function_pointer='true' name='tcl_VarTraceInfo' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_VarTraceProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='ClientData' type='^v'/>
</field>
<field declared_type='ClientData (*)(Tcl_Interp *, char *, char *, int, Tcl_VarTraceProc *, ClientData)' function_pointer='true' name='tcl_VarTraceInfo2' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_VarTraceProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='ClientData' type='^v'/>
</field>
<field declared_type='int (*)(Tcl_Channel, char *, int)' function_pointer='true' name='tcl_Write' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, int, Tcl_Obj * *, char *)' function_pointer='true' name='tcl_WrongNumArgs' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)( char *)' function_pointer='true' name='tcl_DumpActiveMemory' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)( char *, int)' function_pointer='true' name='tcl_ValidateAllMemory' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, va_list)' declared_type64='void (*)(Tcl_Interp *, struct __va_list_tag *)' function_pointer='true' name='tcl_AppendResultVA' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='va_list' declared_type64='struct __va_list_tag*' type='*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, va_list)' declared_type64='void (*)(Tcl_Obj *, struct __va_list_tag *)' function_pointer='true' name='tcl_AppendStringsToObjVA' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='va_list' declared_type64='struct __va_list_tag*' type='*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='char *(*)(Tcl_HashTable *)' function_pointer='true' name='tcl_HashStats' type='^?'>
<arg declared_type='Tcl_HashTable*' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<retval declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(Tcl_Interp *, char *, char **)' function_pointer='true' name='tcl_ParseVar' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char**' type='^*'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(Tcl_Interp *, char *, char *, int)' function_pointer='true' name='tcl_PkgPresent' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(Tcl_Interp *, char *, char *, int, ClientData *)' function_pointer='true' name='tcl_PkgPresentEx' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='ClientData*' type='^^v'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, char *)' function_pointer='true' name='tcl_PkgProvide' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field const='true' declared_type='char *(*)(Tcl_Interp *, char *, char *, int)' function_pointer='true' name='tcl_PkgRequire' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, va_list)' declared_type64='void (*)(Tcl_Interp *, struct __va_list_tag *)' function_pointer='true' name='tcl_SetErrorCodeVA' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='va_list' declared_type64='struct __va_list_tag*' type='*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, va_list)' declared_type64='int (*)(Tcl_Interp *, struct __va_list_tag *)' function_pointer='true' name='tcl_VarEvalVA' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='va_list' declared_type64='struct __va_list_tag*' type='*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Pid (*)(Tcl_Pid, int *, int)' function_pointer='true' name='tcl_WaitPid' type='^?'>
<arg declared_type='Tcl_Pid' type='^{Tcl_Pid_=}'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Pid' type='^{Tcl_Pid_=}'/>
</field>
<field declared_type='void (*)( char *, va_list)' declared_type64='void (*)( char *, struct __va_list_tag *)' function_pointer='true' name='tcl_PanicVA' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='va_list' declared_type64='struct __va_list_tag*' type='*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(int *, int *, int *, int *)' function_pointer='true' name='tcl_GetVersion' type='^?'>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *)' function_pointer='true' name='tcl_InitMemory' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Channel (*)(Tcl_Interp *, Tcl_ChannelType *, ClientData, int, Tcl_Channel)' function_pointer='true' name='tcl_StackChannel' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Channel)' function_pointer='true' name='tcl_UnstackChannel' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Channel (*)(Tcl_Channel)' function_pointer='true' name='tcl_GetStackedChannel' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</field>
<field declared_type='void (*)(Tcl_MainLoopProc *)' function_pointer='true' name='tcl_SetMainLoop' type='^?'>
<arg declared_type='Tcl_MainLoopProc*' function_pointer='true' type='^?'>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void*' name='reserved285' type='^v'/>
<field declared_type='void (*)(Tcl_Obj *, Tcl_Obj *)' function_pointer='true' name='tcl_AppendObjToObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Encoding (*)( Tcl_EncodingType *)' function_pointer='true' name='tcl_CreateEncoding' type='^?'>
<arg const='true' declared_type='Tcl_EncodingType*' type='^{Tcl_EncodingType=*^?^?^?^vi}'/>
<retval declared_type='Tcl_Encoding' type='^{Tcl_Encoding_=}'/>
</field>
<field declared_type='void (*)(Tcl_ExitProc *, ClientData)' function_pointer='true' name='tcl_CreateThreadExitHandler' type='^?'>
<arg declared_type='Tcl_ExitProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_ExitProc *, ClientData)' function_pointer='true' name='tcl_DeleteThreadExitHandler' type='^?'>
<arg declared_type='Tcl_ExitProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_SavedResult *)' function_pointer='true' name='tcl_DiscardResult' type='^?'>
<arg declared_type='Tcl_SavedResult*' type='^{Tcl_SavedResult=*^?^{Tcl_Obj}*ii[201c]}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int, int)' function_pointer='true' name='tcl_EvalEx' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, int, Tcl_Obj * *, int)' function_pointer='true' name='tcl_EvalObjv' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int)' function_pointer='true' name='tcl_EvalObjEx' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(int)' function_pointer='true' name='tcl_ExitThread' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Encoding, char *, int, int, Tcl_EncodingState *, char *, int, int *, int *, int *)' function_pointer='true' name='tcl_ExternalToUtf' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Encoding' type='^{Tcl_Encoding_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_EncodingState*' type='^^{Tcl_EncodingState_}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='char *(*)(Tcl_Encoding, char *, int, Tcl_DString *)' function_pointer='true' name='tcl_ExternalToUtfDString' type='^?'>
<arg declared_type='Tcl_Encoding' type='^{Tcl_Encoding_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='void (*)(void)' function_pointer='true' name='tcl_FinalizeThread' type='^?'>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(ClientData)' function_pointer='true' name='tcl_FinalizeNotifier' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Encoding)' function_pointer='true' name='tcl_FreeEncoding' type='^?'>
<arg declared_type='Tcl_Encoding' type='^{Tcl_Encoding_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_ThreadId (*)(void)' function_pointer='true' name='tcl_GetCurrentThread' type='^?'>
<retval declared_type='Tcl_ThreadId' type='^{Tcl_ThreadId_=}'/>
</field>
<field declared_type='Tcl_Encoding (*)(Tcl_Interp *, char *)' function_pointer='true' name='tcl_GetEncoding' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='Tcl_Encoding' type='^{Tcl_Encoding_=}'/>
</field>
<field const='true' declared_type='char *(*)(Tcl_Encoding)' function_pointer='true' name='tcl_GetEncodingName' type='^?'>
<arg declared_type='Tcl_Encoding' type='^{Tcl_Encoding_=}'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='void (*)(Tcl_Interp *)' function_pointer='true' name='tcl_GetEncodingNames' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, void *, int, char *, int, int *)' function_pointer='true' name='tcl_GetIndexFromObjStruct' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='void*' type='^v'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void *(*)(Tcl_ThreadDataKey *, int)' function_pointer='true' name='tcl_GetThreadData' type='^?'>
<arg declared_type='Tcl_ThreadDataKey*' type='^^{Tcl_ThreadDataKey_}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void*' type='^v'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Interp *, char *, char *, int)' function_pointer='true' name='tcl_GetVar2Ex' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='ClientData (*)(void)' function_pointer='true' name='tcl_InitNotifier' type='^?'>
<retval declared_type='ClientData' type='^v'/>
</field>
<field declared_type='void (*)(Tcl_Mutex *)' function_pointer='true' name='tcl_MutexLock' type='^?'>
<arg declared_type='Tcl_Mutex*' type='^^{Tcl_Mutex_}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Mutex *)' function_pointer='true' name='tcl_MutexUnlock' type='^?'>
<arg declared_type='Tcl_Mutex*' type='^^{Tcl_Mutex_}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Condition *)' function_pointer='true' name='tcl_ConditionNotify' type='^?'>
<arg declared_type='Tcl_Condition*' type='^^{Tcl_Condition_}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Condition *, Tcl_Mutex *, Tcl_Time *)' function_pointer='true' name='tcl_ConditionWait' type='^?'>
<arg declared_type='Tcl_Condition*' type='^^{Tcl_Condition_}'/>
<arg declared_type='Tcl_Mutex*' type='^^{Tcl_Mutex_}'/>
<arg declared_type='Tcl_Time*' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)( char *, int)' function_pointer='true' name='tcl_NumUtfChars' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Channel, Tcl_Obj *, int, int)' function_pointer='true' name='tcl_ReadChars' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tcl_SavedResult *)' function_pointer='true' name='tcl_RestoreResult' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_SavedResult*' type='^{Tcl_SavedResult=*^?^{Tcl_Obj}*ii[201c]}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tcl_SavedResult *)' function_pointer='true' name='tcl_SaveResult' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_SavedResult*' type='^{Tcl_SavedResult=*^?^{Tcl_Obj}*ii[201c]}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *)' function_pointer='true' name='tcl_SetSystemEncoding' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Interp *, char *, char *, Tcl_Obj *, int)' function_pointer='true' name='tcl_SetVar2Ex' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='void (*)(Tcl_ThreadId)' function_pointer='true' name='tcl_ThreadAlert' type='^?'>
<arg declared_type='Tcl_ThreadId' type='^{Tcl_ThreadId_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_ThreadId, Tcl_Event *, Tcl_QueuePosition)' function_pointer='true' name='tcl_ThreadQueueEvent' type='^?'>
<arg declared_type='Tcl_ThreadId' type='^{Tcl_ThreadId_=}'/>
<arg declared_type='Tcl_Event*' type='^{Tcl_Event=^?^{Tcl_Event}}'/>
<arg declared_type='Tcl_QueuePosition' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_UniChar (*)( char *, int)' function_pointer='true' name='tcl_UniCharAtIndex' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_UniChar' type='S'/>
</field>
<field declared_type='Tcl_UniChar (*)(int)' function_pointer='true' name='tcl_UniCharToLower' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_UniChar' type='S'/>
</field>
<field declared_type='Tcl_UniChar (*)(int)' function_pointer='true' name='tcl_UniCharToTitle' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_UniChar' type='S'/>
</field>
<field declared_type='Tcl_UniChar (*)(int)' function_pointer='true' name='tcl_UniCharToUpper' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_UniChar' type='S'/>
</field>
<field declared_type='int (*)(int, char *)' function_pointer='true' name='tcl_UniCharToUtf' type='^?'>
<arg declared_type='int' type='i'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field const='true' declared_type='char *(*)( char *, int)' function_pointer='true' name='tcl_UtfAtIndex' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)( char *, int)' function_pointer='true' name='tcl_UtfCharComplete' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)( char *, int *, char *)' function_pointer='true' name='tcl_UtfBackslash' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field const='true' declared_type='char *(*)( char *, int)' function_pointer='true' name='tcl_UtfFindFirst' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)( char *, int)' function_pointer='true' name='tcl_UtfFindLast' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)( char *)' function_pointer='true' name='tcl_UtfNext' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)( char *, char *)' function_pointer='true' name='tcl_UtfPrev' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Encoding, char *, int, int, Tcl_EncodingState *, char *, int, int *, int *, int *)' function_pointer='true' name='tcl_UtfToExternal' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Encoding' type='^{Tcl_Encoding_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_EncodingState*' type='^^{Tcl_EncodingState_}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='char *(*)(Tcl_Encoding, char *, int, Tcl_DString *)' function_pointer='true' name='tcl_UtfToExternalDString' type='^?'>
<arg declared_type='Tcl_Encoding' type='^{Tcl_Encoding_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(char *)' function_pointer='true' name='tcl_UtfToLower' type='^?'>
<arg declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(char *)' function_pointer='true' name='tcl_UtfToTitle' type='^?'>
<arg declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)( char *, Tcl_UniChar *)' function_pointer='true' name='tcl_UtfToUniChar' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_UniChar*' type='^S'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(char *)' function_pointer='true' name='tcl_UtfToUpper' type='^?'>
<arg declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Channel, char *, int)' function_pointer='true' name='tcl_WriteChars' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Channel, Tcl_Obj *)' function_pointer='true' name='tcl_WriteObj' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='char *(*)(Tcl_Obj *)' function_pointer='true' name='tcl_GetString' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='char*' type='*'/>
</field>
<field const='true' declared_type='char *(*)(void)' function_pointer='true' name='tcl_GetDefaultEncodingDir' type='^?'>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='void (*)( char *)' function_pointer='true' name='tcl_SetDefaultEncodingDir' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(ClientData)' function_pointer='true' name='tcl_AlertNotifier' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(int)' function_pointer='true' name='tcl_ServiceModeHook' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(int)' function_pointer='true' name='tcl_UniCharIsAlnum' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(int)' function_pointer='true' name='tcl_UniCharIsAlpha' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(int)' function_pointer='true' name='tcl_UniCharIsDigit' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(int)' function_pointer='true' name='tcl_UniCharIsLower' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(int)' function_pointer='true' name='tcl_UniCharIsSpace' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(int)' function_pointer='true' name='tcl_UniCharIsUpper' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(int)' function_pointer='true' name='tcl_UniCharIsWordChar' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)( Tcl_UniChar *)' function_pointer='true' name='tcl_UniCharLen' type='^?'>
<arg const='true' declared_type='Tcl_UniChar*' type='^S'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)( Tcl_UniChar *, Tcl_UniChar *, unsigned long)' function_pointer='true' name='tcl_UniCharNcmp' type='^?'>
<arg const='true' declared_type='Tcl_UniChar*' type='^S'/>
<arg const='true' declared_type='Tcl_UniChar*' type='^S'/>
<arg declared_type='unsigned long' type='L' type64='Q'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='char *(*)( Tcl_UniChar *, int, Tcl_DString *)' function_pointer='true' name='tcl_UniCharToUtfDString' type='^?'>
<arg const='true' declared_type='Tcl_UniChar*' type='^S'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='Tcl_UniChar *(*)( char *, int, Tcl_DString *)' function_pointer='true' name='tcl_UtfToUniCharDString' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='Tcl_UniChar*' type='^S'/>
</field>
<field declared_type='Tcl_RegExp (*)(Tcl_Interp *, Tcl_Obj *, int)' function_pointer='true' name='tcl_GetRegExpFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_RegExp' type='^{Tcl_RegExp_=}'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Interp *, Tcl_Token *, int)' function_pointer='true' name='tcl_EvalTokens' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Token*' type='^{Tcl_Token=i*ii}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='void (*)(Tcl_Parse *)' function_pointer='true' name='tcl_FreeParse' type='^?'>
<arg declared_type='Tcl_Parse*' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, char *, char *, int)' function_pointer='true' name='tcl_LogCommandInfo' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int, Tcl_Parse *, int, char **)' function_pointer='true' name='tcl_ParseBraces' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Parse*' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int, int, Tcl_Parse *)' function_pointer='true' name='tcl_ParseCommand' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Parse*' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int, Tcl_Parse *)' function_pointer='true' name='tcl_ParseExpr' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Parse*' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int, Tcl_Parse *, int, char **)' function_pointer='true' name='tcl_ParseQuotedString' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Parse*' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int, Tcl_Parse *, int)' function_pointer='true' name='tcl_ParseVarName' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Parse*' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='char *(*)(Tcl_Interp *, Tcl_DString *)' function_pointer='true' name='tcl_GetCwd' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)( char *)' function_pointer='true' name='tcl_Chdir' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)( char *, int)' function_pointer='true' name='tcl_Access' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)( char *, struct stat *)' function_pointer='true' name='tcl_Stat' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='struct stat*' type='^{stat=iSSQIIi{timespec=il}{timespec=il}{timespec=il}{timespec=il}qqiIIi[2q]}' type64='^{stat=iSSQIIi{timespec=qq}{timespec=qq}{timespec=qq}{timespec=qq}qqiIIi[2q]}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)( char *, char *, unsigned long)' function_pointer='true' name='tcl_UtfNcmp' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='unsigned long' type='L' type64='Q'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)( char *, char *, unsigned long)' function_pointer='true' name='tcl_UtfNcasecmp' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='unsigned long' type='L' type64='Q'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)( char *, char *, int)' function_pointer='true' name='tcl_StringCaseMatch' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(int)' function_pointer='true' name='tcl_UniCharIsControl' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(int)' function_pointer='true' name='tcl_UniCharIsGraph' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(int)' function_pointer='true' name='tcl_UniCharIsPrint' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(int)' function_pointer='true' name='tcl_UniCharIsPunct' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_RegExp, Tcl_Obj *, int, int, int)' function_pointer='true' name='tcl_RegExpExecObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_RegExp' type='^{Tcl_RegExp_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_RegExp, Tcl_RegExpInfo *)' function_pointer='true' name='tcl_RegExpGetInfo' type='^?'>
<arg declared_type='Tcl_RegExp' type='^{Tcl_RegExp_=}'/>
<arg declared_type='Tcl_RegExpInfo*' type='^{Tcl_RegExpInfo=i^{Tcl_RegExpIndices}ll}' type64='^{Tcl_RegExpInfo=i^{Tcl_RegExpIndices}qq}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Obj *(*)( Tcl_UniChar *, int)' function_pointer='true' name='tcl_NewUnicodeObj' type='^?'>
<arg const='true' declared_type='Tcl_UniChar*' type='^S'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, Tcl_UniChar *, int)' function_pointer='true' name='tcl_SetUnicodeObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='Tcl_UniChar*' type='^S'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Obj *)' function_pointer='true' name='tcl_GetCharLength' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_UniChar (*)(Tcl_Obj *, int)' function_pointer='true' name='tcl_GetUniChar' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_UniChar' type='S'/>
</field>
<field declared_type='Tcl_UniChar *(*)(Tcl_Obj *)' function_pointer='true' name='tcl_GetUnicode' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_UniChar*' type='^S'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Obj *, int, int)' function_pointer='true' name='tcl_GetRange' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, Tcl_UniChar *, int)' function_pointer='true' name='tcl_AppendUnicodeToObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='Tcl_UniChar*' type='^S'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, Tcl_Obj *)' function_pointer='true' name='tcl_RegExpMatchObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_NotifierProcs *)' function_pointer='true' name='tcl_SetNotifier' type='^?'>
<arg declared_type='Tcl_NotifierProcs*' type='^{Tcl_NotifierProcs=^?^?^?^?^?^?^?^?}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Mutex *(*)(void)' function_pointer='true' name='tcl_GetAllocMutex' type='^?'>
<retval declared_type='Tcl_Mutex*' type='^^{Tcl_Mutex_}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *)' function_pointer='true' name='tcl_GetChannelNames' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *)' function_pointer='true' name='tcl_GetChannelNamesEx' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(ClientData, Tcl_Interp *, int, Tcl_Obj * *)' function_pointer='true' name='tcl_ProcObjCmd' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Condition *)' function_pointer='true' name='tcl_ConditionFinalize' type='^?'>
<arg declared_type='Tcl_Condition*' type='^^{Tcl_Condition_}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Mutex *)' function_pointer='true' name='tcl_MutexFinalize' type='^?'>
<arg declared_type='Tcl_Mutex*' type='^^{Tcl_Mutex_}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_ThreadId *, Tcl_ThreadCreateProc *, ClientData, int, int)' function_pointer='true' name='tcl_CreateThread' type='^?'>
<arg declared_type='Tcl_ThreadId*' type='^^{Tcl_ThreadId_}'/>
<arg declared_type='Tcl_ThreadCreateProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Channel, char *, int)' function_pointer='true' name='tcl_ReadRaw' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Channel, char *, int)' function_pointer='true' name='tcl_WriteRaw' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Channel (*)(Tcl_Channel)' function_pointer='true' name='tcl_GetTopChannel' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</field>
<field declared_type='int (*)(Tcl_Channel)' function_pointer='true' name='tcl_ChannelBuffered' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field const='true' declared_type='char *(*)( Tcl_ChannelType *)' function_pointer='true' name='tcl_ChannelName' type='^?'>
<arg const='true' declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='Tcl_ChannelTypeVersion (*)( Tcl_ChannelType *)' function_pointer='true' name='tcl_ChannelVersion' type='^?'>
<arg const='true' declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_ChannelTypeVersion' type='^{Tcl_ChannelTypeVersion_=}'/>
</field>
<field declared_type='Tcl_DriverBlockModeProc *(*)( Tcl_ChannelType *)' function_pointer='true' name='tcl_ChannelBlockModeProc' type='^?'>
<arg const='true' declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverBlockModeProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</retval>
</field>
<field declared_type='Tcl_DriverCloseProc *(*)( Tcl_ChannelType *)' function_pointer='true' name='tcl_ChannelCloseProc' type='^?'>
<arg const='true' declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverCloseProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</retval>
</field>
<field declared_type='Tcl_DriverClose2Proc *(*)( Tcl_ChannelType *)' function_pointer='true' name='tcl_ChannelClose2Proc' type='^?'>
<arg const='true' declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverClose2Proc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</retval>
</field>
<field declared_type='Tcl_DriverInputProc *(*)( Tcl_ChannelType *)' function_pointer='true' name='tcl_ChannelInputProc' type='^?'>
<arg const='true' declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverInputProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</retval>
</field>
<field declared_type='Tcl_DriverOutputProc *(*)( Tcl_ChannelType *)' function_pointer='true' name='tcl_ChannelOutputProc' type='^?'>
<arg const='true' declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverOutputProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</retval>
</field>
<field declared_type='Tcl_DriverSeekProc *(*)( Tcl_ChannelType *)' function_pointer='true' name='tcl_ChannelSeekProc' type='^?'>
<arg const='true' declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverSeekProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='long' type='l' type64='q'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</retval>
</field>
<field declared_type='Tcl_DriverSetOptionProc *(*)( Tcl_ChannelType *)' function_pointer='true' name='tcl_ChannelSetOptionProc' type='^?'>
<arg const='true' declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverSetOptionProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</retval>
</field>
<field declared_type='Tcl_DriverGetOptionProc *(*)( Tcl_ChannelType *)' function_pointer='true' name='tcl_ChannelGetOptionProc' type='^?'>
<arg const='true' declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverGetOptionProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='int' type='i'/>
</retval>
</field>
<field declared_type='Tcl_DriverWatchProc *(*)( Tcl_ChannelType *)' function_pointer='true' name='tcl_ChannelWatchProc' type='^?'>
<arg const='true' declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverWatchProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</retval>
</field>
<field declared_type='Tcl_DriverGetHandleProc *(*)( Tcl_ChannelType *)' function_pointer='true' name='tcl_ChannelGetHandleProc' type='^?'>
<arg const='true' declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverGetHandleProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<arg declared_type='ClientData*' type='^^v'/>
<retval declared_type='int' type='i'/>
</retval>
</field>
<field declared_type='Tcl_DriverFlushProc *(*)( Tcl_ChannelType *)' function_pointer='true' name='tcl_ChannelFlushProc' type='^?'>
<arg const='true' declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverFlushProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='int' type='i'/>
</retval>
</field>
<field declared_type='Tcl_DriverHandlerProc *(*)( Tcl_ChannelType *)' function_pointer='true' name='tcl_ChannelHandlerProc' type='^?'>
<arg const='true' declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverHandlerProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</retval>
</field>
<field declared_type='int (*)(Tcl_ThreadId, int *)' function_pointer='true' name='tcl_JoinThread' type='^?'>
<arg declared_type='Tcl_ThreadId' type='^{Tcl_ThreadId_=}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Channel)' function_pointer='true' name='tcl_IsChannelShared' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Channel)' function_pointer='true' name='tcl_IsChannelRegistered' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Channel)' function_pointer='true' name='tcl_CutChannel' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Channel)' function_pointer='true' name='tcl_SpliceChannel' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Channel)' function_pointer='true' name='tcl_ClearChannelHandlers' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)( char *)' function_pointer='true' name='tcl_IsChannelExisting' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)( Tcl_UniChar *, Tcl_UniChar *, unsigned long)' function_pointer='true' name='tcl_UniCharNcasecmp' type='^?'>
<arg const='true' declared_type='Tcl_UniChar*' type='^S'/>
<arg const='true' declared_type='Tcl_UniChar*' type='^S'/>
<arg declared_type='unsigned long' type='L' type64='Q'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)( Tcl_UniChar *, Tcl_UniChar *, int)' function_pointer='true' name='tcl_UniCharCaseMatch' type='^?'>
<arg const='true' declared_type='Tcl_UniChar*' type='^S'/>
<arg const='true' declared_type='Tcl_UniChar*' type='^S'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_HashEntry *(*)(Tcl_HashTable *, char *)' function_pointer='true' name='tcl_FindHashEntry' type='^?'>
<arg declared_type='Tcl_HashTable*' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='Tcl_HashEntry*' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
</field>
<field declared_type='Tcl_HashEntry *(*)(Tcl_HashTable *, char *, int *)' function_pointer='true' name='tcl_CreateHashEntry' type='^?'>
<arg declared_type='Tcl_HashTable*' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='Tcl_HashEntry*' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
</field>
<field declared_type='void (*)(Tcl_HashTable *, int, Tcl_HashKeyType *)' function_pointer='true' name='tcl_InitCustomHashTable' type='^?'>
<arg declared_type='Tcl_HashTable*' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_HashKeyType*' type='^{Tcl_HashKeyType=ii^?^?^?^?}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_HashTable *)' function_pointer='true' name='tcl_InitObjHashTable' type='^?'>
<arg declared_type='Tcl_HashTable*' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='ClientData (*)(Tcl_Interp *, char *, int, Tcl_CommandTraceProc *, ClientData)' function_pointer='true' name='tcl_CommandTraceInfo' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_CommandTraceProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='ClientData' type='^v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int, Tcl_CommandTraceProc *, ClientData)' function_pointer='true' name='tcl_TraceCommand' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_CommandTraceProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, char *, int, Tcl_CommandTraceProc *, ClientData)' function_pointer='true' name='tcl_UntraceCommand' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_CommandTraceProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='char *(*)(unsigned int)' function_pointer='true' name='tcl_AttemptAlloc' type='^?'>
<arg declared_type='unsigned int' type='I'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='char *(*)(unsigned int, char *, int)' function_pointer='true' name='tcl_AttemptDbCkalloc' type='^?'>
<arg declared_type='unsigned int' type='I'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='char *(*)(char *, unsigned int)' function_pointer='true' name='tcl_AttemptRealloc' type='^?'>
<arg declared_type='char*' type='*'/>
<arg declared_type='unsigned int' type='I'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='char *(*)(char *, unsigned int, char *, int)' function_pointer='true' name='tcl_AttemptDbCkrealloc' type='^?'>
<arg declared_type='char*' type='*'/>
<arg declared_type='unsigned int' type='I'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(Tcl_Obj *, int)' function_pointer='true' name='tcl_AttemptSetObjLength' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_ThreadId (*)(Tcl_Channel)' function_pointer='true' name='tcl_GetChannelThread' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='Tcl_ThreadId' type='^{Tcl_ThreadId_=}'/>
</field>
<field declared_type='Tcl_UniChar *(*)(Tcl_Obj *, int *)' function_pointer='true' name='tcl_GetUnicodeFromObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='Tcl_UniChar*' type='^S'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int *, Tcl_ValueType **, Tcl_MathProc **, ClientData *)' function_pointer='true' name='tcl_GetMathFuncInfo' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='Tcl_ValueType**' type='^^i'/>
<arg declared_type='Tcl_MathProc**' type='^^?'/>
<arg declared_type='ClientData*' type='^^v'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Interp *, char *)' function_pointer='true' name='tcl_ListMathFuncs' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Interp *, Tcl_Obj *, int)' function_pointer='true' name='tcl_SubstObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Channel)' function_pointer='true' name='tcl_DetachChannel' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Channel)' function_pointer='true' name='tcl_IsStandardChannel' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Obj *, Tcl_Obj *)' function_pointer='true' name='tcl_FSCopyFile' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Obj *, Tcl_Obj *, Tcl_Obj **)' function_pointer='true' name='tcl_FSCopyDirectory' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Obj *)' function_pointer='true' name='tcl_FSCreateDirectory' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Obj *)' function_pointer='true' name='tcl_FSDeleteFile' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, char *, char *, Tcl_PackageInitProc **, Tcl_PackageInitProc **, Tcl_LoadHandle *, Tcl_FSUnloadFileProc **)' function_pointer='true' name='tcl_FSLoadFile' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_PackageInitProc**' type='^^?'/>
<arg declared_type='Tcl_PackageInitProc**' type='^^?'/>
<arg declared_type='Tcl_LoadHandle*' type='^^{Tcl_LoadHandle_}'/>
<arg declared_type='Tcl_FSUnloadFileProc**' type='^^?'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, Tcl_Obj *, char *, Tcl_GlobTypeData *)' function_pointer='true' name='tcl_FSMatchInDirectory' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_GlobTypeData*' type='^{Tcl_GlobTypeData=ii^{Tcl_Obj}^{Tcl_Obj}}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Obj *, Tcl_Obj *, int)' function_pointer='true' name='tcl_FSLink' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='int (*)(Tcl_Obj *, int, Tcl_Obj **)' function_pointer='true' name='tcl_FSRemoveDirectory' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Obj *, Tcl_Obj *)' function_pointer='true' name='tcl_FSRenameFile' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Obj *, Tcl_StatBuf *)' function_pointer='true' name='tcl_FSLstat' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_StatBuf*' type='^{stat=iSSQIIi{timespec=il}{timespec=il}{timespec=il}{timespec=il}qqiIIi[2q]}' type64='^{stat=iSSQIIi{timespec=qq}{timespec=qq}{timespec=qq}{timespec=qq}qqiIIi[2q]}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Obj *, struct utimbuf *)' function_pointer='true' name='tcl_FSUtime' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='struct utimbuf*' type='^{utimbuf=ii}' type64='^{utimbuf=qq}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, int, Tcl_Obj *, Tcl_Obj **)' function_pointer='true' name='tcl_FSFileAttrsGet' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, int, Tcl_Obj *, Tcl_Obj *)' function_pointer='true' name='tcl_FSFileAttrsSet' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field const='true' declared_type='char **(*)(Tcl_Obj *, Tcl_Obj **)' function_pointer='true' name='tcl_FSFileAttrStrings' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<retval const='true' declared_type='char**' type='^*'/>
</field>
<field declared_type='int (*)(Tcl_Obj *, Tcl_StatBuf *)' function_pointer='true' name='tcl_FSStat' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_StatBuf*' type='^{stat=iSSQIIi{timespec=il}{timespec=il}{timespec=il}{timespec=il}qqiIIi[2q]}' type64='^{stat=iSSQIIi{timespec=qq}{timespec=qq}{timespec=qq}{timespec=qq}qqiIIi[2q]}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Obj *, int)' function_pointer='true' name='tcl_FSAccess' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Channel (*)(Tcl_Interp *, Tcl_Obj *, char *, int)' function_pointer='true' name='tcl_FSOpenFileChannel' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Interp *)' function_pointer='true' name='tcl_FSGetCwd' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='int (*)(Tcl_Obj *)' function_pointer='true' name='tcl_FSChdir' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *)' function_pointer='true' name='tcl_FSConvertToPathType' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Obj *, int)' function_pointer='true' name='tcl_FSJoinPath' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Obj *, int *)' function_pointer='true' name='tcl_FSSplitPath' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='int (*)(Tcl_Obj *, Tcl_Obj *)' function_pointer='true' name='tcl_FSEqualPaths' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Interp *, Tcl_Obj *)' function_pointer='true' name='tcl_FSGetNormalizedPath' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Obj *, int, Tcl_Obj * *)' function_pointer='true' name='tcl_FSJoinToPath' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='ClientData (*)(Tcl_Obj *, Tcl_Filesystem *)' function_pointer='true' name='tcl_FSGetInternalRep' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Filesystem*' type='^{Tcl_Filesystem=*i^{Tcl_FSVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='ClientData' type='^v'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Interp *, Tcl_Obj *)' function_pointer='true' name='tcl_FSGetTranslatedPath' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *)' function_pointer='true' name='tcl_FSEvalFile' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Filesystem *, ClientData)' function_pointer='true' name='tcl_FSNewNativePath' type='^?'>
<arg declared_type='Tcl_Filesystem*' type='^{Tcl_Filesystem=*i^{Tcl_FSVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field const='true' declared_type='char *(*)(Tcl_Obj *)' function_pointer='true' name='tcl_FSGetNativePath' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Obj *)' function_pointer='true' name='tcl_FSFileSystemInfo' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Obj *)' function_pointer='true' name='tcl_FSPathSeparator' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(void)' function_pointer='true' name='tcl_FSListVolumes' type='^?'>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='int (*)(ClientData, Tcl_Filesystem *)' function_pointer='true' name='tcl_FSRegister' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Filesystem*' type='^{Tcl_Filesystem=*i^{Tcl_FSVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Filesystem *)' function_pointer='true' name='tcl_FSUnregister' type='^?'>
<arg declared_type='Tcl_Filesystem*' type='^{Tcl_Filesystem=*i^{Tcl_FSVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='ClientData (*)(Tcl_Filesystem *)' function_pointer='true' name='tcl_FSData' type='^?'>
<arg declared_type='Tcl_Filesystem*' type='^{Tcl_Filesystem=*i^{Tcl_FSVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='ClientData' type='^v'/>
</field>
<field const='true' declared_type='char *(*)(Tcl_Interp *, Tcl_Obj *)' function_pointer='true' name='tcl_FSGetTranslatedStringPath' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='Tcl_Filesystem *(*)(Tcl_Obj *)' function_pointer='true' name='tcl_FSGetFileSystemForPath' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Filesystem*' type='^{Tcl_Filesystem=*i^{Tcl_FSVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
</field>
<field declared_type='Tcl_PathType (*)(Tcl_Obj *)' function_pointer='true' name='tcl_FSGetPathType' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_PathType' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Channel)' function_pointer='true' name='tcl_OutputBuffered' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Filesystem *)' function_pointer='true' name='tcl_FSMountsChanged' type='^?'>
<arg declared_type='Tcl_Filesystem*' type='^{Tcl_Filesystem=*i^{Tcl_FSVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Token *, int)' function_pointer='true' name='tcl_EvalTokensStandard' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Token*' type='^{Tcl_Token=i*ii}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Time *)' function_pointer='true' name='tcl_GetTime' type='^?'>
<arg declared_type='Tcl_Time*' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Trace (*)(Tcl_Interp *, int, int, Tcl_CmdObjTraceProc *, ClientData, Tcl_CmdObjTraceDeleteProc *)' function_pointer='true' name='tcl_CreateObjTrace' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_CmdObjTraceProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='struct Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_CmdObjTraceDeleteProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='Tcl_Trace' type='^{Tcl_Trace_=}'/>
</field>
<field declared_type='int (*)(Tcl_Command, Tcl_CmdInfo *)' function_pointer='true' name='tcl_GetCommandInfoFromToken' type='^?'>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<arg declared_type='Tcl_CmdInfo*' type='^{Tcl_CmdInfo=i^?^v^?^v^?^v^{Tcl_Namespace}}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Command, Tcl_CmdInfo *)' function_pointer='true' name='tcl_SetCommandInfoFromToken' type='^?'>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<arg const='true' declared_type='Tcl_CmdInfo*' type='^{Tcl_CmdInfo=i^?^v^?^v^?^v^{Tcl_Namespace}}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_WideInt, char *, int)' function_pointer='true' name='tcl_DbNewWideIntObj' type='^?'>
<arg declared_type='Tcl_WideInt' type='q'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, Tcl_WideInt *)' function_pointer='true' name='tcl_GetWideIntFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_WideInt*' type='^q'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_WideInt)' function_pointer='true' name='tcl_NewWideIntObj' type='^?'>
<arg declared_type='Tcl_WideInt' type='q'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, Tcl_WideInt)' function_pointer='true' name='tcl_SetWideIntObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_WideInt' type='q'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_StatBuf *(*)(void)' function_pointer='true' name='tcl_AllocStatBuf' type='^?'>
<retval declared_type='Tcl_StatBuf*' type='^{stat=iSSQIIi{timespec=il}{timespec=il}{timespec=il}{timespec=il}qqiIIi[2q]}' type64='^{stat=iSSQIIi{timespec=qq}{timespec=qq}{timespec=qq}{timespec=qq}qqiIIi[2q]}'/>
</field>
<field declared_type='Tcl_WideInt (*)(Tcl_Channel, Tcl_WideInt, int)' function_pointer='true' name='tcl_Seek' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_WideInt' type='q'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_WideInt' type='q'/>
</field>
<field declared_type='Tcl_WideInt (*)(Tcl_Channel)' function_pointer='true' name='tcl_Tell' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='Tcl_WideInt' type='q'/>
</field>
<field declared_type='Tcl_DriverWideSeekProc *(*)( Tcl_ChannelType *)' function_pointer='true' name='tcl_ChannelWideSeekProc' type='^?'>
<arg const='true' declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverWideSeekProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_WideInt' type='q'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='Tcl_WideInt' type='q'/>
</retval>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, Tcl_Obj *, Tcl_Obj *)' function_pointer='true' name='tcl_DictObjPut' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, Tcl_Obj *, Tcl_Obj **)' function_pointer='true' name='tcl_DictObjGet' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, Tcl_Obj *)' function_pointer='true' name='tcl_DictObjRemove' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int *)' function_pointer='true' name='tcl_DictObjSize' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, Tcl_DictSearch *, Tcl_Obj **, Tcl_Obj **, int *)' function_pointer='true' name='tcl_DictObjFirst' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_DictSearch*' type='^{_Tcl_DictSearch=^vi^{Tcl_Dict_}}'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_DictSearch *, Tcl_Obj **, Tcl_Obj **, int *)' function_pointer='true' name='tcl_DictObjNext' type='^?'>
<arg declared_type='Tcl_DictSearch*' type='^{_Tcl_DictSearch=^vi^{Tcl_Dict_}}'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_DictSearch *)' function_pointer='true' name='tcl_DictObjDone' type='^?'>
<arg declared_type='Tcl_DictSearch*' type='^{_Tcl_DictSearch=^vi^{Tcl_Dict_}}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int, Tcl_Obj * *, Tcl_Obj *)' function_pointer='true' name='tcl_DictObjPutKeyList' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, int, Tcl_Obj * *)' function_pointer='true' name='tcl_DictObjRemoveKeyList' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Obj *(*)(void)' function_pointer='true' name='tcl_NewDictObj' type='^?'>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)( char *, int)' function_pointer='true' name='tcl_DbNewDictObj' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, char *, Tcl_Config *, char *)' function_pointer='true' name='tcl_RegisterConfig' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Config*' type='^{Tcl_Config=**}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Namespace *(*)(Tcl_Interp *, char *, ClientData, Tcl_NamespaceDeleteProc *)' function_pointer='true' name='tcl_CreateNamespace' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_NamespaceDeleteProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
</field>
<field declared_type='void (*)(Tcl_Namespace *)' function_pointer='true' name='tcl_DeleteNamespace' type='^?'>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Namespace *, Tcl_Obj *)' function_pointer='true' name='tcl_AppendExportList' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Namespace *, char *, int)' function_pointer='true' name='tcl_Export' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Namespace *, char *, int)' function_pointer='true' name='tcl_Import' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Namespace *, char *)' function_pointer='true' name='tcl_ForgetImport' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Namespace *(*)(Tcl_Interp *)' function_pointer='true' name='tcl_GetCurrentNamespace' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
</field>
<field declared_type='Tcl_Namespace *(*)(Tcl_Interp *)' function_pointer='true' name='tcl_GetGlobalNamespace' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
</field>
<field declared_type='Tcl_Namespace *(*)(Tcl_Interp *, char *, Tcl_Namespace *, int)' function_pointer='true' name='tcl_FindNamespace' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
</field>
<field declared_type='Tcl_Command (*)(Tcl_Interp *, char *, Tcl_Namespace *, int)' function_pointer='true' name='tcl_FindCommand' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</field>
<field declared_type='Tcl_Command (*)(Tcl_Interp *, Tcl_Obj *)' function_pointer='true' name='tcl_GetCommandFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tcl_Command, Tcl_Obj *)' function_pointer='true' name='tcl_GetCommandFullName' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, char *)' function_pointer='true' name='tcl_FSEvalFileEx' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_ExitProc *(*)(Tcl_ExitProc *)' function_pointer='true' name='tcl_SetExitProc' type='^?'>
<arg declared_type='Tcl_ExitProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='Tcl_ExitProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</retval>
</field>
<field declared_type='void (*)(Tcl_Interp *, int, Tcl_LimitHandlerProc *, ClientData, Tcl_LimitHandlerDeleteProc *)' function_pointer='true' name='tcl_LimitAddHandler' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_LimitHandlerProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_LimitHandlerDeleteProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, int, Tcl_LimitHandlerProc *, ClientData)' function_pointer='true' name='tcl_LimitRemoveHandler' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_LimitHandlerProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *)' function_pointer='true' name='tcl_LimitReady' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *)' function_pointer='true' name='tcl_LimitCheck' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *)' function_pointer='true' name='tcl_LimitExceeded' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, int)' function_pointer='true' name='tcl_LimitSetCommands' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tcl_Time *)' function_pointer='true' name='tcl_LimitSetTime' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Time*' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, int, int)' function_pointer='true' name='tcl_LimitSetGranularity' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, int)' function_pointer='true' name='tcl_LimitTypeEnabled' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, int)' function_pointer='true' name='tcl_LimitTypeExceeded' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, int)' function_pointer='true' name='tcl_LimitTypeSet' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, int)' function_pointer='true' name='tcl_LimitTypeReset' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *)' function_pointer='true' name='tcl_LimitGetCommands' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tcl_Time *)' function_pointer='true' name='tcl_LimitGetTime' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Time*' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, int)' function_pointer='true' name='tcl_LimitGetGranularity' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_InterpState (*)(Tcl_Interp *, int)' function_pointer='true' name='tcl_SaveInterpState' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_InterpState' type='^{Tcl_InterpState_=}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_InterpState)' function_pointer='true' name='tcl_RestoreInterpState' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_InterpState' type='^{Tcl_InterpState_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_InterpState)' function_pointer='true' name='tcl_DiscardInterpState' type='^?'>
<arg declared_type='Tcl_InterpState' type='^{Tcl_InterpState_=}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *)' function_pointer='true' name='tcl_SetReturnOptions' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Interp *, int)' function_pointer='true' name='tcl_GetReturnOptions' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='int (*)(Tcl_Command)' function_pointer='true' name='tcl_IsEnsemble' type='^?'>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Command (*)(Tcl_Interp *, char *, Tcl_Namespace *, int)' function_pointer='true' name='tcl_CreateEnsemble' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</field>
<field declared_type='Tcl_Command (*)(Tcl_Interp *, Tcl_Obj *, int)' function_pointer='true' name='tcl_FindEnsemble' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Command, Tcl_Obj *)' function_pointer='true' name='tcl_SetEnsembleSubcommandList' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Command, Tcl_Obj *)' function_pointer='true' name='tcl_SetEnsembleMappingDict' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Command, Tcl_Obj *)' function_pointer='true' name='tcl_SetEnsembleUnknownHandler' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Command, int)' function_pointer='true' name='tcl_SetEnsembleFlags' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Command, Tcl_Obj **)' function_pointer='true' name='tcl_GetEnsembleSubcommandList' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Command, Tcl_Obj **)' function_pointer='true' name='tcl_GetEnsembleMappingDict' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Command, Tcl_Obj **)' function_pointer='true' name='tcl_GetEnsembleUnknownHandler' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Command, int *)' function_pointer='true' name='tcl_GetEnsembleFlags' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Command, Tcl_Namespace **)' function_pointer='true' name='tcl_GetEnsembleNamespace' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<arg declared_type='Tcl_Namespace**' type='^^{Tcl_Namespace}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_GetTimeProc *, Tcl_ScaleTimeProc *, ClientData)' function_pointer='true' name='tcl_SetTimeProc' type='^?'>
<arg declared_type='Tcl_GetTimeProc*' function_pointer='true' type='^?'>
<arg declared_type='Tcl_Time*' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='Tcl_ScaleTimeProc*' function_pointer='true' type='^?'>
<arg declared_type='Tcl_Time*' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_GetTimeProc **, Tcl_ScaleTimeProc **, ClientData *)' function_pointer='true' name='tcl_QueryTimeProc' type='^?'>
<arg declared_type='Tcl_GetTimeProc**' type='^^?'/>
<arg declared_type='Tcl_ScaleTimeProc**' type='^^?'/>
<arg declared_type='ClientData*' type='^^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_DriverThreadActionProc *(*)( Tcl_ChannelType *)' function_pointer='true' name='tcl_ChannelThreadActionProc' type='^?'>
<arg const='true' declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverThreadActionProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</retval>
</field>
<field declared_type='Tcl_Obj *(*)(mp_int *)' function_pointer='true' name='tcl_NewBignumObj' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_Obj *(*)(mp_int *, char *, int)' function_pointer='true' name='tcl_DbNewBignumObj' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, mp_int *)' function_pointer='true' name='tcl_SetBignumObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, mp_int *)' function_pointer='true' name='tcl_GetBignumFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, mp_int *)' function_pointer='true' name='tcl_TakeBignumFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Channel, Tcl_WideInt)' function_pointer='true' name='tcl_TruncateChannel' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_WideInt' type='q'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_DriverTruncateProc *(*)( Tcl_ChannelType *)' function_pointer='true' name='tcl_ChannelTruncateProc' type='^?'>
<arg const='true' declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverTruncateProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_WideInt' type='q'/>
<retval declared_type='int' type='i'/>
</retval>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tcl_Obj *)' function_pointer='true' name='tcl_SetChannelErrorInterp' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tcl_Obj **)' function_pointer='true' name='tcl_GetChannelErrorInterp' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Channel, Tcl_Obj *)' function_pointer='true' name='tcl_SetChannelError' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Channel, Tcl_Obj **)' function_pointer='true' name='tcl_GetChannelError' type='^?'>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, double, mp_int *)' function_pointer='true' name='tcl_InitBignumFromDouble' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='double' type='d'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Interp *, Tcl_Namespace *)' function_pointer='true' name='tcl_GetNamespaceUnknownHandler' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Namespace *, Tcl_Obj *)' function_pointer='true' name='tcl_SetNamespaceUnknownHandler' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, Tcl_Encoding *)' function_pointer='true' name='tcl_GetEncodingFromObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Encoding*' type='^^{Tcl_Encoding_}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Obj *(*)(void)' function_pointer='true' name='tcl_GetEncodingSearchPath' type='^?'>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='int (*)(Tcl_Obj *)' function_pointer='true' name='tcl_SetEncodingSearchPath' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field const='true' declared_type='char *(*)(Tcl_DString *)' function_pointer='true' name='tcl_GetEncodingNameFromEnvironment' type='^?'>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval const='true' declared_type='char*' type='*'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, char *, int, Tcl_Obj * *, ClientData *)' function_pointer='true' name='tcl_PkgRequireProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<arg declared_type='ClientData*' type='^^v'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(Tcl_Interp *, Tcl_Obj *)' function_pointer='true' name='tcl_AppendObjToErrorInfo' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, char *, int, int, char *)' function_pointer='true' name='tcl_AppendLimitedToObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Obj *(*)(Tcl_Interp *, char *, int, Tcl_Obj * *)' function_pointer='true' name='tcl_Format' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='int (*)(Tcl_Interp *, Tcl_Obj *, char *, int, Tcl_Obj * *)' function_pointer='true' name='tcl_AppendFormatToObj' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_Obj *(*)( char *, ...)' function_pointer='true' name='tcl_ObjPrintf' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='void (*)(Tcl_Obj *, char *, ...)' function_pointer='true' name='tcl_AppendPrintfToObj' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='TclTomMathStubs' type='{TclTomMathStubs=&quot;magic&quot;i&quot;hooks&quot;^{TclTomMathStubHooks}&quot;tclBN_epoch&quot;^?&quot;tclBN_revision&quot;^?&quot;tclBN_mp_add&quot;^?&quot;tclBN_mp_add_d&quot;^?&quot;tclBN_mp_and&quot;^?&quot;tclBN_mp_clamp&quot;^?&quot;tclBN_mp_clear&quot;^?&quot;tclBN_mp_clear_multi&quot;^?&quot;tclBN_mp_cmp&quot;^?&quot;tclBN_mp_cmp_d&quot;^?&quot;tclBN_mp_cmp_mag&quot;^?&quot;tclBN_mp_copy&quot;^?&quot;tclBN_mp_count_bits&quot;^?&quot;tclBN_mp_div&quot;^?&quot;tclBN_mp_div_d&quot;^?&quot;tclBN_mp_div_2&quot;^?&quot;tclBN_mp_div_2d&quot;^?&quot;tclBN_mp_div_3&quot;^?&quot;tclBN_mp_exch&quot;^?&quot;tclBN_mp_expt_d&quot;^?&quot;tclBN_mp_grow&quot;^?&quot;tclBN_mp_init&quot;^?&quot;tclBN_mp_init_copy&quot;^?&quot;tclBN_mp_init_multi&quot;^?&quot;tclBN_mp_init_set&quot;^?&quot;tclBN_mp_init_size&quot;^?&quot;tclBN_mp_lshd&quot;^?&quot;tclBN_mp_mod&quot;^?&quot;tclBN_mp_mod_2d&quot;^?&quot;tclBN_mp_mul&quot;^?&quot;tclBN_mp_mul_d&quot;^?&quot;tclBN_mp_mul_2&quot;^?&quot;tclBN_mp_mul_2d&quot;^?&quot;tclBN_mp_neg&quot;^?&quot;tclBN_mp_or&quot;^?&quot;tclBN_mp_radix_size&quot;^?&quot;tclBN_mp_read_radix&quot;^?&quot;tclBN_mp_rshd&quot;^?&quot;tclBN_mp_shrink&quot;^?&quot;tclBN_mp_set&quot;^?&quot;tclBN_mp_sqr&quot;^?&quot;tclBN_mp_sqrt&quot;^?&quot;tclBN_mp_sub&quot;^?&quot;tclBN_mp_sub_d&quot;^?&quot;tclBN_mp_to_unsigned_bin&quot;^?&quot;tclBN_mp_to_unsigned_bin_n&quot;^?&quot;tclBN_mp_toradix_n&quot;^?&quot;tclBN_mp_unsigned_bin_size&quot;^?&quot;tclBN_mp_xor&quot;^?&quot;tclBN_mp_zero&quot;^?&quot;tclBN_reverse&quot;^?&quot;tclBN_fast_s_mp_mul_digs&quot;^?&quot;tclBN_fast_s_mp_sqr&quot;^?&quot;tclBN_mp_karatsuba_mul&quot;^?&quot;tclBN_mp_karatsuba_sqr&quot;^?&quot;tclBN_mp_toom_mul&quot;^?&quot;tclBN_mp_toom_sqr&quot;^?&quot;tclBN_s_mp_add&quot;^?&quot;tclBN_s_mp_mul_digs&quot;^?&quot;tclBN_s_mp_sqr&quot;^?&quot;tclBN_s_mp_sub&quot;^?}'>
<field declared_type='int' name='magic' type='i'/>
<field declared_type='struct TclTomMathStubHooks*' name='hooks' type='^{TclTomMathStubHooks=}'/>
<field declared_type='int (*)(void)' function_pointer='true' name='tclBN_epoch' type='^?'>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(void)' function_pointer='true' name='tclBN_revision' type='^?'>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_add' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_digit, mp_int *)' function_pointer='true' name='tclBN_mp_add_d' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_digit' type='I'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_and' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(mp_int *)' function_pointer='true' name='tclBN_mp_clamp' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(mp_int *)' function_pointer='true' name='tclBN_mp_clear' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(mp_int *, ...)' function_pointer='true' name='tclBN_mp_clear_multi' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_cmp' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_digit)' function_pointer='true' name='tclBN_mp_cmp_d' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_digit' type='I'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_cmp_mag' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_copy' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *)' function_pointer='true' name='tclBN_mp_count_bits' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *, mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_div' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_digit, mp_int *, mp_digit *)' function_pointer='true' name='tclBN_mp_div_d' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_digit' type='I'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_digit*' type='^I'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_div_2' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, int, mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_div_2d' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *, mp_digit *)' function_pointer='true' name='tclBN_mp_div_3' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_digit*' type='^I'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_exch' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(mp_int *, mp_digit, mp_int *)' function_pointer='true' name='tclBN_mp_expt_d' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_digit' type='I'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, int)' function_pointer='true' name='tclBN_mp_grow' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *)' function_pointer='true' name='tclBN_mp_init' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_init_copy' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, ...)' function_pointer='true' name='tclBN_mp_init_multi' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_digit)' function_pointer='true' name='tclBN_mp_init_set' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_digit' type='I'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, int)' function_pointer='true' name='tclBN_mp_init_size' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, int)' function_pointer='true' name='tclBN_mp_lshd' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_mod' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, int, mp_int *)' function_pointer='true' name='tclBN_mp_mod_2d' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_mul' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_digit, mp_int *)' function_pointer='true' name='tclBN_mp_mul_d' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_digit' type='I'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_mul_2' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, int, mp_int *)' function_pointer='true' name='tclBN_mp_mul_2d' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_neg' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_or' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, int, int *)' function_pointer='true' name='tclBN_mp_radix_size' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, char *, int)' function_pointer='true' name='tclBN_mp_read_radix' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(mp_int *, int)' function_pointer='true' name='tclBN_mp_rshd' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(mp_int *)' function_pointer='true' name='tclBN_mp_shrink' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(mp_int *, mp_digit)' function_pointer='true' name='tclBN_mp_set' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_digit' type='I'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_sqr' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_sqrt' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_sub' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_digit, mp_int *)' function_pointer='true' name='tclBN_mp_sub_d' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_digit' type='I'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, unsigned char *)' function_pointer='true' name='tclBN_mp_to_unsigned_bin' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='unsigned char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, unsigned char *, unsigned long *)' function_pointer='true' name='tclBN_mp_to_unsigned_bin_n' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='unsigned char*' type='*'/>
<arg declared_type='unsigned long*' type='^L' type64='^Q'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, char *, int, int)' function_pointer='true' name='tclBN_mp_toradix_n' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *)' function_pointer='true' name='tclBN_mp_unsigned_bin_size' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_xor' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='void (*)(mp_int *)' function_pointer='true' name='tclBN_mp_zero' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='void (*)(unsigned char *, int)' function_pointer='true' name='tclBN_reverse' type='^?'>
<arg declared_type='unsigned char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *, mp_int *, int)' function_pointer='true' name='tclBN_fast_s_mp_mul_digs' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *)' function_pointer='true' name='tclBN_fast_s_mp_sqr' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_karatsuba_mul' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_karatsuba_sqr' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_toom_mul' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *)' function_pointer='true' name='tclBN_mp_toom_sqr' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *, mp_int *)' function_pointer='true' name='tclBN_s_mp_add' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *, mp_int *, int)' function_pointer='true' name='tclBN_s_mp_mul_digs' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *)' function_pointer='true' name='tclBN_s_mp_sqr' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='int (*)(mp_int *, mp_int *, mp_int *)' function_pointer='true' name='tclBN_s_mp_sub' type='^?'>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</field>
</struct>
<struct name='TclVarHashTable' type='{TclVarHashTable=&quot;table&quot;{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}&quot;nsPtr&quot;^{Namespace}}'>
<field declared_type='Tcl_HashTable' name='table' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'/>
<field declared_type='struct Namespace*' name='nsPtr' type='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}l^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}' type64='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}q^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}'/>
</struct>
<struct name='Tcl_CallFrame' type='{Tcl_CallFrame=&quot;nsPtr&quot;^{Tcl_Namespace}&quot;dummy1&quot;i&quot;dummy2&quot;i&quot;dummy3&quot;^v&quot;dummy4&quot;^v&quot;dummy5&quot;^v&quot;dummy6&quot;i&quot;dummy7&quot;^v&quot;dummy8&quot;^v&quot;dummy9&quot;i&quot;dummy10&quot;^v&quot;dummy11&quot;^v&quot;dummy12&quot;^v&quot;dummy13&quot;^v}'>
<field declared_type='Tcl_Namespace*' name='nsPtr' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<field declared_type='int' name='dummy1' type='i'/>
<field declared_type='int' name='dummy2' type='i'/>
<field declared_type='void*' name='dummy3' type='^v'/>
<field declared_type='void*' name='dummy4' type='^v'/>
<field declared_type='void*' name='dummy5' type='^v'/>
<field declared_type='int' name='dummy6' type='i'/>
<field declared_type='void*' name='dummy7' type='^v'/>
<field declared_type='void*' name='dummy8' type='^v'/>
<field declared_type='int' name='dummy9' type='i'/>
<field declared_type='void*' name='dummy10' type='^v'/>
<field declared_type='void*' name='dummy11' type='^v'/>
<field declared_type='void*' name='dummy12' type='^v'/>
<field declared_type='void*' name='dummy13' type='^v'/>
</struct>
<struct name='Tcl_ChannelType' type='{Tcl_ChannelType=&quot;typeName&quot;*&quot;version&quot;^{Tcl_ChannelTypeVersion_}&quot;closeProc&quot;^?&quot;inputProc&quot;^?&quot;outputProc&quot;^?&quot;seekProc&quot;^?&quot;setOptionProc&quot;^?&quot;getOptionProc&quot;^?&quot;watchProc&quot;^?&quot;getHandleProc&quot;^?&quot;close2Proc&quot;^?&quot;blockModeProc&quot;^?&quot;flushProc&quot;^?&quot;handlerProc&quot;^?&quot;wideSeekProc&quot;^?&quot;threadActionProc&quot;^?&quot;truncateProc&quot;^?}'>
<field declared_type='char*' name='typeName' type='*'/>
<field declared_type='Tcl_ChannelTypeVersion' name='version' type='^{Tcl_ChannelTypeVersion_=}'/>
<field declared_type='Tcl_DriverCloseProc*' function_pointer='true' name='closeProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_DriverInputProc*' function_pointer='true' name='inputProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_DriverOutputProc*' function_pointer='true' name='outputProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_DriverSeekProc*' function_pointer='true' name='seekProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='long' type='l' type64='q'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_DriverSetOptionProc*' function_pointer='true' name='setOptionProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_DriverGetOptionProc*' function_pointer='true' name='getOptionProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_DriverWatchProc*' function_pointer='true' name='watchProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_DriverGetHandleProc*' function_pointer='true' name='getHandleProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<arg declared_type='ClientData*' type='^^v'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_DriverClose2Proc*' function_pointer='true' name='close2Proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_DriverBlockModeProc*' function_pointer='true' name='blockModeProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_DriverFlushProc*' function_pointer='true' name='flushProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_DriverHandlerProc*' function_pointer='true' name='handlerProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_DriverWideSeekProc*' function_pointer='true' name='wideSeekProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_WideInt' type='q'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='Tcl_WideInt' type='q'/>
</field>
<field declared_type='Tcl_DriverThreadActionProc*' function_pointer='true' name='threadActionProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_DriverTruncateProc*' function_pointer='true' name='truncateProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_WideInt' type='q'/>
<retval declared_type='int' type='i'/>
</field>
</struct>
<struct name='Tcl_CmdInfo' type='{Tcl_CmdInfo=&quot;isNativeObjectProc&quot;i&quot;objProc&quot;^?&quot;objClientData&quot;^v&quot;proc&quot;^?&quot;clientData&quot;^v&quot;deleteProc&quot;^?&quot;deleteData&quot;^v&quot;namespacePtr&quot;^{Tcl_Namespace}}'>
<field declared_type='int' name='isNativeObjectProc' type='i'/>
<field declared_type='Tcl_ObjCmdProc*' function_pointer='true' name='objProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='struct Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='ClientData' name='objClientData' type='^v'/>
<field declared_type='Tcl_CmdProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='ClientData' name='clientData' type='^v'/>
<field declared_type='Tcl_CmdDeleteProc*' function_pointer='true' name='deleteProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='ClientData' name='deleteData' type='^v'/>
<field declared_type='Tcl_Namespace*' name='namespacePtr' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
</struct>
<struct name='Tcl_Config' type='{Tcl_Config=&quot;key&quot;*&quot;value&quot;*}'>
<field const='true' declared_type='char*' name='key' type='*'/>
<field const='true' declared_type='char*' name='value' type='*'/>
</struct>
<struct name='Tcl_DString' type='{Tcl_DString=&quot;string&quot;*&quot;length&quot;i&quot;spaceAvl&quot;i&quot;staticSpace&quot;[200c]}'>
<field declared_type='char*' name='string' type='*'/>
<field declared_type='int' name='length' type='i'/>
<field declared_type='int' name='spaceAvl' type='i'/>
<field declared_type='char*' name='staticSpace' type='[200c]'/>
</struct>
<struct name='Tcl_DictSearch' type='{_Tcl_DictSearch=&quot;next&quot;^v&quot;epoch&quot;i&quot;dictionaryPtr&quot;^{Tcl_Dict_}}'>
<field declared_type='void*' name='next' type='^v'/>
<field declared_type='int' name='epoch' type='i'/>
<field declared_type='Tcl_Dict' name='dictionaryPtr' type='^{Tcl_Dict_=}'/>
</struct>
<struct name='Tcl_DirEntry' type='{dirent=&quot;d_ino&quot;Q&quot;d_seekoff&quot;Q&quot;d_reclen&quot;S&quot;d_namlen&quot;S&quot;d_type&quot;C&quot;d_name&quot;[1024c]}'>
<field declared_type='__uint64_t' name='d_ino' type='Q'/>
<field declared_type='__uint64_t' name='d_seekoff' type='Q'/>
<field declared_type='__uint16_t' name='d_reclen' type='S'/>
<field declared_type='__uint16_t' name='d_namlen' type='S'/>
<field declared_type='__uint8_t' name='d_type' type='C'/>
<field declared_type='char*' name='d_name' type='[1024c]'/>
</struct>
<struct name='Tcl_EncodingType' type='{Tcl_EncodingType=&quot;encodingName&quot;*&quot;toUtfProc&quot;^?&quot;fromUtfProc&quot;^?&quot;freeProc&quot;^?&quot;clientData&quot;^v&quot;nullSize&quot;i}'>
<field const='true' declared_type='char*' name='encodingName' type='*'/>
<field declared_type='Tcl_EncodingConvertProc*' function_pointer='true' name='toUtfProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_EncodingState*' type='^^{Tcl_EncodingState_}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_EncodingConvertProc*' function_pointer='true' name='fromUtfProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_EncodingState*' type='^^{Tcl_EncodingState_}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_EncodingFreeProc*' function_pointer='true' name='freeProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='ClientData' name='clientData' type='^v'/>
<field declared_type='int' name='nullSize' type='i'/>
</struct>
<struct name='Tcl_Event' type='{Tcl_Event=&quot;proc&quot;^?&quot;nextPtr&quot;^{Tcl_Event}}'>
<field declared_type='Tcl_EventProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='Tcl_Event*' type='^{Tcl_Event=^?^{Tcl_Event}}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='struct Tcl_Event*' name='nextPtr' type='^{Tcl_Event=^?^{Tcl_Event}}'/>
</struct>
<struct name='Tcl_Filesystem' type='{Tcl_Filesystem=&quot;typeName&quot;*&quot;structureLength&quot;i&quot;version&quot;^{Tcl_FSVersion_}&quot;pathInFilesystemProc&quot;^?&quot;dupInternalRepProc&quot;^?&quot;freeInternalRepProc&quot;^?&quot;internalToNormalizedProc&quot;^?&quot;createInternalRepProc&quot;^?&quot;normalizePathProc&quot;^?&quot;filesystemPathTypeProc&quot;^?&quot;filesystemSeparatorProc&quot;^?&quot;statProc&quot;^?&quot;accessProc&quot;^?&quot;openFileChannelProc&quot;^?&quot;matchInDirectoryProc&quot;^?&quot;utimeProc&quot;^?&quot;linkProc&quot;^?&quot;listVolumesProc&quot;^?&quot;fileAttrStringsProc&quot;^?&quot;fileAttrsGetProc&quot;^?&quot;fileAttrsSetProc&quot;^?&quot;createDirectoryProc&quot;^?&quot;removeDirectoryProc&quot;^?&quot;deleteFileProc&quot;^?&quot;copyFileProc&quot;^?&quot;renameFileProc&quot;^?&quot;copyDirectoryProc&quot;^?&quot;lstatProc&quot;^?&quot;loadFileProc&quot;^?&quot;getCwdProc&quot;^?&quot;chdirProc&quot;^?}'>
<field const='true' declared_type='char*' name='typeName' type='*'/>
<field declared_type='int' name='structureLength' type='i'/>
<field declared_type='Tcl_FSVersion' name='version' type='^{Tcl_FSVersion_=}'/>
<field declared_type='Tcl_FSPathInFilesystemProc*' function_pointer='true' name='pathInFilesystemProc' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='ClientData*' type='^^v'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_FSDupInternalRepProc*' function_pointer='true' name='dupInternalRepProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='ClientData' type='^v'/>
</field>
<field declared_type='Tcl_FSFreeInternalRepProc*' function_pointer='true' name='freeInternalRepProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_FSInternalToNormalizedProc*' function_pointer='true' name='internalToNormalizedProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_FSCreateInternalRepProc*' function_pointer='true' name='createInternalRepProc' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='ClientData' type='^v'/>
</field>
<field declared_type='Tcl_FSNormalizePathProc*' function_pointer='true' name='normalizePathProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_FSFilesystemPathTypeProc*' function_pointer='true' name='filesystemPathTypeProc' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_FSFilesystemSeparatorProc*' function_pointer='true' name='filesystemSeparatorProc' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_FSStatProc*' function_pointer='true' name='statProc' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_StatBuf*' type='^{stat=iSSQIIi{timespec=il}{timespec=il}{timespec=il}{timespec=il}qqiIIi[2q]}' type64='^{stat=iSSQIIi{timespec=qq}{timespec=qq}{timespec=qq}{timespec=qq}qqiIIi[2q]}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_FSAccessProc*' function_pointer='true' name='accessProc' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_FSOpenFileChannelProc*' function_pointer='true' name='openFileChannelProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</field>
<field declared_type='Tcl_FSMatchInDirectoryProc*' function_pointer='true' name='matchInDirectoryProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_GlobTypeData*' type='^{Tcl_GlobTypeData=ii^{Tcl_Obj}^{Tcl_Obj}}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_FSUtimeProc*' function_pointer='true' name='utimeProc' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='struct utimbuf*' type='^{utimbuf=ii}' type64='^{utimbuf=qq}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_FSLinkProc*' function_pointer='true' name='linkProc' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_FSListVolumesProc*' function_pointer='true' name='listVolumesProc' type='^?'>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_FSFileAttrStringsProc*' function_pointer='true' name='fileAttrStringsProc' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<retval const='true' declared_type='char**' type='^*'/>
</field>
<field declared_type='Tcl_FSFileAttrsGetProc*' function_pointer='true' name='fileAttrsGetProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_FSFileAttrsSetProc*' function_pointer='true' name='fileAttrsSetProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_FSCreateDirectoryProc*' function_pointer='true' name='createDirectoryProc' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_FSRemoveDirectoryProc*' function_pointer='true' name='removeDirectoryProc' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_FSDeleteFileProc*' function_pointer='true' name='deleteFileProc' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_FSCopyFileProc*' function_pointer='true' name='copyFileProc' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_FSRenameFileProc*' function_pointer='true' name='renameFileProc' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_FSCopyDirectoryProc*' function_pointer='true' name='copyDirectoryProc' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj**' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_FSLstatProc*' function_pointer='true' name='lstatProc' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_StatBuf*' type='^{stat=iSSQIIi{timespec=il}{timespec=il}{timespec=il}{timespec=il}qqiIIi[2q]}' type64='^{stat=iSSQIIi{timespec=qq}{timespec=qq}{timespec=qq}{timespec=qq}qqiIIi[2q]}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_FSLoadFileProc*' function_pointer='true' name='loadFileProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_LoadHandle*' type='^^{Tcl_LoadHandle_}'/>
<arg declared_type='Tcl_FSUnloadFileProc**' type='^^?'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_FSGetCwdProc*' function_pointer='true' name='getCwdProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</field>
<field declared_type='Tcl_FSChdirProc*' function_pointer='true' name='chdirProc' type='^?'>
<arg declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
</struct>
<struct name='Tcl_GlobTypeData' type='{Tcl_GlobTypeData=&quot;type&quot;i&quot;perm&quot;i&quot;macType&quot;^{Tcl_Obj}&quot;macCreator&quot;^{Tcl_Obj}}'>
<field declared_type='int' name='type' type='i'/>
<field declared_type='int' name='perm' type='i'/>
<field declared_type='Tcl_Obj*' name='macType' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<field declared_type='Tcl_Obj*' name='macCreator' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</struct>
<struct name='Tcl_HashEntry' type='{Tcl_HashEntry=&quot;nextPtr&quot;^{Tcl_HashEntry}&quot;tablePtr&quot;^{Tcl_HashTable}&quot;hash&quot;^v&quot;clientData&quot;^v&quot;key&quot;(?=&quot;oneWordValue&quot;*&quot;objPtr&quot;^{Tcl_Obj}&quot;words&quot;[1i]&quot;string&quot;[4c])}'>
<field declared_type='Tcl_HashEntry*' name='nextPtr' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
<field declared_type='Tcl_HashTable*' name='tablePtr' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<field declared_type='void*' name='hash' type='^v'/>
<field declared_type='ClientData' name='clientData' type='^v'/>
<field declared_type='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/System/Library/Frameworks/Tcl.framework/Headers/tcl.h:1121:5)' name='key' type='(?=&quot;oneWordValue&quot;*&quot;objPtr&quot;^{Tcl_Obj}&quot;words&quot;[1i]&quot;string&quot;[4c])'/>
</struct>
<struct name='Tcl_HashKeyType' type='{Tcl_HashKeyType=&quot;version&quot;i&quot;flags&quot;i&quot;hashKeyProc&quot;^?&quot;compareKeysProc&quot;^?&quot;allocEntryProc&quot;^?&quot;freeEntryProc&quot;^?}'>
<field declared_type='int' name='version' type='i'/>
<field declared_type='int' name='flags' type='i'/>
<field declared_type='Tcl_HashKeyProc*' function_pointer='true' name='hashKeyProc' type='^?'>
<arg declared_type='Tcl_HashTable*' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='unsigned int' type='I'/>
</field>
<field declared_type='Tcl_CompareHashKeysProc*' function_pointer='true' name='compareKeysProc' type='^?'>
<arg declared_type='void*' type='^v'/>
<arg declared_type='Tcl_HashEntry*' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_AllocHashEntryProc*' function_pointer='true' name='allocEntryProc' type='^?'>
<arg declared_type='Tcl_HashTable*' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<arg declared_type='void*' type='^v'/>
<retval declared_type='Tcl_HashEntry*' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
</field>
<field declared_type='Tcl_FreeHashEntryProc*' function_pointer='true' name='freeEntryProc' type='^?'>
<arg declared_type='Tcl_HashEntry*' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='Tcl_HashSearch' type='{Tcl_HashSearch=&quot;tablePtr&quot;^{Tcl_HashTable}&quot;nextIndex&quot;i&quot;nextEntryPtr&quot;^{Tcl_HashEntry}}'>
<field declared_type='Tcl_HashTable*' name='tablePtr' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<field declared_type='int' name='nextIndex' type='i'/>
<field declared_type='Tcl_HashEntry*' name='nextEntryPtr' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
</struct>
<struct name='Tcl_HashTable' type='{Tcl_HashTable=&quot;buckets&quot;^^{Tcl_HashEntry}&quot;staticBuckets&quot;[4^{Tcl_HashEntry}]&quot;numBuckets&quot;i&quot;numEntries&quot;i&quot;rebuildSize&quot;i&quot;downShift&quot;i&quot;mask&quot;i&quot;keyType&quot;i&quot;findProc&quot;^?&quot;createProc&quot;^?&quot;typePtr&quot;^{Tcl_HashKeyType}}'>
<field declared_type='Tcl_HashEntry**' name='buckets' type='^^{Tcl_HashEntry}'/>
<field declared_type='Tcl_HashEntry**' name='staticBuckets' type='[4^{Tcl_HashEntry}]'/>
<field declared_type='int' name='numBuckets' type='i'/>
<field declared_type='int' name='numEntries' type='i'/>
<field declared_type='int' name='rebuildSize' type='i'/>
<field declared_type='int' name='downShift' type='i'/>
<field declared_type='int' name='mask' type='i'/>
<field declared_type='int' name='keyType' type='i'/>
<field declared_type='Tcl_HashEntry *(*)(Tcl_HashTable *, char *)' function_pointer='true' name='findProc' type='^?'>
<arg declared_type='Tcl_HashTable*' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='Tcl_HashEntry*' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
</field>
<field declared_type='Tcl_HashEntry *(*)(Tcl_HashTable *, char *, int *)' function_pointer='true' name='createProc' type='^?'>
<arg declared_type='Tcl_HashTable*' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='Tcl_HashEntry*' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
</field>
<field declared_type='Tcl_HashKeyType*' name='typePtr' type='^{Tcl_HashKeyType=ii^?^?^?^?}'/>
</struct>
<struct name='Tcl_Interp' type='{Tcl_Interp=&quot;result&quot;*&quot;freeProc&quot;^?&quot;errorLine&quot;i}'>
<field declared_type='char*' name='result' type='*'/>
<field declared_type='void (*)(char *)' function_pointer='true' name='freeProc' type='^?'>
<arg declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='int' name='errorLine' type='i'/>
</struct>
<struct name='Tcl_Namespace' type='{Tcl_Namespace=&quot;name&quot;*&quot;fullName&quot;*&quot;clientData&quot;^v&quot;deleteProc&quot;^?&quot;parentPtr&quot;^{Tcl_Namespace}}'>
<field declared_type='char*' name='name' type='*'/>
<field declared_type='char*' name='fullName' type='*'/>
<field declared_type='ClientData' name='clientData' type='^v'/>
<field declared_type='Tcl_NamespaceDeleteProc*' function_pointer='true' name='deleteProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='struct Tcl_Namespace*' name='parentPtr' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
</struct>
<struct name='Tcl_NotifierProcs' type='{Tcl_NotifierProcs=&quot;setTimerProc&quot;^?&quot;waitForEventProc&quot;^?&quot;createFileHandlerProc&quot;^?&quot;deleteFileHandlerProc&quot;^?&quot;initNotifierProc&quot;^?&quot;finalizeNotifierProc&quot;^?&quot;alertNotifierProc&quot;^?&quot;serviceModeHookProc&quot;^?}'>
<field declared_type='Tcl_SetTimerProc*' function_pointer='true' name='setTimerProc' type='^?'>
<arg declared_type='Tcl_Time*' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_WaitForEventProc*' function_pointer='true' name='waitForEventProc' type='^?'>
<arg declared_type='Tcl_Time*' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_CreateFileHandlerProc*' function_pointer='true' name='createFileHandlerProc' type='^?'>
<arg declared_type='int' type='i'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_FileProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_DeleteFileHandlerProc*' function_pointer='true' name='deleteFileHandlerProc' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_InitNotifierProc*' function_pointer='true' name='initNotifierProc' type='^?'>
<retval declared_type='ClientData' type='^v'/>
</field>
<field declared_type='Tcl_FinalizeNotifierProc*' function_pointer='true' name='finalizeNotifierProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_AlertNotifierProc*' function_pointer='true' name='alertNotifierProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_ServiceModeHookProc*' function_pointer='true' name='serviceModeHookProc' type='^?'>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='Tcl_Obj' type='{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;l&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;L})}' type64='{Tcl_Obj=&quot;refCount&quot;i&quot;bytes&quot;*&quot;length&quot;i&quot;typePtr&quot;^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}&quot;internalRep&quot;(?=&quot;longValue&quot;q&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;Q})}'>
<field declared_type='int' name='refCount' type='i'/>
<field declared_type='char*' name='bytes' type='*'/>
<field declared_type='int' name='length' type='i'/>
<field declared_type='Tcl_ObjType*' name='typePtr' type='^{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}'/>
<field declared_type='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/System/Library/Frameworks/Tcl.framework/Headers/tcl.h:764:5)' name='internalRep' type='(?=&quot;longValue&quot;l&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;L})' type64='(?=&quot;longValue&quot;q&quot;doubleValue&quot;d&quot;otherValuePtr&quot;^v&quot;wideValue&quot;q&quot;twoPtrValue&quot;{?=&quot;ptr1&quot;^v&quot;ptr2&quot;^v}&quot;ptrAndLongRep&quot;{?=&quot;ptr&quot;^v&quot;value&quot;Q})'/>
</struct>
<struct name='Tcl_ObjType' type='{Tcl_ObjType=&quot;name&quot;*&quot;freeIntRepProc&quot;^?&quot;dupIntRepProc&quot;^?&quot;updateStringProc&quot;^?&quot;setFromAnyProc&quot;^?}'>
<field declared_type='char*' name='name' type='*'/>
<field declared_type='Tcl_FreeInternalRepProc*' function_pointer='true' name='freeIntRepProc' type='^?'>
<arg declared_type='struct Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_DupInternalRepProc*' function_pointer='true' name='dupIntRepProc' type='^?'>
<arg declared_type='struct Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='struct Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_UpdateStringProc*' function_pointer='true' name='updateStringProc' type='^?'>
<arg declared_type='struct Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_SetFromAnyProc*' function_pointer='true' name='setFromAnyProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='struct Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</field>
</struct>
<struct name='Tcl_OldStat_' type='{stat=&quot;st_dev&quot;i&quot;st_mode&quot;S&quot;st_nlink&quot;S&quot;st_ino&quot;Q&quot;st_uid&quot;I&quot;st_gid&quot;I&quot;st_rdev&quot;i&quot;st_atimespec&quot;{timespec=&quot;tv_sec&quot;i&quot;tv_nsec&quot;l}&quot;st_mtimespec&quot;{timespec=&quot;tv_sec&quot;i&quot;tv_nsec&quot;l}&quot;st_ctimespec&quot;{timespec=&quot;tv_sec&quot;i&quot;tv_nsec&quot;l}&quot;st_birthtimespec&quot;{timespec=&quot;tv_sec&quot;i&quot;tv_nsec&quot;l}&quot;st_size&quot;q&quot;st_blocks&quot;q&quot;st_blksize&quot;i&quot;st_flags&quot;I&quot;st_gen&quot;I&quot;st_lspare&quot;i&quot;st_qspare&quot;[2q]}' type64='{stat=&quot;st_dev&quot;i&quot;st_mode&quot;S&quot;st_nlink&quot;S&quot;st_ino&quot;Q&quot;st_uid&quot;I&quot;st_gid&quot;I&quot;st_rdev&quot;i&quot;st_atimespec&quot;{timespec=&quot;tv_sec&quot;q&quot;tv_nsec&quot;q}&quot;st_mtimespec&quot;{timespec=&quot;tv_sec&quot;q&quot;tv_nsec&quot;q}&quot;st_ctimespec&quot;{timespec=&quot;tv_sec&quot;q&quot;tv_nsec&quot;q}&quot;st_birthtimespec&quot;{timespec=&quot;tv_sec&quot;q&quot;tv_nsec&quot;q}&quot;st_size&quot;q&quot;st_blocks&quot;q&quot;st_blksize&quot;i&quot;st_flags&quot;I&quot;st_gen&quot;I&quot;st_lspare&quot;i&quot;st_qspare&quot;[2q]}'>
<field declared_type='dev_t' name='st_dev' type='i'/>
<field declared_type='mode_t' name='st_mode' type='S'/>
<field declared_type='nlink_t' name='st_nlink' type='S'/>
<field declared_type='__darwin_ino64_t' name='st_ino' type='Q'/>
<field declared_type='uid_t' name='st_uid' type='I'/>
<field declared_type='gid_t' name='st_gid' type='I'/>
<field declared_type='dev_t' name='st_rdev' type='i'/>
<field declared_type='struct timespec' name='st_atimespec' type='{timespec=&quot;tv_sec&quot;i&quot;tv_nsec&quot;l}' type64='{timespec=&quot;tv_sec&quot;q&quot;tv_nsec&quot;q}'/>
<field declared_type='struct timespec' name='st_mtimespec' type='{timespec=&quot;tv_sec&quot;i&quot;tv_nsec&quot;l}' type64='{timespec=&quot;tv_sec&quot;q&quot;tv_nsec&quot;q}'/>
<field declared_type='struct timespec' name='st_ctimespec' type='{timespec=&quot;tv_sec&quot;i&quot;tv_nsec&quot;l}' type64='{timespec=&quot;tv_sec&quot;q&quot;tv_nsec&quot;q}'/>
<field declared_type='struct timespec' name='st_birthtimespec' type='{timespec=&quot;tv_sec&quot;i&quot;tv_nsec&quot;l}' type64='{timespec=&quot;tv_sec&quot;q&quot;tv_nsec&quot;q}'/>
<field declared_type='off_t' name='st_size' type='q'/>
<field declared_type='blkcnt_t' name='st_blocks' type='q'/>
<field declared_type='blksize_t' name='st_blksize' type='i'/>
<field declared_type='__uint32_t' name='st_flags' type='I'/>
<field declared_type='__uint32_t' name='st_gen' type='I'/>
<field declared_type='__int32_t' name='st_lspare' type='i'/>
<field declared_type='__int64_t*' name='st_qspare' type='[2q]'/>
</struct>
<struct name='Tcl_Parse' type='{Tcl_Parse=&quot;commentStart&quot;*&quot;commentSize&quot;i&quot;commandStart&quot;*&quot;commandSize&quot;i&quot;numWords&quot;i&quot;tokenPtr&quot;^{Tcl_Token}&quot;numTokens&quot;i&quot;tokensAvailable&quot;i&quot;errorType&quot;i&quot;string&quot;*&quot;end&quot;*&quot;interp&quot;^{Tcl_Interp}&quot;term&quot;*&quot;incomplete&quot;i&quot;staticTokens&quot;[20{Tcl_Token=&quot;type&quot;i&quot;start&quot;*&quot;size&quot;i&quot;numComponents&quot;i}]}'>
<field const='true' declared_type='char*' name='commentStart' type='*'/>
<field declared_type='int' name='commentSize' type='i'/>
<field const='true' declared_type='char*' name='commandStart' type='*'/>
<field declared_type='int' name='commandSize' type='i'/>
<field declared_type='int' name='numWords' type='i'/>
<field declared_type='Tcl_Token*' name='tokenPtr' type='^{Tcl_Token=i*ii}'/>
<field declared_type='int' name='numTokens' type='i'/>
<field declared_type='int' name='tokensAvailable' type='i'/>
<field declared_type='int' name='errorType' type='i'/>
<field const='true' declared_type='char*' name='string' type='*'/>
<field const='true' declared_type='char*' name='end' type='*'/>
<field declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<field const='true' declared_type='char*' name='term' type='*'/>
<field declared_type='int' name='incomplete' type='i'/>
<field declared_type='Tcl_Token*' name='staticTokens' type='[20{Tcl_Token=&quot;type&quot;i&quot;start&quot;*&quot;size&quot;i&quot;numComponents&quot;i}]'/>
</struct>
<struct name='Tcl_RegExpIndices' type='{Tcl_RegExpIndices=&quot;start&quot;l&quot;end&quot;l}' type64='{Tcl_RegExpIndices=&quot;start&quot;q&quot;end&quot;q}'>
<field declared_type='long' name='start' type='l' type64='q'/>
<field declared_type='long' name='end' type='l' type64='q'/>
</struct>
<struct name='Tcl_RegExpInfo' type='{Tcl_RegExpInfo=&quot;nsubs&quot;i&quot;matches&quot;^{Tcl_RegExpIndices}&quot;extendStart&quot;l&quot;reserved&quot;l}' type64='{Tcl_RegExpInfo=&quot;nsubs&quot;i&quot;matches&quot;^{Tcl_RegExpIndices}&quot;extendStart&quot;q&quot;reserved&quot;q}'>
<field declared_type='int' name='nsubs' type='i'/>
<field declared_type='Tcl_RegExpIndices*' name='matches' type='^{Tcl_RegExpIndices=ll}' type64='^{Tcl_RegExpIndices=qq}'/>
<field declared_type='long' name='extendStart' type='l' type64='q'/>
<field declared_type='long' name='reserved' type='l' type64='q'/>
</struct>
<struct name='Tcl_ResolvedVarInfo' type='{Tcl_ResolvedVarInfo=&quot;fetchProc&quot;^?&quot;deleteProc&quot;^?}'>
<field declared_type='Tcl_ResolveRuntimeVarProc*' function_pointer='true' name='fetchProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='struct Tcl_ResolvedVarInfo*' type='^{Tcl_ResolvedVarInfo=^?^?}'/>
<retval declared_type='Tcl_Var' type='^{Tcl_Var_=}'/>
</field>
<field declared_type='Tcl_ResolveVarDeleteProc*' function_pointer='true' name='deleteProc' type='^?'>
<arg declared_type='struct Tcl_ResolvedVarInfo*' type='^{Tcl_ResolvedVarInfo=^?^?}'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='Tcl_ResolverInfo' type='{Tcl_ResolverInfo=&quot;cmdResProc&quot;^?&quot;varResProc&quot;^?&quot;compiledVarResProc&quot;^?}'>
<field declared_type='Tcl_ResolveCmdProc*' function_pointer='true' name='cmdResProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Command*' type='^^{Tcl_Command_}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_ResolveVarProc*' function_pointer='true' name='varResProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Var*' type='^^{Tcl_Var_}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='Tcl_ResolveCompiledVarProc*' function_pointer='true' name='compiledVarResProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='Tcl_ResolvedVarInfo**' type='^^{Tcl_ResolvedVarInfo}'/>
<retval declared_type='int' type='i'/>
</field>
</struct>
<struct name='Tcl_SavedResult' type='{Tcl_SavedResult=&quot;result&quot;*&quot;freeProc&quot;^?&quot;objResultPtr&quot;^{Tcl_Obj}&quot;appendResult&quot;*&quot;appendAvl&quot;i&quot;appendUsed&quot;i&quot;resultSpace&quot;[201c]}'>
<field declared_type='char*' name='result' type='*'/>
<field declared_type='Tcl_FreeProc*' function_pointer='true' name='freeProc' type='^?'>
<arg declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</field>
<field declared_type='Tcl_Obj*' name='objResultPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<field declared_type='char*' name='appendResult' type='*'/>
<field declared_type='int' name='appendAvl' type='i'/>
<field declared_type='int' name='appendUsed' type='i'/>
<field declared_type='char*' name='resultSpace' type='[201c]'/>
</struct>
<struct name='Tcl_StatBuf' type='{stat=&quot;st_dev&quot;i&quot;st_mode&quot;S&quot;st_nlink&quot;S&quot;st_ino&quot;Q&quot;st_uid&quot;I&quot;st_gid&quot;I&quot;st_rdev&quot;i&quot;st_atimespec&quot;{timespec=&quot;tv_sec&quot;i&quot;tv_nsec&quot;l}&quot;st_mtimespec&quot;{timespec=&quot;tv_sec&quot;i&quot;tv_nsec&quot;l}&quot;st_ctimespec&quot;{timespec=&quot;tv_sec&quot;i&quot;tv_nsec&quot;l}&quot;st_birthtimespec&quot;{timespec=&quot;tv_sec&quot;i&quot;tv_nsec&quot;l}&quot;st_size&quot;q&quot;st_blocks&quot;q&quot;st_blksize&quot;i&quot;st_flags&quot;I&quot;st_gen&quot;I&quot;st_lspare&quot;i&quot;st_qspare&quot;[2q]}' type64='{stat=&quot;st_dev&quot;i&quot;st_mode&quot;S&quot;st_nlink&quot;S&quot;st_ino&quot;Q&quot;st_uid&quot;I&quot;st_gid&quot;I&quot;st_rdev&quot;i&quot;st_atimespec&quot;{timespec=&quot;tv_sec&quot;q&quot;tv_nsec&quot;q}&quot;st_mtimespec&quot;{timespec=&quot;tv_sec&quot;q&quot;tv_nsec&quot;q}&quot;st_ctimespec&quot;{timespec=&quot;tv_sec&quot;q&quot;tv_nsec&quot;q}&quot;st_birthtimespec&quot;{timespec=&quot;tv_sec&quot;q&quot;tv_nsec&quot;q}&quot;st_size&quot;q&quot;st_blocks&quot;q&quot;st_blksize&quot;i&quot;st_flags&quot;I&quot;st_gen&quot;I&quot;st_lspare&quot;i&quot;st_qspare&quot;[2q]}'>
<field declared_type='dev_t' name='st_dev' type='i'/>
<field declared_type='mode_t' name='st_mode' type='S'/>
<field declared_type='nlink_t' name='st_nlink' type='S'/>
<field declared_type='__darwin_ino64_t' name='st_ino' type='Q'/>
<field declared_type='uid_t' name='st_uid' type='I'/>
<field declared_type='gid_t' name='st_gid' type='I'/>
<field declared_type='dev_t' name='st_rdev' type='i'/>
<field declared_type='struct timespec' name='st_atimespec' type='{timespec=&quot;tv_sec&quot;i&quot;tv_nsec&quot;l}' type64='{timespec=&quot;tv_sec&quot;q&quot;tv_nsec&quot;q}'/>
<field declared_type='struct timespec' name='st_mtimespec' type='{timespec=&quot;tv_sec&quot;i&quot;tv_nsec&quot;l}' type64='{timespec=&quot;tv_sec&quot;q&quot;tv_nsec&quot;q}'/>
<field declared_type='struct timespec' name='st_ctimespec' type='{timespec=&quot;tv_sec&quot;i&quot;tv_nsec&quot;l}' type64='{timespec=&quot;tv_sec&quot;q&quot;tv_nsec&quot;q}'/>
<field declared_type='struct timespec' name='st_birthtimespec' type='{timespec=&quot;tv_sec&quot;i&quot;tv_nsec&quot;l}' type64='{timespec=&quot;tv_sec&quot;q&quot;tv_nsec&quot;q}'/>
<field declared_type='off_t' name='st_size' type='q'/>
<field declared_type='blkcnt_t' name='st_blocks' type='q'/>
<field declared_type='blksize_t' name='st_blksize' type='i'/>
<field declared_type='__uint32_t' name='st_flags' type='I'/>
<field declared_type='__uint32_t' name='st_gen' type='I'/>
<field declared_type='__int32_t' name='st_lspare' type='i'/>
<field declared_type='__int64_t*' name='st_qspare' type='[2q]'/>
</struct>
<struct name='Tcl_Time' type='{Tcl_Time=&quot;sec&quot;l&quot;usec&quot;l}' type64='{Tcl_Time=&quot;sec&quot;q&quot;usec&quot;q}'>
<field declared_type='long' name='sec' type='l' type64='q'/>
<field declared_type='long' name='usec' type='l' type64='q'/>
</struct>
<struct name='Tcl_Token' type='{Tcl_Token=&quot;type&quot;i&quot;start&quot;*&quot;size&quot;i&quot;numComponents&quot;i}'>
<field declared_type='int' name='type' type='i'/>
<field const='true' declared_type='char*' name='start' type='*'/>
<field declared_type='int' name='size' type='i'/>
<field declared_type='int' name='numComponents' type='i'/>
</struct>
<struct name='Tcl_Value' type='{Tcl_Value=&quot;type&quot;i&quot;intValue&quot;l&quot;doubleValue&quot;d&quot;wideValue&quot;q}' type64='{Tcl_Value=&quot;type&quot;i&quot;intValue&quot;q&quot;doubleValue&quot;d&quot;wideValue&quot;q}'>
<field declared_type='Tcl_ValueType' name='type' type='i'/>
<field declared_type='long' name='intValue' type='l' type64='q'/>
<field declared_type='double' name='doubleValue' type='d'/>
<field declared_type='Tcl_WideInt' name='wideValue' type='q'/>
</struct>
<struct name='Trace' type='{Trace=&quot;level&quot;i&quot;proc&quot;^?&quot;clientData&quot;^v&quot;nextPtr&quot;^{Trace}&quot;flags&quot;i&quot;delProc&quot;^?}'>
<field declared_type='int' name='level' type='i'/>
<field declared_type='Tcl_CmdObjTraceProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='struct Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</field>
<field declared_type='ClientData' name='clientData' type='^v'/>
<field declared_type='struct Trace*' name='nextPtr' type='^{Trace=i^?^v^{Trace}i^?}'/>
<field declared_type='int' name='flags' type='i'/>
<field declared_type='Tcl_CmdObjTraceDeleteProc*' function_pointer='true' name='delProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</field>
</struct>
<struct name='Var' type='{Var=&quot;flags&quot;i&quot;value&quot;(?=&quot;objPtr&quot;^{Tcl_Obj}&quot;tablePtr&quot;^{TclVarHashTable}&quot;linkPtr&quot;^{Var})}'>
<field declared_type='int' name='flags' type='i'/>
<field declared_type='union (anonymous union at /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/System/Library/Frameworks/Tcl.framework/Headers/tcl-private/tclInt.h:521:5)' name='value' type='(?=&quot;objPtr&quot;^{Tcl_Obj}&quot;tablePtr&quot;^{TclVarHashTable}&quot;linkPtr&quot;^{Var})'/>
</struct>
<struct name='VarInHash' type='{VarInHash=&quot;var&quot;{Var=&quot;flags&quot;i&quot;value&quot;(?=&quot;objPtr&quot;^{Tcl_Obj}&quot;tablePtr&quot;^{TclVarHashTable}&quot;linkPtr&quot;^{Var})}&quot;refCount&quot;i&quot;entry&quot;{Tcl_HashEntry=&quot;nextPtr&quot;^{Tcl_HashEntry}&quot;tablePtr&quot;^{Tcl_HashTable}&quot;hash&quot;^v&quot;clientData&quot;^v&quot;key&quot;(?=&quot;oneWordValue&quot;*&quot;objPtr&quot;^{Tcl_Obj}&quot;words&quot;[1i]&quot;string&quot;[4c])}}'>
<field declared_type='Var' name='var' type='{Var=&quot;flags&quot;i&quot;value&quot;(?=&quot;objPtr&quot;^{Tcl_Obj}&quot;tablePtr&quot;^{TclVarHashTable}&quot;linkPtr&quot;^{Var})}'/>
<field declared_type='int' name='refCount' type='i'/>
<field declared_type='Tcl_HashEntry' name='entry' type='{Tcl_HashEntry=&quot;nextPtr&quot;^{Tcl_HashEntry}&quot;tablePtr&quot;^{Tcl_HashTable}&quot;hash&quot;^v&quot;clientData&quot;^v&quot;key&quot;(?=&quot;oneWordValue&quot;*&quot;objPtr&quot;^{Tcl_Obj}&quot;words&quot;[1i]&quot;string&quot;[4c])}'/>
</struct>
<struct name='VarTrace' type='{VarTrace=&quot;traceProc&quot;^?&quot;clientData&quot;^v&quot;flags&quot;i&quot;nextPtr&quot;^{VarTrace}}'>
<field declared_type='Tcl_VarTraceProc*' function_pointer='true' name='traceProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</field>
<field declared_type='ClientData' name='clientData' type='^v'/>
<field declared_type='int' name='flags' type='i'/>
<field declared_type='struct VarTrace*' name='nextPtr' type='^{VarTrace=^?^vi^{VarTrace}}'/>
</struct>
<struct name='mp_int' type='{mp_int=&quot;used&quot;i&quot;alloc&quot;i&quot;sign&quot;i&quot;dp&quot;^I}'>
<field declared_type='int' name='used' type='i'/>
<field declared_type='int' name='alloc' type='i'/>
<field declared_type='int' name='sign' type='i'/>
<field declared_type='mp_digit*' name='dp' type='^I'/>
</struct>
<cftype name='ImportRef' type='{ImportRef=^{Command}^{ImportRef}}'/>
<cftype name='TclFile' type='^{TclFile_=}'/>
<cftype name='Tcl_AsyncHandler' type='^{Tcl_AsyncHandler_=}'/>
<cftype name='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<cftype name='Tcl_ChannelTypeVersion' type='^{Tcl_ChannelTypeVersion_=}'/>
<cftype name='Tcl_Command' type='^{Tcl_Command_=}'/>
<cftype name='Tcl_Condition' type='^{Tcl_Condition_=}'/>
<cftype name='Tcl_Dict' type='^{Tcl_Dict_=}'/>
<cftype name='Tcl_Encoding' type='^{Tcl_Encoding_=}'/>
<cftype name='Tcl_EncodingState' type='^{Tcl_EncodingState_=}'/>
<cftype name='Tcl_Ensemble' type='^{Tcl_Ensemble=}'/>
<cftype name='Tcl_FSVersion' type='^{Tcl_FSVersion_=}'/>
<cftype name='Tcl_InterpState' type='^{Tcl_InterpState_=}'/>
<cftype name='Tcl_LoadHandle' type='^{Tcl_LoadHandle_=}'/>
<cftype name='Tcl_Mutex' type='^{Tcl_Mutex_=}'/>
<cftype name='Tcl_Pid' type='^{Tcl_Pid_=}'/>
<cftype name='Tcl_RegExp' type='^{Tcl_RegExp_=}'/>
<cftype name='Tcl_ThreadDataKey' type='^{Tcl_ThreadDataKey_=}'/>
<cftype name='Tcl_ThreadId' type='^{Tcl_ThreadId_=}'/>
<cftype name='Tcl_TimerToken' type='^{Tcl_TimerToken_=}'/>
<cftype name='Tcl_Trace' type='^{Tcl_Trace_=}'/>
<cftype name='Tcl_Var' type='^{Tcl_Var_=}'/>
<constant declared_type='int' name='TclBNKaratsubaMulCutoff' type='i'/>
<constant declared_type='int' name='TclBNKaratsubaSqrCutoff' type='i'/>
<constant const='true' declared_type='char*' name='TclBNMpSRmap' type='*'/>
<constant declared_type='int' name='TclBNToomMulCutoff' type='i'/>
<constant declared_type='int' name='TclBNToomSqrCutoff' type='i'/>
<constant const='true' declared_type='mp_digit*' name='ltm_prime_tab' type='^I'/>
<constant declared_type='Tcl_HashKeyType' name='tclArrayHashKeyType' type='{Tcl_HashKeyType=ii^?^?^?^?}'/>
<constant declared_type='Tcl_ObjType' name='tclArraySearchType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='Tcl_ObjType' name='tclBignumType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='Tcl_ObjType' name='tclBooleanType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='Tcl_ObjType' name='tclByteArrayType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='Tcl_ObjType' name='tclByteCodeType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='Tcl_ObjType' name='tclDictType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='AuxDataType' name='tclDictUpdateInfoType' type='{AuxDataType=*^?^?^?}'/>
<constant declared_type='Tcl_ObjType' name='tclDoubleType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='char' name='tclEmptyString' type='c'/>
<constant declared_type='char*' name='tclEmptyStringRep' type='*'/>
<constant declared_type='Tcl_ObjType' name='tclEndOffsetType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='Tcl_ObjType' name='tclEnsembleCmdType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='int' name='tclFindExecutableSearchDone' type='i'/>
<constant declared_type='AuxDataType' name='tclForeachInfoType' type='{AuxDataType=*^?^?^?}'/>
<constant declared_type='Tcl_Obj*' name='tclFreeObjList' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<constant declared_type='InstructionDesc*' name='tclInstructionTable' type='^{InstructionDesc=*iii[2i]}'/>
<constant declared_type='TclIntPlatStubs*' name='tclIntPlatStubsPtr' type='^{TclIntPlatStubs=i^{TclIntPlatStubHooks}^?^?^?^?^?^v^?^?^?^?^?^?^?^?^?}'/>
<constant declared_type='TclIntStubs*' name='tclIntStubsPtr' type='^{TclIntStubs=}'/>
<constant declared_type='Tcl_ObjType' name='tclIntType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='AuxDataType' name='tclJumptableInfoType' type='{AuxDataType=*^?^?^?}'/>
<constant declared_type='Tcl_ObjType' name='tclListType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='char*' name='tclMemDumpFileName' type='*'/>
<constant declared_type='char*' name='tclNativeExecutableName' type='*'/>
<constant declared_type='Tcl_HashKeyType' name='tclObjHashKeyType' type='{Tcl_HashKeyType=ii^?^?^?^?}'/>
<constant declared_type='Tcl_HashKeyType' name='tclOneWordHashKeyType' type='{Tcl_HashKeyType=ii^?^?^?^?}'/>
<constant declared_type='Tcl_NotifierProcs' name='tclOriginalNotifier' type='{Tcl_NotifierProcs=^?^?^?^?^?^?^?^?}'/>
<constant declared_type='TclPlatStubs*' name='tclPlatStubsPtr' type='^{TclPlatStubs=i^{TclPlatStubHooks}}'/>
<constant declared_type='TclPlatformType' name='tclPlatform' type='i'/>
<constant declared_type='Tcl_ObjType' name='tclProcBodyType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='Tcl_ObjType' name='tclRegexpType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='Tcl_HashKeyType' name='tclStringHashKeyType' type='{Tcl_HashKeyType=ii^?^?^?^?}'/>
<constant declared_type='Tcl_ObjType' name='tclStringType' type='{Tcl_ObjType=*^?^?^?^?}'/>
<constant declared_type='TclStubs*' name='tclStubsPtr' type='^{TclStubs=i^{TclStubHooks}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^v^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^v^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<constant declared_type='ClientData' name='tclTimeClientData' type='^v'/>
<constant declared_type='TclTomMathStubs*' name='tclTomMathStubsPtr' type='^{TclTomMathStubs=i^{TclTomMathStubHooks}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<string_constant name='TCL_LL_MODIFIER' value='ll' value64='l'/>
<string_constant name='TCL_PATCH_LEVEL' value='8.5.9'/>
<string_constant name='TCL_VERSION' value='8.5'/>
<enum name='CATCH_EXCEPTION_RANGE' value='1'/>
<enum name='CLL_END' value='-1'/>
<enum name='CMD_HAS_EXEC_TRACES' value='4'/>
<enum name='CMD_IS_DELETED' value='1'/>
<enum name='CMD_TRACE_ACTIVE' value='2'/>
<enum name='COMPILEENV_INIT_AUX_DATA_SIZE' value='5'/>
<enum name='COMPILEENV_INIT_CMD_MAP_SIZE' value='40'/>
<enum name='COMPILEENV_INIT_CODE_BYTES' value='250'/>
<enum name='COMPILEENV_INIT_EXCEPT_RANGES' value='5'/>
<enum name='COMPILEENV_INIT_NUM_OBJECTS' value='60'/>
<enum name='DELETED' value='1'/>
<enum name='DICT_PATH_CREATE' value='5'/>
<enum name='DICT_PATH_EXISTS' value='2'/>
<enum name='DICT_PATH_READ' value='0'/>
<enum name='DICT_PATH_UPDATE' value='1'/>
<enum name='DIGIT_BIT' value='28'/>
<enum name='DONT_COMPILE_CMDS_INLINE' value='32'/>
<enum name='ENSEMBLE_COMPILE' value='4'/>
<enum name='ERR_ALREADY_LOGGED' value='4'/>
<enum name='ERR_LEGACY_COPY' value='2048'/>
<enum name='FRAME_IS_LAMBDA' value='2'/>
<enum name='FRAME_IS_PROC' value='1'/>
<enum name='INST_ADD' value='53'/>
<enum name='INST_APPEND_ARRAY1' value='84'/>
<enum name='INST_APPEND_ARRAY4' value='85'/>
<enum name='INST_APPEND_ARRAY_STK' value='86'/>
<enum name='INST_APPEND_SCALAR1' value='82'/>
<enum name='INST_APPEND_SCALAR4' value='83'/>
<enum name='INST_APPEND_STK' value='87'/>
<enum name='INST_BEGIN_CATCH4' value='69'/>
<enum name='INST_BITAND' value='44'/>
<enum name='INST_BITNOT' value='60'/>
<enum name='INST_BITOR' value='42'/>
<enum name='INST_BITXOR' value='43'/>
<enum name='INST_BREAK' value='65'/>
<enum name='INST_CALL_BUILTIN_FUNC1' value='62'/>
<enum name='INST_CALL_FUNC1' value='63'/>
<enum name='INST_CONCAT1' value='5'/>
<enum name='INST_CONTINUE' value='66'/>
<enum name='INST_DICT_APPEND' value='114'/>
<enum name='INST_DICT_DONE' value='118'/>
<enum name='INST_DICT_FIRST' value='116'/>
<enum name='INST_DICT_GET' value='110'/>
<enum name='INST_DICT_INCR_IMM' value='113'/>
<enum name='INST_DICT_LAPPEND' value='115'/>
<enum name='INST_DICT_NEXT' value='117'/>
<enum name='INST_DICT_SET' value='111'/>
<enum name='INST_DICT_UNSET' value='112'/>
<enum name='INST_DICT_UPDATE_END' value='120'/>
<enum name='INST_DICT_UPDATE_START' value='119'/>
<enum name='INST_DIV' value='56'/>
<enum name='INST_DONE' value='0'/>
<enum name='INST_DUP' value='4'/>
<enum name='INST_END_CATCH' value='70'/>
<enum name='INST_EQ' value='45'/>
<enum name='INST_EVAL_STK' value='8'/>
<enum name='INST_EXIST_ARRAY' value='129'/>
<enum name='INST_EXIST_ARRAY_STK' value='130'/>
<enum name='INST_EXIST_SCALAR' value='128'/>
<enum name='INST_EXIST_STK' value='131'/>
<enum name='INST_EXPAND_START' value='100'/>
<enum name='INST_EXPAND_STKTOP' value='101'/>
<enum name='INST_EXPON' value='99'/>
<enum name='INST_EXPR_STK' value='9'/>
<enum name='INST_FOREACH_START4' value='67'/>
<enum name='INST_FOREACH_STEP4' value='68'/>
<enum name='INST_GE' value='50'/>
<enum name='INST_GT' value='48'/>
<enum name='INST_INCR_ARRAY1' value='26'/>
<enum name='INST_INCR_ARRAY1_IMM' value='31'/>
<enum name='INST_INCR_ARRAY_STK' value='27'/>
<enum name='INST_INCR_ARRAY_STK_IMM' value='32'/>
<enum name='INST_INCR_SCALAR1' value='24'/>
<enum name='INST_INCR_SCALAR1_IMM' value='29'/>
<enum name='INST_INCR_SCALAR_STK' value='25'/>
<enum name='INST_INCR_SCALAR_STK_IMM' value='30'/>
<enum name='INST_INCR_STK' value='28'/>
<enum name='INST_INCR_STK_IMM' value='33'/>
<enum name='INST_INVOKE_EXPANDED' value='102'/>
<enum name='INST_INVOKE_STK1' value='6'/>
<enum name='INST_INVOKE_STK4' value='7'/>
<enum name='INST_JUMP1' value='34'/>
<enum name='INST_JUMP4' value='35'/>
<enum name='INST_JUMP_FALSE1' value='38'/>
<enum name='INST_JUMP_FALSE4' value='39'/>
<enum name='INST_JUMP_TABLE' value='121'/>
<enum name='INST_JUMP_TRUE1' value='36'/>
<enum name='INST_JUMP_TRUE4' value='37'/>
<enum name='INST_LAND' value='41'/>
<enum name='INST_LAPPEND_ARRAY1' value='90'/>
<enum name='INST_LAPPEND_ARRAY4' value='91'/>
<enum name='INST_LAPPEND_ARRAY_STK' value='92'/>
<enum name='INST_LAPPEND_SCALAR1' value='88'/>
<enum name='INST_LAPPEND_SCALAR4' value='89'/>
<enum name='INST_LAPPEND_STK' value='93'/>
<enum name='INST_LE' value='49'/>
<enum name='INST_LIST' value='79'/>
<enum name='INST_LIST_IN' value='106'/>
<enum name='INST_LIST_INDEX' value='80'/>
<enum name='INST_LIST_INDEX_IMM' value='103'/>
<enum name='INST_LIST_INDEX_MULTI' value='94'/>
<enum name='INST_LIST_LENGTH' value='81'/>
<enum name='INST_LIST_NOT_IN' value='107'/>
<enum name='INST_LIST_RANGE_IMM' value='104'/>
<enum name='INST_LNOT' value='61'/>
<enum name='INST_LOAD_ARRAY1' value='13'/>
<enum name='INST_LOAD_ARRAY4' value='14'/>
<enum name='INST_LOAD_ARRAY_STK' value='15'/>
<enum name='INST_LOAD_SCALAR1' value='10'/>
<enum name='INST_LOAD_SCALAR4' value='11'/>
<enum name='INST_LOAD_SCALAR_STK' value='12'/>
<enum name='INST_LOAD_STK' value='16'/>
<enum name='INST_LOR' value='40'/>
<enum name='INST_LSET_FLAT' value='97'/>
<enum name='INST_LSET_LIST' value='96'/>
<enum name='INST_LSHIFT' value='51'/>
<enum name='INST_LT' value='47'/>
<enum name='INST_MOD' value='57'/>
<enum name='INST_MULT' value='55'/>
<enum name='INST_NEQ' value='46'/>
<enum name='INST_NSUPVAR' value='123'/>
<enum name='INST_OVER' value='95'/>
<enum name='INST_POP' value='3'/>
<enum name='INST_PUSH1' value='1'/>
<enum name='INST_PUSH4' value='2'/>
<enum name='INST_PUSH_RESULT' value='71'/>
<enum name='INST_PUSH_RETURN_CODE' value='72'/>
<enum name='INST_PUSH_RETURN_OPTIONS' value='108'/>
<enum name='INST_REGEXP' value='127'/>
<enum name='INST_RETURN_IMM' value='98'/>
<enum name='INST_RETURN_STK' value='109'/>
<enum name='INST_REVERSE' value='126'/>
<enum name='INST_RSHIFT' value='52'/>
<enum name='INST_START_CMD' value='105'/>
<enum name='INST_STORE_ARRAY1' value='20'/>
<enum name='INST_STORE_ARRAY4' value='21'/>
<enum name='INST_STORE_ARRAY_STK' value='22'/>
<enum name='INST_STORE_SCALAR1' value='17'/>
<enum name='INST_STORE_SCALAR4' value='18'/>
<enum name='INST_STORE_SCALAR_STK' value='19'/>
<enum name='INST_STORE_STK' value='23'/>
<enum name='INST_STR_CMP' value='75'/>
<enum name='INST_STR_EQ' value='73'/>
<enum name='INST_STR_INDEX' value='77'/>
<enum name='INST_STR_LEN' value='76'/>
<enum name='INST_STR_MATCH' value='78'/>
<enum name='INST_STR_NEQ' value='74'/>
<enum name='INST_SUB' value='54'/>
<enum name='INST_SYNTAX' value='125'/>
<enum name='INST_TRY_CVT_TO_NUMERIC' value='64'/>
<enum name='INST_UMINUS' value='59'/>
<enum name='INST_UPLUS' value='58'/>
<enum name='INST_UPVAR' value='122'/>
<enum name='INST_VARIABLE' value='124'/>
<enum name='INTERP_ALTERNATE_WRONG_ARGS' value='1024'/>
<enum name='INTERP_TRACE_IN_PROGRESS' value='512'/>
<enum name='JUMPFIXUP_INIT_ENTRIES' value='10'/>
<enum name='LAST_INST_OPCODE' value='131'/>
<enum name='LIMIT_HANDLER_ACTIVE' value='1'/>
<enum name='LIMIT_HANDLER_DELETED' value='2'/>
<enum name='LITERAL_NS_SCOPE' value='2'/>
<enum name='LITERAL_ON_HEAP' value='1'/>
<enum name='LOOP_EXCEPTION_RANGE' value='0'/>
<enum name='LTM_PRIME_2MSB_ON' value='8'/>
<enum name='LTM_PRIME_BBS' value='1'/>
<enum name='LTM_PRIME_SAFE' value='2'/>
<enum name='MASK_SIZE' value='32'/>
<enum name='MAX_INSTRUCTION_OPERANDS' value='2'/>
<enum name='MAX_NESTING_DEPTH' value='1000'/>
<enum name='MP_DIGIT_BIT' value='28'/>
<enum name='MP_DIGIT_MAX' value='268435455'/>
<enum name='MP_EQ' value='0'/>
<enum name='MP_GT' value='1'/>
<enum name='MP_LT' value='-1'/>
<enum name='MP_MASK' value='268435455'/>
<enum name='MP_MEM' value='-2'/>
<enum name='MP_NEG' value='1'/>
<enum name='MP_NO' value='0'/>
<enum name='MP_OKAY' value='0'/>
<enum name='MP_PREC' value='32'/>
<enum name='MP_RANGE' value='-3'/>
<enum name='MP_VAL' value='-3'/>
<enum name='MP_WARRAY' value='512'/>
<enum name='MP_YES' value='1'/>
<enum name='MP_ZPOS' value='0'/>
<enum name='NS_DEAD' value='2'/>
<enum name='NS_DYING' value='1'/>
<enum name='NS_KILLED' value='4'/>
<enum name='NUM_STATIC_TOKENS' value='20'/>
<enum name='OPERAND_AUX4' value='8'/>
<enum name='OPERAND_IDX4' value='5'/>
<enum name='OPERAND_INT1' value='1'/>
<enum name='OPERAND_INT4' value='2'/>
<enum name='OPERAND_LVT1' value='6'/>
<enum name='OPERAND_LVT4' value='7'/>
<enum name='OPERAND_NONE' value='0'/>
<enum name='OPERAND_UINT1' value='3'/>
<enum name='OPERAND_UINT4' value='4'/>
<enum name='PKG_PREFER_LATEST' value='0'/>
<enum name='PKG_PREFER_STABLE' value='1'/>
<enum name='PRIME_SIZE' value='256'/>
<enum name='RAND_SEED_INITIALIZED' value='64'/>
<enum name='SAFE_INTERP' value='128'/>
<enum name='TCLTOMMATH_EPOCH' value='0'/>
<enum name='TCLTOMMATH_REVISION' value='0'/>
<enum name='TCL_ALLOCALIGN' value='16'/>
<enum name='TCL_ALLOW_EXCEPTIONS' value='4'/>
<enum name='TCL_ALLOW_INLINE_COMPILATION' value='131072'/>
<enum name='TCL_ALL_EVENTS' value='-3'/>
<enum name='TCL_ALPHA_RELEASE' value='0'/>
<enum name='TCL_APPEND_VALUE' value='4'/>
<enum name='TCL_BETA_RELEASE' value='1'/>
<enum name='TCL_BREAK' value='3'/>
<enum name='TCL_BYTECODE_PRECOMPILED' value='1'/>
<enum name='TCL_BYTECODE_RESOLVE_VARS' value='2'/>
<enum name='TCL_CFG_DO64BIT' value64='1'/>
<enum name='TCL_CHANNEL_THREAD_INSERT' value='0'/>
<enum name='TCL_CHANNEL_THREAD_REMOVE' value='1'/>
<enum name='TCL_CLOSE_READ' value='2'/>
<enum name='TCL_CLOSE_WRITE' value='4'/>
<enum name='TCL_CONTINUE' value='4'/>
<enum name='TCL_CONVERT_MULTIBYTE' value='-1'/>
<enum name='TCL_CONVERT_NOSPACE' value='-4'/>
<enum name='TCL_CONVERT_SYNTAX' value='-2'/>
<enum name='TCL_CONVERT_UNKNOWN' value='-3'/>
<enum name='TCL_CREATE_HARD_LINK' value='2'/>
<enum name='TCL_CREATE_NS_IF_UNKNOWN' value='2048'/>
<enum name='TCL_CREATE_SYMBOLIC_LINK' value='1'/>
<enum name='TCL_CUSTOM_PTR_KEYS' value='-1'/>
<enum name='TCL_CUSTOM_TYPE_KEYS' value='-2'/>
<enum name='TCL_DONT_QUOTE_HASH' value='8'/>
<enum name='TCL_DONT_USE_BRACES' value='1'/>
<enum name='TCL_DONT_WAIT' value='2'/>
<enum name='TCL_DOUBLE' value='1'/>
<enum name='TCL_DOUBLE_SPACE' value='27'/>
<enum name='TCL_DSTRING_STATIC_SIZE' value='200'/>
<enum name='TCL_EITHER' value='2'/>
<enum name='TCL_ENCODING_END' value='2'/>
<enum name='TCL_ENCODING_START' value='1'/>
<enum name='TCL_ENCODING_STOPONERROR' value='4'/>
<enum name='TCL_ENFORCE_MODE' value='16'/>
<enum name='TCL_ENSEMBLE_PREFIX' value='2'/>
<enum name='TCL_ERROR' value='1'/>
<enum name='TCL_EVAL_CTX' value='8'/>
<enum name='TCL_EVAL_DIRECT' value='262144'/>
<enum name='TCL_EVAL_FILE' value='2'/>
<enum name='TCL_EVAL_GLOBAL' value='131072'/>
<enum name='TCL_EVAL_INVOKE' value='524288'/>
<enum name='TCL_EXACT' value='1'/>
<enum name='TCL_EXCEPTION' value='8'/>
<enum name='TCL_FALSE_JUMP' value='2'/>
<enum name='TCL_FILE_EVENTS' value='8'/>
<enum name='TCL_FINAL_RELEASE' value='2'/>
<enum name='TCL_FIND_ONLY_NS' value='4096'/>
<enum name='TCL_GLOBAL_ONLY' value='1'/>
<enum name='TCL_GLOBMODE_DIR' value='4'/>
<enum name='TCL_GLOBMODE_JOIN' value='2'/>
<enum name='TCL_GLOBMODE_NO_COMPLAIN' value='1'/>
<enum name='TCL_GLOBMODE_TAILS' value='8'/>
<enum name='TCL_GLOB_PERM_HIDDEN' value='2'/>
<enum name='TCL_GLOB_PERM_R' value='4'/>
<enum name='TCL_GLOB_PERM_RONLY' value='1'/>
<enum name='TCL_GLOB_PERM_W' value='8'/>
<enum name='TCL_GLOB_PERM_X' value='16'/>
<enum name='TCL_GLOB_TYPE_BLOCK' value='1'/>
<enum name='TCL_GLOB_TYPE_CHAR' value='2'/>
<enum name='TCL_GLOB_TYPE_DIR' value='4'/>
<enum name='TCL_GLOB_TYPE_FILE' value='16'/>
<enum name='TCL_GLOB_TYPE_LINK' value='32'/>
<enum name='TCL_GLOB_TYPE_MOUNT' value='128'/>
<enum name='TCL_GLOB_TYPE_PIPE' value='8'/>
<enum name='TCL_GLOB_TYPE_SOCK' value='64'/>
<enum name='TCL_HASH_KEY_RANDOMIZE_HASH' value='1'/>
<enum name='TCL_HASH_KEY_STORE_HASH' value='1'/>
<enum name='TCL_HASH_KEY_SYSTEM_HASH' value='2'/>
<enum name='TCL_HASH_KEY_TYPE_VERSION' value='1'/>
<enum name='TCL_IDLE_EVENTS' value='32'/>
<enum name='TCL_INT' value='0'/>
<enum name='TCL_INTEGER_SPACE' value='24'/>
<enum name='TCL_INTERP_DESTROYED' value='256'/>
<enum name='TCL_INVOKE_HIDDEN' value='1'/>
<enum name='TCL_INVOKE_NO_TRACEBACK' value='4'/>
<enum name='TCL_INVOKE_NO_UNKNOWN' value='2'/>
<enum name='TCL_LEAVE_ERR_MSG' value='512'/>
<enum name='TCL_LIMIT_COMMANDS' value='1'/>
<enum name='TCL_LIMIT_TIME' value='2'/>
<enum name='TCL_LINK_BOOLEAN' value='3'/>
<enum name='TCL_LINK_CHAR' value='6'/>
<enum name='TCL_LINK_DOUBLE' value='2'/>
<enum name='TCL_LINK_FLOAT' value='13'/>
<enum name='TCL_LINK_INT' value='1'/>
<enum name='TCL_LINK_LONG' value='11'/>
<enum name='TCL_LINK_READ_ONLY' value='128'/>
<enum name='TCL_LINK_SHORT' value='8'/>
<enum name='TCL_LINK_STRING' value='4'/>
<enum name='TCL_LINK_UCHAR' value='7'/>
<enum name='TCL_LINK_UINT' value='10'/>
<enum name='TCL_LINK_ULONG' value='12'/>
<enum name='TCL_LINK_USHORT' value='9'/>
<enum name='TCL_LINK_WIDE_INT' value='5'/>
<enum name='TCL_LINK_WIDE_UINT' value='14'/>
<enum name='TCL_LIST_ELEMENT' value='8'/>
<enum name='TCL_LOCATION_BC' value='2'/>
<enum name='TCL_LOCATION_EVAL' value='0'/>
<enum name='TCL_LOCATION_EVAL_LIST' value='1'/>
<enum name='TCL_LOCATION_LAST' value='6'/>
<enum name='TCL_LOCATION_PREBC' value='3'/>
<enum name='TCL_LOCATION_PROC' value='5'/>
<enum name='TCL_LOCATION_SOURCE' value='4'/>
<enum name='TCL_MAJOR_VERSION' value='8'/>
<enum name='TCL_MATCH_NOCASE' value='1'/>
<enum name='TCL_MAX_PREC' value='17'/>
<enum name='TCL_MAX_TOKENS' value='268435455' value64='178956970'/>
<enum name='TCL_MINOR_VERSION' value='5'/>
<enum name='TCL_MIN_TOKEN_GROWTH' value='50'/>
<enum name='TCL_MODE_BLOCKING' value='0'/>
<enum name='TCL_MODE_NONBLOCKING' value='1'/>
<enum name='TCL_NAMESPACE_ONLY' value='2'/>
<enum name='TCL_NO_EVAL' value='65536'/>
<enum name='TCL_NUMBER_BIG' value='3'/>
<enum name='TCL_NUMBER_DOUBLE' value='4'/>
<enum name='TCL_NUMBER_LONG' value='1'/>
<enum name='TCL_NUMBER_NAN' value='5'/>
<enum name='TCL_NUMBER_WIDE' value='2'/>
<enum name='TCL_OK' value='0'/>
<enum name='TCL_ONE_WORD_KEYS' value='1'/>
<enum name='TCL_OUT_LINE_COMPILE' value='1'/>
<enum name='TCL_PARSE_BAD_NUMBER' value='9'/>
<enum name='TCL_PARSE_BRACE_EXTRA' value='2'/>
<enum name='TCL_PARSE_DECIMAL_ONLY' value='1'/>
<enum name='TCL_PARSE_HEXADECIMAL_ONLY' value='4'/>
<enum name='TCL_PARSE_INTEGER_ONLY' value='8'/>
<enum name='TCL_PARSE_MISSING_BRACE' value='3'/>
<enum name='TCL_PARSE_MISSING_BRACKET' value='4'/>
<enum name='TCL_PARSE_MISSING_PAREN' value='5'/>
<enum name='TCL_PARSE_MISSING_QUOTE' value='6'/>
<enum name='TCL_PARSE_MISSING_VAR_BRACE' value='7'/>
<enum name='TCL_PARSE_NO_WHITESPACE' value='32'/>
<enum name='TCL_PARSE_OCTAL_ONLY' value='2'/>
<enum name='TCL_PARSE_PART1' value='1024'/>
<enum name='TCL_PARSE_QUOTE_EXTRA' value='1'/>
<enum name='TCL_PARSE_SCAN_PREFIXES' value='16'/>
<enum name='TCL_PARSE_SUCCESS' value='0'/>
<enum name='TCL_PARSE_SYNTAX' value='8'/>
<enum name='TCL_PATH_ABSOLUTE' value='0'/>
<enum name='TCL_PATH_DIRNAME' value='0'/>
<enum name='TCL_PATH_EXTENSION' value='2'/>
<enum name='TCL_PATH_RELATIVE' value='1'/>
<enum name='TCL_PATH_ROOT' value='3'/>
<enum name='TCL_PATH_TAIL' value='1'/>
<enum name='TCL_PATH_VOLUME_RELATIVE' value='2'/>
<enum name='TCL_PLATFORM_TRANSLATION' value='2'/>
<enum name='TCL_PLATFORM_UNIX' value='0'/>
<enum name='TCL_PLATFORM_WINDOWS' value='2'/>
<enum name='TCL_QUEUE_HEAD' value='1'/>
<enum name='TCL_QUEUE_MARK' value='2'/>
<enum name='TCL_QUEUE_TAIL' value='0'/>
<enum name='TCL_READABLE' value='2'/>
<enum name='TCL_REG_ADVANCED' value='3'/>
<enum name='TCL_REG_ADVF' value='2'/>
<enum name='TCL_REG_BASIC' value='0'/>
<enum name='TCL_REG_BOSONLY' value='1024'/>
<enum name='TCL_REG_CANMATCH' value='512'/>
<enum name='TCL_REG_EXPANDED' value='32'/>
<enum name='TCL_REG_EXTENDED' value='1'/>
<enum name='TCL_REG_NEWLINE' value='192'/>
<enum name='TCL_REG_NLANCH' value='128'/>
<enum name='TCL_REG_NLSTOP' value='64'/>
<enum name='TCL_REG_NOCASE' value='8'/>
<enum name='TCL_REG_NOSUB' value='16'/>
<enum name='TCL_REG_NOTBOL' value='1'/>
<enum name='TCL_REG_NOTEOL' value='2'/>
<enum name='TCL_REG_QUOTE' value='4'/>
<enum name='TCL_RELEASE_LEVEL' value='2'/>
<enum name='TCL_RELEASE_SERIAL' value='9'/>
<enum name='TCL_RESULT_SIZE' value='200'/>
<enum name='TCL_RETURN' value='2'/>
<enum name='TCL_SERVICE_ALL' value='1'/>
<enum name='TCL_SERVICE_NONE' value='0'/>
<enum name='TCL_SMALL_HASH_TABLE' value='4'/>
<enum name='TCL_STDERR' value='8'/>
<enum name='TCL_STDIN' value='2'/>
<enum name='TCL_STDOUT' value='4'/>
<enum name='TCL_STRING_KEYS' value='0'/>
<enum name='TCL_STUB_MAGIC' value='-56378673'/>
<enum name='TCL_SUBST_ALL' value='7'/>
<enum name='TCL_SUBST_BACKSLASHES' value='4'/>
<enum name='TCL_SUBST_COMMANDS' value='1'/>
<enum name='TCL_SUBST_VARIABLES' value='2'/>
<enum name='TCL_THREAD_JOINABLE' value='1'/>
<enum name='TCL_THREAD_NOFLAGS' value='0'/>
<enum name='TCL_THREAD_STACK_DEFAULT' value='0'/>
<enum name='TCL_TIMER_EVENTS' value='16'/>
<enum name='TCL_TOKEN_BS' value='8'/>
<enum name='TCL_TOKEN_COMMAND' value='16'/>
<enum name='TCL_TOKEN_EXPAND_WORD' value='256'/>
<enum name='TCL_TOKEN_OPERATOR' value='128'/>
<enum name='TCL_TOKEN_SIMPLE_WORD' value='2'/>
<enum name='TCL_TOKEN_SUB_EXPR' value='64'/>
<enum name='TCL_TOKEN_TEXT' value='4'/>
<enum name='TCL_TOKEN_VARIABLE' value='32'/>
<enum name='TCL_TOKEN_WORD' value='1'/>
<enum name='TCL_TRACE_ARRAY' value='2048'/>
<enum name='TCL_TRACE_DELETE' value='16384'/>
<enum name='TCL_TRACE_DESTROYED' value='128'/>
<enum name='TCL_TRACE_ENTER_EXEC' value='1'/>
<enum name='TCL_TRACE_LEAVE_EXEC' value='2'/>
<enum name='TCL_TRACE_OLD_STYLE' value='4096'/>
<enum name='TCL_TRACE_READS' value='16'/>
<enum name='TCL_TRACE_RENAME' value='8192'/>
<enum name='TCL_TRACE_RESULT_DYNAMIC' value='32768'/>
<enum name='TCL_TRACE_RESULT_OBJECT' value='65536'/>
<enum name='TCL_TRACE_UNSETS' value='64'/>
<enum name='TCL_TRACE_WRITES' value='32'/>
<enum name='TCL_TRANSLATE_AUTO' value='0'/>
<enum name='TCL_TRANSLATE_CR' value='1'/>
<enum name='TCL_TRANSLATE_CRLF' value='3'/>
<enum name='TCL_TRANSLATE_LF' value='2'/>
<enum name='TCL_TRUE_JUMP' value='1'/>
<enum name='TCL_UNCONDITIONAL_JUMP' value='0'/>
<enum name='TCL_UNLOAD_DETACH_FROM_INTERPRETER' value='1'/>
<enum name='TCL_UNLOAD_DETACH_FROM_PROCESS' value='2'/>
<enum name='TCL_UTF_MAX' value='3'/>
<enum name='TCL_WIDE_INT' value='3'/>
<enum name='TCL_WIDE_INT_IS_LONG' value64='1'/>
<enum name='TCL_WINDOW_EVENTS' value='4'/>
<enum name='TCL_WRITABLE' value='4'/>
<enum name='USE_PUTENV' value='1'/>
<enum name='USE_TERMIOS' value='1'/>
<enum name='VAR_ALL_HASH' value='4236'/>
<enum name='VAR_ALL_TRACES' value='2160'/>
<enum name='VAR_ARGUMENT' value='256'/>
<enum name='VAR_ARRAY' value='1'/>
<enum name='VAR_ARRAY_ELEMENT' value='4096'/>
<enum name='VAR_DEAD_HASH' value='8'/>
<enum name='VAR_IN_HASHTABLE' value='4'/>
<enum name='VAR_IS_ARGS' value='1024'/>
<enum name='VAR_LINK' value='2'/>
<enum name='VAR_NAMESPACE_VAR' value='128'/>
<enum name='VAR_RESOLVED' value='32768'/>
<enum name='VAR_SEARCH_ACTIVE' value='16384'/>
<enum name='VAR_TEMPORARY' value='512'/>
<enum name='VAR_TRACED_ARRAY' value='2048'/>
<enum name='VAR_TRACED_READ' value='16'/>
<enum name='VAR_TRACED_UNSET' value='64'/>
<enum name='VAR_TRACED_WRITE' value='32'/>
<enum name='VAR_TRACE_ACTIVE' value='8192'/>
<function name='TclAddLiteralObj'>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int**' name='litPtrPtr' type='^^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclAddOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclAdvanceContinuations'>
<arg declared_type='int*' name='line' type='^i'/>
<arg declared_type='int**' name='next' type='^^i'/>
<arg declared_type='int' name='loc' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclAdvanceLines'>
<arg declared_type='int*' name='line' type='^i'/>
<arg const='true' declared_type='char*' name='start' type='*'/>
<arg const='true' declared_type='char*' name='end' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclAllocateFreeObjects'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclAndOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclArgumentBCEnter'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj**' name='objv' type='^^{Tcl_Obj}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg declared_type='void*' name='codePtr' type='^v'/>
<arg declared_type='CmdFrame*' name='cfPtr' type='^{CmdFrame=ii^ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CmdFrame}(?={?=^{Tcl_Obj}}{?=^v*})(?={?=*i}^{Tcl_Obj})}'/>
<arg declared_type='int' name='pc' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclArgumentBCRelease'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj**' name='objv' type='^^{Tcl_Obj}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg declared_type='void*' name='codePtr' type='^v'/>
<arg declared_type='int' name='pc' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclArgumentEnter'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj**' name='objv' type='^^{Tcl_Obj}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg declared_type='CmdFrame*' name='cf' type='^{CmdFrame=ii^ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CmdFrame}(?={?=^{Tcl_Obj}}{?=^v*})(?={?=*i}^{Tcl_Obj})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclArgumentGet'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='obj' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='CmdFrame**' name='cfPtrPtr' type='^^{CmdFrame}'/>
<arg declared_type='int*' name='wordPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclArgumentRelease'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj**' name='objv' type='^^{Tcl_Obj}'/>
<arg declared_type='int' name='objc' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclArraySet'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='arrayNameObj' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='arrayElemObj' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBNInitBignumFromLong'>
<arg declared_type='mp_int*' name='bignum' type='^{mp_int=iii^I}'/>
<arg declared_type='long' name='initVal' type='l' type64='q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclBNInitBignumFromWideInt'>
<arg declared_type='mp_int*' name='bignum' type='^{mp_int=iii^I}'/>
<arg declared_type='Tcl_WideInt' name='initVal' type='q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclBNInitBignumFromWideUInt'>
<arg declared_type='mp_int*' name='bignum' type='^{mp_int=iii^I}'/>
<arg declared_type='Tcl_WideUInt' name='initVal' type='Q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclBN_epoch'>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_fast_s_mp_mul_digs'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='c' type='^{mp_int=iii^I}'/>
<arg declared_type='int' name='digs' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_fast_s_mp_sqr'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_add'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='c' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_add_d'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_digit' name='b' type='I'/>
<arg declared_type='mp_int*' name='c' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_and'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='c' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_clamp'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclBN_mp_clear'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclBN_mp_clear_multi' variadic='true'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclBN_mp_cmp'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_cmp_d'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_digit' name='b' type='I'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_cmp_mag'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_copy'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_count_bits'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_div'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='q' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='r' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_div_2'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='q' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_div_2d'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='int' name='b' type='i'/>
<arg declared_type='mp_int*' name='q' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='r' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_div_3'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='q' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_digit*' name='r' type='^I'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_div_d'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_digit' name='b' type='I'/>
<arg declared_type='mp_int*' name='q' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_digit*' name='r' type='^I'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_exch'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclBN_mp_expt_d'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_digit' name='b' type='I'/>
<arg declared_type='mp_int*' name='c' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_grow'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='int' name='size' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_init'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_init_copy'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_init_multi' variadic='true'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_init_set'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_digit' name='b' type='I'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_init_size'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='int' name='size' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_karatsuba_mul'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='c' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_karatsuba_sqr'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_lshd'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='int' name='shift' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_mod'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='r' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_mod_2d'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='int' name='b' type='i'/>
<arg declared_type='mp_int*' name='r' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_mul'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='p' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_mul_2'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='p' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_mul_2d'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='int' name='d' type='i'/>
<arg declared_type='mp_int*' name='p' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_mul_d'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_digit' name='b' type='I'/>
<arg declared_type='mp_int*' name='p' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_neg'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_or'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='c' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_radix_size'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='int' name='radix' type='i'/>
<arg declared_type='int*' name='size' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_read_radix'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg declared_type='int' name='radix' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_rshd'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='int' name='shift' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclBN_mp_set'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_digit' name='b' type='I'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclBN_mp_shrink'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_sqr'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_sqrt'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_sub'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='c' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_sub_d'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_digit' name='b' type='I'/>
<arg declared_type='mp_int*' name='c' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_to_unsigned_bin'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='unsigned char*' name='b' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_to_unsigned_bin_n'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='unsigned char*' name='b' type='*'/>
<arg declared_type='unsigned long*' name='outlen' type='^L' type64='^Q'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_toom_mul'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='c' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_toom_sqr'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_toradix_n'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='char*' name='str' type='*'/>
<arg declared_type='int' name='radix' type='i'/>
<arg declared_type='int' name='maxlen' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_unsigned_bin_size'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_xor'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='c' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_mp_zero'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclBN_reverse'>
<arg declared_type='unsigned char*' name='s' type='*'/>
<arg declared_type='int' name='len' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclBN_revision'>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_s_mp_add'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='c' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_s_mp_mul_digs'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='c' type='^{mp_int=iii^I}'/>
<arg declared_type='int' name='digs' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_s_mp_sqr'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBN_s_mp_sub'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='b' type='^{mp_int=iii^I}'/>
<arg declared_type='mp_int*' name='c' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclBackgroundException'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='code' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclBignumToDouble'>
<arg declared_type='mp_int*' name='bignum' type='^{mp_int=iii^I}'/>
<retval declared_type='double' type='d'/>
</function>
<function name='TclByteArrayMatch'>
<arg const='true' declared_type='unsigned char*' name='string' type='*'/>
<arg declared_type='int' name='strLen' type='i'/>
<arg const='true' declared_type='unsigned char*' name='pattern' type='*'/>
<arg declared_type='int' name='ptnLen' type='i'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCallVarTraces'>
<arg declared_type='int*' name='iPtr' type='^i'/>
<arg declared_type='int*' name='arrayPtr' type='^i'/>
<arg declared_type='int*' name='varPtr' type='^i'/>
<arg const='true' declared_type='char*' name='part1' type='*'/>
<arg const='true' declared_type='char*' name='part2' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='int' name='leaveErrMsg' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCeil'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<retval declared_type='double' type='d'/>
</function>
<function name='TclChanCaughtErrorBypass'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclChanCreateObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclChanPostEventObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclChannelEventScriptInvoker'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclChannelTransform'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_Obj*' name='cmdObjPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCheckBadOctal'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='value' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCheckExecutionTraces'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='command' type='*'/>
<arg declared_type='int' name='numChars' type='i'/>
<arg declared_type='int*' name='cmdPtr' type='^i'/>
<arg declared_type='int' name='result' type='i'/>
<arg declared_type='int' name='traceFlags' type='i'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCheckInterpTraces'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='command' type='*'/>
<arg declared_type='int' name='numChars' type='i'/>
<arg declared_type='int*' name='cmdPtr' type='^i'/>
<arg declared_type='int' name='result' type='i'/>
<arg declared_type='int' name='traceFlags' type='i'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCleanupByteCode'>
<arg declared_type='ByteCode*' name='codePtr' type='^{ByteCode=^^vi^{Namespace}iiI*^{Proc}Iiiiiiiiii*^^{Tcl_Obj}^{ExceptionRange}^{AuxData}****^{LocalCache}}' type64='^{ByteCode=^^vi^{Namespace}iiI*^{Proc}Qiiiiiiiii*^^{Tcl_Obj}^{ExceptionRange}^{AuxData}****^{LocalCache}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclCleanupChildren'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='numPids' type='i'/>
<arg declared_type='Tcl_Pid*' name='pidPtr' type='^^{Tcl_Pid_}'/>
<arg declared_type='Tcl_Channel' name='errorChan' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCleanupCommand'>
<arg declared_type='Comment*' name='cmdPtr' type='^{Comment=IsS[1c]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclCleanupLiteralTable'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='LiteralTable*' name='tablePtr' type='^{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclCleanupVar'>
<arg declared_type='int*' name='varPtr' type='^i'/>
<arg declared_type='int*' name='arrayPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclClockInit'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclClockOldscanObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompEvalObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='CmdFrame*' name='invoker' type='^{CmdFrame=ii^ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CmdFrame}(?={?=^{Tcl_Obj}}{?=^v*})(?={?=*i}^{Tcl_Obj})}'/>
<arg declared_type='int' name='word' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompareObjKeys'>
<arg declared_type='void*' name='keyPtr' type='^v'/>
<arg declared_type='Tcl_HashEntry*' name='hPtr' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileAddOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileAndOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileAppendCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileBreakCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileCatchCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileCmdWord'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Token*' name='tokenPtr' type='^{Tcl_Token=i*ii}'/>
<arg declared_type='int' name='count' type='i'/>
<arg declared_type='CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclCompileContinueCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileDictAppendCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileDictForCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileDictGetCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileDictIncrCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileDictLappendCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileDictSetCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileDictUpdateCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileDivOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileEnsemble'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileEqOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileExpr'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='script' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<arg declared_type='CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<arg declared_type='int' name='optimize' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclCompileExprCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileExprWords'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Token*' name='tokenPtr' type='^{Tcl_Token=i*ii}'/>
<arg declared_type='int' name='numWords' type='i'/>
<arg declared_type='CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclCompileForCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileForeachCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileGeqOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileGlobalCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileGreaterOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileIfCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileInOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileIncrCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileInfoExistsCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileInvertOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileLappendCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileLassignCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileLeqOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileLessOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileLindexCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileListCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileLlengthCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileLsetCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileLshiftOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileMinusOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileModOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileMulOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileNamespaceCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileNeqOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileNiOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileNoOp'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileNotOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileOrOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompilePowOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileRegexpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileReturnCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileRshiftOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileScript'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='script' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<arg declared_type='CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclCompileSetCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileStreqOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileStringCmpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileStringEqualCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileStringIndexCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileStringLenCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileStringMatchCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileStrneqOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileSwitchCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileSyntaxError'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclCompileTokens'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Token*' name='tokenPtr' type='^{Tcl_Token=i*ii}'/>
<arg declared_type='int' name='count' type='i'/>
<arg declared_type='CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclCompileUpvarCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileVariableCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileWhileCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCompileXorOpCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclContinuationsCopy'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='originObjPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclContinuationsEnter'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='num' type='i'/>
<arg declared_type='int*' name='loc' type='^i'/>
<retval declared_type='ContLineLoc*' type='^{ContLineLoc=i[1i]}'/>
</function>
<function name='TclContinuationsEnterDerived'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='start' type='i'/>
<arg declared_type='int*' name='clNext' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclContinuationsGet'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='ContLineLoc*' type='^{ContLineLoc=i[1i]}'/>
</function>
<function name='TclCopyAndCollapse'>
<arg declared_type='int' name='count' type='i'/>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='char*' name='dst' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCopyChannel'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' name='inChan' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_Channel' name='outChan' type='^{Tcl_Channel_=}'/>
<arg declared_type='int' name='toRead' type='i'/>
<arg declared_type='Tcl_Obj*' name='cmdPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCreateAbsoluteTimerHandler'>
<arg declared_type='Tcl_Time*' name='timePtr' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<arg declared_type='Tcl_TimerProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='Tcl_TimerToken' type='^{Tcl_TimerToken_=}'/>
</function>
<function name='TclCreateAuxData'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='AuxDataType*' name='typePtr' type='^{AuxDataType=*^?^?^?}'/>
<arg declared_type='CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCreateExceptRange'>
<arg declared_type='ExceptionRangeType' name='type' type='i'/>
<arg declared_type='CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCreateExecEnv'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='ExecEnv*' type='^{ExecEnv=^{ExecStack}[2^{Tcl_Obj}]}'/>
</function>
<function name='TclCreateLateExitHandler'>
<arg declared_type='Tcl_ExitProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclCreateLiteral'>
<arg declared_type='Interp*' name='iPtr' type='^{Interp=*^?i^{TclStubs}^^v^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}l^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^v{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{ActiveVarTrace=^{Var}^{ActiveVarTrace}^{VarTrace}}i^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}l^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}*ii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}*iii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}i^{Proc=^{Interp}i^{Command}^{Tcl_Obj}ii^{CompiledLocal}^{CompiledLocal}}^{ResolverScheme=*^?^?^?^{ResolverScheme}}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}il^{Trace=i^?^v^{Trace}i^?}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{ExecEnv}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}[201c]^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}^{Tcl_ThreadId_}^{ActiveCommandTrace=^{Command}^{ActiveCommandTrace}^{CommandTrace}i}^{ActiveInterpTrace=^{ActiveInterpTrace}^{Trace}i}i^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}i{?=iiii^{LimitHandler}i{Tcl_Time=ll}^{LimitHandler}i^{Tcl_TimerToken_}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}}{?=^^{Tcl_Obj}ii}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}^{CmdFrame=ii^ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CmdFrame}(?={?=^{Tcl_Obj}}{?=^v*})(?={?=*i}^{Tcl_Obj})}^{CmdFrame=ii^ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CmdFrame}(?={?=^{Tcl_Obj}}{?=^v*})(?={?=*i}^{Tcl_Obj})}i^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{ContLineLoc=i[1i]}i{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^v^v^i^i}' type64='^{Interp=*^?i^{TclStubs}^^v^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}q^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^v{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{ActiveVarTrace=^{Var}^{ActiveVarTrace}^{VarTrace}}i^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}q^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}*ii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}*iii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}i^{Proc=^{Interp}i^{Command}^{Tcl_Obj}ii^{CompiledLocal}^{CompiledLocal}}^{ResolverScheme=*^?^?^?^{ResolverScheme}}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}iq^{Trace=i^?^v^{Trace}i^?}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{ExecEnv}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}[201c]^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}^{Tcl_ThreadId_}^{ActiveCommandTrace=^{Command}^{ActiveCommandTrace}^{CommandTrace}i}^{ActiveInterpTrace=^{ActiveInterpTrace}^{Trace}i}i^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}i{?=iiii^{LimitHandler}i{Tcl_Time=qq}^{LimitHandler}i^{Tcl_TimerToken_}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}}{?=^^{Tcl_Obj}ii}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}^{CmdFrame=ii^ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CmdFrame}(?={?=^{Tcl_Obj}}{?=^v*})(?={?=*i}^{Tcl_Obj})}^{CmdFrame=ii^ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CmdFrame}(?={?=^{Tcl_Obj}}{?=^v*})(?={?=*i}^{Tcl_Obj})}i^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{ContLineLoc=i[1i]}i{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^v^v^i^i}'/>
<arg declared_type='char*' name='bytes' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<arg declared_type='unsigned int' name='hash' type='I'/>
<arg declared_type='int*' name='newPtr' type='^i'/>
<arg declared_type='Namespace*' name='nsPtr' type='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}l^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}' type64='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}q^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='LiteralEntry**' name='globalPtrPtr' type='^^{LiteralEntry}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclCreatePipeline'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='argc' type='i'/>
<arg const='true' declared_type='char**' name='argv' type='^*'/>
<arg declared_type='Tcl_Pid**' name='pidArrayPtr' type='^^^{Tcl_Pid_}'/>
<arg declared_type='int*' name='inPipePtr' type='^i'/>
<arg declared_type='int*' name='outPipePtr' type='^i'/>
<arg declared_type='int*' name='errFilePtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCreateProc'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int*' name='nsPtr' type='^i'/>
<arg const='true' declared_type='char*' name='procName' type='*'/>
<arg declared_type='Tcl_Obj*' name='argsPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='bodyPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int**' name='procPtrPtr' type='^^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclCrossFilesystemCopy'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='source' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='target' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclDbDumpActiveObjects'>
<arg declared_type='FILE*' name='outFile' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclDefaultBgErrorHandlerObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclDeleteCompiledLocalVars'>
<arg declared_type='int*' name='iPtr' type='^i'/>
<arg declared_type='int*' name='framePtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclDeleteExecEnv'>
<arg declared_type='ExecEnv*' name='eePtr' type='^{ExecEnv=^{ExecStack}[2^{Tcl_Obj}]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclDeleteLateExitHandler'>
<arg declared_type='Tcl_ExitProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclDeleteLiteralTable'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='LiteralTable*' name='tablePtr' type='^{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclDeleteNamespaceVars'>
<arg declared_type='Namespace*' name='nsPtr' type='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}l^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}' type64='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}q^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclDeleteVars'>
<arg declared_type='int*' name='iPtr' type='^i'/>
<arg declared_type='int*' name='tablePtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclDisassembleByteCodeObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclDivOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclDoubleDigits'>
<arg declared_type='char*' name='buf' type='*'/>
<arg declared_type='double' name='value' type='d'/>
<arg declared_type='int*' name='signum' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclDumpMemoryInfo'>
<arg declared_type='FILE*' name='outFile' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclEmitForwardJump'>
<arg declared_type='CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<arg declared_type='TclJumpType' name='jumpType' type='i'/>
<arg declared_type='JumpFixup*' name='jumpFixupPtr' type='^{JumpFixup=iiii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclEqOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclEvalEx'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='script' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='int' name='line' type='i'/>
<arg declared_type='int*' name='clNextOuter' type='^i'/>
<arg const='true' declared_type='char*' name='outerScript' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclEvalObjEx'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='flags' type='i'/>
<arg const='true' declared_type='int*' name='invoker' type='^i'/>
<arg declared_type='int' name='word' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclEvalObjvInternal'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<arg const='true' declared_type='char*' name='command' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclExecuteByteCode'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='ByteCode*' name='codePtr' type='^{ByteCode=^^vi^{Namespace}iiI*^{Proc}Iiiiiiiiii*^^{Tcl_Obj}^{ExceptionRange}^{AuxData}****^{LocalCache}}' type64='^{ByteCode=^^vi^{Namespace}iiI*^{Proc}Qiiiiiiiii*^^{Tcl_Obj}^{ExceptionRange}^{AuxData}****^{LocalCache}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclExpandCodeArray'>
<arg declared_type='void*' name='envPtr' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclExpandJumpFixupArray'>
<arg declared_type='JumpFixupArray*' name='fixupArrayPtr' type='^{JumpFixupArray=^{JumpFixup}iii[10{JumpFixup=iiii}]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclExprFloatError'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='double' name='value' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFSFileAttrIndex'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' name='attributeName' type='*'/>
<arg declared_type='int*' name='indexPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclFSUnloadTempFile'>
<arg declared_type='Tcl_LoadHandle' name='loadHandle' type='^{Tcl_LoadHandle_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFileAttrsCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclFileCopyCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclFileDeleteCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclFileMakeDirsCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclFileRenameCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclFinalizeAllocSubsystem'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFinalizeAsync'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFinalizeAuxDataTypeTable'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFinalizeDoubleConversion'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFinalizeEncodingSubsystem'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFinalizeEnvironment'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFinalizeExecution'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFinalizeFilesystem'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFinalizeIOSubsystem'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFinalizeLoad'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFinalizeLock'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFinalizeMemorySubsystem'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFinalizeNotifier'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFinalizeObjects'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFinalizePreserve'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFinalizeSynchronization'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFinalizeThreadAlloc'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFinalizeThreadData'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFinalizeThreadObjects'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFinalizeThreadStorage'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFindCompiledLocal'>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='int' name='nameChars' type='i'/>
<arg declared_type='int' name='create' type='i'/>
<arg declared_type='Proc*' name='procPtr' type='^{Proc=^{Interp}i^{Command}^{Tcl_Obj}ii^{CompiledLocal}^{CompiledLocal}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclFindElement'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='listStr' type='*'/>
<arg declared_type='int' name='listLength' type='i'/>
<arg const='true' declared_type='char**' name='elementPtr' type='^*'/>
<arg const='true' declared_type='char**' name='nextPtr' type='^*'/>
<arg declared_type='int*' name='sizePtr' type='^i'/>
<arg declared_type='int*' name='bracePtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclFindProc'>
<arg declared_type='int*' name='iPtr' type='^i'/>
<arg const='true' declared_type='char*' name='procName' type='*'/>
<retval declared_type='int*' type='^i'/>
</function>
<function name='TclFixupForwardJump'>
<arg declared_type='CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<arg declared_type='JumpFixup*' name='jumpFixupPtr' type='^{JumpFixup=iiii}'/>
<arg declared_type='int' name='jumpDist' type='i'/>
<arg declared_type='int' name='distThreshold' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclFloor'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<retval declared_type='double' type='d'/>
</function>
<function name='TclFormatNaN'>
<arg declared_type='double' name='value' type='d'/>
<arg declared_type='char*' name='buffer' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFreeCompileEnv'>
<arg declared_type='CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFreeJumpFixupArray'>
<arg declared_type='JumpFixupArray*' name='fixupArrayPtr' type='^{JumpFixupArray=^{JumpFixup}iii[10{JumpFixup=iiii}]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFreeLocalCache'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='LocalCache*' name='localCachePtr' type='^{LocalCache=ii^{Tcl_Obj}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFreeObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFreeObjEntry'>
<arg declared_type='Tcl_HashEntry*' name='hPtr' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclFreePackageInfo'>
<arg declared_type='int*' name='iPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclGeqOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclGetAndDetachPids'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclGetAsyncReadyPtr'>
<retval declared_type='int*' type='^i'/>
</function>
<function name='TclGetAuxDataType'>
<arg declared_type='char*' name='typeName' type='*'/>
<retval declared_type='struct AuxDataType*' type='^{AuxDataType=*^?^?^?}'/>
</function>
<function name='TclGetBgErrorHandler'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclGetChannelFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Channel*' name='chanPtr' type='^^{Tcl_Channel_}'/>
<arg declared_type='int*' name='modePtr' type='^i'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclGetEnv'>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='Tcl_DString*' name='valuePtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='TclGetExceptionRangeForPc'>
<arg declared_type='unsigned char*' name='pc' type='*'/>
<arg declared_type='int' name='catchOnly' type='i'/>
<arg declared_type='ByteCode*' name='codePtr' type='^{ByteCode=^^vi^{Namespace}iiI*^{Proc}Iiiiiiiiii*^^{Tcl_Obj}^{ExceptionRange}^{AuxData}****^{LocalCache}}' type64='^{ByteCode=^^vi^{Namespace}iiI*^{Proc}Qiiiiiiiii*^^{Tcl_Obj}^{ExceptionRange}^{AuxData}****^{LocalCache}}'/>
<retval declared_type='ExceptionRange*' type='^{ExceptionRange=iiiiiii}'/>
</function>
<function name='TclGetExtension'>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='TclGetFrame'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg declared_type='int**' name='framePtrPtr' type='^^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclGetInstructionTable'>
<retval declared_type='void*' type='^v'/>
</function>
<function name='TclGetIntForIndex'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='endValue' type='i'/>
<arg declared_type='int*' name='indexPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclGetLibraryPath'>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclGetLoadedPackages'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' name='targetName' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclGetLong'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg declared_type='long*' name='longPtr' type='^l' type64='^q'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclGetNamespaceForQualName'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='qualName' type='*'/>
<arg declared_type='int*' name='cxtNsPtr' type='^i'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='int**' name='nsPtrPtr' type='^^i'/>
<arg declared_type='int**' name='altNsPtrPtr' type='^^i'/>
<arg declared_type='int**' name='actualCxtPtrPtr' type='^^i'/>
<arg const='true' declared_type='char**' name='simpleNamePtr' type='^*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclGetNamespaceFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Namespace**' name='nsPtrPtr' type='^^{Tcl_Namespace}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclGetNumberFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='ClientData*' name='clientDataPtr' type='^^v'/>
<arg declared_type='int*' name='typePtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclGetObjInterpProc'>
<retval declared_type='int' type='i'/>
</function>
<function name='TclGetObjNameOfExecutable'>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclGetOpenMode'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg declared_type='int*' name='seekFlagPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclGetOpenModeEx'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='modeString' type='*'/>
<arg declared_type='int*' name='seekFlagPtr' type='^i'/>
<arg declared_type='int*' name='binaryPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclGetOriginalCommand'>
<arg declared_type='Tcl_Command' name='command' type='^{Tcl_Command_=}'/>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</function>
<function name='TclGetPlatform'>
<retval declared_type='int*' type='^i'/>
</function>
<function name='TclGetProcessGlobalValue'>
<arg declared_type='ProcessGlobalValue*' name='pgvPtr' type='^{ProcessGlobalValue=ii*^{Tcl_Encoding_}^?^{Tcl_Mutex_}^{Tcl_ThreadDataKey_}}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclGetSrcInfoForCmd'>
<arg declared_type='Interp*' name='iPtr' type='^{Interp=*^?i^{TclStubs}^^v^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}l^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^v{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{ActiveVarTrace=^{Var}^{ActiveVarTrace}^{VarTrace}}i^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}l^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}*ii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}*iii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}i^{Proc=^{Interp}i^{Command}^{Tcl_Obj}ii^{CompiledLocal}^{CompiledLocal}}^{ResolverScheme=*^?^?^?^{ResolverScheme}}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}il^{Trace=i^?^v^{Trace}i^?}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{ExecEnv}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}[201c]^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}^{Tcl_ThreadId_}^{ActiveCommandTrace=^{Command}^{ActiveCommandTrace}^{CommandTrace}i}^{ActiveInterpTrace=^{ActiveInterpTrace}^{Trace}i}i^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}i{?=iiii^{LimitHandler}i{Tcl_Time=ll}^{LimitHandler}i^{Tcl_TimerToken_}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}}{?=^^{Tcl_Obj}ii}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}^{CmdFrame=ii^ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CmdFrame}(?={?=^{Tcl_Obj}}{?=^v*})(?={?=*i}^{Tcl_Obj})}^{CmdFrame=ii^ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CmdFrame}(?={?=^{Tcl_Obj}}{?=^v*})(?={?=*i}^{Tcl_Obj})}i^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{ContLineLoc=i[1i]}i{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^v^v^i^i}' type64='^{Interp=*^?i^{TclStubs}^^v^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}q^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^v{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{ActiveVarTrace=^{Var}^{ActiveVarTrace}^{VarTrace}}i^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}q^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}*ii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}*iii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}i^{Proc=^{Interp}i^{Command}^{Tcl_Obj}ii^{CompiledLocal}^{CompiledLocal}}^{ResolverScheme=*^?^?^?^{ResolverScheme}}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}iq^{Trace=i^?^v^{Trace}i^?}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{ExecEnv}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}[201c]^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}^{Tcl_ThreadId_}^{ActiveCommandTrace=^{Command}^{ActiveCommandTrace}^{CommandTrace}i}^{ActiveInterpTrace=^{ActiveInterpTrace}^{Trace}i}i^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}i{?=iiii^{LimitHandler}i{Tcl_Time=qq}^{LimitHandler}i^{Tcl_TimerToken_}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}}{?=^^{Tcl_Obj}ii}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}^{CmdFrame=ii^ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CmdFrame}(?={?=^{Tcl_Obj}}{?=^v*})(?={?=*i}^{Tcl_Obj})}^{CmdFrame=ii^ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CmdFrame}(?={?=^{Tcl_Obj}}{?=^v*})(?={?=*i}^{Tcl_Obj})}i^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{ContLineLoc=i[1i]}i{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^v^v^i^i}'/>
<arg declared_type='int*' name='lenPtr' type='^i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='TclGetSrcInfoForPc'>
<arg declared_type='int*' name='contextPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclGetStartupScriptFileName'>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='TclGetStartupScriptPath'>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclGlob'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' name='pattern' type='*'/>
<arg declared_type='Tcl_Obj*' name='unquotedPrefix' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='globFlags' type='i'/>
<arg declared_type='Tcl_GlobTypeData*' name='types' type='^{Tcl_GlobTypeData=ii^{Tcl_Obj}^{Tcl_Obj}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclGreaterOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclGuessPackageName'>
<arg const='true' declared_type='char*' name='fileName' type='*'/>
<arg declared_type='Tcl_DString*' name='bufPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclHandleCreate'>
<arg declared_type='void*' name='ptr' type='^v'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclHandleFree'>
<arg declared_type='int' name='handle' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclHandlePreserve'>
<arg declared_type='int' name='handle' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclHandleRelease'>
<arg declared_type='int' name='handle' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclHashObjKey'>
<arg declared_type='Tcl_HashTable*' name='tablePtr' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<arg declared_type='void*' name='keyPtr' type='^v'/>
<retval declared_type='unsigned int' type='I'/>
</function>
<function name='TclHideLiteral'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='struct CompileEnv*' name='envPtr' type='^{CompileEnv=}'/>
<arg declared_type='int' name='index' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclHideUnsafeCommands'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclInExit'>
<retval declared_type='int' type='i'/>
</function>
<function name='TclInOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclInThreadExit'>
<retval declared_type='int' type='i'/>
</function>
<function name='TclIncrObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='valuePtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='incrPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclIncrObjVar2'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='part1Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='part2Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='incrPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclInfoExistsCmd'>
<arg declared_type='ClientData' name='dummy' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclInfoFrame'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='CmdFrame*' name='framePtr' type='^{CmdFrame=ii^ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CmdFrame}(?={?=^{Tcl_Obj}}{?=^v*})(?={?=*i}^{Tcl_Obj})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclInfoGlobalsCmd'>
<arg declared_type='ClientData' name='dummy' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclInfoLocalsCmd'>
<arg declared_type='ClientData' name='dummy' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclInfoVarsCmd'>
<arg declared_type='ClientData' name='dummy' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclInitAlloc'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInitAuxDataTypeTable'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInitByteCodeObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInitChanCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</function>
<function name='TclInitCompilation'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInitCompileEnv'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<arg const='true' declared_type='char*' name='string' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<arg const='true' declared_type='CmdFrame*' name='invoker' type='^{CmdFrame=ii^ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CmdFrame}(?={?=^{Tcl_Obj}}{?=^v*})(?={?=*i}^{Tcl_Obj})}'/>
<arg declared_type='int' name='word' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInitCompiledLocals'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int*' name='framePtr' type='^i'/>
<arg declared_type='int*' name='nsPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInitDbCkalloc'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInitDictCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</function>
<function name='TclInitDoubleConversion'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInitEmbeddedConfigurationInformation'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInitEncodingSubsystem'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInitIOSubsystem'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInitInfoCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</function>
<function name='TclInitJumpFixupArray'>
<arg declared_type='JumpFixupArray*' name='fixupArrayPtr' type='^{JumpFixupArray=^{JumpFixup}iii[10{JumpFixup=iiii}]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInitLimitSupport'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInitLiteralTable'>
<arg declared_type='LiteralTable*' name='tablePtr' type='^{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInitNamespaceSubsystem'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInitNotifier'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInitObjSubsystem'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInitStringCmd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</function>
<function name='TclInitSubsystems'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInitThreadStorage'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInitVarHashTable'>
<arg declared_type='int*' name='tablePtr' type='^i'/>
<arg declared_type='int*' name='nsPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInterpInit'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclInterpReady'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclInvalidateNsPath'>
<arg declared_type='Namespace*' name='nsPtr' type='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}l^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}' type64='^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}q^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclInvertOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclInvokeObjectCommand'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='argc' type='i'/>
<arg const='true' declared_type='char**' name='argv' type='^*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclInvokeStringCommand'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclIsLocalScalar'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int' name='len' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclIsProc'>
<arg declared_type='int*' name='cmdPtr' type='^i'/>
<retval declared_type='int*' type='^i'/>
</function>
<function name='TclJoinThread'>
<arg declared_type='Tcl_ThreadId' name='id' type='^{Tcl_ThreadId_=}'/>
<arg declared_type='int*' name='result' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclLeqOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclLessOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclLimitRemoveAllHandlers'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclLindexFlat'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='listPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='indexCount' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='indexArray' type='^^{Tcl_Obj}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclLindexList'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='listPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='argPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclListLines'>
<arg declared_type='Tcl_Obj*' name='listObj' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='line' type='i'/>
<arg declared_type='int' name='n' type='i'/>
<arg declared_type='int*' name='lines' type='^i'/>
<arg const='true' declared_type='Tcl_Obj **' name='elems' type='^^{Tcl_Obj}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclListObjCopy'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='listPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclListObjSetElement'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='listPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='index' type='i'/>
<arg declared_type='Tcl_Obj*' name='valuePtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclLoadFile'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='symc' type='i'/>
<arg const='true' declared_type='char**' name='symbols' type='^*'/>
<arg declared_type='Tcl_PackageInitProc***' name='procPtrs' type='^^^?'/>
<arg declared_type='Tcl_LoadHandle*' name='handlePtr' type='^^{Tcl_LoadHandle_}'/>
<arg declared_type='ClientData*' name='clientDataPtr' type='^^v'/>
<arg declared_type='Tcl_FSUnloadFileProc**' name='unloadProcPtr' type='^^?'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclLookupArrayElement'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='arrayNamePtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='elNamePtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='int' name='flags' type='i'/>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='int' name='createPart1' type='i'/>
<arg const='true' declared_type='int' name='createPart2' type='i'/>
<arg declared_type='Var*' name='arrayPtr' type='^{Var=i(?=^{Tcl_Obj}^{TclVarHashTable}^{Var})}'/>
<arg declared_type='int' name='index' type='i'/>
<retval declared_type='Var*' type='^{Var=i(?=^{Tcl_Obj}^{TclVarHashTable}^{Var})}'/>
</function>
<function name='TclLookupLiteralEntry'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='LiteralEntry*' type='^{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}'/>
</function>
<function name='TclLookupVar'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='part1' type='*'/>
<arg const='true' declared_type='char*' name='part2' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg declared_type='int' name='createPart1' type='i'/>
<arg declared_type='int' name='createPart2' type='i'/>
<arg declared_type='int**' name='arrayPtrPtr' type='^^i'/>
<retval declared_type='int*' type='^i'/>
</function>
<function name='TclLsetFlat'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='listPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='indexCount' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='indexArray' type='^^{Tcl_Obj}'/>
<arg declared_type='Tcl_Obj*' name='valuePtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclLsetList'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='listPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='indexPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='valuePtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclLshiftOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclMakeEnsemble'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg const='true' declared_type='EnsembleImplMap*' name='map' type='^{_EnsembleImplMap=*^?^?}'/>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</function>
<function name='TclMarkList'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='list' type='*'/>
<arg const='true' declared_type='char*' name='end' type='*'/>
<arg declared_type='int*' name='argcPtr' type='^i'/>
<arg const='true' declared_type='int**' name='argszPtr' type='^^i'/>
<arg const='true' declared_type='char***' name='argvPtr' type='^^*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclMergeReturnOptions'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<arg declared_type='Tcl_Obj**' name='optionsPtrPtr' type='^^{Tcl_Obj}'/>
<arg declared_type='int*' name='codePtr' type='^i'/>
<arg declared_type='int*' name='levelPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclMinusOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclModOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclMulOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclNativeDupInternalRep'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='ClientData' type='^v'/>
</function>
<function name='TclNeedSpace'>
<arg const='true' declared_type='char*' name='start' type='*'/>
<arg const='true' declared_type='char*' name='end' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclNeqOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclNewFSPathObj'>
<arg declared_type='Tcl_Obj*' name='dirPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' name='addStrRep' type='*'/>
<arg declared_type='int' name='len' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclNewProcBodyObj'>
<arg declared_type='int*' name='procPtr' type='^i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclNiOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclNoIdentOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclNokia770Doubles'>
<retval declared_type='int' type='i'/>
</function>
<function name='TclNotOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclObjBeingDeleted'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclObjCallVarTraces'>
<arg declared_type='Interp*' name='iPtr' type='^{Interp=*^?i^{TclStubs}^^v^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}l^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^v{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{ActiveVarTrace=^{Var}^{ActiveVarTrace}^{VarTrace}}i^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}l^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}*ii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}*iii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}i^{Proc=^{Interp}i^{Command}^{Tcl_Obj}ii^{CompiledLocal}^{CompiledLocal}}^{ResolverScheme=*^?^?^?^{ResolverScheme}}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}il^{Trace=i^?^v^{Trace}i^?}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{ExecEnv}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}[201c]^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}^{Tcl_ThreadId_}^{ActiveCommandTrace=^{Command}^{ActiveCommandTrace}^{CommandTrace}i}^{ActiveInterpTrace=^{ActiveInterpTrace}^{Trace}i}i^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}i{?=iiii^{LimitHandler}i{Tcl_Time=ll}^{LimitHandler}i^{Tcl_TimerToken_}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}}{?=^^{Tcl_Obj}ii}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}^{CmdFrame=ii^ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CmdFrame}(?={?=^{Tcl_Obj}}{?=^v*})(?={?=*i}^{Tcl_Obj})}^{CmdFrame=ii^ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CmdFrame}(?={?=^{Tcl_Obj}}{?=^v*})(?={?=*i}^{Tcl_Obj})}i^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{ContLineLoc=i[1i]}i{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^v^v^i^i}' type64='^{Interp=*^?i^{TclStubs}^^v^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}q^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^v{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{ActiveVarTrace=^{Var}^{ActiveVarTrace}^{VarTrace}}i^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{Namespace=**^v^?^{Namespace}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}q^{Tcl_Interp}iii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{TclVarHashTable={Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Namespace}}^*iiii^?^?^?i^{Tcl_Ensemble}^{Tcl_Obj}i^{NamespacePathEntry}^{NamespacePathEntry}}*ii{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}*iii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}i^{Proc=^{Interp}i^{Command}^{Tcl_Obj}ii^{CompiledLocal}^{CompiledLocal}}^{ResolverScheme=*^?^?^?^{ResolverScheme}}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}iq^{Trace=i^?^v^{Trace}i^?}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{ExecEnv}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}[201c]^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}^{Tcl_ThreadId_}^{ActiveCommandTrace=^{Command}^{ActiveCommandTrace}^{CommandTrace}i}^{ActiveInterpTrace=^{ActiveInterpTrace}^{Trace}i}i^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}i{?=iiii^{LimitHandler}i{Tcl_Time=qq}^{LimitHandler}i^{Tcl_TimerToken_}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}}{?=^^{Tcl_Obj}ii}^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}^{CmdFrame=ii^ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CmdFrame}(?={?=^{Tcl_Obj}}{?=^v*})(?={?=*i}^{Tcl_Obj})}^{CmdFrame=ii^ii^{CallFrame=^{Namespace}ii^^{Tcl_Obj}^{CallFrame}^{CallFrame}i^{Proc}^{TclVarHashTable}i^{Var}^v^{LocalCache}}^{CmdFrame}(?={?=^{Tcl_Obj}}{?=^v*})(?={?=*i}^{Tcl_Obj})}i^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^{ContLineLoc=i[1i]}i{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}^v^v^i^i}'/>
<arg declared_type='Var*' name='arrayPtr' type='^{Var=i(?=^{Tcl_Obj}^{TclVarHashTable}^{Var})}'/>
<arg declared_type='Var*' name='varPtr' type='^{Var=i(?=^{Tcl_Obj}^{TclVarHashTable}^{Var})}'/>
<arg declared_type='Tcl_Obj*' name='part1Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='part2Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='int' name='leaveErrMsg' type='i'/>
<arg declared_type='int' name='index' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclObjCommandComplete'>
<arg declared_type='Tcl_Obj*' name='cmdPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclObjGetFrame'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int**' name='framePtrPtr' type='^^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclObjInterpProc'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclObjInterpProcCore'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='procNameObj' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='skip' type='i'/>
<arg declared_type='int' name='errorProc' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclObjInvoke'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclObjInvokeNamespace'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<arg declared_type='Tcl_Namespace*' name='nsPtr' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclObjLookupVar'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='part1Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' name='part2' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='int' name='createPart1' type='i'/>
<arg const='true' declared_type='int' name='createPart2' type='i'/>
<arg declared_type='int**' name='arrayPtrPtr' type='^^i'/>
<retval declared_type='int*' type='^i'/>
</function>
<function name='TclObjLookupVarEx'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='part1Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='part2Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='flags' type='i'/>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg const='true' declared_type='int' name='createPart1' type='i'/>
<arg const='true' declared_type='int' name='createPart2' type='i'/>
<arg declared_type='Var**' name='arrayPtrPtr' type='^^{Var}'/>
<retval declared_type='Var*' type='^{Var=i(?=^{Tcl_Obj}^{TclVarHashTable}^{Var})}'/>
</function>
<function name='TclObjUnsetVar2'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='part1Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='part2Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclObjVarErrMsg'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='part1Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='part2Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' name='operation' type='*'/>
<arg const='true' declared_type='char*' name='reason' type='*'/>
<arg declared_type='int' name='index' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclOrOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclParseAllWhiteSpace'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclParseBackslash'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<arg declared_type='int*' name='readPtr' type='^i'/>
<arg declared_type='char*' name='dst' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclParseHex'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<arg declared_type='Tcl_UniChar*' name='resultPtr' type='^S'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclParseInit'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='string' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclParseNumber'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' name='expected' type='*'/>
<arg const='true' declared_type='char*' name='bytes' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<arg const='true' declared_type='char**' name='endPtrPtr' type='^*'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclPathPart'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_PathPart' name='portion' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclPopStackFrame'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclPowOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclPrecTraceProc'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name1' type='*'/>
<arg const='true' declared_type='char*' name='name2' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TclPreventAliasLoop'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Interp*' name='cmdInterp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' name='cmd' type='^{Tcl_Command_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclPrintInstruction'>
<arg declared_type='ByteCode*' name='codePtr' type='^{ByteCode=^^vi^{Namespace}iiI*^{Proc}Iiiiiiiiii*^^{Tcl_Obj}^{ExceptionRange}^{AuxData}****^{LocalCache}}' type64='^{ByteCode=^^vi^{Namespace}iiI*^{Proc}Qiiiiiiiii*^^{Tcl_Obj}^{ExceptionRange}^{AuxData}****^{LocalCache}}'/>
<arg declared_type='unsigned char*' name='pc' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclPrintObject'>
<arg declared_type='FILE*' name='outFile' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='maxChars' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclPrintSource'>
<arg declared_type='FILE*' name='outFile' type='^{__sFILE=*iiss{__sbuf=*i}i^v^?^?^?^?{__sbuf=*i}^{__sFILEX}i[3C][1C]{__sbuf=*i}iq}'/>
<arg const='true' declared_type='char*' name='string' type='*'/>
<arg declared_type='int' name='maxChars' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclProcCleanupProc'>
<arg declared_type='int*' name='procPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclProcCompileProc'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int*' name='procPtr' type='^i'/>
<arg declared_type='Tcl_Obj*' name='bodyPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' name='nsPtr' type='^i'/>
<arg const='true' declared_type='char*' name='description' type='*'/>
<arg const='true' declared_type='char*' name='procName' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclProcDeleteProc'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclProcessReturn'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='code' type='i'/>
<arg declared_type='int' name='level' type='i'/>
<arg declared_type='Tcl_Obj*' name='returnOpts' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclPtrGetVar'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Var*' name='varPtr' type='^{Var=i(?=^{Tcl_Obj}^{TclVarHashTable}^{Var})}'/>
<arg declared_type='Var*' name='arrayPtr' type='^{Var=i(?=^{Tcl_Obj}^{TclVarHashTable}^{Var})}'/>
<arg declared_type='Tcl_Obj*' name='part1Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='part2Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='int' name='flags' type='i'/>
<arg declared_type='int' name='index' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclPtrIncrObjVar'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Var*' name='varPtr' type='^{Var=i(?=^{Tcl_Obj}^{TclVarHashTable}^{Var})}'/>
<arg declared_type='Var*' name='arrayPtr' type='^{Var=i(?=^{Tcl_Obj}^{TclVarHashTable}^{Var})}'/>
<arg declared_type='Tcl_Obj*' name='part1Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='part2Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='incrPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='int' name='flags' type='i'/>
<arg declared_type='int' name='index' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclPtrMakeUpvar'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int*' name='otherP1Ptr' type='^i'/>
<arg const='true' declared_type='char*' name='myName' type='*'/>
<arg declared_type='int' name='myFlags' type='i'/>
<arg declared_type='int' name='index' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclPtrObjMakeUpvar'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Var*' name='otherPtr' type='^{Var=i(?=^{Tcl_Obj}^{TclVarHashTable}^{Var})}'/>
<arg declared_type='Tcl_Obj*' name='myNamePtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='myFlags' type='i'/>
<arg declared_type='int' name='index' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclPtrSetVar'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Var*' name='varPtr' type='^{Var=i(?=^{Tcl_Obj}^{TclVarHashTable}^{Var})}'/>
<arg declared_type='Var*' name='arrayPtr' type='^{Var=i(?=^{Tcl_Obj}^{TclVarHashTable}^{Var})}'/>
<arg declared_type='Tcl_Obj*' name='part1Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='part2Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='newValuePtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='int' name='flags' type='i'/>
<arg declared_type='int' name='index' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclPushStackFrame'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_CallFrame**' name='framePtrPtr' type='^^{Tcl_CallFrame}'/>
<arg declared_type='Tcl_Namespace*' name='namespacePtr' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' name='isProcCallFrame' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclReToGlob'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='reStr' type='*'/>
<arg declared_type='int' name='reStrLen' type='i'/>
<arg declared_type='Tcl_DString*' name='dsPtr' type='^{Tcl_DString=*ii[200c]}'/>
<arg declared_type='int*' name='flagsPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclRegAbout'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_RegExp' name='re' type='^{Tcl_RegExp_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclRegError'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg declared_type='int' name='status' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclRegExpRangeUniChar'>
<arg declared_type='Tcl_RegExp' name='re' type='^{Tcl_RegExp_=}'/>
<arg declared_type='int' name='index' type='i'/>
<arg declared_type='int*' name='startPtr' type='^i'/>
<arg declared_type='int*' name='endPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclRegisterAuxDataType'>
<arg declared_type='AuxDataType*' name='typePtr' type='^{AuxDataType=*^?^?^?}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclRegisterLiteral'>
<arg declared_type='CompileEnv*' name='envPtr' type='^{CompileEnv=^{Interp}*i^{Proc}iiiii{LiteralTable=^^{LiteralEntry}[4^{LiteralEntry}]iiii}***i^{LiteralEntry}iii^{ExceptionRange}iii^{CmdLocation}ii^{AuxData}iii[250C][60{LiteralEntry=^{LiteralEntry}^{Tcl_Obj}i^{Namespace}}][5{ExceptionRange=iiiiiii}][40{CmdLocation=iiii}][5{AuxData=^{AuxDataType}^v}]^{ExtCmdLoc}ii^{ContLineLoc}^i}'/>
<arg declared_type='char*' name='bytes' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclReleaseLiteral'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclRememberCondition'>
<arg declared_type='Tcl_Condition*' name='mutex' type='^^{Tcl_Condition_}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclRememberJoinableThread'>
<arg declared_type='Tcl_ThreadId' name='id' type='^{Tcl_ThreadId_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclRememberMutex'>
<arg declared_type='Tcl_Mutex*' name='mutex' type='^^{Tcl_Mutex_}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclRemoveScriptLimitCallbacks'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclRenameCommand'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='oldName' type='*'/>
<arg const='true' declared_type='char*' name='newName' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclResetFilesystem'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclResetShadowedCmdRefs'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int*' name='newCmdPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclRshiftOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclServiceIdle'>
<retval declared_type='int' type='i'/>
</function>
<function name='TclSetBgErrorHandler'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='cmdPrefix' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclSetBignumIntRep'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='mp_int*' name='bignumValue' type='^{mp_int=iii^I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclSetByteCodeFromAny'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' name='hookProc' type='^i'/>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclSetCmdNameObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Command*' name='cmdPtr' type='^{Command=^{Tcl_HashEntry}^{Namespace}ii^?^?^v^?^v^?^vi^{ImportRef}^{CommandTrace}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclSetLibraryPath'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclSetNsPath'>
<arg declared_type='int*' name='nsPtr' type='^i'/>
<arg declared_type='int' name='pathLength' type='i'/>
<arg declared_type='Tcl_Namespace**' name='pathAry' type='^^{Tcl_Namespace}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclSetObjNameOfExecutable'>
<arg declared_type='Tcl_Obj*' name='name' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Encoding' name='encoding' type='^{Tcl_Encoding_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclSetPreInitScript'>
<arg declared_type='char*' name='string' type='*'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TclSetProcessGlobalValue'>
<arg declared_type='ProcessGlobalValue*' name='pgvPtr' type='^{ProcessGlobalValue=ii*^{Tcl_Encoding_}^?^{Tcl_Mutex_}^{Tcl_ThreadDataKey_}}'/>
<arg declared_type='Tcl_Obj*' name='newValue' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Encoding' name='encoding' type='^{Tcl_Encoding_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclSetStartupScriptFileName'>
<arg const='true' declared_type='char*' name='filename' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclSetStartupScriptPath'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclSetupEnv'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclSignalExitThread'>
<arg declared_type='Tcl_ThreadId' name='id' type='^{Tcl_ThreadId_=}'/>
<arg declared_type='int' name='result' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclSingleOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclSockGetPort'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg const='true' declared_type='char*' name='proto' type='*'/>
<arg declared_type='int*' name='portPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclSockMinimumBuffers'>
<arg declared_type='int' name='sock' type='i'/>
<arg declared_type='int' name='size' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclSortingOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclStackAlloc'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='numBytes' type='i'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='TclStackFree'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='void*' name='freePtr' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclStackRealloc'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='void*' name='ptr' type='^v'/>
<arg declared_type='int' name='numBytes' type='i'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='TclStreqOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclStringMatch'>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg declared_type='int' name='strLen' type='i'/>
<arg const='true' declared_type='char*' name='pattern' type='*'/>
<arg declared_type='int' name='ptnLen' type='i'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclStringMatchObj'>
<arg declared_type='Tcl_Obj*' name='stringObj' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='patternObj' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclStringObjReverse'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclStrneqOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclSubstTokens'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Token*' name='tokenPtr' type='^{Tcl_Token=i*ii}'/>
<arg declared_type='int' name='count' type='i'/>
<arg declared_type='int*' name='tokensLeftPtr' type='^i'/>
<arg declared_type='int' name='line' type='i'/>
<arg declared_type='int*' name='clNextOuter' type='^i'/>
<arg const='true' declared_type='char*' name='outerScript' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclTeardownNamespace'>
<arg declared_type='int*' name='nsPtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclThreadDataKeyGet'>
<arg declared_type='Tcl_ThreadDataKey*' name='keyPtr' type='^^{Tcl_ThreadDataKey_}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='TclThreadDataKeySet'>
<arg declared_type='Tcl_ThreadDataKey*' name='keyPtr' type='^^{Tcl_ThreadDataKey_}'/>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclTomMathInitializeStubs'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='version' type='*'/>
<arg declared_type='int' name='epoch' type='i'/>
<arg declared_type='int' name='revision' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='TclTommath_Init'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclTraceDictPath'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='rootPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='keyc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='keyv' type='^^{Tcl_Obj}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclTransferResult'>
<arg declared_type='Tcl_Interp*' name='sourceInterp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='result' type='i'/>
<arg declared_type='Tcl_Interp*' name='targetInterp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclUniCharMatch'>
<arg const='true' declared_type='Tcl_UniChar*' name='string' type='^S'/>
<arg declared_type='int' name='strLen' type='i'/>
<arg const='true' declared_type='Tcl_UniChar*' name='pattern' type='^S'/>
<arg declared_type='int' name='ptnLen' type='i'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclUnixCopyFile'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg const='true' declared_type='char*' name='dst' type='*'/>
<arg const='true' declared_type='Tcl_StatBuf*' name='statBufPtr' type='^{stat=iSSQIIi{timespec=il}{timespec=il}{timespec=il}{timespec=il}qqiIIi[2q]}' type64='^{stat=iSSQIIi{timespec=qq}{timespec=qq}{timespec=qq}{timespec=qq}qqiIIi[2q]}'/>
<arg declared_type='int' name='dontCopyAtts' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclUnixSetBlockingMode'>
<arg declared_type='int' name='fd' type='i'/>
<arg declared_type='int' name='mode' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclUnixWaitForFile'>
<arg declared_type='int' name='fd' type='i'/>
<arg declared_type='int' name='mask' type='i'/>
<arg declared_type='int' name='timeout' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclUpdateReturnInfo'>
<arg declared_type='int*' name='iPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclVarErrMsg'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='part1' type='*'/>
<arg const='true' declared_type='char*' name='part2' type='*'/>
<arg const='true' declared_type='char*' name='operation' type='*'/>
<arg const='true' declared_type='char*' name='reason' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclVarHashCreateVar'>
<arg declared_type='int*' name='tablePtr' type='^i'/>
<arg const='true' declared_type='char*' name='key' type='*'/>
<arg declared_type='int*' name='newPtr' type='^i'/>
<retval declared_type='int*' type='^i'/>
</function>
<function name='TclVarTraceExists'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='varName' type='*'/>
<retval declared_type='int*' type='^i'/>
</function>
<function name='TclVariadicOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclWordKnownAtCompileTime'>
<arg declared_type='Tcl_Token*' name='tokenPtr' type='^{Tcl_Token=i*ii}'/>
<arg declared_type='Tcl_Obj*' name='valuePtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclXorOpCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_Access'>
<arg const='true' declared_type='char*' name='path' type='*'/>
<arg declared_type='int' name='mode' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_AddErrorInfo'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='message' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_AddInterpResolvers'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='int*' name='cmdProc' type='^i'/>
<arg declared_type='int*' name='varProc' type='^i'/>
<arg declared_type='int*' name='compiledVarProc' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_AddObjErrorInfo'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='message' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_AfterObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_AlertNotifier'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_Alloc'>
<arg declared_type='unsigned int' name='size' type='I'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_AllocStatBuf'>
<retval declared_type='Tcl_StatBuf*' type='^{stat=iSSQIIi{timespec=il}{timespec=il}{timespec=il}{timespec=il}qqiIIi[2q]}' type64='^{stat=iSSQIIi{timespec=qq}{timespec=qq}{timespec=qq}{timespec=qq}qqiIIi[2q]}'/>
</function>
<function name='Tcl_AllowExceptions'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_AppInit'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_AppendAllObjTypes'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_AppendElement'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='element' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_AppendExportList'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Namespace*' name='nsPtr' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_AppendFormatToObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' name='format' type='*'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_AppendLimitedToObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' name='bytes' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<arg declared_type='int' name='limit' type='i'/>
<arg const='true' declared_type='char*' name='ellipsis' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_AppendObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_AppendObjToErrorInfo'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_AppendObjToObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='appendObjPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_AppendPrintfToObj' variadic='true'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' name='format' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_AppendResult' variadic='true'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_AppendResultVA'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='va_list' declared_type64='struct __va_list_tag*' name='argList' type='*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_AppendStringsToObj' variadic='true'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_AppendStringsToObjVA'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='va_list' declared_type64='struct __va_list_tag*' name='argList' type='*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_AppendToObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' name='bytes' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_AppendUnicodeToObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='Tcl_UniChar*' name='unicode' type='^S'/>
<arg declared_type='int' name='length' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_ApplyObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ArrayObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_AsyncCreate'>
<arg declared_type='Tcl_AsyncProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='Tcl_AsyncHandler' type='^{Tcl_AsyncHandler_=}'/>
</function>
<function name='Tcl_AsyncDelete'>
<arg declared_type='Tcl_AsyncHandler' name='async' type='^{Tcl_AsyncHandler_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_AsyncInvoke'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='code' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_AsyncMark'>
<arg declared_type='Tcl_AsyncHandler' name='async' type='^{Tcl_AsyncHandler_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_AsyncReady'>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_AttemptAlloc'>
<arg declared_type='unsigned int' name='size' type='I'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_AttemptDbCkalloc'>
<arg declared_type='unsigned int' name='size' type='I'/>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_AttemptDbCkrealloc'>
<arg declared_type='char*' name='ptr' type='*'/>
<arg declared_type='unsigned int' name='size' type='I'/>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_AttemptRealloc'>
<arg declared_type='char*' name='ptr' type='*'/>
<arg declared_type='unsigned int' name='size' type='I'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_AttemptSetObjLength'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='length' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_BackgroundError'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_Backslash'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int*' name='readPtr' type='^i'/>
<retval declared_type='char' type='c'/>
</function>
<function name='Tcl_BadChannelOption'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='optionName' type='*'/>
<arg const='true' declared_type='char*' name='optionList' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_BinaryObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_BreakObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_CallWhenDeleted'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_InterpDeleteProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_CancelIdleCall'>
<arg declared_type='Tcl_IdleProc*' function_pointer='true' name='idleProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_CaseObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_CatchObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_CdObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ChannelBlockModeProc'>
<arg const='true' declared_type='Tcl_ChannelType*' name='chanTypePtr' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverBlockModeProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</retval>
</function>
<function name='Tcl_ChannelBuffered'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ChannelClose2Proc'>
<arg const='true' declared_type='Tcl_ChannelType*' name='chanTypePtr' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverClose2Proc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</retval>
</function>
<function name='Tcl_ChannelCloseProc'>
<arg const='true' declared_type='Tcl_ChannelType*' name='chanTypePtr' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverCloseProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</retval>
</function>
<function name='Tcl_ChannelFlushProc'>
<arg const='true' declared_type='Tcl_ChannelType*' name='chanTypePtr' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverFlushProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='int' type='i'/>
</retval>
</function>
<function name='Tcl_ChannelGetHandleProc'>
<arg const='true' declared_type='Tcl_ChannelType*' name='chanTypePtr' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverGetHandleProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<arg declared_type='ClientData*' type='^^v'/>
<retval declared_type='int' type='i'/>
</retval>
</function>
<function name='Tcl_ChannelGetOptionProc'>
<arg const='true' declared_type='Tcl_ChannelType*' name='chanTypePtr' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverGetOptionProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_DString*' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='int' type='i'/>
</retval>
</function>
<function name='Tcl_ChannelHandlerProc'>
<arg const='true' declared_type='Tcl_ChannelType*' name='chanTypePtr' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverHandlerProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='int' type='i'/>
</retval>
</function>
<function name='Tcl_ChannelInputProc'>
<arg const='true' declared_type='Tcl_ChannelType*' name='chanTypePtr' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverInputProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</retval>
</function>
<function name='Tcl_ChannelName'>
<arg const='true' declared_type='Tcl_ChannelType*' name='chanTypePtr' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_ChannelOutputProc'>
<arg const='true' declared_type='Tcl_ChannelType*' name='chanTypePtr' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverOutputProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</retval>
</function>
<function name='Tcl_ChannelSeekProc'>
<arg const='true' declared_type='Tcl_ChannelType*' name='chanTypePtr' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverSeekProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='long' type='l' type64='q'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='int' type='i'/>
</retval>
</function>
<function name='Tcl_ChannelSetOptionProc'>
<arg const='true' declared_type='Tcl_ChannelType*' name='chanTypePtr' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverSetOptionProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='int' type='i'/>
</retval>
</function>
<function name='Tcl_ChannelThreadActionProc'>
<arg const='true' declared_type='Tcl_ChannelType*' name='chanTypePtr' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverThreadActionProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='Tcl_ChannelTruncateProc'>
<arg const='true' declared_type='Tcl_ChannelType*' name='chanTypePtr' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverTruncateProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_WideInt' type='q'/>
<retval declared_type='int' type='i'/>
</retval>
</function>
<function name='Tcl_ChannelVersion'>
<arg const='true' declared_type='Tcl_ChannelType*' name='chanTypePtr' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_ChannelTypeVersion' type='^{Tcl_ChannelTypeVersion_=}'/>
</function>
<function name='Tcl_ChannelWatchProc'>
<arg const='true' declared_type='Tcl_ChannelType*' name='chanTypePtr' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverWatchProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='Tcl_ChannelWideSeekProc'>
<arg const='true' declared_type='Tcl_ChannelType*' name='chanTypePtr' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='Tcl_DriverWideSeekProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_WideInt' type='q'/>
<arg declared_type='int' type='i'/>
<arg declared_type='int*' type='^i'/>
<retval declared_type='Tcl_WideInt' type='q'/>
</retval>
</function>
<function name='Tcl_Chdir'>
<arg const='true' declared_type='char*' name='dirName' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ClearChannelHandlers'>
<arg declared_type='Tcl_Channel' name='channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_Close'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_CloseObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_CommandComplete'>
<arg const='true' declared_type='char*' name='cmd' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_CommandTraceInfo'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='varName' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='Tcl_CommandTraceProc*' function_pointer='true' name='procPtr' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='prevClientData' type='^v'/>
<retval declared_type='ClientData' type='^v'/>
</function>
<function name='Tcl_Concat'>
<arg declared_type='int' name='argc' type='i'/>
<arg const='true' declared_type='char **' name='argv' type='^*'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_ConcatObj'>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_ConcatObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ConditionFinalize'>
<arg declared_type='Tcl_Condition*' name='condPtr' type='^^{Tcl_Condition_}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_ConditionNotify'>
<arg declared_type='Tcl_Condition*' name='condPtr' type='^^{Tcl_Condition_}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_ConditionWait'>
<arg declared_type='Tcl_Condition*' name='condPtr' type='^^{Tcl_Condition_}'/>
<arg declared_type='Tcl_Mutex*' name='mutexPtr' type='^^{Tcl_Mutex_}'/>
<arg declared_type='Tcl_Time*' name='timePtr' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_ContinueObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ConvertCountedElement'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<arg declared_type='char*' name='dst' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ConvertElement'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='char*' name='dst' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ConvertToType'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_ObjType*' name='typePtr' type='^{Tcl_ObjType=*^?^?^?^?}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_CreateAlias'>
<arg declared_type='Tcl_Interp*' name='slave' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='slaveCmd' type='*'/>
<arg declared_type='Tcl_Interp*' name='target' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='targetCmd' type='*'/>
<arg declared_type='int' name='argc' type='i'/>
<arg const='true' declared_type='char **' name='argv' type='^*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_CreateAliasObj'>
<arg declared_type='Tcl_Interp*' name='slave' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='slaveCmd' type='*'/>
<arg declared_type='Tcl_Interp*' name='target' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='targetCmd' type='*'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_CreateChannel'>
<arg declared_type='Tcl_ChannelType*' name='typePtr' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<arg const='true' declared_type='char*' name='chanName' type='*'/>
<arg declared_type='ClientData' name='instanceData' type='^v'/>
<arg declared_type='int' name='mask' type='i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</function>
<function name='Tcl_CreateChannelHandler'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg declared_type='int' name='mask' type='i'/>
<arg declared_type='Tcl_ChannelProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_CreateCloseHandler'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_CloseProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_CreateCommand'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='cmdName' type='*'/>
<arg declared_type='Tcl_CmdProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_CmdDeleteProc*' function_pointer='true' name='deleteProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</function>
<function name='Tcl_CreateEncoding'>
<arg const='true' declared_type='Tcl_EncodingType*' name='typePtr' type='^{Tcl_EncodingType=*^?^?^?^vi}'/>
<retval declared_type='Tcl_Encoding' type='^{Tcl_Encoding_=}'/>
</function>
<function name='Tcl_CreateEnsemble'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='Tcl_Namespace*' name='namespacePtr' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</function>
<function name='Tcl_CreateEventSource'>
<arg declared_type='Tcl_EventSetupProc*' function_pointer='true' name='setupProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='Tcl_EventCheckProc*' function_pointer='true' name='checkProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_CreateExitHandler'>
<arg declared_type='Tcl_ExitProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_CreateFileHandler'>
<arg declared_type='int' name='fd' type='i'/>
<arg declared_type='int' name='mask' type='i'/>
<arg declared_type='Tcl_FileProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_CreateHashEntry'>
<arg declared_type='Tcl_HashTable*' name='tablePtr' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<arg const='true' declared_type='char*' name='key' type='*'/>
<arg declared_type='int*' name='newPtr' type='^i'/>
<retval declared_type='Tcl_HashEntry*' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
</function>
<function name='Tcl_CreateInterp'>
<retval declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
</function>
<function name='Tcl_CreateMathFunc'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='int' name='numArgs' type='i'/>
<arg declared_type='Tcl_ValueType*' name='argTypes' type='^i'/>
<arg declared_type='Tcl_MathProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Value*' type='^{Tcl_Value=ildq}' type64='^{Tcl_Value=iqdq}'/>
<arg declared_type='Tcl_Value*' type='^{Tcl_Value=ildq}' type64='^{Tcl_Value=iqdq}'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_CreateNamespace'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_NamespaceDeleteProc*' function_pointer='true' name='deleteProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
</function>
<function name='Tcl_CreateObjCommand'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='cmdName' type='*'/>
<arg declared_type='Tcl_ObjCmdProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='struct Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_CmdDeleteProc*' function_pointer='true' name='deleteProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</function>
<function name='Tcl_CreateObjTrace'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='level' type='i'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='Tcl_CmdObjTraceProc*' function_pointer='true' name='objProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='struct Tcl_Obj **' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_CmdObjTraceDeleteProc*' function_pointer='true' name='delProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='Tcl_Trace' type='^{Tcl_Trace_=}'/>
</function>
<function name='Tcl_CreateSlave'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='slaveName' type='*'/>
<arg declared_type='int' name='isSafe' type='i'/>
<retval declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
</function>
<function name='Tcl_CreateThread'>
<arg declared_type='Tcl_ThreadId*' name='idPtr' type='^^{Tcl_ThreadId_}'/>
<arg declared_type='Tcl_ThreadCreateProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='int' name='stackSize' type='i'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_CreateThreadExitHandler'>
<arg declared_type='Tcl_ExitProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_CreateTimerHandler'>
<arg declared_type='int' name='milliseconds' type='i'/>
<arg declared_type='Tcl_TimerProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='Tcl_TimerToken' type='^{Tcl_TimerToken_=}'/>
</function>
<function name='Tcl_CreateTrace'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='level' type='i'/>
<arg declared_type='Tcl_CmdTraceProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='Tcl_CmdProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<arg const='true' declared_type='char**' type='^*'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='Tcl_Trace' type='^{Tcl_Trace_=}'/>
</function>
<function name='Tcl_CutChannel'>
<arg declared_type='Tcl_Channel' name='channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DStringAppend'>
<arg declared_type='Tcl_DString*' name='dsPtr' type='^{Tcl_DString=*ii[200c]}'/>
<arg const='true' declared_type='char*' name='bytes' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_DStringAppendElement'>
<arg declared_type='Tcl_DString*' name='dsPtr' type='^{Tcl_DString=*ii[200c]}'/>
<arg const='true' declared_type='char*' name='element' type='*'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_DStringEndSublist'>
<arg declared_type='Tcl_DString*' name='dsPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DStringFree'>
<arg declared_type='Tcl_DString*' name='dsPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DStringGetResult'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_DString*' name='dsPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DStringInit'>
<arg declared_type='Tcl_DString*' name='dsPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DStringResult'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_DString*' name='dsPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DStringSetLength'>
<arg declared_type='Tcl_DString*' name='dsPtr' type='^{Tcl_DString=*ii[200c]}'/>
<arg declared_type='int' name='length' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DStringStartSublist'>
<arg declared_type='Tcl_DString*' name='dsPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DbCkalloc'>
<arg declared_type='unsigned int' name='size' type='I'/>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_DbCkfree'>
<arg declared_type='char*' name='ptr' type='*'/>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_DbCkrealloc'>
<arg declared_type='char*' name='ptr' type='*'/>
<arg declared_type='unsigned int' name='size' type='I'/>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_DbDecrRefCount'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DbIncrRefCount'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DbIsShared'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_DbNewBignumObj'>
<arg declared_type='mp_int*' name='value' type='^{mp_int=iii^I}'/>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_DbNewBooleanObj'>
<arg declared_type='int' name='boolValue' type='i'/>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_DbNewByteArrayObj'>
<arg const='true' declared_type='unsigned char*' name='bytes' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_DbNewDictObj'>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_DbNewDoubleObj'>
<arg declared_type='double' name='doubleValue' type='d'/>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_DbNewListObj'>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_DbNewLongObj'>
<arg declared_type='long' name='longValue' type='l' type64='q'/>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_DbNewObj'>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_DbNewStringObj'>
<arg const='true' declared_type='char*' name='bytes' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_DbNewWideIntObj'>
<arg declared_type='Tcl_WideInt' name='wideValue' type='q'/>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_DecrRefCount'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DeleteAssocData'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DeleteChannelHandler'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_ChannelProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DeleteCloseHandler'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_CloseProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DeleteCommand'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='cmdName' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_DeleteCommandFromToken'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' name='command' type='^{Tcl_Command_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_DeleteEventSource'>
<arg declared_type='Tcl_EventSetupProc*' function_pointer='true' name='setupProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='Tcl_EventCheckProc*' function_pointer='true' name='checkProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DeleteEvents'>
<arg declared_type='Tcl_EventDeleteProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='Tcl_Event*' type='^{Tcl_Event=^?^{Tcl_Event}}'/>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DeleteExitHandler'>
<arg declared_type='Tcl_ExitProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DeleteFileHandler'>
<arg declared_type='int' name='fd' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DeleteHashEntry'>
<arg declared_type='Tcl_HashEntry*' name='entryPtr' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DeleteHashTable'>
<arg declared_type='Tcl_HashTable*' name='tablePtr' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DeleteInterp'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DeleteNamespace'>
<arg declared_type='Tcl_Namespace*' name='nsPtr' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DeleteThreadExitHandler'>
<arg declared_type='Tcl_ExitProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DeleteTimerHandler'>
<arg declared_type='Tcl_TimerToken' name='token' type='^{Tcl_TimerToken_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DeleteTrace'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Trace' name='trace' type='^{Tcl_Trace_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DetachChannel'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' name='channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_DetachPids'>
<arg declared_type='int' name='numPids' type='i'/>
<arg declared_type='Tcl_Pid*' name='pidPtr' type='^^{Tcl_Pid_}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DictObjDone'>
<arg declared_type='Tcl_DictSearch*' name='searchPtr' type='^{_Tcl_DictSearch=^vi^{Tcl_Dict_}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DictObjFirst'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='dictPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_DictSearch*' name='searchPtr' type='^{_Tcl_DictSearch=^vi^{Tcl_Dict_}}'/>
<arg declared_type='Tcl_Obj**' name='keyPtrPtr' type='^^{Tcl_Obj}'/>
<arg declared_type='Tcl_Obj**' name='valuePtrPtr' type='^^{Tcl_Obj}'/>
<arg declared_type='int*' name='donePtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_DictObjGet'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='dictPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='keyPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj**' name='valuePtrPtr' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_DictObjNext'>
<arg declared_type='Tcl_DictSearch*' name='searchPtr' type='^{_Tcl_DictSearch=^vi^{Tcl_Dict_}}'/>
<arg declared_type='Tcl_Obj**' name='keyPtrPtr' type='^^{Tcl_Obj}'/>
<arg declared_type='Tcl_Obj**' name='valuePtrPtr' type='^^{Tcl_Obj}'/>
<arg declared_type='int*' name='donePtr' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DictObjPut'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='dictPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='keyPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='valuePtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_DictObjPutKeyList'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='dictPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='keyc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='keyv' type='^^{Tcl_Obj}'/>
<arg declared_type='Tcl_Obj*' name='valuePtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_DictObjRemove'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='dictPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='keyPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_DictObjRemoveKeyList'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='dictPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='keyc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='keyv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_DictObjSize'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='dictPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' name='sizePtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_DisassembleObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_DiscardInterpState'>
<arg declared_type='Tcl_InterpState' name='state' type='^{Tcl_InterpState_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DiscardResult'>
<arg declared_type='Tcl_SavedResult*' name='statePtr' type='^{Tcl_SavedResult=*^?^{Tcl_Obj}*ii[201c]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DoOneEvent'>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_DoWhenIdle'>
<arg declared_type='Tcl_IdleProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DontCallWhenDeleted'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_InterpDeleteProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_DumpActiveMemory'>
<arg const='true' declared_type='char*' name='fileName' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_DuplicateObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_EncodingObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_Eof'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_EofObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ErrnoId'>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_ErrnoMsg'>
<arg declared_type='int' name='err' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_ErrorObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_Eval'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='script' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_EvalEx'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='script' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_EvalFile'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='fileName' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_EvalObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_EvalObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_EvalObjEx'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_EvalObjv'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_EvalTokens'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Token*' name='tokenPtr' type='^{Tcl_Token=i*ii}'/>
<arg declared_type='int' name='count' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_EvalTokensStandard'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Token*' name='tokenPtr' type='^{Tcl_Token=i*ii}'/>
<arg declared_type='int' name='count' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_EventuallyFree'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_FreeProc*' function_pointer='true' name='freeProc' type='^?'>
<arg declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_ExecObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_Exit'>
<arg declared_type='int' name='status' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_ExitObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ExitThread'>
<arg declared_type='int' name='status' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_Export'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Namespace*' name='nsPtr' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg const='true' declared_type='char*' name='pattern' type='*'/>
<arg declared_type='int' name='resetListFirst' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ExposeCommand'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='hiddenCmdToken' type='*'/>
<arg const='true' declared_type='char*' name='cmdName' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ExprBoolean'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='expr' type='*'/>
<arg declared_type='int*' name='ptr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ExprBooleanObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' name='ptr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ExprDouble'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='expr' type='*'/>
<arg declared_type='double*' name='ptr' type='^d'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ExprDoubleObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='double*' name='ptr' type='^d'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ExprLong'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='expr' type='*'/>
<arg declared_type='long*' name='ptr' type='^l' type64='^q'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ExprLongObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='long*' name='ptr' type='^l' type64='^q'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ExprObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj**' name='resultPtrPtr' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ExprObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ExprString'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='expr' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ExternalToUtf'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Encoding' name='encoding' type='^{Tcl_Encoding_=}'/>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int' name='srcLen' type='i'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='Tcl_EncodingState*' name='statePtr' type='^^{Tcl_EncodingState_}'/>
<arg declared_type='char*' name='dst' type='*'/>
<arg declared_type='int' name='dstLen' type='i'/>
<arg declared_type='int*' name='srcReadPtr' type='^i'/>
<arg declared_type='int*' name='dstWrotePtr' type='^i'/>
<arg declared_type='int*' name='dstCharsPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ExternalToUtfDString'>
<arg declared_type='Tcl_Encoding' name='encoding' type='^{Tcl_Encoding_=}'/>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int' name='srcLen' type='i'/>
<arg declared_type='Tcl_DString*' name='dsPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_FSAccess'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='mode' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FSChdir'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FSConvertToPathType'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FSCopyDirectory'>
<arg declared_type='Tcl_Obj*' name='srcPathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='destPathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj**' name='errorPtr' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FSCopyFile'>
<arg declared_type='Tcl_Obj*' name='srcPathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='destPathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FSCreateDirectory'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FSData'>
<arg declared_type='Tcl_Filesystem*' name='fsPtr' type='^{Tcl_Filesystem=*i^{Tcl_FSVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='ClientData' type='^v'/>
</function>
<function name='Tcl_FSDeleteFile'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FSEqualPaths'>
<arg declared_type='Tcl_Obj*' name='firstPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='secondPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FSEvalFile'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='fileName' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FSEvalFileEx'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='fileName' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' name='encodingName' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FSFileAttrStrings'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj**' name='objPtrRef' type='^^{Tcl_Obj}'/>
<retval const='true' declared_type='char**' type='^*'/>
</function>
<function name='Tcl_FSFileAttrsGet'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='index' type='i'/>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj**' name='objPtrRef' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FSFileAttrsSet'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='index' type='i'/>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FSFileSystemInfo'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_FSGetCwd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_FSGetFileSystemForPath'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Filesystem*' type='^{Tcl_Filesystem=*i^{Tcl_FSVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
</function>
<function name='Tcl_FSGetInternalRep'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Filesystem*' name='fsPtr' type='^{Tcl_Filesystem=*i^{Tcl_FSVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='ClientData' type='^v'/>
</function>
<function name='Tcl_FSGetNativePath'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_FSGetNormalizedPath'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_FSGetPathType'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_PathType' type='i'/>
</function>
<function name='Tcl_FSGetTranslatedPath'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_FSGetTranslatedStringPath'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_FSJoinPath'>
<arg declared_type='Tcl_Obj*' name='listObj' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='elements' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_FSJoinToPath'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_FSLink'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='toPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='linkAction' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_FSListVolumes'>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_FSLoadFile'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' name='sym1' type='*'/>
<arg const='true' declared_type='char*' name='sym2' type='*'/>
<arg declared_type='Tcl_PackageInitProc**' name='proc1Ptr' type='^^?'/>
<arg declared_type='Tcl_PackageInitProc**' name='proc2Ptr' type='^^?'/>
<arg declared_type='Tcl_LoadHandle*' name='handlePtr' type='^^{Tcl_LoadHandle_}'/>
<arg declared_type='Tcl_FSUnloadFileProc**' name='unloadProcPtr' type='^^?'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FSLstat'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_StatBuf*' name='buf' type='^{stat=iSSQIIi{timespec=il}{timespec=il}{timespec=il}{timespec=il}qqiIIi[2q]}' type64='^{stat=iSSQIIi{timespec=qq}{timespec=qq}{timespec=qq}{timespec=qq}qqiIIi[2q]}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FSMatchInDirectory'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='result' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' name='pattern' type='*'/>
<arg declared_type='Tcl_GlobTypeData*' name='types' type='^{Tcl_GlobTypeData=ii^{Tcl_Obj}^{Tcl_Obj}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FSMountsChanged'>
<arg declared_type='Tcl_Filesystem*' name='fsPtr' type='^{Tcl_Filesystem=*i^{Tcl_FSVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_FSNewNativePath'>
<arg declared_type='Tcl_Filesystem*' name='fromFilesystem' type='^{Tcl_Filesystem=*i^{Tcl_FSVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_FSOpenFileChannel'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' name='modeString' type='*'/>
<arg declared_type='int' name='permissions' type='i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</function>
<function name='Tcl_FSPathSeparator'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_FSRegister'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Filesystem*' name='fsPtr' type='^{Tcl_Filesystem=*i^{Tcl_FSVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FSRemoveDirectory'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='recursive' type='i'/>
<arg declared_type='Tcl_Obj**' name='errorPtr' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FSRenameFile'>
<arg declared_type='Tcl_Obj*' name='srcPathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='destPathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FSSplitPath'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' name='lenPtr' type='^i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_FSStat'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_StatBuf*' name='buf' type='^{stat=iSSQIIi{timespec=il}{timespec=il}{timespec=il}{timespec=il}qqiIIi[2q]}' type64='^{stat=iSSQIIi{timespec=qq}{timespec=qq}{timespec=qq}{timespec=qq}qqiIIi[2q]}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FSUnregister'>
<arg declared_type='Tcl_Filesystem*' name='fsPtr' type='^{Tcl_Filesystem=*i^{Tcl_FSVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FSUtime'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='struct utimbuf*' name='tval' type='^{utimbuf=ii}' type64='^{utimbuf=qq}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FblockedObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FconfigureObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FcopyObjCmd'>
<arg declared_type='ClientData' name='dummy' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FileEventObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FileObjCmd'>
<arg declared_type='ClientData' name='dummy' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_Finalize'>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_FinalizeNotifier'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_FinalizeThread'>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_FindCommand'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='Tcl_Namespace*' name='contextNsPtr' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</function>
<function name='Tcl_FindEnsemble'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='cmdNameObj' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</function>
<function name='Tcl_FindExecutable'>
<arg const='true' declared_type='char*' name='argv0' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_FindHashEntry'>
<arg declared_type='Tcl_HashTable*' name='tablePtr' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<arg const='true' declared_type='char*' name='key' type='*'/>
<retval declared_type='Tcl_HashEntry*' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
</function>
<function name='Tcl_FindNamespace'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='Tcl_Namespace*' name='contextNsPtr' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
</function>
<function name='Tcl_FindNamespaceVar'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='Tcl_Namespace*' name='contextNsPtr' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='Tcl_Var' type='^{Tcl_Var_=}'/>
</function>
<function name='Tcl_FirstHashEntry'>
<arg declared_type='Tcl_HashTable*' name='tablePtr' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<arg declared_type='Tcl_HashSearch*' name='searchPtr' type='^{Tcl_HashSearch=^{Tcl_HashTable}i^{Tcl_HashEntry}}'/>
<retval declared_type='Tcl_HashEntry*' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
</function>
<function name='Tcl_Flush'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_FlushObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ForObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ForeachObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ForgetImport'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Namespace*' name='nsPtr' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg const='true' declared_type='char*' name='pattern' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_Format'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='format' type='*'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_FormatObjCmd'>
<arg declared_type='ClientData' name='dummy' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_Free'>
<arg declared_type='char*' name='ptr' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_FreeEncoding'>
<arg declared_type='Tcl_Encoding' name='encoding' type='^{Tcl_Encoding_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_FreeParse'>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_FreeResult'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_GetAlias'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='slaveCmd' type='*'/>
<arg declared_type='Tcl_Interp**' name='targetInterpPtr' type='^^{Tcl_Interp}'/>
<arg const='true' declared_type='char**' name='targetCmdPtr' type='^*'/>
<arg declared_type='int*' name='argcPtr' type='^i'/>
<arg const='true' declared_type='char***' name='argvPtr' type='^^*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetAliasObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='slaveCmd' type='*'/>
<arg declared_type='Tcl_Interp**' name='targetInterpPtr' type='^^{Tcl_Interp}'/>
<arg const='true' declared_type='char**' name='targetCmdPtr' type='^*'/>
<arg declared_type='int*' name='objcPtr' type='^i'/>
<arg declared_type='Tcl_Obj***' name='objv' type='^^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetAllocMutex'>
<retval declared_type='Tcl_Mutex*' type='^^{Tcl_Mutex_}'/>
</function>
<function name='Tcl_GetAssocData'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='Tcl_InterpDeleteProc**' name='procPtr' type='^^?'/>
<retval declared_type='ClientData' type='^v'/>
</function>
<function name='Tcl_GetBignumFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='obj' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='mp_int*' name='value' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetBoolean'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int*' name='boolPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetBooleanFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' name='boolPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetByteArrayFromObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' name='lengthPtr' type='^i'/>
<retval declared_type='unsigned char*' type='*'/>
</function>
<function name='Tcl_GetChannel'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='chanName' type='*'/>
<arg declared_type='int*' name='modePtr' type='^i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</function>
<function name='Tcl_GetChannelBufferSize'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetChannelError'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_Obj**' name='msg' type='^^{Tcl_Obj}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_GetChannelErrorInterp'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj**' name='msg' type='^^{Tcl_Obj}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_GetChannelHandle'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg declared_type='int' name='direction' type='i'/>
<arg declared_type='ClientData*' name='handlePtr' type='^^v'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetChannelInstanceData'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval declared_type='ClientData' type='^v'/>
</function>
<function name='Tcl_GetChannelMode'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetChannelName'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_GetChannelNames'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetChannelNamesEx'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='pattern' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetChannelOption'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg const='true' declared_type='char*' name='optionName' type='*'/>
<arg declared_type='Tcl_DString*' name='dsPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetChannelThread'>
<arg declared_type='Tcl_Channel' name='channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='Tcl_ThreadId' type='^{Tcl_ThreadId_=}'/>
</function>
<function name='Tcl_GetChannelType'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval declared_type='Tcl_ChannelType*' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
</function>
<function name='Tcl_GetCharLength'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetCommandFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Command' type='^{Tcl_Command_=}'/>
</function>
<function name='Tcl_GetCommandFullName'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' name='command' type='^{Tcl_Command_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_GetCommandInfo'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='cmdName' type='*'/>
<arg declared_type='Tcl_CmdInfo*' name='infoPtr' type='^{Tcl_CmdInfo=i^?^v^?^v^?^v^{Tcl_Namespace}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetCommandInfoFromToken'>
<arg declared_type='Tcl_Command' name='token' type='^{Tcl_Command_=}'/>
<arg declared_type='Tcl_CmdInfo*' name='infoPtr' type='^{Tcl_CmdInfo=i^?^v^?^v^?^v^{Tcl_Namespace}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetCommandName'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' name='command' type='^{Tcl_Command_=}'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_GetCurrentNamespace'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
</function>
<function name='Tcl_GetCurrentThread'>
<retval declared_type='Tcl_ThreadId' type='^{Tcl_ThreadId_=}'/>
</function>
<function name='Tcl_GetCwd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_DString*' name='cwdPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_GetDefaultEncodingDir'>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_GetDouble'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='double*' name='doublePtr' type='^d'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetDoubleFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='double*' name='doublePtr' type='^d'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetEncoding'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='Tcl_Encoding' type='^{Tcl_Encoding_=}'/>
</function>
<function name='Tcl_GetEncodingFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Encoding*' name='encodingPtr' type='^^{Tcl_Encoding_}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetEncodingName'>
<arg declared_type='Tcl_Encoding' name='encoding' type='^{Tcl_Encoding_=}'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_GetEncodingNameFromEnvironment'>
<arg declared_type='Tcl_DString*' name='bufPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_GetEncodingNames'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_GetEncodingSearchPath'>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_GetEnsembleFlags'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' name='token' type='^{Tcl_Command_=}'/>
<arg declared_type='int*' name='flagsPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetEnsembleMappingDict'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' name='token' type='^{Tcl_Command_=}'/>
<arg declared_type='Tcl_Obj**' name='mapDictPtr' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetEnsembleNamespace'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' name='token' type='^{Tcl_Command_=}'/>
<arg declared_type='Tcl_Namespace**' name='namespacePtrPtr' type='^^{Tcl_Namespace}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetEnsembleSubcommandList'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' name='token' type='^{Tcl_Command_=}'/>
<arg declared_type='Tcl_Obj**' name='subcmdListPtr' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetEnsembleUnknownHandler'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' name='token' type='^{Tcl_Command_=}'/>
<arg declared_type='Tcl_Obj**' name='unknownListPtr' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetErrno'>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetGlobalNamespace'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Tcl_Namespace*' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
</function>
<function name='Tcl_GetHostName'>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_GetIndexFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char**' name='tablePtr' type='^*'/>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='int*' name='indexPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetIndexFromObjStruct'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='void*' name='tablePtr' type='^v'/>
<arg declared_type='int' name='offset' type='i'/>
<arg const='true' declared_type='char*' name='msg' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='int*' name='indexPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetInt'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int*' name='intPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetIntFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' name='intPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetInterpPath'>
<arg declared_type='Tcl_Interp*' name='askInterp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Interp*' name='slaveInterp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetInterpResolvers'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='int*' name='resInfo' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetLongFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='long*' name='longPtr' type='^l' type64='^q'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetMaster'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
</function>
<function name='Tcl_GetMathFuncInfo'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='int*' name='numArgsPtr' type='^i'/>
<arg declared_type='Tcl_ValueType**' name='argTypesPtr' type='^^i'/>
<arg declared_type='Tcl_MathProc**' name='procPtr' type='^^?'/>
<arg declared_type='ClientData*' name='clientDataPtr' type='^^v'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetNameOfExecutable'>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_GetNamespaceResolvers'>
<arg declared_type='Tcl_Namespace*' name='namespacePtr' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int*' name='resInfo' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetNamespaceUnknownHandler'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Namespace*' name='nsPtr' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_GetObjResult'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_GetObjType'>
<arg const='true' declared_type='char*' name='typeName' type='*'/>
<retval declared_type='Tcl_ObjType*' type='^{Tcl_ObjType=*^?^?^?^?}'/>
</function>
<function name='Tcl_GetOpenFile'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='chanID' type='*'/>
<arg declared_type='int' name='forWriting' type='i'/>
<arg declared_type='int' name='checkUsage' type='i'/>
<arg declared_type='ClientData*' name='filePtr' type='^^v'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetPathType'>
<arg const='true' declared_type='char*' name='path' type='*'/>
<retval declared_type='Tcl_PathType' type='i'/>
</function>
<function name='Tcl_GetRange'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='first' type='i'/>
<arg declared_type='int' name='last' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_GetRegExpFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='patObj' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='Tcl_RegExp' type='^{Tcl_RegExp_=}'/>
</function>
<function name='Tcl_GetReturnOptions'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='result' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_GetServiceMode'>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetSlave'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='slaveName' type='*'/>
<retval declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
</function>
<function name='Tcl_GetStackedChannel'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</function>
<function name='Tcl_GetStartupScript'>
<arg const='true' declared_type='char**' name='encodingNamePtr' type='^*'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_GetStdChannel'>
<arg declared_type='int' name='type' type='i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</function>
<function name='Tcl_GetString'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_GetStringFromObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' name='lengthPtr' type='^i'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_GetStringResult'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_GetThreadData'>
<arg declared_type='Tcl_ThreadDataKey*' name='keyPtr' type='^^{Tcl_ThreadDataKey_}'/>
<arg declared_type='int' name='size' type='i'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='Tcl_GetTime'>
<arg declared_type='Tcl_Time*' name='timeBuf' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_GetTopChannel'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</function>
<function name='Tcl_GetUniChar'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='index' type='i'/>
<retval declared_type='Tcl_UniChar' type='S'/>
</function>
<function name='Tcl_GetUnicode'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_UniChar*' type='^S'/>
</function>
<function name='Tcl_GetUnicodeFromObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' name='lengthPtr' type='^i'/>
<retval declared_type='Tcl_UniChar*' type='^S'/>
</function>
<function name='Tcl_GetVar'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='varName' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_GetVar2'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='part1' type='*'/>
<arg const='true' declared_type='char*' name='part2' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_GetVar2Ex'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='part1' type='*'/>
<arg const='true' declared_type='char*' name='part2' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_GetVariableFullName'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Var' name='variable' type='^{Tcl_Var_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_GetVersion'>
<arg declared_type='int*' name='major' type='^i'/>
<arg declared_type='int*' name='minor' type='^i'/>
<arg declared_type='int*' name='patchLevel' type='^i'/>
<arg declared_type='int*' name='type' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_GetWideIntFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_WideInt*' name='widePtr' type='^q'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_Gets'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_DString*' name='dsPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetsObj'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GetsObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GlobObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GlobalEval'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='command' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GlobalEvalObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_GlobalObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_HashStats'>
<arg declared_type='Tcl_HashTable*' name='tablePtr' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_HideCommand'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='cmdName' type='*'/>
<arg const='true' declared_type='char*' name='hiddenCmdToken' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_IfObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_Import'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Namespace*' name='nsPtr' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg const='true' declared_type='char*' name='pattern' type='*'/>
<arg declared_type='int' name='allowOverwrite' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_IncrObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_IncrRefCount'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_Init'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_InitBignumFromDouble'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='double' name='initval' type='d'/>
<arg declared_type='mp_int*' name='toInit' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_InitCustomHashTable'>
<arg declared_type='Tcl_HashTable*' name='tablePtr' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<arg declared_type='int' name='keyType' type='i'/>
<arg declared_type='Tcl_HashKeyType*' name='typePtr' type='^{Tcl_HashKeyType=ii^?^?^?^?}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_InitHashTable'>
<arg declared_type='Tcl_HashTable*' name='tablePtr' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<arg declared_type='int' name='keyType' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_InitMemory'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_InitNotifier'>
<retval declared_type='ClientData' type='^v'/>
</function>
<function name='Tcl_InitObjHashTable'>
<arg declared_type='Tcl_HashTable*' name='tablePtr' type='^{Tcl_HashTable=^^{Tcl_HashEntry}[4^{Tcl_HashEntry}]iiiiii^?^?^{Tcl_HashKeyType}}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_InitStubs'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='version' type='*'/>
<arg declared_type='int' name='exact' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_InputBlocked'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_InputBuffered'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_InterpDeleted'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_InterpObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='argc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_InvalidateStringRep'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_IsChannelExisting'>
<arg const='true' declared_type='char*' name='channelName' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_IsChannelRegistered'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' name='channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_IsChannelShared'>
<arg declared_type='Tcl_Channel' name='channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_IsEnsemble'>
<arg declared_type='Tcl_Command' name='token' type='^{Tcl_Command_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_IsSafe'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_IsShared'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_IsStandardChannel'>
<arg declared_type='Tcl_Channel' name='channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_JoinObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_JoinPath'>
<arg declared_type='int' name='argc' type='i'/>
<arg const='true' declared_type='char **' name='argv' type='^*'/>
<arg declared_type='Tcl_DString*' name='resultPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_JoinThread'>
<arg declared_type='Tcl_ThreadId' name='threadId' type='^{Tcl_ThreadId_=}'/>
<arg declared_type='int*' name='result' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LappendObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LassignObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LimitAddHandler'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='type' type='i'/>
<arg declared_type='Tcl_LimitHandlerProc*' function_pointer='true' name='handlerProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_LimitHandlerDeleteProc*' function_pointer='true' name='deleteProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_LimitCheck'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LimitExceeded'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LimitGetCommands'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LimitGetGranularity'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='type' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LimitGetTime'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Time*' name='timeLimitPtr' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_LimitReady'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LimitRemoveHandler'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='type' type='i'/>
<arg declared_type='Tcl_LimitHandlerProc*' function_pointer='true' name='handlerProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_LimitSetCommands'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='commandLimit' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_LimitSetGranularity'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='type' type='i'/>
<arg declared_type='int' name='granularity' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_LimitSetTime'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Time*' name='timeLimitPtr' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_LimitTypeEnabled'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='type' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LimitTypeExceeded'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='type' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LimitTypeReset'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='type' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_LimitTypeSet'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='type' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_LindexObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LinkVar'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='varName' type='*'/>
<arg declared_type='char*' name='addr' type='*'/>
<arg declared_type='int' name='type' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LinsertObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ListMathFuncs'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='pattern' type='*'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_ListObjAppendElement'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='listPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ListObjAppendList'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='listPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='elemListPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ListObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ListObjGetElements'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='listPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' name='objcPtr' type='^i'/>
<arg declared_type='Tcl_Obj***' name='objvPtr' type='^^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ListObjIndex'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='listPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='index' type='i'/>
<arg declared_type='Tcl_Obj**' name='objPtrPtr' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ListObjLength'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='listPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' name='lengthPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ListObjReplace'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='listPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='first' type='i'/>
<arg declared_type='int' name='count' type='i'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LlengthObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LoadObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LogCommandInfo'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='script' type='*'/>
<arg const='true' declared_type='char*' name='command' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_LrangeObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LrepeatObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LreplaceObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LreverseObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LsearchObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LsetObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_LsortObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_Main'>
<arg declared_type='int' name='argc' type='i'/>
<arg declared_type='char**' name='argv' type='^*'/>
<arg declared_type='Tcl_AppInitProc*' function_pointer='true' name='appInitProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_MakeFileChannel'>
<arg declared_type='ClientData' name='handle' type='^v'/>
<arg declared_type='int' name='mode' type='i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</function>
<function name='Tcl_MakeSafe'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_MakeTcpClientChannel'>
<arg declared_type='ClientData' name='tcpSocket' type='^v'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</function>
<function name='Tcl_Merge'>
<arg declared_type='int' name='argc' type='i'/>
<arg const='true' declared_type='char **' name='argv' type='^*'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_MutexFinalize'>
<arg declared_type='Tcl_Mutex*' name='mutex' type='^^{Tcl_Mutex_}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_MutexLock'>
<arg declared_type='Tcl_Mutex*' name='mutexPtr' type='^^{Tcl_Mutex_}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_MutexUnlock'>
<arg declared_type='Tcl_Mutex*' name='mutexPtr' type='^^{Tcl_Mutex_}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_NamespaceObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_NewBignumObj'>
<arg declared_type='mp_int*' name='value' type='^{mp_int=iii^I}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_NewBooleanObj'>
<arg declared_type='int' name='boolValue' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_NewByteArrayObj'>
<arg const='true' declared_type='unsigned char*' name='bytes' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_NewDictObj'>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_NewDoubleObj'>
<arg declared_type='double' name='doubleValue' type='d'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_NewIntObj'>
<arg declared_type='int' name='intValue' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_NewListObj'>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_NewLongObj'>
<arg declared_type='long' name='longValue' type='l' type64='q'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_NewObj'>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_NewStringObj'>
<arg const='true' declared_type='char*' name='bytes' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_NewUnicodeObj'>
<arg const='true' declared_type='Tcl_UniChar*' name='unicode' type='^S'/>
<arg declared_type='int' name='numChars' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_NewWideIntObj'>
<arg declared_type='Tcl_WideInt' name='wideValue' type='q'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_NextHashEntry'>
<arg declared_type='Tcl_HashSearch*' name='searchPtr' type='^{Tcl_HashSearch=^{Tcl_HashTable}i^{Tcl_HashEntry}}'/>
<retval declared_type='Tcl_HashEntry*' type='^{Tcl_HashEntry=^{Tcl_HashEntry}^{Tcl_HashTable}^v^v(?=*^{Tcl_Obj}[1i][4c])}'/>
</function>
<function name='Tcl_NotifyChannel'>
<arg declared_type='Tcl_Channel' name='channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='int' name='mask' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_NumUtfChars'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ObjGetVar2'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='part1Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='part2Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_ObjPrintf' variadic='true'>
<arg const='true' declared_type='char*' name='format' type='*'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_ObjSetVar2'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='part1Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='part2Ptr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='newValuePtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_OpenCommandChannel'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='argc' type='i'/>
<arg const='true' declared_type='char**' name='argv' type='^*'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</function>
<function name='Tcl_OpenFileChannel'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='fileName' type='*'/>
<arg const='true' declared_type='char*' name='modeString' type='*'/>
<arg declared_type='int' name='permissions' type='i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</function>
<function name='Tcl_OpenObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_OpenTcpClient'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='port' type='i'/>
<arg const='true' declared_type='char*' name='address' type='*'/>
<arg const='true' declared_type='char*' name='myaddr' type='*'/>
<arg declared_type='int' name='myport' type='i'/>
<arg declared_type='int' name='async' type='i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</function>
<function name='Tcl_OpenTcpServer'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='port' type='i'/>
<arg const='true' declared_type='char*' name='host' type='*'/>
<arg declared_type='Tcl_TcpAcceptProc*' function_pointer='true' name='acceptProc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='callbackData' type='^v'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</function>
<function name='Tcl_OutputBuffered'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_PackageObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_Panic' variadic='true'>
<arg const='true' declared_type='char*' name='format' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_PanicVA'>
<arg const='true' declared_type='char*' name='format' type='*'/>
<arg declared_type='va_list' declared_type64='struct __va_list_tag*' name='argList' type='*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_ParseBraces'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='start' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='int' name='append' type='i'/>
<arg const='true' declared_type='char**' name='termPtr' type='^*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ParseCommand'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='start' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<arg declared_type='int' name='nested' type='i'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ParseExpr'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='start' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ParseQuotedString'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='start' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='int' name='append' type='i'/>
<arg const='true' declared_type='char**' name='termPtr' type='^*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ParseVar'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='start' type='*'/>
<arg const='true' declared_type='char**' name='termPtr' type='^*'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_ParseVarName'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='start' type='*'/>
<arg declared_type='int' name='numBytes' type='i'/>
<arg declared_type='Tcl_Parse*' name='parsePtr' type='^{Tcl_Parse=*i*ii^{Tcl_Token}iii**^{Tcl_Interp}*i[20{Tcl_Token=i*ii}]}'/>
<arg declared_type='int' name='append' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_PidObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_PkgInitStubsCheck'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='version' type='*'/>
<arg declared_type='int' name='exact' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_PkgPresent'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg const='true' declared_type='char*' name='version' type='*'/>
<arg declared_type='int' name='exact' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_PkgPresentEx'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg const='true' declared_type='char*' name='version' type='*'/>
<arg declared_type='int' name='exact' type='i'/>
<arg declared_type='ClientData*' name='clientDataPtr' type='^^v'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_PkgProvide'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg const='true' declared_type='char*' name='version' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_PkgProvideEx'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg const='true' declared_type='char*' name='version' type='*'/>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_PkgRequire'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg const='true' declared_type='char*' name='version' type='*'/>
<arg declared_type='int' name='exact' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_PkgRequireEx'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg const='true' declared_type='char*' name='version' type='*'/>
<arg declared_type='int' name='exact' type='i'/>
<arg declared_type='ClientData*' name='clientDataPtr' type='^^v'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_PkgRequireProc'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<arg declared_type='ClientData*' name='clientDataPtr' type='^^v'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_PopCallFrame'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_PosixError'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_Preserve'>
<arg declared_type='ClientData' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_PrintDouble'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='double' name='value' type='d'/>
<arg declared_type='char*' name='dst' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_ProcObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_PushCallFrame'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_CallFrame*' name='framePtr' type='^{Tcl_CallFrame=^{Tcl_Namespace}ii^v^v^vi^v^vi^v^v^v^v}'/>
<arg declared_type='Tcl_Namespace*' name='nsPtr' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int' name='isProcCallFrame' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_PutEnv'>
<arg const='true' declared_type='char*' name='assignment' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_PutsObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_PwdObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_QueryTimeProc'>
<arg declared_type='Tcl_GetTimeProc**' name='getProc' type='^^?'/>
<arg declared_type='Tcl_ScaleTimeProc**' name='scaleProc' type='^^?'/>
<arg declared_type='ClientData*' name='clientData' type='^^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_QueueEvent'>
<arg declared_type='Tcl_Event*' name='evPtr' type='^{Tcl_Event=^?^{Tcl_Event}}'/>
<arg declared_type='Tcl_QueuePosition' name='position' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_Read'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg declared_type='char*' name='bufPtr' type='*'/>
<arg declared_type='int' name='toRead' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ReadChars'>
<arg declared_type='Tcl_Channel' name='channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='charsToRead' type='i'/>
<arg declared_type='int' name='appendFlag' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ReadObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ReadRaw'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg declared_type='char*' name='dst' type='*'/>
<arg declared_type='int' name='bytesToRead' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_Realloc'>
<arg declared_type='char*' name='ptr' type='*'/>
<arg declared_type='unsigned int' name='size' type='I'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_ReapDetachedProcs'>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_RecordAndEval'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='cmd' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_RecordAndEvalObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='cmdPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_RegExpCompile'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='pattern' type='*'/>
<retval declared_type='Tcl_RegExp' type='^{Tcl_RegExp_=}'/>
</function>
<function name='Tcl_RegExpExec'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_RegExp' name='regexp' type='^{Tcl_RegExp_=}'/>
<arg const='true' declared_type='char*' name='text' type='*'/>
<arg const='true' declared_type='char*' name='start' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_RegExpExecObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_RegExp' name='regexp' type='^{Tcl_RegExp_=}'/>
<arg declared_type='Tcl_Obj*' name='textObj' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='offset' type='i'/>
<arg declared_type='int' name='nmatches' type='i'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_RegExpGetInfo'>
<arg declared_type='Tcl_RegExp' name='regexp' type='^{Tcl_RegExp_=}'/>
<arg declared_type='Tcl_RegExpInfo*' name='infoPtr' type='^{Tcl_RegExpInfo=i^{Tcl_RegExpIndices}ll}' type64='^{Tcl_RegExpInfo=i^{Tcl_RegExpIndices}qq}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_RegExpMatch'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='text' type='*'/>
<arg const='true' declared_type='char*' name='pattern' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_RegExpMatchObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='textObj' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='patternObj' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_RegExpRange'>
<arg declared_type='Tcl_RegExp' name='regexp' type='^{Tcl_RegExp_=}'/>
<arg declared_type='int' name='index' type='i'/>
<arg const='true' declared_type='char**' name='startPtr' type='^*'/>
<arg const='true' declared_type='char**' name='endPtr' type='^*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_RegexpObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_RegisterChannel'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_RegisterConfig'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='pkgName' type='*'/>
<arg declared_type='Tcl_Config*' name='configuration' type='^{Tcl_Config=**}'/>
<arg const='true' declared_type='char*' name='valEncoding' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_RegisterObjType'>
<arg declared_type='Tcl_ObjType*' name='typePtr' type='^{Tcl_ObjType=*^?^?^?^?}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_RegsubObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_Release'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_RemoveInterpResolvers'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_RenameObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ResetResult'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_RestoreInterpState'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_InterpState' name='state' type='^{Tcl_InterpState_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_RestoreResult'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_SavedResult*' name='statePtr' type='^{Tcl_SavedResult=*^?^{Tcl_Obj}*ii[201c]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_ReturnObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SaveInterpState'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='status' type='i'/>
<retval declared_type='Tcl_InterpState' type='^{Tcl_InterpState_=}'/>
</function>
<function name='Tcl_SaveResult'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_SavedResult*' name='statePtr' type='^{Tcl_SavedResult=*^?^{Tcl_Obj}*ii[201c]}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_ScanCountedElement'>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<arg declared_type='int*' name='flagPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ScanElement'>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg declared_type='int*' name='flagPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ScanObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_Seek'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_WideInt' name='offset' type='q'/>
<arg declared_type='int' name='mode' type='i'/>
<retval declared_type='Tcl_WideInt' type='q'/>
</function>
<function name='Tcl_SeekObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SeekOld'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg declared_type='int' name='offset' type='i'/>
<arg declared_type='int' name='mode' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ServiceAll'>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ServiceEvent'>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ServiceModeHook'>
<arg declared_type='int' name='mode' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetAssocData'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='Tcl_InterpDeleteProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetBignumObj'>
<arg declared_type='Tcl_Obj*' name='obj' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='mp_int*' name='value' type='^{mp_int=iii^I}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetBooleanObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='boolValue' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetByteArrayLength'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='length' type='i'/>
<retval declared_type='unsigned char*' type='*'/>
</function>
<function name='Tcl_SetByteArrayObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='unsigned char*' name='bytes' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetChannelBufferSize'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg declared_type='int' name='sz' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetChannelError'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_Obj*' name='msg' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetChannelErrorInterp'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='msg' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetChannelOption'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg const='true' declared_type='char*' name='optionName' type='*'/>
<arg const='true' declared_type='char*' name='newValue' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SetCommandInfo'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='cmdName' type='*'/>
<arg const='true' declared_type='Tcl_CmdInfo*' name='infoPtr' type='^{Tcl_CmdInfo=i^?^v^?^v^?^v^{Tcl_Namespace}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SetCommandInfoFromToken'>
<arg declared_type='Tcl_Command' name='token' type='^{Tcl_Command_=}'/>
<arg const='true' declared_type='Tcl_CmdInfo*' name='infoPtr' type='^{Tcl_CmdInfo=i^?^v^?^v^?^v^{Tcl_Namespace}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SetDefaultEncodingDir'>
<arg const='true' declared_type='char*' name='path' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetDoubleObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='double' name='doubleValue' type='d'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetEncodingSearchPath'>
<arg declared_type='Tcl_Obj*' name='searchPath' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SetEnsembleFlags'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' name='token' type='^{Tcl_Command_=}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SetEnsembleMappingDict'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' name='token' type='^{Tcl_Command_=}'/>
<arg declared_type='Tcl_Obj*' name='mapDict' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SetEnsembleSubcommandList'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' name='token' type='^{Tcl_Command_=}'/>
<arg declared_type='Tcl_Obj*' name='subcmdList' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SetEnsembleUnknownHandler'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Command' name='token' type='^{Tcl_Command_=}'/>
<arg declared_type='Tcl_Obj*' name='unknownList' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SetErrno'>
<arg declared_type='int' name='err' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetErrorCode' variadic='true'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetErrorCodeVA'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='va_list' declared_type64='struct __va_list_tag*' name='argList' type='*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetExitProc'>
<arg declared_type='Tcl_ExitProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='Tcl_ExitProc*' function_pointer='true' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</retval>
</function>
<function name='Tcl_SetIntObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='intValue' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetListObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetLongObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='long' name='longValue' type='l' type64='q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetMainLoop'>
<arg declared_type='Tcl_MainLoopProc*' function_pointer='true' name='proc' type='^?'>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetMaxBlockTime'>
<arg declared_type='Tcl_Time*' name='timePtr' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetNamespaceResolvers'>
<arg declared_type='Tcl_Namespace*' name='namespacePtr' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='int*' name='cmdProc' type='^i'/>
<arg declared_type='int*' name='varProc' type='^i'/>
<arg declared_type='int*' name='compiledVarProc' type='^i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetNamespaceUnknownHandler'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Namespace*' name='nsPtr' type='^{Tcl_Namespace=**^v^?^{Tcl_Namespace}}'/>
<arg declared_type='Tcl_Obj*' name='handlerPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SetNotifier'>
<arg declared_type='Tcl_NotifierProcs*' name='notifierProcPtr' type='^{Tcl_NotifierProcs=^?^?^?^?^?^?^?^?}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SetObjErrorCode'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='errorObjPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetObjLength'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='length' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetObjResult'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='resultObjPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetPanicProc'>
<arg declared_type='Tcl_PanicProc*' function_pointer='true' name='panicProc' type='^?'>
<arg const='true' declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetRecursionLimit'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='depth' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SetResult'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' name='result' type='*'/>
<arg declared_type='Tcl_FreeProc*' function_pointer='true' name='freeProc' type='^?'>
<arg declared_type='char*' type='*'/>
<retval declared_type='void' type='v'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetReturnOptions'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='options' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SetServiceMode'>
<arg declared_type='int' name='mode' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SetStartupScript'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' name='encodingName' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetStdChannel'>
<arg declared_type='Tcl_Channel' name='channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='int' name='type' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetStringObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' name='bytes' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetSystemEncoding'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SetTimeProc'>
<arg declared_type='Tcl_GetTimeProc*' function_pointer='true' name='getProc' type='^?'>
<arg declared_type='Tcl_Time*' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='Tcl_ScaleTimeProc*' function_pointer='true' name='scaleProc' type='^?'>
<arg declared_type='Tcl_Time*' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetTimer'>
<arg declared_type='Tcl_Time*' name='timePtr' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetUnicodeObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='Tcl_UniChar*' name='unicode' type='^S'/>
<arg declared_type='int' name='numChars' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SetVar'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='varName' type='*'/>
<arg const='true' declared_type='char*' name='newValue' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_SetVar2'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='part1' type='*'/>
<arg const='true' declared_type='char*' name='part2' type='*'/>
<arg const='true' declared_type='char*' name='newValue' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_SetVar2Ex'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='part1' type='*'/>
<arg const='true' declared_type='char*' name='part2' type='*'/>
<arg declared_type='Tcl_Obj*' name='newValuePtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_SetWideIntObj'>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_WideInt' name='wideValue' type='q'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SignalId'>
<arg declared_type='int' name='sig' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_SignalMsg'>
<arg declared_type='int' name='sig' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_Sleep'>
<arg declared_type='int' name='ms' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SocketObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SourceObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SourceRCFile'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SpliceChannel'>
<arg declared_type='Tcl_Channel' name='channel' type='^{Tcl_Channel_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_SplitList'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='listStr' type='*'/>
<arg declared_type='int*' name='argcPtr' type='^i'/>
<arg const='true' declared_type='char***' name='argvPtr' type='^^*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SplitObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SplitPath'>
<arg const='true' declared_type='char*' name='path' type='*'/>
<arg declared_type='int*' name='argcPtr' type='^i'/>
<arg const='true' declared_type='char***' name='argvPtr' type='^^*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_StackChannel'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_ChannelType*' name='typePtr' type='^{Tcl_ChannelType=*^{Tcl_ChannelTypeVersion_}^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
<arg declared_type='ClientData' name='instanceData' type='^v'/>
<arg declared_type='int' name='mask' type='i'/>
<arg declared_type='Tcl_Channel' name='prevChan' type='^{Tcl_Channel_=}'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</function>
<function name='Tcl_Stat'>
<arg const='true' declared_type='char*' name='path' type='*'/>
<arg declared_type='struct stat*' name='bufPtr' type='^{stat=iSSQIIi{timespec=il}{timespec=il}{timespec=il}{timespec=il}qqiIIi[2q]}' type64='^{stat=iSSQIIi{timespec=qq}{timespec=qq}{timespec=qq}{timespec=qq}qqiIIi[2q]}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_StaticPackage'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='pkgName' type='*'/>
<arg declared_type='Tcl_PackageInitProc*' function_pointer='true' name='initProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</arg>
<arg declared_type='Tcl_PackageInitProc*' function_pointer='true' name='safeInitProc' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</arg>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_StringCaseMatch'>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg const='true' declared_type='char*' name='pattern' type='*'/>
<arg declared_type='int' name='nocase' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_StringMatch'>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg const='true' declared_type='char*' name='pattern' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SubstObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='Tcl_SubstObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_SwitchObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_TakeBignumFromObj'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='obj' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='mp_int*' name='value' type='^{mp_int=iii^I}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_Tell'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval declared_type='Tcl_WideInt' type='q'/>
</function>
<function name='Tcl_TellObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_TellOld'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ThreadAlert'>
<arg declared_type='Tcl_ThreadId' name='threadId' type='^{Tcl_ThreadId_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_ThreadQueueEvent'>
<arg declared_type='Tcl_ThreadId' name='threadId' type='^{Tcl_ThreadId_=}'/>
<arg declared_type='Tcl_Event*' name='evPtr' type='^{Tcl_Event=^?^{Tcl_Event}}'/>
<arg declared_type='Tcl_QueuePosition' name='position' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_TimeObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_TraceCommand'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='varName' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='Tcl_CommandTraceProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_TraceObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_TraceVar'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='varName' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='Tcl_VarTraceProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_TraceVar2'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='part1' type='*'/>
<arg const='true' declared_type='char*' name='part2' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='Tcl_VarTraceProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_TranslateFileName'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='Tcl_DString*' name='bufferPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_TruncateChannel'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_WideInt' name='length' type='q'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_Ungets'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg const='true' declared_type='char*' name='str' type='*'/>
<arg declared_type='int' name='len' type='i'/>
<arg declared_type='int' name='atHead' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UniCharAtIndex'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int' name='index' type='i'/>
<retval declared_type='Tcl_UniChar' type='S'/>
</function>
<function name='Tcl_UniCharCaseMatch'>
<arg const='true' declared_type='Tcl_UniChar*' name='uniStr' type='^S'/>
<arg const='true' declared_type='Tcl_UniChar*' name='uniPattern' type='^S'/>
<arg declared_type='int' name='nocase' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UniCharIsAlnum'>
<arg declared_type='int' name='ch' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UniCharIsAlpha'>
<arg declared_type='int' name='ch' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UniCharIsControl'>
<arg declared_type='int' name='ch' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UniCharIsDigit'>
<arg declared_type='int' name='ch' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UniCharIsGraph'>
<arg declared_type='int' name='ch' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UniCharIsLower'>
<arg declared_type='int' name='ch' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UniCharIsPrint'>
<arg declared_type='int' name='ch' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UniCharIsPunct'>
<arg declared_type='int' name='ch' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UniCharIsSpace'>
<arg declared_type='int' name='ch' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UniCharIsUpper'>
<arg declared_type='int' name='ch' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UniCharIsWordChar'>
<arg declared_type='int' name='ch' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UniCharLen'>
<arg const='true' declared_type='Tcl_UniChar*' name='uniStr' type='^S'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UniCharNcasecmp'>
<arg const='true' declared_type='Tcl_UniChar*' name='ucs' type='^S'/>
<arg const='true' declared_type='Tcl_UniChar*' name='uct' type='^S'/>
<arg declared_type='unsigned long' name='numChars' type='L' type64='Q'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UniCharNcmp'>
<arg const='true' declared_type='Tcl_UniChar*' name='ucs' type='^S'/>
<arg const='true' declared_type='Tcl_UniChar*' name='uct' type='^S'/>
<arg declared_type='unsigned long' name='numChars' type='L' type64='Q'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UniCharToLower'>
<arg declared_type='int' name='ch' type='i'/>
<retval declared_type='Tcl_UniChar' type='S'/>
</function>
<function name='Tcl_UniCharToTitle'>
<arg declared_type='int' name='ch' type='i'/>
<retval declared_type='Tcl_UniChar' type='S'/>
</function>
<function name='Tcl_UniCharToUpper'>
<arg declared_type='int' name='ch' type='i'/>
<retval declared_type='Tcl_UniChar' type='S'/>
</function>
<function name='Tcl_UniCharToUtf'>
<arg declared_type='int' name='ch' type='i'/>
<arg declared_type='char*' name='buf' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UniCharToUtfDString'>
<arg const='true' declared_type='Tcl_UniChar*' name='uniStr' type='^S'/>
<arg declared_type='int' name='uniLength' type='i'/>
<arg declared_type='Tcl_DString*' name='dsPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_UnlinkVar'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='varName' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_UnloadObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UnregisterChannel'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UnsetObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UnsetVar'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='varName' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UnsetVar2'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='part1' type='*'/>
<arg const='true' declared_type='char*' name='part2' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UnstackChannel'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UntraceCommand'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='varName' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='Tcl_CommandTraceProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_UntraceVar'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='varName' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='Tcl_VarTraceProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_UntraceVar2'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='part1' type='*'/>
<arg const='true' declared_type='char*' name='part2' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='Tcl_VarTraceProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_UpVar'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='frameName' type='*'/>
<arg const='true' declared_type='char*' name='varName' type='*'/>
<arg const='true' declared_type='char*' name='localName' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UpVar2'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='frameName' type='*'/>
<arg const='true' declared_type='char*' name='part1' type='*'/>
<arg const='true' declared_type='char*' name='part2' type='*'/>
<arg const='true' declared_type='char*' name='localName' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UpdateLinkedVar'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='varName' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_UpdateObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UplevelObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UpvarObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UtfAtIndex'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int' name='index' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_UtfBackslash'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int*' name='readPtr' type='^i'/>
<arg declared_type='char*' name='dst' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UtfCharComplete'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UtfFindFirst'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int' name='ch' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_UtfFindLast'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int' name='ch' type='i'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_UtfNcasecmp'>
<arg const='true' declared_type='char*' name='s1' type='*'/>
<arg const='true' declared_type='char*' name='s2' type='*'/>
<arg declared_type='unsigned long' name='n' type='L' type64='Q'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UtfNcmp'>
<arg const='true' declared_type='char*' name='s1' type='*'/>
<arg const='true' declared_type='char*' name='s2' type='*'/>
<arg declared_type='unsigned long' name='n' type='L' type64='Q'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UtfNext'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_UtfPrev'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg const='true' declared_type='char*' name='start' type='*'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='Tcl_UtfToExternal'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Encoding' name='encoding' type='^{Tcl_Encoding_=}'/>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int' name='srcLen' type='i'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='Tcl_EncodingState*' name='statePtr' type='^^{Tcl_EncodingState_}'/>
<arg declared_type='char*' name='dst' type='*'/>
<arg declared_type='int' name='dstLen' type='i'/>
<arg declared_type='int*' name='srcReadPtr' type='^i'/>
<arg declared_type='int*' name='dstWrotePtr' type='^i'/>
<arg declared_type='int*' name='dstCharsPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UtfToExternalDString'>
<arg declared_type='Tcl_Encoding' name='encoding' type='^{Tcl_Encoding_=}'/>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int' name='srcLen' type='i'/>
<arg declared_type='Tcl_DString*' name='dsPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='Tcl_UtfToLower'>
<arg declared_type='char*' name='src' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UtfToTitle'>
<arg declared_type='char*' name='src' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UtfToUniChar'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='Tcl_UniChar*' name='chPtr' type='^S'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_UtfToUniCharDString'>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<arg declared_type='Tcl_DString*' name='dsPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='Tcl_UniChar*' type='^S'/>
</function>
<function name='Tcl_UtfToUpper'>
<arg declared_type='char*' name='src' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_ValidateAllMemory'>
<arg const='true' declared_type='char*' name='file' type='*'/>
<arg declared_type='int' name='line' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='Tcl_VarEval' variadic='true'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_VarEvalVA'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='va_list' declared_type64='struct __va_list_tag*' name='argList' type='*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_VarTraceInfo'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='varName' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='Tcl_VarTraceProc*' function_pointer='true' name='procPtr' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</arg>
<arg declared_type='ClientData' name='prevClientData' type='^v'/>
<retval declared_type='ClientData' type='^v'/>
</function>
<function name='Tcl_VarTraceInfo2'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' name='part1' type='*'/>
<arg const='true' declared_type='char*' name='part2' type='*'/>
<arg declared_type='int' name='flags' type='i'/>
<arg declared_type='Tcl_VarTraceProc*' function_pointer='true' name='procPtr' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<arg const='true' declared_type='char*' type='*'/>
<arg const='true' declared_type='char*' type='*'/>
<arg declared_type='int' type='i'/>
<retval declared_type='char*' type='*'/>
</arg>
<arg declared_type='ClientData' name='prevClientData' type='^v'/>
<retval declared_type='ClientData' type='^v'/>
</function>
<function name='Tcl_VariableObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_VwaitObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_WaitForEvent'>
<arg declared_type='Tcl_Time*' name='timePtr' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_WaitPid'>
<arg declared_type='Tcl_Pid' name='pid' type='^{Tcl_Pid_=}'/>
<arg declared_type='int*' name='statPtr' type='^i'/>
<arg declared_type='int' name='options' type='i'/>
<retval declared_type='Tcl_Pid' type='^{Tcl_Pid_=}'/>
</function>
<function name='Tcl_WhileObjCmd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_Write'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg const='true' declared_type='char*' name='s' type='*'/>
<arg declared_type='int' name='slen' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_WriteChars'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int' name='srcLen' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_WriteObj'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg declared_type='Tcl_Obj*' name='objPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_WriteRaw'>
<arg declared_type='Tcl_Channel' name='chan' type='^{Tcl_Channel_=}'/>
<arg const='true' declared_type='char*' name='src' type='*'/>
<arg declared_type='int' name='srcLen' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='Tcl_WrongNumArgs'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='objc' type='i'/>
<arg const='true' declared_type='Tcl_Obj **' name='objv' type='^^{Tcl_Obj}'/>
<arg const='true' declared_type='char*' name='message' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpAlloc'>
<arg declared_type='unsigned int' name='size' type='I'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TclpCloseFile'>
<arg declared_type='TclFile' name='file' type='^{TclFile_=}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpCreateCommandChannel'>
<arg declared_type='TclFile' name='readFile' type='^{TclFile_=}'/>
<arg declared_type='TclFile' name='writeFile' type='^{TclFile_=}'/>
<arg declared_type='TclFile' name='errorFile' type='^{TclFile_=}'/>
<arg declared_type='int' name='numPids' type='i'/>
<arg declared_type='Tcl_Pid*' name='pidPtr' type='^^{Tcl_Pid_}'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</function>
<function name='TclpCreatePipe'>
<arg declared_type='TclFile*' name='readPipe' type='^^{TclFile_}'/>
<arg declared_type='TclFile*' name='writePipe' type='^^{TclFile_}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpCreateProcess'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='int' name='argc' type='i'/>
<arg const='true' declared_type='char**' name='argv' type='^*'/>
<arg declared_type='TclFile' name='inputFile' type='^{TclFile_=}'/>
<arg declared_type='TclFile' name='outputFile' type='^{TclFile_=}'/>
<arg declared_type='TclFile' name='errorFile' type='^{TclFile_=}'/>
<arg declared_type='Tcl_Pid*' name='pidPtr' type='^^{Tcl_Pid_}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpCreateTempFile'>
<arg const='true' declared_type='char*' name='contents' type='*'/>
<retval declared_type='TclFile' type='^{TclFile_=}'/>
</function>
<function name='TclpDeleteFile'>
<arg const='true' declared_type='char*' name='path' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpDlopen'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_LoadHandle*' name='loadHandle' type='^^{Tcl_LoadHandle_}'/>
<arg declared_type='Tcl_FSUnloadFileProc**' name='unloadProcPtr' type='^^?'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpFilesystemPathType'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclpFinalizeCondition'>
<arg declared_type='Tcl_Condition*' name='condPtr' type='^^{Tcl_Condition_}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpFinalizeMutex'>
<arg declared_type='Tcl_Mutex*' name='mutexPtr' type='^^{Tcl_Mutex_}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpFinalizePipes'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpFinalizeSockets'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpFinalizeThreadDataThread'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpFindExecutable'>
<arg const='true' declared_type='char*' name='argv0' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpFindSymbol'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_LoadHandle' name='loadHandle' type='^{Tcl_LoadHandle_=}'/>
<arg const='true' declared_type='char*' name='symbol' type='*'/>
<retval declared_type='Tcl_PackageInitProc*' function_pointer='true' type='^?'>
<arg declared_type='Tcl_Interp*' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</retval>
</function>
<function name='TclpFindVariable'>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='int*' name='lengthPtr' type='^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpFree'>
<arg declared_type='char*' name='ptr' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpGetCStackParams'>
<arg declared_type='int**' name='stackBoundPtr' type='^^i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpGetClicks'>
<retval declared_type='unsigned long' type='L' type64='Q'/>
</function>
<function name='TclpGetCwd'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_DString*' name='cwdPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval const='true' declared_type='char*' type='*'/>
</function>
<function name='TclpGetDate'>
<arg const='true' declared_type='time_t*' name='time' type='^i' type64='^q'/>
<arg declared_type='int' name='useGMT' type='i'/>
<retval declared_type='struct tm*' type='^{tm=iiiiiiiiil*}' type64='^{tm=iiiiiiiiiq*}'/>
</function>
<function name='TclpGetDefaultStdChannel'>
<arg declared_type='int' name='type' type='i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</function>
<function name='TclpGetGrGid'>
<arg declared_type='gid_t' name='gid' type='I'/>
<retval declared_type='struct group*' type='^{group=**I^*}'/>
</function>
<function name='TclpGetGrNam'>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='struct group*' type='^{group=**I^*}'/>
</function>
<function name='TclpGetHostByAddr'>
<arg const='true' declared_type='char*' name='addr' type='*'/>
<arg declared_type='int' name='length' type='i'/>
<arg declared_type='int' name='type' type='i'/>
<retval declared_type='struct hostent*' type='^{hostent=*^*ii^*}'/>
</function>
<function name='TclpGetHostByName'>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='struct hostent*' type='^{hostent=*^*ii^*}'/>
</function>
<function name='TclpGetNativeCwd'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='ClientData' type='^v'/>
</function>
<function name='TclpGetNativePathType'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' name='driveNameLengthPtr' type='^i'/>
<arg declared_type='Tcl_Obj**' name='driveNameRef' type='^^{Tcl_Obj}'/>
<retval declared_type='Tcl_PathType' type='i'/>
</function>
<function name='TclpGetPwNam'>
<arg const='true' declared_type='char*' name='name' type='*'/>
<retval declared_type='struct passwd*' type='^{passwd=**IIi****i}' type64='^{passwd=**IIq****q}'/>
</function>
<function name='TclpGetPwUid'>
<arg declared_type='uid_t' name='uid' type='I'/>
<retval declared_type='struct passwd*' type='^{passwd=**IIi****i}' type64='^{passwd=**IIq****q}'/>
</function>
<function name='TclpGetSeconds'>
<retval declared_type='unsigned long' type='L' type64='Q'/>
</function>
<function name='TclpGetTime'>
<arg declared_type='Tcl_Time*' name='time' type='^{Tcl_Time=ll}' type64='^{Tcl_Time=qq}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpGetTimeZone'>
<arg declared_type='unsigned long' name='time' type='L' type64='Q'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpGetUserHome'>
<arg const='true' declared_type='char*' name='name' type='*'/>
<arg declared_type='Tcl_DString*' name='bufferPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TclpGmtime'>
<arg const='true' declared_type='time_t*' name='clock' type='^i' type64='^q'/>
<retval declared_type='struct tm*' type='^{tm=iiiiiiiiil*}' type64='^{tm=iiiiiiiiiq*}'/>
</function>
<function name='TclpGmtime_unix'>
<arg const='true' declared_type='time_t*' name='clock' type='^i' type64='^q'/>
<retval declared_type='struct tm*' type='^{tm=iiiiiiiiil*}' type64='^{tm=iiiiiiiiiq*}'/>
</function>
<function name='TclpHasSockets'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpInetNtoa'>
<arg declared_type='struct in_addr' name='addr' type='{in_addr=I}'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TclpInitLibraryPath'>
<arg declared_type='char**' name='valuePtr' type='^*'/>
<arg declared_type='int*' name='lengthPtr' type='^i'/>
<arg declared_type='Tcl_Encoding*' name='encodingPtr' type='^^{Tcl_Encoding_}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpInitLock'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpInitPlatform'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpInitUnlock'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpLoadFile'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' name='sym1' type='*'/>
<arg const='true' declared_type='char*' name='sym2' type='*'/>
<arg declared_type='Tcl_PackageInitProc**' name='proc1Ptr' type='^^?'/>
<arg declared_type='Tcl_PackageInitProc**' name='proc2Ptr' type='^^?'/>
<arg declared_type='ClientData*' name='clientDataPtr' type='^^v'/>
<arg declared_type='Tcl_FSUnloadFileProc**' name='unloadProcPtr' type='^^?'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpLocaltime'>
<arg const='true' declared_type='time_t*' name='clock' type='^i' type64='^q'/>
<retval declared_type='struct tm*' type='^{tm=iiiiiiiiil*}' type64='^{tm=iiiiiiiiiq*}'/>
</function>
<function name='TclpLocaltime_unix'>
<arg const='true' declared_type='time_t*' name='clock' type='^i' type64='^q'/>
<retval declared_type='struct tm*' type='^{tm=iiiiiiiiil*}' type64='^{tm=iiiiiiiiiq*}'/>
</function>
<function name='TclpMakeFile'>
<arg declared_type='Tcl_Channel' name='channel' type='^{Tcl_Channel_=}'/>
<arg declared_type='int' name='direction' type='i'/>
<retval declared_type='TclFile' type='^{TclFile_=}'/>
</function>
<function name='TclpMasterLock'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpMasterUnlock'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpMatchFiles'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='char*' name='separators' type='*'/>
<arg declared_type='Tcl_DString*' name='dirPtr' type='^{Tcl_DString=*ii[200c]}'/>
<arg declared_type='char*' name='pattern' type='*'/>
<arg declared_type='char*' name='tail' type='*'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpMatchInDirectory'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='resultPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg const='true' declared_type='char*' name='pattern' type='*'/>
<arg declared_type='Tcl_GlobTypeData*' name='types' type='^{Tcl_GlobTypeData=ii^{Tcl_Obj}^{Tcl_Obj}}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpNativeJoinPath'>
<arg declared_type='Tcl_Obj*' name='prefix' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='char*' name='joining' type='*'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpNativeSplitPath'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int*' name='lenPtr' type='^i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclpNativeToNormalized'>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclpObjAccess'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='mode' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpObjChdir'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpObjCopyDirectory'>
<arg declared_type='Tcl_Obj*' name='srcPathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='destPathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj**' name='errorPtr' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpObjCopyFile'>
<arg declared_type='Tcl_Obj*' name='srcPathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='destPathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpObjCreateDirectory'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpObjDeleteFile'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpObjLink'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='toPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='linkType' type='i'/>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclpObjListVolumes'>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclpObjLstat'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_StatBuf*' name='buf' type='^{stat=iSSQIIi{timespec=il}{timespec=il}{timespec=il}{timespec=il}qqiIIi[2q]}' type64='^{stat=iSSQIIi{timespec=qq}{timespec=qq}{timespec=qq}{timespec=qq}qqiIIi[2q]}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpObjNormalizePath'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='nextCheckpoint' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpObjRemoveDirectory'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='recursive' type='i'/>
<arg declared_type='Tcl_Obj**' name='errorPtr' type='^^{Tcl_Obj}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpObjRenameFile'>
<arg declared_type='Tcl_Obj*' name='srcPathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_Obj*' name='destPathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpObjStat'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='Tcl_StatBuf*' name='buf' type='^{stat=iSSQIIi{timespec=il}{timespec=il}{timespec=il}{timespec=il}qqiIIi[2q]}' type64='^{stat=iSSQIIi{timespec=qq}{timespec=qq}{timespec=qq}{timespec=qq}qqiIIi[2q]}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpOpenFile'>
<arg const='true' declared_type='char*' name='fname' type='*'/>
<arg declared_type='int' name='mode' type='i'/>
<retval declared_type='TclFile' type='^{TclFile_=}'/>
</function>
<function name='TclpOpenFileChannel'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='int' name='mode' type='i'/>
<arg declared_type='int' name='permissions' type='i'/>
<retval declared_type='Tcl_Channel' type='^{Tcl_Channel_=}'/>
</function>
<function name='TclpReaddir'>
<arg declared_type='DIR*' name='dir' type='^{_DIR=ill*illi{_opaque_pthread_mutex_t=l[40c]}^{_telldir}}' type64='^{_DIR=iqq*iqqi{_opaque_pthread_mutex_t=q[56c]}^{_telldir}}'/>
<retval declared_type='Tcl_DirEntry*' type='^{dirent=QQSSC[1024c]}'/>
</function>
<function name='TclpReadlink'>
<arg const='true' declared_type='char*' name='fileName' type='*'/>
<arg declared_type='Tcl_DString*' name='linkPtr' type='^{Tcl_DString=*ii[200c]}'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TclpRealloc'>
<arg declared_type='char*' name='ptr' type='*'/>
<arg declared_type='unsigned int' name='size' type='I'/>
<retval declared_type='char*' type='*'/>
</function>
<function name='TclpSetInitialEncodings'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpSetInterfaces'>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpSetVariables'>
<arg declared_type='Tcl_Interp*' name='interp' type='^{Tcl_Interp=*^?i}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpTempFileName'>
<retval declared_type='Tcl_Obj*' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
</function>
<function name='TclpThreadCreate'>
<arg declared_type='Tcl_ThreadId*' name='idPtr' type='^^{Tcl_ThreadId_}'/>
<arg declared_type='Tcl_ThreadCreateProc*' function_pointer='true' name='proc' type='^?'>
<arg declared_type='ClientData' type='^v'/>
<retval declared_type='void' type='v'/>
</arg>
<arg declared_type='ClientData' name='clientData' type='^v'/>
<arg declared_type='int' name='stackSize' type='i'/>
<arg declared_type='int' name='flags' type='i'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpThreadDataKeyGet'>
<arg declared_type='Tcl_ThreadDataKey*' name='keyPtr' type='^^{Tcl_ThreadDataKey_}'/>
<retval declared_type='void*' type='^v'/>
</function>
<function name='TclpThreadDataKeySet'>
<arg declared_type='Tcl_ThreadDataKey*' name='keyPtr' type='^^{Tcl_ThreadDataKey_}'/>
<arg declared_type='void*' name='data' type='^v'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpThreadExit'>
<arg declared_type='int' name='status' type='i'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpThreadGetStackSize'>
<retval declared_type='size_t' type='L' type64='Q'/>
</function>
<function name='TclpUnloadFile'>
<arg declared_type='Tcl_LoadHandle' name='loadHandle' type='^{Tcl_LoadHandle_=}'/>
<retval declared_type='void' type='v'/>
</function>
<function name='TclpUtfNcmp2'>
<arg const='true' declared_type='char*' name='s1' type='*'/>
<arg const='true' declared_type='char*' name='s2' type='*'/>
<arg declared_type='unsigned long' name='n' type='L' type64='Q'/>
<retval declared_type='int' type='i'/>
</function>
<function name='TclpUtime'>
<arg declared_type='Tcl_Obj*' name='pathPtr' type='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=ld^vq{?=^v^v}{?=^vL})}' type64='^{Tcl_Obj=i*i^{Tcl_ObjType=*^?^?^?^?}(?=qd^vq{?=^v^v}{?=^vQ})}'/>
<arg declared_type='struct utimbuf*' name='tval' type='^{utimbuf=ii}' type64='^{utimbuf=qq}'/>
<retval declared_type='int' type='i'/>
</function>
<function name='mp_get_int'>
<arg declared_type='mp_int*' name='a' type='^{mp_int=iii^I}'/>
<retval declared_type='unsigned long' type='L' type64='Q'/>
</function>
<function_alias name='TclOSlstat' original='lstat'/>
<function_alias name='TclOSopen' original='open'/>
<function_alias name='TclOSreaddir' original='readdir'/>
<function_alias name='TclOSseek' original='lseek'/>
<function_alias name='TclOSstat' original='stat'/>
<function_alias name='TclUniCharNcmp' original='Tcl_UniCharNcmp'/>
<function_alias name='Tcl_Ckalloc' original='Tcl_Alloc'/>
<function_alias name='Tcl_Ckfree' original='Tcl_Free'/>
<function_alias name='Tcl_Ckrealloc' original='Tcl_Realloc'/>
<function_alias name='Tcl_DStringTrunc' original='Tcl_DStringSetLength'/>
<function_alias name='Tcl_Return' original='Tcl_SetResult'/>
<function_alias name='Tcl_TildeSubst' original='Tcl_TranslateFileName'/>
<function_alias name='TclpExit' original='exit'/>
<function_alias name='bn_reverse' original='TclBN_reverse'/>
<function_alias name='fast_s_mp_mul_digs' original='TclBN_fast_s_mp_mul_digs'/>
<function_alias name='fast_s_mp_sqr' original='TclBN_fast_s_mp_sqr'/>
<function_alias name='mp_add' original='TclBN_mp_add'/>
<function_alias name='mp_add_d' original='TclBN_mp_add_d'/>
<function_alias name='mp_and' original='TclBN_mp_and'/>
<function_alias name='mp_clamp' original='TclBN_mp_clamp'/>
<function_alias name='mp_clear' original='TclBN_mp_clear'/>
<function_alias name='mp_clear_multi' original='TclBN_mp_clear_multi'/>
<function_alias name='mp_cmp' original='TclBN_mp_cmp'/>
<function_alias name='mp_cmp_d' original='TclBN_mp_cmp_d'/>
<function_alias name='mp_cmp_mag' original='TclBN_mp_cmp_mag'/>
<function_alias name='mp_copy' original='TclBN_mp_copy'/>
<function_alias name='mp_count_bits' original='TclBN_mp_count_bits'/>
<function_alias name='mp_div' original='TclBN_mp_div'/>
<function_alias name='mp_div_2' original='TclBN_mp_div_2'/>
<function_alias name='mp_div_2d' original='TclBN_mp_div_2d'/>
<function_alias name='mp_div_3' original='TclBN_mp_div_3'/>
<function_alias name='mp_div_d' original='TclBN_mp_div_d'/>
<function_alias name='mp_exch' original='TclBN_mp_exch'/>
<function_alias name='mp_expt_d' original='TclBN_mp_expt_d'/>
<function_alias name='mp_grow' original='TclBN_mp_grow'/>
<function_alias name='mp_init' original='TclBN_mp_init'/>
<function_alias name='mp_init_copy' original='TclBN_mp_init_copy'/>
<function_alias name='mp_init_multi' original='TclBN_mp_init_multi'/>
<function_alias name='mp_init_set' original='TclBN_mp_init_set'/>
<function_alias name='mp_init_size' original='TclBN_mp_init_size'/>
<function_alias name='mp_karatsuba_mul' original='TclBN_mp_karatsuba_mul'/>
<function_alias name='mp_karatsuba_sqr' original='TclBN_mp_karatsuba_sqr'/>
<function_alias name='mp_lshd' original='TclBN_mp_lshd'/>
<function_alias name='mp_mod' original='TclBN_mp_mod'/>
<function_alias name='mp_mod_2d' original='TclBN_mp_mod_2d'/>
<function_alias name='mp_mul' original='TclBN_mp_mul'/>
<function_alias name='mp_mul_2' original='TclBN_mp_mul_2'/>
<function_alias name='mp_mul_2d' original='TclBN_mp_mul_2d'/>
<function_alias name='mp_mul_d' original='TclBN_mp_mul_d'/>
<function_alias name='mp_neg' original='TclBN_mp_neg'/>
<function_alias name='mp_or' original='TclBN_mp_or'/>
<function_alias name='mp_radix_size' original='TclBN_mp_radix_size'/>
<function_alias name='mp_read_radix' original='TclBN_mp_read_radix'/>
<function_alias name='mp_rshd' original='TclBN_mp_rshd'/>
<function_alias name='mp_set' original='TclBN_mp_set'/>
<function_alias name='mp_shrink' original='TclBN_mp_shrink'/>
<function_alias name='mp_sqr' original='TclBN_mp_sqr'/>
<function_alias name='mp_sqrt' original='TclBN_mp_sqrt'/>
<function_alias name='mp_sub' original='TclBN_mp_sub'/>
<function_alias name='mp_sub_d' original='TclBN_mp_sub_d'/>
<function_alias name='mp_to_unsigned_bin' original='TclBN_mp_to_unsigned_bin'/>
<function_alias name='mp_to_unsigned_bin_n' original='TclBN_mp_to_unsigned_bin_n'/>
<function_alias name='mp_toom_mul' original='TclBN_mp_toom_mul'/>
<function_alias name='mp_toom_sqr' original='TclBN_mp_toom_sqr'/>
<function_alias name='mp_toradix_n' original='TclBN_mp_toradix_n'/>
<function_alias name='mp_unsigned_bin_size' original='TclBN_mp_unsigned_bin_size'/>
<function_alias name='mp_xor' original='TclBN_mp_xor'/>
<function_alias name='mp_zero' original='TclBN_mp_zero'/>
<function_alias name='panic' original='Tcl_Panic'/>
<function_alias name='panicVA' original='Tcl_PanicVA'/>
<function_alias name='s_mp_add' original='TclBN_s_mp_add'/>
<function_alias name='s_mp_mul_digs' original='TclBN_s_mp_mul_digs'/>
<function_alias name='s_mp_sqr' original='TclBN_s_mp_sqr'/>
<function_alias name='s_mp_sub' original='TclBN_s_mp_sub'/>
</signatures>
