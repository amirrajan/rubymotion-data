<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='vImageChannelDescription' type64='{vImageChannelDescription=&quot;min&quot;d&quot;zero&quot;d&quot;full&quot;d&quot;max&quot;d}'>
<field declared_type64='CGFloat' name='min' type64='d'/>
<field declared_type64='CGFloat' name='zero' type64='d'/>
<field declared_type64='CGFloat' name='full' type64='d'/>
<field declared_type64='CGFloat' name='max' type64='d'/>
</struct>
<struct name='vImageRGBPrimaries' type64='{vImageRGBPrimaries=&quot;red_x&quot;f&quot;green_x&quot;f&quot;blue_x&quot;f&quot;white_x&quot;f&quot;red_y&quot;f&quot;green_y&quot;f&quot;blue_y&quot;f&quot;white_y&quot;f}'>
<field declared_type64='float' name='red_x' type64='f'/>
<field declared_type64='float' name='green_x' type64='f'/>
<field declared_type64='float' name='blue_x' type64='f'/>
<field declared_type64='float' name='white_x' type64='f'/>
<field declared_type64='float' name='red_y' type64='f'/>
<field declared_type64='float' name='green_y' type64='f'/>
<field declared_type64='float' name='blue_y' type64='f'/>
<field declared_type64='float' name='white_y' type64='f'/>
</struct>
<struct name='vImageTransferFunction' type64='{vImageTransferFunction=&quot;c0&quot;d&quot;c1&quot;d&quot;c2&quot;d&quot;c3&quot;d&quot;gamma&quot;d&quot;cutoff&quot;d&quot;c4&quot;d&quot;c5&quot;d}'>
<field declared_type64='CGFloat' name='c0' type64='d'/>
<field declared_type64='CGFloat' name='c1' type64='d'/>
<field declared_type64='CGFloat' name='c2' type64='d'/>
<field declared_type64='CGFloat' name='c3' type64='d'/>
<field declared_type64='CGFloat' name='gamma' type64='d'/>
<field declared_type64='CGFloat' name='cutoff' type64='d'/>
<field declared_type64='CGFloat' name='c4' type64='d'/>
<field declared_type64='CGFloat' name='c5' type64='d'/>
</struct>
<struct name='vImageWhitePoint' type64='{vImageWhitePoint=&quot;white_x&quot;f&quot;white_y&quot;f}'>
<field declared_type64='float' name='white_x' type64='f'/>
<field declared_type64='float' name='white_y' type64='f'/>
</struct>
<struct name='vImage_ARGBToYpCbCr' type64='{vImage_ARGBToYpCbCr=&quot;opaque&quot;[128C]}'>
<field declared_type64='uint8_t*' name='opaque' type64='[128C]'/>
</struct>
<struct name='vImage_ARGBToYpCbCrMatrix' type64='{vImage_ARGBToYpCbCrMatrix=&quot;R_Yp&quot;f&quot;G_Yp&quot;f&quot;B_Yp&quot;f&quot;R_Cb&quot;f&quot;G_Cb&quot;f&quot;B_Cb_R_Cr&quot;f&quot;G_Cr&quot;f&quot;B_Cr&quot;f}'>
<field declared_type64='float' name='R_Yp' type64='f'/>
<field declared_type64='float' name='G_Yp' type64='f'/>
<field declared_type64='float' name='B_Yp' type64='f'/>
<field declared_type64='float' name='R_Cb' type64='f'/>
<field declared_type64='float' name='G_Cb' type64='f'/>
<field declared_type64='float' name='B_Cb_R_Cr' type64='f'/>
<field declared_type64='float' name='G_Cr' type64='f'/>
<field declared_type64='float' name='B_Cr' type64='f'/>
</struct>
<struct name='vImage_AffineTransform' type64='{vImage_AffineTransform=&quot;a&quot;f&quot;b&quot;f&quot;c&quot;f&quot;d&quot;f&quot;tx&quot;f&quot;ty&quot;f}'>
<field declared_type64='float' name='a' type64='f'/>
<field declared_type64='float' name='b' type64='f'/>
<field declared_type64='float' name='c' type64='f'/>
<field declared_type64='float' name='d' type64='f'/>
<field declared_type64='float' name='tx' type64='f'/>
<field declared_type64='float' name='ty' type64='f'/>
</struct>
<struct name='vImage_AffineTransform_Double' type64='{vImage_AffineTransform_Double=&quot;a&quot;d&quot;b&quot;d&quot;c&quot;d&quot;d&quot;d&quot;tx&quot;d&quot;ty&quot;d}'>
<field declared_type64='double' name='a' type64='d'/>
<field declared_type64='double' name='b' type64='d'/>
<field declared_type64='double' name='c' type64='d'/>
<field declared_type64='double' name='d' type64='d'/>
<field declared_type64='double' name='tx' type64='d'/>
<field declared_type64='double' name='ty' type64='d'/>
</struct>
<struct name='vImage_Buffer' type64='{vImage_Buffer=&quot;data&quot;^v&quot;height&quot;Q&quot;width&quot;Q&quot;rowBytes&quot;Q}'>
<field declared_type64='void*' name='data' type64='^v'/>
<field declared_type64='vImagePixelCount' name='height' type64='Q'/>
<field declared_type64='vImagePixelCount' name='width' type64='Q'/>
<field declared_type64='size_t' name='rowBytes' type64='Q'/>
</struct>
<struct name='vImage_CGAffineTransform' type64='{vImage_AffineTransform_Double=&quot;a&quot;d&quot;b&quot;d&quot;c&quot;d&quot;d&quot;d&quot;tx&quot;d&quot;ty&quot;d}'>
<field declared_type64='double' name='a' type64='d'/>
<field declared_type64='double' name='b' type64='d'/>
<field declared_type64='double' name='c' type64='d'/>
<field declared_type64='double' name='d' type64='d'/>
<field declared_type64='double' name='tx' type64='d'/>
<field declared_type64='double' name='ty' type64='d'/>
</struct>
<struct name='vImage_CGImageFormat' type64='{vImage_CGImageFormat=&quot;bitsPerComponent&quot;I&quot;bitsPerPixel&quot;I&quot;colorSpace&quot;^{CGColorSpace}&quot;bitmapInfo&quot;I&quot;version&quot;I&quot;decode&quot;^d&quot;renderingIntent&quot;i}'>
<field declared_type64='uint32_t' name='bitsPerComponent' type64='I'/>
<field declared_type64='uint32_t' name='bitsPerPixel' type64='I'/>
<field declared_type64='CGColorSpaceRef' name='colorSpace' type64='^{CGColorSpace=}'/>
<field declared_type64='CGBitmapInfo' name='bitmapInfo' type64='I'/>
<field declared_type64='uint32_t' name='version' type64='I'/>
<field const='true' declared_type64='CGFloat*' name='decode' type64='^d'/>
<field declared_type64='CGColorRenderingIntent' name='renderingIntent' type64='i'/>
</struct>
<struct name='vImage_YpCbCrPixelRange' type64='{vImage_YpCbCrPixelRange=&quot;Yp_bias&quot;i&quot;CbCr_bias&quot;i&quot;YpRangeMax&quot;i&quot;CbCrRangeMax&quot;i&quot;YpMax&quot;i&quot;YpMin&quot;i&quot;CbCrMax&quot;i&quot;CbCrMin&quot;i}'>
<field declared_type64='int32_t' name='Yp_bias' type64='i'/>
<field declared_type64='int32_t' name='CbCr_bias' type64='i'/>
<field declared_type64='int32_t' name='YpRangeMax' type64='i'/>
<field declared_type64='int32_t' name='CbCrRangeMax' type64='i'/>
<field declared_type64='int32_t' name='YpMax' type64='i'/>
<field declared_type64='int32_t' name='YpMin' type64='i'/>
<field declared_type64='int32_t' name='CbCrMax' type64='i'/>
<field declared_type64='int32_t' name='CbCrMin' type64='i'/>
</struct>
<struct name='vImage_YpCbCrToARGB' type64='{vImage_YpCbCrToARGB=&quot;opaque&quot;[128C]}'>
<field declared_type64='uint8_t*' name='opaque' type64='[128C]'/>
</struct>
<struct name='vImage_YpCbCrToARGBMatrix' type64='{vImage_YpCbCrToARGBMatrix=&quot;Yp&quot;f&quot;Cr_R&quot;f&quot;Cr_G&quot;f&quot;Cb_G&quot;f&quot;Cb_B&quot;f}'>
<field declared_type64='float' name='Yp' type64='f'/>
<field declared_type64='float' name='Cr_R' type64='f'/>
<field declared_type64='float' name='Cr_G' type64='f'/>
<field declared_type64='float' name='Cb_G' type64='f'/>
<field declared_type64='float' name='Cb_B' type64='f'/>
</struct>
<cftype name='vImageCVImageFormatRef' type64='^{vImageCVImageFormat=}'/>
<cftype name='vImageConstCVImageFormatRef' type64='^{vImageCVImageFormat=}'/>
<cftype name='vImageConverterRef' type64='^{vImageConverter=}'/>
<cftype name='vImage_MultidimensionalTable' type64='^{vImage_MultidimensionalTableData=}'/>
<constant const='true' declared_type64='CGFloat*' name='kvImageDecodeArray_16Q12Format' type64='^d'/>
<constant const='true' declared_type64='vImage_ARGBToYpCbCrMatrix*' name='kvImage_ARGBToYpCbCrMatrix_ITU_R_601_4' type64='^{vImage_ARGBToYpCbCrMatrix=ffffffff}'/>
<constant const='true' declared_type64='vImage_ARGBToYpCbCrMatrix*' name='kvImage_ARGBToYpCbCrMatrix_ITU_R_709_2' type64='^{vImage_ARGBToYpCbCrMatrix=ffffffff}'/>
<constant const='true' declared_type64='vImage_YpCbCrToARGBMatrix*' name='kvImage_YpCbCrToARGBMatrix_ITU_R_601_4' type64='^{vImage_YpCbCrToARGBMatrix=fffff}'/>
<constant const='true' declared_type64='vImage_YpCbCrToARGBMatrix*' name='kvImage_YpCbCrToARGBMatrix_ITU_R_709_2' type64='^{vImage_YpCbCrToARGBMatrix=fffff}'/>
<enum name='VIMAGE_AFFINETRANSFORM_DOUBLE_IS_AVAILABLE' value64='1'/>
<enum name='VIMAGE_CGAFFINETRANSFORM_IS_AVAILABLE' value64='1'/>
<enum name='kRotate0DegreesClockwise' value64='0'/>
<enum name='kRotate0DegreesCounterClockwise' value64='0'/>
<enum name='kRotate180DegreesClockwise' value64='2'/>
<enum name='kRotate180DegreesCounterClockwise' value64='2'/>
<enum name='kRotate270DegreesClockwise' value64='1'/>
<enum name='kRotate270DegreesCounterClockwise' value64='3'/>
<enum name='kRotate90DegreesClockwise' value64='3'/>
<enum name='kRotate90DegreesCounterClockwise' value64='1'/>
<enum name='kvImage420Yp8_Cb8_Cr8' value64='3'/>
<enum name='kvImage420Yp8_CbCr8' value64='4'/>
<enum name='kvImage422CbYpCrYp16' value64='13'/>
<enum name='kvImage422CbYpCrYp8' value64='0'/>
<enum name='kvImage422CbYpCrYp8_AA8' value64='2'/>
<enum name='kvImage422CrYpCbYpCbYpCbYpCrYpCrYp10' value64='9'/>
<enum name='kvImage422YpCbYpCr8' value64='1'/>
<enum name='kvImage444AYpCbCr16' value64='14'/>
<enum name='kvImage444AYpCbCr8' value64='5'/>
<enum name='kvImage444CbYpCrA8' value64='7'/>
<enum name='kvImage444CrYpCb10' value64='8'/>
<enum name='kvImage444CrYpCb8' value64='6'/>
<enum name='kvImageARGB16Q12' value64='2'/>
<enum name='kvImageARGB16U' value64='1'/>
<enum name='kvImageARGB8888' value64='0'/>
<enum name='kvImageBackgroundColorFill' value64='4'/>
<enum name='kvImageBufferSizeMismatch' value64='-21774'/>
<enum name='kvImageBufferTypeCode_Alpha' value64='17'/>
<enum name='kvImageBufferTypeCode_CGFormat' value64='24'/>
<enum name='kvImageBufferTypeCode_CMYK_Black' value64='4'/>
<enum name='kvImageBufferTypeCode_CMYK_Cyan' value64='1'/>
<enum name='kvImageBufferTypeCode_CMYK_Magenta' value64='2'/>
<enum name='kvImageBufferTypeCode_CMYK_Yellow' value64='3'/>
<enum name='kvImageBufferTypeCode_CVPixelBuffer_YCbCr' value64='19'/>
<enum name='kvImageBufferTypeCode_Cb' value64='22'/>
<enum name='kvImageBufferTypeCode_Chroma' value64='21'/>
<enum name='kvImageBufferTypeCode_Chunky' value64='25'/>
<enum name='kvImageBufferTypeCode_ColorSpaceChannel1' value64='1'/>
<enum name='kvImageBufferTypeCode_ColorSpaceChannel10' value64='10'/>
<enum name='kvImageBufferTypeCode_ColorSpaceChannel11' value64='11'/>
<enum name='kvImageBufferTypeCode_ColorSpaceChannel12' value64='12'/>
<enum name='kvImageBufferTypeCode_ColorSpaceChannel13' value64='13'/>
<enum name='kvImageBufferTypeCode_ColorSpaceChannel14' value64='14'/>
<enum name='kvImageBufferTypeCode_ColorSpaceChannel15' value64='15'/>
<enum name='kvImageBufferTypeCode_ColorSpaceChannel16' value64='16'/>
<enum name='kvImageBufferTypeCode_ColorSpaceChannel2' value64='2'/>
<enum name='kvImageBufferTypeCode_ColorSpaceChannel3' value64='3'/>
<enum name='kvImageBufferTypeCode_ColorSpaceChannel4' value64='4'/>
<enum name='kvImageBufferTypeCode_ColorSpaceChannel5' value64='5'/>
<enum name='kvImageBufferTypeCode_ColorSpaceChannel6' value64='6'/>
<enum name='kvImageBufferTypeCode_ColorSpaceChannel7' value64='7'/>
<enum name='kvImageBufferTypeCode_ColorSpaceChannel8' value64='8'/>
<enum name='kvImageBufferTypeCode_ColorSpaceChannel9' value64='9'/>
<enum name='kvImageBufferTypeCode_Cr' value64='23'/>
<enum name='kvImageBufferTypeCode_EndOfList' value64='0'/>
<enum name='kvImageBufferTypeCode_Indexed' value64='18'/>
<enum name='kvImageBufferTypeCode_LAB_A' value64='2'/>
<enum name='kvImageBufferTypeCode_LAB_B' value64='3'/>
<enum name='kvImageBufferTypeCode_LAB_L' value64='1'/>
<enum name='kvImageBufferTypeCode_Luminance' value64='20'/>
<enum name='kvImageBufferTypeCode_Monochrome' value64='1'/>
<enum name='kvImageBufferTypeCode_RGB_Blue' value64='3'/>
<enum name='kvImageBufferTypeCode_RGB_Green' value64='2'/>
<enum name='kvImageBufferTypeCode_RGB_Red' value64='1'/>
<enum name='kvImageBufferTypeCode_UniqueFormatCount' value64='26'/>
<enum name='kvImageBufferTypeCode_XYZ_X' value64='1'/>
<enum name='kvImageBufferTypeCode_XYZ_Y' value64='2'/>
<enum name='kvImageBufferTypeCode_XYZ_Z' value64='3'/>
<enum name='kvImageCVImageFormat_AlphaIsOneHint' value64='-21604'/>
<enum name='kvImageCVImageFormat_ChromaSiting' value64='-21601'/>
<enum name='kvImageCVImageFormat_ColorSpace' value64='-21602'/>
<enum name='kvImageCVImageFormat_ConversionMatrix' value64='-21600'/>
<enum name='kvImageCVImageFormat_NoError' value64='0'/>
<enum name='kvImageCVImageFormat_VideoChannelDescription' value64='-21603'/>
<enum name='kvImageColorSyncIsAbsent' value64='-21779'/>
<enum name='kvImageConvert_DitherAtkinson' value64='4'/>
<enum name='kvImageConvert_DitherFloydSteinberg' value64='3'/>
<enum name='kvImageConvert_DitherNone' value64='0'/>
<enum name='kvImageConvert_DitherOrdered' value64='1'/>
<enum name='kvImageConvert_DitherOrderedReproducible' value64='2'/>
<enum name='kvImageConvert_OrderedGaussianBlue' value64='0'/>
<enum name='kvImageConvert_OrderedNoiseShapeMask' value64='4026531840'/>
<enum name='kvImageConvert_OrderedUniformBlue' value64='268435456'/>
<enum name='kvImageCopyInPlace' value64='2'/>
<enum name='kvImageCoreVideoIsAbsent' value64='-21784'/>
<enum name='kvImageDoNotClamp' value64='2048'/>
<enum name='kvImageDoNotTile' value64='16'/>
<enum name='kvImageEdgeExtend' value64='8'/>
<enum name='kvImageFullInterpolation' value64='1'/>
<enum name='kvImageGamma_11_over_5_half_precision' value64='5'/>
<enum name='kvImageGamma_11_over_9_half_precision' value64='8'/>
<enum name='kvImageGamma_5_over_11_half_precision' value64='4'/>
<enum name='kvImageGamma_5_over_9_half_precision' value64='2'/>
<enum name='kvImageGamma_9_over_11_half_precision' value64='9'/>
<enum name='kvImageGamma_9_over_5_half_precision' value64='3'/>
<enum name='kvImageGamma_BT709_forward_half_precision' value64='10'/>
<enum name='kvImageGamma_BT709_reverse_half_precision' value64='11'/>
<enum name='kvImageGamma_UseGammaValue' value64='0'/>
<enum name='kvImageGamma_UseGammaValue_half_precision' value64='1'/>
<enum name='kvImageGamma_sRGB_forward_half_precision' value64='6'/>
<enum name='kvImageGamma_sRGB_reverse_half_precision' value64='7'/>
<enum name='kvImageGetTempBufferSize' value64='128'/>
<enum name='kvImageHDRContent' value64='1024'/>
<enum name='kvImageHalfInterpolation' value64='2'/>
<enum name='kvImageHighQualityResampling' value64='32'/>
<enum name='kvImageInternalError' value64='-21776'/>
<enum name='kvImageInvalidCVImageFormat' value64='-21782'/>
<enum name='kvImageInvalidEdgeStyle' value64='-21768'/>
<enum name='kvImageInvalidImageFormat' value64='-21778'/>
<enum name='kvImageInvalidImageObject' value64='-21781'/>
<enum name='kvImageInvalidKernelSize' value64='-21767'/>
<enum name='kvImageInvalidOffset_X' value64='-21769'/>
<enum name='kvImageInvalidOffset_Y' value64='-21770'/>
<enum name='kvImageInvalidParameter' value64='-21773'/>
<enum name='kvImageInvalidRowBytes' value64='-21777'/>
<enum name='kvImageLeaveAlphaUnchanged' value64='1'/>
<enum name='kvImageMDTableHint_16Q12' value64='1'/>
<enum name='kvImageMDTableHint_Float' value64='2'/>
<enum name='kvImageMatrixType_ARGBToYpCbCrMatrix' value64='1'/>
<enum name='kvImageMatrixType_None' value64='0'/>
<enum name='kvImageMemoryAllocationError' value64='-21771'/>
<enum name='kvImageNoAllocate' value64='512'/>
<enum name='kvImageNoError' value64='0'/>
<enum name='kvImageNoFlags' value64='0'/>
<enum name='kvImageNoInterpolation' value64='0'/>
<enum name='kvImageNullPointerArgument' value64='-21772'/>
<enum name='kvImageOutOfPlaceOperationRequired' value64='-21780'/>
<enum name='kvImagePrintDiagnosticsToConsole' value64='256'/>
<enum name='kvImageRoiLargerThanInputBuffer' value64='-21766'/>
<enum name='kvImageTruncateKernel' value64='64'/>
<enum name='kvImageUnknownFlagsBit' value64='-21775'/>
<enum name='kvImageUnsupportedConversion' value64='-21783'/>
<enum name='kvImage_PNG_FILTER_VALUE_AVG' value64='3'/>
<enum name='kvImage_PNG_FILTER_VALUE_NONE' value64='0'/>
<enum name='kvImage_PNG_FILTER_VALUE_PAETH' value64='4'/>
<enum name='kvImage_PNG_FILTER_VALUE_SUB' value64='1'/>
<enum name='kvImage_PNG_FILTER_VALUE_UP' value64='2'/>
<enum name='vImage_CVUtilities_h' value64='1'/>
<function name='vImageAffineWarpCG_ARGB16S'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='vImage_CGAffineTransform*' name='transform' null_accepted='false' type64='^{vImage_AffineTransform_Double=dddddd}'/>
<arg const='true' declared_type64='int16_t*' name='backColor' type64='^s'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAffineWarpCG_ARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='vImage_CGAffineTransform*' name='transform' null_accepted='false' type64='^{vImage_AffineTransform_Double=dddddd}'/>
<arg const='true' declared_type64='uint16_t*' name='backColor' type64='^S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAffineWarpCG_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='vImage_CGAffineTransform*' name='transform' null_accepted='false' type64='^{vImage_AffineTransform_Double=dddddd}'/>
<arg const='true' declared_type64='uint8_t*' name='backColor' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAffineWarpCG_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='vImage_CGAffineTransform*' name='transform' null_accepted='false' type64='^{vImage_AffineTransform_Double=dddddd}'/>
<arg const='true' declared_type64='float*' name='backColor' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAffineWarpCG_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='vImage_CGAffineTransform*' name='transform' null_accepted='false' type64='^{vImage_AffineTransform_Double=dddddd}'/>
<arg declared_type64='Pixel_8' name='backColor' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAffineWarpCG_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='vImage_CGAffineTransform*' name='transform' null_accepted='false' type64='^{vImage_AffineTransform_Double=dddddd}'/>
<arg declared_type64='Pixel_F' name='backColor' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAffineWarpD_ARGB16S'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='vImage_AffineTransform_Double*' name='transform' null_accepted='false' type64='^{vImage_AffineTransform_Double=dddddd}'/>
<arg const='true' declared_type64='int16_t*' name='backColor' type64='^s'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAffineWarpD_ARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='vImage_AffineTransform_Double*' name='transform' null_accepted='false' type64='^{vImage_AffineTransform_Double=dddddd}'/>
<arg const='true' declared_type64='uint16_t*' name='backColor' type64='^S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAffineWarpD_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='vImage_AffineTransform_Double*' name='transform' null_accepted='false' type64='^{vImage_AffineTransform_Double=dddddd}'/>
<arg const='true' declared_type64='uint8_t*' name='backColor' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAffineWarpD_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='vImage_AffineTransform_Double*' name='transform' null_accepted='false' type64='^{vImage_AffineTransform_Double=dddddd}'/>
<arg const='true' declared_type64='float*' name='backColor' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAffineWarpD_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='vImage_AffineTransform_Double*' name='transform' null_accepted='false' type64='^{vImage_AffineTransform_Double=dddddd}'/>
<arg declared_type64='Pixel_8' name='backColor' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAffineWarpD_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='vImage_AffineTransform_Double*' name='transform' null_accepted='false' type64='^{vImage_AffineTransform_Double=dddddd}'/>
<arg declared_type64='Pixel_F' name='backColor' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAffineWarp_ARGB16S'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='vImage_AffineTransform*' name='transform' null_accepted='false' type64='^{vImage_AffineTransform=ffffff}'/>
<arg const='true' declared_type64='int16_t*' name='backColor' type64='^s'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAffineWarp_ARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='vImage_AffineTransform*' name='transform' null_accepted='false' type64='^{vImage_AffineTransform=ffffff}'/>
<arg const='true' declared_type64='uint16_t*' name='backColor' type64='^S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAffineWarp_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='vImage_AffineTransform*' name='transform' null_accepted='false' type64='^{vImage_AffineTransform=ffffff}'/>
<arg const='true' declared_type64='uint8_t*' name='backColor' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAffineWarp_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='vImage_AffineTransform*' name='transform' null_accepted='false' type64='^{vImage_AffineTransform=ffffff}'/>
<arg const='true' declared_type64='float*' name='backColor' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAffineWarp_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='vImage_AffineTransform*' name='transform' null_accepted='false' type64='^{vImage_AffineTransform=ffffff}'/>
<arg declared_type64='Pixel_8' name='backColor' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAffineWarp_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='vImage_AffineTransform*' name='transform' null_accepted='false' type64='^{vImage_AffineTransform=ffffff}'/>
<arg declared_type64='Pixel_F' name='backColor' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAlphaBlend_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAlphaBlend_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAlphaBlend_NonpremultipliedToPremultiplied_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAlphaBlend_NonpremultipliedToPremultiplied_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAlphaBlend_NonpremultipliedToPremultiplied_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTopAlpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAlphaBlend_NonpremultipliedToPremultiplied_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTopAlpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAlphaBlend_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTopAlpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottomAlpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='alpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageAlphaBlend_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTopAlpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottomAlpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='alpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageBoxConvolve_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='uint32_t' name='kernel_height' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width' type64='I'/>
<arg const='true' declared_type64='uint8_t*' name='backgroundColor' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageBoxConvolve_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='uint32_t' name='kernel_height' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width' type64='I'/>
<arg declared_type64='Pixel_8' name='backgroundColor' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageBufferFill_ARGB16S'>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='int16_t*' name='color' null_accepted='false' type64='^s'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageBufferFill_ARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint16_t*' name='color' null_accepted='false' type64='^S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageBufferFill_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint8_t*' name='color' null_accepted='false' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageBufferFill_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='color' null_accepted='false' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageBufferFill_CbCr16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint16_t*' name='color' null_accepted='false' type64='^S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageBufferFill_CbCr8'>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint8_t*' name='color' null_accepted='false' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageBuffer_CopyToCVPixelBuffer'>
<arg const='true' declared_type64='vImage_Buffer*' name='buffer' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_CGImageFormat*' name='bufferFormat' null_accepted='false' type64='^{vImage_CGImageFormat=II^{CGColorSpace}II^di}'/>
<arg declared_type64='CVPixelBufferRef' name='cvPixelBuffer' null_accepted='false' type64='^{__CVBuffer=}'/>
<arg declared_type64='vImageCVImageFormatRef' name='cvImageFormat' type64='^{vImageCVImageFormat=}'/>
<arg const='true' declared_type64='CGFloat*' name='backgroundColor' type64='^d'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageBuffer_GetSize'>
<arg const='true' declared_type64='vImage_Buffer*' name='buf' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<retval declared_type64='CGSize' type64='{CGSize=dd}'/>
</function>
<function name='vImageBuffer_Init'>
<arg declared_type64='vImage_Buffer*' name='buf' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='height' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='width' type64='Q'/>
<arg declared_type64='uint32_t' name='pixelBits' type64='I'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageBuffer_InitForCopyFromCVPixelBuffer'>
<arg declared_type64='vImage_Buffer*' name='buffers' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImageConverterRef' name='converter' null_accepted='false' type64='^{vImageConverter=}'/>
<arg const='true' declared_type64='CVPixelBufferRef' name='pixelBuffer' null_accepted='false' type64='^{__CVBuffer=}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageBuffer_InitForCopyToCVPixelBuffer'>
<arg declared_type64='vImage_Buffer*' name='buffers' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImageConverterRef' name='converter' null_accepted='false' type64='^{vImageConverter=}'/>
<arg const='true' declared_type64='CVPixelBufferRef' name='pixelBuffer' null_accepted='false' type64='^{__CVBuffer=}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageBuffer_InitWithCGImage'>
<arg declared_type64='vImage_Buffer*' name='buf' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_CGImageFormat*' name='format' null_accepted='false' type64='^{vImage_CGImageFormat=II^{CGColorSpace}II^di}'/>
<arg const='true' declared_type64='CGFloat*' name='backgroundColor' type64='^d'/>
<arg declared_type64='CGImageRef' name='image' null_accepted='false' type64='^{CGImage=}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageBuffer_InitWithCVPixelBuffer'>
<arg declared_type64='vImage_Buffer*' name='buffer' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_CGImageFormat*' name='desiredFormat' null_accepted='false' type64='^{vImage_CGImageFormat=II^{CGColorSpace}II^di}'/>
<arg declared_type64='CVPixelBufferRef' name='cvPixelBuffer' null_accepted='false' type64='^{__CVBuffer=}'/>
<arg declared_type64='vImageCVImageFormatRef' name='cvImageFormat' type64='^{vImageCVImageFormat=}'/>
<arg const='true' declared_type64='CGFloat*' name='backgroundColor' type64='^d'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageByteSwap_Planar16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageCGImageFormat_GetComponentCount'>
<arg const='true' declared_type64='vImage_CGImageFormat*' name='format' null_accepted='false' type64='^{vImage_CGImageFormat=II^{CGColorSpace}II^di}'/>
<retval declared_type64='uint32_t' type64='I'/>
</function>
<function name='vImageCGImageFormat_IsEqual'>
<arg const='true' declared_type64='vImage_CGImageFormat*' name='f1' type64='^{vImage_CGImageFormat=II^{CGColorSpace}II^di}'/>
<arg const='true' declared_type64='vImage_CGImageFormat*' name='f2' type64='^{vImage_CGImageFormat=II^{CGColorSpace}II^di}'/>
<retval declared_type64='Boolean' type64='B'/>
</function>
<function name='vImageCVImageFormat_Copy'>
<arg declared_type64='vImageConstCVImageFormatRef' name='format' null_accepted='false' type64='^{vImageCVImageFormat=}'/>
<retval already_retained='true' declared_type64='vImageCVImageFormatRef' type64='^{vImageCVImageFormat=}'/>
</function>
<function name='vImageCVImageFormat_CopyChannelDescription'>
<arg declared_type64='vImageCVImageFormatRef' name='format' null_accepted='false' type64='^{vImageCVImageFormat=}'/>
<arg const='true' declared_type64='vImageChannelDescription*' name='desc' null_accepted='false' type64='^{vImageChannelDescription=dddd}'/>
<arg declared_type64='vImageBufferTypeCode' name='type' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageCVImageFormat_CopyConversionMatrix'>
<arg declared_type64='vImageCVImageFormatRef' name='format' null_accepted='false' type64='^{vImageCVImageFormat=}'/>
<arg const='true' declared_type64='void*' name='matrix' null_accepted='false' type64='^v'/>
<arg declared_type64='vImageMatrixType' name='inType' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageCVImageFormat_Create'>
<arg declared_type64='uint32_t' name='imageFormatType' type64='I'/>
<arg const='true' declared_type64='vImage_ARGBToYpCbCrMatrix*' name='matrix' type64='^{vImage_ARGBToYpCbCrMatrix=ffffffff}'/>
<arg declared_type64='CFStringRef' name='cvImageBufferChromaLocation' type64='^{__CFString=}'/>
<arg declared_type64='CGColorSpaceRef' name='baseColorspace' type64='^{CGColorSpace=}'/>
<arg declared_type64='int' name='alphaIsOneHint' type64='i'/>
<retval already_retained='true' declared_type64='vImageCVImageFormatRef' type64='^{vImageCVImageFormat=}'/>
</function>
<function name='vImageCVImageFormat_CreateWithCVPixelBuffer'>
<arg declared_type64='CVPixelBufferRef' name='buffer' type64='^{__CVBuffer=}'/>
<retval already_retained='true' declared_type64='vImageCVImageFormatRef' type64='^{vImageCVImageFormat=}'/>
</function>
<function name='vImageCVImageFormat_GetAlphaHint'>
<arg declared_type64='vImageConstCVImageFormatRef' name='format' null_accepted='false' type64='^{vImageCVImageFormat=}'/>
<retval declared_type64='int' type64='i'/>
</function>
<function name='vImageCVImageFormat_GetChannelCount'>
<arg declared_type64='vImageConstCVImageFormatRef' name='format' null_accepted='false' type64='^{vImageCVImageFormat=}'/>
<retval declared_type64='uint32_t' type64='I'/>
</function>
<function name='vImageCVImageFormat_GetChannelDescription'>
<arg declared_type64='vImageConstCVImageFormatRef' name='format' null_accepted='false' type64='^{vImageCVImageFormat=}'/>
<arg declared_type64='vImageBufferTypeCode' name='type' type64='I'/>
<retval const='true' declared_type64='vImageChannelDescription*' type64='^{vImageChannelDescription=dddd}'/>
</function>
<function name='vImageCVImageFormat_GetChannelNames'>
<arg declared_type64='vImageConstCVImageFormatRef' name='format' null_accepted='false' type64='^{vImageCVImageFormat=}'/>
<retval const='true' declared_type64='vImageBufferTypeCode*' type64='^I'/>
</function>
<function name='vImageCVImageFormat_GetChromaSiting'>
<arg declared_type64='vImageConstCVImageFormatRef' name='format' null_accepted='false' type64='^{vImageCVImageFormat=}'/>
<retval declared_type64='CFStringRef' type64='^{__CFString=}'/>
</function>
<function name='vImageCVImageFormat_GetColorSpace'>
<arg declared_type64='vImageConstCVImageFormatRef' name='format' null_accepted='false' type64='^{vImageCVImageFormat=}'/>
<retval declared_type64='CGColorSpaceRef' type64='^{CGColorSpace=}'/>
</function>
<function name='vImageCVImageFormat_GetConversionMatrix'>
<arg declared_type64='vImageConstCVImageFormatRef' name='format' null_accepted='false' type64='^{vImageCVImageFormat=}'/>
<arg declared_type64='vImageMatrixType*' name='outType' type64='^I'/>
<retval const='true' declared_type64='void*' type64='^v'/>
</function>
<function name='vImageCVImageFormat_GetFormatCode'>
<arg declared_type64='vImageConstCVImageFormatRef' name='format' null_accepted='false' type64='^{vImageCVImageFormat=}'/>
<retval declared_type64='uint32_t' type64='I'/>
</function>
<function name='vImageCVImageFormat_GetUserData'>
<arg declared_type64='vImageConstCVImageFormatRef' name='format' null_accepted='false' type64='^{vImageCVImageFormat=}'/>
<retval declared_type64='void*' type64='^v'/>
</function>
<function name='vImageCVImageFormat_Release'>
<arg declared_type64='vImageCVImageFormatRef' name='fmt' type64='^{vImageCVImageFormat=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='vImageCVImageFormat_Retain'>
<arg declared_type64='vImageCVImageFormatRef' name='fmt' type64='^{vImageCVImageFormat=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='vImageCVImageFormat_SetAlphaHint'>
<arg declared_type64='vImageCVImageFormatRef' name='format' null_accepted='false' type64='^{vImageCVImageFormat=}'/>
<arg declared_type64='int' name='alphaIsOne' type64='i'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageCVImageFormat_SetChromaSiting'>
<arg declared_type64='vImageCVImageFormatRef' name='format' null_accepted='false' type64='^{vImageCVImageFormat=}'/>
<arg declared_type64='CFStringRef' name='siting' type64='^{__CFString=}'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageCVImageFormat_SetColorSpace'>
<arg declared_type64='vImageCVImageFormatRef' name='format' null_accepted='false' type64='^{vImageCVImageFormat=}'/>
<arg declared_type64='CGColorSpaceRef' name='colorspace' type64='^{CGColorSpace=}'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageCVImageFormat_SetUserData'>
<arg declared_type64='vImageCVImageFormatRef' name='format' null_accepted='false' type64='^{vImageCVImageFormat=}'/>
<arg declared_type64='void*' name='userData' type64='^v'/>
<arg declared_type64='void (*)(vImageCVImageFormatRef, void *)' function_pointer='true' name='userDataReleaseCallback' type64='^?'>
<arg declared_type64='vImageCVImageFormatRef' type64='^{vImageCVImageFormat=}'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageClipToAlpha_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageClipToAlpha_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageClipToAlpha_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='alpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageClipToAlpha_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='alpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageClipToAlpha_RGBA8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageClipToAlpha_RGBAFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageClip_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_F' name='maxFloat' type64='f'/>
<arg declared_type64='Pixel_F' name='minFloat' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageContrastStretch_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageContrastStretch_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='unsigned int' name='histogram_entries' type64='I'/>
<arg declared_type64='Pixel_F' name='minVal' type64='f'/>
<arg declared_type64='Pixel_F' name='maxVal' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageContrastStretch_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageContrastStretch_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='unsigned int' name='histogram_entries' type64='I'/>
<arg declared_type64='Pixel_F' name='minVal' type64='f'/>
<arg declared_type64='Pixel_F' name='maxVal' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_12UTo16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_16Fto16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_16Fto16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_16Q12to16F'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_16Q12to16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_16Q12to8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_16Q12toF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_16SToF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='float' name='offset' type64='f'/>
<arg declared_type64='float' name='scale' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_16UTo12U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_16UToF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='float' name='offset' type64='f'/>
<arg declared_type64='float' name='scale' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_16UToPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_16Uto16F'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_16Uto16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_420Yp8_Cb8_Cr8ToARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcYp' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcCb' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcCr' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_YpCbCrToARGB*' name='info' null_accepted='false' type64='^{vImage_YpCbCrToARGB=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg const='true' declared_type64='uint8_t' name='alpha' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_420Yp8_CbCr8ToARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcYp' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcCbCr' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_YpCbCrToARGB*' name='info' null_accepted='false' type64='^{vImage_YpCbCrToARGB=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg const='true' declared_type64='uint8_t' name='alpha' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_422CbYpCrYp16ToARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_YpCbCrToARGB*' name='info' null_accepted='false' type64='^{vImage_YpCbCrToARGB=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg const='true' declared_type64='uint16_t' name='alpha' type64='S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_422CbYpCrYp16ToARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_YpCbCrToARGB*' name='info' null_accepted='false' type64='^{vImage_YpCbCrToARGB=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg const='true' declared_type64='uint8_t' name='alpha' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_422CbYpCrYp8ToARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_YpCbCrToARGB*' name='info' null_accepted='false' type64='^{vImage_YpCbCrToARGB=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg const='true' declared_type64='uint8_t' name='alpha' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_422CbYpCrYp8_AA8ToARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcA' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_YpCbCrToARGB*' name='info' null_accepted='false' type64='^{vImage_YpCbCrToARGB=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_422CrYpCbYpCbYpCbYpCrYpCrYp10ToARGB16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_YpCbCrToARGB*' name='info' null_accepted='false' type64='^{vImage_YpCbCrToARGB=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg const='true' declared_type64='Pixel_16Q12' name='alpha' type64='s'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_422CrYpCbYpCbYpCbYpCrYpCrYp10ToARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_YpCbCrToARGB*' name='info' null_accepted='false' type64='^{vImage_YpCbCrToARGB=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg const='true' declared_type64='uint8_t' name='alpha' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_422YpCbYpCr8ToARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_YpCbCrToARGB*' name='info' null_accepted='false' type64='^{vImage_YpCbCrToARGB=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg const='true' declared_type64='uint8_t' name='alpha' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_444AYpCbCr16ToARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_YpCbCrToARGB*' name='info' null_accepted='false' type64='^{vImage_YpCbCrToARGB=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_444AYpCbCr16ToARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_YpCbCrToARGB*' name='info' null_accepted='false' type64='^{vImage_YpCbCrToARGB=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_444AYpCbCr8ToARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_YpCbCrToARGB*' name='info' null_accepted='false' type64='^{vImage_YpCbCrToARGB=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_444CbYpCrA8ToARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_YpCbCrToARGB*' name='info' null_accepted='false' type64='^{vImage_YpCbCrToARGB=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_444CrYpCb10ToARGB16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_YpCbCrToARGB*' name='info' null_accepted='false' type64='^{vImage_YpCbCrToARGB=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg const='true' declared_type64='Pixel_16Q12' name='alpha' type64='s'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_444CrYpCb10ToARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_YpCbCrToARGB*' name='info' null_accepted='false' type64='^{vImage_YpCbCrToARGB=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg const='true' declared_type64='uint8_t' name='alpha' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_444CrYpCb8ToARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_YpCbCrToARGB*' name='info' null_accepted='false' type64='^{vImage_YpCbCrToARGB=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg const='true' declared_type64='uint8_t' name='alpha' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_8to16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB1555toARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB1555toPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destA' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destR' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destG' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destB' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB1555toRGB565'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB16Q12To422CrYpCbYpCbYpCbYpCrYpCrYp10'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_ARGBToYpCbCr*' name='info' null_accepted='false' type64='^{vImage_ARGBToYpCbCr=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB16Q12To444CrYpCb10'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_ARGBToYpCbCr*' name='info' null_accepted='false' type64='^{vImage_ARGBToYpCbCr=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB16Q12ToARGB2101010'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010Min' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010Max' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB16Q12ToRGBA1010102'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010Min' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010Max' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB16Q12ToXRGB2101010'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010Min' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010Max' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB16UTo422CbYpCrYp16'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_ARGBToYpCbCr*' name='info' null_accepted='false' type64='^{vImage_ARGBToYpCbCr=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB16UTo444AYpCbCr16'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_ARGBToYpCbCr*' name='info' null_accepted='false' type64='^{vImage_ARGBToYpCbCr=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB16UToARGB2101010'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB16UToARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' null_accepted='false' type64='*'/>
<arg declared_type64='uint8_t' name='copyMask' type64='C'/>
<arg const='true' declared_type64='uint8_t*' name='backgroundColor' null_accepted='false' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB16UToRGBA1010102'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB16UToXRGB2101010'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB16UtoARGB8888_dithered'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int' name='dither' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB16UtoPlanar16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='argbSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='aDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='rDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='gDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='bDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB16UtoRGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='argbSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='rgbDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB2101010ToARGB16F'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB2101010ToARGB16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB2101010ToARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB2101010ToARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB2101010ToARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888To420Yp8_Cb8_Cr8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destYp' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destCb' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destCr' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_ARGBToYpCbCr*' name='info' null_accepted='false' type64='^{vImage_ARGBToYpCbCr=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888To420Yp8_CbCr8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destYp' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destCbCr' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_ARGBToYpCbCr*' name='info' null_accepted='false' type64='^{vImage_ARGBToYpCbCr=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888To422CbYpCrYp16'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_ARGBToYpCbCr*' name='info' null_accepted='false' type64='^{vImage_ARGBToYpCbCr=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888To422CbYpCrYp8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_ARGBToYpCbCr*' name='info' null_accepted='false' type64='^{vImage_ARGBToYpCbCr=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888To422CbYpCrYp8_AA8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destA' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_ARGBToYpCbCr*' name='info' null_accepted='false' type64='^{vImage_ARGBToYpCbCr=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888To422CrYpCbYpCbYpCbYpCrYpCrYp10'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_ARGBToYpCbCr*' name='info' null_accepted='false' type64='^{vImage_ARGBToYpCbCr=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888To422YpCbYpCr8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_ARGBToYpCbCr*' name='info' null_accepted='false' type64='^{vImage_ARGBToYpCbCr=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888To444AYpCbCr16'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_ARGBToYpCbCr*' name='info' null_accepted='false' type64='^{vImage_ARGBToYpCbCr=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888To444AYpCbCr8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_ARGBToYpCbCr*' name='info' null_accepted='false' type64='^{vImage_ARGBToYpCbCr=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888To444CbYpCrA8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_ARGBToYpCbCr*' name='info' null_accepted='false' type64='^{vImage_ARGBToYpCbCr=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888To444CrYpCb10'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_ARGBToYpCbCr*' name='info' null_accepted='false' type64='^{vImage_ARGBToYpCbCr=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888To444CrYpCb8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_ARGBToYpCbCr*' name='info' null_accepted='false' type64='^{vImage_ARGBToYpCbCr=[128C]}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888ToARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' null_accepted='false' type64='*'/>
<arg declared_type64='uint8_t' name='copyMask' type64='C'/>
<arg const='true' declared_type64='uint16_t*' name='backgroundColor' null_accepted='false' type64='^S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888ToARGB2101010'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888ToRGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' null_accepted='false' type64='*'/>
<arg declared_type64='uint8_t' name='copyMask' type64='C'/>
<arg const='true' declared_type64='Pixel_16U*' name='backgroundColor' null_accepted='false' type64='^S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888ToRGBA1010102'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888ToXRGB2101010'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888toARGB1555'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888toARGB1555_dithered'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='int' name='dither' type64='i'/>
<arg const='true' declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888toPlanar16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='alpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='red' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888toPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcARGB' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destA' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destR' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destG' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destB' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888toPlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='alpha' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='red' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='maxFloat' type64='^f'/>
<arg const='true' declared_type64='float*' name='minFloat' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888toRGB565'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888toRGB565_dithered'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='int' name='dither' type64='i'/>
<arg const='true' declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGB8888toRGB888'>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGBFFFFToARGB2101010'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGBFFFFToXRGB2101010'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGBFFFFtoARGB8888_dithered'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='maxFloat' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='float*' name='minFloat' null_accepted='false' type64='^f'/>
<arg declared_type64='int' name='dither' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGBFFFFtoPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='alpha' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='red' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='maxFloat' type64='^f'/>
<arg const='true' declared_type64='float*' name='minFloat' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGBFFFFtoPlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcARGB' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destA' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destR' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destG' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destB' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGBFFFFtoRGBFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ARGBToYpCbCr_GenerateConversion'>
<arg const='true' declared_type64='vImage_ARGBToYpCbCrMatrix*' name='matrix' null_accepted='false' type64='^{vImage_ARGBToYpCbCrMatrix=ffffffff}'/>
<arg const='true' declared_type64='vImage_YpCbCrPixelRange*' name='pixelRange' null_accepted='false' type64='^{vImage_YpCbCrPixelRange=iiiiiiii}'/>
<arg declared_type64='vImage_ARGBToYpCbCr*' name='outInfo' null_accepted='false' type64='^{vImage_ARGBToYpCbCr=[128C]}'/>
<arg declared_type64='vImageARGBType' name='inARGBType' type64='i'/>
<arg declared_type64='vImageYpCbCrType' name='outYpCbCrType' type64='i'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_AnyToAny'>
<arg const='true' declared_type64='vImageConverterRef' name='converter' null_accepted='false' type64='^{vImageConverter=}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcs' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dests' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_BGRA16UtoRGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='bgraSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='rgbDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_BGRA8888toRGB565'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_BGRA8888toRGB565_dithered'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='int' name='dither' type64='i'/>
<arg const='true' declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_BGRA8888toRGB888'>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_BGRAFFFFtoRGBFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_BGRX8888ToPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='red' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_BGRXFFFFToPlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='red' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ChunkyToPlanar8'>
<arg const='true' declared_type64='void**' name='srcChannels' null_accepted='false' type64='^^v'/>
<arg const='true' declared_type64='vImage_Buffer**' name='destPlanarBuffers' null_accepted='false' type64='^^{vImage_Buffer}'/>
<arg declared_type64='unsigned int' name='channelCount' type64='I'/>
<arg declared_type64='size_t' name='srcStrideBytes' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcWidth' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcHeight' type64='Q'/>
<arg declared_type64='size_t' name='srcRowBytes' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_ChunkyToPlanarF'>
<arg const='true' declared_type64='void**' name='srcChannels' null_accepted='false' type64='^^v'/>
<arg const='true' declared_type64='vImage_Buffer**' name='destPlanarBuffers' null_accepted='false' type64='^^{vImage_Buffer}'/>
<arg declared_type64='unsigned int' name='channelCount' type64='I'/>
<arg declared_type64='size_t' name='srcStrideBytes' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcWidth' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcHeight' type64='Q'/>
<arg declared_type64='size_t' name='srcRowBytes' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_FTo16S'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='float' name='offset' type64='f'/>
<arg declared_type64='float' name='scale' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_FTo16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='float' name='offset' type64='f'/>
<arg declared_type64='float' name='scale' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Fto16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Indexed1toPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='Pixel_8*' name='colors' null_accepted='false' type64='*'/>
<arg const='true' declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Indexed2toPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='Pixel_8*' name='colors' null_accepted='false' type64='*'/>
<arg const='true' declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Indexed4toPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='Pixel_8*' name='colors' null_accepted='false' type64='*'/>
<arg const='true' declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar16FtoPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar16FtoPlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar16Q12toARGB16F'>
<arg const='true' declared_type64='vImage_Buffer*' name='alpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='red' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar16Q12toARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='alpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='red' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar16Q12toRGB16F'>
<arg const='true' declared_type64='vImage_Buffer*' name='red' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar16Q12toRGB888'>
<arg const='true' declared_type64='vImage_Buffer*' name='red' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar16UtoARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='aSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='rSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='gSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='bSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='argbDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar16UtoPlanar8_dithered'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int' name='dither' type64='i'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar16UtoRGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='rSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='gSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='bSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='rgbDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar1toPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar2toPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar4toPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar8To16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar8ToARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='alpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='red' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='maxFloat' type64='^f'/>
<arg const='true' declared_type64='float*' name='minFloat' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar8ToBGRX8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='red' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_8' name='alpha' type64='C'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar8ToBGRXFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='red' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_F' name='alpha' type64='f'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='maxFloat' type64='^f'/>
<arg const='true' declared_type64='float*' name='minFloat' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar8ToXRGB8888'>
<arg declared_type64='Pixel_8' name='alpha' type64='C'/>
<arg const='true' declared_type64='vImage_Buffer*' name='red' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar8ToXRGBFFFF'>
<arg declared_type64='Pixel_F' name='alpha' type64='f'/>
<arg const='true' declared_type64='vImage_Buffer*' name='red' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='maxFloat' type64='^f'/>
<arg const='true' declared_type64='float*' name='minFloat' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar8toARGB1555'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcA' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcR' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcG' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcB' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar8toARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcA' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcR' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcG' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcB' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar8toIndexed1'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='Pixel_8*' name='colors' null_accepted='false' type64='*'/>
<arg declared_type64='int' name='dither' type64='i'/>
<arg const='true' declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar8toIndexed2'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='Pixel_8*' name='colors' null_accepted='false' type64='*'/>
<arg declared_type64='int' name='dither' type64='i'/>
<arg const='true' declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar8toIndexed4'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='Pixel_8*' name='colors' null_accepted='false' type64='*'/>
<arg declared_type64='int' name='dither' type64='i'/>
<arg const='true' declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar8toPlanar1'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='int' name='dither' type64='i'/>
<arg const='true' declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar8toPlanar16F'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar8toPlanar2'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='int' name='dither' type64='i'/>
<arg const='true' declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar8toPlanar4'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='int' name='dither' type64='i'/>
<arg const='true' declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar8toPlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_F' name='maxFloat' type64='f'/>
<arg declared_type64='Pixel_F' name='minFloat' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar8toRGB565'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcR' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcG' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcB' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_Planar8toRGB888'>
<arg const='true' declared_type64='vImage_Buffer*' name='planarRed' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='planarGreen' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='planarBlue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='rgbDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_PlanarFToARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='alpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='red' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='maxFloat' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='float*' name='minFloat' null_accepted='false' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_PlanarFToBGRX8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='red' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_8' name='alpha' type64='C'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='maxFloat' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='float*' name='minFloat' null_accepted='false' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_PlanarFToBGRXFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='red' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_F' name='alpha' type64='f'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_PlanarFToXRGB8888'>
<arg declared_type64='Pixel_8' name='alpha' type64='C'/>
<arg const='true' declared_type64='vImage_Buffer*' name='red' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='maxFloat' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='float*' name='minFloat' null_accepted='false' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_PlanarFToXRGBFFFF'>
<arg declared_type64='Pixel_F' name='alpha' type64='f'/>
<arg const='true' declared_type64='vImage_Buffer*' name='red' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_PlanarFtoARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcA' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcR' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcG' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcB' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_PlanarFtoPlanar16F'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_PlanarFtoPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_F' name='maxFloat' type64='f'/>
<arg declared_type64='Pixel_F' name='minFloat' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_PlanarFtoPlanar8_dithered'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_F' name='maxFloat' type64='f'/>
<arg declared_type64='Pixel_F' name='minFloat' type64='f'/>
<arg declared_type64='int' name='dither' type64='i'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_PlanarFtoRGBFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='planarRed' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='planarGreen' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='planarBlue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='rgbDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_PlanarToChunky8'>
<arg const='true' declared_type64='vImage_Buffer**' name='srcPlanarBuffers' null_accepted='false' type64='^^{vImage_Buffer}'/>
<arg declared_type64='void**' name='destChannels' null_accepted='false' type64='^^v'/>
<arg declared_type64='unsigned int' name='channelCount' type64='I'/>
<arg declared_type64='size_t' name='destStrideBytes' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='destWidth' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='destHeight' type64='Q'/>
<arg declared_type64='size_t' name='destRowBytes' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_PlanarToChunkyF'>
<arg const='true' declared_type64='vImage_Buffer**' name='srcPlanarBuffers' null_accepted='false' type64='^^{vImage_Buffer}'/>
<arg declared_type64='void**' name='destChannels' null_accepted='false' type64='^^v'/>
<arg declared_type64='unsigned int' name='channelCount' type64='I'/>
<arg declared_type64='size_t' name='destStrideBytes' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='destWidth' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='destHeight' type64='Q'/>
<arg declared_type64='size_t' name='destRowBytes' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGB16UToARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' null_accepted='false' type64='*'/>
<arg declared_type64='uint8_t' name='copyMask' type64='C'/>
<arg const='true' declared_type64='uint8_t*' name='backgroundColor' null_accepted='false' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGB16UtoARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='rgbSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='aSrc' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_16U' name='alpha' type64='S'/>
<arg const='true' declared_type64='vImage_Buffer*' name='argbDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='_Bool' name='premultiply' type64='B'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGB16UtoBGRA16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='rgbSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='aSrc' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_16U' name='alpha' type64='S'/>
<arg const='true' declared_type64='vImage_Buffer*' name='bgraDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='_Bool' name='premultiply' type64='B'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGB16UtoPlanar16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='rgbSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='rDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='gDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='bDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGB16UtoRGB888_dithered'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int' name='dither' type64='i'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGB16UtoRGBA16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='rgbSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='aSrc' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_16U' name='alpha' type64='S'/>
<arg const='true' declared_type64='vImage_Buffer*' name='rgbaDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='_Bool' name='premultiply' type64='B'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGB565toARGB1555'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int' name='dither' type64='i'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGB565toARGB8888'>
<arg declared_type64='Pixel_8' name='alpha' type64='C'/>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGB565toBGRA8888'>
<arg declared_type64='Pixel_8' name='alpha' type64='C'/>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGB565toPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destR' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destG' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='destB' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGB565toRGB888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGB565toRGBA5551'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int' name='dither' type64='i'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGB565toRGBA8888'>
<arg declared_type64='Pixel_8' name='alpha' type64='C'/>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGB888toARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_8' type64='C'/>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='_Bool' type64='B'/>
<arg declared_type64='vImage_Flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGB888toBGRA8888'>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_8' type64='C'/>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='_Bool' type64='B'/>
<arg declared_type64='vImage_Flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGB888toPlanar16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='red' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGB888toPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='rgbSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='redDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='greenDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='blueDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGB888toRGB565_dithered'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='int' name='dither' type64='i'/>
<arg const='true' declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGB888toRGBA8888'>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_8' type64='C'/>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='_Bool' type64='B'/>
<arg declared_type64='vImage_Flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGBA1010102ToARGB16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGBA1010102ToARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGBA1010102ToARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGBA16UtoRGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='rgbaSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='rgbDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGBA5551toRGB565'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGBA5551toRGBA8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGBA8888toRGB565'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGBA8888toRGB565_dithered'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='int' name='dither' type64='i'/>
<arg const='true' declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGBA8888toRGB888'>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGBA8888toRGBA5551'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGBA8888toRGBA5551_dithered'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='int' name='dither' type64='i'/>
<arg const='true' declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGBAFFFFtoRGBFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGBFFFtoARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_F' type64='f'/>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='_Bool' type64='B'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGBFFFtoBGRAFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_F' type64='f'/>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='_Bool' type64='B'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGBFFFtoPlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='rgbSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='redDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='greenDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='blueDest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGBFFFtoRGB888_dithered'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='Pixel_F*' name='maxFloat' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='Pixel_F*' name='minFloat' null_accepted='false' type64='^f'/>
<arg declared_type64='int' name='dither' type64='i'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_RGBFFFtoRGBAFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_F' type64='f'/>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='_Bool' type64='B'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_XRGB2101010ToARGB16F'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_F' name='alpha' type64='f'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_XRGB2101010ToARGB16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_16Q12' name='alpha' type64='s'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_XRGB2101010ToARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='uint16_t' name='alpha' type64='S'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_XRGB2101010ToARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_8' name='alpha' type64='C'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_XRGB2101010ToARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_F' name='alpha' type64='f'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='int32_t' name='RGB101010RangeMin' type64='i'/>
<arg declared_type64='int32_t' name='RGB101010RangeMax' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_XRGB8888ToPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='red' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_XRGBFFFFToPlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='red' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='green' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='blue' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvert_YpCbCrToARGB_GenerateConversion'>
<arg const='true' declared_type64='vImage_YpCbCrToARGBMatrix*' name='matrix' null_accepted='false' type64='^{vImage_YpCbCrToARGBMatrix=fffff}'/>
<arg const='true' declared_type64='vImage_YpCbCrPixelRange*' name='pixelRange' null_accepted='false' type64='^{vImage_YpCbCrPixelRange=iiiiiiii}'/>
<arg declared_type64='vImage_YpCbCrToARGB*' name='outInfo' null_accepted='false' type64='^{vImage_YpCbCrToARGB=[128C]}'/>
<arg declared_type64='vImageYpCbCrType' name='inYpCbCrType' type64='i'/>
<arg declared_type64='vImageARGBType' name='outARGBType' type64='i'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConverter_CreateForCGToCVImageFormat'>
<arg const='true' declared_type64='vImage_CGImageFormat*' name='srcFormat' null_accepted='false' type64='^{vImage_CGImageFormat=II^{CGColorSpace}II^di}'/>
<arg declared_type64='vImageCVImageFormatRef' name='destFormat' null_accepted='false' type64='^{vImageCVImageFormat=}'/>
<arg const='true' declared_type64='CGFloat*' name='backgroundColor' type64='^d'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<arg declared_type64='vImage_Error*' name='error' type64='^q'/>
<retval already_retained='true' declared_type64='vImageConverterRef' type64='^{vImageConverter=}'/>
</function>
<function name='vImageConverter_CreateForCVToCGImageFormat'>
<arg declared_type64='vImageCVImageFormatRef' name='srcFormat' null_accepted='false' type64='^{vImageCVImageFormat=}'/>
<arg const='true' declared_type64='vImage_CGImageFormat*' name='destFormat' null_accepted='false' type64='^{vImage_CGImageFormat=II^{CGColorSpace}II^di}'/>
<arg const='true' declared_type64='CGFloat*' name='backgroundColor' type64='^d'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<arg declared_type64='vImage_Error*' name='error' type64='^q'/>
<retval already_retained='true' declared_type64='vImageConverterRef' type64='^{vImageConverter=}'/>
</function>
<function name='vImageConverter_CreateWithCGColorConversionInfo'>
<arg declared_type64='CGColorConversionInfoRef' name='colorConversionInfoRef' null_accepted='false' type64='^{CGColorConversionInfo=}'/>
<arg const='true' declared_type64='vImage_CGImageFormat*' name='sFormat' null_accepted='false' type64='^{vImage_CGImageFormat=II^{CGColorSpace}II^di}'/>
<arg const='true' declared_type64='vImage_CGImageFormat*' name='dFormat' null_accepted='false' type64='^{vImage_CGImageFormat=II^{CGColorSpace}II^di}'/>
<arg const='true' declared_type64='CGFloat*' name='bg' type64='^d'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<arg declared_type64='vImage_Error*' name='error' type64='^q'/>
<retval already_retained='true' declared_type64='vImageConverterRef' type64='^{vImageConverter=}'/>
</function>
<function name='vImageConverter_CreateWithCGImageFormat'>
<arg const='true' declared_type64='vImage_CGImageFormat*' name='srcFormat' null_accepted='false' type64='^{vImage_CGImageFormat=II^{CGColorSpace}II^di}'/>
<arg const='true' declared_type64='vImage_CGImageFormat*' name='destFormat' null_accepted='false' type64='^{vImage_CGImageFormat=II^{CGColorSpace}II^di}'/>
<arg const='true' declared_type64='CGFloat*' name='backgroundColor' type64='^d'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<arg declared_type64='vImage_Error*' name='error' type64='^q'/>
<retval already_retained='true' declared_type64='vImageConverterRef' type64='^{vImageConverter=}'/>
</function>
<function name='vImageConverter_CreateWithColorSyncCodeFragment'>
<arg declared_type64='CFTypeRef' name='codeFragment' null_accepted='false' type64='@'/>
<arg const='true' declared_type64='vImage_CGImageFormat*' name='srcFormat' null_accepted='false' type64='^{vImage_CGImageFormat=II^{CGColorSpace}II^di}'/>
<arg const='true' declared_type64='vImage_CGImageFormat*' name='destFormat' type64='^{vImage_CGImageFormat=II^{CGColorSpace}II^di}'/>
<arg const='true' declared_type64='CGFloat*' name='backgroundColor' type64='^d'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<arg declared_type64='vImage_Error*' name='error' type64='^q'/>
<retval already_retained='true' declared_type64='vImageConverterRef' type64='^{vImageConverter=}'/>
</function>
<function name='vImageConverter_GetDestinationBufferOrder'>
<arg declared_type64='vImageConverterRef' name='converter' null_accepted='false' type64='^{vImageConverter=}'/>
<retval const='true' declared_type64='vImageBufferTypeCode*' type64='^I'/>
</function>
<function name='vImageConverter_GetNumberOfDestinationBuffers'>
<arg const='true' declared_type64='vImageConverterRef' name='converter' null_accepted='false' type64='^{vImageConverter=}'/>
<retval declared_type64='unsigned long' type64='Q'/>
</function>
<function name='vImageConverter_GetNumberOfSourceBuffers'>
<arg const='true' declared_type64='vImageConverterRef' name='converter' null_accepted='false' type64='^{vImageConverter=}'/>
<retval declared_type64='unsigned long' type64='Q'/>
</function>
<function name='vImageConverter_GetSourceBufferOrder'>
<arg declared_type64='vImageConverterRef' name='converter' null_accepted='false' type64='^{vImageConverter=}'/>
<retval const='true' declared_type64='vImageBufferTypeCode*' type64='^I'/>
</function>
<function name='vImageConverter_MustOperateOutOfPlace'>
<arg const='true' declared_type64='vImageConverterRef' name='converter' null_accepted='false' type64='^{vImageConverter=}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcs' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dests' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConverter_Release'>
<arg declared_type64='vImageConverterRef' name='converter' type64='^{vImageConverter=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='vImageConverter_Retain'>
<arg declared_type64='vImageConverterRef' name='converter' type64='^{vImageConverter=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='vImageConvolveMultiKernel_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='int16_t**' name='kernels' type64='^^s'/>
<arg declared_type64='uint32_t' name='kernel_height' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width' type64='I'/>
<arg const='true' declared_type64='int32_t*' name='divisors' type64='^i'/>
<arg const='true' declared_type64='int32_t*' name='biases' type64='^i'/>
<arg const='true' declared_type64='uint8_t*' name='backgroundColor' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvolveMultiKernel_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='float**' name='kernels' null_accepted='false' type64='^^f'/>
<arg declared_type64='uint32_t' name='kernel_height' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width' type64='I'/>
<arg const='true' declared_type64='float*' name='biases' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='float*' name='backgroundColor' null_accepted='false' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvolveWithBias_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='int16_t*' name='kernel' type64='^s'/>
<arg declared_type64='uint32_t' name='kernel_height' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width' type64='I'/>
<arg declared_type64='int32_t' name='divisor' type64='i'/>
<arg declared_type64='int32_t' name='bias' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='backgroundColor' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvolveWithBias_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='float*' name='kernel' type64='^f'/>
<arg declared_type64='uint32_t' name='kernel_height' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width' type64='I'/>
<arg declared_type64='float' name='bias' type64='f'/>
<arg const='true' declared_type64='float*' name='backgroundColor' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvolveWithBias_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='int16_t*' name='kernel' type64='^s'/>
<arg declared_type64='uint32_t' name='kernel_height' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width' type64='I'/>
<arg declared_type64='int32_t' name='divisor' type64='i'/>
<arg declared_type64='int32_t' name='bias' type64='i'/>
<arg declared_type64='Pixel_8' name='backgroundColor' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvolveWithBias_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='float*' name='kernel' type64='^f'/>
<arg declared_type64='uint32_t' name='kernel_height' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width' type64='I'/>
<arg declared_type64='float' name='bias' type64='f'/>
<arg declared_type64='Pixel_F' name='backgroundColor' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvolve_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='int16_t*' name='kernel' type64='^s'/>
<arg declared_type64='uint32_t' name='kernel_height' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width' type64='I'/>
<arg declared_type64='int32_t' name='divisor' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='backgroundColor' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvolve_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='float*' name='kernel' type64='^f'/>
<arg declared_type64='uint32_t' name='kernel_height' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width' type64='I'/>
<arg const='true' declared_type64='float*' name='backgroundColor' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvolve_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='int16_t*' name='kernel' type64='^s'/>
<arg declared_type64='uint32_t' name='kernel_height' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width' type64='I'/>
<arg declared_type64='int32_t' name='divisor' type64='i'/>
<arg declared_type64='Pixel_8' name='backgroundColor' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageConvolve_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='float*' name='kernel' type64='^f'/>
<arg declared_type64='uint32_t' name='kernel_height' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width' type64='I'/>
<arg declared_type64='Pixel_F' name='backgroundColor' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageCopyBuffer'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='size_t' name='pixelSize' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageCreateCGImageFromBuffer'>
<arg const='true' declared_type64='vImage_Buffer*' name='buf' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_CGImageFormat*' name='format' null_accepted='false' type64='^{vImage_CGImageFormat=II^{CGColorSpace}II^di}'/>
<arg declared_type64='void (*)(void *, void *)' function_pointer='true' name='callback' type64='^?'>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='void*' name='userData' type64='^v'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<arg declared_type64='vImage_Error*' name='error' type64='^q'/>
<retval already_retained='true' declared_type64='CGImageRef' type64='^{CGImage=}'/>
</function>
<function name='vImageCreateGammaFunction'>
<arg declared_type64='float' name='gamma' type64='f'/>
<arg declared_type64='int' name='gamma_type' type64='i'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='GammaFunction' type64='^v'/>
</function>
<function name='vImageCreateMonochromeColorSpaceWithWhitePointAndTransferFunction'>
<arg const='true' declared_type64='vImageWhitePoint*' name='whitePoint' null_accepted='false' type64='^{vImageWhitePoint=ff}'/>
<arg const='true' declared_type64='vImageTransferFunction*' name='tf' null_accepted='false' type64='^{vImageTransferFunction=dddddddd}'/>
<arg declared_type64='CGColorRenderingIntent' name='intent' type64='i'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<arg declared_type64='vImage_Error*' name='error' type64='^q'/>
<retval already_retained='true' declared_type64='CGColorSpaceRef' type64='^{CGColorSpace=}'/>
</function>
<function name='vImageCreateRGBColorSpaceWithPrimariesAndTransferFunction'>
<arg const='true' declared_type64='vImageRGBPrimaries*' name='primaries' null_accepted='false' type64='^{vImageRGBPrimaries=ffffffff}'/>
<arg const='true' declared_type64='vImageTransferFunction*' name='tf' null_accepted='false' type64='^{vImageTransferFunction=dddddddd}'/>
<arg declared_type64='CGColorRenderingIntent' name='intent' type64='i'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<arg declared_type64='vImage_Error*' name='error' type64='^q'/>
<retval already_retained='true' declared_type64='CGColorSpaceRef' type64='^{CGColorSpace=}'/>
</function>
<function name='vImageDestroyGammaFunction'>
<arg declared_type64='GammaFunction' name='f' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='vImageDestroyResamplingFilter'>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='vImageDilate_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='unsigned char*' name='kernel' null_accepted='false' type64='*'/>
<arg declared_type64='vImagePixelCount' name='kernel_height' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_width' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageDilate_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='float*' name='kernel' null_accepted='false' type64='^f'/>
<arg declared_type64='vImagePixelCount' name='kernel_height' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_width' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageDilate_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='unsigned char*' name='kernel' null_accepted='false' type64='*'/>
<arg declared_type64='vImagePixelCount' name='kernel_height' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_width' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageDilate_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='float*' name='kernel' null_accepted='false' type64='^f'/>
<arg declared_type64='vImagePixelCount' name='kernel_height' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_width' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageEndsInContrastStretch_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='unsigned int*' name='percent_low' null_accepted='false' type64='^I'/>
<arg const='true' declared_type64='unsigned int*' name='percent_high' null_accepted='false' type64='^I'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageEndsInContrastStretch_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='unsigned int*' name='percent_low' null_accepted='false' type64='^I'/>
<arg const='true' declared_type64='unsigned int*' name='percent_high' null_accepted='false' type64='^I'/>
<arg declared_type64='unsigned int' name='histogram_entries' type64='I'/>
<arg declared_type64='Pixel_F' name='minVal' type64='f'/>
<arg declared_type64='Pixel_F' name='maxVal' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageEndsInContrastStretch_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='unsigned int' name='percent_low' type64='I'/>
<arg declared_type64='unsigned int' name='percent_high' type64='I'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageEndsInContrastStretch_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='unsigned int' name='percent_low' type64='I'/>
<arg declared_type64='unsigned int' name='percent_high' type64='I'/>
<arg declared_type64='unsigned int' name='histogram_entries' type64='I'/>
<arg declared_type64='Pixel_F' name='minVal' type64='f'/>
<arg declared_type64='Pixel_F' name='maxVal' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageEqualization_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageEqualization_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='unsigned int' name='histogram_entries' type64='I'/>
<arg declared_type64='Pixel_F' name='minVal' type64='f'/>
<arg declared_type64='Pixel_F' name='maxVal' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageEqualization_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageEqualization_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='unsigned int' name='histogram_entries' type64='I'/>
<arg declared_type64='Pixel_F' name='minVal' type64='f'/>
<arg declared_type64='Pixel_F' name='maxVal' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageErode_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='unsigned char*' name='kernel' null_accepted='false' type64='*'/>
<arg declared_type64='vImagePixelCount' name='kernel_height' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_width' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageErode_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='float*' name='kernel' null_accepted='false' type64='^f'/>
<arg declared_type64='vImagePixelCount' name='kernel_height' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_width' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageErode_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='unsigned char*' name='kernel' null_accepted='false' type64='*'/>
<arg declared_type64='vImagePixelCount' name='kernel_height' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_width' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageErode_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='float*' name='kernel' null_accepted='false' type64='^f'/>
<arg declared_type64='vImagePixelCount' name='kernel_height' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_width' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageExtractChannel_ARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='long' name='channelIndex' type64='q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageExtractChannel_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='long' name='channelIndex' type64='q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageExtractChannel_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='long' name='channelIndex' type64='q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageFlatten_ARGB16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='argbSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='argbDst' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='int16_t*' name='argbBackgroundColorPtr' null_accepted='false' type64='^s'/>
<arg declared_type64='_Bool' name='isImagePremultiplied' type64='B'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageFlatten_ARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='argbSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='argbDst' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint16_t*' name='argbBackgroundColorPtr' null_accepted='false' type64='^S'/>
<arg declared_type64='_Bool' name='isImagePremultiplied' type64='B'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageFlatten_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='argbSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='argbDst' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint8_t*' name='argbBackgroundColorPtr' null_accepted='false' type64='*'/>
<arg declared_type64='_Bool' name='isImagePremultiplied' type64='B'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageFlatten_ARGB8888ToRGB888'>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint8_t*' null_accepted='false' type64='*'/>
<arg declared_type64='_Bool' type64='B'/>
<arg declared_type64='vImage_Flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageFlatten_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='argbSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='argbDst' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='argbBackgroundColorPtr' null_accepted='false' type64='^f'/>
<arg declared_type64='_Bool' name='isImagePremultiplied' type64='B'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageFlatten_ARGBFFFFToRGBFFF'>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' null_accepted='false' type64='^f'/>
<arg declared_type64='_Bool' type64='B'/>
<arg declared_type64='vImage_Flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageFlatten_BGRA8888ToRGB888'>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint8_t*' null_accepted='false' type64='*'/>
<arg declared_type64='_Bool' type64='B'/>
<arg declared_type64='vImage_Flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageFlatten_BGRAFFFFToRGBFFF'>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' null_accepted='false' type64='^f'/>
<arg declared_type64='_Bool' type64='B'/>
<arg declared_type64='vImage_Flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageFlatten_RGBA16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='argbSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='argbDst' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='int16_t*' name='argbBackgroundColorPtr' null_accepted='false' type64='^s'/>
<arg declared_type64='_Bool' name='isImagePremultiplied' type64='B'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageFlatten_RGBA16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='rgbaSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='rgbaDst' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint16_t*' name='rgbaBackgroundColorPtr' null_accepted='false' type64='^S'/>
<arg declared_type64='_Bool' name='isImagePremultiplied' type64='B'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageFlatten_RGBA8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='rgbaSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='rgbaDst' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint8_t*' name='rgbaBackgroundColorPtr' null_accepted='false' type64='*'/>
<arg declared_type64='_Bool' name='isImagePremultiplied' type64='B'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageFlatten_RGBA8888ToRGB888'>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint8_t*' null_accepted='false' type64='*'/>
<arg declared_type64='_Bool' type64='B'/>
<arg declared_type64='vImage_Flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageFlatten_RGBAFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='rgbaSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='rgbaDst' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='rgbaBackgroundColorPtr' null_accepted='false' type64='^f'/>
<arg declared_type64='_Bool' name='isImagePremultiplied' type64='B'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageFlatten_RGBAFFFFToRGBFFF'>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' null_accepted='false' type64='^f'/>
<arg declared_type64='_Bool' type64='B'/>
<arg declared_type64='vImage_Flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageGamma_Planar8toPlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='GammaFunction' name='gamma' type64='^v'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageGamma_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='GammaFunction' name='gamma' type64='^v'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageGamma_PlanarFtoPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='GammaFunction' name='gamma' type64='^v'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageGetResamplingFilterExtent'>
<arg declared_type64='ResamplingFilter' name='filter' null_accepted='false' type64='^v'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImagePixelCount' type64='Q'/>
</function>
<function name='vImageGetResamplingFilterSize'>
<arg declared_type64='float' name='scale' type64='f'/>
<arg declared_type64='void (*)( float *, float *, unsigned long, void *)' function_pointer='true' name='kernelFunc' type64='^?'>
<arg const='true' declared_type64='float*' type64='^f'/>
<arg declared_type64='float*' type64='^f'/>
<arg declared_type64='unsigned long' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='float' name='kernelWidth' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='size_t' type64='Q'/>
</function>
<function name='vImageHistogramCalculation_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount**' name='histogram' null_accepted='false' type64='^^Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHistogramCalculation_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount**' name='histogram' null_accepted='false' type64='^^Q'/>
<arg declared_type64='unsigned int' name='histogram_entries' type64='I'/>
<arg declared_type64='Pixel_F' name='minVal' type64='f'/>
<arg declared_type64='Pixel_F' name='maxVal' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHistogramCalculation_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount*' name='histogram' null_accepted='false' type64='^Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHistogramCalculation_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount*' name='histogram' null_accepted='false' type64='^Q'/>
<arg declared_type64='unsigned int' name='histogram_entries' type64='I'/>
<arg declared_type64='Pixel_F' name='minVal' type64='f'/>
<arg declared_type64='Pixel_F' name='maxVal' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHistogramSpecification_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImagePixelCount**' name='desired_histogram' null_accepted='false' type64='^^Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHistogramSpecification_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='vImagePixelCount**' name='desired_histogram' type64='^^Q'/>
<arg declared_type64='unsigned int' name='histogram_entries' type64='I'/>
<arg declared_type64='Pixel_F' name='minVal' type64='f'/>
<arg declared_type64='Pixel_F' name='maxVal' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHistogramSpecification_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImagePixelCount*' name='desired_histogram' null_accepted='false' type64='^Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHistogramSpecification_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg const='true' declared_type64='vImagePixelCount*' name='desired_histogram' null_accepted='false' type64='^Q'/>
<arg declared_type64='unsigned int' name='histogram_entries' type64='I'/>
<arg declared_type64='Pixel_F' name='minVal' type64='f'/>
<arg declared_type64='Pixel_F' name='maxVal' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalReflect_ARGB16S'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalReflect_ARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalReflect_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalReflect_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalReflect_Planar16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalReflect_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalReflect_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalShearD_ARGB16S'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='double' name='xTranslate' type64='d'/>
<arg declared_type64='double' name='shearSlope' type64='d'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='int16_t*' name='backColor' type64='^s'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalShearD_ARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='double' name='xTranslate' type64='d'/>
<arg declared_type64='double' name='shearSlope' type64='d'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='uint16_t*' name='backColor' type64='^S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalShearD_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='double' name='xTranslate' type64='d'/>
<arg declared_type64='double' name='shearSlope' type64='d'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='uint8_t*' name='backColor' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalShearD_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='double' name='xTranslate' type64='d'/>
<arg declared_type64='double' name='shearSlope' type64='d'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='float*' name='backColor' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalShearD_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='double' name='xTranslate' type64='d'/>
<arg declared_type64='double' name='shearSlope' type64='d'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg declared_type64='Pixel_8' name='backColor' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalShearD_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='double' name='xTranslate' type64='d'/>
<arg declared_type64='double' name='shearSlope' type64='d'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg declared_type64='Pixel_F' name='backColor' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalShear_ARGB16S'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='xTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='int16_t*' name='backColor' type64='^s'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalShear_ARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='xTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='uint16_t*' name='backColor' type64='^S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalShear_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='xTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='uint8_t*' name='backColor' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalShear_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='xTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='float*' name='backColor' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalShear_CbCr16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='xTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='uint16_t*' name='backColor' type64='^S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalShear_CbCr8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='xTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='uint8_t*' name='backColor' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalShear_Planar16S'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='xTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg declared_type64='Pixel_16S' name='backColor' type64='s'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalShear_Planar16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='xTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg declared_type64='Pixel_16U' name='backColor' type64='S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalShear_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='xTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg declared_type64='Pixel_8' name='backColor' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalShear_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='xTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg declared_type64='Pixel_F' name='backColor' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageHorizontalShear_XRGB2101010W'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='xTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='Pixel_32U' name='backColor' type64='I'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageInterpolatedLookupTable_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='Pixel_F*' name='table' null_accepted='false' type64='^f'/>
<arg declared_type64='vImagePixelCount' name='tableEntries' type64='Q'/>
<arg declared_type64='float' name='maxFloat' type64='f'/>
<arg declared_type64='float' name='minFloat' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageLookupTable_8to64U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint64_t*' name='LUT' null_accepted='false' type64='^Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageLookupTable_Planar16'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='Pixel_16U*' name='table' null_accepted='false' type64='^S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageLookupTable_Planar8toPlanar128'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='Pixel_FFFF*' name='table' null_accepted='false' type64='^[4f]'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageLookupTable_Planar8toPlanar16'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='Pixel_16U*' name='table' null_accepted='false' type64='^S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageLookupTable_Planar8toPlanar24'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint32_t*' name='table' null_accepted='false' type64='^I'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageLookupTable_Planar8toPlanar48'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint64_t*' name='table' null_accepted='false' type64='^Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageLookupTable_Planar8toPlanar96'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='Pixel_FFFF*' name='table' null_accepted='false' type64='^[4f]'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageLookupTable_Planar8toPlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='Pixel_F*' name='table' null_accepted='false' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageLookupTable_PlanarFtoPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='Pixel_8*' name='table' null_accepted='false' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageMatrixMultiply_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='int16_t*' name='matrix' null_accepted='false' type64='^s'/>
<arg declared_type64='int32_t' name='divisor' type64='i'/>
<arg const='true' declared_type64='int16_t*' name='pre_bias' type64='^s'/>
<arg const='true' declared_type64='int32_t*' name='post_bias' type64='^i'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageMatrixMultiply_ARGB8888ToPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='int16_t*' name='matrix' null_accepted='false' type64='^s'/>
<arg declared_type64='int32_t' name='divisor' type64='i'/>
<arg const='true' declared_type64='int16_t*' name='pre_bias' type64='^s'/>
<arg declared_type64='int32_t' name='post_bias' type64='i'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageMatrixMultiply_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='matrix' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='float*' name='pre_bias' type64='^f'/>
<arg const='true' declared_type64='float*' name='post_bias' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageMatrixMultiply_ARGBFFFFToPlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='matrix' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='float*' name='pre_bias' type64='^f'/>
<arg declared_type64='float' name='post_bias' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageMatrixMultiply_Planar16S'>
<arg const='true' declared_type64='vImage_Buffer**' name='srcs' null_accepted='false' type64='^^{vImage_Buffer}'/>
<arg const='true' declared_type64='vImage_Buffer**' name='dests' null_accepted='false' type64='^^{vImage_Buffer}'/>
<arg declared_type64='uint32_t' name='src_planes' type64='I'/>
<arg declared_type64='uint32_t' name='dest_planes' type64='I'/>
<arg const='true' declared_type64='int16_t*' name='matrix' null_accepted='false' type64='^s'/>
<arg declared_type64='int32_t' name='divisor' type64='i'/>
<arg const='true' declared_type64='int16_t*' name='pre_bias' type64='^s'/>
<arg const='true' declared_type64='int32_t*' name='post_bias' type64='^i'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageMatrixMultiply_Planar8'>
<arg const='true' declared_type64='vImage_Buffer**' name='srcs' null_accepted='false' type64='^^{vImage_Buffer}'/>
<arg const='true' declared_type64='vImage_Buffer**' name='dests' null_accepted='false' type64='^^{vImage_Buffer}'/>
<arg declared_type64='uint32_t' name='src_planes' type64='I'/>
<arg declared_type64='uint32_t' name='dest_planes' type64='I'/>
<arg const='true' declared_type64='int16_t*' name='matrix' null_accepted='false' type64='^s'/>
<arg declared_type64='int32_t' name='divisor' type64='i'/>
<arg const='true' declared_type64='int16_t*' name='pre_bias' type64='^s'/>
<arg const='true' declared_type64='int32_t*' name='post_bias' type64='^i'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageMatrixMultiply_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer**' name='srcs' null_accepted='false' type64='^^{vImage_Buffer}'/>
<arg const='true' declared_type64='vImage_Buffer**' name='dests' null_accepted='false' type64='^^{vImage_Buffer}'/>
<arg declared_type64='uint32_t' name='src_planes' type64='I'/>
<arg declared_type64='uint32_t' name='dest_planes' type64='I'/>
<arg const='true' declared_type64='float*' name='matrix' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='float*' name='pre_bias' type64='^f'/>
<arg const='true' declared_type64='float*' name='post_bias' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageMax_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_height' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_width' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageMax_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_height' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_width' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageMax_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_height' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_width' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageMax_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_height' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_width' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageMin_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_height' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_width' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageMin_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_height' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_width' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageMin_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_height' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_width' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageMin_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_height' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='kernel_width' type64='Q'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageMultiDimensionalInterpolatedLookupTable_Planar16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcs' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dests' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImage_MultidimensionalTable' name='table' null_accepted='false' type64='^{vImage_MultidimensionalTableData=}'/>
<arg declared_type64='vImage_InterpolationMethod' name='method' type64='i'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageMultiDimensionalInterpolatedLookupTable_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcs' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dests' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImage_MultidimensionalTable' name='table' null_accepted='false' type64='^{vImage_MultidimensionalTableData=}'/>
<arg declared_type64='vImage_InterpolationMethod' name='method' type64='i'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageMultidimensionalTable_Create'>
<arg const='true' declared_type64='uint16_t*' name='tableData' null_accepted='false' type64='^S'/>
<arg declared_type64='uint32_t' name='numSrcChannels' type64='I'/>
<arg declared_type64='uint32_t' name='numDestChannels' type64='I'/>
<arg const='true' declared_type64='uint8_t*' name='table_entries_per_dimension' null_accepted='false' type64='*'/>
<arg declared_type64='vImageMDTableUsageHint' name='hint' type64='i'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<arg declared_type64='vImage_Error*' name='err' type64='^q'/>
<retval declared_type64='vImage_MultidimensionalTable' type64='^{vImage_MultidimensionalTableData=}'/>
</function>
<function name='vImageMultidimensionalTable_Release'>
<arg declared_type64='vImage_MultidimensionalTable' name='table' type64='^{vImage_MultidimensionalTableData=}'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageMultidimensionalTable_Retain'>
<arg declared_type64='vImage_MultidimensionalTable' name='table' type64='^{vImage_MultidimensionalTableData=}'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageNewResamplingFilter'>
<arg declared_type64='float' name='scale' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='ResamplingFilter' type64='^v'/>
</function>
<function name='vImageNewResamplingFilterForFunctionUsingBuffer'>
<arg declared_type64='ResamplingFilter' name='filter' null_accepted='false' type64='^v'/>
<arg declared_type64='float' name='scale' type64='f'/>
<arg declared_type64='void (*)( float *, float *, unsigned long, void *)' function_pointer='true' name='kernelFunc' type64='^?'>
<arg const='true' declared_type64='float*' type64='^f'/>
<arg declared_type64='float*' type64='^f'/>
<arg declared_type64='unsigned long' type64='Q'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</arg>
<arg declared_type64='float' name='kernelWidth' type64='f'/>
<arg declared_type64='void*' name='userData' type64='^v'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageOverwriteChannelsWithPixel_ARGB16U'>
<arg const='true' declared_type64='uint16_t*' name='the_pixel' type64='^S'/>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='uint8_t' name='copyMask' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageOverwriteChannelsWithPixel_ARGB8888'>
<arg const='true' declared_type64='uint8_t*' name='the_pixel' type64='*'/>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='uint8_t' name='copyMask' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageOverwriteChannelsWithPixel_ARGBFFFF'>
<arg const='true' declared_type64='float*' name='the_pixel' type64='^f'/>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='uint8_t' name='copyMask' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageOverwriteChannelsWithScalar_ARGB8888'>
<arg declared_type64='Pixel_8' name='scalar' type64='C'/>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='uint8_t' name='copyMask' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageOverwriteChannelsWithScalar_ARGBFFFF'>
<arg declared_type64='Pixel_F' name='scalar' type64='f'/>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='uint8_t' name='copyMask' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageOverwriteChannelsWithScalar_Planar16S'>
<arg declared_type64='Pixel_16S' name='scalar' type64='s'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageOverwriteChannelsWithScalar_Planar16U'>
<arg declared_type64='Pixel_16U' name='scalar' type64='S'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageOverwriteChannelsWithScalar_Planar8'>
<arg declared_type64='Pixel_8' name='scalar' type64='C'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageOverwriteChannelsWithScalar_PlanarF'>
<arg declared_type64='Pixel_F' name='scalar' type64='f'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageOverwriteChannels_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='newSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='origSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='uint8_t' name='copyMask' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageOverwriteChannels_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='newSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='origSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='uint8_t' name='copyMask' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePNGDecompressionFilter'>
<arg const='true' declared_type64='vImage_Buffer*' name='buffer' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='startScanline' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='scanlineCount' type64='Q'/>
<arg declared_type64='uint32_t' name='bitsPerPixel' type64='I'/>
<arg declared_type64='uint32_t' name='filterMethodNumber' type64='I'/>
<arg declared_type64='uint32_t' name='filterType' type64='I'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePermuteChannelsWithMaskedInsert_ARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' null_accepted='false' type64='*'/>
<arg declared_type64='uint8_t' name='copyMask' type64='C'/>
<arg const='true' declared_type64='uint16_t*' name='backgroundColor' null_accepted='false' type64='^S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePermuteChannelsWithMaskedInsert_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' null_accepted='false' type64='*'/>
<arg declared_type64='uint8_t' name='copyMask' type64='C'/>
<arg const='true' declared_type64='uint8_t*' name='backgroundColor' null_accepted='false' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePermuteChannelsWithMaskedInsert_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' null_accepted='false' type64='*'/>
<arg declared_type64='uint8_t' name='copyMask' type64='C'/>
<arg const='true' declared_type64='float*' name='backgroundColor' null_accepted='false' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePermuteChannels_ARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' null_accepted='false' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePermuteChannels_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' null_accepted='false' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePermuteChannels_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' null_accepted='false' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePermuteChannels_RGB888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePiecewiseGamma_Planar16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='exponentialCoeffs' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='float' name='gamma' type64='f'/>
<arg const='true' declared_type64='float*' name='linearCoeffs' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='Pixel_16S' name='boundary' type64='s'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePiecewiseGamma_Planar16Q12toPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='exponentialCoeffs' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='float' name='gamma' type64='f'/>
<arg const='true' declared_type64='float*' name='linearCoeffs' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='Pixel_16S' name='boundary' type64='s'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePiecewiseGamma_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='exponentialCoeffs' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='float' name='gamma' type64='f'/>
<arg const='true' declared_type64='float*' name='linearCoeffs' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='Pixel_8' name='boundary' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePiecewiseGamma_Planar8toPlanar16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='exponentialCoeffs' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='float' name='gamma' type64='f'/>
<arg const='true' declared_type64='float*' name='linearCoeffs' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='Pixel_8' name='boundary' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePiecewiseGamma_Planar8toPlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='exponentialCoeffs' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='float' name='gamma' type64='f'/>
<arg const='true' declared_type64='float*' name='linearCoeffs' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='Pixel_8' name='boundary' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePiecewiseGamma_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='exponentialCoeffs' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='float' name='gamma' type64='f'/>
<arg const='true' declared_type64='float*' name='linearCoeffs' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='float' name='boundary' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePiecewiseGamma_PlanarFtoPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='exponentialCoeffs' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='float' name='gamma' type64='f'/>
<arg const='true' declared_type64='float*' name='linearCoeffs' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='float' name='boundary' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePiecewisePolynomial_Planar8toPlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float**' name='coefficients' null_accepted='false' type64='^^f'/>
<arg const='true' declared_type64='float*' name='boundaries' null_accepted='false' type64='^f'/>
<arg declared_type64='uint32_t' name='order' type64='I'/>
<arg declared_type64='uint32_t' name='log2segments' type64='I'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePiecewisePolynomial_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float**' name='coefficients' null_accepted='false' type64='^^f'/>
<arg const='true' declared_type64='float*' name='boundaries' null_accepted='false' type64='^f'/>
<arg declared_type64='uint32_t' name='order' type64='I'/>
<arg declared_type64='uint32_t' name='log2segments' type64='I'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePiecewisePolynomial_PlanarFtoPlanar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float**' name='coefficients' null_accepted='false' type64='^^f'/>
<arg const='true' declared_type64='float*' name='boundaries' null_accepted='false' type64='^f'/>
<arg declared_type64='uint32_t' name='order' type64='I'/>
<arg declared_type64='uint32_t' name='log2segments' type64='I'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePiecewiseRational_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float**' name='topCoefficients' null_accepted='false' type64='^^f'/>
<arg const='true' declared_type64='float**' name='bottomCoefficients' null_accepted='false' type64='^^f'/>
<arg const='true' declared_type64='float*' name='boundaries' null_accepted='false' type64='^f'/>
<arg declared_type64='uint32_t' name='topOrder' type64='I'/>
<arg declared_type64='uint32_t' name='bottomOrder' type64='I'/>
<arg declared_type64='uint32_t' name='log2segments' type64='I'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultipliedAlphaBlendDarken_RGBA8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultipliedAlphaBlendLighten_RGBA8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultipliedAlphaBlendMultiply_RGBA8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultipliedAlphaBlendScreen_RGBA8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultipliedAlphaBlendWithPermute_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' null_accepted='false' type64='*'/>
<arg declared_type64='_Bool' name='makeDestAlphaOpaque' type64='B'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultipliedAlphaBlendWithPermute_RGBA8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='uint8_t*' name='permuteMap' null_accepted='false' type64='*'/>
<arg declared_type64='_Bool' name='makeDestAlphaOpaque' type64='B'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultipliedAlphaBlend_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultipliedAlphaBlend_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultipliedAlphaBlend_BGRA8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultipliedAlphaBlend_BGRAFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultipliedAlphaBlend_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTopAlpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultipliedAlphaBlend_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTopAlpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultipliedConstAlphaBlend_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_8' name='constAlpha' type64='C'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultipliedConstAlphaBlend_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_F' name='constAlpha' type64='f'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultipliedConstAlphaBlend_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_8' name='constAlpha' type64='C'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTopAlpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultipliedConstAlphaBlend_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTop' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='Pixel_F' name='constAlpha' type64='f'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcTopAlpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='srcBottom' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultiplyData_ARGB16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultiplyData_ARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultiplyData_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultiplyData_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultiplyData_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='alpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultiplyData_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='alpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultiplyData_RGBA16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultiplyData_RGBA16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultiplyData_RGBA8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImagePremultiplyData_RGBAFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageRichardsonLucyDeConvolve_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='int16_t*' name='kernel' type64='^s'/>
<arg const='true' declared_type64='int16_t*' name='kernel2' type64='^s'/>
<arg declared_type64='uint32_t' name='kernel_height' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_height2' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width2' type64='I'/>
<arg declared_type64='int32_t' name='divisor' type64='i'/>
<arg declared_type64='int32_t' name='divisor2' type64='i'/>
<arg const='true' declared_type64='uint8_t*' name='backgroundColor' type64='*'/>
<arg declared_type64='uint32_t' name='iterationCount' type64='I'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageRichardsonLucyDeConvolve_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='float*' name='kernel' type64='^f'/>
<arg const='true' declared_type64='float*' name='kernel2' type64='^f'/>
<arg declared_type64='uint32_t' name='kernel_height' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_height2' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width2' type64='I'/>
<arg const='true' declared_type64='float*' name='backgroundColor' type64='^f'/>
<arg declared_type64='uint32_t' name='iterationCount' type64='I'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageRichardsonLucyDeConvolve_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='int16_t*' name='kernel' type64='^s'/>
<arg const='true' declared_type64='int16_t*' name='kernel2' type64='^s'/>
<arg declared_type64='uint32_t' name='kernel_height' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_height2' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width2' type64='I'/>
<arg declared_type64='int32_t' name='divisor' type64='i'/>
<arg declared_type64='int32_t' name='divisor2' type64='i'/>
<arg declared_type64='Pixel_8' name='backgroundColor' type64='C'/>
<arg declared_type64='uint32_t' name='iterationCount' type64='I'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageRichardsonLucyDeConvolve_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='float*' name='kernel' type64='^f'/>
<arg const='true' declared_type64='float*' name='kernel2' type64='^f'/>
<arg declared_type64='uint32_t' name='kernel_height' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_height2' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width2' type64='I'/>
<arg declared_type64='Pixel_F' name='backgroundColor' type64='f'/>
<arg declared_type64='uint32_t' name='iterationCount' type64='I'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageRotate90_ARGB16S'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='uint8_t' name='rotationConstant' type64='C'/>
<arg const='true' declared_type64='int16_t*' name='backColor' null_accepted='false' type64='^s'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageRotate90_ARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='uint8_t' name='rotationConstant' type64='C'/>
<arg const='true' declared_type64='uint16_t*' name='backColor' null_accepted='false' type64='^S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageRotate90_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='uint8_t' name='rotationConstant' type64='C'/>
<arg const='true' declared_type64='uint8_t*' name='backColor' null_accepted='false' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageRotate90_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='uint8_t' name='rotationConstant' type64='C'/>
<arg const='true' declared_type64='float*' name='backColor' null_accepted='false' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageRotate90_Planar16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='uint8_t' name='rotationConstant' type64='C'/>
<arg declared_type64='Pixel_16U' name='backColor' type64='S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageRotate90_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='uint8_t' name='rotationConstant' type64='C'/>
<arg declared_type64='Pixel_8' name='backColor' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageRotate90_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='uint8_t' name='rotationConstant' type64='C'/>
<arg declared_type64='Pixel_F' name='backColor' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageRotate_ARGB16S'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='float' name='angleInRadians' type64='f'/>
<arg const='true' declared_type64='int16_t*' name='backColor' type64='^s'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageRotate_ARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='float' name='angleInRadians' type64='f'/>
<arg const='true' declared_type64='uint16_t*' name='backColor' type64='^S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageRotate_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='float' name='angleInRadians' type64='f'/>
<arg const='true' declared_type64='uint8_t*' name='backColor' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageRotate_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='float' name='angleInRadians' type64='f'/>
<arg const='true' declared_type64='float*' name='backColor' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageRotate_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='float' name='angleInRadians' type64='f'/>
<arg declared_type64='Pixel_8' name='backColor' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageRotate_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='float' name='angleInRadians' type64='f'/>
<arg declared_type64='Pixel_F' name='backColor' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageScale_ARGB16S'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageScale_ARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageScale_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageScale_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageScale_CbCr16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageScale_CbCr8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageScale_Planar16S'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageScale_Planar16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageScale_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageScale_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageScale_XRGB2101010W'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageSelectChannels_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='newSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='origSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='uint8_t' name='copyMask' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageSelectChannels_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='newSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='origSrc' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='uint8_t' name='copyMask' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageSepConvolve_Planar16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='float*' name='kernelX' type64='^f'/>
<arg declared_type64='uint32_t' name='kernelX_width' type64='I'/>
<arg const='true' declared_type64='float*' name='kernelY' type64='^f'/>
<arg declared_type64='uint32_t' name='kernelY_width' type64='I'/>
<arg declared_type64='float' name='bias' type64='f'/>
<arg declared_type64='Pixel_16U' name='backgroundColor' type64='S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageSepConvolve_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='float*' name='kernelX' type64='^f'/>
<arg declared_type64='uint32_t' name='kernelX_width' type64='I'/>
<arg const='true' declared_type64='float*' name='kernelY' type64='^f'/>
<arg declared_type64='uint32_t' name='kernelY_width' type64='I'/>
<arg declared_type64='float' name='bias' type64='f'/>
<arg declared_type64='Pixel_16U' name='backgroundColor' type64='S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageSepConvolve_Planar8to16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='float*' name='kernelX' type64='^f'/>
<arg declared_type64='uint32_t' name='kernelX_width' type64='I'/>
<arg const='true' declared_type64='float*' name='kernelY' type64='^f'/>
<arg declared_type64='uint32_t' name='kernelY_width' type64='I'/>
<arg declared_type64='float' name='scale' type64='f'/>
<arg declared_type64='float' name='bias' type64='f'/>
<arg declared_type64='Pixel_8' name='backgroundColor' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageSepConvolve_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg const='true' declared_type64='float*' name='kernelX' type64='^f'/>
<arg declared_type64='uint32_t' name='kernelX_width' type64='I'/>
<arg const='true' declared_type64='float*' name='kernelY' type64='^f'/>
<arg declared_type64='uint32_t' name='kernelY_width' type64='I'/>
<arg declared_type64='float' name='bias' type64='f'/>
<arg declared_type64='Pixel_F' name='backgroundColor' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageSymmetricPiecewiseGamma_Planar16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='exponentialCoeffs' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='float' name='gamma' type64='f'/>
<arg const='true' declared_type64='float*' name='linearCoeffs' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='Pixel_16S' name='boundary' type64='s'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageSymmetricPiecewiseGamma_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float*' name='exponentialCoeffs' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='float' name='gamma' type64='f'/>
<arg const='true' declared_type64='float*' name='linearCoeffs' null_accepted='false' type64='^f'/>
<arg const='true' declared_type64='float' name='boundary' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageSymmetricPiecewisePolynomial_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='float**' name='coefficients' null_accepted='false' type64='^^f'/>
<arg const='true' declared_type64='float*' name='boundaries' null_accepted='false' type64='^f'/>
<arg declared_type64='uint32_t' name='order' type64='I'/>
<arg declared_type64='uint32_t' name='log2segments' type64='I'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageTableLookUp_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='Pixel_8*' name='alphaTable' type64='*'/>
<arg const='true' declared_type64='Pixel_8*' name='redTable' type64='*'/>
<arg const='true' declared_type64='Pixel_8*' name='greenTable' type64='*'/>
<arg const='true' declared_type64='Pixel_8*' name='blueTable' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageTableLookUp_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='Pixel_8*' name='table' null_accepted='false' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageTentConvolve_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='uint32_t' name='kernel_height' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width' type64='I'/>
<arg const='true' declared_type64='uint8_t*' name='backgroundColor' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageTentConvolve_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='void*' name='tempBuffer' type64='^v'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='uint32_t' name='kernel_height' type64='I'/>
<arg declared_type64='uint32_t' name='kernel_width' type64='I'/>
<arg declared_type64='Pixel_8' name='backgroundColor' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageUnpremultiplyData_ARGB16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageUnpremultiplyData_ARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageUnpremultiplyData_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageUnpremultiplyData_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageUnpremultiplyData_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='alpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageUnpremultiplyData_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='alpha' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageUnpremultiplyData_RGBA16Q12'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageUnpremultiplyData_RGBA16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageUnpremultiplyData_RGBA8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageUnpremultiplyData_RGBAFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalReflect_ARGB16S'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalReflect_ARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalReflect_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalReflect_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalReflect_Planar16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalReflect_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalReflect_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalShearD_ARGB16S'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='double' name='yTranslate' type64='d'/>
<arg declared_type64='double' name='shearSlope' type64='d'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='int16_t*' name='backColor' type64='^s'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalShearD_ARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='double' name='yTranslate' type64='d'/>
<arg declared_type64='double' name='shearSlope' type64='d'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='uint16_t*' name='backColor' type64='^S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalShearD_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='double' name='yTranslate' type64='d'/>
<arg declared_type64='double' name='shearSlope' type64='d'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='uint8_t*' name='backColor' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalShearD_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='double' name='yTranslate' type64='d'/>
<arg declared_type64='double' name='shearSlope' type64='d'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='float*' name='backColor' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalShearD_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='double' name='yTranslate' type64='d'/>
<arg declared_type64='double' name='shearSlope' type64='d'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg declared_type64='Pixel_8' name='backColor' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalShearD_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='double' name='yTranslate' type64='d'/>
<arg declared_type64='double' name='shearSlope' type64='d'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg declared_type64='Pixel_F' name='backColor' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalShear_ARGB16S'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='yTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='int16_t*' name='backColor' type64='^s'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalShear_ARGB16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='yTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='uint16_t*' name='backColor' type64='^S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalShear_ARGB8888'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='yTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='uint8_t*' name='backColor' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalShear_ARGBFFFF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='yTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='float*' name='backColor' type64='^f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalShear_CbCr16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='yTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='uint16_t*' name='backColor' type64='^S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalShear_CbCr8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='yTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='uint8_t*' name='backColor' type64='*'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalShear_Planar16S'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='yTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg declared_type64='Pixel_16S' name='backColor' type64='s'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalShear_Planar16U'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='yTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg declared_type64='Pixel_16U' name='backColor' type64='S'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalShear_Planar8'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='yTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg declared_type64='Pixel_8' name='backColor' type64='C'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalShear_PlanarF'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='yTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg declared_type64='Pixel_F' name='backColor' type64='f'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
<function name='vImageVerticalShear_XRGB2101010W'>
<arg const='true' declared_type64='vImage_Buffer*' name='src' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg const='true' declared_type64='vImage_Buffer*' name='dest' null_accepted='false' type64='^{vImage_Buffer=^vQQQ}'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_X' type64='Q'/>
<arg declared_type64='vImagePixelCount' name='srcOffsetToROI_Y' type64='Q'/>
<arg declared_type64='float' name='yTranslate' type64='f'/>
<arg declared_type64='float' name='shearSlope' type64='f'/>
<arg declared_type64='ResamplingFilter' name='filter' type64='^v'/>
<arg const='true' declared_type64='Pixel_32U' name='backColor' type64='I'/>
<arg declared_type64='vImage_Flags' name='flags' type64='I'/>
<retval declared_type64='vImage_Error' type64='q'/>
</function>
</signatures>
