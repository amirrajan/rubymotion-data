<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='PGDisplayCoord_t' type64='{_PGDisplayCoord_t=&quot;x&quot;S&quot;y&quot;S}'>
<field declared_type64='uint16_t' name='x' type64='S'/>
<field declared_type64='uint16_t' name='y' type64='S'/>
</struct>
<struct name='PGPhysicalMemoryRange_s' type64='{PGPhysicalMemoryRange_s=&quot;physicalAddress&quot;Q&quot;physicalLength&quot;Q}'>
<field declared_type64='uint64_t' name='physicalAddress' type64='Q'/>
<field declared_type64='uint64_t' name='physicalLength' type64='Q'/>
</struct>
<struct name='PGPhysicalMemoryRange_t' type64='{PGPhysicalMemoryRange_s=&quot;physicalAddress&quot;Q&quot;physicalLength&quot;Q}'>
<field declared_type64='uint64_t' name='physicalAddress' type64='Q'/>
<field declared_type64='uint64_t' name='physicalLength' type64='Q'/>
</struct>
<cftype name='PGTask_t' type64='^{PGTask_s=}'/>
<cftype name='PGTraceRange_t' type64='^{PGTraceRange_s=}'/>
<constant const='true' declared_type64='NSErrorDomain _Nonnull' name='PGResumeErrorDomain' type64='@'/>
<constant declared_type64='double' name='ParavirtualizedGraphicsVersionNumber' type64='d'/>
<constant const='true' declared_type64='unsigned char*' name='ParavirtualizedGraphicsVersionString' type64='^C'/>
<enum name='PGResumeErrorCodeIncompatibleDevice' value64='4'/>
<enum name='PGResumeErrorCodeInternalFault' value64='0'/>
<enum name='PGResumeErrorCodeInvalidContent' value64='2'/>
<enum name='PGResumeErrorCodeInvalidGuestVersion' value64='3'/>
<enum name='PGResumeErrorCodeInvalidSuspendStateVersion' value64='1'/>
<enum name='PG_PCI_BAR_MMIO' value64='0'/>
<enum name='PG_PCI_DEVICE_ID' value64='61166'/>
<enum name='PG_PCI_MAX_MSI_VECTORS' value64='1'/>
<enum name='PG_PCI_VENDOR_ID' value64='4203'/>
<enum name='PG_SUPPORT_EFI' value64='1'/>
<function name='PGCopyOptionROMURL'>
<retval declared_type64='NSURL * _Nonnull' type64='@'/>
</function>
<function name='PGNewDeviceWithDescriptor'>
<arg declared_type64='PGDeviceDescriptor * _Nonnull' name='descriptor' type64='@'/>
<retval declared_type64='id _Nullable' type64='@'/>
</function>
<class name='NSObject'>
<method selector='cursorGlyphHandler'>
<retval declared_type64='PGDisplayCursorGlyphHandler _Nullable' function_pointer='true' type64='@?'>
<arg declared_type64='NSBitmapImageRep * _Nonnull' type64='@'/>
<arg declared_type64='PGDisplayCoord_t' type64='{_PGDisplayCoord_t=SS}'/>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method selector='cursorMoveHandler'>
<retval declared_type64='PGDisplayCursorMoveHandler _Nullable' function_pointer='true' type64='@?'>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method selector='cursorPosition'>
<retval declared_type64='PGDisplayCoord_t' type64='{_PGDisplayCoord_t=SS}'/>
</method>
<method selector='cursorShowHandler'>
<retval declared_type64='PGDisplayCursorShowHandler _Nullable' function_pointer='true' type64='@?'>
<arg declared_type64='BOOL' type64='B'/>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method selector='didResume'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='encodeCurrentFrameToCommandBuffer:texture:region:'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='texture' type64='@'/>
<arg declared_type64='MTLRegion' index='2' name='region' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='_Bool' type64='B'/>
</method>
<method selector='finishSuspend'>
<retval already_retained='true' declared_type64='NSData * _Nullable' type64='@'/>
</method>
<method selector='guestPresentCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='hostPresentCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='minimumTextureUsage'>
<retval declared_type64='MTLTextureUsage' type64='Q'/>
</method>
<method selector='mmioReadAtOffset:'>
<arg declared_type64='size_t' index='0' name='offset' type64='Q'/>
<retval declared_type64='uint32_t' type64='I'/>
</method>
<method selector='mmioWriteAtOffset:value:'>
<arg declared_type64='size_t' index='0' name='offset' type64='Q'/>
<arg declared_type64='uint32_t' index='1' name='value' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='modeChangeHandler'>
<retval declared_type64='PGDisplayModeChangeHandler _Nullable' function_pointer='true' type64='@?'>
<arg declared_type64='PGDisplayCoord_t' type64='{_PGDisplayCoord_t=SS}'/>
<arg declared_type64='OSType' type64='I'/>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method selector='modeList'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='name'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='newDisplayWithDescriptor:port:serialNum:'>
<arg declared_type64='PGDisplayDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='port' type64='Q'/>
<arg declared_type64='uint32_t' index='2' name='serialNum' type64='I'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='newFrameEventHandler'>
<retval declared_type64='PGDisplayNewFrameEventHandler _Nullable' function_pointer='true' type64='@?'>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method selector='port'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='queue'>
<retval declared_type64='dispatch_queue_t _Nullable' type64='@'/>
</method>
<method selector='serialNum'>
<retval declared_type64='uint32_t' type64='I'/>
</method>
<method selector='setModeList:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='modeList' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sizeInMillimeters'>
<retval declared_type64='NSSize' type64='{CGSize=dd}'/>
</method>
<method selector='willResumeWithSuspendState:error:'>
<arg declared_type64='NSData * _Nonnull' index='0' name='suspendState' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='1' name='error' type64='^@'/>
<retval declared_type64='_Bool' type64='B'/>
</method>
<method selector='willSuspend'>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='PGDeviceDescriptor'>
<method selector='addTraceRange'>
<retval declared_type64='PGAddTraceRange _Nullable' function_pointer='true' type64='@?'>
<arg declared_type64='PGPhysicalMemoryRange_t * _Nonnull' type64='^{PGPhysicalMemoryRange_s=QQ}'/>
<arg declared_type64='PGTraceRangeHandler _Nonnull' function_pointer='true' type64='@?'>
<arg declared_type64='PGPhysicalMemoryRange_t * _Nonnull' type64='^{PGPhysicalMemoryRange_s=QQ}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='PGTraceRange_t * _Nullable' type64='^{PGTraceRange_s=}'/>
</retval>
</method>
<method selector='createTask'>
<retval declared_type64='PGCreateTask _Nullable' function_pointer='true' type64='@?'>
<arg declared_type64='uint64_t' type64='Q'/>
<arg declared_type64='void * _Nullable * _Nonnull' type64='^^v'/>
<retval declared_type64='PGTask_t * _Nullable' type64='^{PGTask_s=}'/>
</retval>
</method>
<method selector='destroyTask'>
<retval declared_type64='PGDestroyTask _Nullable' function_pointer='true' type64='@?'>
<arg declared_type64='PGTask_t * _Nonnull' type64='^{PGTask_s=}'/>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method selector='device'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='mapMemory'>
<retval declared_type64='PGMapMemory _Nullable' function_pointer='true' type64='@?'>
<arg declared_type64='PGTask_t * _Nonnull' type64='^{PGTask_s=}'/>
<arg declared_type64='uint32_t' type64='I'/>
<arg declared_type64='uint64_t' type64='Q'/>
<arg declared_type64='_Bool' type64='B'/>
<arg declared_type64='PGPhysicalMemoryRange_t * _Nonnull' type64='^{PGPhysicalMemoryRange_s=QQ}'/>
<retval declared_type64='_Bool' type64='B'/>
</retval>
</method>
<method selector='mmioLength'>
<retval declared_type64='size_t' type64='Q'/>
</method>
<method selector='raiseInterrupt'>
<retval declared_type64='PGRaiseInterrupt _Nullable' function_pointer='true' type64='@?'>
<arg declared_type64='uint32_t' type64='I'/>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method selector='readMemory'>
<retval declared_type64='PGReadMemory _Nullable' function_pointer='true' type64='@?'>
<arg declared_type64='uint64_t' type64='Q'/>
<arg declared_type64='uint64_t' type64='Q'/>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='_Bool' type64='B'/>
</retval>
</method>
<method selector='removeTraceRange'>
<retval declared_type64='PGRemoveTraceRange _Nullable' function_pointer='true' type64='@?'>
<arg declared_type64='PGTraceRange_t * _Nonnull' type64='^{PGTraceRange_s=}'/>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method selector='setAddTraceRange:'>
<arg declared_type64='PGAddTraceRange _Nullable' function_pointer='true' index='0' name='addTraceRange' type64='@?'>
<arg declared_type64='PGPhysicalMemoryRange_t * _Nonnull' type64='^{PGPhysicalMemoryRange_s=QQ}'/>
<arg declared_type64='PGTraceRangeHandler _Nonnull' function_pointer='true' type64='@?'>
<arg declared_type64='PGPhysicalMemoryRange_t * _Nonnull' type64='^{PGPhysicalMemoryRange_s=QQ}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='PGTraceRange_t * _Nullable' type64='^{PGTraceRange_s=}'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCreateTask:'>
<arg declared_type64='PGCreateTask _Nullable' function_pointer='true' index='0' name='createTask' type64='@?'>
<arg declared_type64='uint64_t' type64='Q'/>
<arg declared_type64='void * _Nullable * _Nonnull' type64='^^v'/>
<retval declared_type64='PGTask_t * _Nullable' type64='^{PGTask_s=}'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDestroyTask:'>
<arg declared_type64='PGDestroyTask _Nullable' function_pointer='true' index='0' name='destroyTask' type64='@?'>
<arg declared_type64='PGTask_t * _Nonnull' type64='^{PGTask_s=}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDevice:'>
<arg declared_type64='id _Nullable' index='0' name='device' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMapMemory:'>
<arg declared_type64='PGMapMemory _Nullable' function_pointer='true' index='0' name='mapMemory' type64='@?'>
<arg declared_type64='PGTask_t * _Nonnull' type64='^{PGTask_s=}'/>
<arg declared_type64='uint32_t' type64='I'/>
<arg declared_type64='uint64_t' type64='Q'/>
<arg declared_type64='_Bool' type64='B'/>
<arg declared_type64='PGPhysicalMemoryRange_t * _Nonnull' type64='^{PGPhysicalMemoryRange_s=QQ}'/>
<retval declared_type64='_Bool' type64='B'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMmioLength:'>
<arg declared_type64='size_t' index='0' name='mmioLength' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRaiseInterrupt:'>
<arg declared_type64='PGRaiseInterrupt _Nullable' function_pointer='true' index='0' name='raiseInterrupt' type64='@?'>
<arg declared_type64='uint32_t' type64='I'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setReadMemory:'>
<arg declared_type64='PGReadMemory _Nullable' function_pointer='true' index='0' name='readMemory' type64='@?'>
<arg declared_type64='uint64_t' type64='Q'/>
<arg declared_type64='uint64_t' type64='Q'/>
<arg declared_type64='void * _Nonnull' type64='^v'/>
<retval declared_type64='_Bool' type64='B'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setRemoveTraceRange:'>
<arg declared_type64='PGRemoveTraceRange _Nullable' function_pointer='true' index='0' name='removeTraceRange' type64='@?'>
<arg declared_type64='PGTraceRange_t * _Nonnull' type64='^{PGTraceRange_s=}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setUnmapMemory:'>
<arg declared_type64='PGUnmapMemory _Nullable' function_pointer='true' index='0' name='unmapMemory' type64='@?'>
<arg declared_type64='PGTask_t * _Nonnull' type64='^{PGTask_s=}'/>
<arg declared_type64='uint64_t' type64='Q'/>
<arg declared_type64='uint64_t' type64='Q'/>
<retval declared_type64='_Bool' type64='B'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='unmapMemory'>
<retval declared_type64='PGUnmapMemory _Nullable' function_pointer='true' type64='@?'>
<arg declared_type64='PGTask_t * _Nonnull' type64='^{PGTask_s=}'/>
<arg declared_type64='uint64_t' type64='Q'/>
<arg declared_type64='uint64_t' type64='Q'/>
<retval declared_type64='_Bool' type64='B'/>
</retval>
</method>
</class>
<class name='PGDisplayDescriptor'>
<method selector='cursorGlyphHandler'>
<retval declared_type64='PGDisplayCursorGlyphHandler _Nullable' function_pointer='true' type64='@?'>
<arg declared_type64='NSBitmapImageRep * _Nonnull' type64='@'/>
<arg declared_type64='PGDisplayCoord_t' type64='{_PGDisplayCoord_t=SS}'/>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method selector='cursorMoveHandler'>
<retval declared_type64='PGDisplayCursorMoveHandler _Nullable' function_pointer='true' type64='@?'>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method selector='cursorShowHandler'>
<retval declared_type64='PGDisplayCursorShowHandler _Nullable' function_pointer='true' type64='@?'>
<arg declared_type64='BOOL' type64='B'/>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method selector='modeChangeHandler'>
<retval declared_type64='PGDisplayModeChangeHandler _Nullable' function_pointer='true' type64='@?'>
<arg declared_type64='PGDisplayCoord_t' type64='{_PGDisplayCoord_t=SS}'/>
<arg declared_type64='OSType' type64='I'/>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method selector='name'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='newFrameEventHandler'>
<retval declared_type64='PGDisplayNewFrameEventHandler _Nullable' function_pointer='true' type64='@?'>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method selector='queue'>
<retval declared_type64='dispatch_queue_t _Nullable' type64='@'/>
</method>
<method selector='setCursorGlyphHandler:'>
<arg declared_type64='PGDisplayCursorGlyphHandler _Nullable' function_pointer='true' index='0' name='cursorGlyphHandler' type64='@?'>
<arg declared_type64='NSBitmapImageRep * _Nonnull' type64='@'/>
<arg declared_type64='PGDisplayCoord_t' type64='{_PGDisplayCoord_t=SS}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCursorMoveHandler:'>
<arg declared_type64='PGDisplayCursorMoveHandler _Nullable' function_pointer='true' index='0' name='cursorMoveHandler' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCursorShowHandler:'>
<arg declared_type64='PGDisplayCursorShowHandler _Nullable' function_pointer='true' index='0' name='cursorShowHandler' type64='@?'>
<arg declared_type64='BOOL' type64='B'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setModeChangeHandler:'>
<arg declared_type64='PGDisplayModeChangeHandler _Nullable' function_pointer='true' index='0' name='modeChangeHandler' type64='@?'>
<arg declared_type64='PGDisplayCoord_t' type64='{_PGDisplayCoord_t=SS}'/>
<arg declared_type64='OSType' type64='I'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setName:'>
<arg declared_type64='NSString * _Nullable' index='0' name='name' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNewFrameEventHandler:'>
<arg declared_type64='PGDisplayNewFrameEventHandler _Nullable' function_pointer='true' index='0' name='newFrameEventHandler' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setQueue:'>
<arg declared_type64='dispatch_queue_t _Nullable' index='0' name='queue' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSizeInMillimeters:'>
<arg declared_type64='NSSize' index='0' name='sizeInMillimeters' type64='{CGSize=dd}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sizeInMillimeters'>
<retval declared_type64='NSSize' type64='{CGSize=dd}'/>
</method>
</class>
<class name='PGDisplayMode'>
<method selector='initWithSizeInPixels:refreshRateInHz:'>
<arg declared_type64='PGDisplayCoord_t' index='0' name='sizeInPixels' type64='{_PGDisplayCoord_t=SS}'/>
<arg declared_type64='double' index='1' name='refreshRateInHz' type64='d'/>
<retval declared_type64='PGDisplayMode * _Nullable' type64='@'/>
</method>
<method selector='refreshRate'>
<retval declared_type64='double' type64='d'/>
</method>
<method selector='sizeInPixels'>
<retval declared_type64='PGDisplayCoord_t' type64='{_PGDisplayCoord_t=SS}'/>
</method>
</class>
<informal_protocol name='PGDevice'>
<method selector='didResume' type64='v16@0:8'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='finishSuspend' type64='@16@0:8'>
<retval already_retained='true' declared_type64='NSData * _Nullable' type64='@'/>
</method>
<method selector='mmioReadAtOffset:' type64='I24@0:8Q16'>
<arg declared_type64='size_t' index='0' name='offset' type64='Q'/>
<retval declared_type64='uint32_t' type64='I'/>
</method>
<method selector='mmioWriteAtOffset:value:' type64='v28@0:8Q16I24'>
<arg declared_type64='size_t' index='0' name='offset' type64='Q'/>
<arg declared_type64='uint32_t' index='1' name='value' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='newDisplayWithDescriptor:port:serialNum:' type64='@36@0:8@16Q24I32'>
<arg declared_type64='PGDisplayDescriptor * _Nonnull' index='0' name='descriptor' type64='@'/>
<arg declared_type64='NSUInteger' index='1' name='port' type64='Q'/>
<arg declared_type64='uint32_t' index='2' name='serialNum' type64='I'/>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='willResumeWithSuspendState:error:' type64='B32@0:8@16^@24'>
<arg declared_type64='NSData * _Nonnull' index='0' name='suspendState' type64='@'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='1' name='error' type64='^@'/>
<retval declared_type64='_Bool' type64='B'/>
</method>
<method selector='willSuspend' type64='v16@0:8'>
<retval declared_type64='void' type64='v'/>
</method>
</informal_protocol>
<informal_protocol name='PGDisplay'>
<method selector='cursorGlyphHandler' type64='@?16@0:8'>
<retval declared_type64='PGDisplayCursorGlyphHandler _Nullable' function_pointer='true' type64='@?'>
<arg declared_type64='NSBitmapImageRep * _Nonnull' type64='@'/>
<arg declared_type64='PGDisplayCoord_t' type64='{_PGDisplayCoord_t=SS}'/>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method selector='cursorMoveHandler' type64='@?16@0:8'>
<retval declared_type64='PGDisplayCursorMoveHandler _Nullable' function_pointer='true' type64='@?'>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method selector='cursorPosition' type64='{?=SS}16@0:8'>
<retval declared_type64='PGDisplayCoord_t' type64='{_PGDisplayCoord_t=SS}'/>
</method>
<method selector='cursorShowHandler' type64='@?16@0:8'>
<retval declared_type64='PGDisplayCursorShowHandler _Nullable' function_pointer='true' type64='@?'>
<arg declared_type64='BOOL' type64='B'/>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method selector='encodeCurrentFrameToCommandBuffer:texture:region:' type64='B80@0:8@16@24{?={?=QQQ}{?=QQQ}}32'>
<arg declared_type64='id _Nonnull' index='0' name='commandBuffer' type64='@'/>
<arg declared_type64='id _Nonnull' index='1' name='texture' type64='@'/>
<arg declared_type64='MTLRegion' index='2' name='region' type64='{_MTLRegion={?=QQQ}{?=QQQ}}'/>
<retval declared_type64='_Bool' type64='B'/>
</method>
<method selector='guestPresentCount' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='hostPresentCount' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='minimumTextureUsage' type64='Q16@0:8'>
<retval declared_type64='MTLTextureUsage' type64='Q'/>
</method>
<method selector='modeChangeHandler' type64='@?16@0:8'>
<retval declared_type64='PGDisplayModeChangeHandler _Nullable' function_pointer='true' type64='@?'>
<arg declared_type64='PGDisplayCoord_t' type64='{_PGDisplayCoord_t=SS}'/>
<arg declared_type64='OSType' type64='I'/>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method selector='modeList' type64='@16@0:8'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='name' type64='@16@0:8'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method selector='newFrameEventHandler' type64='@?16@0:8'>
<retval declared_type64='PGDisplayNewFrameEventHandler _Nullable' function_pointer='true' type64='@?'>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method selector='port' type64='Q16@0:8'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='queue' type64='@16@0:8'>
<retval declared_type64='dispatch_queue_t _Nullable' type64='@'/>
</method>
<method selector='serialNum' type64='I16@0:8'>
<retval declared_type64='uint32_t' type64='I'/>
</method>
<method selector='setModeList:' type64='v24@0:8@16'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='modeList' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='sizeInMillimeters' type64='{CGSize=dd}16@0:8'>
<retval declared_type64='NSSize' type64='{CGSize=dd}'/>
</method>
</informal_protocol>
</signatures>
