<?xml version='1.0'?>
<signatures version='1.0'>
<constant const='true' declared_type64='NSErrorDomain' name='VZErrorDomain' type64='@'/>
<enum name='VZErrorInternal' value64='1'/>
<enum name='VZErrorInvalidDiskImage' value64='5'/>
<enum name='VZErrorInvalidVirtualMachineConfiguration' value64='2'/>
<enum name='VZErrorInvalidVirtualMachineState' value64='3'/>
<enum name='VZErrorInvalidVirtualMachineStateTransition' value64='4'/>
<enum name='VZVirtualMachineStateError' value64='3'/>
<enum name='VZVirtualMachineStatePaused' value64='2'/>
<enum name='VZVirtualMachineStatePausing' value64='5'/>
<enum name='VZVirtualMachineStateResuming' value64='6'/>
<enum name='VZVirtualMachineStateRunning' value64='1'/>
<enum name='VZVirtualMachineStateStarting' value64='4'/>
<enum name='VZVirtualMachineStateStopped' value64='0'/>
<class name='NSObject'>
<method selector='guestDidStopVirtualMachine:'>
<arg declared_type64='VZVirtualMachine * _Nonnull' index='0' name='virtualMachine' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='listener:shouldAcceptNewConnection:fromSocketDevice:'>
<arg declared_type64='VZVirtioSocketListener * _Nonnull' index='0' name='listener' type64='@'/>
<arg declared_type64='VZVirtioSocketConnection * _Nonnull' index='1' name='connection' type64='@'/>
<arg declared_type64='VZVirtioSocketDevice * _Nonnull' index='2' name='socketDevice' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='virtualMachine:didStopWithError:'>
<arg declared_type64='VZVirtualMachine * _Nonnull' index='0' name='virtualMachine' type64='@'/>
<arg declared_type64='NSError * _Nonnull' index='1' name='error' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='VZBridgedNetworkDeviceAttachment'>
<method selector='initWithInterface:'>
<arg declared_type64='VZBridgedNetworkInterface * _Nonnull' index='0' name='interface' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='interface'>
<retval declared_type64='VZBridgedNetworkInterface * _Nonnull' type64='@'/>
</method>
</class>
<class name='VZBridgedNetworkInterface'>
<method selector='identifier'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method selector='localizedDisplayName'>
<retval declared_type64='NSString * _Nullable' type64='@'/>
</method>
<method class_method='true' selector='networkInterfaces'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
</class>
<class name='VZDiskImageStorageDeviceAttachment'>
<method selector='URL'>
<retval declared_type64='NSURL * _Nonnull' type64='@'/>
</method>
<method selector='initWithURL:readOnly:error:'>
<arg declared_type64='NSURL * _Nonnull' index='0' name='url' type64='@'/>
<arg declared_type64='BOOL' index='1' name='readOnly' type64='B'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='2' name='error' type64='^@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='isReadOnly'>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<class name='VZFileHandleNetworkDeviceAttachment'>
<method selector='fileHandle'>
<retval declared_type64='NSFileHandle * _Nonnull' type64='@'/>
</method>
<method selector='initWithFileHandle:'>
<arg declared_type64='NSFileHandle * _Nonnull' index='0' name='fileHandle' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='VZFileHandleSerialPortAttachment'>
<method selector='fileHandleForReading'>
<retval declared_type64='NSFileHandle * _Nullable' type64='@'/>
</method>
<method selector='fileHandleForWriting'>
<retval declared_type64='NSFileHandle * _Nullable' type64='@'/>
</method>
<method selector='initWithFileHandleForReading:fileHandleForWriting:'>
<arg declared_type64='NSFileHandle * _Nullable' index='0' name='fileHandleForReading' type64='@'/>
<arg declared_type64='NSFileHandle * _Nullable' index='1' name='fileHandleForWriting' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='VZFileSerialPortAttachment'>
<method selector='URL'>
<retval declared_type64='NSURL * _Nonnull' type64='@'/>
</method>
<method selector='append'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='initWithURL:append:error:'>
<arg declared_type64='NSURL * _Nonnull' index='0' name='url' type64='@'/>
<arg declared_type64='BOOL' index='1' name='shouldAppend' type64='B'/>
<arg declared_type64='NSError * _Nullable * _Nullable' index='2' name='error' type64='^@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
</class>
<class name='VZLinuxBootLoader'>
<method selector='commandLine'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
<method selector='initWithKernelURL:'>
<arg declared_type64='NSURL * _Nonnull' index='0' name='kernelURL' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initialRamdiskURL'>
<retval declared_type64='NSURL * _Nullable' type64='@'/>
</method>
<method selector='kernelURL'>
<retval declared_type64='NSURL * _Nonnull' type64='@'/>
</method>
<method selector='setCommandLine:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='commandLine' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setInitialRamdiskURL:'>
<arg declared_type64='NSURL * _Nullable' index='0' name='initialRamdiskURL' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setKernelURL:'>
<arg declared_type64='NSURL * _Nonnull' index='0' name='kernelURL' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='VZMACAddress'>
<method selector='ethernetAddress'>
<retval declared_type64='ether_addr_t' type64='{ether_addr=[6C]}'/>
</method>
<method selector='initWithEthernetAddress:'>
<arg declared_type64='ether_addr_t' index='0' name='ethernetAddress' type64='{ether_addr=[6C]}'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithString:'>
<arg declared_type64='NSString * _Nonnull' index='0' name='string' type64='@'/>
<retval declared_type64='instancetype _Nullable' type64='@'/>
</method>
<method selector='isBroadcastAddress'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isLocallyAdministeredAddress'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isMulticastAddress'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isUnicastAddress'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='isUniversallyAdministeredAddress'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method class_method='true' selector='randomLocallyAdministeredAddress'>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='string'>
<retval declared_type64='NSString * _Nonnull' type64='@'/>
</method>
</class>
<class name='VZNATNetworkDeviceAttachment'>
<method selector='init'>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='VZNetworkDeviceConfiguration'>
<method selector='MACAddress'>
<retval declared_type64='VZMACAddress * _Nonnull' type64='@'/>
</method>
<method selector='attachment'>
<retval declared_type64='VZNetworkDeviceAttachment * _Nullable' type64='@'/>
</method>
<method selector='setAttachment:'>
<arg declared_type64='VZNetworkDeviceAttachment * _Nullable' index='0' name='attachment' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMACAddress:'>
<arg declared_type64='VZMACAddress * _Nonnull' index='0' name='MACAddress' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='VZSerialPortConfiguration'>
<method selector='attachment'>
<retval declared_type64='VZSerialPortAttachment * _Nullable' type64='@'/>
</method>
<method selector='setAttachment:'>
<arg declared_type64='VZSerialPortAttachment * _Nullable' index='0' name='attachment' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='VZStorageDeviceConfiguration'>
<method selector='attachment'>
<retval declared_type64='VZStorageDeviceAttachment * _Nonnull' type64='@'/>
</method>
</class>
<class name='VZVirtioBlockDeviceConfiguration'>
<method selector='initWithAttachment:'>
<arg declared_type64='VZStorageDeviceAttachment * _Nonnull' index='0' name='attachment' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='VZVirtioConsoleDeviceSerialPortConfiguration'>
<method selector='init'>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='VZVirtioEntropyDeviceConfiguration'>
<method selector='init'>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='VZVirtioNetworkDeviceConfiguration'>
<method selector='init'>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='VZVirtioSocketConnection'>
<method selector='close'>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='destinationPort'>
<retval declared_type64='uint32_t' type64='I'/>
</method>
<method selector='fileDescriptor'>
<retval declared_type64='int' type64='i'/>
</method>
<method selector='sourcePort'>
<retval declared_type64='uint32_t' type64='I'/>
</method>
</class>
<class name='VZVirtioSocketDevice'>
<method selector='connectToPort:completionHandler:'>
<arg declared_type64='uint32_t' index='0' name='port' type64='I'/>
<arg declared_type64='void (^ _Nonnull)(VZVirtioSocketConnection * _Nullable, NSError * _Nullable)' function_pointer='true' index='1' name='completionHandler' type64='@?'>
<arg declared_type64='VZVirtioSocketConnection * _Nullable' type64='@'/>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='removeSocketListenerForPort:'>
<arg declared_type64='uint32_t' index='0' name='port' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSocketListener:forPort:'>
<arg declared_type64='VZVirtioSocketListener * _Nonnull' index='0' name='listener' type64='@'/>
<arg declared_type64='uint32_t' index='1' name='port' type64='I'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='VZVirtioSocketDeviceConfiguration'>
<method selector='init'>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='VZVirtioSocketListener'>
<method selector='delegate'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='setDelegate:'>
<arg declared_type64='id _Nullable' index='0' name='delegate' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='VZVirtioTraditionalMemoryBalloonDevice'>
<method selector='setTargetVirtualMachineMemorySize:'>
<arg declared_type64='unsigned long long' index='0' name='targetVirtualMachineMemorySize' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='targetVirtualMachineMemorySize'>
<retval declared_type64='unsigned long long' type64='Q'/>
</method>
</class>
<class name='VZVirtioTraditionalMemoryBalloonDeviceConfiguration'>
<method selector='init'>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
</class>
<class name='VZVirtualMachine'>
<method selector='canPause'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='canRequestStop'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='canResume'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='canStart'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='delegate'>
<retval declared_type64='id _Nullable' type64='@'/>
</method>
<method selector='initWithConfiguration:'>
<arg declared_type64='VZVirtualMachineConfiguration * _Nonnull' index='0' name='configuration' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method selector='initWithConfiguration:queue:'>
<arg declared_type64='VZVirtualMachineConfiguration * _Nonnull' index='0' name='configuration' type64='@'/>
<arg declared_type64='dispatch_queue_t _Nonnull' index='1' name='queue' type64='@'/>
<retval declared_type64='instancetype _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='isSupported'>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='memoryBalloonDevices'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='pauseWithCompletionHandler:'>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='requestStopWithError:'>
<arg declared_type64='NSError * _Nullable * _Nullable' index='0' name='error' type64='^@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
<method selector='resumeWithCompletionHandler:'>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setDelegate:'>
<arg declared_type64='id _Nullable' index='0' name='delegate' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='socketDevices'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='startWithCompletionHandler:'>
<arg declared_type64='void (^ _Nonnull)(NSError * _Nullable)' function_pointer='true' index='0' name='completionHandler' type64='@?'>
<arg declared_type64='NSError * _Nullable' type64='@'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='state'>
<retval declared_type64='VZVirtualMachineState' type64='q'/>
</method>
</class>
<class name='VZVirtualMachineConfiguration'>
<method selector='CPUCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method selector='bootLoader'>
<retval declared_type64='VZBootLoader * _Nullable' type64='@'/>
</method>
<method selector='entropyDevices'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method class_method='true' selector='maximumAllowedCPUCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='maximumAllowedMemorySize'>
<retval declared_type64='unsigned long long' type64='Q'/>
</method>
<method selector='memoryBalloonDevices'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='memorySize'>
<retval declared_type64='unsigned long long' type64='Q'/>
</method>
<method class_method='true' selector='minimumAllowedCPUCount'>
<retval declared_type64='NSUInteger' type64='Q'/>
</method>
<method class_method='true' selector='minimumAllowedMemorySize'>
<retval declared_type64='unsigned long long' type64='Q'/>
</method>
<method selector='networkDevices'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='serialPorts'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='setBootLoader:'>
<arg declared_type64='VZBootLoader * _Nullable' index='0' name='bootLoader' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setCPUCount:'>
<arg declared_type64='NSUInteger' index='0' name='CPUCount' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setEntropyDevices:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='entropyDevices' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMemoryBalloonDevices:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='memoryBalloonDevices' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setMemorySize:'>
<arg declared_type64='unsigned long long' index='0' name='memorySize' type64='Q'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setNetworkDevices:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='networkDevices' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSerialPorts:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='serialPorts' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setSocketDevices:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='socketDevices' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='setStorageDevices:'>
<arg declared_type64='NSArray * _Nonnull' index='0' name='storageDevices' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='socketDevices'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='storageDevices'>
<retval declared_type64='NSArray * _Nonnull' type64='@'/>
</method>
<method selector='validateWithError:'>
<arg declared_type64='NSError * _Nullable * _Nullable' index='0' name='error' type64='^@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
</class>
<informal_protocol name='VZVirtioSocketListenerDelegate'>
<method selector='listener:shouldAcceptNewConnection:fromSocketDevice:' type64='B40@0:8@16@24@32'>
<arg declared_type64='VZVirtioSocketListener * _Nonnull' index='0' name='listener' type64='@'/>
<arg declared_type64='VZVirtioSocketConnection * _Nonnull' index='1' name='connection' type64='@'/>
<arg declared_type64='VZVirtioSocketDevice * _Nonnull' index='2' name='socketDevice' type64='@'/>
<retval declared_type64='BOOL' type64='B'/>
</method>
</informal_protocol>
<informal_protocol name='VZVirtualMachineDelegate'>
<method selector='guestDidStopVirtualMachine:' type64='v24@0:8@16'>
<arg declared_type64='VZVirtualMachine * _Nonnull' index='0' name='virtualMachine' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='virtualMachine:didStopWithError:' type64='v32@0:8@16@24'>
<arg declared_type64='VZVirtualMachine * _Nonnull' index='0' name='virtualMachine' type64='@'/>
<arg declared_type64='NSError * _Nonnull' index='1' name='error' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
</informal_protocol>
</signatures>
