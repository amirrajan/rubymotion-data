<?xml version='1.0'?>
<signatures version='1.0'>
<struct name='JNFClassInfo' type64='{_JNFClassInfo=&quot;name&quot;*&quot;cls&quot;^{_jobject}}'>
<field const='true' declared_type64='char*' name='name' type64='*'/>
<field declared_type64='jclass' name='cls' type64='^{_jobject=}'/>
</struct>
<struct name='JNFMemberInfo' type64='{_JNFMemberInfo=&quot;name&quot;*&quot;sig&quot;*&quot;isStatic&quot;B&quot;classInfo&quot;^{_JNFClassInfo}&quot;j&quot;(_j=&quot;fieldID&quot;^{_jfieldID}&quot;methodID&quot;^{_jmethodID})}'>
<field const='true' declared_type64='char*' name='name' type64='*'/>
<field const='true' declared_type64='char*' name='sig' type64='*'/>
<field declared_type64='BOOL' name='isStatic' type64='B'/>
<field declared_type64='JNFClassInfo*' name='classInfo' type64='^{_JNFClassInfo=*^{_jobject}}'/>
<field declared_type64='union _j' name='j' type64='(_j=&quot;fieldID&quot;^{_jfieldID}&quot;methodID&quot;^{_jmethodID})'/>
</struct>
<struct name='JNIEnv' type64='{JNINativeInterface_=&quot;reserved0&quot;^v&quot;reserved1&quot;^v&quot;reserved2&quot;^v&quot;reserved3&quot;^v&quot;GetVersion&quot;^?&quot;DefineClass&quot;^?&quot;FindClass&quot;^?&quot;FromReflectedMethod&quot;^?&quot;FromReflectedField&quot;^?&quot;ToReflectedMethod&quot;^?&quot;GetSuperclass&quot;^?&quot;IsAssignableFrom&quot;^?&quot;ToReflectedField&quot;^?&quot;Throw&quot;^?&quot;ThrowNew&quot;^?&quot;ExceptionOccurred&quot;^?&quot;ExceptionDescribe&quot;^?&quot;ExceptionClear&quot;^?&quot;FatalError&quot;^?&quot;PushLocalFrame&quot;^?&quot;PopLocalFrame&quot;^?&quot;NewGlobalRef&quot;^?&quot;DeleteGlobalRef&quot;^?&quot;DeleteLocalRef&quot;^?&quot;IsSameObject&quot;^?&quot;NewLocalRef&quot;^?&quot;EnsureLocalCapacity&quot;^?&quot;AllocObject&quot;^?&quot;NewObject&quot;^?&quot;NewObjectV&quot;^?&quot;NewObjectA&quot;^?&quot;GetObjectClass&quot;^?&quot;IsInstanceOf&quot;^?&quot;GetMethodID&quot;^?&quot;CallObjectMethod&quot;^?&quot;CallObjectMethodV&quot;^?&quot;CallObjectMethodA&quot;^?&quot;CallBooleanMethod&quot;^?&quot;CallBooleanMethodV&quot;^?&quot;CallBooleanMethodA&quot;^?&quot;CallByteMethod&quot;^?&quot;CallByteMethodV&quot;^?&quot;CallByteMethodA&quot;^?&quot;CallCharMethod&quot;^?&quot;CallCharMethodV&quot;^?&quot;CallCharMethodA&quot;^?&quot;CallShortMethod&quot;^?&quot;CallShortMethodV&quot;^?&quot;CallShortMethodA&quot;^?&quot;CallIntMethod&quot;^?&quot;CallIntMethodV&quot;^?&quot;CallIntMethodA&quot;^?&quot;CallLongMethod&quot;^?&quot;CallLongMethodV&quot;^?&quot;CallLongMethodA&quot;^?&quot;CallFloatMethod&quot;^?&quot;CallFloatMethodV&quot;^?&quot;CallFloatMethodA&quot;^?&quot;CallDoubleMethod&quot;^?&quot;CallDoubleMethodV&quot;^?&quot;CallDoubleMethodA&quot;^?&quot;CallVoidMethod&quot;^?&quot;CallVoidMethodV&quot;^?&quot;CallVoidMethodA&quot;^?&quot;CallNonvirtualObjectMethod&quot;^?&quot;CallNonvirtualObjectMethodV&quot;^?&quot;CallNonvirtualObjectMethodA&quot;^?&quot;CallNonvirtualBooleanMethod&quot;^?&quot;CallNonvirtualBooleanMethodV&quot;^?&quot;CallNonvirtualBooleanMethodA&quot;^?&quot;CallNonvirtualByteMethod&quot;^?&quot;CallNonvirtualByteMethodV&quot;^?&quot;CallNonvirtualByteMethodA&quot;^?&quot;CallNonvirtualCharMethod&quot;^?&quot;CallNonvirtualCharMethodV&quot;^?&quot;CallNonvirtualCharMethodA&quot;^?&quot;CallNonvirtualShortMethod&quot;^?&quot;CallNonvirtualShortMethodV&quot;^?&quot;CallNonvirtualShortMethodA&quot;^?&quot;CallNonvirtualIntMethod&quot;^?&quot;CallNonvirtualIntMethodV&quot;^?&quot;CallNonvirtualIntMethodA&quot;^?&quot;CallNonvirtualLongMethod&quot;^?&quot;CallNonvirtualLongMethodV&quot;^?&quot;CallNonvirtualLongMethodA&quot;^?&quot;CallNonvirtualFloatMethod&quot;^?&quot;CallNonvirtualFloatMethodV&quot;^?&quot;CallNonvirtualFloatMethodA&quot;^?&quot;CallNonvirtualDoubleMethod&quot;^?&quot;CallNonvirtualDoubleMethodV&quot;^?&quot;CallNonvirtualDoubleMethodA&quot;^?&quot;CallNonvirtualVoidMethod&quot;^?&quot;CallNonvirtualVoidMethodV&quot;^?&quot;CallNonvirtualVoidMethodA&quot;^?&quot;GetFieldID&quot;^?&quot;GetObjectField&quot;^?&quot;GetBooleanField&quot;^?&quot;GetByteField&quot;^?&quot;GetCharField&quot;^?&quot;GetShortField&quot;^?&quot;GetIntField&quot;^?&quot;GetLongField&quot;^?&quot;GetFloatField&quot;^?&quot;GetDoubleField&quot;^?&quot;SetObjectField&quot;^?&quot;SetBooleanField&quot;^?&quot;SetByteField&quot;^?&quot;SetCharField&quot;^?&quot;SetShortField&quot;^?&quot;SetIntField&quot;^?&quot;SetLongField&quot;^?&quot;SetFloatField&quot;^?&quot;SetDoubleField&quot;^?&quot;GetStaticMethodID&quot;^?&quot;CallStaticObjectMethod&quot;^?&quot;CallStaticObjectMethodV&quot;^?&quot;CallStaticObjectMethodA&quot;^?&quot;CallStaticBooleanMethod&quot;^?&quot;CallStaticBooleanMethodV&quot;^?&quot;CallStaticBooleanMethodA&quot;^?&quot;CallStaticByteMethod&quot;^?&quot;CallStaticByteMethodV&quot;^?&quot;CallStaticByteMethodA&quot;^?&quot;CallStaticCharMethod&quot;^?&quot;CallStaticCharMethodV&quot;^?&quot;CallStaticCharMethodA&quot;^?&quot;CallStaticShortMethod&quot;^?&quot;CallStaticShortMethodV&quot;^?&quot;CallStaticShortMethodA&quot;^?&quot;CallStaticIntMethod&quot;^?&quot;CallStaticIntMethodV&quot;^?&quot;CallStaticIntMethodA&quot;^?&quot;CallStaticLongMethod&quot;^?&quot;CallStaticLongMethodV&quot;^?&quot;CallStaticLongMethodA&quot;^?&quot;CallStaticFloatMethod&quot;^?&quot;CallStaticFloatMethodV&quot;^?&quot;CallStaticFloatMethodA&quot;^?&quot;CallStaticDoubleMethod&quot;^?&quot;CallStaticDoubleMethodV&quot;^?&quot;CallStaticDoubleMethodA&quot;^?&quot;CallStaticVoidMethod&quot;^?&quot;CallStaticVoidMethodV&quot;^?&quot;CallStaticVoidMethodA&quot;^?&quot;GetStaticFieldID&quot;^?&quot;GetStaticObjectField&quot;^?&quot;GetStaticBooleanField&quot;^?&quot;GetStaticByteField&quot;^?&quot;GetStaticCharField&quot;^?&quot;GetStaticShortField&quot;^?&quot;GetStaticIntField&quot;^?&quot;GetStaticLongField&quot;^?&quot;GetStaticFloatField&quot;^?&quot;GetStaticDoubleField&quot;^?&quot;SetStaticObjectField&quot;^?&quot;SetStaticBooleanField&quot;^?&quot;SetStaticByteField&quot;^?&quot;SetStaticCharField&quot;^?&quot;SetStaticShortField&quot;^?&quot;SetStaticIntField&quot;^?&quot;SetStaticLongField&quot;^?&quot;SetStaticFloatField&quot;^?&quot;SetStaticDoubleField&quot;^?&quot;NewString&quot;^?&quot;GetStringLength&quot;^?&quot;GetStringChars&quot;^?&quot;ReleaseStringChars&quot;^?&quot;NewStringUTF&quot;^?&quot;GetStringUTFLength&quot;^?&quot;GetStringUTFChars&quot;^?&quot;ReleaseStringUTFChars&quot;^?&quot;GetArrayLength&quot;^?&quot;NewObjectArray&quot;^?&quot;GetObjectArrayElement&quot;^?&quot;SetObjectArrayElement&quot;^?&quot;NewBooleanArray&quot;^?&quot;NewByteArray&quot;^?&quot;NewCharArray&quot;^?&quot;NewShortArray&quot;^?&quot;NewIntArray&quot;^?&quot;NewLongArray&quot;^?&quot;NewFloatArray&quot;^?&quot;NewDoubleArray&quot;^?&quot;GetBooleanArrayElements&quot;^?&quot;GetByteArrayElements&quot;^?&quot;GetCharArrayElements&quot;^?&quot;GetShortArrayElements&quot;^?&quot;GetIntArrayElements&quot;^?&quot;GetLongArrayElements&quot;^?&quot;GetFloatArrayElements&quot;^?&quot;GetDoubleArrayElements&quot;^?&quot;ReleaseBooleanArrayElements&quot;^?&quot;ReleaseByteArrayElements&quot;^?&quot;ReleaseCharArrayElements&quot;^?&quot;ReleaseShortArrayElements&quot;^?&quot;ReleaseIntArrayElements&quot;^?&quot;ReleaseLongArrayElements&quot;^?&quot;ReleaseFloatArrayElements&quot;^?&quot;ReleaseDoubleArrayElements&quot;^?&quot;GetBooleanArrayRegion&quot;^?&quot;GetByteArrayRegion&quot;^?&quot;GetCharArrayRegion&quot;^?&quot;GetShortArrayRegion&quot;^?&quot;GetIntArrayRegion&quot;^?&quot;GetLongArrayRegion&quot;^?&quot;GetFloatArrayRegion&quot;^?&quot;GetDoubleArrayRegion&quot;^?&quot;SetBooleanArrayRegion&quot;^?&quot;SetByteArrayRegion&quot;^?&quot;SetCharArrayRegion&quot;^?&quot;SetShortArrayRegion&quot;^?&quot;SetIntArrayRegion&quot;^?&quot;SetLongArrayRegion&quot;^?&quot;SetFloatArrayRegion&quot;^?&quot;SetDoubleArrayRegion&quot;^?&quot;RegisterNatives&quot;^?&quot;UnregisterNatives&quot;^?&quot;MonitorEnter&quot;^?&quot;MonitorExit&quot;^?&quot;GetJavaVM&quot;^?&quot;GetStringRegion&quot;^?&quot;GetStringUTFRegion&quot;^?&quot;GetPrimitiveArrayCritical&quot;^?&quot;ReleasePrimitiveArrayCritical&quot;^?&quot;GetStringCritical&quot;^?&quot;ReleaseStringCritical&quot;^?&quot;NewWeakGlobalRef&quot;^?&quot;DeleteWeakGlobalRef&quot;^?&quot;ExceptionCheck&quot;^?&quot;NewDirectByteBuffer&quot;^?&quot;GetDirectBufferAddress&quot;^?&quot;GetDirectBufferCapacity&quot;^?&quot;GetObjectRefType&quot;^?}'>
<field declared_type64='void*' name='reserved0' type64='^v'/>
<field declared_type64='void*' name='reserved1' type64='^v'/>
<field declared_type64='void*' name='reserved2' type64='^v'/>
<field declared_type64='void*' name='reserved3' type64='^v'/>
<field declared_type64='jint (*)(JNIEnv *)' function_pointer='true' name='GetVersion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jclass (*)(JNIEnv *, char *, jobject, jbyte *, jsize)' function_pointer='true' name='DefineClass' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jbyte*' type64='*'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jclass' type64='^{_jobject=}'/>
</field>
<field declared_type64='jclass (*)(JNIEnv *, char *)' function_pointer='true' name='FindClass' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jclass' type64='^{_jobject=}'/>
</field>
<field declared_type64='jmethodID (*)(JNIEnv *, jobject)' function_pointer='true' name='FromReflectedMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jmethodID' type64='^{_jmethodID=}'/>
</field>
<field declared_type64='jfieldID (*)(JNIEnv *, jobject)' function_pointer='true' name='FromReflectedField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jfieldID' type64='^{_jfieldID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, jboolean)' function_pointer='true' name='ToReflectedMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jclass (*)(JNIEnv *, jclass)' function_pointer='true' name='GetSuperclass' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jclass' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jclass)' function_pointer='true' name='IsAssignableFrom' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jfieldID, jboolean)' function_pointer='true' name='ToReflectedField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jthrowable)' function_pointer='true' name='Throw' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthrowable' type64='^{_jobject=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, char *)' function_pointer='true' name='ThrowNew' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jthrowable (*)(JNIEnv *)' function_pointer='true' name='ExceptionOccurred' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jthrowable' type64='^{_jobject=}'/>
</field>
<field declared_type64='void (*)(JNIEnv *)' function_pointer='true' name='ExceptionDescribe' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *)' function_pointer='true' name='ExceptionClear' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, char *)' function_pointer='true' name='FatalError' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jint)' function_pointer='true' name='PushLocalFrame' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject)' function_pointer='true' name='PopLocalFrame' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject)' function_pointer='true' name='NewGlobalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject)' function_pointer='true' name='DeleteGlobalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject)' function_pointer='true' name='DeleteLocalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jobject)' function_pointer='true' name='IsSameObject' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject)' function_pointer='true' name='NewLocalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jint)' function_pointer='true' name='EnsureLocalCapacity' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass)' function_pointer='true' name='AllocObject' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='NewObject' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='NewObjectV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='NewObjectA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jclass (*)(JNIEnv *, jobject)' function_pointer='true' name='GetObjectClass' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jclass' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jclass)' function_pointer='true' name='IsInstanceOf' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jmethodID (*)(JNIEnv *, jclass, char *, char *)' function_pointer='true' name='GetMethodID' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jmethodID' type64='^{_jmethodID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallObjectMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallObjectMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallObjectMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallBooleanMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallBooleanMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallBooleanMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallByteMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallByteMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallByteMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallCharMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallCharMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallCharMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallShortMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallShortMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallShortMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallIntMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallIntMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallIntMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallLongMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallLongMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallLongMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallFloatMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallFloatMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallFloatMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallDoubleMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallDoubleMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallDoubleMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallVoidMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallVoidMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallVoidMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualObjectMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualObjectMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualObjectMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualBooleanMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualBooleanMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualBooleanMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualByteMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualByteMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualByteMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualCharMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualCharMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualCharMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualShortMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualShortMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualShortMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualIntMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualIntMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualIntMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualLongMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualLongMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualLongMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualFloatMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualFloatMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualFloatMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualDoubleMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualDoubleMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualDoubleMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualVoidMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualVoidMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualVoidMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jfieldID (*)(JNIEnv *, jclass, char *, char *)' function_pointer='true' name='GetFieldID' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jfieldID' type64='^{_jfieldID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetObjectField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetBooleanField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetByteField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetCharField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetShortField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetIntField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetLongField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetFloatField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetDoubleField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jobject)' function_pointer='true' name='SetObjectField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jboolean)' function_pointer='true' name='SetBooleanField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jbyte)' function_pointer='true' name='SetByteField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jbyte' type64='c'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jchar)' function_pointer='true' name='SetCharField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jchar' type64='S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jshort)' function_pointer='true' name='SetShortField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jshort' type64='s'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jint)' function_pointer='true' name='SetIntField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jlong)' function_pointer='true' name='SetLongField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jfloat)' function_pointer='true' name='SetFloatField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jfloat' type64='f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jdouble)' function_pointer='true' name='SetDoubleField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jdouble' type64='d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jmethodID (*)(JNIEnv *, jclass, char *, char *)' function_pointer='true' name='GetStaticMethodID' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jmethodID' type64='^{_jmethodID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticObjectMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticObjectMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticObjectMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticBooleanMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticBooleanMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticBooleanMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticByteMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticByteMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticByteMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticCharMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticCharMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticCharMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticShortMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticShortMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticShortMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticIntMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticIntMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticIntMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticLongMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticLongMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticLongMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticFloatMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticFloatMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticFloatMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticDoubleMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticDoubleMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticDoubleMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticVoidMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticVoidMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticVoidMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jfieldID (*)(JNIEnv *, jclass, char *, char *)' function_pointer='true' name='GetStaticFieldID' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jfieldID' type64='^{_jfieldID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticObjectField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticBooleanField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticByteField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticCharField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticShortField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticIntField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticLongField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticFloatField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticDoubleField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jobject)' function_pointer='true' name='SetStaticObjectField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jboolean)' function_pointer='true' name='SetStaticBooleanField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jbyte)' function_pointer='true' name='SetStaticByteField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jbyte' type64='c'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jchar)' function_pointer='true' name='SetStaticCharField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jchar' type64='S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jshort)' function_pointer='true' name='SetStaticShortField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jshort' type64='s'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jint)' function_pointer='true' name='SetStaticIntField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jlong)' function_pointer='true' name='SetStaticLongField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jfloat)' function_pointer='true' name='SetStaticFloatField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jfloat' type64='f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jdouble)' function_pointer='true' name='SetStaticDoubleField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jdouble' type64='d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jstring (*)(JNIEnv *, jchar *, jsize)' function_pointer='true' name='NewString' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jstring' type64='^{_jobject=}'/>
</field>
<field declared_type64='jsize (*)(JNIEnv *, jstring)' function_pointer='true' name='GetStringLength' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<retval declared_type64='jsize' type64='i'/>
</field>
<field const='true' declared_type64='jchar *(*)(JNIEnv *, jstring, jboolean *)' function_pointer='true' name='GetStringChars' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval const='true' declared_type64='jchar*' type64='^S'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, jchar *)' function_pointer='true' name='ReleaseStringChars' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jstring (*)(JNIEnv *, char *)' function_pointer='true' name='NewStringUTF' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jstring' type64='^{_jobject=}'/>
</field>
<field declared_type64='jsize (*)(JNIEnv *, jstring)' function_pointer='true' name='GetStringUTFLength' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<retval declared_type64='jsize' type64='i'/>
</field>
<field const='true' declared_type64='char *(*)(JNIEnv *, jstring, jboolean *)' function_pointer='true' name='GetStringUTFChars' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval const='true' declared_type64='char*' type64='*'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, char *)' function_pointer='true' name='ReleaseStringUTFChars' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jsize (*)(JNIEnv *, jarray)' function_pointer='true' name='GetArrayLength' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jarray' type64='^{_jobject=}'/>
<retval declared_type64='jsize' type64='i'/>
</field>
<field declared_type64='jobjectArray (*)(JNIEnv *, jsize, jclass, jobject)' function_pointer='true' name='NewObjectArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobjectArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobjectArray, jsize)' function_pointer='true' name='GetObjectArrayElement' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobjectArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobjectArray, jsize, jobject)' function_pointer='true' name='SetObjectArrayElement' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobjectArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jbooleanArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewBooleanArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jbooleanArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jbyteArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewByteArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jbyteArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jcharArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewCharArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jcharArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jshortArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewShortArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jshortArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jintArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewIntArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jintArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jlongArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewLongArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jlongArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jfloatArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewFloatArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jfloatArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jdoubleArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewDoubleArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jdoubleArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean *(*)(JNIEnv *, jbooleanArray, jboolean *)' function_pointer='true' name='GetBooleanArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbooleanArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jboolean*' type64='*'/>
</field>
<field declared_type64='jbyte *(*)(JNIEnv *, jbyteArray, jboolean *)' function_pointer='true' name='GetByteArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbyteArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jbyte*' type64='*'/>
</field>
<field declared_type64='jchar *(*)(JNIEnv *, jcharArray, jboolean *)' function_pointer='true' name='GetCharArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jcharArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jchar*' type64='^S'/>
</field>
<field declared_type64='jshort *(*)(JNIEnv *, jshortArray, jboolean *)' function_pointer='true' name='GetShortArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jshortArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jshort*' type64='^s'/>
</field>
<field declared_type64='jint *(*)(JNIEnv *, jintArray, jboolean *)' function_pointer='true' name='GetIntArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jintArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jint*' type64='^i'/>
</field>
<field declared_type64='jlong *(*)(JNIEnv *, jlongArray, jboolean *)' function_pointer='true' name='GetLongArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jlongArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jlong*' type64='^q'/>
</field>
<field declared_type64='jfloat *(*)(JNIEnv *, jfloatArray, jboolean *)' function_pointer='true' name='GetFloatArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jfloatArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jfloat*' type64='^f'/>
</field>
<field declared_type64='jdouble *(*)(JNIEnv *, jdoubleArray, jboolean *)' function_pointer='true' name='GetDoubleArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jdoubleArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jdouble*' type64='^d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbooleanArray, jboolean *, jint)' function_pointer='true' name='ReleaseBooleanArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbooleanArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbyteArray, jbyte *, jint)' function_pointer='true' name='ReleaseByteArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbyteArray' type64='^{_jobject=}'/>
<arg declared_type64='jbyte*' type64='*'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jcharArray, jchar *, jint)' function_pointer='true' name='ReleaseCharArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jcharArray' type64='^{_jobject=}'/>
<arg declared_type64='jchar*' type64='^S'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jshortArray, jshort *, jint)' function_pointer='true' name='ReleaseShortArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jshortArray' type64='^{_jobject=}'/>
<arg declared_type64='jshort*' type64='^s'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jintArray, jint *, jint)' function_pointer='true' name='ReleaseIntArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jintArray' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jlongArray, jlong *, jint)' function_pointer='true' name='ReleaseLongArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jlongArray' type64='^{_jobject=}'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jfloatArray, jfloat *, jint)' function_pointer='true' name='ReleaseFloatArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jfloatArray' type64='^{_jobject=}'/>
<arg declared_type64='jfloat*' type64='^f'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jdoubleArray, jdouble *, jint)' function_pointer='true' name='ReleaseDoubleArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jdoubleArray' type64='^{_jobject=}'/>
<arg declared_type64='jdouble*' type64='^d'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbooleanArray, jsize, jsize, jboolean *)' function_pointer='true' name='GetBooleanArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbooleanArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbyteArray, jsize, jsize, jbyte *)' function_pointer='true' name='GetByteArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbyteArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jbyte*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jcharArray, jsize, jsize, jchar *)' function_pointer='true' name='GetCharArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jcharArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jshortArray, jsize, jsize, jshort *)' function_pointer='true' name='GetShortArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jshortArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jshort*' type64='^s'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jintArray, jsize, jsize, jint *)' function_pointer='true' name='GetIntArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jintArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jlongArray, jsize, jsize, jlong *)' function_pointer='true' name='GetLongArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jlongArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jfloatArray, jsize, jsize, jfloat *)' function_pointer='true' name='GetFloatArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jfloatArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jfloat*' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jdoubleArray, jsize, jsize, jdouble *)' function_pointer='true' name='GetDoubleArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jdoubleArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jdouble*' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbooleanArray, jsize, jsize, jboolean *)' function_pointer='true' name='SetBooleanArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbooleanArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jboolean*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbyteArray, jsize, jsize, jbyte *)' function_pointer='true' name='SetByteArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbyteArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jbyte*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jcharArray, jsize, jsize, jchar *)' function_pointer='true' name='SetCharArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jcharArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jshortArray, jsize, jsize, jshort *)' function_pointer='true' name='SetShortArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jshortArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jshort*' type64='^s'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jintArray, jsize, jsize, jint *)' function_pointer='true' name='SetIntArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jintArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jint*' type64='^i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jlongArray, jsize, jsize, jlong *)' function_pointer='true' name='SetLongArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jlongArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jlong*' type64='^q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jfloatArray, jsize, jsize, jfloat *)' function_pointer='true' name='SetFloatArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jfloatArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jfloat*' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jdoubleArray, jsize, jsize, jdouble *)' function_pointer='true' name='SetDoubleArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jdoubleArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jdouble*' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, JNINativeMethod *, jint)' function_pointer='true' name='RegisterNatives' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='JNINativeMethod*' type64='^{_JNINativeMethod=**^v}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass)' function_pointer='true' name='UnregisterNatives' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject)' function_pointer='true' name='MonitorEnter' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject)' function_pointer='true' name='MonitorExit' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, JavaVM **)' function_pointer='true' name='GetJavaVM' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JavaVM**' type64='^^^{JNIInvokeInterface_}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, jsize, jsize, jchar *)' function_pointer='true' name='GetStringRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, jsize, jsize, char *)' function_pointer='true' name='GetStringUTFRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void *(*)(JNIEnv *, jarray, jboolean *)' function_pointer='true' name='GetPrimitiveArrayCritical' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jarray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jarray, void *, jint)' function_pointer='true' name='ReleasePrimitiveArrayCritical' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jarray' type64='^{_jobject=}'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field const='true' declared_type64='jchar *(*)(JNIEnv *, jstring, jboolean *)' function_pointer='true' name='GetStringCritical' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval const='true' declared_type64='jchar*' type64='^S'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, jchar *)' function_pointer='true' name='ReleaseStringCritical' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jweak (*)(JNIEnv *, jobject)' function_pointer='true' name='NewWeakGlobalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jweak' type64='^{_jobject=}'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jweak)' function_pointer='true' name='DeleteWeakGlobalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jweak' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *)' function_pointer='true' name='ExceptionCheck' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, void *, jlong)' function_pointer='true' name='NewDirectByteBuffer' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='void *(*)(JNIEnv *, jobject)' function_pointer='true' name='GetDirectBufferAddress' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject)' function_pointer='true' name='GetDirectBufferCapacity' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jobjectRefType (*)(JNIEnv *, jobject)' function_pointer='true' name='GetObjectRefType' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobjectRefType' type64='i'/>
</field>
</struct>
<struct name='JNIEnv_' type64='{JNIEnv_=&quot;functions&quot;^{JNINativeInterface_}}'>
<field const='true' declared_type64='struct JNINativeInterface_*' name='functions' type64='^{JNINativeInterface_=^v^v^v^v^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?^?}'/>
</struct>
<struct name='JNIInvokeInterface_' type64='{JNIInvokeInterface_=&quot;reserved0&quot;^v&quot;reserved1&quot;^v&quot;reserved2&quot;^v&quot;DestroyJavaVM&quot;^?&quot;AttachCurrentThread&quot;^?&quot;DetachCurrentThread&quot;^?&quot;GetEnv&quot;^?&quot;AttachCurrentThreadAsDaemon&quot;^?}'>
<field declared_type64='void*' name='reserved0' type64='^v'/>
<field declared_type64='void*' name='reserved1' type64='^v'/>
<field declared_type64='void*' name='reserved2' type64='^v'/>
<field declared_type64='jint (*)(JavaVM *)' function_pointer='true' name='DestroyJavaVM' type64='^?'>
<arg declared_type64='JavaVM*' type64='^^{JNIInvokeInterface_}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JavaVM *, void **, void *)' function_pointer='true' name='AttachCurrentThread' type64='^?'>
<arg declared_type64='JavaVM*' type64='^^{JNIInvokeInterface_}'/>
<arg declared_type64='void**' type64='^^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JavaVM *)' function_pointer='true' name='DetachCurrentThread' type64='^?'>
<arg declared_type64='JavaVM*' type64='^^{JNIInvokeInterface_}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JavaVM *, void **, jint)' function_pointer='true' name='GetEnv' type64='^?'>
<arg declared_type64='JavaVM*' type64='^^{JNIInvokeInterface_}'/>
<arg declared_type64='void**' type64='^^v'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JavaVM *, void **, void *)' function_pointer='true' name='AttachCurrentThreadAsDaemon' type64='^?'>
<arg declared_type64='JavaVM*' type64='^^{JNIInvokeInterface_}'/>
<arg declared_type64='void**' type64='^^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jint' type64='i'/>
</field>
</struct>
<struct name='JNINativeInterface_' type64='{JNINativeInterface_=&quot;reserved0&quot;^v&quot;reserved1&quot;^v&quot;reserved2&quot;^v&quot;reserved3&quot;^v&quot;GetVersion&quot;^?&quot;DefineClass&quot;^?&quot;FindClass&quot;^?&quot;FromReflectedMethod&quot;^?&quot;FromReflectedField&quot;^?&quot;ToReflectedMethod&quot;^?&quot;GetSuperclass&quot;^?&quot;IsAssignableFrom&quot;^?&quot;ToReflectedField&quot;^?&quot;Throw&quot;^?&quot;ThrowNew&quot;^?&quot;ExceptionOccurred&quot;^?&quot;ExceptionDescribe&quot;^?&quot;ExceptionClear&quot;^?&quot;FatalError&quot;^?&quot;PushLocalFrame&quot;^?&quot;PopLocalFrame&quot;^?&quot;NewGlobalRef&quot;^?&quot;DeleteGlobalRef&quot;^?&quot;DeleteLocalRef&quot;^?&quot;IsSameObject&quot;^?&quot;NewLocalRef&quot;^?&quot;EnsureLocalCapacity&quot;^?&quot;AllocObject&quot;^?&quot;NewObject&quot;^?&quot;NewObjectV&quot;^?&quot;NewObjectA&quot;^?&quot;GetObjectClass&quot;^?&quot;IsInstanceOf&quot;^?&quot;GetMethodID&quot;^?&quot;CallObjectMethod&quot;^?&quot;CallObjectMethodV&quot;^?&quot;CallObjectMethodA&quot;^?&quot;CallBooleanMethod&quot;^?&quot;CallBooleanMethodV&quot;^?&quot;CallBooleanMethodA&quot;^?&quot;CallByteMethod&quot;^?&quot;CallByteMethodV&quot;^?&quot;CallByteMethodA&quot;^?&quot;CallCharMethod&quot;^?&quot;CallCharMethodV&quot;^?&quot;CallCharMethodA&quot;^?&quot;CallShortMethod&quot;^?&quot;CallShortMethodV&quot;^?&quot;CallShortMethodA&quot;^?&quot;CallIntMethod&quot;^?&quot;CallIntMethodV&quot;^?&quot;CallIntMethodA&quot;^?&quot;CallLongMethod&quot;^?&quot;CallLongMethodV&quot;^?&quot;CallLongMethodA&quot;^?&quot;CallFloatMethod&quot;^?&quot;CallFloatMethodV&quot;^?&quot;CallFloatMethodA&quot;^?&quot;CallDoubleMethod&quot;^?&quot;CallDoubleMethodV&quot;^?&quot;CallDoubleMethodA&quot;^?&quot;CallVoidMethod&quot;^?&quot;CallVoidMethodV&quot;^?&quot;CallVoidMethodA&quot;^?&quot;CallNonvirtualObjectMethod&quot;^?&quot;CallNonvirtualObjectMethodV&quot;^?&quot;CallNonvirtualObjectMethodA&quot;^?&quot;CallNonvirtualBooleanMethod&quot;^?&quot;CallNonvirtualBooleanMethodV&quot;^?&quot;CallNonvirtualBooleanMethodA&quot;^?&quot;CallNonvirtualByteMethod&quot;^?&quot;CallNonvirtualByteMethodV&quot;^?&quot;CallNonvirtualByteMethodA&quot;^?&quot;CallNonvirtualCharMethod&quot;^?&quot;CallNonvirtualCharMethodV&quot;^?&quot;CallNonvirtualCharMethodA&quot;^?&quot;CallNonvirtualShortMethod&quot;^?&quot;CallNonvirtualShortMethodV&quot;^?&quot;CallNonvirtualShortMethodA&quot;^?&quot;CallNonvirtualIntMethod&quot;^?&quot;CallNonvirtualIntMethodV&quot;^?&quot;CallNonvirtualIntMethodA&quot;^?&quot;CallNonvirtualLongMethod&quot;^?&quot;CallNonvirtualLongMethodV&quot;^?&quot;CallNonvirtualLongMethodA&quot;^?&quot;CallNonvirtualFloatMethod&quot;^?&quot;CallNonvirtualFloatMethodV&quot;^?&quot;CallNonvirtualFloatMethodA&quot;^?&quot;CallNonvirtualDoubleMethod&quot;^?&quot;CallNonvirtualDoubleMethodV&quot;^?&quot;CallNonvirtualDoubleMethodA&quot;^?&quot;CallNonvirtualVoidMethod&quot;^?&quot;CallNonvirtualVoidMethodV&quot;^?&quot;CallNonvirtualVoidMethodA&quot;^?&quot;GetFieldID&quot;^?&quot;GetObjectField&quot;^?&quot;GetBooleanField&quot;^?&quot;GetByteField&quot;^?&quot;GetCharField&quot;^?&quot;GetShortField&quot;^?&quot;GetIntField&quot;^?&quot;GetLongField&quot;^?&quot;GetFloatField&quot;^?&quot;GetDoubleField&quot;^?&quot;SetObjectField&quot;^?&quot;SetBooleanField&quot;^?&quot;SetByteField&quot;^?&quot;SetCharField&quot;^?&quot;SetShortField&quot;^?&quot;SetIntField&quot;^?&quot;SetLongField&quot;^?&quot;SetFloatField&quot;^?&quot;SetDoubleField&quot;^?&quot;GetStaticMethodID&quot;^?&quot;CallStaticObjectMethod&quot;^?&quot;CallStaticObjectMethodV&quot;^?&quot;CallStaticObjectMethodA&quot;^?&quot;CallStaticBooleanMethod&quot;^?&quot;CallStaticBooleanMethodV&quot;^?&quot;CallStaticBooleanMethodA&quot;^?&quot;CallStaticByteMethod&quot;^?&quot;CallStaticByteMethodV&quot;^?&quot;CallStaticByteMethodA&quot;^?&quot;CallStaticCharMethod&quot;^?&quot;CallStaticCharMethodV&quot;^?&quot;CallStaticCharMethodA&quot;^?&quot;CallStaticShortMethod&quot;^?&quot;CallStaticShortMethodV&quot;^?&quot;CallStaticShortMethodA&quot;^?&quot;CallStaticIntMethod&quot;^?&quot;CallStaticIntMethodV&quot;^?&quot;CallStaticIntMethodA&quot;^?&quot;CallStaticLongMethod&quot;^?&quot;CallStaticLongMethodV&quot;^?&quot;CallStaticLongMethodA&quot;^?&quot;CallStaticFloatMethod&quot;^?&quot;CallStaticFloatMethodV&quot;^?&quot;CallStaticFloatMethodA&quot;^?&quot;CallStaticDoubleMethod&quot;^?&quot;CallStaticDoubleMethodV&quot;^?&quot;CallStaticDoubleMethodA&quot;^?&quot;CallStaticVoidMethod&quot;^?&quot;CallStaticVoidMethodV&quot;^?&quot;CallStaticVoidMethodA&quot;^?&quot;GetStaticFieldID&quot;^?&quot;GetStaticObjectField&quot;^?&quot;GetStaticBooleanField&quot;^?&quot;GetStaticByteField&quot;^?&quot;GetStaticCharField&quot;^?&quot;GetStaticShortField&quot;^?&quot;GetStaticIntField&quot;^?&quot;GetStaticLongField&quot;^?&quot;GetStaticFloatField&quot;^?&quot;GetStaticDoubleField&quot;^?&quot;SetStaticObjectField&quot;^?&quot;SetStaticBooleanField&quot;^?&quot;SetStaticByteField&quot;^?&quot;SetStaticCharField&quot;^?&quot;SetStaticShortField&quot;^?&quot;SetStaticIntField&quot;^?&quot;SetStaticLongField&quot;^?&quot;SetStaticFloatField&quot;^?&quot;SetStaticDoubleField&quot;^?&quot;NewString&quot;^?&quot;GetStringLength&quot;^?&quot;GetStringChars&quot;^?&quot;ReleaseStringChars&quot;^?&quot;NewStringUTF&quot;^?&quot;GetStringUTFLength&quot;^?&quot;GetStringUTFChars&quot;^?&quot;ReleaseStringUTFChars&quot;^?&quot;GetArrayLength&quot;^?&quot;NewObjectArray&quot;^?&quot;GetObjectArrayElement&quot;^?&quot;SetObjectArrayElement&quot;^?&quot;NewBooleanArray&quot;^?&quot;NewByteArray&quot;^?&quot;NewCharArray&quot;^?&quot;NewShortArray&quot;^?&quot;NewIntArray&quot;^?&quot;NewLongArray&quot;^?&quot;NewFloatArray&quot;^?&quot;NewDoubleArray&quot;^?&quot;GetBooleanArrayElements&quot;^?&quot;GetByteArrayElements&quot;^?&quot;GetCharArrayElements&quot;^?&quot;GetShortArrayElements&quot;^?&quot;GetIntArrayElements&quot;^?&quot;GetLongArrayElements&quot;^?&quot;GetFloatArrayElements&quot;^?&quot;GetDoubleArrayElements&quot;^?&quot;ReleaseBooleanArrayElements&quot;^?&quot;ReleaseByteArrayElements&quot;^?&quot;ReleaseCharArrayElements&quot;^?&quot;ReleaseShortArrayElements&quot;^?&quot;ReleaseIntArrayElements&quot;^?&quot;ReleaseLongArrayElements&quot;^?&quot;ReleaseFloatArrayElements&quot;^?&quot;ReleaseDoubleArrayElements&quot;^?&quot;GetBooleanArrayRegion&quot;^?&quot;GetByteArrayRegion&quot;^?&quot;GetCharArrayRegion&quot;^?&quot;GetShortArrayRegion&quot;^?&quot;GetIntArrayRegion&quot;^?&quot;GetLongArrayRegion&quot;^?&quot;GetFloatArrayRegion&quot;^?&quot;GetDoubleArrayRegion&quot;^?&quot;SetBooleanArrayRegion&quot;^?&quot;SetByteArrayRegion&quot;^?&quot;SetCharArrayRegion&quot;^?&quot;SetShortArrayRegion&quot;^?&quot;SetIntArrayRegion&quot;^?&quot;SetLongArrayRegion&quot;^?&quot;SetFloatArrayRegion&quot;^?&quot;SetDoubleArrayRegion&quot;^?&quot;RegisterNatives&quot;^?&quot;UnregisterNatives&quot;^?&quot;MonitorEnter&quot;^?&quot;MonitorExit&quot;^?&quot;GetJavaVM&quot;^?&quot;GetStringRegion&quot;^?&quot;GetStringUTFRegion&quot;^?&quot;GetPrimitiveArrayCritical&quot;^?&quot;ReleasePrimitiveArrayCritical&quot;^?&quot;GetStringCritical&quot;^?&quot;ReleaseStringCritical&quot;^?&quot;NewWeakGlobalRef&quot;^?&quot;DeleteWeakGlobalRef&quot;^?&quot;ExceptionCheck&quot;^?&quot;NewDirectByteBuffer&quot;^?&quot;GetDirectBufferAddress&quot;^?&quot;GetDirectBufferCapacity&quot;^?&quot;GetObjectRefType&quot;^?}'>
<field declared_type64='void*' name='reserved0' type64='^v'/>
<field declared_type64='void*' name='reserved1' type64='^v'/>
<field declared_type64='void*' name='reserved2' type64='^v'/>
<field declared_type64='void*' name='reserved3' type64='^v'/>
<field declared_type64='jint (*)(JNIEnv *)' function_pointer='true' name='GetVersion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jclass (*)(JNIEnv *, char *, jobject, jbyte *, jsize)' function_pointer='true' name='DefineClass' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jbyte*' type64='*'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jclass' type64='^{_jobject=}'/>
</field>
<field declared_type64='jclass (*)(JNIEnv *, char *)' function_pointer='true' name='FindClass' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jclass' type64='^{_jobject=}'/>
</field>
<field declared_type64='jmethodID (*)(JNIEnv *, jobject)' function_pointer='true' name='FromReflectedMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jmethodID' type64='^{_jmethodID=}'/>
</field>
<field declared_type64='jfieldID (*)(JNIEnv *, jobject)' function_pointer='true' name='FromReflectedField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jfieldID' type64='^{_jfieldID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, jboolean)' function_pointer='true' name='ToReflectedMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jclass (*)(JNIEnv *, jclass)' function_pointer='true' name='GetSuperclass' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jclass' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jclass)' function_pointer='true' name='IsAssignableFrom' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jfieldID, jboolean)' function_pointer='true' name='ToReflectedField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jthrowable)' function_pointer='true' name='Throw' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthrowable' type64='^{_jobject=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, char *)' function_pointer='true' name='ThrowNew' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jthrowable (*)(JNIEnv *)' function_pointer='true' name='ExceptionOccurred' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jthrowable' type64='^{_jobject=}'/>
</field>
<field declared_type64='void (*)(JNIEnv *)' function_pointer='true' name='ExceptionDescribe' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *)' function_pointer='true' name='ExceptionClear' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, char *)' function_pointer='true' name='FatalError' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jint)' function_pointer='true' name='PushLocalFrame' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject)' function_pointer='true' name='PopLocalFrame' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject)' function_pointer='true' name='NewGlobalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject)' function_pointer='true' name='DeleteGlobalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject)' function_pointer='true' name='DeleteLocalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jobject)' function_pointer='true' name='IsSameObject' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject)' function_pointer='true' name='NewLocalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jint)' function_pointer='true' name='EnsureLocalCapacity' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass)' function_pointer='true' name='AllocObject' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='NewObject' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='NewObjectV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='NewObjectA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jclass (*)(JNIEnv *, jobject)' function_pointer='true' name='GetObjectClass' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jclass' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jclass)' function_pointer='true' name='IsInstanceOf' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jmethodID (*)(JNIEnv *, jclass, char *, char *)' function_pointer='true' name='GetMethodID' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jmethodID' type64='^{_jmethodID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallObjectMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallObjectMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallObjectMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallBooleanMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallBooleanMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallBooleanMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallByteMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallByteMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallByteMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallCharMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallCharMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallCharMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallShortMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallShortMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallShortMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallIntMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallIntMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallIntMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallLongMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallLongMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallLongMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallFloatMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallFloatMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallFloatMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallDoubleMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallDoubleMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallDoubleMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jmethodID, ...)' function_pointer='true' name='CallVoidMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallVoidMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jmethodID, jvalue *)' function_pointer='true' name='CallVoidMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualObjectMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualObjectMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualObjectMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualBooleanMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualBooleanMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualBooleanMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualByteMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualByteMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualByteMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualCharMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualCharMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualCharMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualShortMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualShortMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualShortMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualIntMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualIntMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualIntMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualLongMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualLongMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualLongMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualFloatMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualFloatMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualFloatMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualDoubleMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualDoubleMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualDoubleMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jclass, jmethodID, ...)' function_pointer='true' name='CallNonvirtualVoidMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallNonvirtualVoidMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallNonvirtualVoidMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jfieldID (*)(JNIEnv *, jclass, char *, char *)' function_pointer='true' name='GetFieldID' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jfieldID' type64='^{_jfieldID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetObjectField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetBooleanField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetByteField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetCharField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetShortField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetIntField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetLongField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetFloatField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jobject, jfieldID)' function_pointer='true' name='GetDoubleField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jobject)' function_pointer='true' name='SetObjectField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jboolean)' function_pointer='true' name='SetBooleanField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jbyte)' function_pointer='true' name='SetByteField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jbyte' type64='c'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jchar)' function_pointer='true' name='SetCharField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jchar' type64='S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jshort)' function_pointer='true' name='SetShortField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jshort' type64='s'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jint)' function_pointer='true' name='SetIntField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jlong)' function_pointer='true' name='SetLongField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jfloat)' function_pointer='true' name='SetFloatField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jfloat' type64='f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobject, jfieldID, jdouble)' function_pointer='true' name='SetDoubleField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jdouble' type64='d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jmethodID (*)(JNIEnv *, jclass, char *, char *)' function_pointer='true' name='GetStaticMethodID' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jmethodID' type64='^{_jmethodID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticObjectMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticObjectMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticObjectMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticBooleanMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticBooleanMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticBooleanMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticByteMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticByteMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticByteMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticCharMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticCharMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticCharMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticShortMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticShortMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticShortMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticIntMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticIntMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticIntMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticLongMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticLongMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticLongMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticFloatMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticFloatMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticFloatMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticDoubleMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticDoubleMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticDoubleMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jmethodID, ...)' function_pointer='true' name='CallStaticVoidMethod' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jmethodID, struct __va_list_tag *)' function_pointer='true' name='CallStaticVoidMethodV' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg declared_type64='struct __va_list_tag*' type64='^{__va_list_tag=II^v^v}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jmethodID, jvalue *)' function_pointer='true' name='CallStaticVoidMethodA' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jmethodID' type64='^{_jmethodID=}'/>
<arg const='true' declared_type64='jvalue*' type64='^(jvalue=CcSsiqfd^{_jobject})'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jfieldID (*)(JNIEnv *, jclass, char *, char *)' function_pointer='true' name='GetStaticFieldID' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jfieldID' type64='^{_jfieldID=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticObjectField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticBooleanField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jbyte (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticByteField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jbyte' type64='c'/>
</field>
<field declared_type64='jchar (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticCharField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jchar' type64='S'/>
</field>
<field declared_type64='jshort (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticShortField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jshort' type64='s'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticIntField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticLongField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jfloat (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticFloatField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jfloat' type64='f'/>
</field>
<field declared_type64='jdouble (*)(JNIEnv *, jclass, jfieldID)' function_pointer='true' name='GetStaticDoubleField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<retval declared_type64='jdouble' type64='d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jobject)' function_pointer='true' name='SetStaticObjectField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jboolean)' function_pointer='true' name='SetStaticBooleanField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jboolean' type64='C'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jbyte)' function_pointer='true' name='SetStaticByteField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jbyte' type64='c'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jchar)' function_pointer='true' name='SetStaticCharField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jchar' type64='S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jshort)' function_pointer='true' name='SetStaticShortField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jshort' type64='s'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jint)' function_pointer='true' name='SetStaticIntField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jlong)' function_pointer='true' name='SetStaticLongField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jfloat)' function_pointer='true' name='SetStaticFloatField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jfloat' type64='f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jclass, jfieldID, jdouble)' function_pointer='true' name='SetStaticDoubleField' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jfieldID' type64='^{_jfieldID=}'/>
<arg declared_type64='jdouble' type64='d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jstring (*)(JNIEnv *, jchar *, jsize)' function_pointer='true' name='NewString' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jstring' type64='^{_jobject=}'/>
</field>
<field declared_type64='jsize (*)(JNIEnv *, jstring)' function_pointer='true' name='GetStringLength' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<retval declared_type64='jsize' type64='i'/>
</field>
<field const='true' declared_type64='jchar *(*)(JNIEnv *, jstring, jboolean *)' function_pointer='true' name='GetStringChars' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval const='true' declared_type64='jchar*' type64='^S'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, jchar *)' function_pointer='true' name='ReleaseStringChars' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jstring (*)(JNIEnv *, char *)' function_pointer='true' name='NewStringUTF' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='jstring' type64='^{_jobject=}'/>
</field>
<field declared_type64='jsize (*)(JNIEnv *, jstring)' function_pointer='true' name='GetStringUTFLength' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<retval declared_type64='jsize' type64='i'/>
</field>
<field const='true' declared_type64='char *(*)(JNIEnv *, jstring, jboolean *)' function_pointer='true' name='GetStringUTFChars' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval const='true' declared_type64='char*' type64='*'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, char *)' function_pointer='true' name='ReleaseStringUTFChars' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jsize (*)(JNIEnv *, jarray)' function_pointer='true' name='GetArrayLength' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jarray' type64='^{_jobject=}'/>
<retval declared_type64='jsize' type64='i'/>
</field>
<field declared_type64='jobjectArray (*)(JNIEnv *, jsize, jclass, jobject)' function_pointer='true' name='NewObjectArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobjectArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, jobjectArray, jsize)' function_pointer='true' name='GetObjectArrayElement' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobjectArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jobjectArray, jsize, jobject)' function_pointer='true' name='SetObjectArrayElement' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobjectArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jbooleanArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewBooleanArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jbooleanArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jbyteArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewByteArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jbyteArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jcharArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewCharArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jcharArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jshortArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewShortArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jshortArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jintArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewIntArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jintArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jlongArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewLongArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jlongArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jfloatArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewFloatArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jfloatArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jdoubleArray (*)(JNIEnv *, jsize)' function_pointer='true' name='NewDoubleArray' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' type64='i'/>
<retval declared_type64='jdoubleArray' type64='^{_jobject=}'/>
</field>
<field declared_type64='jboolean *(*)(JNIEnv *, jbooleanArray, jboolean *)' function_pointer='true' name='GetBooleanArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbooleanArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jboolean*' type64='*'/>
</field>
<field declared_type64='jbyte *(*)(JNIEnv *, jbyteArray, jboolean *)' function_pointer='true' name='GetByteArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbyteArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jbyte*' type64='*'/>
</field>
<field declared_type64='jchar *(*)(JNIEnv *, jcharArray, jboolean *)' function_pointer='true' name='GetCharArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jcharArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jchar*' type64='^S'/>
</field>
<field declared_type64='jshort *(*)(JNIEnv *, jshortArray, jboolean *)' function_pointer='true' name='GetShortArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jshortArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jshort*' type64='^s'/>
</field>
<field declared_type64='jint *(*)(JNIEnv *, jintArray, jboolean *)' function_pointer='true' name='GetIntArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jintArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jint*' type64='^i'/>
</field>
<field declared_type64='jlong *(*)(JNIEnv *, jlongArray, jboolean *)' function_pointer='true' name='GetLongArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jlongArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jlong*' type64='^q'/>
</field>
<field declared_type64='jfloat *(*)(JNIEnv *, jfloatArray, jboolean *)' function_pointer='true' name='GetFloatArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jfloatArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jfloat*' type64='^f'/>
</field>
<field declared_type64='jdouble *(*)(JNIEnv *, jdoubleArray, jboolean *)' function_pointer='true' name='GetDoubleArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jdoubleArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='jdouble*' type64='^d'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbooleanArray, jboolean *, jint)' function_pointer='true' name='ReleaseBooleanArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbooleanArray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbyteArray, jbyte *, jint)' function_pointer='true' name='ReleaseByteArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbyteArray' type64='^{_jobject=}'/>
<arg declared_type64='jbyte*' type64='*'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jcharArray, jchar *, jint)' function_pointer='true' name='ReleaseCharArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jcharArray' type64='^{_jobject=}'/>
<arg declared_type64='jchar*' type64='^S'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jshortArray, jshort *, jint)' function_pointer='true' name='ReleaseShortArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jshortArray' type64='^{_jobject=}'/>
<arg declared_type64='jshort*' type64='^s'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jintArray, jint *, jint)' function_pointer='true' name='ReleaseIntArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jintArray' type64='^{_jobject=}'/>
<arg declared_type64='jint*' type64='^i'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jlongArray, jlong *, jint)' function_pointer='true' name='ReleaseLongArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jlongArray' type64='^{_jobject=}'/>
<arg declared_type64='jlong*' type64='^q'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jfloatArray, jfloat *, jint)' function_pointer='true' name='ReleaseFloatArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jfloatArray' type64='^{_jobject=}'/>
<arg declared_type64='jfloat*' type64='^f'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jdoubleArray, jdouble *, jint)' function_pointer='true' name='ReleaseDoubleArrayElements' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jdoubleArray' type64='^{_jobject=}'/>
<arg declared_type64='jdouble*' type64='^d'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbooleanArray, jsize, jsize, jboolean *)' function_pointer='true' name='GetBooleanArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbooleanArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbyteArray, jsize, jsize, jbyte *)' function_pointer='true' name='GetByteArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbyteArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jbyte*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jcharArray, jsize, jsize, jchar *)' function_pointer='true' name='GetCharArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jcharArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jshortArray, jsize, jsize, jshort *)' function_pointer='true' name='GetShortArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jshortArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jshort*' type64='^s'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jintArray, jsize, jsize, jint *)' function_pointer='true' name='GetIntArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jintArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jint*' type64='^i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jlongArray, jsize, jsize, jlong *)' function_pointer='true' name='GetLongArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jlongArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jlong*' type64='^q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jfloatArray, jsize, jsize, jfloat *)' function_pointer='true' name='GetFloatArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jfloatArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jfloat*' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jdoubleArray, jsize, jsize, jdouble *)' function_pointer='true' name='GetDoubleArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jdoubleArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jdouble*' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbooleanArray, jsize, jsize, jboolean *)' function_pointer='true' name='SetBooleanArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbooleanArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jboolean*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jbyteArray, jsize, jsize, jbyte *)' function_pointer='true' name='SetByteArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jbyteArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jbyte*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jcharArray, jsize, jsize, jchar *)' function_pointer='true' name='SetCharArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jcharArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jshortArray, jsize, jsize, jshort *)' function_pointer='true' name='SetShortArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jshortArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jshort*' type64='^s'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jintArray, jsize, jsize, jint *)' function_pointer='true' name='SetIntArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jintArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jint*' type64='^i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jlongArray, jsize, jsize, jlong *)' function_pointer='true' name='SetLongArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jlongArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jlong*' type64='^q'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jfloatArray, jsize, jsize, jfloat *)' function_pointer='true' name='SetFloatArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jfloatArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jfloat*' type64='^f'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jdoubleArray, jsize, jsize, jdouble *)' function_pointer='true' name='SetDoubleArrayRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jdoubleArray' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg const='true' declared_type64='jdouble*' type64='^d'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass, JNINativeMethod *, jint)' function_pointer='true' name='RegisterNatives' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<arg const='true' declared_type64='JNINativeMethod*' type64='^{_JNINativeMethod=**^v}'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jclass)' function_pointer='true' name='UnregisterNatives' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jclass' type64='^{_jobject=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject)' function_pointer='true' name='MonitorEnter' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, jobject)' function_pointer='true' name='MonitorExit' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JNIEnv *, JavaVM **)' function_pointer='true' name='GetJavaVM' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JavaVM**' type64='^^^{JNIInvokeInterface_}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, jsize, jsize, jchar *)' function_pointer='true' name='GetStringRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, jsize, jsize, char *)' function_pointer='true' name='GetStringUTFRegion' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='jsize' type64='i'/>
<arg declared_type64='char*' type64='*'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='void *(*)(JNIEnv *, jarray, jboolean *)' function_pointer='true' name='GetPrimitiveArrayCritical' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jarray' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jarray, void *, jint)' function_pointer='true' name='ReleasePrimitiveArrayCritical' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jarray' type64='^{_jobject=}'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='void' type64='v'/>
</field>
<field const='true' declared_type64='jchar *(*)(JNIEnv *, jstring, jboolean *)' function_pointer='true' name='GetStringCritical' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg declared_type64='jboolean*' type64='*'/>
<retval const='true' declared_type64='jchar*' type64='^S'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jstring, jchar *)' function_pointer='true' name='ReleaseStringCritical' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' type64='^{_jobject=}'/>
<arg const='true' declared_type64='jchar*' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jweak (*)(JNIEnv *, jobject)' function_pointer='true' name='NewWeakGlobalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jweak' type64='^{_jobject=}'/>
</field>
<field declared_type64='void (*)(JNIEnv *, jweak)' function_pointer='true' name='DeleteWeakGlobalRef' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jweak' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</field>
<field declared_type64='jboolean (*)(JNIEnv *)' function_pointer='true' name='ExceptionCheck' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jboolean' type64='C'/>
</field>
<field declared_type64='jobject (*)(JNIEnv *, void *, jlong)' function_pointer='true' name='NewDirectByteBuffer' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='void*' type64='^v'/>
<arg declared_type64='jlong' type64='q'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</field>
<field declared_type64='void *(*)(JNIEnv *, jobject)' function_pointer='true' name='GetDirectBufferAddress' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='void*' type64='^v'/>
</field>
<field declared_type64='jlong (*)(JNIEnv *, jobject)' function_pointer='true' name='GetDirectBufferCapacity' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jlong' type64='q'/>
</field>
<field declared_type64='jobjectRefType (*)(JNIEnv *, jobject)' function_pointer='true' name='GetObjectRefType' type64='^?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' type64='^{_jobject=}'/>
<retval declared_type64='jobjectRefType' type64='i'/>
</field>
</struct>
<struct name='JNINativeMethod' type64='{_JNINativeMethod=&quot;name&quot;*&quot;signature&quot;*&quot;fnPtr&quot;^v}'>
<field declared_type64='char*' name='name' type64='*'/>
<field declared_type64='char*' name='signature' type64='*'/>
<field declared_type64='void*' name='fnPtr' type64='^v'/>
</struct>
<struct name='JavaVM' type64='{JNIInvokeInterface_=&quot;reserved0&quot;^v&quot;reserved1&quot;^v&quot;reserved2&quot;^v&quot;DestroyJavaVM&quot;^?&quot;AttachCurrentThread&quot;^?&quot;DetachCurrentThread&quot;^?&quot;GetEnv&quot;^?&quot;AttachCurrentThreadAsDaemon&quot;^?}'>
<field declared_type64='void*' name='reserved0' type64='^v'/>
<field declared_type64='void*' name='reserved1' type64='^v'/>
<field declared_type64='void*' name='reserved2' type64='^v'/>
<field declared_type64='jint (*)(JavaVM *)' function_pointer='true' name='DestroyJavaVM' type64='^?'>
<arg declared_type64='JavaVM*' type64='^^{JNIInvokeInterface_}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JavaVM *, void **, void *)' function_pointer='true' name='AttachCurrentThread' type64='^?'>
<arg declared_type64='JavaVM*' type64='^^{JNIInvokeInterface_}'/>
<arg declared_type64='void**' type64='^^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JavaVM *)' function_pointer='true' name='DetachCurrentThread' type64='^?'>
<arg declared_type64='JavaVM*' type64='^^{JNIInvokeInterface_}'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JavaVM *, void **, jint)' function_pointer='true' name='GetEnv' type64='^?'>
<arg declared_type64='JavaVM*' type64='^^{JNIInvokeInterface_}'/>
<arg declared_type64='void**' type64='^^v'/>
<arg declared_type64='jint' type64='i'/>
<retval declared_type64='jint' type64='i'/>
</field>
<field declared_type64='jint (*)(JavaVM *, void **, void *)' function_pointer='true' name='AttachCurrentThreadAsDaemon' type64='^?'>
<arg declared_type64='JavaVM*' type64='^^{JNIInvokeInterface_}'/>
<arg declared_type64='void**' type64='^^v'/>
<arg declared_type64='void*' type64='^v'/>
<retval declared_type64='jint' type64='i'/>
</field>
</struct>
<struct name='JavaVMAttachArgs' type64='{JavaVMAttachArgs=&quot;version&quot;i&quot;name&quot;*&quot;group&quot;^{_jobject}}'>
<field declared_type64='jint' name='version' type64='i'/>
<field declared_type64='char*' name='name' type64='*'/>
<field declared_type64='jobject' name='group' type64='^{_jobject=}'/>
</struct>
<struct name='JavaVMInitArgs' type64='{JavaVMInitArgs=&quot;version&quot;i&quot;nOptions&quot;i&quot;options&quot;^{JavaVMOption}&quot;ignoreUnrecognized&quot;C}'>
<field declared_type64='jint' name='version' type64='i'/>
<field declared_type64='jint' name='nOptions' type64='i'/>
<field declared_type64='JavaVMOption*' name='options' type64='^{JavaVMOption=*^v}'/>
<field declared_type64='jboolean' name='ignoreUnrecognized' type64='C'/>
</struct>
<struct name='JavaVMOption' type64='{JavaVMOption=&quot;optionString&quot;*&quot;extraInfo&quot;^v}'>
<field declared_type64='char*' name='optionString' type64='*'/>
<field declared_type64='void*' name='extraInfo' type64='^v'/>
</struct>
<struct name='JavaVM_' type64='{JavaVM_=&quot;functions&quot;^{JNIInvokeInterface_}}'>
<field const='true' declared_type64='struct JNIInvokeInterface_*' name='functions' type64='^{JNIInvokeInterface_=^v^v^v^?^?^?^?^?}'/>
</struct>
<cftype name='jfieldID' type64='^{_jfieldID=}'/>
<cftype name='jmethodID' type64='^{_jmethodID=}'/>
<cftype name='jobject' type64='^{_jobject=}'/>
<constant declared_type64='NSString*' name='JNFRunLoopDidStartNotification' type64='@'/>
<constant const='true' declared_type64='char*' name='kClassNotFoundException' type64='*'/>
<constant const='true' declared_type64='char*' name='kIllegalAccessException' type64='*'/>
<constant const='true' declared_type64='char*' name='kIllegalArgumentException' type64='*'/>
<constant const='true' declared_type64='char*' name='kNoSuchFieldException' type64='*'/>
<constant const='true' declared_type64='char*' name='kNoSuchMethodException' type64='*'/>
<constant const='true' declared_type64='char*' name='kNullPointerException' type64='*'/>
<constant const='true' declared_type64='char*' name='kOutOfMemoryError' type64='*'/>
<constant const='true' declared_type64='char*' name='kRuntimeException' type64='*'/>
<enum name='JNFThreadAttachAsDaemon' value64='16'/>
<enum name='JNFThreadDetachImmediately' value64='2'/>
<enum name='JNFThreadDetachOnThreadDeath' value64='4'/>
<enum name='JNFThreadSetSystemClassLoaderOnAttach' value64='8'/>
<enum name='JNIGlobalRefType' value64='2'/>
<enum name='JNIInvalidRefType' value64='0'/>
<enum name='JNILocalRefType' value64='1'/>
<enum name='JNIWeakGlobalRefType' value64='3'/>
<enum name='JNI_ABORT' value64='2'/>
<enum name='JNI_COMMIT' value64='1'/>
<enum name='JNI_EDETACHED' value64='-2'/>
<enum name='JNI_EEXIST' value64='-5'/>
<enum name='JNI_EINVAL' value64='-6'/>
<enum name='JNI_ENOMEM' value64='-4'/>
<enum name='JNI_ERR' value64='-1'/>
<enum name='JNI_EVERSION' value64='-3'/>
<enum name='JNI_FALSE' value64='0'/>
<enum name='JNI_OK' value64='0'/>
<enum name='JNI_TRUE' value64='1'/>
<enum name='JNI_VERSION_1_1' value64='65537'/>
<enum name='JNI_VERSION_1_2' value64='65538'/>
<enum name='JNI_VERSION_1_4' value64='65540'/>
<enum name='JNI_VERSION_1_6' value64='65542'/>
<function name='JNFAssertionFailure'>
<arg const='true' declared_type64='char*' name='file' type64='*'/>
<arg declared_type64='int' name='line' type64='i'/>
<arg const='true' declared_type64='char*' name='condition' type64='*'/>
<arg const='true' declared_type64='char*' name='msg' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFCFToJavaBoolean'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='CFBooleanRef' name='b' type64='^{__CFBoolean=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFCallBooleanMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jboolean' type64='C'/>
</function>
<function name='JNFCallByteMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jbyte' type64='c'/>
</function>
<function name='JNFCallCharMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jchar' type64='S'/>
</function>
<function name='JNFCallDoubleMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jdouble' type64='d'/>
</function>
<function name='JNFCallFloatMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jfloat' type64='f'/>
</function>
<function name='JNFCallIntMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jint' type64='i'/>
</function>
<function name='JNFCallLongMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jlong' type64='q'/>
</function>
<function name='JNFCallObjectMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFCallShortMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jshort' type64='s'/>
</function>
<function name='JNFCallStaticBooleanMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jboolean' type64='C'/>
</function>
<function name='JNFCallStaticByteMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jbyte' type64='c'/>
</function>
<function name='JNFCallStaticCharMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jchar' type64='S'/>
</function>
<function name='JNFCallStaticDoubleMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jdouble' type64='d'/>
</function>
<function name='JNFCallStaticFloatMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jfloat' type64='f'/>
</function>
<function name='JNFCallStaticIntMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jint' type64='i'/>
</function>
<function name='JNFCallStaticLongMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jlong' type64='q'/>
</function>
<function name='JNFCallStaticObjectMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFCallStaticShortMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jshort' type64='s'/>
</function>
<function name='JNFCallStaticVoidMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFCallVoidMethod' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='method' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFDebugWarning' variadic='true'>
<arg const='true' declared_type64='char*' name='fmt' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFDeleteGlobalRef'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='globalRef' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFDeleteWeakGlobalRef'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='globalRef' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFDumpJavaStack'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFGetBooleanField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jboolean' type64='C'/>
</function>
<function name='JNFGetByteField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jbyte' type64='c'/>
</function>
<function name='JNFGetCharField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jchar' type64='S'/>
</function>
<function name='JNFGetDoubleField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jdouble' type64='d'/>
</function>
<function name='JNFGetFloatField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jfloat' type64='f'/>
</function>
<function name='JNFGetIntField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jint' type64='i'/>
</function>
<function name='JNFGetLongField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jlong' type64='q'/>
</function>
<function name='JNFGetObjectField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFGetShortField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jshort' type64='s'/>
</function>
<function name='JNFGetStaticBooleanField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jboolean' type64='C'/>
</function>
<function name='JNFGetStaticByteField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jbyte' type64='c'/>
</function>
<function name='JNFGetStaticCharField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jchar' type64='S'/>
</function>
<function name='JNFGetStaticDoubleField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jdouble' type64='d'/>
</function>
<function name='JNFGetStaticFloatField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jfloat' type64='f'/>
</function>
<function name='JNFGetStaticIntField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jint' type64='i'/>
</function>
<function name='JNFGetStaticLongField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jlong' type64='q'/>
</function>
<function name='JNFGetStaticObjectField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFGetStaticShortField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jshort' type64='s'/>
</function>
<function name='JNFGetStringUTF16UniChars'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' name='javaString' type64='^{_jobject=}'/>
<retval const='true' declared_type64='unichar*' type64='^S'/>
</function>
<function name='JNFGetStringUTF8Chars'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' name='javaString' type64='^{_jobject=}'/>
<retval const='true' declared_type64='char*' type64='*'/>
</function>
<function name='JNFIsInstanceOf'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFClassInfo*' name='clazz' type64='^{_JNFClassInfo=*^{_jobject}}'/>
<retval declared_type64='BOOL' type64='B'/>
</function>
<function name='JNFJavaMillisToNSTimeInterval'>
<arg declared_type64='jlong' name='javaMillisSince1970' type64='q'/>
<retval declared_type64='NSTimeInterval' type64='d'/>
</function>
<function name='JNFJavaToCFBoolean'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='b' type64='^{_jobject=}'/>
<retval declared_type64='CFBooleanRef' type64='^{__CFBoolean=}'/>
</function>
<function name='JNFJavaToNSDate'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='date' type64='^{_jobject=}'/>
<retval declared_type64='NSDate*' type64='@'/>
</function>
<function name='JNFJavaToNSNumber'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='n' type64='^{_jobject=}'/>
<retval declared_type64='NSNumber*' type64='@'/>
</function>
<function name='JNFJavaToNSString'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' name='javaString' type64='^{_jobject=}'/>
<retval declared_type64='NSString*' type64='@'/>
</function>
<function name='JNFNSTimeIntervalToJavaMillis'>
<arg declared_type64='NSTimeInterval' name='intervalSince2001' type64='d'/>
<retval declared_type64='jlong' type64='q'/>
</function>
<function name='JNFNSToJavaCalendar'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='NSDate*' name='date' type64='@'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFNSToJavaNumber'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='NSNumber*' name='n' type64='@'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFNSToJavaString'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='NSString*' name='nsString' type64='@'/>
<retval declared_type64='jstring' type64='^{_jobject=}'/>
</function>
<function name='JNFNativeMethodEnter'>
<retval declared_type64='JNFAutoreleasePoolToken*' type64='^v'/>
</function>
<function name='JNFNativeMethodExit'>
<arg declared_type64='JNFAutoreleasePoolToken*' name='token' type64='^v'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFNewBooleanArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jbooleanArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewByteArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jbyteArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewCharArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jcharArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewDoubleArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jdoubleArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewFloatArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jfloatArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewGlobalRef'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFNewIntArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jintArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewLongArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jlongArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewObject' variadic='true'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='constructor' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFNewObjectArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFClassInfo*' name='clazz' type64='^{_JNFClassInfo=*^{_jobject}}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jobjectArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewShortArray'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jsize' name='length' type64='i'/>
<retval declared_type64='jshortArray' type64='^{_jobject=}'/>
</function>
<function name='JNFNewWeakGlobalRef'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</function>
<function name='JNFNormalizedJavaStringForPath'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='NSString*' name='path' type64='@'/>
<retval declared_type64='jstring' type64='^{_jobject=}'/>
</function>
<function name='JNFNormalizedNSStringForPath'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' name='path' type64='^{_jobject=}'/>
<retval declared_type64='NSString*' type64='@'/>
</function>
<function name='JNFObjectClassName'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<retval declared_type64='NSString*' type64='@'/>
</function>
<function name='JNFObjectEquals'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='a' type64='^{_jobject=}'/>
<arg declared_type64='jobject' name='b' type64='^{_jobject=}'/>
<retval declared_type64='BOOL' type64='B'/>
</function>
<function name='JNFObjectToString'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<retval declared_type64='NSString*' type64='@'/>
</function>
<function name='JNFObtainEnv'>
<arg declared_type64='JNFThreadContext*' name='context' type64='^q'/>
<retval declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
</function>
<function name='JNFPerformEnvBlock'>
<arg declared_type64='JNFThreadContext' name='context' type64='q'/>
<arg declared_type64='JNIEnvBlock' function_pointer='true' name='block' type64='@?'>
<arg declared_type64='JNIEnv*' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFReleaseEnv'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFThreadContext*' name='context' type64='^q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFReleaseStringUTF16UniChars'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' name='javaString' type64='^{_jobject=}'/>
<arg const='true' declared_type64='unichar*' name='unichars' type64='^S'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFReleaseStringUTF8Chars'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jstring' name='javaString' type64='^{_jobject=}'/>
<arg const='true' declared_type64='char*' name='chars' type64='*'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetBooleanField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jboolean' name='val' type64='C'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetByteField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jbyte' name='val' type64='c'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetCharField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jchar' name='val' type64='S'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetDoubleField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jdouble' name='val' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetFloatField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jfloat' name='val' type64='f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetIntField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jint' name='val' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetLongField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jlong' name='val' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetObjectField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jobject' name='val' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetShortField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jobject' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jshort' name='val' type64='s'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticBooleanField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jboolean' name='val' type64='C'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticByteField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jbyte' name='val' type64='c'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticCharField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jchar' name='val' type64='S'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticDoubleField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jdouble' name='val' type64='d'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticFloatField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jfloat' name='val' type64='f'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticIntField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jint' name='val' type64='i'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticLongField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jlong' name='val' type64='q'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticObjectField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jobject' name='val' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</function>
<function name='JNFSetStaticShortField'>
<arg declared_type64='JNIEnv*' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFMemberInfo*' name='field' type64='^{_JNFMemberInfo=**B^{_JNFClassInfo}(_j=^{_jfieldID}^{_jmethodID})}'/>
<arg declared_type64='jshort' name='val' type64='s'/>
<retval declared_type64='void' type64='v'/>
</function>
<function_alias name='JNF_WARN' original='JNFDebugWarning'/>
<class name='JNFDefaultCoercions'>
<method class_method='true' selector='addDateCoercionTo:'>
<arg declared_type64='JNFTypeCoercer*' index='0' name='coercer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='addListCoercionTo:'>
<arg declared_type64='JNFTypeCoercer*' index='0' name='coercer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='addMapCoercionTo:'>
<arg declared_type64='JNFTypeCoercer*' index='0' name='coercer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='addNumberCoercionTo:'>
<arg declared_type64='JNFTypeCoercer*' index='0' name='coercer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='addSetCoercionTo:'>
<arg declared_type64='JNFTypeCoercer*' index='0' name='coercer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='addStringCoercionTo:'>
<arg declared_type64='JNFTypeCoercer*' index='0' name='coercer' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='defaultCoercer'>
<retval declared_type64='JNFTypeCoercer*' type64='@'/>
</method>
</class>
<class name='JNFException'>
<method selector='init:as:reason:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' index='1' name='javaExceptionType' type64='*'/>
<arg const='true' declared_type64='char*' index='2' name='reasonMsg' type64='*'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='init:throwable:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthrowable' index='1' name='throwable' type64='^{_jobject=}'/>
<retval declared_type64='id' type64='@'/>
</method>
<method class_method='true' selector='raise:as:reason:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<arg const='true' declared_type64='char*' index='1' name='javaExceptionType' type64='*'/>
<arg const='true' declared_type64='char*' index='2' name='reasonMsg' type64='*'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='raise:throwable:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='jthrowable' index='1' name='throwable' type64='^{_jobject=}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='raiseToJava:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='raiseUnnamedException:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='throwToJava:exception:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='NSException*' index='1' name='exception' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='throwToJava:exception:as:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='NSException*' index='1' name='exception' type64='@'/>
<arg const='true' declared_type64='char*' index='2' name='javaExceptionType' type64='*'/>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='JNFJObjectWrapper'>
<method selector='initWithJObject:withEnv:'>
<arg declared_type64='jobject' index='0' name='jObjectIn' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='jObject'>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</method>
<method selector='jObjectWithEnv:'>
<arg declared_type64='JNIEnv*' index='0' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</method>
<method selector='setJObject:withEnv:'>
<arg declared_type64='jobject' index='0' name='jObjectIn' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='wrapperWithJObject:withEnv:'>
<arg declared_type64='jobject' index='0' name='jObjectIn' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='JNFJObjectWrapper*' type64='@'/>
</method>
</class>
<class name='JNFRunLoop'>
<method class_method='true' selector='javaRunLoopMode'>
<retval declared_type64='NSString*' type64='@'/>
</method>
<method class_method='true' selector='performOnMainThread:on:withObject:waitUntilDone:'>
<arg declared_type64='SEL' index='0' name='aSelector' type64=':'/>
<arg declared_type64='id' index='1' name='target' type64='@'/>
<arg declared_type64='id' index='2' name='arg' type64='@'/>
<arg declared_type64='BOOL' index='3' name='wait' type64='B'/>
<retval declared_type64='void' type64='v'/>
</method>
<method class_method='true' selector='performOnMainThreadWaiting:withBlock:'>
<arg declared_type64='BOOL' index='0' name='waitUntilDone' type64='B'/>
<arg declared_type64='void (^)(void)' function_pointer='true' index='1' name='block' type64='@?'>
<retval declared_type64='void' type64='v'/>
</arg>
<retval declared_type64='void' type64='v'/>
</method>
</class>
<class name='JNFRunnable'>
<method class_method='true' selector='blockWithRunnable:withEnv:'>
<arg declared_type64='jobject' index='0' name='runnable' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='void (^)(void)' function_pointer='true' type64='@?'>
<retval declared_type64='void' type64='v'/>
</retval>
</method>
<method class_method='true' selector='invocationWithRunnable:withEnv:'>
<arg declared_type64='jobject' index='0' name='runnable' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='NSInvocation*' type64='@'/>
</method>
</class>
<class name='JNFTypeCoercer'>
<method selector='addCoercion:forNSClass:javaClass:'>
<arg declared_type64='NSObject*' index='0' name='coercion' type64='@'/>
<arg declared_type64='Class' index='1' name='nsClass' type64='#'/>
<arg declared_type64='NSString*' index='2' name='javaClassName' type64='@'/>
<retval declared_type64='void' type64='v'/>
</method>
<method selector='coerceJavaObject:withEnv:'>
<arg declared_type64='jobject' index='0' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='coerceNSObject:withEnv:'>
<arg declared_type64='id' index='0' name='obj' type64='@'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</method>
<method selector='deriveCoercer'>
<retval declared_type64='JNFTypeCoercer*' type64='@'/>
</method>
<method selector='init'>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='initWithParent:'>
<arg declared_type64='NSObject*' index='0' name='parentIn' type64='@'/>
<retval declared_type64='id' type64='@'/>
</method>
</class>
<class name='JNFWeakJObjectWrapper'>
<method class_method='true' selector='wrapperWithJObject:withEnv:'>
<arg declared_type64='jobject' index='0' name='jObjectIn' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<retval declared_type64='JNFWeakJObjectWrapper*' type64='@'/>
</method>
</class>
<class name='NSObject'>
<method selector='coerceJavaObject:withEnv:usingCoercer:'>
<arg declared_type64='jobject' index='0' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFTypeCoercion*' index='2' name='coercer' type64='@'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='coerceNSObject:withEnv:usingCoercer:'>
<arg declared_type64='id' index='0' name='obj' type64='@'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFTypeCoercion*' index='2' name='coercer' type64='@'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</method>
</class>
<informal_protocol name='JNFTypeCoercion'>
<method selector='coerceJavaObject:withEnv:usingCoercer:' type64='@40@0:8^{_jobject=}16r^^{JNINativeInterface_}24@32'>
<arg declared_type64='jobject' index='0' name='obj' type64='^{_jobject=}'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFTypeCoercion*' index='2' name='coercer' type64='@'/>
<retval declared_type64='id' type64='@'/>
</method>
<method selector='coerceNSObject:withEnv:usingCoercer:' type64='^{_jobject=}40@0:8@16r^^{JNINativeInterface_}24@32'>
<arg declared_type64='id' index='0' name='obj' type64='@'/>
<arg declared_type64='JNIEnv*' index='1' name='env' type64='^^{JNINativeInterface_}'/>
<arg declared_type64='JNFTypeCoercion*' index='2' name='coercer' type64='@'/>
<retval declared_type64='jobject' type64='^{_jobject=}'/>
</method>
</informal_protocol>
</signatures>
